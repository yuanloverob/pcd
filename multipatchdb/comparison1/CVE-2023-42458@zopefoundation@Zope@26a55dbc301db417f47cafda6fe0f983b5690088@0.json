{
  "cve_id": "CVE-2023-42458",
  "cve_desc": "Zope is an open-source web application server. Prior to versions 4.8.10 and 5.8.5, there is a stored cross site scripting vulnerability for SVG images. Note that an image tag with an SVG image as source is never vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link. Patches are available in Zope 4.8.10 and 5.8.5. As a workaround, make sure the \"Add Documents, Images, and Files\" permission is only assigned to trusted roles. By default, only the Manager has this permission.",
  "repo": "zopefoundation/Zope",
  "patch_hash": "26a55dbc301db417f47cafda6fe0f983b5690088",
  "patch_info": {
    "commit_hash": "26a55dbc301db417f47cafda6fe0f983b5690088",
    "repo": "zopefoundation/Zope",
    "commit_url": "https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088",
    "files": [
      "CHANGES.rst",
      "src/OFS/Image.py",
      "src/OFS/tests/testFileAndImage.py"
    ],
    "message": "Merge pull request from GHSA-wm8q-9975-xh5v\n\n* Allow only some image types to be displayed inline.\n\nForce download for others, especially SVG images.  By default we use a list of allowed types.\nYou can switch a to a list of denied types by setting OS environment variable\n``OFS_IMAGE_USE_DENYLIST=1``.  This change only affects direct URL access.\n``<img src=\"image.svg\" />`` works the same as before.\n\nSee security advisory:\nhttps://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v\n\n* svg download: only encode filename when it is not bytes.\n\nOn Python 2.7 it is already bytes.\n\n* Use guess_extension as first guess for the extension of an image.\n\n* Support overriding ALLOWED_INLINE_MIMETYPES and DISALLOWED_INLINE_MIMETYPES.\n\n* Test that filename of attachment gets encoded correctly.\n\n* Add CVE\n\n---------\n\nCo-authored-by: Michael Howitz <icemac@gmx.net>",
    "before_after_code_files": [
      "src/OFS/Image.py||src/OFS/Image.py",
      "src/OFS/tests/testFileAndImage.py||src/OFS/tests/testFileAndImage.py"
    ]
  },
  "patch_diff": {
    "src/OFS/Image.py||src/OFS/Image.py": [
      "File: src/OFS/Image.py -> src/OFS/Image.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: \"\"\"Image object",
      "14: \"\"\"",
      "16: import struct",
      "17: from email.generator import _make_boundary",
      "18: from io import BytesIO",
      "19: from io import TextIOBase",
      "20: from tempfile import TemporaryFile",
      "21: from warnings import warn",
      "23: from six import PY2",
      "24: from six import binary_type",
      "25: from six import text_type",
      "27: import ZPublisher.HTTPRequest",
      "28: from AccessControl.class_init import InitializeClass",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: import os",
      "21: from mimetypes import guess_extension",
      "28: from six.moves.urllib.parse import quote",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     from cgi import escape",
      "64: manage_addFileForm = DTMLFile(",
      "65:     'dtml/imageAdd',",
      "66:     globals(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: def _get_list_from_env(name, default=None):",
      "68:     \"\"\"Get list from environment variable.",
      "70:     Supports splitting on comma or white space.",
      "71:     Use the default as fallback only when the variable is not set.",
      "72:     So if the env variable is set to an empty string, this will ignore the",
      "73:     default and return an empty list.",
      "74:     \"\"\"",
      "75:     value = os.environ.get(name)",
      "76:     if value is None:",
      "77:         return default or []",
      "78:     value = value.strip()",
      "79:     if \",\" in value:",
      "80:         return value.split(\",\")",
      "81:     return value.split()",
      "84: # We have one list for allowed, and one for disallowed inline mimetypes.",
      "85: # This is for security purposes.",
      "86: # By default we use the allowlist.  We give integrators the option to choose",
      "87: # the denylist via an environment variable.",
      "88: ALLOWED_INLINE_MIMETYPES = _get_list_from_env(",
      "89:     \"ALLOWED_INLINE_MIMETYPES\",",
      "90:     default=[",
      "91:         \"image/gif\",",
      "92:         # The mimetypes registry lists several for jpeg 2000:",
      "93:         \"image/jp2\",",
      "94:         \"image/jpeg\",",
      "95:         \"image/jpeg2000-image\",",
      "96:         \"image/jpeg2000\",",
      "97:         \"image/jpx\",",
      "98:         \"image/png\",",
      "99:         \"image/webp\",",
      "100:         \"image/x-icon\",",
      "101:         \"image/x-jpeg2000-image\",",
      "102:         \"text/plain\",",
      "103:         # By popular request we allow PDF:",
      "104:         \"application/pdf\",",
      "105:     ]",
      "106: )",
      "107: DISALLOWED_INLINE_MIMETYPES = _get_list_from_env(",
      "108:     \"DISALLOWED_INLINE_MIMETYPES\",",
      "109:     default=[",
      "110:         \"application/javascript\",",
      "111:         \"application/x-javascript\",",
      "112:         \"text/javascript\",",
      "113:         \"text/html\",",
      "114:         \"image/svg+xml\",",
      "115:         \"image/svg+xml-compressed\",",
      "116:     ]",
      "117: )",
      "118: try:",
      "119:     USE_DENYLIST = os.environ.get(\"OFS_IMAGE_USE_DENYLIST\")",
      "120:     USE_DENYLIST = bool(int(USE_DENYLIST))",
      "121: except (ValueError, TypeError, AttributeError):",
      "122:     USE_DENYLIST = False",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "120:     Cacheable",
      "121: ):",
      "122:     \"\"\"A File object is a content object for arbitrary files.\"\"\"",
      "124:     meta_type = 'File'",
      "125:     zmi_icon = 'far fa-file-archive'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:     # You can control which mimetypes may be shown inline",
      "185:     # and which must always be downloaded, for security reasons.",
      "186:     # Make the configuration available on the class.",
      "187:     # Then subclasses can override this.",
      "188:     allowed_inline_mimetypes = ALLOWED_INLINE_MIMETYPES",
      "189:     disallowed_inline_mimetypes = DISALLOWED_INLINE_MIMETYPES",
      "190:     use_denylist = USE_DENYLIST",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "418:                         b'\\r\\n--' + boundary.encode('ascii') + b'--\\r\\n')",
      "419:                     return True",
      "421:     @security.protected(View)",
      "422:     def index_html(self, REQUEST, RESPONSE):",
      "423:         \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "489:     def _should_force_download(self):",
      "490:         # If this returns True, the caller should set a",
      "491:         # Content-Disposition header with filename.",
      "492:         mimetype = self.content_type",
      "493:         if not mimetype:",
      "494:             return False",
      "495:         if self.use_denylist:",
      "496:             # We explicitly deny a few mimetypes, and allow the rest.",
      "497:             return mimetype in self.disallowed_inline_mimetypes",
      "498:         # Use the allowlist.",
      "499:         # We only explicitly allow a few mimetypes, and deny the rest.",
      "500:         return mimetype not in self.allowed_inline_mimetypes",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "456:         RESPONSE.setHeader('Content-Length', self.size)",
      "457:         RESPONSE.setHeader('Accept-Ranges', 'bytes')",
      "459:         if self.ZCacheable_isCachingEnabled():",
      "460:             result = self.ZCacheable_get(default=None)",
      "461:             if result is not None:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "540:         if self._should_force_download():",
      "541:             # We need a filename, even a dummy one if needed.",
      "542:             filename = self.getId()",
      "543:             if \".\" not in filename:",
      "544:                 # This either returns None or \".some_extension\"",
      "545:                 ext = guess_extension(self.content_type, strict=False)",
      "546:                 if not ext:",
      "547:                     # image/svg+xml -> svg",
      "548:                     ext = \".\" + self.content_type.split(\"/\")[-1].split(\"+\")[0]",
      "549:                 filename += ext",
      "550:             if not isinstance(filename, bytes):",
      "551:                 filename = filename.encode(\"utf8\")",
      "552:             filename = quote(filename)",
      "553:             RESPONSE.setHeader(",
      "554:                 \"Content-Disposition\",",
      "555:                 \"attachment; filename*=UTF-8''{}\".format(filename),",
      "556:             )",
      "",
      "---------------"
    ],
    "src/OFS/tests/testFileAndImage.py||src/OFS/tests/testFileAndImage.py": [
      "File: src/OFS/tests/testFileAndImage.py -> src/OFS/tests/testFileAndImage.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "368:         response = request.RESPONSE",
      "369:         result = self.file.index_html(request, response)",
      "370:         self.assertEqual(result, self.data)",
      "372:     def test_interfaces(self):",
      "373:         from OFS.Image import Image",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "371:         self.assertIsNone(response.getHeader(\"Content-Disposition\"))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "382:                          ' alt=\"\" title=\"\" height=\"16\" width=\"16\" />')",
      "385: class FileEditTests(Testing.ZopeTestCase.FunctionalTestCase):",
      "386:     \"\"\"Browser testing ..Image.File\"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "386: class SVGTests(ImageTests):",
      "387:     content_type = 'image/svg+xml'",
      "389:     def testViewImageOrFile(self):",
      "390:         request = self.app.REQUEST",
      "391:         response = request.RESPONSE",
      "392:         result = self.file.index_html(request, response)",
      "393:         self.assertEqual(result, self.data)",
      "394:         self.assertEqual(",
      "395:             response.getHeader(\"Content-Disposition\"),",
      "396:             \"attachment; filename*=UTF-8''file.svg\",",
      "397:         )",
      "399:     def testViewImageOrFileNonAscii(self):",
      "400:         try:",
      "401:             factory = getattr(self.app, self.factory)",
      "402:             factory('h\u00e4llo',",
      "403:                     file=self.data, content_type=self.content_type)",
      "404:             transaction.commit()",
      "405:         except Exception:",
      "406:             transaction.abort()",
      "407:             self.connection.close()",
      "408:             raise",
      "409:         transaction.begin()",
      "410:         image = getattr(self.app, 'h\u00e4llo')",
      "411:         request = self.app.REQUEST",
      "412:         response = request.RESPONSE",
      "413:         result = image.index_html(request, response)",
      "414:         self.assertEqual(result, self.data)",
      "415:         self.assertEqual(",
      "416:             response.getHeader(\"Content-Disposition\"),",
      "417:             \"attachment; filename*=UTF-8''h%C3%A4llo.svg\",",
      "418:         )",
      "420:     def testViewImageOrFile_with_denylist(self):",
      "421:         request = self.app.REQUEST",
      "422:         response = request.RESPONSE",
      "423:         self.file.use_denylist = True",
      "424:         result = self.file.index_html(request, response)",
      "425:         self.assertEqual(result, self.data)",
      "426:         self.assertEqual(",
      "427:             response.getHeader(\"Content-Disposition\"),",
      "428:             \"attachment; filename*=UTF-8''file.svg\",",
      "429:         )",
      "431:     def testViewImageOrFile_with_empty_denylist(self):",
      "432:         request = self.app.REQUEST",
      "433:         response = request.RESPONSE",
      "434:         self.file.use_denylist = True",
      "435:         self.file.disallowed_inline_mimetypes = []",
      "436:         result = self.file.index_html(request, response)",
      "437:         self.assertEqual(result, self.data)",
      "438:         self.assertIsNone(response.getHeader(\"Content-Disposition\"))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "603b0a12881c90a072a7a65e32d47ed898ce37cb",
      "candidate_info": {
        "commit_hash": "603b0a12881c90a072a7a65e32d47ed898ce37cb",
        "repo": "zopefoundation/Zope",
        "commit_url": "https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb",
        "files": [
          "CHANGES.rst",
          "src/OFS/Image.py",
          "src/OFS/tests/testFileAndImage.py"
        ],
        "message": "Merge pull request from GHSA-wm8q-9975-xh5v\n\n* Allow only some image types to be displayed inline.\n\nForce download for others, especially SVG images.  By default we use a list of allowed types.\nYou can switch a to a list of denied types by setting OS environment variable\n``OFS_IMAGE_USE_DENYLIST=1``.  This change only affects direct URL access.\n``<img src=\"image.svg\" />`` works the same as before.\n\nSee security advisory:\nhttps://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v\n\n* Use guess_extension as first guess for the extension of an image.\n\n* Support overriding ALLOWED_INLINE_MIMETYPES and DISALLOWED_INLINE_MIMETYPES.\n\n* Test that filename of attachment gets encoded correctly.\n\n* Add CVE\n\n---------\n\nCo-authored-by: Michael Howitz <icemac@gmx.net>",
        "before_after_code_files": [
          "src/OFS/Image.py||src/OFS/Image.py",
          "src/OFS/tests/testFileAndImage.py||src/OFS/tests/testFileAndImage.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/OFS/Image.py||src/OFS/Image.py",
            "src/OFS/tests/testFileAndImage.py||src/OFS/tests/testFileAndImage.py"
          ],
          "candidate": [
            "src/OFS/Image.py||src/OFS/Image.py",
            "src/OFS/tests/testFileAndImage.py||src/OFS/tests/testFileAndImage.py"
          ]
        }
      },
      "candidate_diff": {
        "src/OFS/Image.py||src/OFS/Image.py": [
          "File: src/OFS/Image.py -> src/OFS/Image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: \"\"\"",
          "16: import html",
          "17: import struct",
          "18: from email.generator import _make_boundary",
          "19: from io import BytesIO",
          "20: from xml.dom import minidom",
          "22: import ZPublisher.HTTPRequest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import os",
          "21: from mimetypes import guess_extension",
          "22: from urllib.parse import quote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: from ZPublisher.HTTPRequest import FileUpload",
          "51: manage_addFileForm = DTMLFile(",
          "52:     'dtml/imageAdd',",
          "53:     globals(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: def _get_list_from_env(name, default=None):",
          "55:     \"\"\"Get list from environment variable.",
          "57:     Supports splitting on comma or white space.",
          "58:     Use the default as fallback only when the variable is not set.",
          "59:     So if the env variable is set to an empty string, this will ignore the",
          "60:     default and return an empty list.",
          "61:     \"\"\"",
          "62:     value = os.environ.get(name)",
          "63:     if value is None:",
          "64:         return default or []",
          "65:     value = value.strip()",
          "66:     if \",\" in value:",
          "67:         return value.split(\",\")",
          "68:     return value.split()",
          "71: # We have one list for allowed, and one for disallowed inline mimetypes.",
          "72: # This is for security purposes.",
          "73: # By default we use the allowlist.  We give integrators the option to choose",
          "74: # the denylist via an environment variable.",
          "75: ALLOWED_INLINE_MIMETYPES = _get_list_from_env(",
          "76:     \"ALLOWED_INLINE_MIMETYPES\",",
          "77:     default=[",
          "78:         \"image/gif\",",
          "79:         # The mimetypes registry lists several for jpeg 2000:",
          "80:         \"image/jp2\",",
          "81:         \"image/jpeg\",",
          "82:         \"image/jpeg2000-image\",",
          "83:         \"image/jpeg2000\",",
          "84:         \"image/jpx\",",
          "85:         \"image/png\",",
          "86:         \"image/webp\",",
          "87:         \"image/x-icon\",",
          "88:         \"image/x-jpeg2000-image\",",
          "89:         \"text/plain\",",
          "90:         # By popular request we allow PDF:",
          "91:         \"application/pdf\",",
          "92:     ]",
          "93: )",
          "94: DISALLOWED_INLINE_MIMETYPES = _get_list_from_env(",
          "95:     \"DISALLOWED_INLINE_MIMETYPES\",",
          "96:     default=[",
          "97:         \"application/javascript\",",
          "98:         \"application/x-javascript\",",
          "99:         \"text/javascript\",",
          "100:         \"text/html\",",
          "101:         \"image/svg+xml\",",
          "102:         \"image/svg+xml-compressed\",",
          "103:     ]",
          "104: )",
          "105: try:",
          "106:     USE_DENYLIST = os.environ.get(\"OFS_IMAGE_USE_DENYLIST\")",
          "107:     USE_DENYLIST = bool(int(USE_DENYLIST))",
          "108: except (ValueError, TypeError, AttributeError):",
          "109:     USE_DENYLIST = False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:     Cacheable",
          "108: ):",
          "109:     \"\"\"A File object is a content object for arbitrary files.\"\"\"",
          "111:     meta_type = 'File'",
          "112:     zmi_icon = 'far fa-file-archive'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:     # You can control which mimetypes may be shown inline",
          "172:     # and which must always be downloaded, for security reasons.",
          "173:     # Make the configuration available on the class.",
          "174:     # Then subclasses can override this.",
          "175:     allowed_inline_mimetypes = ALLOWED_INLINE_MIMETYPES",
          "176:     disallowed_inline_mimetypes = DISALLOWED_INLINE_MIMETYPES",
          "177:     use_denylist = USE_DENYLIST",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "403:                         b'\\r\\n--' + boundary.encode('ascii') + b'--\\r\\n')",
          "404:                     return True",
          "406:     @security.protected(View)",
          "407:     def index_html(self, REQUEST, RESPONSE):",
          "408:         \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:     def _should_force_download(self):",
          "475:         # If this returns True, the caller should set a",
          "476:         # Content-Disposition header with filename.",
          "477:         mimetype = self.content_type",
          "478:         if not mimetype:",
          "479:             return False",
          "480:         if self.use_denylist:",
          "481:             # We explicitly deny a few mimetypes, and allow the rest.",
          "482:             return mimetype in self.disallowed_inline_mimetypes",
          "483:         # Use the allowlist.",
          "484:         # We only explicitly allow a few mimetypes, and deny the rest.",
          "485:         return mimetype not in self.allowed_inline_mimetypes",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "441:         RESPONSE.setHeader('Content-Length', self.size)",
          "442:         RESPONSE.setHeader('Accept-Ranges', 'bytes')",
          "444:         if self.ZCacheable_isCachingEnabled():",
          "445:             result = self.ZCacheable_get(default=None)",
          "446:             if result is not None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:         if self._should_force_download():",
          "526:             # We need a filename, even a dummy one if needed.",
          "527:             filename = self.getId()",
          "528:             if \".\" not in filename:",
          "529:                 # This either returns None or \".some_extension\"",
          "530:                 ext = guess_extension(self.content_type, strict=False)",
          "531:                 if not ext:",
          "532:                     # image/svg+xml -> svg",
          "533:                     ext = \".\" + self.content_type.split(\"/\")[-1].split(\"+\")[0]",
          "534:                 filename += f\"{ext}\"",
          "535:             filename = quote(filename.encode(\"utf8\"))",
          "536:             RESPONSE.setHeader(",
          "537:                 \"Content-Disposition\",",
          "538:                 f\"attachment; filename*=UTF-8''{filename}\",",
          "539:             )",
          "",
          "---------------"
        ],
        "src/OFS/tests/testFileAndImage.py||src/OFS/tests/testFileAndImage.py": [
          "File: src/OFS/tests/testFileAndImage.py -> src/OFS/tests/testFileAndImage.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:         response = request.RESPONSE",
          "374:         result = self.file.index_html(request, response)",
          "375:         self.assertEqual(result, self.data)",
          "377:     def test_interfaces(self):",
          "378:         from OFS.Image import Image",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:         self.assertIsNone(response.getHeader(\"Content-Disposition\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:                          ' alt=\"\" title=\"\" height=\"16\" width=\"16\" />')",
          "390: class FileEditTests(Testing.ZopeTestCase.FunctionalTestCase):",
          "391:     \"\"\"Browser testing ..Image.File\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: class SVGTests(ImageTests):",
          "392:     content_type = 'image/svg+xml'",
          "394:     def testViewImageOrFile(self):",
          "395:         request = self.app.REQUEST",
          "396:         response = request.RESPONSE",
          "397:         result = self.file.index_html(request, response)",
          "398:         self.assertEqual(result, self.data)",
          "399:         self.assertEqual(",
          "400:             response.getHeader(\"Content-Disposition\"),",
          "401:             \"attachment; filename*=UTF-8''file.svg\",",
          "402:         )",
          "404:     def testViewImageOrFileNonAscii(self):",
          "405:         try:",
          "406:             factory = getattr(self.app, self.factory)",
          "407:             factory('h\u00e4llo',",
          "408:                     file=self.data, content_type=self.content_type)",
          "409:             transaction.commit()",
          "410:         except Exception:",
          "411:             transaction.abort()",
          "412:             self.connection.close()",
          "413:             raise",
          "414:         transaction.begin()",
          "415:         image = getattr(self.app, 'h\u00e4llo')",
          "416:         request = self.app.REQUEST",
          "417:         response = request.RESPONSE",
          "418:         result = image.index_html(request, response)",
          "419:         self.assertEqual(result, self.data)",
          "420:         self.assertEqual(",
          "421:             response.getHeader(\"Content-Disposition\"),",
          "422:             \"attachment; filename*=UTF-8''h%C3%A4llo.svg\",",
          "423:         )",
          "425:     def testViewImageOrFile_with_denylist(self):",
          "426:         request = self.app.REQUEST",
          "427:         response = request.RESPONSE",
          "428:         self.file.use_denylist = True",
          "429:         result = self.file.index_html(request, response)",
          "430:         self.assertEqual(result, self.data)",
          "431:         self.assertEqual(",
          "432:             response.getHeader(\"Content-Disposition\"),",
          "433:             \"attachment; filename*=UTF-8''file.svg\",",
          "434:         )",
          "436:     def testViewImageOrFile_with_empty_denylist(self):",
          "437:         request = self.app.REQUEST",
          "438:         response = request.RESPONSE",
          "439:         self.file.use_denylist = True",
          "440:         self.file.disallowed_inline_mimetypes = []",
          "441:         result = self.file.index_html(request, response)",
          "442:         self.assertEqual(result, self.data)",
          "443:         self.assertIsNone(response.getHeader(\"Content-Disposition\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}