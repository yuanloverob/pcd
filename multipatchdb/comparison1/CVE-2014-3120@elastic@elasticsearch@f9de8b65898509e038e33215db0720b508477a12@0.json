{
  "cve_id": "CVE-2014-3120",
  "cve_desc": "The default configuration in Elasticsearch before 1.2 enables dynamic scripting, which allows remote attackers to execute arbitrary MVEL expressions and Java code via the source parameter to _search.  NOTE: this only violates the vendor's intended security policy if the user does not run Elasticsearch in its own independent virtual machine.",
  "repo": "elastic/elasticsearch",
  "patch_hash": "f9de8b65898509e038e33215db0720b508477a12",
  "patch_info": {
    "commit_hash": "f9de8b65898509e038e33215db0720b508477a12",
    "repo": "elastic/elasticsearch",
    "commit_url": "https://github.com/elastic/elasticsearch/commit/f9de8b65898509e038e33215db0720b508477a12",
    "files": [
      "docs/reference/modules/http.asciidoc",
      "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
      "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
      "src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
    ],
    "message": "CORS: Disable by default\n\nIn order to deliver a more secure out-of-the-box configuration this commit\ndisables cross-origin resource sharing by default.\n\nCloses #7151",
    "before_after_code_files": [
      "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
      "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
      "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java": [
      "File: src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java -> src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "96:             resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status);",
      "97:         }",
      "98:         if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) {",
      "100:                 String originHeader = request.header(ORIGIN);",
      "101:                 if (!Strings.isNullOrEmpty(originHeader)) {",
      "102:                     if (corsPattern == null) {",
      "",
      "[Removed Lines]",
      "99:             if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, true)) {",
      "",
      "[Added Lines]",
      "99:             if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) {",
      "",
      "---------------"
    ],
    "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java": [
      "File: src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: public class CorsRegexDefaultTests extends ElasticsearchIntegrationTest {",
      "33:     @Test",
      "35:         String corsValue = \"http://localhost:9200\";",
      "36:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
      "38:         assertThat(response.getStatusCode(), is(200));",
      "41:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Credentials\")));",
      "42:     }",
      "",
      "[Removed Lines]",
      "34:     public void testCorsSettingDefaultBehaviour() throws Exception {",
      "39:         assertThat(response.getHeaders(), hasKey(\"Access-Control-Allow-Origin\"));",
      "40:         assertThat(response.getHeaders().get(\"Access-Control-Allow-Origin\"), is(\"*\"));",
      "",
      "[Added Lines]",
      "34:     public void testCorsSettingDefaultBehaviourDoesNotReturnAnything() throws Exception {",
      "39:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Origin\")));",
      "",
      "---------------"
    ],
    "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java": [
      "File: src/test/java/org/elasticsearch/rest/CorsRegexTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_ORIGIN;",
      "36: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_CREDENTIALS;",
      "37: import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;",
      "38: import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;",
      "39: import static org.hamcrest.Matchers.*;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ENABLED;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:         return ImmutableSettings.settingsBuilder()",
      "53:                 .put(super.nodeSettings(nodeOrdinal))",
      "54:                 .put(SETTING_CORS_ALLOW_ORIGIN, \"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\")",
      "56:                 .build();",
      "57:     }",
      "",
      "[Removed Lines]",
      "55:                 .put(SETTING_CORS_ALLOW_CREDENTIALS, \"true\")",
      "",
      "[Added Lines]",
      "56:                 .put(SETTING_CORS_ALLOW_CREDENTIALS, true)",
      "57:                 .put(SETTING_CORS_ENABLED, true)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "284da7af71b77ad33b6b06edc5b659724816cf0c",
      "candidate_info": {
        "commit_hash": "284da7af71b77ad33b6b06edc5b659724816cf0c",
        "repo": "elastic/elasticsearch",
        "commit_url": "https://github.com/elastic/elasticsearch/commit/284da7af71b77ad33b6b06edc5b659724816cf0c",
        "files": [
          "docs/reference/modules/http.asciidoc",
          "src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java",
          "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "src/main/java/org/elasticsearch/rest/support/RestUtils.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexTests.java",
          "src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java",
          "src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java"
        ],
        "message": "CORS: Support regular expressions for origin to match against\n\nThis commit adds regular expression support for the allow-origin\nheader depending on the value of the request `Origin` header.\n\nThe existing HttpRequestBuilder is also extended to support the\nOPTIONS HTTP method.\n\nRelates #5601\nCloses #6891",
        "before_after_code_files": [
          "src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java||src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java",
          "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "src/main/java/org/elasticsearch/rest/support/RestUtils.java||src/main/java/org/elasticsearch/rest/support/RestUtils.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java",
          "src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java||src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java",
          "src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java||src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
          ],
          "candidate": [
            "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java||src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java": [
          "File: src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java -> src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.elasticsearch.http.netty;",
          "22: import org.jboss.netty.channel.*;",
          "23: import org.jboss.netty.handler.codec.http.HttpRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import org.elasticsearch.rest.support.RestUtils;",
          "26: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: public class HttpRequestHandler extends SimpleChannelUpstreamHandler {",
          "32:     private final NettyHttpServerTransport serverTransport;",
          "34:     public HttpRequestHandler(NettyHttpServerTransport serverTransport) {",
          "35:         this.serverTransport = serverTransport;",
          "36:     }",
          "38:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     private final Pattern corsPattern;",
          "40:         this.corsPattern = RestUtils.getCorsSettingRegex(serverTransport.settings());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:         NettyHttpRequest httpRequest = new NettyHttpRequest(request, e.getChannel());",
          "45:         super.messageReceived(ctx, e);",
          "46:     }",
          "",
          "[Removed Lines]",
          "44:         serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, e.getChannel(), httpRequest));",
          "",
          "[Added Lines]",
          "49:         serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, e.getChannel(), httpRequest, corsPattern));",
          "",
          "---------------"
        ],
        "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java": [
          "File: src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java -> src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.elasticsearch.http.netty;",
          "22: import org.apache.lucene.util.BytesRef;",
          "23: import org.apache.lucene.util.UnicodeUtil;",
          "24: import org.elasticsearch.common.bytes.BytesReference;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import com.google.common.base.Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import java.util.List;",
          "41: import java.util.Map;",
          "42: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import java.util.regex.Pattern;",
          "46: import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     private final NettyHttpServerTransport transport;",
          "58:     private final Channel channel;",
          "59:     private final org.jboss.netty.handler.codec.http.HttpRequest nettyRequest;",
          "62:         super(request);",
          "63:         this.transport = transport;",
          "64:         this.channel = channel;",
          "65:         this.nettyRequest = request.request();",
          "66:     }",
          "68:     @Override",
          "",
          "[Removed Lines]",
          "61:     public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, NettyHttpRequest request) {",
          "",
          "[Added Lines]",
          "64:     private Pattern corsPattern;",
          "66:     public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, NettyHttpRequest request, Pattern corsPattern) {",
          "71:         this.corsPattern = corsPattern;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:         } else {",
          "91:             resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status);",
          "92:         }",
          "94:             if (transport.settings().getAsBoolean(\"http.cors.enabled\", true)) {",
          "97:                 if (nettyRequest.getMethod() == HttpMethod.OPTIONS) {",
          "102:                 }",
          "103:             }",
          "104:         }",
          "",
          "[Removed Lines]",
          "93:         if (RestUtils.isBrowser(nettyRequest.headers().get(HttpHeaders.Names.USER_AGENT))) {",
          "96:                 resp.headers().add(\"Access-Control-Allow-Origin\", transport.settings().get(\"http.cors.allow-origin\", \"*\"));",
          "99:                     resp.headers().add(\"Access-Control-Max-Age\", transport.settings().getAsInt(\"http.cors.max-age\", 1728000));",
          "100:                     resp.headers().add(\"Access-Control-Allow-Methods\", transport.settings().get(\"http.cors.allow-methods\", \"OPTIONS, HEAD, GET, POST, PUT, DELETE\"));",
          "101:                     resp.headers().add(\"Access-Control-Allow-Headers\", transport.settings().get(\"http.cors.allow-headers\", \"X-Requested-With, Content-Type, Content-Length\"));",
          "",
          "[Added Lines]",
          "99:         if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) {",
          "101:                 String originHeader = request.header(ORIGIN);",
          "102:                 if (!Strings.isNullOrEmpty(originHeader)) {",
          "103:                     if (corsPattern == null) {",
          "104:                         resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, transport.settings().get(\"http.cors.allow-origin\", \"*\"));",
          "105:                     } else {",
          "106:                         resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : \"null\");",
          "107:                     }",
          "108:                 }",
          "111:                     resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(\"http.cors.max-age\", 1728000));",
          "112:                     resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(\"http.cors.allow-methods\", \"OPTIONS, HEAD, GET, POST, PUT, DELETE\"));",
          "113:                     resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(\"http.cors.allow-headers\", \"X-Requested-With, Content-Type, Content-Length\"));",
          "",
          "---------------"
        ],
        "src/main/java/org/elasticsearch/rest/support/RestUtils.java||src/main/java/org/elasticsearch/rest/support/RestUtils.java": [
          "File: src/main/java/org/elasticsearch/rest/support/RestUtils.java -> src/main/java/org/elasticsearch/rest/support/RestUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import com.google.common.base.Charsets;",
          "23: import org.elasticsearch.common.Nullable;",
          "24: import org.elasticsearch.common.path.PathTrie;",
          "26: import java.nio.charset.Charset;",
          "27: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.elasticsearch.common.settings.Settings;",
          "29: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:             return RestUtils.decodeComponent(value);",
          "38:         }",
          "39:     };",
          "41:     public static boolean isBrowser(@Nullable String userAgent) {",
          "42:         if (userAgent == null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     public static final String HTTP_CORS_ALLOW_ORIGIN_SETTING = \"http.cors.allow-origin\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:             return Character.MAX_VALUE;",
          "217:         }",
          "218:     }",
          "219: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     public static Pattern getCorsSettingRegex(Settings settings) {",
          "227:         String corsSetting = settings.get(HTTP_CORS_ALLOW_ORIGIN_SETTING, \"*\");",
          "228:         int len = corsSetting.length();",
          "229:         boolean isRegex = len > 2 &&  corsSetting.startsWith(\"/\") && corsSetting.endsWith(\"/\");",
          "231:         if (isRegex) {",
          "232:             return Pattern.compile(corsSetting.substring(1, corsSetting.length()-1));",
          "233:         }",
          "235:         return null;",
          "236:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java": [
          "File: src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.elasticsearch.rest;",
          "21: import org.elasticsearch.test.ElasticsearchIntegrationTest;",
          "22: import org.elasticsearch.test.rest.client.http.HttpResponse;",
          "23: import org.junit.Test;",
          "25: import static org.elasticsearch.rest.CorsRegexTests.httpClient;",
          "26: import static org.hamcrest.Matchers.*;",
          "31: public class CorsRegexDefaultTests extends ElasticsearchIntegrationTest {",
          "33:     @Test",
          "34:     public void testCorsSettingDefaultBehaviour() throws Exception {",
          "35:         String corsValue = \"http://localhost:9200\";",
          "36:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
          "38:         assertThat(response.getStatusCode(), is(200));",
          "39:         assertThat(response.getHeaders(), hasKey(\"Access-Control-Allow-Origin\"));",
          "40:         assertThat(response.getHeaders().get(\"Access-Control-Allow-Origin\"), is(\"*\"));",
          "41:     }",
          "43:     @Test",
          "44:     public void testThatOmittingCorsHeaderDoesNotReturnAnything() throws Exception {",
          "45:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").execute();",
          "47:         assertThat(response.getStatusCode(), is(200));",
          "48:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Origin\")));",
          "49:     }",
          "50: }",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java": [
          "File: src/test/java/org/elasticsearch/rest/CorsRegexTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.elasticsearch.rest;",
          "21: import org.apache.http.impl.client.HttpClients;",
          "22: import org.elasticsearch.common.logging.ESLogger;",
          "23: import org.elasticsearch.common.logging.Loggers;",
          "24: import org.elasticsearch.common.settings.ImmutableSettings;",
          "25: import org.elasticsearch.common.settings.Settings;",
          "26: import org.elasticsearch.common.transport.InetSocketTransportAddress;",
          "27: import org.elasticsearch.http.HttpServerTransport;",
          "28: import org.elasticsearch.test.ElasticsearchIntegrationTest;",
          "29: import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;",
          "30: import org.elasticsearch.test.rest.client.http.HttpResponse;",
          "31: import org.junit.Test;",
          "33: import java.net.InetSocketAddress;",
          "35: import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;",
          "36: import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;",
          "37: import static org.hamcrest.Matchers.*;",
          "42: @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)",
          "43: public class CorsRegexTests extends ElasticsearchIntegrationTest {",
          "45:     protected static final ESLogger logger = Loggers.getLogger(CorsRegexTests.class);",
          "47:     @Override",
          "48:     protected Settings nodeSettings(int nodeOrdinal) {",
          "49:         return ImmutableSettings.settingsBuilder()",
          "50:                 .put(\"http.cors.allow-origin\", \"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\")",
          "51:                 .put(\"network.host\", \"127.0.0.1\")",
          "52:                 .put(super.nodeSettings(nodeOrdinal))",
          "53:                 .build();",
          "54:     }",
          "56:     @Test",
          "57:     public void testThatRegularExpressionWorksOnMatch() throws Exception {",
          "58:         String corsValue = \"http://localhost:9200\";",
          "59:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
          "60:         assertResponseWithOriginheader(response, corsValue);",
          "62:         corsValue = \"https://localhost:9200\";",
          "63:         response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
          "64:         assertResponseWithOriginheader(response, corsValue);",
          "65:     }",
          "67:     @Test",
          "68:     public void testThatRegularExpressionReturnsNullOnNonMatch() throws Exception {",
          "69:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", \"http://evil-host:9200\").execute();",
          "70:         assertResponseWithOriginheader(response, \"null\");",
          "71:     }",
          "73:     @Test",
          "74:     public void testThatSendingNoOriginHeaderReturnsNoAccessControlHeader() throws Exception {",
          "75:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").execute();",
          "76:         assertThat(response.getStatusCode(), is(200));",
          "77:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Origin\")));",
          "78:     }",
          "80:     @Test",
          "81:     public void testThatRegularExpressionIsNotAppliedWithoutCorrectBrowserOnMatch() throws Exception {",
          "82:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").execute();",
          "83:         assertThat(response.getStatusCode(), is(200));",
          "84:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Origin\")));",
          "85:     }",
          "87:     @Test",
          "88:     public void testThatPreFlightRequestWorksOnMatch() throws Exception {",
          "89:         String corsValue = \"http://localhost:9200\";",
          "90:         HttpResponse response = httpClient().method(\"OPTIONS\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
          "91:         assertResponseWithOriginheader(response, corsValue);",
          "92:     }",
          "94:     @Test",
          "95:     public void testThatPreFlightRequestReturnsNullOnNonMatch() throws Exception {",
          "96:         HttpResponse response = httpClient().method(\"OPTIONS\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", \"http://evil-host:9200\").execute();",
          "97:         assertResponseWithOriginheader(response, \"null\");",
          "98:     }",
          "100:     public static HttpRequestBuilder httpClient() {",
          "101:         HttpServerTransport httpServerTransport = internalCluster().getDataNodeInstance(HttpServerTransport.class);",
          "102:         InetSocketAddress address = ((InetSocketTransportAddress) httpServerTransport.boundAddress().publishAddress()).address();",
          "103:         return new HttpRequestBuilder(HttpClients.createDefault()).host(address.getHostName()).port(address.getPort());",
          "104:     }",
          "106:     public static void assertResponseWithOriginheader(HttpResponse response, String expectedCorsHeader) {",
          "107:         assertThat(response.getStatusCode(), is(200));",
          "108:         assertThat(response.getHeaders(), hasKey(\"Access-Control-Allow-Origin\"));",
          "109:         assertThat(response.getHeaders().get(\"Access-Control-Allow-Origin\"), is(expectedCorsHeader));",
          "110:     }",
          "111: }",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java||src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java": [
          "File: src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java -> src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.elasticsearch.rest.util;",
          "22: import org.elasticsearch.rest.support.RestUtils;",
          "23: import org.elasticsearch.test.ElasticsearchTestCase;",
          "24: import org.junit.Test;",
          "26: import java.util.Map;",
          "28: import static com.google.common.collect.Maps.newHashMap;",
          "",
          "[Removed Lines]",
          "29: import static org.hamcrest.MatcherAssert.assertThat;",
          "30: import static org.hamcrest.Matchers.equalTo;",
          "",
          "[Added Lines]",
          "22: import org.elasticsearch.common.settings.ImmutableSettings;",
          "27: import java.util.Locale;",
          "29: import java.util.regex.Pattern;",
          "32: import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;",
          "33: import static org.hamcrest.Matchers.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         assertThat(params.get(\"p1\"), equalTo(\"v1\"));",
          "123:     }",
          "125: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     @Test",
          "129:     public void testCorsSettingIsARegex() {",
          "130:         assertCorsSettingRegex(\"/foo/\", Pattern.compile(\"foo\"));",
          "131:         assertCorsSettingRegex(\"/.*/\", Pattern.compile(\".*\"));",
          "132:         assertCorsSettingRegex(\"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\", Pattern.compile(\"https?:\\\\/\\\\/localhost(:[0-9]+)?\"));",
          "133:         assertCorsSettingRegexMatches(\"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\", true, \"http://localhost:9200\", \"http://localhost:9215\", \"https://localhost:9200\", \"https://localhost\");",
          "134:         assertCorsSettingRegexMatches(\"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\", false, \"htt://localhost:9200\", \"http://localhost:9215/foo\", \"localhost:9215\");",
          "135:         assertCorsSettingRegexIsNull(\"//\");",
          "136:         assertCorsSettingRegexIsNull(\"/\");",
          "137:         assertCorsSettingRegexIsNull(\"/foo\");",
          "138:         assertCorsSettingRegexIsNull(\"foo\");",
          "139:         assertCorsSettingRegexIsNull(\"\");",
          "140:         assertThat(RestUtils.getCorsSettingRegex(ImmutableSettings.EMPTY), is(nullValue()));",
          "141:     }",
          "143:     private void assertCorsSettingRegexIsNull(String settingsValue) {",
          "144:         assertThat(RestUtils.getCorsSettingRegex(settingsBuilder().put(\"http.cors.allow-origin\", settingsValue).build()), is(nullValue()));",
          "145:     }",
          "147:     private void assertCorsSettingRegex(String settingsValue, Pattern pattern) {",
          "148:         assertThat(RestUtils.getCorsSettingRegex(settingsBuilder().put(\"http.cors.allow-origin\", settingsValue).build()).toString(), is(pattern.toString()));",
          "149:     }",
          "151:     private void assertCorsSettingRegexMatches(String settingsValue, boolean expectMatch, String ... candidates) {",
          "152:         Pattern pattern = RestUtils.getCorsSettingRegex(settingsBuilder().put(\"http.cors.allow-origin\", settingsValue).build());",
          "153:         for (String candidate : candidates) {",
          "154:             assertThat(String.format(Locale.ROOT, \"Expected pattern %s to match against %s: %s\", settingsValue, candidate, expectMatch),",
          "155:                     pattern.matcher(candidate).matches(), is(expectMatch));",
          "156:         }",
          "157:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java||src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java": [
          "File: src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java -> src/test/java/org/elasticsearch/test/rest/client/http/HttpRequestBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import com.google.common.base.Joiner;",
          "22: import com.google.common.collect.Maps;",
          "24: import org.apache.http.client.methods.*;",
          "25: import org.apache.http.entity.StringEntity;",
          "26: import org.apache.http.impl.client.CloseableHttpClient;",
          "28: import org.elasticsearch.common.Strings;",
          "29: import org.elasticsearch.common.logging.ESLogger;",
          "30: import org.elasticsearch.common.logging.Loggers;",
          "31: import org.elasticsearch.common.transport.InetSocketTransportAddress;",
          "33: import org.elasticsearch.http.HttpServerTransport;",
          "35: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "23: import org.apache.http.client.config.RequestConfig;",
          "27: import org.apache.lucene.util.IOUtils;",
          "32: import org.elasticsearch.common.transport.TransportAddress;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:             return new HttpHead(buildUri());",
          "148:         }",
          "150:         if (HttpDeleteWithEntity.METHOD_NAME.equalsIgnoreCase(method)) {",
          "151:             return addOptionalBody(new HttpDeleteWithEntity(buildUri()));",
          "152:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:         if (HttpOptions.METHOD_NAME.equalsIgnoreCase(method)) {",
          "148:             checkBodyNotSupported();",
          "149:             return new HttpOptions(buildUri());",
          "150:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94a23a52c4d2b16425d733e08275afa4245d812f",
      "candidate_info": {
        "commit_hash": "94a23a52c4d2b16425d733e08275afa4245d812f",
        "repo": "elastic/elasticsearch",
        "commit_url": "https://github.com/elastic/elasticsearch/commit/94a23a52c4d2b16425d733e08275afa4245d812f",
        "files": [
          "docs/reference/modules/http.asciidoc",
          "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
        ],
        "message": "CORS: Allowed to configure allow-credentials header to work via SSL\n\nThis adds support to return the \"Access-Control-Allow-Credentials\" header\nif needed, so CORS will work flawlessly with authenticated applications.\n\nCloses #6380",
        "before_after_code_files": [
          "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java||src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
          ],
          "candidate": [
            "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java": [
          "File: src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java -> src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import java.util.Set;",
          "44: import java.util.regex.Pattern;",
          "46: import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import static org.elasticsearch.http.netty.NettyHttpServerTransport.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:             resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status);",
          "98:         }",
          "99:         if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) {",
          "101:                 String originHeader = request.header(ORIGIN);",
          "102:                 if (!Strings.isNullOrEmpty(originHeader)) {",
          "103:                     if (corsPattern == null) {",
          "105:                     } else {",
          "106:                         resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : \"null\");",
          "107:                     }",
          "108:                 }",
          "109:                 if (nettyRequest.getMethod() == HttpMethod.OPTIONS) {",
          "114:                 }",
          "115:             }",
          "116:         }",
          "",
          "[Removed Lines]",
          "100:             if (transport.settings().getAsBoolean(\"http.cors.enabled\", true)) {",
          "104:                         resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, transport.settings().get(\"http.cors.allow-origin\", \"*\"));",
          "111:                     resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(\"http.cors.max-age\", 1728000));",
          "112:                     resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(\"http.cors.allow-methods\", \"OPTIONS, HEAD, GET, POST, PUT, DELETE\"));",
          "113:                     resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(\"http.cors.allow-headers\", \"X-Requested-With, Content-Type, Content-Length\"));",
          "",
          "[Added Lines]",
          "101:             if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, true)) {",
          "105:                         resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, transport.settings().get(SETTING_CORS_ALLOW_ORIGIN, \"*\"));",
          "112:                     resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(SETTING_CORS_MAX_AGE, 1728000));",
          "113:                     resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(SETTING_CORS_ALLOW_METHODS, \"OPTIONS, HEAD, GET, POST, PUT, DELETE\"));",
          "114:                     resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(SETTING_CORS_ALLOW_HEADERS, \"X-Requested-With, Content-Type, Content-Length\"));",
          "115:                 }",
          "117:                 if (transport.settings().getAsBoolean(SETTING_CORS_ALLOW_CREDENTIALS, false)) {",
          "118:                     resp.headers().add(ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");",
          "",
          "---------------"
        ],
        "src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java||src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java": [
          "File: src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java -> src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         NettyUtils.setup();",
          "66:     }",
          "68:     private final NetworkService networkService;",
          "69:     final BigArrays bigArrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     public static final String SETTING_CORS_ENABLED = \"http.cors.enabled\";",
          "69:     public static final String SETTING_CORS_ALLOW_ORIGIN = \"http.cors.allow-origin\";",
          "70:     public static final String SETTING_CORS_MAX_AGE = \"http.cors.max-age\";",
          "71:     public static final String SETTING_CORS_ALLOW_METHODS = \"http.cors.allow-methods\";",
          "72:     public static final String SETTING_CORS_ALLOW_HEADERS = \"http.cors.allow-headers\";",
          "73:     public static final String SETTING_CORS_ALLOW_CREDENTIALS = \"http.cors.allow-credentials\";",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java": [
          "File: src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         assertThat(response.getStatusCode(), is(200));",
          "39:         assertThat(response.getHeaders(), hasKey(\"Access-Control-Allow-Origin\"));",
          "40:         assertThat(response.getHeaders().get(\"Access-Control-Allow-Origin\"), is(\"*\"));",
          "41:     }",
          "43:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Credentials\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         assertThat(response.getStatusCode(), is(200));",
          "48:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Origin\")));",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Credentials\")));",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java": [
          "File: src/test/java/org/elasticsearch/rest/CorsRegexTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.net.InetSocketAddress;",
          "35: import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;",
          "36: import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;",
          "37: import static org.hamcrest.Matchers.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_ORIGIN;",
          "36: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_CREDENTIALS;",
          "40: import static org.hamcrest.Matchers.is;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     @Override",
          "48:     protected Settings nodeSettings(int nodeOrdinal) {",
          "49:         return ImmutableSettings.settingsBuilder()",
          "52:                 .put(super.nodeSettings(nodeOrdinal))",
          "53:                 .build();",
          "54:     }",
          "",
          "[Removed Lines]",
          "50:                 .put(\"http.cors.allow-origin\", \"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\")",
          "51:                 .put(\"network.host\", \"127.0.0.1\")",
          "",
          "[Added Lines]",
          "53:                 .put(SETTING_CORS_ALLOW_ORIGIN, \"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\")",
          "54:                 .put(SETTING_CORS_ALLOW_CREDENTIALS, \"true\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         corsValue = \"https://localhost:9200\";",
          "63:         response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
          "64:         assertResponseWithOriginheader(response, corsValue);",
          "65:     }",
          "67:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:         assertThat(response.getHeaders(), hasKey(\"Access-Control-Allow-Credentials\"));",
          "69:         assertThat(response.getHeaders().get(\"Access-Control-Allow-Credentials\"), is(\"true\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd0eb32d9c3c3f5b6e5f8630c859cd04bdcd4e06",
      "candidate_info": {
        "commit_hash": "bd0eb32d9c3c3f5b6e5f8630c859cd04bdcd4e06",
        "repo": "elastic/elasticsearch",
        "commit_url": "https://github.com/elastic/elasticsearch/commit/bd0eb32d9c3c3f5b6e5f8630c859cd04bdcd4e06",
        "files": [
          "docs/reference/modules/http.asciidoc",
          "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
        ],
        "message": "CORS: Disable by default\n\nIn order to deliver a more secure out-of-the-box configuration this commit\ndisables cross-origin resource sharing by default.\n\nCloses #7151",
        "before_after_code_files": [
          "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
          ],
          "candidate": [
            "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
            "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java||src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java": [
          "File: src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java -> src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:             resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status);",
          "97:         }",
          "98:         if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) {",
          "100:                 String originHeader = request.header(ORIGIN);",
          "101:                 if (!Strings.isNullOrEmpty(originHeader)) {",
          "102:                     if (corsPattern == null) {",
          "",
          "[Removed Lines]",
          "99:             if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, true)) {",
          "",
          "[Added Lines]",
          "99:             if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) {",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java||src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java": [
          "File: src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexDefaultTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: public class CorsRegexDefaultTests extends ElasticsearchIntegrationTest {",
          "33:     @Test",
          "35:         String corsValue = \"http://localhost:9200\";",
          "36:         HttpResponse response = httpClient().method(\"GET\").path(\"/\").addHeader(\"User-Agent\", \"Mozilla Bar\").addHeader(\"Origin\", corsValue).execute();",
          "38:         assertThat(response.getStatusCode(), is(200));",
          "41:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Credentials\")));",
          "42:     }",
          "",
          "[Removed Lines]",
          "34:     public void testCorsSettingDefaultBehaviour() throws Exception {",
          "39:         assertThat(response.getHeaders(), hasKey(\"Access-Control-Allow-Origin\"));",
          "40:         assertThat(response.getHeaders().get(\"Access-Control-Allow-Origin\"), is(\"*\"));",
          "",
          "[Added Lines]",
          "34:     public void testCorsSettingDefaultBehaviourDoesNotReturnAnything() throws Exception {",
          "39:         assertThat(response.getHeaders(), not(hasKey(\"Access-Control-Allow-Origin\")));",
          "",
          "---------------"
        ],
        "src/test/java/org/elasticsearch/rest/CorsRegexTests.java||src/test/java/org/elasticsearch/rest/CorsRegexTests.java": [
          "File: src/test/java/org/elasticsearch/rest/CorsRegexTests.java -> src/test/java/org/elasticsearch/rest/CorsRegexTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_ORIGIN;",
          "36: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_CREDENTIALS;",
          "37: import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;",
          "38: import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;",
          "39: import static org.hamcrest.Matchers.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ENABLED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         return ImmutableSettings.settingsBuilder()",
          "53:                 .put(super.nodeSettings(nodeOrdinal))",
          "54:                 .put(SETTING_CORS_ALLOW_ORIGIN, \"/https?:\\\\/\\\\/localhost(:[0-9]+)?/\")",
          "56:                 .build();",
          "57:     }",
          "",
          "[Removed Lines]",
          "55:                 .put(SETTING_CORS_ALLOW_CREDENTIALS, \"true\")",
          "",
          "[Added Lines]",
          "56:                 .put(SETTING_CORS_ALLOW_CREDENTIALS, true)",
          "57:                 .put(SETTING_CORS_ENABLED, true)",
          "",
          "---------------"
        ]
      }
    }
  ]
}