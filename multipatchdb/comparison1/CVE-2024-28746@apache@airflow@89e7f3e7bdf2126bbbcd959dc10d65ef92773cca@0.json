{
  "cve_id": "CVE-2024-28746",
  "cve_desc": "Apache Airflow, versions 2.8.0 through 2.8.2, has a vulnerability that allows an authenticated user with limited permissions to access resources such as variables, connections, etc from the UI which they do not have permission to access.\u00a0\n\nUsers of Apache Airflow are recommended to upgrade to version 2.8.3 or newer to mitigate the risk associated with this vulnerability",
  "repo": "apache/airflow",
  "patch_hash": "89e7f3e7bdf2126bbbcd959dc10d65ef92773cca",
  "patch_info": {
    "commit_hash": "89e7f3e7bdf2126bbbcd959dc10d65ef92773cca",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/89e7f3e7bdf2126bbbcd959dc10d65ef92773cca",
    "files": [
      "airflow/auth/managers/base_auth_manager.py",
      "airflow/auth/managers/utils/fab.py",
      "airflow/providers/fab/auth_manager/fab_auth_manager.py",
      "airflow/www/security_manager.py",
      "tests/providers/fab/auth_manager/test_fab_auth_manager.py"
    ],
    "message": "Add \"MENU\" permission in auth manager (#37881)",
    "before_after_code_files": [
      "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py",
      "airflow/auth/managers/utils/fab.py||airflow/auth/managers/utils/fab.py",
      "airflow/providers/fab/auth_manager/fab_auth_manager.py||airflow/providers/fab/auth_manager/fab_auth_manager.py",
      "airflow/www/security_manager.py||airflow/www/security_manager.py",
      "tests/providers/fab/auth_manager/test_fab_auth_manager.py||tests/providers/fab/auth_manager/test_fab_auth_manager.py"
    ]
  },
  "patch_diff": {
    "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py": [
      "File: airflow/auth/managers/base_auth_manager.py -> airflow/auth/managers/base_auth_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:     from airflow.www.extensions.init_appbuilder import AirflowAppBuilder",
      "58:     from airflow.www.security_manager import AirflowSecurityManagerV2",
      "63: class BaseAuthManager(LoggingMixin):",
      "",
      "[Removed Lines]",
      "60: ResourceMethod = Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\"]",
      "",
      "[Added Lines]",
      "60: ResourceMethod = Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"MENU\"]",
      "",
      "---------------"
    ],
    "airflow/auth/managers/utils/fab.py||airflow/auth/managers/utils/fab.py": [
      "File: airflow/auth/managers/utils/fab.py -> airflow/auth/managers/utils/fab.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     \"GET\": ACTION_CAN_READ,",
      "37:     \"PUT\": ACTION_CAN_EDIT,",
      "38:     \"DELETE\": ACTION_CAN_DELETE,",
      "39: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:     \"MENU\": ACTION_CAN_ACCESS_MENU,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:     \"\"\"Return the map associating a FAB action to a method.\"\"\"",
      "49:     return {",
      "52:     }",
      "",
      "[Removed Lines]",
      "51:         ACTION_CAN_ACCESS_MENU: \"GET\",",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "airflow/providers/fab/auth_manager/fab_auth_manager.py||airflow/providers/fab/auth_manager/fab_auth_manager.py": [
      "File: airflow/providers/fab/auth_manager/fab_auth_manager.py -> airflow/providers/fab/auth_manager/fab_auth_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: from airflow.providers.fab.auth_manager.models import Permission, Role, User",
      "55: from airflow.security import permissions",
      "56: from airflow.security.permissions import (",
      "59:     RESOURCE_AUDIT_LOG,",
      "60:     RESOURCE_CLUSTER_ACTIVITY,",
      "61:     RESOURCE_CONFIG,",
      "",
      "[Removed Lines]",
      "57:     ACTION_CAN_ACCESS_MENU,",
      "58:     ACTION_CAN_READ,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "263:         return self._is_authorized(method=method, resource_type=RESOURCE_VARIABLE, user=user)",
      "265:     def is_authorized_view(self, *, access_view: AccessView, user: BaseUser | None = None) -> bool:",
      "266:         return self._is_authorized(",
      "268:         )",
      "270:     def is_authorized_custom_view(",
      "",
      "[Removed Lines]",
      "267:             method=\"GET\", resource_type=_MAP_ACCESS_VIEW_TO_FAB_RESOURCE_TYPE[access_view], user=user",
      "",
      "[Added Lines]",
      "264:         # \"Docs\" are only links in the menu, there is no page associated",
      "265:         method: ResourceMethod = \"MENU\" if access_view == AccessView.DOCS else \"GET\"",
      "267:             method=method, resource_type=_MAP_ACCESS_VIEW_TO_FAB_RESOURCE_TYPE[access_view], user=user",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "463:         \"\"\"",
      "464:         Return the user permissions.",
      "470:         :param user: the user to get permissions for",
      "472:         :meta private:",
      "473:         \"\"\"",
      "479:     def _get_root_dag_id(self, dag_id: str) -> str:",
      "480:         \"\"\"",
      "",
      "[Removed Lines]",
      "466:         ACTION_CAN_READ and ACTION_CAN_ACCESS_MENU are merged into because they are very similar.",
      "467:         We can assume that if a user has permissions to read variables, they also have permissions to access",
      "468:         the menu \"Variables\".",
      "474:         perms = getattr(user, \"perms\") or []",
      "475:         return [",
      "476:             (ACTION_CAN_READ if perm[0] == ACTION_CAN_ACCESS_MENU else perm[0], perm[1]) for perm in perms",
      "477:         ]",
      "",
      "[Added Lines]",
      "470:         return getattr(user, \"perms\") or []",
      "",
      "---------------"
    ],
    "airflow/www/security_manager.py||airflow/www/security_manager.py": [
      "File: airflow/www/security_manager.py -> airflow/www/security_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: from airflow.exceptions import AirflowException",
      "40: from airflow.models import Connection, DagRun, Pool, TaskInstance, Variable",
      "41: from airflow.security.permissions import (",
      "44:     RESOURCE_ADMIN_MENU,",
      "45:     RESOURCE_AUDIT_LOG,",
      "46:     RESOURCE_BROWSE_MENU,",
      "",
      "[Removed Lines]",
      "42:     ACTION_CAN_ACCESS_MENU,",
      "43:     ACTION_CAN_READ,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "340:             # This means the page the user is trying to access is specific to the auth manager used",
      "341:             # Example: the user list view in FabAuthManager",
      "342:             return lambda action, resource_pk, user: get_auth_manager().is_authorized_custom_view(",
      "344:                 fab_resource_name=fab_resource_name,",
      "345:                 user=user,",
      "346:             )",
      "",
      "[Removed Lines]",
      "343:                 fab_action_name=ACTION_CAN_READ if action == ACTION_CAN_ACCESS_MENU else action,",
      "",
      "[Added Lines]",
      "341:                 fab_action_name=action,",
      "",
      "---------------"
    ],
    "tests/providers/fab/auth_manager/test_fab_auth_manager.py||tests/providers/fab/auth_manager/test_fab_auth_manager.py": [
      "File: tests/providers/fab/auth_manager/test_fab_auth_manager.py -> tests/providers/fab/auth_manager/test_fab_auth_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     RESOURCE_DAG,",
      "40:     RESOURCE_DAG_RUN,",
      "41:     RESOURCE_DATASET,",
      "42:     RESOURCE_JOB,",
      "43:     RESOURCE_PLUGIN,",
      "44:     RESOURCE_PROVIDER,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:     RESOURCE_DOCS,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:                         [(ACTION_CAN_DELETE, resource_type), (ACTION_CAN_CREATE, \"resource_test\")],",
      "141:                         True,",
      "142:                     ),",
      "144:                     (",
      "145:                         api_name,",
      "147:                         [(ACTION_CAN_ACCESS_MENU, resource_type)],",
      "148:                         True,",
      "149:                     ),",
      "",
      "[Removed Lines]",
      "143:                     # With permission (testing that ACTION_CAN_ACCESS_MENU gives GET permissions)",
      "146:                         \"GET\",",
      "",
      "[Added Lines]",
      "144:                     # With permission",
      "147:                         \"MENU\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "346:                 [(ACTION_CAN_READ, RESOURCE_TRIGGER)],",
      "347:                 False,",
      "348:             ),",
      "349:         ],",
      "350:     )",
      "351:     def test_is_authorized_view(self, access_view, user_permissions, expected_result, auth_manager):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "350:             # Docs (positive)",
      "351:             (",
      "352:                 AccessView.DOCS,",
      "353:                 [(ACTION_CAN_ACCESS_MENU, RESOURCE_DOCS)],",
      "354:                 True,",
      "355:             ),",
      "356:             # Without permission",
      "357:             (",
      "358:                 AccessView.DOCS,",
      "359:                 [(ACTION_CAN_READ, RESOURCE_DOCS)],",
      "360:                 False,",
      "361:             ),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a233ffba4d30746c1c9cc82ab525c56f0f1d16fc",
      "candidate_info": {
        "commit_hash": "a233ffba4d30746c1c9cc82ab525c56f0f1d16fc",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/a233ffba4d30746c1c9cc82ab525c56f0f1d16fc",
        "files": [
          "airflow/auth/managers/base_auth_manager.py",
          "airflow/auth/managers/fab/fab_auth_manager.py",
          "airflow/auth/managers/utils/fab.py",
          "airflow/www/security_manager.py",
          "tests/auth/managers/fab/test_fab_auth_manager.py"
        ],
        "message": "Add \"MENU\" permission in auth manager (#37881)\n\n(cherry picked from commit 89e7f3e7bdf2126bbbcd959dc10d65ef92773cca)",
        "before_after_code_files": [
          "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py",
          "airflow/auth/managers/fab/fab_auth_manager.py||airflow/auth/managers/fab/fab_auth_manager.py",
          "airflow/auth/managers/utils/fab.py||airflow/auth/managers/utils/fab.py",
          "airflow/www/security_manager.py||airflow/www/security_manager.py",
          "tests/auth/managers/fab/test_fab_auth_manager.py||tests/auth/managers/fab/test_fab_auth_manager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py",
            "airflow/auth/managers/utils/fab.py||airflow/auth/managers/utils/fab.py",
            "airflow/www/security_manager.py||airflow/www/security_manager.py"
          ],
          "candidate": [
            "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py",
            "airflow/auth/managers/utils/fab.py||airflow/auth/managers/utils/fab.py",
            "airflow/www/security_manager.py||airflow/www/security_manager.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py": [
          "File: airflow/auth/managers/base_auth_manager.py -> airflow/auth/managers/base_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     from airflow.www.extensions.init_appbuilder import AirflowAppBuilder",
          "56:     from airflow.www.security_manager import AirflowSecurityManagerV2",
          "61: class BaseAuthManager(LoggingMixin):",
          "",
          "[Removed Lines]",
          "58: ResourceMethod = Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\"]",
          "",
          "[Added Lines]",
          "58: ResourceMethod = Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"MENU\"]",
          "",
          "---------------"
        ],
        "airflow/auth/managers/fab/fab_auth_manager.py||airflow/auth/managers/fab/fab_auth_manager.py": [
          "File: airflow/auth/managers/fab/fab_auth_manager.py -> airflow/auth/managers/fab/fab_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: from airflow.models import DagModel",
          "54: from airflow.security import permissions",
          "55: from airflow.security.permissions import (",
          "58:     RESOURCE_AUDIT_LOG,",
          "59:     RESOURCE_CLUSTER_ACTIVITY,",
          "60:     RESOURCE_CONFIG,",
          "",
          "[Removed Lines]",
          "56:     ACTION_CAN_ACCESS_MENU,",
          "57:     ACTION_CAN_READ,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:         return self._is_authorized(method=method, resource_type=RESOURCE_VARIABLE, user=user)",
          "268:     def is_authorized_view(self, *, access_view: AccessView, user: BaseUser | None = None) -> bool:",
          "269:         return self._is_authorized(",
          "271:         )",
          "273:     def is_authorized_custom_view(",
          "",
          "[Removed Lines]",
          "270:             method=\"GET\", resource_type=_MAP_ACCESS_VIEW_TO_FAB_RESOURCE_TYPE[access_view], user=user",
          "",
          "[Added Lines]",
          "267:         # \"Docs\" are only links in the menu, there is no page associated",
          "268:         method: ResourceMethod = \"MENU\" if access_view == AccessView.DOCS else \"GET\"",
          "270:             method=method, resource_type=_MAP_ACCESS_VIEW_TO_FAB_RESOURCE_TYPE[access_view], user=user",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:         \"\"\"",
          "473:         Return the user permissions.",
          "479:         :param user: the user to get permissions for",
          "481:         :meta private:",
          "482:         \"\"\"",
          "488:     def _get_root_dag_id(self, dag_id: str) -> str:",
          "489:         \"\"\"",
          "",
          "[Removed Lines]",
          "475:         ACTION_CAN_READ and ACTION_CAN_ACCESS_MENU are merged into because they are very similar.",
          "476:         We can assume that if a user has permissions to read variables, they also have permissions to access",
          "477:         the menu \"Variables\".",
          "483:         perms = getattr(user, \"perms\") or []",
          "484:         return [",
          "485:             (ACTION_CAN_READ if perm[0] == ACTION_CAN_ACCESS_MENU else perm[0], perm[1]) for perm in perms",
          "486:         ]",
          "",
          "[Added Lines]",
          "479:         return getattr(user, \"perms\") or []",
          "",
          "---------------"
        ],
        "airflow/auth/managers/utils/fab.py||airflow/auth/managers/utils/fab.py": [
          "File: airflow/auth/managers/utils/fab.py -> airflow/auth/managers/utils/fab.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     \"GET\": ACTION_CAN_READ,",
          "37:     \"PUT\": ACTION_CAN_EDIT,",
          "38:     \"DELETE\": ACTION_CAN_DELETE,",
          "39: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     \"MENU\": ACTION_CAN_ACCESS_MENU,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     \"\"\"Returns the map associating a FAB action to a method.\"\"\"",
          "49:     return {",
          "52:     }",
          "",
          "[Removed Lines]",
          "51:         ACTION_CAN_ACCESS_MENU: \"GET\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/security_manager.py||airflow/www/security_manager.py": [
          "File: airflow/www/security_manager.py -> airflow/www/security_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: from airflow.exceptions import AirflowException",
          "41: from airflow.models import Connection, DagRun, Pool, TaskInstance, Variable",
          "42: from airflow.security.permissions import (",
          "45:     RESOURCE_ADMIN_MENU,",
          "46:     RESOURCE_AUDIT_LOG,",
          "47:     RESOURCE_BROWSE_MENU,",
          "",
          "[Removed Lines]",
          "43:     ACTION_CAN_ACCESS_MENU,",
          "44:     ACTION_CAN_READ,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335:             # This means the page the user is trying to access is specific to the auth manager used",
          "336:             # Example: the user list view in FabAuthManager",
          "337:             return lambda action, resource_pk, user: get_auth_manager().is_authorized_custom_view(",
          "339:                 fab_resource_name=fab_resource_name,",
          "340:                 user=user,",
          "341:             )",
          "",
          "[Removed Lines]",
          "338:                 fab_action_name=ACTION_CAN_READ if action == ACTION_CAN_ACCESS_MENU else action,",
          "",
          "[Added Lines]",
          "336:                 fab_action_name=action,",
          "",
          "---------------"
        ],
        "tests/auth/managers/fab/test_fab_auth_manager.py||tests/auth/managers/fab/test_fab_auth_manager.py": [
          "File: tests/auth/managers/fab/test_fab_auth_manager.py -> tests/auth/managers/fab/test_fab_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     RESOURCE_DAG,",
          "41:     RESOURCE_DAG_RUN,",
          "42:     RESOURCE_DATASET,",
          "43:     RESOURCE_JOB,",
          "44:     RESOURCE_PLUGIN,",
          "45:     RESOURCE_PROVIDER,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     RESOURCE_DOCS,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:                         [(ACTION_CAN_DELETE, resource_type), (ACTION_CAN_CREATE, \"resource_test\")],",
          "144:                         True,",
          "145:                     ),",
          "147:                     (",
          "148:                         api_name,",
          "150:                         [(ACTION_CAN_ACCESS_MENU, resource_type)],",
          "151:                         True,",
          "152:                     ),",
          "",
          "[Removed Lines]",
          "146:                     # With permission (testing that ACTION_CAN_ACCESS_MENU gives GET permissions)",
          "149:                         \"GET\",",
          "",
          "[Added Lines]",
          "147:                     # With permission",
          "150:                         \"MENU\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:                 [(ACTION_CAN_READ, RESOURCE_TRIGGER)],",
          "350:                 False,",
          "351:             ),",
          "352:         ],",
          "353:     )",
          "354:     def test_is_authorized_view(self, access_view, user_permissions, expected_result, auth_manager):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:             # Docs (positive)",
          "354:             (",
          "355:                 AccessView.DOCS,",
          "356:                 [(ACTION_CAN_ACCESS_MENU, RESOURCE_DOCS)],",
          "357:                 True,",
          "358:             ),",
          "359:             # Without permission",
          "360:             (",
          "361:                 AccessView.DOCS,",
          "362:                 [(ACTION_CAN_READ, RESOURCE_DOCS)],",
          "363:                 False,",
          "364:             ),",
          "",
          "---------------"
        ]
      }
    }
  ]
}