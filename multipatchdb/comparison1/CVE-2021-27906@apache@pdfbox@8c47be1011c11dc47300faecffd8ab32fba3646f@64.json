{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "434d53822bd6fa85133a844e305cb2e5cd1bf32b",
      "candidate_info": {
        "commit_hash": "434d53822bd6fa85133a844e305cb2e5cd1bf32b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/434d53822bd6fa85133a844e305cb2e5cd1bf32b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java"
        ],
        "message": "PDFBOX-4892: correct javadoc and check parameter, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889575 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEDictionaryBasedColorSpace.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     }",
          "143:     public void setWhitePoint(PDTristimulus whitepoint)",
          "144:     {",
          "147:         {",
          "149:         }",
          "150:         fillWhitepointCache(whitepoint);",
          "151:     }",
          "159:     public void setBlackPoint(PDTristimulus blackpoint)",
          "160:     {",
          "167:     }",
          "169: }",
          "",
          "[Removed Lines]",
          "145:         COSBase wpArray = whitepoint.getCOSObject();",
          "146:         if (wpArray != null)",
          "148:             dictionary.setItem(COSName.WHITE_POINT, wpArray);",
          "161:         COSBase bpArray = null;",
          "162:         if (blackpoint != null)",
          "163:         {",
          "164:             bpArray = blackpoint.getCOSObject();",
          "165:         }",
          "166:         dictionary.setItem(COSName.BLACK_POINT, bpArray);",
          "",
          "[Added Lines]",
          "146:         if (whitepoint == null)",
          "148:             throw new IllegalArgumentException(\"Whitepoint may not be null\");",
          "150:         dictionary.setItem(COSName.WHITE_POINT, whitepoint);",
          "161:         dictionary.setItem(COSName.BLACK_POINT, blackpoint);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3ee2a26c29bc5151ef9cba1371e0198394a8554",
      "candidate_info": {
        "commit_hash": "f3ee2a26c29bc5151ef9cba1371e0198394a8554",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f3ee2a26c29bc5151ef9cba1371e0198394a8554",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java"
        ],
        "message": "PDFBOX-4892: dispose context, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889366 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/SoftMask.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         @Override",
          "206:         public void dispose()",
          "207:         {",
          "208:         }",
          "209:     }",
          "210: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:             context.dispose();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d55e9929dd739eb20348d0857f276429b4c14658",
      "candidate_info": {
        "commit_hash": "d55e9929dd739eb20348d0857f276429b4c14658",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d55e9929dd739eb20348d0857f276429b4c14658",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java"
        ],
        "message": "PDFBOX-2941: check rotation input value; keep image type; improve java doc; support some negative values; use int instead of double\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889243 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java||debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java||debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java -> debugger/src/main/java/org/apache/pdfbox/debugger/ui/ImageUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     public static BufferedImage getRotatedImage(BufferedImage image, int rotation)",
          "41:     {",
          "42:         int width = image.getWidth();",
          "43:         int height = image.getHeight();",
          "46:         BufferedImage rotatedImage;",
          "48:         {",
          "49:             case 90:",
          "50:                 x = height;",
          "52:                 break;",
          "53:             case 270:",
          "54:                 y = width;",
          "56:                 break;",
          "57:             case 180:",
          "58:                 x = width;",
          "59:                 y = height;",
          "61:                 break;",
          "62:             default:",
          "64:         }",
          "65:         Graphics2D g = (Graphics2D) rotatedImage.getGraphics();",
          "66:         g.translate(x, y);",
          "",
          "[Removed Lines]",
          "44:         double x = 0;",
          "45:         double y = 0;",
          "47:         switch (rotation % 360)",
          "51:                 rotatedImage = new BufferedImage(height, width, BufferedImage.TYPE_INT_RGB);",
          "55:                 rotatedImage = new BufferedImage(height, width, BufferedImage.TYPE_INT_RGB);",
          "60:                 rotatedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);",
          "63:                 return image;",
          "",
          "[Added Lines]",
          "45:         int x = 0;",
          "46:         int y = 0;",
          "48:         switch ((rotation + 360) % 360)",
          "50:             case 0:",
          "51:                 return image;",
          "54:                 rotatedImage = new BufferedImage(height, width, image.getType());",
          "58:                 rotatedImage = new BufferedImage(height, width, image.getType());",
          "63:                 rotatedImage = new BufferedImage(width, height, image.getType());",
          "66:                 throw new IllegalArgumentException(\"Only multiple of 90\u00b0 are supported\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8dffc8492a4b31267ae49061904f6db213616872",
      "candidate_info": {
        "commit_hash": "8dffc8492a4b31267ae49061904f6db213616872",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8dffc8492a4b31267ae49061904f6db213616872",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889461 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         WritableRaster raster = getColorModel().createCompatibleWritableRaster(w, h);",
          "177:         boolean useBackground;",
          "178:         int[] data = new int[w * h * 4];",
          "179:         for (int j = 0; j < h; j++)",
          "180:         {",
          "181:             for (int i = 0; i < w; i++)",
          "182:             {",
          "183:                 useBackground = false;",
          "185:                 rat.transform(values, 0, values, 0, 1);",
          "186:                 double inputValue = x1x0 * (values[0] - coords[0]) + y1y0 * (values[1] - coords[1]);",
          "",
          "[Removed Lines]",
          "184:                 float[] values = new float[] { x + i, y + j };",
          "",
          "[Added Lines]",
          "179:         float[] values = new float[2];",
          "185:                 values[0] = x + i;",
          "186:                 values[1] = y + j;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         float inputValue = -1;",
          "183:         boolean useBackground;",
          "184:         int[] data = new int[w * h * 4];",
          "185:         for (int j = 0; j < h; j++)",
          "186:         {",
          "187:             for (int i = 0; i < w; i++)",
          "188:             {",
          "190:                 rat.transform(values, 0, values, 0, 1);",
          "191:                 useBackground = false;",
          "192:                 float[] inputValues = calculateInputValues(values[0], values[1]);",
          "",
          "[Removed Lines]",
          "189:                 float[] values = new float[] { x + i, y + j };",
          "",
          "[Added Lines]",
          "185:         float[] values = new float[2];",
          "190:                 values[0] = x + i;",
          "191:                 values[1] = y + j;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     {",
          "102:         WritableRaster raster = getColorModel().createCompatibleWritableRaster(w, h);",
          "103:         int[] data = new int[w * h * 4];",
          "104:         for (int j = 0; j < h; j++)",
          "105:         {",
          "106:             for (int i = 0; i < w; i++)",
          "107:             {",
          "108:                 int index = (j * w + i) * 4;",
          "109:                 boolean useBackground = false;",
          "111:                 rat.transform(values, 0, values, 0, 1);",
          "112:                 if (values[0] < domain[0] || values[0] > domain[1] ||",
          "113:                     values[1] < domain[2] || values[1] > domain[3])",
          "",
          "[Removed Lines]",
          "110:                 float[] values = new float[] { x + i, y + j };",
          "",
          "[Added Lines]",
          "104:         float[] values = new float[2];",
          "111:                 values[0] = x + i;",
          "112:                 values[1] = y + j;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7083a9ae9ebe16c17c95eec1524bb17ef27aead9",
      "candidate_info": {
        "commit_hash": "7083a9ae9ebe16c17c95eec1524bb17ef27aead9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7083a9ae9ebe16c17c95eec1524bb17ef27aead9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ],
        "message": "PDFBOX-4892: avoid NPE, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890166 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:         try",
          "780:         {",
          "781:             Type1Font type1 = Type1Font.createWithPFB(input);",
          "783:             {",
          "784:                 fontInfoList.add(new FSIgnored(pfbFile, FontFormat.PFB, \"*skippipeinname*\"));",
          "785:                 LOG.warn(\"Skipping font with '|' in name \" + type1.getName() + \" in file \" + pfbFile);",
          "",
          "[Removed Lines]",
          "782:             if (type1.getName() != null && type1.getName().contains(\"|\"))",
          "",
          "[Added Lines]",
          "782:             if (type1.getName() == null)",
          "783:             {",
          "784:                 fontInfoList.add(new FSIgnored(pfbFile, FontFormat.PFB, \"*skipnoname*\"));",
          "785:                 LOG.warn(\"Missing 'name' entry for PostScript name in font \" + pfbFile);",
          "786:                 return;",
          "787:             }",
          "788:             if (type1.getName().contains(\"|\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}