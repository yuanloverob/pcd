{
  "cve_id": "CVE-2014-3429",
  "cve_desc": "IPython Notebook 0.12 through 1.x before 1.2 does not validate the origin of websocket requests, which allows remote attackers to execute arbitrary code by leveraging knowledge of the kernel id and a crafted page.",
  "repo": "ipython/ipython",
  "patch_hash": "e5b669ce4750d628dba383fd637dbde918ea15f5",
  "patch_info": {
    "commit_hash": "e5b669ce4750d628dba383fd637dbde918ea15f5",
    "repo": "ipython/ipython",
    "commit_url": "https://github.com/ipython/ipython/commit/e5b669ce4750d628dba383fd637dbde918ea15f5",
    "files": [
      "IPython/html/base/zmqhandlers.py"
    ],
    "message": "Merge pull request #4845 from rgbkrk/origin_host\n\nAdd Origin checking for websockets.",
    "before_after_code_files": [
      "IPython/html/base/zmqhandlers.py||IPython/html/base/zmqhandlers.py"
    ]
  },
  "patch_diff": {
    "IPython/html/base/zmqhandlers.py||IPython/html/base/zmqhandlers.py": [
      "File: IPython/html/base/zmqhandlers.py -> IPython/html/base/zmqhandlers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: # Imports",
      "17: #-----------------------------------------------------------------------------",
      "19: try:",
      "20:     from http.cookies import SimpleCookie  # Py 3",
      "21: except ImportError:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: try:",
      "20:     from urllib.parse import urlparse # Py 3",
      "21: except ImportError:",
      "22:     from urlparse import urlparse # Py 2",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37: #-----------------------------------------------------------------------------",
      "39: class ZMQStreamHandler(websocket.WebSocketHandler):",
      "41:     def clear_cookie(self, *args, **kwargs):",
      "42:         \"\"\"meaningless for websockets\"\"\"",
      "43:         pass",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:     def same_origin(self):",
      "47:         \"\"\"Check to see that origin and host match in the headers.\"\"\"",
      "49:         # The difference between version 8 and 13 is that in 8 the",
      "50:         # client sends a \"Sec-Websocket-Origin\" header and in 13 it's",
      "51:         # simply \"Origin\".",
      "52:         if self.request.headers.get(\"Sec-WebSocket-Version\") in (\"7\", \"8\"):",
      "53:             origin_header = self.request.headers.get(\"Sec-Websocket-Origin\")",
      "54:         else:",
      "55:             origin_header = self.request.headers.get(\"Origin\")",
      "57:         host = self.request.headers.get(\"Host\")",
      "59:         # If no header is provided, assume we can't verify origin",
      "60:         if(origin_header is None or host is None):",
      "61:             return False",
      "63:         parsed_origin = urlparse(origin_header)",
      "64:         origin = parsed_origin.netloc",
      "66:         # Check to see that origin matches host directly, including ports",
      "67:         return origin == host",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "86: class AuthenticatedZMQStreamHandler(ZMQStreamHandler, IPythonHandler):",
      "88:     def open(self, kernel_id):",
      "89:         self.kernel_id = cast_unicode(kernel_id, 'ascii')",
      "90:         self.session = Session(config=self.config)",
      "91:         self.save_on_message = self.on_message",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:         # Check to see that origin matches host directly, including ports",
      "118:         if not self.same_origin():",
      "119:             self.log.warn(\"Cross Origin WebSocket Attempt.\")",
      "120:             raise web.HTTPError(404)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "114:         if self.get_current_user() is None:",
      "115:             self.log.warn(\"Couldn't authenticate WebSocket connection\")",
      "116:             raise web.HTTPError(403)",
      "",
      "[Removed Lines]",
      "117:         self.on_message = self.save_on_message",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f4af9c7e399033c5580e3019b0c4e22518b2f2c",
      "candidate_info": {
        "commit_hash": "2f4af9c7e399033c5580e3019b0c4e22518b2f2c",
        "repo": "ipython/ipython",
        "commit_url": "https://github.com/ipython/ipython/commit/2f4af9c7e399033c5580e3019b0c4e22518b2f2c",
        "files": [
          "IPython/html/base/zmqhandlers.py"
        ],
        "message": "Backport PR #4845: Add Origin Checking to WebSockets",
        "before_after_code_files": [
          "IPython/html/base/zmqhandlers.py||IPython/html/base/zmqhandlers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "IPython/html/base/zmqhandlers.py||IPython/html/base/zmqhandlers.py"
          ],
          "candidate": [
            "IPython/html/base/zmqhandlers.py||IPython/html/base/zmqhandlers.py"
          ]
        }
      },
      "candidate_diff": {
        "IPython/html/base/zmqhandlers.py||IPython/html/base/zmqhandlers.py": [
          "File: IPython/html/base/zmqhandlers.py -> IPython/html/base/zmqhandlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: # Imports",
          "17: #-----------------------------------------------------------------------------",
          "19: import Cookie",
          "20: import logging",
          "21: from tornado import web",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from urlparse import urlparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: class ZMQStreamHandler(websocket.WebSocketHandler):",
          "38:     def clear_cookie(self, *args, **kwargs):",
          "39:         \"\"\"meaningless for websockets\"\"\"",
          "40:         pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     def same_origin(self):",
          "41:         \"\"\"Check to see that origin and host match in the headers.\"\"\"",
          "43:         # The difference between version 8 and 13 is that in 8 the",
          "44:         # client sends a \"Sec-Websocket-Origin\" header and in 13 it's",
          "45:         # simply \"Origin\".",
          "46:         if self.request.headers.get(\"Sec-WebSocket-Version\") in (\"7\", \"8\"):",
          "47:             origin_header = self.request.headers.get(\"Sec-Websocket-Origin\")",
          "48:         else:",
          "49:             origin_header = self.request.headers.get(\"Origin\")",
          "51:         host = self.request.headers.get(\"Host\")",
          "53:         # If no header is provided, assume we can't verify origin",
          "54:         if(origin_header is None or host is None):",
          "55:             return False",
          "57:         parsed_origin = urlparse(origin_header)",
          "58:         origin = parsed_origin.netloc",
          "60:         # Check to see that origin matches host directly, including ports",
          "61:         return origin == host",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: class AuthenticatedZMQStreamHandler(ZMQStreamHandler, IPythonHandler):",
          "85:     def open(self, kernel_id):",
          "86:         self.kernel_id = cast_unicode(kernel_id, 'ascii')",
          "87:         self.session = Session(config=self.config)",
          "88:         self.save_on_message = self.on_message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         # Check to see that origin matches host directly, including ports",
          "112:         if not self.same_origin():",
          "113:             self.log.warn(\"Cross Origin WebSocket Attempt.\")",
          "114:             raise web.HTTPError(404)",
          "",
          "---------------"
        ]
      }
    }
  ]
}