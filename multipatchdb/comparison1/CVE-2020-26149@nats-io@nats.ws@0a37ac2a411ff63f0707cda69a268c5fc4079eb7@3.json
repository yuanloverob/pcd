{
  "cve_id": "CVE-2020-26149",
  "cve_desc": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.",
  "repo": "nats-io/nats.ws",
  "patch_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
  "patch_info": {
    "commit_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "repo": "nats-io/nats.ws",
    "commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "files": [
      ".github/workflows/natsws.yml",
      "package.json",
      "src/nats-base-client.ts",
      "src/ws_transport.ts"
    ],
    "message": "[update] [security] updated nats-base-client to v1.0.0-9 (#47)\n\n* [update] [security] updated nats-base-client to v1.0.0-9\n\n* bumped package version",
    "before_after_code_files": [
      "src/nats-base-client.ts||src/nats-base-client.ts",
      "src/ws_transport.ts||src/ws_transport.ts"
    ]
  },
  "patch_diff": {
    "src/nats-base-client.ts||src/nats-base-client.ts": [
      "File: src/nats-base-client.ts -> src/nats-base-client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";",
      "",
      "[Added Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";",
      "",
      "---------------"
    ],
    "src/ws_transport.ts||src/ws_transport.ts": [
      "File: src/ws_transport.ts -> src/ws_transport.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   delay,",
      "27: } from \"./nats-base-client.ts\";",
      "30: const LANG = \"nats.ws\";",
      "32: export class WsTransport implements Transport {",
      "",
      "[Removed Lines]",
      "29: const VERSION = \"1.0.0-110\";",
      "",
      "[Added Lines]",
      "29: const VERSION = \"1.0.0-111\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee10ff31570836958d8653a9bc485ecbeceb3384",
      "candidate_info": {
        "commit_hash": "ee10ff31570836958d8653a9bc485ecbeceb3384",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/ee10ff31570836958d8653a9bc485ecbeceb3384",
        "files": [
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "prep release",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   render,",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-rc4/nats-base-client/internal_mod.ts\";",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "35: const VERSION = \"1.0.0-121\";",
          "",
          "[Added Lines]",
          "35: const VERSION = \"1.0.0-122\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "892258ba15e9f583ce7b89aeb7d7b86da6f9c36f",
      "candidate_info": {
        "commit_hash": "892258ba15e9f583ce7b89aeb7d7b86da6f9c36f",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/892258ba15e9f583ce7b89aeb7d7b86da6f9c36f",
        "files": [
          ".github/workflows/natsws.yml",
          "bin/cjs-fix-imports.ts",
          "bin/clone-nd.ts",
          "bin/file_server.ts",
          "package-lock.json",
          "package.json",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "Base client updates (#43)\n\n- Updated nats-base-client to 1.0.0-7, this update resolves issues with optional chaining affecting tools like webpack\n- Updated tools to use std@0.69.0\n- Removed file server tool, as deno is now merged with PR for that feature\n- Fixed import/export type requirements as per Deno 1.4.0 tsc\n- Changed signature of WS error handler to match typed argument definitions",
        "before_after_code_files": [
          "bin/cjs-fix-imports.ts||bin/cjs-fix-imports.ts",
          "bin/clone-nd.ts||bin/clone-nd.ts",
          "bin/file_server.ts||bin/file_server.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "bin/cjs-fix-imports.ts||bin/cjs-fix-imports.ts": [
          "File: bin/cjs-fix-imports.ts -> bin/cjs-fix-imports.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import {",
          "3:   join,",
          "4:   resolve,",
          "5:   basename,",
          "6:   extname,",
          "9: const argv = parse(",
          "10:   Deno.args,",
          "",
          "[Removed Lines]",
          "1: import { parse } from \"https://deno.land/std@0.61.0/flags/mod.ts\";",
          "7: } from \"https://deno.land/std@0.61.0/path/mod.ts\";",
          "",
          "[Added Lines]",
          "1: import { parse } from \"https://deno.land/std@0.69.0/flags/mod.ts\";",
          "7: } from \"https://deno.land/std@0.69.0/path/mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   let mod = txt.replace(/from\\s+\"(\\S+).[t|j]s\"/gim, 'from \"$1\"');",
          "76:   mod = mod.replace(/require\\(\"(\\S+).[j|t]s\"\\)/gim, 'require(\"$1\")');",
          "",
          "[Removed Lines]",
          "78:   mod = mod.replace(/(https:\\/\\/raw.githubusercontent.com\\/nats-io\\/nats.deno\\/\\S+\\/nats-base-client)/gim, \"../nats-base-client\")",
          "",
          "[Added Lines]",
          "78:   mod = mod.replace(",
          "79:     /(https:\\/\\/raw.githubusercontent.com\\/nats-io\\/nats.deno\\/\\S+\\/nats-base-client)/gim,",
          "80:     \"../nats-base-client\",",
          "81:   );",
          "",
          "---------------"
        ],
        "bin/clone-nd.ts||bin/clone-nd.ts": [
          "File: bin/clone-nd.ts -> bin/clone-nd.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import {",
          "3:   resolve,",
          "4:   join,",
          "7: const argv = parse(",
          "8:   Deno.args,",
          "",
          "[Removed Lines]",
          "1: import { parse } from \"https://deno.land/std@0.61.0/flags/mod.ts\";",
          "5: } from \"https://deno.land/std@0.61.0/path/mod.ts\";",
          "",
          "[Added Lines]",
          "1: import { parse } from \"https://deno.land/std@0.69.0/flags/mod.ts\";",
          "5: } from \"https://deno.land/std@0.69.0/path/mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: await Deno.lstat(dir)",
          "29:   .then(async () => {",
          "31:   })",
          "32:   .catch(async () => {",
          "33:     Deno.mkdir(dir)",
          "",
          "[Removed Lines]",
          "30:     await Deno.remove(join(dir, \"nats.deno\"), {recursive: true});",
          "",
          "[Added Lines]",
          "30:     await Deno.remove(join(dir, \"nats.deno\"), { recursive: true });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: git.status()",
          "61:   .then(() => {",
          "64:   .catch((err: Error) => {",
          "",
          "[Removed Lines]",
          "62:   console.log(\"OK\");",
          "63: })",
          "65:   console.error(`cloning nats.deno on branch ${m[2]} failed: ${err.message}`);",
          "66:   Deno.exit(1);",
          "67: });",
          "",
          "[Added Lines]",
          "62:     console.log(\"OK\");",
          "63:   })",
          "65:     console.error(`cloning nats.deno on branch ${m[2]} failed: ${err.message}`);",
          "66:     Deno.exit(1);",
          "67:   });",
          "",
          "---------------"
        ],
        "bin/file_server.ts||bin/file_server.ts": [
          "File: bin/file_server.ts -> bin/file_server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: export interface ConnectionOptions extends CO {",
          "20:   ws?: boolean;",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-5/nats-base-client/internal_mod.ts\";",
          "17: import { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-5/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-7/nats-base-client/internal_mod.ts\";",
          "17: import type { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-7/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import {",
          "16:   ErrorCode,",
          "17:   NatsError,",
          "18:   render,",
          "21:   deferred,",
          "22:   delay,",
          "23: } from \"./nats-base-client.ts\";",
          "28: const LANG = \"nats.ws\";",
          "30: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "19:   Transport,",
          "20:   Deferred,",
          "25: import { ConnectionOptions } from \"./nats-base-client.ts\";",
          "27: const VERSION = \"1.0.0-106\";",
          "",
          "[Added Lines]",
          "15: import type {",
          "16:   Transport,",
          "17:   Deferred,",
          "18: } from \"./nats-base-client.ts\";",
          "27: import type { ConnectionOptions } from \"./nats-base-client.ts\";",
          "29: const VERSION = \"1.0.0-108\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:       this._closed(reason);",
          "82:     };",
          "85:       const err = new NatsError(evt.message, ErrorCode.UNKNOWN);",
          "86:       if (!connected) {",
          "87:         connLock.reject(err);",
          "",
          "[Removed Lines]",
          "84:     this.socket.onerror = (evt: ErrorEvent) => {",
          "",
          "[Added Lines]",
          "86:     this.socket.onerror = (e: ErrorEvent | Event): any => {",
          "87:       const evt = e as ErrorEvent;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcd441cb6f7aaf71d634ae4368f7e450fc13c361",
      "candidate_info": {
        "commit_hash": "fcd441cb6f7aaf71d634ae4368f7e450fc13c361",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/fcd441cb6f7aaf71d634ae4368f7e450fc13c361",
        "files": [
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "bumped versions",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import { ConnectionOptions } from \"./nats-base-client.ts\";",
          "28: const LANG = \"nats.ws\";",
          "30: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "27: const VERSION = \"1.0.0-90\";",
          "",
          "[Added Lines]",
          "27: const VERSION = \"1.0.0-100\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02c6c69a3a9666e1c569f9f64bbf4bdf29289b5c",
      "candidate_info": {
        "commit_hash": "02c6c69a3a9666e1c569f9f64bbf4bdf29289b5c",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/02c6c69a3a9666e1c569f9f64bbf4bdf29289b5c",
        "files": [
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/basics.js",
          "test/jetstream.js"
        ],
        "message": "preparing for 1.3.0 (#108)\n\n* - [UPDATE] nbc to 1.2.0\n- [UPDATE] jetstreamManager.streams.getMessage(number) to use the correct api from nbc.\n- [UPDATE] index.d.ts to include changes to `PubAck` (`domain`), `ConsumerOptsBuilder#deliverLastPerSubject()`,  `DeliveryInfo` (`domain` and `account_hash`), `DeliveryPolicy#LastPerSubject`, renamed ConsumerInfo#SequencePair to ConsumerInfo#SequenceInfo, `ConsumerConfig` (`deliver_group` and `description`),\n\n- disabled wss on GA as CI seems to be rejecting cert",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/basics.js||test/basics.js",
          "test/jetstream.js||test/jetstream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: }",
          "283: export interface PubAck {",
          "284:     stream: string;",
          "285:     seq: number;",
          "286:     duplicate: boolean;",
          "287:     ack(): void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:     domain?: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:     durable(name: string): void;",
          "350:     deliverAll(): void;",
          "351:     deliverLast(): void;",
          "352:     deliverNew(): void;",
          "353:     startSequence(seq: number): void;",
          "354:     startTime(time: Date | Nanos): void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:     deliverLastPerSubject(): void;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:     ackAck(): Promise<boolean>;",
          "403: }",
          "404: export interface DeliveryInfo {",
          "405:     stream: string;",
          "406:     consumer: string;",
          "407:     redeliveryCount: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     domain: string;",
          "408:     account_hash?: string;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "511:     Last = \"last\",",
          "512:     New = \"new\",",
          "513:     StartSequence = \"by_start_sequence\",",
          "515: }",
          "516: export declare enum AckPolicy {",
          "517:     None = \"none\",",
          "",
          "[Removed Lines]",
          "514:     StartTime = \"by_start_time\"",
          "",
          "[Added Lines]",
          "518:     StartTime = \"by_start_time\",",
          "519:     LastPerSubject = \"last_per_subject\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "585:         time: string;",
          "586:     };",
          "587: }",
          "589:     \"consumer_seq\": number;",
          "590:     \"stream_seq\": number;",
          "591: }",
          "592: export interface ConsumerInfo {",
          "593:     \"stream_name\": string;",
          "594:     name: string;",
          "595:     created: number;",
          "596:     config: ConsumerConfig;",
          "599:     \"num_ack_pending\": number;",
          "600:     \"num_redelivered\": number;",
          "601:     \"num_waiting\": number;",
          "",
          "[Removed Lines]",
          "588: export interface SequencePair {",
          "597:     delivered: SequencePair;",
          "598:     \"ack_floor\": SequencePair;",
          "",
          "[Added Lines]",
          "593: export interface SequenceInfo {",
          "596:     \"last_active\": Nanos;",
          "603:     delivered: SequenceInfo;",
          "604:     \"ack_floor\": SequenceInfo;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "647:     name: string;",
          "648:     \"durable_name\"?: string;",
          "649:     \"deliver_subject\"?: string;",
          "650:     \"deliver_policy\": DeliverPolicy;",
          "651:     \"opt_start_seq\"?: number;",
          "652:     \"opt_start_time\"?: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     \"deliver_group\"?: string;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "661:     \"max_ack_pending\"?: number;",
          "662:     \"idle_heartbeat\"?: Nanos;",
          "663:     \"flow_control\"?: boolean;",
          "664: }",
          "665: export interface Consumer {",
          "666:     \"stream_name\": string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "671:     description?: string;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.2.0\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.3.0\";",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   t.pass();",
          "33: });",
          "36:   const conf = {",
          "37:     websocket: {",
          "38:       port: -1,",
          "39:       tls: tlsConfig(),",
          "40:     },",
          "41:   };",
          "42:   const ns = await NatsServer.start(conf);",
          "44:   await nc.flush();",
          "45:   await nc.close();",
          "46:   await ns.stop();",
          "",
          "[Removed Lines]",
          "35: test(\"basics - tls connect\", async (t) => {",
          "43:   const nc = await connect({ port: ns.websocket });",
          "",
          "[Added Lines]",
          "35: test(\"basics - wss connection\", async (t) => {",
          "36:   if (process.env.GITHUB_ACTIONS) {",
          "37:     t.log(\"skipping cert not trusted\");",
          "38:     t.pass();",
          "39:     return;",
          "40:   }",
          "50:   const nc = await connect({ servers: `wss://localhost:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:   t.pass();",
          "658: });",
          "676: test(\"basics - wsnats doesn't support tls options\", async (t) => {",
          "677:   const conf = {",
          "678:     websocket: {",
          "",
          "[Removed Lines]",
          "660: test(\"basics - wss connection\", async (t) => {",
          "661:   const conf = {",
          "662:     websocket: {",
          "663:       port: -1,",
          "664:       tls: tlsConfig(),",
          "665:     },",
          "666:   };",
          "668:   const ns = await NatsServer.start(conf);",
          "669:   const nc = await connect({ servers: `wss://127.0.0.1:${ns.websocket}` });",
          "670:   await nc.flush();",
          "671:   await nc.close();",
          "672:   await ns.stop();",
          "673:   t.pass();",
          "674: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "682:   };",
          "683:   const ns = await NatsServer.start(conf);",
          "684:   try {",
          "686:     t.fail(`should have failed with ${ErrorCode.InvalidOption}`);",
          "687:   } catch (err) {",
          "688:     t.is(err.code, ErrorCode.InvalidOption);",
          "",
          "[Removed Lines]",
          "685:     await connect({ servers: `wss://127.0.0.1:${ns.websocket}`, tls: {} });",
          "",
          "[Added Lines]",
          "676:     await connect({ servers: `wss://localhost:${ns.websocket}`, tls: {} });",
          "",
          "---------------"
        ],
        "test/jetstream.js||test/jetstream.js": [
          "File: test/jetstream.js -> test/jetstream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   consumers = await jsm.consumers.list(\"stream\").next();",
          "83:   t.is(consumers.length, 0);",
          "86:   t.is(sm.seq, 2);",
          "87:   t.truthy(sm.header);",
          "88:   t.is(sm.header.get(\"xxx\"), \"a\");",
          "",
          "[Removed Lines]",
          "85:   const sm = await jsm.streams.getMessage(\"stream\", 2);",
          "",
          "[Added Lines]",
          "85:   const sm = await jsm.streams.getMessage(\"stream\", { seq: 2 });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cefad21a23303a2dfafe86c53460f8e5ececd2d",
      "candidate_info": {
        "commit_hash": "1cefad21a23303a2dfafe86c53460f8e5ececd2d",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/1cefad21a23303a2dfafe86c53460f8e5ececd2d",
        "files": [
          "README.md",
          "nats.d.ts",
          "package.json",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/helpers/delay.js",
          "test/helpers/launcher.d.ts",
          "test/helpers/lock.js",
          "test/helpers/setup-browser-env.js"
        ],
        "message": "deps updates/cleanup (#40)\n\n- [chore] bumped to latest nats-base-client\n- [chore] updated the typescript definitions\n- [chore] added missing copyrights",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/helpers/delay.js||test/helpers/delay.js",
          "test/helpers/launcher.d.ts||test/helpers/launcher.d.ts",
          "test/helpers/lock.js||test/helpers/lock.js",
          "test/helpers/setup-browser-env.js||test/helpers/setup-browser-env.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export declare function connect(",
          "3: ): Promise<NatsConnection>;",
          "5: export interface NatsConnection {",
          "6:   closed(): Promise<void | Error>;",
          "7:   close(): Promise<void>;",
          "8:   publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "",
          "[Removed Lines]",
          "2:   opts: ConnectionOptions,",
          "",
          "[Added Lines]",
          "16:   opts?: ConnectionOptions,",
          "20:   info?: ServerInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   isDraining(): boolean;",
          "19:   getServer(): string;",
          "20:   status(): AsyncIterable<Status>;",
          "21: }",
          "38: export interface ConnectionOptions {",
          "39:   authenticator?: Authenticator;",
          "40:   debug?: boolean;",
          "",
          "[Removed Lines]",
          "23: export interface Status {",
          "24:   type: string;",
          "25:   data: string | ServersChanged;",
          "26: }",
          "28: export interface MsgHdrs extends Iterable<[string, string[]]> {",
          "29:   get(k: string): string;",
          "30:   set(k: string, v: string): void;",
          "31:   append(k: string, v: string): void;",
          "32:   has(k: string): boolean;",
          "33:   values(k: string): string[];",
          "34:   delete(k: string): void;",
          "35: }",
          "36: export declare function headers(): MsgHdrs;",
          "",
          "[Added Lines]",
          "36:   stats(): Stats;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   user?: string;",
          "62:   verbose?: boolean;",
          "63:   waitOnFirstConnect?: boolean;",
          "65: }",
          "66: export interface TlsOptions {",
          "67:   certFile?: string;",
          "68:   caFile?: string;",
          "69:   keyFile?: string;",
          "70: }",
          "78: }",
          "84: }",
          "88: }",
          "89: export interface Subscription extends AsyncIterable<Msg> {",
          "90:   unsubscribe(max?: number): void;",
          "91:   drain(): Promise<void>;",
          "",
          "[Removed Lines]",
          "64:   ws?: boolean;",
          "71: export interface Msg {",
          "72:   subject: string;",
          "73:   sid: number;",
          "74:   reply?: string;",
          "75:   data: Uint8Array;",
          "76:   headers?: MsgHdrs;",
          "77:   respond(data?: Uint8Array, headers?: MsgHdrs): boolean;",
          "79: export interface SubscriptionOptions {",
          "80:   queue?: string;",
          "81:   max?: number;",
          "82:   timeout?: number;",
          "83:   callback?: (err: NatsError | null, msg: Msg) => void;",
          "85: export interface ServersChanged {",
          "86:   readonly added: string[];",
          "87:   readonly deleted: string[];",
          "",
          "[Added Lines]",
          "73: declare type Auth = NoAuth | TokenAuth | UserPass | NKeyAuth | JwtAuth;",
          "75: export interface Authenticator {",
          "76:   (nonce?: string): Auth;",
          "79: export declare enum Events {",
          "80:   DISCONNECT = \"disconnect\",",
          "81:   RECONNECT = \"reconnect\",",
          "82:   UPDATE = \"update\",",
          "83:   LDM = \"ldm\",",
          "86: export interface Status {",
          "87:   type: string;",
          "88:   data: string | ServersChanged;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:   getID(): number;",
          "99:   getMax(): number | undefined;",
          "100: }",
          "101: export interface RequestOptions {",
          "102:   timeout: number;",
          "103:   headers?: MsgHdrs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: export interface SubscriptionOptions {",
          "105:   queue?: string;",
          "106:   max?: number;",
          "107:   timeout?: number;",
          "108:   callback?: (err: NatsError | null, msg: Msg) => void;",
          "109: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:   headers?: MsgHdrs;",
          "109: }",
          "111: export declare type NoAuth = void;",
          "112: export interface TokenAuth {",
          "113:   auth_token: string;",
          "114: }",
          "115: export interface UserPass {",
          "116:   user: string;",
          "117:   pass?: string;",
          "118: }",
          "119: export interface NKeyAuth {",
          "120:   nkey: string;",
          "121:   sig: string;",
          "122: }",
          "123: export interface JwtAuth {",
          "124:   jwt: string;",
          "125:   nkey?: string;",
          "126:   sig?: string;",
          "127: }",
          "135: export declare function noAuthFn(): Authenticator;",
          "141: export declare function nkeyAuthenticator(",
          "142:   seed?: Uint8Array | (() => Uint8Array),",
          "143: ): Authenticator;",
          "153: export declare function jwtAuthenticator(",
          "154:   ajwt: string | (() => string),",
          "155:   seed?: Uint8Array | (() => Uint8Array),",
          "156: ): Authenticator;",
          "162: export declare function credsAuthenticator(creds: Uint8Array): Authenticator;",
          "164: export declare enum ErrorCode {",
          "165:   BAD_AUTHENTICATION = \"BAD_AUTHENTICATION\",",
          "166:   BAD_CREDS = \"BAD_CREDS\",",
          "167:   BAD_HEADER = \"BAD_HEADER\",",
          "168:   BAD_JSON = \"BAD_JSON\",",
          "170:   BAD_PAYLOAD = \"BAD_PAYLOAD\",",
          "171:   CANCELLED = \"CANCELLED\",",
          "172:   CONNECTION_CLOSED = \"CONNECTION_CLOSED\",",
          "173:   CONNECTION_DRAINING = \"CONNECTION_DRAINING\",",
          "",
          "[Removed Lines]",
          "128: declare type Auth = NoAuth | TokenAuth | UserPass | NKeyAuth | JwtAuth;",
          "132: export interface Authenticator {",
          "133:   (nonce?: string): Auth;",
          "134: }",
          "169:   BAD_SUBJECT = \"BAD_SUBJECT\",",
          "",
          "[Added Lines]",
          "121: export interface Msg {",
          "122:   subject: string;",
          "123:   sid: number;",
          "124:   reply?: string;",
          "125:   data: Uint8Array;",
          "126:   headers?: MsgHdrs;",
          "127:   respond(data?: Uint8Array, headers?: MsgHdrs): boolean;",
          "128: }",
          "130: export interface MsgHdrs extends Iterable<[string, string[]]> {",
          "131:   get(k: string): string;",
          "132:   set(k: string, v: string): void;",
          "133:   append(k: string, v: string): void;",
          "134:   has(k: string): boolean;",
          "135:   values(k: string): string[];",
          "136:   delete(k: string): void;",
          "137: }",
          "138: export declare function headers(): MsgHdrs;",
          "140: export interface ServersChanged {",
          "141:   readonly added: string[];",
          "142:   readonly deleted: string[];",
          "143: }",
          "181:   API_ERROR = \"BAD API\",",
          "187:   BAD_SUBJECT = \"BAD_SUBJECT\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:   DISCONNECT = \"DISCONNECT\",",
          "177:   INVALID_OPTION = \"INVALID_OPTION\",",
          "178:   INVALID_PAYLOAD_TYPE = \"INVALID_PAYLOAD\",",
          "179:   NOT_FUNC = \"NOT_FUNC\",",
          "180:   REQUEST_ERROR = \"REQUEST_ERROR\",",
          "181:   SERVER_OPTION_NA = \"SERVER_OPT_NA\",",
          "182:   SUB_CLOSED = \"SUB_CLOSED\",",
          "183:   SUB_DRAINING = \"SUB_DRAINING\",",
          "184:   TIMEOUT = \"TIMEOUT\",",
          "185:   UNKNOWN = \"UNKNOWN_ERROR\",",
          "186:   WSS_REQUIRED = \"WSS_REQUIRED\",",
          "187:   AUTHORIZATION_VIOLATION = \"AUTHORIZATION_VIOLATION\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:   MAX_PAYLOAD_EXCEEDED = \"MAX_PAYLOAD_EXCEEDED\",",
          "203:   TLS = \"TLS\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:   code: string;",
          "196:   chainedError?: Error;",
          "197: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: export interface ServerInfo {",
          "219:   auth_required?: boolean;",
          "220:   client_id: number;",
          "221:   client_ip?: string;",
          "222:   connect_urls?: string[];",
          "223:   git_commit?: string;",
          "224:   go: string;",
          "225:   headers?: boolean;",
          "226:   host: string;",
          "227:   jetstream?: boolean;",
          "228:   ldm?: boolean;",
          "229:   max_payload: number;",
          "230:   nonce?: string;",
          "231:   port: number;",
          "232:   proto: number;",
          "233:   server_id: string;",
          "234:   server_name: string;",
          "235:   tls_available?: boolean;",
          "236:   tls_required?: boolean;",
          "237:   tls_verify?: boolean;",
          "238:   version: string;",
          "239: }",
          "241: export interface Stats {",
          "242:   inBytes: number;",
          "243:   outBytes: number;",
          "244:   inMsgs: number;",
          "245:   outMsgs: number;",
          "246: }",
          "248: export interface Codec<T> {",
          "249:   encode(d: T): Uint8Array;",
          "250:   decode(a: Uint8Array): T;",
          "251: }",
          "253: export declare function StringCodec(): Codec<string>;",
          "255: export declare function JSONCodec(): Codec<any>;",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: export interface ConnectionOptions extends CO {",
          "20:   ws?: boolean;",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-3/nats-base-client/internal_mod.ts\";",
          "17: import { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-3/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-4/nats-base-client/internal_mod.ts\";",
          "17: import { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-4/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import { ConnectionOptions } from \"./nats-base-client.ts\";",
          "28: const LANG = \"nats.ws\";",
          "30: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "27: const VERSION = \"1.0.0-101\";",
          "",
          "[Added Lines]",
          "27: const VERSION = \"1.0.0-104\";",
          "",
          "---------------"
        ],
        "test/helpers/delay.js||test/helpers/delay.js": [
          "File: test/helpers/delay.js -> test/helpers/delay.js"
        ],
        "test/helpers/launcher.d.ts||test/helpers/launcher.d.ts": [
          "File: test/helpers/launcher.d.ts -> test/helpers/launcher.d.ts"
        ],
        "test/helpers/lock.js||test/helpers/lock.js": [
          "File: test/helpers/lock.js -> test/helpers/lock.js"
        ],
        "test/helpers/setup-browser-env.js||test/helpers/setup-browser-env.js": [
          "File: test/helpers/setup-browser-env.js -> test/helpers/setup-browser-env.js"
        ]
      }
    }
  ]
}