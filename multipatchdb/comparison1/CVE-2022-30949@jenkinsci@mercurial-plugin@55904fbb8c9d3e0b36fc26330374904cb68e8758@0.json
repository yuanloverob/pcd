{
  "cve_id": "CVE-2022-30949",
  "cve_desc": "Jenkins REPO Plugin 1.14.0 and earlier allows attackers able to configure pipelines to check out some SCM repositories stored on the Jenkins controller's file system using local paths as SCM URLs, obtaining limited information about other projects' SCM contents.",
  "repo": "jenkinsci/mercurial-plugin",
  "patch_hash": "55904fbb8c9d3e0b36fc26330374904cb68e8758",
  "patch_info": {
    "commit_hash": "55904fbb8c9d3e0b36fc26330374904cb68e8758",
    "repo": "jenkinsci/mercurial-plugin",
    "commit_url": "https://github.com/jenkinsci/mercurial-plugin/commit/55904fbb8c9d3e0b36fc26330374904cb68e8758",
    "files": [
      "src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
      "src/test/java/hudson/plugins/mercurial/Security2478Test.java"
    ],
    "message": "SECURITY-2478",
    "before_after_code_files": [
      "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
      "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
    ]
  },
  "patch_diff": {
    "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java": [
      "File: src/main/java/hudson/plugins/mercurial/MercurialSCM.java -> src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import hudson.Extension;",
      "12: import hudson.FilePath;",
      "13: import hudson.Launcher;",
      "14: import hudson.Util;",
      "15: import hudson.matrix.MatrixRun;",
      "16: import hudson.model.AbstractBuild;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import hudson.Main;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50: import java.io.Serializable;",
      "51: import java.net.MalformedURLException;",
      "52: import java.nio.charset.StandardCharsets;",
      "53: import java.util.HashSet;",
      "54: import java.util.List;",
      "55: import java.util.Map;",
      "56: import java.util.Set;",
      "57: import java.util.logging.Level;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54: import java.nio.file.Files;",
      "55: import java.nio.file.Paths;",
      "58: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "62: import edu.umd.cs.findbugs.annotations.NonNull;",
      "63: import jenkins.model.Jenkins;",
      "64: import net.sf.json.JSONObject;",
      "65: import org.ini4j.Ini;",
      "66: import org.kohsuke.stapler.AncestorInPath;",
      "67: import org.kohsuke.stapler.DataBoundConstructor;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: import org.apache.commons.lang.StringUtils;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "75: public class MercurialSCM extends SCM implements Serializable {",
      "78:     private static final String ENV_MERCURIAL_REVISION = \"MERCURIAL_REVISION\";",
      "79:     private static final String ENV_MERCURIAL_REVISION_SHORT = \"MERCURIAL_REVISION_SHORT\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     static final String ALLOW_LOCAL_CHECKOUT_PROPERTY = MercurialSCM.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
      "84:     static /* not final */ boolean ALLOW_LOCAL_CHECKOUT =",
      "85:             Boolean.parseBoolean(System.getProperty(ALLOW_LOCAL_CHECKOUT_PROPERTY, String.valueOf(Main.isUnitTest)));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "561:             throws IOException, InterruptedException {",
      "563:         MercurialInstallation mercurialInstallation = findInstallation(installation);",
      "564:         final boolean jobShouldUseSharing = mercurialInstallation != null && mercurialInstallation.isUseSharing();",
      "566:         Node node = workspaceToNode(workspace);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:         if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
      "576:             abortIfSourceLocal();",
      "577:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "596:         }",
      "597:         }",
      "598:     }",
      "600:     private boolean canReuseWorkspace(FilePath repo, Node node,",
      "601:             boolean jobShouldUseSharing, Run<?,?> build,",
      "602:             Launcher launcher, TaskListener listener)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "615:     private void abortIfSourceLocal() throws IOException {",
      "616:         if (StringUtils.isNotEmpty(source) &&",
      "617:                 (source.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(source)))) {",
      "619:             throw new AbortException(\"Checkout of Mercurial source '\" + source + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
      "620:         }",
      "621:     }",
      "",
      "---------------"
    ],
    "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java": [
      "File: src/test/java/hudson/plugins/mercurial/Security2478Test.java -> src/test/java/hudson/plugins/mercurial/Security2478Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.plugins.mercurial;",
      "3: import hudson.FilePath;",
      "4: import hudson.model.Result;",
      "5: import hudson.slaves.DumbSlave;",
      "6: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
      "7: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
      "8: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
      "9: import org.junit.Before;",
      "10: import org.junit.Rule;",
      "11: import org.junit.Test;",
      "12: import org.junit.rules.TemporaryFolder;",
      "13: import org.junit.rules.TestRule;",
      "14: import org.jvnet.hudson.test.FlagRule;",
      "15: import org.jvnet.hudson.test.Issue;",
      "16: import org.jvnet.hudson.test.JenkinsRule;",
      "18: import java.io.File;",
      "19: import java.util.Collections;",
      "21: import static org.junit.Assert.assertFalse;",
      "23: public class Security2478Test {",
      "25:     private static final String INSTALLATION = \"mercurial\";",
      "27:     @Rule",
      "28:     public JenkinsRule rule = new JenkinsRule();",
      "29:     @Rule",
      "30:     public MercurialRule m = new MercurialRule(rule);",
      "32:     @Rule",
      "33:     public TestRule notAllowNonRemoteCheckout = new FlagRule<>(() -> MercurialSCM.ALLOW_LOCAL_CHECKOUT, x -> MercurialSCM.ALLOW_LOCAL_CHECKOUT = x, false);",
      "35:     @Rule",
      "36:     public TemporaryFolder tmp = new TemporaryFolder();",
      "37:     private File repo;",
      "39:     @Before",
      "40:     public void setUp() throws Exception {",
      "41:         repo = tmp.getRoot();",
      "42:         rule.jenkins",
      "43:                 .getDescriptorByType(MercurialInstallation.DescriptorImpl.class)",
      "44:                 .setInstallations(new MercurialInstallation(INSTALLATION, \"\", \"hg\",",
      "45:                         false, true, new File(tmp.newFolder(),\"custom-dir\").getAbsolutePath(), false, \"\",",
      "46:                         Collections.emptyList()));",
      "48:     }",
      "50:     @Issue(\"SECURITY-2478\")",
      "51:     @Test",
      "52:     public void checkoutShouldAbortWhenSourceIsNonRemoteAndBuildOnController() throws Exception {",
      "53:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
      "54:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
      "55:         FilePath sourcePath = rule.jenkins.getRootPath().createTempDir(\"t\", \"\");",
      "56:         String script = \"node {\\n\" +",
      "57:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + sourcePath + \"'])\\n\" +",
      "58:                 \"}\";",
      "59:         p.setDefinition(new CpsFlowDefinition(script, true));",
      "60:         WorkflowRun run = rule.assertBuildStatus(Result.FAILURE, p.scheduleBuild2(0));",
      "61:         rule.assertLogContains(\"Checkout of Mercurial source '\" + sourcePath + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + MercurialSCM.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", run);",
      "62:     }",
      "64:     @Issue(\"SECURITY-2478\")",
      "65:     @Test",
      "66:     public void checkoutOnAgentShouldNotAbortWhenSourceIsNonRemoteAndBuildOnAgent() throws Exception {",
      "67:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
      "68:         DumbSlave agent = rule.createOnlineSlave();",
      "69:         FilePath workspace = agent.getRootPath().createTempDir(\"t\", \"\");",
      "70:         m.hg(workspace, \"init\");",
      "71:         m.touchAndCommit(workspace, \"a\");",
      "72:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
      "73:         String script = \"node('slave0') {\\n\" +",
      "74:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + workspace + \"'])\\n\" +",
      "75:                 \"}\";",
      "76:         p.setDefinition(new CpsFlowDefinition(script, true));",
      "77:         rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
      "78:     }",
      "80:     @Issue(\"SECURITY-2478\")",
      "81:     @Test",
      "82:     public void checkoutShouldNotAbortWhenSourceIsAlias() throws Exception {",
      "83:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
      "85:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
      "86:         String aliasName = \"alias1\";",
      "88:         rule.jenkins.getDescriptorByType(MercurialInstallation.DescriptorImpl.class).setInstallations(new MercurialInstallation(\"mercurial\", \"\", \"hg\", false, false,\"\", false, \"[paths]\\n\" + aliasName + \" = https://www.mercurial-scm.org/repo/hello\", null));",
      "89:         String script = \"node {\\n\" +",
      "90:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + aliasName + \"'])\\n\" +",
      "91:                 \"}\";",
      "92:         p.setDefinition(new CpsFlowDefinition(script, true));",
      "93:         m.hg(new FilePath(repo), \"init\");",
      "94:         m.touchAndCommit(new FilePath(repo), \"a\");",
      "95:         WorkflowRun run = rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
      "96:         rule.assertLogNotContains(\"Checkout of Mercurial source '\" + aliasName + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + MercurialSCM.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", run);",
      "98:     }",
      "100:     @Issue(\"SECURITY-2478\")",
      "101:     @Test",
      "102:     public void checkoutShouldNotAbortWhenSourceIsAliasPointingToLocalPath() throws Exception {",
      "103:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
      "105:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
      "106:         String aliasName = \"alias1\";",
      "108:         rule.jenkins.getDescriptorByType(MercurialInstallation.DescriptorImpl.class).setInstallations(new MercurialInstallation(\"mercurial\", \"\", \"hg\", false, false,\"\", false, \"[paths]\\n\" + aliasName + \" = \" + repo.getPath(), null));",
      "109:         String script = \"node {\\n\" +",
      "110:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: 'alias1'])\\n\" +",
      "111:                 \"}\";",
      "112:         p.setDefinition(new CpsFlowDefinition(script, true));",
      "113:         m.hg(new FilePath(repo), \"init\");",
      "114:         m.touchAndCommit(new FilePath(repo), \"a\");",
      "115:         rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
      "116:     }",
      "117: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f0679b3cc2e2a5be315af64424c3dfad888f531d",
      "candidate_info": {
        "commit_hash": "f0679b3cc2e2a5be315af64424c3dfad888f531d",
        "repo": "jenkinsci/mercurial-plugin",
        "commit_url": "https://github.com/jenkinsci/mercurial-plugin/commit/f0679b3cc2e2a5be315af64424c3dfad888f531d",
        "files": [
          "src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java"
        ],
        "message": "[JENKINS-68562] Fix Mercurial checkouts on the built-in node for Windows controllers",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java||src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java": [
          "File: src/main/java/hudson/plugins/mercurial/MercurialSCM.java -> src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: import java.net.MalformedURLException;",
          "53: import java.nio.charset.StandardCharsets;",
          "54: import java.nio.file.Files;",
          "55: import java.nio.file.Paths;",
          "56: import java.util.HashSet;",
          "57: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: import java.nio.file.InvalidPathException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612:         }",
          "613:     }",
          "619:             throw new AbortException(\"Checkout of Mercurial source '\" + source + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "620:         }",
          "621:     }",
          "623:     private boolean canReuseWorkspace(FilePath repo, Node node,",
          "624:             boolean jobShouldUseSharing, Run<?,?> build,",
          "625:             Launcher launcher, TaskListener listener)",
          "",
          "[Removed Lines]",
          "615:     private void abortIfSourceLocal() throws IOException {",
          "616:         if (StringUtils.isNotEmpty(source) &&",
          "617:                 (source.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(source)))) {",
          "",
          "[Added Lines]",
          "616:     void abortIfSourceLocal() throws IOException {",
          "617:         if (!isValidSource(source)) {",
          "622:     private static boolean isValidSource(String source) {",
          "623:         if (StringUtils.isEmpty(source)) {",
          "624:             return true;",
          "625:         } else if (source.toLowerCase(Locale.ENGLISH).startsWith(\"file://\")) {",
          "626:             return false;",
          "627:         }",
          "628:         try {",
          "630:             return !Files.exists(Paths.get(source));",
          "631:         } catch (InvalidPathException e) {",
          "632:             return true;",
          "633:         }",
          "634:     }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java||src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java": [
          "File: src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java -> src/test/java/hudson/plugins/mercurial/MercurialSCMTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: package hudson.plugins.mercurial;",
          "27: import hudson.model.Action;",
          "28: import hudson.model.Actionable;",
          "29: import org.junit.Test;",
          "31: import java.io.IOException;",
          "32: import java.util.*;",
          "34: import static org.junit.Assert.assertEquals;",
          "36: public class MercurialSCMTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.AbortException;",
          "31: import org.jvnet.hudson.test.Issue;",
          "37: import static org.junit.Assert.fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:         assertEquals(EXPECTED_REPOSITORY_URL, actualEnvironment.get(\"MERCURIAL_REPOSITORY_URL\"));",
          "73:     }",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     @Issue(\"JENKINS-68562\")",
          "79:     @Test public void abortIfSourceIsLocal() throws IOException {",
          "80:         try {",
          "81:             new MercurialSCM(\"\", \"https://mercurialserver/testrepo\", \"\", \"\", \"\", null, true).abortIfSourceLocal();",
          "82:         } catch (AbortException e) {",
          "83:             fail(\"https source URLs should always be valid\");",
          "84:         }",
          "85:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f1cf481d9d8e88f68fafc8caf29323a9626dd54",
      "candidate_info": {
        "commit_hash": "3f1cf481d9d8e88f68fafc8caf29323a9626dd54",
        "repo": "jenkinsci/mercurial-plugin",
        "commit_url": "https://github.com/jenkinsci/mercurial-plugin/commit/3f1cf481d9d8e88f68fafc8caf29323a9626dd54",
        "files": [
          "pom.xml",
          "src/test/java/hudson/plugins/mercurial/Security2478Test.java"
        ],
        "message": "POM bumps",
        "before_after_code_files": [
          "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
          ],
          "candidate": [
            "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java": [
          "File: src/test/java/hudson/plugins/mercurial/Security2478Test.java -> src/test/java/hudson/plugins/mercurial/Security2478Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     public void checkoutOnAgentShouldNotAbortWhenSourceIsNonRemoteAndBuildOnAgent() throws Exception {",
          "67:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "68:         DumbSlave agent = rule.createOnlineSlave();",
          "70:         m.hg(workspace, \"init\");",
          "71:         m.touchAndCommit(workspace, \"a\");",
          "72:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "",
          "[Removed Lines]",
          "69:         FilePath workspace = agent.getRootPath().createTempDir(\"t\", \"\");",
          "",
          "[Added Lines]",
          "69:         FilePath workspace = agent.getRootPath().child(\"testws\");",
          "70:         workspace.mkdirs();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b995436e560b01818f5d9e9920990370cc575341",
      "candidate_info": {
        "commit_hash": "b995436e560b01818f5d9e9920990370cc575341",
        "repo": "jenkinsci/mercurial-plugin",
        "commit_url": "https://github.com/jenkinsci/mercurial-plugin/commit/b995436e560b01818f5d9e9920990370cc575341",
        "files": [
          "src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "src/test/java/hudson/plugins/mercurial/Security2478Test.java"
        ],
        "message": "SECURITY-2478",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
            "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
            "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java": [
          "File: src/main/java/hudson/plugins/mercurial/MercurialSCM.java -> src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.Extension;",
          "12: import hudson.FilePath;",
          "13: import hudson.Launcher;",
          "14: import hudson.Util;",
          "15: import hudson.matrix.MatrixRun;",
          "16: import hudson.model.AbstractBuild;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import hudson.Main;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: import java.io.Serializable;",
          "51: import java.net.MalformedURLException;",
          "52: import java.nio.charset.StandardCharsets;",
          "53: import java.util.HashSet;",
          "54: import java.util.List;",
          "55: import java.util.Map;",
          "56: import java.util.Set;",
          "57: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import java.nio.file.Files;",
          "55: import java.nio.file.Paths;",
          "58: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: import javax.annotation.Nonnull;",
          "63: import jenkins.model.Jenkins;",
          "64: import net.sf.json.JSONObject;",
          "65: import org.ini4j.Ini;",
          "66: import org.kohsuke.stapler.AncestorInPath;",
          "67: import org.kohsuke.stapler.DataBoundConstructor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: import org.apache.commons.lang.StringUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: public class MercurialSCM extends SCM implements Serializable {",
          "78:     private static final String ENV_MERCURIAL_REVISION = \"MERCURIAL_REVISION\";",
          "79:     private static final String ENV_MERCURIAL_REVISION_SHORT = \"MERCURIAL_REVISION_SHORT\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     static final String ALLOW_LOCAL_CHECKOUT_PROPERTY = MercurialSCM.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
          "84:     static /* not final */ boolean ALLOW_LOCAL_CHECKOUT =",
          "85:             Boolean.parseBoolean(System.getProperty(ALLOW_LOCAL_CHECKOUT_PROPERTY, String.valueOf(Main.isUnitTest)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:             throws IOException, InterruptedException {",
          "563:         MercurialInstallation mercurialInstallation = findInstallation(installation);",
          "564:         final boolean jobShouldUseSharing = mercurialInstallation != null && mercurialInstallation.isUseSharing();",
          "566:         Node node = workspaceToNode(workspace);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575:         if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
          "576:             abortIfSourceLocal();",
          "577:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596:         }",
          "597:         }",
          "598:     }",
          "600:     private boolean canReuseWorkspace(FilePath repo, Node node,",
          "601:             boolean jobShouldUseSharing, Run<?,?> build,",
          "602:             Launcher launcher, TaskListener listener)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:     private void abortIfSourceLocal() throws IOException {",
          "616:         if (StringUtils.isNotEmpty(source) &&",
          "617:                 (source.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(source)))) {",
          "619:             throw new AbortException(\"Checkout of Mercurial source '\" + source + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "620:         }",
          "621:     }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java": [
          "File: src/test/java/hudson/plugins/mercurial/Security2478Test.java -> src/test/java/hudson/plugins/mercurial/Security2478Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.plugins.mercurial;",
          "3: import hudson.FilePath;",
          "4: import hudson.model.Result;",
          "5: import hudson.slaves.DumbSlave;",
          "6: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
          "7: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
          "8: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
          "9: import org.junit.Before;",
          "10: import org.junit.Rule;",
          "11: import org.junit.Test;",
          "12: import org.junit.rules.TemporaryFolder;",
          "13: import org.junit.rules.TestRule;",
          "14: import org.jvnet.hudson.test.FlagRule;",
          "15: import org.jvnet.hudson.test.Issue;",
          "16: import org.jvnet.hudson.test.JenkinsRule;",
          "18: import java.io.File;",
          "19: import java.util.Collections;",
          "21: import static org.junit.Assert.assertFalse;",
          "23: public class Security2478Test {",
          "25:     private static final String INSTALLATION = \"mercurial\";",
          "27:     @Rule",
          "28:     public JenkinsRule rule = new JenkinsRule();",
          "29:     @Rule",
          "30:     public MercurialRule m = new MercurialRule(rule);",
          "32:     @Rule",
          "33:     public TestRule notAllowNonRemoteCheckout = new FlagRule<>(() -> MercurialSCM.ALLOW_LOCAL_CHECKOUT, x -> MercurialSCM.ALLOW_LOCAL_CHECKOUT = x, false);",
          "35:     @Rule",
          "36:     public TemporaryFolder tmp = new TemporaryFolder();",
          "37:     private File repo;",
          "39:     @Before",
          "40:     public void setUp() throws Exception {",
          "41:         repo = tmp.getRoot();",
          "42:         rule.jenkins",
          "43:                 .getDescriptorByType(MercurialInstallation.DescriptorImpl.class)",
          "44:                 .setInstallations(new MercurialInstallation(INSTALLATION, \"\", \"hg\",",
          "45:                         false, true, new File(tmp.newFolder(),\"custom-dir\").getAbsolutePath(), false, \"\",",
          "46:                         Collections.emptyList()));",
          "48:     }",
          "50:     @Issue(\"SECURITY-2478\")",
          "51:     @Test",
          "52:     public void checkoutShouldAbortWhenSourceIsNonRemoteAndBuildOnController() throws Exception {",
          "53:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "54:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "55:         FilePath sourcePath = rule.jenkins.getRootPath().createTempDir(\"t\", \"\");",
          "56:         String script = \"node {\\n\" +",
          "57:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + sourcePath + \"'])\\n\" +",
          "58:                 \"}\";",
          "59:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "60:         WorkflowRun run = rule.assertBuildStatus(Result.FAILURE, p.scheduleBuild2(0));",
          "61:         rule.assertLogContains(\"Checkout of Mercurial source '\" + sourcePath + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + MercurialSCM.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", run);",
          "62:     }",
          "64:     @Issue(\"SECURITY-2478\")",
          "65:     @Test",
          "66:     public void checkoutOnAgentShouldNotAbortWhenSourceIsNonRemoteAndBuildOnAgent() throws Exception {",
          "67:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "68:         DumbSlave agent = rule.createOnlineSlave();",
          "69:         FilePath workspace = agent.getRootPath().createTempDir(\"t\", \"\");",
          "70:         m.hg(workspace, \"init\");",
          "71:         m.touchAndCommit(workspace, \"a\");",
          "72:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "73:         String script = \"node('slave0') {\\n\" +",
          "74:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + workspace + \"'])\\n\" +",
          "75:                 \"}\";",
          "76:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "77:         rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "78:     }",
          "80:     @Issue(\"SECURITY-2478\")",
          "81:     @Test",
          "82:     public void checkoutShouldNotAbortWhenSourceIsAlias() throws Exception {",
          "83:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "85:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "86:         String aliasName = \"alias1\";",
          "88:         rule.jenkins.getDescriptorByType(MercurialInstallation.DescriptorImpl.class).setInstallations(new MercurialInstallation(\"mercurial\", \"\", \"hg\", false, false,\"\", false, \"[paths]\\n\" + aliasName + \" = https://www.mercurial-scm.org/repo/hello\", null));",
          "89:         String script = \"node {\\n\" +",
          "90:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + aliasName + \"'])\\n\" +",
          "91:                 \"}\";",
          "92:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "93:         m.hg(new FilePath(repo), \"init\");",
          "94:         m.touchAndCommit(new FilePath(repo), \"a\");",
          "95:         WorkflowRun run = rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "96:         rule.assertLogNotContains(\"Checkout of Mercurial source '\" + aliasName + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + MercurialSCM.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", run);",
          "98:     }",
          "100:     @Issue(\"SECURITY-2478\")",
          "101:     @Test",
          "102:     public void checkoutShouldNotAbortWhenSourceIsAliasPointingToLocalPath() throws Exception {",
          "103:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "105:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "106:         String aliasName = \"alias1\";",
          "108:         rule.jenkins.getDescriptorByType(MercurialInstallation.DescriptorImpl.class).setInstallations(new MercurialInstallation(\"mercurial\", \"\", \"hg\", false, false,\"\", false, \"[paths]\\n\" + aliasName + \" = \" + repo.getPath(), null));",
          "109:         String script = \"node {\\n\" +",
          "110:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: 'alias1'])\\n\" +",
          "111:                 \"}\";",
          "112:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "113:         m.hg(new FilePath(repo), \"init\");",
          "114:         m.touchAndCommit(new FilePath(repo), \"a\");",
          "115:         rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "116:     }",
          "117: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d4ef403978a344e2e089bd413a2dc7e0a445901",
      "candidate_info": {
        "commit_hash": "6d4ef403978a344e2e089bd413a2dc7e0a445901",
        "repo": "jenkinsci/mercurial-plugin",
        "commit_url": "https://github.com/jenkinsci/mercurial-plugin/commit/6d4ef403978a344e2e089bd413a2dc7e0a445901",
        "files": [
          "src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "src/test/java/hudson/plugins/mercurial/Security2478Test.java"
        ],
        "message": "SECURITY-2478",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
            "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
            "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/mercurial/MercurialSCM.java||src/main/java/hudson/plugins/mercurial/MercurialSCM.java": [
          "File: src/main/java/hudson/plugins/mercurial/MercurialSCM.java -> src/main/java/hudson/plugins/mercurial/MercurialSCM.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.Extension;",
          "12: import hudson.FilePath;",
          "13: import hudson.Launcher;",
          "14: import hudson.Util;",
          "15: import hudson.matrix.MatrixRun;",
          "16: import hudson.model.AbstractBuild;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import hudson.Main;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: import java.io.Serializable;",
          "51: import java.net.MalformedURLException;",
          "52: import java.nio.charset.StandardCharsets;",
          "53: import java.util.HashSet;",
          "54: import java.util.List;",
          "55: import java.util.Map;",
          "56: import java.util.Set;",
          "57: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import java.nio.file.Files;",
          "55: import java.nio.file.Paths;",
          "58: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: import javax.annotation.Nonnull;",
          "63: import jenkins.model.Jenkins;",
          "64: import net.sf.json.JSONObject;",
          "65: import org.ini4j.Ini;",
          "66: import org.kohsuke.stapler.AncestorInPath;",
          "67: import org.kohsuke.stapler.DataBoundConstructor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: import org.apache.commons.lang.StringUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: public class MercurialSCM extends SCM implements Serializable {",
          "78:     private static final String ENV_MERCURIAL_REVISION = \"MERCURIAL_REVISION\";",
          "79:     private static final String ENV_MERCURIAL_REVISION_SHORT = \"MERCURIAL_REVISION_SHORT\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     static final String ALLOW_LOCAL_CHECKOUT_PROPERTY = MercurialSCM.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
          "84:     static /* not final */ boolean ALLOW_LOCAL_CHECKOUT =",
          "85:             Boolean.parseBoolean(System.getProperty(ALLOW_LOCAL_CHECKOUT_PROPERTY, String.valueOf(Main.isUnitTest)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:             throws IOException, InterruptedException {",
          "563:         MercurialInstallation mercurialInstallation = findInstallation(installation);",
          "564:         final boolean jobShouldUseSharing = mercurialInstallation != null && mercurialInstallation.isUseSharing();",
          "566:         Node node = workspaceToNode(workspace);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575:         if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
          "576:             abortIfSourceLocal();",
          "577:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596:         }",
          "597:         }",
          "598:     }",
          "600:     private boolean canReuseWorkspace(FilePath repo, Node node,",
          "601:             boolean jobShouldUseSharing, Run<?,?> build,",
          "602:             Launcher launcher, TaskListener listener)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:     private void abortIfSourceLocal() throws IOException {",
          "616:         if (StringUtils.isNotEmpty(source) &&",
          "617:                 (source.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(source)))) {",
          "619:             throw new AbortException(\"Checkout of Mercurial source '\" + source + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "620:         }",
          "621:     }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/mercurial/Security2478Test.java||src/test/java/hudson/plugins/mercurial/Security2478Test.java": [
          "File: src/test/java/hudson/plugins/mercurial/Security2478Test.java -> src/test/java/hudson/plugins/mercurial/Security2478Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.plugins.mercurial;",
          "3: import hudson.FilePath;",
          "4: import hudson.model.Result;",
          "5: import hudson.slaves.DumbSlave;",
          "6: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
          "7: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
          "8: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
          "9: import org.junit.Before;",
          "10: import org.junit.Rule;",
          "11: import org.junit.Test;",
          "12: import org.junit.rules.TemporaryFolder;",
          "13: import org.junit.rules.TestRule;",
          "14: import org.jvnet.hudson.test.FlagRule;",
          "15: import org.jvnet.hudson.test.Issue;",
          "16: import org.jvnet.hudson.test.JenkinsRule;",
          "18: import java.io.File;",
          "19: import java.util.Collections;",
          "21: import static org.junit.Assert.assertFalse;",
          "23: public class Security2478Test {",
          "25:     private static final String INSTALLATION = \"mercurial\";",
          "27:     @Rule",
          "28:     public JenkinsRule rule = new JenkinsRule();",
          "29:     @Rule",
          "30:     public MercurialRule m = new MercurialRule(rule);",
          "32:     @Rule",
          "33:     public TestRule notAllowNonRemoteCheckout = new FlagRule<>(() -> MercurialSCM.ALLOW_LOCAL_CHECKOUT, x -> MercurialSCM.ALLOW_LOCAL_CHECKOUT = x, false);",
          "35:     @Rule",
          "36:     public TemporaryFolder tmp = new TemporaryFolder();",
          "37:     private File repo;",
          "39:     @Before",
          "40:     public void setUp() throws Exception {",
          "41:         repo = tmp.getRoot();",
          "42:         rule.jenkins",
          "43:                 .getDescriptorByType(MercurialInstallation.DescriptorImpl.class)",
          "44:                 .setInstallations(new MercurialInstallation(INSTALLATION, \"\", \"hg\",",
          "45:                         false, true, new File(tmp.newFolder(),\"custom-dir\").getAbsolutePath(), false, \"\",",
          "46:                         Collections.emptyList()));",
          "48:     }",
          "50:     @Issue(\"SECURITY-2478\")",
          "51:     @Test",
          "52:     public void checkoutShouldAbortWhenSourceIsNonRemoteAndBuildOnController() throws Exception {",
          "53:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "54:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "55:         FilePath sourcePath = rule.jenkins.getRootPath().createTempDir(\"t\", \"\");",
          "56:         String script = \"node {\\n\" +",
          "57:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + sourcePath + \"'])\\n\" +",
          "58:                 \"}\";",
          "59:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "60:         WorkflowRun run = rule.assertBuildStatus(Result.FAILURE, p.scheduleBuild2(0));",
          "61:         rule.assertLogContains(\"Checkout of Mercurial source '\" + sourcePath + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + MercurialSCM.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", run);",
          "62:     }",
          "64:     @Issue(\"SECURITY-2478\")",
          "65:     @Test",
          "66:     public void checkoutOnAgentShouldNotAbortWhenSourceIsNonRemoteAndBuildOnAgent() throws Exception {",
          "67:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "68:         DumbSlave agent = rule.createOnlineSlave();",
          "69:         FilePath workspace = agent.getRootPath().createTempDir(\"t\", \"\");",
          "70:         m.hg(workspace, \"init\");",
          "71:         m.touchAndCommit(workspace, \"a\");",
          "72:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "73:         String script = \"node('slave0') {\\n\" +",
          "74:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + workspace + \"'])\\n\" +",
          "75:                 \"}\";",
          "76:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "77:         rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "78:     }",
          "80:     @Issue(\"SECURITY-2478\")",
          "81:     @Test",
          "82:     public void checkoutShouldNotAbortWhenSourceIsAlias() throws Exception {",
          "83:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "85:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "86:         String aliasName = \"alias1\";",
          "88:         rule.jenkins.getDescriptorByType(MercurialInstallation.DescriptorImpl.class).setInstallations(new MercurialInstallation(\"mercurial\", \"\", \"hg\", false, false,\"\", false, \"[paths]\\n\" + aliasName + \" = https://www.mercurial-scm.org/repo/hello\", null));",
          "89:         String script = \"node {\\n\" +",
          "90:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: '\" + aliasName + \"'])\\n\" +",
          "91:                 \"}\";",
          "92:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "93:         m.hg(new FilePath(repo), \"init\");",
          "94:         m.touchAndCommit(new FilePath(repo), \"a\");",
          "95:         WorkflowRun run = rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "96:         rule.assertLogNotContains(\"Checkout of Mercurial source '\" + aliasName + \"' aborted because it references a local directory, which may be insecure. You can allow local checkouts anyway by setting the system property '\" + MercurialSCM.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", run);",
          "98:     }",
          "100:     @Issue(\"SECURITY-2478\")",
          "101:     @Test",
          "102:     public void checkoutShouldNotAbortWhenSourceIsAliasPointingToLocalPath() throws Exception {",
          "103:         assertFalse(\"Non Remote checkout should be disallowed\", MercurialSCM.ALLOW_LOCAL_CHECKOUT);",
          "105:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "106:         String aliasName = \"alias1\";",
          "108:         rule.jenkins.getDescriptorByType(MercurialInstallation.DescriptorImpl.class).setInstallations(new MercurialInstallation(\"mercurial\", \"\", \"hg\", false, false,\"\", false, \"[paths]\\n\" + aliasName + \" = \" + repo.getPath(), null));",
          "109:         String script = \"node {\\n\" +",
          "110:                 \"checkout([$class: 'MercurialSCM', credentialsId: '', installation: 'mercurial', source: 'alias1'])\\n\" +",
          "111:                 \"}\";",
          "112:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "113:         m.hg(new FilePath(repo), \"init\");",
          "114:         m.touchAndCommit(new FilePath(repo), \"a\");",
          "115:         rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "116:     }",
          "117: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}