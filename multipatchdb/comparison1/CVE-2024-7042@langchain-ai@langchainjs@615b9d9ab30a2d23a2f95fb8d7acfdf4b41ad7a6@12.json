{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b35889830e7a7c38b3c164cb45d5c13baa83168",
      "candidate_info": {
        "commit_hash": "8b35889830e7a7c38b3c164cb45d5c13baa83168",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/8b35889830e7a7c38b3c164cb45d5c13baa83168",
        "files": [
          "libs/langchain-anthropic/package.json",
          "libs/langchain-anthropic/src/tests/chat_models.int.test.ts",
          "libs/langchain-anthropic/src/utils/message_outputs.ts",
          "yarn.lock"
        ],
        "message": "fix(anthropic): Properly populate usage_metadata for Anthropic models (#7382)",
        "before_after_code_files": [
          "libs/langchain-anthropic/src/tests/chat_models.int.test.ts||libs/langchain-anthropic/src/tests/chat_models.int.test.ts",
          "libs/langchain-anthropic/src/utils/message_outputs.ts||libs/langchain-anthropic/src/utils/message_outputs.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-anthropic/src/tests/chat_models.int.test.ts||libs/langchain-anthropic/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-anthropic/src/tests/chat_models.int.test.ts -> libs/langchain-anthropic/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "713:   ];",
          "714:   const res = await model.invoke(messages);",
          "715:   expect(",
          "717:   ).toBeGreaterThan(0);",
          "719:   const res2 = await model.invoke(messages);",
          "722:     0",
          "723:   );",
          "724:   const stream = await model.stream(messages);",
          "",
          "[Removed Lines]",
          "716:     res.response_metadata.usage.cache_creation_input_tokens",
          "718:   expect(res.response_metadata.usage.cache_read_input_tokens).toBe(0);",
          "720:   expect(res2.response_metadata.usage.cache_creation_input_tokens).toBe(0);",
          "721:   expect(res2.response_metadata.usage.cache_read_input_tokens).toBeGreaterThan(",
          "",
          "[Added Lines]",
          "715:     res.usage_metadata?.input_token_details?.cache_creation",
          "717:   expect(res.usage_metadata?.input_token_details?.cache_read).toBe(0);",
          "719:   expect(res2.usage_metadata?.input_token_details?.cache_creation).toBe(0);",
          "720:   expect(res2.usage_metadata?.input_token_details?.cache_read).toBeGreaterThan(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "727:     agg = agg === undefined ? chunk : concat(agg, chunk);",
          "728:   }",
          "729:   expect(agg).toBeDefined();",
          "732:     0",
          "733:   );",
          "734: });",
          "",
          "[Removed Lines]",
          "730:   expect(agg!.response_metadata.usage.cache_creation_input_tokens).toBe(0);",
          "731:   expect(agg!.response_metadata.usage.cache_read_input_tokens).toBeGreaterThan(",
          "",
          "[Added Lines]",
          "729:   expect(agg!.usage_metadata?.input_token_details?.cache_creation).toBe(0);",
          "730:   expect(agg!.usage_metadata?.input_token_details?.cache_read).toBeGreaterThan(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:   const res = await model.invoke(messages);",
          "772:   console.log(res);",
          "773:   expect(",
          "775:   ).toBeGreaterThan(0);",
          "777:   const res2 = await model.invoke(messages);",
          "780:     0",
          "781:   );",
          "782: });",
          "",
          "[Removed Lines]",
          "774:     res.response_metadata.usage.cache_creation_input_tokens",
          "776:   expect(res.response_metadata.usage.cache_read_input_tokens).toBe(0);",
          "778:   expect(res2.response_metadata.usage.cache_creation_input_tokens).toBe(0);",
          "779:   expect(res2.response_metadata.usage.cache_read_input_tokens).toBeGreaterThan(",
          "",
          "[Added Lines]",
          "773:     res.usage_metadata?.input_token_details?.cache_creation",
          "775:   expect(res.usage_metadata?.input_token_details?.cache_read).toBe(0);",
          "777:   expect(res2.usage_metadata?.input_token_details?.cache_creation).toBe(0);",
          "778:   expect(res2.usage_metadata?.input_token_details?.cache_read).toBeGreaterThan(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:   const message = new HumanMessage(\"Hello!\");",
          "792:   const res = await chat.invoke([message]);",
          "795: });",
          "797: test(\"human message caching\", async () => {",
          "",
          "[Removed Lines]",
          "794:   expect(res.response_metadata.usage).toBeDefined();",
          "",
          "[Added Lines]",
          "793:   expect(res.usage_metadata?.input_token_details).toBeDefined();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "827:   const res = await model.invoke(messages);",
          "828:   expect(",
          "830:   ).toBeGreaterThan(0);",
          "832:   const res2 = await model.invoke(messages);",
          "835:     0",
          "836:   );",
          "837: });",
          "",
          "[Removed Lines]",
          "829:     res.response_metadata.usage.cache_creation_input_tokens",
          "831:   expect(res.response_metadata.usage.cache_read_input_tokens).toBe(0);",
          "833:   expect(res2.response_metadata.usage.cache_creation_input_tokens).toBe(0);",
          "834:   expect(res2.response_metadata.usage.cache_read_input_tokens).toBeGreaterThan(",
          "",
          "[Added Lines]",
          "828:     res.usage_metadata?.input_token_details?.cache_creation",
          "830:   expect(res.usage_metadata?.input_token_details?.cache_read).toBe(0);",
          "832:   expect(res2.usage_metadata?.input_token_details?.cache_creation).toBe(0);",
          "833:   expect(res2.usage_metadata?.input_token_details?.cache_read).toBeGreaterThan(",
          "",
          "---------------"
        ],
        "libs/langchain-anthropic/src/utils/message_outputs.ts||libs/langchain-anthropic/src/utils/message_outputs.ts": [
          "File: libs/langchain-anthropic/src/utils/message_outputs.ts -> libs/langchain-anthropic/src/utils/message_outputs.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:         filteredAdditionalKwargs[key] = value;",
          "31:       }",
          "32:     }",
          "34:     const usageMetadata: UsageMetadata = {",
          "35:       input_tokens,",
          "36:       output_tokens,",
          "37:       total_tokens: input_tokens + output_tokens,",
          "38:     };",
          "39:     return {",
          "40:       chunk: new AIMessageChunk({",
          "",
          "[Removed Lines]",
          "33:     const { input_tokens, output_tokens, ...rest } = usage ?? {};",
          "",
          "[Added Lines]",
          "34:     const { input_tokens, output_tokens, ...rest }: Record<string, any> =",
          "35:       usage ?? {};",
          "40:       input_token_details: {",
          "41:         cache_creation: rest.cache_creation_input_tokens,",
          "42:         cache_read: rest.cache_read_input_tokens,",
          "43:       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:       input_tokens: 0,",
          "55:       output_tokens: data.usage.output_tokens,",
          "56:       total_tokens: data.usage.output_tokens,",
          "57:     };",
          "58:     return {",
          "59:       chunk: new AIMessageChunk({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       input_token_details: {",
          "65:         cache_creation: (data.usage as any).cache_creation_input_tokens,",
          "67:         cache_read: (data.usage as any).cache_read_input_tokens,",
          "68:       },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:           input_tokens: usage.input_tokens ?? 0,",
          "172:           output_tokens: usage.output_tokens ?? 0,",
          "173:           total_tokens: (usage.input_tokens ?? 0) + (usage.output_tokens ?? 0),",
          "174:         }",
          "175:       : undefined;",
          "176:   if (messages.length === 1 && messages[0].type === \"text\") {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:           input_token_details: {",
          "187:             cache_creation: usage.cache_creation_input_tokens,",
          "188:             cache_read: usage.cache_read_input_tokens,",
          "189:           },",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   languageName: node",
          "242:   linkType: hard",
          "244: \"@anthropic-ai/vertex-sdk@npm:^0.4.1\":",
          "245:   version: 0.4.1",
          "246:   resolution: \"@anthropic-ai/vertex-sdk@npm:0.4.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244: \"@anthropic-ai/sdk@npm:^0.32.1\":",
          "245:   version: 0.32.1",
          "246:   resolution: \"@anthropic-ai/sdk@npm:0.32.1\"",
          "247:   dependencies:",
          "248:     \"@types/node\": ^18.11.18",
          "249:     \"@types/node-fetch\": ^2.6.4",
          "250:     abort-controller: ^3.0.0",
          "251:     agentkeepalive: ^4.2.1",
          "252:     form-data-encoder: 1.7.2",
          "253:     formdata-node: ^4.3.2",
          "254:     node-fetch: ^2.6.7",
          "255:   checksum: b48982e0ce066c99afe19448c5d6b38916c2c8873fbdcd4e5116abc45bcf241359604684856bfbd20fcfe00bf544d6d6e7bcf2686a9eb198bd671839b5cd0a67",
          "256:   languageName: node",
          "257:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11478:   version: 0.0.0-use.local",
          "11479:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
          "11480:   dependencies:",
          "11482:     \"@anthropic-ai/vertex-sdk\": ^0.4.1",
          "11483:     \"@jest/globals\": ^29.5.0",
          "11484:     \"@langchain/core\": \"workspace:*\"",
          "",
          "[Removed Lines]",
          "11481:     \"@anthropic-ai/sdk\": ^0.27.3",
          "",
          "[Added Lines]",
          "11496:     \"@anthropic-ai/sdk\": ^0.32.1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c77a8a5ed5c2e5f8e5de048d8fb84278c28bfae9",
      "candidate_info": {
        "commit_hash": "c77a8a5ed5c2e5f8e5de048d8fb84278c28bfae9",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/c77a8a5ed5c2e5f8e5de048d8fb84278c28bfae9",
        "files": [
          "libs/langchain-openai/package.json",
          "libs/langchain-openai/src/azure/chat_models.ts",
          "libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/azure/chat_models.test.ts",
          "libs/langchain-openai/src/tests/chat_models.test.ts",
          "libs/langchain-scripts/bin/extract_serializable_fields.js",
          "libs/langchain-scripts/package.json",
          "libs/langchain-scripts/src/extract_serializable_fields.ts",
          "yarn.lock"
        ],
        "message": "fix(openai): Prevent extra constructor params from being serialized, add script (#7669)",
        "before_after_code_files": [
          "libs/langchain-openai/src/azure/chat_models.ts||libs/langchain-openai/src/azure/chat_models.ts",
          "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/azure/chat_models.test.ts||libs/langchain-openai/src/tests/azure/chat_models.test.ts",
          "libs/langchain-openai/src/tests/chat_models.test.ts||libs/langchain-openai/src/tests/chat_models.test.ts",
          "libs/langchain-scripts/bin/extract_serializable_fields.js||libs/langchain-scripts/bin/extract_serializable_fields.js",
          "libs/langchain-scripts/src/extract_serializable_fields.ts||libs/langchain-scripts/src/extract_serializable_fields.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-openai/src/azure/chat_models.ts||libs/langchain-openai/src/azure/chat_models.ts": [
          "File: libs/langchain-openai/src/azure/chat_models.ts -> libs/langchain-openai/src/azure/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "473:     };",
          "474:   }",
          "476:   constructor(",
          "477:     fields?: Partial<OpenAIChatInput> &",
          "478:       Partial<AzureOpenAIInput> & {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:   get lc_serializable_keys(): string[] {",
          "477:     return [",
          "478:       ...super.lc_serializable_keys,",
          "479:       \"azureOpenAIApiKey\",",
          "480:       \"azureOpenAIApiVersion\",",
          "481:       \"azureOpenAIBasePath\",",
          "482:       \"azureOpenAIEndpoint\",",
          "483:       \"azureOpenAIApiInstanceName\",",
          "484:       \"azureOpenAIApiDeploymentName\",",
          "485:       \"deploymentName\",",
          "486:       \"openAIApiKey\",",
          "487:       \"openAIApiVersion\",",
          "488:     ];",
          "489:   }",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts": [
          "File: libs/langchain-openai/src/chat_models.ts -> libs/langchain-openai/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:     };",
          "906:   }",
          "908:   temperature?: number;",
          "910:   topP?: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:   get lc_serializable_keys(): string[] {",
          "909:     return [",
          "910:       \"configuration\",",
          "911:       \"logprobs\",",
          "912:       \"topLogprobs\",",
          "913:       \"prefixMessages\",",
          "914:       \"supportsStrictToolCalling\",",
          "915:       \"modalities\",",
          "916:       \"audio\",",
          "917:       \"reasoningEffort\",",
          "918:       \"temperature\",",
          "919:       \"maxTokens\",",
          "920:       \"topP\",",
          "921:       \"frequencyPenalty\",",
          "922:       \"presencePenalty\",",
          "923:       \"n\",",
          "924:       \"logitBias\",",
          "925:       \"user\",",
          "926:       \"streaming\",",
          "927:       \"streamUsage\",",
          "928:       \"modelName\",",
          "929:       \"model\",",
          "930:       \"modelKwargs\",",
          "931:       \"stop\",",
          "932:       \"stopSequences\",",
          "933:       \"timeout\",",
          "934:       \"openAIApiKey\",",
          "935:       \"apiKey\",",
          "936:       \"cache\",",
          "937:       \"maxConcurrency\",",
          "938:       \"maxRetries\",",
          "939:       \"verbose\",",
          "940:       \"callbacks\",",
          "941:       \"tags\",",
          "942:       \"metadata\",",
          "943:       \"disableStreaming\",",
          "944:     ];",
          "945:   }",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/tests/azure/chat_models.test.ts||libs/langchain-openai/src/tests/azure/chat_models.test.ts": [
          "File: libs/langchain-openai/src/tests/azure/chat_models.test.ts -> libs/langchain-openai/src/tests/azure/chat_models.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   );",
          "24: });",
          "26: test(\"Test Azure OpenAI serialization from base path\", async () => {",
          "27:   const chat = new AzureChatOpenAI({",
          "28:     azureOpenAIBasePath:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: test(\"Test Azure OpenAI serialization does not pass along extra params\", async () => {",
          "27:   const chat = new AzureChatOpenAI({",
          "28:     azureOpenAIEndpoint: \"https://foobar.openai.azure.com/\",",
          "29:     azureOpenAIApiDeploymentName: \"gpt-4o\",",
          "30:     azureOpenAIApiVersion: \"2024-08-01-preview\",",
          "31:     azureOpenAIApiKey: \"foo\",",
          "32:     extraParam: \"extra\",",
          "34:   } as any);",
          "35:   expect(JSON.stringify(chat)).toEqual(",
          "36:     `{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain\",\"chat_models\",\"azure_openai\",\"AzureChatOpenAI\"],\"kwargs\":{\"azure_endpoint\":\"https://foobar.openai.azure.com/\",\"deployment_name\":\"gpt-4o\",\"openai_api_version\":\"2024-08-01-preview\",\"azure_open_ai_api_key\":{\"lc\":1,\"type\":\"secret\",\"id\":[\"AZURE_OPENAI_API_KEY\"]}}}`",
          "37:   );",
          "38: });",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/tests/chat_models.test.ts||libs/langchain-openai/src/tests/chat_models.test.ts": [
          "File: libs/langchain-openai/src/tests/chat_models.test.ts -> libs/langchain-openai/src/tests/chat_models.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     }",
          "260:   });",
          "261: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: test(\"Test OpenAI serialization doesn't pass along extra params\", async () => {",
          "264:   const chat = new ChatOpenAI({",
          "265:     apiKey: \"test-key\",",
          "266:     model: \"o3-mini\",",
          "267:     somethingUnexpected: true,",
          "269:   } as any);",
          "270:   expect(JSON.stringify(chat)).toEqual(",
          "271:     `{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain\",\"chat_models\",\"openai\",\"ChatOpenAI\"],\"kwargs\":{\"openai_api_key\":{\"lc\":1,\"type\":\"secret\",\"id\":[\"OPENAI_API_KEY\"]},\"model\":\"o3-mini\"}}`",
          "272:   );",
          "273: });",
          "",
          "---------------"
        ],
        "libs/langchain-scripts/bin/extract_serializable_fields.js||libs/langchain-scripts/bin/extract_serializable_fields.js": [
          "File: libs/langchain-scripts/bin/extract_serializable_fields.js -> libs/langchain-scripts/bin/extract_serializable_fields.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env node",
          "2: import \"../dist/extract_serializable_fields.js\";",
          "",
          "---------------"
        ],
        "libs/langchain-scripts/src/extract_serializable_fields.ts||libs/langchain-scripts/src/extract_serializable_fields.ts": [
          "File: libs/langchain-scripts/src/extract_serializable_fields.ts -> libs/langchain-scripts/src/extract_serializable_fields.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import ts from \"typescript\";",
          "2: import * as path from \"path\";",
          "4: function extractConstructorParams(",
          "5:   sourceFile: string,",
          "6:   className: string",
          "7: ): { type: string; fields: string[] } | null {",
          "8:   const absolutePath = path.resolve(sourceFile);",
          "9:   const program = ts.createProgram([absolutePath], {",
          "10:     target: ts.ScriptTarget.ES2015,",
          "11:     module: ts.ModuleKind.CommonJS,",
          "12:   });",
          "13:   const source = program.getSourceFile(absolutePath);",
          "14:   const typeChecker = program.getTypeChecker();",
          "16:   if (!source) {",
          "17:     console.error(`Could not find source file: ${absolutePath}`);",
          "18:     return null;",
          "19:   }",
          "21:   let result: { type: string; fields: string[] } | null = null;",
          "23:   function visit(node: ts.Node) {",
          "24:     if (ts.isClassDeclaration(node) && node.name?.text === className) {",
          "25:       node.members.forEach((member) => {",
          "26:         if (",
          "27:           ts.isConstructorDeclaration(member) &&",
          "28:           member.parameters.length > 0",
          "29:         ) {",
          "30:           const firstParam = member.parameters[0];",
          "31:           const type = typeChecker.getTypeAtLocation(firstParam);",
          "32:           const typeString = typeChecker.typeToString(type);",
          "35:           const fields: string[] = [];",
          "36:           type.getProperties().forEach((prop) => {",
          "38:             const propType = typeChecker.getTypeOfSymbolAtLocation(",
          "39:               prop,",
          "40:               firstParam",
          "41:             );",
          "43:             if (",
          "44:               !prop.getName().startsWith(\"__\") &&",
          "45:               prop.getName() !== \"callbackManager\" &&",
          "46:               !(propType.getCallSignatures().length > 0)",
          "47:             ) {",
          "48:               fields.push(prop.getName());",
          "49:             }",
          "50:           });",
          "52:           result = {",
          "53:             type: typeString,",
          "54:             fields,",
          "55:           };",
          "56:         }",
          "57:       });",
          "58:     }",
          "59:     ts.forEachChild(node, visit);",
          "60:   }",
          "62:   visit(source);",
          "63:   return result;",
          "64: }",
          "65: const filepath = process.argv[2];",
          "66: const className = process.argv[3];",
          "68: if (!filepath || !className) {",
          "69:   console.error(",
          "70:     \"Usage: node extract_serializable_fields.ts <filepath> <className>\"",
          "71:   );",
          "72:   process.exit(1);",
          "73: }",
          "75: const results = extractConstructorParams(filepath, className);",
          "77: if (results?.fields?.length) {",
          "78:   console.log(JSON.stringify(results?.fields, null, 2));",
          "79: } else {",
          "80:   console.error(\"No constructor parameters found\");",
          "81: }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "13035:     zod: ^3.22.4",
          "13036:     zod-to-json-schema: ^3.22.3",
          "13037:   peerDependencies:",
          "13039:   languageName: unknown",
          "13040:   linkType: soft",
          "",
          "[Removed Lines]",
          "13038:     \"@langchain/core\": \">=0.3.29 <0.4.0\"",
          "",
          "[Added Lines]",
          "13038:     \"@langchain/core\": \">=0.3.39 <0.4.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13200:     tsx: ^4.16.2",
          "13201:     typescript: ^5.4.5",
          "13202:   bin:",
          "13203:     filter_spam_comment: bin/filter_spam_comment.js",
          "13204:     lc_build: bin/build.js",
          "13205:     notebook_validate: bin/validate_notebook.js",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13203:     extract_serializable_fields: bin/extract_serializable_fields.js",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "116982f6b1a72f1c4842f2ab561217f128abcf61",
      "candidate_info": {
        "commit_hash": "116982f6b1a72f1c4842f2ab561217f128abcf61",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/116982f6b1a72f1c4842f2ab561217f128abcf61",
        "files": [
          "docs/core_docs/docs/integrations/chat/anthropic.ipynb",
          "libs/langchain-anthropic/package.json",
          "libs/langchain-anthropic/src/chat_models.ts",
          "libs/langchain-anthropic/src/tests/chat_models.int.test.ts",
          "libs/langchain-anthropic/src/types.ts",
          "libs/langchain-anthropic/src/utils/message_inputs.ts",
          "libs/langchain-anthropic/src/utils/message_outputs.ts",
          "yarn.lock"
        ],
        "message": "feat(anthropic): Adds Anthropic citations support (#7651)",
        "before_after_code_files": [
          "libs/langchain-anthropic/src/chat_models.ts||libs/langchain-anthropic/src/chat_models.ts",
          "libs/langchain-anthropic/src/tests/chat_models.int.test.ts||libs/langchain-anthropic/src/tests/chat_models.int.test.ts",
          "libs/langchain-anthropic/src/types.ts||libs/langchain-anthropic/src/types.ts",
          "libs/langchain-anthropic/src/utils/message_inputs.ts||libs/langchain-anthropic/src/utils/message_inputs.ts",
          "libs/langchain-anthropic/src/utils/message_outputs.ts||libs/langchain-anthropic/src/utils/message_outputs.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-anthropic/src/chat_models.ts||libs/langchain-anthropic/src/chat_models.ts": [
          "File: libs/langchain-anthropic/src/chat_models.ts -> libs/langchain-anthropic/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: } from \"@langchain/core/runnables\";",
          "26: import { isZodSchema } from \"@langchain/core/utils/types\";",
          "27: import { z } from \"zod\";",
          "33: import { isLangChainTool } from \"@langchain/core/utils/function_calling\";",
          "34: import { AnthropicToolsOutputParser } from \"./output_parsers.js\";",
          "",
          "[Removed Lines]",
          "28: import type {",
          "29:   MessageCreateParams,",
          "30:   Tool as AnthropicTool,",
          "31: } from \"@anthropic-ai/sdk/resources/messages\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   headers?: Record<string, string>;",
          "65: }",
          "68:   return !!(params.tools && params.tools.length > 0);",
          "69: }",
          "73:   return \"input_schema\" in tool;",
          "74: }",
          "",
          "[Removed Lines]",
          "67: function _toolsInParams(params: AnthropicMessageCreateParams): boolean {",
          "72: function isAnthropicTool(tool: any): tool is AnthropicTool {",
          "",
          "[Added Lines]",
          "63: function _toolsInParams(",
          "64:   params: AnthropicMessageCreateParams | AnthropicStreamingMessageCreateParams",
          "65: ): boolean {",
          "69: function _documentsInParams(",
          "70:   params: AnthropicMessageCreateParams | AnthropicStreamingMessageCreateParams",
          "71: ): boolean {",
          "72:   for (const message of params.messages ?? []) {",
          "73:     if (typeof message.content === \"string\") {",
          "74:       continue;",
          "75:     }",
          "76:     for (const block of message.content ?? []) {",
          "77:       if (",
          "78:         typeof block === \"object\" &&",
          "79:         block != null &&",
          "80:         block.type === \"document\" &&",
          "81:         typeof block.citations === \"object\" &&",
          "82:         block.citations.enabled",
          "83:       ) {",
          "84:         return true;",
          "85:       }",
          "86:     }",
          "87:   }",
          "88:   return false;",
          "89: }",
          "92: function isAnthropicTool(tool: any): tool is Anthropic.Messages.Tool {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "686:   formatStructuredToolToAnthropic(",
          "687:     tools: ChatAnthropicCallOptions[\"tools\"]",
          "689:     if (!tools || !tools.length) {",
          "690:       return undefined;",
          "691:     }",
          "",
          "[Removed Lines]",
          "688:   ): AnthropicTool[] | undefined {",
          "",
          "[Added Lines]",
          "708:   ): Anthropic.Messages.Tool[] | undefined {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "697:         return {",
          "698:           name: tool.function.name,",
          "699:           description: tool.function.description,",
          "701:         };",
          "702:       }",
          "703:       if (isLangChainTool(tool)) {",
          "",
          "[Removed Lines]",
          "700:           input_schema: tool.function.parameters as AnthropicTool.InputSchema,",
          "",
          "[Added Lines]",
          "720:           input_schema: tool.function",
          "721:             .parameters as Anthropic.Messages.Tool.InputSchema,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "706:           description: tool.description,",
          "707:           input_schema: zodToJsonSchema(",
          "708:             tool.schema",
          "710:         };",
          "711:       }",
          "712:       throw new Error(",
          "",
          "[Removed Lines]",
          "709:           ) as AnthropicTool.InputSchema,",
          "",
          "[Added Lines]",
          "730:           ) as Anthropic.Messages.Tool.InputSchema,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "740:   > &",
          "741:     Kwargs {",
          "742:     const tool_choice:",
          "746:       | undefined = handleToolChoice(options?.tool_choice);",
          "748:     return {",
          "",
          "[Removed Lines]",
          "743:       | MessageCreateParams.ToolChoiceAuto",
          "744:       | MessageCreateParams.ToolChoiceAny",
          "745:       | MessageCreateParams.ToolChoiceTool",
          "",
          "[Added Lines]",
          "764:       | Anthropic.Messages.ToolChoiceAuto",
          "765:       | Anthropic.Messages.ToolChoiceAny",
          "766:       | Anthropic.Messages.ToolChoiceTool",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "784:   ): AsyncGenerator<ChatGenerationChunk> {",
          "785:     const params = this.invocationParams(options);",
          "786:     const formattedMessages = _convertMessagesToAnthropicPayload(messages);",
          "788:       ...params,",
          "789:       ...formattedMessages,",
          "804:     for await (const data of stream) {",
          "805:       if (options.signal?.aborted) {",
          "",
          "[Removed Lines]",
          "787:     const coerceContentToString = !_toolsInParams({",
          "790:       stream: false,",
          "791:     });",
          "793:     const stream = await this.createStreamWithRetry(",
          "794:       {",
          "795:         ...params,",
          "796:         ...formattedMessages,",
          "797:         stream: true,",
          "798:       },",
          "799:       {",
          "800:         headers: options.headers,",
          "801:       }",
          "802:     );",
          "",
          "[Added Lines]",
          "808:     const payload = {",
          "811:       stream: true,",
          "812:     } as const;",
          "813:     const coerceContentToString =",
          "814:       !_toolsInParams(payload) && !_documentsInParams(payload);",
          "816:     const stream = await this.createStreamWithRetry(payload, {",
          "817:       headers: options.headers,",
          "818:     });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1042:     let functionName = name ?? \"extract\";",
          "1043:     let outputParser: BaseLLMOutputParser<RunOutput>;",
          "1045:     if (isZodSchema(schema)) {",
          "1046:       const jsonSchema = zodToJsonSchema(schema);",
          "1047:       tools = [",
          "",
          "[Removed Lines]",
          "1044:     let tools: AnthropicTool[];",
          "",
          "[Added Lines]",
          "1060:     let tools: Anthropic.Messages.Tool[];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1049:           name: functionName,",
          "1050:           description:",
          "1051:             jsonSchema.description ?? \"A function available to call.\",",
          "1053:         },",
          "1054:       ];",
          "1055:       outputParser = new AnthropicToolsOutputParser({",
          "",
          "[Removed Lines]",
          "1052:           input_schema: jsonSchema as AnthropicTool.InputSchema,",
          "",
          "[Added Lines]",
          "1068:           input_schema: jsonSchema as Anthropic.Messages.Tool.InputSchema,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1058:         zodSchema: schema,",
          "1059:       });",
          "1060:     } else {",
          "1062:       if (",
          "1063:         typeof schema.name === \"string\" &&",
          "1064:         typeof schema.description === \"string\" &&",
          "1065:         typeof schema.input_schema === \"object\" &&",
          "1066:         schema.input_schema != null",
          "1067:       ) {",
          "1069:         functionName = schema.name;",
          "1070:       } else {",
          "1071:         anthropicTools = {",
          "1072:           name: functionName,",
          "1073:           description: schema.description ?? \"\",",
          "1075:         };",
          "1076:       }",
          "1077:       tools = [anthropicTools];",
          "",
          "[Removed Lines]",
          "1061:       let anthropicTools: AnthropicTool;",
          "1068:         anthropicTools = schema as AnthropicTool;",
          "1074:           input_schema: schema as AnthropicTool.InputSchema,",
          "",
          "[Added Lines]",
          "1077:       let anthropicTools: Anthropic.Messages.Tool;",
          "1084:         anthropicTools = schema as Anthropic.Messages.Tool;",
          "1090:           input_schema: schema as Anthropic.Messages.Tool.InputSchema,",
          "",
          "---------------"
        ],
        "libs/langchain-anthropic/src/tests/chat_models.int.test.ts||libs/langchain-anthropic/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-anthropic/src/tests/chat_models.int.test.ts -> libs/langchain-anthropic/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "869:   expect(response.content.length).toBeGreaterThan(10);",
          "870: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872: test(\"Citations\", async () => {",
          "873:   const citationsModel = new ChatAnthropic({",
          "874:     model: \"claude-3-5-sonnet-latest\",",
          "875:   });",
          "877:   const messages = [",
          "878:     {",
          "879:       role: \"user\",",
          "880:       content: [",
          "881:         {",
          "882:           type: \"document\",",
          "883:           source: {",
          "884:             type: \"text\",",
          "885:             media_type: \"text/plain\",",
          "886:             data: \"The grass the user is asking about is bluegrass. The sky is orange because it's night.\",",
          "887:           },",
          "888:           title: \"My Document\",",
          "889:           context: \"This is a trustworthy document.\",",
          "890:           citations: {",
          "891:             enabled: true,",
          "892:           },",
          "893:         },",
          "894:         {",
          "895:           type: \"text\",",
          "896:           text: \"What color is the grass and sky?\",",
          "897:         },",
          "898:       ],",
          "899:     },",
          "900:   ];",
          "902:   const response = await citationsModel.invoke(messages);",
          "904:   expect(response.content.length).toBeGreaterThan(2);",
          "905:   expect(Array.isArray(response.content)).toBe(true);",
          "906:   const blocksWithCitations = (response.content as any[]).filter(",
          "907:     (block) => block.citations !== undefined",
          "908:   );",
          "909:   expect(blocksWithCitations.length).toEqual(2);",
          "910:   expect(typeof blocksWithCitations[0].citations[0]).toEqual(\"object\");",
          "912:   const stream = await citationsModel.stream(messages);",
          "913:   let aggregated;",
          "914:   let chunkHasCitation = false;",
          "915:   for await (const chunk of stream) {",
          "916:     aggregated = aggregated === undefined ? chunk : concat(aggregated, chunk);",
          "917:     if (",
          "918:       !chunkHasCitation &&",
          "919:       Array.isArray(chunk.content) &&",
          "920:       chunk.content.some((c: any) => c.citations !== undefined)",
          "921:     ) {",
          "922:       chunkHasCitation = true;",
          "923:     }",
          "924:   }",
          "925:   expect(chunkHasCitation).toBe(true);",
          "926:   expect(Array.isArray(aggregated?.content)).toBe(true);",
          "927:   expect(aggregated?.content.length).toBeGreaterThan(2);",
          "928:   expect(",
          "929:     (aggregated?.content as any[]).some((c) => c.citations !== undefined)",
          "930:   ).toBe(true);",
          "931: });",
          "",
          "---------------"
        ],
        "libs/langchain-anthropic/src/types.ts||libs/langchain-anthropic/src/types.ts": [
          "File: libs/langchain-anthropic/src/types.ts -> libs/langchain-anthropic/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import Anthropic from \"@anthropic-ai/sdk\";",
          "3: import { BindToolsInput } from \"@langchain/core/language_models/chat_models\";",
          "5: export type AnthropicToolResponse = {",
          "",
          "[Removed Lines]",
          "2: import type { Tool as AnthropicTool } from \"@anthropic-ai/sdk/resources/messages\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   | \"auto\"",
          "29:   | \"none\"",
          "30:   | string;",
          "32: export type AnthropicTextBlockParam = Anthropic.Messages.TextBlockParam;",
          "33: export type AnthropicImageBlockParam = Anthropic.Messages.ImageBlockParam;",
          "34: export type AnthropicToolUseBlockParam = Anthropic.Messages.ToolUseBlockParam;",
          "35: export type AnthropicToolResultBlockParam =",
          "36:   Anthropic.Messages.ToolResultBlockParam;",
          "",
          "[Removed Lines]",
          "31: export type ChatAnthropicToolType = AnthropicTool | BindToolsInput;",
          "",
          "[Added Lines]",
          "30: export type ChatAnthropicToolType = Anthropic.Messages.Tool | BindToolsInput;",
          "36: export type AnthropicDocumentBlockParam = Anthropic.Messages.DocumentBlockParam;",
          "",
          "---------------"
        ],
        "libs/langchain-anthropic/src/utils/message_inputs.ts||libs/langchain-anthropic/src/utils/message_inputs.ts": [
          "File: libs/langchain-anthropic/src/utils/message_inputs.ts -> libs/langchain-anthropic/src/utils/message_inputs.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   AnthropicToolResponse,",
          "19:   AnthropicToolResultBlockParam,",
          "20:   AnthropicToolUseBlockParam,",
          "21: } from \"../types.js\";",
          "23: function _formatImage(imageUrl: string) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:   AnthropicDocumentBlockParam,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:       } else if (contentPart.type === \"document\") {",
          "136:         return {",
          "139:           ...(cacheControl ? { cache_control: cacheControl } : {}),",
          "140:         };",
          "141:       } else if (",
          "",
          "[Removed Lines]",
          "137:           type: \"document\",",
          "138:           source: contentPart.source,",
          "",
          "[Added Lines]",
          "138:           ...contentPart,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:           | AnthropicImageBlockParam",
          "283:           | AnthropicToolUseBlockParam",
          "284:           | AnthropicToolResultBlockParam",
          "285:         >",
          "286:   ): Array<",
          "287:     | AnthropicTextBlockParam",
          "288:     | AnthropicImageBlockParam",
          "289:     | AnthropicToolUseBlockParam",
          "290:     | AnthropicToolResultBlockParam",
          "291:   > => {",
          "292:     if (typeof content === \"string\") {",
          "293:       return [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:           | AnthropicDocumentBlockParam",
          "292:     | AnthropicDocumentBlockParam",
          "",
          "---------------"
        ],
        "libs/langchain-anthropic/src/utils/message_outputs.ts||libs/langchain-anthropic/src/utils/message_outputs.ts": [
          "File: libs/langchain-anthropic/src/utils/message_outputs.ts -> libs/langchain-anthropic/src/utils/message_outputs.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   AIMessageChunk,",
          "8:   UsageMetadata,",
          "9: } from \"@langchain/core/messages\";",
          "10: import { ChatGeneration } from \"@langchain/core/outputs\";",
          "11: import { AnthropicMessageResponse } from \"../types.js\";",
          "12: import { extractToolCalls } from \"../output_parsers.js\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import type { ToolCallChunk } from \"@langchain/core/messages/tool\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     };",
          "77:   } else if (",
          "78:     data.type === \"content_block_start\" &&",
          "80:   ) {",
          "83:     return {",
          "84:       chunk: new AIMessageChunk({",
          "85:         content: fields.coerceContentToString",
          "",
          "[Removed Lines]",
          "79:     data.content_block.type === \"tool_use\"",
          "81:     const toolCallContentBlock =",
          "82:       data.content_block as Anthropic.Messages.ToolUseBlock;",
          "",
          "[Added Lines]",
          "80:     [\"tool_use\", \"document\"].includes(data.content_block.type)",
          "82:     const contentBlock = data.content_block;",
          "83:     let toolCallChunks: ToolCallChunk[];",
          "84:     if (contentBlock.type === \"tool_use\") {",
          "85:       toolCallChunks = [",
          "86:         {",
          "87:           id: contentBlock.id,",
          "88:           index: data.index,",
          "89:           name: contentBlock.name,",
          "90:           args: \"\",",
          "91:         },",
          "92:       ];",
          "93:     } else {",
          "94:       toolCallChunks = [];",
          "95:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:               },",
          "93:             ],",
          "94:         additional_kwargs: {},",
          "103:       }),",
          "104:     };",
          "105:   } else if (",
          "106:     data.type === \"content_block_delta\" &&",
          "108:   ) {",
          "111:       return {",
          "112:         chunk: new AIMessageChunk({",
          "122:         }),",
          "123:       };",
          "124:     }",
          "",
          "[Removed Lines]",
          "95:         tool_call_chunks: [",
          "96:           {",
          "97:             id: toolCallContentBlock.id,",
          "98:             index: data.index,",
          "99:             name: toolCallContentBlock.name,",
          "100:             args: \"\",",
          "101:           },",
          "102:         ],",
          "107:     data.delta.type === \"text_delta\"",
          "109:     const content = data.delta?.text;",
          "110:     if (content !== undefined) {",
          "113:           content: fields.coerceContentToString",
          "114:             ? content",
          "115:             : [",
          "116:                 {",
          "117:                   index: data.index,",
          "118:                   ...data.delta,",
          "119:                 },",
          "120:               ],",
          "121:           additional_kwargs: {},",
          "",
          "[Added Lines]",
          "108:         tool_call_chunks: toolCallChunks,",
          "113:     [\"text_delta\", \"citations_delta\"].includes(data.delta.type)",
          "115:     if (fields.coerceContentToString && \"text\" in data.delta) {",
          "116:       return {",
          "117:         chunk: new AIMessageChunk({",
          "118:           content: data.delta.text,",
          "119:         }),",
          "120:       };",
          "121:     } else {",
          "123:       const contentBlock: Record<string, any> = data.delta;",
          "124:       if (\"citation\" in contentBlock) {",
          "125:         contentBlock.citations = [contentBlock.citation];",
          "126:         delete contentBlock.citation;",
          "127:       }",
          "130:           content: [{ index: data.index, ...contentBlock, type: \"text\" }],",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   languageName: node",
          "242:   linkType: hard",
          "247:   dependencies:",
          "248:     \"@types/node\": ^18.11.18",
          "249:     \"@types/node-fetch\": ^2.6.4",
          "",
          "[Removed Lines]",
          "244: \"@anthropic-ai/sdk@npm:^0.32.1\":",
          "245:   version: 0.32.1",
          "246:   resolution: \"@anthropic-ai/sdk@npm:0.32.1\"",
          "",
          "[Added Lines]",
          "244: \"@anthropic-ai/sdk@npm:^0.36.3\":",
          "245:   version: 0.36.3",
          "246:   resolution: \"@anthropic-ai/sdk@npm:0.36.3\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:     form-data-encoder: 1.7.2",
          "253:     formdata-node: ^4.3.2",
          "254:     node-fetch: ^2.6.7",
          "256:   languageName: node",
          "257:   linkType: hard",
          "",
          "[Removed Lines]",
          "255:   checksum: b48982e0ce066c99afe19448c5d6b38916c2c8873fbdcd4e5116abc45bcf241359604684856bfbd20fcfe00bf544d6d6e7bcf2686a9eb198bd671839b5cd0a67",
          "",
          "[Added Lines]",
          "255:   checksum: 783a051fea42bb8cc52f92b1aaf1d5d1fb9412f8cc54c0cc3b4f6b5c3b97056bcdebc7c17d0b7efca67a8cf92642e2c9c50d49af80d2bd33b4cf286edf51664c",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11536:   version: 0.0.0-use.local",
          "11537:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
          "11538:   dependencies:",
          "11540:     \"@anthropic-ai/vertex-sdk\": ^0.4.1",
          "11541:     \"@jest/globals\": ^29.5.0",
          "11542:     \"@langchain/core\": \"workspace:*\"",
          "",
          "[Removed Lines]",
          "11539:     \"@anthropic-ai/sdk\": ^0.32.1",
          "",
          "[Added Lines]",
          "11539:     \"@anthropic-ai/sdk\": ^0.36.3",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d49fa3553123dad7720203e0eccfc200522962c2",
      "candidate_info": {
        "commit_hash": "d49fa3553123dad7720203e0eccfc200522962c2",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/d49fa3553123dad7720203e0eccfc200522962c2",
        "files": [
          "docs/core_docs/.gitignore",
          "docs/core_docs/docs/integrations/chat/arcjet.ipynb",
          "docs/core_docs/docs/integrations/llms/arcjet.ipynb",
          "docs/core_docs/src/theme/FeatureTables.js",
          "libs/langchain-community/.gitignore",
          "libs/langchain-community/langchain.config.js",
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/chat_models/arcjet.ts",
          "libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts",
          "libs/langchain-community/src/llms/arcjet.ts",
          "libs/langchain-community/src/llms/tests/arcjet.test.ts",
          "libs/langchain-community/src/load/import_constants.ts",
          "yarn.lock"
        ],
        "message": "feat(community): Add arcjet integration (#6725)\n\nCo-authored-by: e-moran <eoin@arcjet.com>\nCo-authored-by: Eoin Power-Moran <37004949+e-moran@users.noreply.github.com>",
        "before_after_code_files": [
          "libs/langchain-community/langchain.config.js||libs/langchain-community/langchain.config.js",
          "libs/langchain-community/src/chat_models/arcjet.ts||libs/langchain-community/src/chat_models/arcjet.ts",
          "libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts||libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts",
          "libs/langchain-community/src/llms/arcjet.ts||libs/langchain-community/src/llms/arcjet.ts",
          "libs/langchain-community/src/llms/tests/arcjet.test.ts||libs/langchain-community/src/llms/tests/arcjet.test.ts",
          "libs/langchain-community/src/load/import_constants.ts||libs/langchain-community/src/load/import_constants.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-community/langchain.config.js||libs/langchain-community/langchain.config.js": [
          "File: libs/langchain-community/langchain.config.js -> libs/langchain-community/langchain.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     \"llms/ai21\": \"llms/ai21\",",
          "93:     \"llms/aleph_alpha\": \"llms/aleph_alpha\",",
          "94:     \"llms/bedrock\": \"llms/bedrock/index\",",
          "95:     \"llms/bedrock/web\": \"llms/bedrock/web\",",
          "96:     \"llms/cloudflare_workersai\": \"llms/cloudflare_workersai\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     \"llms/arcjet\": \"llms/arcjet\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:     \"vectorstores/zep_cloud\": \"vectorstores/zep_cloud\",",
          "165:     \"chat_models/alibaba_tongyi\": \"chat_models/alibaba_tongyi\",",
          "166:     \"chat_models/baiduwenxin\": \"chat_models/baiduwenxin\",",
          "167:     \"chat_models/bedrock\": \"chat_models/bedrock/index\",",
          "168:     \"chat_models/bedrock/web\": \"chat_models/bedrock/web\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     \"chat_models/arcjet\": \"chat_models/arcjet\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:     \"embeddings/tencent_hunyuan/web\",",
          "352:     \"embeddings/zhipuai\",",
          "353:     \"llms/load\",",
          "354:     \"llms/cohere\",",
          "355:     \"llms/googlevertexai\",",
          "356:     \"llms/googlevertexai/web\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:     \"llms/arcjet\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:     \"vectorstores/xata\",",
          "411:     \"vectorstores/zep\",",
          "412:     \"vectorstores/zep_cloud\",",
          "413:     \"chat_models/bedrock\",",
          "414:     \"chat_models/bedrock/web\",",
          "415:     \"chat_models/googlevertexai\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:     \"chat_models/arcjet\",",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/chat_models/arcjet.ts||libs/langchain-community/src/chat_models/arcjet.ts": [
          "File: libs/langchain-community/src/chat_models/arcjet.ts -> libs/langchain-community/src/chat_models/arcjet.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import {",
          "4:   BaseChatModel,",
          "5:   type BaseChatModelParams,",
          "6: } from \"@langchain/core/language_models/chat_models\";",
          "7: import type { ArcjetSensitiveInfoType, RedactOptions } from \"@arcjet/redact\";",
          "8: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "9: import { BaseMessage } from \"@langchain/core/messages\";",
          "10: import { ChatResult } from \"@langchain/core/outputs\";",
          "12: type DetectSensitiveInfoEntities<T> = (",
          "13:   tokens: string[]",
          "14: ) => Array<ArcjetSensitiveInfoType | T | undefined>;",
          "15: type ValidEntities<Detect> = Array<",
          "16:   undefined extends Detect",
          "17:     ? ArcjetSensitiveInfoType",
          "18:     : Detect extends DetectSensitiveInfoEntities<infer CustomEntities>",
          "19:     ? ArcjetSensitiveInfoType | CustomEntities",
          "20:     : never",
          "21: >;",
          "23: export interface ArcjetRedactOptions<Detect> extends BaseChatModelParams {",
          "24:   chatModel: BaseChatModel;",
          "25:   entities?: ValidEntities<Detect>;",
          "26:   contextWindowSize?: number;",
          "27:   detect?: Detect;",
          "28:   replace?: (entity: ValidEntities<Detect>[number]) => string | undefined;",
          "29: }",
          "31: export type { ArcjetSensitiveInfoType, RedactOptions };",
          "33: async function transformTextMessageAsync(",
          "34:   message: BaseMessage,",
          "35:   transformer: (text: string) => Promise<string>",
          "36: ): Promise<BaseMessage> {",
          "37:   if (typeof message.content === \"string\") {",
          "38:     message.content = await transformer(message.content);",
          "39:     return message;",
          "40:   }",
          "42:   const redactedContent = await Promise.all(",
          "43:     message.content.map(async (m) => {",
          "44:       if (m.type === \"text\") {",
          "45:         return {",
          "46:           ...m,",
          "47:           text: await transformer(m.text),",
          "48:         };",
          "49:       } else {",
          "50:         return Promise.resolve(m);",
          "51:       }",
          "52:     })",
          "53:   );",
          "54:   message.content = redactedContent;",
          "55:   return message;",
          "56: }",
          "58: function transformTextMessage(",
          "59:   message: BaseMessage,",
          "60:   transformer: (text: string) => string",
          "61: ): BaseMessage {",
          "62:   if (typeof message.content === \"string\") {",
          "63:     message.content = transformer(message.content);",
          "64:     return message;",
          "65:   }",
          "67:   const redactedContent = message.content.map((m) => {",
          "68:     if (m.type === \"text\") {",
          "69:       return {",
          "70:         ...m,",
          "71:         text: transformer(m.text),",
          "72:       };",
          "73:     } else {",
          "74:       return m;",
          "75:     }",
          "76:   });",
          "77:   message.content = redactedContent;",
          "78:   return message;",
          "79: }",
          "81: export class ArcjetRedact<",
          "82:   Detect extends DetectSensitiveInfoEntities<CustomEntities> | undefined,",
          "83:   CustomEntities extends string",
          "84: > extends BaseChatModel {",
          "85:   static lc_name() {",
          "86:     return \"ArcjetRedact\";",
          "87:   }",
          "89:   chatModel: BaseChatModel;",
          "91:   entities?: ValidEntities<Detect>;",
          "93:   contextWindowSize?: number;",
          "95:   detect?: Detect;",
          "97:   replace?: (entity: ValidEntities<Detect>[number]) => string | undefined;",
          "99:   index: number;",
          "101:   constructor(options: ArcjetRedactOptions<Detect>) {",
          "102:     super(options);",
          "104:     if (options.entities && options.entities.length === 0) {",
          "105:       throw new Error(\"no entities configured for redaction\");",
          "106:     }",
          "108:     this.chatModel = options.chatModel;",
          "109:     this.entities = options.entities;",
          "110:     this.contextWindowSize = options.contextWindowSize;",
          "111:     this.detect = options.detect;",
          "112:     this.replace = options.replace;",
          "113:     this.index = 0;",
          "114:   }",
          "116:   _createUniqueReplacement(entity: ValidEntities<Detect>[number]): string {",
          "117:     const userReplacement =",
          "118:       typeof this.replace !== \"undefined\" ? this.replace(entity) : undefined;",
          "119:     if (typeof userReplacement !== \"undefined\") {",
          "120:       return userReplacement;",
          "121:     }",
          "123:     this.index++;",
          "125:     if (entity === \"email\") {",
          "126:       return `<Redacted email #${this.index}>`;",
          "127:     }",
          "129:     if (entity === \"phone-number\") {",
          "130:       return `<Redacted phone number #${this.index}>`;",
          "131:     }",
          "133:     if (entity === \"ip-address\") {",
          "134:       return `<Redacted IP address #${this.index}>`;",
          "135:     }",
          "137:     if (entity === \"credit-card-number\") {",
          "138:       return `<Redacted credit card number #${this.index}>`;",
          "139:     }",
          "141:     return `<Redacted ${entity} #${this.index}>`;",
          "142:   }",
          "144:   _llmType() {",
          "145:     return \"arcjet_redact\";",
          "146:   }",
          "148:   async _generate(",
          "149:     messages: BaseMessage[],",
          "150:     options: this[\"ParsedCallOptions\"],",
          "151:     runManager?: CallbackManagerForLLMRun | undefined",
          "152:   ): Promise<ChatResult> {",
          "153:     const ajOptions: RedactOptions<Detect> = {",
          "154:       entities: this.entities,",
          "155:       contextWindowSize: this.contextWindowSize,",
          "156:       detect: this.detect,",
          "157:       replace: this._createUniqueReplacement.bind(this),",
          "158:     };",
          "160:     const unredactors: Array<(message: string) => string> = [];",
          "162:     const { redact } = await import(\"@arcjet/redact\");",
          "163:     const redacted = await Promise.all(",
          "164:       messages.map(async (message) => {",
          "165:         return await transformTextMessageAsync(message, async (message) => {",
          "166:           const [redacted, unredact] = await redact(message, ajOptions);",
          "167:           unredactors.push(unredact);",
          "168:           return redacted;",
          "169:         });",
          "170:       })",
          "171:     );",
          "173:     const response = await this.chatModel._generate(",
          "174:       redacted,",
          "175:       options,",
          "176:       runManager",
          "177:     );",
          "179:     return {",
          "180:       ...response,",
          "181:       generations: response.generations.map((resp) => {",
          "182:         return {",
          "183:           ...resp,",
          "184:           message: transformTextMessage(resp.message, (message: string) => {",
          "185:             for (const unredact of unredactors) {",
          "186:               message = unredact(message);",
          "187:             }",
          "188:             return message;",
          "189:           }),",
          "190:         };",
          "191:       }),",
          "192:     };",
          "193:   }",
          "194: }",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts||libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts": [
          "File: libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts -> libs/langchain-community/src/chat_models/tests/chatarcjet.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { BaseChatModel } from \"@langchain/core/language_models/chat_models\";",
          "5: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "6: import { BaseMessage, MessageType } from \"@langchain/core/messages\";",
          "7: import { ChatGeneration, ChatResult } from \"@langchain/core/outputs\";",
          "8: import { ArcjetRedact } from \"../arcjet.js\";",
          "10: class MockChatModel extends BaseChatModel {",
          "11:   callback?: (input: BaseMessage[]) => ChatGeneration[];",
          "13:   constructor(callback?: (input: BaseMessage[]) => ChatGeneration[]) {",
          "14:     super({});",
          "15:     this.callback = callback;",
          "16:   }",
          "18:   _llmType(): string {",
          "19:     return \"mock_chat_model\";",
          "20:   }",
          "22:   async _generate(",
          "23:     messages: BaseMessage[],",
          "24:     _options: this[\"ParsedCallOptions\"],",
          "25:     _runManager?: CallbackManagerForLLMRun | undefined",
          "26:   ): Promise<ChatResult> {",
          "27:     return {",
          "28:       generations: this.callback ? this.callback(messages) : [],",
          "29:     };",
          "30:   }",
          "31: }",
          "33: class GenericMessage extends BaseMessage {",
          "34:   constructor(text: string) {",
          "35:     super(text);",
          "36:   }",
          "38:   _getType(): MessageType {",
          "39:     return \"human\";",
          "40:   }",
          "41: }",
          "43: test(\"It passes messages through correctly\", async () => {",
          "44:   const generationA = {",
          "45:     message: new GenericMessage(\"this is the output\"),",
          "46:     text: \"this is the output\",",
          "47:   };",
          "49:   const callback = (input: BaseMessage[]) => {",
          "50:     expect(input[0].content).toEqual(\"this is the input\");",
          "51:     expect(input[1].content).toEqual(\"this is a second input\");",
          "52:     return [generationA];",
          "53:   };",
          "54:   const mockLLM = new MockChatModel(callback);",
          "55:   const options = {",
          "56:     chatModel: mockLLM,",
          "57:   };",
          "59:   const arcjetRedact = new ArcjetRedact(options);",
          "60:   const output = await arcjetRedact.invoke([",
          "61:     \"this is the input\",",
          "62:     \"this is a second input\",",
          "63:   ]);",
          "65:   expect(output.content).toEqual(\"this is the output\");",
          "66: });",
          "68: test(\"It passes messages through correctly in the streaming interface\", async () => {",
          "69:   const generationA = {",
          "70:     message: new GenericMessage(\"this is the output\"),",
          "71:     text: \"this is the output\",",
          "72:   };",
          "74:   const callback = (input: BaseMessage[]) => {",
          "75:     expect(input[0].content).toEqual(\"this is the input\");",
          "76:     expect(input[1].content).toEqual(\"this is a second input\");",
          "77:     return [generationA];",
          "78:   };",
          "79:   const mockLLM = new MockChatModel(callback);",
          "80:   const options = {",
          "81:     chatModel: mockLLM,",
          "82:   };",
          "84:   const arcjetRedact = new ArcjetRedact(options);",
          "85:   const stream = await arcjetRedact.stream([",
          "86:     \"this is the input\",",
          "87:     \"this is a second input\",",
          "88:   ]);",
          "90:   const output = await stream.next();",
          "92:   expect(output.value.content).toEqual(\"this is the output\");",
          "93: });",
          "95: test(\"It redacts built in entities across multiple messages and unredacts them in the response\", async () => {",
          "96:   const generationA = {",
          "97:     message: new GenericMessage(",
          "98:       \"Your email is <Redacted email #1> and your card number is <Redacted credit card number #2>\"",
          "99:     ),",
          "100:     text: \"Your email is <Redacted email #1> and your card number is <Redacted credit card number #2>\",",
          "101:   };",
          "103:   const callback = (input: BaseMessage[]) => {",
          "104:     expect(input[0].content).toEqual(\"my email address is <Redacted email #1>\");",
          "105:     expect(input[1].content).toEqual(",
          "106:       \"my card number is <Redacted credit card number #2>\"",
          "107:     );",
          "108:     return [generationA];",
          "109:   };",
          "111:   const mockLLM = new MockChatModel(callback);",
          "112:   const options = {",
          "113:     chatModel: mockLLM,",
          "114:   };",
          "116:   const arcjetRedact = new ArcjetRedact(options);",
          "117:   const output = await arcjetRedact.stream([",
          "118:     \"my email address is test@example.com\",",
          "119:     \"my card number is 4242424242424242\",",
          "120:   ]);",
          "122:   const first = await output.next();",
          "123:   expect(first.value.content).toEqual(",
          "124:     \"Your email is test@example.com and your card number is 4242424242424242\"",
          "125:   );",
          "126: });",
          "128: test(\"it redacts and unredacts correctly\", async () => {",
          "129:   const generationA = {",
          "130:     message: new GenericMessage(",
          "131:       \"Your email is <Redacted email #1> and your card number is <Redacted credit card number #2>\"",
          "132:     ),",
          "133:     text: \"Your email is <Redacted email #1> and your card number is <Redacted credit card number #2>\",",
          "134:   };",
          "136:   const callback = (input: BaseMessage[]) => {",
          "137:     expect(input[0].content).toEqual(\"my email address is <Redacted email #1>\");",
          "138:     expect(input[1].content).toEqual(",
          "139:       \"my card number is <Redacted credit card number #2>\"",
          "140:     );",
          "141:     return [generationA];",
          "142:   };",
          "144:   const mockLLM = new MockChatModel(callback);",
          "145:   const options = {",
          "146:     chatModel: mockLLM,",
          "147:   };",
          "149:   const arcjetRedact = new ArcjetRedact(options);",
          "150:   const output = await arcjetRedact.stream([",
          "151:     \"my email address is test@example.com\",",
          "152:     \"my card number is 4242424242424242\",",
          "153:   ]);",
          "155:   const first = await output.next();",
          "156:   expect(first.value.content).toEqual(",
          "157:     \"Your email is test@example.com and your card number is 4242424242424242\"",
          "158:   );",
          "159: });",
          "161: test(\"it redacts and unredacts correctly\", async () => {",
          "162:   const generationA = {",
          "163:     message: new GenericMessage(",
          "164:       \"Your email is <Redacted email #1> and your card number is <Redacted credit card number #2>\"",
          "165:     ),",
          "166:     text: \"Your email is <Redacted email #1> and your card number is <Redacted credit card number #2>\",",
          "167:   };",
          "169:   const callback = (input: BaseMessage[]) => {",
          "170:     expect(input[0].content).toEqual(\"my email address is <Redacted email #1>\");",
          "171:     expect(input[1].content).toEqual(",
          "172:       \"my card number is <Redacted credit card number #2>\"",
          "173:     );",
          "174:     return [generationA];",
          "175:   };",
          "177:   const mockLLM = new MockChatModel(callback);",
          "178:   const options = {",
          "179:     chatModel: mockLLM,",
          "180:   };",
          "182:   const arcjetRedact = new ArcjetRedact(options);",
          "183:   const output = await arcjetRedact.invoke([",
          "184:     \"my email address is test@example.com\",",
          "185:     \"my card number is 4242424242424242\",",
          "186:   ]);",
          "188:   expect(output.content).toEqual(",
          "189:     \"Your email is test@example.com and your card number is 4242424242424242\"",
          "190:   );",
          "191: });",
          "193: test(\"it handles custom detect functions correctly\", async () => {",
          "194:   const generationA = {",
          "195:     message: new GenericMessage(\"custom <Redacted custom-entity #1>\"),",
          "196:     text: \"custom <Redacted custom-entity #0>\",",
          "197:   };",
          "199:   const callback = (input: BaseMessage[]) => {",
          "200:     expect(input[0].content).toEqual(\"custom <Redacted custom-entity #1>\");",
          "201:     return [generationA];",
          "202:   };",
          "204:   const mockLLM = new MockChatModel(callback);",
          "205:   const customDetector = (tokens: string[]) => {",
          "206:     return tokens.map((t) =>",
          "207:       t === \"my-custom-string-to-be-detected\" ? \"custom-entity\" : undefined",
          "208:     );",
          "209:   };",
          "210:   const options = {",
          "211:     chatModel: mockLLM,",
          "212:     entities: [\"custom-entity\" as const],",
          "213:     detect: customDetector,",
          "214:   };",
          "216:   const arcjetRedact = new ArcjetRedact(options);",
          "217:   const output = await arcjetRedact.invoke([",
          "218:     \"custom my-custom-string-to-be-detected\",",
          "219:   ]);",
          "221:   expect(output.content).toEqual(\"custom my-custom-string-to-be-detected\");",
          "222: });",
          "224: test(\"it handles custom replace functions correctly\", async () => {",
          "225:   const generationA = {",
          "226:     message: new GenericMessage(",
          "227:       \"custom is <Redacted custom-entity #1> email is redacted@example.com\"",
          "228:     ),",
          "229:     text: \"custom is <Redacted custom-entity #1> email is redacted@example.com\",",
          "230:   };",
          "232:   const callback = (input: BaseMessage[]) => {",
          "233:     expect(input[0].content).toEqual(",
          "234:       \"custom <Redacted custom-entity #1> email redacted@example.com\"",
          "235:     );",
          "236:     return [generationA];",
          "237:   };",
          "239:   const mockLLM = new MockChatModel(callback);",
          "240:   const customDetector = (tokens: string[]) => {",
          "241:     return tokens.map((t) =>",
          "242:       t === \"my-custom-string-to-be-detected\" ? \"custom-entity\" : undefined",
          "243:     );",
          "244:   };",
          "245:   const customReplacer = (detected: string) => {",
          "246:     return detected === \"email\" ? \"redacted@example.com\" : undefined;",
          "247:   };",
          "248:   const options = {",
          "249:     chatModel: mockLLM,",
          "250:     entities: [\"custom-entity\" as const, \"email\" as const],",
          "251:     detect: customDetector,",
          "252:     replace: customReplacer,",
          "253:   };",
          "255:   const arcjetRedact = new ArcjetRedact(options);",
          "256:   const output = await arcjetRedact.invoke([",
          "257:     \"custom my-custom-string-to-be-detected email test@example.com\",",
          "258:   ]);",
          "260:   expect(output.content).toEqual(",
          "261:     \"custom is my-custom-string-to-be-detected email is test@example.com\"",
          "262:   );",
          "263: });",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/llms/arcjet.ts||libs/langchain-community/src/llms/arcjet.ts": [
          "File: libs/langchain-community/src/llms/arcjet.ts -> libs/langchain-community/src/llms/arcjet.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   LLM,",
          "3:   BaseLLM,",
          "4:   type BaseLLMCallOptions,",
          "5: } from \"@langchain/core/language_models/llms\";",
          "6: import type { ArcjetSensitiveInfoType, RedactOptions } from \"@arcjet/redact\";",
          "8: type DetectSensitiveInfoEntities<T> = (",
          "9:   tokens: string[]",
          "10: ) => Array<ArcjetSensitiveInfoType | T | undefined>;",
          "11: type ValidEntities<Detect> = Array<",
          "12:   undefined extends Detect",
          "13:     ? ArcjetSensitiveInfoType",
          "14:     : Detect extends DetectSensitiveInfoEntities<infer CustomEntities>",
          "15:     ? ArcjetSensitiveInfoType | CustomEntities",
          "16:     : never",
          "17: >;",
          "19: export type { ArcjetSensitiveInfoType, RedactOptions };",
          "21: export interface ArcjetRedactOptions<Detect> extends BaseLLMCallOptions {",
          "22:   llm: BaseLLM;",
          "23:   entities?: ValidEntities<Detect>;",
          "24:   contextWindowSize?: number;",
          "25:   detect?: Detect;",
          "26:   replace?: (entity: ValidEntities<Detect>[number]) => string | undefined;",
          "27: }",
          "29: export class ArcjetRedact<",
          "30:   Detect extends DetectSensitiveInfoEntities<CustomEntities> | undefined,",
          "31:   CustomEntities extends string",
          "32: > extends LLM {",
          "33:   static lc_name() {",
          "34:     return \"ArcjetRedact\";",
          "35:   }",
          "37:   llm: BaseLLM;",
          "39:   entities?: ValidEntities<Detect>;",
          "41:   contextWindowSize?: number;",
          "43:   detect?: Detect;",
          "45:   replace?: (entity: ValidEntities<Detect>[number]) => string | undefined;",
          "47:   constructor(options: ArcjetRedactOptions<Detect>) {",
          "48:     super(options);",
          "50:     if (options.entities && options.entities.length === 0) {",
          "51:       throw new Error(\"no entities configured for redaction\");",
          "52:     }",
          "53:     this.llm = options.llm;",
          "54:     this.entities = options.entities;",
          "55:     this.contextWindowSize = options.contextWindowSize;",
          "56:     this.detect = options.detect;",
          "57:     this.replace = options.replace;",
          "58:   }",
          "60:   _llmType() {",
          "61:     return \"arcjet_redact\";",
          "62:   }",
          "64:   async _call(input: string, options?: BaseLLMCallOptions): Promise<string> {",
          "65:     const ajOptions: RedactOptions<Detect> = {",
          "66:       entities: this.entities,",
          "67:       contextWindowSize: this.contextWindowSize,",
          "68:       detect: this.detect,",
          "69:       replace: this.replace,",
          "70:     };",
          "72:     const { redact } = await import(\"@arcjet/redact\");",
          "73:     const [redacted, unredact] = await redact(input, ajOptions);",
          "76:     const result = await this.llm.invoke(redacted, options);",
          "78:     return unredact(result);",
          "79:   }",
          "80: }",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/llms/tests/arcjet.test.ts||libs/langchain-community/src/llms/tests/arcjet.test.ts": [
          "File: libs/langchain-community/src/llms/tests/arcjet.test.ts -> libs/langchain-community/src/llms/tests/arcjet.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { test } from \"@jest/globals\";",
          "2: import {",
          "3:   LLM,",
          "4:   type BaseLLMCallOptions,",
          "5: } from \"@langchain/core/language_models/llms\";",
          "6: import { ArcjetRedact } from \"../arcjet.js\";",
          "9: export class MockLLM extends LLM {",
          "10:   static lc_name() {",
          "11:     return \"MockLLM\";",
          "12:   }",
          "14:   lc_serializable = true;",
          "16:   callback?: (input: string) => string;",
          "18:   constructor(callback?: (input: string) => string) {",
          "19:     super({});",
          "20:     this.callback = callback;",
          "21:   }",
          "23:   _llmType() {",
          "24:     return \"mock_llm\";",
          "25:   }",
          "27:   async _call(input: string, _options?: BaseLLMCallOptions): Promise<string> {",
          "28:     if (typeof this.callback !== \"undefined\") {",
          "29:       return this.callback(input);",
          "30:     } else {",
          "31:       throw new Error(\"no callback\");",
          "32:     }",
          "33:   }",
          "34: }",
          "36: test(\"It calls the base LLM correctly\", async () => {",
          "37:   const callback = (input: string) => {",
          "38:     expect(input).toEqual(\"this is the input\");",
          "39:     return \"this is the output\";",
          "40:   };",
          "41:   const mockLLM = new MockLLM(callback);",
          "42:   const options = {",
          "43:     llm: mockLLM,",
          "44:   };",
          "46:   const arcjetRedact = new ArcjetRedact(options);",
          "47:   const output = await arcjetRedact.invoke(\"this is the input\");",
          "49:   expect(output).toEqual(\"this is the output\");",
          "50: });",
          "52: test(\"It performs redactions and unredactions\", async () => {",
          "53:   const callback = (input: string) => {",
          "54:     expect(input).toEqual(\"email <Redacted email #0>\");",
          "55:     return \"your email is <Redacted email #0>\";",
          "56:   };",
          "57:   const mockLLM = new MockLLM(callback);",
          "58:   const options = {",
          "59:     llm: mockLLM,",
          "60:   };",
          "62:   const arcjetRedact = new ArcjetRedact(options);",
          "63:   const output = await arcjetRedact.invoke(\"email test@example.com\");",
          "65:   expect(output).toEqual(\"your email is test@example.com\");",
          "66: });",
          "68: test(\"It only redacts configured entities\", async () => {",
          "69:   const callback = (input: string) => {",
          "70:     expect(input).toEqual(",
          "71:       \"email test@example.com phone <Redacted phone number #0>\"",
          "72:     );",
          "73:     return \"your phone number is <Redacted phone number #0>\";",
          "74:   };",
          "75:   const mockLLM = new MockLLM(callback);",
          "76:   const options = {",
          "77:     llm: mockLLM,",
          "78:     entities: [\"phone-number\" as const],",
          "79:   };",
          "81:   const arcjetRedact = new ArcjetRedact(options);",
          "82:   const output = await arcjetRedact.invoke(",
          "83:     \"email test@example.com phone +35312345678\"",
          "84:   );",
          "86:   expect(output).toEqual(\"your phone number is +35312345678\");",
          "87: });",
          "89: test(\"It redacts custom entities\", async () => {",
          "90:   const callback = (input: string) => {",
          "91:     expect(input).toEqual(\"custom <Redacted custom-entity #0>\");",
          "92:     return \"custom is <Redacted custom-entity #0>\";",
          "93:   };",
          "94:   const mockLLM = new MockLLM(callback);",
          "95:   const customDetector = (tokens: string[]) => {",
          "96:     return tokens.map((t) =>",
          "97:       t === \"my-custom-string-to-be-detected\" ? \"custom-entity\" : undefined",
          "98:     );",
          "99:   };",
          "100:   const options = {",
          "101:     llm: mockLLM,",
          "102:     entities: [\"custom-entity\" as const],",
          "103:     detect: customDetector,",
          "104:   };",
          "106:   const arcjetRedact = new ArcjetRedact(options);",
          "107:   const output = await arcjetRedact.invoke(",
          "108:     \"custom my-custom-string-to-be-detected\"",
          "109:   );",
          "111:   expect(output).toEqual(\"custom is my-custom-string-to-be-detected\");",
          "112: });",
          "114: test(\"It provides the correct number of tokens to the context window\", async () => {",
          "115:   const callback = (input: string) => {",
          "116:     expect(input).toEqual(\"this is a sentence for testing\");",
          "117:     return \"this is a sentence for testing\";",
          "118:   };",
          "119:   const mockLLM = new MockLLM(callback);",
          "120:   const customDetector = (tokens: string[]) => {",
          "121:     expect(tokens).toHaveLength(4);",
          "122:     return tokens.map(() => undefined);",
          "123:   };",
          "124:   const options = {",
          "125:     llm: mockLLM,",
          "126:     entities: [\"email\" as const],",
          "127:     detect: customDetector,",
          "128:     contextWindowSize: 4,",
          "129:   };",
          "131:   const arcjetRedact = new ArcjetRedact(options);",
          "132:   const output = await arcjetRedact.invoke(\"this is a sentence for testing\");",
          "134:   expect(output).toEqual(\"this is a sentence for testing\");",
          "135: });",
          "137: test(\"It uses custom replacers\", async () => {",
          "138:   const callback = (input: string) => {",
          "139:     expect(input).toEqual(",
          "140:       \"custom <Redacted custom-entity #0> email redacted@example.com\"",
          "141:     );",
          "142:     return \"custom is <Redacted custom-entity #0> email is redacted@example.com\";",
          "143:   };",
          "144:   const mockLLM = new MockLLM(callback);",
          "145:   const customDetector = (tokens: string[]) => {",
          "146:     return tokens.map((t) =>",
          "147:       t === \"my-custom-string-to-be-detected\" ? \"custom-entity\" : undefined",
          "148:     );",
          "149:   };",
          "150:   const customReplacer = (detected: string) => {",
          "151:     return detected === \"email\" ? \"redacted@example.com\" : undefined;",
          "152:   };",
          "153:   const options = {",
          "154:     llm: mockLLM,",
          "155:     entities: [\"custom-entity\" as const, \"email\" as const],",
          "156:     detect: customDetector,",
          "157:     replace: customReplacer,",
          "158:   };",
          "160:   const arcjetRedact = new ArcjetRedact(options);",
          "161:   const output = await arcjetRedact.invoke(",
          "162:     \"custom my-custom-string-to-be-detected email test@example.com\"",
          "163:   );",
          "165:   expect(output).toEqual(",
          "166:     \"custom is my-custom-string-to-be-detected email is test@example.com\"",
          "167:   );",
          "168: });",
          "170: test(\"It throws when no entities are configured\", async () => {",
          "171:   const mockLLM = new MockLLM();",
          "172:   const options = {",
          "173:     llm: mockLLM,",
          "174:     entities: [],",
          "175:   };",
          "177:   expect(() => {",
          "179:     new ArcjetRedact(options);",
          "180:   }).toThrow(\"no entities configured for redaction\");",
          "181: });",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/load/import_constants.ts||libs/langchain-community/src/load/import_constants.ts": [
          "File: libs/langchain-community/src/load/import_constants.ts -> libs/langchain-community/src/load/import_constants.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   \"langchain_community/embeddings/tencent_hunyuan\",",
          "24:   \"langchain_community/embeddings/tencent_hunyuan/web\",",
          "25:   \"langchain_community/embeddings/zhipuai\",",
          "26:   \"langchain_community/llms/bedrock\",",
          "27:   \"langchain_community/llms/bedrock/web\",",
          "28:   \"langchain_community/llms/cohere\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   \"langchain_community/llms/arcjet\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   \"langchain_community/vectorstores/xata\",",
          "83:   \"langchain_community/vectorstores/zep\",",
          "84:   \"langchain_community/vectorstores/zep_cloud\",",
          "85:   \"langchain_community/chat_models/bedrock\",",
          "86:   \"langchain_community/chat_models/bedrock/web\",",
          "87:   \"langchain_community/chat_models/googlevertexai\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   \"langchain_community/chat_models/arcjet\",",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   languageName: node",
          "287:   linkType: hard",
          "289: \"@aws-crypto/crc32@npm:3.0.0\":",
          "290:   version: 3.0.0",
          "291:   resolution: \"@aws-crypto/crc32@npm:3.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289: \"@arcjet/redact-wasm@npm:1.0.0-alpha.24\":",
          "290:   version: 1.0.0-alpha.24",
          "291:   resolution: \"@arcjet/redact-wasm@npm:1.0.0-alpha.24\"",
          "292:   checksum: b0cf2a5b8eec1fcacdc130c3fce963cfe2bdc786aeb21296409b8bcc0053204ea6c1d7a816e9adf999fb56c8f73aaa950dfbbb7bd628d06ea21fb868cc4b7e5c",
          "293:   languageName: node",
          "294:   linkType: hard",
          "296: \"@arcjet/redact@npm:^v1.0.0-alpha.23\":",
          "297:   version: 1.0.0-alpha.24",
          "298:   resolution: \"@arcjet/redact@npm:1.0.0-alpha.24\"",
          "299:   dependencies:",
          "300:     \"@arcjet/redact-wasm\": 1.0.0-alpha.24",
          "301:   checksum: 06eedc5f65eb98ac3b3f2598981a3c4b7265f89a59b138dfb38c7e19e3c4342ccb5ddfc3a0ae94add47f931b095138794b8c88355003c27374c37ead02f2106c",
          "302:   languageName: node",
          "303:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11174:   version: 0.0.0-use.local",
          "11175:   resolution: \"@langchain/community@workspace:libs/langchain-community\"",
          "11176:   dependencies:",
          "11177:     \"@aws-crypto/sha256-js\": ^5.0.0",
          "11178:     \"@aws-sdk/client-bedrock-agent-runtime\": ^3.583.0",
          "11179:     \"@aws-sdk/client-bedrock-runtime\": ^3.422.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11193:     \"@arcjet/redact\": ^v1.0.0-alpha.23",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11349:     zod: ^3.22.3",
          "11350:     zod-to-json-schema: ^3.22.5",
          "11351:   peerDependencies:",
          "11352:     \"@aws-crypto/sha256-js\": ^5.0.0",
          "11353:     \"@aws-sdk/client-bedrock-agent-runtime\": ^3.583.0",
          "11354:     \"@aws-sdk/client-bedrock-runtime\": ^3.422.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11369:     \"@arcjet/redact\": ^v1.0.0-alpha.23",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "11470:     youtube-transcript: ^1.0.6",
          "11471:     youtubei.js: ^9.1.0",
          "11472:   peerDependenciesMeta:",
          "11473:     \"@aws-crypto/sha256-js\":",
          "11474:       optional: true",
          "11475:     \"@aws-sdk/client-bedrock-agent-runtime\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11491:     \"@arcjet/redact\":",
          "11492:       optional: true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7626bbf7a847f5365c630c8f53f84b1f72191f2",
      "candidate_info": {
        "commit_hash": "b7626bbf7a847f5365c630c8f53f84b1f72191f2",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/b7626bbf7a847f5365c630c8f53f84b1f72191f2",
        "files": [
          "examples/package.json",
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/vectorstores/faiss.ts",
          "libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts",
          "libs/langchain-community/src/vectorstores/tests/faiss.test.ts",
          "yarn.lock"
        ],
        "message": "fix(ci): Fix Vercel build (#7717)",
        "before_after_code_files": [
          "libs/langchain-community/src/vectorstores/faiss.ts||libs/langchain-community/src/vectorstores/faiss.ts",
          "libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts||libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts",
          "libs/langchain-community/src/vectorstores/tests/faiss.test.ts||libs/langchain-community/src/vectorstores/tests/faiss.test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-community/src/vectorstores/faiss.ts||libs/langchain-community/src/vectorstores/faiss.ts": [
          "File: libs/langchain-community/src/vectorstores/faiss.ts -> libs/langchain-community/src/vectorstores/faiss.ts"
        ],
        "libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts||libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts": [
          "File: libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts -> libs/langchain-community/src/vectorstores/tests/faiss.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { Document } from \"@langchain/core/documents\";",
          "9: import { FaissStore } from \"../faiss.js\";",
          "12:   const vectorStore = await FaissStore.fromTexts(",
          "13:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
          "14:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
          "",
          "[Removed Lines]",
          "11: test(\"Test FaissStore.fromTexts\", async () => {",
          "",
          "[Added Lines]",
          "11: test.skip(\"Test FaissStore.fromTexts\", async () => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   expect(resultTwoMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 1 }]);",
          "26: });",
          "29:   const vectorStore = await FaissStore.fromTexts(",
          "30:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
          "31:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
          "",
          "[Removed Lines]",
          "28: test(\"Test FaissStore.fromTexts + addDocuments\", async () => {",
          "",
          "[Added Lines]",
          "28: test.skip(\"Test FaissStore.fromTexts + addDocuments\", async () => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:   expect(resultTwoMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 4 }]);",
          "47: });",
          "50:   const vectorStore = await FaissStore.fromTexts(",
          "51:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
          "52:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
          "",
          "[Removed Lines]",
          "49: test(\"Test FaissStore.load and FaissStore.save\", async () => {",
          "",
          "[Added Lines]",
          "49: test.skip(\"Test FaissStore.load and FaissStore.save\", async () => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:   expect(resultFourMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 1 }]);",
          "88: });",
          "91:   const __filename = fileURLToPath(import.meta.url);",
          "92:   const __dirname = path.dirname(__filename);",
          "93:   const loadedFromPythonVectorStore = await FaissStore.loadFromPython(",
          "",
          "[Removed Lines]",
          "90: test(\"Test FaissStore.loadFromPython\", async () => {",
          "",
          "[Added Lines]",
          "90: test.skip(\"Test FaissStore.loadFromPython\", async () => {",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/vectorstores/tests/faiss.test.ts||libs/langchain-community/src/vectorstores/tests/faiss.test.ts": [
          "File: libs/langchain-community/src/vectorstores/tests/faiss.test.ts -> libs/langchain-community/src/vectorstores/tests/faiss.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { test, expect } from \"@jest/globals\";",
          "2: import { Document } from \"@langchain/core/documents\";",
          "3: import { FakeEmbeddings } from \"@langchain/core/utils/testing\";",
          "4: import { FaissStore } from \"../faiss.js\";",
          "7:   const vectorStore = await FaissStore.fromTexts(",
          "8:     [\"Hello world\"],",
          "9:     [{ id: 2 }],",
          "",
          "[Removed Lines]",
          "6: test(\"Test FaissStore.fromTexts + addVectors\", async () => {",
          "",
          "[Added Lines]",
          "8: test.skip(\"Test FaissStore.fromTexts + addVectors\", async () => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   expect(resultTwoMetadatas).toEqual([{ id: 4 }, { id: 6 }, { id: 2 }]);",
          "43: });",
          "46:   const vectorStore = await FaissStore.fromDocuments(",
          "47:     [",
          "48:       new Document({",
          "",
          "[Removed Lines]",
          "45: test(\"Test FaissStore.fromDocuments + addVectors\", async () => {",
          "",
          "[Added Lines]",
          "47: test.skip(\"Test FaissStore.fromDocuments + addVectors\", async () => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   ]);",
          "92: });",
          "95:   const vectorStore1 = await FaissStore.fromDocuments(",
          "96:     [",
          "97:       new Document({",
          "",
          "[Removed Lines]",
          "94: test(\"Test FaissStore.fromIndex + mergeFrom\", async () => {",
          "",
          "[Added Lines]",
          "96: test.skip(\"Test FaissStore.fromIndex + mergeFrom\", async () => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:   ]);",
          "158: });",
          "161:   const vectorStore = new FaissStore(new FakeEmbeddings(), {});",
          "162:   const idsReturned = await vectorStore.addDocuments([",
          "163:     { pageContent: \"bar\", metadata: { id: 4, name: \"4\" } },",
          "",
          "[Removed Lines]",
          "160: test(\"Test FaissStore.addDocuments\", async () => {",
          "",
          "[Added Lines]",
          "162: test.skip(\"Test FaissStore.addDocuments\", async () => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183:   expect(vectorStore.docstore._docs.size).toBe(4);",
          "184: });",
          "187:   const vectorStore = new FaissStore(new FakeEmbeddings(), {});",
          "188:   const ids = [\"2\", \"1\", \"4\"];",
          "189:   const idsReturned = await vectorStore.addVectors(",
          "",
          "[Removed Lines]",
          "186: test(\"Test FaissStore.delete\", async () => {",
          "",
          "[Added Lines]",
          "188: test.skip(\"Test FaissStore.delete\", async () => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "267:   expect(doc3.metadata.tag).toEqual(8);",
          "268: });",
          "271:   const vectorStore = new FaissStore(new FakeEmbeddings(), {});",
          "272:   expect(() => vectorStore.index).toThrow(",
          "273:     \"Vector store not initialised yet. Try calling `fromTexts`, `fromDocuments` or `fromIndex` first.\"",
          "",
          "[Removed Lines]",
          "270: test(\"Test FaissStore Exceptions\", async () => {",
          "",
          "[Added Lines]",
          "272: test.skip(\"Test FaissStore Exceptions\", async () => {",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11990:     eslint-plugin-no-instanceof: ^1.0.1",
          "11991:     eslint-plugin-prettier: ^4.2.1",
          "11992:     expr-eval: ^2.0.2",
          "11994:     fast-xml-parser: ^4.5.1",
          "11995:     firebase-admin: ^11.9.0 || ^12.0.0",
          "11996:     flat: ^5.0.2",
          "",
          "[Removed Lines]",
          "11993:     faiss-node: ^0.5.1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12133:     dria: ^0.0.3",
          "12134:     duck-duck-scrape: ^2.2.5",
          "12135:     epub2: ^3.0.1",
          "12137:     fast-xml-parser: \"*\"",
          "12138:     firebase-admin: ^11.9.0 || ^12.0.0",
          "12139:     google-auth-library: \"*\"",
          "",
          "[Removed Lines]",
          "12136:     faiss-node: ^0.5.1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12335:       optional: true",
          "12336:     epub2:",
          "12337:       optional: true",
          "12340:     fast-xml-parser:",
          "12341:       optional: true",
          "12342:     firebase-admin:",
          "",
          "[Removed Lines]",
          "12338:     faiss-node:",
          "12339:       optional: true",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "27897:     eslint-plugin-prettier: ^4.2.1",
          "27898:     eslint-plugin-unused-imports: ^3.0.0",
          "27899:     exa-js: ^1.0.12",
          "27901:     firebase-admin: ^12.0.0",
          "27902:     graphql: ^16.6.0",
          "27903:     hdb: ^0.19.8",
          "",
          "[Removed Lines]",
          "27900:     faiss-node: ^0.5.1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "28216:   languageName: node",
          "28217:   linkType: hard",
          "28231: \"fast-deep-equal@npm:3.1.3, fast-deep-equal@npm:^3.1.1, fast-deep-equal@npm:^3.1.3\":",
          "28232:   version: 3.1.3",
          "28233:   resolution: \"fast-deep-equal@npm:3.1.3\"",
          "",
          "[Removed Lines]",
          "28219: \"faiss-node@npm:^0.5.1\":",
          "28220:   version: 0.5.1",
          "28221:   resolution: \"faiss-node@npm:0.5.1\"",
          "28222:   dependencies:",
          "28223:     bindings: ^1.5.0",
          "28224:     node-addon-api: ^6.0.0",
          "28225:     node-gyp: latest",
          "28226:     prebuild-install: ^7.1.1",
          "28227:   checksum: 9c8ba45c004151be6e94460a30b46fdd854de5f067fd18757f388e103276bb4d479db66cd0475961c447c40c11df629612144d31af932984d4b5ca5c5276f508",
          "28228:   languageName: node",
          "28229:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "35563:   languageName: node",
          "35564:   linkType: hard",
          "35575: \"node-addon-api@npm:^7.0.0\":",
          "35576:   version: 7.0.0",
          "35577:   resolution: \"node-addon-api@npm:7.0.0\"",
          "",
          "[Removed Lines]",
          "35566: \"node-addon-api@npm:^6.0.0\":",
          "35567:   version: 6.0.0",
          "35568:   resolution: \"node-addon-api@npm:6.0.0\"",
          "35569:   dependencies:",
          "35570:     node-gyp: latest",
          "35571:   checksum: a34a901b9f0d6d201a173e12ed378033e4e0f27f77fd27c225dc7e6f96e88a88e94bd78b2b0404fc95deee20a137f1cbfc92738cbfba38862ed9b6c2e61c1ab2",
          "35572:   languageName: node",
          "35573:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}