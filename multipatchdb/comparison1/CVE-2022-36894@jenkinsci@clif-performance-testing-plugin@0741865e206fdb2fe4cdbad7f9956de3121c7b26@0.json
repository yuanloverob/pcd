{
  "cve_id": "CVE-2022-36894",
  "cve_desc": "An arbitrary file write vulnerability in Jenkins CLIF Performance Testing Plugin 64.vc0d66de1dfb_f and earlier allows attackers with Overall/Read permission to create or replace arbitrary files on the Jenkins controller file system with attacker-specified content.",
  "repo": "jenkinsci/clif-performance-testing-plugin",
  "patch_hash": "0741865e206fdb2fe4cdbad7f9956de3121c7b26",
  "patch_info": {
    "commit_hash": "0741865e206fdb2fe4cdbad7f9956de3121c7b26",
    "repo": "jenkinsci/clif-performance-testing-plugin",
    "commit_url": "https://github.com/jenkinsci/clif-performance-testing-plugin/commit/0741865e206fdb2fe4cdbad7f9956de3121c7b26",
    "files": [
      "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
      "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
    ],
    "message": "Fix security 2413 (#18)\n\n* [CI] Upgraded Java version from 8 to 11 for build\n\n* Trivial updates of project description/metadata\n\n* Added path sanitizing to zip extration and basedir calculus\n\n* Discarded zip directory entry name chopping\n\n* Added tests for 2 fixed Zip methods\n\n* Fixed maliciousPathIsSanitizedOnExtract for Windows wrt POSIX permissions\n\n* Fix for Zip.basedir on Windows environment",
    "before_after_code_files": [
      "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java||src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
      "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java||src/main/java/org/ow2/clif/jenkins/jobs/Zip.java": [
      "File: src/main/java/org/ow2/clif/jenkins/jobs/Zip.java -> src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: import org.ow2.clif.jenkins.Messages;",
      "36: import com.google.common.collect.Lists;",
      "37: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "40: public class Zip {",
      "41:  private static final Logger logger = Logger.getLogger(Zip.class.getName());",
      "",
      "[Removed Lines]",
      "38: import static org.apache.commons.lang.StringUtils.chop;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "136:   ZipEntry entry = zip.getNextEntry();",
      "137:   if (entry != null)",
      "138:   {",
      "141:    if (entry.isDirectory()) {",
      "143:    }",
      "145:    if (i != -1) {",
      "146:     return name.substring(0, i);",
      "147:    }",
      "",
      "[Removed Lines]",
      "139:    String name = entry.getName();",
      "142:     return chop(name);",
      "144:    int i = name.indexOf('/');",
      "",
      "[Added Lines]",
      "138:    String name = sanitize(new File(entry.getName()).toPath()).toFile().getPath();",
      "140:     return name;",
      "142:    int i = name.indexOf(File.separator);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "172:   ZipInputStream zip = newStream();",
      "173:   try {",
      "174:    for (zipentry = zip.getNextEntry(); zipentry != null; zipentry = zip.getNextEntry()) {",
      "177:     File dest = new File(dir, entryName);",
      "178:     if (zipentry.isDirectory())",
      "",
      "[Removed Lines]",
      "175:     String entryName = zipentry.getName();",
      "",
      "[Added Lines]",
      "173:     String entryName = sanitize(new File(zipentry.getName()).toPath()).toFile().getPath();",
      "",
      "---------------"
    ],
    "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java": [
      "File: src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: package org.ow2.clif.jenkins.jobs;",
      "23: import java.io.File;",
      "26: import org.apache.tools.ant.types.ZipScanner;",
      "27: import org.junit.Test;",
      "31: import static org.fest.assertions.Assertions.assertThat;",
      "33: public class ZipTest {",
      "34:  private Zip zip;",
      "36:  @Test",
      "37:  public void namesAreZipEntriesFileName() throws Exception {",
      "38:   zip = new Zip(\"src/test/resources/zips/sources.zip\");",
      "",
      "[Removed Lines]",
      "24: import java.util.List;",
      "29: import jline.internal.TestAccessible;",
      "",
      "[Added Lines]",
      "25: import java.nio.file.Files;",
      "26: import java.nio.file.attribute.PosixFilePermissions;",
      "34:  static private void deleteFileOnExit(File fileOrDir)",
      "35:  {",
      "36:   if (fileOrDir.isDirectory())",
      "37:   {",
      "38:    for (File f : fileOrDir.listFiles())",
      "39:    {",
      "40:     deleteFileOnExit(f);",
      "41:    }",
      "42:   }",
      "43:   fileOrDir.deleteOnExit();",
      "44:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:      \"UnexpectedFile.txt\")",
      "121:      .toString());",
      "122:  }",
      "123: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:  @Test",
      "135:  public void maliciousPathIsSanitizedOnExtract() throws Exception",
      "136:  {",
      "137:   zip = new Zip(\"src/test/resources/zips/ProofOfConceptSEC2413.zip\");",
      "138:   File tmpDir = Files.createTempDirectory(",
      "139:    \"CLIF-test-maliciousPathIsSanitizedOnExtract\")",
      "140:    .toFile();",
      "141:   zip.extractTo(tmpDir);",
      "142:   deleteFileOnExit(tmpDir);",
      "143:   assertThat(tmpDir.list()).containsOnly(\"UnexpectedDir\");",
      "144:   assertThat(new File(tmpDir, \"UnexpectedDir\").list()).containsOnly(\"UnexpectedFile.txt\");",
      "145:  }",
      "147:  @Test",
      "148:  public void maliciousPathIsSanitizedOnBasedir() throws Exception",
      "149:  {",
      "150:   zip = new Zip(\"src/test/resources/zips/ProofOfConceptSEC2413.zip\");",
      "151:   assertThat(zip.basedir()).isEqualTo(\"UnexpectedDir\");",
      "152:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "194e21c44ac7c7c3af50a7dc453e64f4a6358f70",
      "candidate_info": {
        "commit_hash": "194e21c44ac7c7c3af50a7dc453e64f4a6358f70",
        "repo": "jenkinsci/clif-performance-testing-plugin",
        "commit_url": "https://github.com/jenkinsci/clif-performance-testing-plugin/commit/194e21c44ac7c7c3af50a7dc453e64f4a6358f70",
        "files": [
          "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java",
          "src/test/resources/zips/ProofOfConceptSEC2413.zip"
        ],
        "message": "Wip zip sanitize (#13)\n\n* Added Zip.sanitize method. To be tested and used from wherever necessary.\n\n* Improved Zip sanitize wrt existing tests. Still to be improved for malicious zip.\n\n* Added malicious zip for tests\n\n* Implemented zip sanitizing\n\n* Fixed ZipTest compatibility with Windows\n\n* Fixed regex in ZipTest to support Windows paths\n\n* Fixed ZipTest by escaping File.separatorChar in case it is a backslash (Windows)",
        "before_after_code_files": [
          "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java||src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java||src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
            "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
          ],
          "candidate": [
            "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java||src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
            "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/ow2/clif/jenkins/jobs/Zip.java||src/main/java/org/ow2/clif/jenkins/jobs/Zip.java": [
          "File: src/main/java/org/ow2/clif/jenkins/jobs/Zip.java -> src/main/java/org/ow2/clif/jenkins/jobs/Zip.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package org.ow2.clif.jenkins.jobs;",
          "24: import java.io.*;",
          "25: import java.util.List;",
          "26: import java.util.logging.Level;",
          "27: import java.util.logging.Logger;",
          "28: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.nio.file.Path;",
          "26: import java.util.Iterator;",
          "28: import java.util.NoSuchElementException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   return file.getName();",
          "56:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  public Path sanitize(@Nonnull Path entry)",
          "72:  throws IOException",
          "73:  {",
          "74:   entry = entry.normalize();",
          "75:   if (entry.isAbsolute())",
          "76:   {",
          "77:    entry = entry.subpath(1, entry.getNameCount());",
          "78:   }",
          "79:   return sanitizeNormalized(entry);",
          "80:  }",
          "82:  private Path sanitizeNormalized(@Nonnull Path entry)",
          "83:  throws IOException",
          "84:  {",
          "85:   Iterator<Path> paths = entry.iterator();",
          "86:   Path result = null;",
          "87:   while (paths.hasNext())",
          "88:   {",
          "89:    Path pathElement = paths.next();",
          "90:    if (! pathElement.toString().equals(\"..\"))",
          "91:    {",
          "92:     result = (result == null) ? pathElement : result.resolve(pathElement);",
          "93:    }",
          "94:   }",
          "95:   return result;",
          "96:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:   }",
          "73:   ZipEntry entry;",
          "74:   while ((entry = zip.getNextEntry()) != null) {",
          "76:    if (re == null || re.matcher(entryName).matches()) {",
          "77:     list.add(entryName);",
          "78:    }",
          "",
          "[Removed Lines]",
          "75:    String entryName = entry.getName();",
          "",
          "[Added Lines]",
          "115:    String entryName = sanitize(new File(entry.getName()).toPath()).toFile().getPath();",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: package org.ow2.clif.jenkins.jobs;",
          "23: import java.io.File;",
          "24: import org.apache.tools.ant.types.ZipScanner;",
          "25: import org.junit.Test;",
          "26: import static org.fest.assertions.Assertions.assertThat;",
          "28: public class ZipTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.List;",
          "29: import jline.internal.TestAccessible;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  public void namesAreRelativePathFromZip() throws Exception {",
          "58:   zip = new Zip(\"src/test/resources/zips/nested.zip\");",
          "59:   assertThat(zip.entries(\"(.*)\\\\.coffee$\"))",
          "61:  }",
          "63:  @Test",
          "",
          "[Removed Lines]",
          "60:     .containsExactly(\"samples/http/brute.coffee\");",
          "",
          "[Added Lines]",
          "65:    .containsExactly(",
          "66:     new File(",
          "67:      new File(\"samples\", \"http\"),",
          "68:      \"brute.coffee\")",
          "69:      .toString());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:    throws Exception {",
          "66:   zip = new Zip(\"src/test/resources/zips/nested.zip\");",
          "67:   assertThat(zip.entries(\"(.*)\\\\.ctp\"))",
          "71:  }",
          "73:  @Test",
          "",
          "[Removed Lines]",
          "68:     .containsExactly(\"samples/http/brute.ctp\", \"samples/post.ctp\");",
          "69:   assertThat(zip.entries(\"([^/]*)/([^/]*)\\\\.ctp\"))",
          "70:     .containsExactly(\"samples/post.ctp\");",
          "",
          "[Added Lines]",
          "77:    .containsExactly(",
          "78:     new File(new File(\"samples\", \"http\"), \"brute.ctp\").toString(),",
          "79:     new File(\"samples\", \"post.ctp\").toString());",
          "80:   assertThat(",
          "81:    zip.entries(\"([^\\\\\" + File.separatorChar + \"]*)\\\\\" + File.separatorChar + \"([^\\\\\" + File.separatorChar + \"]*)\\\\.ctp\"))",
          "82:    .containsExactly(new File(\"samples\", \"post.ctp\").toString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:   String[] files = zip.getIncludedFiles();",
          "97:   assertThat(files).contains(\"examples/dummy.ctp\");",
          "98:  }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  @Test",
          "113:  public void maliciousPathIsSanitized() throws Exception",
          "114:  {",
          "115:   zip = new Zip(\"src/test/resources/zips/ProofOfConceptSEC2413.zip\");",
          "116:   assertThat(zip.entries(null))",
          "117:    .containsExactly(",
          "118:     new File(",
          "119:      \"UnexpectedDir\",",
          "120:      \"UnexpectedFile.txt\")",
          "121:      .toString());",
          "122:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ca9b2f565c77f3e42c9c2134e136a4459ad12ef",
      "candidate_info": {
        "commit_hash": "3ca9b2f565c77f3e42c9c2134e136a4459ad12ef",
        "repo": "jenkinsci/clif-performance-testing-plugin",
        "commit_url": "https://github.com/jenkinsci/clif-performance-testing-plugin/commit/3ca9b2f565c77f3e42c9c2134e136a4459ad12ef",
        "files": [
          ".mvn/extensions.xml",
          "pom.xml",
          "src/test/java/jenkins/model/FakeTest.java",
          "src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java",
          "src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java",
          "src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java",
          "src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java"
        ],
        "message": "Refresh plugin (#19)\n\nApproved refresh contribution wrt tests and build toolchain",
        "before_after_code_files": [
          "src/test/java/jenkins/model/FakeTest.java||src/test/java/jenkins/model/FakeTest.java",
          "src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java||src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java",
          "src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java||src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java",
          "src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java||src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java||src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java",
          "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java",
          "src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java||src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
          ],
          "candidate": [
            "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/jenkins/model/FakeTest.java||src/test/java/jenkins/model/FakeTest.java": [
          "File: src/test/java/jenkins/model/FakeTest.java -> src/test/java/jenkins/model/FakeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: package jenkins.model;",
          "24: import hudson.model.FreeStyleProject;",
          "25: import hudson.model.Item;",
          "26: import hudson.model.ItemGroup;",
          "29: public class FakeTest {",
          "31:  @Test",
          "32:  public void canFakeAndResetGlobals() {",
          "34:   Jenkins jenkins = Fake.install();",
          "39:   Jenkins j = Fake.uninstall();",
          "42:  }",
          "",
          "[Removed Lines]",
          "23: import org.junit.Test;",
          "27: import static org.fest.assertions.Assertions.assertThat;",
          "33:   assertThat(Jenkins.getInstance()).isNull();",
          "36:   assertThat(jenkins).isNotNull();",
          "37:   assertThat(Jenkins.getInstance()).isEqualTo(jenkins);",
          "40:   assertThat(j).isNull();",
          "41:   assertThat(Jenkins.getInstance()).isNull();",
          "",
          "[Added Lines]",
          "23: import static org.junit.Assert.assertEquals;",
          "24: import static org.junit.Assert.assertNotNull;",
          "25: import static org.junit.Assert.assertNull;",
          "30: import org.junit.Test;",
          "36:   assertNull(Jenkins.getInstance());",
          "39:   assertNotNull(jenkins);",
          "40:   assertEquals(jenkins, Jenkins.getInstance());",
          "43:   assertNull(j);",
          "44:   assertNull(Jenkins.getInstance());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:      (ItemGroup<? extends Item>) jenkins.getItemGroup(),",
          "50:      \"bar\"",
          "51:    );",
          "53:   }",
          "54:   finally {",
          "55:    Fake.uninstall();",
          "",
          "[Removed Lines]",
          "52:    assertThat(project.getParent()).isEqualTo(jenkins);",
          "",
          "[Added Lines]",
          "55:    assertEquals(jenkins, project.getParent());",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java||src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java -> src/test/java/org/ow2/clif/jenkins/ClifInstallationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import hudson.util.FormValidation;",
          "31: import static hudson.util.FormValidation.Kind.ERROR;",
          "32: import static hudson.util.FormValidation.Kind.OK;",
          "",
          "[Removed Lines]",
          "33: import static org.fest.assertions.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   final String expectedMessage)",
          "157:  {",
          "158:   final FormValidation res = desc.doCheckInstallation(home, schedulerURL, schedulerCredentialsFile, null, null);",
          "161:  }",
          "162: }",
          "",
          "[Removed Lines]",
          "159:   assertThat(res.getMessage()).isEqualTo(Util.escape(expectedMessage));",
          "160:   assertThat(res.kind).isEqualTo(expectedKind);",
          "",
          "[Added Lines]",
          "158:   assertEquals(Util.escape(expectedMessage), res.getMessage());",
          "159:   assertEquals(expectedKind, res.kind);",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java||src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java -> src/test/java/org/ow2/clif/jenkins/ClifPublisherTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: package org.ow2.clif.jenkins;",
          "23: import org.junit.Test;",
          "26: public class ClifPublisherTest {",
          "28:  @Test",
          "29:  public void unboundConstructor() throws Exception {",
          "30:   ClifPublisher publisher = new ClifPublisher(\"bar\");",
          "35:   ClifDataCleanup cleanup = publisher.getDataCleanupConfig();",
          "38:  }",
          "39: }",
          "",
          "[Removed Lines]",
          "24: import static org.fest.assertions.Assertions.assertThat;",
          "31:   assertThat(publisher.getChartHeight()).isEqualTo(600);",
          "32:   assertThat(publisher.getChartWidth()).isEqualTo(1200);",
          "33:   assertThat(publisher.getDistributionSliceSize()).isEqualTo(50);",
          "36:   assertThat(cleanup.getKeepFactor()).isEqualTo(2);",
          "37:   assertThat(cleanup.getKeepPercentage()).isEqualTo(95);",
          "",
          "[Added Lines]",
          "24: import static org.junit.Assert.assertEquals;",
          "31:   assertEquals(600, publisher.getChartHeight());",
          "32:   assertEquals(1200, publisher.getChartWidth());",
          "33:   assertEquals(50, publisher.getDistributionSliceSize());",
          "36:   assertEquals(2.0, cleanup.getKeepFactor(), 0.1);",
          "37:   assertEquals(95.0, cleanup.getKeepPercentage(), 0.1);",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java||src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java -> src/test/java/org/ow2/clif/jenkins/PreviewZipActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: package org.ow2.clif.jenkins;",
          "23: import java.util.List;",
          "24: import org.junit.After;",
          "25: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.ArrayList;",
          "24: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import hudson.model.Item;",
          "34: import jenkins.model.Fake;",
          "35: import jenkins.model.Jenkins;",
          "40: public class PreviewZipActionTest {",
          "41:  private Jenkins jenkins;",
          "",
          "[Removed Lines]",
          "36: import static com.google.common.collect.Lists.newArrayList;",
          "37: import static org.fest.assertions.Assertions.assertThat;",
          "38: import static org.mockito.Mockito.*;",
          "",
          "[Added Lines]",
          "38: import static org.hamcrest.MatcherAssert.assertThat;",
          "39: import static org.hamcrest.Matchers.contains;",
          "40: import static org.hamcrest.Matchers.equalTo;",
          "41: import static org.mockito.Mockito.anyString;",
          "42: import static org.mockito.Mockito.mock;",
          "43: import static org.mockito.Mockito.verify;",
          "44: import static org.mockito.Mockito.when;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:  }",
          "66:  List<Item> jobs(String... names) {",
          "68:   for (String name : names) {",
          "69:    FreeStyleProject job = job(name);",
          "70:    jobs.add(job);",
          "",
          "[Removed Lines]",
          "67:   List<Item> jobs = newArrayList();",
          "",
          "[Added Lines]",
          "73:   List<Item> jobs = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:  @Test",
          "85:  public void doesNotListNestedTestPlanInZip() throws Exception {",
          "87:  }",
          "89:  @Test",
          "90:  public void jobNameIsDasherizedFileNameWithoutExtension() throws Exception {",
          "91:   FreeStyleProject project = preview.create(\"red/tomato.erl\");",
          "93:  }",
          "95:  @Test",
          "",
          "[Removed Lines]",
          "86:   assertThat(preview.pattern).isEqualTo(\"([^/]*)/([^/]*)\\\\.ctp\");",
          "92:   assertThat(project.getName()).isEqualTo(\"red-tomato\");",
          "",
          "[Added Lines]",
          "92:   assertThat(preview.pattern, equalTo(\"([^/]*)/([^/]*)\\\\.ctp\"));",
          "98:   assertThat(project.getName(), equalTo(\"red-tomato\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   preview.process(response);",
          "117:   verify(response).sendRedirect2(\"previews/123\");",
          "119:  }",
          "121:  @Test",
          "122:  public void diffingZipAgainstJobs() throws Exception {",
          "123:   jobs(\"examples-dummy\", \"examples-synchro\", \"rebar\");",
          "124:   when(zip.entries(anyString())).thenReturn(",
          "126:   );",
          "127:   when(zip.basedir()).thenReturn(\"examples\");",
          "129:   preview.diff();",
          "134:  }",
          "136: }",
          "",
          "[Removed Lines]",
          "118:   assertThat(parent.getPreviews(preview.id())).isEqualTo(preview);",
          "125:     newArrayList(\"examples/dummy.ctp\", \"examples/ftp.ctp\")",
          "131:   assertThat(preview.installs).containsOnly(\"examples/ftp.ctp\");",
          "132:   assertThat(preview.uninstalls).containsOnly(\"examples/synchro.ctp\");",
          "133:   assertThat(preview.upgrades).containsOnly(\"examples/dummy.ctp\");",
          "",
          "[Added Lines]",
          "124:   assertThat(parent.getPreviews(preview.id()), equalTo(preview));",
          "131:     Arrays.asList(\"examples/dummy.ctp\", \"examples/ftp.ctp\")",
          "137:   assertThat(preview.installs, contains(\"examples/ftp.ctp\"));",
          "138:   assertThat(preview.uninstalls, contains(\"examples/synchro.ctp\"));",
          "139:   assertThat(preview.upgrades, contains(\"examples/dummy.ctp\"));",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/ConfigurerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package org.ow2.clif.jenkins.jobs;",
          "24: import java.io.File;",
          "25: import org.junit.Before;",
          "26: import org.junit.Test;",
          "27: import org.ow2.clif.jenkins.ClifBuilder;",
          "28: import org.ow2.clif.jenkins.ClifPublisher;",
          "38: public class ConfigurerTest {",
          "41:  private Configurer configurer;",
          "43:  private File dir;",
          "45:  @Before",
          "47:  public void setUp() {",
          "49:   configurer = new Configurer();",
          "61:   dir = new File(\"target/workspaces\");",
          "62:  }",
          "64:  @Test",
          "67:   configurer.configure(project, dir, \"nowhere/noTestPlan.ctp\");",
          "69:  }",
          "71:  @Test",
          "72:  public void configurePublisher() throws Exception {",
          "73:   configurer.configure(project, dir, \"nowhere/noTestPlan.ctp\");",
          "75:  }",
          "77:  @Test",
          "78:  public void configurePrivateWorkspace() throws Exception {",
          "79:   configurer.configure(project, dir, \"examples/http.ctp\");",
          "82:  }",
          "84:  @Test",
          "86:   ClifBuilder builder = configurer.newClifBuilder(\"http.ctp\");",
          "88:  }",
          "90:  @Test",
          "92:   ClifBuilder builder = configurer.newClifBuilder(\"http.ctp\");",
          "94:  }",
          "96:  @Test",
          "98:   ClifPublisher publisher = configurer.newClifPublisher();",
          "101:  }",
          "",
          "[Removed Lines]",
          "29: import hudson.model.Descriptor;",
          "30: import hudson.model.FreeStyleProject;",
          "31: import hudson.tasks.Builder;",
          "32: import hudson.tasks.Publisher;",
          "33: import hudson.util.DescribableList;",
          "34: import static org.fest.assertions.Assertions.assertThat;",
          "35: import static org.mockito.Matchers.any;",
          "36: import static org.mockito.Mockito.*;",
          "40:  private Installations installations;",
          "42:  private FreeStyleProject project;",
          "46:  @SuppressWarnings(\"unchecked\")",
          "48:   installations = mock(Installations.class);",
          "50:   configurer.installations = installations;",
          "52:   project = mock(FreeStyleProject.class);",
          "53:   DescribableList<Builder, Descriptor<Builder>> builders =",
          "54:     mock(DescribableList.class);",
          "55:   when(project.getBuildersList()).thenReturn(builders);",
          "57:   DescribableList<Publisher, Descriptor<Publisher>> publishers =",
          "58:     mock(DescribableList.class);",
          "59:   when(project.getPublishersList()).thenReturn(publishers);",
          "65:  public void configureAddsOneClifBuilderToProjectBuilderList()",
          "66:    throws Exception {",
          "68:   verify(project.getBuildersList()).add(any(ClifBuilder.class));",
          "74:   verify(project.getPublishersList()).add(any(ClifPublisher.class));",
          "80:   verify(project).setCustomWorkspace(new File(\"target/workspaces/examples\").getPath());",
          "85:  public void newClifBuilderHasTestPlan() throws Exception {",
          "87:   assertThat(builder.getTestPlanFile()).isEqualTo(\"http.ctp\");",
          "91:  public void newClifBuilderHasReportDir() throws Exception {",
          "93:   assertThat(builder.getReportDir()).isEqualTo(\"report\");",
          "97:  public void newClifPublisherHasReportDirectory() throws Exception {",
          "99:   assertThat(publisher.getClifReportDirectory())",
          "100:     .isEqualTo(\"report\");",
          "103: }",
          "",
          "[Added Lines]",
          "24: import hudson.model.FreeStyleProject;",
          "27: import org.junit.Rule;",
          "29: import org.jvnet.hudson.test.JenkinsRule;",
          "32: import static org.hamcrest.MatcherAssert.assertThat;",
          "33: import static org.hamcrest.Matchers.hasSize;",
          "34: import static org.hamcrest.Matchers.instanceOf;",
          "35: import static org.junit.Assert.assertEquals;",
          "39:  @Rule public JenkinsRule j = new JenkinsRule();",
          "51:  public void configureAddsOneClifBuilderToProjectBuilderList() throws Exception {",
          "52:   FreeStyleProject project = j.createFreeStyleProject();",
          "54:   assertThat(project.getBuildersList(), hasSize(1));",
          "55:   assertThat(project.getBuildersList().get(0), instanceOf(ClifBuilder.class));",
          "60:   FreeStyleProject project = j.createFreeStyleProject();",
          "62:   assertThat(project.getBuildersList(), hasSize(1));",
          "63:   assertThat(project.getBuildersList().get(0), instanceOf(ClifBuilder.class));",
          "68:   FreeStyleProject project = j.createFreeStyleProject();",
          "70:   assertEquals(\"target\" + File.separator + \"workspaces\" + File.separator + \"examples\", project.getCustomWorkspace());",
          "74:  public void newClifBuilderHasTestPlan() {",
          "76:   assertEquals(\"http.ctp\", builder.getTestPlanFile());",
          "80:  public void newClifBuilderHasReportDir() {",
          "82:   assertEquals(\"report\", builder.getReportDir());",
          "86:  public void newClifPublisherHasReportDirectory() {",
          "88:   assertEquals(\"report\", publisher.getClifReportDirectory());",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java||src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/FileSystemTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.junit.After;",
          "27: import org.junit.Before;",
          "28: import org.junit.Test;",
          "31: public class FileSystemTest {",
          "32:  private String path;",
          "",
          "[Removed Lines]",
          "29: import static org.fest.assertions.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "29: import static org.junit.Assert.assertFalse;",
          "30: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   fs.rm_rf(\"**/synchro*\");",
          "73:  }",
          "74: }",
          "",
          "[Removed Lines]",
          "70:   assertThat(f).doesNotExist();",
          "71:   assertThat(monster).doesNotExist();",
          "72:   assertThat(elvis).exists();",
          "",
          "[Added Lines]",
          "71:   assertFalse(f.exists());",
          "72:   assertFalse(monster.exists());",
          "73:   assertTrue(elvis.exists());",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/ParameterParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.junit.Before;",
          "24: import org.junit.Test;",
          "27: public class ParameterParserTest {",
          "28:  private ParameterParser parser;",
          "",
          "[Removed Lines]",
          "25: import static org.fest.assertions.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "25: import static org.hamcrest.MatcherAssert.assertThat;",
          "26: import static org.hamcrest.Matchers.anEmptyMap;",
          "27: import static org.hamcrest.Matchers.equalTo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   assertThat(",
          "42:  }",
          "44:  @Test",
          "45:  public void isSilentOtherwise() throws Exception {",
          "49:  }",
          "50: }",
          "",
          "[Removed Lines]",
          "40:     parser.parse(\"examples/synchro.ctp[uninstall]\").get(\"examples/synchro.ctp\")",
          "41:   ).isEqualTo(\"uninstall\");",
          "46:   assertThat(",
          "47:     parser.parse(\"json\")",
          "48:   ).isEmpty();",
          "",
          "[Added Lines]",
          "42:     parser.parse(\"examples/synchro.ctp[uninstall]\").get(\"examples/synchro.ctp\"), equalTo(\"uninstall\"));",
          "47:   assertThat(parser.parse(\"json\"), anEmptyMap());",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/ZipExtractTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.junit.After;",
          "27: import org.junit.Before;",
          "28: import org.junit.Test;",
          "31: public class ZipExtractTest {",
          "32:  private Zip zip;",
          "",
          "[Removed Lines]",
          "29: import static org.fest.assertions.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "29: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  public void extractsToDirectoryDeflatesAllZip() throws Exception {",
          "50:   zip = new Zip(\"src/test/resources/zips/nested.zip\");",
          "51:   zip.extractTo(path);",
          "54:  }",
          "55: }",
          "",
          "[Removed Lines]",
          "52:   assertThat(new File(workspaces + \"/samples\")).isDirectory();",
          "53:   assertThat(new File(workspaces + \"/samples/post.ctp\")).isFile();",
          "",
          "[Added Lines]",
          "52:   assertTrue(new File(workspaces + \"/samples\").isDirectory());",
          "53:   assertTrue(new File(workspaces + \"/samples/post.ctp\").isFile());",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java||src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java -> src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.io.File;",
          "25: import java.nio.file.Files;",
          "27: import org.apache.tools.ant.types.ZipScanner;",
          "28: import org.junit.Test;",
          "31: public class ZipTest {",
          "32:  private Zip zip;",
          "",
          "[Removed Lines]",
          "26: import java.nio.file.attribute.PosixFilePermissions;",
          "29: import static org.fest.assertions.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "26: import java.util.Arrays;",
          "27: import java.util.List;",
          "30: import static org.hamcrest.MatcherAssert.assertThat;",
          "31: import static org.hamcrest.Matchers.contains;",
          "32: import static org.hamcrest.Matchers.emptyString;",
          "33: import static org.hamcrest.Matchers.equalTo;",
          "34: import static org.hamcrest.Matchers.hasItems;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  @Test",
          "47:  public void namesAreZipEntriesFileName() throws Exception {",
          "48:   zip = new Zip(\"src/test/resources/zips/sources.zip\");",
          "54:  }",
          "56:  @Test",
          "",
          "[Removed Lines]",
          "49:   assertThat(zip.entries(\".*\"))",
          "50:     .containsExactly(\"foo.rb\", \"py.py\", \"get.rb\");",
          "52:   assertThat(zip.entries(\".*\")).isEqualTo(zip.entries(null));",
          "53:   assertThat(zip.entries()).isEqualTo(zip.entries(null));",
          "",
          "[Added Lines]",
          "54:   assertThat(zip.entries(\".*\"),",
          "55:     contains(\"foo.rb\", \"py.py\", \"get.rb\"));",
          "57:   assertThat(zip.entries(\".*\"), equalTo(zip.entries(null)));",
          "58:   assertThat(zip.entries(), equalTo(zip.entries(null)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:   zip = new Zip(\"src/test/resources/zips/sources.zip\");",
          "63:  }",
          "65:  @Test",
          "66:  public void namesAreIdempotent() throws Exception {",
          "67:   zip = new Zip(\"src/test/resources/zips/sources.zip\");",
          "69:  }",
          "71:  @Test",
          "72:  public void namesAreRelativePathFromZip() throws Exception {",
          "73:   zip = new Zip(\"src/test/resources/zips/nested.zip\");",
          "76:     new File(",
          "77:      new File(\"samples\", \"http\"),",
          "78:      \"brute.coffee\")",
          "80:  }",
          "82:  @Test",
          "83:  public void nestedTestPlanCanBeFilteredUsingCleverRegularExpression()",
          "84:    throws Exception {",
          "85:   zip = new Zip(\"src/test/resources/zips/nested.zip\");",
          "88:     new File(new File(\"samples\", \"http\"), \"brute.ctp\").toString(),",
          "90:   assertThat(",
          "93:  }",
          "95:  @Test",
          "96:  public void basedirIsFirstEntryWhenDirectory() throws Exception {",
          "97:   zip = new Zip(\"src/test/resources/zips/nested.zip\");",
          "99:  }",
          "101:  @Test",
          "102:  public void basedirIsFirstEntryLeadingDirectoryWhenFile() throws Exception {",
          "103:   zip = new Zip(\"src/test/resources/zips/clif-examples-1.zip\");",
          "105:  }",
          "107:  @Test",
          "108:  public void dirIsEmptyOtherwise() throws Exception {",
          "109:   zip = new Zip(\"src/test/resources/zips/sources.zip\");",
          "111:  }",
          "113:  @Test",
          "",
          "[Removed Lines]",
          "61:   assertThat(zip.entries(\".*rb$\"))",
          "62:     .containsExactly(\"foo.rb\", \"get.rb\");",
          "68:   assertThat(zip.entries(\".*rb$\")).isEqualTo(zip.entries(\".*rb$\"));",
          "74:   assertThat(zip.entries(\"(.*)\\\\.coffee$\"))",
          "75:    .containsExactly(",
          "79:      .toString());",
          "86:   assertThat(zip.entries(\"(.*)\\\\.ctp\"))",
          "87:    .containsExactly(",
          "89:     new File(\"samples\", \"post.ctp\").toString());",
          "91:    zip.entries(\"([^\\\\\" + File.separatorChar + \"]*)\\\\\" + File.separatorChar + \"([^\\\\\" + File.separatorChar + \"]*)\\\\.ctp\"))",
          "92:    .containsExactly(new File(\"samples\", \"post.ctp\").toString());",
          "98:   assertThat(zip.basedir()).isEqualTo(\"samples\");",
          "104:   assertThat(zip.basedir()).isEqualTo(\"examples\");",
          "110:   assertThat(zip.basedir()).isEmpty();",
          "",
          "[Added Lines]",
          "66:   assertThat(zip.entries(\".*rb$\"),",
          "67:     contains(\"foo.rb\", \"get.rb\"));",
          "73:   assertThat(zip.entries(\".*rb$\"), equalTo(zip.entries(\".*rb$\")));",
          "79:   assertThat(zip.entries(\"(.*)\\\\.coffee$\"),",
          "80:    contains(",
          "84:      .toString()));",
          "91:   assertThat(zip.entries(\"(.*)\\\\.ctp\"),",
          "92:    contains(",
          "94:     new File(\"samples\", \"post.ctp\").toString()));",
          "96:    zip.entries(\"([^\\\\\" + File.separatorChar + \"]*)\\\\\" + File.separatorChar + \"([^\\\\\" + File.separatorChar + \"]*)\\\\.ctp\"),",
          "97:    contains(new File(\"samples\", \"post.ctp\").toString()));",
          "103:   assertThat(zip.basedir(), equalTo(\"samples\"));",
          "109:   assertThat(zip.basedir(), equalTo(\"examples\"));",
          "115:   assertThat(zip.basedir(), emptyString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:   ZipScanner zip = new ZipScanner();",
          "116:   zip.setSrc(new File(\"src/test/resources/zips/clif-examples-1.zip\"));",
          "120:  }",
          "122:  @Test",
          "123:  public void maliciousPathIsSanitized() throws Exception",
          "124:  {",
          "125:   zip = new Zip(\"src/test/resources/zips/ProofOfConceptSEC2413.zip\");",
          "128:     new File(",
          "129:      \"UnexpectedDir\",",
          "130:      \"UnexpectedFile.txt\")",
          "132:  }",
          "134:  @Test",
          "",
          "[Removed Lines]",
          "118:   String[] files = zip.getIncludedFiles();",
          "119:   assertThat(files).contains(\"examples/dummy.ctp\");",
          "126:   assertThat(zip.entries(null))",
          "127:    .containsExactly(",
          "131:      .toString());",
          "",
          "[Added Lines]",
          "123:   List<String> files = Arrays.asList(zip.getIncludedFiles());",
          "124:   assertThat(files, hasItems(\"examples/dummy.ctp\"));",
          "131:   assertThat(zip.entries(null),",
          "132:    contains(",
          "136:      .toString()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:    .toFile();",
          "141:   zip.extractTo(tmpDir);",
          "142:   deleteFileOnExit(tmpDir);",
          "145:  }",
          "147:  @Test",
          "148:  public void maliciousPathIsSanitizedOnBasedir() throws Exception",
          "149:  {",
          "150:   zip = new Zip(\"src/test/resources/zips/ProofOfConceptSEC2413.zip\");",
          "152:  }",
          "153: }",
          "",
          "[Removed Lines]",
          "143:   assertThat(tmpDir.list()).containsOnly(\"UnexpectedDir\");",
          "144:   assertThat(new File(tmpDir, \"UnexpectedDir\").list()).containsOnly(\"UnexpectedFile.txt\");",
          "151:   assertThat(zip.basedir()).isEqualTo(\"UnexpectedDir\");",
          "",
          "[Added Lines]",
          "148:   assertThat(Arrays.asList(tmpDir.list()), contains(\"UnexpectedDir\"));",
          "149:   assertThat(Arrays.asList(new File(tmpDir, \"UnexpectedDir\").list()), contains(\"UnexpectedFile.txt\"));",
          "156:   assertThat(zip.basedir(), equalTo(\"UnexpectedDir\"));",
          "",
          "---------------"
        ],
        "src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java||src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java": [
          "File: src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java -> src/test/java/org/ow2/clif/jenkins/parser/clif/ClifParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.ow2.clif.jenkins.chart.ChartConfiguration;",
          "27: import org.ow2.clif.jenkins.model.ClifReport;",
          "28: import org.ow2.clif.jenkins.model.TestPlan;",
          "30: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "29: import static org.fest.assertions.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "29: import static org.hamcrest.MatcherAssert.assertThat;",
          "30: import static org.hamcrest.Matchers.anyOf;",
          "31: import static org.hamcrest.Matchers.contains;",
          "32: import static org.hamcrest.Matchers.empty;",
          "33: import static org.hamcrest.Matchers.hasSize;",
          "34: import static org.hamcrest.Matchers.not;",
          "35: import static org.hamcrest.Matchers.nullValue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   ClifReport report = parser.parse(System.out);",
          "57:   assertNotNull(report);",
          "60:   TestPlan testPlanRead = report.getTestplan(\"random\");",
          "67:   start += System.currentTimeMillis();",
          "68:   System.out.println(start);",
          "",
          "[Removed Lines]",
          "58:   assertThat(report.getTestplans()).isNotEmpty().containsExactly(new TestPlan(\"random\", new Date()));",
          "61:   assertThat(testPlanRead.getAggregatedMeasures()).hasSize(1);",
          "62:   assertThat(testPlanRead.getAlarms()).isNullOrEmpty();",
          "63:   assertThat(testPlanRead.getInjectors()).hasSize(1);",
          "64:   assertThat(testPlanRead.getProbes()).isNullOrEmpty();",
          "65:   assertThat(testPlanRead.getServers()).hasSize(1);",
          "",
          "[Added Lines]",
          "64:   assertThat(report.getTestplans(), not(empty()));",
          "65:   assertThat(report.getTestplans(), contains(new TestPlan(\"random\", new Date())));",
          "68:   assertThat(testPlanRead.getAggregatedMeasures(), hasSize(1));",
          "69:   assertThat(testPlanRead.getAlarms(), anyOf(nullValue(),empty()));",
          "70:   assertThat(testPlanRead.getInjectors(), hasSize(1));",
          "71:   assertThat(testPlanRead.getProbes(), anyOf(nullValue(),empty()));",
          "72:   assertThat(testPlanRead.getServers(), hasSize(1));",
          "",
          "---------------"
        ]
      }
    }
  ]
}