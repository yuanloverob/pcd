{
  "cve_id": "CVE-2024-22421",
  "cve_desc": "JupyterLab is an extensible environment for interactive and reproducible computing, based on the Jupyter Notebook and Architecture. Users of JupyterLab who click on a malicious link may get their `Authorization` and `XSRFToken` tokens exposed to a third party when running an older `jupyter-server` version. JupyterLab versions 4.1.0b2, 4.0.11, and 3.6.7 are patched. No workaround has been identified, however users should ensure to upgrade `jupyter-server` to version 2.7.2 or newer which includes a redirect vulnerability fix.",
  "repo": "jupyterlab/jupyterlab",
  "patch_hash": "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
  "patch_info": {
    "commit_hash": "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
    "repo": "jupyterlab/jupyterlab",
    "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6",
    "files": [
      "packages/apputils-extension/src/workspacesplugin.ts",
      "packages/hub-extension/src/index.ts",
      "packages/services/src/session/restapi.ts",
      "packages/services/src/setting/index.ts",
      "packages/services/src/terminal/restapi.ts",
      "packages/services/src/workspace/index.ts",
      "packages/services/test/session/session.spec.ts",
      "packages/services/test/setting/manager.spec.ts",
      "packages/services/test/workspace/manager.spec.ts",
      "packages/translation/src/server.ts"
    ],
    "message": "Merge pull request from GHSA-44cc-43rp-5947\n\nCo-authored-by: Fr\u00e9d\u00e9ric Collonval <fcollonval@users.noreply.github.com>",
    "before_after_code_files": [
      "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
      "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
      "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
      "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
      "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
      "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
      "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
      "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
      "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
      "packages/translation/src/server.ts||packages/translation/src/server.ts"
    ]
  },
  "patch_diff": {
    "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts": [
      "File: packages/apputils-extension/src/workspacesplugin.ts -> packages/apputils-extension/src/workspacesplugin.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:         await this._state.save(LAST_SAVE_ID, path);",
      "214:         if (this._router) {",
      "215:           this._router.navigate(url, { hard: true });",
      "216:         } else {",
      "",
      "[Removed Lines]",
      "213:         const url = URLExt.join(this._application, 'workspaces', id);",
      "",
      "[Added Lines]",
      "213:         const workspacesBase = URLExt.join(this._application, 'workspaces');",
      "214:         const url = URLExt.join(workspacesBase, id);",
      "215:         if (!workspacesBase.startsWith(url)) {",
      "216:           throw new Error('Can only be used for workspaces');",
      "217:         }",
      "",
      "---------------"
    ],
    "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts": [
      "File: packages/hub-extension/src/index.ts -> packages/hub-extension/src/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:   });",
      "64:   const { commands } = app;",
      "",
      "[Removed Lines]",
      "60:   const restartUrl = hubServerName",
      "61:     ? hubHost + URLExt.join(hubPrefix, 'spawn', hubUser, hubServerName)",
      "62:     : hubHost + URLExt.join(hubPrefix, 'spawn');",
      "",
      "[Added Lines]",
      "60:   const spawnBase = URLExt.join(hubPrefix, 'spawn');",
      "61:   let restartUrl: string;",
      "62:   if (hubServerName) {",
      "63:     const suffix = URLExt.join(spawnBase, hubUser, hubServerName);",
      "64:     if (!suffix.startsWith(spawnBase)) {",
      "65:       throw new Error('Can only be used for spawn requests');",
      "66:     }",
      "67:     restartUrl = hubHost + suffix;",
      "68:   }",
      "69:   restartUrl = hubHost + spawnBase;",
      "",
      "---------------"
    ],
    "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts": [
      "File: packages/services/src/session/restapi.ts -> packages/services/src/session/restapi.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: export function getSessionUrl(baseUrl: string, id: string): string {",
      "46: }",
      "",
      "[Removed Lines]",
      "45:   return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);",
      "",
      "[Added Lines]",
      "45:   const servicesBase = URLExt.join(baseUrl, SESSION_SERVICE_URL);",
      "46:   const result = URLExt.join(servicesBase, id);",
      "47:   if (!result.startsWith(servicesBase)) {",
      "48:     throw new Error('Can only be used for services requests');",
      "49:   }",
      "50:   return result;",
      "",
      "---------------"
    ],
    "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts": [
      "File: packages/services/src/setting/index.ts -> packages/services/src/setting/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "161:     const idsOnlyParam = idsOnly",
      "162:       ? URLExt.objectToQueryString({ ids_only: true })",
      "163:       : '';",
      "165:   }",
      "166: }",
      "",
      "[Removed Lines]",
      "164:     return `${URLExt.join(base, SERVICE_SETTINGS_URL, id)}${idsOnlyParam}`;",
      "",
      "[Added Lines]",
      "164:     const settingsBase = URLExt.join(base, SERVICE_SETTINGS_URL);",
      "165:     const result = URLExt.join(settingsBase, id);",
      "166:     if (!result.startsWith(settingsBase)) {",
      "167:       throw new Error('Can only be used for workspaces requests');",
      "168:     }",
      "169:     return `${result}${idsOnlyParam}`;",
      "",
      "---------------"
    ],
    "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts": [
      "File: packages/services/src/terminal/restapi.ts -> packages/services/src/terminal/restapi.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "101:   settings: ServerConnection.ISettings = ServerConnection.makeSettings()",
      "102: ): Promise<void> {",
      "103:   Private.errorIfNotAvailable();",
      "105:   const init = { method: 'DELETE' };",
      "106:   const response = await ServerConnection.makeRequest(url, init, settings);",
      "107:   if (response.status === 404) {",
      "",
      "[Removed Lines]",
      "104:   const url = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL, name);",
      "",
      "[Added Lines]",
      "104:   const workspacesBase = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL);",
      "105:   const url = URLExt.join(workspacesBase, name);",
      "106:   if (!url.startsWith(workspacesBase)) {",
      "107:     throw new Error('Can only be used for terminal requests');",
      "108:   }",
      "",
      "---------------"
    ],
    "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts": [
      "File: packages/services/src/workspace/index.ts -> packages/services/src/workspace/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "180:   export function url(base: string, id: string): string {",
      "182:   }",
      "183: }",
      "",
      "[Removed Lines]",
      "181:     return URLExt.join(base, SERVICE_WORKSPACES_URL, id);",
      "",
      "[Added Lines]",
      "181:     const workspacesBase = URLExt.join(base, SERVICE_WORKSPACES_URL);",
      "182:     const result = URLExt.join(workspacesBase, id);",
      "183:     if (!result.startsWith(workspacesBase)) {",
      "184:       throw new Error('Can only be used for workspaces requests');",
      "185:     }",
      "186:     return result;",
      "",
      "---------------"
    ],
    "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts": [
      "File: packages/services/test/session/session.spec.ts -> packages/services/test/session/session.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:         SessionAPI.shutdownSession(UUID.uuid4())",
      "145:       ).resolves.not.toThrow();",
      "146:     });",
      "147:   });",
      "148: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:     it('should reject invalid on invalid id', async () => {",
      "149:       await expect(SessionAPI.shutdownSession('../')).rejects.toThrow();",
      "150:     });",
      "",
      "---------------"
    ],
    "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts": [
      "File: packages/services/test/setting/manager.spec.ts -> packages/services/test/setting/manager.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:         expect((await manager.fetch(id)).id).toBe(id);",
      "55:       });",
      "56:     });",
      "58:     describe('#save()', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:       it('should reject on invalid id', async () => {",
      "58:         const id = '../';",
      "60:         const callback = async () => {",
      "61:           await manager.fetch(id);",
      "62:         };",
      "63:         await expect(callback).rejects.toThrow();",
      "64:       });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64:         await manager.save(id, raw);",
      "65:         expect(JSON.parse((await manager.fetch(id)).raw).theme).toBe(theme);",
      "66:       });",
      "67:     });",
      "68:   });",
      "69: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77:       it('should reject on invalid id', async () => {",
      "78:         const id = '../';",
      "79:         const theme = 'Foo Theme';",
      "80:         const raw = `{\"theme\": \"${theme}\"}`;",
      "82:         const callback = async () => {",
      "83:           await manager.save(id, raw);",
      "84:         };",
      "85:         await expect(callback).rejects.toThrow();",
      "86:       });",
      "",
      "---------------"
    ],
    "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts": [
      "File: packages/services/test/workspace/manager.spec.ts -> packages/services/test/workspace/manager.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
      "56:         await manager.remove(id);",
      "57:       });",
      "58:     });",
      "60:     describe('#list()', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:       it('should reject on invalid id', async () => {",
      "60:         const id = '../';",
      "62:         const callback = async () => {",
      "63:           await manager.fetch(id);",
      "64:         };",
      "65:         await expect(callback).rejects.toThrow();",
      "66:       });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
      "88:         await manager.remove(id);",
      "89:       });",
      "90:     });",
      "91:   });",
      "92: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:       it('should reject on invalid id', async () => {",
      "101:         const id = '../';",
      "103:         const callback = async () => {",
      "104:           await manager.save(id, { data: {}, metadata: { id } });",
      "105:         };",
      "106:         await expect(callback).rejects.toThrow();",
      "107:       });",
      "",
      "---------------"
    ],
    "packages/translation/src/server.ts||packages/translation/src/server.ts": [
      "File: packages/translation/src/server.ts -> packages/translation/src/server.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:   const settings = serverSettings ?? ServerConnection.makeSettings();",
      "28:   translationsUrl =",
      "29:     translationsUrl || `${settings.appUrl}/${TRANSLATIONS_SETTINGS_URL}`;",
      "31:   let response: Response;",
      "32:   try {",
      "33:     response = await ServerConnection.makeRequest(requestUrl, init, settings);",
      "",
      "[Removed Lines]",
      "30:   const requestUrl = URLExt.join(settings.baseUrl, translationsUrl, locale);",
      "",
      "[Added Lines]",
      "30:   const translationsBase = URLExt.join(settings.baseUrl, translationsUrl);",
      "31:   const requestUrl = URLExt.join(translationsBase, locale);",
      "32:   if (!requestUrl.startsWith(translationsBase)) {",
      "33:     throw new Error('Can only be used for translations requests');",
      "34:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "926a19dfab14c1de326490bc0c63f74cbdfd5a83",
      "candidate_info": {
        "commit_hash": "926a19dfab14c1de326490bc0c63f74cbdfd5a83",
        "repo": "jupyterlab/jupyterlab",
        "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/926a19dfab14c1de326490bc0c63f74cbdfd5a83",
        "files": [
          "packages/apputils-extension/src/workspacesplugin.ts"
        ],
        "message": "Fix workspaces URL guard (#15842)",
        "before_after_code_files": [
          "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts"
          ],
          "candidate": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts": [
          "File: packages/apputils-extension/src/workspacesplugin.ts -> packages/apputils-extension/src/workspacesplugin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         const workspacesBase = URLExt.join(this._application, 'workspaces');",
          "214:         const url = URLExt.join(workspacesBase, id);",
          "216:           throw new Error('Can only be used for workspaces');",
          "217:         }",
          "218:         if (this._router) {",
          "",
          "[Removed Lines]",
          "215:         if (!workspacesBase.startsWith(url)) {",
          "",
          "[Added Lines]",
          "215:         if (!url.startsWith(workspacesBase)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}