{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd9fb479f13dba6221f13757fd66a2a96d91e44e",
      "candidate_info": {
        "commit_hash": "bd9fb479f13dba6221f13757fd66a2a96d91e44e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bd9fb479f13dba6221f13757fd66a2a96d91e44e",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-61585_master' of git://github.com/dmonllao/moodle",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2843:         upgrade_main_savepoint(true, 2019030800.02);",
          "2844:     }",
          "2846:     return true;",
          "2847: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2846:     if ($oldversion < 2019030800.03) {",
          "2849:         $params = [",
          "2850:             'target' => '\\core\\analytics\\target\\course_dropout',",
          "2851:             'trained' => 0,",
          "2852:             'enabled' => 0,",
          "2853:         ];",
          "2854:         $models = $DB->get_records('analytics_models', $params);",
          "2855:         foreach ($models as $model) {",
          "2856:             $indicators = json_decode($model->indicators);",
          "2858:             $potentiallymissingindicators = [",
          "2859:                 '\\core_course\\analytics\\indicator\\completion_enabled',",
          "2860:                 '\\core_course\\analytics\\indicator\\potential_cognitive_depth',",
          "2861:                 '\\core_course\\analytics\\indicator\\potential_social_breadth',",
          "2862:                 '\\core\\analytics\\indicator\\any_access_after_end',",
          "2863:                 '\\core\\analytics\\indicator\\any_access_before_start',",
          "2864:                 '\\core\\analytics\\indicator\\any_write_action_in_course',",
          "2865:                 '\\core\\analytics\\indicator\\read_actions'",
          "2866:             ];",
          "2868:             $missing = false;",
          "2869:             foreach ($potentiallymissingindicators as $potentiallymissingindicator) {",
          "2870:                 if (!in_array($potentiallymissingindicator, $indicators)) {",
          "2872:                     $indicators[] = $potentiallymissingindicator;",
          "2873:                     $missing = true;",
          "2874:                 }",
          "2875:             }",
          "2877:             if ($missing) {",
          "2878:                 $model->indicators = json_encode($indicators);",
          "2879:                 $model->version = time();",
          "2880:                 $model->timemodified = time();",
          "2881:                 $DB->update_record('analytics_models', $model);",
          "2882:             }",
          "2883:         }",
          "2886:         $params = [",
          "2887:             'target' => '\\core\\analytics\\target\\no_teaching',",
          "2888:         ];",
          "2889:         $models = $DB->get_records('analytics_models', $params);",
          "2890:         foreach ($models as $model) {",
          "2891:             $indicators = json_decode($model->indicators);",
          "2892:             if (!in_array('\\core_course\\analytics\\indicator\\no_student', $indicators)) {",
          "2895:                 $indicators[] = '\\core_course\\analytics\\indicator\\no_student';",
          "2897:                 $model->indicators = json_encode($indicators);",
          "2898:                 $model->version = time();",
          "2899:                 $model->timemodified = time();",
          "2900:                 $DB->update_record('analytics_models', $model);",
          "2901:             }",
          "2902:         }",
          "2905:         upgrade_main_savepoint(true, 2019030800.03);",
          "2906:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019030800.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019030800.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c5b60a0f9e2efc2128f41dc0c8b5d06ea50cc48",
      "candidate_info": {
        "commit_hash": "4c5b60a0f9e2efc2128f41dc0c8b5d06ea50cc48",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4c5b60a0f9e2efc2128f41dc0c8b5d06ea50cc48",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181220)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019011100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190111)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2d9a662407f7cff14ffaae11e7a4e1d64274852",
      "candidate_info": {
        "commit_hash": "f2d9a662407f7cff14ffaae11e7a4e1d64274852",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f2d9a662407f7cff14ffaae11e7a4e1d64274852",
        "files": [
          "lib/classes/event/message_deleted.php",
          "lib/db/services.php",
          "lib/upgrade.txt",
          "message/classes/api.php",
          "message/externallib.php",
          "message/tests/api_test.php",
          "message/tests/events_test.php",
          "message/tests/externallib_test.php",
          "message/upgrade.txt",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63547_master' of git://github.com/markn86/moodle",
        "before_after_code_files": [
          "lib/classes/event/message_deleted.php||lib/classes/event/message_deleted.php",
          "lib/db/services.php||lib/db/services.php",
          "message/classes/api.php||message/classes/api.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/events_test.php||message/tests/events_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/classes/event/message_deleted.php||lib/classes/event/message_deleted.php": [
          "File: lib/classes/event/message_deleted.php -> lib/classes/event/message_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         $event = self::create(array(",
          "68:             'objectid' => $muaid,",
          "70:             'context' => \\context_system::instance(),",
          "72:             'other' => array(",
          "73:                 'messageid' => $messageid,",
          "76:             )",
          "77:         ));",
          "",
          "[Removed Lines]",
          "57:     public static function create_from_ids($userfromid, $usertoid, $userdeleted, $messageid, $muaid) {",
          "59:         if ($userdeleted == $userfromid) {",
          "60:             $relateduserid = $usertoid;",
          "61:         } else {",
          "62:             $relateduserid = $userfromid;",
          "63:         }",
          "69:             'userid' => $userdeleted,",
          "71:             'relateduserid' => $relateduserid,",
          "74:                 'useridfrom' => $userfromid,",
          "75:                 'useridto' => $usertoid",
          "",
          "[Added Lines]",
          "54:     public static function create_from_ids(int $userid, int $userdeleting, int $messageid, int $muaid) : message_deleted {",
          "59:             'userid' => $userdeleting,",
          "61:             'relateduserid' => $userid,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     public function get_description() {",
          "111:         }",
          "114:     }",
          "",
          "[Removed Lines]",
          "107:         if ($this->userid == $this->other['useridto']) {",
          "108:             $str = 'from';",
          "109:         } else {",
          "110:             $str = 'to';",
          "113:         return \"The user with id '$this->userid' deleted a message sent $str the user with id '$this->relateduserid'.\";",
          "",
          "[Added Lines]",
          "96:         if (isset($this->other['useridto'])) {",
          "98:             if ($this->userid == $this->other['useridto']) {",
          "99:                 $str = 'from';",
          "100:             } else {",
          "101:                 $str = 'to';",
          "102:             }",
          "104:             return \"The user with id '$this->userid' deleted a message sent $str the user with id '$this->relateduserid'.\";",
          "105:         }",
          "107:         $messageid = $this->other['messageid'];",
          "110:         $str = \"The user with id '$this->userid' deleted a message with id '$messageid'\";",
          "111:         if ($this->userid != $this->relateduserid) {",
          "112:             $str .= \" for the user with id '$this->relateduserid'\";",
          "115:         return $str;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         if (!isset($this->other['messageid'])) {",
          "130:             throw new \\coding_exception('The \\'messageid\\' value must be set in other.');",
          "131:         }",
          "140:     }",
          "142:     public static function get_objectid_mapping() {",
          "",
          "[Removed Lines]",
          "133:         if (!isset($this->other['useridfrom'])) {",
          "134:             throw new \\coding_exception('The \\'useridfrom\\' value must be set in other.');",
          "135:         }",
          "137:         if (!isset($this->other['useridto'])) {",
          "138:             throw new \\coding_exception('The \\'useridto\\' value must be set in other.');",
          "139:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:     public static function get_other_mapping() {",
          "151:         return $othermapped;",
          "152:     }",
          "153: }",
          "",
          "[Removed Lines]",
          "148:         $othermapped = array();",
          "149:         $othermapped['useridfrom'] = array('db' => 'user', 'restore' => base::NOT_MAPPED);",
          "150:         $othermapped['useridto'] = array('db' => 'user', 'restore' => base::NOT_MAPPED);",
          "",
          "[Added Lines]",
          "142:         $othermapped = [];",
          "143:         $othermapped['messageid'] = ['db' => 'messages', 'restore' => base::NOT_MAPPED];",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "917:         'classname' => 'core_message_external',",
          "918:         'methodname' => 'delete_conversation',",
          "919:         'classpath' => 'message/externallib.php',",
          "921:         'type' => 'write',",
          "922:         'capabilities' => 'moodle/site:deleteownmessage',",
          "923:         'ajax' => true,",
          "",
          "[Removed Lines]",
          "920:         'description' => 'Deletes a conversation.',",
          "",
          "[Added Lines]",
          "920:         'description' => '** DEPRECATED ** Please do not call this function any more.",
          "921:                           Deletes a conversation.',",
          "922:         'type' => 'write',",
          "923:         'capabilities' => 'moodle/site:deleteownmessage',",
          "924:         'ajax' => true,",
          "925:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "926:     ),",
          "927:     'core_message_delete_conversations_by_id' => array(",
          "928:         'classname' => 'core_message_external',",
          "929:         'methodname' => 'delete_conversations_by_id',",
          "930:         'classpath' => 'message/externallib.php',",
          "931:         'description' => 'Deletes a list of conversations.',",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:         global $USER;",
          "636:         $systemcontext = \\context_system::instance();",
          "642:             return true;",
          "643:         }",
          "",
          "[Removed Lines]",
          "633:     public static function can_delete_conversation($userid) {",
          "639:         if (has_capability('moodle/site:deleteanymessage', $systemcontext) ||",
          "640:             ((has_capability('moodle/site:deleteownmessage', $systemcontext) &&",
          "641:                 $USER->id == $userid))) {",
          "",
          "[Added Lines]",
          "634:     public static function can_delete_conversation(int $userid, int $conversationid = null) : bool {",
          "637:         if (is_null($conversationid)) {",
          "638:             debugging('\\core_message\\api::can_delete_conversation() now expects a \\'conversationid\\' to be passed.',",
          "639:                 DEBUG_DEVELOPER);",
          "640:             return false;",
          "641:         }",
          "645:         if (has_capability('moodle/site:deleteanymessage', $systemcontext)) {",
          "646:             return true;",
          "647:         }",
          "649:         if (!self::is_user_in_conversation($userid, $conversationid)) {",
          "650:             return false;",
          "651:         }",
          "653:         if (has_capability('moodle/site:deleteownmessage', $systemcontext) &&",
          "654:                 $USER->id == $userid) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "658:     public static function delete_conversation($userid, $otheruserid) {",
          "661:         $conversationid = self::get_conversation_between_users([$userid, $otheruserid]);",
          "",
          "[Removed Lines]",
          "659:         global $DB, $USER;",
          "",
          "[Added Lines]",
          "673:         debugging('\\core_message\\api::delete_conversation() is deprecated, please use ' .",
          "674:             '\\core_message\\api::delete_conversation_by_id() instead.', DEBUG_DEVELOPER);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "665:             return true;",
          "666:         }",
          "669:         $sql = \"SELECT m.*",
          "670:                  FROM {messages} m",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:         self::delete_conversation_by_id($userid, $conversationid);",
          "685:         return true;",
          "686:     }",
          "697:     public static function delete_conversation_by_id(int $userid, int $conversationid) {",
          "698:         global $DB, $USER;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "686:             $mua->timecreated = time();",
          "687:             $mua->id = $DB->insert_record('message_user_actions', $mua);",
          "696:         }",
          "699:     }",
          "",
          "[Removed Lines]",
          "689:             if ($message->useridfrom == $userid) {",
          "690:                 $useridto = $otheruserid;",
          "691:             } else {",
          "692:                 $useridto = $userid;",
          "693:             }",
          "694:             \\core\\event\\message_deleted::create_from_ids($message->useridfrom, $useridto,",
          "695:                 $USER->id, $message->id, $mua->id)->trigger();",
          "698:         return true;",
          "",
          "[Added Lines]",
          "721:             \\core\\event\\message_deleted::create_from_ids($userid, $USER->id,",
          "722:                 $message->id, $mua->id)->trigger();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1202:     public static function can_delete_message($userid, $messageid) {",
          "1203:         global $DB, $USER;",
          "1221:         }",
          "1229:             return true;",
          "1230:         }",
          "",
          "[Removed Lines]",
          "1205:         $sql = \"SELECT m.id, m.useridfrom, mcm.userid as useridto",
          "1206:                   FROM {messages} m",
          "1207:             INNER JOIN {message_conversations} mc",
          "1208:                     ON m.conversationid = mc.id",
          "1209:             INNER JOIN {message_conversation_members} mcm",
          "1210:                     ON mcm.conversationid = mc.id",
          "1211:                  WHERE mcm.userid != m.useridfrom",
          "1212:                    AND m.id = ?\";",
          "1213:         $message = $DB->get_record_sql($sql, [$messageid], MUST_EXIST);",
          "1215:         if ($message->useridfrom == $userid) {",
          "1216:             $userdeleting = 'useridfrom';",
          "1217:         } else if ($message->useridto == $userid) {",
          "1218:             $userdeleting = 'useridto';",
          "1219:         } else {",
          "1220:             return false;",
          "1223:         $systemcontext = \\context_system::instance();",
          "1226:         if (has_capability('moodle/site:deleteanymessage', $systemcontext) ||",
          "1227:             ((has_capability('moodle/site:deleteownmessage', $systemcontext) &&",
          "1228:                 $USER->id == $message->$userdeleting))) {",
          "",
          "[Added Lines]",
          "1230:         $systemcontext = \\context_system::instance();",
          "1232:         $conversationid = $DB->get_field('messages', 'conversationid', ['id' => $messageid], MUST_EXIST);",
          "1234:         if (has_capability('moodle/site:deleteanymessage', $systemcontext)) {",
          "1235:             return true;",
          "1238:         if (!self::is_user_in_conversation($userid, $conversationid)) {",
          "1239:             return false;",
          "1240:         }",
          "1242:         if (has_capability('moodle/site:deleteownmessage', $systemcontext) &&",
          "1243:                 $USER->id == $userid) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1245:     public static function delete_message($userid, $messageid) {",
          "1259:         if (!$DB->record_exists('message_user_actions', ['userid' => $userid,",
          "",
          "[Removed Lines]",
          "1246:         global $DB;",
          "1248:         $sql = \"SELECT m.id, m.useridfrom, mcm.userid as useridto",
          "1249:                   FROM {messages} m",
          "1250:             INNER JOIN {message_conversations} mc",
          "1251:                     ON m.conversationid = mc.id",
          "1252:             INNER JOIN {message_conversation_members} mcm",
          "1253:                     ON mcm.conversationid = mc.id",
          "1254:                  WHERE mcm.userid != m.useridfrom",
          "1255:                    AND m.id = ?\";",
          "1256:         $message = $DB->get_record_sql($sql, [$messageid], MUST_EXIST);",
          "",
          "[Added Lines]",
          "1261:         global $DB, $USER;",
          "1263:         if (!$DB->record_exists('messages', ['id' => $messageid])) {",
          "1264:             return false;",
          "1265:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1266:             $mua->id = $DB->insert_record('message_user_actions', $mua);",
          "1272:             return true;",
          "1273:         }",
          "",
          "[Removed Lines]",
          "1269:             \\core\\event\\message_deleted::create_from_ids($message->useridfrom, $message->useridto,",
          "1270:                 $userid, $message->id, $mua->id)->trigger();",
          "",
          "[Added Lines]",
          "1278:             \\core\\event\\message_deleted::create_from_ids($userid, $USER->id,",
          "1279:                 $messageid, $mua->id)->trigger();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1612:                     OR (mcr.userid = ? AND mcr.requesteduserid = ?)\";",
          "1613:         return $DB->record_exists_sql($sql, [$userid, $requesteduserid, $requesteduserid, $userid]);",
          "1614:     }",
          "1615: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1632:     public static function is_user_in_conversation(int $userid, int $conversationid) : bool {",
          "1633:         global $DB;",
          "1635:         return $DB->record_exists('message_conversation_members', ['conversationid' => $conversationid,",
          "1636:             'userid' => $userid]);",
          "1638:     }",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2587:         $user = core_user::get_user($params['userid'], '*', MUST_EXIST);",
          "2588:         core_user::require_active_user($user);",
          "2592:         } else {",
          "2593:             throw new moodle_exception('You do not have permission to delete messages');",
          "2594:         }",
          "",
          "[Removed Lines]",
          "2590:         if (\\core_message\\api::can_delete_conversation($user->id)) {",
          "2591:             $status = \\core_message\\api::delete_conversation($user->id, $otheruserid);",
          "",
          "[Added Lines]",
          "2592:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "2593:             return [];",
          "2594:         }",
          "2596:         if (\\core_message\\api::can_delete_conversation($user->id, $conversationid)) {",
          "2597:             \\core_message\\api::delete_conversation_by_id($user->id, $conversationid);",
          "2598:             $status = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2616:         );",
          "2617:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2632:     public static function delete_conversation_is_deprecated() {",
          "2633:         return true;",
          "2634:     }",
          "2642:     public static function delete_conversations_by_id_parameters() {",
          "2643:         return new external_function_parameters(",
          "2644:             array(",
          "2645:                 'userid' => new external_value(PARAM_INT, 'The user id of who we want to delete the conversation for'),",
          "2646:                 'conversationids' => new external_multiple_structure(",
          "2647:                     new external_value(PARAM_INT, 'The id of the conversation'),",
          "2648:                     'List of conversation IDs'",
          "2649:                 ),",
          "2650:             )",
          "2651:         );",
          "2652:     }",
          "2663:     public static function delete_conversations_by_id($userid, array $conversationids) {",
          "2664:         global $CFG;",
          "2667:         if (empty($CFG->messaging)) {",
          "2668:             throw new moodle_exception('disabled', 'message');",
          "2669:         }",
          "2672:         $params = [",
          "2673:             'userid' => $userid,",
          "2674:             'conversationids' => $conversationids,",
          "2675:         ];",
          "2676:         $params = self::validate_parameters(self::delete_conversations_by_id_parameters(), $params);",
          "2679:         $context = context_system::instance();",
          "2680:         self::validate_context($context);",
          "2682:         $user = core_user::get_user($params['userid'], '*', MUST_EXIST);",
          "2683:         core_user::require_active_user($user);",
          "2685:         foreach ($conversationids as $conversationid) {",
          "2686:             if (\\core_message\\api::can_delete_conversation($user->id, $conversationid)) {",
          "2687:                 \\core_message\\api::delete_conversation_by_id($user->id, $conversationid);",
          "2688:             } else {",
          "2689:                 throw new moodle_exception(\"You do not have permission to delete the conversation '$conversationid'\");",
          "2690:             }",
          "2691:         }",
          "2693:         return [];",
          "2694:     }",
          "2702:     public static function delete_conversations_by_id_returns() {",
          "2703:         return new external_warnings();",
          "2704:     }",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1146:         $user1 = self::getDataGenerator()->create_user();",
          "1147:         $user2 = self::getDataGenerator()->create_user();",
          "1153:         $this->setUser($user1);",
          "1160:     }",
          "",
          "[Removed Lines]",
          "1150:         $this->assertTrue(\\core_message\\api::can_delete_conversation($user1->id));",
          "1156:         $this->assertTrue(\\core_message\\api::can_delete_conversation($user1->id));",
          "1159:         $this->assertFalse(\\core_message\\api::can_delete_conversation($user2->id));",
          "",
          "[Added Lines]",
          "1150:         $time = 1;",
          "1151:         $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 1);",
          "1152:         $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 2);",
          "1153:         $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 3);",
          "1154:         $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 4);",
          "1156:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "1159:         $this->assertTrue(\\core_message\\api::can_delete_conversation($user1->id, $conversationid));",
          "1165:         $this->assertTrue(\\core_message\\api::can_delete_conversation($user1->id, $conversationid));",
          "1168:         $this->assertFalse(\\core_message\\api::can_delete_conversation($user2->id, $conversationid));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183:         \\core_message\\api::delete_conversation($user1->id, $user2->id);",
          "1185:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "1186:         $this->assertCount(4, $muas);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193:         $this->assertDebuggingCalled();",
          "1195:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "1196:         $this->assertCount(4, $muas);",
          "1198:         ksort($muas);",
          "1200:         $mua1 = array_shift($muas);",
          "1201:         $mua2 = array_shift($muas);",
          "1202:         $mua3 = array_shift($muas);",
          "1203:         $mua4 = array_shift($muas);",
          "1205:         $this->assertEquals($user1->id, $mua1->userid);",
          "1206:         $this->assertEquals($m1id, $mua1->messageid);",
          "1207:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua1->action);",
          "1209:         $this->assertEquals($user1->id, $mua2->userid);",
          "1210:         $this->assertEquals($m2id, $mua2->messageid);",
          "1211:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua2->action);",
          "1213:         $this->assertEquals($user1->id, $mua3->userid);",
          "1214:         $this->assertEquals($m3id, $mua3->messageid);",
          "1215:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua3->action);",
          "1217:         $this->assertEquals($user1->id, $mua4->userid);",
          "1218:         $this->assertEquals($m4id, $mua4->messageid);",
          "1219:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "1220:     }",
          "1225:     public function test_delete_conversation_by_id() {",
          "1226:         global $DB;",
          "1229:         $user1 = self::getDataGenerator()->create_user();",
          "1230:         $user2 = self::getDataGenerator()->create_user();",
          "1233:         $this->setUser($user1);",
          "1236:         $time = 1;",
          "1237:         $m1id = $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 1);",
          "1238:         $m2id = $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 2);",
          "1239:         $m3id = $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 3);",
          "1240:         $m4id = $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 4);",
          "1243:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "1244:         \\core_message\\api::delete_conversation_by_id($user1->id, $conversationid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2226:         $this->assertTrue(\\core_message\\api::does_contact_request_exist($user2->id, $user1->id));",
          "2227:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2293:     public function test_is_user_in_conversation() {",
          "2294:         $user1 = self::getDataGenerator()->create_user();",
          "2295:         $user2 = self::getDataGenerator()->create_user();",
          "2297:         $conversationid = \\core_message\\api::create_conversation_between_users([$user1->id, $user2->id]);",
          "2299:         $this->assertTrue(\\core_message\\api::is_user_in_conversation($user1->id, $conversationid));",
          "2300:     }",
          "2305:     public function test_is_user_in_conversation_when_not() {",
          "2306:         $user1 = self::getDataGenerator()->create_user();",
          "2307:         $user2 = self::getDataGenerator()->create_user();",
          "2308:         $user3 = self::getDataGenerator()->create_user();",
          "2310:         $conversationid = \\core_message\\api::create_conversation_between_users([$user1->id, $user2->id]);",
          "2312:         $this->assertFalse(\\core_message\\api::is_user_in_conversation($user3->id, $conversationid));",
          "2313:     }",
          "",
          "---------------"
        ],
        "message/tests/events_test.php||message/tests/events_test.php": [
          "File: message/tests/events_test.php -> message/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     public function test_message_deleted() {",
          "280:         $user1 = $this->getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "277:         global $DB;",
          "",
          "[Added Lines]",
          "277:         global $DB, $USER;",
          "279:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:         $this->assertInstanceOf('\\core\\event\\message_deleted', $event);",
          "299:         $this->assertEquals($mua->id, $event->objectid);",
          "300:         $this->assertEquals($messageid, $event->other['messageid']);",
          "305:         $messageid = $this->send_fake_message($user1, $user2);",
          "",
          "[Removed Lines]",
          "297:         $this->assertEquals($user1->id, $event->userid); // The user who deleted it.",
          "298:         $this->assertEquals($user2->id, $event->relateduserid);",
          "301:         $this->assertEquals($user1->id, $event->other['useridfrom']);",
          "302:         $this->assertEquals($user2->id, $event->other['useridto']);",
          "",
          "[Added Lines]",
          "299:         $this->assertEquals($USER->id, $event->userid); // The user who deleted it.",
          "300:         $this->assertEquals($user1->id, $event->relateduserid);",
          "304:         $this->setUser($user1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:         $this->assertInstanceOf('\\core\\event\\message_deleted', $event);",
          "323:         $this->assertEquals($mua->id, $event->objectid);",
          "324:         $this->assertEquals($messageid, $event->other['messageid']);",
          "327:     }",
          "",
          "[Removed Lines]",
          "321:         $this->assertEquals($user2->id, $event->userid);",
          "322:         $this->assertEquals($user1->id, $event->relateduserid);",
          "325:         $this->assertEquals($user1->id, $event->other['useridfrom']);",
          "326:         $this->assertEquals($user2->id, $event->other['useridto']);",
          "",
          "[Added Lines]",
          "323:         $this->assertEquals($user1->id, $event->userid);",
          "324:         $this->assertEquals($user2->id, $event->relateduserid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365:         $sink = $this->redirectEvents();",
          "366:         \\core_message\\api::delete_conversation($user1->id, $user2->id);",
          "367:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:         $this->assertDebuggingCalled();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:         $i = 1;",
          "385:         foreach ($events as $event) {",
          "388:             $messageid = $messages[$i - 1];",
          "390:             $this->assertInstanceOf('\\core\\event\\message_deleted', $event);",
          "392:             $this->assertEquals($muatest[$messageid]->id, $event->objectid);",
          "393:             $this->assertEquals($user1->id, $event->userid);",
          "395:             $this->assertEquals($messageid, $event->other['messageid']);",
          "399:             $i++;",
          "400:         }",
          "",
          "[Removed Lines]",
          "386:             $useridfromid = ($i % 2 == 0) ? $user2->id : $user1->id;",
          "387:             $useridtoid = ($i % 2 == 0) ? $user1->id : $user2->id;",
          "394:             $this->assertEquals($user2->id, $event->relateduserid);",
          "396:             $this->assertEquals($useridfromid, $event->other['useridfrom']);",
          "397:             $this->assertEquals($useridtoid, $event->other['useridto']);",
          "",
          "[Added Lines]",
          "393:             $this->assertEquals($user1->id, $event->relateduserid);",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1648:             $result = core_message_external::delete_message(-1, $user1->id);",
          "1649:             $this->fail('Exception expected due invalid messageid.');",
          "1650:         } catch (dml_missing_record_exception $e) {",
          "1652:         }",
          "",
          "[Removed Lines]",
          "1651:             $this->assertEquals('invalidrecordunknown', $e->errorcode);",
          "",
          "[Added Lines]",
          "1651:             $this->assertEquals('invalidrecord', $e->errorcode);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3445:         $user2 = self::getDataGenerator()->create_user();",
          "3446:         $user3 = self::getDataGenerator()->create_user();",
          "3449:         $this->setUser($user3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3449:         $time = time();",
          "3450:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3451:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3452:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3453:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3476:         core_message_external::delete_conversation($user1->id, $user2->id);",
          "3477:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3489:     public function test_delete_conversations_by_id() {",
          "3490:         global $DB;",
          "3492:         $this->resetAfterTest(true);",
          "3495:         $user1 = self::getDataGenerator()->create_user();",
          "3496:         $user2 = self::getDataGenerator()->create_user();",
          "3499:         $this->setUser($user1);",
          "3502:         $time = time();",
          "3503:         $m1id = $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3504:         $m2id = $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3505:         $m3id = $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3506:         $m4id = $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3508:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3511:         core_message_external::delete_conversations_by_id($user1->id, [$conversationid]);",
          "3513:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "3514:         $this->assertCount(4, $muas);",
          "3516:         ksort($muas);",
          "3518:         $mua1 = array_shift($muas);",
          "3519:         $mua2 = array_shift($muas);",
          "3520:         $mua3 = array_shift($muas);",
          "3521:         $mua4 = array_shift($muas);",
          "3523:         $this->assertEquals($user1->id, $mua1->userid);",
          "3524:         $this->assertEquals($m1id, $mua1->messageid);",
          "3525:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua1->action);",
          "3527:         $this->assertEquals($user1->id, $mua2->userid);",
          "3528:         $this->assertEquals($m2id, $mua2->messageid);",
          "3529:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua2->action);",
          "3531:         $this->assertEquals($user1->id, $mua3->userid);",
          "3532:         $this->assertEquals($m3id, $mua3->messageid);",
          "3533:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua3->action);",
          "3535:         $this->assertEquals($user1->id, $mua4->userid);",
          "3536:         $this->assertEquals($m4id, $mua4->messageid);",
          "3537:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "3538:     }",
          "3543:     public function test_delete_conversations_by_id_as_other_user() {",
          "3544:         global $DB;",
          "3546:         $this->resetAfterTest(true);",
          "3548:         $this->setAdminUser();",
          "3551:         $user1 = self::getDataGenerator()->create_user();",
          "3552:         $user2 = self::getDataGenerator()->create_user();",
          "3555:         $time = time();",
          "3556:         $m1id = $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3557:         $m2id = $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3558:         $m3id = $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3559:         $m4id = $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3561:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3564:         core_message_external::delete_conversations_by_id($user1->id, [$conversationid]);",
          "3566:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "3567:         $this->assertCount(4, $muas);",
          "3569:         ksort($muas);",
          "3571:         $mua1 = array_shift($muas);",
          "3572:         $mua2 = array_shift($muas);",
          "3573:         $mua3 = array_shift($muas);",
          "3574:         $mua4 = array_shift($muas);",
          "3576:         $this->assertEquals($user1->id, $mua1->userid);",
          "3577:         $this->assertEquals($m1id, $mua1->messageid);",
          "3578:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua1->action);",
          "3580:         $this->assertEquals($user1->id, $mua2->userid);",
          "3581:         $this->assertEquals($m2id, $mua2->messageid);",
          "3582:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua2->action);",
          "3584:         $this->assertEquals($user1->id, $mua3->userid);",
          "3585:         $this->assertEquals($m3id, $mua3->messageid);",
          "3586:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua3->action);",
          "3588:         $this->assertEquals($user1->id, $mua4->userid);",
          "3589:         $this->assertEquals($m4id, $mua4->messageid);",
          "3590:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "3591:     }",
          "3596:     public function test_delete_conversations_by_id_as_other_user_without_cap() {",
          "3597:         $this->resetAfterTest(true);",
          "3600:         $user1 = self::getDataGenerator()->create_user();",
          "3601:         $user2 = self::getDataGenerator()->create_user();",
          "3602:         $user3 = self::getDataGenerator()->create_user();",
          "3605:         $time = time();",
          "3606:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3607:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3608:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3609:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3611:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3614:         $this->setUser($user3);",
          "3617:         $this->expectException('moodle_exception');",
          "3618:         core_message_external::delete_conversations_by_id($user1->id, [$conversationid]);",
          "3619:     }",
          "3624:     public function test_delete_conversations_by_id_messaging_disabled() {",
          "3625:         global $CFG;",
          "3627:         $this->resetAfterTest(true);",
          "3630:         $user1 = self::getDataGenerator()->create_user();",
          "3631:         $user2 = self::getDataGenerator()->create_user();",
          "3634:         $time = time();",
          "3635:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3636:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3637:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3638:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3640:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3643:         $this->setUser($user1);",
          "3646:         $CFG->messaging = 0;",
          "3649:         $this->expectException('moodle_exception');",
          "3650:         core_message_external::delete_conversations_by_id($user1->id, [$conversationid]);",
          "3651:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "474dd887d005138bf9d01f08eac5e907422e22a2",
      "candidate_info": {
        "commit_hash": "474dd887d005138bf9d01f08eac5e907422e22a2",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/474dd887d005138bf9d01f08eac5e907422e22a2",
        "files": [
          "group/externallib.php",
          "group/tests/externallib_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-44137 group: add update_groups webservice function",
        "before_after_code_files": [
          "group/externallib.php||group/externallib.php",
          "group/tests/externallib_test.php||group/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "group/externallib.php||group/externallib.php": [
          "File: group/externallib.php -> group/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1466:         );",
          "1467:     }",
          "1469: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1475:     public static function update_groups_parameters() {",
          "1476:         return new external_function_parameters(",
          "1477:             array(",
          "1478:                 'groups' => new external_multiple_structure(",
          "1479:                     new external_single_structure(",
          "1480:                         array(",
          "1481:                             'id' => new external_value(PARAM_INT, 'ID of the group'),",
          "1482:                             'name' => new external_value(PARAM_TEXT, 'multilang compatible name, course unique'),",
          "1483:                             'description' => new external_value(PARAM_RAW, 'group description text', VALUE_OPTIONAL),",
          "1484:                             'descriptionformat' => new external_format_value('description', VALUE_DEFAULT),",
          "1485:                             'enrolmentkey' => new external_value(PARAM_RAW, 'group enrol secret phrase', VALUE_OPTIONAL),",
          "1486:                             'idnumber' => new external_value(PARAM_RAW, 'id number', VALUE_OPTIONAL)",
          "1487:                         )",
          "1488:                     ), 'List of group objects. A group is found by the id, then all other details provided will be updated.'",
          "1489:                 )",
          "1490:             )",
          "1491:         );",
          "1492:     }",
          "1501:     public static function update_groups($groups) {",
          "1502:         global $CFG, $DB;",
          "1503:         require_once(\"$CFG->dirroot/group/lib.php\");",
          "1505:         $params = self::validate_parameters(self::update_groups_parameters(), array('groups' => $groups));",
          "1507:         $transaction = $DB->start_delegated_transaction();",
          "1509:         foreach ($params['groups'] as $group) {",
          "1510:             $group = (object)$group;",
          "1512:             if (trim($group->name) == '') {",
          "1513:                 throw new invalid_parameter_exception('Invalid group name');",
          "1514:             }",
          "1516:             if (! $currentgroup = $DB->get_record('groups', array('id' => $group->id))) {",
          "1517:                 throw new invalid_parameter_exception(\"Group $group->id does not exist\");",
          "1518:             }",
          "1521:             if ($group->name != $currentgroup->name and",
          "1522:                     $DB->get_record('groups', array('courseid' => $currentgroup->courseid, 'name' => $group->name))) {",
          "1523:                 throw new invalid_parameter_exception('A different group with the same name already exists in the course');",
          "1524:             }",
          "1526:             $group->courseid = $currentgroup->courseid;",
          "1529:             $context = context_course::instance($group->courseid);",
          "1530:             try {",
          "1531:                 self::validate_context($context);",
          "1532:             } catch (Exception $e) {",
          "1533:                 $exceptionparam = new sdtClass();",
          "1534:                 $exceptionparam->message = $e->getMessage();",
          "1535:                 $exceptionparam->courseid = $group->courseid;",
          "1536:                 throw new moodle_exception('errorcoursecontextnotvalid', 'webservice', '', $exceptionparam);",
          "1537:             }",
          "1538:             require_capability('moodle/course:managegroups', $context);",
          "1540:             if (!empty($group->description)) {",
          "1541:                 $group->descriptionformat = external_validate_format($group->descriptionformat);",
          "1542:             }",
          "1544:             groups_update_group($group);",
          "1545:         }",
          "1547:         $transaction->allow_commit();",
          "1549:         return null;",
          "1550:     }",
          "1558:     public static function update_groups_returns() {",
          "1559:         return null;",
          "1560:     }",
          "",
          "---------------"
        ],
        "group/tests/externallib_test.php||group/tests/externallib_test.php": [
          "File: group/tests/externallib_test.php -> group/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         $froups = core_group_external::create_groups(array($group4));",
          "116:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     public function test_update_groups() {",
          "124:         global $DB;",
          "126:         $this->resetAfterTest(true);",
          "128:         $course = self::getDataGenerator()->create_course();",
          "130:         $group1data = array();",
          "131:         $group1data['courseid'] = $course->id;",
          "132:         $group1data['name'] = 'Group Test 1';",
          "133:         $group1data['description'] = 'Group Test 1 description';",
          "134:         $group1data['descriptionformat'] = FORMAT_MOODLE;",
          "135:         $group1data['enrolmentkey'] = 'Test group enrol secret phrase';",
          "136:         $group1data['idnumber'] = 'TEST1';",
          "137:         $group2data = array();",
          "138:         $group2data['courseid'] = $course->id;",
          "139:         $group2data['name'] = 'Group Test 2';",
          "140:         $group2data['description'] = 'Group Test 2 description';",
          "141:         $group2data['idnumber'] = 'TEST2';",
          "144:         $context = context_course::instance($course->id);",
          "145:         $roleid = $this->assignUserCapability('moodle/course:managegroups', $context->id);",
          "146:         $this->assignUserCapability('moodle/course:view', $context->id, $roleid);",
          "149:         $group1 = self::getDataGenerator()->create_group($group1data);",
          "150:         $group2 = self::getDataGenerator()->create_group($group2data);",
          "152:         $group1data['id'] = $group1->id;",
          "153:         unset($group1data['courseid']);",
          "154:         $group2data['id'] = $group2->id;",
          "155:         unset($group2data['courseid']);",
          "158:         $group1data['idnumber'] = 'CHANGED';",
          "159:         core_group_external::update_groups(array($group1data));",
          "160:         $group2data['description'] = 'Group Test 2 description CHANGED';",
          "161:         core_group_external::update_groups(array($group2data));",
          "163:         foreach ([$group1, $group2] as $group) {",
          "164:             $dbgroup = $DB->get_record('groups', array('id' => $group->id), '*', MUST_EXIST);",
          "165:             switch ($dbgroup->name) {",
          "166:                 case $group1data['name']:",
          "167:                     $this->assertEquals($dbgroup->idnumber, $group1data['idnumber']);",
          "168:                     $groupdescription = $group1data['description'];",
          "169:                     break;",
          "170:                 case $group2data['name']:",
          "171:                     $this->assertEquals($dbgroup->idnumber, $group2data['idnumber']);",
          "172:                     $groupdescription = $group2data['description'];",
          "173:                     break;",
          "174:                 default:",
          "175:                     throw new moodle_exception('unknowngroupname');",
          "176:                     break;",
          "177:             }",
          "178:             $this->assertEquals($dbgroup->description, $groupdescription);",
          "179:         }",
          "182:         $group1data['idnumber'] = 'TEST2';",
          "183:         try {",
          "184:             $groups = core_group_external::update_groups(array($group1data));",
          "185:             $this->fail('Exception expected due to already existing idnumber.');",
          "186:         } catch (moodle_exception $e) {",
          "187:             $this->assertInstanceOf('moodle_exception', $e);",
          "188:             $this->assertEquals(get_string('idnumbertaken', 'error'), $e->getMessage());",
          "189:         }",
          "192:         $group1data['idnumber'] = 'TEST1';",
          "193:         $this->unassignUserCapability('moodle/course:managegroups', $context->id, $roleid);",
          "194:         $groups = core_group_external::update_groups(array($group1data));",
          "195:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:         'description' => 'Updates existing groupings',",
          "848:         'type' => 'write',",
          "849:     ),",
          "850:     'core_message_block_user' => array(",
          "851:         'classname' => 'core_message_external',",
          "852:         'methodname' => 'block_user',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:     'core_group_update_groups' => array(",
          "851:         'classname' => 'core_group_external',",
          "852:         'methodname' => 'update_groups',",
          "853:         'classpath' => 'group/externallib.php',",
          "854:         'description' => 'Updates existing groups.',",
          "855:         'type' => 'write',",
          "856:         'capabilities' => 'moodle/course:managegroups'",
          "857:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018103100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018103100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb4f59f80f0d4ec783b3d705e5c0b833e8b225b5",
      "candidate_info": {
        "commit_hash": "bb4f59f80f0d4ec783b3d705e5c0b833e8b225b5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bb4f59f80f0d4ec783b3d705e5c0b833e8b225b5",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-66609 core_h5p: Creating new H5P tables",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3638:         upgrade_main_savepoint(true, 2019101800.02);",
          "3639:     }",
          "3641:     return true;",
          "3642: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3641:     if ($oldversion < 2019102500.01) {",
          "3643:         $table = new xmldb_table('h5p_libraries');",
          "3646:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "3647:         $table->add_field('machinename', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "3648:         $table->add_field('title', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "3649:         $table->add_field('majorversion', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);",
          "3650:         $table->add_field('minorversion', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);",
          "3651:         $table->add_field('patchversion', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);",
          "3652:         $table->add_field('runnable', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, null);",
          "3653:         $table->add_field('fullscreen', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0');",
          "3654:         $table->add_field('embedtypes', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "3655:         $table->add_field('preloadedjs', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "3656:         $table->add_field('preloadedcss', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "3657:         $table->add_field('droplibrarycss', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "3658:         $table->add_field('semantics', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "3659:         $table->add_field('addto', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "3662:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "3665:         $table->add_index('machinemajorminorpatch', XMLDB_INDEX_NOTUNIQUE,",
          "3666:             ['machinename', 'majorversion', 'minorversion', 'patchversion', 'runnable']);",
          "3669:         if (!$dbman->table_exists($table)) {",
          "3670:             $dbman->create_table($table);",
          "3671:         }",
          "3674:         $table = new xmldb_table('h5p_library_dependencies');",
          "3677:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "3678:         $table->add_field('libraryid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3679:         $table->add_field('requiredlibraryid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3680:         $table->add_field('dependencytype', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "3683:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "3684:         $table->add_key('libraryid', XMLDB_KEY_FOREIGN, ['libraryid'], 'h5p_libraries', ['id']);",
          "3685:         $table->add_key('requiredlibraryid', XMLDB_KEY_FOREIGN, ['requiredlibraryid'], 'h5p_libraries', ['id']);",
          "3688:         if (!$dbman->table_exists($table)) {",
          "3689:             $dbman->create_table($table);",
          "3690:         }",
          "3693:         $table = new xmldb_table('h5p');",
          "3696:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "3697:         $table->add_field('jsoncontent', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);",
          "3698:         $table->add_field('mainlibraryid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3699:         $table->add_field('displayoptions', XMLDB_TYPE_INTEGER, '4', null, null, null, null);",
          "3700:         $table->add_field('pathnamehash', XMLDB_TYPE_CHAR, '40', null, XMLDB_NOTNULL, null, null);",
          "3701:         $table->add_field('contenthash', XMLDB_TYPE_CHAR, '40', null, XMLDB_NOTNULL, null, null);",
          "3702:         $table->add_field('filtered', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "3703:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "3704:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "3707:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "3708:         $table->add_key('mainlibraryid', XMLDB_KEY_FOREIGN, ['mainlibraryid'], 'h5p_libraries', ['id']);",
          "3711:         if (!$dbman->table_exists($table)) {",
          "3712:             $dbman->create_table($table);",
          "3713:         }",
          "3716:         $table = new xmldb_table('h5p_contents_libraries');",
          "3719:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "3720:         $table->add_field('h5pid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3721:         $table->add_field('libraryid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3722:         $table->add_field('dependencytype', XMLDB_TYPE_CHAR, '10', null, XMLDB_NOTNULL, null, null);",
          "3723:         $table->add_field('dropcss', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, null);",
          "3724:         $table->add_field('weight', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3727:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "3728:         $table->add_key('h5pid', XMLDB_KEY_FOREIGN, ['h5pid'], 'h5p', ['id']);",
          "3729:         $table->add_key('libraryid', XMLDB_KEY_FOREIGN, ['libraryid'], 'h5p_libraries', ['id']);",
          "3732:         if (!$dbman->table_exists($table)) {",
          "3733:             $dbman->create_table($table);",
          "3734:         }",
          "3737:         $table = new xmldb_table('h5p_libraries_cachedassets');",
          "3740:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "3741:         $table->add_field('libraryid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "3742:         $table->add_field('hash', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "3745:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "3746:         $table->add_key('libraryid', XMLDB_KEY_FOREIGN, ['libraryid'], 'h5p_libraries_cachedassets', ['id']);",
          "3749:         if (!$dbman->table_exists($table)) {",
          "3750:             $dbman->create_table($table);",
          "3751:         }",
          "3754:         upgrade_main_savepoint(true, 2019102500.01);",
          "3755:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019102500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019102500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}