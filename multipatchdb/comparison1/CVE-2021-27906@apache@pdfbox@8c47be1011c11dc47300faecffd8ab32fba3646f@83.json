{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f266c39525ebd3488caa1423ee478779591359c7",
      "candidate_info": {
        "commit_hash": "f266c39525ebd3488caa1423ee478779591359c7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f266c39525ebd3488caa1423ee478779591359c7",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java",
          "fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java"
        ],
        "message": "PDFBOX-4892: rename methods to avoid confusion\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890478 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java",
          "fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java -> fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         }",
          "243:         else if (\"closepath\".equals(name))",
          "244:         {",
          "246:         }",
          "247:         else if (\"sbw\".equals(name))",
          "248:         {",
          "",
          "[Removed Lines]",
          "245:             closepath();",
          "",
          "[Added Lines]",
          "245:             closeCharString1Path();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:     {",
          "464:         if (path.getCurrentPoint() == null)",
          "465:         {",
          "",
          "[Removed Lines]",
          "462:     private void closepath()",
          "",
          "[Added Lines]",
          "462:     private void closeCharString1Path()",
          "",
          "---------------"
        ],
        "fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java -> fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         else if (\"endchar\".equals(name))",
          "134:         {",
          "135:             numbers = clearStack(numbers, numbers.size() == 5 || numbers.size() == 1);",
          "137:             if (numbers.size() == 4)",
          "138:             {",
          "",
          "[Removed Lines]",
          "136:             closePath();",
          "",
          "[Added Lines]",
          "136:             closeCharString2Path();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     {",
          "289:         if (pathCount > 0)",
          "290:         {",
          "292:         }",
          "293:         pathCount++;",
          "294:     }",
          "297:     {",
          "298:         CharStringCommand command = pathCount > 0 ? (CharStringCommand) type1Sequence",
          "299:                 .get(type1Sequence.size() - 1)",
          "",
          "[Removed Lines]",
          "291:             closePath();",
          "296:     private void closePath()",
          "",
          "[Added Lines]",
          "291:             closeCharString2Path();",
          "296:     private void closeCharString2Path()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc2c9ac3c1d421176c452d9f006541ad9fa64c40",
      "candidate_info": {
        "commit_hash": "fc2c9ac3c1d421176c452d9f006541ad9fa64c40",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fc2c9ac3c1d421176c452d9f006541ad9fa64c40",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-5157: rename variable\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888696 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:         doc.close();",
          "313:         String name = inFile.getName();",
          "314:         String substring = name.substring(0, name.lastIndexOf('.'));",
          "317:         AddValidationInformation addValidationInformation = new AddValidationInformation();",
          "318:         addValidationInformation.validateSignature(inFile, outFile);",
          "319:     }",
          "",
          "[Removed Lines]",
          "312:         File inFile = new File(OUT_DIR, fileName);",
          "316:         File outFile = new File(OUT_DIR, substring + \"_LTV.pdf\");",
          "",
          "[Added Lines]",
          "312:         File inFile = new File(outDir, fileName);",
          "316:         File outFile = new File(outDir, substring + \"_LTV.pdf\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6286b7ee1e104068acfdf11e537b8d7b1900858b",
      "candidate_info": {
        "commit_hash": "6286b7ee1e104068acfdf11e537b8d7b1900858b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6286b7ee1e104068acfdf11e537b8d7b1900858b",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ],
        "message": "PDFBOX-4971: parametrize DocumentCreator class, add a raw view for content streams\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882070 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     private final JPanel panel;",
          "116:     private final HexView hexView;",
          "117:     private final JTabbedPane tabbedPane;",
          "119:     private final Stream stream;",
          "120:     private ToolTipController tTController;",
          "121:     private PDResources resources;",
          "",
          "[Removed Lines]",
          "118:     private final StreamPaneView view;",
          "",
          "[Added Lines]",
          "118:     private final StreamPaneView rawView;",
          "119:     private final StreamPaneView niceView;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         panel.setPreferredSize(new Dimension(300, 500));",
          "147:         panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));",
          "150:         hexView = new HexView();",
          "152:         if (stream.isImage())",
          "153:         {",
          "",
          "[Removed Lines]",
          "149:         view = new StreamPaneView();",
          "",
          "[Added Lines]",
          "150:         rawView = new StreamPaneView();",
          "152:         if (isContentStream)",
          "153:         {",
          "154:             niceView = new StreamPaneView();",
          "155:         }",
          "156:         else",
          "157:         {",
          "158:             niceView = null;",
          "159:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:         tabbedPane = new JTabbedPane();",
          "164:         if (stream.isImage())",
          "165:         {",
          "167:         }",
          "168:         else",
          "169:         {",
          "171:             tabbedPane.add(\"Hex view\", hexView.getPane());",
          "172:         }",
          "",
          "[Removed Lines]",
          "166:             tabbedPane.add(\"Image view\", view.getStreamPanel());",
          "170:             tabbedPane.add(\"Text view\", view.getStreamPanel());",
          "",
          "[Added Lines]",
          "175:             tabbedPane.add(\"Image view\", rawView.getStreamPanel());",
          "176:         }",
          "177:         else if (isContentStream)",
          "178:         {",
          "179:             tabbedPane.add(\"Nice view\", niceView.getStreamPanel());",
          "180:             tabbedPane.add(\"Raw view\", rawView.getStreamPanel());",
          "181:             tabbedPane.add(\"Hex view\", hexView.getPane());",
          "185:             tabbedPane.add(\"Text view\", rawView.getStreamPanel());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:                 {",
          "206:                     requestImageShowing();",
          "207:                     tabbedPane.removeAll();",
          "209:                     return;",
          "210:                 }",
          "211:                 tabbedPane.removeAll();",
          "214:                 requestStreamText(currentFilter);",
          "215:             }",
          "216:             catch (IOException e)",
          "",
          "[Removed Lines]",
          "208:                     tabbedPane.add(\"Image view\", view.getStreamPanel());",
          "212:                 tabbedPane.add(\"Text view\", view.getStreamPanel());",
          "213:                 tabbedPane.add(\"Hex view\", hexView.getPane());",
          "",
          "[Added Lines]",
          "223:                     tabbedPane.add(\"Image view\", rawView.getStreamPanel());",
          "227:                 if (isContentStream)",
          "228:                 {",
          "229:                     tabbedPane.add(\"Nice view\", rawView.getStreamPanel());",
          "230:                     tabbedPane.add(\"Raw view\", niceView.getStreamPanel());",
          "231:                     tabbedPane.add(\"Hex view\", hexView.getPane());",
          "232:                 }",
          "233:                 else",
          "234:                 {",
          "235:                     tabbedPane.add(\"Text view\", rawView.getStreamPanel());",
          "236:                     tabbedPane.add(\"Hex view\", hexView.getPane());",
          "237:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:                 JOptionPane.showMessageDialog(panel, \"image not available (filter missing?)\");",
          "235:                 return;",
          "236:             }",
          "238:         }",
          "239:     }",
          "241:     private void requestStreamText(String command) throws IOException",
          "242:     {",
          "244:         synchronized (stream)",
          "245:         {",
          "246:             InputStream is = stream.getStream(command);",
          "",
          "[Removed Lines]",
          "237:             view.showStreamImage(image);",
          "243:         new DocumentCreator(command).execute();",
          "",
          "[Added Lines]",
          "261:             rawView.showStreamImage(image);",
          "267:         new DocumentCreator(rawView, command, false).execute();",
          "268:         if (niceView != null)",
          "269:         {",
          "270:             new DocumentCreator(niceView, command, true).execute();",
          "271:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:     private final class DocumentCreator extends SwingWorker<StyledDocument, Integer>",
          "260:     {",
          "261:         private final String filterKey;",
          "262:         private int indent;",
          "263:         private boolean needIndent;",
          "266:         {",
          "267:             this.filterKey = filterKey;",
          "268:         }",
          "270:         @Override",
          "",
          "[Removed Lines]",
          "265:         private DocumentCreator(String filterKey)",
          "",
          "[Added Lines]",
          "289:         private final StreamPaneView targetView;",
          "291:         private final boolean nice;",
          "295:         private DocumentCreator(StreamPaneView targetView, String filterKey, boolean nice)",
          "297:             this.targetView = targetView;",
          "299:             this.nice = nice;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "279:                     encoding = \"UTF-8\";",
          "280:                 }",
          "281:                 InputStream inputStream = stream.getStream(filterKey);",
          "283:                 {",
          "284:                     StyledDocument document = getContentStreamDocument(inputStream);",
          "285:                     if (document != null)",
          "286:                     {",
          "287:                         return document;",
          "288:                     }",
          "290:                 }",
          "291:                 return getDocument(inputStream, encoding);",
          "292:             }",
          "",
          "[Removed Lines]",
          "282:                 if (isContentStream && Stream.UNFILTERED.equals(filterKey))",
          "289:                     return getDocument(stream.getStream(filterKey), encoding);",
          "",
          "[Added Lines]",
          "314:                 if (nice && Stream.UNFILTERED.equals(filterKey))",
          "321:                     return getDocument(inputStream, encoding);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:         {",
          "298:             try",
          "299:             {",
          "301:             }",
          "302:             catch (InterruptedException e)",
          "303:             {",
          "",
          "[Removed Lines]",
          "300:                 view.showStreamText(get(), tTController);",
          "",
          "[Added Lines]",
          "332:                 targetView.showStreamText(get(), tTController);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "330:             if (inputStream != null)",
          "331:             {",
          "332:                 String data = getStringOfStream(inputStream, encoding);",
          "333:                 try",
          "334:                 {",
          "335:                     docu.insertString(0, data, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:                 if (data != null)",
          "370:                 {",
          "371:                     data = data.replace(\"\\r\\n\", \"\\n\").replace('\\r', '\\n');",
          "372:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fad4c483e84df2cc0a8a0299aed6b3ca2efa4d38",
      "candidate_info": {
        "commit_hash": "fad4c483e84df2cc0a8a0299aed6b3ca2efa4d38",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fad4c483e84df2cc0a8a0299aed6b3ca2efa4d38",
        "files": [
          "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java"
        ],
        "message": "PDFBOX-4847: Sonar fix: move private methods to inner class\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881327 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java||tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java||tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java": [
          "File: tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java -> tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:                 }",
          "374:             }",
          "375:         }",
          "392:         {",
          "411:             {",
          "416:                 {",
          "420:                     {",
          "424:                     }",
          "429:                 }",
          "439:                 {",
          "450:                     {",
          "452:                     }",
          "453:                 }",
          "459:                         (PDDeviceGray.INSTANCE.getName().equals(colorSpaceName) ||",
          "460:                          PDDeviceRGB.INSTANCE.getName().equals(colorSpaceName)))",
          "473:                     {",
          "475:                     }",
          "476:                 }",
          "482:                 {",
          "484:                 }",
          "493:                 {",
          "495:                     {",
          "497:                     }",
          "498:                 }",
          "500:             }",
          "502:             {",
          "505:                 {",
          "507:                 }",
          "508:             }",
          "510:         }",
          "512:         {",
          "514:             {",
          "516:             }",
          "517:         }",
          "518:     }",
          "529: }",
          "",
          "[Removed Lines]",
          "376:     }",
          "387:     private void write2file(PDImage pdImage, String prefix, boolean directJPEG,",
          "388:             boolean noColorConvert) throws IOException",
          "389:     {",
          "390:         String suffix = pdImage.getSuffix();",
          "391:         if (suffix == null || \"jb2\".equals(suffix))",
          "393:             suffix = \"png\";",
          "394:         }",
          "395:         else if (\"jpx\".equals(suffix))",
          "396:         {",
          "398:             suffix = \"jp2\";",
          "399:         }",
          "401:         if (hasMasks(pdImage))",
          "402:         {",
          "404:             suffix = \"png\";",
          "405:         }",
          "407:         FileOutputStream out = null;",
          "408:         try",
          "409:         {",
          "410:             if (noColorConvert)",
          "414:                 BufferedImage image = pdImage.getRawImage();",
          "415:                 if (image != null)",
          "417:                     int elements = image.getRaster().getNumDataElements();",
          "418:                     suffix = \"png\";",
          "419:                     if (elements > 3)",
          "423:                         suffix = \"tiff\";",
          "425:                     out = new FileOutputStream(prefix + \".\" + suffix);",
          "426:                     ImageIOUtil.writeImage(image, suffix, out);",
          "427:                     out.close();",
          "428:                     return;",
          "430:             }",
          "432:             out = new FileOutputStream(prefix + \".\" + suffix);",
          "433:             if (\"jpg\".equals(suffix))",
          "434:             {",
          "435:                 String colorSpaceName = pdImage.getColorSpace().getName();",
          "436:                 if (directJPEG ||",
          "437:                         (PDDeviceGray.INSTANCE.getName().equals(colorSpaceName) ||",
          "438:                          PDDeviceRGB.INSTANCE.getName().equals(colorSpaceName)))",
          "441:                     InputStream data = pdImage.createInputStream(JPEG);",
          "442:                     IOUtils.copy(data, out);",
          "443:                     IOUtils.closeQuietly(data);",
          "444:                 }",
          "445:                 else",
          "446:                 {",
          "448:                     BufferedImage image = pdImage.getImage();",
          "449:                     if (image != null)",
          "451:                         ImageIOUtil.writeImage(image, suffix, out);",
          "454:             }",
          "455:             else if (\"jp2\".equals(suffix))",
          "456:             {",
          "457:                 String colorSpaceName = pdImage.getColorSpace().getName();",
          "458:                 if (directJPEG ||",
          "461:                 {",
          "463:                     InputStream data = pdImage.createInputStream(",
          "464:                             Arrays.asList(COSName.JPX_DECODE.getName()));",
          "465:                     IOUtils.copy(data, out);",
          "466:                     IOUtils.closeQuietly(data);",
          "467:                 }",
          "468:                 else",
          "469:                 {",
          "471:                     BufferedImage image = pdImage.getImage();",
          "472:                     if (image != null)",
          "474:                         ImageIOUtil.writeImage(image, \"jpeg2000\", out);",
          "477:             }",
          "478:             else if (\"tiff\".equals(suffix) && pdImage.getColorSpace().equals(PDDeviceGray.INSTANCE))",
          "479:             {",
          "480:                 BufferedImage image = pdImage.getImage();",
          "481:                 if (image == null)",
          "483:                     return;",
          "488:                 int w = image.getWidth();",
          "489:                 int h = image.getHeight();",
          "490:                 BufferedImage bitonalImage = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_BINARY);",
          "492:                 for (int y = 0; y < h; y++)",
          "494:                     for (int x = 0; x < w; x++)",
          "496:                         bitonalImage.setRGB(x, y, image.getRGB(x, y));",
          "499:                 ImageIOUtil.writeImage(bitonalImage, suffix, out);",
          "501:             else",
          "503:                 BufferedImage image = pdImage.getImage();",
          "504:                 if (image != null)",
          "506:                     ImageIOUtil.writeImage(image, suffix, out);",
          "509:             out.flush();",
          "511:         finally",
          "513:             if (out != null)",
          "515:                 out.close();",
          "520:     private boolean hasMasks(PDImage pdImage) throws IOException",
          "521:     {",
          "522:         if (pdImage instanceof PDImageXObject)",
          "523:         {",
          "524:             PDImageXObject ximg = (PDImageXObject) pdImage;",
          "525:             return ximg.getMask() != null || ximg.getSoftMask() != null;",
          "526:         }",
          "527:         return false;",
          "528:     }",
          "",
          "[Added Lines]",
          "389:         private void write2file(PDImage pdImage, String prefix, boolean directJPEG,",
          "390:                 boolean noColorConvert) throws IOException",
          "392:             String suffix = pdImage.getSuffix();",
          "393:             if (suffix == null || \"jb2\".equals(suffix))",
          "394:             {",
          "395:                 suffix = \"png\";",
          "396:             }",
          "397:             else if (\"jpx\".equals(suffix))",
          "398:             {",
          "400:                 suffix = \"jp2\";",
          "401:             }",
          "403:             if (hasMasks(pdImage))",
          "404:             {",
          "406:                 suffix = \"png\";",
          "407:             }",
          "409:             FileOutputStream out = null;",
          "410:             try",
          "412:                 if (noColorConvert)",
          "416:                     BufferedImage image = pdImage.getRawImage();",
          "417:                     if (image != null)",
          "419:                         int elements = image.getRaster().getNumDataElements();",
          "420:                         suffix = \"png\";",
          "421:                         if (elements > 3)",
          "422:                         {",
          "425:                             suffix = \"tiff\";",
          "426:                         }",
          "427:                         out = new FileOutputStream(prefix + \".\" + suffix);",
          "428:                         ImageIOUtil.writeImage(image, suffix, out);",
          "429:                         out.flush();",
          "430:                         out.close();",
          "431:                         return;",
          "435:                 out = new FileOutputStream(prefix + \".\" + suffix);",
          "436:                 if (\"jpg\".equals(suffix))",
          "438:                     String colorSpaceName = pdImage.getColorSpace().getName();",
          "439:                     if (directJPEG",
          "440:                             || (PDDeviceGray.INSTANCE.getName().equals(colorSpaceName)",
          "441:                             || PDDeviceRGB.INSTANCE.getName().equals(colorSpaceName)))",
          "444:                         InputStream data = pdImage.createInputStream(JPEG);",
          "445:                         IOUtils.copy(data, out);",
          "446:                         IOUtils.closeQuietly(data);",
          "447:                     }",
          "448:                     else",
          "449:                     {",
          "451:                         BufferedImage image = pdImage.getImage();",
          "452:                         if (image != null)",
          "453:                         {",
          "454:                             ImageIOUtil.writeImage(image, suffix, out);",
          "455:                         }",
          "458:                 else if (\"jp2\".equals(suffix))",
          "459:                 {",
          "460:                     String colorSpaceName = pdImage.getColorSpace().getName();",
          "461:                     if (directJPEG ||",
          "466:                         InputStream data = pdImage.createInputStream(",
          "467:                                 Arrays.asList(COSName.JPX_DECODE.getName()));",
          "468:                         IOUtils.copy(data, out);",
          "469:                         IOUtils.closeQuietly(data);",
          "470:                     }",
          "471:                     else",
          "472:                     {",
          "474:                         BufferedImage image = pdImage.getImage();",
          "475:                         if (image != null)",
          "476:                         {",
          "477:                             ImageIOUtil.writeImage(image, \"jpeg2000\", out);",
          "478:                         }",
          "481:                 else if (\"tiff\".equals(suffix) && pdImage.getColorSpace().equals(PDDeviceGray.INSTANCE))",
          "483:                     BufferedImage image = pdImage.getImage();",
          "484:                     if (image == null)",
          "485:                     {",
          "486:                         return;",
          "487:                     }",
          "491:                     int w = image.getWidth();",
          "492:                     int h = image.getHeight();",
          "493:                     BufferedImage bitonalImage = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_BINARY);",
          "495:                     for (int y = 0; y < h; y++)",
          "496:                     {",
          "497:                         for (int x = 0; x < w; x++)",
          "498:                         {",
          "499:                             bitonalImage.setRGB(x, y, image.getRGB(x, y));",
          "500:                         }",
          "501:                     }",
          "502:                     ImageIOUtil.writeImage(bitonalImage, suffix, out);",
          "504:                 else",
          "506:                     BufferedImage image = pdImage.getImage();",
          "507:                     if (image != null)",
          "509:                         ImageIOUtil.writeImage(image, suffix, out);",
          "512:                 out.flush();",
          "514:             finally",
          "516:                 if (out != null)",
          "518:                     out.close();",
          "523:         private boolean hasMasks(PDImage pdImage) throws IOException",
          "525:             if (pdImage instanceof PDImageXObject)",
          "527:                 PDImageXObject ximg = (PDImageXObject) pdImage;",
          "528:                 return ximg.getMask() != null || ximg.getSoftMask() != null;",
          "530:             return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "091c36321665fc80663c1a2c924683986210ffc4",
      "candidate_info": {
        "commit_hash": "091c36321665fc80663c1a2c924683986210ffc4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/091c36321665fc80663c1a2c924683986210ffc4",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java"
        ],
        "message": "PDFBOX-4892: performance improvements, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888627 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java -> pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:         Deque<PDGraphicsState> savedStack = saveGraphicsStack();",
          "225:         Matrix parentMatrix = initialMatrix;",
          "242:         clipToRect(group.getBBox());",
          "",
          "[Removed Lines]",
          "228:         initialMatrix = getGraphicsState().getCurrentTransformationMatrix().clone();",
          "231:         getGraphicsState().getCurrentTransformationMatrix().concatenate(group.getMatrix());",
          "236:         getGraphicsState().setBlendMode(BlendMode.NORMAL);",
          "237:         getGraphicsState().setAlphaConstant(1);",
          "238:         getGraphicsState().setNonStrokeAlphaConstant(1);",
          "239:         getGraphicsState().setSoftMask(null);",
          "",
          "[Added Lines]",
          "226:         PDGraphicsState graphicsState = getGraphicsState();",
          "229:         initialMatrix = graphicsState.getCurrentTransformationMatrix().clone();",
          "232:         graphicsState.getCurrentTransformationMatrix().concatenate(group.getMatrix());",
          "237:         graphicsState.setBlendMode(BlendMode.NORMAL);",
          "238:         graphicsState.setAlphaConstant(1);",
          "239:         graphicsState.setNonStrokeAlphaConstant(1);",
          "240:         graphicsState.setSoftMask(null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:         PDRectangle bbox = appearance.getBBox();",
          "309:         PDRectangle rect = annotation.getRectangle();",
          "313:         if (rect != null && rect.getWidth() > 0 && rect.getHeight() > 0 &&",
          "314:             bbox != null && bbox.getWidth() > 0 && bbox.getHeight() > 0)",
          "315:         {",
          "317:             Rectangle2D transformedBox = bbox.transform(matrix).getBounds2D();",
          "",
          "[Removed Lines]",
          "310:         Matrix matrix = appearance.getMatrix();",
          "",
          "[Added Lines]",
          "316:             Matrix matrix = appearance.getMatrix();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:         PDRectangle rect = new PDRectangle((float)bbox.getX(), (float)bbox.getY(),",
          "389:                 (float)bbox.getWidth(), (float)bbox.getHeight());",
          "390:         graphicsStack.push(new PDGraphicsState(rect));",
          "393:         if (colorSpace != null)",
          "394:         {",
          "395:             color = new PDColor(color.getComponents(), colorSpace);",
          "400:         }",
          "406:         clipToRect(tilingPattern.getBBox());",
          "",
          "[Removed Lines]",
          "396:             getGraphicsState().setNonStrokingColorSpace(colorSpace);",
          "397:             getGraphicsState().setNonStrokingColor(color);",
          "398:             getGraphicsState().setStrokingColorSpace(colorSpace);",
          "399:             getGraphicsState().setStrokingColor(color);",
          "403:         getGraphicsState().getCurrentTransformationMatrix().concatenate(patternMatrix);",
          "",
          "[Added Lines]",
          "393:         PDGraphicsState graphicsState = getGraphicsState();",
          "399:             graphicsState.setNonStrokingColorSpace(colorSpace);",
          "400:             graphicsState.setNonStrokingColor(color);",
          "401:             graphicsState.setStrokingColorSpace(colorSpace);",
          "402:             graphicsState.setStrokingColor(color);",
          "406:         graphicsState.getCurrentTransformationMatrix().concatenate(patternMatrix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:         PDResources parent = pushResources(contentStream);",
          "476:         Deque<PDGraphicsState> savedStack = saveGraphicsStack();",
          "477:         Matrix parentMatrix = initialMatrix;",
          "486:         PDRectangle bbox = contentStream.getBBox();",
          "",
          "[Removed Lines]",
          "480:         getGraphicsState().getCurrentTransformationMatrix().concatenate(contentStream.getMatrix());",
          "483:         initialMatrix = getGraphicsState().getCurrentTransformationMatrix().clone();",
          "",
          "[Added Lines]",
          "481:         PDGraphicsState graphicsState = getGraphicsState();",
          "484:         graphicsState.getCurrentTransformationMatrix().concatenate(contentStream.getMatrix());",
          "487:         initialMatrix = graphicsState.getCurrentTransformationMatrix().clone();",
          "",
          "---------------"
        ]
      }
    }
  ]
}