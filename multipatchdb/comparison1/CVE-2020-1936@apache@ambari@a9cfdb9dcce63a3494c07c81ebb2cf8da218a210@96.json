{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7407f75dbf9522d9dcb9a0168edec5ce351dc89e",
      "candidate_info": {
        "commit_hash": "7407f75dbf9522d9dcb9a0168edec5ce351dc89e",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7407f75dbf9522d9dcb9a0168edec5ce351dc89e",
        "files": [
          "ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java"
        ],
        "message": "[AMBARI-25301] Ambari metrics HA does not work in 2.7.x for Hbase/any /services (apappu)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java||ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java||ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java": [
          "File: ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java -> ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     protocol = conf.getString(COLLECTOR_PROTOCOL, \"http\");",
          "112:     port = conf.getString(COLLECTOR_PORT, \"6188\");",
          "113:     hostInMemoryAggregationEnabled = conf.getBoolean(HOST_IN_MEMORY_AGGREGATION_ENABLED_PROPERTY, false);",
          "114:     hostInMemoryAggregationPort = conf.getInt(HOST_IN_MEMORY_AGGREGATION_PORT_PROPERTY, 61888);",
          "",
          "[Removed Lines]",
          "111:     collectorHosts = parseHostsStringArrayIntoCollection(conf.getStringArray(COLLECTOR_HOSTS_PROPERTY));",
          "",
          "[Added Lines]",
          "111:     String collectorHostStr = conf.getString(COLLECTOR_HOSTS_PROPERTY);",
          "112:     String[] collectorHostArr = null;",
          "113:     if(collectorHostStr !=null) {",
          "114:       collectorHostArr = collectorHostStr.split(\",\");",
          "115:     }",
          "116:     collectorHosts = parseHostsStringArrayIntoCollection(collectorHostArr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e7745639ed3f5fe56bd1e5578590b6e5780642c",
      "candidate_info": {
        "commit_hash": "0e7745639ed3f5fe56bd1e5578590b6e5780642c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0e7745639ed3f5fe56bd1e5578590b6e5780642c",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "ambari-agent/src/main/python/ambari_agent/listeners/__init__.py",
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ],
        "message": "Branch 2.7 cherry picked commits (#2396)\n\n* [AMBARI-24653] YARN Timeline server v2 related system tests fail. (#2367)\n\n* [AMBARI-24653] YARN Timeline server v2 related system tests fail.\n\n* [AMBARI-24653] YARN Timeline server v2 related system tests fail.\n\n* AMBARI-24661. While registering agent can miss updates from server (aonishuk)\n\n* [AMBARI-24679] Fix race condition in agent during registration and topology updates. (#2368)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py||ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "ambari-agent/src/main/python/ambari_agent/listeners/__init__.py||ambari-agent/src/main/python/ambari_agent/listeners/__init__.py",
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py||ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py": [
          "File: ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py -> ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     self.handle_registration_response(response)",
          "136:     for endpoint, cache, listener, subscribe_to in self.post_registration_requests:",
          "139:       try:",
          "147:     self.subscribe_to_topics(Constants.POST_REGISTRATION_TOPICS_TO_SUBSCRIBE)",
          "",
          "[Removed Lines]",
          "137:       # should not hang forever on these requests",
          "138:       response = self.blocking_request({'hash': cache.hash}, endpoint, log_handler=listener.get_log_message)",
          "140:         listener.on_event({}, response)",
          "141:       except:",
          "142:         logger.exception(\"Exception while handing response to request at {0}. {1}\".format(endpoint, response))",
          "143:         raise",
          "145:       self.subscribe_to_topics([subscribe_to])",
          "",
          "[Added Lines]",
          "138:         listener.enabled = False",
          "139:         self.subscribe_to_topics([subscribe_to])",
          "140:         response = self.blocking_request({'hash': cache.hash}, endpoint, log_handler=listener.get_log_message)",
          "142:         try:",
          "143:           listener.on_event({}, response)",
          "144:         except:",
          "145:           logger.exception(\"Exception while handing response to request at {0}. {1}\".format(endpoint, response))",
          "146:           raise",
          "147:       finally:",
          "148:         with listener.event_queue_lock:",
          "149:           logger.info(\"Enabling events for listener {0}\".format(listener))",
          "150:           listener.enabled = True",
          "151:           # Process queued messages if any",
          "152:           listener.dequeue_unprocessed_events()",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/listeners/__init__.py||ambari-agent/src/main/python/ambari_agent/listeners/__init__.py": [
          "File: ambari-agent/src/main/python/ambari_agent/listeners/__init__.py -> ambari-agent/src/main/python/ambari_agent/listeners/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from ambari_stomp.adapter.websocket import ConnectionIsAlreadyClosed",
          "26: from ambari_agent import Constants",
          "27: from ambari_agent.Utils import Utils",
          "29: logger = logging.getLogger(__name__)",
          "31: class EventListener(ambari_stomp.ConnectionListener):",
          "32:   \"\"\"",
          "33:   Base abstract class for event listeners on specific topics.",
          "34:   \"\"\"",
          "35:   def __init__(self, initializer_module):",
          "36:     self.initializer_module = initializer_module",
          "38:   def on_message(self, headers, message):",
          "39:     \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: from Queue import Queue",
          "29: import threading",
          "35:   unprocessed_messages_queue = Queue(100)",
          "42:     self.enabled = True",
          "43:     self.event_queue_lock = threading.RLock()",
          "45:   def dequeue_unprocessed_events(self):",
          "46:     while not self.unprocessed_messages_queue.empty():",
          "47:       payload = self.unprocessed_messages_queue.get_nowait()",
          "48:       if payload:",
          "49:         logger.info(\"Processing event from unprocessed queue {0} {1}\".format(payload[0], payload[1]))",
          "50:         destination = payload[0]",
          "51:         headers = payload[1]",
          "52:         message_json = payload[2]",
          "53:         message = payload[3]",
          "54:         try:",
          "55:           self.on_event(headers, message_json)",
          "56:         except Exception as ex:",
          "57:           logger.exception(\"Exception while handing event from {0} {1} {2}\".format(destination, headers, message))",
          "58:           self.report_status_to_sender(headers, message, ex)",
          "59:         else:",
          "60:           self.report_status_to_sender(headers, message)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         return",
          "57:       logger.info(\"Event from server at {0}{1}\".format(destination, self.get_log_message(headers, copy.deepcopy(message_json))))",
          "58:       try:",
          "59:         self.on_event(headers, message_json)",
          "60:       except Exception as ex:",
          "62:         self.report_status_to_sender(headers, message, ex)",
          "63:       else:",
          "64:         self.report_status_to_sender(headers, message)",
          "",
          "[Removed Lines]",
          "61:         logger.exception(\"Exception while handing event from {0} {1}\".format(destination, headers, message))",
          "",
          "[Added Lines]",
          "84:       if not self.enabled:",
          "85:         with self.event_queue_lock:",
          "86:           if not self.enabled:",
          "87:             logger.info(\"Queuing event as unprocessed {0} since event \"",
          "88:                         \"listener is disabled\".format(destination))",
          "89:             try:",
          "90:               self.unprocessed_messages_queue.put_nowait((destination, headers, message_json, message))",
          "91:             except Exception as ex:",
          "92:               logger.warning(\"Cannot queue any more unprocessed events since \"",
          "93:                            \"queue is full! {0} {1}\".format(destination, message))",
          "94:             return",
          "99:         logger.exception(\"Exception while handing event from {0} {1} {2}\".format(destination, headers, message))",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py": [
          "File: ambari-server/src/main/resources/scripts/Ambaripreupload.py -> ambari-server/src/main/resources/scripts/Ambaripreupload.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     params.HdfsResource(format('{hdfs_path_prefix}/mapred'), owner='mapred', type='directory', action=['create_on_execute'])",
          "265:     params.HdfsResource(format('{hdfs_path_prefix}/mapred/system'), owner='hdfs', type='directory', action=['create_on_execute'])",
          "266:     params.HdfsResource(format('{hdfs_path_prefix}/mr-history/done'), change_permissions_for_parents=True, owner='mapred', group='hadoop', type='directory', action=['create_on_execute'], mode=0777)",
          "267:     params.HdfsResource(format('{hdfs_path_prefix}/atshistory/done'), owner='yarn', group='hadoop', type='directory', action=['create_on_execute'], mode=0700)",
          "268:     params.HdfsResource(format('{hdfs_path_prefix}/atshistory/active'), owner='yarn', group='hadoop', type='directory', action=['create_on_execute'], mode=01777)",
          "269:     params.HdfsResource(format('{hdfs_path_prefix}/ams/hbase'), owner='ams', type='directory', action=['create_on_execute'], mode=0775)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     params.HdfsResource(format('{hdfs_path_prefix}/user/yarn-ats'), owner='yarn-ats', type='directory', action=['create_on_execute'], mode=0755)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad5abae4392822736b130a9577037d2714a829cd",
      "candidate_info": {
        "commit_hash": "ad5abae4392822736b130a9577037d2714a829cd",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ad5abae4392822736b130a9577037d2714a829cd",
        "files": [
          "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py"
        ],
        "message": "[AMBARI-25315][AMBARI-25211] Fix the logic on constucting JDBC URL for Spark2 thrift server alert (#3021)\n\n[AMBARI-25315] Fix the logic on constucting JDBC URL for Spark2 thrift server alert (Jungtaek Lim via dgrinenko)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py||ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py||ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py": [
          "File: ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py -> ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/alerts/alert_spark2_thrift_port.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:         if host_name is None:",
          "148:             host_name = socket.getfqdn()",
          "150:         if security_enabled:",
          "151:             if spark_ssl_enabled:",
          "161:         # append url according to used transport",
          "163:         beeline_cmd = os.path.join(spark_home, \"bin\", \"beeline\")",
          "167:         start_time = time.time()",
          "168:         try:",
          "",
          "[Removed Lines]",
          "152:                 beeline_url = ['\"jdbc:hive2://{host_name}:{port}/default;principal={hive_principal};transportMode={transport_mode};ssl=true;sslTrustStore={spark_truststore_path};trustStorePassword={spark_truststore_pass!p};httpPath=cliservice\"']",
          "153:             else:",
          "154:                 beeline_url = [\"jdbc:hive2://{host_name}:{port}/default;principal={hive_principal}\",\"transportMode={transport_mode}\"]",
          "155:         else:",
          "156:             if spark_ssl_enabled:",
          "157:                 beeline_url = ['\"jdbc:hive2://{host_name}:{port}/default;transportMode={transport_mode};ssl=true;sslTrustStore={spark_truststore_path};trustStorePassword={spark_truststore_pass!p};httpPath=cliservice\"']",
          "158:             else:",
          "159:                 beeline_url = [\"jdbc:hive2://{host_name}:{port}/default\",\"transportMode={transport_mode}\"]",
          "164:         cmd = \"! beeline -u %s  -e '' 2>&1| awk '{print}'|grep -i -e 'Connection refused' -e 'Invalid URL'\" % \\",
          "165:               (format(\" \".join(beeline_url)))",
          "",
          "[Added Lines]",
          "150:         beeline_url = [\"jdbc:hive2://{host_name}:{port}/default\", \"transportMode={transport_mode}\"]",
          "152:             beeline_url.append(\"principal={hive_principal}\")",
          "153:         if transport_mode == \"http\":",
          "154:             beeline_url.append(\"httpPath=cliservice\")",
          "156:                 beeline_url.extend([\"ssl=true\", \"sslTrustStore={spark_truststore_path}\", \"trustStorePassword={spark_truststore_pass!p}\"])",
          "161:         cmd = \"! beeline -u '%s'  -e '' 2>&1| awk '{print}'|grep -i -e 'Connection refused' -e 'Invalid URL'\" % \\",
          "162:               (format(\";\".join(beeline_url)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5dfc47b7c3b836a8ed646dde126cadd5a9bf9636",
      "candidate_info": {
        "commit_hash": "5dfc47b7c3b836a8ed646dde126cadd5a9bf9636",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/5dfc47b7c3b836a8ed646dde126cadd5a9bf9636",
        "files": [
          "ambari-web/api-docs/index.html",
          "ambari-web/api-docs/lib/jquery-1.8.0.min.js",
          "ambari-web/api-docs/lib/jquery-1.8.3.min.js"
        ],
        "message": "AMBARI-24515 Remove dependency on JQuery 1.8.0 for Ambari Server UI",
        "before_after_code_files": [
          "ambari-web/api-docs/index.html||ambari-web/api-docs/index.html",
          "ambari-web/api-docs/lib/jquery-1.8.0.min.js||ambari-web/api-docs/lib/jquery-1.8.0.min.js",
          "ambari-web/api-docs/lib/jquery-1.8.3.min.js||ambari-web/api-docs/lib/jquery-1.8.3.min.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/api-docs/index.html||ambari-web/api-docs/index.html": [
          "File: ambari-web/api-docs/index.html -> ambari-web/api-docs/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   <link href='css/api-explorer.css' rel='stylesheet' type='text/css'/>",
          "15:   <link href='css/screen.css' media='screen' rel='stylesheet' type='text/css'/>",
          "18:   <script src='lib/jquery.slideto.min.js' type='text/javascript'></script>",
          "19:   <script src='lib/jquery.wiggle.min.js' type='text/javascript'></script>",
          "20:   <script src='lib/jquery.ba-bbq.min.js' type='text/javascript'></script>",
          "",
          "[Removed Lines]",
          "17:   <script src='lib/jquery-1.8.0.min.js' type='text/javascript'></script>",
          "",
          "[Added Lines]",
          "17:   <script src='lib/jquery-1.8.3.min.js' type='text/javascript'></script>",
          "",
          "---------------"
        ],
        "ambari-web/api-docs/lib/jquery-1.8.0.min.js||ambari-web/api-docs/lib/jquery-1.8.0.min.js": [
          "File: ambari-web/api-docs/lib/jquery-1.8.0.min.js -> ambari-web/api-docs/lib/jquery-1.8.0.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-web/api-docs/lib/jquery-1.8.3.min.js||ambari-web/api-docs/lib/jquery-1.8.3.min.js": [
          "File: ambari-web/api-docs/lib/jquery-1.8.3.min.js -> ambari-web/api-docs/lib/jquery-1.8.3.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: (function(e,t){function _(e){var t=M[e]={};return v.each(e.split(y),function(e,n){t[n]=!0}),t}function H(e,n,r){if(r===t&&e.nodeType===1){var i=\"data-\"+n.replace(P,\"-$1\").toLowerCase();r=e.getAttribute(i);if(typeof r==\"string\"){try{r=r===\"true\"?!0:r===\"false\"?!1:r===\"null\"?null:+r+\"\"===r?+r:D.test(r)?v.parseJSON(r):r}catch(s){}v.data(e,n,r)}else r=t}return r}function B(e){var t;for(t in e){if(t===\"data\"&&v.isEmptyObject(e[t]))continue;if(t!==\"toJSON\")return!1}return!0}function et(){return!1}function tt(){return!0}function ut(e){return!e||!e.parentNode||e.parentNode.nodeType===11}function at(e,t){do e=e[t];while(e&&e.nodeType!==1);return e}function ft(e,t,n){t=t||0;if(v.isFunction(t))return v.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return v.grep(e,function(e,r){return e===t===n});if(typeof t==\"string\"){var r=v.grep(e,function(e){return e.nodeType===1});if(it.test(t))return v.filter(t,r,!n);t=v.filter(t,r)}return v.grep(e,function(e,r){return v.inArray(e,t)>=0===n})}function lt(e){var t=ct.split(\"|\"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function At(e,t){if(t.nodeType!==1||!v.hasData(e))return;var n,r,i,s=v._data(e),o=v._data(t,s),u=s.events;if(u){delete o.handle,o.events={};for(n in u)for(r=0,i=u[n].length;r<i;r++)v.event.add(t,n,u[n][r])}o.data&&(o.data=v.extend({},o.data))}function Ot(e,t){var n;if(t.nodeType!==1)return;t.clearAttributes&&t.clearAttributes(),t.mergeAttributes&&t.mergeAttributes(e),n=t.nodeName.toLowerCase(),n===\"object\"?(t.parentNode&&(t.outerHTML=e.outerHTML),v.support.html5Clone&&e.innerHTML&&!v.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):n===\"input\"&&Et.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):n===\"option\"?t.selected=e.defaultSelected:n===\"input\"||n===\"textarea\"?t.defaultValue=e.defaultValue:n===\"script\"&&t.text!==e.text&&(t.text=e.text),t.removeAttribute(v.expando)}function Mt(e){return typeof e.getElementsByTagName!=\"undefined\"?e.getElementsByTagName(\"*\"):typeof e.querySelectorAll!=\"undefined\"?e.querySelectorAll(\"*\"):[]}function _t(e){Et.test(e.type)&&(e.defaultChecked=e.checked)}function Qt(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Jt.length;while(i--){t=Jt[i]+n;if(t in e)return t}return r}function Gt(e,t){return e=t||e,v.css(e,\"display\")===\"none\"||!v.contains(e.ownerDocument,e)}function Yt(e,t){var n,r,i=[],s=0,o=e.length;for(;s<o;s++){n=e[s];if(!n.style)continue;i[s]=v._data(n,\"olddisplay\"),t?(!i[s]&&n.style.display===\"none\"&&(n.style.display=\"\"),n.style.display===\"\"&&Gt(n)&&(i[s]=v._data(n,\"olddisplay\",nn(n.nodeName)))):(r=Dt(n,\"display\"),!i[s]&&r!==\"none\"&&v._data(n,\"olddisplay\",r))}for(s=0;s<o;s++){n=e[s];if(!n.style)continue;if(!t||n.style.display===\"none\"||n.style.display===\"\")n.style.display=t?i[s]||\"\":\"none\"}return e}function Zt(e,t,n){var r=Rt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function en(e,t,n,r){var i=n===(r?\"border\":\"content\")?4:t===\"width\"?1:0,s=0;for(;i<4;i+=2)n===\"margin\"&&(s+=v.css(e,n+$t[i],!0)),r?(n===\"content\"&&(s-=parseFloat(Dt(e,\"padding\"+$t[i]))||0),n!==\"margin\"&&(s-=parseFloat(Dt(e,\"border\"+$t[i]+\"Width\"))||0)):(s+=parseFloat(Dt(e,\"padding\"+$t[i]))||0,n!==\"padding\"&&(s+=parseFloat(Dt(e,\"border\"+$t[i]+\"Width\"))||0));return s}function tn(e,t,n){var r=t===\"width\"?e.offsetWidth:e.offsetHeight,i=!0,s=v.support.boxSizing&&v.css(e,\"boxSizing\")===\"border-box\";if(r<=0||r==null){r=Dt(e,t);if(r<0||r==null)r=e.style[t];if(Ut.test(r))return r;i=s&&(v.support.boxSizingReliable||r===e.style[t]),r=parseFloat(r)||0}return r+en(e,t,n||(s?\"border\":\"content\"),i)+\"px\"}function nn(e){if(Wt[e])return Wt[e];var t=v(\"<\"+e+\">\").appendTo(i.body),n=t.css(\"display\");t.remove();if(n===\"none\"||n===\"\"){Pt=i.body.appendChild(Pt||v.extend(i.createElement(\"iframe\"),{frameBorder:0,width:0,height:0}));if(!Ht||!Pt.createElement)Ht=(Pt.contentWindow||Pt.contentDocument).document,Ht.write(\"<!doctype html><html><body>\"),Ht.close();t=Ht.body.appendChild(Ht.createElement(e)),n=Dt(t,\"display\"),i.body.removeChild(Pt)}return Wt[e]=n,n}function fn(e,t,n,r){var i;if(v.isArray(t))v.each(t,function(t,i){n||sn.test(e)?r(e,i):fn(e+\"[\"+(typeof i==\"object\"?t:\"\")+\"]\",i,n,r)});else if(!n&&v.type(t)===\"object\")for(i in t)fn(e+\"[\"+i+\"]\",t[i],n,r);else r(e,t)}function Cn(e){return function(t,n){typeof t!=\"string\"&&(n=t,t=\"*\");var r,i,s,o=t.toLowerCase().split(y),u=0,a=o.length;if(v.isFunction(n))for(;u<a;u++)r=o[u],s=/^\\+/.test(r),s&&(r=r.substr(1)||\"*\"),i=e[r]=e[r]||[],i[s?\"unshift\":\"push\"](n)}}function kn(e,n,r,i,s,o){s=s||n.dataTypes[0],o=o||{},o[s]=!0;var u,a=e[s],f=0,l=a?a.length:0,c=e===Sn;for(;f<l&&(c||!u);f++)u=a[f](n,r,i),typeof u==\"string\"&&(!c||o[u]?u=t:(n.dataTypes.unshift(u),u=kn(e,n,r,i,u,o)));return(c||!u)&&!o[\"*\"]&&(u=kn(e,n,r,i,\"*\",o)),u}function Ln(e,n){var r,i,s=v.ajaxSettings.flatOptions||{};for(r in n)n[r]!==t&&((s[r]?e:i||(i={}))[r]=n[r]);i&&v.extend(!0,e,i)}function An(e,n,r){var i,s,o,u,a=e.contents,f=e.dataTypes,l=e.responseFields;for(s in l)s in r&&(n[l[s]]=r[s]);while(f[0]===\"*\")f.shift(),i===t&&(i=e.mimeType||n.getResponseHeader(\"content-type\"));if(i)for(s in a)if(a[s]&&a[s].test(i)){f.unshift(s);break}if(f[0]in r)o=f[0];else{for(s in r){if(!f[0]||e.converters[s+\" \"+f[0]]){o=s;break}u||(u=s)}o=o||u}if(o)return o!==f[0]&&f.unshift(o),r[o]}function On(e,t){var n,r,i,s,o=e.dataTypes.slice(),u=o[0],a={},f=0;e.dataFilter&&(t=e.dataFilter(t,e.dataType));if(o[1])for(n in e.converters)a[n.toLowerCase()]=e.converters[n];for(;i=o[++f];)if(i!==\"*\"){if(u!==\"*\"&&u!==i){n=a[u+\" \"+i]||a[\"* \"+i];if(!n)for(r in a){s=r.split(\" \");if(s[1]===i){n=a[u+\" \"+s[0]]||a[\"* \"+s[0]];if(n){n===!0?n=a[r]:a[r]!==!0&&(i=s[0],o.splice(f--,0,i));break}}}if(n!==!0)if(n&&e[\"throws\"])t=n(t);else try{t=n(t)}catch(l){return{state:\"parsererror\",error:n?l:\"No conversion from \"+u+\" to \"+i}}}u=i}return{state:\"success\",data:t}}function Fn(){try{return new e.XMLHttpRequest}catch(t){}}function In(){try{return new e.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}}function $n(){return setTimeout(function(){qn=t},0),qn=v.now()}function Jn(e,t){v.each(t,function(t,n){var r=(Vn[t]||[]).concat(Vn[\"*\"]),i=0,s=r.length;for(;i<s;i++)if(r[i].call(e,t,n))return})}function Kn(e,t,n){var r,i=0,s=0,o=Xn.length,u=v.Deferred().always(function(){delete a.elem}),a=function(){var t=qn||$n(),n=Math.max(0,f.startTime+f.duration-t),r=n/f.duration||0,i=1-r,s=0,o=f.tweens.length;for(;s<o;s++)f.tweens[s].run(i);return u.notifyWith(e,[f,i,n]),i<1&&o?n:(u.resolveWith(e,[f]),!1)},f=u.promise({elem:e,props:v.extend({},t),opts:v.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:qn||$n(),duration:n.duration,tweens:[],createTween:function(t,n,r){var i=v.Tween(e,f.opts,t,n,f.opts.specialEasing[t]||f.opts.easing);return f.tweens.push(i),i},stop:function(t){var n=0,r=t?f.tweens.length:0;for(;n<r;n++)f.tweens[n].run(1);return t?u.resolveWith(e,[f,t]):u.rejectWith(e,[f,t]),this}}),l=f.props;Qn(l,f.opts.specialEasing);for(;i<o;i++){r=Xn[i].call(f,e,l,f.opts);if(r)return r}return Jn(f,l),v.isFunction(f.opts.start)&&f.opts.start.call(e,f),v.fx.timer(v.extend(a,{anim:f,queue:f.opts.queue,elem:e})),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always)}function Qn(e,t){var n,r,i,s,o;for(n in e){r=v.camelCase(n),i=t[r],s=e[n],v.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),o=v.cssHooks[r];if(o&&\"expand\"in o){s=o.expand(s),delete e[r];for(n in s)n in e||(e[n]=s[n],t[n]=i)}else t[r]=i}}function Gn(e,t,n){var r,i,s,o,u,a,f,l,c,h=this,p=e.style,d={},m=[],g=e.nodeType&&Gt(e);n.queue||(l=v._queueHooks(e,\"fx\"),l.unqueued==null&&(l.unqueued=0,c=l.empty.fire,l.empty.fire=function(){l.unqueued||c()}),l.unqueued++,h.always(function(){h.always(function(){l.unqueued--,v.queue(e,\"fx\").length||l.empty.fire()})})),e.nodeType===1&&(\"height\"in t||\"width\"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],v.css(e,\"display\")===\"inline\"&&v.css(e,\"float\")===\"none\"&&(!v.support.inlineBlockNeedsLayout||nn(e.nodeName)===\"inline\"?p.display=\"inline-block\":p.zoom=1)),n.overflow&&(p.overflow=\"hidden\",v.support.shrinkWrapBlocks||h.done(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t){s=t[r];if(Un.exec(s)){delete t[r],a=a||s===\"toggle\";if(s===(g?\"hide\":\"show\"))continue;m.push(r)}}o=m.length;if(o){u=v._data(e,\"fxshow\")||v._data(e,\"fxshow\",{}),\"hidden\"in u&&(g=u.hidden),a&&(u.hidden=!g),g?v(e).show():h.done(function(){v(e).hide()}),h.done(function(){var t;v.removeData(e,\"fxshow\",!0);for(t in d)v.style(e,t,d[t])});for(r=0;r<o;r++)i=m[r],f=h.createTween(i,g?u[i]:0),d[i]=u[i]||v.style(e,i),i in u||(u[i]=f.start,g&&(f.end=f.start,f.start=i===\"width\"||i===\"height\"?1:0))}}function Yn(e,t,n,r,i){return new Yn.prototype.init(e,t,n,r,i)}function Zn(e,t){var n,r={height:e},i=0;t=t?1:0;for(;i<4;i+=2-t)n=$t[i],r[\"margin\"+n]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}function tr(e){return v.isWindow(e)?e:e.nodeType===9?e.defaultView||e.parentWindow:!1}var n,r,i=e.document,s=e.location,o=e.navigator,u=e.jQuery,a=e.$,f=Array.prototype.push,l=Array.prototype.slice,c=Array.prototype.indexOf,h=Object.prototype.toString,p=Object.prototype.hasOwnProperty,d=String.prototype.trim,v=function(e,t){return new v.fn.init(e,t,n)},m=/[\\-+]?(?:\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/.source,g=/\\S/,y=/\\s+/,b=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,w=/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/,E=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,S=/^[\\],:{}\\s]*$/,x=/(?:^|:|,)(?:\\s*\\[)+/g,T=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,N=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/g,C=/^-ms-/,k=/-([\\da-z])/gi,L=function(e,t){return(t+\"\").toUpperCase()},A=function(){i.addEventListener?(i.removeEventListener(\"DOMContentLoaded\",A,!1),v.ready()):i.readyState===\"complete\"&&(i.detachEvent(\"onreadystatechange\",A),v.ready())},O={};v.fn=v.prototype={constructor:v,init:function(e,n,r){var s,o,u,a;if(!e)return this;if(e.nodeType)return this.context=this[0]=e,this.length=1,this;if(typeof e==\"string\"){e.charAt(0)===\"<\"&&e.charAt(e.length-1)===\">\"&&e.length>=3?s=[null,e,null]:s=w.exec(e);if(s&&(s[1]||!n)){if(s[1])return n=n instanceof v?n[0]:n,a=n&&n.nodeType?n.ownerDocument||n:i,e=v.parseHTML(s[1],a,!0),E.test(s[1])&&v.isPlainObject(n)&&this.attr.call(e,n,!0),v.merge(this,e);o=i.getElementById(s[2]);if(o&&o.parentNode){if(o.id!==s[2])return r.find(e);this.length=1,this[0]=o}return this.context=i,this.selector=e,this}return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e)}return v.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),v.makeArray(e,this))},selector:\"\",jquery:\"1.8.3\",length:0,size:function(){return this.length},toArray:function(){return l.call(this)},get:function(e){return e==null?this.toArray():e<0?this[this.length+e]:this[e]},pushStack:function(e,t,n){var r=v.merge(this.constructor(),e);return r.prevObject=this,r.context=this.context,t===\"find\"?r.selector=this.selector+(this.selector?\" \":\"\")+n:t&&(r.selector=this.selector+\".\"+t+\"(\"+n+\")\"),r},each:function(e,t){return v.each(this,e,t)},ready:function(e){return v.ready.promise().done(e),this},eq:function(e){return e=+e,e===-1?this.slice(e):this.slice(e,e+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(l.apply(this,arguments),\"slice\",l.call(arguments).join(\",\"))},map:function(e){return this.pushStack(v.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:[].sort,splice:[].splice},v.fn.init.prototype=v.fn,v.extend=v.fn.extend=function(){var e,n,r,i,s,o,u=arguments[0]||{},a=1,f=arguments.length,l=!1;typeof u==\"boolean\"&&(l=u,u=arguments[1]||{},a=2),typeof u!=\"object\"&&!v.isFunction(u)&&(u={}),f===a&&(u=this,--a);for(;a<f;a++)if((e=arguments[a])!=null)for(n in e){r=u[n],i=e[n];if(u===i)continue;l&&i&&(v.isPlainObject(i)||(s=v.isArray(i)))?(s?(s=!1,o=r&&v.isArray(r)?r:[]):o=r&&v.isPlainObject(r)?r:{},u[n]=v.extend(l,o,i)):i!==t&&(u[n]=i)}return u},v.extend({noConflict:function(t){return e.$===v&&(e.$=a),t&&e.jQuery===v&&(e.jQuery=u),v},isReady:!1,readyWait:1,holdReady:function(e){e?v.readyWait++:v.ready(!0)},ready:function(e){if(e===!0?--v.readyWait:v.isReady)return;if(!i.body)return setTimeout(v.ready,1);v.isReady=!0;if(e!==!0&&--v.readyWait>0)return;r.resolveWith(i,[v]),v.fn.trigger&&v(i).trigger(\"ready\").off(\"ready\")},isFunction:function(e){return v.type(e)===\"function\"},isArray:Array.isArray||function(e){return v.type(e)===\"array\"},isWindow:function(e){return e!=null&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return e==null?String(e):O[h.call(e)]||\"object\"},isPlainObject:function(e){if(!e||v.type(e)!==\"object\"||e.nodeType||v.isWindow(e))return!1;try{if(e.constructor&&!p.call(e,\"constructor\")&&!p.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(n){return!1}var r;for(r in e);return r===t||p.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw new Error(e)},parseHTML:function(e,t,n){var r;return!e||typeof e!=\"string\"?null:(typeof t==\"boolean\"&&(n=t,t=0),t=t||i,(r=E.exec(e))?[t.createElement(r[1])]:(r=v.buildFragment([e],t,n?null:[]),v.merge([],(r.cacheable?v.clone(r.fragment):r.fragment).childNodes)))},parseJSON:function(t){if(!t||typeof t!=\"string\")return null;t=v.trim(t);if(e.JSON&&e.JSON.parse)return e.JSON.parse(t);if(S.test(t.replace(T,\"@\").replace(N,\"]\").replace(x,\"\")))return(new Function(\"return \"+t))();v.error(\"Invalid JSON: \"+t)},parseXML:function(n){var r,i;if(!n||typeof n!=\"string\")return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(s){r=t}return(!r||!r.documentElement||r.getElementsByTagName(\"parsererror\").length)&&v.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&g.test(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(C,\"ms-\").replace(k,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,n,r){var i,s=0,o=e.length,u=o===t||v.isFunction(e);if(r){if(u){for(i in e)if(n.apply(e[i],r)===!1)break}else for(;s<o;)if(n.apply(e[s++],r)===!1)break}else if(u){for(i in e)if(n.call(e[i],i,e[i])===!1)break}else for(;s<o;)if(n.call(e[s],s,e[s++])===!1)break;return e},trim:d&&!d.call(\"\\ufeff\\u00a0\")?function(e){return e==null?\"\":d.call(e)}:function(e){return e==null?\"\":(e+\"\").replace(b,\"\")},makeArray:function(e,t){var n,r=t||[];return e!=null&&(n=v.type(e),e.length==null||n===\"string\"||n===\"function\"||n===\"regexp\"||v.isWindow(e)?f.call(r,e):v.merge(r,e)),r},inArray:function(e,t,n){var r;if(t){if(c)return c.call(t,e,n);r=t.length,n=n?n<0?Math.max(0,r+n):n:0;for(;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,s=0;if(typeof r==\"number\")for(;s<r;s++)e[i++]=n[s];else while(n[s]!==t)e[i++]=n[s++];return e.length=i,e},grep:function(e,t,n){var r,i=[],s=0,o=e.length;n=!!n;for(;s<o;s++)r=!!t(e[s],s),n!==r&&i.push(e[s]);return i},map:function(e,n,r){var i,s,o=[],u=0,a=e.length,f=e instanceof v||a!==t&&typeof a==\"number\"&&(a>0&&e[0]&&e[a-1]||a===0||v.isArray(e));if(f)for(;u<a;u++)i=n(e[u],u,r),i!=null&&(o[o.length]=i);else for(s in e)i=n(e[s],s,r),i!=null&&(o[o.length]=i);return o.concat.apply([],o)},guid:1,proxy:function(e,n){var r,i,s;return typeof n==\"string\"&&(r=e[n],n=e,e=r),v.isFunction(e)?(i=l.call(arguments,2),s=function(){return e.apply(n,i.concat(l.call(arguments)))},s.guid=e.guid=e.guid||v.guid++,s):t},access:function(e,n,r,i,s,o,u){var a,f=r==null,l=0,c=e.length;if(r&&typeof r==\"object\"){for(l in r)v.access(e,n,l,r[l],1,o,i);s=1}else if(i!==t){a=u===t&&v.isFunction(i),f&&(a?(a=n,n=function(e,t,n){return a.call(v(e),n)}):(n.call(e,i),n=null));if(n)for(;l<c;l++)n(e[l],r,a?i.call(e[l],l,n(e[l],r)):i,u);s=1}return s?e:f?n.call(e):c?n(e[0],r):o},now:function(){return(new Date).getTime()}}),v.ready.promise=function(t){if(!r){r=v.Deferred();if(i.readyState===\"complete\")setTimeout(v.ready,1);else if(i.addEventListener)i.addEventListener(\"DOMContentLoaded\",A,!1),e.addEventListener(\"load\",v.ready,!1);else{i.attachEvent(\"onreadystatechange\",A),e.attachEvent(\"onload\",v.ready);var n=!1;try{n=e.frameElement==null&&i.documentElement}catch(s){}n&&n.doScroll&&function o(){if(!v.isReady){try{n.doScroll(\"left\")}catch(e){return setTimeout(o,50)}v.ready()}}()}}return r.promise(t)},v.each(\"Boolean Number String Function Array Date RegExp Object\".split(\" \"),function(e,t){O[\"[object \"+t+\"]\"]=t.toLowerCase()}),n=v(i);var M={};v.Callbacks=function(e){e=typeof e==\"string\"?M[e]||_(e):v.extend({},e);var n,r,i,s,o,u,a=[],f=!e.once&&[],l=function(t){n=e.memory&&t,r=!0,u=s||0,s=0,o=a.length,i=!0;for(;a&&u<o;u++)if(a[u].apply(t[0],t[1])===!1&&e.stopOnFalse){n=!1;break}i=!1,a&&(f?f.length&&l(f.shift()):n?a=[]:c.disable())},c={add:function(){if(a){var t=a.length;(function r(t){v.each(t,function(t,n){var i=v.type(n);i===\"function\"?(!e.unique||!c.has(n))&&a.push(n):n&&n.length&&i!==\"string\"&&r(n)})})(arguments),i?o=a.length:n&&(s=t,l(n))}return this},remove:function(){return a&&v.each(arguments,function(e,t){var n;while((n=v.inArray(t,a,n))>-1)a.splice(n,1),i&&(n<=o&&o--,n<=u&&u--)}),this},has:function(e){return v.inArray(e,a)>-1},empty:function(){return a=[],this},disable:function(){return a=f=n=t,this},disabled:function(){return!a},lock:function(){return f=t,n||c.disable(),this},locked:function(){return!f},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],a&&(!r||f)&&(i?f.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},v.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",v.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",v.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",v.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return v.Deferred(function(n){v.each(t,function(t,r){var s=r[0],o=e[t];i[r[1]](v.isFunction(o)?function(){var e=o.apply(this,arguments);e&&v.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+\"With\"](this===i?n:this,[e])}:n[s])}),e=null}).promise()},promise:function(e){return e!=null?v.extend(e,r):r}},i={};return r.pipe=r.then,v.each(t,function(e,s){var o=s[2],u=s[3];r[s[1]]=o.add,u&&o.add(function(){n=u},t[e^1][2].disable,t[2][2].lock),i[s[0]]=o.fire,i[s[0]+\"With\"]=o.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=l.call(arguments),r=n.length,i=r!==1||e&&v.isFunction(e.promise)?r:0,s=i===1?e:v.Deferred(),o=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?l.call(arguments):r,n===u?s.notifyWith(t,n):--i||s.resolveWith(t,n)}},u,a,f;if(r>1){u=new Array(r),a=new Array(r),f=new Array(r);for(;t<r;t++)n[t]&&v.isFunction(n[t].promise)?n[t].promise().done(o(t,f,n)).fail(s.reject).progress(o(t,a,u)):--i}return i||s.resolveWith(f,n),s.promise()}}),v.support=function(){var t,n,r,s,o,u,a,f,l,c,h,p=i.createElement(\"div\");p.setAttribute(\"className\",\"t\"),p.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",n=p.getElementsByTagName(\"*\"),r=p.getElementsByTagName(\"a\")[0];if(!n||!r||!n.length)return{};s=i.createElement(\"select\"),o=s.appendChild(i.createElement(\"option\")),u=p.getElementsByTagName(\"input\")[0],r.style.cssText=\"top:1px;float:left;opacity:.5\",t={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName(\"tbody\").length,htmlSerialize:!!p.getElementsByTagName(\"link\").length,style:/top/.test(r.getAttribute(\"style\")),hrefNormalized:r.getAttribute(\"href\")===\"/a\",opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:u.value===\"on\",optSelected:o.selected,getSetAttribute:p.className!==\"t\",enctype:!!i.createElement(\"form\").enctype,html5Clone:i.createElement(\"nav\").cloneNode(!0).outerHTML!==\"<:nav></:nav>\",boxModel:i.compatMode===\"CSS1Compat\",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},u.checked=!0,t.noCloneChecked=u.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!o.disabled;try{delete p.test}catch(d){t.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent(\"onclick\",h=function(){t.noCloneEvent=!1}),p.cloneNode(!0).fireEvent(\"onclick\"),p.detachEvent(\"onclick\",h)),u=i.createElement(\"input\"),u.value=\"t\",u.setAttribute(\"type\",\"radio\"),t.radioValue=u.value===\"t\",u.setAttribute(\"checked\",\"checked\"),u.setAttribute(\"name\",\"t\"),p.appendChild(u),a=i.createDocumentFragment(),a.appendChild(p.lastChild),t.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,t.appendChecked=u.checked,a.removeChild(u),a.appendChild(p);if(p.attachEvent)for(l in{submit:!0,change:!0,focusin:!0})f=\"on\"+l,c=f in p,c||(p.setAttribute(f,\"return;\"),c=typeof p[f]==\"function\"),t[l+\"Bubbles\"]=c;return v(function(){var n,r,s,o,u=\"padding:0;margin:0;border:0;display:block;overflow:hidden;\",a=i.getElementsByTagName(\"body\")[0];if(!a)return;n=i.createElement(\"div\"),n.style.cssText=\"visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px\",a.insertBefore(n,a.firstChild),r=i.createElement(\"div\"),n.appendChild(r),r.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",s=r.getElementsByTagName(\"td\"),s[0].style.cssText=\"padding:0;margin:0;border:0;display:none\",c=s[0].offsetHeight===0,s[0].style.display=\"\",s[1].style.display=\"none\",t.reliableHiddenOffsets=c&&s[0].offsetHeight===0,r.innerHTML=\"\",r.style.cssText=\"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\",t.boxSizing=r.offsetWidth===4,t.doesNotIncludeMarginInBodyOffset=a.offsetTop!==1,e.getComputedStyle&&(t.pixelPosition=(e.getComputedStyle(r,null)||{}).top!==\"1%\",t.boxSizingReliable=(e.getComputedStyle(r,null)||{width:\"4px\"}).width===\"4px\",o=i.createElement(\"div\"),o.style.cssText=r.style.cssText=u,o.style.marginRight=o.style.width=\"0\",r.style.width=\"1px\",r.appendChild(o),t.reliableMarginRight=!parseFloat((e.getComputedStyle(o,null)||{}).marginRight)),typeof r.style.zoom!=\"undefined\"&&(r.innerHTML=\"\",r.style.cssText=u+\"width:1px;padding:1px;display:inline;zoom:1\",t.inlineBlockNeedsLayout=r.offsetWidth===3,r.style.display=\"block\",r.style.overflow=\"visible\",r.innerHTML=\"<div></div>\",r.firstChild.style.width=\"5px\",t.shrinkWrapBlocks=r.offsetWidth!==3,n.style.zoom=1),a.removeChild(n),n=r=s=o=null}),a.removeChild(p),n=r=s=o=u=a=p=null,t}();var D=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,P=/([A-Z])/g;v.extend({cache:{},deletedIds:[],uuid:0,expando:\"jQuery\"+(v.fn.jquery+Math.random()).replace(/\\D/g,\"\"),noData:{embed:!0,object:\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",applet:!0},hasData:function(e){return e=e.nodeType?v.cache[e[v.expando]]:e[v.expando],!!e&&!B(e)},data:function(e,n,r,i){if(!v.acceptData(e))return;var s,o,u=v.expando,a=typeof n==\"string\",f=e.nodeType,l=f?v.cache:e,c=f?e[u]:e[u]&&u;if((!c||!l[c]||!i&&!l[c].data)&&a&&r===t)return;c||(f?e[u]=c=v.deletedIds.pop()||v.guid++:c=u),l[c]||(l[c]={},f||(l[c].toJSON=v.noop));if(typeof n==\"object\"||typeof n==\"function\")i?l[c]=v.extend(l[c],n):l[c].data=v.extend(l[c].data,n);return s=l[c],i||(s.data||(s.data={}),s=s.data),r!==t&&(s[v.camelCase(n)]=r),a?(o=s[n],o==null&&(o=s[v.camelCase(n)])):o=s,o},removeData:function(e,t,n){if(!v.acceptData(e))return;var r,i,s,o=e.nodeType,u=o?v.cache:e,a=o?e[v.expando]:v.expando;if(!u[a])return;if(t){r=n?u[a]:u[a].data;if(r){v.isArray(t)||(t in r?t=[t]:(t=v.camelCase(t),t in r?t=[t]:t=t.split(\" \")));for(i=0,s=t.length;i<s;i++)delete r[t[i]];if(!(n?B:v.isEmptyObject)(r))return}}if(!n){delete u[a].data;if(!B(u[a]))return}o?v.cleanData([e],!0):v.support.deleteExpando||u!=u.window?delete u[a]:u[a]=null},_data:function(e,t,n){return v.data(e,t,n,!0)},acceptData:function(e){var t=e.nodeName&&v.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute(\"classid\")===t}}),v.fn.extend({data:function(e,n){var r,i,s,o,u,a=this[0],f=0,l=null;if(e===t){if(this.length){l=v.data(a);if(a.nodeType===1&&!v._data(a,\"parsedAttrs\")){s=a.attributes;for(u=s.length;f<u;f++)o=s[f].name,o.indexOf(\"data-\")||(o=v.camelCase(o.substring(5)),H(a,o,l[o]));v._data(a,\"parsedAttrs\",!0)}}return l}return typeof e==\"object\"?this.each(function(){v.data(this,e)}):(r=e.split(\".\",2),r[1]=r[1]?\".\"+r[1]:\"\",i=r[1]+\"!\",v.access(this,function(n){if(n===t)return l=this.triggerHandler(\"getData\"+i,[r[0]]),l===t&&a&&(l=v.data(a,e),l=H(a,e,l)),l===t&&r[1]?this.data(r[0]):l;r[1]=n,this.each(function(){var t=v(this);t.triggerHandler(\"setData\"+i,r),v.data(this,e,n),t.triggerHandler(\"changeData\"+i,r)})},null,n,arguments.length>1,null,!1))},removeData:function(e){return this.each(function(){v.removeData(this,e)})}}),v.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=v._data(e,t),n&&(!r||v.isArray(n)?r=v._data(e,t,v.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=v.queue(e,t),r=n.length,i=n.shift(),s=v._queueHooks(e,t),o=function(){v.dequeue(e,t)};i===\"inprogress\"&&(i=n.shift(),r--),i&&(t===\"fx\"&&n.unshift(\"inprogress\"),delete s.stop,i.call(e,o,s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return v._data(e,n)||v._data(e,n,{empty:v.Callbacks(\"once memory\").add(function(){v.removeData(e,t+\"queue\",!0),v.removeData(e,n,!0)})})}}),v.fn.extend({queue:function(e,n){var r=2;return typeof e!=\"string\"&&(n=e,e=\"fx\",r--),arguments.length<r?v.queue(this[0],e):n===t?this:this.each(function(){var t=v.queue(this,e,n);v._queueHooks(this,e),e===\"fx\"&&t[0]!==\"inprogress\"&&v.dequeue(this,e)})},dequeue:function(e){return this.each(function(){v.dequeue(this,e)})},delay:function(e,t){return e=v.fx?v.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,n){var r,i=1,s=v.Deferred(),o=this,u=this.length,a=function(){--i||s.resolveWith(o,[o])};typeof e!=\"string\"&&(n=e,e=t),e=e||\"fx\";while(u--)r=v._data(o[u],e+\"queueHooks\"),r&&r.empty&&(i++,r.empty.add(a));return a(),s.promise(n)}});var j,F,I,q=/[\\t\\r\\n]/g,R=/\\r/g,U=/^(?:button|input)$/i,z=/^(?:button|input|object|select|textarea)$/i,W=/^a(?:rea|)$/i,X=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,V=v.support.getSetAttribute;v.fn.extend({attr:function(e,t){return v.access(this,v.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){v.removeAttr(this,e)})},prop:function(e,t){return v.access(this,v.prop,e,t,arguments.length>1)},removeProp:function(e){return e=v.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,s,o,u;if(v.isFunction(e))return this.each(function(t){v(this).addClass(e.call(this,t,this.className))});if(e&&typeof e==\"string\"){t=e.split(y);for(n=0,r=this.length;n<r;n++){i=this[n];if(i.nodeType===1)if(!i.className&&t.length===1)i.className=e;else{s=\" \"+i.className+\" \";for(o=0,u=t.length;o<u;o++)s.indexOf(\" \"+t[o]+\" \")<0&&(s+=t[o]+\" \");i.className=v.trim(s)}}}return this},removeClass:function(e){var n,r,i,s,o,u,a;if(v.isFunction(e))return this.each(function(t){v(this).removeClass(e.call(this,t,this.className))});if(e&&typeof e==\"string\"||e===t){n=(e||\"\").split(y);for(u=0,a=this.length;u<a;u++){i=this[u];if(i.nodeType===1&&i.className){r=(\" \"+i.className+\" \").replace(q,\" \");for(s=0,o=n.length;s<o;s++)while(r.indexOf(\" \"+n[s]+\" \")>=0)r=r.replace(\" \"+n[s]+\" \",\" \");i.className=e?v.trim(r):\"\"}}}return this},toggleClass:function(e,t){var n=typeof e,r=typeof t==\"boolean\";return v.isFunction(e)?this.each(function(n){v(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(n===\"string\"){var i,s=0,o=v(this),u=t,a=e.split(y);while(i=a[s++])u=r?u:!o.hasClass(i),o[u?\"addClass\":\"removeClass\"](i)}else if(n===\"undefined\"||n===\"boolean\")this.className&&v._data(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":v._data(this,\"__className__\")||\"\"})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;n<r;n++)if(this[n].nodeType===1&&(\" \"+this[n].className+\" \").replace(q,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,s=this[0];if(!arguments.length){if(s)return n=v.valHooks[s.type]||v.valHooks[s.nodeName.toLowerCase()],n&&\"get\"in n&&(r=n.get(s,\"value\"))!==t?r:(r=s.value,typeof r==\"string\"?r.replace(R,\"\"):r==null?\"\":r);return}return i=v.isFunction(e),this.each(function(r){var s,o=v(this);if(this.nodeType!==1)return;i?s=e.call(this,r,o.val()):s=e,s==null?s=\"\":typeof s==\"number\"?s+=\"\":v.isArray(s)&&(s=v.map(s,function(e){return e==null?\"\":e+\"\"})),n=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()];if(!n||!(\"set\"in n)||n.set(this,s,\"value\")===t)this.value=s})}}),v.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,s=e.type===\"select-one\"||i<0,o=s?null:[],u=s?i+1:r.length,a=i<0?u:s?i:0;for(;a<u;a++){n=r[a];if((n.selected||a===i)&&(v.support.optDisabled?!n.disabled:n.getAttribute(\"disabled\")===null)&&(!n.parentNode.disabled||!v.nodeName(n.parentNode,\"optgroup\"))){t=v(n).val();if(s)return t;o.push(t)}}return o},set:function(e,t){var n=v.makeArray(t);return v(e).find(\"option\").each(function(){this.selected=v.inArray(v(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attrFn:{},attr:function(e,n,r,i){var s,o,u,a=e.nodeType;if(!e||a===3||a===8||a===2)return;if(i&&v.isFunction(v.fn[n]))return v(e)[n](r);if(typeof e.getAttribute==\"undefined\")return v.prop(e,n,r);u=a!==1||!v.isXMLDoc(e),u&&(n=n.toLowerCase(),o=v.attrHooks[n]||(X.test(n)?F:j));if(r!==t){if(r===null){v.removeAttr(e,n);return}return o&&\"set\"in o&&u&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+\"\"),r)}return o&&\"get\"in o&&u&&(s=o.get(e,n))!==null?s:(s=e.getAttribute(n),s===null?t:s)},removeAttr:function(e,t){var n,r,i,s,o=0;if(t&&e.nodeType===1){r=t.split(y);for(;o<r.length;o++)i=r[o],i&&(n=v.propFix[i]||i,s=X.test(i),s||v.attr(e,i,\"\"),e.removeAttribute(V?i:n),s&&n in e&&(e[n]=!1))}},attrHooks:{type:{set:function(e,t){if(U.test(e.nodeName)&&e.parentNode)v.error(\"type property can't be changed\");else if(!v.support.radioValue&&t===\"radio\"&&v.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}},value:{get:function(e,t){return j&&v.nodeName(e,\"button\")?j.get(e,t):t in e?e.value:null},set:function(e,t,n){if(j&&v.nodeName(e,\"button\"))return j.set(e,t,n);e.value=t}}},propFix:{tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},prop:function(e,n,r){var i,s,o,u=e.nodeType;if(!e||u===3||u===8||u===2)return;return o=u!==1||!v.isXMLDoc(e),o&&(n=v.propFix[n]||n,s=v.propHooks[n]),r!==t?s&&\"set\"in s&&(i=s.set(e,r,n))!==t?i:e[n]=r:s&&\"get\"in s&&(i=s.get(e,n))!==null?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode(\"tabindex\");return n&&n.specified?parseInt(n.value,10):z.test(e.nodeName)||W.test(e.nodeName)&&e.href?0:t}}}}),F={get:function(e,n){var r,i=v.prop(e,n);return i===!0||typeof i!=\"boolean\"&&(r=e.getAttributeNode(n))&&r.nodeValue!==!1?n.toLowerCase():t},set:function(e,t,n){var r;return t===!1?v.removeAttr(e,n):(r=v.propFix[n]||n,r in e&&(e[r]=!0),e.setAttribute(n,n.toLowerCase())),n}},V||(I={name:!0,id:!0,coords:!0},j=v.valHooks.button={get:function(e,n){var r;return r=e.getAttributeNode(n),r&&(I[n]?r.value!==\"\":r.specified)?r.value:t},set:function(e,t,n){var r=e.getAttributeNode(n);return r||(r=i.createAttribute(n),e.setAttributeNode(r)),r.value=t+\"\"}},v.each([\"width\",\"height\"],function(e,t){v.attrHooks[t]=v.extend(v.attrHooks[t],{set:function(e,n){if(n===\"\")return e.setAttribute(t,\"auto\"),n}})}),v.attrHooks.contenteditable={get:j.get,set:function(e,t,n){t===\"\"&&(t=\"false\"),j.set(e,t,n)}}),v.support.hrefNormalized||v.each([\"href\",\"src\",\"width\",\"height\"],function(e,n){v.attrHooks[n]=v.extend(v.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return r===null?t:r}})}),v.support.style||(v.attrHooks.style={get:function(e){return e.style.cssText.toLowerCase()||t},set:function(e,t){return e.style.cssText=t+\"\"}}),v.support.optSelected||(v.propHooks.selected=v.extend(v.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),v.support.enctype||(v.propFix.enctype=\"encoding\"),v.support.checkOn||v.each([\"radio\",\"checkbox\"],function(){v.valHooks[this]={get:function(e){return e.getAttribute(\"value\")===null?\"on\":e.value}}}),v.each([\"radio\",\"checkbox\"],function(){v.valHooks[this]=v.extend(v.valHooks[this],{set:function(e,t){if(v.isArray(t))return e.checked=v.inArray(v(e).val(),t)>=0}})});var $=/^(?:textarea|input|select)$/i,J=/^([^\\.]*|)(?:\\.(.+)|)$/,K=/(?:^|\\s)hover(\\.\\S+|)\\b/,Q=/^key/,G=/^(?:mouse|contextmenu)|click/,Y=/^(?:focusinfocus|focusoutblur)$/,Z=function(e){return v.event.special.hover?e:e.replace(K,\"mouseenter$1 mouseleave$1\")};v.event={add:function(e,n,r,i,s){var o,u,a,f,l,c,h,p,d,m,g;if(e.nodeType===3||e.nodeType===8||!n||!r||!(o=v._data(e)))return;r.handler&&(d=r,r=d.handler,s=d.selector),r.guid||(r.guid=v.guid++),a=o.events,a||(o.events=a={}),u=o.handle,u||(o.handle=u=function(e){return typeof v==\"undefined\"||!!e&&v.event.triggered===e.type?t:v.event.dispatch.apply(u.elem,arguments)},u.elem=e),n=v.trim(Z(n)).split(\" \");for(f=0;f<n.length;f++){l=J.exec(n[f])||[],c=l[1],h=(l[2]||\"\").split(\".\").sort(),g=v.event.special[c]||{},c=(s?g.delegateType:g.bindType)||c,g=v.event.special[c]||{},p=v.extend({type:c,origType:l[1],data:i,handler:r,guid:r.guid,selector:s,needsContext:s&&v.expr.match.needsContext.test(s),namespace:h.join(\".\")},d),m=a[c];if(!m){m=a[c]=[],m.delegateCount=0;if(!g.setup||g.setup.call(e,i,h,u)===!1)e.addEventListener?e.addEventListener(c,u,!1):e.attachEvent&&e.attachEvent(\"on\"+c,u)}g.add&&(g.add.call(e,p),p.handler.guid||(p.handler.guid=r.guid)),s?m.splice(m.delegateCount++,0,p):m.push(p),v.event.global[c]=!0}e=null},global:{},remove:function(e,t,n,r,i){var s,o,u,a,f,l,c,h,p,d,m,g=v.hasData(e)&&v._data(e);if(!g||!(h=g.events))return;t=v.trim(Z(t||\"\")).split(\" \");for(s=0;s<t.length;s++){o=J.exec(t[s])||[],u=a=o[1],f=o[2];if(!u){for(u in h)v.event.remove(e,u+t[s],n,r,!0);continue}p=v.event.special[u]||{},u=(r?p.delegateType:p.bindType)||u,d=h[u]||[],l=d.length,f=f?new RegExp(\"(^|\\\\.)\"+f.split(\".\").sort().join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null;for(c=0;c<d.length;c++)m=d[c],(i||a===m.origType)&&(!n||n.guid===m.guid)&&(!f||f.test(m.namespace))&&(!r||r===m.selector||r===\"**\"&&m.selector)&&(d.splice(c--,1),m.selector&&d.delegateCount--,p.remove&&p.remove.call(e,m));d.length===0&&l!==d.length&&((!p.teardown||p.teardown.call(e,f,g.handle)===!1)&&v.removeEvent(e,u,g.handle),delete h[u])}v.isEmptyObject(h)&&(delete g.handle,v.removeData(e,\"events\",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(n,r,s,o){if(!s||s.nodeType!==3&&s.nodeType!==8){var u,a,f,l,c,h,p,d,m,g,y=n.type||n,b=[];if(Y.test(y+v.event.triggered))return;y.indexOf(\"!\")>=0&&(y=y.slice(0,-1),a=!0),y.indexOf(\".\")>=0&&(b=y.split(\".\"),y=b.shift(),b.sort());if((!s||v.event.customEvent[y])&&!v.event.global[y])return;n=typeof n==\"object\"?n[v.expando]?n:new v.Event(y,n):new v.Event(y),n.type=y,n.isTrigger=!0,n.exclusive=a,n.namespace=b.join(\".\"),n.namespace_re=n.namespace?new RegExp(\"(^|\\\\.)\"+b.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,h=y.indexOf(\":\")<0?\"on\"+y:\"\";if(!s){u=v.cache;for(f in u)u[f].events&&u[f].events[y]&&v.event.trigger(n,r,u[f].handle.elem,!0);return}n.result=t,n.target||(n.target=s),r=r!=null?v.makeArray(r):[],r.unshift(n),p=v.event.special[y]||{};if(p.trigger&&p.trigger.apply(s,r)===!1)return;m=[[s,p.bindType||y]];if(!o&&!p.noBubble&&!v.isWindow(s)){g=p.delegateType||y,l=Y.test(g+y)?s:s.parentNode;for(c=s;l;l=l.parentNode)m.push([l,g]),c=l;c===(s.ownerDocument||i)&&m.push([c.defaultView||c.parentWindow||e,g])}for(f=0;f<m.length&&!n.isPropagationStopped();f++)l=m[f][0],n.type=m[f][1],d=(v._data(l,\"events\")||{})[n.type]&&v._data(l,\"handle\"),d&&d.apply(l,r),d=h&&l[h],d&&v.acceptData(l)&&d.apply&&d.apply(l,r)===!1&&n.preventDefault();return n.type=y,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(s.ownerDocument,r)===!1)&&(y!==\"click\"||!v.nodeName(s,\"a\"))&&v.acceptData(s)&&h&&s[y]&&(y!==\"focus\"&&y!==\"blur\"||n.target.offsetWidth!==0)&&!v.isWindow(s)&&(c=s[h],c&&(s[h]=null),v.event.triggered=y,s[y](),v.event.triggered=t,c&&(s[h]=c)),n.result}return},dispatch:function(n){n=v.event.fix(n||e.event);var r,i,s,o,u,a,f,c,h,p,d=(v._data(this,\"events\")||{})[n.type]||[],m=d.delegateCount,g=l.call(arguments),y=!n.exclusive&&!n.namespace,b=v.event.special[n.type]||{},w=[];g[0]=n,n.delegateTarget=this;if(b.preDispatch&&b.preDispatch.call(this,n)===!1)return;if(m&&(!n.button||n.type!==\"click\"))for(s=n.target;s!=this;s=s.parentNode||this)if(s.disabled!==!0||n.type!==\"click\"){u={},f=[];for(r=0;r<m;r++)c=d[r],h=c.selector,u[h]===t&&(u[h]=c.needsContext?v(h,this).index(s)>=0:v.find(h,this,null,[s]).length),u[h]&&f.push(c);f.length&&w.push({elem:s,matches:f})}d.length>m&&w.push({elem:this,matches:d.slice(m)});for(r=0;r<w.length&&!n.isPropagationStopped();r++){a=w[r],n.currentTarget=a.elem;for(i=0;i<a.matches.length&&!n.isImmediatePropagationStopped();i++){c=a.matches[i];if(y||!n.namespace&&!c.namespace||n.namespace_re&&n.namespace_re.test(c.namespace))n.data=c.data,n.handleObj=c,o=((v.event.special[c.origType]||{}).handle||c.handler).apply(a.elem,g),o!==t&&(n.result=o,o===!1&&(n.preventDefault(),n.stopPropagation()))}}return b.postDispatch&&b.postDispatch.call(this,n),n.result},props:\"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return e.which==null&&(e.which=t.charCode!=null?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,n){var r,s,o,u=n.button,a=n.fromElement;return e.pageX==null&&n.clientX!=null&&(r=e.target.ownerDocument||i,s=r.documentElement,o=r.body,e.pageX=n.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),e.pageY=n.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?n.toElement:a),!e.which&&u!==t&&(e.which=u&1?1:u&2?3:u&4?2:0),e}},fix:function(e){if(e[v.expando])return e;var t,n,r=e,s=v.event.fixHooks[e.type]||{},o=s.props?this.props.concat(s.props):this.props;e=v.Event(r);for(t=o.length;t;)n=o[--t],e[n]=r[n];return e.target||(e.target=r.srcElement||i),e.target.nodeType===3&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{delegateType:\"focusin\"},blur:{delegateType:\"focusout\"},beforeunload:{setup:function(e,t,n){v.isWindow(this)&&(this.onbeforeunload=n)},teardown:function(e,t){this.onbeforeunload===t&&(this.onbeforeunload=null)}}},simulate:function(e,t,n,r){var i=v.extend(new v.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?v.event.trigger(i,null,t):v.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},v.event.handle=v.event.dispatch,v.removeEvent=i.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r=\"on\"+t;e.detachEvent&&(typeof e[r]==\"undefined\"&&(e[r]=null),e.detachEvent(r,n))},v.Event=function(e,t){if(!(this instanceof v.Event))return new v.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?tt:et):this.type=e,t&&v.extend(this,t),this.timeStamp=e&&e.timeStamp||v.now(),this[v.expando]=!0},v.Event.prototype={preventDefault:function(){this.isDefaultPrevented=tt;var e=this.originalEvent;if(!e)return;e.preventDefault?e.preventDefault():e.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=tt;var e=this.originalEvent;if(!e)return;e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=tt,this.stopPropagation()},isDefaultPrevented:et,isPropagationStopped:et,isImmediatePropagationStopped:et},v.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){v.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,s=e.handleObj,o=s.selector;if(!i||i!==r&&!v.contains(r,i))e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t;return n}}}),v.support.submitBubbles||(v.event.special.submit={setup:function(){if(v.nodeName(this,\"form\"))return!1;v.event.add(this,\"click._submit keypress._submit\",function(e){var n=e.target,r=v.nodeName(n,\"input\")||v.nodeName(n,\"button\")?n.form:t;r&&!v._data(r,\"_submit_attached\")&&(v.event.add(r,\"submit._submit\",function(e){e._submit_bubble=!0}),v._data(r,\"_submit_attached\",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&v.event.simulate(\"submit\",this.parentNode,e,!0))},teardown:function(){if(v.nodeName(this,\"form\"))return!1;v.event.remove(this,\"._submit\")}}),v.support.changeBubbles||(v.event.special.change={setup:function(){if($.test(this.nodeName)){if(this.type===\"checkbox\"||this.type===\"radio\")v.event.add(this,\"propertychange._change\",function(e){e.originalEvent.propertyName===\"checked\"&&(this._just_changed=!0)}),v.event.add(this,\"click._change\",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),v.event.simulate(\"change\",this,e,!0)});return!1}v.event.add(this,\"beforeactivate._change\",function(e){var t=e.target;$.test(t.nodeName)&&!v._data(t,\"_change_attached\")&&(v.event.add(t,\"change._change\",function(e){this.parentNode&&!e.isSimulated&&!e.isTrigger&&v.event.simulate(\"change\",this.parentNode,e,!0)}),v._data(t,\"_change_attached\",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||t.type!==\"radio\"&&t.type!==\"checkbox\")return e.handleObj.handler.apply(this,arguments)},teardown:function(){return v.event.remove(this,\"._change\"),!$.test(this.nodeName)}}),v.support.focusinBubbles||v.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){v.event.simulate(t,e.target,v.event.fix(e),!0)};v.event.special[t]={setup:function(){n++===0&&i.addEventListener(e,r,!0)},teardown:function(){--n===0&&i.removeEventListener(e,r,!0)}}}),v.fn.extend({on:function(e,n,r,i,s){var o,u;if(typeof e==\"object\"){typeof n!=\"string\"&&(r=r||n,n=t);for(u in e)this.on(u,n,r,e[u],s);return this}r==null&&i==null?(i=n,r=n=t):i==null&&(typeof n==\"string\"?(i=r,r=t):(i=r,r=n,n=t));if(i===!1)i=et;else if(!i)return this;return s===1&&(o=i,i=function(e){return v().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=v.guid++)),this.each(function(){v.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,s;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,v(e.delegateTarget).off(i.namespace?i.origType+\".\"+i.namespace:i.origType,i.selector,i.handler),this;if(typeof e==\"object\"){for(s in e)this.off(s,n,e[s]);return this}if(n===!1||typeof n==\"function\")r=n,n=t;return r===!1&&(r=et),this.each(function(){v.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},live:function(e,t,n){return v(this.context).on(e,this.selector,t,n),this},die:function(e,t){return v(this.context).off(e,this.selector||\"**\",t),this},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,\"**\"):this.off(t,e||\"**\",n)},trigger:function(e,t){return this.each(function(){v.event.trigger(e,t,this)})},triggerHandler:function(e,t){if(this[0])return v.event.trigger(e,t,this[0],!0)},toggle:function(e){var t=arguments,n=e.guid||v.guid++,r=0,i=function(n){var i=(v._data(this,\"lastToggle\"+e.guid)||0)%r;return v._data(this,\"lastToggle\"+e.guid,i+1),n.preventDefault(),t[i].apply(this,arguments)||!1};i.guid=n;while(r<t.length)t[r++].guid=n;return this.click(i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){v.fn[t]=function(e,n){return n==null&&(n=e,e=null),arguments.length>0?this.on(t,null,e,n):this.trigger(t)},Q.test(t)&&(v.event.fixHooks[t]=v.event.keyHooks),G.test(t)&&(v.event.fixHooks[t]=v.event.mouseHooks)}),function(e,t){function nt(e,t,n,r){n=n||[],t=t||g;var i,s,a,f,l=t.nodeType;if(!e||typeof e!=\"string\")return n;if(l!==1&&l!==9)return[];a=o(t);if(!a&&!r)if(i=R.exec(e))if(f=i[1]){if(l===9){s=t.getElementById(f);if(!s||!s.parentNode)return n;if(s.id===f)return n.push(s),n}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(f))&&u(t,s)&&s.id===f)return n.push(s),n}else{if(i[2])return S.apply(n,x.call(t.getElementsByTagName(e),0)),n;if((f=i[3])&&Z&&t.getElementsByClassName)return S.apply(n,x.call(t.getElementsByClassName(f),0)),n}return vt(e.replace(j,\"$1\"),t,n,r,a)}function rt(e){return function(t){var n=t.nodeName.toLowerCase();return n===\"input\"&&t.type===e}}function it(e){return function(t){var n=t.nodeName.toLowerCase();return(n===\"input\"||n===\"button\")&&t.type===e}}function st(e){return N(function(t){return t=+t,N(function(n,r){var i,s=e([],n.length,t),o=s.length;while(o--)n[i=s[o]]&&(n[i]=!(r[i]=n[i]))})})}function ot(e,t,n){if(e===t)return n;var r=e.nextSibling;while(r){if(r===t)return-1;r=r.nextSibling}return 1}function ut(e,t){var n,r,s,o,u,a,f,l=L[d][e+\" \"];if(l)return t?0:l.slice(0);u=e,a=[],f=i.preFilter;while(u){if(!n||(r=F.exec(u)))r&&(u=u.slice(r[0].length)||u),a.push(s=[]);n=!1;if(r=I.exec(u))s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=r[0].replace(j,\" \");for(o in i.filter)(r=J[o].exec(u))&&(!f[o]||(r=f[o](r)))&&(s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=o,n.matches=r);if(!n)break}return t?u.length:u?nt.error(e):L(e,a).slice(0)}function at(e,t,r){var i=t.dir,s=r&&t.dir===\"parentNode\",o=w++;return t.first?function(t,n,r){while(t=t[i])if(s||t.nodeType===1)return e(t,n,r)}:function(t,r,u){if(!u){var a,f=b+\" \"+o+\" \",l=f+n;while(t=t[i])if(s||t.nodeType===1){if((a=t[d])===l)return t.sizset;if(typeof a==\"string\"&&a.indexOf(f)===0){if(t.sizset)return t}else{t[d]=l;if(e(t,r,u))return t.sizset=!0,t;t.sizset=!1}}}else while(t=t[i])if(s||t.nodeType===1)if(e(t,r,u))return t}}function ft(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function lt(e,t,n,r,i){var s,o=[],u=0,a=e.length,f=t!=null;for(;u<a;u++)if(s=e[u])if(!n||n(s,r,i))o.push(s),f&&t.push(u);return o}function ct(e,t,n,r,i,s){return r&&!r[d]&&(r=ct(r)),i&&!i[d]&&(i=ct(i,s)),N(function(s,o,u,a){var f,l,c,h=[],p=[],d=o.length,v=s||dt(t||\"*\",u.nodeType?[u]:u,[]),m=e&&(s||!t)?lt(v,h,e,u,a):v,g=n?i||(s?e:d||r)?[]:o:m;n&&n(m,g,u,a);if(r){f=lt(g,p),r(f,[],u,a),l=f.length;while(l--)if(c=f[l])g[p[l]]=!(m[p[l]]=c)}if(s){if(i||e){if(i){f=[],l=g.length;while(l--)(c=g[l])&&f.push(m[l]=c);i(null,g=[],f,a)}l=g.length;while(l--)(c=g[l])&&(f=i?T.call(s,c):h[l])>-1&&(s[f]=!(o[f]=c))}}else g=lt(g===o?g.splice(d,g.length):g),i?i(null,o,g,a):S.apply(o,g)})}function ht(e){var t,n,r,s=e.length,o=i.relative[e[0].type],u=o||i.relative[\" \"],a=o?1:0,f=at(function(e){return e===t},u,!0),l=at(function(e){return T.call(t,e)>-1},u,!0),h=[function(e,n,r){return!o&&(r||n!==c)||((t=n).nodeType?f(e,n,r):l(e,n,r))}];for(;a<s;a++)if(n=i.relative[e[a].type])h=[at(ft(h),n)];else{n=i.filter[e[a].type].apply(null,e[a].matches);if(n[d]){r=++a;for(;r<s;r++)if(i.relative[e[r].type])break;return ct(a>1&&ft(h),a>1&&e.slice(0,a-1).join(\"\").replace(j,\"$1\"),n,a<r&&ht(e.slice(a,r)),r<s&&ht(e=e.slice(r)),r<s&&e.join(\"\"))}h.push(n)}return ft(h)}function pt(e,t){var r=t.length>0,s=e.length>0,o=function(u,a,f,l,h){var p,d,v,m=[],y=0,w=\"0\",x=u&&[],T=h!=null,N=c,C=u||s&&i.find.TAG(\"*\",h&&a.parentNode||a),k=b+=N==null?1:Math.E;T&&(c=a!==g&&a,n=o.el);for(;(p=C[w])!=null;w++){if(s&&p){for(d=0;v=e[d];d++)if(v(p,a,f)){l.push(p);break}T&&(b=k,n=++o.el)}r&&((p=!v&&p)&&y--,u&&x.push(p))}y+=w;if(r&&w!==y){for(d=0;v=t[d];d++)v(x,m,a,f);if(u){if(y>0)while(w--)!x[w]&&!m[w]&&(m[w]=E.call(l));m=lt(m)}S.apply(l,m),T&&!u&&m.length>0&&y+t.length>1&&nt.uniqueSort(l)}return T&&(b=k,c=N),x};return o.el=0,r?N(o):o}function dt(e,t,n){var r=0,i=t.length;for(;r<i;r++)nt(e,t[r],n);return n}function vt(e,t,n,r,s){var o,u,f,l,c,h=ut(e),p=h.length;if(!r&&h.length===1){u=h[0]=h[0].slice(0);if(u.length>2&&(f=u[0]).type===\"ID\"&&t.nodeType===9&&!s&&i.relative[u[1].type]){t=i.find.ID(f.matches[0].replace($,\"\"),t,s)[0];if(!t)return n;e=e.slice(u.shift().length)}for(o=J.POS.test(e)?-1:u.length-1;o>=0;o--){f=u[o];if(i.relative[l=f.type])break;if(c=i.find[l])if(r=c(f.matches[0].replace($,\"\"),z.test(u[0].type)&&t.parentNode||t,s)){u.splice(o,1),e=r.length&&u.join(\"\");if(!e)return S.apply(n,x.call(r,0)),n;break}}}return a(e,h)(r,t,s,n,z.test(e)),n}function mt(){}var n,r,i,s,o,u,a,f,l,c,h=!0,p=\"undefined\",d=(\"sizcache\"+Math.random()).replace(\".\",\"\"),m=String,g=e.document,y=g.documentElement,b=0,w=0,E=[].pop,S=[].push,x=[].slice,T=[].indexOf||function(e){var t=0,n=this.length;for(;t<n;t++)if(this[t]===e)return t;return-1},N=function(e,t){return e[d]=t==null||t,e},C=function(){var e={},t=[];return N(function(n,r){return t.push(n)>i.cacheLength&&delete e[t.shift()],e[n+\" \"]=r},e)},k=C(),L=C(),A=C(),O=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",M=\"(?:\\\\\\\\.|[-\\\\w]|[^\\\\x00-\\\\xa0])+\",_=M.replace(\"w\",\"w#\"),D=\"([*^$|!~]?=)\",P=\"\\\\[\"+O+\"*(\"+M+\")\"+O+\"*(?:\"+D+O+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+_+\")|)|)\"+O+\"*\\\\]\",H=\":(\"+M+\")(?:\\\\((?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\2|([^()[\\\\]]*|(?:(?:\"+P+\")|[^:]|\\\\\\\\.)*|.*))\\\\)|)\",B=\":(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+O+\"*((?:-\\\\d)?\\\\d*)\"+O+\"*\\\\)|)(?=[^-]|$)\",j=new RegExp(\"^\"+O+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+O+\"+$\",\"g\"),F=new RegExp(\"^\"+O+\"*,\"+O+\"*\"),I=new RegExp(\"^\"+O+\"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\"+O+\"*\"),q=new RegExp(H),R=/^(?:#([\\w\\-]+)|(\\w+)|\\.([\\w\\-]+))$/,U=/^:not/,z=/[\\x20\\t\\r\\n\\f]*[+~]/,W=/:not\\($/,X=/h\\d/i,V=/input|select|textarea|button/i,$=/\\\\(?!\\\\)/g,J={ID:new RegExp(\"^#(\"+M+\")\"),CLASS:new RegExp(\"^\\\\.(\"+M+\")\"),NAME:new RegExp(\"^\\\\[name=['\\\"]?(\"+M+\")['\\\"]?\\\\]\"),TAG:new RegExp(\"^(\"+M.replace(\"w\",\"w*\")+\")\"),ATTR:new RegExp(\"^\"+P),PSEUDO:new RegExp(\"^\"+H),POS:new RegExp(B,\"i\"),CHILD:new RegExp(\"^:(only|nth|first|last)-child(?:\\\\(\"+O+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+O+\"*(?:([+-]|)\"+O+\"*(\\\\d+)|))\"+O+\"*\\\\)|)\",\"i\"),needsContext:new RegExp(\"^\"+O+\"*[>+~]|\"+B,\"i\")},K=function(e){var t=g.createElement(\"div\");try{return e(t)}catch(n){return!1}finally{t=null}},Q=K(function(e){return e.appendChild(g.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),G=K(function(e){return e.innerHTML=\"<a href='#'></a>\",e.firstChild&&typeof e.firstChild.getAttribute!==p&&e.firstChild.getAttribute(\"href\")===\"#\"}),Y=K(function(e){e.innerHTML=\"<select></select>\";var t=typeof e.lastChild.getAttribute(\"multiple\");return t!==\"boolean\"&&t!==\"string\"}),Z=K(function(e){return e.innerHTML=\"<div class='hidden e'></div><div class='hidden'></div>\",!e.getElementsByClassName||!e.getElementsByClassName(\"e\").length?!1:(e.lastChild.className=\"e\",e.getElementsByClassName(\"e\").length===2)}),et=K(function(e){e.id=d+0,e.innerHTML=\"<a name='\"+d+\"'></a><div name='\"+d+\"'></div>\",y.insertBefore(e,y.firstChild);var t=g.getElementsByName&&g.getElementsByName(d).length===2+g.getElementsByName(d+0).length;return r=!g.getElementById(d),y.removeChild(e),t});try{x.call(y.childNodes,0)[0].nodeType}catch(tt){x=function(e){var t,n=[];for(;t=this[e];e++)n.push(t);return n}}nt.matches=function(e,t){return nt(e,null,null,t)},nt.matchesSelector=function(e,t){return nt(t,null,null,[e]).length>0},s=nt.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(i===1||i===9||i===11){if(typeof e.textContent==\"string\")return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=s(e)}else if(i===3||i===4)return e.nodeValue}else for(;t=e[r];r++)n+=s(t);return n},o=nt.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!==\"HTML\":!1},u=nt.contains=y.contains?function(e,t){var n=e.nodeType===9?e.documentElement:e,r=t&&t.parentNode;return e===r||!!(r&&r.nodeType===1&&n.contains&&n.contains(r))}:y.compareDocumentPosition?function(e,t){return t&&!!(e.compareDocumentPosition(t)&16)}:function(e,t){while(t=t.parentNode)if(t===e)return!0;return!1},nt.attr=function(e,t){var n,r=o(e);return r||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):r||Y?e.getAttribute(t):(n=e.getAttributeNode(t),n?typeof e[t]==\"boolean\"?e[t]?t:null:n.specified?n.value:null:null)},i=nt.selectors={cacheLength:50,createPseudo:N,match:J,attrHandle:G?{}:{href:function(e){return e.getAttribute(\"href\",2)},type:function(e){return e.getAttribute(\"type\")}},find:{ID:r?function(e,t,n){if(typeof t.getElementById!==p&&!n){var r=t.getElementById(e);return r&&r.parentNode?[r]:[]}}:function(e,n,r){if(typeof n.getElementById!==p&&!r){var i=n.getElementById(e);return i?i.id===e||typeof i.getAttributeNode!==p&&i.getAttributeNode(\"id\").value===e?[i]:t:[]}},TAG:Q?function(e,t){if(typeof t.getElementsByTagName!==p)return t.getElementsByTagName(e)}:function(e,t){var n=t.getElementsByTagName(e);if(e===\"*\"){var r,i=[],s=0;for(;r=n[s];s++)r.nodeType===1&&i.push(r);return i}return n},NAME:et&&function(e,t){if(typeof t.getElementsByName!==p)return t.getElementsByName(name)},CLASS:Z&&function(e,t,n){if(typeof t.getElementsByClassName!==p&&!n)return t.getElementsByClassName(e)}},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace($,\"\"),e[3]=(e[4]||e[5]||\"\").replace($,\"\"),e[2]===\"~=\"&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),e[1]===\"nth\"?(e[2]||nt.error(e[0]),e[3]=+(e[3]?e[4]+(e[5]||1):2*(e[2]===\"even\"||e[2]===\"odd\")),e[4]=+(e[6]+e[7]||e[2]===\"odd\")):e[2]&&nt.error(e[0]),e},PSEUDO:function(e){var t,n;if(J.CHILD.test(e[0]))return null;if(e[3])e[2]=e[3];else if(t=e[4])q.test(t)&&(n=ut(t,!0))&&(n=t.indexOf(\")\",t.length-n)-t.length)&&(t=t.slice(0,n),e[0]=e[0].slice(0,n)),e[2]=t;return e.slice(0,3)}},filter:{ID:r?function(e){return e=e.replace($,\"\"),function(t){return t.getAttribute(\"id\")===e}}:function(e){return e=e.replace($,\"\"),function(t){var n=typeof t.getAttributeNode!==p&&t.getAttributeNode(\"id\");return n&&n.value===e}},TAG:function(e){return e===\"*\"?function(){return!0}:(e=e.replace($,\"\").toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[d][e+\" \"];return t||(t=new RegExp(\"(^|\"+O+\")\"+e+\"(\"+O+\"|$)\"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==p&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r,i){var s=nt.attr(r,e);return s==null?t===\"!=\":t?(s+=\"\",t===\"=\"?s===n:t===\"!=\"?s!==n:t===\"^=\"?n&&s.indexOf(n)===0:t===\"*=\"?n&&s.indexOf(n)>-1:t===\"$=\"?n&&s.substr(s.length-n.length)===n:t===\"~=\"?(\" \"+s+\" \").indexOf(n)>-1:t===\"|=\"?s===n||s.substr(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r){return e===\"nth\"?function(e){var t,i,s=e.parentNode;if(n===1&&r===0)return!0;if(s){i=0;for(t=s.firstChild;t;t=t.nextSibling)if(t.nodeType===1){i++;if(e===t)break}}return i-=r,i===n||i%n===0&&i/n>=0}:function(t){var n=t;switch(e){case\"only\":case\"first\":while(n=n.previousSibling)if(n.nodeType===1)return!1;if(e===\"first\")return!0;n=t;case\"last\":while(n=n.nextSibling)if(n.nodeType===1)return!1;return!0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||nt.error(\"unsupported pseudo: \"+e);return r[d]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?N(function(e,n){var i,s=r(e,t),o=s.length;while(o--)i=T.call(e,s[o]),e[i]=!(n[i]=s[o])}):function(e){return r(e,0,n)}):r}},pseudos:{not:N(function(e){var t=[],n=[],r=a(e.replace(j,\"$1\"));return r[d]?N(function(e,t,n,i){var s,o=r(e,null,i,[]),u=e.length;while(u--)if(s=o[u])e[u]=!(t[u]=s)}):function(e,i,s){return t[0]=e,r(t,null,s,n),!n.pop()}}),has:N(function(e){return function(t){return nt(e,t).length>0}}),contains:N(function(e){return function(t){return(t.textContent||t.innerText||s(t)).indexOf(e)>-1}}),enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return t===\"input\"&&!!e.checked||t===\"option\"&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},parent:function(e){return!i.pseudos.empty(e)},empty:function(e){var t;e=e.firstChild;while(e){if(e.nodeName>\"@\"||(t=e.nodeType)===3||t===4)return!1;e=e.nextSibling}return!0},header:function(e){return X.test(e.nodeName)},text:function(e){var t,n;return e.nodeName.toLowerCase()===\"input\"&&(t=e.type)===\"text\"&&((n=e.getAttribute(\"type\"))==null||n.toLowerCase()===t)},radio:rt(\"radio\"),checkbox:rt(\"checkbox\"),file:rt(\"file\"),password:rt(\"password\"),image:rt(\"image\"),submit:it(\"submit\"),reset:it(\"reset\"),button:function(e){var t=e.nodeName.toLowerCase();return t===\"input\"&&e.type===\"button\"||t===\"button\"},input:function(e){return V.test(e.nodeName)},focus:function(e){var t=e.ownerDocument;return e===t.activeElement&&(!t.hasFocus||t.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},active:function(e){return e===e.ownerDocument.activeElement},first:st(function(){return[0]}),last:st(function(e,t){return[t-1]}),eq:st(function(e,t,n){return[n<0?n+t:n]}),even:st(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:st(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:st(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:st(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},f=y.compareDocumentPosition?function(e,t){return e===t?(l=!0,0):(!e.compareDocumentPosition||!t.compareDocumentPosition?e.compareDocumentPosition:e.compareDocumentPosition(t)&4)?-1:1}:function(e,t){if(e===t)return l=!0,0;if(e.sourceIndex&&t.sourceIndex)return e.sourceIndex-t.sourceIndex;var n,r,i=[],s=[],o=e.parentNode,u=t.parentNode,a=o;if(o===u)return ot(e,t);if(!o)return-1;if(!u)return 1;while(a)i.unshift(a),a=a.parentNode;a=u;while(a)s.unshift(a),a=a.parentNode;n=i.length,r=s.length;for(var f=0;f<n&&f<r;f++)if(i[f]!==s[f])return ot(i[f],s[f]);return f===n?ot(e,s[f],-1):ot(i[f],t,1)},[0,0].sort(f),h=!l,nt.uniqueSort=function(e){var t,n=[],r=1,i=0;l=h,e.sort(f);if(l){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e},nt.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},a=nt.compile=function(e,t){var n,r=[],i=[],s=A[d][e+\" \"];if(!s){t||(t=ut(e)),n=t.length;while(n--)s=ht(t[n]),s[d]?r.push(s):i.push(s);s=A(e,pt(i,r))}return s},g.querySelectorAll&&function(){var e,t=vt,n=/'|\\\\/g,r=/\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,i=[\":focus\"],s=[\":active\"],u=y.matchesSelector||y.mozMatchesSelector||y.webkitMatchesSelector||y.oMatchesSelector||y.msMatchesSelector;K(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||i.push(\"\\\\[\"+O+\"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\"),e.querySelectorAll(\":checked\").length||i.push(\":checked\")}),K(function(e){e.innerHTML=\"<p test=''></p>\",e.querySelectorAll(\"[test^='']\").length&&i.push(\"[*^$]=\"+O+\"*(?:\\\"\\\"|'')\"),e.innerHTML=\"<input type='hidden'/>\",e.querySelectorAll(\":enabled\").length||i.push(\":enabled\",\":disabled\")}),i=new RegExp(i.join(\"|\")),vt=function(e,r,s,o,u){if(!o&&!u&&!i.test(e)){var a,f,l=!0,c=d,h=r,p=r.nodeType===9&&e;if(r.nodeType===1&&r.nodeName.toLowerCase()!==\"object\"){a=ut(e),(l=r.getAttribute(\"id\"))?c=l.replace(n,\"\\\\$&\"):r.setAttribute(\"id\",c),c=\"[id='\"+c+\"'] \",f=a.length;while(f--)a[f]=c+a[f].join(\"\");h=z.test(e)&&r.parentNode||r,p=a.join(\",\")}if(p)try{return S.apply(s,x.call(h.querySelectorAll(p),0)),s}catch(v){}finally{l||r.removeAttribute(\"id\")}}return t(e,r,s,o,u)},u&&(K(function(t){e=u.call(t,\"div\");try{u.call(t,\"[test!='']:sizzle\"),s.push(\"!=\",H)}catch(n){}}),s=new RegExp(s.join(\"|\")),nt.matchesSelector=function(t,n){n=n.replace(r,\"='$1']\");if(!o(t)&&!s.test(n)&&!i.test(n))try{var a=u.call(t,n);if(a||e||t.document&&t.document.nodeType!==11)return a}catch(f){}return nt(n,null,null,[t]).length>0})}(),i.pseudos.nth=i.pseudos.eq,i.filters=mt.prototype=i.pseudos,i.setFilters=new mt,nt.attr=v.attr,v.find=nt,v.expr=nt.selectors,v.expr[\":\"]=v.expr.pseudos,v.unique=nt.uniqueSort,v.text=nt.getText,v.isXMLDoc=nt.isXML,v.contains=nt.contains}(e);var nt=/Until$/,rt=/^(?:parents|prev(?:Until|All))/,it=/^.[^:#\\[\\.,]*$/,st=v.expr.match.needsContext,ot={children:!0,contents:!0,next:!0,prev:!0};v.fn.extend({find:function(e){var t,n,r,i,s,o,u=this;if(typeof e!=\"string\")return v(e).filter(function(){for(t=0,n=u.length;t<n;t++)if(v.contains(u[t],this))return!0});o=this.pushStack(\"\",\"find\",e);for(t=0,n=this.length;t<n;t++){r=o.length,v.find(e,this[t],o);if(t>0)for(i=r;i<o.length;i++)for(s=0;s<r;s++)if(o[s]===o[i]){o.splice(i--,1);break}}return o},has:function(e){var t,n=v(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(v.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1),\"not\",e)},filter:function(e){return this.pushStack(ft(this,e,!0),\"filter\",e)},is:function(e){return!!e&&(typeof e==\"string\"?st.test(e)?v(e,this.context).index(this[0])>=0:v.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,s=[],o=st.test(e)||typeof e!=\"string\"?v(e,t||this.context):0;for(;r<i;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&n.nodeType!==11){if(o?o.index(n)>-1:v.find.matchesSelector(n,e)){s.push(n);break}n=n.parentNode}}return s=s.length>1?v.unique(s):s,this.pushStack(s,\"closest\",e)},index:function(e){return e?typeof e==\"string\"?v.inArray(this[0],v(e)):v.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(e,t){var n=typeof e==\"string\"?v(e,t):v.makeArray(e&&e.nodeType?[e]:e),r=v.merge(this.get(),n);return this.pushStack(ut(n[0])||ut(r[0])?r:v.unique(r))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}}),v.fn.andSelf=v.fn.addBack,v.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return v.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return v.dir(e,\"parentNode\",n)},next:function(e){return at(e,\"nextSibling\")},prev:function(e){return at(e,\"previousSibling\")},nextAll:function(e){return v.dir(e,\"nextSibling\")},prevAll:function(e){return v.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return v.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return v.dir(e,\"previousSibling\",n)},siblings:function(e){return v.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return v.sibling(e.firstChild)},contents:function(e){return v.nodeName(e,\"iframe\")?e.contentDocument||e.contentWindow.document:v.merge([],e.childNodes)}},function(e,t){v.fn[e]=function(n,r){var i=v.map(this,t,n);return nt.test(e)||(r=n),r&&typeof r==\"string\"&&(i=v.filter(r,i)),i=this.length>1&&!ot[e]?v.unique(i):i,this.length>1&&rt.test(e)&&(i=i.reverse()),this.pushStack(i,e,l.call(arguments).join(\",\"))}}),v.extend({filter:function(e,t,n){return n&&(e=\":not(\"+e+\")\"),t.length===1?v.find.matchesSelector(t[0],e)?[t[0]]:[]:v.find.matches(e,t)},dir:function(e,n,r){var i=[],s=e[n];while(s&&s.nodeType!==9&&(r===t||s.nodeType!==1||!v(s).is(r)))s.nodeType===1&&i.push(s),s=s[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)e.nodeType===1&&e!==t&&n.push(e);return n}});var ct=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",ht=/ jQuery\\d+=\"(?:null|\\d+)\"/g,pt=/^\\s+/,dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,vt=/<([\\w:]+)/,mt=/<tbody/i,gt=/<|&#?\\w+;/,yt=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,wt=new RegExp(\"<(?:\"+ct+\")[\\\\s/>]\",\"i\"),Et=/^(?:checkbox|radio)$/,St=/checked\\s*(?:[^=]|=\\s*.checked.)/i,xt=/\\/(java|ecma)script/i,Tt=/^\\s*<!(?:\\[CDATA\\[|\\-\\-)|[\\]\\-]{2}>\\s*$/g,Nt={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],area:[1,\"<map>\",\"</map>\"],_default:[0,\"\",\"\"]},Ct=lt(i),kt=Ct.appendChild(i.createElement(\"div\"));Nt.optgroup=Nt.option,Nt.tbody=Nt.tfoot=Nt.colgroup=Nt.caption=Nt.thead,Nt.th=Nt.td,v.support.htmlSerialize||(Nt._default=[1,\"X<div>\",\"</div>\"]),v.fn.extend({text:function(e){return v.access(this,function(e){return e===t?v.text(this):this.empty().append((this[0]&&this[0].ownerDocument||i).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(v.isFunction(e))return this.each(function(t){v(this).wrapAll(e.call(this,t))});if(this[0]){var t=v(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&e.firstChild.nodeType===1)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return v.isFunction(e)?this.each(function(t){v(this).wrapInner(e.call(this,t))}):this.each(function(){var t=v(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=v.isFunction(e);return this.each(function(n){v(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){v.nodeName(this,\"body\")||v(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(e,this.firstChild)})},before:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(e,this),\"before\",this.selector)}},after:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this.nextSibling)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(this,e),\"after\",this.selector)}},remove:function(e,t){var n,r=0;for(;(n=this[r])!=null;r++)if(!e||v.filter(e,[n]).length)!t&&n.nodeType===1&&(v.cleanData(n.getElementsByTagName(\"*\")),v.cleanData([n])),n.parentNode&&n.parentNode.removeChild(n);return this},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){e.nodeType===1&&v.cleanData(e.getElementsByTagName(\"*\"));while(e.firstChild)e.removeChild(e.firstChild)}return this},clone:function(e,t){return e=e==null?!1:e,t=t==null?e:t,this.map(function(){return v.clone(this,e,t)})},html:function(e){return v.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return n.nodeType===1?n.innerHTML.replace(ht,\"\"):t;if(typeof e==\"string\"&&!yt.test(e)&&(v.support.htmlSerialize||!wt.test(e))&&(v.support.leadingWhitespace||!pt.test(e))&&!Nt[(vt.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=e.replace(dt,\"<$1></$2>\");try{for(;r<i;r++)n=this[r]||{},n.nodeType===1&&(v.cleanData(n.getElementsByTagName(\"*\")),n.innerHTML=e);n=0}catch(s){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){return ut(this[0])?this.length?this.pushStack(v(v.isFunction(e)?e():e),\"replaceWith\",e):this:v.isFunction(e)?this.each(function(t){var n=v(this),r=n.html();n.replaceWith(e.call(this,t,r))}):(typeof e!=\"string\"&&(e=v(e).detach()),this.each(function(){var t=this.nextSibling,n=this.parentNode;v(this).remove(),t?v(t).before(e):v(n).append(e)}))},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=[].concat.apply([],e);var i,s,o,u,a=0,f=e[0],l=[],c=this.length;if(!v.support.checkClone&&c>1&&typeof f==\"string\"&&St.test(f))return this.each(function(){v(this).domManip(e,n,r)});if(v.isFunction(f))return this.each(function(i){var s=v(this);e[0]=f.call(this,i,n?s.html():t),s.domManip(e,n,r)});if(this[0]){i=v.buildFragment(e,this,l),o=i.fragment,s=o.firstChild,o.childNodes.length===1&&(o=s);if(s){n=n&&v.nodeName(s,\"tr\");for(u=i.cacheable||c-1;a<c;a++)r.call(n&&v.nodeName(this[a],\"table\")?Lt(this[a],\"tbody\"):this[a],a===u?o:v.clone(o,!0,!0))}o=s=null,l.length&&v.each(l,function(e,t){t.src?v.ajax?v.ajax({url:t.src,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0}):v.error(\"no ajax\"):v.globalEval((t.text||t.textContent||t.innerHTML||\"\").replace(Tt,\"\")),t.parentNode&&t.parentNode.removeChild(t)})}return this}}),v.buildFragment=function(e,n,r){var s,o,u,a=e[0];return n=n||i,n=!n.nodeType&&n[0]||n,n=n.ownerDocument||n,e.length===1&&typeof a==\"string\"&&a.length<512&&n===i&&a.charAt(0)===\"<\"&&!bt.test(a)&&(v.support.checkClone||!St.test(a))&&(v.support.html5Clone||!wt.test(a))&&(o=!0,s=v.fragments[a],u=s!==t),s||(s=n.createDocumentFragment(),v.clean(e,n,s,r),o&&(v.fragments[a]=u&&s)),{fragment:s,cacheable:o}},v.fragments={},v.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){v.fn[e]=function(n){var r,i=0,s=[],o=v(n),u=o.length,a=this.length===1&&this[0].parentNode;if((a==null||a&&a.nodeType===11&&a.childNodes.length===1)&&u===1)return o[t](this[0]),this;for(;i<u;i++)r=(i>0?this.clone(!0):this).get(),v(o[i])[t](r),s=s.concat(r);return this.pushStack(s,e,o.selector)}}),v.extend({clone:function(e,t,n){var r,i,s,o;v.support.html5Clone||v.isXMLDoc(e)||!wt.test(\"<\"+e.nodeName+\">\")?o=e.cloneNode(!0):(kt.innerHTML=e.outerHTML,kt.removeChild(o=kt.firstChild));if((!v.support.noCloneEvent||!v.support.noCloneChecked)&&(e.nodeType===1||e.nodeType===11)&&!v.isXMLDoc(e)){Ot(e,o),r=Mt(e),i=Mt(o);for(s=0;r[s];++s)i[s]&&Ot(r[s],i[s])}if(t){At(e,o);if(n){r=Mt(e),i=Mt(o);for(s=0;r[s];++s)At(r[s],i[s])}}return r=i=null,o},clean:function(e,t,n,r){var s,o,u,a,f,l,c,h,p,d,m,g,y=t===i&&Ct,b=[];if(!t||typeof t.createDocumentFragment==\"undefined\")t=i;for(s=0;(u=e[s])!=null;s++){typeof u==\"number\"&&(u+=\"\");if(!u)continue;if(typeof u==\"string\")if(!gt.test(u))u=t.createTextNode(u);else{y=y||lt(t),c=t.createElement(\"div\"),y.appendChild(c),u=u.replace(dt,\"<$1></$2>\"),a=(vt.exec(u)||[\"\",\"\"])[1].toLowerCase(),f=Nt[a]||Nt._default,l=f[0],c.innerHTML=f[1]+u+f[2];while(l--)c=c.lastChild;if(!v.support.tbody){h=mt.test(u),p=a===\"table\"&&!h?c.firstChild&&c.firstChild.childNodes:f[1]===\"<table>\"&&!h?c.childNodes:[];for(o=p.length-1;o>=0;--o)v.nodeName(p[o],\"tbody\")&&!p[o].childNodes.length&&p[o].parentNode.removeChild(p[o])}!v.support.leadingWhitespace&&pt.test(u)&&c.insertBefore(t.createTextNode(pt.exec(u)[0]),c.firstChild),u=c.childNodes,c.parentNode.removeChild(c)}u.nodeType?b.push(u):v.merge(b,u)}c&&(u=c=y=null);if(!v.support.appendChecked)for(s=0;(u=b[s])!=null;s++)v.nodeName(u,\"input\")?_t(u):typeof u.getElementsByTagName!=\"undefined\"&&v.grep(u.getElementsByTagName(\"input\"),_t);if(n){m=function(e){if(!e.type||xt.test(e.type))return r?r.push(e.parentNode?e.parentNode.removeChild(e):e):n.appendChild(e)};for(s=0;(u=b[s])!=null;s++)if(!v.nodeName(u,\"script\")||!m(u))n.appendChild(u),typeof u.getElementsByTagName!=\"undefined\"&&(g=v.grep(v.merge([],u.getElementsByTagName(\"script\")),m),b.splice.apply(b,[s+1,0].concat(g)),s+=g.length)}return b},cleanData:function(e,t){var n,r,i,s,o=0,u=v.expando,a=v.cache,f=v.support.deleteExpando,l=v.event.special;for(;(i=e[o])!=null;o++)if(t||v.acceptData(i)){r=i[u],n=r&&a[r];if(n){if(n.events)for(s in n.events)l[s]?v.event.remove(i,s):v.removeEvent(i,s,n.handle);a[r]&&(delete a[r],f?delete i[u]:i.removeAttribute?i.removeAttribute(u):i[u]=null,v.deletedIds.push(r))}}}}),function(){var e,t;v.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \\/]([\\w.]+)/.exec(e)||/(webkit)[ \\/]([\\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(e)||/(msie) ([\\w.]+)/.exec(e)||e.indexOf(\"compatible\")<0&&/(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(e)||[];return{browser:t[1]||\"\",version:t[2]||\"0\"}},e=v.uaMatch(o.userAgent),t={},e.browser&&(t[e.browser]=!0,t.version=e.version),t.chrome?t.webkit=!0:t.webkit&&(t.safari=!0),v.browser=t,v.sub=function(){function e(t,n){return new e.fn.init(t,n)}v.extend(!0,e,this),e.superclass=this,e.fn=e.prototype=this(),e.fn.constructor=e,e.sub=this.sub,e.fn.init=function(r,i){return i&&i instanceof v&&!(i instanceof e)&&(i=e(i)),v.fn.init.call(this,r,i,t)},e.fn.init.prototype=e.fn;var t=e(i);return e}}();var Dt,Pt,Ht,Bt=/alpha\\([^)]*\\)/i,jt=/opacity=([^)]*)/,Ft=/^(top|right|bottom|left)$/,It=/^(none|table(?!-c[ea]).+)/,qt=/^margin/,Rt=new RegExp(\"^(\"+m+\")(.*)$\",\"i\"),Ut=new RegExp(\"^(\"+m+\")(?!px)[a-z%]+$\",\"i\"),zt=new RegExp(\"^([-+])=(\"+m+\")\",\"i\"),Wt={BODY:\"block\"},Xt={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Vt={letterSpacing:0,fontWeight:400},$t=[\"Top\",\"Right\",\"Bottom\",\"Left\"],Jt=[\"Webkit\",\"O\",\"Moz\",\"ms\"],Kt=v.fn.toggle;v.fn.extend({css:function(e,n){return v.access(this,function(e,n,r){return r!==t?v.style(e,n,r):v.css(e,n)},e,n,arguments.length>1)},show:function(){return Yt(this,!0)},hide:function(){return Yt(this)},toggle:function(e,t){var n=typeof e==\"boolean\";return v.isFunction(e)&&v.isFunction(t)?Kt.apply(this,arguments):this.each(function(){(n?e:Gt(this))?v(this).show():v(this).hide()})}}),v.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Dt(e,\"opacity\");return n===\"\"?\"1\":n}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":v.support.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(e,n,r,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style)return;var s,o,u,a=v.camelCase(n),f=e.style;n=v.cssProps[a]||(v.cssProps[a]=Qt(f,a)),u=v.cssHooks[n]||v.cssHooks[a];if(r===t)return u&&\"get\"in u&&(s=u.get(e,!1,i))!==t?s:f[n];o=typeof r,o===\"string\"&&(s=zt.exec(r))&&(r=(s[1]+1)*s[2]+parseFloat(v.css(e,n)),o=\"number\");if(r==null||o===\"number\"&&isNaN(r))return;o===\"number\"&&!v.cssNumber[a]&&(r+=\"px\");if(!u||!(\"set\"in u)||(r=u.set(e,r,i))!==t)try{f[n]=r}catch(l){}},css:function(e,n,r,i){var s,o,u,a=v.camelCase(n);return n=v.cssProps[a]||(v.cssProps[a]=Qt(e.style,a)),u=v.cssHooks[n]||v.cssHooks[a],u&&\"get\"in u&&(s=u.get(e,!0,i)),s===t&&(s=Dt(e,n)),s===\"normal\"&&n in Vt&&(s=Vt[n]),r||i!==t?(o=parseFloat(s),r||v.isNumeric(o)?o||0:s):s},swap:function(e,t,n){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];r=n.call(e);for(i in t)e.style[i]=s[i];return r}}),e.getComputedStyle?Dt=function(t,n){var r,i,s,o,u=e.getComputedStyle(t,null),a=t.style;return u&&(r=u.getPropertyValue(n)||u[n],r===\"\"&&!v.contains(t.ownerDocument,t)&&(r=v.style(t,n)),Ut.test(r)&&qt.test(n)&&(i=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=u.width,a.width=i,a.minWidth=s,a.maxWidth=o)),r}:i.documentElement.currentStyle&&(Dt=function(e,t){var n,r,i=e.currentStyle&&e.currentStyle[t],s=e.style;return i==null&&s&&s[t]&&(i=s[t]),Ut.test(i)&&!Ft.test(t)&&(n=s.left,r=e.runtimeStyle&&e.runtimeStyle.left,r&&(e.runtimeStyle.left=e.currentStyle.left),s.left=t===\"fontSize\"?\"1em\":i,i=s.pixelLeft+\"px\",s.left=n,r&&(e.runtimeStyle.left=r)),i===\"\"?\"auto\":i}),v.each([\"height\",\"width\"],function(e,t){v.cssHooks[t]={get:function(e,n,r){if(n)return e.offsetWidth===0&&It.test(Dt(e,\"display\"))?v.swap(e,Xt,function(){return tn(e,t,r)}):tn(e,t,r)},set:function(e,n,r){return Zt(e,n,r?en(e,t,r,v.support.boxSizing&&v.css(e,\"boxSizing\")===\"border-box\"):0)}}}),v.support.opacity||(v.cssHooks.opacity={get:function(e,t){return jt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":t?\"1\":\"\"},set:function(e,t){var n=e.style,r=e.currentStyle,i=v.isNumeric(t)?\"alpha(opacity=\"+t*100+\")\":\"\",s=r&&r.filter||n.filter||\"\";n.zoom=1;if(t>=1&&v.trim(s.replace(Bt,\"\"))===\"\"&&n.removeAttribute){n.removeAttribute(\"filter\");if(r&&!r.filter)return}n.filter=Bt.test(s)?s.replace(Bt,i):s+\" \"+i}}),v(function(){v.support.reliableMarginRight||(v.cssHooks.marginRight={get:function(e,t){return v.swap(e,{display:\"inline-block\"},function(){if(t)return Dt(e,\"marginRight\")})}}),!v.support.pixelPosition&&v.fn.position&&v.each([\"top\",\"left\"],function(e,t){v.cssHooks[t]={get:function(e,n){if(n){var r=Dt(e,t);return Ut.test(r)?v(e).position()[t]+\"px\":r}}}})}),v.expr&&v.expr.filters&&(v.expr.filters.hidden=function(e){return e.offsetWidth===0&&e.offsetHeight===0||!v.support.reliableHiddenOffsets&&(e.style&&e.style.display||Dt(e,\"display\"))===\"none\"},v.expr.filters.visible=function(e){return!v.expr.filters.hidden(e)}),v.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){v.cssHooks[e+t]={expand:function(n){var r,i=typeof n==\"string\"?n.split(\" \"):[n],s={};for(r=0;r<4;r++)s[e+$t[r]+t]=i[r]||i[r-2]||i[0];return s}},qt.test(e)||(v.cssHooks[e+t].set=Zt)});var rn=/%20/g,sn=/\\[\\]$/,on=/\\r?\\n/g,un=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,an=/^(?:select|textarea)/i;v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?v.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||an.test(this.nodeName)||un.test(this.type))}).map(function(e,t){var n=v(this).val();return n==null?null:v.isArray(n)?v.map(n,function(e,n){return{name:t.name,value:e.replace(on,\"\\r\\n\")}}):{name:t.name,value:n.replace(on,\"\\r\\n\")}}).get()}}),v.param=function(e,n){var r,i=[],s=function(e,t){t=v.isFunction(t)?t():t==null?\"\":t,i[i.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};n===t&&(n=v.ajaxSettings&&v.ajaxSettings.traditional);if(v.isArray(e)||e.jquery&&!v.isPlainObject(e))v.each(e,function(){s(this.name,this.value)});else for(r in e)fn(r,e[r],n,s);return i.join(\"&\").replace(rn,\"+\")};var ln,cn,hn=/#.*$/,pn=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,dn=/^(?:about|app|app\\-storage|.+\\-extension|file|res|widget):$/,vn=/^(?:GET|HEAD)$/,mn=/^\\/\\//,gn=/\\?/,yn=/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,bn=/([?&])_=[^&]*/,wn=/^([\\w\\+\\.\\-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,En=v.fn.load,Sn={},xn={},Tn=[\"*/\"]+[\"*\"];try{cn=s.href}catch(Nn){cn=i.createElement(\"a\"),cn.href=\"\",cn=cn.href}ln=wn.exec(cn.toLowerCase())||[],v.fn.load=function(e,n,r){if(typeof e!=\"string\"&&En)return En.apply(this,arguments);if(!this.length)return this;var i,s,o,u=this,a=e.indexOf(\" \");return a>=0&&(i=e.slice(a,e.length),e=e.slice(0,a)),v.isFunction(n)?(r=n,n=t):n&&typeof n==\"object\"&&(s=\"POST\"),v.ajax({url:e,type:s,dataType:\"html\",data:n,complete:function(e,t){r&&u.each(r,o||[e.responseText,t,e])}}).done(function(e){o=arguments,u.html(i?v(\"<div>\").append(e.replace(yn,\"\")).find(i):e)}),this},v.each(\"ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend\".split(\" \"),function(e,t){v.fn[t]=function(e){return this.on(t,e)}}),v.each([\"get\",\"post\"],function(e,n){v[n]=function(e,r,i,s){return v.isFunction(r)&&(s=s||i,i=r,r=t),v.ajax({type:n,url:e,data:r,success:i,dataType:s})}}),v.extend({getScript:function(e,n){return v.get(e,t,n,\"script\")},getJSON:function(e,t,n){return v.get(e,t,n,\"json\")},ajaxSetup:function(e,t){return t?Ln(e,v.ajaxSettings):(t=e,e=v.ajaxSettings),Ln(e,t),e},ajaxSettings:{url:cn,isLocal:dn.test(ln[1]),global:!0,type:\"GET\",contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",processData:!0,async:!0,accepts:{xml:\"application/xml, text/xml\",html:\"text/html\",text:\"text/plain\",json:\"application/json, text/javascript\",\"*\":Tn},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\"},converters:{\"* text\":e.String,\"text html\":!0,\"text json\":v.parseJSON,\"text xml\":v.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:Cn(Sn),ajaxTransport:Cn(xn),ajax:function(e,n){function T(e,n,s,a){var l,y,b,w,S,T=n;if(E===2)return;E=2,u&&clearTimeout(u),o=t,i=a||\"\",x.readyState=e>0?4:0,s&&(w=An(c,x,s));if(e>=200&&e<300||e===304)c.ifModified&&(S=x.getResponseHeader(\"Last-Modified\"),S&&(v.lastModified[r]=S),S=x.getResponseHeader(\"Etag\"),S&&(v.etag[r]=S)),e===304?(T=\"notmodified\",l=!0):(l=On(c,w),T=l.state,y=l.data,b=l.error,l=!b);else{b=T;if(!T||e)T=\"error\",e<0&&(e=0)}x.status=e,x.statusText=(n||T)+\"\",l?d.resolveWith(h,[y,T,x]):d.rejectWith(h,[x,T,b]),x.statusCode(g),g=t,f&&p.trigger(\"ajax\"+(l?\"Success\":\"Error\"),[x,c,l?y:b]),m.fireWith(h,[x,T]),f&&(p.trigger(\"ajaxComplete\",[x,c]),--v.active||v.event.trigger(\"ajaxStop\"))}typeof e==\"object\"&&(n=e,e=t),n=n||{};var r,i,s,o,u,a,f,l,c=v.ajaxSetup({},n),h=c.context||c,p=h!==c&&(h.nodeType||h instanceof v)?v(h):v.event,d=v.Deferred(),m=v.Callbacks(\"once memory\"),g=c.statusCode||{},b={},w={},E=0,S=\"canceled\",x={readyState:0,setRequestHeader:function(e,t){if(!E){var n=e.toLowerCase();e=w[n]=w[n]||e,b[e]=t}return this},getAllResponseHeaders:function(){return E===2?i:null},getResponseHeader:function(e){var n;if(E===2){if(!s){s={};while(n=pn.exec(i))s[n[1].toLowerCase()]=n[2]}n=s[e.toLowerCase()]}return n===t?null:n},overrideMimeType:function(e){return E||(c.mimeType=e),this},abort:function(e){return e=e||S,o&&o.abort(e),T(0,e),this}};d.promise(x),x.success=x.done,x.error=x.fail,x.complete=m.add,x.statusCode=function(e){if(e){var t;if(E<2)for(t in e)g[t]=[g[t],e[t]];else t=e[x.status],x.always(t)}return this},c.url=((e||c.url)+\"\").replace(hn,\"\").replace(mn,ln[1]+\"//\"),c.dataTypes=v.trim(c.dataType||\"*\").toLowerCase().split(y),c.crossDomain==null&&(a=wn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===ln[1]&&a[2]===ln[2]&&(a[3]||(a[1]===\"http:\"?80:443))==(ln[3]||(ln[1]===\"http:\"?80:443)))),c.data&&c.processData&&typeof c.data!=\"string\"&&(c.data=v.param(c.data,c.traditional)),kn(Sn,c,n,x);if(E===2)return x;f=c.global,c.type=c.type.toUpperCase(),c.hasContent=!vn.test(c.type),f&&v.active++===0&&v.event.trigger(\"ajaxStart\");if(!c.hasContent){c.data&&(c.url+=(gn.test(c.url)?\"&\":\"?\")+c.data,delete c.data),r=c.url;if(c.cache===!1){var N=v.now(),C=c.url.replace(bn,\"$1_=\"+N);c.url=C+(C===c.url?(gn.test(c.url)?\"&\":\"?\")+\"_=\"+N:\"\")}}(c.data&&c.hasContent&&c.contentType!==!1||n.contentType)&&x.setRequestHeader(\"Content-Type\",c.contentType),c.ifModified&&(r=r||c.url,v.lastModified[r]&&x.setRequestHeader(\"If-Modified-Since\",v.lastModified[r]),v.etag[r]&&x.setRequestHeader(\"If-None-Match\",v.etag[r])),x.setRequestHeader(\"Accept\",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+(c.dataTypes[0]!==\"*\"?\", \"+Tn+\"; q=0.01\":\"\"):c.accepts[\"*\"]);for(l in c.headers)x.setRequestHeader(l,c.headers[l]);if(!c.beforeSend||c.beforeSend.call(h,x,c)!==!1&&E!==2){S=\"abort\";for(l in{success:1,error:1,complete:1})x[l](c[l]);o=kn(xn,c,n,x);if(!o)T(-1,\"No Transport\");else{x.readyState=1,f&&p.trigger(\"ajaxSend\",[x,c]),c.async&&c.timeout>0&&(u=setTimeout(function(){x.abort(\"timeout\")},c.timeout));try{E=1,o.send(b,T)}catch(k){if(!(E<2))throw k;T(-1,k)}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var Mn=[],_n=/\\?/,Dn=/(=)\\?(?=&|$)|\\?\\?/,Pn=v.now();v.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=Mn.pop()||v.expando+\"_\"+Pn++;return this[e]=!0,e}}),v.ajaxPrefilter(\"json jsonp\",function(n,r,i){var s,o,u,a=n.data,f=n.url,l=n.jsonp!==!1,c=l&&Dn.test(f),h=l&&!c&&typeof a==\"string\"&&!(n.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Dn.test(a);if(n.dataTypes[0]===\"jsonp\"||c||h)return s=n.jsonpCallback=v.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,o=e[s],c?n.url=f.replace(Dn,\"$1\"+s):h?n.data=a.replace(Dn,\"$1\"+s):l&&(n.url+=(_n.test(f)?\"&\":\"?\")+n.jsonp+\"=\"+s),n.converters[\"script json\"]=function(){return u||v.error(s+\" was not called\"),u[0]},n.dataTypes[0]=\"json\",e[s]=function(){u=arguments},i.always(function(){e[s]=o,n[s]&&(n.jsonpCallback=r.jsonpCallback,Mn.push(s)),u&&v.isFunction(o)&&o(u[0]),u=o=t}),\"script\"}),v.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/javascript|ecmascript/},converters:{\"text script\":function(e){return v.globalEval(e),e}}}),v.ajaxPrefilter(\"script\",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\",e.global=!1)}),v.ajaxTransport(\"script\",function(e){if(e.crossDomain){var n,r=i.head||i.getElementsByTagName(\"head\")[0]||i.documentElement;return{send:function(s,o){n=i.createElement(\"script\"),n.async=\"async\",e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,i){if(i||!n.readyState||/loaded|complete/.test(n.readyState))n.onload=n.onreadystatechange=null,r&&n.parentNode&&r.removeChild(n),n=t,i||o(200,\"success\")},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(0,1)}}}});var Hn,Bn=e.ActiveXObject?function(){for(var e in Hn)Hn[e](0,1)}:!1,jn=0;v.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&Fn()||In()}:Fn,function(e){v.extend(v.support,{ajax:!!e,cors:!!e&&\"withCredentials\"in e})}(v.ajaxSettings.xhr()),v.support.ajax&&v.ajaxTransport(function(n){if(!n.crossDomain||v.support.cors){var r;return{send:function(i,s){var o,u,a=n.xhr();n.username?a.open(n.type,n.url,n.async,n.username,n.password):a.open(n.type,n.url,n.async);if(n.xhrFields)for(u in n.xhrFields)a[u]=n.xhrFields[u];n.mimeType&&a.overrideMimeType&&a.overrideMimeType(n.mimeType),!n.crossDomain&&!i[\"X-Requested-With\"]&&(i[\"X-Requested-With\"]=\"XMLHttpRequest\");try{for(u in i)a.setRequestHeader(u,i[u])}catch(f){}a.send(n.hasContent&&n.data||null),r=function(e,i){var u,f,l,c,h;try{if(r&&(i||a.readyState===4)){r=t,o&&(a.onreadystatechange=v.noop,Bn&&delete Hn[o]);if(i)a.readyState!==4&&a.abort();else{u=a.status,l=a.getAllResponseHeaders(),c={},h=a.responseXML,h&&h.documentElement&&(c.xml=h);try{c.text=a.responseText}catch(p){}try{f=a.statusText}catch(p){f=\"\"}!u&&n.isLocal&&!n.crossDomain?u=c.text?200:404:u===1223&&(u=204)}}}catch(d){i||s(-1,d)}c&&s(u,f,c,l)},n.async?a.readyState===4?setTimeout(r,0):(o=++jn,Bn&&(Hn||(Hn={},v(e).unload(Bn)),Hn[o]=r),a.onreadystatechange=r):r()},abort:function(){r&&r(0,1)}}}});var qn,Rn,Un=/^(?:toggle|show|hide)$/,zn=new RegExp(\"^(?:([-+])=|)(\"+m+\")([a-z%]*)$\",\"i\"),Wn=/queueHooks$/,Xn=[Gn],Vn={\"*\":[function(e,t){var n,r,i=this.createTween(e,t),s=zn.exec(t),o=i.cur(),u=+o||0,a=1,f=20;if(s){n=+s[2],r=s[3]||(v.cssNumber[e]?\"\":\"px\");if(r!==\"px\"&&u){u=v.css(i.elem,e,!0)||n||1;do a=a||\".5\",u/=a,v.style(i.elem,e,u+r);while(a!==(a=i.cur()/o)&&a!==1&&--f)}i.unit=r,i.start=u,i.end=s[1]?u+(s[1]+1)*n:n}return i}]};v.Animation=v.extend(Kn,{tweener:function(e,t){v.isFunction(e)?(t=e,e=[\"*\"]):e=e.split(\" \");var n,r=0,i=e.length;for(;r<i;r++)n=e[r],Vn[n]=Vn[n]||[],Vn[n].unshift(t)},prefilter:function(e,t){t?Xn.unshift(e):Xn.push(e)}}),v.Tween=Yn,Yn.prototype={constructor:Yn,init:function(e,t,n,r,i,s){this.elem=e,this.prop=n,this.easing=i||\"swing\",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(v.cssNumber[n]?\"\":\"px\")},cur:function(){var e=Yn.propHooks[this.prop];return e&&e.get?e.get(this):Yn.propHooks._default.get(this)},run:function(e){var t,n=Yn.propHooks[this.prop];return this.options.duration?this.pos=t=v.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Yn.propHooks._default.set(this),this}},Yn.prototype.init.prototype=Yn.prototype,Yn.propHooks={_default:{get:function(e){var t;return e.elem[e.prop]==null||!!e.elem.style&&e.elem.style[e.prop]!=null?(t=v.css(e.elem,e.prop,!1,\"\"),!t||t===\"auto\"?0:t):e.elem[e.prop]},set:function(e){v.fx.step[e.prop]?v.fx.step[e.prop](e):e.elem.style&&(e.elem.style[v.cssProps[e.prop]]!=null||v.cssHooks[e.prop])?v.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Yn.propHooks.scrollTop=Yn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},v.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=v.fn[t];v.fn[t]=function(r,i,s){return r==null||typeof r==\"boolean\"||!e&&v.isFunction(r)&&v.isFunction(i)?n.apply(this,arguments):this.animate(Zn(t,!0),r,i,s)}}),v.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Gt).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=v.isEmptyObject(e),s=v.speed(t,n,r),o=function(){var t=Kn(this,v.extend({},e),s);i&&t.stop(!0)};return i||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return typeof e!=\"string\"&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,n=e!=null&&e+\"queueHooks\",s=v.timers,o=v._data(this);if(n)o[n]&&o[n].stop&&i(o[n]);else for(n in o)o[n]&&o[n].stop&&Wn.test(n)&&i(o[n]);for(n=s.length;n--;)s[n].elem===this&&(e==null||s[n].queue===e)&&(s[n].anim.stop(r),t=!1,s.splice(n,1));(t||!r)&&v.dequeue(this,e)})}}),v.each({slideDown:Zn(\"show\"),slideUp:Zn(\"hide\"),slideToggle:Zn(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){v.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),v.speed=function(e,t,n){var r=e&&typeof e==\"object\"?v.extend({},e):{complete:n||!n&&t||v.isFunction(e)&&e,duration:e,easing:n&&t||t&&!v.isFunction(t)&&t};r.duration=v.fx.off?0:typeof r.duration==\"number\"?r.duration:r.duration in v.fx.speeds?v.fx.speeds[r.duration]:v.fx.speeds._default;if(r.queue==null||r.queue===!0)r.queue=\"fx\";return r.old=r.complete,r.complete=function(){v.isFunction(r.old)&&r.old.call(this),r.queue&&v.dequeue(this,r.queue)},r},v.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},v.timers=[],v.fx=Yn.prototype.init,v.fx.tick=function(){var e,n=v.timers,r=0;qn=v.now();for(;r<n.length;r++)e=n[r],!e()&&n[r]===e&&n.splice(r--,1);n.length||v.fx.stop(),qn=t},v.fx.timer=function(e){e()&&v.timers.push(e)&&!Rn&&(Rn=setInterval(v.fx.tick,v.fx.interval))},v.fx.interval=13,v.fx.stop=function(){clearInterval(Rn),Rn=null},v.fx.speeds={slow:600,fast:200,_default:400},v.fx.step={},v.expr&&v.expr.filters&&(v.expr.filters.animated=function(e){return v.grep(v.timers,function(t){return e===t.elem}).length});var er=/^(?:body|html)$/i;v.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){v.offset.setOffset(this,e,t)});var n,r,i,s,o,u,a,f={top:0,left:0},l=this[0],c=l&&l.ownerDocument;if(!c)return;return(r=c.body)===l?v.offset.bodyOffset(l):(n=c.documentElement,v.contains(n,l)?(typeof l.getBoundingClientRect!=\"undefined\"&&(f=l.getBoundingClientRect()),i=tr(c),s=n.clientTop||r.clientTop||0,o=n.clientLeft||r.clientLeft||0,u=i.pageYOffset||n.scrollTop,a=i.pageXOffset||n.scrollLeft,{top:f.top+u-s,left:f.left+a-o}):f)},v.offset={bodyOffset:function(e){var t=e.offsetTop,n=e.offsetLeft;return v.support.doesNotIncludeMarginInBodyOffset&&(t+=parseFloat(v.css(e,\"marginTop\"))||0,n+=parseFloat(v.css(e,\"marginLeft\"))||0),{top:t,left:n}},setOffset:function(e,t,n){var r=v.css(e,\"position\");r===\"static\"&&(e.style.position=\"relative\");var i=v(e),s=i.offset(),o=v.css(e,\"top\"),u=v.css(e,\"left\"),a=(r===\"absolute\"||r===\"fixed\")&&v.inArray(\"auto\",[o,u])>-1,f={},l={},c,h;a?(l=i.position(),c=l.top,h=l.left):(c=parseFloat(o)||0,h=parseFloat(u)||0),v.isFunction(t)&&(t=t.call(e,n,s)),t.top!=null&&(f.top=t.top-s.top+c),t.left!=null&&(f.left=t.left-s.left+h),\"using\"in t?t.using.call(e,f):i.css(f)}},v.fn.extend({position:function(){if(!this[0])return;var e=this[0],t=this.offsetParent(),n=this.offset(),r=er.test(t[0].nodeName)?{top:0,left:0}:t.offset();return n.top-=parseFloat(v.css(e,\"marginTop\"))||0,n.left-=parseFloat(v.css(e,\"marginLeft\"))||0,r.top+=parseFloat(v.css(t[0],\"borderTopWidth\"))||0,r.left+=parseFloat(v.css(t[0],\"borderLeftWidth\"))||0,{top:n.top-r.top,left:n.left-r.left}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||i.body;while(e&&!er.test(e.nodeName)&&v.css(e,\"position\")===\"static\")e=e.offsetParent;return e||i.body})}}),v.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(e,n){var r=/Y/.test(n);v.fn[e]=function(i){return v.access(this,function(e,i,s){var o=tr(e);if(s===t)return o?n in o?o[n]:o.document.documentElement[i]:e[i];o?o.scrollTo(r?v(o).scrollLeft():s,r?s:v(o).scrollTop()):e[i]=s},e,i,arguments.length,null)}}),v.each({Height:\"height\",Width:\"width\"},function(e,n){v.each({padding:\"inner\"+e,content:n,\"\":\"outer\"+e},function(r,i){v.fn[i]=function(i,s){var o=arguments.length&&(r||typeof i!=\"boolean\"),u=r||(i===!0||s===!0?\"margin\":\"border\");return v.access(this,function(n,r,i){var s;return v.isWindow(n)?n.document.documentElement[\"client\"+e]:n.nodeType===9?(s=n.documentElement,Math.max(n.body[\"scroll\"+e],s[\"scroll\"+e],n.body[\"offset\"+e],s[\"offset\"+e],s[\"client\"+e])):i===t?v.css(n,r,i,u):v.style(n,r,i,u)},n,o?i:t,o,null)}})}),e.jQuery=e.$=v,typeof define==\"function\"&&define.amd&&define.amd.jQuery&&define(\"jquery\",[],function(){return v})})(window);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b3c3853f252cc1d35791b82cc59fb31887219c6",
      "candidate_info": {
        "commit_hash": "8b3c3853f252cc1d35791b82cc59fb31887219c6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8b3c3853f252cc1d35791b82cc59fb31887219c6",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ActionQueue.py",
          "ambari-agent/src/main/python/ambari_agent/AmbariConfig.py",
          "ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py",
          "ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py",
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/FileCache.py",
          "ambari-agent/src/main/python/ambari_agent/InitializerModule.py",
          "ambari-agent/src/main/python/ambari_agent/LiveStatus.py",
          "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/main/python/ambari_agent/models/__init__.py",
          "ambari-agent/src/main/python/ambari_agent/models/commands.py",
          "ambari-agent/src/main/python/ambari_agent/models/hooks.py",
          "ambari-agent/src/test/python/ambari_agent/TestActionQueue.py",
          "ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py",
          "ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py",
          "ambari-agent/src/test/python/ambari_agent/TestFileCache.py",
          "ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py",
          "ambari-common/src/main/python/resource_management/libraries/script/hook.py",
          "ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py"
        ],
        "message": "[AMBARI-23444] Allow Custom Hooks on a Per-Role Basis (dgrinenko) (#1858)\n\n[AMBARI-23444] Allow Custom Hooks on a Per-Role Basis (dgrinenko)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ActionQueue.py||ambari-agent/src/main/python/ambari_agent/ActionQueue.py",
          "ambari-agent/src/main/python/ambari_agent/AmbariConfig.py||ambari-agent/src/main/python/ambari_agent/AmbariConfig.py",
          "ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py||ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py",
          "ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py||ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py",
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/FileCache.py||ambari-agent/src/main/python/ambari_agent/FileCache.py",
          "ambari-agent/src/main/python/ambari_agent/InitializerModule.py||ambari-agent/src/main/python/ambari_agent/InitializerModule.py",
          "ambari-agent/src/main/python/ambari_agent/LiveStatus.py||ambari-agent/src/main/python/ambari_agent/LiveStatus.py",
          "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/main/python/ambari_agent/models/__init__.py||ambari-agent/src/main/python/ambari_agent/models/__init__.py",
          "ambari-agent/src/main/python/ambari_agent/models/commands.py||ambari-agent/src/main/python/ambari_agent/models/commands.py",
          "ambari-agent/src/main/python/ambari_agent/models/hooks.py||ambari-agent/src/main/python/ambari_agent/models/hooks.py",
          "ambari-agent/src/test/python/ambari_agent/TestActionQueue.py||ambari-agent/src/test/python/ambari_agent/TestActionQueue.py",
          "ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py||ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py",
          "ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py||ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py",
          "ambari-agent/src/test/python/ambari_agent/TestFileCache.py||ambari-agent/src/test/python/ambari_agent/TestFileCache.py",
          "ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py||ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py",
          "ambari-common/src/main/python/resource_management/libraries/script/hook.py||ambari-common/src/main/python/resource_management/libraries/script/hook.py",
          "ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py||ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ActionQueue.py||ambari-agent/src/main/python/ambari_agent/ActionQueue.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ActionQueue.py -> ambari-agent/src/main/python/ambari_agent/ActionQueue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/env python",
          "3: '''",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "20: import Queue",
          "22: import logging",
          "24: import threading",
          "25: import pprint",
          "26: import os",
          "",
          "[Removed Lines]",
          "19: '''",
          "23: import traceback",
          "",
          "[Added Lines]",
          "17: \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29: import signal",
          "31: from AgentException import AgentException",
          "34: from ambari_agent.BackgroundCommandExecutionHandle import BackgroundCommandExecutionHandle",
          "35: from ambari_commons.str_utils import split_on_chunks",
          "39: logger = logging.getLogger()",
          "",
          "[Removed Lines]",
          "32: from LiveStatus import LiveStatus",
          "33: from ActualConfigHandler import ActualConfigHandler",
          "36: from resource_management.libraries.script import Script",
          "",
          "[Added Lines]",
          "31: from ambari_agent.models.commands import AgentCommand, CommandStatus",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:   # How many actions can be performed in parallel. Feel free to change",
          "51:   MAX_CONCURRENT_ACTIONS = 5",
          "56:   EXECUTION_COMMAND_WAIT_TIME = 2",
          "74:   def __init__(self, initializer_module):",
          "75:     super(ActionQueue, self).__init__()",
          "76:     self.commandQueue = Queue.Queue()",
          "",
          "[Removed Lines]",
          "54:   #How much time(in seconds) we need wait for new incoming execution command before checking",
          "55:   #status command queue",
          "58:   STATUS_COMMAND = 'STATUS_COMMAND'",
          "59:   EXECUTION_COMMAND = 'EXECUTION_COMMAND'",
          "60:   AUTO_EXECUTION_COMMAND = 'AUTO_EXECUTION_COMMAND'",
          "61:   BACKGROUND_EXECUTION_COMMAND = 'BACKGROUND_EXECUTION_COMMAND'",
          "62:   ROLE_COMMAND_INSTALL = 'INSTALL'",
          "63:   ROLE_COMMAND_START = 'START'",
          "64:   ROLE_COMMAND_STOP = 'STOP'",
          "65:   ROLE_COMMAND_CUSTOM_COMMAND = 'CUSTOM_COMMAND'",
          "66:   CUSTOM_COMMAND_RESTART = 'RESTART'",
          "67:   CUSTOM_COMMAND_RECONFIGURE = 'RECONFIGURE'",
          "68:   CUSTOM_COMMAND_START = ROLE_COMMAND_START",
          "70:   IN_PROGRESS_STATUS = 'IN_PROGRESS'",
          "71:   COMPLETED_STATUS = 'COMPLETED'",
          "72:   FAILED_STATUS = 'FAILED'",
          "",
          "[Added Lines]",
          "50:   # How much time(in seconds) we need wait for new incoming execution command before checking status command queue",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93:   def put(self, commands):",
          "94:     for command in commands:",
          "106:       else:",
          "107:         self.commandQueue.put(command)",
          "",
          "[Removed Lines]",
          "95:       if not command.has_key('serviceName'):",
          "96:         command['serviceName'] = \"null\"",
          "97:       if not command.has_key('clusterId'):",
          "98:         command['clusterId'] = \"null\"",
          "100:       logger.info(\"Adding \" + command['commandType'] + \" for role \" + \\",
          "101:                   command['role'] + \" for service \" + \\",
          "102:                   command['serviceName'] + \" of cluster_id \" + \\",
          "103:                   command['clusterId'] + \" to the queue.\")",
          "104:       if command['commandType'] == self.BACKGROUND_EXECUTION_COMMAND :",
          "105:         self.backgroundCommandQueue.put(self.createCommandHandle(command))",
          "",
          "[Added Lines]",
          "74:       if \"serviceName\" not in command:",
          "75:         command[\"serviceName\"] = \"null\"",
          "76:       if \"clusterId\" not in command:",
          "77:         command[\"clusterId\"] = \"null\"",
          "79:       logger.info(\"Adding {commandType} for role {role} for service {serviceName} of cluster_id {clusterId} to the queue\".format(**command))",
          "81:       if command['commandType'] == AgentCommand.background_execution:",
          "82:         self.backgroundCommandQueue.put(self.create_command_handle(command))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:         if queued_command['taskId'] != task_id:",
          "129:           self.commandQueue.put(queued_command)",
          "130:         else:",
          "136:       # Kill if in progress",
          "137:       self.customServiceOrchestrator.cancel_command(task_id, reason)",
          "",
          "[Removed Lines]",
          "131:           logger.info(\"Canceling \" + queued_command['commandType'] + \\",
          "132:                       \" for service \" + queued_command['serviceName'] + \\",
          "133:                       \" and role \" +  queued_command['role'] + \\",
          "134:                       \" with taskId \" + str(queued_command['taskId']))",
          "",
          "[Added Lines]",
          "108:           logger.info(\"Canceling {commandType} for service {serviceName} and role {role} with taskId {taskId}\".format(",
          "110:           ))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:   def run(self):",
          "142:     while not self.stop_event.is_set():",
          "143:       try:",
          "146:         try:",
          "147:           if self.parallel_execution == 0:",
          "148:             command = self.commandQueue.get(True, self.EXECUTION_COMMAND_WAIT_TIME)",
          "",
          "[Removed Lines]",
          "144:         self.processBackgroundQueueSafeEmpty()",
          "145:         self.fillRecoveryCommands()",
          "",
          "[Added Lines]",
          "120:         self.process_background_queue_safe_empty()",
          "121:         self.fill_recovery_commands()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "181:         logger.exception(\"ActionQueue thread failed with exception. Re-running it\")",
          "182:     logger.info(\"ActionQueue thread has successfully finished\")",
          "185:     if self.recovery_manager.enabled() and not self.tasks_in_progress_or_pending():",
          "186:       self.put(self.recovery_manager.get_recovery_commands())",
          "189:     while not self.backgroundCommandQueue.empty():",
          "190:       try:",
          "191:         command = self.backgroundCommandQueue.get(False)",
          "193:           self.process_command(command)",
          "194:       except Queue.Empty:",
          "195:         pass",
          "199:       raise AgentException(\"Command already has __handle\")",
          "200:     command['__handle'] = BackgroundCommandExecutionHandle(command, command['commandId'], None, self.on_background_command_complete_callback)",
          "201:     return command",
          "203:   def process_command(self, command):",
          "204:     # make sure we log failures",
          "207:     try:",
          "209:         try:",
          "210:           if self.recovery_manager.enabled():",
          "211:             self.recovery_manager.on_execution_command_start()",
          "",
          "[Removed Lines]",
          "184:   def fillRecoveryCommands(self):",
          "188:   def processBackgroundQueueSafeEmpty(self):",
          "192:         if command.has_key('__handle') and command['__handle'].status == None:",
          "197:   def createCommandHandle(self, command):",
          "198:     if command.has_key('__handle'):",
          "205:     commandType = command['commandType']",
          "206:     logger.debug(\"Took an element of Queue (command type = %s).\", commandType)",
          "208:       if commandType in [self.EXECUTION_COMMAND, self.BACKGROUND_EXECUTION_COMMAND, self.AUTO_EXECUTION_COMMAND]:",
          "",
          "[Added Lines]",
          "160:   def fill_recovery_commands(self):",
          "164:   def process_background_queue_safe_empty(self):",
          "168:         if \"__handle\" in command and command[\"__handle\"].status is None:",
          "173:   def create_command_handle(self, command):",
          "174:     if \"__handle\" in command:",
          "182:     command_type = command['commandType']",
          "183:     logger.debug(\"Took an element of Queue (command type = %s).\", command_type)",
          "185:       if command_type in AgentCommand.AUTO_EXECUTION_COMMAND_GROUP:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "218:       else:",
          "219:         logger.error(\"Unrecognized command %s\", pprint.pformat(command))",
          "220:     except Exception:",
          "223:   def tasks_in_progress_or_pending(self):",
          "224:     return not self.commandQueue.empty() or self.recovery_manager.has_active_command()",
          "226:   def execute_command(self, command):",
          "228:     Executes commands of type EXECUTION_COMMAND",
          "234:     message = \"Executing command with id = {commandId}, taskId = {taskId} for role = {role} of \" \\",
          "238:     logger.info(message)",
          "240:     taskId = command['taskId']",
          "",
          "[Removed Lines]",
          "221:       logger.exception(\"Exception while processing {0} command\".format(commandType))",
          "227:     '''",
          "229:     '''",
          "230:     clusterId = command['clusterId']",
          "231:     commandId = command['commandId']",
          "232:     isCommandBackground = command['commandType'] == self.BACKGROUND_EXECUTION_COMMAND",
          "233:     isAutoExecuteCommand = command['commandType'] == self.AUTO_EXECUTION_COMMAND",
          "235:               \"cluster_id {cluster}.\".format(",
          "236:               commandId = str(commandId), taskId = str(command['taskId']),",
          "237:               role=command['role'], cluster=clusterId)",
          "",
          "[Added Lines]",
          "198:       logger.exception(\"Exception while processing {0} command\".format(command_type))",
          "204:     \"\"\"",
          "206:     \"\"\"",
          "207:     cluster_id = command['clusterId']",
          "208:     command_id = command['commandId']",
          "209:     command_type = command['commandType']",
          "211:     num_attempts = 0",
          "212:     retry_duration = 0  # even with 0 allow one attempt",
          "213:     retry_able = False",
          "214:     delay = 1",
          "215:     log_command_output = True",
          "216:     command_canceled = False",
          "217:     command_result = {}",
          "220:               \"cluster_id {cluster}.\".format(commandId=str(command_id), taskId=str(command['taskId']),",
          "221:               role=command['role'], cluster=cluster_id)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "242:     in_progress_status = self.commandStatuses.generate_report_template(command)",
          "243:     # The path of the files that contain the output log and error log use a prefix that the agent advertises to the",
          "244:     # server. The prefix is defined in agent-config.ini",
          "246:       in_progress_status.update({",
          "247:         'tmpout': self.tmpdir + os.sep + 'output-' + str(taskId) + '.txt',",
          "248:         'tmperr': self.tmpdir + os.sep + 'errors-' + str(taskId) + '.txt',",
          "251:       })",
          "252:     else:",
          "253:       in_progress_status.update({",
          "254:         'tmpout': self.tmpdir + os.sep + 'auto_output-' + str(taskId) + '.txt',",
          "255:         'tmperr': self.tmpdir + os.sep + 'auto_errors-' + str(taskId) + '.txt',",
          "258:       })",
          "260:     self.commandStatuses.put_command_status(command, in_progress_status)",
          "270:     if 'commandParams' in command:",
          "271:       if 'max_duration_for_retries' in command['commandParams']:",
          "282:     self.cancelEvent.clear()",
          "286:       if taskId in self.taskIdsToCancel:",
          "287:         logger.info('Command with taskId = {0} canceled'.format(taskId))",
          "288:         command_canceled = True",
          "",
          "[Removed Lines]",
          "245:     if not isAutoExecuteCommand:",
          "249:         'structuredOut' : self.tmpdir + os.sep + 'structured-out-' + str(taskId) + '.json',",
          "250:         'status': self.IN_PROGRESS_STATUS",
          "256:         'structuredOut' : self.tmpdir + os.sep + 'auto_structured-out-' + str(taskId) + '.json',",
          "257:         'status': self.IN_PROGRESS_STATUS",
          "262:     numAttempts = 0",
          "263:     retryDuration = 0  # even with 0 allow one attempt",
          "264:     retryAble = False",
          "265:     delay = 1",
          "266:     log_command_output = True",
          "267:     if 'commandParams' in command and 'log_output' in command['commandParams'] and \"false\" == command['commandParams']['log_output']:",
          "268:       log_command_output = False",
          "272:         retryDuration = int(command['commandParams']['max_duration_for_retries'])",
          "273:       if 'command_retry_enabled' in command['commandParams']:",
          "274:         retryAble = command['commandParams']['command_retry_enabled'] == \"true\"",
          "275:     if isAutoExecuteCommand:",
          "276:       retryAble = False",
          "278:     logger.info(\"Command execution metadata - taskId = {taskId}, retry enabled = {retryAble}, max retry duration (sec) = {retryDuration}, log_output = {log_command_output}\".",
          "279:                  format(taskId=taskId, retryAble=retryAble, retryDuration=retryDuration, log_command_output=log_command_output))",
          "280:     command_canceled = False",
          "283:     self.taskIdsToCancel.discard(taskId) # for case of command reschedule (e.g. command and cancel for the same taskId are send at the same time)",
          "285:     while retryDuration >= 0:",
          "",
          "[Added Lines]",
          "229:     if command_type != AgentCommand.auto_execution:",
          "233:         'structuredOut': self.tmpdir + os.sep + 'structured-out-' + str(taskId) + '.json',",
          "234:         'status': CommandStatus.in_progress",
          "240:         'structuredOut': self.tmpdir + os.sep + 'auto_structured-out-' + str(taskId) + '.json',",
          "241:         'status': CommandStatus.in_progress",
          "248:         retry_duration = int(command['commandParams']['max_duration_for_retries'])",
          "249:       if 'command_retry_enabled' in command['commandParams'] and command_type != AgentCommand.auto_execution:",
          "250:         #  for AgentCommand.auto_execution command retry_able should be always false",
          "251:         retry_able = command['commandParams']['command_retry_enabled'] == \"true\"",
          "252:       if 'log_output' in command['commandParams']:",
          "253:         log_command_output = command['commandParams']['log_output'] != \"false\"",
          "255:     logger.info(\"Command execution metadata - taskId = {taskId}, retry enabled = {retryAble}, max retry duration (sec)\"",
          "256:                 \" = {retryDuration}, log_output = {log_command_output}\".format(",
          "257:       taskId=taskId, retryAble=retry_able, retryDuration=retry_duration, log_command_output=log_command_output))",
          "260:     # for case of command reschedule (e.g. command and cancel for the same taskId are send at the same time)",
          "261:     self.taskIdsToCancel.discard(taskId)",
          "263:     while retry_duration >= 0:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "290:         self.taskIdsToCancel.discard(taskId)",
          "291:         break",
          "294:       start = 0",
          "296:         start = int(time.time())",
          "297:       # running command",
          "303:       end = 1",
          "305:         end = int(time.time())",
          "308:       # dumping results",
          "310:         logger.info(\"Command is background command, quit retrying. Exit code: {exitCode}, retryAble: {retryAble}, retryDuration (sec): {retryDuration}, last delay (sec): {delay}\"",
          "312:         return",
          "313:       else:",
          "316:         else:",
          "319:             logger.info('Command with taskId = {cid} was canceled!'.format(cid=taskId))",
          "320:             command_canceled = True",
          "321:             self.taskIdsToCancel.discard(taskId)",
          "322:             break",
          "325:         delay = self.get_retry_delay(delay)",
          "330:         logger.info(\"Retrying command with taskId = {cid} after a wait of {delay}\".format(cid=taskId, delay=delay))",
          "331:         if 'agentLevelParams' not in command:",
          "332:           command['agentLevelParams'] = {}",
          "",
          "[Removed Lines]",
          "293:       numAttempts += 1",
          "295:       if retryAble:",
          "298:       commandresult = self.customServiceOrchestrator.runCommand(command,",
          "299:                                                                 in_progress_status['tmpout'],",
          "300:                                                                 in_progress_status['tmperr'],",
          "301:                                                                 override_output_files=numAttempts == 1,",
          "302:                                                                 retry=numAttempts > 1)",
          "304:       if retryAble:",
          "306:       retryDuration -= (end - start)",
          "309:       if isCommandBackground:",
          "311:                     .format(cid=taskId, exitCode=commandresult['exitcode'], retryAble=retryAble, retryDuration=retryDuration, delay=delay))",
          "314:         if commandresult['exitcode'] == 0:",
          "315:           status = self.COMPLETED_STATUS",
          "317:           status = self.FAILED_STATUS",
          "318:           if (commandresult['exitcode'] == -signal.SIGTERM) or (commandresult['exitcode'] == -signal.SIGKILL):",
          "324:       if status != self.COMPLETED_STATUS and retryAble and retryDuration > 0:",
          "326:         if delay > retryDuration:",
          "327:           delay = retryDuration",
          "328:         retryDuration -= delay  # allow one last attempt",
          "329:         commandresult['stderr'] += \"\\n\\nCommand failed. Retrying command execution ...\\n\\n\"",
          "",
          "[Added Lines]",
          "271:       num_attempts += 1",
          "273:       if retry_able:",
          "276:       command_result = self.customServiceOrchestrator.runCommand(command,",
          "277:                                                                  in_progress_status['tmpout'],",
          "278:                                                                  in_progress_status['tmperr'],",
          "279:                                                                  override_output_files=num_attempts == 1,",
          "280:                                                                  retry=num_attempts > 1)",
          "282:       if retry_able:",
          "284:       retry_duration -= (end - start)",
          "287:       if command_type == AgentCommand.background_execution:",
          "289:                     .format(cid=taskId, exitCode=command_result['exitcode'], retryAble=retry_able, retryDuration=retry_duration, delay=delay))",
          "292:         if command_result['exitcode'] == 0:",
          "293:           status = CommandStatus.completed",
          "295:           status = CommandStatus.failed",
          "296:           if (command_result['exitcode'] == -signal.SIGTERM) or (command_result['exitcode'] == -signal.SIGKILL):",
          "302:       if status != CommandStatus.completed and retry_able and retry_duration > 0:",
          "304:         if delay > retry_duration:",
          "305:           delay = retry_duration",
          "306:         retry_duration -= delay  # allow one last attempt",
          "307:         command_result['stderr'] += \"\\n\\nCommand failed. Retrying command execution ...\\n\\n\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "337:         continue",
          "338:       else:",
          "339:         logger.info(\"Quit retrying for command with taskId = {cid}. Status: {status}, retryAble: {retryAble}, retryDuration (sec): {retryDuration}, last delay (sec): {delay}\"",
          "341:         break",
          "343:     self.taskIdsToCancel.discard(taskId)",
          "345:     # do not fail task which was rescheduled from server",
          "346:     if command_canceled:",
          "349:           for com in self.commandQueue.queue:",
          "350:             if com['taskId'] == command['taskId']:",
          "353:               return",
          "355:     # final result to stdout",
          "364:       'status': status,",
          "365:     })",
          "368:         and int(self.config.get(\"logging\", \"log_command_executes\")) == 1 \\",
          "369:         and log_command_output:",
          "372:           logger.info(\"Begin command output log for command with id = \" + str(command['taskId']) + \", role = \"",
          "373:                       + command['role'] + \", roleCommand = \" + command['roleCommand'])",
          "375:           logger.info(\"End command output log for command with id = \" + str(command['taskId']) + \", role = \"",
          "376:                       + command['role'] + \", roleCommand = \" + command['roleCommand'])",
          "379:           logger.info(\"Begin command stderr log for command with id = \" + str(command['taskId']) + \", role = \"",
          "380:                       + command['role'] + \", roleCommand = \" + command['roleCommand'])",
          "382:           logger.info(\"End command stderr log for command with id = \" + str(command['taskId']) + \", role = \"",
          "383:                       + command['role'] + \", roleCommand = \" + command['roleCommand'])",
          "390:     # let ambari know name of custom command",
          "392:     if 'commandParams' in command and command['commandParams'].has_key('custom_command'):",
          "397:     else:",
          "440:     self.recovery_manager.process_execution_command_result(command, status)",
          "443:     cluster_id = str(command['clusterId'])",
          "",
          "[Removed Lines]",
          "340:                     .format(cid=taskId, status=status, retryAble=retryAble, retryDuration=retryDuration, delay=delay))",
          "347:       with self.lock:",
          "348:         with self.commandQueue.mutex:",
          "351:               logger.info('Command with taskId = {cid} was rescheduled by server. '",
          "352:                           'Fail report on cancelled command won\\'t be sent with heartbeat.'.format(cid=taskId))",
          "356:     commandresult['stdout'] += '\\n\\nCommand completed successfully!\\n' if status == self.COMPLETED_STATUS else '\\n\\nCommand failed after ' + str(numAttempts) + ' tries\\n'",
          "357:     logger.info('Command with taskId = {cid} completed successfully!'.format(cid=taskId) if status == self.COMPLETED_STATUS else 'Command with taskId = {cid} failed after {attempts} tries'.format(cid=taskId, attempts=numAttempts))",
          "359:     roleResult = self.commandStatuses.generate_report_template(command)",
          "360:     roleResult.update({",
          "361:       'stdout': commandresult['stdout'],",
          "362:       'stderr': commandresult['stderr'],",
          "363:       'exitCode': commandresult['exitcode'],",
          "367:     if self.config.has_option(\"logging\",\"log_command_executes\") \\",
          "371:       if roleResult['stdout'] != '':",
          "374:           self.log_command_output(roleResult['stdout'], str(command['taskId']))",
          "378:       if roleResult['stderr'] != '':",
          "381:           self.log_command_output(roleResult['stderr'], str(command['taskId']))",
          "385:     if roleResult['stdout'] == '':",
          "386:       roleResult['stdout'] = 'None'",
          "387:     if roleResult['stderr'] == '':",
          "388:       roleResult['stderr'] = 'None'",
          "393:       roleResult['customCommand'] = command['commandParams']['custom_command']",
          "395:     if 'structuredOut' in commandresult:",
          "396:       roleResult['structuredOut'] = str(json.dumps(commandresult['structuredOut']))",
          "398:       roleResult['structuredOut'] = ''",
          "400:     # let recovery manager know the current state",
          "401:     if status == self.COMPLETED_STATUS:",
          "402:       # let ambari know that configuration tags were applied",
          "403:       configHandler = ActualConfigHandler(self.config, self.configTags)",
          "404:       \"\"\"",
          "405:       #update",
          "406:       if 'commandParams' in command:",
          "407:         command_params = command['commandParams']",
          "408:         if command_params and command_params.has_key('forceRefreshConfigTags') and len(command_params['forceRefreshConfigTags']) > 0  :",
          "409:           forceRefreshConfigTags = command_params['forceRefreshConfigTags'].split(',')",
          "410:           logger.info(\"Got refresh additional component tags command\")",
          "412:           for configTag in forceRefreshConfigTags :",
          "413:             configHandler.update_component_tag(command['role'], configTag, command['configurationTags'][configTag])",
          "415:           roleResult['customCommand'] = self.CUSTOM_COMMAND_RESTART # force restart for component to evict stale_config on server side",
          "416:           command['configurationTags'] = configHandler.read_actual_component(command['role'])",
          "418:       if command.has_key('configurationTags'):",
          "419:         configHandler.write_actual(command['configurationTags'])",
          "420:         roleResult['configurationTags'] = command['configurationTags']",
          "421:       component = {'serviceName':command['serviceName'],'componentName':command['role']}",
          "422:       if 'roleCommand' in command and \\",
          "423:           (command['roleCommand'] == self.ROLE_COMMAND_START or",
          "424:              (command['roleCommand'] == self.ROLE_COMMAND_INSTALL and component in LiveStatus.CLIENT_COMPONENTS) or",
          "425:                (command['roleCommand'] == self.ROLE_COMMAND_CUSTOM_COMMAND and",
          "426:                   'custom_command' in command['hostLevelParams'] and",
          "427:                       command['hostLevelParams']['custom_command'] in (self.CUSTOM_COMMAND_RESTART,",
          "428:                                                                        self.CUSTOM_COMMAND_START,",
          "429:                                                                        self.CUSTOM_COMMAND_RECONFIGURE))):",
          "430:         configHandler.write_actual_component(command['role'],",
          "431:                                              command['configurationTags'])",
          "432:         if 'clientsToUpdateConfigs' in command['hostLevelParams'] and command['hostLevelParams']['clientsToUpdateConfigs']:",
          "433:           configHandler.write_client_components(command['serviceName'],",
          "434:                                                 command['configurationTags'],",
          "435:                                                 command['hostLevelParams']['clientsToUpdateConfigs'])",
          "436:         roleResult['configurationTags'] = configHandler.read_actual_component(",
          "437:             command['role'])",
          "438:     \"\"\"",
          "441:     self.commandStatuses.put_command_status(command, roleResult)",
          "",
          "[Added Lines]",
          "318:                     .format(cid=taskId, status=status, retryAble=retry_able, retryDuration=retry_duration, delay=delay))",
          "325:       with self.lock, self.commandQueue.mutex:",
          "328:               logger.info(\"Command with taskId = {cid} was rescheduled by server. \"",
          "329:                           \"Fail report on cancelled command won't be sent with heartbeat.\".format(cid=taskId))",
          "333:     command_result['stdout'] += '\\n\\nCommand completed successfully!\\n' if status == CommandStatus.completed else '\\n\\nCommand failed after ' + str(num_attempts) + ' tries\\n'",
          "334:     logger.info('Command with taskId = {cid} completed successfully!'.format(cid=taskId) if status == CommandStatus.completed else 'Command with taskId = {cid} failed after {attempts} tries'.format(cid=taskId, attempts=num_attempts))",
          "336:     role_result = self.commandStatuses.generate_report_template(command)",
          "337:     role_result.update({",
          "338:       'stdout': command_result['stdout'],",
          "339:       'stderr': command_result['stderr'],",
          "340:       'exitCode': command_result['exitcode'],",
          "344:     if self.config.has_option(\"logging\", \"log_command_executes\") \\",
          "348:       if role_result['stdout'] != '':",
          "351:           self.log_command_output(role_result['stdout'], str(command['taskId']))",
          "355:       if role_result['stderr'] != '':",
          "358:           self.log_command_output(role_result['stderr'], str(command['taskId']))",
          "362:     if role_result['stdout'] == '':",
          "363:       role_result['stdout'] = 'None'",
          "364:     if role_result['stderr'] == '':",
          "365:       role_result['stderr'] = 'None'",
          "370:       role_result['customCommand'] = command['commandParams']['custom_command']",
          "372:     if 'structuredOut' in command_result:",
          "373:       role_result['structuredOut'] = str(json.dumps(command_result['structuredOut']))",
          "375:       role_result['structuredOut'] = ''",
          "378:     self.commandStatuses.put_command_status(command, role_result)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "446:       service_name = command['serviceName']",
          "447:       if service_name != 'null':",
          "448:         component_name = command['role']",
          "451:   def log_command_output(self, text, taskId):",
          "452:     \"\"\"",
          "",
          "[Removed Lines]",
          "449:         self.component_status_executor.check_component_status(clusterId, service_name, component_name, \"STATUS\", report=True)",
          "",
          "[Added Lines]",
          "386:         self.component_status_executor.check_component_status(cluster_id, service_name, component_name, \"STATUS\", report=True)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "469:     \"\"\"",
          "470:     return last_delay * 2",
          "475:   def on_background_command_complete_callback(self, process_condensed_result, handle):",
          "476:     logger.debug('Start callback: %s', process_condensed_result)",
          "477:     logger.debug('The handle is: %s', handle)",
          "480:     aborted_postfix = self.customServiceOrchestrator.command_canceled_reason(handle.command['taskId'])",
          "481:     if aborted_postfix:",
          "483:       logger.debug('Set status to: %s , reason = %s', status, aborted_postfix)",
          "484:     else:",
          "485:       aborted_postfix = ''",
          "491:       'stdout': process_condensed_result['stdout'] + aborted_postfix,",
          "492:       'stderr': process_condensed_result['stderr'] + aborted_postfix,",
          "493:       'exitCode': process_condensed_result['exitcode'],",
          "",
          "[Removed Lines]",
          "472:   def command_was_canceled(self):",
          "473:     self.customServiceOrchestrator",
          "478:     status = self.COMPLETED_STATUS if handle.exitCode == 0 else self.FAILED_STATUS",
          "482:       status = self.FAILED_STATUS",
          "488:     roleResult = self.commandStatuses.generate_report_template(handle.command)",
          "490:     roleResult.update({",
          "",
          "[Added Lines]",
          "412:     status = CommandStatus.completed if handle.exitCode == 0 else CommandStatus.failed",
          "416:       status = CommandStatus.failed",
          "421:     role_result = self.commandStatuses.generate_report_template(handle.command)",
          "423:     role_result.update({",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "495:       'status': status,",
          "496:     })",
          "501:   def reset(self):",
          "",
          "[Removed Lines]",
          "498:     self.commandStatuses.put_command_status(handle.command, roleResult)",
          "500:   # Removes all commands from the queue",
          "502:     queue = self.commandQueue",
          "503:     with queue.mutex:",
          "504:       queue.queue.clear()",
          "",
          "[Added Lines]",
          "431:     self.commandStatuses.put_command_status(handle.command, role_result)",
          "434:     with self.commandQueue.mutex:",
          "435:       self.commandQueue.queue.clear()",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/AmbariConfig.py||ambari-agent/src/main/python/ambari_agent/AmbariConfig.py": [
          "File: ambari-agent/src/main/python/ambari_agent/AmbariConfig.py -> ambari-agent/src/main/python/ambari_agent/AmbariConfig.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   def get(self, section, value, default=None):",
          "111:     try:",
          "112:       return str(self.config.get(section, value)).strip()",
          "115:         return default",
          "116:       raise err",
          "",
          "[Removed Lines]",
          "113:     except ConfigParser.Error, err:",
          "114:       if default != None:",
          "",
          "[Added Lines]",
          "113:     except ConfigParser.Error as err:",
          "114:       if default is not None:",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py||ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py": [
          "File: ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py -> ambari-agent/src/main/python/ambari_agent/BackgroundCommandExecutionHandle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/env python",
          "3: '''",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "20: import logging",
          "22: logger = logging.getLogger()",
          "23: installScriptHash = -1",
          "25: class BackgroundCommandExecutionHandle:",
          "27:   SCHEDULED_STATUS = 'SCHEDULED'",
          "",
          "[Removed Lines]",
          "19: '''",
          "",
          "[Added Lines]",
          "17: \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:     self.on_background_command_started = on_background_command_started",
          "39:     self.on_background_command_complete_callback = on_background_command_complete_callback",
          "43:   def __str__(self):",
          "",
          "[Removed Lines]",
          "44:     return \"[BackgroundHandle: pid='{0}', status='{1}', exitCode='{2}', commandId='{3}']\".format(self.pid, self.status, self.exitCode, self.commandId)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py -> ambari-agent/src/main/python/ambari_agent/CommandHooksOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "19: import os",
          "20: import logging",
          "22: from models.commands import AgentCommand",
          "23: from models.hooks import HookPrefix",
          "25: __all__ = [\"ResolvedHooks\", \"HooksOrchestrator\"]",
          "28: class ResolvedHooks(object):",
          "29:   \"\"\"",
          "30:   Hooks sequence holder",
          "31:   \"\"\"",
          "33:   def __init__(self, pre_hooks=set(), post_hooks=set()):",
          "34:     \"\"\"",
          "35:     Creates response instance with generated hooks sequence",
          "37:     :arg pre_hooks hook sequence, typically generator is passed",
          "38:     :arg post_hooks hook sequence, typically generator is passed",
          "40:     :type pre_hooks Collections.Iterable|types.GeneratorType",
          "41:     :type post_hooks Collections.Iterable|types.GeneratorType",
          "42:     \"\"\"",
          "43:     self._pre_hooks = pre_hooks",
          "44:     self._post_hooks = post_hooks",
          "46:   @property",
          "47:   def pre_hooks(self):",
          "48:     \"\"\"",
          "49:     :rtype list",
          "50:     \"\"\"",
          "51:     # Converting generator to real sequence on first user request",
          "52:     if not isinstance(self._pre_hooks, (list, set)):",
          "53:       self._pre_hooks = list(self._pre_hooks)",
          "55:     return self._pre_hooks",
          "57:   @property",
          "58:   def post_hooks(self):",
          "59:     \"\"\"",
          "60:     :rtype list",
          "61:     \"\"\"",
          "62:     # Converting generator to real sequence on first user request",
          "63:     if not isinstance(self._post_hooks, (list, set)):",
          "64:       self._post_hooks = list(self._post_hooks)",
          "66:     return self._post_hooks",
          "69: class HookSequenceBuilder(object):",
          "70:   \"\"\"",
          "71:   Sequence builder according to passed definition",
          "72:   \"\"\"",
          "74:   # ToDo: move hooks sequence definition to configuration or text file definition?",
          "75:   _hooks_sequences = {",
          "76:     HookPrefix.pre: [",
          "77:       \"{prefix}-{command}\",",
          "78:       \"{prefix}-{command}-{service}\",",
          "79:       \"{prefix}-{command}-{service}-{role}\"",
          "80:     ],",
          "81:     HookPrefix.post: [",
          "82:       \"{prefix}-{command}-{service}-{role}\",",
          "83:       \"{prefix}-{command}-{service}\",",
          "84:       \"{prefix}-{command}\"",
          "85:     ]",
          "86:   }",
          "88:   def build(self, prefix, command, service, role):",
          "89:     \"\"\"",
          "90:     Building hooks sequence depends on incoming data",
          "92:     :type prefix str",
          "93:     :type command str",
          "94:     :type service str",
          "95:     :type role str",
          "96:     :rtype types.GeneratorType",
          "97:     \"\"\"",
          "98:     if prefix not in self._hooks_sequences:",
          "99:       raise TypeError(\"Unable to locate hooks sequence definition for '{}' prefix\".format(prefix))",
          "101:     for hook_definition in self._hooks_sequences[prefix]:",
          "102:       if \"service\" in hook_definition and service is None:",
          "103:         continue",
          "105:       if \"role\" is hook_definition and role is None:",
          "106:         continue",
          "108:       yield hook_definition.format(prefix=prefix, command=command, service=service, role=role)",
          "111: class HooksOrchestrator(object):",
          "112:   \"\"\"",
          "113:    Resolving hooks according to HookSequenceBuilder definitions",
          "114:   \"\"\"",
          "116:   def __init__(self, injector):",
          "117:     \"\"\"",
          "118:     :type injector InitializerModule",
          "119:     \"\"\"",
          "120:     self._file_cache = injector.file_cache",
          "121:     self._logger = logging.getLogger()",
          "122:     self._hook_builder = HookSequenceBuilder()",
          "124:   def resolve_hooks(self, command, command_name):",
          "125:     \"\"\"",
          "126:     Resolving available hooks sequences which should be appended or prepended to script execution chain",
          "128:     :type command dict",
          "129:     :type command_name str",
          "130:     :rtype ResolvedHooks",
          "131:     \"\"\"",
          "132:     command_type = command[\"commandType\"]",
          "133:     if command_type == AgentCommand.status or not command_name:",
          "134:       return None",
          "136:     hook_dir = self._file_cache.get_hook_base_dir(command)",
          "138:     if not hook_dir:",
          "139:       return ResolvedHooks()",
          "141:     service = command[\"serviceName\"] if \"serviceName\" in command else None",
          "142:     component = command[\"role\"] if \"role\" in command else None",
          "144:     pre_hooks_seq = self._hook_builder.build(HookPrefix.pre, command_name, service, component)",
          "145:     post_hooks_seq = self._hook_builder.build(HookPrefix.post, command_name, service, component)",
          "147:     return ResolvedHooks(",
          "148:       self._resolve_hooks_path(hook_dir, pre_hooks_seq),",
          "149:       self._resolve_hooks_path(hook_dir, post_hooks_seq)",
          "150:     )",
          "152:   def _resolve_hooks_path(self, stack_hooks_dir, hooks_sequence):",
          "153:     \"\"\"",
          "154:     Returns a tuple(path to hook script, hook base dir) according to passed hooks_sequence",
          "156:     :type stack_hooks_dir str",
          "157:     :type hooks_sequence collections.Iterable|types.GeneratorType",
          "158:     \"\"\"",
          "160:     for hook in hooks_sequence:",
          "161:       hook_base_dir = os.path.join(stack_hooks_dir, hook)",
          "162:       hook_script_path = os.path.join(hook_base_dir, \"scripts\", \"hook.py\")",
          "164:       if not os.path.isfile(hook_script_path):",
          "165:         self._logger.debug(\"Hook script {0} not found, skipping\".format(hook_script_path))",
          "166:         continue",
          "168:       yield hook_script_path, hook_base_dir",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py||ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py -> ambari-agent/src/main/python/ambari_agent/CommandStatusDict.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from Grep import Grep",
          "31: from ambari_agent import Constants",
          "32: from ambari_stomp.adapter.websocket import ConnectionIsAlreadyClosed",
          "34: logger = logging.getLogger()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: from ambari_agent.models.commands import CommandStatus, AgentCommand",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:       self.current_state.pop(key, None)",
          "74:     is_sent, correlation_id = self.force_update_to_server({command['clusterId']: [report]})",
          "77:     if not is_sent or updatable:",
          "78:       self.queue_report_sending(key, command, report)",
          "",
          "[Removed Lines]",
          "75:     updatable = report['status'] == ActionQueue.IN_PROGRESS_STATUS and self.command_update_output",
          "",
          "[Added Lines]",
          "76:     updatable = report['status'] == CommandStatus.in_progress and self.command_update_output",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     generation",
          "137:     \"\"\"",
          "138:     self.generated_reports = []",
          "142:       for key, item in self.current_state.items():",
          "143:         command = item[0]",
          "144:         report = item[1]",
          "145:         cluster_id = report['clusterId']",
          "149:             self.reported_reports.add(key)",
          "150:           else:",
          "151:             in_progress_report = self.generate_in_progress_report(command, report)",
          "154:           logger.debug(\"AUTO_EXECUTION_COMMAND task deleted %s\", command['commandId'])",
          "155:           self.reported_reports.add(key)",
          "156:           pass",
          "159:   def clear_reported_reports(self, result_reports):",
          "160:     with self.lock:",
          "",
          "[Removed Lines]",
          "139:     from ActionQueue import ActionQueue",
          "140:     with self.lock: # Synchronized",
          "141:       resultReports = defaultdict(lambda:[])",
          "146:         if command ['commandType'] in [ActionQueue.EXECUTION_COMMAND, ActionQueue.BACKGROUND_EXECUTION_COMMAND]:",
          "147:           if (report['status']) != ActionQueue.IN_PROGRESS_STATUS:",
          "148:             resultReports[cluster_id].append(report)",
          "152:             resultReports[cluster_id].append(in_progress_report)",
          "153:         elif command ['commandType'] in [ActionQueue.AUTO_EXECUTION_COMMAND]:",
          "157:       return resultReports",
          "",
          "[Added Lines]",
          "141:     with self.lock:",
          "142:       result_reports = defaultdict(lambda:[])",
          "147:         if command['commandType'] in AgentCommand.EXECUTION_COMMAND_GROUP:",
          "148:           if (report['status']) != CommandStatus.in_progress:",
          "149:             result_reports[cluster_id].append(report)",
          "153:             result_reports[cluster_id].append(in_progress_report)",
          "154:         elif command['commandType'] == AgentCommand.auto_execution:",
          "158:       return result_reports",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:     Reads stdout/stderr for IN_PROGRESS command from disk file",
          "179:     and populates other fields of report.",
          "180:     \"\"\"",
          "183:     files_to_read = [report['tmpout'], report['tmperr'], report['structuredOut']]",
          "184:     files_content = ['...', '...', '{}']",
          "",
          "[Removed Lines]",
          "181:     from ActionQueue import ActionQueue",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200:       'stderr': err,",
          "201:       'structuredOut': tmpstructuredout,",
          "202:       'exitCode': 777,",
          "204:     })",
          "205:     return inprogress",
          "",
          "[Removed Lines]",
          "203:       'status': ActionQueue.IN_PROGRESS_STATUS,",
          "",
          "[Added Lines]",
          "202:       'status': CommandStatus.in_progress,",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py -> ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/env python",
          "3: '''",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "21: import logging",
          "22: import threading",
          "",
          "[Removed Lines]",
          "19: '''",
          "",
          "[Added Lines]",
          "17: \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: from ambari_agent import Constants",
          "25: from ambari_agent.LiveStatus import LiveStatus",
          "26: from collections import defaultdict",
          "27: from ambari_stomp.adapter.websocket import ConnectionIsAlreadyClosed",
          "31: class ComponentStatusExecutor(threading.Thread):",
          "32:   def __init__(self, initializer_module):",
          "",
          "[Removed Lines]",
          "29: logger = logging.getLogger(__name__)",
          "",
          "[Added Lines]",
          "26: from ambari_agent.models.commands import AgentCommand",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:     self.recovery_manager = initializer_module.recovery_manager",
          "40:     self.reported_component_status = defaultdict(lambda:defaultdict(lambda:defaultdict(lambda:None))) # component statuses which were received by server",
          "41:     self.server_responses_listener = initializer_module.server_responses_listener",
          "42:     threading.Thread.__init__(self)",
          "44:   def run(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     self.logger = logging.getLogger(__name__)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "46:     Run an endless loop which executes all status commands every 'status_commands_run_interval' seconds.",
          "47:     \"\"\"",
          "48:     if self.status_commands_run_interval == 0:",
          "50:       return",
          "52:     while not self.stop_event.is_set():",
          "",
          "[Removed Lines]",
          "49:       logger.warn(\"ComponentStatusExecutor is turned off. Some functionality might not work correctly.\")",
          "",
          "[Added Lines]",
          "49:       self.logger.warn(\"ComponentStatusExecutor is turned off. Some functionality might not work correctly.\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "63:             # multithreading: if cluster was deleted during iteration",
          "64:             continue",
          "67:             continue",
          "69:           status_commands_to_run = metadata_cache.status_commands_to_run",
          "72:             continue",
          "76:           if current_host_id is None:",
          "77:             continue",
          "",
          "[Removed Lines]",
          "66:           if not 'status_commands_to_run' in metadata_cache:",
          "71:           if not 'components' in topology_cache:",
          "74:           current_host_id =  self.topology_cache.get_current_host_id(cluster_id)",
          "",
          "[Added Lines]",
          "66:           if 'status_commands_to_run' not in metadata_cache:",
          "71:           if 'components' not in topology_cache:",
          "74:           current_host_id = self.topology_cache.get_current_host_id(cluster_id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "84:                 break",
          "86:               # cluster was already removed",
          "88:                 break",
          "90:               # check if component is installed on current host",
          "92:                 break",
          "94:               service_name = component_dict.serviceName",
          "",
          "[Removed Lines]",
          "87:               if not cluster_id in self.topology_cache.get_cluster_ids():",
          "91:               if not current_host_id in component_dict.hostIds:",
          "",
          "[Added Lines]",
          "87:               if cluster_id not in self.topology_cache.get_cluster_ids():",
          "91:               if current_host_id not in component_dict.hostIds:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "97:               # do not run status commands for the component which is starting/stopping or doing other action",
          "98:               if self.customServiceOrchestrator.commandsRunningForComponent(cluster_id, component_name):",
          "100:                 continue",
          "102:               result = self.check_component_status(cluster_id, service_name, component_name, command_name)",
          "",
          "[Removed Lines]",
          "99:                 logger.info(\"Skipping status command for {0}. Since command for it is running\".format(component_name))",
          "",
          "[Added Lines]",
          "99:                 self.logger.info(\"Skipping status command for {0}. Since command for it is running\".format(component_name))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "108:       except ConnectionIsAlreadyClosed: # server and agent disconnected during sending data. Not an issue",
          "109:         pass",
          "110:       except:",
          "113:       self.stop_event.wait(self.status_commands_run_interval)",
          "116:   def check_component_status(self, cluster_id, service_name, component_name, command_name, report=False):",
          "117:     \"\"\"",
          "",
          "[Removed Lines]",
          "111:         logger.exception(\"Exception in ComponentStatusExecutor. Re-running it\")",
          "114:     logger.info(\"ComponentStatusExecutor has successfully finished\")",
          "",
          "[Added Lines]",
          "111:         self.logger.exception(\"Exception in ComponentStatusExecutor. Re-running it\")",
          "114:     self.logger.info(\"ComponentStatusExecutor has successfully finished\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "126:       'serviceName': service_name,",
          "127:       'role': component_name,",
          "128:       'clusterId': cluster_id,",
          "130:     }",
          "132:     component_status_result = self.customServiceOrchestrator.requestComponentStatus(command_dict)",
          "",
          "[Removed Lines]",
          "129:       'commandType': 'STATUS_COMMAND',",
          "",
          "[Added Lines]",
          "129:       'commandType': AgentCommand.status,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "135:     # log if status command failed",
          "136:     if status == LiveStatus.DEAD_STATUS:",
          "137:       stderr = component_status_result['stderr']",
          "141:     result = {",
          "142:       'serviceName': service_name,",
          "",
          "[Removed Lines]",
          "138:       if not \"ComponentIsNotRunning\" in stderr and not \"ClientComponentHasNoStatus\" in stderr:",
          "139:         logger.info(\"Status command for {0} failed:\\n{1}\".format(component_name, stderr))",
          "",
          "[Added Lines]",
          "138:       if \"ComponentIsNotRunning\" not in stderr and \"ClientComponentHasNoStatus\" not in stderr:",
          "139:         self.logger.info(\"Status command for {0} failed:\\n{1}\".format(component_name, stderr))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "177:     This needs to be done to remove information about clusters which where deleted (e.g. ambari-server reset)",
          "178:     \"\"\"",
          "179:     for cluster_id in self.reported_component_status.keys():",
          "181:         del self.reported_component_status[cluster_id]",
          "",
          "[Removed Lines]",
          "180:       if not cluster_id in self.topology_cache.get_cluster_ids():",
          "",
          "[Added Lines]",
          "180:       if cluster_id not in self.topology_cache.get_cluster_ids():",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py -> ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import logging",
          "22: import os",
          "23: import ambari_simplejson as json",
          "24: import sys",
          "25: from ambari_commons import shell",
          "26: import threading",
          "27: from collections import defaultdict",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from ConfigParser import NoOptionError",
          "28: from ambari_agent.models.commands import AgentCommand",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: logger = logging.getLogger()",
          "41:   \"\"\"",
          "42:   Executes a command for custom service. stdout and stderr are written to",
          "43:   tmpoutfile and to tmperrfile respectively.",
          "",
          "[Removed Lines]",
          "40: class CustomServiceOrchestrator():",
          "",
          "[Added Lines]",
          "45: class CustomServiceOrchestrator(object):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   CUSTOM_ACTION_COMMAND = 'ACTIONEXECUTE'",
          "50:   CUSTOM_COMMAND_COMMAND = 'CUSTOM_COMMAND'",
          "55:   HOSTS_LIST_KEY = \"all_hosts\"",
          "56:   PING_PORTS_KEY = \"all_ping_ports\"",
          "57:   RACKS_KEY = \"all_racks\"",
          "",
          "[Removed Lines]",
          "52:   PRE_HOOK_PREFIX=\"before\"",
          "53:   POST_HOOK_PREFIX=\"after\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:     self.configuration_builder = initializer_module.configuration_builder",
          "81:     self.host_level_params_cache = initializer_module.host_level_params_cache",
          "82:     self.config = initializer_module.config",
          "83:     self.tmp_dir = self.config.get('agent', 'prefix')",
          "84:     self.force_https_protocol = self.config.get_force_https_protocol_name()",
          "85:     self.ca_cert_file_path = self.config.get_ca_cert_file_path()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     self.hooks_orchestrator = initializer_module.hooks_orchestrator",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "318:     \"\"\"",
          "319:     incremented_commands_for_component = False",
          "322:     ret = None",
          "325:     json_path = None",
          "327:     try:",
          "",
          "[Removed Lines]",
          "321:     # Make sure the return variable has been initialized",
          "324:     # Make sure the json_path variable has been initialized",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "331:       timeout = int(command['commandParams']['command_timeout'])",
          "332:       cluster_id = str(command['clusterId'])",
          "336:       # Status commands have no taskId nor roleCommand",
          "337:       if not is_status_command:",
          "338:         task_id = command['taskId']",
          "339:         command_name = command['roleCommand']",
          "340:       else:",
          "341:         task_id = 'status'",
          "343:       if forced_command_name is not None:  # If not supplied as an argument",
          "344:         command_name = forced_command_name",
          "348:         script_tuple = (os.path.join(base_dir, 'scripts', script), base_dir)",
          "350:       else:",
          "351:         if command_name == self.CUSTOM_COMMAND_COMMAND:",
          "352:           command_name = command['commandParams']['custom_command']",
          "354:         # forces a hash challenge on the directories to keep them updated, even",
          "355:         # if the return type is not used",
          "361:         script_path = self.resolve_script_path(base_dir, script)",
          "362:         script_tuple = (script_path, base_dir)",
          "367:       # We don't support anything else yet",
          "368:       if script_type.upper() != self.SCRIPT_TYPE_PYTHON:",
          "",
          "[Removed Lines]",
          "334:       server_url_prefix = command['ambariLevelParams']['jdk_location']",
          "346:       if command_name == self.CUSTOM_ACTION_COMMAND:",
          "347:         base_dir = self.file_cache.get_custom_actions_base_dir(server_url_prefix)",
          "349:         hook_dir = None",
          "356:         self.file_cache.get_host_scripts_base_dir(server_url_prefix)",
          "357:         hook_dir = self.file_cache.get_hook_base_dir(command, server_url_prefix)",
          "358:         base_dir = self.file_cache.get_service_base_dir(command, server_url_prefix)",
          "359:         self.file_cache.get_custom_resources_subdir(command, server_url_prefix)",
          "364:       tmpstrucoutfile = os.path.join(self.tmp_dir,",
          "365:                                     \"structured-out-{0}.json\".format(task_id))",
          "",
          "[Added Lines]",
          "339:         command_name = None",
          "344:       if command_name and command_name == self.CUSTOM_ACTION_COMMAND:",
          "345:         base_dir = self.file_cache.get_custom_actions_base_dir(command)",
          "353:         base_dir = self.file_cache.get_service_base_dir(command)",
          "357:       tmpstrucoutfile = os.path.join(self.tmp_dir, \"structured-out-{0}.json\".format(task_id))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "372:       # Execute command using proper interpreter",
          "373:       handle = None",
          "375:         handle = command['__handle']",
          "376:         handle.on_background_command_started = self.map_task_to_process",
          "377:         del command['__handle']",
          "379:       # If command contains credentialStoreEnabled, then",
          "380:       # generate the JCEKS file for the configurations.",
          "382:       if 'serviceLevelParams' in command and 'credentialStoreEnabled' in command['serviceLevelParams']:",
          "386:         if 'commandBeingRetried' not in command['agentLevelParams'] or command['agentLevelParams']['commandBeingRetried'] != \"true\":",
          "387:           self.generateJceks(command)",
          "388:         else:",
          "389:           logger.info(\"Skipping generation of jceks files as this is a retry of the command\")",
          "392:       json_path = self.dump_command_to_json(command, retry)",
          "398:       # filter None values",
          "399:       filtered_py_file_list = [i for i in py_file_list if i]",
          "",
          "[Removed Lines]",
          "374:       if command.has_key('__handle'):",
          "381:       credentialStoreEnabled = False",
          "383:         credentialStoreEnabled = command['serviceLevelParams']['credentialStoreEnabled']",
          "385:       if credentialStoreEnabled and command_name != self.COMMAND_NAME_STATUS:",
          "393:       pre_hook_tuple = self.resolve_hook_script_path(hook_dir,",
          "394:           self.PRE_HOOK_PREFIX, command_name, script_type)",
          "395:       post_hook_tuple = self.resolve_hook_script_path(hook_dir,",
          "396:           self.POST_HOOK_PREFIX, command_name, script_type)",
          "397:       py_file_list = [pre_hook_tuple, script_tuple, post_hook_tuple]",
          "",
          "[Added Lines]",
          "366:       if \"__handle\" in command:",
          "373:       credential_store_enabled = False",
          "375:         credential_store_enabled = command['serviceLevelParams']['credentialStoreEnabled']",
          "377:       if credential_store_enabled and command_name != self.COMMAND_NAME_STATUS:",
          "384:       hooks = self.hooks_orchestrator.resolve_hooks(command, command_name)",
          "385:       \"\"\":type hooks ambari_agent.CommandHooksOrchestrator.ResolvedHooks\"\"\"",
          "387:       py_file_list = []",
          "388:       if hooks:",
          "389:        py_file_list.extend(hooks.pre_hooks)",
          "391:       py_file_list.append(script_tuple)",
          "393:       if hooks:",
          "394:        py_file_list.extend(hooks.post_hooks)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "403:       # Executing hooks and script",
          "404:       ret = None",
          "407:         raise AgentException(\"Background commands are supported without hooks only\")",
          "409:       python_executor = self.get_py_executor(forced_command_name)",
          "413:       if cluster_id != '-1' and cluster_id != 'null':",
          "414:         self.commands_for_component_in_progress[cluster_id][command['role']] += 1",
          "415:         incremented_commands_for_component = True",
          "417:       for py_file, current_base_dir in filtered_py_file_list:",
          "419:         script_params = [command_name, json_path, current_base_dir, tmpstrucoutfile, logger_level, self.exec_tmp_dir,",
          "420:                          self.force_https_protocol, self.ca_cert_file_path]",
          "422:         if log_out_files:",
          "423:           script_params.append(\"-o\")",
          "430:         # Next run_file() invocations should always append to current output",
          "431:         override_output_files = False",
          "432:         if ret['exitcode'] != 0:",
          "433:           break",
          "436:         raise AgentException(\"No script has been executed\")",
          "438:       # if canceled and not background command",
          "",
          "[Removed Lines]",
          "405:       from ActionQueue import ActionQueue",
          "406:       if command.has_key('commandType') and command['commandType'] == ActionQueue.BACKGROUND_EXECUTION_COMMAND and len(filtered_py_file_list) > 1:",
          "410:       backup_log_files = not command_name in self.DONT_BACKUP_LOGS_FOR_COMMANDS",
          "411:       log_out_files = self.config.get(\"logging\",\"log_out_files\", default=\"0\") != \"0\"",
          "418:         log_info_on_failure = not command_name in self.DONT_DEBUG_FAILURES_FOR_COMMANDS",
          "425:         ret = python_executor.run_file(py_file, script_params,",
          "426:                                tmpoutfile, tmperrfile, timeout,",
          "427:                                tmpstrucoutfile, self.map_task_to_process,",
          "428:                                task_id, override_output_files, backup_log_files = backup_log_files,",
          "429:                                handle = handle, log_info_on_failure=log_info_on_failure)",
          "435:       if not ret: # Something went wrong",
          "",
          "[Added Lines]",
          "404:       if \"commandType\" in command and command['commandType'] == AgentCommand.background_execution\\",
          "405:         and len(filtered_py_file_list) > 1:",
          "410:       backup_log_files = command_name not in self.DONT_BACKUP_LOGS_FOR_COMMANDS",
          "411:       try:",
          "412:        log_out_files = self.config.get(\"logging\", \"log_out_files\", default=None) is not None",
          "413:       except NoOptionError:",
          "414:        log_out_files = None",
          "421:         log_info_on_failure = command_name not in self.DONT_DEBUG_FAILURES_FOR_COMMANDS",
          "428:         ret = python_executor.run_file(py_file, script_params, tmpoutfile, tmperrfile, timeout,",
          "429:                                        tmpstrucoutfile, self.map_task_to_process, task_id, override_output_files,",
          "430:                                        backup_log_files=backup_log_files, handle=handle,",
          "431:                                        log_info_on_failure=log_info_on_failure)",
          "437:       if not ret:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "447:           with open(tmperrfile, \"a\") as f:",
          "448:             f.write(cancel_reason)",
          "451:       exc_type, exc_obj, exc_tb = sys.exc_info()",
          "454:       logger.exception(message)",
          "455:       ret = {",
          "459:         'exitcode': 1,",
          "460:       }",
          "461:     finally:",
          "",
          "[Removed Lines]",
          "450:     except Exception, e: # We do not want to let agent fail completely",
          "452:       message = \"Caught an exception while executing \"\\",
          "453:         \"custom service command: {0}: {1}; {2}\".format(exc_type, exc_obj, str(e))",
          "456:         'stdout' : message,",
          "457:         'stderr' : message,",
          "458:         'structuredOut' : '{}',",
          "",
          "[Added Lines]",
          "452:     except Exception as e:",
          "454:       message = \"Caught an exception while executing custom service command: {0}: {1}; {2}\".format(exc_type, exc_obj, e)",
          "457:         'stdout': message,",
          "458:         'stderr': message,",
          "459:         'structuredOut': '{}',",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "470:   def command_canceled_reason(self, task_id):",
          "471:     with self.commands_in_progress_lock:",
          "473:         logger.debug('Pop with taskId %s', task_id)",
          "474:         pid = self.commands_in_progress.pop(task_id)",
          "475:         if not isinstance(pid, (int, long)):",
          "",
          "[Removed Lines]",
          "472:       if self.commands_in_progress.has_key(task_id):#Background command do not push in this collection (TODO)",
          "",
          "[Added Lines]",
          "473:       if task_id in self.commands_in_progress:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "504:     # topology needs to be decompressed if and only if it originates from command header",
          "505:     if 'clusterHostInfo' in command_header and command_header['clusterHostInfo']:",
          "508:     return command",
          "",
          "[Removed Lines]",
          "506:       command['clusterHostInfo'] = self.decompressClusterHostInfo(command['clusterHostInfo'])",
          "",
          "[Added Lines]",
          "507:       command['clusterHostInfo'] = self.decompress_cluster_host_info(command['clusterHostInfo'])",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "513:      Exit code 0 means that component is running and any other exit code means that",
          "514:      component is not running",
          "515:     \"\"\"",
          "517:     if logger.level == logging.DEBUG:",
          "518:       override_output_files = False",
          "",
          "[Removed Lines]",
          "516:     override_output_files=True # by default, we override status command output",
          "",
          "[Added Lines]",
          "517:     override_output_files = True",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "532:       raise AgentException(message)",
          "533:     return path",
          "552:   def dump_command_to_json(self, command, retry=False):",
          "553:     \"\"\"",
          "554:     Converts command to json file and returns file path",
          "555:     \"\"\"",
          "556:     # Now, dump the json file",
          "557:     command_type = command['commandType']",
          "560:       # These files are frequently created, that's why we don't",
          "561:       # store them all, but only the latest one",
          "562:       file_path = os.path.join(self.tmp_dir, \"status_command.json\")",
          "563:     else:",
          "564:       task_id = command['taskId']",
          "565:       file_path = os.path.join(self.tmp_dir, \"command-{0}.json\".format(task_id))",
          "567:         file_path = os.path.join(self.tmp_dir, \"auto_command-{0}.json\".format(task_id))",
          "569:     # Json may contain passwords, that's why we need proper permissions",
          "570:     if os.path.isfile(file_path):",
          "571:       os.unlink(file_path)",
          "575:       f.write(content)",
          "576:     return file_path",
          "583:     racks = info.pop(self.RACKS_KEY)",
          "584:     ipv4_addresses = info.pop(self.IPV4_ADDRESSES_KEY)",
          "593:       # Convert from 1-3,5,6-8 to [1,2,3,5,6,7,8]",
          "595:       # Convert from [1,2,3,5,6,7,8] to [host1,host2,host3...]",
          "628:       ranges = i.split(',')",
          "630:       for r in ranges:",
          "641:         else:",
          "654:         raise AgentException(\"Broken data in given value to range, expected format - \"\"value:m-n\"\", got - \" + str(i))",
          "665:             raise AgentException(\"Broken data in given value to range, expected format - \"\"value:m-n\"\", got - \" + str(r))",
          "670:           for k in range(start, end + 1):",
          "684:   def conditionally_remove_command_file(self, command_json_path, command_result):",
          "685:     \"\"\"",
          "",
          "[Removed Lines]",
          "536:   def resolve_hook_script_path(self, stack_hooks_dir, prefix, command_name, script_type):",
          "537:     \"\"\"",
          "538:     Returns a tuple(path to hook script, hook base dir) according to string prefix",
          "539:     and command name. If script does not exist, returns None",
          "540:     \"\"\"",
          "541:     if not stack_hooks_dir:",
          "542:       return None",
          "543:     hook_dir = \"{0}-{1}\".format(prefix, command_name)",
          "544:     hook_base_dir = os.path.join(stack_hooks_dir, hook_dir)",
          "545:     hook_script_path = os.path.join(hook_base_dir, \"scripts\", \"hook.py\")",
          "546:     if not os.path.isfile(hook_script_path):",
          "547:       logger.debug(\"Hook script {0} not found, skipping\".format(hook_script_path))",
          "548:       return None",
          "549:     return hook_script_path, hook_base_dir",
          "558:     from ActionQueue import ActionQueue  # To avoid cyclic dependency",
          "559:     if command_type == ActionQueue.STATUS_COMMAND:",
          "566:       if command_type == ActionQueue.AUTO_EXECUTION_COMMAND:",
          "572:     with os.fdopen(os.open(file_path, os.O_WRONLY | os.O_CREAT,",
          "573:                            0600), 'w') as f:",
          "574:       content = json.dumps(command, sort_keys = False, indent = 4)",
          "578:   def decompressClusterHostInfo(self, clusterHostInfo):",
          "579:     info = clusterHostInfo.copy()",
          "580:     #Pop info not related to host roles",
          "581:     hostsList = info.pop(self.HOSTS_LIST_KEY)",
          "582:     pingPorts = info.pop(self.PING_PORTS_KEY)",
          "586:     ambariServerHost = info.pop(self.AMBARI_SERVER_HOST)",
          "587:     ambariServerPort = info.pop(self.AMBARI_SERVER_PORT)",
          "588:     ambariServerUseSsl = info.pop(self.AMBARI_SERVER_USE_SSL)",
          "590:     decompressedMap = {}",
          "592:     for k,v in info.items():",
          "594:       indexes = self.convertRangeToList(v)",
          "596:       decompressedMap[k] = [hostsList[i] for i in indexes]",
          "598:     #Convert from ['1:0-2,4', '42:3,5-7'] to [1,1,1,42,1,42,42,42]",
          "599:     pingPorts = self.convertMappedRangeToList(pingPorts)",
          "600:     racks = self.convertMappedRangeToList(racks)",
          "601:     ipv4_addresses = self.convertMappedRangeToList(ipv4_addresses)",
          "603:     #Convert all elements to str",
          "604:     pingPorts = map(str, pingPorts)",
          "606:     #Add ping ports to result",
          "607:     decompressedMap[self.PING_PORTS_KEY] = pingPorts",
          "608:     #Add hosts list to result",
          "609:     decompressedMap[self.HOSTS_LIST_KEY] = hostsList",
          "610:     #Add racks list to result",
          "611:     decompressedMap[self.RACKS_KEY] = racks",
          "612:     #Add ips list to result",
          "613:     decompressedMap[self.IPV4_ADDRESSES_KEY] = ipv4_addresses",
          "614:     #Add ambari-server properties to result",
          "615:     decompressedMap[self.AMBARI_SERVER_HOST] = ambariServerHost",
          "616:     decompressedMap[self.AMBARI_SERVER_PORT] = ambariServerPort",
          "617:     decompressedMap[self.AMBARI_SERVER_USE_SSL] = ambariServerUseSsl",
          "619:     return decompressedMap",
          "621:   # Converts from 1-3,5,6-8 to [1,2,3,5,6,7,8]",
          "622:   def convertRangeToList(self, list):",
          "624:     resultList = []",
          "626:     for i in list:",
          "631:         rangeBounds = r.split('-')",
          "632:         if len(rangeBounds) == 2:",
          "634:           if not rangeBounds[0] or not rangeBounds[1]:",
          "635:             raise AgentException(\"Broken data in given range, expected - \"\"m-n\"\" or \"\"m\"\", got : \" + str(r))",
          "638:           resultList.extend(range(int(rangeBounds[0]), int(rangeBounds[1]) + 1))",
          "639:         elif len(rangeBounds) == 1:",
          "640:           resultList.append((int(rangeBounds[0])))",
          "642:           raise AgentException(\"Broken data in given range, expected - \"\"m-n\"\" or \"\"m\"\", got : \" + str(r))",
          "644:     return resultList",
          "646:   #Converts from ['1:0-2,4', '42:3,5-7'] to [1,1,1,42,1,42,42,42]",
          "647:   def convertMappedRangeToList(self, list):",
          "649:     resultDict = {}",
          "651:     for i in list:",
          "652:       valueToRanges = i.split(\":\")",
          "653:       if len(valueToRanges) <> 2:",
          "655:       value = valueToRanges[0]",
          "656:       rangesToken = valueToRanges[1]",
          "658:       for r in rangesToken.split(','):",
          "660:         rangeIndexes = r.split('-')",
          "662:         if len(rangeIndexes) == 2:",
          "664:           if not rangeIndexes[0] or not rangeIndexes[1]:",
          "667:           start = int(rangeIndexes[0])",
          "668:           end = int(rangeIndexes[1])",
          "671:             resultDict[k] = value if not value.isdigit() else int(value)",
          "674:         elif len(rangeIndexes) == 1:",
          "675:           index = int(rangeIndexes[0])",
          "677:           resultDict[index] = value if not value.isdigit() else int(value)",
          "680:     resultList = dict(sorted(resultDict.items())).values()",
          "682:     return resultList",
          "",
          "[Added Lines]",
          "543:     if command_type == AgentCommand.status:",
          "550:       if command_type == AgentCommand.auto_execution:",
          "556:     with os.fdopen(os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o600), 'w') as f:",
          "557:       content = json.dumps(command, sort_keys=False, indent=4)",
          "561:   def decompress_cluster_host_info(self, cluster_host_info):",
          "562:     info = cluster_host_info.copy()",
          "563:     hosts_list = info.pop(self.HOSTS_LIST_KEY)",
          "564:     ping_ports = info.pop(self.PING_PORTS_KEY)",
          "568:     ambari_server_host = info.pop(self.AMBARI_SERVER_HOST)",
          "569:     ambari_server_port = info.pop(self.AMBARI_SERVER_PORT)",
          "570:     ambari_server_use_ssl = info.pop(self.AMBARI_SERVER_USE_SSL)",
          "572:     decompressed_map = {}",
          "574:     for k, v in info.items():",
          "576:       indexes = self.convert_range_to_list(v)",
          "578:       decompressed_map[k] = [hosts_list[i] for i in indexes]",
          "580:     # Convert from ['1:0-2,4', '42:3,5-7'] to [1,1,1,42,1,42,42,42]",
          "581:     ping_ports = self.convert_mapped_range_to_list(ping_ports)",
          "582:     racks = self.convert_mapped_range_to_list(racks)",
          "583:     ipv4_addresses = self.convert_mapped_range_to_list(ipv4_addresses)",
          "585:     ping_ports = map(str, ping_ports)",
          "587:     decompressed_map[self.PING_PORTS_KEY] = ping_ports",
          "588:     decompressed_map[self.HOSTS_LIST_KEY] = hosts_list",
          "589:     decompressed_map[self.RACKS_KEY] = racks",
          "590:     decompressed_map[self.IPV4_ADDRESSES_KEY] = ipv4_addresses",
          "591:     decompressed_map[self.AMBARI_SERVER_HOST] = ambari_server_host",
          "592:     decompressed_map[self.AMBARI_SERVER_PORT] = ambari_server_port",
          "593:     decompressed_map[self.AMBARI_SERVER_USE_SSL] = ambari_server_use_ssl",
          "595:     return decompressed_map",
          "597:   def convert_range_to_list(self, range_to_convert):",
          "598:     \"\"\"",
          "599:     Converts from 1-3,5,6-8 to [1,2,3,5,6,7,8]",
          "601:     :type range_to_convert list",
          "602:     \"\"\"",
          "603:     result_list = []",
          "605:     for i in range_to_convert:",
          "609:         range_bounds = r.split('-')",
          "610:         if len(range_bounds) == 2:",
          "612:           if not range_bounds[0] or not range_bounds[1]:",
          "613:             raise AgentException(\"Broken data in given range, expected - \"\"m-n\"\" or \"\"m\"\", got: \" + str(r))",
          "615:           result_list.extend(range(int(range_bounds[0]), int(range_bounds[1]) + 1))",
          "616:         elif len(range_bounds) == 1:",
          "617:           result_list.append((int(range_bounds[0])))",
          "619:           raise AgentException(\"Broken data in given range, expected - \"\"m-n\"\" or \"\"m\"\", got: \" + str(r))",
          "621:     return result_list",
          "623:   def convert_mapped_range_to_list(self, range_to_convert):",
          "624:     \"\"\"",
          "625:     Converts from ['1:0-2,4', '42:3,5-7'] to [1,1,1,42,1,42,42,42]",
          "627:     :type range_to_convert list",
          "628:     \"\"\"",
          "629:     result_dict = {}",
          "631:     for i in range_to_convert:",
          "632:       value_to_ranges = i.split(\":\")",
          "633:       if len(value_to_ranges) != 2:",
          "635:       value = value_to_ranges[0]",
          "636:       ranges_token = value_to_ranges[1]",
          "638:       for r in ranges_token.split(','):",
          "639:         range_indexes = r.split('-')",
          "641:         if len(range_indexes) == 2:",
          "643:           if not range_indexes[0] or not range_indexes[1]:",
          "646:           start = int(range_indexes[0])",
          "647:           end = int(range_indexes[1])",
          "650:             result_dict[k] = value if not value.isdigit() else int(value)",
          "652:         elif len(range_indexes) == 1:",
          "653:           index = int(range_indexes[0])",
          "654:           result_dict[index] = value if not value.isdigit() else int(value)",
          "656:     return dict(sorted(result_dict.items())).values()",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "730:         try:",
          "731:           os.remove(command_json_path)",
          "732:           removed_command_file = True",
          "734:           logger.error(\"Failed to remove %s due to error: %s\", command_json_path, str(e))",
          "736:     return removed_command_file",
          "",
          "[Removed Lines]",
          "733:         except Exception, e:",
          "",
          "[Added Lines]",
          "707:         except OSError as e:",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/FileCache.py||ambari-agent/src/main/python/ambari_agent/FileCache.py": [
          "File: ambari-agent/src/main/python/ambari_agent/FileCache.py -> ambari-agent/src/main/python/ambari_agent/FileCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   def reset(self):",
          "74:     self.uptodate_paths = [] # Paths that already have been recently checked",
          "78:     \"\"\"",
          "79:     Returns a base directory for service",
          "80:     \"\"\"",
          "",
          "[Removed Lines]",
          "77:   def get_service_base_dir(self, command, server_url_prefix):",
          "",
          "[Added Lines]",
          "76:   def get_server_url_prefix(self, command):",
          "77:     \"\"\"",
          "78:      Returns server url prefix if exists",
          "80:     :type command dict",
          "81:     \"\"\"",
          "82:     try:",
          "83:       return command['ambariLevelParams']['jdk_location']",
          "84:     except KeyError:",
          "85:       return \"\"",
          "87:   def get_service_base_dir(self, command):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:       service_subpath = command['commandParams']['service_package_folder']",
          "83:     else:",
          "84:       service_subpath = command['serviceLevelParams']['service_package_folder']",
          "90:     \"\"\"",
          "91:     Returns a base directory for hooks",
          "92:     \"\"\"",
          "",
          "[Removed Lines]",
          "85:     return self.provide_directory(self.cache_dir, service_subpath,",
          "86:                                   server_url_prefix)",
          "89:   def get_hook_base_dir(self, command, server_url_prefix):",
          "",
          "[Added Lines]",
          "95:     return self.provide_directory(self.cache_dir, service_subpath, self.get_server_url_prefix(command))",
          "97:   def get_hook_base_dir(self, command):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:       hooks_path = command['clusterLevelParams']['hooks_folder']",
          "95:     except KeyError:",
          "96:       return None",
          "102:     \"\"\"",
          "103:     Returns a base directory for custom action scripts",
          "104:     \"\"\"",
          "105:     return self.provide_directory(self.cache_dir,",
          "106:                                   self.CUSTOM_ACTIONS_CACHE_DIRECTORY,",
          "111:     \"\"\"",
          "112:     Returns a custom directory which must be a subdirectory of the resources dir",
          "113:     \"\"\"",
          "",
          "[Removed Lines]",
          "97:     return self.provide_directory(self.cache_dir, hooks_path,",
          "98:                                   server_url_prefix)",
          "101:   def get_custom_actions_base_dir(self, server_url_prefix):",
          "107:                                   server_url_prefix)",
          "110:   def get_custom_resources_subdir(self, command, server_url_prefix):",
          "",
          "[Added Lines]",
          "105:     return self.provide_directory(self.cache_dir, hooks_path, self.get_server_url_prefix(command))",
          "107:   def get_custom_actions_base_dir(self, command):",
          "113:                                   self.get_server_url_prefix(command))",
          "116:   def get_custom_resources_subdir(self, command):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:     except KeyError:",
          "117:       return None",
          "125:     \"\"\"",
          "126:     Returns a base directory for host scripts (host alerts, etc) which",
          "127:     are scripts that are not part of the main agent code",
          "128:     \"\"\"",
          "129:     return self.provide_directory(self.cache_dir,",
          "130:                                   self.HOST_SCRIPTS_CACHE_DIRECTORY,",
          "134:   def auto_cache_update_enabled(self):",
          "135:     from AmbariConfig import AmbariConfig",
          "",
          "[Removed Lines]",
          "119:     return self.provide_directory(self.cache_dir,",
          "120:                                   custom_dir,",
          "121:                                   server_url_prefix)",
          "124:   def get_host_scripts_base_dir(self, server_url_prefix):",
          "131:                                   server_url_prefix)",
          "",
          "[Added Lines]",
          "125:     return self.provide_directory(self.cache_dir, custom_dir, self.get_server_url_prefix(command))",
          "127:   def get_host_scripts_base_dir(self, command):",
          "134:                                   self.get_server_url_prefix(command))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:                                                  subdirectory, self.ARCHIVE_NAME)",
          "183:           membuffer = self.fetch_url(download_url)",
          "184:           # extract only when the archive is not zero sized",
          "186:             self.invalidate_directory(full_path)",
          "187:             self.unpack_archive(membuffer, full_path)",
          "188:             self.write_hash_sum(full_path, remote_hash)",
          "",
          "[Removed Lines]",
          "185:           if (membuffer.getvalue().strip()):",
          "",
          "[Added Lines]",
          "187:           if membuffer.getvalue().strip():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:             pass",
          "194:         # Finally consider cache directory up-to-date",
          "195:         self.uptodate_paths.append(full_path)",
          "197:       if self.tolerate_download_failures:",
          "198:         # ignore",
          "199:         logger.warn(\"Error occurred during cache update. \"",
          "",
          "[Removed Lines]",
          "196:     except CachingException, e:",
          "",
          "[Added Lines]",
          "198:     except CachingException as e:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:     return full_path",
          "215:     \"\"\"",
          "216:     Builds up a proper download url for file. Used for downloading files",
          "217:     from the server.",
          "",
          "[Removed Lines]",
          "213:   def build_download_url(self, server_url_prefix,",
          "214:                          directory, filename):",
          "",
          "[Added Lines]",
          "214:   def build_download_url(self, server_url_prefix, directory, filename):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242:         if not buff:",
          "243:           break",
          "244:       return memory_buffer",
          "250:   def read_hash_sum(self, directory):",
          "251:     \"\"\"",
          "",
          "[Removed Lines]",
          "245:     except Exception, err:",
          "246:       raise CachingException(\"Can not download file from\"",
          "247:                              \" url {0} : {1}\".format(url, str(err)))",
          "",
          "[Added Lines]",
          "244:     except Exception as err:",
          "245:       raise CachingException(\"Can not download file from url {0} : {1}\".format(url, str(err)))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:       with open(hash_file) as fh:",
          "258:         return fh.readline().strip()",
          "259:     except:",
          "263:   def write_hash_sum(self, directory, new_hash):",
          "264:     \"\"\"",
          "",
          "[Removed Lines]",
          "260:       return None # We don't care",
          "",
          "[Added Lines]",
          "257:       return None",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "270:       with open(hash_file, \"w\") as fh:",
          "271:         fh.write(new_hash)",
          "272:       os.chmod(hash_file, 0o644)",
          "278:   def invalidate_directory(self, directory):",
          "279:     \"\"\"",
          "",
          "[Removed Lines]",
          "273:     except Exception, err:",
          "274:       raise CachingException(\"Can not write to file {0} : {1}\".format(hash_file,",
          "275:                                                                  str(err)))",
          "",
          "[Added Lines]",
          "269:     except Exception as err:",
          "270:       raise CachingException(\"Can not write to file {0} : {1}\".format(hash_file, str(err)))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "287:     logger.debug(\"Invalidating directory {0}\".format(directory))",
          "288:     try:",
          "289:       if os.path.exists(directory):",
          "291:           os.unlink(directory)",
          "292:         elif os.path.isdir(directory):",
          "293:           \"\"\"",
          "",
          "[Removed Lines]",
          "290:         if os.path.isfile(directory): # It would be a strange situation",
          "",
          "[Added Lines]",
          "284:         if os.path.isfile(directory):  # It would be a strange situation",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "298:           execute_with_retries(CLEAN_DIRECTORY_TRIES, CLEAN_DIRECTORY_TRY_SLEEP, OSError, shutil.rmtree, directory)",
          "299:         # create directory itself and any parent directories",
          "300:       os.makedirs(directory)",
          "302:       logger.exception(\"Can not invalidate cache directory {0}\".format(directory))",
          "303:       raise CachingException(\"Can not invalidate cache directory {0}: {1}\",",
          "304:                              directory, str(err))",
          "307:   def unpack_archive(self, mem_buffer, target_directory):",
          "308:     \"\"\"",
          "309:     Unpacks contents of in-memory buffer to file system.",
          "",
          "[Removed Lines]",
          "301:     except Exception, err:",
          "",
          "[Added Lines]",
          "295:     except Exception as err:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "317:         if not os.path.isdir(concrete_dir):",
          "318:           os.makedirs(concrete_dir)",
          "319:         logger.debug(\"Unpacking file {0} to {1}\".format(name, concrete_dir))",
          "321:           zfile.extract(name, target_directory)",
          "",
          "[Removed Lines]",
          "320:         if filename!='':",
          "322:     except Exception, err:",
          "323:       raise CachingException(\"Can not unpack zip file to \"",
          "324:                              \"directory {0} : {1}\".format(",
          "325:                             target_directory, str(err)))",
          "",
          "[Added Lines]",
          "313:         if filename != '':",
          "315:     except Exception as err:",
          "316:       raise CachingException(\"Can not unpack zip file to directory {0} : {1}\".format(target_directory, str(err)))",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/InitializerModule.py||ambari-agent/src/main/python/ambari_agent/InitializerModule.py": [
          "File: ambari-agent/src/main/python/ambari_agent/InitializerModule.py -> ambari-agent/src/main/python/ambari_agent/InitializerModule.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import threading",
          "22: import logging",
          "24: from ambari_agent.FileCache import FileCache",
          "25: from ambari_agent.AmbariConfig import AmbariConfig",
          "26: from ambari_agent.ClusterConfigurationCache import ClusterConfigurationCache",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from ambari_agent.CommandHooksOrchestrator import HooksOrchestrator",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     self.server_responses_listener = None",
          "70:     self.file_cache = None",
          "71:     self.customServiceOrchestrator = None",
          "72:     self.recovery_manager = None",
          "73:     self.commandStatuses = None",
          "74:     self.action_queue = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     self.hooks_orchestrator = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     self.server_responses_listener = ServerResponsesListener(self)",
          "93:     self.file_cache = FileCache(self.config)",
          "94:     self.customServiceOrchestrator = CustomServiceOrchestrator(self)",
          "95:     self.recovery_manager = RecoveryManager(self)",
          "96:     self.commandStatuses = CommandStatusDict(self)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     self.hooks_orchestrator = HooksOrchestrator(self)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/LiveStatus.py||ambari-agent/src/main/python/ambari_agent/LiveStatus.py": [
          "File: ambari-agent/src/main/python/ambari_agent/LiveStatus.py -> ambari-agent/src/main/python/ambari_agent/LiveStatus.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "",
          "[Removed Lines]",
          "3: '''",
          "",
          "[Added Lines]",
          "3: \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "21: import logging",
          "22: from ActualConfigHandler import ActualConfigHandler",
          "27: class LiveStatus:",
          "",
          "[Removed Lines]",
          "19: '''",
          "24: logger = logging.getLogger()",
          "",
          "[Added Lines]",
          "19: \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:   LIVE_STATUS = \"STARTED\"",
          "34:   DEAD_STATUS = \"INSTALLED\"",
          "38:     self.cluster = cluster",
          "39:     self.service = service",
          "40:     self.component = component",
          "",
          "[Removed Lines]",
          "36:   def __init__(self, cluster, service, component, globalConfig, config,",
          "37:                configTags):",
          "",
          "[Added Lines]",
          "34:   def __init__(self, cluster, service, component, globalConfig, config, configTags):",
          "35:     self.logger = logging.getLogger()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47:     :param component_status: component status to include into report",
          "48:     :return: populated livestatus dict",
          "49:     \"\"\"",
          "52:     livestatus = {\"componentName\": self.component,",
          "53:                   \"msg\": \"\",",
          "",
          "[Removed Lines]",
          "50:     global LIVE_STATUS, DEAD_STATUS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "62:     if active_config is not None:",
          "63:       livestatus['configurationTags'] = active_config",
          "66:     return livestatus",
          "",
          "[Removed Lines]",
          "65:     logger.debug(\"The live status for component %s of service %s is %s\", self.component, self.service, livestatus)",
          "",
          "[Added Lines]",
          "62:     self.logger.debug(\"The live status for component %s of service %s is %s\", self.component, self.service, livestatus)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/PythonExecutor.py -> ambari-agent/src/main/python/ambari_agent/PythonExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "",
          "[Removed Lines]",
          "3: '''",
          "",
          "[Added Lines]",
          "3: \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "21: import logging",
          "22: import os",
          "24: import pprint",
          "25: import threading",
          "33: import sys",
          "34: from ambari_commons import shell",
          "40: class PythonExecutor(object):",
          "41:   \"\"\"",
          "",
          "[Removed Lines]",
          "19: '''",
          "20: import ambari_simplejson as json",
          "23: from ambari_commons import subprocess32",
          "26: import platform",
          "27: from threading import Thread",
          "28: import time",
          "29: from BackgroundCommandExecutionHandle import BackgroundCommandExecutionHandle",
          "30: from resource_management.libraries.functions.log_process_information import log_process_information",
          "31: from ambari_commons.os_check import OSConst, OSCheck",
          "32: from Grep import Grep",
          "35: from ambari_commons.shell import shellRunner",
          "38: logger = logging.getLogger()",
          "",
          "[Added Lines]",
          "19: \"\"\"",
          "27: import ambari_simplejson as json",
          "29: from ambari_commons import subprocess32",
          "32: from Grep import Grep",
          "33: from BackgroundCommandExecutionHandle import BackgroundCommandExecutionHandle",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:   \"\"\"",
          "46:   NO_ERROR = \"none\"",
          "49:     self.grep = Grep()",
          "50:     self.event = threading.Event()",
          "51:     self.python_process_has_been_killed = False",
          "53:     self.config = config",
          "54:     self.log_max_symbols_size = self.config.log_max_symbols_size",
          "70:   def back_up_log_file_if_exists(self, file_path):",
          "71:     if os.path.isfile(file_path):",
          "72:       counter = 0",
          "73:       while True:",
          "76:         backup_name = file_path + \".\" + str(counter)",
          "77:         if not os.path.isfile(backup_name):",
          "78:           break",
          "79:         counter += 1",
          "80:       os.rename(file_path, backup_name)",
          "86:     \"\"\"",
          "87:     Executes the specified python file in a separate subprocess32.",
          "88:     Method returns only when the subprocess32 is finished.",
          "",
          "[Removed Lines]",
          "48:   def __init__(self, tmpDir, config):",
          "52:     self.tmpDir = tmpDir",
          "55:     pass",
          "58:   def open_subprocess32_files(self, tmpoutfile, tmperrfile, override_output_files, backup_log_files = True):",
          "59:     if override_output_files: # Recreate files, existing files are backed up if backup_log_files is True",
          "60:       if backup_log_files:",
          "61:         self.back_up_log_file_if_exists(tmpoutfile)",
          "62:         self.back_up_log_file_if_exists(tmperrfile)",
          "63:       tmpout =  open(tmpoutfile, 'w')",
          "64:       tmperr =  open(tmperrfile, 'w')",
          "65:     else: # Append to files",
          "66:       tmpout =  open(tmpoutfile, 'a')",
          "67:       tmperr =  open(tmperrfile, 'a')",
          "68:     return tmpout, tmperr",
          "74:         # Find backup name that is not used yet (saves logs",
          "75:         # from multiple command retries)",
          "82:   def run_file(self, script, script_params, tmpoutfile, tmperrfile,",
          "83:                timeout, tmpstructedoutfile, callback, task_id,",
          "84:                override_output_files = True, backup_log_files = True, handle = None,",
          "85:                log_info_on_failure = True):",
          "",
          "[Added Lines]",
          "44:   def __init__(self, tmp_dir, config):",
          "45:     self.logger = logging.getLogger()",
          "49:     self.tmpDir = tmp_dir",
          "53:   def open_subprocess32_files(self, tmp_out_file, tmp_err_file, override_output_files, backup_log_files=True):",
          "54:     mode = \"w\" if override_output_files else \"a\"",
          "56:     if override_output_files and backup_log_files:",
          "57:       self.back_up_log_file_if_exists(tmp_out_file)",
          "58:       self.back_up_log_file_if_exists(tmp_err_file)",
          "60:     return open(tmp_out_file, mode), open(tmp_err_file, mode)",
          "66:         # Find backup name that is not used yet (saves logs from multiple command retries)",
          "73:   def run_file(self, script, script_params, tmp_out_file, tmp_err_file,",
          "74:                timeout, tmp_structed_outfile, callback, task_id,",
          "75:                override_output_files=True, backup_log_files=True, handle=None,",
          "76:                log_info_on_failure=True):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     recreated or appended.",
          "94:     The structured out file, however, is preserved during multiple invocations that use the same file.",
          "95:     \"\"\"",
          "100:     if handle is None:",
          "104:       # map task_id to pid",
          "105:       callback(task_id, process.pid)",
          "107:       self.event.clear()",
          "108:       self.python_process_has_been_killed = False",
          "110:       thread.start()",
          "111:       # Waiting for the process to be either finished or killed",
          "112:       process.communicate()",
          "113:       self.event.set()",
          "114:       thread.join()",
          "117:       if log_info_on_failure and result['exitcode']:",
          "120:       return result",
          "121:     else:",
          "125:       background.start()",
          "126:       return {\"exitcode\": 777}",
          "129:     \"\"\"",
          "130:     Log some useful information after task failure.",
          "131:     \"\"\"",
          "",
          "[Removed Lines]",
          "96:     pythonCommand = self.python_command(script, script_params)",
          "97:     if logger.isEnabledFor(logging.DEBUG):",
          "98:       logger.debug(\"Running command %s\", pprint.pformat(pythonCommand))",
          "101:       tmpout, tmperr = self.open_subprocess32_files(tmpoutfile, tmperrfile, override_output_files, backup_log_files)",
          "103:       process = self.launch_python_subprocess32(pythonCommand, tmpout, tmperr)",
          "106:       logger.debug(\"Launching watchdog thread\")",
          "109:       thread = Thread(target =  self.python_watchdog_func, args = (process, timeout))",
          "115:       result = self.prepare_process_result(process.returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout=timeout)",
          "118:         self.on_failure(pythonCommand, result)",
          "122:       holder = Holder(pythonCommand, tmpoutfile, tmperrfile, tmpstructedoutfile, handle)",
          "124:       background = BackgroundThread(holder, self)",
          "128:   def on_failure(self, pythonCommand, result):",
          "",
          "[Added Lines]",
          "87:     python_command = self.python_command(script, script_params)",
          "88:     if self.logger.isEnabledFor(logging.DEBUG):",
          "89:       self.logger.debug(\"Running command %s\", pprint.pformat(python_command))",
          "91:     def background_executor():",
          "92:       logger = logging.getLogger()",
          "93:       process_out, process_err = self.open_subprocess32_files(tmp_out_file, tmp_err_file, True)",
          "95:       logger.debug(\"Starting process command %s\", python_command)",
          "96:       p = self.launch_python_subprocess32(python_command, process_out, process_err)",
          "98:       logger.debug(\"Process has been started. Pid = %s\", p.pid)",
          "100:       handle.pid = p.pid",
          "101:       handle.status = BackgroundCommandExecutionHandle.RUNNING_STATUS",
          "102:       handle.on_background_command_started(handle.command['taskId'], p.pid)",
          "104:       p.communicate()",
          "106:       handle.exitCode = p.returncode",
          "107:       process_condensed_result = self.prepare_process_result(p.returncode, tmp_out_file, tmp_err_file, tmp_structed_outfile)",
          "108:       logger.debug(\"Calling callback with args %s\", process_condensed_result)",
          "109:       handle.on_background_command_complete_callback(process_condensed_result, handle)",
          "110:       logger.debug(\"Exiting from thread for holder pid %s\", handle.pid)",
          "113:       tmpout, tmperr = self.open_subprocess32_files(tmp_out_file, tmp_err_file, override_output_files, backup_log_files)",
          "115:       process = self.launch_python_subprocess32(python_command, tmpout, tmperr)",
          "118:       self.logger.debug(\"Launching watchdog thread\")",
          "121:       thread = threading.Thread(target=self.python_watchdog_func, args=(process, timeout))",
          "127:       result = self.prepare_process_result(process.returncode, tmp_out_file, tmp_err_file, tmp_structed_outfile, timeout=timeout)",
          "130:         self.on_failure(python_command, result)",
          "134:       background = threading.Thread(target=background_executor, args=())",
          "138:   def on_failure(self, python_command, result):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:     out, error, structured_out = self.read_result_from_files(tmpoutfile, tmperrfile, tmpstructedoutfile)",
          "139:     if self.python_process_has_been_killed:",
          "142:       returncode = 999",
          "145:     return result",
          "147:   def read_result_from_files(self, out_path, err_path, structured_out_path):",
          "",
          "[Removed Lines]",
          "140:       error = str(error) + \"\\n Python script has been killed due to timeout\" + \\",
          "141:               (\" after waiting %s secs\" % str(timeout) if timeout else \"\")",
          "143:     result = self.condenseOutput(out, error, returncode, structured_out)",
          "144:     logger.debug(\"Result: %s\", result)",
          "",
          "[Added Lines]",
          "150:       error = \"{error}\\nPython script has been killed due to timeout{timeout_details}\".format(",
          "151:         error=error,",
          "152:         timeout_details=\"\" if not timeout else \" after waiting {} secs\".format(timeout)",
          "153:       )",
          "155:     result = self.condense_output(out, error, returncode, structured_out)",
          "156:     self.logger.debug(\"Result: %s\", result)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "150:     try:",
          "151:       with open(structured_out_path, 'r') as fp:",
          "152:         structured_out = json.load(fp)",
          "162:     return out, error, structured_out",
          "167:   def launch_python_subprocess32(self, command, tmpout, tmperr):",
          "168:     \"\"\"",
          "169:     Creates subprocess32 with given parameters. This functionality was moved to separate method",
          "170:     to make possible unit testing",
          "171:     \"\"\"",
          "173:     command_env = dict(os.environ)",
          "186:   def python_command(self, script, script_params):",
          "190:     return python_command",
          "195:       \"stdout\": self.grep.tail_by_symbols(stdout, self.log_max_symbols_size) if self.log_max_symbols_size else stdout,",
          "196:       \"stderr\": self.grep.tail_by_symbols(stderr, self.log_max_symbols_size) if self.log_max_symbols_size else stderr,",
          "198:     }",
          "203:     self.event.wait(timeout)",
          "207:       self.python_process_has_been_killed = True",
          "",
          "[Removed Lines]",
          "153:     except Exception:",
          "154:       if os.path.exists(structured_out_path):",
          "155:         errMsg = 'Unable to read structured output from ' + structured_out_path",
          "156:         structured_out = {",
          "157:           'msg' : errMsg",
          "158:         }",
          "159:         logger.warn(structured_out)",
          "160:       else:",
          "161:         structured_out = {}",
          "164:   def preexec_fn(self):",
          "165:     os.setpgid(0, 0)",
          "172:     close_fds = None if OSCheck.get_os_family() == OSConst.WINSRV_FAMILY else True",
          "174:     if OSCheck.get_os_family() == OSConst.WINSRV_FAMILY:",
          "175:       command_env[\"PYTHONPATH\"] = os.pathsep.join(sys.path)",
          "176:       for k, v in command_env.iteritems():",
          "177:         command_env[k] = str(v)",
          "179:     return subprocess32.Popen(command,",
          "180:       stdout=tmpout,",
          "181:       stderr=tmperr, close_fds=close_fds, env=command_env, preexec_fn=self.preexec_fn)",
          "183:   def isSuccessfull(self, returncode):",
          "184:     return not self.python_process_has_been_killed and returncode == 0",
          "187:     #we need manually pass python executable on windows because sys.executable will return service wrapper",
          "188:     python_binary = os.environ['PYTHON_EXE'] if 'PYTHON_EXE' in os.environ else sys.executable",
          "189:     python_command = [python_binary, script] + script_params",
          "192:   def condenseOutput(self, stdout, stderr, retcode, structured_out):",
          "193:     result = {",
          "194:       \"exitcode\": retcode,",
          "197:       \"structuredOut\" : structured_out",
          "200:     return result",
          "202:   def python_watchdog_func(self, python, timeout):",
          "204:     if python.returncode is None:",
          "205:       logger.error(\"subprocess32 timed out and will be killed\")",
          "206:       shell.kill_process_with_children(python.pid)",
          "208:     pass",
          "210: class Holder:",
          "211:   def __init__(self, command, out_file, err_file, structured_out_file, handle):",
          "212:     self.command = command",
          "213:     self.out_file = out_file",
          "214:     self.err_file = err_file",
          "215:     self.structured_out_file = structured_out_file",
          "216:     self.handle = handle",
          "218: class BackgroundThread(threading.Thread):",
          "219:   def __init__(self, holder, pythonExecutor):",
          "220:     threading.Thread.__init__(self)",
          "221:     self.holder = holder",
          "222:     self.pythonExecutor = pythonExecutor",
          "224:   def run(self):",
          "225:     process_out, process_err = self.pythonExecutor.open_subprocess32_files(self.holder.out_file, self.holder.err_file, True)",
          "227:     logger.debug(\"Starting process command %s\", self.holder.command)",
          "228:     process = self.pythonExecutor.launch_python_subprocess32(self.holder.command, process_out, process_err)",
          "230:     logger.debug(\"Process has been started. Pid = %s\", process.pid)",
          "232:     self.holder.handle.pid = process.pid",
          "233:     self.holder.handle.status = BackgroundCommandExecutionHandle.RUNNING_STATUS",
          "234:     self.holder.handle.on_background_command_started(self.holder.handle.command['taskId'], process.pid)",
          "236:     process.communicate()",
          "238:     self.holder.handle.exitCode = process.returncode",
          "239:     process_condensed_result = self.pythonExecutor.prepare_process_result(process.returncode, self.holder.out_file, self.holder.err_file, self.holder.structured_out_file)",
          "240:     logger.debug(\"Calling callback with args %s\", process_condensed_result)",
          "241:     self.holder.handle.on_background_command_complete_callback(process_condensed_result, self.holder.handle)",
          "242:     logger.debug(\"Exiting from thread for holder pid %s\", self.holder.handle.pid)",
          "",
          "[Added Lines]",
          "165:     except (TypeError, ValueError):",
          "166:       structured_out = {",
          "167:         \"msg\": \"Unable to read structured output from \" + structured_out_path",
          "168:       }",
          "169:       self.logger.warn(structured_out)",
          "170:     except (OSError, IOError):",
          "171:       structured_out = {}",
          "180:     return subprocess32.Popen(command, stdout=tmpout, stderr=tmperr, close_fds=True, env=command_env,",
          "181:                               preexec_fn=lambda: os.setpgid(0, 0))",
          "183:   def is_successful(self, return_code):",
          "184:     return not self.python_process_has_been_killed and return_code == 0",
          "187:     \"\"\"",
          "188:     :type script str",
          "189:     :type script_params list|set",
          "190:     \"\"\"",
          "191:     python_command = [sys.executable, script] + script_params",
          "194:   def condense_output(self, stdout, stderr, ret_code, structured_out):",
          "195:     return {",
          "196:       \"exitcode\": ret_code,",
          "199:       \"structuredOut\": structured_out",
          "202:   def python_watchdog_func(self, process, timeout):",
          "204:     if process.returncode is None:",
          "205:       self.logger.error(\"Executed command with pid {} timed out and will be killed\".format(process.pid))",
          "206:       shell.kill_process_with_children(process.pid)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py -> ambari-agent/src/main/python/ambari_agent/PythonReflectiveExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   Running the commands not in new proccess, but reflectively makes this really fast.",
          "39:   \"\"\"",
          "46:                override_output_files = True, backup_log_files = True,",
          "47:                handle = None, log_info_on_failure=True):",
          "48:     pythonCommand = self.python_command(script, script_params)",
          "",
          "[Removed Lines]",
          "41:   def __init__(self, tmpDir, config):",
          "42:     super(PythonReflectiveExecutor, self).__init__(tmpDir, config)",
          "44:   def run_file(self, script, script_params, tmpoutfile, tmperrfile,",
          "45:                timeout, tmpstructedoutfile, callback, task_id,",
          "",
          "[Added Lines]",
          "41:   def __init__(self, tmp_dir, config):",
          "42:     super(PythonReflectiveExecutor, self).__init__(tmp_dir, config)",
          "44:   def run_file(self, script, script_params, tmp_out_file, tmp_err_file,",
          "45:                timeout, tmp_structed_outfile, callback, task_id,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:       logger.debug(\"Running command reflectively %s\", pprint.pformat(pythonCommand))",
          "52:     script_dir = os.path.dirname(script)",
          "54:     returncode = 1",
          "56:     try:",
          "",
          "[Removed Lines]",
          "53:     self.open_subprocess32_files(tmpoutfile, tmperrfile, override_output_files, backup_log_files)",
          "",
          "[Added Lines]",
          "53:     self.open_subprocess32_files(tmp_out_file, tmp_err_file, override_output_files, backup_log_files)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     else:",
          "70:       returncode = 0",
          "74: class PythonContext:",
          "75:   \"\"\"",
          "",
          "[Removed Lines]",
          "72:     return self.prepare_process_result(returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout=timeout)",
          "",
          "[Added Lines]",
          "72:     return self.prepare_process_result(returncode, tmp_out_file, tmp_err_file, tmp_structed_outfile, timeout=timeout)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py": [
          "File: ambari-agent/src/main/python/ambari_agent/RecoveryManager.py -> ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from ambari_agent.ActionQueue import ActionQueue",
          "23: from ambari_agent.LiveStatus import LiveStatus",
          "25: logger = logging.getLogger()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from ambari_agent.models.commands import CommandStatus, RoleCommand, CustomCommand, AgentCommand",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:     if self.ROLE_COMMAND not in command or not self.configured_for_recovery(command['role']):",
          "577:       return",
          "581:         self.update_current_status(command[self.ROLE], LiveStatus.LIVE_STATUS)",
          "582:         logger.info(\"After EXECUTION_COMMAND (START), with taskId={}, current state of {} to {}\".format(",
          "583:           command['taskId'], command[self.ROLE], self.get_current_status(command[self.ROLE])))",
          "586:         self.update_current_status(command[self.ROLE], LiveStatus.DEAD_STATUS)",
          "587:         logger.info(\"After EXECUTION_COMMAND (STOP/INSTALL), with taskId={}, current state of {} to {}\".format(",
          "588:           command['taskId'], command[self.ROLE], self.get_current_status(command[self.ROLE])))",
          "592:           self.update_current_status(command['role'], LiveStatus.LIVE_STATUS)",
          "593:           logger.info(\"After EXECUTION_COMMAND (RESTART), current state of {} to {}\".format(",
          "594:             command[self.ROLE], self.get_current_status(command[self.ROLE])))",
          "598:         self.update_current_status(command[self.ROLE], self.INSTALL_FAILED)",
          "599:         logger.info(\"After EXECUTION_COMMAND (INSTALL), with taskId={}, current state of {} to {}\".format(",
          "600:           command['taskId'], command[self.ROLE], self.get_current_status(command[self.ROLE])))",
          "",
          "[Removed Lines]",
          "579:     if status == ActionQueue.COMPLETED_STATUS:",
          "580:       if command[self.ROLE_COMMAND] == ActionQueue.ROLE_COMMAND_START:",
          "585:       elif command['roleCommand'] == ActionQueue.ROLE_COMMAND_STOP or command[self.ROLE_COMMAND] == ActionQueue.ROLE_COMMAND_INSTALL:",
          "590:       elif command[self.ROLE_COMMAND] == ActionQueue.ROLE_COMMAND_CUSTOM_COMMAND:",
          "591:         if 'custom_command' in command and command['custom_command'] == ActionQueue.CUSTOM_COMMAND_RESTART:",
          "596:     elif status == ActionQueue.FAILED_STATUS:",
          "597:       if command[self.ROLE_COMMAND] == ActionQueue.ROLE_COMMAND_INSTALL:",
          "",
          "[Added Lines]",
          "580:     if status == CommandStatus.completed:",
          "581:       if command[self.ROLE_COMMAND] == RoleCommand.start:",
          "586:       elif command['roleCommand'] == RoleCommand.stop or command[self.ROLE_COMMAND] == RoleCommand.install:",
          "591:       elif command[self.ROLE_COMMAND] == RoleCommand.custom_command:",
          "592:         if 'custom_command' in command and command['custom_command'] == CustomCommand.restart:",
          "597:     elif status == CommandStatus.failed:",
          "598:       if command[self.ROLE_COMMAND] == RoleCommand.install:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "606:     if not self.enabled():",
          "607:       return",
          "610:       return",
          "612:     if self.ROLE not in command:",
          "613:       return",
          "616:         and self.configured_for_recovery(command[self.ROLE]):",
          "618:       self.update_desired_status(command[self.ROLE], LiveStatus.DEAD_STATUS)",
          "619:       logger.info(\"Received EXECUTION_COMMAND (STOP/INSTALL), desired state of {} to {}\".format(",
          "620:         command[self.ROLE], self.get_desired_status(command[self.ROLE])))",
          "623:       self.update_desired_status(command[self.ROLE], LiveStatus.LIVE_STATUS)",
          "624:       logger.info(\"Received EXECUTION_COMMAND (START), desired state of {} to {}\".format(",
          "625:         command[self.ROLE], self.get_desired_status(command[self.ROLE])))",
          "628:             and self.configured_for_recovery(command[self.ROLE]):",
          "630:       self.update_desired_status(command[self.ROLE], LiveStatus.LIVE_STATUS)",
          "",
          "[Removed Lines]",
          "609:     if self.COMMAND_TYPE not in command or not command[self.COMMAND_TYPE] == ActionQueue.EXECUTION_COMMAND:",
          "615:     if command[self.ROLE_COMMAND] in (ActionQueue.ROLE_COMMAND_INSTALL, ActionQueue.ROLE_COMMAND_STOP) \\",
          "622:     elif command[self.ROLE_COMMAND] == ActionQueue.ROLE_COMMAND_START and self.configured_for_recovery(command[self.ROLE]):",
          "627:     elif 'custom_command' in command and  command['custom_command'] == ActionQueue.CUSTOM_COMMAND_RESTART \\",
          "",
          "[Added Lines]",
          "610:     if self.COMMAND_TYPE not in command or not command[self.COMMAND_TYPE] == AgentCommand.execution:",
          "616:     if command[self.ROLE_COMMAND] in (RoleCommand.install, RoleCommand.stop) \\",
          "623:     elif command[self.ROLE_COMMAND] == RoleCommand.start and self.configured_for_recovery(command[self.ROLE]):",
          "628:     elif 'custom_command' in command and command['custom_command'] == CustomCommand.restart \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "644:       command = {",
          "645:         self.CLUSTER_ID: self.cluster_id,",
          "646:         self.ROLE_COMMAND: command_name,",
          "648:         self.TASK_ID: command_id,",
          "649:         self.ROLE: component,",
          "650:         self.COMMAND_ID: command_id",
          "",
          "[Removed Lines]",
          "647:         self.COMMAND_TYPE: ActionQueue.AUTO_EXECUTION_COMMAND,",
          "",
          "[Added Lines]",
          "648:         self.COMMAND_TYPE: AgentCommand.auto_execution,",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/models/__init__.py||ambari-agent/src/main/python/ambari_agent/models/__init__.py": [
          "File: ambari-agent/src/main/python/ambari_agent/models/__init__.py -> ambari-agent/src/main/python/ambari_agent/models/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/models/commands.py||ambari-agent/src/main/python/ambari_agent/models/commands.py": [
          "File: ambari-agent/src/main/python/ambari_agent/models/commands.py -> ambari-agent/src/main/python/ambari_agent/models/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "20: class AgentCommand(object):",
          "21:   status = \"STATUS_COMMAND\"",
          "22:   execution = \"EXECUTION_COMMAND\"",
          "23:   auto_execution = \"AUTO_EXECUTION_COMMAND\"",
          "24:   background_execution = \"BACKGROUND_EXECUTION_COMMAND\"",
          "26:   AUTO_EXECUTION_COMMAND_GROUP = [execution, auto_execution, background_execution]",
          "27:   EXECUTION_COMMAND_GROUP = [execution, background_execution]",
          "30: class RoleCommand(object):",
          "31:   install = 'INSTALL'",
          "32:   start = 'START'",
          "33:   stop = 'STOP'",
          "34:   custom_command = 'CUSTOM_COMMAND'",
          "37: class CustomCommand(object):",
          "38:   restart = 'RESTART'",
          "39:   reconfigure = 'RECONFIGURE'",
          "40:   start = RoleCommand.start",
          "43: class CommandStatus(object):",
          "44:   in_progress = 'IN_PROGRESS'",
          "45:   completed = 'COMPLETED'",
          "46:   failed = 'FAILED'",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/models/hooks.py||ambari-agent/src/main/python/ambari_agent/models/hooks.py": [
          "File: ambari-agent/src/main/python/ambari_agent/models/hooks.py -> ambari-agent/src/main/python/ambari_agent/models/hooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "20: class HookPrefix(object):",
          "21:   pre = \"before\"",
          "22:   post = \"after\"",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestActionQueue.py||ambari-agent/src/test/python/ambari_agent/TestActionQueue.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestActionQueue.py -> ambari-agent/src/test/python/ambari_agent/TestActionQueue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import copy",
          "30: import signal",
          "32: from mock.mock import patch, MagicMock, call",
          "33: from ambari_agent.CustomServiceOrchestrator import CustomServiceOrchestrator",
          "34: from ambari_agent.PythonExecutor import PythonExecutor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: from ambari_agent.models.commands import CommandStatus, AgentCommand",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366:     actionQueue = ActionQueue(initializer_module)",
          "367:     execution_command = {",
          "369:     }",
          "370:     status_command = {",
          "372:     }",
          "373:     wrong_command = {",
          "374:       'commandType' : \"SOME_WRONG_COMMAND\",",
          "",
          "[Removed Lines]",
          "368:       'commandType' : ActionQueue.EXECUTION_COMMAND,",
          "371:       'commandType' : ActionQueue.STATUS_COMMAND,",
          "",
          "[Added Lines]",
          "369:       'commandType' : AgentCommand.execution,",
          "372:       'commandType' : AgentCommand.status,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1079:     execute_command = copy.deepcopy(self.background_command)",
          "1080:     actionQueue.put([execute_command])",
          "1082:     # actionQueue.controller.statusCommandExecutor.process_results();",
          "1084:     # assert that python execturor start",
          "1085:     self.assertTrue(runCommand_mock.called)",
          "1086:     runningCommand = actionQueue.commandStatuses.current_state.get(execute_command['taskId'])",
          "1087:     self.assertTrue(runningCommand is not None)",
          "1090:     reports = actionQueue.commandStatuses.generate_report()[CLUSTER_ID]",
          "1091:     self.assertEqual(len(reports), 1)",
          "",
          "[Removed Lines]",
          "1081:     actionQueue.processBackgroundQueueSafeEmpty();",
          "1088:     self.assertEqual(runningCommand[1]['status'], ActionQueue.IN_PROGRESS_STATUS)",
          "",
          "[Added Lines]",
          "1082:     actionQueue.process_background_queue_safe_empty()",
          "1089:     self.assertEqual(runningCommand[1]['status'], CommandStatus.in_progress)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1130:     actionQueue.on_background_command_complete_callback = wraped(actionQueue.on_background_command_complete_callback,",
          "1131:                                                                  None, command_complete_w)",
          "1132:     actionQueue.put([self.background_command])",
          "1135:     with lock:",
          "1136:       complete_done.wait(0.1)",
          "",
          "[Removed Lines]",
          "1133:     actionQueue.processBackgroundQueueSafeEmpty();",
          "",
          "[Added Lines]",
          "1134:     actionQueue.process_background_queue_safe_empty();",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py||ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py -> ambari-agent/src/test/python/ambari_agent/TestCommandHooksOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "19: import os",
          "20: from unittest import TestCase",
          "22: from ambari_agent.models.hooks import HookPrefix",
          "23: from mock.mock import patch",
          "24: from ambari_agent.CommandHooksOrchestrator import HookSequenceBuilder, ResolvedHooks, HooksOrchestrator",
          "27: class TestCommandHooksOrchestrator(TestCase):",
          "28:   def setUp(self):",
          "29:     def injector():",
          "30:       pass",
          "32:     def file_cache():",
          "33:       pass",
          "35:     file_cache.__setattr__(\"get_hook_base_dir\", lambda x: os.path.join(\"tmp\"))",
          "36:     injector.__setattr__(\"file_cache\", file_cache)",
          "38:     self._orchestrator = HooksOrchestrator(injector)",
          "40:   @patch(\"os.path.isfile\")",
          "41:   def test_check_orchestrator(self, is_file_mock):",
          "42:     is_file_mock.return_value = True",
          "44:     ret = self._orchestrator.resolve_hooks({",
          "45:       \"commandType\": \"EXECUTION_COMMAND\",",
          "46:       \"serviceName\": \"ZOOKEEPER\",",
          "47:       \"role\": \"ZOOKEEPER_SERVER\"",
          "48:     }, \"START\")",
          "50:     self.assertTrue(ret)",
          "51:     self.assertEquals(len(ret.post_hooks), 3)",
          "52:     self.assertEquals(len(ret.pre_hooks), 3)",
          "54:   def test_hook_seq_builder(self):",
          "55:     seq = list(HookSequenceBuilder().build(HookPrefix.pre, \"cmd\", \"srv\", \"role\"))",
          "56:     seq_rev = list(HookSequenceBuilder().build(HookPrefix.post, \"cmd\", \"srv\", \"role\"))",
          "58:     # testing base default sequence definition",
          "59:     check_list = [",
          "60:       \"before-cmd\",",
          "61:       \"before-cmd-srv\",",
          "62:       \"before-cmd-srv-role\"",
          "63:     ]",
          "65:     check_list_1 = [",
          "66:       \"after-cmd-srv-role\",",
          "67:       \"after-cmd-srv\",",
          "68:       \"after-cmd\"",
          "69:     ]",
          "71:     self.assertEquals(seq, check_list)",
          "72:     self.assertEquals(seq_rev, check_list_1)",
          "74:   def test_hook_resolved(self):",
          "75:     def pre():",
          "76:       for i in range(1, 5):",
          "77:         yield i",
          "79:     def post():",
          "80:       for i in range(1, 3):",
          "81:         yield i",
          "83:     ret = ResolvedHooks(pre(), post())",
          "85:     self.assertEqual(ret.pre_hooks, list(pre()))",
          "86:     self.assertEqual(ret.post_hooks, list(post()))",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py||ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py -> ambari-agent/src/test/python/ambari_agent/TestCustomServiceOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import os",
          "24: import pprint",
          "25: from ambari_commons import shell",
          "27: from unittest import TestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: from ambari_agent.models.commands import CommandStatus",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:     get_configuration_mock.return_value = execute_command",
          "403:     actionQueue.put([execute_command])",
          "406:     time.sleep(.1)",
          "",
          "[Removed Lines]",
          "404:     actionQueue.processBackgroundQueueSafeEmpty()",
          "",
          "[Added Lines]",
          "406:     actionQueue.process_background_queue_safe_empty()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:     runningCommand = actionQueue.commandStatuses.get_command_status(19)",
          "421:     self.assertTrue(runningCommand is not None)",
          "425:   @patch.object(ConfigurationBuilder, \"get_configuration\")",
          "",
          "[Removed Lines]",
          "422:     self.assertEqual(runningCommand['status'], ActionQueue.FAILED_STATUS)",
          "",
          "[Added Lines]",
          "424:     self.assertEqual(runningCommand['status'], CommandStatus.failed)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "565:     import TestActionQueue",
          "566:     pyex = PythonExecutor(orchestrator.tmp_dir, orchestrator.config)",
          "567:     TestActionQueue.patch_output_file(pyex)",
          "569:     get_py_executor_mock.return_value = pyex",
          "570:     orchestrator.dump_command_to_json = MagicMock()",
          "",
          "[Removed Lines]",
          "568:     pyex.condenseOutput = MagicMock()",
          "",
          "[Added Lines]",
          "570:     pyex.condense_output = MagicMock()",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestFileCache.py||ambari-agent/src/test/python/ambari_agent/TestFileCache.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestFileCache.py -> ambari-agent/src/test/python/ambari_agent/TestFileCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     command = {",
          "68:       'commandParams' : {",
          "69:         'service_package_folder' : os.path.join('stacks', 'HDP', '2.1.1', 'services', 'ZOOKEEPER', 'package')",
          "70:       }",
          "71:     }",
          "73:     self.assertEquals(",
          "74:       pprint.pformat(provide_directory_mock.call_args_list[0][0]),",
          "75:       \"('/var/lib/ambari-agent/cache',\\n \"",
          "",
          "[Removed Lines]",
          "72:     res = fileCache.get_service_base_dir(command, \"server_url_pref\")",
          "",
          "[Added Lines]",
          "70:       },",
          "71:       'ambariLevelParams': {",
          "72:         'jdk_location': 'server_url_pref'",
          "75:     res = fileCache.get_service_base_dir(command)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     # Check missing parameter",
          "85:     command = {",
          "86:       'clusterLevelParams' : {",
          "87:       }",
          "88:     }",
          "90:     self.assertEqual(base, None)",
          "91:     self.assertFalse(provide_directory_mock.called)",
          "",
          "[Removed Lines]",
          "89:     base = fileCache.get_hook_base_dir(command, \"server_url_pref\")",
          "",
          "[Added Lines]",
          "90:       },",
          "91:       'ambariLevelParams': {",
          "92:         'jdk_location': 'server_url_pref'",
          "95:     base = fileCache.get_hook_base_dir(command)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     command = {",
          "95:       'clusterLevelParams' : {",
          "96:         'hooks_folder' : 'stack-hooks'",
          "97:       }",
          "98:     }",
          "99:     provide_directory_mock.return_value = \"dummy value\"",
          "100:     fileCache = FileCache(self.config)",
          "102:     self.assertEquals(",
          "103:       pprint.pformat(provide_directory_mock.call_args_list[0][0]),",
          "104:       \"('/var/lib/ambari-agent/cache', \"",
          "",
          "[Removed Lines]",
          "101:     res = fileCache.get_hook_base_dir(command, \"server_url_pref\")",
          "",
          "[Added Lines]",
          "103:       },",
          "104:       'ambariLevelParams': {",
          "105:         'jdk_location': 'server_url_pref'",
          "110:     res = fileCache.get_hook_base_dir(command)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   def test_get_custom_actions_base_dir(self, provide_directory_mock):",
          "112:     provide_directory_mock.return_value = \"dummy value\"",
          "113:     fileCache = FileCache(self.config)",
          "115:     self.assertEquals(",
          "116:       pprint.pformat(provide_directory_mock.call_args_list[0][0]),",
          "117:       \"('/var/lib/ambari-agent/cache', 'custom_actions', 'server_url_pref')\")",
          "",
          "[Removed Lines]",
          "114:     res = fileCache.get_custom_actions_base_dir(\"server_url_pref\")",
          "",
          "[Added Lines]",
          "123:     res = fileCache.get_custom_actions_base_dir({",
          "124:       'ambariLevelParams': {",
          "125:         'jdk_location': 'server_url_pref'",
          "126:       }",
          "127:     })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:     command = {",
          "126:       'commandParams': {",
          "127:         'custom_folder' : 'dashboards'",
          "129:     }",
          "132:     self.assertEquals(",
          "133:       pprint.pformat(provide_directory_mock.call_args_list[0][0]),",
          "134:       \"('/var/lib/ambari-agent/cache', 'dashboards', 'server_url_pref')\")",
          "",
          "[Removed Lines]",
          "128:       }",
          "131:     res = fileCache.get_custom_resources_subdir(command, \"server_url_pref\")",
          "",
          "[Added Lines]",
          "141:       },",
          "142:       'ambariLevelParams': {",
          "143:           'jdk_location': 'server_url_pref'",
          "144:         }",
          "147:     res = fileCache.get_custom_resources_subdir(command)",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py||ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py -> ambari-agent/src/test/python/ambari_agent/TestPythonExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     tmpstructuredoutfile = tmp_file.name",
          "116:     tmp_file.close()",
          "120:     def launch_python_subprocess32_method(command, tmpout, tmperr):",
          "121:       subproc_mock.tmpout = tmpout",
          "",
          "[Removed Lines]",
          "118:     PYTHON_TIMEOUT_SECONDS =  5",
          "",
          "[Added Lines]",
          "118:     PYTHON_TIMEOUT_SECONDS = 5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     executor = PythonExecutor(\"/tmp\", AmbariConfig())",
          "142:     executor.python_process_has_been_killed = False",
          "146:     executor.python_process_has_been_killed = True",
          "151:   @patch.object(OSCheck, \"os_distribution\", new = MagicMock(return_value = os_distro_value))",
          "",
          "[Removed Lines]",
          "143:     self.assertTrue(executor.isSuccessfull(0))",
          "144:     self.assertFalse(executor.isSuccessfull(1))",
          "147:     self.assertFalse(executor.isSuccessfull(0))",
          "148:     self.assertFalse(executor.isSuccessfull(1))",
          "",
          "[Added Lines]",
          "143:     self.assertTrue(executor.is_successful(0))",
          "144:     self.assertFalse(executor.is_successful(1))",
          "147:     self.assertFalse(executor.is_successful(0))",
          "148:     self.assertFalse(executor.is_successful(1))",
          "",
          "---------------"
        ],
        "ambari-common/src/main/python/resource_management/libraries/script/hook.py||ambari-common/src/main/python/resource_management/libraries/script/hook.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/script/hook.py -> ambari-common/src/main/python/resource_management/libraries/script/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env ambari-python-wrap",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "",
          "[Removed Lines]",
          "3: '''",
          "",
          "[Added Lines]",
          "3: \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "21: __all__ = [\"Hook\"]",
          "",
          "[Removed Lines]",
          "19: '''",
          "",
          "[Added Lines]",
          "19: \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: from ambari_commons import subprocess32",
          "25: import sys",
          "27: class Hook(Script):",
          "28:   \"\"\"",
          "29:   Executes a hook for a command for custom service. stdout and stderr are written to",
          "30:   tmpoutfile and to tmperrfile respectively.",
          "31:   \"\"\"",
          "36:   def choose_method_to_execute(self, command_name):",
          "37:     \"\"\"",
          "",
          "[Removed Lines]",
          "33:   HOOK_METHOD_NAME = \"hook\" # This method is always executed at hooks",
          "",
          "[Added Lines]",
          "34:   HOOK_METHOD_NAME = \"hook\"  # This method is always executed at hooks",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:     \"\"\"",
          "40:     return super(Hook, self).choose_method_to_execute(self.HOOK_METHOD_NAME)",
          "43:   def run_custom_hook(self, command):",
          "44:     \"\"\"",
          "45:     Runs custom hook",
          "46:     \"\"\"",
          "47:     args = sys.argv",
          "50:     args[0] = args[0].replace('before-'+args[1], command)",
          "51:     args[0] = args[0].replace('after-'+args[1], command)",
          "54:     args[3] = args[3].replace('before-'+args[1], command)",
          "55:     args[3] = args[3].replace('after-'+args[1], command)",
          "57:     args[1] = command.split(\"-\")[1]",
          "60:     cmd = [sys.executable]",
          "61:     cmd.extend(args)",
          "63:     if subprocess32.call(cmd) != 0:",
          "",
          "[Removed Lines]",
          "49:     #Hook script to run",
          "53:     #Hook script base directory",
          "64:       self.fail_with_error(\"Error: Unable to run the custom hook script \" +",
          "65:                            cmd.__str__())",
          "",
          "[Added Lines]",
          "48:     # Hook script to run",
          "52:     # Hook script base directory",
          "62:       self.fail_with_error(\"Error: Unable to run the custom hook script \" + cmd.__str__())",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py||ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py": [
          "File: ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py -> ambari-server/src/main/resources/custom_actions/scripts/ru_execute_tasks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         if task.script and task.function:",
          "118:           file_cache = FileCache(agent_config)",
          "122:           if service_package_folder and hooks_folder:",
          "123:             command_paths = {",
          "124:               \"commandParams\": {",
          "",
          "[Removed Lines]",
          "120:           server_url_prefix = default('/ambariLevelParams/jdk_location', \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:               },",
          "127:               \"clusterLevelParams\": {",
          "128:                    \"hooks_folder\": hooks_folder",
          "129:               }",
          "130:             }",
          "133:           else:",
          "136:           script_path = os.path.join(base_dir, task.script)",
          "137:           if not os.path.exists(script_path):",
          "",
          "[Removed Lines]",
          "132:             base_dir = file_cache.get_service_base_dir(command_paths, server_url_prefix)",
          "134:             base_dir = file_cache.get_custom_actions_base_dir(server_url_prefix)",
          "",
          "[Added Lines]",
          "127:               },",
          "128:               \"ambariLevelParams\": {",
          "129:                 \"jdk_location\": default('/ambariLevelParams/jdk_location', \"\")",
          "133:             base_dir = file_cache.get_service_base_dir(command_paths)",
          "135:             base_dir = file_cache.get_custom_actions_base_dir({",
          "136:               \"ambariLevelParams\": {",
          "137:                 \"jdk_location\": default('/ambariLevelParams/jdk_location', \"\")",
          "138:               }",
          "139:             })",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/hook.py"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: \"\"\"",
          "23: class BeforeAnyHook(Hook):",
          "",
          "[Removed Lines]",
          "20: from resource_management import *",
          "21: from shared_initialization import *",
          "",
          "[Added Lines]",
          "21: from shared_initialization import setup_users, setup_hadoop_env, setup_java",
          "22: from resource_management import Hook",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: limitations under the License.",
          "18: \"\"\"",
          "25: class BeforeInstallHook(Hook):",
          "",
          "[Removed Lines]",
          "20: import sys",
          "21: from resource_management import *",
          "22: from shared_initialization import *",
          "23: from repo_initialization import *",
          "",
          "[Added Lines]",
          "19: from resource_management import Hook",
          "20: from shared_initialization import install_packages",
          "21: from repo_initialization import install_repos",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/before-RESTART/scripts/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: limitations under the License.",
          "18: \"\"\"",
          "22: class BeforeRestartHook(Hook):",
          "24:   def hook(self, env):",
          "25:     self.run_custom_hook('before-START')",
          "27: if __name__ == \"__main__\":",
          "28:   BeforeRestartHook().execute()",
          "",
          "[Removed Lines]",
          "20: from resource_management import *",
          "",
          "[Added Lines]",
          "19: from resource_management import Hook",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/before-SET_KEYTAB/scripts/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: limitations under the License.",
          "18: \"\"\"",
          "22: class BeforeSetKeytabHook(Hook):",
          "",
          "[Removed Lines]",
          "20: from resource_management import *",
          "",
          "[Added Lines]",
          "19: from resource_management import Hook",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/before-START/scripts/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: limitations under the License.",
          "18: \"\"\"",
          "22: from rack_awareness import create_topology_script_and_mapping",
          "24: from custom_extensions import setup_extensions",
          "26: class BeforeStartHook(Hook):",
          "28:   def hook(self, env):",
          "",
          "[Removed Lines]",
          "20: import sys",
          "21: from resource_management import *",
          "23: from shared_initialization import setup_hadoop, setup_configs, create_javahome_symlink, setup_unlimited_key_jce_policy",
          "",
          "[Added Lines]",
          "20: from shared_initialization import setup_hadoop, setup_configs, create_javahome_symlink, setup_unlimited_key_jce_policy, \\",
          "21:   Hook",
          "",
          "---------------"
        ]
      }
    }
  ]
}