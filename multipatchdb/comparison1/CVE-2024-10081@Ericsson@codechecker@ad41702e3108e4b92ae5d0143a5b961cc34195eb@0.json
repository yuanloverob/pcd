{
  "cve_id": "CVE-2024-10081",
  "cve_desc": "CodeChecker is an analyzer tooling, defect database and viewer extension for the Clang Static Analyzer and Clang Tidy. \nAuthentication bypass occurs when the API URL ends with Authentication. This bypass allows superuser access to all API endpoints other than Authentication. These endpoints include the ability to add, edit, and remove products, among others. All endpoints, apart from the /Authentication is affected by the vulnerability.\n\nThis issue affects CodeChecker: through 6.24.1.",
  "repo": "Ericsson/codechecker",
  "patch_hash": "ad41702e3108e4b92ae5d0143a5b961cc34195eb",
  "patch_info": {
    "commit_hash": "ad41702e3108e4b92ae5d0143a5b961cc34195eb",
    "repo": "Ericsson/codechecker",
    "commit_url": "https://github.com/Ericsson/codechecker/commit/ad41702e3108e4b92ae5d0143a5b961cc34195eb",
    "files": [
      "web/api/products.thrift",
      "web/api/report_server.thrift",
      "web/server/codechecker_server/api/config_handler.py",
      "web/server/codechecker_server/api/product_server.py",
      "web/server/codechecker_server/api/report_server.py",
      "web/server/codechecker_server/routing.py",
      "web/server/codechecker_server/server.py",
      "web/server/tests/unit/test_request_routing.py",
      "web/tests/functional/products/test_products.py",
      "web/tests/functional/server_configuration/test_server_configuration.py"
    ],
    "message": "Fix the endpoint parsing issue\n\nURL parsing is hardened in the web server.",
    "before_after_code_files": [
      "web/api/products.thrift||web/api/products.thrift",
      "web/api/report_server.thrift||web/api/report_server.thrift",
      "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
      "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
      "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
      "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
      "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
      "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
      "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
      "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
    ]
  },
  "patch_diff": {
    "web/api/products.thrift||web/api/products.thrift": [
      "File: web/api/products.thrift -> web/api/products.thrift"
    ],
    "web/api/report_server.thrift||web/api/report_server.thrift": [
      "File: web/api/report_server.thrift -> web/api/report_server.thrift"
    ],
    "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py": [
      "File: web/server/codechecker_server/api/config_handler.py -> web/server/codechecker_server/api/config_handler.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     Manages Thrift requests regarding configuration.",
      "32:     \"\"\"",
      "35:         self.__auth_session = auth_session",
      "36:         self.__session = config_session",
      "38:     def __require_supermission(self):",
      "39:         \"\"\"",
      "40:         Checks if the current user isn't a SUPERUSER.",
      "41:         \"\"\"",
      "42:         if (not (self.__auth_session is None) and",
      "43:                 not self.__auth_session.is_root):",
      "44:             raise codechecker_api_shared.ttypes.RequestFailed(",
      "",
      "[Removed Lines]",
      "34:     def __init__(self, auth_session, config_session):",
      "",
      "[Added Lines]",
      "34:     def __init__(self, auth_session, config_session, session_manager):",
      "37:         self.__session_manager = session_manager",
      "44:         # Anonymous access is only allowed if authentication is",
      "45:         # turned off",
      "46:         if self.__session_manager.is_enabled and not self.__auth_session:",
      "47:             raise codechecker_api_shared.ttypes.RequestFailed(",
      "48:                 codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
      "49:                 \"You are not authorized to execute this action.\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:     def setNotificationBannerText(self, notification_b64):",
      "70:         \"\"\"",
      "71:         Sets the notification banner remove_products_except.",
      "73:         \"\"\"",
      "75:         self.__require_supermission()",
      "",
      "[Removed Lines]",
      "72:         Bevare: This method only works if the use is a SUPERUSER.",
      "",
      "[Added Lines]",
      "81:         Beware: This method only works if the use is a SUPERUSER.",
      "",
      "---------------"
    ],
    "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py": [
      "File: web/server/codechecker_server/api/product_server.py -> web/server/codechecker_server/api/product_server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:                 args = dict(self.__permission_args)",
      "70:                 args['config_db_session'] = session",
      "72:             if not any(permissions.require_permission(",
      "73:                            perm, args, self.__auth_session)",
      "74:                        for perm in required):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:             # Anonymous access is only allowed if authentication is",
      "73:             # turned off",
      "74:             if self.__server.manager.is_enabled and not self.__auth_session:",
      "75:                 raise codechecker_api_shared.ttypes.RequestFailed(",
      "76:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
      "77:                     \"You are not authorized to execute this action.\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "247:         Get the product configuration --- WITHOUT THE DB PASSWORD --- of the",
      "248:         given product.",
      "249:         \"\"\"",
      "251:         with DBSession(self.__session) as session:",
      "252:             product = session.query(Product).get(product_id)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257:         self.__require_permission([permissions.PRODUCT_VIEW])",
      "",
      "---------------"
    ],
    "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
      "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1447:             args = dict(self.__permission_args)",
      "1448:             args['config_db_session'] = session",
      "1450:             if not any(permissions.require_permission(",
      "1451:                     perm, args, self._auth_session)",
      "1452:                     for perm in required):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1450:             # Anonymous access is only allowed if authentication is",
      "1451:             # turned off",
      "1452:             if self._manager.is_enabled and not self._auth_session:",
      "1453:                 raise codechecker_api_shared.ttypes.RequestFailed(",
      "1454:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
      "1455:                     \"You are not authorized to execute this action.\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2421:         \"\"\"",
      "2422:         Return True if review status change is disabled.",
      "2423:         \"\"\"",
      "2424:         with DBSession(self._config_database) as session:",
      "2425:             product = session.query(Product).get(self._product.id)",
      "2426:             return product.is_review_status_change_disabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2432:         self.__require_view()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2746:         Parameters:",
      "2747:          - checkerId",
      "2748:         \"\"\"",
      "2750:         return \"\"",
      "2752:     @exc_to_thrift_reqfail",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2759:         self.__require_view()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2756:         checkers: List[ttypes.Checker]",
      "2757:     ) -> List[List[str]]:",
      "2758:         \"\"\" Return the list of labels to each checker. \"\"\"",
      "2759:         labels = []",
      "2760:         for checker in checkers:",
      "2761:             analyzer_name = None if not checker.analyzerName \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2769:         self.__require_view()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3569:         given run. If the run id list is empty the number of failed files will",
      "3570:         be counted for all of the runs.",
      "3571:         \"\"\"",
      "3572:         # Unfortunately we can't distinct the failed file paths by using SQL",
      "3573:         # queries because the list of failed files for a run / analyzer are",
      "3574:         # stored in one column in a compressed way. For this reason we need to",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3584:         self.__require_view()",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3611:     # -----------------------------------------------------------------------",
      "3612:     @timeit",
      "3613:     def getPackageVersion(self):",
      "3614:         return self.__package_version",
      "3616:     # -----------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3628:         self.__require_view()",
      "",
      "---------------"
    ],
    "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py": [
      "File: web/server/codechecker_server/routing.py -> web/server/codechecker_server/routing.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:     version = version.lstrip('v')",
      "73:     version_parts = version.split('.')",
      "75:     # We don't care if accidentally the version tag contains a revision number.",
      "76:     major, minor = int(version_parts[0]), int(version_parts[1])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     if len(version_parts) < 2:",
      "75:         return False",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:     \"\"\"",
      "117:     # A standard POST request from an API client looks like:",
      "119:     # where specifying the product name is optional.",
      "121:     split_path = urlparse(path).path.split('/', 3)",
      "123:     endpoint_part = split_path[1]",
      "125:         version_tag = split_path[2].lstrip('v')",
      "130:         # Request came through without a valid product URL endpoint to",
      "131:         # possibly the main server.",
      "132:         version_tag = split_path[1].lstrip('v')",
      "137:     return None, None, None",
      "",
      "[Removed Lines]",
      "118:     # http://localhost:8001/[product-name]/<API version>/<API service>",
      "124:     if is_valid_product_endpoint(split_path[1]):",
      "126:         remainder = split_path[3]",
      "128:         return endpoint_part, version_tag, remainder",
      "129:     elif split_path[1].startswith('v'):",
      "133:         remainder = split_path[2]",
      "135:         return None, version_tag, remainder",
      "",
      "[Added Lines]",
      "120:     # http://localhost:8001/[product-name/]<API version>/<API service>",
      "126:     if is_valid_product_endpoint(split_path[1]) and len(split_path) == 4:",
      "128:         if not is_supported_version(version_tag):",
      "129:             return None, None, None",
      "130:         endpoint = split_path[3]",
      "131:         return endpoint_part, version_tag, endpoint",
      "133:     elif split_path[1].startswith('v') and len(split_path) == 3:",
      "137:         if not is_supported_version(version_tag):",
      "138:             return None, None, None",
      "139:         endpoint = split_path[2]",
      "140:         return None, version_tag, endpoint",
      "",
      "---------------"
    ],
    "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
      "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:         otrans = TTransport.TMemoryBuffer()",
      "329:         oprot = output_protocol_factory.getProtocol(otrans)",
      "331:         if self.server.manager.is_enabled and \\",
      "335:                 not self.auth_session:",
      "336:             # Bail out if the user is not authenticated...",
      "337:             # This response has the possibility of melting down Thrift clients,",
      "",
      "[Removed Lines]",
      "332:                 not self.path.endswith(('/Authentication',",
      "333:                                         '/Configuration',",
      "334:                                         '/ServerInfo')) and \\",
      "",
      "[Added Lines]",
      "331:         product_endpoint, api_ver, request_endpoint = \\",
      "332:             routing.split_client_POST_request(self.path)",
      "334:         if product_endpoint is None and api_ver is None and \\",
      "335:                 request_endpoint is None:",
      "336:             self.send_thrift_exception(\"Invalid request endpoint path.\", iprot,",
      "337:                                        oprot, otrans)",
      "338:             return",
      "340:         # Only Authentication, Configuration, ServerInof",
      "341:         # endpoints are allowed for Anonymous users",
      "342:         # if authentication is required.",
      "344:                 request_endpoint not in \\",
      "345:                 ['Authentication', 'Configuration', 'ServerInfo'] and \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "348:         # Authentication is handled, we may now respond to the user.",
      "349:         try:",
      "356:             product = None",
      "357:             if product_endpoint:",
      "358:                 # The current request came through a product route, and not",
      "",
      "[Removed Lines]",
      "350:             product_endpoint, api_ver, request_endpoint = \\",
      "351:                 routing.split_client_POST_request(self.path)",
      "352:             if product_endpoint is None and api_ver is None and \\",
      "353:                     request_endpoint is None:",
      "354:                 raise ValueError(\"Invalid request endpoint path.\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "373:                     elif request_endpoint == 'Configuration':",
      "374:                         conf_handler = ConfigHandler_v6(",
      "375:                             self.auth_session,",
      "377:                         processor = ConfigAPI_v6.Processor(conf_handler)",
      "378:                     elif request_endpoint == 'ServerInfo':",
      "379:                         server_info_handler = ServerInfoHandler_v6(version)",
      "",
      "[Removed Lines]",
      "376:                             self.server.config_session)",
      "",
      "[Added Lines]",
      "381:                             self.server.config_session,",
      "382:                             self.server.manager)",
      "",
      "---------------"
    ],
    "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py": [
      "File: web/server/tests/unit/test_request_routing.py -> web/server/tests/unit/test_request_routing.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         # It is the server code's responsibility to give a 404 Not Found.",
      "53:         self.assertEqual(post(''), (None, None, None))",
      "54:         self.assertEqual(post('CodeCheckerService'), (None, None, None))",
      "63:         self.assertEqual(post('/v6.0/Authentication'),",
      "64:                          (None, '6.0', 'Authentication'))",
      "",
      "[Removed Lines]",
      "56:         # Raise an exception if URL is malformed, such as contains a",
      "57:         # product-endpoint-like component which is badly encoded version",
      "58:         # string.",
      "59:         with self.assertRaises(Exception):",
      "60:             post('v6.0')",
      "61:             post('/v6/CodeCheckerService')",
      "66:         self.assertEqual(post('/DummyProduct/v0.0/FoobarService'),",
      "67:                          ('DummyProduct', '0.0', 'FoobarService'))",
      "",
      "[Added Lines]",
      "55:         self.assertEqual(post('v6.0'), (None, None, None))",
      "56:         self.assertEqual(post('/v6.0/product/Authentication/Service'),",
      "57:                          (None, None, None))",
      "62:         self.assertEqual(post('/DummyProduct/v6.0/FoobarService'),",
      "63:                          ('DummyProduct', '6.0', 'FoobarService'))",
      "",
      "---------------"
    ],
    "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py": [
      "File: web/tests/functional/products/test_products.py -> web/tests/functional/products/test_products.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:         # Now get the SERVERSPACE (configuration) for the product.",
      "152:         # TODO: These things usually should only work for superusers!",
      "155:         self.assertIsNotNone(pr_conf, \"Product configuration must come.\")",
      "156:         self.assertEqual(pr_conf.endpoint, self.product_name,",
      "",
      "[Removed Lines]",
      "153:         pr_conf = self._pr_client.getProductConfiguration(pr_data.id)",
      "",
      "[Added Lines]",
      "153:         pr_conf = self._root_client.getProductConfiguration(pr_data.id)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "189:         pr_client = env.setup_product_client(",
      "190:             self.test_workspace, product=self.product_name)",
      "191:         product_id = pr_client.getCurrentProduct().id",
      "194:         old_name = config.displayedName_b64",
      "",
      "[Removed Lines]",
      "192:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "192:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "202:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "203:                         \"Product edit didn't conclude.\")",
      "206:         self.assertEqual(config.endpoint, self.product_name,",
      "207:                          \"The product edit changed the endpoint, when it \"",
      "208:                          \"shouldn't have!\")",
      "",
      "[Removed Lines]",
      "205:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "205:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "214:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "215:                         \"Product config restore didn't conclude.\")",
      "218:         self.assertEqual(config.displayedName_b64, old_name,",
      "219:                          \"The product edit didn't change the name back.\")",
      "",
      "[Removed Lines]",
      "217:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "217:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "225:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "226:                         \"Product edit didn't conclude.\")",
      "229:         self.assertEqual(config.confidentiality,",
      "230:                          new_confidentiality,",
      "231:                          \"Couldn't change the confidentiality to OPEN\")",
      "",
      "[Removed Lines]",
      "228:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "228:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "235:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "236:                         \"Product edit didn't conclude.\")",
      "239:         self.assertEqual(config.confidentiality,",
      "240:                          new_confidentiality,",
      "241:                          \"Couldn't change the confidentiality to INTERNAL\")",
      "",
      "[Removed Lines]",
      "238:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "238:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "245:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "246:                         \"Product edit didn't conclude.\")",
      "249:         self.assertEqual(config.confidentiality,",
      "250:                          new_confidentiality,",
      "251:                          \"Couldn't change the confidentiality to CONFIDENTIAL\")",
      "",
      "[Removed Lines]",
      "248:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "248:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "256:                         \"Product config restore didn't conclude.\")",
      "259:         self.assertEqual(config.confidentiality,",
      "260:                          old_confidentiality,",
      "261:                          \"The edit didn't change back the confidentiality.\")",
      "",
      "[Removed Lines]",
      "258:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "258:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "271:         pr_client = env.setup_product_client(",
      "272:             self.test_workspace, product=self.product_name)",
      "273:         product_id = pr_client.getCurrentProduct().id",
      "276:         old_db_name = config.connection.database",
      "",
      "[Removed Lines]",
      "274:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "274:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "292:                         \"Product edit didn't conclude.\")",
      "294:         # Check if the configuration now uses the new values.",
      "297:         self.assertEqual(config.connection.database, new_db_name,",
      "298:                          \"Server didn't save new database name.\")",
      "",
      "[Removed Lines]",
      "295:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "295:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "311:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "312:                         \"Product configuration restore didn't conclude.\")",
      "315:         self.assertEqual(config.connection.database, old_db_name,",
      "316:                          \"Server didn't save back to old database name.\")",
      "",
      "[Removed Lines]",
      "314:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "314:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "336:         pr_client = env.setup_product_client(",
      "337:             self.test_workspace, product=self.product_name)",
      "338:         product_id = pr_client.getCurrentProduct().id",
      "341:         old_endpoint = config.endpoint",
      "342:         new_endpoint = \"edited_endpoint\"",
      "",
      "[Removed Lines]",
      "339:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "339:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "347:                         \"Product edit didn't conclude.\")",
      "349:         # Check if the configuration now uses the new values.",
      "351:         self.assertEqual(config.endpoint, new_endpoint,",
      "352:                          \"Server didn't save new endpoint.\")",
      "",
      "[Removed Lines]",
      "350:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "350:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "372:         self.assertTrue(self._root_client.editProduct(product_id, config),",
      "373:                         \"Product configuration restore didn't conclude.\")",
      "376:         self.assertEqual(config.endpoint, old_endpoint,",
      "377:                          \"Server didn't save back to old endpoint.\")",
      "",
      "[Removed Lines]",
      "375:         config = self._pr_client.getProductConfiguration(product_id)",
      "",
      "[Added Lines]",
      "375:         config = self._root_client.getProductConfiguration(product_id)",
      "",
      "---------------"
    ],
    "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py": [
      "File: web/tests/functional/server_configuration/test_server_configuration.py -> web/tests/functional/server_configuration/test_server_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:     def test_noauth_notification_edit(self):",
      "106:         \"\"\"",
      "108:         \"\"\"",
      "110:         # A non-authenticated session should return an empty user.",
      "111:         user = self.auth_client.getLoggedInUser()",
      "112:         self.assertEqual(user, \"\")",
      "124:         # Create a SUPERUSER login.",
      "125:         self.session_token = self.auth_client.performLogin(",
      "126:             \"Username:Password\", \"root:root\")",
      "",
      "[Removed Lines]",
      "107:         Test for editing the notification text on a non authenting server.",
      "114:         # Server without authentication should allow notification setting.",
      "115:         self.config_client.setNotificationBannerText(",
      "116:             convert.to_b64('noAuth notif'))",
      "117:         self.assertEqual(convert.from_b64(",
      "118:             self.config_client.getNotificationBannerText()), 'noAuth notif')",
      "120:     def test_auth_su_notification_edit(self):",
      "121:         \"\"\"",
      "122:         Test that SUPERADMINS can edit the notification text.",
      "123:         \"\"\"",
      "",
      "[Added Lines]",
      "107:         Test for editing the notification text on a non-authenticating user",
      "108:         on an authenticating server",
      "115:         # Anonymous user should not be allowed to change the banner",
      "116:         with self.assertRaises(RequestFailed):",
      "117:             self.config_client.setNotificationBannerText(",
      "118:                     convert.to_b64('non su notification'))",
      "120:     def get_su_config_client(self):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:         user = su_auth_client.getLoggedInUser()",
      "144:         self.assertEqual(user, \"root\")",
      "147:         su_config_client.setNotificationBannerText(",
      "148:                 convert.to_b64('su notification'))",
      "149:         self.assertEqual(convert.from_b64(",
      "",
      "[Removed Lines]",
      "145:         # we are root",
      "",
      "[Added Lines]",
      "142:         return su_config_client",
      "144:     def test_auth_su_notification_edit(self):",
      "145:         \"\"\"",
      "146:         Test that SUPERADMINS can edit the notification text.",
      "147:         \"\"\"",
      "149:         su_config_client = self.get_su_config_client()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "172:             authd_config_client.setNotificationBannerText(",
      "173:                     convert.to_b64('non su notification'))",
      "177:     def test_unicode_string(self):",
      "178:         \"\"\"",
      "179:         Test for non ascii strings. Needed because the used Thrift",
      "180:         version won't eat them.",
      "181:         \"\"\"",
      "187:         # Check if utf-8 encoded strings are okay.",
      "189:                 convert.to_b64('\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p'))",
      "190:         self.assertEqual(convert.from_b64(",
      "192:             '\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p')",
      "",
      "[Removed Lines]",
      "175:             print(\"You are not authorized to modify notifications!\")",
      "183:         # A non-authenticated session should return an empty user.",
      "184:         user = self.auth_client.getLoggedInUser()",
      "185:         self.assertEqual(user, \"\")",
      "188:         self.config_client.setNotificationBannerText(",
      "191:             self.config_client.getNotificationBannerText()),",
      "",
      "[Added Lines]",
      "178:         print(\"You are not authorized to modify notifications!\")",
      "185:         su_config_client = self.get_su_config_client()",
      "188:         su_config_client.setNotificationBannerText(",
      "191:              su_config_client.getNotificationBannerText()),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8953b30f6d17597635ec59bb943683aacb216619",
      "candidate_info": {
        "commit_hash": "8953b30f6d17597635ec59bb943683aacb216619",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/8953b30f6d17597635ec59bb943683aacb216619",
        "files": [
          "web/api/products.thrift",
          "web/api/report_server.thrift",
          "web/server/codechecker_server/api/config_handler.py",
          "web/server/codechecker_server/api/product_server.py",
          "web/server/codechecker_server/api/report_server.py",
          "web/server/codechecker_server/routing.py",
          "web/server/codechecker_server/server.py",
          "web/server/tests/unit/test_request_routing.py",
          "web/tests/functional/products/test_products.py",
          "web/tests/functional/server_configuration/test_server_configuration.py"
        ],
        "message": "Fix the endpoint parsing issue\n\nURL parsing is hardened in the web server.",
        "before_after_code_files": [
          "web/api/products.thrift||web/api/products.thrift",
          "web/api/report_server.thrift||web/api/report_server.thrift",
          "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
          "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
          "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
          "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
          "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
          "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
          "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
          "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/api/products.thrift||web/api/products.thrift",
            "web/api/report_server.thrift||web/api/report_server.thrift",
            "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
            "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
            "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
            "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
          ],
          "candidate": [
            "web/api/products.thrift||web/api/products.thrift",
            "web/api/report_server.thrift||web/api/report_server.thrift",
            "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
            "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
            "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
            "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
          ]
        }
      },
      "candidate_diff": {
        "web/api/products.thrift||web/api/products.thrift": [
          "File: web/api/products.thrift -> web/api/products.thrift"
        ],
        "web/api/report_server.thrift||web/api/report_server.thrift": [
          "File: web/api/report_server.thrift -> web/api/report_server.thrift"
        ],
        "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py": [
          "File: web/server/codechecker_server/api/config_handler.py -> web/server/codechecker_server/api/config_handler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     Manages Thrift requests regarding configuration.",
          "32:     \"\"\"",
          "35:         self.__auth_session = auth_session",
          "36:         self.__session = config_session",
          "38:     def __require_supermission(self):",
          "39:         \"\"\"",
          "40:         Checks if the current user isn't a SUPERUSER.",
          "41:         \"\"\"",
          "42:         if (not (self.__auth_session is None) and",
          "43:                 not self.__auth_session.is_root):",
          "44:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "",
          "[Removed Lines]",
          "34:     def __init__(self, auth_session, config_session):",
          "",
          "[Added Lines]",
          "34:     def __init__(self, auth_session, config_session, session_manager):",
          "37:         self.__session_manager = session_manager",
          "44:         # Anonymous access is only allowed if authentication is",
          "45:         # turned off",
          "46:         if self.__session_manager.is_enabled and not self.__auth_session:",
          "47:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "48:                 codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "49:                 \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     def setNotificationBannerText(self, notification_b64):",
          "70:         \"\"\"",
          "71:         Sets the notification banner remove_products_except.",
          "73:         \"\"\"",
          "75:         self.__require_supermission()",
          "",
          "[Removed Lines]",
          "72:         Bevare: This method only works if the use is a SUPERUSER.",
          "",
          "[Added Lines]",
          "81:         Beware: This method only works if the use is a SUPERUSER.",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py": [
          "File: web/server/codechecker_server/api/product_server.py -> web/server/codechecker_server/api/product_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                 args = dict(self.__permission_args)",
          "70:                 args['config_db_session'] = session",
          "72:             if not any(permissions.require_permission(",
          "73:                            perm, args, self.__auth_session)",
          "74:                        for perm in required):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             # Anonymous access is only allowed if authentication is",
          "73:             # turned off",
          "74:             if self.__server.manager.is_enabled and not self.__auth_session:",
          "75:                 raise codechecker_api_shared.ttypes.RequestFailed(",
          "76:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "77:                     \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:         Get the product configuration --- WITHOUT THE DB PASSWORD --- of the",
          "248:         given product.",
          "249:         \"\"\"",
          "251:         with DBSession(self.__session) as session:",
          "252:             product = session.query(Product).get(product_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:         self.__require_permission([permissions.PRODUCT_VIEW])",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
          "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1447:             args = dict(self.__permission_args)",
          "1448:             args['config_db_session'] = session",
          "1450:             if not any(permissions.require_permission(",
          "1451:                     perm, args, self._auth_session)",
          "1452:                     for perm in required):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450:             # Anonymous access is only allowed if authentication is",
          "1451:             # turned off",
          "1452:             if self._manager.is_enabled and not self._auth_session:",
          "1453:                 raise codechecker_api_shared.ttypes.RequestFailed(",
          "1454:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "1455:                     \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2421:         \"\"\"",
          "2422:         Return True if review status change is disabled.",
          "2423:         \"\"\"",
          "2424:         with DBSession(self._config_database) as session:",
          "2425:             product = session.query(Product).get(self._product.id)",
          "2426:             return product.is_review_status_change_disabled",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2432:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:         Parameters:",
          "2747:          - checkerId",
          "2748:         \"\"\"",
          "2750:         return \"\"",
          "2752:     @exc_to_thrift_reqfail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2759:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2756:         checkers: List[ttypes.Checker]",
          "2757:     ) -> List[List[str]]:",
          "2758:         \"\"\" Return the list of labels to each checker. \"\"\"",
          "2759:         labels = []",
          "2760:         for checker in checkers:",
          "2761:             analyzer_name = None if not checker.analyzerName \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2769:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3569:         given run. If the run id list is empty the number of failed files will",
          "3570:         be counted for all of the runs.",
          "3571:         \"\"\"",
          "3572:         # Unfortunately we can't distinct the failed file paths by using SQL",
          "3573:         # queries because the list of failed files for a run / analyzer are",
          "3574:         # stored in one column in a compressed way. For this reason we need to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3584:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3611:     # -----------------------------------------------------------------------",
          "3612:     @timeit",
          "3613:     def getPackageVersion(self):",
          "3614:         return self.__package_version",
          "3616:     # -----------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3628:         self.__require_view()",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py": [
          "File: web/server/codechecker_server/routing.py -> web/server/codechecker_server/routing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     version = version.lstrip('v')",
          "73:     version_parts = version.split('.')",
          "75:     # We don't care if accidentally the version tag contains a revision number.",
          "76:     major, minor = int(version_parts[0]), int(version_parts[1])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     if len(version_parts) < 2:",
          "75:         return False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     \"\"\"",
          "117:     # A standard POST request from an API client looks like:",
          "119:     # where specifying the product name is optional.",
          "121:     split_path = urlparse(path).path.split('/', 3)",
          "123:     endpoint_part = split_path[1]",
          "125:         version_tag = split_path[2].lstrip('v')",
          "130:         # Request came through without a valid product URL endpoint to",
          "131:         # possibly the main server.",
          "132:         version_tag = split_path[1].lstrip('v')",
          "137:     return None, None, None",
          "",
          "[Removed Lines]",
          "118:     # http://localhost:8001/[product-name]/<API version>/<API service>",
          "124:     if is_valid_product_endpoint(split_path[1]):",
          "126:         remainder = split_path[3]",
          "128:         return endpoint_part, version_tag, remainder",
          "129:     elif split_path[1].startswith('v'):",
          "133:         remainder = split_path[2]",
          "135:         return None, version_tag, remainder",
          "",
          "[Added Lines]",
          "120:     # http://localhost:8001/[product-name/]<API version>/<API service>",
          "126:     if is_valid_product_endpoint(split_path[1]) and len(split_path) == 4:",
          "128:         if not is_supported_version(version_tag):",
          "129:             return None, None, None",
          "130:         endpoint = split_path[3]",
          "131:         return endpoint_part, version_tag, endpoint",
          "133:     elif split_path[1].startswith('v') and len(split_path) == 3:",
          "137:         if not is_supported_version(version_tag):",
          "138:             return None, None, None",
          "139:         endpoint = split_path[2]",
          "140:         return None, version_tag, endpoint",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
          "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:         otrans = TTransport.TMemoryBuffer()",
          "334:         oprot = output_protocol_factory.getProtocol(otrans)",
          "336:         if self.server.manager.is_enabled and \\",
          "340:                 not self.auth_session:",
          "341:             # Bail out if the user is not authenticated...",
          "342:             # This response has the possibility of melting down Thrift clients,",
          "",
          "[Removed Lines]",
          "337:                 not self.path.endswith(('/Authentication',",
          "338:                                         '/Configuration',",
          "339:                                         '/ServerInfo')) and \\",
          "",
          "[Added Lines]",
          "336:         product_endpoint, api_ver, request_endpoint = \\",
          "337:             routing.split_client_POST_request(self.path)",
          "339:         if product_endpoint is None and api_ver is None and \\",
          "340:                 request_endpoint is None:",
          "341:             self.send_thrift_exception(\"Invalid request endpoint path.\", iprot,",
          "342:                                        oprot, otrans)",
          "343:             return",
          "345:         # Only Authentication, Configuration, ServerInof",
          "346:         # endpoints are allowed for Anonymous users",
          "347:         # if authentication is required.",
          "349:                 request_endpoint not in \\",
          "350:                 ['Authentication', 'Configuration', 'ServerInfo'] and \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         # Authentication is handled, we may now respond to the user.",
          "354:         try:",
          "361:             product = None",
          "362:             if product_endpoint:",
          "363:                 # The current request came through a product route, and not",
          "",
          "[Removed Lines]",
          "355:             product_endpoint, api_ver, request_endpoint = \\",
          "356:                 routing.split_client_POST_request(self.path)",
          "357:             if product_endpoint is None and api_ver is None and \\",
          "358:                     request_endpoint is None:",
          "359:                 raise ValueError(\"Invalid request endpoint path.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:                     elif request_endpoint == 'Configuration':",
          "379:                         conf_handler = ConfigHandler_v6(",
          "380:                             self.auth_session,",
          "382:                         processor = ConfigAPI_v6.Processor(conf_handler)",
          "383:                     elif request_endpoint == 'ServerInfo':",
          "384:                         server_info_handler = ServerInfoHandler_v6(version)",
          "",
          "[Removed Lines]",
          "381:                             self.server.config_session)",
          "",
          "[Added Lines]",
          "386:                             self.server.config_session,",
          "387:                             self.server.manager)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1098:                       \"Earlier logs might contain additional detailed \"",
          "1099:                       \"reasoning.\\n\\t* %s\", len(fails),",
          "1100:                       \"\\n\\t* \".join(",
          "1102:                       ))",
          "1103:     else:",
          "1104:         LOG.debug(\"Skipping db_cleanup, as requested.\")",
          "",
          "[Removed Lines]",
          "1101:                         (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "[Added Lines]",
          "1107:                           (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "---------------"
        ],
        "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py": [
          "File: web/server/tests/unit/test_request_routing.py -> web/server/tests/unit/test_request_routing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         # It is the server code's responsibility to give a 404 Not Found.",
          "53:         self.assertEqual(post(''), (None, None, None))",
          "54:         self.assertEqual(post('CodeCheckerService'), (None, None, None))",
          "63:         self.assertEqual(post('/v6.0/Authentication'),",
          "64:                          (None, '6.0', 'Authentication'))",
          "",
          "[Removed Lines]",
          "56:         # Raise an exception if URL is malformed, such as contains a",
          "57:         # product-endpoint-like component which is badly encoded version",
          "58:         # string.",
          "59:         with self.assertRaises(Exception):",
          "60:             post('v6.0')",
          "61:             post('/v6/CodeCheckerService')",
          "66:         self.assertEqual(post('/DummyProduct/v0.0/FoobarService'),",
          "67:                          ('DummyProduct', '0.0', 'FoobarService'))",
          "",
          "[Added Lines]",
          "55:         self.assertEqual(post('v6.0'), (None, None, None))",
          "56:         self.assertEqual(post('/v6.0/product/Authentication/Service'),",
          "57:                          (None, None, None))",
          "62:         self.assertEqual(post('/DummyProduct/v6.0/FoobarService'),",
          "63:                          ('DummyProduct', '6.0', 'FoobarService'))",
          "",
          "---------------"
        ],
        "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py": [
          "File: web/tests/functional/products/test_products.py -> web/tests/functional/products/test_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         # Now get the SERVERSPACE (configuration) for the product.",
          "152:         # TODO: These things usually should only work for superusers!",
          "155:         self.assertIsNotNone(pr_conf, \"Product configuration must come.\")",
          "156:         self.assertEqual(pr_conf.endpoint, self.product_name,",
          "",
          "[Removed Lines]",
          "153:         pr_conf = self._pr_client.getProductConfiguration(pr_data.id)",
          "",
          "[Added Lines]",
          "153:         pr_conf = self._root_client.getProductConfiguration(pr_data.id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         pr_client = env.setup_product_client(",
          "190:             self.test_workspace, product=self.product_name)",
          "191:         product_id = pr_client.getCurrentProduct().id",
          "194:         old_name = config.displayedName_b64",
          "",
          "[Removed Lines]",
          "192:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "192:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "203:                         \"Product edit didn't conclude.\")",
          "206:         self.assertEqual(config.endpoint, self.product_name,",
          "207:                          \"The product edit changed the endpoint, when it \"",
          "208:                          \"shouldn't have!\")",
          "",
          "[Removed Lines]",
          "205:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "205:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "215:                         \"Product config restore didn't conclude.\")",
          "218:         self.assertEqual(config.displayedName_b64, old_name,",
          "219:                          \"The product edit didn't change the name back.\")",
          "",
          "[Removed Lines]",
          "217:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "217:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "226:                         \"Product edit didn't conclude.\")",
          "229:         self.assertEqual(config.confidentiality,",
          "230:                          new_confidentiality,",
          "231:                          \"Couldn't change the confidentiality to OPEN\")",
          "",
          "[Removed Lines]",
          "228:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "228:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "236:                         \"Product edit didn't conclude.\")",
          "239:         self.assertEqual(config.confidentiality,",
          "240:                          new_confidentiality,",
          "241:                          \"Couldn't change the confidentiality to INTERNAL\")",
          "",
          "[Removed Lines]",
          "238:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "238:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "246:                         \"Product edit didn't conclude.\")",
          "249:         self.assertEqual(config.confidentiality,",
          "250:                          new_confidentiality,",
          "251:                          \"Couldn't change the confidentiality to CONFIDENTIAL\")",
          "",
          "[Removed Lines]",
          "248:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "248:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "256:                         \"Product config restore didn't conclude.\")",
          "259:         self.assertEqual(config.confidentiality,",
          "260:                          old_confidentiality,",
          "261:                          \"The edit didn't change back the confidentiality.\")",
          "",
          "[Removed Lines]",
          "258:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "258:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271:         pr_client = env.setup_product_client(",
          "272:             self.test_workspace, product=self.product_name)",
          "273:         product_id = pr_client.getCurrentProduct().id",
          "276:         old_db_name = config.connection.database",
          "",
          "[Removed Lines]",
          "274:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "274:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "292:                         \"Product edit didn't conclude.\")",
          "294:         # Check if the configuration now uses the new values.",
          "297:         self.assertEqual(config.connection.database, new_db_name,",
          "298:                          \"Server didn't save new database name.\")",
          "",
          "[Removed Lines]",
          "295:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "295:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "312:                         \"Product configuration restore didn't conclude.\")",
          "315:         self.assertEqual(config.connection.database, old_db_name,",
          "316:                          \"Server didn't save back to old database name.\")",
          "",
          "[Removed Lines]",
          "314:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "314:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "336:         pr_client = env.setup_product_client(",
          "337:             self.test_workspace, product=self.product_name)",
          "338:         product_id = pr_client.getCurrentProduct().id",
          "341:         old_endpoint = config.endpoint",
          "342:         new_endpoint = \"edited_endpoint\"",
          "",
          "[Removed Lines]",
          "339:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "339:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "347:                         \"Product edit didn't conclude.\")",
          "349:         # Check if the configuration now uses the new values.",
          "351:         self.assertEqual(config.endpoint, new_endpoint,",
          "352:                          \"Server didn't save new endpoint.\")",
          "",
          "[Removed Lines]",
          "350:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "350:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "372:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "373:                         \"Product configuration restore didn't conclude.\")",
          "376:         self.assertEqual(config.endpoint, old_endpoint,",
          "377:                          \"Server didn't save back to old endpoint.\")",
          "",
          "[Removed Lines]",
          "375:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "375:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------"
        ],
        "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py": [
          "File: web/tests/functional/server_configuration/test_server_configuration.py -> web/tests/functional/server_configuration/test_server_configuration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     def test_noauth_notification_edit(self):",
          "106:         \"\"\"",
          "108:         \"\"\"",
          "110:         # A non-authenticated session should return an empty user.",
          "111:         user = self.auth_client.getLoggedInUser()",
          "112:         self.assertEqual(user, \"\")",
          "124:         # Create a SUPERUSER login.",
          "125:         self.session_token = self.auth_client.performLogin(",
          "126:             \"Username:Password\", \"root:root\")",
          "",
          "[Removed Lines]",
          "107:         Test for editing the notification text on a non authenting server.",
          "114:         # Server without authentication should allow notification setting.",
          "115:         self.config_client.setNotificationBannerText(",
          "116:             convert.to_b64('noAuth notif'))",
          "117:         self.assertEqual(convert.from_b64(",
          "118:             self.config_client.getNotificationBannerText()), 'noAuth notif')",
          "120:     def test_auth_su_notification_edit(self):",
          "121:         \"\"\"",
          "122:         Test that SUPERADMINS can edit the notification text.",
          "123:         \"\"\"",
          "",
          "[Added Lines]",
          "107:         Test for editing the notification text on a non-authenticating user",
          "108:         on an authenticating server",
          "115:         # Anonymous user should not be allowed to change the banner",
          "116:         with self.assertRaises(RequestFailed):",
          "117:             self.config_client.setNotificationBannerText(",
          "118:                     convert.to_b64('non su notification'))",
          "120:     def get_su_config_client(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:         user = su_auth_client.getLoggedInUser()",
          "144:         self.assertEqual(user, \"root\")",
          "147:         su_config_client.setNotificationBannerText(",
          "148:                 convert.to_b64('su notification'))",
          "149:         self.assertEqual(convert.from_b64(",
          "",
          "[Removed Lines]",
          "145:         # we are root",
          "",
          "[Added Lines]",
          "142:         return su_config_client",
          "144:     def test_auth_su_notification_edit(self):",
          "145:         \"\"\"",
          "146:         Test that SUPERADMINS can edit the notification text.",
          "147:         \"\"\"",
          "149:         su_config_client = self.get_su_config_client()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:             authd_config_client.setNotificationBannerText(",
          "173:                     convert.to_b64('non su notification'))",
          "177:     def test_unicode_string(self):",
          "178:         \"\"\"",
          "179:         Test for non ascii strings. Needed because the used Thrift",
          "180:         version won't eat them.",
          "181:         \"\"\"",
          "187:         # Check if utf-8 encoded strings are okay.",
          "189:                 convert.to_b64('\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p'))",
          "190:         self.assertEqual(convert.from_b64(",
          "192:             '\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p')",
          "",
          "[Removed Lines]",
          "175:             print(\"You are not authorized to modify notifications!\")",
          "183:         # A non-authenticated session should return an empty user.",
          "184:         user = self.auth_client.getLoggedInUser()",
          "185:         self.assertEqual(user, \"\")",
          "188:         self.config_client.setNotificationBannerText(",
          "191:             self.config_client.getNotificationBannerText()),",
          "",
          "[Added Lines]",
          "178:         print(\"You are not authorized to modify notifications!\")",
          "185:         su_config_client = self.get_su_config_client()",
          "188:         su_config_client.setNotificationBannerText(",
          "191:              su_config_client.getNotificationBannerText()),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad41702e3108e4b92ae5d0143a5b961cc34195eb",
      "candidate_info": {
        "commit_hash": "ad41702e3108e4b92ae5d0143a5b961cc34195eb",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/ad41702e3108e4b92ae5d0143a5b961cc34195eb",
        "files": [
          "web/api/products.thrift",
          "web/api/report_server.thrift",
          "web/server/codechecker_server/api/config_handler.py",
          "web/server/codechecker_server/api/product_server.py",
          "web/server/codechecker_server/api/report_server.py",
          "web/server/codechecker_server/routing.py",
          "web/server/codechecker_server/server.py",
          "web/server/tests/unit/test_request_routing.py",
          "web/tests/functional/products/test_products.py",
          "web/tests/functional/server_configuration/test_server_configuration.py"
        ],
        "message": "Fix the endpoint parsing issue\n\nURL parsing is hardened in the web server.",
        "before_after_code_files": [
          "web/api/products.thrift||web/api/products.thrift",
          "web/api/report_server.thrift||web/api/report_server.thrift",
          "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
          "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
          "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
          "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
          "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
          "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
          "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
          "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/api/products.thrift||web/api/products.thrift",
            "web/api/report_server.thrift||web/api/report_server.thrift",
            "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
            "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
            "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
            "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
          ],
          "candidate": [
            "web/api/products.thrift||web/api/products.thrift",
            "web/api/report_server.thrift||web/api/report_server.thrift",
            "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
            "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
            "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
            "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
          ]
        }
      },
      "candidate_diff": {
        "web/api/products.thrift||web/api/products.thrift": [
          "File: web/api/products.thrift -> web/api/products.thrift"
        ],
        "web/api/report_server.thrift||web/api/report_server.thrift": [
          "File: web/api/report_server.thrift -> web/api/report_server.thrift"
        ],
        "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py": [
          "File: web/server/codechecker_server/api/config_handler.py -> web/server/codechecker_server/api/config_handler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     Manages Thrift requests regarding configuration.",
          "32:     \"\"\"",
          "35:         self.__auth_session = auth_session",
          "36:         self.__session = config_session",
          "38:     def __require_supermission(self):",
          "39:         \"\"\"",
          "40:         Checks if the current user isn't a SUPERUSER.",
          "41:         \"\"\"",
          "42:         if (not (self.__auth_session is None) and",
          "43:                 not self.__auth_session.is_root):",
          "44:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "",
          "[Removed Lines]",
          "34:     def __init__(self, auth_session, config_session):",
          "",
          "[Added Lines]",
          "34:     def __init__(self, auth_session, config_session, session_manager):",
          "37:         self.__session_manager = session_manager",
          "44:         # Anonymous access is only allowed if authentication is",
          "45:         # turned off",
          "46:         if self.__session_manager.is_enabled and not self.__auth_session:",
          "47:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "48:                 codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "49:                 \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     def setNotificationBannerText(self, notification_b64):",
          "70:         \"\"\"",
          "71:         Sets the notification banner remove_products_except.",
          "73:         \"\"\"",
          "75:         self.__require_supermission()",
          "",
          "[Removed Lines]",
          "72:         Bevare: This method only works if the use is a SUPERUSER.",
          "",
          "[Added Lines]",
          "81:         Beware: This method only works if the use is a SUPERUSER.",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py": [
          "File: web/server/codechecker_server/api/product_server.py -> web/server/codechecker_server/api/product_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                 args = dict(self.__permission_args)",
          "70:                 args['config_db_session'] = session",
          "72:             if not any(permissions.require_permission(",
          "73:                            perm, args, self.__auth_session)",
          "74:                        for perm in required):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             # Anonymous access is only allowed if authentication is",
          "73:             # turned off",
          "74:             if self.__server.manager.is_enabled and not self.__auth_session:",
          "75:                 raise codechecker_api_shared.ttypes.RequestFailed(",
          "76:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "77:                     \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:         Get the product configuration --- WITHOUT THE DB PASSWORD --- of the",
          "248:         given product.",
          "249:         \"\"\"",
          "251:         with DBSession(self.__session) as session:",
          "252:             product = session.query(Product).get(product_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:         self.__require_permission([permissions.PRODUCT_VIEW])",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
          "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1447:             args = dict(self.__permission_args)",
          "1448:             args['config_db_session'] = session",
          "1450:             if not any(permissions.require_permission(",
          "1451:                     perm, args, self._auth_session)",
          "1452:                     for perm in required):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450:             # Anonymous access is only allowed if authentication is",
          "1451:             # turned off",
          "1452:             if self._manager.is_enabled and not self._auth_session:",
          "1453:                 raise codechecker_api_shared.ttypes.RequestFailed(",
          "1454:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "1455:                     \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2421:         \"\"\"",
          "2422:         Return True if review status change is disabled.",
          "2423:         \"\"\"",
          "2424:         with DBSession(self._config_database) as session:",
          "2425:             product = session.query(Product).get(self._product.id)",
          "2426:             return product.is_review_status_change_disabled",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2432:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:         Parameters:",
          "2747:          - checkerId",
          "2748:         \"\"\"",
          "2750:         return \"\"",
          "2752:     @exc_to_thrift_reqfail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2759:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2756:         checkers: List[ttypes.Checker]",
          "2757:     ) -> List[List[str]]:",
          "2758:         \"\"\" Return the list of labels to each checker. \"\"\"",
          "2759:         labels = []",
          "2760:         for checker in checkers:",
          "2761:             analyzer_name = None if not checker.analyzerName \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2769:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3569:         given run. If the run id list is empty the number of failed files will",
          "3570:         be counted for all of the runs.",
          "3571:         \"\"\"",
          "3572:         # Unfortunately we can't distinct the failed file paths by using SQL",
          "3573:         # queries because the list of failed files for a run / analyzer are",
          "3574:         # stored in one column in a compressed way. For this reason we need to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3584:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3611:     # -----------------------------------------------------------------------",
          "3612:     @timeit",
          "3613:     def getPackageVersion(self):",
          "3614:         return self.__package_version",
          "3616:     # -----------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3628:         self.__require_view()",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py": [
          "File: web/server/codechecker_server/routing.py -> web/server/codechecker_server/routing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     version = version.lstrip('v')",
          "73:     version_parts = version.split('.')",
          "75:     # We don't care if accidentally the version tag contains a revision number.",
          "76:     major, minor = int(version_parts[0]), int(version_parts[1])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     if len(version_parts) < 2:",
          "75:         return False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     \"\"\"",
          "117:     # A standard POST request from an API client looks like:",
          "119:     # where specifying the product name is optional.",
          "121:     split_path = urlparse(path).path.split('/', 3)",
          "123:     endpoint_part = split_path[1]",
          "125:         version_tag = split_path[2].lstrip('v')",
          "130:         # Request came through without a valid product URL endpoint to",
          "131:         # possibly the main server.",
          "132:         version_tag = split_path[1].lstrip('v')",
          "137:     return None, None, None",
          "",
          "[Removed Lines]",
          "118:     # http://localhost:8001/[product-name]/<API version>/<API service>",
          "124:     if is_valid_product_endpoint(split_path[1]):",
          "126:         remainder = split_path[3]",
          "128:         return endpoint_part, version_tag, remainder",
          "129:     elif split_path[1].startswith('v'):",
          "133:         remainder = split_path[2]",
          "135:         return None, version_tag, remainder",
          "",
          "[Added Lines]",
          "120:     # http://localhost:8001/[product-name/]<API version>/<API service>",
          "126:     if is_valid_product_endpoint(split_path[1]) and len(split_path) == 4:",
          "128:         if not is_supported_version(version_tag):",
          "129:             return None, None, None",
          "130:         endpoint = split_path[3]",
          "131:         return endpoint_part, version_tag, endpoint",
          "133:     elif split_path[1].startswith('v') and len(split_path) == 3:",
          "137:         if not is_supported_version(version_tag):",
          "138:             return None, None, None",
          "139:         endpoint = split_path[2]",
          "140:         return None, version_tag, endpoint",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
          "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:         otrans = TTransport.TMemoryBuffer()",
          "329:         oprot = output_protocol_factory.getProtocol(otrans)",
          "331:         if self.server.manager.is_enabled and \\",
          "335:                 not self.auth_session:",
          "336:             # Bail out if the user is not authenticated...",
          "337:             # This response has the possibility of melting down Thrift clients,",
          "",
          "[Removed Lines]",
          "332:                 not self.path.endswith(('/Authentication',",
          "333:                                         '/Configuration',",
          "334:                                         '/ServerInfo')) and \\",
          "",
          "[Added Lines]",
          "331:         product_endpoint, api_ver, request_endpoint = \\",
          "332:             routing.split_client_POST_request(self.path)",
          "334:         if product_endpoint is None and api_ver is None and \\",
          "335:                 request_endpoint is None:",
          "336:             self.send_thrift_exception(\"Invalid request endpoint path.\", iprot,",
          "337:                                        oprot, otrans)",
          "338:             return",
          "340:         # Only Authentication, Configuration, ServerInof",
          "341:         # endpoints are allowed for Anonymous users",
          "342:         # if authentication is required.",
          "344:                 request_endpoint not in \\",
          "345:                 ['Authentication', 'Configuration', 'ServerInfo'] and \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:         # Authentication is handled, we may now respond to the user.",
          "349:         try:",
          "356:             product = None",
          "357:             if product_endpoint:",
          "358:                 # The current request came through a product route, and not",
          "",
          "[Removed Lines]",
          "350:             product_endpoint, api_ver, request_endpoint = \\",
          "351:                 routing.split_client_POST_request(self.path)",
          "352:             if product_endpoint is None and api_ver is None and \\",
          "353:                     request_endpoint is None:",
          "354:                 raise ValueError(\"Invalid request endpoint path.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:                     elif request_endpoint == 'Configuration':",
          "374:                         conf_handler = ConfigHandler_v6(",
          "375:                             self.auth_session,",
          "377:                         processor = ConfigAPI_v6.Processor(conf_handler)",
          "378:                     elif request_endpoint == 'ServerInfo':",
          "379:                         server_info_handler = ServerInfoHandler_v6(version)",
          "",
          "[Removed Lines]",
          "376:                             self.server.config_session)",
          "",
          "[Added Lines]",
          "381:                             self.server.config_session,",
          "382:                             self.server.manager)",
          "",
          "---------------"
        ],
        "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py": [
          "File: web/server/tests/unit/test_request_routing.py -> web/server/tests/unit/test_request_routing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         # It is the server code's responsibility to give a 404 Not Found.",
          "53:         self.assertEqual(post(''), (None, None, None))",
          "54:         self.assertEqual(post('CodeCheckerService'), (None, None, None))",
          "63:         self.assertEqual(post('/v6.0/Authentication'),",
          "64:                          (None, '6.0', 'Authentication'))",
          "",
          "[Removed Lines]",
          "56:         # Raise an exception if URL is malformed, such as contains a",
          "57:         # product-endpoint-like component which is badly encoded version",
          "58:         # string.",
          "59:         with self.assertRaises(Exception):",
          "60:             post('v6.0')",
          "61:             post('/v6/CodeCheckerService')",
          "66:         self.assertEqual(post('/DummyProduct/v0.0/FoobarService'),",
          "67:                          ('DummyProduct', '0.0', 'FoobarService'))",
          "",
          "[Added Lines]",
          "55:         self.assertEqual(post('v6.0'), (None, None, None))",
          "56:         self.assertEqual(post('/v6.0/product/Authentication/Service'),",
          "57:                          (None, None, None))",
          "62:         self.assertEqual(post('/DummyProduct/v6.0/FoobarService'),",
          "63:                          ('DummyProduct', '6.0', 'FoobarService'))",
          "",
          "---------------"
        ],
        "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py": [
          "File: web/tests/functional/products/test_products.py -> web/tests/functional/products/test_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         # Now get the SERVERSPACE (configuration) for the product.",
          "152:         # TODO: These things usually should only work for superusers!",
          "155:         self.assertIsNotNone(pr_conf, \"Product configuration must come.\")",
          "156:         self.assertEqual(pr_conf.endpoint, self.product_name,",
          "",
          "[Removed Lines]",
          "153:         pr_conf = self._pr_client.getProductConfiguration(pr_data.id)",
          "",
          "[Added Lines]",
          "153:         pr_conf = self._root_client.getProductConfiguration(pr_data.id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         pr_client = env.setup_product_client(",
          "190:             self.test_workspace, product=self.product_name)",
          "191:         product_id = pr_client.getCurrentProduct().id",
          "194:         old_name = config.displayedName_b64",
          "",
          "[Removed Lines]",
          "192:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "192:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "203:                         \"Product edit didn't conclude.\")",
          "206:         self.assertEqual(config.endpoint, self.product_name,",
          "207:                          \"The product edit changed the endpoint, when it \"",
          "208:                          \"shouldn't have!\")",
          "",
          "[Removed Lines]",
          "205:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "205:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "215:                         \"Product config restore didn't conclude.\")",
          "218:         self.assertEqual(config.displayedName_b64, old_name,",
          "219:                          \"The product edit didn't change the name back.\")",
          "",
          "[Removed Lines]",
          "217:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "217:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "226:                         \"Product edit didn't conclude.\")",
          "229:         self.assertEqual(config.confidentiality,",
          "230:                          new_confidentiality,",
          "231:                          \"Couldn't change the confidentiality to OPEN\")",
          "",
          "[Removed Lines]",
          "228:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "228:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "236:                         \"Product edit didn't conclude.\")",
          "239:         self.assertEqual(config.confidentiality,",
          "240:                          new_confidentiality,",
          "241:                          \"Couldn't change the confidentiality to INTERNAL\")",
          "",
          "[Removed Lines]",
          "238:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "238:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "246:                         \"Product edit didn't conclude.\")",
          "249:         self.assertEqual(config.confidentiality,",
          "250:                          new_confidentiality,",
          "251:                          \"Couldn't change the confidentiality to CONFIDENTIAL\")",
          "",
          "[Removed Lines]",
          "248:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "248:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "256:                         \"Product config restore didn't conclude.\")",
          "259:         self.assertEqual(config.confidentiality,",
          "260:                          old_confidentiality,",
          "261:                          \"The edit didn't change back the confidentiality.\")",
          "",
          "[Removed Lines]",
          "258:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "258:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271:         pr_client = env.setup_product_client(",
          "272:             self.test_workspace, product=self.product_name)",
          "273:         product_id = pr_client.getCurrentProduct().id",
          "276:         old_db_name = config.connection.database",
          "",
          "[Removed Lines]",
          "274:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "274:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "292:                         \"Product edit didn't conclude.\")",
          "294:         # Check if the configuration now uses the new values.",
          "297:         self.assertEqual(config.connection.database, new_db_name,",
          "298:                          \"Server didn't save new database name.\")",
          "",
          "[Removed Lines]",
          "295:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "295:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "312:                         \"Product configuration restore didn't conclude.\")",
          "315:         self.assertEqual(config.connection.database, old_db_name,",
          "316:                          \"Server didn't save back to old database name.\")",
          "",
          "[Removed Lines]",
          "314:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "314:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "336:         pr_client = env.setup_product_client(",
          "337:             self.test_workspace, product=self.product_name)",
          "338:         product_id = pr_client.getCurrentProduct().id",
          "341:         old_endpoint = config.endpoint",
          "342:         new_endpoint = \"edited_endpoint\"",
          "",
          "[Removed Lines]",
          "339:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "339:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "347:                         \"Product edit didn't conclude.\")",
          "349:         # Check if the configuration now uses the new values.",
          "351:         self.assertEqual(config.endpoint, new_endpoint,",
          "352:                          \"Server didn't save new endpoint.\")",
          "",
          "[Removed Lines]",
          "350:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "350:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "372:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "373:                         \"Product configuration restore didn't conclude.\")",
          "376:         self.assertEqual(config.endpoint, old_endpoint,",
          "377:                          \"Server didn't save back to old endpoint.\")",
          "",
          "[Removed Lines]",
          "375:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "375:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------"
        ],
        "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py": [
          "File: web/tests/functional/server_configuration/test_server_configuration.py -> web/tests/functional/server_configuration/test_server_configuration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     def test_noauth_notification_edit(self):",
          "106:         \"\"\"",
          "108:         \"\"\"",
          "110:         # A non-authenticated session should return an empty user.",
          "111:         user = self.auth_client.getLoggedInUser()",
          "112:         self.assertEqual(user, \"\")",
          "124:         # Create a SUPERUSER login.",
          "125:         self.session_token = self.auth_client.performLogin(",
          "126:             \"Username:Password\", \"root:root\")",
          "",
          "[Removed Lines]",
          "107:         Test for editing the notification text on a non authenting server.",
          "114:         # Server without authentication should allow notification setting.",
          "115:         self.config_client.setNotificationBannerText(",
          "116:             convert.to_b64('noAuth notif'))",
          "117:         self.assertEqual(convert.from_b64(",
          "118:             self.config_client.getNotificationBannerText()), 'noAuth notif')",
          "120:     def test_auth_su_notification_edit(self):",
          "121:         \"\"\"",
          "122:         Test that SUPERADMINS can edit the notification text.",
          "123:         \"\"\"",
          "",
          "[Added Lines]",
          "107:         Test for editing the notification text on a non-authenticating user",
          "108:         on an authenticating server",
          "115:         # Anonymous user should not be allowed to change the banner",
          "116:         with self.assertRaises(RequestFailed):",
          "117:             self.config_client.setNotificationBannerText(",
          "118:                     convert.to_b64('non su notification'))",
          "120:     def get_su_config_client(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:         user = su_auth_client.getLoggedInUser()",
          "144:         self.assertEqual(user, \"root\")",
          "147:         su_config_client.setNotificationBannerText(",
          "148:                 convert.to_b64('su notification'))",
          "149:         self.assertEqual(convert.from_b64(",
          "",
          "[Removed Lines]",
          "145:         # we are root",
          "",
          "[Added Lines]",
          "142:         return su_config_client",
          "144:     def test_auth_su_notification_edit(self):",
          "145:         \"\"\"",
          "146:         Test that SUPERADMINS can edit the notification text.",
          "147:         \"\"\"",
          "149:         su_config_client = self.get_su_config_client()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:             authd_config_client.setNotificationBannerText(",
          "173:                     convert.to_b64('non su notification'))",
          "177:     def test_unicode_string(self):",
          "178:         \"\"\"",
          "179:         Test for non ascii strings. Needed because the used Thrift",
          "180:         version won't eat them.",
          "181:         \"\"\"",
          "187:         # Check if utf-8 encoded strings are okay.",
          "189:                 convert.to_b64('\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p'))",
          "190:         self.assertEqual(convert.from_b64(",
          "192:             '\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p')",
          "",
          "[Removed Lines]",
          "175:             print(\"You are not authorized to modify notifications!\")",
          "183:         # A non-authenticated session should return an empty user.",
          "184:         user = self.auth_client.getLoggedInUser()",
          "185:         self.assertEqual(user, \"\")",
          "188:         self.config_client.setNotificationBannerText(",
          "191:             self.config_client.getNotificationBannerText()),",
          "",
          "[Added Lines]",
          "178:         print(\"You are not authorized to modify notifications!\")",
          "185:         su_config_client = self.get_su_config_client()",
          "188:         su_config_client.setNotificationBannerText(",
          "191:              su_config_client.getNotificationBannerText()),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35d1e352d66b93c1bb2cd8e95b7bcef088e5fd77",
      "candidate_info": {
        "commit_hash": "35d1e352d66b93c1bb2cd8e95b7bcef088e5fd77",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/35d1e352d66b93c1bb2cd8e95b7bcef088e5fd77",
        "files": [
          "web/api/products.thrift",
          "web/api/report_server.thrift",
          "web/server/codechecker_server/api/config_handler.py",
          "web/server/codechecker_server/api/product_server.py",
          "web/server/codechecker_server/api/report_server.py",
          "web/server/codechecker_server/routing.py",
          "web/server/codechecker_server/server.py",
          "web/server/tests/unit/test_request_routing.py",
          "web/tests/functional/products/test_products.py",
          "web/tests/functional/server_configuration/test_server_configuration.py"
        ],
        "message": "Fix the endpoint parsing issue\n\nURL parsing is hardened in the web server.",
        "before_after_code_files": [
          "web/api/products.thrift||web/api/products.thrift",
          "web/api/report_server.thrift||web/api/report_server.thrift",
          "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
          "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
          "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
          "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
          "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
          "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
          "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
          "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/api/products.thrift||web/api/products.thrift",
            "web/api/report_server.thrift||web/api/report_server.thrift",
            "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
            "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
            "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
            "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
          ],
          "candidate": [
            "web/api/products.thrift||web/api/products.thrift",
            "web/api/report_server.thrift||web/api/report_server.thrift",
            "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py",
            "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py",
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py",
            "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py",
            "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py"
          ]
        }
      },
      "candidate_diff": {
        "web/api/products.thrift||web/api/products.thrift": [
          "File: web/api/products.thrift -> web/api/products.thrift"
        ],
        "web/api/report_server.thrift||web/api/report_server.thrift": [
          "File: web/api/report_server.thrift -> web/api/report_server.thrift"
        ],
        "web/server/codechecker_server/api/config_handler.py||web/server/codechecker_server/api/config_handler.py": [
          "File: web/server/codechecker_server/api/config_handler.py -> web/server/codechecker_server/api/config_handler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     Manages Thrift requests regarding configuration.",
          "32:     \"\"\"",
          "35:         self.__auth_session = auth_session",
          "36:         self.__session = config_session",
          "38:     def __require_supermission(self):",
          "39:         \"\"\"",
          "40:         Checks if the current user isn't a SUPERUSER.",
          "41:         \"\"\"",
          "42:         if (not (self.__auth_session is None) and",
          "43:                 not self.__auth_session.is_root):",
          "44:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "",
          "[Removed Lines]",
          "34:     def __init__(self, auth_session, config_session):",
          "",
          "[Added Lines]",
          "34:     def __init__(self, auth_session, config_session, session_manager):",
          "37:         self.__session_manager = session_manager",
          "44:         # Anonymous access is only allowed if authentication is",
          "45:         # turned off",
          "46:         if self.__session_manager.is_enabled and not self.__auth_session:",
          "47:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "48:                 codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "49:                 \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     def setNotificationBannerText(self, notification_b64):",
          "70:         \"\"\"",
          "71:         Sets the notification banner remove_products_except.",
          "73:         \"\"\"",
          "75:         self.__require_supermission()",
          "",
          "[Removed Lines]",
          "72:         Bevare: This method only works if the use is a SUPERUSER.",
          "",
          "[Added Lines]",
          "81:         Beware: This method only works if the use is a SUPERUSER.",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/api/product_server.py||web/server/codechecker_server/api/product_server.py": [
          "File: web/server/codechecker_server/api/product_server.py -> web/server/codechecker_server/api/product_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                 args = dict(self.__permission_args)",
          "70:                 args['config_db_session'] = session",
          "72:             if not any(permissions.require_permission(",
          "73:                            perm, args, self.__auth_session)",
          "74:                        for perm in required):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             # Anonymous access is only allowed if authentication is",
          "73:             # turned off",
          "74:             if self.__server.manager.is_enabled and not self.__auth_session:",
          "75:                 raise codechecker_api_shared.ttypes.RequestFailed(",
          "76:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "77:                     \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:         Get the product configuration --- WITHOUT THE DB PASSWORD --- of the",
          "248:         given product.",
          "249:         \"\"\"",
          "251:         with DBSession(self.__session) as session:",
          "252:             product = session.query(Product).get(product_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:         self.__require_permission([permissions.PRODUCT_VIEW])",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
          "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1447:             args = dict(self.__permission_args)",
          "1448:             args['config_db_session'] = session",
          "1450:             if not any(permissions.require_permission(",
          "1451:                     perm, args, self._auth_session)",
          "1452:                     for perm in required):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450:             # Anonymous access is only allowed if authentication is",
          "1451:             # turned off",
          "1452:             if self._manager.is_enabled and not self._auth_session:",
          "1453:                 raise codechecker_api_shared.ttypes.RequestFailed(",
          "1454:                     codechecker_api_shared.ttypes.ErrorCode.UNAUTHORIZED,",
          "1455:                     \"You are not authorized to execute this action.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2421:         \"\"\"",
          "2422:         Return True if review status change is disabled.",
          "2423:         \"\"\"",
          "2424:         with DBSession(self._config_database) as session:",
          "2425:             product = session.query(Product).get(self._product.id)",
          "2426:             return product.is_review_status_change_disabled",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2432:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:         Parameters:",
          "2747:          - checkerId",
          "2748:         \"\"\"",
          "2750:         return \"\"",
          "2752:     @exc_to_thrift_reqfail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2759:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2756:         checkers: List[ttypes.Checker]",
          "2757:     ) -> List[List[str]]:",
          "2758:         \"\"\" Return the list of labels to each checker. \"\"\"",
          "2759:         labels = []",
          "2760:         for checker in checkers:",
          "2761:             analyzer_name = None if not checker.analyzerName \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2769:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3569:         given run. If the run id list is empty the number of failed files will",
          "3570:         be counted for all of the runs.",
          "3571:         \"\"\"",
          "3572:         # Unfortunately we can't distinct the failed file paths by using SQL",
          "3573:         # queries because the list of failed files for a run / analyzer are",
          "3574:         # stored in one column in a compressed way. For this reason we need to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3584:         self.__require_view()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3611:     # -----------------------------------------------------------------------",
          "3612:     @timeit",
          "3613:     def getPackageVersion(self):",
          "3614:         return self.__package_version",
          "3616:     # -----------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3628:         self.__require_view()",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/routing.py||web/server/codechecker_server/routing.py": [
          "File: web/server/codechecker_server/routing.py -> web/server/codechecker_server/routing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     version = version.lstrip('v')",
          "73:     version_parts = version.split('.')",
          "75:     # We don't care if accidentally the version tag contains a revision number.",
          "76:     major, minor = int(version_parts[0]), int(version_parts[1])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     if len(version_parts) < 2:",
          "75:         return False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     \"\"\"",
          "117:     # A standard POST request from an API client looks like:",
          "119:     # where specifying the product name is optional.",
          "121:     split_path = urlparse(path).path.split('/', 3)",
          "123:     endpoint_part = split_path[1]",
          "125:         version_tag = split_path[2].lstrip('v')",
          "130:         # Request came through without a valid product URL endpoint to",
          "131:         # possibly the main server.",
          "132:         version_tag = split_path[1].lstrip('v')",
          "137:     return None, None, None",
          "",
          "[Removed Lines]",
          "118:     # http://localhost:8001/[product-name]/<API version>/<API service>",
          "124:     if is_valid_product_endpoint(split_path[1]):",
          "126:         remainder = split_path[3]",
          "128:         return endpoint_part, version_tag, remainder",
          "129:     elif split_path[1].startswith('v'):",
          "133:         remainder = split_path[2]",
          "135:         return None, version_tag, remainder",
          "",
          "[Added Lines]",
          "120:     # http://localhost:8001/[product-name/]<API version>/<API service>",
          "126:     if is_valid_product_endpoint(split_path[1]) and len(split_path) == 4:",
          "128:         if not is_supported_version(version_tag):",
          "129:             return None, None, None",
          "130:         endpoint = split_path[3]",
          "131:         return endpoint_part, version_tag, endpoint",
          "133:     elif split_path[1].startswith('v') and len(split_path) == 3:",
          "137:         if not is_supported_version(version_tag):",
          "138:             return None, None, None",
          "139:         endpoint = split_path[2]",
          "140:         return None, version_tag, endpoint",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
          "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:         otrans = TTransport.TMemoryBuffer()",
          "329:         oprot = output_protocol_factory.getProtocol(otrans)",
          "331:         if self.server.manager.is_enabled and \\",
          "335:                 not self.auth_session:",
          "336:             # Bail out if the user is not authenticated...",
          "337:             # This response has the possibility of melting down Thrift clients,",
          "",
          "[Removed Lines]",
          "332:                 not self.path.endswith(('/Authentication',",
          "333:                                         '/Configuration',",
          "334:                                         '/ServerInfo')) and \\",
          "",
          "[Added Lines]",
          "331:         product_endpoint, api_ver, request_endpoint = \\",
          "332:             routing.split_client_POST_request(self.path)",
          "334:         if product_endpoint is None and api_ver is None and \\",
          "335:                 request_endpoint is None:",
          "336:             self.send_thrift_exception(\"Invalid request endpoint path.\", iprot,",
          "337:                                        oprot, otrans)",
          "338:             return",
          "340:         # Only Authentication, Configuration, ServerInof",
          "341:         # endpoints are allowed for Anonymous users",
          "342:         # if authentication is required.",
          "344:                 request_endpoint not in \\",
          "345:                 ['Authentication', 'Configuration', 'ServerInfo'] and \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:         # Authentication is handled, we may now respond to the user.",
          "349:         try:",
          "356:             product = None",
          "357:             if product_endpoint:",
          "358:                 # The current request came through a product route, and not",
          "",
          "[Removed Lines]",
          "350:             product_endpoint, api_ver, request_endpoint = \\",
          "351:                 routing.split_client_POST_request(self.path)",
          "352:             if product_endpoint is None and api_ver is None and \\",
          "353:                     request_endpoint is None:",
          "354:                 raise ValueError(\"Invalid request endpoint path.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:                     elif request_endpoint == 'Configuration':",
          "374:                         conf_handler = ConfigHandler_v6(",
          "375:                             self.auth_session,",
          "377:                         processor = ConfigAPI_v6.Processor(conf_handler)",
          "378:                     elif request_endpoint == 'ServerInfo':",
          "379:                         server_info_handler = ServerInfoHandler_v6(version)",
          "",
          "[Removed Lines]",
          "376:                             self.server.config_session)",
          "",
          "[Added Lines]",
          "381:                             self.server.config_session,",
          "382:                             self.server.manager)",
          "",
          "---------------"
        ],
        "web/server/tests/unit/test_request_routing.py||web/server/tests/unit/test_request_routing.py": [
          "File: web/server/tests/unit/test_request_routing.py -> web/server/tests/unit/test_request_routing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         # It is the server code's responsibility to give a 404 Not Found.",
          "53:         self.assertEqual(post(''), (None, None, None))",
          "54:         self.assertEqual(post('CodeCheckerService'), (None, None, None))",
          "63:         self.assertEqual(post('/v6.0/Authentication'),",
          "64:                          (None, '6.0', 'Authentication'))",
          "",
          "[Removed Lines]",
          "56:         # Raise an exception if URL is malformed, such as contains a",
          "57:         # product-endpoint-like component which is badly encoded version",
          "58:         # string.",
          "59:         with self.assertRaises(Exception):",
          "60:             post('v6.0')",
          "61:             post('/v6/CodeCheckerService')",
          "66:         self.assertEqual(post('/DummyProduct/v0.0/FoobarService'),",
          "67:                          ('DummyProduct', '0.0', 'FoobarService'))",
          "",
          "[Added Lines]",
          "55:         self.assertEqual(post('v6.0'), (None, None, None))",
          "56:         self.assertEqual(post('/v6.0/product/Authentication/Service'),",
          "57:                          (None, None, None))",
          "62:         self.assertEqual(post('/DummyProduct/v6.0/FoobarService'),",
          "63:                          ('DummyProduct', '6.0', 'FoobarService'))",
          "",
          "---------------"
        ],
        "web/tests/functional/products/test_products.py||web/tests/functional/products/test_products.py": [
          "File: web/tests/functional/products/test_products.py -> web/tests/functional/products/test_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         # Now get the SERVERSPACE (configuration) for the product.",
          "152:         # TODO: These things usually should only work for superusers!",
          "155:         self.assertIsNotNone(pr_conf, \"Product configuration must come.\")",
          "156:         self.assertEqual(pr_conf.endpoint, self.product_name,",
          "",
          "[Removed Lines]",
          "153:         pr_conf = self._pr_client.getProductConfiguration(pr_data.id)",
          "",
          "[Added Lines]",
          "153:         pr_conf = self._root_client.getProductConfiguration(pr_data.id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         pr_client = env.setup_product_client(",
          "190:             self.test_workspace, product=self.product_name)",
          "191:         product_id = pr_client.getCurrentProduct().id",
          "194:         old_name = config.displayedName_b64",
          "",
          "[Removed Lines]",
          "192:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "192:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "203:                         \"Product edit didn't conclude.\")",
          "206:         self.assertEqual(config.endpoint, self.product_name,",
          "207:                          \"The product edit changed the endpoint, when it \"",
          "208:                          \"shouldn't have!\")",
          "",
          "[Removed Lines]",
          "205:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "205:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "215:                         \"Product config restore didn't conclude.\")",
          "218:         self.assertEqual(config.displayedName_b64, old_name,",
          "219:                          \"The product edit didn't change the name back.\")",
          "",
          "[Removed Lines]",
          "217:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "217:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "226:                         \"Product edit didn't conclude.\")",
          "229:         self.assertEqual(config.confidentiality,",
          "230:                          new_confidentiality,",
          "231:                          \"Couldn't change the confidentiality to OPEN\")",
          "",
          "[Removed Lines]",
          "228:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "228:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "236:                         \"Product edit didn't conclude.\")",
          "239:         self.assertEqual(config.confidentiality,",
          "240:                          new_confidentiality,",
          "241:                          \"Couldn't change the confidentiality to INTERNAL\")",
          "",
          "[Removed Lines]",
          "238:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "238:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "246:                         \"Product edit didn't conclude.\")",
          "249:         self.assertEqual(config.confidentiality,",
          "250:                          new_confidentiality,",
          "251:                          \"Couldn't change the confidentiality to CONFIDENTIAL\")",
          "",
          "[Removed Lines]",
          "248:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "248:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "256:                         \"Product config restore didn't conclude.\")",
          "259:         self.assertEqual(config.confidentiality,",
          "260:                          old_confidentiality,",
          "261:                          \"The edit didn't change back the confidentiality.\")",
          "",
          "[Removed Lines]",
          "258:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "258:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271:         pr_client = env.setup_product_client(",
          "272:             self.test_workspace, product=self.product_name)",
          "273:         product_id = pr_client.getCurrentProduct().id",
          "276:         old_db_name = config.connection.database",
          "",
          "[Removed Lines]",
          "274:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "274:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "292:                         \"Product edit didn't conclude.\")",
          "294:         # Check if the configuration now uses the new values.",
          "297:         self.assertEqual(config.connection.database, new_db_name,",
          "298:                          \"Server didn't save new database name.\")",
          "",
          "[Removed Lines]",
          "295:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "295:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "312:                         \"Product configuration restore didn't conclude.\")",
          "315:         self.assertEqual(config.connection.database, old_db_name,",
          "316:                          \"Server didn't save back to old database name.\")",
          "",
          "[Removed Lines]",
          "314:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "314:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "336:         pr_client = env.setup_product_client(",
          "337:             self.test_workspace, product=self.product_name)",
          "338:         product_id = pr_client.getCurrentProduct().id",
          "341:         old_endpoint = config.endpoint",
          "342:         new_endpoint = \"edited_endpoint\"",
          "",
          "[Removed Lines]",
          "339:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "339:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "347:                         \"Product edit didn't conclude.\")",
          "349:         # Check if the configuration now uses the new values.",
          "351:         self.assertEqual(config.endpoint, new_endpoint,",
          "352:                          \"Server didn't save new endpoint.\")",
          "",
          "[Removed Lines]",
          "350:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "350:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "372:         self.assertTrue(self._root_client.editProduct(product_id, config),",
          "373:                         \"Product configuration restore didn't conclude.\")",
          "376:         self.assertEqual(config.endpoint, old_endpoint,",
          "377:                          \"Server didn't save back to old endpoint.\")",
          "",
          "[Removed Lines]",
          "375:         config = self._pr_client.getProductConfiguration(product_id)",
          "",
          "[Added Lines]",
          "375:         config = self._root_client.getProductConfiguration(product_id)",
          "",
          "---------------"
        ],
        "web/tests/functional/server_configuration/test_server_configuration.py||web/tests/functional/server_configuration/test_server_configuration.py": [
          "File: web/tests/functional/server_configuration/test_server_configuration.py -> web/tests/functional/server_configuration/test_server_configuration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     def test_noauth_notification_edit(self):",
          "106:         \"\"\"",
          "108:         \"\"\"",
          "110:         # A non-authenticated session should return an empty user.",
          "111:         user = self.auth_client.getLoggedInUser()",
          "112:         self.assertEqual(user, \"\")",
          "124:         # Create a SUPERUSER login.",
          "125:         self.session_token = self.auth_client.performLogin(",
          "126:             \"Username:Password\", \"root:root\")",
          "",
          "[Removed Lines]",
          "107:         Test for editing the notification text on a non authenting server.",
          "114:         # Server without authentication should allow notification setting.",
          "115:         self.config_client.setNotificationBannerText(",
          "116:             convert.to_b64('noAuth notif'))",
          "117:         self.assertEqual(convert.from_b64(",
          "118:             self.config_client.getNotificationBannerText()), 'noAuth notif')",
          "120:     def test_auth_su_notification_edit(self):",
          "121:         \"\"\"",
          "122:         Test that SUPERADMINS can edit the notification text.",
          "123:         \"\"\"",
          "",
          "[Added Lines]",
          "107:         Test for editing the notification text on a non-authenticating user",
          "108:         on an authenticating server",
          "115:         # Anonymous user should not be allowed to change the banner",
          "116:         with self.assertRaises(RequestFailed):",
          "117:             self.config_client.setNotificationBannerText(",
          "118:                     convert.to_b64('non su notification'))",
          "120:     def get_su_config_client(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:         user = su_auth_client.getLoggedInUser()",
          "144:         self.assertEqual(user, \"root\")",
          "147:         su_config_client.setNotificationBannerText(",
          "148:                 convert.to_b64('su notification'))",
          "149:         self.assertEqual(convert.from_b64(",
          "",
          "[Removed Lines]",
          "145:         # we are root",
          "",
          "[Added Lines]",
          "142:         return su_config_client",
          "144:     def test_auth_su_notification_edit(self):",
          "145:         \"\"\"",
          "146:         Test that SUPERADMINS can edit the notification text.",
          "147:         \"\"\"",
          "149:         su_config_client = self.get_su_config_client()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:             authd_config_client.setNotificationBannerText(",
          "173:                     convert.to_b64('non su notification'))",
          "177:     def test_unicode_string(self):",
          "178:         \"\"\"",
          "179:         Test for non ascii strings. Needed because the used Thrift",
          "180:         version won't eat them.",
          "181:         \"\"\"",
          "187:         # Check if utf-8 encoded strings are okay.",
          "189:                 convert.to_b64('\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p'))",
          "190:         self.assertEqual(convert.from_b64(",
          "192:             '\u00e1rv\u00edzt\u0171r\u0151 t\u00fck\u00f6rf\u00far\u00f3g\u00e9p')",
          "",
          "[Removed Lines]",
          "175:             print(\"You are not authorized to modify notifications!\")",
          "183:         # A non-authenticated session should return an empty user.",
          "184:         user = self.auth_client.getLoggedInUser()",
          "185:         self.assertEqual(user, \"\")",
          "188:         self.config_client.setNotificationBannerText(",
          "191:             self.config_client.getNotificationBannerText()),",
          "",
          "[Added Lines]",
          "178:         print(\"You are not authorized to modify notifications!\")",
          "185:         su_config_client = self.get_su_config_client()",
          "188:         su_config_client.setNotificationBannerText(",
          "191:              su_config_client.getNotificationBannerText()),",
          "",
          "---------------"
        ]
      }
    }
  ]
}