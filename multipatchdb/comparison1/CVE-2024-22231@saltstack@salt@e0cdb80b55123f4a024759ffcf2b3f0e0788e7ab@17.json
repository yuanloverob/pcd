{
  "cve_id": "CVE-2024-22231",
  "cve_desc": "Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead\u00a0a malicious attacker to create an arbitrary directory on a Salt master.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "30941aeadc07c90dd97b33a9908b152f912c8c43",
      "candidate_info": {
        "commit_hash": "30941aeadc07c90dd97b33a9908b152f912c8c43",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/30941aeadc07c90dd97b33a9908b152f912c8c43",
        "files": [
          ".github/workflows/nightly.yml",
          ".github/workflows/staging.yml",
          ".github/workflows/templates/build-rpm-repo.yml.jinja",
          "tools/precommit/workflows.py"
        ],
        "message": "Fix RPM build repository for aarch64\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/build-rpm-repo.yml.jinja||.githuworkflows/templates/build-rpm-repo.yml.jinja",
          "tools/precommit/workflows.py||tools/precommit/workflows.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-rpm-repo.yml.jinja||.githuworkflows/templates/build-rpm-repo.yml.jinja": [
          "File: .github/workflows/templates/build-rpm-repo.yml.jinja -> .githuworkflows/templates/build-rpm-repo.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:       fail-fast: false",
          "4:       matrix:",
          "5:         include:",
          "41:           - pkg-type: rpm",
          "42:             distro: <{ distro }>",
          "43:             version: \"<{ version }>\"",
          "",
          "[Removed Lines]",
          "6:         <%- for distro, version, arch in (",
          "7:                                             (\"amazon\", \"2\", \"x86_64\"),",
          "8:                                             (\"amazon\", \"2\", \"arm64\"),",
          "9:                                             (\"amazon\", \"2\", \"aarch64\"),",
          "10:                                             (\"amazon\", \"2023\", \"x86_64\"),",
          "11:                                             (\"amazon\", \"2023\", \"arm64\"),",
          "12:                                             (\"amazon\", \"2023\", \"aarch64\"),",
          "13:                                             (\"redhat\", \"7\", \"x86_64\"),",
          "14:                                             (\"redhat\", \"7\", \"arm64\"),",
          "15:                                             (\"redhat\", \"7\", \"aarch64\"),",
          "16:                                             (\"redhat\", \"8\", \"x86_64\"),",
          "17:                                             (\"redhat\", \"8\", \"arm64\"),",
          "18:                                             (\"redhat\", \"8\", \"aarch64\"),",
          "19:                                             (\"redhat\", \"9\", \"x86_64\"),",
          "20:                                             (\"redhat\", \"9\", \"arm64\"),",
          "21:                                             (\"redhat\", \"9\", \"aarch64\"),",
          "22:                                             (\"fedora\", \"36\", \"x86_64\"),",
          "23:                                             (\"fedora\", \"36\", \"arm64\"),",
          "24:                                             (\"fedora\", \"36\", \"aarch64\"),",
          "25:                                             (\"fedora\", \"37\", \"x86_64\"),",
          "26:                                             (\"fedora\", \"37\", \"arm64\"),",
          "27:                                             (\"fedora\", \"37\", \"aarch64\"),",
          "28:                                             (\"fedora\", \"38\", \"x86_64\"),",
          "29:                                             (\"fedora\", \"38\", \"arm64\"),",
          "30:                                             (\"fedora\", \"38\", \"aarch64\"),",
          "31:                                             (\"photon\", \"3\", \"x86_64\"),",
          "32:                                             (\"photon\", \"3\", \"arm64\"),",
          "33:                                             (\"photon\", \"3\", \"aarch64\"),",
          "34:                                             (\"photon\", \"4\", \"x86_64\"),",
          "35:                                             (\"photon\", \"4\", \"arm64\"),",
          "36:                                             (\"photon\", \"4\", \"aarch64\"),",
          "37:                                             (\"photon\", \"5\", \"x86_64\"),",
          "38:                                             (\"photon\", \"5\", \"arm64\"),",
          "39:                                             (\"photon\", \"5\", \"aarch64\"),",
          "40:                                         ) %>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:       - name: Download RPM Packages",
          "67:         uses: actions/download-artifact@v3",
          "68:         with:",
          "70:           path: artifacts/pkgs/incoming",
          "72:       - name: Setup GnuPG",
          "",
          "[Removed Lines]",
          "69:           name: salt-${{ needs.prepare-workflow.outputs.salt-version }}-${{ matrix.arch }}-rpm",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/precommit/workflows.py||tools/precommit/workflows.py": [
          "File: tools/precommit/workflows.py -> tools/precommit/workflows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:         for _, arch, _ in test_salt_pkg_downloads_listing[platform]:",
          "253:             test_salt_pkg_downloads_needs_slugs.add(\"build-ci-deps\")",
          "255:     env = Environment(",
          "256:         block_start_string=\"<%\",",
          "257:         block_end_string=\"%>\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     build_rpms_listing = []",
          "256:     for distro, releases in (",
          "257:         (\"amazon\", (\"2\", \"2023\")),",
          "258:         (\"redhat\", (\"7\", \"8\", \"9\")),",
          "259:         (\"fedora\", (\"36\", \"37\", \"38\")),",
          "260:         (\"photon\", (\"3\", \"4\", \"5\")),",
          "261:     ):",
          "262:         for release in releases:",
          "263:             for arch in (\"x86_64\", \"arm64\", \"aarch64\"):",
          "264:                 build_rpms_listing.append((distro, release, arch))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:             \"test_salt_pkg_downloads_needs_slugs\": sorted(",
          "294:                 test_salt_pkg_downloads_needs_slugs",
          "295:             ),",
          "296:         }",
          "297:         shared_context_file = (",
          "298:             tools.utils.REPO_ROOT / \"cicd\" / \"shared-gh-workflows-context.yml\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:             \"build_rpms_listing\": build_rpms_listing,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93ab61e46d00874a6415c70261472514d8124237",
      "candidate_info": {
        "commit_hash": "93ab61e46d00874a6415c70261472514d8124237",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/93ab61e46d00874a6415c70261472514d8124237",
        "files": [
          "tests/pytests/integration/minion/test_return_retries.py"
        ],
        "message": "Even more reliable pillar timeout test",
        "before_after_code_files": [
          "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py": [
          "File: tests/pytests/integration/minion/test_return_retries.py -> tests/pytests/integration/minion/test_return_retries.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "4: from saltfactories.utils import random_string",
          "7: @pytest.fixture(scope=\"function\")",
          "8: def salt_minion_retry(salt_master, salt_minion_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import salt.utils.files",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: @pytest.mark.slow_test",
          "60:     master_overrides = {",
          "61:         \"ext_pillar\": [",
          "63:         ],",
          "64:         \"auto_accept\": True,",
          "65:         \"worker_threads\": 2,",
          "",
          "[Removed Lines]",
          "56: def test_pillar_timeout(salt_master_factory):",
          "57:     cmd = \"\"\"",
          "58:     python -c \"import time; time.sleep(4); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "59:     \"\"\".strip()",
          "62:             {\"cmd_json\": cmd},",
          "",
          "[Added Lines]",
          "58: def test_pillar_timeout(salt_master_factory, tmp_path):",
          "59:     cmd = 'print(\\'{\"foo\": \"bar\"}\\');\\n'",
          "61:     with salt.utils.files.fopen(tmp_path / \"script.py\", \"w\") as fp:",
          "62:         fp.write(cmd)",
          "66:             {\"cmd_json\": f\"python {tmp_path / 'script.py'}\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         \"{}.sls\".format(sls_name), sls_contents",
          "106:     )",
          "107:     with master.started(), minion1.started(), minion2.started(), minion3.started(), minion4.started(), sls_tempfile:",
          "108:         proc = cli.run(\"state.sls\", sls_name, minion_tgt=\"*\")",
          "110:         # At least one minion should have a Pillar timeout",
          "111:         assert proc.returncode == 1",
          "112:         minion_timed_out = False",
          "",
          "[Removed Lines]",
          "109:         print(proc)",
          "",
          "[Added Lines]",
          "112:         cmd = 'import time; time.sleep(6); print(\\'{\"foo\": \"bang\"}\\');\\n'",
          "113:         with salt.utils.files.fopen(tmp_path / \"script.py\", \"w\") as fp:",
          "114:             fp.write(cmd)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "101a773df176217da39f12759b4240f70d62ca26",
      "candidate_info": {
        "commit_hash": "101a773df176217da39f12759b4240f70d62ca26",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/101a773df176217da39f12759b4240f70d62ca26",
        "files": [
          "tests/pytests/unit/modules/test_pip.py",
          "tests/pytests/unit/modules/test_transactional_update.py",
          "tests/pytests/unit/test_fileserver.py",
          "tests/pytests/unit/utils/test_msgpack.py"
        ],
        "message": "Fix pre-commit",
        "before_after_code_files": [
          "tests/pytests/unit/modules/test_pip.py||tests/pytests/unit/modules/test_pip.py",
          "tests/pytests/unit/modules/test_transactional_update.py||tests/pytests/unit/modules/test_transactional_update.py",
          "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
          "tests/pytests/unit/utils/test_msgpack.py||tests/pytests/unit/utils/test_msgpack.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py"
          ],
          "candidate": [
            "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/modules/test_pip.py||tests/pytests/unit/modules/test_pip.py": [
          "File: tests/pytests/unit/modules/test_pip.py -> tests/pytests/unit/modules/test_pip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from tests.support.mock import MagicMock, patch",
          "13: TARGET = []",
          "18: class FakeFopen:",
          "",
          "[Removed Lines]",
          "14: if os.environ.get('VENV_PIP_TARGET'):",
          "15:     TARGET = [\"--target\", os.environ.get('VENV_PIP_TARGET')]",
          "",
          "[Added Lines]",
          "14: if os.environ.get(\"VENV_PIP_TARGET\"):",
          "15:     TARGET = [\"--target\", os.environ.get(\"VENV_PIP_TARGET\")]",
          "",
          "---------------"
        ],
        "tests/pytests/unit/modules/test_transactional_update.py||tests/pytests/unit/modules/test_transactional_update.py": [
          "File: tests/pytests/unit/modules/test_transactional_update.py -> tests/pytests/unit/modules/test_transactional_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: ]",
          "14: SALT_CALL_BINARY = \"salt-call\"",
          "16:     SALT_CALL_BINARY = f\"{os.environ.get('VIRTUAL_ENV')}/bin/salt-call\"",
          "",
          "[Removed Lines]",
          "15: if os.environ.get('VIRTUAL_ENV'):",
          "",
          "[Added Lines]",
          "16: if os.environ.get(\"VIRTUAL_ENV\"):",
          "",
          "---------------"
        ],
        "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
          "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     opts = {",
          "76:         \"fileserver_backend\": [\"roots\"],",
          "77:         \"extension_modules\": \"\",",
          "81:         \"file_roots\": {",
          "82:             \"base\": [fileroot],",
          "83:         },",
          "",
          "[Removed Lines]",
          "78:         \"optimization_order\": [",
          "79:             0, 1",
          "80:         ],",
          "",
          "[Added Lines]",
          "78:         \"optimization_order\": [0, 1],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     opts = {",
          "103:         \"fileserver_backend\": [\"roots\"],",
          "104:         \"extension_modules\": \"\",",
          "108:         \"file_roots\": {",
          "109:             \"base\": [fileroot],",
          "110:         },",
          "",
          "[Removed Lines]",
          "105:         \"optimization_order\": [",
          "106:             0, 1",
          "107:         ],",
          "",
          "[Added Lines]",
          "103:         \"optimization_order\": [0, 1],",
          "",
          "---------------"
        ],
        "tests/pytests/unit/utils/test_msgpack.py||tests/pytests/unit/utils/test_msgpack.py": [
          "File: tests/pytests/unit/utils/test_msgpack.py -> tests/pytests/unit/utils/test_msgpack.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import salt.utils.msgpack",
          "4: from tests.support.mock import MagicMock, patch",
          "7: def test_load_encoding(tmp_path):",
          "8:     \"\"\"",
          "9:     test when using msgpack version >= 1.0.0 we",
          "",
          "[Removed Lines]",
          "6: @pytest.mark.skipif(salt.utils.msgpack.version < (1, 0, 0), reason=\"Test requires msgpack version >= 1.0.0\")",
          "",
          "[Added Lines]",
          "7: @pytest.mark.skipif(",
          "8:     salt.utils.msgpack.version < (1, 0, 0),",
          "9:     reason=\"Test requires msgpack version >= 1.0.0\",",
          "10: )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf580e66989601313434fe4e00589b2e02f353ac",
      "candidate_info": {
        "commit_hash": "bf580e66989601313434fe4e00589b2e02f353ac",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/bf580e66989601313434fe4e00589b2e02f353ac",
        "files": [
          "tests/pytests/unit/modules/test_pip.py",
          "tests/pytests/unit/test_fileserver.py"
        ],
        "message": "Make tests compatible with venv bundle",
        "before_after_code_files": [
          "tests/pytests/unit/modules/test_pip.py||tests/pytests/unit/modules/test_pip.py",
          "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py"
          ],
          "candidate": [
            "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/modules/test_pip.py||tests/pytests/unit/modules/test_pip.py": [
          "File: tests/pytests/unit/modules/test_pip.py -> tests/pytests/unit/modules/test_pip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from salt.exceptions import CommandExecutionError",
          "11: from tests.support.mock import MagicMock, patch",
          "14: class FakeFopen:",
          "15:     def __init__(self, filename):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: TARGET = []",
          "14: if os.environ.get('VENV_PIP_TARGET'):",
          "15:     TARGET = [\"--target\", os.environ.get('VENV_PIP_TARGET')]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:         \"git+https://github.com/saltstack/salt-testing.git#egg=SaltTesting\",",
          "165:     ]",
          "168:     for item in editables:",
          "169:         expected.extend([\"--editable\", item])",
          "",
          "[Removed Lines]",
          "167:     expected = [*python_binary, \"install\"]",
          "",
          "[Added Lines]",
          "174:     expected = [*python_binary, \"install\", *TARGET]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:         \"git+https://github.com/saltstack/salt-testing.git#egg=SaltTesting\",",
          "201:     ]",
          "204:     expected.extend(pkgs)",
          "205:     for item in editables:",
          "206:         expected.extend([\"--editable\", item])",
          "",
          "[Removed Lines]",
          "203:     expected = [*python_binary, \"install\"]",
          "",
          "[Added Lines]",
          "210:     expected = [*python_binary, \"install\", *TARGET]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:         expected = [*python_binary, \"install\", \"--use-mirrors\"]",
          "264:         for item in mirrors:",
          "265:             expected.extend([\"--mirrors\", item])",
          "268:         # Passing mirrors as a list",
          "269:         mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "",
          "[Removed Lines]",
          "266:         expected.append(\"pep8\")",
          "",
          "[Added Lines]",
          "274:         expected = [*expected, *TARGET, \"pep8\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:     expected = [*python_binary, \"install\"]",
          "323:     for item in find_links:",
          "324:         expected.extend([\"--find-links\", item])",
          "327:     # Passing mirrors as a list",
          "328:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "",
          "[Removed Lines]",
          "325:     expected.append(pkg)",
          "",
          "[Added Lines]",
          "334:     expected = [*expected, *TARGET, pkg]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "516:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "517:         pip.install(pkg, timeout=10)",
          "518:         mock.assert_called_with(",
          "520:             saltenv=\"base\",",
          "521:             runas=None,",
          "522:             use_vt=False,",
          "",
          "[Removed Lines]",
          "519:             expected + [10, pkg],",
          "",
          "[Added Lines]",
          "531:             expected + [10, *TARGET, pkg],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "528:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "529:         pip.install(pkg, timeout=\"10\")",
          "530:         mock.assert_called_with(",
          "532:             saltenv=\"base\",",
          "533:             runas=None,",
          "534:             use_vt=False,",
          "",
          "[Removed Lines]",
          "531:             expected + [\"10\", pkg],",
          "",
          "[Added Lines]",
          "543:             expected + [\"10\", *TARGET, pkg],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "590:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "591:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "592:         pip.install(pkg, no_index=True)",
          "594:         mock.assert_called_with(",
          "595:             expected,",
          "596:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "593:         expected = [*python_binary, \"install\", \"--no-index\", pkg]",
          "",
          "[Added Lines]",
          "607:         expected = [*python_binary, \"install\", \"--no-index\", *TARGET, pkg]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "606:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "607:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "608:         pip.install(pkg, build=build)",
          "610:         mock.assert_called_with(",
          "611:             expected,",
          "612:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "609:         expected = [*python_binary, \"install\", \"--build\", build, pkg]",
          "",
          "[Added Lines]",
          "623:         expected = [*python_binary, \"install\", \"--build\", build, *TARGET, pkg]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "659:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "660:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "661:         pip.install(pkg, no_download=True)",
          "663:         mock.assert_called_with(",
          "664:             expected,",
          "665:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "662:         expected = [*python_binary, \"install\", \"--no-download\", pkg]",
          "",
          "[Added Lines]",
          "677:         expected = [*python_binary, \"install\", *TARGET, \"--no-download\", pkg]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "715:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "716:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "717:         pip.install(pkg, source=source)",
          "719:         mock.assert_called_with(",
          "720:             expected,",
          "721:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "718:         expected = [*python_binary, \"install\", \"--source\", source, pkg]",
          "",
          "[Added Lines]",
          "734:         expected = [*python_binary, \"install\", *TARGET, \"--source\", source, pkg]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "756:     install_options = [\"--exec-prefix=/foo/bar\", \"--install-scripts=/foo/bar/bin\"]",
          "757:     pkg = \"pep8\"",
          "760:     for item in install_options:",
          "761:         expected.extend([\"--install-option\", item])",
          "762:     expected.append(pkg)",
          "",
          "[Removed Lines]",
          "759:     expected = [*python_binary, \"install\"]",
          "",
          "[Added Lines]",
          "776:     expected = [*python_binary, \"install\", *TARGET]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "809:     global_options = [\"--quiet\", \"--no-user-cfg\"]",
          "810:     pkg = \"pep8\"",
          "813:     for item in global_options:",
          "814:         expected.extend([\"--global-option\", item])",
          "815:     expected.append(pkg)",
          "",
          "[Removed Lines]",
          "812:     expected = [*python_binary, \"install\"]",
          "",
          "[Added Lines]",
          "830:     expected = [*python_binary, \"install\", *TARGET]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "863:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "864:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "865:         pip.install(pkg, upgrade=True)",
          "867:         mock.assert_called_with(",
          "868:             expected,",
          "869:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "866:         expected = [*python_binary, \"install\", \"--upgrade\", pkg]",
          "",
          "[Added Lines]",
          "885:         expected = [*python_binary, \"install\", *TARGET, \"--upgrade\", pkg]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "918:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "919:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "920:         pip.install(pkg, no_deps=True)",
          "922:         mock.assert_called_with(",
          "923:             expected,",
          "924:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "921:         expected = [*python_binary, \"install\", \"--no-deps\", pkg]",
          "",
          "[Added Lines]",
          "942:         expected = [*python_binary, \"install\", *TARGET, \"--no-deps\", pkg]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "933:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "934:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "935:         pip.install(pkg, no_install=True)",
          "937:         mock.assert_called_with(",
          "938:             expected,",
          "939:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "936:         expected = [*python_binary, \"install\", \"--no-install\", pkg]",
          "",
          "[Added Lines]",
          "957:         expected = [*python_binary, \"install\", *TARGET, \"--no-install\", pkg]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "949:     mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "950:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "951:         pip.install(pkg, proxy=proxy)",
          "953:         mock.assert_called_with(",
          "954:             expected,",
          "955:             saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "952:         expected = [*python_binary, \"install\", \"--proxy\", proxy, pkg]",
          "",
          "[Added Lines]",
          "973:         expected = [*python_binary, \"install\", \"--proxy\", proxy, *TARGET, pkg]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "976:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "977:         with patch.dict(pip.__opts__, config_mock):",
          "978:             pip.install(pkg, proxy=proxy)",
          "980:             mock.assert_called_with(",
          "981:                 expected,",
          "982:                 saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "979:             expected = [*python_binary, \"install\", pkg]",
          "",
          "[Added Lines]",
          "1000:             expected = [*python_binary, \"install\", *TARGET, pkg]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1027:         expected = [*python_binary, \"install\"]",
          "1028:         for item in cached_reqs:",
          "1029:             expected.extend([\"--requirement\", item])",
          "1031:         # Passing option as a list",
          "1032:         mock = MagicMock(return_value={\"retcode\": 0, \"stdout\": \"\"})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:         expected.extend(TARGET)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1599:     with patch.dict(pip.__salt__, {\"cmd.run_all\": mock}):",
          "1600:         with patch(\"salt.modules.pip.version\", MagicMock(return_value=\"1.3\")):",
          "1601:             pip.install(pkg, pre_releases=True)",
          "1603:             mock.assert_called_with(",
          "1604:                 expected,",
          "1605:                 saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "1602:             expected = [*python_binary, \"install\", pkg]",
          "",
          "[Added Lines]",
          "1627:             expected = [*python_binary, \"install\", *TARGET, pkg]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1615:     ):",
          "1616:         with patch(\"salt.modules.pip._get_pip_bin\", MagicMock(return_value=[\"pip\"])):",
          "1617:             pip.install(pkg, pre_releases=True)",
          "1619:             mock_run_all.assert_called_with(",
          "1620:                 expected,",
          "1621:                 saltenv=\"base\",",
          "",
          "[Removed Lines]",
          "1618:             expected = [\"pip\", \"install\", \"--pre\", pkg]",
          "",
          "[Added Lines]",
          "1643:             expected = [\"pip\", \"install\", *TARGET, \"--pre\", pkg]",
          "",
          "---------------"
        ],
        "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
          "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         \"fileserver_backend\": [\"roots\"],",
          "77:         \"extension_modules\": \"\",",
          "78:         \"optimization_order\": [",
          "80:         ],",
          "81:         \"file_roots\": {",
          "82:             \"base\": [fileroot],",
          "",
          "[Removed Lines]",
          "79:             0,",
          "",
          "[Added Lines]",
          "79:             0, 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:         \"fileserver_backend\": [\"roots\"],",
          "104:         \"extension_modules\": \"\",",
          "105:         \"optimization_order\": [",
          "107:         ],",
          "108:         \"file_roots\": {",
          "109:             \"base\": [fileroot],",
          "",
          "[Removed Lines]",
          "106:             0,",
          "",
          "[Added Lines]",
          "106:             0, 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ef0ca4f7274a9866ad47626baf63dbf1a7a059f",
      "candidate_info": {
        "commit_hash": "4ef0ca4f7274a9866ad47626baf63dbf1a7a059f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/4ef0ca4f7274a9866ad47626baf63dbf1a7a059f",
        "files": [
          "tests/pytests/unit/fileserver/test_roots.py"
        ],
        "message": "Fix test on windows",
        "before_after_code_files": [
          "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ],
          "candidate": [
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
          "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import copy",
          "6: import pathlib",
          "7: import shutil",
          "8: import textwrap",
          "10: import pytest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import sys",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
          "311:     }",
          "312:     ret = roots.serve_file(load, fnd)",
          "",
          "[Removed Lines]",
          "313:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
          "",
          "[Added Lines]",
          "314:     if \"win\" in sys.platform:",
          "315:         assert ret == {\"data\": \"\", \"dest\": \"..\\\\bar\"}",
          "316:     else:",
          "317:         assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
          "",
          "---------------"
        ]
      }
    }
  ]
}