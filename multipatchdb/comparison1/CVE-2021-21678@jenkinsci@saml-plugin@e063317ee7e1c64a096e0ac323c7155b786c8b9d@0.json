{
  "cve_id": "CVE-2021-21678",
  "cve_desc": "Jenkins SAML Plugin 2.0.7 and earlier allows attackers to craft URLs that would bypass the CSRF protection of any target URL in Jenkins.",
  "repo": "jenkinsci/saml-plugin",
  "patch_hash": "e063317ee7e1c64a096e0ac323c7155b786c8b9d",
  "patch_info": {
    "commit_hash": "e063317ee7e1c64a096e0ac323c7155b786c8b9d",
    "repo": "jenkinsci/saml-plugin",
    "commit_url": "https://github.com/jenkinsci/saml-plugin/commit/e063317ee7e1c64a096e0ac323c7155b786c8b9d",
    "files": [
      "pom.xml",
      "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
      "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
      "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
      "src/test/resources/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest/testReadSimpleConfiguration/config.xml"
    ],
    "message": "Integrate 2.0.8 security update (#122)\n\n* [SECURITY-2469]\n\n* [maven-release-plugin] prepare release saml-2.0.8\n\n* [maven-release-plugin] prepare for next development iteration\n\nCo-authored-by: Ivan Fernandez Calvo <kuisathaverat@yahoo.com>\nCo-authored-by: Jenkins Security Team <jenkinsci-cert-ci@users.noreply.github.com>",
    "before_after_code_files": [
      "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
      "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
      "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java": [
      "File: src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java -> src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21:     @Override",
      "22:     public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)",
      "23:             throws IOException, ServletException {",
      "26:             chain.doFilter(request, response);",
      "27:             return true;",
      "28:         }",
      "",
      "[Removed Lines]",
      "24:         String pathInfo = request.getPathInfo();",
      "25:         if (shouldExclude(pathInfo)) {",
      "",
      "[Added Lines]",
      "24:         jenkins.model.Jenkins j = jenkins.model.Jenkins.get();",
      "25:         if (j.getSecurityRealm() instanceof SamlSecurityRealm",
      "26:             && shouldExclude(request.getPathInfo())) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:             LOG.fine(\"SamlCrumbExclusion.shouldExclude empty\");",
      "35:             return false;",
      "36:         }",
      "38:             LOG.fine(\"SamlCrumbExclusion.shouldExclude excluding '\" + pathInfo + \"'\");",
      "39:             return true;",
      "40:         } else {",
      "",
      "[Removed Lines]",
      "37:         if (pathInfo.indexOf(SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH, 1) > -1) {",
      "",
      "[Added Lines]",
      "38:         if (pathInfo.startsWith(\"/\" + SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH)) {",
      "",
      "---------------"
    ],
    "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java": [
      "File: src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java -> src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: agreements.  See the NOTICE file distributed with this work",
      "3: for additional information regarding copyright ownership.",
      "4: Jenkins CI licenses this file to you under the Apache License,",
      "5: Version 2.0 (the \"License\"); you may not use this file except",
      "6: in compliance with the License.  You may obtain a copy of the",
      "7: License at",
      "9:   http://www.apache.org/licenses/LICENSE-2.0",
      "11: Unless required by applicable law or agreed to in writing,",
      "12: software distributed under the License is distributed on an",
      "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
      "14: KIND, either express or implied.  See the License for the",
      "15: specific language governing permissions and limitations",
      "17: package org.jenkinsci.plugins.saml;",
      "19: import java.io.BufferedReader;",
      "20: import java.io.IOException;",
      "21: import java.io.UnsupportedEncodingException;",
      "22: import java.security.Principal;",
      "23: import java.util.Collection;",
      "24: import java.util.Enumeration;",
      "25: import java.util.Locale;",
      "26: import java.util.Map;",
      "27: import javax.servlet.AsyncContext;",
      "28: import javax.servlet.DispatcherType;",
      "29: import javax.servlet.RequestDispatcher;",
      "30: import javax.servlet.ServletContext;",
      "31: import javax.servlet.ServletException;",
      "32: import javax.servlet.ServletInputStream;",
      "33: import javax.servlet.ServletRequest;",
      "34: import javax.servlet.ServletResponse;",
      "35: import javax.servlet.http.Cookie;",
      "36: import javax.servlet.http.HttpServletRequest;",
      "37: import javax.servlet.http.HttpServletResponse;",
      "38: import javax.servlet.http.HttpSession;",
      "39: import javax.servlet.http.HttpUpgradeHandler;",
      "40: import javax.servlet.http.Part;",
      "46: public class FakeRequest implements HttpServletRequest {",
      "47:     private final String pathInfo;",
      "48:     public FakeRequest(String pathInfo) {",
      "49:         this.pathInfo = pathInfo;",
      "50:     }",
      "52:     @Override",
      "53:     public String getAuthType() {",
      "54:         return null;",
      "55:     }",
      "57:     @Override",
      "58:     public Cookie[] getCookies() {",
      "59:         return new Cookie[0];",
      "60:     }",
      "62:     @Override",
      "63:     public long getDateHeader(String s) {",
      "64:         return 0;",
      "65:     }",
      "67:     @Override",
      "68:     public String getHeader(String s) {",
      "69:         return null;",
      "70:     }",
      "72:     @Override",
      "73:     public Enumeration<String> getHeaders(String s) {",
      "74:         return null;",
      "75:     }",
      "77:     @Override",
      "78:     public Enumeration<String> getHeaderNames() {",
      "79:         return null;",
      "80:     }",
      "82:     @Override",
      "83:     public int getIntHeader(String s) {",
      "84:         return 0;",
      "85:     }",
      "87:     @Override",
      "88:     public String getMethod() {",
      "89:         return null;",
      "90:     }",
      "92:     @Override",
      "93:     public String getPathInfo() {",
      "94:         return pathInfo;",
      "95:     }",
      "97:     @Override",
      "98:     public String getPathTranslated() {",
      "99:         return null;",
      "100:     }",
      "102:     @Override",
      "103:     public String getContextPath() {",
      "104:         return null;",
      "105:     }",
      "107:     @Override",
      "108:     public String getQueryString() {",
      "109:         return null;",
      "110:     }",
      "112:     @Override",
      "113:     public String getRemoteUser() {",
      "114:         return null;",
      "115:     }",
      "117:     @Override",
      "118:     public boolean isUserInRole(String s) {",
      "119:         return false;",
      "120:     }",
      "122:     @Override",
      "123:     public Principal getUserPrincipal() {",
      "124:         return null;",
      "125:     }",
      "127:     @Override",
      "128:     public String getRequestedSessionId() {",
      "129:         return null;",
      "130:     }",
      "132:     @Override",
      "133:     public String getRequestURI() {",
      "134:         return null;",
      "135:     }",
      "137:     @Override",
      "138:     public StringBuffer getRequestURL() {",
      "139:         return null;",
      "140:     }",
      "142:     @Override",
      "143:     public String getServletPath() {",
      "144:         return null;",
      "145:     }",
      "147:     @Override",
      "148:     public HttpSession getSession(boolean b) {",
      "149:         return null;",
      "150:     }",
      "152:     @Override",
      "153:     public HttpSession getSession() {",
      "154:         return null;",
      "155:     }",
      "157:     @Override",
      "158:     public String changeSessionId() {",
      "159:         return null;",
      "160:     }",
      "162:     @Override",
      "163:     public boolean isRequestedSessionIdValid() {",
      "164:         return false;",
      "165:     }",
      "167:     @Override",
      "168:     public boolean isRequestedSessionIdFromCookie() {",
      "169:         return false;",
      "170:     }",
      "172:     @Override",
      "173:     public boolean isRequestedSessionIdFromURL() {",
      "174:         return false;",
      "175:     }",
      "177:     @Override",
      "178:     public boolean isRequestedSessionIdFromUrl() {",
      "179:         return false;",
      "180:     }",
      "182:     @Override",
      "183:     public boolean authenticate(HttpServletResponse httpServletResponse) throws IOException, ServletException {",
      "184:         return false;",
      "185:     }",
      "187:     @Override",
      "188:     public void login(String s, String s1) throws ServletException {",
      "190:     }",
      "192:     @Override",
      "193:     public void logout() throws ServletException {",
      "195:     }",
      "197:     @Override",
      "198:     public Collection<Part> getParts() throws IOException, ServletException {",
      "199:         return null;",
      "200:     }",
      "202:     @Override",
      "203:     public Part getPart(String s) throws IOException, ServletException {",
      "204:         return null;",
      "205:     }",
      "207:     @Override",
      "208:     public <T extends HttpUpgradeHandler> T upgrade(Class<T> aClass) throws IOException, ServletException {",
      "209:         return null;",
      "210:     }",
      "212:     @Override",
      "213:     public Object getAttribute(String s) {",
      "214:         return null;",
      "215:     }",
      "217:     @Override",
      "218:     public Enumeration<String> getAttributeNames() {",
      "219:         return null;",
      "220:     }",
      "222:     @Override",
      "223:     public String getCharacterEncoding() {",
      "224:         return null;",
      "225:     }",
      "227:     @Override",
      "228:     public void setCharacterEncoding(String s) throws UnsupportedEncodingException {",
      "230:     }",
      "232:     @Override",
      "233:     public int getContentLength() {",
      "234:         return 0;",
      "235:     }",
      "237:     @Override",
      "238:     public long getContentLengthLong() {",
      "239:         return 0;",
      "240:     }",
      "242:     @Override",
      "243:     public String getContentType() {",
      "244:         return null;",
      "245:     }",
      "247:     @Override",
      "248:     public ServletInputStream getInputStream() throws IOException {",
      "249:         return null;",
      "250:     }",
      "252:     @Override",
      "253:     public String getParameter(String s) {",
      "254:         return null;",
      "255:     }",
      "257:     @Override",
      "258:     public Enumeration<String> getParameterNames() {",
      "259:         return null;",
      "260:     }",
      "262:     @Override",
      "263:     public String[] getParameterValues(String s) {",
      "264:         return new String[0];",
      "265:     }",
      "267:     @Override",
      "268:     public Map<String, String[]> getParameterMap() {",
      "269:         return null;",
      "270:     }",
      "272:     @Override",
      "273:     public String getProtocol() {",
      "274:         return null;",
      "275:     }",
      "277:     @Override",
      "278:     public String getScheme() {",
      "279:         return null;",
      "280:     }",
      "282:     @Override",
      "283:     public String getServerName() {",
      "284:         return null;",
      "285:     }",
      "287:     @Override",
      "288:     public int getServerPort() {",
      "289:         return 0;",
      "290:     }",
      "292:     @Override",
      "293:     public BufferedReader getReader() throws IOException {",
      "294:         return null;",
      "295:     }",
      "297:     @Override",
      "298:     public String getRemoteAddr() {",
      "299:         return null;",
      "300:     }",
      "302:     @Override",
      "303:     public String getRemoteHost() {",
      "304:         return null;",
      "305:     }",
      "307:     @Override",
      "308:     public void setAttribute(String s, Object o) {",
      "310:     }",
      "312:     @Override",
      "313:     public void removeAttribute(String s) {",
      "315:     }",
      "317:     @Override",
      "318:     public Locale getLocale() {",
      "319:         return null;",
      "320:     }",
      "322:     @Override",
      "323:     public Enumeration<Locale> getLocales() {",
      "324:         return null;",
      "325:     }",
      "327:     @Override",
      "328:     public boolean isSecure() {",
      "329:         return false;",
      "330:     }",
      "332:     @Override",
      "333:     public RequestDispatcher getRequestDispatcher(String s) {",
      "334:         return null;",
      "335:     }",
      "337:     @Override",
      "338:     public String getRealPath(String s) {",
      "339:         return null;",
      "340:     }",
      "342:     @Override",
      "343:     public int getRemotePort() {",
      "344:         return 0;",
      "345:     }",
      "347:     @Override",
      "348:     public String getLocalName() {",
      "349:         return null;",
      "350:     }",
      "352:     @Override",
      "353:     public String getLocalAddr() {",
      "354:         return null;",
      "355:     }",
      "357:     @Override",
      "358:     public int getLocalPort() {",
      "359:         return 0;",
      "360:     }",
      "362:     @Override",
      "363:     public ServletContext getServletContext() {",
      "364:         return null;",
      "365:     }",
      "367:     @Override",
      "368:     public AsyncContext startAsync() throws IllegalStateException {",
      "369:         return null;",
      "370:     }",
      "372:     @Override",
      "373:     public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)",
      "374:             throws IllegalStateException {",
      "375:         return null;",
      "376:     }",
      "378:     @Override",
      "379:     public boolean isAsyncStarted() {",
      "380:         return false;",
      "381:     }",
      "383:     @Override",
      "384:     public boolean isAsyncSupported() {",
      "385:         return false;",
      "386:     }",
      "388:     @Override",
      "389:     public AsyncContext getAsyncContext() {",
      "390:         return null;",
      "391:     }",
      "393:     @Override",
      "394:     public DispatcherType getDispatcherType() {",
      "395:         return null;",
      "396:     }",
      "397: }",
      "",
      "---------------"
    ],
    "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java": [
      "File: src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java -> src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: agreements.  See the NOTICE file distributed with this work",
      "3: for additional information regarding copyright ownership.",
      "4: Jenkins CI licenses this file to you under the Apache License,",
      "5: Version 2.0 (the \"License\"); you may not use this file except",
      "6: in compliance with the License.  You may obtain a copy of the",
      "7: License at",
      "9:   http://www.apache.org/licenses/LICENSE-2.0",
      "11: Unless required by applicable law or agreed to in writing,",
      "12: software distributed under the License is distributed on an",
      "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
      "14: KIND, either express or implied.  See the License for the",
      "15: specific language governing permissions and limitations",
      "17: package org.jenkinsci.plugins.saml;",
      "19: import java.io.IOException;",
      "20: import javax.servlet.FilterChain;",
      "21: import javax.servlet.ServletException;",
      "22: import javax.servlet.ServletRequest;",
      "23: import javax.servlet.ServletResponse;",
      "24: import javax.servlet.http.HttpServletRequest;",
      "25: import javax.servlet.http.HttpServletResponse;",
      "26: import org.junit.Before;",
      "27: import org.junit.Rule;",
      "28: import org.junit.Test;",
      "29: import org.jvnet.hudson.test.JenkinsRule;",
      "30: import org.jvnet.hudson.test.recipes.LocalData;",
      "31: import static org.junit.Assert.assertFalse;",
      "32: import static org.junit.Assert.assertTrue;",
      "38: public class SamlCrumbExclusionTest {",
      "40:     @Rule",
      "41:     public JenkinsRule jenkinsRule = new JenkinsRule();",
      "42:     private HttpServletRequest requestOK;",
      "43:     private HttpServletRequest requestError;",
      "44:     private HttpServletResponse response;",
      "45:     private FilterChain filterChain;",
      "47:     @Before",
      "48:     public void setup(){",
      "49:         requestOK = new FakeRequest(\"/securityRealm/finishLogin\");",
      "50:         requestError = new FakeRequest(\"/foo/securityRealm/finishLogin\");",
      "51:         response = null;",
      "52:         filterChain = new FilterChain(){",
      "53:             @Override",
      "54:             public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
      "55:                     throws IOException, ServletException {",
      "56:                 return;",
      "57:             }",
      "58:         };",
      "59:     }",
      "61:     @LocalData(\"testReadSimpleConfiguration\")",
      "62:     @Test",
      "63:     public void testURL() throws ServletException, IOException {",
      "64:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
      "65:         assertTrue(exclusion.process(requestOK, response, filterChain));",
      "66:         assertFalse(exclusion.process(requestError, response, filterChain));",
      "67:     }",
      "69:     @Test",
      "70:     public void testRealmDisabled() throws ServletException, IOException {",
      "71:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
      "72:         assertFalse(exclusion.process(requestOK, response, filterChain));",
      "73:         assertFalse(exclusion.process(requestError, response, filterChain));",
      "74:     }",
      "75: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a6db399d4b674caacb0e6ebd6f046864823671a",
      "candidate_info": {
        "commit_hash": "8a6db399d4b674caacb0e6ebd6f046864823671a",
        "repo": "jenkinsci/saml-plugin",
        "commit_url": "https://github.com/jenkinsci/saml-plugin/commit/8a6db399d4b674caacb0e6ebd6f046864823671a",
        "files": [
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "src/test/resources/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest/testReadSimpleConfiguration/config.xml"
        ],
        "message": "[SECURITY-2469]",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/saml-plugin/pull/122"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java -> src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     @Override",
          "22:     public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)",
          "23:             throws IOException, ServletException {",
          "26:             chain.doFilter(request, response);",
          "27:             return true;",
          "28:         }",
          "",
          "[Removed Lines]",
          "24:         String pathInfo = request.getPathInfo();",
          "25:         if (shouldExclude(pathInfo)) {",
          "",
          "[Added Lines]",
          "24:         jenkins.model.Jenkins j = jenkins.model.Jenkins.get();",
          "25:         if (j.getSecurityRealm() instanceof SamlSecurityRealm",
          "26:             && shouldExclude(request.getPathInfo())) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:             LOG.fine(\"SamlCrumbExclusion.shouldExclude empty\");",
          "35:             return false;",
          "36:         }",
          "38:             LOG.fine(\"SamlCrumbExclusion.shouldExclude excluding '\" + pathInfo + \"'\");",
          "39:             return true;",
          "40:         } else {",
          "",
          "[Removed Lines]",
          "37:         if (pathInfo.indexOf(SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH, 1) > -1) {",
          "",
          "[Added Lines]",
          "38:         if (pathInfo.startsWith(\"/\" + SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH)) {",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java -> src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: agreements.  See the NOTICE file distributed with this work",
          "3: for additional information regarding copyright ownership.",
          "4: Jenkins CI licenses this file to you under the Apache License,",
          "5: Version 2.0 (the \"License\"); you may not use this file except",
          "6: in compliance with the License.  You may obtain a copy of the",
          "7: License at",
          "9:   http://www.apache.org/licenses/LICENSE-2.0",
          "11: Unless required by applicable law or agreed to in writing,",
          "12: software distributed under the License is distributed on an",
          "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: KIND, either express or implied.  See the License for the",
          "15: specific language governing permissions and limitations",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.BufferedReader;",
          "20: import java.io.IOException;",
          "21: import java.io.UnsupportedEncodingException;",
          "22: import java.security.Principal;",
          "23: import java.util.Collection;",
          "24: import java.util.Enumeration;",
          "25: import java.util.Locale;",
          "26: import java.util.Map;",
          "27: import javax.servlet.AsyncContext;",
          "28: import javax.servlet.DispatcherType;",
          "29: import javax.servlet.RequestDispatcher;",
          "30: import javax.servlet.ServletContext;",
          "31: import javax.servlet.ServletException;",
          "32: import javax.servlet.ServletInputStream;",
          "33: import javax.servlet.ServletRequest;",
          "34: import javax.servlet.ServletResponse;",
          "35: import javax.servlet.http.Cookie;",
          "36: import javax.servlet.http.HttpServletRequest;",
          "37: import javax.servlet.http.HttpServletResponse;",
          "38: import javax.servlet.http.HttpSession;",
          "39: import javax.servlet.http.HttpUpgradeHandler;",
          "40: import javax.servlet.http.Part;",
          "46: public class FakeRequest implements HttpServletRequest {",
          "47:     private final String pathInfo;",
          "48:     public FakeRequest(String pathInfo) {",
          "49:         this.pathInfo = pathInfo;",
          "50:     }",
          "52:     @Override",
          "53:     public String getAuthType() {",
          "54:         return null;",
          "55:     }",
          "57:     @Override",
          "58:     public Cookie[] getCookies() {",
          "59:         return new Cookie[0];",
          "60:     }",
          "62:     @Override",
          "63:     public long getDateHeader(String s) {",
          "64:         return 0;",
          "65:     }",
          "67:     @Override",
          "68:     public String getHeader(String s) {",
          "69:         return null;",
          "70:     }",
          "72:     @Override",
          "73:     public Enumeration<String> getHeaders(String s) {",
          "74:         return null;",
          "75:     }",
          "77:     @Override",
          "78:     public Enumeration<String> getHeaderNames() {",
          "79:         return null;",
          "80:     }",
          "82:     @Override",
          "83:     public int getIntHeader(String s) {",
          "84:         return 0;",
          "85:     }",
          "87:     @Override",
          "88:     public String getMethod() {",
          "89:         return null;",
          "90:     }",
          "92:     @Override",
          "93:     public String getPathInfo() {",
          "94:         return pathInfo;",
          "95:     }",
          "97:     @Override",
          "98:     public String getPathTranslated() {",
          "99:         return null;",
          "100:     }",
          "102:     @Override",
          "103:     public String getContextPath() {",
          "104:         return null;",
          "105:     }",
          "107:     @Override",
          "108:     public String getQueryString() {",
          "109:         return null;",
          "110:     }",
          "112:     @Override",
          "113:     public String getRemoteUser() {",
          "114:         return null;",
          "115:     }",
          "117:     @Override",
          "118:     public boolean isUserInRole(String s) {",
          "119:         return false;",
          "120:     }",
          "122:     @Override",
          "123:     public Principal getUserPrincipal() {",
          "124:         return null;",
          "125:     }",
          "127:     @Override",
          "128:     public String getRequestedSessionId() {",
          "129:         return null;",
          "130:     }",
          "132:     @Override",
          "133:     public String getRequestURI() {",
          "134:         return null;",
          "135:     }",
          "137:     @Override",
          "138:     public StringBuffer getRequestURL() {",
          "139:         return null;",
          "140:     }",
          "142:     @Override",
          "143:     public String getServletPath() {",
          "144:         return null;",
          "145:     }",
          "147:     @Override",
          "148:     public HttpSession getSession(boolean b) {",
          "149:         return null;",
          "150:     }",
          "152:     @Override",
          "153:     public HttpSession getSession() {",
          "154:         return null;",
          "155:     }",
          "157:     @Override",
          "158:     public String changeSessionId() {",
          "159:         return null;",
          "160:     }",
          "162:     @Override",
          "163:     public boolean isRequestedSessionIdValid() {",
          "164:         return false;",
          "165:     }",
          "167:     @Override",
          "168:     public boolean isRequestedSessionIdFromCookie() {",
          "169:         return false;",
          "170:     }",
          "172:     @Override",
          "173:     public boolean isRequestedSessionIdFromURL() {",
          "174:         return false;",
          "175:     }",
          "177:     @Override",
          "178:     public boolean isRequestedSessionIdFromUrl() {",
          "179:         return false;",
          "180:     }",
          "182:     @Override",
          "183:     public boolean authenticate(HttpServletResponse httpServletResponse) throws IOException, ServletException {",
          "184:         return false;",
          "185:     }",
          "187:     @Override",
          "188:     public void login(String s, String s1) throws ServletException {",
          "190:     }",
          "192:     @Override",
          "193:     public void logout() throws ServletException {",
          "195:     }",
          "197:     @Override",
          "198:     public Collection<Part> getParts() throws IOException, ServletException {",
          "199:         return null;",
          "200:     }",
          "202:     @Override",
          "203:     public Part getPart(String s) throws IOException, ServletException {",
          "204:         return null;",
          "205:     }",
          "207:     @Override",
          "208:     public <T extends HttpUpgradeHandler> T upgrade(Class<T> aClass) throws IOException, ServletException {",
          "209:         return null;",
          "210:     }",
          "212:     @Override",
          "213:     public Object getAttribute(String s) {",
          "214:         return null;",
          "215:     }",
          "217:     @Override",
          "218:     public Enumeration<String> getAttributeNames() {",
          "219:         return null;",
          "220:     }",
          "222:     @Override",
          "223:     public String getCharacterEncoding() {",
          "224:         return null;",
          "225:     }",
          "227:     @Override",
          "228:     public void setCharacterEncoding(String s) throws UnsupportedEncodingException {",
          "230:     }",
          "232:     @Override",
          "233:     public int getContentLength() {",
          "234:         return 0;",
          "235:     }",
          "237:     @Override",
          "238:     public long getContentLengthLong() {",
          "239:         return 0;",
          "240:     }",
          "242:     @Override",
          "243:     public String getContentType() {",
          "244:         return null;",
          "245:     }",
          "247:     @Override",
          "248:     public ServletInputStream getInputStream() throws IOException {",
          "249:         return null;",
          "250:     }",
          "252:     @Override",
          "253:     public String getParameter(String s) {",
          "254:         return null;",
          "255:     }",
          "257:     @Override",
          "258:     public Enumeration<String> getParameterNames() {",
          "259:         return null;",
          "260:     }",
          "262:     @Override",
          "263:     public String[] getParameterValues(String s) {",
          "264:         return new String[0];",
          "265:     }",
          "267:     @Override",
          "268:     public Map<String, String[]> getParameterMap() {",
          "269:         return null;",
          "270:     }",
          "272:     @Override",
          "273:     public String getProtocol() {",
          "274:         return null;",
          "275:     }",
          "277:     @Override",
          "278:     public String getScheme() {",
          "279:         return null;",
          "280:     }",
          "282:     @Override",
          "283:     public String getServerName() {",
          "284:         return null;",
          "285:     }",
          "287:     @Override",
          "288:     public int getServerPort() {",
          "289:         return 0;",
          "290:     }",
          "292:     @Override",
          "293:     public BufferedReader getReader() throws IOException {",
          "294:         return null;",
          "295:     }",
          "297:     @Override",
          "298:     public String getRemoteAddr() {",
          "299:         return null;",
          "300:     }",
          "302:     @Override",
          "303:     public String getRemoteHost() {",
          "304:         return null;",
          "305:     }",
          "307:     @Override",
          "308:     public void setAttribute(String s, Object o) {",
          "310:     }",
          "312:     @Override",
          "313:     public void removeAttribute(String s) {",
          "315:     }",
          "317:     @Override",
          "318:     public Locale getLocale() {",
          "319:         return null;",
          "320:     }",
          "322:     @Override",
          "323:     public Enumeration<Locale> getLocales() {",
          "324:         return null;",
          "325:     }",
          "327:     @Override",
          "328:     public boolean isSecure() {",
          "329:         return false;",
          "330:     }",
          "332:     @Override",
          "333:     public RequestDispatcher getRequestDispatcher(String s) {",
          "334:         return null;",
          "335:     }",
          "337:     @Override",
          "338:     public String getRealPath(String s) {",
          "339:         return null;",
          "340:     }",
          "342:     @Override",
          "343:     public int getRemotePort() {",
          "344:         return 0;",
          "345:     }",
          "347:     @Override",
          "348:     public String getLocalName() {",
          "349:         return null;",
          "350:     }",
          "352:     @Override",
          "353:     public String getLocalAddr() {",
          "354:         return null;",
          "355:     }",
          "357:     @Override",
          "358:     public int getLocalPort() {",
          "359:         return 0;",
          "360:     }",
          "362:     @Override",
          "363:     public ServletContext getServletContext() {",
          "364:         return null;",
          "365:     }",
          "367:     @Override",
          "368:     public AsyncContext startAsync() throws IllegalStateException {",
          "369:         return null;",
          "370:     }",
          "372:     @Override",
          "373:     public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)",
          "374:             throws IllegalStateException {",
          "375:         return null;",
          "376:     }",
          "378:     @Override",
          "379:     public boolean isAsyncStarted() {",
          "380:         return false;",
          "381:     }",
          "383:     @Override",
          "384:     public boolean isAsyncSupported() {",
          "385:         return false;",
          "386:     }",
          "388:     @Override",
          "389:     public AsyncContext getAsyncContext() {",
          "390:         return null;",
          "391:     }",
          "393:     @Override",
          "394:     public DispatcherType getDispatcherType() {",
          "395:         return null;",
          "396:     }",
          "397: }",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java -> src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: agreements.  See the NOTICE file distributed with this work",
          "3: for additional information regarding copyright ownership.",
          "4: Jenkins CI licenses this file to you under the Apache License,",
          "5: Version 2.0 (the \"License\"); you may not use this file except",
          "6: in compliance with the License.  You may obtain a copy of the",
          "7: License at",
          "9:   http://www.apache.org/licenses/LICENSE-2.0",
          "11: Unless required by applicable law or agreed to in writing,",
          "12: software distributed under the License is distributed on an",
          "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: KIND, either express or implied.  See the License for the",
          "15: specific language governing permissions and limitations",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.IOException;",
          "20: import javax.servlet.FilterChain;",
          "21: import javax.servlet.ServletException;",
          "22: import javax.servlet.ServletRequest;",
          "23: import javax.servlet.ServletResponse;",
          "24: import javax.servlet.http.HttpServletRequest;",
          "25: import javax.servlet.http.HttpServletResponse;",
          "26: import org.junit.Before;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "29: import org.jvnet.hudson.test.JenkinsRule;",
          "30: import org.jvnet.hudson.test.recipes.LocalData;",
          "31: import static org.junit.Assert.assertFalse;",
          "32: import static org.junit.Assert.assertTrue;",
          "38: public class SamlCrumbExclusionTest {",
          "40:     @Rule",
          "41:     public JenkinsRule jenkinsRule = new JenkinsRule();",
          "42:     private HttpServletRequest requestOK;",
          "43:     private HttpServletRequest requestError;",
          "44:     private HttpServletResponse response;",
          "45:     private FilterChain filterChain;",
          "47:     @Before",
          "48:     public void setup(){",
          "49:         requestOK = new FakeRequest(\"/securityRealm/finishLogin\");",
          "50:         requestError = new FakeRequest(\"/foo/securityRealm/finishLogin\");",
          "51:         response = null;",
          "52:         filterChain = new FilterChain(){",
          "53:             @Override",
          "54:             public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
          "55:                     throws IOException, ServletException {",
          "56:                 return;",
          "57:             }",
          "58:         };",
          "59:     }",
          "61:     @LocalData(\"testReadSimpleConfiguration\")",
          "62:     @Test",
          "63:     public void testURL() throws ServletException, IOException {",
          "64:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
          "65:         assertTrue(exclusion.process(requestOK, response, filterChain));",
          "66:         assertFalse(exclusion.process(requestError, response, filterChain));",
          "67:     }",
          "69:     @Test",
          "70:     public void testRealmDisabled() throws ServletException, IOException {",
          "71:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
          "72:         assertFalse(exclusion.process(requestOK, response, filterChain));",
          "73:         assertFalse(exclusion.process(requestError, response, filterChain));",
          "74:     }",
          "75: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63dd1036a30f7dd432349ed05da0454d4845799d",
      "candidate_info": {
        "commit_hash": "63dd1036a30f7dd432349ed05da0454d4845799d",
        "repo": "jenkinsci/saml-plugin",
        "commit_url": "https://github.com/jenkinsci/saml-plugin/commit/63dd1036a30f7dd432349ed05da0454d4845799d",
        "files": [
          "src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java",
          "src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java",
          "src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java",
          "src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java",
          "src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java",
          "src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java"
        ],
        "message": "fix: code warnings (#260)",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java||src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java",
          "src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java||src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java",
          "src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java||src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java||src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java||src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java||src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java||src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java||src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java||src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java",
          "src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java||src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java",
          "src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java||src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java",
          "src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java||src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java",
          "src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java||src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java||src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java||src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java -> src/main/java/org/jenkinsci/plugins/saml/BundleKeyStore.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import java.io.IOException;",
          "7: import java.io.InputStream;",
          "8: import java.math.BigInteger;",
          "10: import java.security.KeyPair;",
          "11: import java.security.KeyPairGenerator;",
          "12: import java.security.KeyStore;",
          "",
          "[Removed Lines]",
          "9: import java.security.InvalidKeyException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: import java.security.NoSuchAlgorithmException;",
          "15: import java.security.NoSuchProviderException;",
          "16: import java.security.SecureRandom;",
          "18: import java.security.UnrecoverableKeyException;",
          "19: import java.security.cert.CertificateException;",
          "20: import java.security.cert.X509Certificate;",
          "",
          "[Removed Lines]",
          "17: import java.security.SignatureException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: import hudson.XmlFile;",
          "42: import hudson.util.Secret;",
          "43: import jenkins.model.Jenkins;",
          "46: import static java.util.logging.Level.SEVERE;",
          "",
          "[Removed Lines]",
          "45: import static java.util.logging.Level.WARNING;",
          "",
          "[Added Lines]",
          "43: import static java.util.logging.Level.WARNING;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:     private static final Logger LOG = Logger.getLogger(BundleKeyStore.class.getName());",
          "68:     public static final String SAML_JENKINS_KEYSTORE_XML = \"saml-jenkins-keystore.xml\";",
          "69:     public static final String SAML_JENKINS_KEYSTORE_JKS = \"saml-jenkins-keystore.jks\";",
          "71:     private String keystorePath = PAC4J_DEMO_KEYSTORE;",
          "72:     private Secret ksPassword =  Secret.fromString(PAC4J_DEMO_PASSWD);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     public static final int KEY_SIZE = 2048;",
          "68:     public static final String CN_SAML_JENKINS = \"cn=SAML-jenkins\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:             }",
          "110:             ksPkAlias = DEFAULT_KEY_ALIAS;",
          "111:             KeyStore ks = loadKeyStore(keystore, ksPassword.getPlainText());",
          "113:             X509Certificate[] chain = createCertificateChain(keypair);",
          "114:             ks.setKeyEntry(ksPkAlias, keypair.getPrivate(), ksPkPassword.getPlainText().toCharArray(), chain);",
          "115:             saveKeyStore(keystore, ks, ksPassword.getPlainText());",
          "",
          "[Removed Lines]",
          "112:             KeyPair keypair = generate(2048);",
          "",
          "[Added Lines]",
          "111:             KeyPair keypair = generate();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:     private X509Certificate[] createCertificateChain(KeyPair keypair)",
          "149:         X509Certificate[] chain = new X509Certificate[1];",
          "152:         return chain;",
          "153:     }",
          "",
          "[Removed Lines]",
          "147:             throws IOException, CertificateException, InvalidKeyException, SignatureException,",
          "148:             NoSuchAlgorithmException, NoSuchProviderException, OperatorCreationException {",
          "150:         Long validity = NumberUtils.toLong(System.getProperty(KEY_VALIDITY_PROPERTY), KEY_VALIDITY);",
          "151:         chain[0] = generateCertificate(\"cn=SAML-jenkins\", new Date(),  TimeUnit.DAYS.toSeconds(validity), keypair);",
          "",
          "[Added Lines]",
          "143:             throws IOException, CertificateException, NoSuchAlgorithmException, OperatorCreationException {",
          "145:         long validity = NumberUtils.toLong(System.getProperty(KEY_VALIDITY_PROPERTY), KEY_VALIDITY);",
          "146:         chain[0] = generateCertificate(new Date(), TimeUnit.DAYS.toSeconds(validity), keypair);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219:     private String generatePassword() throws NoSuchAlgorithmException {",
          "220:         SecureRandom random = SecureRandom.getInstanceStrong();",
          "222:         random.nextBytes(bytes);",
          "223:         return Base64.getEncoder().encodeToString(bytes);",
          "224:     }",
          "",
          "[Removed Lines]",
          "221:         byte bytes[] = new byte[256];",
          "",
          "[Added Lines]",
          "216:         byte[] bytes = new byte[256];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "235:         KeyPairGenerator keyGen = KeyPairGenerator.getInstance(KEY_ALG, PROVIDER);",
          "236:         SecureRandom prng = new SecureRandom();",
          "238:         return keyGen.generateKeyPair();",
          "239:     }",
          "",
          "[Removed Lines]",
          "234:     private KeyPair generate(int keySize) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchProviderException {",
          "237:         keyGen.initialize(keySize, prng);",
          "",
          "[Added Lines]",
          "227:     private KeyPair generate() throws NoSuchAlgorithmException, NoSuchProviderException {",
          "230:         keyGen.initialize(BundleKeyStore.KEY_SIZE, prng);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "255:             throws CertIOException, OperatorCreationException, CertificateException, NoSuchAlgorithmException {",
          "258:         Date notAfter = new Date(notBefore.getTime() + validity * 1000L);",
          "259:         dateValidity = notAfter;",
          "260:         X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(",
          "",
          "[Removed Lines]",
          "254:     private X509Certificate generateCertificate(String dnName, Date notBefore, long validity, KeyPair keyPair)",
          "257:         X500Name dn = new X500Name(dnName);",
          "",
          "[Added Lines]",
          "246:     private X509Certificate generateCertificate(Date notBefore, long validity, KeyPair keyPair)",
          "249:         X500Name dn = new X500Name(BundleKeyStore.CN_SAML_JENKINS);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "271:         builder.addExtension(Extension.subjectKeyIdentifier, false,",
          "272:                 extUtils.createSubjectKeyIdentifier(keyPair.getPublic()));",
          "275:         builder.addExtension(Extension.subjectAlternativeName, false,",
          "276:                 GeneralNames.getInstance(new DERSequence(subjectAltNAmes)));",
          "",
          "[Removed Lines]",
          "274:         ASN1Encodable[] subjectAltNAmes = {new GeneralName(GeneralName.dNSName, dnName)};",
          "",
          "[Added Lines]",
          "266:         ASN1Encodable[] subjectAltNAmes = {new GeneralName(GeneralName.dNSName, BundleKeyStore.CN_SAML_JENKINS)};",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java||src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java -> src/main/java/org/jenkinsci/plugins/saml/IdpMetadataConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.saml;",
          "22: import java.io.File;",
          "23: import java.io.IOException;",
          "24: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "3: import hudson.Extension;",
          "4: import hudson.ProxyConfiguration;",
          "5: import hudson.model.AbstractDescribableImpl;",
          "6: import hudson.model.Descriptor;",
          "7: import hudson.util.FormValidation;",
          "8: import org.apache.commons.io.FileUtils;",
          "9: import org.apache.commons.io.IOUtils;",
          "10: import org.apache.commons.lang.StringUtils;",
          "11: import org.kohsuke.stapler.DataBoundConstructor;",
          "12: import org.kohsuke.stapler.QueryParameter;",
          "14: import javax.annotation.Nonnull;",
          "15: import javax.xml.XMLConstants;",
          "16: import javax.xml.transform.OutputKeys;",
          "17: import javax.xml.transform.Transformer;",
          "18: import javax.xml.transform.TransformerException;",
          "19: import javax.xml.transform.TransformerFactory;",
          "20: import javax.xml.transform.stream.StreamResult;",
          "21: import javax.xml.transform.stream.StreamSource;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import java.net.MalformedURLException;",
          "27: import java.net.URL;",
          "28: import java.net.URLConnection;",
          "29: import java.util.logging.Level;",
          "30: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "32: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.*;",
          "",
          "[Added Lines]",
          "10: import java.nio.charset.StandardCharsets;",
          "13: import javax.annotation.Nonnull;",
          "14: import javax.xml.XMLConstants;",
          "15: import javax.xml.transform.OutputKeys;",
          "16: import javax.xml.transform.Transformer;",
          "17: import javax.xml.transform.TransformerException;",
          "18: import javax.xml.transform.TransformerFactory;",
          "19: import javax.xml.transform.stream.StreamResult;",
          "20: import javax.xml.transform.stream.StreamSource;",
          "21: import edu.umd.cs.findbugs.annotations.NonNull;",
          "22: import org.apache.commons.io.FileUtils;",
          "23: import org.apache.commons.io.IOUtils;",
          "24: import org.apache.commons.lang.StringUtils;",
          "25: import org.kohsuke.stapler.DataBoundConstructor;",
          "26: import org.kohsuke.stapler.QueryParameter;",
          "27: import hudson.Extension;",
          "28: import hudson.ProxyConfiguration;",
          "29: import hudson.model.AbstractDescribableImpl;",
          "30: import hudson.model.Descriptor;",
          "31: import hudson.util.FormValidation;",
          "32: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.ERROR_IDP_METADATA_EMPTY;",
          "33: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.ERROR_MALFORMED_URL;",
          "34: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.NOT_POSSIBLE_TO_GET_THE_METADATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "52:     private Long period;",
          "",
          "[Added Lines]",
          "54:     private final Long period;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     public String getIdpMetadata() throws IOException {",
          "108:     }",
          "",
          "[Removed Lines]",
          "107:         return FileUtils.readFileToString(new File(SamlSecurityRealm.getIDPMetadataFilePath()));",
          "",
          "[Added Lines]",
          "109:         return FileUtils.readFileToString(new File(SamlSecurityRealm.getIDPMetadataFilePath()), StandardCharsets.UTF_8);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:     public void createIdPMetadataFile() throws IOException {",
          "115:         try {",
          "116:             if (StringUtils.isNotBlank(xml)) {",
          "118:             } else {",
          "119:                 updateIdPMetadata();",
          "120:             }",
          "",
          "[Removed Lines]",
          "117:                 FileUtils.writeStringToFile(new File(SamlSecurityRealm.getIDPMetadataFilePath()), xml);",
          "",
          "[Added Lines]",
          "119:                 FileUtils.writeStringToFile(new File(SamlSecurityRealm.getIDPMetadataFilePath()), xml,",
          "120:                                             StandardCharsets.UTF_8);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:                 String idpXml = writer.toString();",
          "142:                 FormValidation validation = new SamlValidateIdPMetadata(idpXml).get();",
          "143:                 if (FormValidation.Kind.OK == validation.kind) {",
          "145:                 } else {",
          "146:                     throw new IllegalArgumentException(validation.getMessage());",
          "147:                 }",
          "",
          "[Removed Lines]",
          "144:                     FileUtils.writeStringToFile(new File(SamlSecurityRealm.getIDPMetadataFilePath()), idpXml);",
          "",
          "[Added Lines]",
          "147:                     FileUtils.writeStringToFile(new File(SamlSecurityRealm.getIDPMetadataFilePath()), idpXml,",
          "148:                                                 StandardCharsets.UTF_8);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:         return sb.toString();",
          "169:     }",
          "171:     @Extension",
          "172:     public static final class DescriptorImpl extends Descriptor<IdpMetadataConfiguration> {",
          "173:         public DescriptorImpl() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     @SuppressWarnings(\"unused\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:             super(clazz);",
          "179:         }",
          "181:         @Override",
          "182:         public String getDisplayName() {",
          "183:             return \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:         @NonNull",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:         }",
          "218:         public FormValidation doTestIdpMetadataURL(@QueryParameter(\"url\") String url) {",
          "220:             try {",
          "221:                 urlConnection = ProxyConfiguration.open(new URL(url));",
          "222:             } catch (IOException e) {",
          "",
          "[Removed Lines]",
          "219:             URLConnection urlConnection = null;",
          "",
          "[Added Lines]",
          "225:             URLConnection urlConnection;",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java||src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java -> src/main/java/org/jenkinsci/plugins/saml/OpenSAMLWrapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.jenkinsci.plugins.saml;",
          "20: import org.apache.commons.lang.StringUtils;",
          "21: import org.kohsuke.stapler.StaplerRequest;",
          "22: import org.kohsuke.stapler.StaplerResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.IOException;",
          "21: import java.util.logging.Logger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;",
          "28: import org.pac4j.saml.client.SAML2Client;",
          "29: import org.pac4j.saml.config.SAML2Configuration;",
          "",
          "[Removed Lines]",
          "31: import java.io.IOException;",
          "32: import java.util.logging.Logger;",
          "34: import static java.util.logging.Level.*;",
          "",
          "[Added Lines]",
          "32: import static java.util.logging.Level.FINE;",
          "33: import static java.util.logging.Level.SEVERE;",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java -> src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java||src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java -> src/main/java/org/jenkinsci/plugins/saml/SamlFileResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.jenkinsci.plugins.saml;",
          "27: import java.io.File;",
          "28: import java.io.IOException;",
          "29: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "20: import org.apache.commons.io.FileUtils;",
          "21: import org.apache.commons.lang.NotImplementedException;",
          "22: import org.pac4j.core.exception.TechnicalException;",
          "23: import org.springframework.core.io.Resource;",
          "24: import org.springframework.core.io.WritableResource;",
          "26: import javax.annotation.Nonnull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import java.io.UnsupportedEncodingException;",
          "32: import java.net.URI;",
          "33: import java.net.URL;",
          "39: class SamlFileResource implements WritableResource {",
          "47:     public SamlFileResource(@Nonnull String fileName) {",
          "48:         this.fileName = fileName;",
          "",
          "[Removed Lines]",
          "34: import java.util.logging.Logger;",
          "41:     private static final Logger LOG = Logger.getLogger(SamlFileResource.class.getName());",
          "43:     private String fileName;",
          "45:     private byte[] data;",
          "",
          "[Added Lines]",
          "27: import java.nio.charset.StandardCharsets;",
          "28: import javax.annotation.Nonnull;",
          "29: import edu.umd.cs.findbugs.annotations.NonNull;",
          "30: import org.apache.commons.io.FileUtils;",
          "31: import org.apache.commons.lang.NotImplementedException;",
          "32: import org.pac4j.core.exception.TechnicalException;",
          "33: import org.springframework.core.io.Resource;",
          "34: import org.springframework.core.io.WritableResource;",
          "41:     private final String fileName;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:     public SamlFileResource(@Nonnull String fileName, @Nonnull String data) {",
          "52:         this.fileName = fileName;",
          "53:         try {",
          "56:         } catch (UnsupportedEncodingException e) {",
          "57:             throw new TechnicalException(\"Could not get string bytes.\", e);",
          "58:         } catch (java.io.IOException e) {",
          "",
          "[Removed Lines]",
          "54:             this.data = data.getBytes(\"UTF-8\");",
          "55:             FileUtils.writeByteArrayToFile(getFile(), this.data);",
          "",
          "[Added Lines]",
          "50:             FileUtils.writeByteArrayToFile(getFile(), data.getBytes(StandardCharsets.UTF_8));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:         return false;",
          "76:     }",
          "78:     @Override",
          "79:     public URL getURL() {",
          "80:         throw new NotImplementedException();",
          "81:     }",
          "83:     @Override",
          "84:     public URI getURI() {",
          "85:         throw new NotImplementedException();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     @NonNull",
          "79:     @NonNull",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:         return fileName;",
          "91:     }",
          "93:     @Override",
          "94:     public String getDescription() {",
          "95:         return fileName;",
          "96:     }",
          "98:     @Override",
          "99:     public InputStream getInputStream() throws IOException {",
          "100:         return FileUtils.openInputStream(getFile());",
          "101:     }",
          "103:     @Override",
          "104:     public File getFile() {",
          "105:         return new File(fileName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @NonNull",
          "96:     @NonNull",
          "102:     @NonNull",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "115:         return getFile().lastModified();",
          "116:     }",
          "118:     @Override",
          "120:         throw new NotImplementedException();",
          "121:     }",
          "",
          "[Removed Lines]",
          "119:     public Resource createRelative(String s) {",
          "",
          "[Added Lines]",
          "118:     @NonNull",
          "120:     public Resource createRelative(@NonNull String s) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "125:         return getFile().canWrite();",
          "126:     }",
          "128:     @Override",
          "129:     public OutputStream getOutputStream() throws IOException {",
          "130:         return FileUtils.openOutputStream(getFile());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     @NonNull",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java||src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java -> src/main/java/org/jenkinsci/plugins/saml/SamlFormValidation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.saml;",
          "4: import org.apache.commons.lang.StringUtils;",
          "5: import org.kohsuke.accmod.Restricted;",
          "6: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "16: @Restricted(NoExternalUse.class)",
          "17: class SamlFormValidation {",
          "",
          "[Removed Lines]",
          "3: import hudson.util.FormValidation;",
          "8: import jakarta.mail.internet.AddressException;",
          "9: import jakarta.mail.internet.InternetAddress;",
          "10: import java.net.MalformedURLException;",
          "11: import java.net.URL;",
          "12: import java.text.Normalizer;",
          "14: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.*;",
          "",
          "[Added Lines]",
          "3: import java.net.MalformedURLException;",
          "4: import java.net.URL;",
          "5: import jakarta.mail.internet.AddressException;",
          "6: import jakarta.mail.internet.InternetAddress;",
          "10: import hudson.util.FormValidation;",
          "11: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.ERROR_NOT_VALID_NUMBER;",
          "12: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.ERROR_ONLY_SPACES_FIELD_VALUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:                 ia.validate();",
          "55:             }",
          "56:             else {",
          "58:             }",
          "59:         }",
          "60:         catch (AddressException ae) {",
          "",
          "[Removed Lines]",
          "57:                 FormValidation.warning(message);",
          "",
          "[Added Lines]",
          "55:                 return FormValidation.warning(message);",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java||src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java -> src/main/java/org/jenkinsci/plugins/saml/SamlPluginConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.jenkinsci.plugins.saml;",
          "21: import org.apache.commons.lang.StringUtils;",
          "23: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH;",
          "24: import static org.jenkinsci.plugins.saml.SamlSecurityRealm.DEFAULT_USERNAME_CASE_CONVERSION;",
          "",
          "[Removed Lines]",
          "20: import jenkins.model.Jenkins;",
          "",
          "[Added Lines]",
          "21: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: public class SamlPluginConfig {",
          "35:     private final IdpMetadataConfiguration idpMetadataConfiguration;",
          "36:     private final String usernameCaseConversion;",
          "",
          "[Removed Lines]",
          "30:     private String displayNameAttributeName;",
          "31:     private String groupsAttributeName;",
          "32:     private int maximumAuthenticationLifetime;",
          "33:     private String emailAttributeName;",
          "",
          "[Added Lines]",
          "29:     private final String displayNameAttributeName;",
          "30:     private final String groupsAttributeName;",
          "31:     private final int maximumAuthenticationLifetime;",
          "32:     private final String emailAttributeName;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:     private final String logoutUrl;",
          "39:     private final String binding;",
          "44:     public SamlPluginConfig(String displayNameAttributeName, String groupsAttributeName,",
          "45:                             int maximumAuthenticationLifetime, String emailAttributeName, IdpMetadataConfiguration idpMetadataConfiguration,",
          "",
          "[Removed Lines]",
          "41:     private SamlEncryptionData encryptionData;",
          "42:     private SamlAdvancedConfiguration advancedConfiguration;",
          "",
          "[Added Lines]",
          "40:     private final SamlEncryptionData encryptionData;",
          "41:     private final SamlAdvancedConfiguration advancedConfiguration;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:     @Override",
          "131:     public String toString() {",
          "146:     }",
          "147: }",
          "",
          "[Removed Lines]",
          "132:         final StringBuilder sb = new StringBuilder(\"SamlPluginConfig{\");",
          "133:         sb.append(\"idpMetadataConfiguration='\").append(getIdpMetadataConfiguration()).append('\\'');",
          "134:         sb.append(\", displayNameAttributeName='\").append(getDisplayNameAttributeName()).append('\\'');",
          "135:         sb.append(\", groupsAttributeName='\").append(getGroupsAttributeName()).append('\\'');",
          "136:         sb.append(\", emailAttributeName='\").append(getEmailAttributeName()).append('\\'');",
          "137:         sb.append(\", usernameAttributeName='\").append(getUsernameAttributeName()).append('\\'');",
          "138:         sb.append(\", maximumAuthenticationLifetime=\").append(getMaximumAuthenticationLifetime());",
          "139:         sb.append(\", usernameCaseConversion='\").append(getUsernameCaseConversion()).append('\\'');",
          "140:         sb.append(\", logoutUrl='\").append(getLogoutUrl()).append('\\'');",
          "141:         sb.append(\", binding='\").append(getBinding()).append('\\'');",
          "142:         sb.append(\", encryptionData=\").append(getEncryptionData());",
          "143:         sb.append(\", advancedConfiguration=\").append(getAdvancedConfiguration());",
          "144:         sb.append('}');",
          "145:         return sb.toString();",
          "",
          "[Added Lines]",
          "131:         return \"SamlPluginConfig{\" + \"idpMetadataConfiguration='\" + getIdpMetadataConfiguration() + '\\''",
          "132:                + \", displayNameAttributeName='\" + getDisplayNameAttributeName() + '\\'' + \", groupsAttributeName='\"",
          "133:                + getGroupsAttributeName() + '\\'' + \", emailAttributeName='\" + getEmailAttributeName() + '\\''",
          "134:                + \", usernameAttributeName='\" + getUsernameAttributeName() + '\\''",
          "135:                + \", maximumAuthenticationLifetime=\" + getMaximumAuthenticationLifetime()",
          "136:                + \", usernameCaseConversion='\" + getUsernameCaseConversion() + '\\'' + \", logoutUrl='\"",
          "137:                + getLogoutUrl() + '\\'' + \", binding='\" + getBinding() + '\\'' + \", encryptionData=\"",
          "138:                + getEncryptionData() + \", advancedConfiguration=\" + getAdvancedConfiguration() + '}';",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java||src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java -> src/main/java/org/jenkinsci/plugins/saml/SamlProfileWrapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.jenkinsci.plugins.saml;",
          "21: import org.kohsuke.stapler.StaplerRequest;",
          "22: import org.kohsuke.stapler.StaplerResponse;",
          "23: import org.pac4j.core.context.WebContext;",
          "",
          "[Removed Lines]",
          "20: import org.acegisecurity.BadCredentialsException;",
          "",
          "[Added Lines]",
          "20: import java.util.logging.Logger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.pac4j.saml.credentials.SAML2Credentials;",
          "27: import org.pac4j.saml.exceptions.SAMLException;",
          "28: import org.pac4j.saml.profile.SAML2Profile;",
          "",
          "[Removed Lines]",
          "30: import java.util.logging.Logger;",
          "",
          "[Added Lines]",
          "29: import org.springframework.security.authentication.BadCredentialsException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     @Override",
          "49:     protected SAML2Profile process() {",
          "50:         SAML2Credentials credentials;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     @SuppressWarnings(\"unused\")",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java||src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java -> src/main/java/org/jenkinsci/plugins/saml/SamlRedirectActionWrapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.kohsuke.stapler.StaplerRequest;",
          "21: import org.kohsuke.stapler.StaplerResponse;",
          "23: import org.pac4j.core.context.WebContext;",
          "24: import org.pac4j.core.exception.HttpAction;",
          "25: import org.pac4j.saml.client.SAML2Client;",
          "",
          "[Removed Lines]",
          "22: import org.pac4j.core.redirect.RedirectAction;",
          "",
          "[Added Lines]",
          "24: import org.pac4j.core.redirect.RedirectAction;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     @Override",
          "43:     protected RedirectAction process() throws IllegalStateException {",
          "44:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     @SuppressWarnings(\"unused\")",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java||src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java -> src/main/java/org/jenkinsci/plugins/saml/SamlSPMetadataWrapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.jenkinsci.plugins.saml;",
          "20: import org.kohsuke.stapler.HttpResponse;",
          "21: import org.kohsuke.stapler.HttpResponses;",
          "22: import org.kohsuke.stapler.StaplerRequest;",
          "23: import org.kohsuke.stapler.StaplerResponse;",
          "24: import org.pac4j.saml.client.SAML2Client;",
          "",
          "[Removed Lines]",
          "26: import java.io.IOException;",
          "",
          "[Added Lines]",
          "20: import java.io.IOException;",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java||src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java -> src/main/java/org/jenkinsci/plugins/saml/SamlValidateIdPMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.saml;",
          "4: import net.shibboleth.utilities.java.support.component.ComponentInitializationException;",
          "5: import net.shibboleth.utilities.java.support.xml.XMLParserException;",
          "6: import org.apache.commons.io.IOUtils;",
          "7: import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;",
          "8: import org.pac4j.saml.util.Configuration;",
          "",
          "[Removed Lines]",
          "3: import hudson.util.FormValidation;",
          "10: import java.io.IOException;",
          "",
          "[Added Lines]",
          "3: import java.io.IOException;",
          "9: import hudson.util.FormValidation;",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java||src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java -> src/main/java/org/jenkinsci/plugins/saml/UpdateMetadataFromURLPeriodicWork.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.saml;",
          "8: import java.io.IOException;",
          "9: import java.util.concurrent.TimeUnit;",
          "10: import java.util.logging.Level;",
          "11: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "3: import hudson.Extension;",
          "4: import hudson.model.AsyncAperiodicWork;",
          "5: import jenkins.model.Jenkins;",
          "6: import org.apache.commons.lang.StringUtils;",
          "",
          "[Added Lines]",
          "7: import org.apache.commons.lang.StringUtils;",
          "8: import hudson.Extension;",
          "9: import hudson.model.AsyncAperiodicWork;",
          "10: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public UpdateMetadataFromURLPeriodicWork() {",
          "32:         super(\"Update IdP Metadata from URL PeriodicWork\");",
          "33:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     @SuppressWarnings(\"unused\")",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java||src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java -> src/main/java/org/jenkinsci/plugins/saml/conf/Attribute.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.saml.conf;",
          "3: import hudson.Extension;",
          "4: import hudson.model.Descriptor;",
          "",
          "[Removed Lines]",
          "5: import org.kohsuke.stapler.DataBoundConstructor;",
          "7: import java.util.Objects;",
          "",
          "[Added Lines]",
          "3: import java.util.Objects;",
          "4: import edu.umd.cs.findbugs.annotations.NonNull;",
          "5: import org.kohsuke.stapler.DataBoundConstructor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     private final String displayName;",
          "25:     @DataBoundConstructor",
          "26:     public Attribute(String name, String displayName) {",
          "27:         this.name = name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     @SuppressWarnings(\"unused\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:         return displayName;",
          "37:     }",
          "39:     @Extension",
          "40:     public static final class DescriptorImpl extends Descriptor<AttributeEntry> {",
          "41:         @Override",
          "42:         public String getDisplayName() {",
          "43:             return \"SAML Attribute\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     @SuppressWarnings(\"unused\")",
          "43:         @NonNull",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java||src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java -> src/main/java/org/jenkinsci/plugins/saml/user/SamlCustomProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.jenkinsci.plugins.saml.user;",
          "19: import edu.umd.cs.findbugs.annotations.NonNull;",
          "24: import net.sf.json.JSONObject;",
          "25: import org.jenkinsci.plugins.saml.SamlSecurityRealm;",
          "26: import org.kohsuke.stapler.DataBoundConstructor;",
          "27: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "[Removed Lines]",
          "20: import hudson.Extension;",
          "21: import hudson.model.*;",
          "22: import hudson.model.Descriptor.FormException;",
          "23: import jenkins.model.Jenkins;",
          "29: import java.util.ArrayList;",
          "30: import java.util.List;",
          "31: import java.util.Objects;",
          "",
          "[Added Lines]",
          "19: import java.util.ArrayList;",
          "20: import java.util.List;",
          "21: import java.util.Objects;",
          "27: import hudson.Extension;",
          "28: import hudson.model.AbstractDescribableImpl;",
          "29: import hudson.model.Descriptor;",
          "30: import hudson.model.User;",
          "31: import hudson.model.UserProperty;",
          "32: import hudson.model.UserPropertyDescriptor;",
          "33: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:             this.displayName = displayName;",
          "62:         }",
          "64:         public String getName() {",
          "65:             return name;",
          "66:         }",
          "68:         public String getDisplayName() {",
          "69:             return displayName;",
          "70:         }",
          "72:         public String getValue() {",
          "73:             return value;",
          "74:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         @SuppressWarnings(\"unused\")",
          "71:         @SuppressWarnings(\"unused\")",
          "76:         @SuppressWarnings(\"unused\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:             return Objects.hash(name, displayName, value);",
          "94:         }",
          "96:         @Extension",
          "97:         public static final class DescriptorImpl extends Descriptor<Attribute> {",
          "98:             @NonNull",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         @SuppressWarnings(\"unused\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         return attributes;",
          "118:     }",
          "120:     public void setAttributes(List<Attribute> attributes) {",
          "121:         this.attributes = attributes;",
          "122:     }",
          "124:     @Override",
          "126:         return this;",
          "127:     }",
          "129:     @Extension",
          "130:     public static final class DescriptorImpl extends UserPropertyDescriptor {",
          "131:         public String getDisplayName() {",
          "132:             return \"Saml Custom Attributes property\";",
          "133:         }",
          "",
          "[Removed Lines]",
          "125:     public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {",
          "",
          "[Added Lines]",
          "126:     @SuppressWarnings(\"unused\")",
          "132:     public UserProperty reconfigure(StaplerRequest req, JSONObject form) {",
          "136:     @SuppressWarnings(\"unused\")",
          "139:         @NonNull",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java -> src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.BufferedReader;",
          "22: import java.security.Principal;",
          "23: import java.util.Collection;",
          "24: import java.util.Enumeration;",
          "",
          "[Removed Lines]",
          "20: import java.io.IOException;",
          "21: import java.io.UnsupportedEncodingException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import javax.servlet.DispatcherType;",
          "29: import javax.servlet.RequestDispatcher;",
          "30: import javax.servlet.ServletContext;",
          "32: import javax.servlet.ServletInputStream;",
          "33: import javax.servlet.ServletRequest;",
          "34: import javax.servlet.ServletResponse;",
          "",
          "[Removed Lines]",
          "31: import javax.servlet.ServletException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     }",
          "182:     @Override",
          "184:         return false;",
          "185:     }",
          "187:     @Override",
          "190:     }",
          "192:     @Override",
          "195:     }",
          "197:     @Override",
          "199:         return null;",
          "200:     }",
          "202:     @Override",
          "204:         return null;",
          "205:     }",
          "207:     @Override",
          "209:         return null;",
          "210:     }",
          "",
          "[Removed Lines]",
          "183:     public boolean authenticate(HttpServletResponse httpServletResponse) throws IOException, ServletException {",
          "188:     public void login(String s, String s1) throws ServletException {",
          "193:     public void logout() throws ServletException {",
          "198:     public Collection<Part> getParts() throws IOException, ServletException {",
          "203:     public Part getPart(String s) throws IOException, ServletException {",
          "208:     public <T extends HttpUpgradeHandler> T upgrade(Class<T> aClass) throws IOException, ServletException {",
          "",
          "[Added Lines]",
          "180:     public boolean authenticate(HttpServletResponse httpServletResponse) {",
          "185:     public void login(String s, String s1) {",
          "190:     public void logout() {",
          "195:     public Collection<Part> getParts() {",
          "200:     public Part getPart(String s) {",
          "205:     public <T extends HttpUpgradeHandler> T upgrade(Class<T> aClass) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:     }",
          "227:     @Override",
          "230:     }",
          "",
          "[Removed Lines]",
          "228:     public void setCharacterEncoding(String s) throws UnsupportedEncodingException {",
          "",
          "[Added Lines]",
          "225:     public void setCharacterEncoding(String s) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:     }",
          "247:     @Override",
          "249:         return null;",
          "250:     }",
          "",
          "[Removed Lines]",
          "248:     public ServletInputStream getInputStream() throws IOException {",
          "",
          "[Added Lines]",
          "245:     public ServletInputStream getInputStream() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:     }",
          "292:     @Override",
          "294:         return null;",
          "295:     }",
          "",
          "[Removed Lines]",
          "293:     public BufferedReader getReader() throws IOException {",
          "",
          "[Added Lines]",
          "290:     public BufferedReader getReader() {",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java||src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java -> src/test/java/org/jenkinsci/plugins/saml/OpenSamlWrapperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import java.io.PrintWriter;",
          "32: import java.io.StringWriter;",
          "33: import java.nio.charset.StandardCharsets;",
          "35: import static org.hamcrest.core.StringContains.containsString;",
          "36: import static org.hamcrest.MatcherAssert.assertThat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: public class OpenSamlWrapperTest {",
          "45:     @Rule",
          "48:     @Test",
          "49:     public void metadataWrapper() throws IOException, ServletException {",
          "54:         SamlSecurityRealm samlSecurity = new SamlSecurityRealm(new IdpMetadataConfiguration(metadata),",
          "55:                 \"displayName\", \"groups\", 10000,",
          "56:                 \"uid\", \"email\", \"/logout\", null,",
          "",
          "[Removed Lines]",
          "46:     public JenkinsRule jenkinsRule = new JenkinsRule();",
          "50:         String metadata = IOUtils.toString(this.getClass().getClassLoader().getResourceAsStream(\"org/jenkinsci\"",
          "51:                                                                                                 + \"/plugins/saml\"",
          "52:                                                                                                 + \"/OpenSamlWrapperTest/metadataWrapper/metadata.xml\"),",
          "53:                                            StandardCharsets.UTF_8);",
          "",
          "[Added Lines]",
          "47:     public final JenkinsRule jenkinsRule = new JenkinsRule();",
          "51:         String metadata = IOUtils.toString(",
          "52:             Objects.requireNonNull(this.getClass().getClassLoader().getResourceAsStream(",
          "53:                 \"org/jenkinsci\" + \"/plugins/saml\" + \"/OpenSamlWrapperTest/metadataWrapper/metadata.xml\")),",
          "54:             StandardCharsets.UTF_8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     @Test",
          "74:     public void metadataWrapperWitEncrytionConfigured() throws IOException, ServletException {",
          "79:         BundleKeyStore ks = new BundleKeyStore();",
          "80:         SamlEncryptionData encryptionData = new SamlEncryptionData(ks.getKeystorePath(),",
          "81:                 Secret.fromString(ks.getKsPassword()), Secret.fromString(ks.getKsPkPassword()), ks.getKsPkAlias(),",
          "",
          "[Removed Lines]",
          "75:         String metadata = IOUtils.toString(this.getClass().getClassLoader().getResourceAsStream(\"org/jenkinsci\"",
          "76:                                                                                                 + \"/plugins/saml/\"",
          "77:                                                                                                 + \"OpenSamlWrapperTest/metadataWrapper/metadata.xml\"),",
          "78:                                            StandardCharsets.UTF_8);",
          "",
          "[Added Lines]",
          "76:         String metadata = IOUtils.toString(",
          "77:             Objects.requireNonNull(this.getClass().getClassLoader().getResourceAsStream(",
          "78:                 \"org/jenkinsci\" + \"/plugins/saml/\" + \"OpenSamlWrapperTest/metadataWrapper/metadata.xml\")),",
          "79:             StandardCharsets.UTF_8);",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java -> src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import javax.servlet.FilterChain;",
          "21: import javax.servlet.ServletException;",
          "24: import javax.servlet.http.HttpServletRequest;",
          "25: import javax.servlet.http.HttpServletResponse;",
          "26: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "22: import javax.servlet.ServletRequest;",
          "23: import javax.servlet.ServletResponse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         requestOK = new FakeRequest(\"/securityRealm/finishLogin\");",
          "50:         requestError = new FakeRequest(\"/foo/securityRealm/finishLogin\");",
          "51:         response = null;",
          "58:         };",
          "59:     }",
          "",
          "[Removed Lines]",
          "52:         filterChain = new FilterChain(){",
          "53:             @Override",
          "54:             public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
          "55:                     throws IOException, ServletException {",
          "56:                 return;",
          "57:             }",
          "",
          "[Added Lines]",
          "50:         filterChain = (servletRequest, servletResponse) -> {",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java -> src/test/java/org/jenkinsci/plugins/saml/SamlFormValidationsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: public class SamlFormValidationsTest {",
          "35:     @Rule",
          "38:     private SamlSecurityRealm samlSecurityRealm;",
          "39:     private SamlSecurityRealm.DescriptorImpl descriptor;",
          "",
          "[Removed Lines]",
          "36:     public JenkinsRule jenkinsRule = new JenkinsRule();",
          "",
          "[Added Lines]",
          "36:     public final JenkinsRule jenkinsRule = new JenkinsRule();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5059a345bb5a445817b1da3e1f5b13d371235501",
      "candidate_info": {
        "commit_hash": "5059a345bb5a445817b1da3e1f5b13d371235501",
        "repo": "jenkinsci/saml-plugin",
        "commit_url": "https://github.com/jenkinsci/saml-plugin/commit/5059a345bb5a445817b1da3e1f5b13d371235501",
        "files": [
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "src/test/resources/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest/testReadSimpleConfiguration/config.xml"
        ],
        "message": "SECURITY-2469",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java -> src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     @Override",
          "22:     public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)",
          "23:             throws IOException, ServletException {",
          "26:             chain.doFilter(request, response);",
          "27:             return true;",
          "28:         }",
          "",
          "[Removed Lines]",
          "24:         String pathInfo = request.getPathInfo();",
          "25:         if (shouldExclude(pathInfo)) {",
          "",
          "[Added Lines]",
          "24:         jenkins.model.Jenkins j = jenkins.model.Jenkins.get();",
          "25:         if (j.getSecurityRealm() instanceof SamlSecurityRealm",
          "26:             && shouldExclude(request.getPathInfo())) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:             LOG.fine(\"SamlCrumbExclusion.shouldExclude empty\");",
          "35:             return false;",
          "36:         }",
          "38:             LOG.fine(\"SamlCrumbExclusion.shouldExclude excluding '\" + pathInfo + \"'\");",
          "39:             return true;",
          "40:         } else {",
          "",
          "[Removed Lines]",
          "37:         if (pathInfo.indexOf(SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH, 1) > -1) {",
          "",
          "[Added Lines]",
          "38:         if (pathInfo.startsWith(\"/\" + SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH)) {",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java -> src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: agreements.  See the NOTICE file distributed with this work",
          "3: for additional information regarding copyright ownership.",
          "4: Jenkins CI licenses this file to you under the Apache License,",
          "5: Version 2.0 (the \"License\"); you may not use this file except",
          "6: in compliance with the License.  You may obtain a copy of the",
          "7: License at",
          "9:   http://www.apache.org/licenses/LICENSE-2.0",
          "11: Unless required by applicable law or agreed to in writing,",
          "12: software distributed under the License is distributed on an",
          "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: KIND, either express or implied.  See the License for the",
          "15: specific language governing permissions and limitations",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.BufferedReader;",
          "20: import java.io.IOException;",
          "21: import java.io.UnsupportedEncodingException;",
          "22: import java.security.Principal;",
          "23: import java.util.Collection;",
          "24: import java.util.Enumeration;",
          "25: import java.util.Locale;",
          "26: import java.util.Map;",
          "27: import javax.servlet.AsyncContext;",
          "28: import javax.servlet.DispatcherType;",
          "29: import javax.servlet.RequestDispatcher;",
          "30: import javax.servlet.ServletContext;",
          "31: import javax.servlet.ServletException;",
          "32: import javax.servlet.ServletInputStream;",
          "33: import javax.servlet.ServletRequest;",
          "34: import javax.servlet.ServletResponse;",
          "35: import javax.servlet.http.Cookie;",
          "36: import javax.servlet.http.HttpServletRequest;",
          "37: import javax.servlet.http.HttpServletResponse;",
          "38: import javax.servlet.http.HttpSession;",
          "39: import javax.servlet.http.HttpUpgradeHandler;",
          "40: import javax.servlet.http.Part;",
          "46: public class FakeRequest implements HttpServletRequest {",
          "47:     private final String pathInfo;",
          "48:     public FakeRequest(String pathInfo) {",
          "49:         this.pathInfo = pathInfo;",
          "50:     }",
          "52:     @Override",
          "53:     public String getAuthType() {",
          "54:         return null;",
          "55:     }",
          "57:     @Override",
          "58:     public Cookie[] getCookies() {",
          "59:         return new Cookie[0];",
          "60:     }",
          "62:     @Override",
          "63:     public long getDateHeader(String s) {",
          "64:         return 0;",
          "65:     }",
          "67:     @Override",
          "68:     public String getHeader(String s) {",
          "69:         return null;",
          "70:     }",
          "72:     @Override",
          "73:     public Enumeration<String> getHeaders(String s) {",
          "74:         return null;",
          "75:     }",
          "77:     @Override",
          "78:     public Enumeration<String> getHeaderNames() {",
          "79:         return null;",
          "80:     }",
          "82:     @Override",
          "83:     public int getIntHeader(String s) {",
          "84:         return 0;",
          "85:     }",
          "87:     @Override",
          "88:     public String getMethod() {",
          "89:         return null;",
          "90:     }",
          "92:     @Override",
          "93:     public String getPathInfo() {",
          "94:         return pathInfo;",
          "95:     }",
          "97:     @Override",
          "98:     public String getPathTranslated() {",
          "99:         return null;",
          "100:     }",
          "102:     @Override",
          "103:     public String getContextPath() {",
          "104:         return null;",
          "105:     }",
          "107:     @Override",
          "108:     public String getQueryString() {",
          "109:         return null;",
          "110:     }",
          "112:     @Override",
          "113:     public String getRemoteUser() {",
          "114:         return null;",
          "115:     }",
          "117:     @Override",
          "118:     public boolean isUserInRole(String s) {",
          "119:         return false;",
          "120:     }",
          "122:     @Override",
          "123:     public Principal getUserPrincipal() {",
          "124:         return null;",
          "125:     }",
          "127:     @Override",
          "128:     public String getRequestedSessionId() {",
          "129:         return null;",
          "130:     }",
          "132:     @Override",
          "133:     public String getRequestURI() {",
          "134:         return null;",
          "135:     }",
          "137:     @Override",
          "138:     public StringBuffer getRequestURL() {",
          "139:         return null;",
          "140:     }",
          "142:     @Override",
          "143:     public String getServletPath() {",
          "144:         return null;",
          "145:     }",
          "147:     @Override",
          "148:     public HttpSession getSession(boolean b) {",
          "149:         return null;",
          "150:     }",
          "152:     @Override",
          "153:     public HttpSession getSession() {",
          "154:         return null;",
          "155:     }",
          "157:     @Override",
          "158:     public String changeSessionId() {",
          "159:         return null;",
          "160:     }",
          "162:     @Override",
          "163:     public boolean isRequestedSessionIdValid() {",
          "164:         return false;",
          "165:     }",
          "167:     @Override",
          "168:     public boolean isRequestedSessionIdFromCookie() {",
          "169:         return false;",
          "170:     }",
          "172:     @Override",
          "173:     public boolean isRequestedSessionIdFromURL() {",
          "174:         return false;",
          "175:     }",
          "177:     @Override",
          "178:     public boolean isRequestedSessionIdFromUrl() {",
          "179:         return false;",
          "180:     }",
          "182:     @Override",
          "183:     public boolean authenticate(HttpServletResponse httpServletResponse) throws IOException, ServletException {",
          "184:         return false;",
          "185:     }",
          "187:     @Override",
          "188:     public void login(String s, String s1) throws ServletException {",
          "190:     }",
          "192:     @Override",
          "193:     public void logout() throws ServletException {",
          "195:     }",
          "197:     @Override",
          "198:     public Collection<Part> getParts() throws IOException, ServletException {",
          "199:         return null;",
          "200:     }",
          "202:     @Override",
          "203:     public Part getPart(String s) throws IOException, ServletException {",
          "204:         return null;",
          "205:     }",
          "207:     @Override",
          "208:     public <T extends HttpUpgradeHandler> T upgrade(Class<T> aClass) throws IOException, ServletException {",
          "209:         return null;",
          "210:     }",
          "212:     @Override",
          "213:     public Object getAttribute(String s) {",
          "214:         return null;",
          "215:     }",
          "217:     @Override",
          "218:     public Enumeration<String> getAttributeNames() {",
          "219:         return null;",
          "220:     }",
          "222:     @Override",
          "223:     public String getCharacterEncoding() {",
          "224:         return null;",
          "225:     }",
          "227:     @Override",
          "228:     public void setCharacterEncoding(String s) throws UnsupportedEncodingException {",
          "230:     }",
          "232:     @Override",
          "233:     public int getContentLength() {",
          "234:         return 0;",
          "235:     }",
          "237:     @Override",
          "238:     public long getContentLengthLong() {",
          "239:         return 0;",
          "240:     }",
          "242:     @Override",
          "243:     public String getContentType() {",
          "244:         return null;",
          "245:     }",
          "247:     @Override",
          "248:     public ServletInputStream getInputStream() throws IOException {",
          "249:         return null;",
          "250:     }",
          "252:     @Override",
          "253:     public String getParameter(String s) {",
          "254:         return null;",
          "255:     }",
          "257:     @Override",
          "258:     public Enumeration<String> getParameterNames() {",
          "259:         return null;",
          "260:     }",
          "262:     @Override",
          "263:     public String[] getParameterValues(String s) {",
          "264:         return new String[0];",
          "265:     }",
          "267:     @Override",
          "268:     public Map<String, String[]> getParameterMap() {",
          "269:         return null;",
          "270:     }",
          "272:     @Override",
          "273:     public String getProtocol() {",
          "274:         return null;",
          "275:     }",
          "277:     @Override",
          "278:     public String getScheme() {",
          "279:         return null;",
          "280:     }",
          "282:     @Override",
          "283:     public String getServerName() {",
          "284:         return null;",
          "285:     }",
          "287:     @Override",
          "288:     public int getServerPort() {",
          "289:         return 0;",
          "290:     }",
          "292:     @Override",
          "293:     public BufferedReader getReader() throws IOException {",
          "294:         return null;",
          "295:     }",
          "297:     @Override",
          "298:     public String getRemoteAddr() {",
          "299:         return null;",
          "300:     }",
          "302:     @Override",
          "303:     public String getRemoteHost() {",
          "304:         return null;",
          "305:     }",
          "307:     @Override",
          "308:     public void setAttribute(String s, Object o) {",
          "310:     }",
          "312:     @Override",
          "313:     public void removeAttribute(String s) {",
          "315:     }",
          "317:     @Override",
          "318:     public Locale getLocale() {",
          "319:         return null;",
          "320:     }",
          "322:     @Override",
          "323:     public Enumeration<Locale> getLocales() {",
          "324:         return null;",
          "325:     }",
          "327:     @Override",
          "328:     public boolean isSecure() {",
          "329:         return false;",
          "330:     }",
          "332:     @Override",
          "333:     public RequestDispatcher getRequestDispatcher(String s) {",
          "334:         return null;",
          "335:     }",
          "337:     @Override",
          "338:     public String getRealPath(String s) {",
          "339:         return null;",
          "340:     }",
          "342:     @Override",
          "343:     public int getRemotePort() {",
          "344:         return 0;",
          "345:     }",
          "347:     @Override",
          "348:     public String getLocalName() {",
          "349:         return null;",
          "350:     }",
          "352:     @Override",
          "353:     public String getLocalAddr() {",
          "354:         return null;",
          "355:     }",
          "357:     @Override",
          "358:     public int getLocalPort() {",
          "359:         return 0;",
          "360:     }",
          "362:     @Override",
          "363:     public ServletContext getServletContext() {",
          "364:         return null;",
          "365:     }",
          "367:     @Override",
          "368:     public AsyncContext startAsync() throws IllegalStateException {",
          "369:         return null;",
          "370:     }",
          "372:     @Override",
          "373:     public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)",
          "374:             throws IllegalStateException {",
          "375:         return null;",
          "376:     }",
          "378:     @Override",
          "379:     public boolean isAsyncStarted() {",
          "380:         return false;",
          "381:     }",
          "383:     @Override",
          "384:     public boolean isAsyncSupported() {",
          "385:         return false;",
          "386:     }",
          "388:     @Override",
          "389:     public AsyncContext getAsyncContext() {",
          "390:         return null;",
          "391:     }",
          "393:     @Override",
          "394:     public DispatcherType getDispatcherType() {",
          "395:         return null;",
          "396:     }",
          "397: }",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java -> src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: agreements.  See the NOTICE file distributed with this work",
          "3: for additional information regarding copyright ownership.",
          "4: Jenkins CI licenses this file to you under the Apache License,",
          "5: Version 2.0 (the \"License\"); you may not use this file except",
          "6: in compliance with the License.  You may obtain a copy of the",
          "7: License at",
          "9:   http://www.apache.org/licenses/LICENSE-2.0",
          "11: Unless required by applicable law or agreed to in writing,",
          "12: software distributed under the License is distributed on an",
          "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: KIND, either express or implied.  See the License for the",
          "15: specific language governing permissions and limitations",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.IOException;",
          "20: import javax.servlet.FilterChain;",
          "21: import javax.servlet.ServletException;",
          "22: import javax.servlet.ServletRequest;",
          "23: import javax.servlet.ServletResponse;",
          "24: import javax.servlet.http.HttpServletRequest;",
          "25: import javax.servlet.http.HttpServletResponse;",
          "26: import org.junit.Before;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "29: import org.jvnet.hudson.test.JenkinsRule;",
          "30: import org.jvnet.hudson.test.recipes.LocalData;",
          "31: import static org.junit.Assert.assertFalse;",
          "32: import static org.junit.Assert.assertTrue;",
          "38: public class SamlCrumbExclusionTest {",
          "40:     @Rule",
          "41:     public JenkinsRule jenkinsRule = new JenkinsRule();",
          "42:     private HttpServletRequest requestOK;",
          "43:     private HttpServletRequest requestError;",
          "44:     private HttpServletResponse response;",
          "45:     private FilterChain filterChain;",
          "47:     @Before",
          "48:     public void setup(){",
          "49:         requestOK = new FakeRequest(\"/securityRealm/finishLogin\");",
          "50:         requestError = new FakeRequest(\"/foo/securityRealm/finishLogin\");",
          "51:         response = null;",
          "52:         filterChain = new FilterChain(){",
          "53:             @Override",
          "54:             public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
          "55:                     throws IOException, ServletException {",
          "56:                 return;",
          "57:             }",
          "58:         };",
          "59:     }",
          "61:     @LocalData(\"testReadSimpleConfiguration\")",
          "62:     @Test",
          "63:     public void testURL() throws ServletException, IOException {",
          "64:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
          "65:         assertTrue(exclusion.process(requestOK, response, filterChain));",
          "66:         assertFalse(exclusion.process(requestError, response, filterChain));",
          "67:     }",
          "69:     @Test",
          "70:     public void testRealmDisabled() throws ServletException, IOException {",
          "71:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
          "72:         assertFalse(exclusion.process(requestOK, response, filterChain));",
          "73:         assertFalse(exclusion.process(requestError, response, filterChain));",
          "74:     }",
          "75: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61d06e05290a460489a89411c9a3ce57456abcf9",
      "candidate_info": {
        "commit_hash": "61d06e05290a460489a89411c9a3ce57456abcf9",
        "repo": "jenkinsci/saml-plugin",
        "commit_url": "https://github.com/jenkinsci/saml-plugin/commit/61d06e05290a460489a89411c9a3ce57456abcf9",
        "files": [
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "src/test/resources/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest/testReadSimpleConfiguration/config.xml"
        ],
        "message": "SECURITY-2469",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
            "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
            "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java||src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java": [
          "File: src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java -> src/main/java/org/jenkinsci/plugins/saml/SamlCrumbExclusion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     @Override",
          "22:     public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain)",
          "23:             throws IOException, ServletException {",
          "26:             chain.doFilter(request, response);",
          "27:             return true;",
          "28:         }",
          "",
          "[Removed Lines]",
          "24:         String pathInfo = request.getPathInfo();",
          "25:         if (shouldExclude(pathInfo)) {",
          "",
          "[Added Lines]",
          "24:         jenkins.model.Jenkins j = jenkins.model.Jenkins.get();",
          "25:         if (j.getSecurityRealm() instanceof SamlSecurityRealm",
          "26:             && shouldExclude(request.getPathInfo())) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:             LOG.fine(\"SamlCrumbExclusion.shouldExclude empty\");",
          "35:             return false;",
          "36:         }",
          "38:             LOG.fine(\"SamlCrumbExclusion.shouldExclude excluding '\" + pathInfo + \"'\");",
          "39:             return true;",
          "40:         } else {",
          "",
          "[Removed Lines]",
          "37:         if (pathInfo.indexOf(SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH, 1) > -1) {",
          "",
          "[Added Lines]",
          "38:         if (pathInfo.startsWith(\"/\" + SamlSecurityRealm.CONSUMER_SERVICE_URL_PATH)) {",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java||src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java -> src/test/java/org/jenkinsci/plugins/saml/FakeRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: agreements.  See the NOTICE file distributed with this work",
          "3: for additional information regarding copyright ownership.",
          "4: Jenkins CI licenses this file to you under the Apache License,",
          "5: Version 2.0 (the \"License\"); you may not use this file except",
          "6: in compliance with the License.  You may obtain a copy of the",
          "7: License at",
          "9:   http://www.apache.org/licenses/LICENSE-2.0",
          "11: Unless required by applicable law or agreed to in writing,",
          "12: software distributed under the License is distributed on an",
          "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: KIND, either express or implied.  See the License for the",
          "15: specific language governing permissions and limitations",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.BufferedReader;",
          "20: import java.io.IOException;",
          "21: import java.io.UnsupportedEncodingException;",
          "22: import java.security.Principal;",
          "23: import java.util.Collection;",
          "24: import java.util.Enumeration;",
          "25: import java.util.Locale;",
          "26: import java.util.Map;",
          "27: import javax.servlet.AsyncContext;",
          "28: import javax.servlet.DispatcherType;",
          "29: import javax.servlet.RequestDispatcher;",
          "30: import javax.servlet.ServletContext;",
          "31: import javax.servlet.ServletException;",
          "32: import javax.servlet.ServletInputStream;",
          "33: import javax.servlet.ServletRequest;",
          "34: import javax.servlet.ServletResponse;",
          "35: import javax.servlet.http.Cookie;",
          "36: import javax.servlet.http.HttpServletRequest;",
          "37: import javax.servlet.http.HttpServletResponse;",
          "38: import javax.servlet.http.HttpSession;",
          "39: import javax.servlet.http.HttpUpgradeHandler;",
          "40: import javax.servlet.http.Part;",
          "46: public class FakeRequest implements HttpServletRequest {",
          "47:     private final String pathInfo;",
          "48:     public FakeRequest(String pathInfo) {",
          "49:         this.pathInfo = pathInfo;",
          "50:     }",
          "52:     @Override",
          "53:     public String getAuthType() {",
          "54:         return null;",
          "55:     }",
          "57:     @Override",
          "58:     public Cookie[] getCookies() {",
          "59:         return new Cookie[0];",
          "60:     }",
          "62:     @Override",
          "63:     public long getDateHeader(String s) {",
          "64:         return 0;",
          "65:     }",
          "67:     @Override",
          "68:     public String getHeader(String s) {",
          "69:         return null;",
          "70:     }",
          "72:     @Override",
          "73:     public Enumeration<String> getHeaders(String s) {",
          "74:         return null;",
          "75:     }",
          "77:     @Override",
          "78:     public Enumeration<String> getHeaderNames() {",
          "79:         return null;",
          "80:     }",
          "82:     @Override",
          "83:     public int getIntHeader(String s) {",
          "84:         return 0;",
          "85:     }",
          "87:     @Override",
          "88:     public String getMethod() {",
          "89:         return null;",
          "90:     }",
          "92:     @Override",
          "93:     public String getPathInfo() {",
          "94:         return pathInfo;",
          "95:     }",
          "97:     @Override",
          "98:     public String getPathTranslated() {",
          "99:         return null;",
          "100:     }",
          "102:     @Override",
          "103:     public String getContextPath() {",
          "104:         return null;",
          "105:     }",
          "107:     @Override",
          "108:     public String getQueryString() {",
          "109:         return null;",
          "110:     }",
          "112:     @Override",
          "113:     public String getRemoteUser() {",
          "114:         return null;",
          "115:     }",
          "117:     @Override",
          "118:     public boolean isUserInRole(String s) {",
          "119:         return false;",
          "120:     }",
          "122:     @Override",
          "123:     public Principal getUserPrincipal() {",
          "124:         return null;",
          "125:     }",
          "127:     @Override",
          "128:     public String getRequestedSessionId() {",
          "129:         return null;",
          "130:     }",
          "132:     @Override",
          "133:     public String getRequestURI() {",
          "134:         return null;",
          "135:     }",
          "137:     @Override",
          "138:     public StringBuffer getRequestURL() {",
          "139:         return null;",
          "140:     }",
          "142:     @Override",
          "143:     public String getServletPath() {",
          "144:         return null;",
          "145:     }",
          "147:     @Override",
          "148:     public HttpSession getSession(boolean b) {",
          "149:         return null;",
          "150:     }",
          "152:     @Override",
          "153:     public HttpSession getSession() {",
          "154:         return null;",
          "155:     }",
          "157:     @Override",
          "158:     public String changeSessionId() {",
          "159:         return null;",
          "160:     }",
          "162:     @Override",
          "163:     public boolean isRequestedSessionIdValid() {",
          "164:         return false;",
          "165:     }",
          "167:     @Override",
          "168:     public boolean isRequestedSessionIdFromCookie() {",
          "169:         return false;",
          "170:     }",
          "172:     @Override",
          "173:     public boolean isRequestedSessionIdFromURL() {",
          "174:         return false;",
          "175:     }",
          "177:     @Override",
          "178:     public boolean isRequestedSessionIdFromUrl() {",
          "179:         return false;",
          "180:     }",
          "182:     @Override",
          "183:     public boolean authenticate(HttpServletResponse httpServletResponse) throws IOException, ServletException {",
          "184:         return false;",
          "185:     }",
          "187:     @Override",
          "188:     public void login(String s, String s1) throws ServletException {",
          "190:     }",
          "192:     @Override",
          "193:     public void logout() throws ServletException {",
          "195:     }",
          "197:     @Override",
          "198:     public Collection<Part> getParts() throws IOException, ServletException {",
          "199:         return null;",
          "200:     }",
          "202:     @Override",
          "203:     public Part getPart(String s) throws IOException, ServletException {",
          "204:         return null;",
          "205:     }",
          "207:     @Override",
          "208:     public <T extends HttpUpgradeHandler> T upgrade(Class<T> aClass) throws IOException, ServletException {",
          "209:         return null;",
          "210:     }",
          "212:     @Override",
          "213:     public Object getAttribute(String s) {",
          "214:         return null;",
          "215:     }",
          "217:     @Override",
          "218:     public Enumeration<String> getAttributeNames() {",
          "219:         return null;",
          "220:     }",
          "222:     @Override",
          "223:     public String getCharacterEncoding() {",
          "224:         return null;",
          "225:     }",
          "227:     @Override",
          "228:     public void setCharacterEncoding(String s) throws UnsupportedEncodingException {",
          "230:     }",
          "232:     @Override",
          "233:     public int getContentLength() {",
          "234:         return 0;",
          "235:     }",
          "237:     @Override",
          "238:     public long getContentLengthLong() {",
          "239:         return 0;",
          "240:     }",
          "242:     @Override",
          "243:     public String getContentType() {",
          "244:         return null;",
          "245:     }",
          "247:     @Override",
          "248:     public ServletInputStream getInputStream() throws IOException {",
          "249:         return null;",
          "250:     }",
          "252:     @Override",
          "253:     public String getParameter(String s) {",
          "254:         return null;",
          "255:     }",
          "257:     @Override",
          "258:     public Enumeration<String> getParameterNames() {",
          "259:         return null;",
          "260:     }",
          "262:     @Override",
          "263:     public String[] getParameterValues(String s) {",
          "264:         return new String[0];",
          "265:     }",
          "267:     @Override",
          "268:     public Map<String, String[]> getParameterMap() {",
          "269:         return null;",
          "270:     }",
          "272:     @Override",
          "273:     public String getProtocol() {",
          "274:         return null;",
          "275:     }",
          "277:     @Override",
          "278:     public String getScheme() {",
          "279:         return null;",
          "280:     }",
          "282:     @Override",
          "283:     public String getServerName() {",
          "284:         return null;",
          "285:     }",
          "287:     @Override",
          "288:     public int getServerPort() {",
          "289:         return 0;",
          "290:     }",
          "292:     @Override",
          "293:     public BufferedReader getReader() throws IOException {",
          "294:         return null;",
          "295:     }",
          "297:     @Override",
          "298:     public String getRemoteAddr() {",
          "299:         return null;",
          "300:     }",
          "302:     @Override",
          "303:     public String getRemoteHost() {",
          "304:         return null;",
          "305:     }",
          "307:     @Override",
          "308:     public void setAttribute(String s, Object o) {",
          "310:     }",
          "312:     @Override",
          "313:     public void removeAttribute(String s) {",
          "315:     }",
          "317:     @Override",
          "318:     public Locale getLocale() {",
          "319:         return null;",
          "320:     }",
          "322:     @Override",
          "323:     public Enumeration<Locale> getLocales() {",
          "324:         return null;",
          "325:     }",
          "327:     @Override",
          "328:     public boolean isSecure() {",
          "329:         return false;",
          "330:     }",
          "332:     @Override",
          "333:     public RequestDispatcher getRequestDispatcher(String s) {",
          "334:         return null;",
          "335:     }",
          "337:     @Override",
          "338:     public String getRealPath(String s) {",
          "339:         return null;",
          "340:     }",
          "342:     @Override",
          "343:     public int getRemotePort() {",
          "344:         return 0;",
          "345:     }",
          "347:     @Override",
          "348:     public String getLocalName() {",
          "349:         return null;",
          "350:     }",
          "352:     @Override",
          "353:     public String getLocalAddr() {",
          "354:         return null;",
          "355:     }",
          "357:     @Override",
          "358:     public int getLocalPort() {",
          "359:         return 0;",
          "360:     }",
          "362:     @Override",
          "363:     public ServletContext getServletContext() {",
          "364:         return null;",
          "365:     }",
          "367:     @Override",
          "368:     public AsyncContext startAsync() throws IllegalStateException {",
          "369:         return null;",
          "370:     }",
          "372:     @Override",
          "373:     public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)",
          "374:             throws IllegalStateException {",
          "375:         return null;",
          "376:     }",
          "378:     @Override",
          "379:     public boolean isAsyncStarted() {",
          "380:         return false;",
          "381:     }",
          "383:     @Override",
          "384:     public boolean isAsyncSupported() {",
          "385:         return false;",
          "386:     }",
          "388:     @Override",
          "389:     public AsyncContext getAsyncContext() {",
          "390:         return null;",
          "391:     }",
          "393:     @Override",
          "394:     public DispatcherType getDispatcherType() {",
          "395:         return null;",
          "396:     }",
          "397: }",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java||src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java -> src/test/java/org/jenkinsci/plugins/saml/SamlCrumbExclusionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: agreements.  See the NOTICE file distributed with this work",
          "3: for additional information regarding copyright ownership.",
          "4: Jenkins CI licenses this file to you under the Apache License,",
          "5: Version 2.0 (the \"License\"); you may not use this file except",
          "6: in compliance with the License.  You may obtain a copy of the",
          "7: License at",
          "9:   http://www.apache.org/licenses/LICENSE-2.0",
          "11: Unless required by applicable law or agreed to in writing,",
          "12: software distributed under the License is distributed on an",
          "13: \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: KIND, either express or implied.  See the License for the",
          "15: specific language governing permissions and limitations",
          "17: package org.jenkinsci.plugins.saml;",
          "19: import java.io.IOException;",
          "20: import javax.servlet.FilterChain;",
          "21: import javax.servlet.ServletException;",
          "22: import javax.servlet.ServletRequest;",
          "23: import javax.servlet.ServletResponse;",
          "24: import javax.servlet.http.HttpServletRequest;",
          "25: import javax.servlet.http.HttpServletResponse;",
          "26: import org.junit.Before;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "29: import org.jvnet.hudson.test.JenkinsRule;",
          "30: import org.jvnet.hudson.test.recipes.LocalData;",
          "31: import static org.junit.Assert.assertFalse;",
          "32: import static org.junit.Assert.assertTrue;",
          "38: public class SamlCrumbExclusionTest {",
          "40:     @Rule",
          "41:     public JenkinsRule jenkinsRule = new JenkinsRule();",
          "42:     private HttpServletRequest requestOK;",
          "43:     private HttpServletRequest requestError;",
          "44:     private HttpServletResponse response;",
          "45:     private FilterChain filterChain;",
          "47:     @Before",
          "48:     public void setup(){",
          "49:         requestOK = new FakeRequest(\"/securityRealm/finishLogin\");",
          "50:         requestError = new FakeRequest(\"/foo/securityRealm/finishLogin\");",
          "51:         response = null;",
          "52:         filterChain = new FilterChain(){",
          "53:             @Override",
          "54:             public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
          "55:                     throws IOException, ServletException {",
          "56:                 return;",
          "57:             }",
          "58:         };",
          "59:     }",
          "61:     @LocalData(\"testReadSimpleConfiguration\")",
          "62:     @Test",
          "63:     public void testURL() throws ServletException, IOException {",
          "64:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
          "65:         assertTrue(exclusion.process(requestOK, response, filterChain));",
          "66:         assertFalse(exclusion.process(requestError, response, filterChain));",
          "67:     }",
          "69:     @Test",
          "70:     public void testRealmDisabled() throws ServletException, IOException {",
          "71:         SamlCrumbExclusion exclusion = new SamlCrumbExclusion();",
          "72:         assertFalse(exclusion.process(requestOK, response, filterChain));",
          "73:         assertFalse(exclusion.process(requestError, response, filterChain));",
          "74:     }",
          "75: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}