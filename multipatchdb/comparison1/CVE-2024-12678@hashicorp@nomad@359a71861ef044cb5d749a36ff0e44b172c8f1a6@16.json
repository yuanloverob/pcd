{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5a91718e90260775b160e34521987528c5f33de5",
      "candidate_info": {
        "commit_hash": "5a91718e90260775b160e34521987528c5f33de5",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5a91718e90260775b160e34521987528c5f33de5",
        "files": [
          "website/content/api-docs/agent.mdx"
        ],
        "message": "backport of commit 0b1a660b81a11d5e7a3099368527eef89b4a36d6 (#25366)\n\nCo-authored-by: Habibi Mustafa <habibi@dicoding.com>",
        "before_after_code_files": [
          "website/content/api-docs/agent.mdx||website/content/api-docs/agent.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "website/content/api-docs/agent.mdx||website/content/api-docs/agent.mdx": [
          "File: website/content/api-docs/agent.mdx -> website/content/api-docs/agent.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: | Method | Path             | Produces           |",
          "20: | ------ | ---------------- | ------------------ |",
          "23: The table below shows this endpoint's support for",
          "24: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "21: | `GET`  | `/agent/members` | `application/json` |",
          "",
          "[Added Lines]",
          "21: | `GET`  | `/v1/agent/members` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: | Method | Path             | Produces           |",
          "81: | ------ | ---------------- | ------------------ |",
          "84: The table below shows this endpoint's support for",
          "85: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "82: | `GET`  | `/agent/servers` | `application/json` |",
          "",
          "[Added Lines]",
          "82: | `GET`  | `/v1/agent/servers` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110: | Method | Path             | Produces       |",
          "111: | ------ | ---------------- | -------------- |",
          "114: The table below shows this endpoint's support for",
          "115: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "112: | `POST` | `/agent/servers` | `(empty body)` |",
          "",
          "[Added Lines]",
          "112: | `POST` | `/v1/agent/servers` | `(empty body)` |",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139: | Method | Path          | Produces           |",
          "140: | ------ | ------------- | ------------------ |",
          "143: The table below shows this endpoint's support for",
          "144: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "141: | `GET`  | `/agent/self` | `application/json` |",
          "",
          "[Added Lines]",
          "141: | `GET`  | `/v1/agent/self` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "388: | Method | Path          | Produces           |",
          "389: | ------ | ------------- | ------------------ |",
          "392: The table below shows this endpoint's support for",
          "393: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "390: | `POST` | `/agent/join` | `application/json` |",
          "",
          "[Added Lines]",
          "390: | `POST` | `/v1/agent/join` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "429: | Method | Path                 | Produces           |",
          "430: | ------ | -------------------- | ------------------ |",
          "433: The table below shows this endpoint's support for",
          "434: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "431: | `POST` | `/agent/force-leave` | `application/json` |",
          "",
          "[Added Lines]",
          "431: | `POST` | `/v1/agent/force-leave` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "465: | Method | Path            | Produces           |",
          "466: | ------ | --------------- | ------------------ |",
          "469: The table below shows this endpoint's support for",
          "470: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "467: | `GET`  | `/agent/health` | `application/json` |",
          "",
          "[Added Lines]",
          "467: | `GET`  | `/v1/agent/health` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "507: | Method | Path          | Produces           |",
          "508: | ------ | ------------- | ------------------ |",
          "511: The table below shows this endpoint's support for",
          "512: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "509: | `GET`  | `/agent/host` | `application/json` |",
          "",
          "[Added Lines]",
          "509: | `GET`  | `/v1/agent/host` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "587: | Method | Path             | Produces           |",
          "588: | ------ | ---------------- | ------------------ |",
          "591: The table below shows this endpoint's support for",
          "592: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "589: | `GET`  | `/agent/monitor` | `application/json` |",
          "",
          "[Added Lines]",
          "589: | `GET`  | `/v1/agent/monitor` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "660: | Method | Path                           | Produces                   |",
          "661: | ------ | ------------------------------ | -------------------------- |",
          "667: The table below shows this endpoint's support for",
          "668: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "662: | `GET`  | `/agent/pprof/cmdline`         | `text/plain`               |",
          "663: | `GET`  | `/agent/pprof/profile`         | `application/octet-stream` |",
          "664: | `GET`  | `/agent/pprof/trace`           | `application/octet-stream` |",
          "665: | `GET`  | `/agent/pprof/<pprof profile>` | `application/octet-stream` |",
          "",
          "[Added Lines]",
          "662: | `GET`  | `/v1/agent/pprof/cmdline`         | `text/plain`               |",
          "663: | `GET`  | `/v1/agent/pprof/profile`         | `application/octet-stream` |",
          "664: | `GET`  | `/v1/agent/pprof/trace`           | `application/octet-stream` |",
          "665: | `GET`  | `/v1/agent/pprof/<pprof profile>` | `application/octet-stream` |",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "683: The following table explains when each endpoint is available:",
          "695: ### Parameters",
          "",
          "[Removed Lines]",
          "685: | Endpoint        | `enable_debug` | ACLs | **Available?** |",
          "686: | --------------- | -------------- | ---- | -------------- |",
          "687: | /v1/agent/pprof | unset          | n/a  | no             |",
          "688: | /v1/agent/pprof | `true`         | n/a  | yes            |",
          "689: | /v1/agent/pprof | `false`        | n/a  | no             |",
          "690: | /v1/agent/pprof | unset          | off  | no             |",
          "691: | /v1/agent/pprof | unset          | on   | **yes**        |",
          "692: | /v1/agent/pprof | `true`         | off  | yes            |",
          "693: | /v1/agent/pprof | `false`        | on   | **yes**        |",
          "",
          "[Added Lines]",
          "685: | Endpoint          | `enable_debug` | ACLs | **Available?** |",
          "686: | ----------------- | -------------- | ---- | -------------- |",
          "687: | `/v1/agent/pprof` | unset          | n/a  | no             |",
          "688: | `/v1/agent/pprof` | `true`         | n/a  | yes            |",
          "689: | `/v1/agent/pprof` | `false`        | n/a  | no             |",
          "690: | `/v1/agent/pprof` | unset          | off  | no             |",
          "691: | `/v1/agent/pprof` | unset          | on   | **yes**        |",
          "692: | `/v1/agent/pprof` | `true`         | off  | yes            |",
          "693: | `/v1/agent/pprof` | `false`        | on   | **yes**        |",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "740: | Method | Path                | Produces           |",
          "741: | ------ | ------------------- | ------------------ |",
          "744: The table below shows this endpoint's support for",
          "745: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "742: | `GET`  | `/agent/schedulers` | `application/json` |",
          "",
          "[Added Lines]",
          "742: | `GET`  | `/v1/agent/schedulers` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "831: | Method | Path                       | Produces           |",
          "832: | ------ | -------------------------- | ------------------ |",
          "835: The table below shows this endpoint's support for",
          "836: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "833: | `GET`  | `/agent/schedulers/config` | `application/json` |",
          "",
          "[Added Lines]",
          "833: | `GET`  | `/v1/agent/schedulers/config` | `application/json` |",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "879: | Method | Path                       | Produces           |",
          "880: | ------ | -------------------------- | ------------------ |",
          "883: The table below shows this endpoint's support for",
          "884: [blocking queries](/nomad/api-docs#blocking-queries) and",
          "",
          "[Removed Lines]",
          "881: | `PUT`  | `/agent/schedulers/config` | `application/json` |",
          "",
          "[Added Lines]",
          "881: | `PUT`  | `/v1/agent/schedulers/config` | `application/json` |",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4f5dda05212b7c15affff0e1db466a8c0ac20ae",
      "candidate_info": {
        "commit_hash": "c4f5dda05212b7c15affff0e1db466a8c0ac20ae",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/c4f5dda05212b7c15affff0e1db466a8c0ac20ae",
        "files": [
          "command/agent/command.go",
          "command/agent/command_test.go"
        ],
        "message": "agent: Ensure logger set up method is public (#24887)\n\nbackport of commit 63ea13be778092be2d4d606675254912451a78bf\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/agent/command.go||command/agent/command.go",
          "command/agent/command_test.go||command/agent/command_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/command.go||command/agent/command.go": [
          "File: command/agent/command.go -> command/agent/command.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:  return true",
          "548: }",
          "",
          "[Removed Lines]",
          "551: func setupLoggers(ui cli.Ui, config *Config) (*gatedwriter.Writer, io.Writer) {",
          "",
          "[Added Lines]",
          "554: func SetupLoggers(ui cli.Ui, config *Config) (*gatedwriter.Writer, io.Writer) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "798:  }",
          "802:  if logGate == nil {",
          "803:   return 1",
          "804:  }",
          "",
          "[Removed Lines]",
          "801:  logGate, logOutput := setupLoggers(c.Ui, config)",
          "",
          "[Added Lines]",
          "804:  logGate, logOutput := SetupLoggers(c.Ui, config)",
          "",
          "---------------"
        ],
        "command/agent/command_test.go||command/agent/command_test.go": [
          "File: command/agent/command_test.go -> command/agent/command_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "639:  }",
          "643:  must.Nil(t, gatedWriter)",
          "644:  must.Nil(t, writer)",
          "645:  must.StrContains(t, mockUI.ErrorWriter.String(), \"Invalid log level: WARNING\")",
          "",
          "[Removed Lines]",
          "642:  gatedWriter, writer := setupLoggers(mockUI, cfg)",
          "",
          "[Added Lines]",
          "642:  gatedWriter, writer := SetupLoggers(mockUI, cfg)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:  cfg.LogLevel = \"warn\"",
          "654:  must.NotNil(t, gatedWriter)",
          "655:  must.NotNil(t, writer)",
          "",
          "[Removed Lines]",
          "653:  gatedWriter, writer = setupLoggers(mockUI, cfg)",
          "",
          "[Added Lines]",
          "653:  gatedWriter, writer = SetupLoggers(mockUI, cfg)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b61213d01d2904ab93adc99a176151c3046afeb",
      "candidate_info": {
        "commit_hash": "8b61213d01d2904ab93adc99a176151c3046afeb",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/8b61213d01d2904ab93adc99a176151c3046afeb",
        "files": [
          ".changelog/25328.txt",
          "nomad/acl_endpoint.go",
          "nomad/state/events.go",
          "nomad/structs/acl.go",
          "nomad/structs/acl_test.go"
        ],
        "message": "backport of commit dc482bf9058faf7a192486eb52caa1d42646f6b3 (#25333)\n\nCo-authored-by: Daniel Bennett <dbennett@hashicorp.com>",
        "before_after_code_files": [
          "nomad/acl_endpoint.go||nomad/acl_endpoint.go",
          "nomad/state/events.go||nomad/state/events.go",
          "nomad/structs/acl.go||nomad/structs/acl.go",
          "nomad/structs/acl_test.go||nomad/structs/acl_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/acl_endpoint.go||nomad/acl_endpoint.go": [
          "File: nomad/acl_endpoint.go -> nomad/acl_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2101:    return nil",
          "2102:   },",
          "2103:  })",
          "",
          "[Removed Lines]",
          "2100:    reply.AuthMethod = out",
          "",
          "[Added Lines]",
          "2100:    reply.AuthMethod = out.Sanitize()",
          "",
          "---------------"
        ],
        "nomad/state/events.go||nomad/state/events.go": [
          "File: nomad/state/events.go -> nomad/state/events.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:    if !ok {",
          "106:     return structs.Event{}, false",
          "107:    }",
          "108:    return structs.Event{",
          "109:     Topic: structs.TopicACLAuthMethod,",
          "110:     Key:   before.Name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:    before = before.Sanitize()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   if !ok {",
          "228:    return structs.Event{}, false",
          "229:   }",
          "230:   return structs.Event{",
          "231:    Topic: structs.TopicACLAuthMethod,",
          "232:    Key:   after.Name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   after = after.Sanitize()",
          "",
          "---------------"
        ],
        "nomad/structs/acl.go||nomad/structs/acl.go": [
          "File: nomad/structs/acl.go -> nomad/structs/acl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "968:  return mErr.ErrorOrNil()",
          "969: }",
          "973: func (a *ACLAuthMethod) TokenLocalityIsGlobal() bool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972: func (a *ACLAuthMethod) Sanitize() *ACLAuthMethod {",
          "973:  if a == nil || a.Config == nil {",
          "974:   return a",
          "975:  }",
          "977:  clean := a.Copy()",
          "980:  if clean.Config.OIDCClientSecret != \"\" {",
          "981:   clean.Config.OIDCClientSecret = \"redacted\"",
          "982:  }",
          "983:  return clean",
          "984: }",
          "",
          "---------------"
        ],
        "nomad/structs/acl_test.go||nomad/structs/acl_test.go": [
          "File: nomad/structs/acl_test.go -> nomad/structs/acl_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1263:  }",
          "1264: }",
          "1266: func TestACLAuthMethod_Merge(t *testing.T) {",
          "1267:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1267: func TestACLAuthMethod_Sanitize(t *testing.T) {",
          "1269:  am := &ACLAuthMethod{}",
          "1270:  am.Sanitize()",
          "1271:  am.Config = &ACLAuthMethodConfig{}",
          "1272:  am.Sanitize()",
          "1274:  t.Run(\"client secret\", func(t *testing.T) {",
          "1275:   am := am.Copy()",
          "1276:   am.Config.OIDCClientSecret = \"very private secret\"",
          "1277:   dirty := am.Config.OIDCClientSecret",
          "1278:   clean := am.Sanitize().Config.OIDCClientSecret",
          "1279:   must.Eq(t, \"very private secret\", dirty)",
          "1280:   must.Eq(t, \"redacted\", clean)",
          "1281:  })",
          "1282: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65905721c04c495900bfd45d82e3fa714bd8947c",
      "candidate_info": {
        "commit_hash": "65905721c04c495900bfd45d82e3fa714bd8947c",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/65905721c04c495900bfd45d82e3fa714bd8947c",
        "files": [
          ".changelog/24112.txt",
          "api/csi.go",
          "api/deployments.go",
          "nomad/blocked_evals.go",
          "nomad/core_sched.go",
          "nomad/core_sched_test.go",
          "nomad/csi_endpoint_test.go",
          "nomad/fsm.go",
          "nomad/fsm_test.go",
          "nomad/leader.go",
          "nomad/mock/csi.go",
          "nomad/mock/job.go",
          "nomad/mock/mock.go",
          "nomad/plan_apply_test.go",
          "nomad/server.go",
          "nomad/state/state_store.go",
          "nomad/state/state_store_test.go",
          "nomad/state/testing.go",
          "nomad/structs/csi.go",
          "nomad/structs/structs.go",
          "nomad/system_endpoint_test.go",
          "nomad/timetable.go",
          "nomad/timetable_test.go",
          "nomad/volumewatcher/volumes_watcher_test.go",
          "scheduler/reconcile.go",
          "scheduler/reconcile_test.go",
          "website/content/docs/upgrade/upgrade-specific.mdx"
        ],
        "message": "backport of commit f7847c6e5b638c62e0b95886c8afbefa7d667a8f (#24355)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "api/csi.go||api/csi.go",
          "api/deployments.go||api/deployments.go",
          "nomad/blocked_evals.go||nomad/blocked_evals.go",
          "nomad/core_sched.go||nomad/core_sched.go",
          "nomad/core_sched_test.go||nomad/core_sched_test.go",
          "nomad/csi_endpoint_test.go||nomad/csi_endpoint_test.go",
          "nomad/fsm.go||nomad/fsm.go",
          "nomad/fsm_test.go||nomad/fsm_test.go",
          "nomad/leader.go||nomad/leader.go",
          "nomad/mock/csi.go||nomad/mock/csi.go",
          "nomad/mock/job.go||nomad/mock/job.go",
          "nomad/mock/mock.go||nomad/mock/mock.go",
          "nomad/plan_apply_test.go||nomad/plan_apply_test.go",
          "nomad/server.go||nomad/server.go",
          "nomad/state/state_store.go||nomad/state/state_store.go",
          "nomad/state/state_store_test.go||nomad/state/state_store_test.go",
          "nomad/state/testing.go||nomad/state/testing.go",
          "nomad/structs/csi.go||nomad/structs/csi.go",
          "nomad/structs/structs.go||nomad/structs/structs.go",
          "nomad/system_endpoint_test.go||nomad/system_endpoint_test.go",
          "nomad/timetable.go||nomad/timetable.go",
          "nomad/timetable_test.go||nomad/timetable_test.go",
          "nomad/volumewatcher/volumes_watcher_test.go||nomad/volumewatcher/volumes_watcher_test.go",
          "scheduler/reconcile.go||scheduler/reconcile.go",
          "scheduler/reconcile_test.go||scheduler/reconcile_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ],
          "candidate": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ]
        }
      },
      "candidate_diff": {
        "api/csi.go||api/csi.go": [
          "File: api/csi.go -> api/csi.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:  CreateIndex uint64",
          "352:  ModifyIndex uint64",
          "355:  ExtraKeysHCL []string `hcl1:\",unusedKeys\" json:\"-\"`",
          "356: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:  CreateTime int64",
          "357:  ModifyTime int64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:  CreateIndex uint64",
          "403:  ModifyIndex uint64",
          "404: }",
          "406: type CSIVolumeListExternalResponse struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:  CreateTime int64",
          "413:  ModifyTime int64",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "543:  NodesExpected       int",
          "544:  CreateIndex         uint64",
          "545:  ModifyIndex         uint64",
          "546: }",
          "548: type CSIPluginListStub struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:  CreateTime int64",
          "560:  ModifyTime int64",
          "",
          "---------------"
        ],
        "api/deployments.go||api/deployments.go": [
          "File: api/deployments.go -> api/deployments.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  CreateIndex uint64",
          "195:  ModifyIndex uint64",
          "196: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:  CreateTime int64",
          "199:  ModifyTime int64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:  Groups []string",
          "264:  WriteRequest",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:  PromotedAt int64",
          "",
          "---------------"
        ],
        "nomad/blocked_evals.go||nomad/blocked_evals.go": [
          "File: nomad/blocked_evals.go -> nomad/blocked_evals.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  jobs map[structs.NamespacedID]string",
          "",
          "[Removed Lines]",
          "67:  unblockIndexes map[string]uint64",
          "",
          "[Added Lines]",
          "67:  unblockIndexes map[string]unblockEvent",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  duplicateCh chan struct{}",
          "84:  stopCh chan struct{}",
          "85: }",
          "88: type capacityUpdate struct {",
          "89:  computedClass string",
          "",
          "[Removed Lines]",
          "81:  timetable *TimeTable",
          "",
          "[Added Lines]",
          "84: type unblockEvent struct {",
          "85:  index     uint64",
          "86:  timestamp time.Time",
          "87: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:   escaped:          make(map[string]wrappedEval),",
          "108:   system:           newSystemEvals(),",
          "109:   jobs:             make(map[structs.NamespacedID]string),",
          "111:   capacityChangeCh: make(chan *capacityUpdate, unblockBuffer),",
          "112:   duplicateCh:      make(chan struct{}, 1),",
          "113:   stopCh:           make(chan struct{}),",
          "",
          "[Removed Lines]",
          "110:   unblockIndexes:   make(map[string]uint64),",
          "",
          "[Added Lines]",
          "112:   unblockIndexes:   make(map[string]unblockEvent),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:  }",
          "144: }",
          "154: func (b *BlockedEvals) Block(eval *structs.Evaluation) {",
          "",
          "[Removed Lines]",
          "146: func (b *BlockedEvals) SetTimetable(timetable *TimeTable) {",
          "147:  b.l.Lock()",
          "148:  b.timetable = timetable",
          "149:  b.l.Unlock()",
          "150: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "304: func (b *BlockedEvals) missedUnblock(eval *structs.Evaluation) bool {",
          "305:  var max uint64 = 0",
          "310:   }",
          "",
          "[Removed Lines]",
          "306:  for id, index := range b.unblockIndexes {",
          "308:   if max < index {",
          "309:    max = index",
          "",
          "[Added Lines]",
          "302:  for id, u := range b.unblockIndexes {",
          "304:   if max < u.index {",
          "305:    max = u.index",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:    if eval.QuotaLimitReached != id {",
          "317:     continue",
          "321:     return true",
          "",
          "[Removed Lines]",
          "318:    } else if eval.SnapshotIndex < index {",
          "",
          "[Added Lines]",
          "314:    } else if eval.SnapshotIndex < u.index {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326:   }",
          "328:   elig, ok := eval.ClassEligibility[id]",
          "",
          "[Removed Lines]",
          "329:   if !ok && eval.SnapshotIndex < index {",
          "",
          "[Added Lines]",
          "325:   if !ok && eval.SnapshotIndex < u.index {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "339:    return true",
          "340:   }",
          "341:  }",
          "",
          "[Removed Lines]",
          "338:   if elig && eval.SnapshotIndex < index {",
          "",
          "[Added Lines]",
          "334:   if elig && eval.SnapshotIndex < u.index {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "421:  ch := b.capacityChangeCh",
          "",
          "[Removed Lines]",
          "418:  b.unblockIndexes[computedClass] = index",
          "",
          "[Added Lines]",
          "414:  b.unblockIndexes[computedClass] = unblockEvent{index, time.Now()}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "454:  ch := b.capacityChangeCh",
          "455:  done := b.stopCh",
          "456:  b.l.Unlock()",
          "",
          "[Removed Lines]",
          "453:  b.unblockIndexes[quota] = index",
          "",
          "[Added Lines]",
          "449:  b.unblockIndexes[quota] = unblockEvent{index, time.Now()}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "482:  if quota != \"\" {",
          "484:  }",
          "",
          "[Removed Lines]",
          "483:   b.unblockIndexes[quota] = index",
          "485:  b.unblockIndexes[class] = index",
          "",
          "[Added Lines]",
          "478:  now := time.Now()",
          "480:   b.unblockIndexes[quota] = unblockEvent{index, now}",
          "482:  b.unblockIndexes[class] = unblockEvent{index, now}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "699:  b.captured = make(map[string]wrappedEval)",
          "700:  b.escaped = make(map[string]wrappedEval)",
          "701:  b.jobs = make(map[structs.NamespacedID]string)",
          "704:  b.duplicates = nil",
          "705:  b.capacityChangeCh = make(chan *capacityUpdate, unblockBuffer)",
          "706:  b.stopCh = make(chan struct{})",
          "",
          "[Removed Lines]",
          "702:  b.unblockIndexes = make(map[string]uint64)",
          "703:  b.timetable = nil",
          "",
          "[Added Lines]",
          "699:  b.unblockIndexes = make(map[string]unblockEvent)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "781: }",
          "785: func (b *BlockedEvals) pruneUnblockIndexes(cutoff time.Time) {",
          "786:  b.l.Lock()",
          "787:  defer b.l.Unlock()",
          "796:    delete(b.unblockIndexes, key)",
          "797:   }",
          "798:  }",
          "",
          "[Removed Lines]",
          "789:  if b.timetable == nil {",
          "790:   return",
          "791:  }",
          "793:  oldThreshold := b.timetable.NearestIndex(cutoff)",
          "794:  for key, index := range b.unblockIndexes {",
          "795:   if index < oldThreshold {",
          "",
          "[Added Lines]",
          "785:  for key, u := range b.unblockIndexes {",
          "786:   if u.timestamp.Before(cutoff) {",
          "",
          "---------------"
        ],
        "nomad/core_sched.go||nomad/core_sched.go": [
          "File: nomad/core_sched.go -> nomad/core_sched.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"context\"",
          "8:  \"encoding/json\"",
          "9:  \"fmt\"",
          "11:  \"strings\"",
          "12:  \"time\"",
          "",
          "[Removed Lines]",
          "10:  \"math\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  srv    *Server",
          "29:  snap   *state.StateSnapshot",
          "30:  logger log.Logger",
          "31: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:  customJobGCThreshold                time.Duration",
          "34:  customEvalGCThreshold               time.Duration",
          "35:  customBatchEvalGCThreshold          time.Duration",
          "36:  customNodeGCThreshold               time.Duration",
          "37:  customDeploymentGCThreshold         time.Duration",
          "38:  customCSIVolumeClaimGCThreshold     time.Duration",
          "39:  customCSIPluginGCThreshold          time.Duration",
          "40:  customACLTokenExpirationGCThreshold time.Duration",
          "41:  customRootKeyGCThreshold            time.Duration",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:  job := strings.Split(eval.JobID, \":\") // extra data can be smuggled in w/ JobID",
          "46:  switch job[0] {",
          "47:  case structs.CoreJobEvalGC:",
          "49:  case structs.CoreJobNodeGC:",
          "50:   return c.nodeGC(eval)",
          "51:  case structs.CoreJobJobGC:",
          "52:   return c.jobGC(eval)",
          "53:  case structs.CoreJobDeploymentGC:",
          "55:  case structs.CoreJobCSIVolumeClaimGC:",
          "56:   return c.csiVolumeClaimGC(eval)",
          "57:  case structs.CoreJobCSIPluginGC:",
          "",
          "[Removed Lines]",
          "48:   return c.evalGC(eval)",
          "54:   return c.deploymentGC(eval)",
          "",
          "[Added Lines]",
          "59:   return c.evalGC()",
          "65:   return c.deploymentGC()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:  if err := c.jobGC(eval); err != nil {",
          "79:   return err",
          "80:  }",
          "82:   return err",
          "83:  }",
          "85:   return err",
          "86:  }",
          "87:  if err := c.csiPluginGC(eval); err != nil {",
          "",
          "[Removed Lines]",
          "81:  if err := c.evalGC(eval); err != nil {",
          "84:  if err := c.deploymentGC(eval); err != nil {",
          "",
          "[Added Lines]",
          "92:  if err := c.evalGC(); err != nil {",
          "95:  if err := c.deploymentGC(); err != nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:   return err",
          "117:  }",
          "123:  var gcAlloc, gcEval []string",
          "",
          "[Removed Lines]",
          "119:  oldThreshold := c.getThreshold(eval, \"job\",",
          "120:   \"job_gc_threshold\", c.srv.config.JobGCThreshold)",
          "",
          "[Added Lines]",
          "130:  var threshold time.Duration",
          "131:  threshold = c.srv.config.JobGCThreshold",
          "134:  if c.customJobGCThreshold != 0 {",
          "135:   threshold = c.customJobGCThreshold",
          "136:  }",
          "138:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:   job := i.(*structs.Job)",
          "132:    continue",
          "133:   }",
          "",
          "[Removed Lines]",
          "131:   if job.CreateIndex > oldThreshold {",
          "",
          "[Added Lines]",
          "149:   st := time.Unix(0, job.SubmitTime)",
          "150:   if st.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "142:   allEvalsGC := true",
          "143:   var jobAlloc, jobEval []string",
          "144:   for _, eval := range evals {",
          "146:    if err != nil {",
          "147:     continue OUTER",
          "148:    } else if gc {",
          "",
          "[Removed Lines]",
          "145:    gc, allocs, err := c.gcEval(eval, oldThreshold, true)",
          "",
          "[Added Lines]",
          "164:    gc, allocs, err := c.gcEval(eval, cutoffTime, true)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244: }",
          "249:  ws := memdb.NewWatchSet()",
          "250:  iter, err := c.snap.Evals(ws, false)",
          "",
          "[Removed Lines]",
          "247: func (c *CoreScheduler) evalGC(eval *structs.Evaluation) error {",
          "",
          "[Added Lines]",
          "266: func (c *CoreScheduler) evalGC() error {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "252:   return err",
          "253:  }",
          "261:  var gcAlloc, gcEval []string",
          "262:  for raw := iter.Next(); raw != nil; raw = iter.Next() {",
          "263:   eval := raw.(*structs.Evaluation)",
          "266:   if eval.Type == structs.JobTypeBatch {",
          "268:   }",
          "271:   if err != nil {",
          "272:    return err",
          "273:   }",
          "",
          "[Removed Lines]",
          "255:  oldThreshold := c.getThreshold(eval, \"eval\",",
          "256:   \"eval_gc_threshold\", c.srv.config.EvalGCThreshold)",
          "257:  batchOldThreshold := c.getThreshold(eval, \"eval\",",
          "258:   \"batch_eval_gc_threshold\", c.srv.config.BatchEvalGCThreshold)",
          "265:   gcThreshold := oldThreshold",
          "267:    gcThreshold = batchOldThreshold",
          "270:   gc, allocs, err := c.gcEval(eval, gcThreshold, false)",
          "",
          "[Added Lines]",
          "274:  var threshold, batchThreshold time.Duration",
          "275:  threshold = c.srv.config.EvalGCThreshold",
          "276:  batchThreshold = c.srv.config.BatchEvalGCThreshold",
          "279:  if c.customEvalGCThreshold != 0 {",
          "280:   threshold = c.customEvalGCThreshold",
          "281:  }",
          "282:  if c.customBatchEvalGCThreshold != 0 {",
          "283:   batchThreshold = c.customBatchEvalGCThreshold",
          "284:  }",
          "286:  cutoffTime := c.getCutoffTime(threshold)",
          "287:  batchCutoffTime := c.getCutoffTime(batchThreshold)",
          "294:   gcCutoffTime := cutoffTime",
          "296:    gcCutoffTime = batchCutoffTime",
          "299:   gc, allocs, err := c.gcEval(eval, gcCutoffTime, false)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "288:  return c.evalReap(gcEval, gcAlloc)",
          "289: }",
          "297:  bool, []string, error) {",
          "300:   return false, nil, nil",
          "301:  }",
          "",
          "[Removed Lines]",
          "296: func (c *CoreScheduler) gcEval(eval *structs.Evaluation, thresholdIndex uint64, allowBatch bool) (",
          "299:  if !eval.TerminalStatus() || eval.ModifyIndex > thresholdIndex {",
          "",
          "[Added Lines]",
          "324: func (c *CoreScheduler) gcEval(eval *structs.Evaluation, cutoffTime time.Time, allowBatch bool) (",
          "328:  mt := time.Unix(0, eval.ModifyTime).UTC()",
          "329:  if !eval.TerminalStatus() || mt.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "336:   collect := job == nil || job.Status == structs.JobStatusDead && (job.Stop || allowBatch)",
          "337:   if !collect {",
          "339:    gcEval := (len(oldAllocs) == len(allocs))",
          "340:    return gcEval, oldAllocs, nil",
          "341:   }",
          "",
          "[Removed Lines]",
          "338:    oldAllocs := olderVersionTerminalAllocs(allocs, job, thresholdIndex)",
          "",
          "[Added Lines]",
          "368:    oldAllocs := olderVersionTerminalAllocs(allocs, job, cutoffTime)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "345:  gcEval := true",
          "346:  var gcAllocIDs []string",
          "347:  for _, alloc := range allocs {",
          "351:    gcEval = false",
          "",
          "[Removed Lines]",
          "348:   if !allocGCEligible(alloc, job, time.Now(), thresholdIndex) {",
          "",
          "[Added Lines]",
          "378:   if !allocGCEligible(alloc, job, time.Now(), cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "358:  return gcEval, gcAllocIDs, nil",
          "359: }",
          "364:  var ret []string",
          "365:  for _, alloc := range allocs {",
          "367:    ret = append(ret, alloc.ID)",
          "368:   }",
          "369:  }",
          "",
          "[Removed Lines]",
          "363: func olderVersionTerminalAllocs(allocs []*structs.Allocation, job *structs.Job, thresholdIndex uint64) []string {",
          "366:   if alloc.CreateIndex < job.JobModifyIndex && alloc.ModifyIndex < thresholdIndex && alloc.TerminalStatus() {",
          "",
          "[Added Lines]",
          "393: func olderVersionTerminalAllocs(allocs []*structs.Allocation, job *structs.Job, cutoffTime time.Time) []string {",
          "396:   mi := time.Unix(0, alloc.ModifyTime)",
          "397:   if alloc.CreateIndex < job.JobModifyIndex && mi.Before(cutoffTime) && alloc.TerminalStatus() {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "439:   return err",
          "440:  }",
          "446:  var gcNode []string",
          "",
          "[Removed Lines]",
          "442:  oldThreshold := c.getThreshold(eval, \"node\",",
          "443:   \"node_gc_threshold\", c.srv.config.NodeGCThreshold)",
          "",
          "[Added Lines]",
          "473:  var threshold time.Duration",
          "474:  threshold = c.srv.config.NodeGCThreshold",
          "477:  if c.customNodeGCThreshold != 0 {",
          "478:   threshold = c.customNodeGCThreshold",
          "479:  }",
          "480:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "453:   node := raw.(*structs.Node)",
          "457:    continue",
          "458:   }",
          "",
          "[Removed Lines]",
          "456:   if !node.TerminalStatus() || node.ModifyIndex > oldThreshold {",
          "",
          "[Added Lines]",
          "493:   st := time.Unix(node.StatusUpdatedAt, 0)",
          "494:   if !node.TerminalStatus() || st.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "528: }",
          "533:  ws := memdb.NewWatchSet()",
          "534:  iter, err := c.snap.Deployments(ws, state.SortDefault)",
          "",
          "[Removed Lines]",
          "531: func (c *CoreScheduler) deploymentGC(eval *structs.Evaluation) error {",
          "",
          "[Added Lines]",
          "569: func (c *CoreScheduler) deploymentGC() error {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "536:   return err",
          "537:  }",
          "543:  var gcDeployment []string",
          "",
          "[Removed Lines]",
          "539:  oldThreshold := c.getThreshold(eval, \"deployment\",",
          "540:   \"deployment_gc_threshold\", c.srv.config.DeploymentGCThreshold)",
          "",
          "[Added Lines]",
          "577:  var threshold time.Duration",
          "578:  threshold = c.srv.config.DeploymentGCThreshold",
          "581:  if c.customDeploymentGCThreshold != 0 {",
          "582:   threshold = c.customDeploymentGCThreshold",
          "583:  }",
          "584:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "551:   deploy := raw.(*structs.Deployment)",
          "555:    continue",
          "556:   }",
          "",
          "[Removed Lines]",
          "554:   if deploy.Active() || deploy.ModifyIndex > oldThreshold {",
          "",
          "[Added Lines]",
          "598:   mt := time.Unix(0, deploy.ModifyTime)",
          "599:   if deploy.Active() || mt.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "634:   return false",
          "635:  }",
          "",
          "[Removed Lines]",
          "631: func allocGCEligible(a *structs.Allocation, job *structs.Job, gcTime time.Time, thresholdIndex uint64) bool {",
          "633:  if !a.TerminalStatus() || a.ModifyIndex > thresholdIndex {",
          "",
          "[Added Lines]",
          "676: func allocGCEligible(a *structs.Allocation, job *structs.Job, gcTime, cutoffTime time.Time) bool {",
          "678:  mt := time.Unix(0, a.ModifyTime)",
          "679:  if !a.TerminalStatus() || mt.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "728:   return err",
          "729:  }",
          "734:  for i := iter.Next(); i != nil; i = iter.Next() {",
          "735:   vol := i.(*structs.CSIVolume)",
          "739:    continue",
          "740:   }",
          "",
          "[Removed Lines]",
          "731:  oldThreshold := c.getThreshold(eval, \"CSI volume claim\",",
          "732:   \"csi_volume_claim_gc_threshold\", c.srv.config.CSIVolumeClaimGCThreshold)",
          "738:   if vol.CreateIndex > oldThreshold {",
          "",
          "[Added Lines]",
          "777:  var threshold time.Duration",
          "778:  threshold = c.srv.config.CSIVolumeClaimGCThreshold",
          "781:  if c.customCSIVolumeClaimGCThreshold != 0 {",
          "782:   threshold = c.customCSIVolumeClaimGCThreshold",
          "783:  }",
          "784:  cutoffTime := c.getCutoffTime(threshold)",
          "790:   mt := time.Unix(0, vol.ModifyTime)",
          "791:   if mt.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "768:   return err",
          "769:  }",
          "774:  for i := iter.Next(); i != nil; i = iter.Next() {",
          "775:   plugin := i.(*structs.CSIPlugin)",
          "779:    continue",
          "780:   }",
          "",
          "[Removed Lines]",
          "771:  oldThreshold := c.getThreshold(eval, \"CSI plugin\",",
          "772:   \"csi_plugin_gc_threshold\", c.srv.config.CSIPluginGCThreshold)",
          "778:   if plugin.CreateIndex > oldThreshold {",
          "",
          "[Added Lines]",
          "824:  var threshold time.Duration",
          "825:  threshold = c.srv.config.CSIPluginGCThreshold",
          "828:  if c.customCSIPluginGCThreshold != 0 {",
          "829:   threshold = c.customCSIPluginGCThreshold",
          "830:  }",
          "831:  cutoffTime := c.getCutoffTime(threshold)",
          "837:   mt := time.Unix(0, plugin.ModifyTime)",
          "838:   if mt.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "829:   return nil",
          "830:  }",
          "842:  expiredIter, err := c.snap.ACLTokensByExpired(global)",
          "843:  if err != nil {",
          "",
          "[Removed Lines]",
          "834:  tokenScope := \"local\"",
          "835:  if global {",
          "836:   tokenScope = \"global\"",
          "837:  }",
          "839:  expiryThresholdIdx := c.getThreshold(eval, tokenScope+\" expired ACL tokens\",",
          "840:   \"acl_token_expiration_gc_threshold\", c.srv.config.ACLTokenExpirationGCThreshold)",
          "",
          "[Added Lines]",
          "892:  var threshold time.Duration",
          "893:  threshold = c.srv.config.ACLTokenExpirationGCThreshold",
          "896:  if c.customACLTokenExpirationGCThreshold != 0 {",
          "897:   threshold = c.customACLTokenExpirationGCThreshold",
          "898:  }",
          "899:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "872:    continue",
          "873:   }",
          "",
          "[Removed Lines]",
          "871:   if token.CreateIndex > expiryThresholdIdx {",
          "",
          "[Added Lines]",
          "930:   if token.CreateTime.After(cutoffTime) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "944:   return err",
          "945:  }",
          "950:  rotationThreshold := now.Add(-1 *",
          "953:  for {",
          "954:   raw := iter.Next()",
          "",
          "[Removed Lines]",
          "951:   (c.srv.config.RootKeyRotationThreshold + c.srv.config.RootKeyGCThreshold))",
          "",
          "[Added Lines]",
          "1006:  var threshold time.Duration",
          "1007:  threshold = c.srv.config.RootKeyGCThreshold",
          "1010:  if c.customRootKeyGCThreshold != 0 {",
          "1011:   threshold = c.customRootKeyGCThreshold",
          "1012:  }",
          "1018:   (c.srv.config.RootKeyRotationThreshold + threshold))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1289:  return nil",
          "1290: }",
          "1314: }",
          "",
          "[Removed Lines]",
          "1294: func (c *CoreScheduler) getThreshold(eval *structs.Evaluation, objectName, configName string, configThreshold time.Duration) uint64 {",
          "1295:  var oldThreshold uint64",
          "1296:  if eval.JobID == structs.CoreJobForceGC {",
          "1299:   oldThreshold = math.MaxUint64",
          "1300:   c.logger.Debug(fmt.Sprintf(\"forced %s GC\", objectName))",
          "1301:  } else {",
          "1305:   tt := c.srv.fsm.TimeTable()",
          "1306:   cutoff := time.Now().UTC().Add(-1 * configThreshold)",
          "1307:   oldThreshold = tt.NearestIndex(cutoff)",
          "1308:   c.logger.Debug(",
          "1309:    fmt.Sprintf(\"%s GC scanning before cutoff index\", objectName),",
          "1310:    \"index\", oldThreshold,",
          "1311:    configName, configThreshold)",
          "1312:  }",
          "1313:  return oldThreshold",
          "",
          "[Added Lines]",
          "1360: func (c *CoreScheduler) getCutoffTime(configThreshold time.Duration) time.Time {",
          "1361:  return time.Now().UTC().Add(-1 * configThreshold)",
          "",
          "---------------"
        ],
        "nomad/core_sched_test.go||nomad/core_sched_test.go": [
          "File: nomad/core_sched_test.go -> nomad/core_sched_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  defer cleanupS1()",
          "32:  testutil.WaitForLeader(t, s1.RPC)",
          "38:  store := s1.fsm.State()",
          "39:  eval := mock.Eval()",
          "40:  eval.Status = structs.EvalStatusFailed",
          "42:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval}))",
          "",
          "[Removed Lines]",
          "35:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "41:  store.UpsertJobSummary(999, mock.JobSummary(eval.JobID))",
          "",
          "[Added Lines]",
          "37:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "38:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "40:  must.NoError(t, store.UpsertJobSummary(999, mock.JobSummary(eval.JobID)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  alloc2.ClientStatus = structs.AllocClientStatusLost",
          "65:  alloc2.JobID = eval.JobID",
          "66:  alloc2.TaskGroup = job.TaskGroups[0].Name",
          "70:  service := &structs.ServiceRegistration{",
          "",
          "[Removed Lines]",
          "67:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc, alloc2}))",
          "",
          "[Added Lines]",
          "66:  must.NoError(t, store.UpsertAllocs(",
          "67:   structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc, alloc2}))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:  must.NoError(t, store.UpsertServiceRegistrations(",
          "82:   structs.MsgTypeTestSetup, 1002, []*structs.ServiceRegistration{service}))",
          "89:  snap, err := store.Snapshot()",
          "90:  must.NoError(t, err)",
          "",
          "[Removed Lines]",
          "85:  tt := s1.fsm.TimeTable()",
          "86:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.EvalGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:  defer cleanupS1()",
          "122:  testutil.WaitForLeader(t, s1.RPC)",
          "128:  store := s1.fsm.State()",
          "129:  eval := mock.Eval()",
          "130:  eval.Status = structs.EvalStatusFailed",
          "136:  eval2 := mock.Eval()",
          "137:  eval2.JobID = eval.JobID",
          "143:  job := mock.Job()",
          "144:  job.ID = eval.JobID",
          "150:  alloc := mock.Alloc()",
          "",
          "[Removed Lines]",
          "125:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "131:  store.UpsertJobSummary(999, mock.JobSummary(eval.JobID))",
          "132:  err := store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval})",
          "133:  require.Nil(t, err)",
          "138:  store.UpsertJobSummary(999, mock.JobSummary(eval2.JobID))",
          "139:  err = store.UpsertEvals(structs.MsgTypeTestSetup, 1003, []*structs.Evaluation{eval2})",
          "140:  require.Nil(t, err)",
          "146:  err = store.UpsertJob(structs.MsgTypeTestSetup, 1001, nil, job)",
          "147:  require.Nil(t, err)",
          "",
          "[Added Lines]",
          "123:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "124:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "126:  must.NoError(t, store.UpsertJobSummary(999, mock.JobSummary(eval.JobID)))",
          "127:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval}))",
          "132:  eval2.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "133:  eval2.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "134:  must.NoError(t, store.UpsertJobSummary(999, mock.JobSummary(eval2.JobID)))",
          "135:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1003, []*structs.Evaluation{eval2}))",
          "141:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, 1001, nil, job))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:  alloc.RescheduleTracker = &structs.RescheduleTracker{",
          "159:   Events: []*structs.RescheduleEvent{",
          "160:    {",
          "162:     PrevNodeID:     uuid.Generate(),",
          "163:     PrevAllocID:    uuid.Generate(),",
          "164:    },",
          "",
          "[Removed Lines]",
          "161:     RescheduleTime: time.Now().Add(-1 * time.Hour).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "155:     RescheduleTime: time.Now().Add(-time.Hour).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "181:    },",
          "182:   },",
          "183:  }",
          "192:  snap, err := store.Snapshot()",
          "196:  core := NewCoreScheduler(s1, snap)",
          "199:  gc := s1.coreJobEval(structs.CoreJobEvalGC, 2000)",
          "204:  ws := memdb.NewWatchSet()",
          "205:  out, err := store.EvalByID(ws, eval.ID)",
          "210:  outA, err := store.AllocByID(ws, alloc.ID)",
          "214:  outA2, err := store.AllocByID(ws, alloc2.ID)",
          "218: }",
          "",
          "[Removed Lines]",
          "184:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc, alloc2})",
          "185:  require.Nil(t, err)",
          "188:  tt := s1.fsm.TimeTable()",
          "189:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.EvalGCThreshold))",
          "193:  if err != nil {",
          "194:   t.Fatalf(\"err: %v\", err)",
          "195:  }",
          "200:  err = core.Process(gc)",
          "201:  require.Nil(t, err)",
          "206:  require.Nil(t, err)",
          "207:  require.NotNil(t, out)",
          "208:  require.Equal(t, eval.ID, out.ID)",
          "211:  require.Nil(t, err)",
          "212:  require.Nil(t, outA)",
          "215:  require.Nil(t, err)",
          "216:  require.Equal(t, alloc2.ID, outA2.ID)",
          "",
          "[Added Lines]",
          "178:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc, alloc2}))",
          "182:  must.NoError(t, err)",
          "187:  must.NoError(t, core.Process(gc))",
          "192:  must.Nil(t, err)",
          "193:  must.NotNil(t, out)",
          "194:  must.Eq(t, eval.ID, out.ID)",
          "197:  must.Nil(t, err)",
          "198:  must.Nil(t, outA)",
          "201:  must.Nil(t, err)",
          "202:  must.Eq(t, alloc2.ID, outA2.ID)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225:  defer cleanupS1()",
          "226:  testutil.WaitForLeader(t, s1.RPC)",
          "232:  store := s1.fsm.State()",
          "233:  eval := mock.Eval()",
          "234:  eval.Status = structs.EvalStatusFailed",
          "240:  job := mock.Job()",
          "241:  job.ID = eval.JobID",
          "242:  job.Stop = true",
          "248:  alloc := mock.Alloc()",
          "",
          "[Removed Lines]",
          "229:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "235:  store.UpsertJobSummary(999, mock.JobSummary(eval.JobID))",
          "236:  err := store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval})",
          "237:  require.Nil(t, err)",
          "244:  err = store.UpsertJob(structs.MsgTypeTestSetup, 1001, nil, job)",
          "245:  require.Nil(t, err)",
          "",
          "[Added Lines]",
          "218:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "219:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "220:  must.NoError(t, store.UpsertJobSummary(999, mock.JobSummary(eval.JobID)))",
          "221:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval}))",
          "228:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, 1001, nil, job))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:    },",
          "261:   },",
          "262:  }",
          "271:  snap, err := store.Snapshot()",
          "",
          "[Removed Lines]",
          "263:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc})",
          "264:  require.Nil(t, err)",
          "267:  tt := s1.fsm.TimeTable()",
          "268:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.EvalGCThreshold))",
          "",
          "[Added Lines]",
          "246:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc}))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "278:  gc := s1.coreJobEval(structs.CoreJobEvalGC, 2000)",
          "283:  ws := memdb.NewWatchSet()",
          "284:  out, err := store.EvalByID(ws, eval.ID)",
          "289:  outA, err := store.AllocByID(ws, alloc.ID)",
          "293: }",
          "",
          "[Removed Lines]",
          "279:  err = core.Process(gc)",
          "280:  require.Nil(t, err)",
          "285:  require.Nil(t, err)",
          "286:  require.Nil(t, out)",
          "290:  require.Nil(t, err)",
          "291:  require.Nil(t, outA)",
          "",
          "[Added Lines]",
          "257:  must.NoError(t, core.Process(gc))",
          "262:  must.Nil(t, err)",
          "263:  must.Nil(t, out)",
          "267:  must.Nil(t, err)",
          "268:  must.Nil(t, outA)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "299:  s1, cleanupS1 := TestServer(t, func(c *Config) {",
          "304:  })",
          "305:  defer cleanupS1()",
          "306:  testutil.WaitForLeader(t, s1.RPC)",
          "311:  var jobModifyIdx uint64 = 1000",
          "",
          "[Removed Lines]",
          "302:   c.BatchEvalGCThreshold = time.Hour",
          "303:   c.EvalGCThreshold = 2 * time.Hour",
          "309:  s1.fsm.timetable.table = make([]TimeTableEntry, 2, 10)",
          "",
          "[Added Lines]",
          "278:   c.BatchEvalGCThreshold = 2 * time.Hour",
          "279:   c.EvalGCThreshold = 4 * time.Hour",
          "280:   c.JobGCThreshold = 2 * time.Hour",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "320:   Attempts: 0,",
          "321:   Interval: 0 * time.Second,",
          "322:  }",
          "326:  stoppedJobEval := mock.Eval()",
          "327:  stoppedJobEval.Status = structs.EvalStatusComplete",
          "328:  stoppedJobEval.Type = structs.JobTypeBatch",
          "329:  stoppedJobEval.JobID = stoppedJob.ID",
          "333:  stoppedJobStoppedAlloc := mock.Alloc()",
          "334:  stoppedJobStoppedAlloc.Job = stoppedJob",
          "",
          "[Removed Lines]",
          "323:  err := store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx+1, nil, stoppedJob)",
          "324:  must.NoError(t, err)",
          "330:  err = store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+2, []*structs.Evaluation{stoppedJobEval})",
          "331:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "297:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx+1, nil, stoppedJob))",
          "303:  stoppedJobEval.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano() // set to less than initial BatchEvalGCThreshold",
          "304:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+2, []*structs.Evaluation{stoppedJobEval}))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "336:  stoppedJobStoppedAlloc.EvalID = stoppedJobEval.ID",
          "337:  stoppedJobStoppedAlloc.DesiredStatus = structs.AllocDesiredStatusStop",
          "338:  stoppedJobStoppedAlloc.ClientStatus = structs.AllocClientStatusFailed",
          "340:  stoppedJobLostAlloc := mock.Alloc()",
          "341:  stoppedJobLostAlloc.Job = stoppedJob",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:  stoppedJobStoppedAlloc.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "343:  stoppedJobLostAlloc.EvalID = stoppedJobEval.ID",
          "344:  stoppedJobLostAlloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "345:  stoppedJobLostAlloc.ClientStatus = structs.AllocClientStatusLost",
          "",
          "[Removed Lines]",
          "347:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx+3, []*structs.Allocation{stoppedJobStoppedAlloc, stoppedJobLostAlloc})",
          "348:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "320:  stoppedJobLostAlloc.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano()",
          "322:  must.NoError(t, store.UpsertAllocs(",
          "323:   structs.MsgTypeTestSetup, jobModifyIdx+3,",
          "324:   []*structs.Allocation{stoppedJobStoppedAlloc, stoppedJobLostAlloc}))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "354:  deadJob := mock.Job()",
          "355:  deadJob.Type = structs.JobTypeBatch",
          "356:  deadJob.Status = structs.JobStatusDead",
          "360:  deadJobEval := mock.Eval()",
          "361:  deadJobEval.Status = structs.EvalStatusComplete",
          "362:  deadJobEval.Type = structs.JobTypeBatch",
          "363:  deadJobEval.JobID = deadJob.ID",
          "367:  stoppedAlloc := mock.Alloc()",
          "368:  stoppedAlloc.Job = deadJob",
          "",
          "[Removed Lines]",
          "357:  err = store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx, nil, deadJob)",
          "358:  must.NoError(t, err)",
          "364:  err = store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+1, []*structs.Evaluation{deadJobEval})",
          "365:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "333:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx, nil, deadJob))",
          "339:  deadJobEval.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano() // set to less than initial BatchEvalGCThreshold",
          "340:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+1, []*structs.Evaluation{deadJobEval}))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "370:  stoppedAlloc.EvalID = deadJobEval.ID",
          "371:  stoppedAlloc.DesiredStatus = structs.AllocDesiredStatusStop",
          "372:  stoppedAlloc.ClientStatus = structs.AllocClientStatusFailed",
          "374:  lostAlloc := mock.Alloc()",
          "375:  lostAlloc.Job = deadJob",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:  stoppedAlloc.ModifyTime = time.Now().UnixNano()",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "377:  lostAlloc.EvalID = deadJobEval.ID",
          "378:  lostAlloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "379:  lostAlloc.ClientStatus = structs.AllocClientStatusLost",
          "",
          "[Removed Lines]",
          "381:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx+2, []*structs.Allocation{stoppedAlloc, lostAlloc})",
          "382:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "356:  lostAlloc.ModifyTime = time.Now().UnixNano()",
          "358:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx+2, []*structs.Allocation{stoppedAlloc, lostAlloc}))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "392:  activeJob := mock.Job()",
          "393:  activeJob.Type = structs.JobTypeBatch",
          "394:  activeJob.Status = structs.JobStatusDead",
          "398:  activeJobEval := mock.Eval()",
          "399:  activeJobEval.Status = structs.EvalStatusComplete",
          "400:  activeJobEval.Type = structs.JobTypeBatch",
          "401:  activeJobEval.JobID = activeJob.ID",
          "405:  activeJobRunningAlloc := mock.Alloc()",
          "406:  activeJobRunningAlloc.Job = activeJob",
          "",
          "[Removed Lines]",
          "395:  err = store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx, nil, activeJob)",
          "396:  must.NoError(t, err)",
          "402:  err = store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+1, []*structs.Evaluation{activeJobEval})",
          "403:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "371:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx, nil, activeJob))",
          "377:  activeJobEval.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano() // set to less than initial BatchEvalGCThreshold",
          "378:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+1, []*structs.Evaluation{activeJobEval}))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "408:  activeJobRunningAlloc.EvalID = activeJobEval.ID",
          "409:  activeJobRunningAlloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "410:  activeJobRunningAlloc.ClientStatus = structs.AllocClientStatusRunning",
          "412:  activeJobLostAlloc := mock.Alloc()",
          "413:  activeJobLostAlloc.Job = activeJob",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:  activeJobRunningAlloc.ModifyTime = time.Now().UnixNano()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "415:  activeJobLostAlloc.EvalID = activeJobEval.ID",
          "416:  activeJobLostAlloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "417:  activeJobLostAlloc.ClientStatus = structs.AllocClientStatusLost",
          "422:  activeJobCompleteEval := mock.Eval()",
          "423:  activeJobCompleteEval.Status = structs.EvalStatusComplete",
          "424:  activeJobCompleteEval.Type = structs.JobTypeBatch",
          "425:  activeJobCompleteEval.JobID = activeJob.ID",
          "429:  activeJobCompletedEvalCompletedAlloc := mock.Alloc()",
          "430:  activeJobCompletedEvalCompletedAlloc.Job = activeJob",
          "",
          "[Removed Lines]",
          "419:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Allocation{activeJobRunningAlloc, activeJobLostAlloc})",
          "420:  must.NoError(t, err)",
          "426:  err = store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Evaluation{activeJobCompleteEval})",
          "427:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "394:  activeJobLostAlloc.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano()",
          "396:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Allocation{activeJobRunningAlloc, activeJobLostAlloc}))",
          "402:  activeJobCompleteEval.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano() // set to less than initial BatchEvalGCThreshold",
          "404:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Evaluation{activeJobCompleteEval}))",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "432:  activeJobCompletedEvalCompletedAlloc.EvalID = activeJobCompleteEval.ID",
          "433:  activeJobCompletedEvalCompletedAlloc.DesiredStatus = structs.AllocDesiredStatusStop",
          "434:  activeJobCompletedEvalCompletedAlloc.ClientStatus = structs.AllocClientStatusComplete",
          "440:  purgedJob := mock.Job()",
          "441:  purgedJob.Type = structs.JobTypeBatch",
          "442:  purgedJob.Status = structs.JobStatusDead",
          "446:  purgedJobEval := mock.Eval()",
          "447:  purgedJobEval.Status = structs.EvalStatusComplete",
          "448:  purgedJobEval.Type = structs.JobTypeBatch",
          "449:  purgedJobEval.JobID = purgedJob.ID",
          "453:  purgedJobCompleteAlloc := mock.Alloc()",
          "454:  purgedJobCompleteAlloc.Job = purgedJob",
          "",
          "[Removed Lines]",
          "436:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Allocation{activeJobCompletedEvalCompletedAlloc})",
          "437:  must.NoError(t, err)",
          "443:  err = store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx, nil, purgedJob)",
          "444:  must.NoError(t, err)",
          "450:  err = store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+1, []*structs.Evaluation{purgedJobEval})",
          "451:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "412:  activeJobCompletedEvalCompletedAlloc.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano()",
          "414:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Allocation{activeJobCompletedEvalCompletedAlloc}))",
          "420:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, jobModifyIdx, nil, purgedJob))",
          "426:  purgedJobEval.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano() // set to less than initial BatchEvalGCThreshold",
          "427:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx+1, []*structs.Evaluation{purgedJobEval}))",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "456:  purgedJobCompleteAlloc.EvalID = purgedJobEval.ID",
          "457:  purgedJobCompleteAlloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "458:  purgedJobCompleteAlloc.ClientStatus = structs.AllocClientStatusLost",
          "463:  purgedJobCompleteEval := mock.Eval()",
          "464:  purgedJobCompleteEval.Status = structs.EvalStatusComplete",
          "465:  purgedJobCompleteEval.Type = structs.JobTypeBatch",
          "466:  purgedJobCompleteEval.JobID = purgedJob.ID",
          "475:  assertCorrectJobEvalAlloc := func(",
          "",
          "[Removed Lines]",
          "460:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Allocation{purgedJobCompleteAlloc})",
          "461:  must.NoError(t, err)",
          "467:  err = store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Evaluation{purgedJobCompleteEval})",
          "468:  must.NoError(t, err)",
          "471:  err = store.DeleteJob(jobModifyIdx, purgedJob.Namespace, purgedJob.ID)",
          "472:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "435:  purgedJobCompleteAlloc.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano()",
          "437:  must.NoError(t, store.UpsertAllocs(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Allocation{purgedJobCompleteAlloc}))",
          "443:  purgedJobCompleteEval.ModifyTime = time.Now().UTC().Add(-1 * time.Hour).UnixNano() // set to less than initial BatchEvalGCThreshold",
          "445:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, jobModifyIdx-1, []*structs.Evaluation{purgedJobCompleteEval}))",
          "448:  must.NoError(t, store.DeleteJob(jobModifyIdx, purgedJob.Namespace, purgedJob.ID))",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "549:   []*structs.Allocation{},",
          "550:  )",
          "586:  gc = s1.coreJobEval(structs.CoreJobEvalGC, jobModifyIdx*2)",
          "",
          "[Removed Lines]",
          "554:  tt := s1.fsm.TimeTable()",
          "555:  tt.Witness(2*jobModifyIdx, time.Now().UTC().Add((-1)*s1.config.BatchEvalGCThreshold/2))",
          "557:  gc = s1.coreJobEval(structs.CoreJobEvalGC, jobModifyIdx*2)",
          "558:  err = core.Process(gc)",
          "559:  must.NoError(t, err)",
          "562:  assertCorrectJobEvalAlloc(",
          "563:   memdb.NewWatchSet(),",
          "564:   []*structs.Job{deadJob, activeJob, stoppedJob},",
          "565:   []*structs.Job{},",
          "566:   []*structs.Evaluation{",
          "567:    deadJobEval,",
          "568:    activeJobEval, activeJobCompleteEval,",
          "569:    stoppedJobEval,",
          "570:    purgedJobEval,",
          "571:   },",
          "572:   []*structs.Evaluation{},",
          "573:   []*structs.Allocation{",
          "574:    stoppedAlloc, lostAlloc,",
          "575:    activeJobRunningAlloc, activeJobLostAlloc, activeJobCompletedEvalCompletedAlloc,",
          "576:    stoppedJobStoppedAlloc, stoppedJobLostAlloc,",
          "577:   },",
          "578:   []*structs.Allocation{},",
          "579:  )",
          "582:  s1.fsm.timetable.table = make([]TimeTableEntry, 2, 10)",
          "583:  tt = s1.fsm.TimeTable()",
          "584:  tt.Witness(2*jobModifyIdx, time.Now().UTC().Add(-1*s1.config.BatchEvalGCThreshold))",
          "587:  err = core.Process(gc)",
          "588:  must.NoError(t, err)",
          "",
          "[Added Lines]",
          "530:  core.(*CoreScheduler).customBatchEvalGCThreshold = time.Minute",
          "533:  must.NoError(t, core.Process(gc))",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "629:  eval := mock.Eval()",
          "630:  eval.JobID = job.ID",
          "631:  eval.Status = structs.EvalStatusComplete",
          "632:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 999, []*structs.Evaluation{eval}))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "578:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "705:  defer cleanupS1()",
          "706:  testutil.WaitForLeader(t, s1.RPC)",
          "712:  store := s1.fsm.State()",
          "713:  eval := mock.Eval()",
          "714:  eval.Status = structs.EvalStatusComplete",
          "715:  store.UpsertJobSummary(999, mock.JobSummary(eval.JobID))",
          "716:  err := store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval})",
          "717:  if err != nil {",
          "",
          "[Removed Lines]",
          "709:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "660:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "661:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "761:  err = store.UpsertJob(structs.MsgTypeTestSetup, 1001, nil, job)",
          "762:  require.Nil(t, err)",
          "769:  snap, err := store.Snapshot()",
          "770:  if err != nil {",
          "",
          "[Removed Lines]",
          "765:  tt := s1.fsm.TimeTable()",
          "766:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.EvalGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "829:    defer cleanup()",
          "830:    testutil.WaitForLeader(t, server.RPC)",
          "836:    store := server.fsm.State()",
          "837:    eval := mock.Eval()",
          "838:    eval.Status = structs.EvalStatusFailed",
          "839:    store.UpsertJobSummary(999, mock.JobSummary(eval.JobID))",
          "840:    err := store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval})",
          "841:    if err != nil {",
          "",
          "[Removed Lines]",
          "833:    server.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "780:    eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "781:    eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "912:    defer cleanup()",
          "913:    testutil.WaitForLeader(t, server.RPC)",
          "919:    store := server.fsm.State()",
          "920:    node := mock.Node()",
          "",
          "[Removed Lines]",
          "916:    server.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "924:     t.Fatalf(\"err: %v\", err)",
          "925:    }",
          "932:    snap, err := store.Snapshot()",
          "933:    if err != nil {",
          "",
          "[Removed Lines]",
          "928:    tt := server.fsm.TimeTable()",
          "929:    tt.Witness(2000, time.Now().UTC().Add(-1*server.config.NodeGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "962:  defer cleanupS1()",
          "963:  testutil.WaitForLeader(t, s1.RPC)",
          "969:  store := s1.fsm.State()",
          "970:  node := mock.Node()",
          "",
          "[Removed Lines]",
          "966:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "982:   t.Fatalf(\"err: %v\", err)",
          "983:  }",
          "990:  snap, err := store.Snapshot()",
          "991:  if err != nil {",
          "",
          "[Removed Lines]",
          "986:  tt := s1.fsm.TimeTable()",
          "987:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.NodeGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1018:  defer cleanupS1()",
          "1019:  testutil.WaitForLeader(t, s1.RPC)",
          "1025:  store := s1.fsm.State()",
          "1026:  node := mock.Node()",
          "",
          "[Removed Lines]",
          "1022:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1040:   t.Fatalf(\"err: %v\", err)",
          "1041:  }",
          "1048:  snap, err := store.Snapshot()",
          "1049:  if err != nil {",
          "",
          "[Removed Lines]",
          "1044:  tt := s1.fsm.TimeTable()",
          "1045:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.NodeGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1076:  defer cleanupS1()",
          "1077:  testutil.WaitForLeader(t, s1.RPC)",
          "1083:  store := s1.fsm.State()",
          "1084:  node := mock.Node()",
          "",
          "[Removed Lines]",
          "1080:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1120:  defer cleanupS1()",
          "1121:  testutil.WaitForLeader(t, s1.RPC)",
          "1127:  store := s1.fsm.State()",
          "1128:  job := mock.Job()",
          "1129:  job.Type = structs.JobTypeBatch",
          "1130:  job.Status = structs.JobStatusDead",
          "1137:  eval := mock.Eval()",
          "1138:  eval.JobID = job.ID",
          "1139:  eval.Status = structs.EvalStatusComplete",
          "1141:  eval2 := mock.Eval()",
          "1142:  eval2.JobID = job.ID",
          "1143:  eval2.Status = structs.EvalStatusPending",
          "1154:  snap, err := store.Snapshot()",
          "1158:  core := NewCoreScheduler(s1, snap)",
          "1161:  gc := s1.coreJobEval(structs.CoreJobJobGC, 2000)",
          "1168:  ws := memdb.NewWatchSet()",
          "1169:  out, err := store.JobByID(ws, job.Namespace, job.ID)",
          "1177:  outE, err := store.EvalByID(ws, eval.ID)",
          "1185:  outE2, err := store.EvalByID(ws, eval2.ID)",
          "1194:  eval2.Status = structs.EvalStatusComplete",
          "1201:  snap, err = store.Snapshot()",
          "1205:  core = NewCoreScheduler(s1, snap)",
          "1208:  gc = s1.coreJobEval(structs.CoreJobJobGC, 2000)",
          "1215:  out, err = store.JobByID(ws, job.Namespace, job.ID)",
          "1223:  outE, err = store.EvalByID(ws, eval.ID)",
          "1231:  outE2, err = store.EvalByID(ws, eval2.ID)",
          "1238: }",
          "1240: func TestCoreScheduler_JobGC_OutstandingAllocs(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1124:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "1131:  err := store.UpsertJob(structs.MsgTypeTestSetup, 1000, nil, job)",
          "1132:  if err != nil {",
          "1133:   t.Fatalf(\"err: %v\", err)",
          "1134:  }",
          "1144:  err = store.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval, eval2})",
          "1145:  if err != nil {",
          "1146:   t.Fatalf(\"err: %v\", err)",
          "1147:  }",
          "1150:  tt := s1.fsm.TimeTable()",
          "1151:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.JobGCThreshold))",
          "1155:  if err != nil {",
          "1156:   t.Fatalf(\"err: %v\", err)",
          "1157:  }",
          "1162:  err = core.Process(gc)",
          "1163:  if err != nil {",
          "1164:   t.Fatalf(\"err: %v\", err)",
          "1165:  }",
          "1170:  if err != nil {",
          "1171:   t.Fatalf(\"err: %v\", err)",
          "1172:  }",
          "1173:  if out == nil {",
          "1174:   t.Fatalf(\"bad: %v\", out)",
          "1175:  }",
          "1178:  if err != nil {",
          "1179:   t.Fatalf(\"err: %v\", err)",
          "1180:  }",
          "1181:  if outE == nil {",
          "1182:   t.Fatalf(\"bad: %v\", outE)",
          "1183:  }",
          "1186:  if err != nil {",
          "1187:   t.Fatalf(\"err: %v\", err)",
          "1188:  }",
          "1189:  if outE2 == nil {",
          "1190:   t.Fatalf(\"bad: %v\", outE2)",
          "1191:  }",
          "1195:  err = store.UpsertEvals(structs.MsgTypeTestSetup, 1003, []*structs.Evaluation{eval2})",
          "1196:  if err != nil {",
          "1197:   t.Fatalf(\"err: %v\", err)",
          "1198:  }",
          "1202:  if err != nil {",
          "1203:   t.Fatalf(\"err: %v\", err)",
          "1204:  }",
          "1209:  err = core.Process(gc)",
          "1210:  if err != nil {",
          "1211:   t.Fatalf(\"err: %v\", err)",
          "1212:  }",
          "1216:  if err != nil {",
          "1217:   t.Fatalf(\"err: %v\", err)",
          "1218:  }",
          "1219:  if out != nil {",
          "1220:   t.Fatalf(\"bad: %v\", out)",
          "1221:  }",
          "1224:  if err != nil {",
          "1225:   t.Fatalf(\"err: %v\", err)",
          "1226:  }",
          "1227:  if outE != nil {",
          "1228:   t.Fatalf(\"bad: %v\", outE)",
          "1229:  }",
          "1232:  if err != nil {",
          "1233:   t.Fatalf(\"err: %v\", err)",
          "1234:  }",
          "1235:  if outE2 != nil {",
          "1236:   t.Fatalf(\"bad: %v\", outE2)",
          "1237:  }",
          "",
          "[Added Lines]",
          "1048:  job.SubmitTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1049:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, 1000, nil, job))",
          "1055:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1056:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1061:  eval2.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1062:  eval2.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1063:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval, eval2}))",
          "1067:  must.NoError(t, err)",
          "1072:  must.NoError(t, core.Process(gc))",
          "1077:  must.NoError(t, err)",
          "1078:  must.NotNil(t, out)",
          "1081:  must.NoError(t, err)",
          "1082:  must.NotNil(t, outE)",
          "1085:  must.NoError(t, err)",
          "1086:  must.NotNil(t, outE2)",
          "1090:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1003, []*structs.Evaluation{eval2}))",
          "1094:  must.NoError(t, err)",
          "1099:  must.NoError(t, core.Process(gc))",
          "1103:  must.NoError(t, err)",
          "1104:  must.Nil(t, out)",
          "1107:  must.NoError(t, err)",
          "1108:  must.Nil(t, outE)",
          "1111:  must.NoError(t, err)",
          "1112:  must.Nil(t, outE2)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1244:  defer cleanupS1()",
          "1245:  testutil.WaitForLeader(t, s1.RPC)",
          "1251:  store := s1.fsm.State()",
          "1252:  job := mock.Job()",
          "",
          "[Removed Lines]",
          "1248:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1265:  eval := mock.Eval()",
          "1266:  eval.JobID = job.ID",
          "1267:  eval.Status = structs.EvalStatusComplete",
          "1268:  err = store.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval})",
          "1269:  if err != nil {",
          "1270:   t.Fatalf(\"err: %v\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1141:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1290:   t.Fatalf(\"err: %v\", err)",
          "1291:  }",
          "1298:  snap, err := store.Snapshot()",
          "1299:  if err != nil {",
          "",
          "[Removed Lines]",
          "1294:  tt := s1.fsm.TimeTable()",
          "1295:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.JobGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1390:  defer cleanupS1()",
          "1391:  testutil.WaitForLeader(t, s1.RPC)",
          "1397:  store := s1.fsm.State()",
          "1398:  job := mock.Job()",
          "",
          "[Removed Lines]",
          "1394:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1436:  job.Status = structs.JobStatusDead",
          "1443:  snap, err := store.Snapshot()",
          "1444:  if err != nil {",
          "",
          "[Removed Lines]",
          "1439:  tt := s1.fsm.TimeTable()",
          "1440:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.JobGCThreshold))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1503:  defer cleanupS1()",
          "1504:  testutil.WaitForLeader(t, s1.RPC)",
          "1510:  store := s1.fsm.State()",
          "1511:  job := mock.Job()",
          "",
          "[Removed Lines]",
          "1507:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1523:  eval := mock.Eval()",
          "1524:  eval.JobID = job.ID",
          "1525:  eval.Status = structs.EvalStatusComplete",
          "1527:  eval2 := mock.Eval()",
          "1528:  eval2.JobID = job.ID",
          "1529:  eval2.Status = structs.EvalStatusComplete",
          "1531:  err = store.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval, eval2})",
          "1532:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1386:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1387:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1392:  eval2.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1393:  eval2.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1539:  alloc.EvalID = eval.ID",
          "1540:  alloc.DesiredStatus = structs.AllocDesiredStatusStop",
          "1541:  alloc.TaskGroup = job.TaskGroups[0].Name",
          "1542:  err = store.UpsertAllocs(structs.MsgTypeTestSetup, 1002, []*structs.Allocation{alloc})",
          "1543:  if err != nil {",
          "1544:   t.Fatalf(\"err: %v\", err)",
          "1545:  }",
          "1552:  snap, err := store.Snapshot()",
          "1553:  if err != nil {",
          "",
          "[Removed Lines]",
          "1548:  tt := s1.fsm.TimeTable()",
          "1549:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.JobGCThreshold))",
          "",
          "[Added Lines]",
          "1406:  alloc.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1407:  alloc.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1611:    defer cleanup()",
          "1612:    testutil.WaitForLeader(t, server.RPC)",
          "1618:    store := server.fsm.State()",
          "1619:    job := mock.Job()",
          "",
          "[Removed Lines]",
          "1615:    server.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1628:    eval := mock.Eval()",
          "1629:    eval.JobID = job.ID",
          "1630:    eval.Status = structs.EvalStatusComplete",
          "1631:    err = store.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval})",
          "1632:    if err != nil {",
          "1633:     t.Fatalf(\"err: %v\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1490:    eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1491:    eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1676:  defer cleanupS1()",
          "1677:  testutil.WaitForLeader(t, s1.RPC)",
          "1683:  store := s1.fsm.State()",
          "1684:  job := mock.Job()",
          "",
          "[Removed Lines]",
          "1680:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1756:  defer cleanupS1()",
          "1757:  testutil.WaitForLeader(t, s1.RPC)",
          "1763:  store := s1.fsm.State()",
          "1764:  job := mock.PeriodicJob()",
          "",
          "[Removed Lines]",
          "1760:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1841:   mockEval1.JobID = inputJob.ID",
          "1842:   mockEval1.Namespace = inputJob.Namespace",
          "1843:   mockEval1.Status = structs.EvalStatusComplete",
          "1845:   mockJob1Alloc1 := mock.Alloc()",
          "1846:   mockJob1Alloc1.EvalID = mockEval1.ID",
          "1847:   mockJob1Alloc1.JobID = inputJob.ID",
          "1848:   mockJob1Alloc1.ClientStatus = structs.AllocClientStatusRunning",
          "1850:   mockJob1Alloc2 := mock.Alloc()",
          "1851:   mockJob1Alloc2.EvalID = mockEval1.ID",
          "1852:   mockJob1Alloc2.JobID = inputJob.ID",
          "1853:   mockJob1Alloc2.ClientStatus = structs.AllocClientStatusRunning",
          "1855:   must.NoError(t,",
          "1856:    testServer.fsm.State().UpsertJob(structs.MsgTypeTestSetup, 10, nil, inputJob))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1700:   mockEval1.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1701:   mockEval1.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1707:   mockJob1Alloc1.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1708:   mockJob1Alloc1.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1714:   mockJob1Alloc2.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1715:   mockJob1Alloc2.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1955:  s1, cleanupS1 := TestServer(t, nil)",
          "1956:  defer cleanupS1()",
          "1957:  testutil.WaitForLeader(t, s1.RPC)",
          "1964:  store := s1.fsm.State()",
          "1965:  d1, d2, d3 := mock.Deployment(), mock.Deployment(), mock.Deployment()",
          "1966:  d1.Status = structs.DeploymentStatusFailed",
          "1967:  d3.Status = structs.DeploymentStatusSuccessful",
          "1972:  a := mock.Alloc()",
          "1973:  a.JobID = d3.JobID",
          "1974:  a.DeploymentID = d3.ID",
          "1982:  snap, err := store.Snapshot()",
          "1984:  core := NewCoreScheduler(s1, snap)",
          "1987:  gc := s1.coreJobEval(structs.CoreJobDeploymentGC, 2000)",
          "1991:  ws := memdb.NewWatchSet()",
          "1992:  out, err := store.DeploymentByID(ws, d1.ID)",
          "1995:  out2, err := store.DeploymentByID(ws, d2.ID)",
          "1998:  out3, err := store.DeploymentByID(ws, d3.ID)",
          "2001: }",
          "2003: func TestCoreScheduler_DeploymentGC_Force(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1958:  assert := assert.New(t)",
          "1961:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "1968:  assert.Nil(store.UpsertDeployment(1000, d1), \"UpsertDeployment\")",
          "1969:  assert.Nil(store.UpsertDeployment(1001, d2), \"UpsertDeployment\")",
          "1970:  assert.Nil(store.UpsertDeployment(1002, d3), \"UpsertDeployment\")",
          "1975:  assert.Nil(store.UpsertAllocs(structs.MsgTypeTestSetup, 1003, []*structs.Allocation{a}), \"UpsertAllocs\")",
          "1978:  tt := s1.fsm.TimeTable()",
          "1979:  tt.Witness(2000, time.Now().UTC().Add(-1*s1.config.DeploymentGCThreshold))",
          "1983:  assert.Nil(err, \"Snapshot\")",
          "1988:  assert.Nil(core.Process(gc), \"Process GC\")",
          "1993:  assert.Nil(err, \"DeploymentByID\")",
          "1994:  assert.Nil(out, \"Terminal Deployment\")",
          "1996:  assert.Nil(err, \"DeploymentByID\")",
          "1997:  assert.NotNil(out2, \"Active Deployment\")",
          "1999:  assert.Nil(err, \"DeploymentByID\")",
          "2000:  assert.NotNil(out3, \"Terminal Deployment With Allocs\")",
          "",
          "[Added Lines]",
          "1825:  d1.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1826:  d1.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1829:  must.Nil(t, store.UpsertDeployment(1000, d1), must.Sprint(\"UpsertDeployment\"))",
          "1830:  must.Nil(t, store.UpsertDeployment(1001, d2), must.Sprint(\"UpsertDeployment\"))",
          "1831:  must.Nil(t, store.UpsertDeployment(1002, d3), must.Sprint(\"UpsertDeployment\"))",
          "1836:  a.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1837:  a.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1838:  must.Nil(t, store.UpsertAllocs(structs.MsgTypeTestSetup, 1003, []*structs.Allocation{a}))",
          "1842:  must.NoError(t, err)",
          "1847:  must.NoError(t, core.Process(gc))",
          "1852:  must.NoError(t, err)",
          "1853:  must.Nil(t, out)",
          "1856:  must.NoError(t, err)",
          "1857:  must.NotNil(t, out2)",
          "1859:  must.NoError(t, err)",
          "1860:  must.NotNil(t, out3)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2015:    testutil.WaitForLeader(t, server.RPC)",
          "2016:    assert := assert.New(t)",
          "2022:    store := server.fsm.State()",
          "2023:    d1, d2 := mock.Deployment(), mock.Deployment()",
          "2024:    d1.Status = structs.DeploymentStatusFailed",
          "2025:    assert.Nil(store.UpsertDeployment(1000, d1), \"UpsertDeployment\")",
          "2026:    assert.Nil(store.UpsertDeployment(1001, d2), \"UpsertDeployment\")",
          "",
          "[Removed Lines]",
          "2019:    server.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "1882:    d1.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "1883:    d1.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2053:  defer cleanupS1()",
          "2054:  testutil.WaitForLeader(t, s1.RPC)",
          "2060:  snap, err := s1.fsm.State().Snapshot()",
          "2061:  if err != nil {",
          "",
          "[Removed Lines]",
          "2057:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2095:  defer cleanupS1()",
          "2096:  testutil.WaitForLeader(t, s1.RPC)",
          "2102:  snap, err := s1.fsm.State().Snapshot()",
          "2103:  if err != nil {",
          "",
          "[Removed Lines]",
          "2099:  s1.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2160:   PreventRescheduleOnLost *bool",
          "2161:   AllocJobModifyIndex     uint64",
          "2162:   JobModifyIndex          uint64",
          "2164:   NextAllocID             string",
          "2165:   ReschedulePolicy        *structs.ReschedulePolicy",
          "2166:   RescheduleTrackers      []*structs.RescheduleEvent",
          "2168:   ShouldGC                bool",
          "2169:  }",
          "2173:  harness := []testCase{",
          "2174:   {",
          "2182:   },",
          "2183:   {",
          "2192:   },",
          "2193:   {",
          "2202:   },",
          "2203:   {",
          "2212:   },",
          "2213:   {",
          "2214:    Desc:             \"GC when terminal but not failed \",",
          "2215:    ClientStatus:     structs.AllocClientStatusComplete,",
          "2216:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2220:    ReschedulePolicy: nil,",
          "2221:    ShouldGC:         true,",
          "2222:   },",
          "",
          "[Removed Lines]",
          "2163:   ModifyIndex             uint64",
          "2167:   ThresholdIndex          uint64",
          "2171:  fail := time.Now()",
          "2175:    Desc:           \"Don't GC when non terminal\",",
          "2176:    ClientStatus:   structs.AllocClientStatusPending,",
          "2177:    DesiredStatus:  structs.AllocDesiredStatusRun,",
          "2178:    GCTime:         fail,",
          "2179:    ModifyIndex:    90,",
          "2180:    ThresholdIndex: 90,",
          "2181:    ShouldGC:       false,",
          "2184:    Desc:           \"Don't GC when non terminal and job stopped\",",
          "2185:    ClientStatus:   structs.AllocClientStatusPending,",
          "2186:    DesiredStatus:  structs.AllocDesiredStatusRun,",
          "2187:    JobStop:        true,",
          "2188:    GCTime:         fail,",
          "2189:    ModifyIndex:    90,",
          "2190:    ThresholdIndex: 90,",
          "2191:    ShouldGC:       false,",
          "2194:    Desc:           \"Don't GC when non terminal and job dead\",",
          "2195:    ClientStatus:   structs.AllocClientStatusPending,",
          "2196:    DesiredStatus:  structs.AllocDesiredStatusRun,",
          "2197:    JobStatus:      structs.JobStatusDead,",
          "2198:    GCTime:         fail,",
          "2199:    ModifyIndex:    90,",
          "2200:    ThresholdIndex: 90,",
          "2201:    ShouldGC:       false,",
          "2204:    Desc:           \"Don't GC when non terminal on client and job dead\",",
          "2205:    ClientStatus:   structs.AllocClientStatusRunning,",
          "2206:    DesiredStatus:  structs.AllocDesiredStatusStop,",
          "2207:    JobStatus:      structs.JobStatusDead,",
          "2208:    GCTime:         fail,",
          "2209:    ModifyIndex:    90,",
          "2210:    ThresholdIndex: 90,",
          "2211:    ShouldGC:       false,",
          "2217:    GCTime:           fail,",
          "2218:    ModifyIndex:      90,",
          "2219:    ThresholdIndex:   90,",
          "",
          "[Added Lines]",
          "2016:   ModifyTime              int64",
          "2020:   CutoffTime              time.Time",
          "2024:  now := time.Now()",
          "2028:    Desc:          \"Don't GC when non terminal\",",
          "2029:    ClientStatus:  structs.AllocClientStatusPending,",
          "2030:    DesiredStatus: structs.AllocDesiredStatusRun,",
          "2031:    GCTime:        now,",
          "2032:    ModifyTime:    now.UnixNano(),",
          "2033:    CutoffTime:    now,",
          "2034:    ShouldGC:      false,",
          "2037:    Desc:          \"Don't GC when non terminal and job stopped\",",
          "2038:    ClientStatus:  structs.AllocClientStatusPending,",
          "2039:    DesiredStatus: structs.AllocDesiredStatusRun,",
          "2040:    JobStop:       true,",
          "2041:    GCTime:        now,",
          "2042:    ModifyTime:    now.UnixNano(),",
          "2043:    CutoffTime:    now,",
          "2044:    ShouldGC:      false,",
          "2047:    Desc:          \"Don't GC when non terminal and job dead\",",
          "2048:    ClientStatus:  structs.AllocClientStatusPending,",
          "2049:    DesiredStatus: structs.AllocDesiredStatusRun,",
          "2050:    JobStatus:     structs.JobStatusDead,",
          "2051:    GCTime:        now,",
          "2052:    ModifyTime:    now.UnixNano(),",
          "2053:    CutoffTime:    now,",
          "2054:    ShouldGC:      false,",
          "2057:    Desc:          \"Don't GC when non terminal on client and job dead\",",
          "2058:    ClientStatus:  structs.AllocClientStatusRunning,",
          "2059:    DesiredStatus: structs.AllocDesiredStatusStop,",
          "2060:    JobStatus:     structs.JobStatusDead,",
          "2061:    GCTime:        now,",
          "2062:    ModifyTime:    now.UnixNano(),",
          "2063:    CutoffTime:    now,",
          "2064:    ShouldGC:      false,",
          "2070:    GCTime:           now,",
          "2071:    ModifyTime:       now.UnixNano(),",
          "2072:    CutoffTime:       now,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2224:    Desc:             \"Don't GC when threshold not met\",",
          "2225:    ClientStatus:     structs.AllocClientStatusComplete,",
          "2226:    DesiredStatus:    structs.AllocDesiredStatusStop,",
          "2230:    ReschedulePolicy: nil,",
          "2231:    ShouldGC:         false,",
          "2232:   },",
          "",
          "[Removed Lines]",
          "2227:    GCTime:           fail,",
          "2228:    ModifyIndex:      100,",
          "2229:    ThresholdIndex:   90,",
          "",
          "[Added Lines]",
          "2080:    GCTime:           now,",
          "2081:    ModifyTime:       now.UnixNano(),",
          "2082:    CutoffTime:       now.Add(-1 * time.Hour),",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2234:    Desc:             \"GC when no reschedule policy\",",
          "2235:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2236:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2238:    ReschedulePolicy: nil,",
          "2241:    ShouldGC:         true,",
          "2242:   },",
          "2243:   {",
          "2244:    Desc:             \"GC when empty policy\",",
          "2245:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2246:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2248:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 0, Interval: 0 * time.Minute},",
          "2251:    ShouldGC:         true,",
          "2252:   },",
          "2253:   {",
          "2254:    Desc:             \"Don't GC when no previous reschedule attempts\",",
          "2255:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2256:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2260:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 1, Interval: 1 * time.Minute},",
          "2261:    ShouldGC:         false,",
          "2262:   },",
          "",
          "[Removed Lines]",
          "2237:    GCTime:           fail,",
          "2239:    ModifyIndex:      90,",
          "2240:    ThresholdIndex:   90,",
          "2247:    GCTime:           fail,",
          "2249:    ModifyIndex:      90,",
          "2250:    ThresholdIndex:   90,",
          "2257:    GCTime:           fail,",
          "2258:    ModifyIndex:      90,",
          "2259:    ThresholdIndex:   90,",
          "",
          "[Added Lines]",
          "2090:    GCTime:           now,",
          "2092:    ModifyTime:       now.UnixNano(),",
          "2093:    CutoffTime:       now,",
          "2100:    GCTime:           now,",
          "2102:    ModifyTime:       now.UnixNano(),",
          "2103:    CutoffTime:       now,",
          "2110:    GCTime:           now,",
          "2111:    ModifyTime:       now.UnixNano(),",
          "2112:    CutoffTime:       now,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2265:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2266:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2267:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 2, Interval: 30 * time.Minute},",
          "2271:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2272:     {",
          "2274:     },",
          "2275:    },",
          "2276:    ShouldGC: false,",
          "",
          "[Removed Lines]",
          "2268:    GCTime:           fail,",
          "2269:    ModifyIndex:      90,",
          "2270:    ThresholdIndex:   90,",
          "2273:      RescheduleTime: fail.Add(-5 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2121:    GCTime:           now,",
          "2122:    ModifyTime:       now.UnixNano(),",
          "2123:    CutoffTime:       now,",
          "2126:      RescheduleTime: now.Add(-5 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2279:    Desc:             \"GC with prev reschedule attempt outside interval\",",
          "2280:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2281:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2283:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 5, Interval: 30 * time.Minute},",
          "2284:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2285:     {",
          "2287:     },",
          "2288:     {",
          "2290:     },",
          "2291:    },",
          "2292:    ShouldGC: true,",
          "",
          "[Removed Lines]",
          "2282:    GCTime:           fail,",
          "2286:      RescheduleTime: fail.Add(-45 * time.Minute).UTC().UnixNano(),",
          "2289:      RescheduleTime: fail.Add(-60 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2135:    GCTime:           now,",
          "2136:    CutoffTime:       now,",
          "2140:      RescheduleTime: now.Add(-45 * time.Minute).UTC().UnixNano(),",
          "2143:      RescheduleTime: now.Add(-60 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2295:    Desc:             \"GC when next alloc id is set\",",
          "2296:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2297:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2299:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 5, Interval: 30 * time.Minute},",
          "2300:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2301:     {",
          "2303:     },",
          "2304:    },",
          "2305:    NextAllocID: uuid.Generate(),",
          "",
          "[Removed Lines]",
          "2298:    GCTime:           fail,",
          "2302:      RescheduleTime: fail.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2152:    GCTime:           now,",
          "2153:    CutoffTime:       now,",
          "2157:      RescheduleTime: now.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2309:    Desc:             \"Don't GC when next alloc id is not set and unlimited restarts\",",
          "2310:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2311:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2313:    ReschedulePolicy: &structs.ReschedulePolicy{Unlimited: true, Delay: 5 * time.Second, DelayFunction: \"constant\"},",
          "2314:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2315:     {",
          "2317:     },",
          "2318:    },",
          "2319:    ShouldGC: false,",
          "",
          "[Removed Lines]",
          "2312:    GCTime:           fail,",
          "2316:      RescheduleTime: fail.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2167:    GCTime:           now,",
          "2168:    CutoffTime:       now,",
          "2172:      RescheduleTime: now.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2322:    Desc:             \"GC when job is stopped\",",
          "2323:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2324:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2326:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 5, Interval: 30 * time.Minute},",
          "2327:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2328:     {",
          "2330:     },",
          "2331:    },",
          "2332:    JobStop:  true,",
          "",
          "[Removed Lines]",
          "2325:    GCTime:           fail,",
          "2329:      RescheduleTime: fail.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2181:    GCTime:           now,",
          "2182:    CutoffTime:       now,",
          "2186:      RescheduleTime: now.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2336:    Desc:          \"GC when alloc is lost and eligible for reschedule\",",
          "2337:    ClientStatus:  structs.AllocClientStatusLost,",
          "2338:    DesiredStatus: structs.AllocDesiredStatusStop,",
          "2340:    JobStatus:     structs.JobStatusDead,",
          "2341:    ShouldGC:      true,",
          "2342:   },",
          "",
          "[Removed Lines]",
          "2339:    GCTime:        fail,",
          "",
          "[Added Lines]",
          "2196:    GCTime:        now,",
          "2197:    CutoffTime:    now,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2344:    Desc:             \"GC when job status is dead\",",
          "2345:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2346:    DesiredStatus:    structs.AllocDesiredStatusRun,",
          "2348:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 5, Interval: 30 * time.Minute},",
          "2349:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2350:     {",
          "2352:     },",
          "2353:    },",
          "2354:    JobStatus: structs.JobStatusDead,",
          "",
          "[Removed Lines]",
          "2347:    GCTime:           fail,",
          "2351:      RescheduleTime: fail.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2205:    GCTime:           now,",
          "2206:    CutoffTime:       now,",
          "2210:      RescheduleTime: now.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2358:    Desc:             \"GC when desired status is stop, unlimited reschedule policy, no previous reschedule events\",",
          "2359:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2360:    DesiredStatus:    structs.AllocDesiredStatusStop,",
          "2362:    ReschedulePolicy: &structs.ReschedulePolicy{Unlimited: true, Delay: 5 * time.Second, DelayFunction: \"constant\"},",
          "2363:    ShouldGC:         true,",
          "2364:   },",
          "",
          "[Removed Lines]",
          "2361:    GCTime:           fail,",
          "",
          "[Added Lines]",
          "2220:    GCTime:           now,",
          "2221:    CutoffTime:       now,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2366:    Desc:             \"GC when desired status is stop, limited reschedule policy, some previous reschedule events\",",
          "2367:    ClientStatus:     structs.AllocClientStatusFailed,",
          "2368:    DesiredStatus:    structs.AllocDesiredStatusStop,",
          "2370:    ReschedulePolicy: &structs.ReschedulePolicy{Attempts: 5, Interval: 30 * time.Minute},",
          "2371:    RescheduleTrackers: []*structs.RescheduleEvent{",
          "2372:     {",
          "2374:     },",
          "2375:    },",
          "2376:    ShouldGC: true,",
          "",
          "[Removed Lines]",
          "2369:    GCTime:           fail,",
          "2373:      RescheduleTime: fail.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "[Added Lines]",
          "2229:    GCTime:           now,",
          "2230:    CutoffTime:       now,",
          "2234:      RescheduleTime: now.Add(-3 * time.Minute).UTC().UnixNano(),",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2379:    Desc:          \"GC when alloc is unknown and but desired state is running\",",
          "2380:    ClientStatus:  structs.AllocClientStatusUnknown,",
          "2381:    DesiredStatus: structs.AllocDesiredStatusRun,",
          "2383:    JobStatus:     structs.JobStatusRunning,",
          "2384:    ShouldGC:      false,",
          "2385:   },",
          "",
          "[Removed Lines]",
          "2382:    GCTime:        fail,",
          "",
          "[Added Lines]",
          "2243:    GCTime:        now,",
          "2244:    CutoffTime:    now,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2388:  for _, tc := range harness {",
          "2389:   alloc := &structs.Allocation{}",
          "2391:   alloc.DesiredStatus = tc.DesiredStatus",
          "2392:   alloc.ClientStatus = tc.ClientStatus",
          "2393:   alloc.RescheduleTracker = &structs.RescheduleTracker{Events: tc.RescheduleTrackers}",
          "",
          "[Removed Lines]",
          "2390:   alloc.ModifyIndex = tc.ModifyIndex",
          "",
          "[Added Lines]",
          "2252:   alloc.ModifyTime = tc.ModifyTime",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2404:   job.Stop = tc.JobStop",
          "2406:   t.Run(tc.Desc, func(t *testing.T) {",
          "2408:     t.Fatalf(\"expected %v but got %v\", tc.ShouldGC, got)",
          "2409:    }",
          "2410:   })",
          "",
          "[Removed Lines]",
          "2407:    if got := allocGCEligible(alloc, job, tc.GCTime, tc.ThresholdIndex); got != tc.ShouldGC {",
          "",
          "[Added Lines]",
          "2269:    if got := allocGCEligible(alloc, job, tc.GCTime, tc.CutoffTime); got != tc.ShouldGC {",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2415:  alloc := mock.Alloc()",
          "2416:  alloc.ClientStatus = structs.AllocClientStatusComplete",
          "2418: }",
          "2420: func TestCoreScheduler_CSIPluginGC(t *testing.T) {",
          "",
          "[Removed Lines]",
          "2417:  require.True(t, allocGCEligible(alloc, nil, time.Now(), 1000))",
          "",
          "[Added Lines]",
          "2279:  require.True(t, allocGCEligible(alloc, nil, time.Now(), time.Now()))",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2424:  defer cleanupSRV()",
          "2425:  testutil.WaitForLeader(t, srv.RPC)",
          "2429:  deleteNodes := state.CreateTestCSIPlugin(srv.fsm.State(), \"foo\")",
          "2430:  defer deleteNodes()",
          "2431:  store := srv.fsm.State()",
          "2435:  index := uint64(2000)",
          "2439:  snap, err := store.Snapshot()",
          "",
          "[Removed Lines]",
          "2427:  srv.fsm.timetable.table = make([]TimeTableEntry, 1, 10)",
          "2434:  tt := srv.fsm.TimeTable()",
          "2436:  tt.Witness(index, time.Now().UTC().Add(-1*srv.config.CSIPluginGCThreshold))",
          "",
          "[Added Lines]",
          "2295:  ws := memdb.NewWatchSet()",
          "2296:  plug, err := store.CSIPluginByID(ws, \"foo\")",
          "2297:  must.NotNil(t, plug)",
          "2298:  must.NoError(t, err)",
          "2301:  plug.CreateTime = time.Now().Add(-10 * time.Hour).UnixNano()",
          "2302:  plug.ModifyTime = time.Now().Add(-9 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2446:  must.NoError(t, core.Process(gc))",
          "2451:  must.NotNil(t, plug)",
          "2452:  must.NoError(t, err)",
          "",
          "[Removed Lines]",
          "2449:  ws := memdb.NewWatchSet()",
          "2450:  plug, err := store.CSIPluginByID(ws, \"foo\")",
          "",
          "[Added Lines]",
          "2315:  plug, err = store.CSIPluginByID(ws, \"foo\")",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2455:  plug = plug.Copy()",
          "2456:  plug.Controllers = map[string]*structs.CSIInfo{}",
          "2457:  plug.Nodes = map[string]*structs.CSIInfo{}",
          "2459:  job := mock.CSIPluginJob(structs.CSIPluginTypeController, plug.ID)",
          "2460:  index++",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2323:  plug.ModifyTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3064:  unexpiredLocal := mock.ACLToken()",
          "3065:  unexpiredLocal.ExpirationTime = pointer.Of(now.Add(2 * time.Hour))",
          "3068:  err := testServer.State().UpsertACLTokens(structs.MsgTypeTestSetup, 10, []*structs.ACLToken{",
          "3069:   expiredGlobal, unexpiredGlobal, expiredLocal, unexpiredLocal,",
          "3070:  })",
          "3081:  snap, err := testServer.State().Snapshot()",
          "3083:  coreScheduler := NewCoreScheduler(testServer, snap)",
          "3086:  index, err := testServer.State().LatestIndex()",
          "3088:  index++",
          "3090:  globalGCEval := testServer.coreJobEval(structs.CoreJobGlobalTokenExpiredGC, index)",
          "3093:  localGCEval := testServer.coreJobEval(structs.CoreJobLocalTokenExpiredGC, index)",
          "3097:  iter, err := testServer.State().ACLTokens(nil, state.SortDefault)",
          "3100:  var tokens []*structs.ACLToken",
          "3101:  for raw := iter.Next(); raw != nil; raw = iter.Next() {",
          "3102:   tokens = append(tokens, raw.(*structs.ACLToken))",
          "3103:  }",
          "3105: }",
          "3107: func TestCoreScheduler_ExpiredACLTokenGC_Force(t *testing.T) {",
          "",
          "[Removed Lines]",
          "3071:  require.NoError(t, err)",
          "3076:  tt := NewTimeTable(timeTableGranularity, timeTableLimit)",
          "3077:  tt.Witness(20, time.Now().UTC().Add(-1*testServer.config.ACLTokenExpirationGCThreshold))",
          "3078:  testServer.fsm.timetable = tt",
          "3082:  require.NoError(t, err)",
          "3087:  require.NoError(t, err)",
          "3091:  require.NoError(t, coreScheduler.Process(globalGCEval))",
          "3094:  require.NoError(t, coreScheduler.Process(localGCEval))",
          "3098:  require.NoError(t, err)",
          "3104:  require.ElementsMatch(t, []*structs.ACLToken{rootACLToken, unexpiredGlobal, unexpiredLocal}, tokens)",
          "",
          "[Added Lines]",
          "2934:  for _, token := range []*structs.ACLToken{expiredGlobal, unexpiredGlobal, expiredLocal, unexpiredLocal} {",
          "2935:   token.CreateTime = time.Now().Add(-10 * time.Hour)",
          "2936:  }",
          "2942:  must.NoError(t, err)",
          "2946:  must.NoError(t, err)",
          "2951:  must.NoError(t, err)",
          "2955:  must.NoError(t, coreScheduler.Process(globalGCEval))",
          "2958:  must.NoError(t, coreScheduler.Process(localGCEval))",
          "2962:  must.NoError(t, err)",
          "2968:  must.SliceContainsAll(t, []*structs.ACLToken{rootACLToken, unexpiredGlobal, unexpiredLocal}, tokens)",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3130:  for i := 0; i < 20; i++ {",
          "3131:   mockedToken := mock.ACLToken()",
          "3132:   mockedToken.Global = true",
          "3133:   if i%2 == 0 {",
          "3134:    expiredGlobalTokens = append(expiredGlobalTokens, mockedToken)",
          "3135:    mockedToken.ExpirationTime = pointer.Of(expiryTimeThreshold.Add(-24 * time.Hour))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2997:   mockedToken.CreateTime = time.Now().Add(-10 * time.Hour)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3144:  for i := 0; i < 20; i++ {",
          "3145:   mockedToken := mock.ACLToken()",
          "3146:   mockedToken.Global = false",
          "3147:   if i%2 == 0 {",
          "3148:    expiredLocalTokens = append(expiredLocalTokens, mockedToken)",
          "3149:    mockedToken.ExpirationTime = pointer.Of(expiryTimeThreshold.Add(-24 * time.Hour))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3012:   mockedToken.CreateTime = time.Now().Add(-10 * time.Hour)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3158:  allTokens = append(allTokens, nonExpiredLocalTokens...)",
          "",
          "[Removed Lines]",
          "3161:  err := testServer.State().UpsertACLTokens(structs.MsgTypeTestSetup, 10, allTokens)",
          "3162:  require.NoError(t, err)",
          "",
          "[Added Lines]",
          "3027:  must.NoError(t, testServer.State().UpsertACLTokens(structs.MsgTypeTestSetup, 10, allTokens))",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3175:  iter, err := testServer.State().ACLTokens(nil, state.SortDefault)",
          "3178:  tokens := fromIteratorFunc(iter)",
          "3183:  snap, err := testServer.State().Snapshot()",
          "3185:  coreScheduler := NewCoreScheduler(testServer, snap)",
          "3187:  index, err := testServer.State().LatestIndex()",
          "3189:  index++",
          "3191:  forceGCEval := testServer.coreJobEval(structs.CoreJobForceGC, index)",
          "3195:  iter, err = testServer.State().ACLTokens(nil, state.SortDefault)",
          "3198:  tokens = fromIteratorFunc(iter)",
          "3200: }",
          "",
          "[Removed Lines]",
          "3176:  require.NoError(t, err)",
          "3179:  require.ElementsMatch(t, allTokens, tokens)",
          "3184:  require.NoError(t, err)",
          "3188:  require.NoError(t, err)",
          "3192:  require.NoError(t, coreScheduler.Process(forceGCEval))",
          "3196:  require.NoError(t, err)",
          "3199:  require.ElementsMatch(t, append(nonExpiredGlobalTokens, nonExpiredLocalTokens...), tokens)",
          "",
          "[Added Lines]",
          "3041:  must.NoError(t, err)",
          "3044:  must.SliceContainsAll(t, allTokens, tokens)",
          "3049:  must.NoError(t, err)",
          "3053:  must.NoError(t, err)",
          "3057:  must.NoError(t, coreScheduler.Process(forceGCEval))",
          "3061:  must.NoError(t, err)",
          "3064:  must.SliceContainsAll(t, append(nonExpiredGlobalTokens, nonExpiredLocalTokens...), tokens)",
          "",
          "---------------"
        ],
        "nomad/csi_endpoint_test.go||nomad/csi_endpoint_test.go": [
          "File: nomad/csi_endpoint_test.go -> nomad/csi_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:     Mode:           structs.CSIVolumeClaimRead,",
          "674:    }",
          "676:    index++",
          "677:    claim.State = structs.CSIVolumeClaimStateTaken",
          "679:    must.NoError(t, err)",
          "",
          "[Removed Lines]",
          "678:    err = state.CSIVolumeClaim(index, ns, volID, claim)",
          "",
          "[Added Lines]",
          "676:    now := time.Now().UnixNano()",
          "680:    err = state.CSIVolumeClaim(index, now, ns, volID, claim)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "689:    index++",
          "690:    otherClaim.State = structs.CSIVolumeClaimStateTaken",
          "692:    must.NoError(t, err)",
          "",
          "[Removed Lines]",
          "691:    err = state.CSIVolumeClaim(index, ns, volID, otherClaim)",
          "",
          "[Added Lines]",
          "693:    err = state.CSIVolumeClaim(index, now, ns, volID, otherClaim)",
          "",
          "---------------"
        ],
        "nomad/fsm.go||nomad/fsm.go": [
          "File: nomad/fsm.go -> nomad/fsm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"github.com/hashicorp/raft\"",
          "24: )",
          "36: type SnapshotType byte",
          "",
          "[Removed Lines]",
          "26: const (",
          "28:  timeTableGranularity = 5 * time.Minute",
          "31:  timeTableLimit = 72 * time.Hour",
          "32: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  encrypter          *Encrypter",
          "132:  logger             hclog.Logger",
          "133:  state              *state.StateStore",
          "137:  config *FSMConfig",
          "",
          "[Removed Lines]",
          "134:  timetable          *TimeTable",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155: type nomadSnapshot struct {",
          "158: }",
          "",
          "[Removed Lines]",
          "156:  snap      *state.StateSnapshot",
          "157:  timetable *TimeTable",
          "",
          "[Added Lines]",
          "147:  snap *state.StateSnapshot",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "217:   logger:              config.Logger.Named(\"fsm\"),",
          "218:   config:              config,",
          "219:   state:               state,",
          "221:   enterpriseAppliers:  make(map[structs.MessageType]LogApplier, 8),",
          "222:   enterpriseRestorers: make(map[SnapshotType]SnapshotRestorer, 8),",
          "223:  }",
          "",
          "[Removed Lines]",
          "220:   timetable:           NewTimeTable(timeTableGranularity, timeTableLimit),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "244:  return n.state",
          "245: }",
          "252: func (n *nomadFSM) Apply(log *raft.Log) interface{} {",
          "253:  buf := log.Data",
          "254:  msgType := structs.MessageType(buf[0])",
          "",
          "[Removed Lines]",
          "248: func (n *nomadFSM) TimeTable() *TimeTable {",
          "249:  return n.timetable",
          "250: }",
          "257:  n.timetable.Witness(log.Index, time.Now().UTC())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1416:  defer metrics.MeasureSince([]string{\"nomad\", \"fsm\", \"apply_csi_volume_batch_claim\"}, time.Now())",
          "1418:  for _, req := range batch.Claims {",
          "1420:    req.VolumeID, req.ToClaim())",
          "1421:   if err != nil {",
          "1422:    n.logger.Error(\"CSIVolumeClaim for batch failed\", \"error\", err)",
          "",
          "[Removed Lines]",
          "1419:   err := n.state.CSIVolumeClaim(index, req.RequestNamespace(),",
          "",
          "[Added Lines]",
          "1400:   err := n.state.CSIVolumeClaim(index, req.Timestamp, req.RequestNamespace(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1433:  }",
          "1434:  defer metrics.MeasureSince([]string{\"nomad\", \"fsm\", \"apply_csi_volume_claim\"}, time.Now())",
          "1437:   n.logger.Error(\"CSIVolumeClaim failed\", \"error\", err)",
          "1438:   return err",
          "1439:  }",
          "",
          "[Removed Lines]",
          "1436:  if err := n.state.CSIVolumeClaim(index, req.RequestNamespace(), req.VolumeID, req.ToClaim()); err != nil {",
          "",
          "[Added Lines]",
          "1417:  if err := n.state.CSIVolumeClaim(index, req.Timestamp, req.RequestNamespace(), req.VolumeID, req.ToClaim()); err != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1518:  }",
          "1520:  ns := &nomadSnapshot{",
          "1523:  }",
          "1524:  return ns, nil",
          "1525: }",
          "",
          "[Removed Lines]",
          "1521:   snap:      snap,",
          "1522:   timetable: n.timetable,",
          "",
          "[Added Lines]",
          "1502:   snap: snap,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1584:   snapType := SnapshotType(msgType[0])",
          "1585:   switch snapType {",
          "1586:   case TimeTableSnapshot:",
          "1591:   case NodeSnapshot:",
          "1592:    node := new(structs.Node)",
          "1593:    if err := dec.Decode(node); err != nil {",
          "",
          "[Removed Lines]",
          "1587:    if err := n.timetable.Deserialize(dec); err != nil {",
          "1588:     return fmt.Errorf(\"time table deserialize failed: %v\", err)",
          "1589:    }",
          "",
          "[Added Lines]",
          "1569:    return nil",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2426:   return err",
          "2427:  }",
          "2437:  if err := s.persistIndexes(sink, encoder); err != nil {",
          "2438:   sink.Cancel()",
          "",
          "[Removed Lines]",
          "2430:  sink.Write([]byte{byte(TimeTableSnapshot)})",
          "2431:  if err := s.timetable.Serialize(encoder); err != nil {",
          "2432:   sink.Cancel()",
          "2433:   return err",
          "2434:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/fsm_test.go||nomad/fsm_test.go": [
          "File: nomad/fsm_test.go -> nomad/fsm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   t.Fatalf(\"bad index: %d\", node.CreateIndex)",
          "170:  }",
          "179:  testutil.WaitForResult(func() (bool, error) {",
          "180:   bStats := fsm.blockedEvals.Stats()",
          "",
          "[Removed Lines]",
          "172:  tt := fsm.TimeTable()",
          "173:  index := tt.NearestIndex(time.Now().UTC())",
          "174:  if index != 1 {",
          "175:   t.Fatalf(\"bad: %d\", index)",
          "176:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1600:  if out1.CreateIndex != 1 {",
          "1601:   t.Fatalf(\"bad index: %d\", out2.CreateIndex)",
          "1602:  }",
          "1609: }",
          "1611: func TestFSM_DeregisterVaultAccessor(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1604:  tt := fsm.TimeTable()",
          "1605:  index := tt.NearestIndex(time.Now().UTC())",
          "1606:  if index != 1 {",
          "1607:   t.Fatalf(\"bad: %d\", index)",
          "1608:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1643:  if out1 != nil {",
          "1644:   t.Fatalf(\"not deleted!\")",
          "1645:  }",
          "1652: }",
          "1654: func TestFSM_UpsertSITokenAccessor(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1647:  tt := fsm.TimeTable()",
          "1648:  index := tt.NearestIndex(time.Now().UTC())",
          "1649:  if index != 1 {",
          "1650:   t.Fatalf(\"bad: %d\", index)",
          "1651:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1680:  r.NoError(err)",
          "1681:  r.NotNil(result2)",
          "1682:  r.Equal(uint64(1), result2.CreateIndex)",
          "1687: }",
          "1689: func TestFSM_DeregisterSITokenAccessor(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1684:  tt := fsm.TimeTable()",
          "1685:  latestIndex := tt.NearestIndex(time.Now())",
          "1686:  r.Equal(uint64(1), latestIndex)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1718:  result2, err := fsm.State().SITokenAccessor(ws, a2.AccessorID)",
          "1719:  r.NoError(err)",
          "1720:  r.Nil(result2) // should have been deleted",
          "1725: }",
          "1727: func TestFSM_ApplyPlanResults(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1722:  tt := fsm.TimeTable()",
          "1723:  latestIndex := tt.NearestIndex(time.Now())",
          "1724:  r.Equal(uint64(1), latestIndex)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2567:  }",
          "2568: }",
          "2592: func TestFSM_SnapshotRestore_PeriodicLaunches(t *testing.T) {",
          "2593:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "2570: func TestFSM_SnapshotRestore_TimeTable(t *testing.T) {",
          "2571:  ci.Parallel(t)",
          "2573:  fsm := testFSM(t)",
          "2575:  tt := fsm.TimeTable()",
          "2576:  start := time.Now().UTC()",
          "2577:  tt.Witness(1000, start)",
          "2578:  tt.Witness(2000, start.Add(10*time.Minute))",
          "2581:  fsm2 := testSnapshotRestore(t, fsm)",
          "2583:  tt2 := fsm2.TimeTable()",
          "2584:  if tt2.NearestTime(1500) != start {",
          "2585:   t.Fatalf(\"bad\")",
          "2586:  }",
          "2587:  if tt2.NearestIndex(start.Add(15*time.Minute)) != 2000 {",
          "2588:   t.Fatalf(\"bad\")",
          "2589:  }",
          "2590: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/leader.go||nomad/leader.go": [
          "File: nomad/leader.go -> nomad/leader.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2872:   s.logger.Info(\"blocked evals status modified\", \"paused\", !enableBrokers)",
          "2873:   s.blockedEvals.SetEnabled(enableBrokers)",
          "2874:   restoreEvals = enableBrokers",
          "2879:  }",
          "2881:  return restoreEvals",
          "",
          "[Removed Lines]",
          "2876:   if enableBrokers {",
          "2877:    s.blockedEvals.SetTimetable(s.fsm.TimeTable())",
          "2878:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/mock/csi.go||nomad/mock/csi.go": [
          "File: nomad/mock/csi.go -> nomad/mock/csi.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"fmt\"",
          "9:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "10:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"time\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   ControllersExpected: len(plugin.Controllers),",
          "51:   NodesHealthy:        plugin.NodesHealthy,",
          "52:   NodesExpected:       len(plugin.Nodes),",
          "53:  }",
          "54: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   CreateTime:          time.Now().Add(-6 * time.Hour).UnixNano(),",
          "55:   ModifyTime:          time.Now().Add(-5 * time.Hour).UnixNano(),",
          "",
          "---------------"
        ],
        "nomad/mock/job.go||nomad/mock/job.go": [
          "File: nomad/mock/job.go -> nomad/mock/job.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   CreateIndex:    42,",
          "145:   ModifyIndex:    99,",
          "146:   JobModifyIndex: 99,",
          "147:  }",
          "148:  job.Canonicalize()",
          "149:  return job",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   SubmitTime:     time.Now().Add(-6 * time.Hour).UnixNano(),",
          "",
          "---------------"
        ],
        "nomad/mock/mock.go||nomad/mock/mock.go": [
          "File: nomad/mock/mock.go -> nomad/mock/mock.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   StatusDescription: structs.DeploymentStatusDescriptionRunning,",
          "185:   ModifyIndex:       23,",
          "186:   CreateIndex:       21,",
          "187:  }",
          "188: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:   CreateTime:        time.Now().UTC().UnixNano(),",
          "188:   ModifyTime:        time.Now().UTC().UnixNano(),",
          "",
          "---------------"
        ],
        "nomad/plan_apply_test.go||nomad/plan_apply_test.go": [
          "File: nomad/plan_apply_test.go -> nomad/plan_apply_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"github.com/hashicorp/nomad/testutil\"",
          "19:  \"github.com/hashicorp/raft\"",
          "20:  \"github.com/shoenig/test/must\"",
          "22:  \"github.com/stretchr/testify/require\"",
          "23: )",
          "",
          "[Removed Lines]",
          "21:  \"github.com/stretchr/testify/assert\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  }",
          "53: }",
          "73: func TestPlanApply_applyPlan(t *testing.T) {",
          "74:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "55: func testRegisterJob(t *testing.T, s *Server, j *structs.Job) {",
          "57:  req := &structs.JobRegisterRequest{",
          "58:   Job:          j,",
          "59:   WriteRequest: structs.WriteRequest{Region: \"global\"},",
          "60:  }",
          "63:  var resp structs.JobRegisterResponse",
          "64:  if err := s.RPC(\"Job.Register\", req, &resp); err != nil {",
          "65:   t.Fatalf(\"err: %v\", err)",
          "66:  }",
          "67:  if resp.Index == 0 {",
          "68:   t.Fatalf(\"bad index: %d\", resp.Index)",
          "69:  }",
          "70: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:  oldDeployment := mock.Deployment()",
          "91:  dnew := mock.Deployment()",
          "",
          "[Removed Lines]",
          "86:  if err := s1.State().UpsertDeployment(900, oldDeployment); err != nil {",
          "87:   t.Fatalf(\"UpsertDeployment failed: %v\", err)",
          "88:  }",
          "",
          "[Added Lines]",
          "68:  must.NoError(t, s1.State().UpsertDeployment(900, oldDeployment))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:  alloc := mock.Alloc()",
          "107:  eval := mock.Eval()",
          "108:  eval.JobID = alloc.JobID",
          "113:  planRes := &structs.PlanResult{",
          "114:   NodeAllocation: map[string][]*structs.Allocation{",
          "",
          "[Removed Lines]",
          "105:  s1.State().UpsertJobSummary(1000, mock.JobSummary(alloc.JobID))",
          "109:  if err := s1.State().UpsertEvals(structs.MsgTypeTestSetup, 1, []*structs.Evaluation{eval}); err != nil {",
          "110:   t.Fatalf(\"err: %v\", err)",
          "111:  }",
          "",
          "[Added Lines]",
          "85:  must.NoError(t, s1.State().UpsertJobSummary(1000, mock.JobSummary(alloc.JobID)))",
          "89:  must.NoError(t, s1.State().UpsertEvals(structs.MsgTypeTestSetup, 1, []*structs.Evaluation{eval}))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:  snap, err := s1.State().Snapshot()",
          "128:  plan := &structs.Plan{",
          "",
          "[Removed Lines]",
          "123:  if err != nil {",
          "124:   t.Fatalf(\"err: %v\", err)",
          "125:  }",
          "",
          "[Added Lines]",
          "101:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:  future, err := s1.applyPlan(plan, planRes, snap)",
          "141:  ws := memdb.NewWatchSet()",
          "142:  allocOut, err := snap.AllocByID(ws, alloc.ID)",
          "146:  deploymentOut, err := snap.DeploymentByID(ws, plan.Deployment.ID)",
          "151:  index, err := planWaitFuture(future)",
          "156:  fsmState := s1.fsm.State()",
          "157:  allocOut, err = fsmState.AllocByID(ws, alloc.ID)",
          "165:  dout, err := fsmState.DeploymentByID(ws, plan.Deployment.ID)",
          "170:  dout2, err := fsmState.DeploymentByID(ws, oldDeployment.ID)",
          "177:  evalOut, err := fsmState.EvalByID(ws, eval.ID)",
          "183:  allocEvict := new(structs.Allocation)",
          "",
          "[Removed Lines]",
          "137:  assert := assert.New(t)",
          "138:  assert.Nil(err)",
          "143:  assert.Nil(err)",
          "144:  assert.NotNil(allocOut)",
          "147:  assert.Nil(err)",
          "148:  assert.NotNil(deploymentOut)",
          "152:  assert.Nil(err)",
          "153:  assert.NotEqual(0, index)",
          "158:  assert.Nil(err)",
          "159:  assert.NotNil(allocOut)",
          "160:  assert.True(allocOut.CreateTime > 0)",
          "161:  assert.True(allocOut.ModifyTime > 0)",
          "162:  assert.Equal(allocOut.CreateTime, allocOut.ModifyTime)",
          "166:  assert.Nil(err)",
          "167:  assert.NotNil(dout)",
          "171:  assert.Nil(err)",
          "172:  assert.NotNil(dout2)",
          "173:  assert.Equal(desiredStatus, dout2.Status)",
          "174:  assert.Equal(desiredStatusDescription, dout2.StatusDescription)",
          "178:  assert.Nil(err)",
          "179:  assert.NotNil(evalOut)",
          "180:  assert.Equal(index, evalOut.ModifyIndex)",
          "",
          "[Added Lines]",
          "113:  must.NoError(t, err)",
          "118:  must.NoError(t, err)",
          "119:  must.NotNil(t, allocOut)",
          "122:  must.NoError(t, err)",
          "123:  must.NotNil(t, deploymentOut)",
          "127:  must.NoError(t, err)",
          "128:  must.NotNil(t, index)",
          "133:  must.NoError(t, err)",
          "134:  must.NotNil(t, allocOut)",
          "135:  must.True(t, allocOut.CreateTime > 0)",
          "136:  must.True(t, allocOut.ModifyTime > 0)",
          "137:  must.Eq(t, allocOut.CreateTime, allocOut.ModifyTime)",
          "141:  must.NoError(t, err)",
          "142:  must.NotNil(t, dout)",
          "146:  must.NoError(t, err)",
          "147:  must.NotNil(t, dout2)",
          "148:  must.Eq(t, desiredStatus, dout2.Status)",
          "149:  must.Eq(t, desiredStatusDescription, dout2.StatusDescription)",
          "153:  must.NoError(t, err)",
          "154:  must.NotNil(t, evalOut)",
          "155:  must.Eq(t, index, evalOut.ModifyIndex)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:  job := allocEvict.Job",
          "187:  allocEvict.Job = nil",
          "188:  alloc2 := mock.Alloc()",
          "190:  planRes = &structs.PlanResult{",
          "191:   NodeUpdate: map[string][]*structs.Allocation{",
          "192:    node.ID: {allocEvict},",
          "",
          "[Removed Lines]",
          "189:  s1.State().UpsertJobSummary(1500, mock.JobSummary(alloc2.JobID))",
          "",
          "[Added Lines]",
          "164:  must.NoError(t, s1.State().UpsertJobSummary(1500, mock.JobSummary(alloc2.JobID)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "200:  snap, err = s1.State().Snapshot()",
          "204:  plan = &structs.Plan{",
          "",
          "[Removed Lines]",
          "201:  assert.Nil(err)",
          "",
          "[Added Lines]",
          "176:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206:   EvalID: eval.ID,",
          "207:  }",
          "208:  future, err = s1.applyPlan(plan, planRes, snap)",
          "212:  out, _ := snap.AllocByID(ws, allocEvict.ID)",
          "213:  if out.DesiredStatus != structs.AllocDesiredStatusEvict && out.DesiredStatus != structs.AllocDesiredStatusStop {",
          "215:  }",
          "218:  index, err = planWaitFuture(future)",
          "223:  allocOut, err = s1.fsm.State().AllocByID(ws, alloc.ID)",
          "225:  if allocOut.DesiredStatus != structs.AllocDesiredStatusEvict && allocOut.DesiredStatus != structs.AllocDesiredStatusStop {",
          "227:  }",
          "233:  allocOut, err = s1.fsm.State().AllocByID(ws, alloc2.ID)",
          "239:  evalOut, err = fsmState.EvalByID(ws, eval.ID)",
          "243: }",
          "",
          "[Removed Lines]",
          "209:  assert.Nil(err)",
          "214:   assert.Equal(structs.AllocDesiredStatusEvict, out.DesiredStatus)",
          "219:  assert.Nil(err)",
          "220:  assert.NotEqual(0, index)",
          "224:  assert.Nil(err)",
          "226:   assert.Equal(structs.AllocDesiredStatusEvict, allocOut.DesiredStatus)",
          "229:  assert.NotNil(allocOut.Job)",
          "230:  assert.True(allocOut.ModifyTime > 0)",
          "234:  assert.Nil(err)",
          "235:  assert.NotNil(allocOut)",
          "236:  assert.NotNil(allocOut.Job)",
          "240:  assert.Nil(err)",
          "241:  assert.NotNil(evalOut)",
          "242:  assert.Equal(index, evalOut.ModifyIndex)",
          "",
          "[Added Lines]",
          "184:  must.NoError(t, err)",
          "189:   must.Eq(t, structs.AllocDesiredStatusEvict, out.DesiredStatus)",
          "194:  must.NoError(t, err)",
          "195:  must.NotEq(t, 0, index)",
          "199:  must.NoError(t, err)",
          "201:   must.Eq(t, structs.AllocDesiredStatusEvict, allocOut.DesiredStatus)",
          "204:  must.NotNil(t, allocOut.Job)",
          "205:  must.True(t, allocOut.ModifyTime > 0)",
          "209:  must.NoError(t, err)",
          "210:  must.NotNil(t, allocOut)",
          "211:  must.NotNil(t, allocOut.Job)",
          "215:  must.NoError(t, err)",
          "216:  must.NotNil(t, evalOut)",
          "217:  must.Eq(t, index, evalOut.ModifyIndex)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "289:   ID:                    preemptedAlloc.ID,",
          "290:   PreemptedByAllocation: alloc.ID,",
          "291:  }",
          "295:  eval := mock.Eval()",
          "296:  eval.JobID = alloc.JobID",
          "",
          "[Removed Lines]",
          "292:  s1.State().UpsertJobSummary(1000, mock.JobSummary(alloc.JobID))",
          "293:  s1.State().UpsertAllocs(structs.MsgTypeTestSetup, 1100, []*structs.Allocation{stoppedAlloc, preemptedAlloc})",
          "",
          "[Added Lines]",
          "267:  must.NoError(t, s1.State().UpsertJobSummary(1000, mock.JobSummary(alloc.JobID)))",
          "268:  must.NoError(t, s1.State().UpsertAllocs(structs.MsgTypeTestSetup, 1100, []*structs.Allocation{stoppedAlloc, preemptedAlloc}))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "298:   t.Fatalf(\"err: %v\", err)",
          "299:  }",
          "302:  planRes := &structs.PlanResult{",
          "303:   NodeAllocation: map[string][]*structs.Allocation{",
          "304:    node.ID: {alloc},",
          "",
          "[Removed Lines]",
          "301:  timestampBeforeCommit := time.Now().UTC().UnixNano()",
          "",
          "[Added Lines]",
          "277:  timestampBeforeCommit := time.Now().UnixNano()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "317:  snap, err := s1.State().Snapshot()",
          "323:  plan := &structs.Plan{",
          "",
          "[Removed Lines]",
          "318:  if err != nil {",
          "319:   t.Fatalf(\"err: %v\", err)",
          "320:  }",
          "",
          "[Added Lines]",
          "294:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "327:   EvalID:            eval.ID,",
          "328:  }",
          "334:  future, err := s1.applyPlan(plan, planRes, snap)",
          "338:  ws := memdb.NewWatchSet()",
          "339:  allocOut, err := snap.AllocByID(ws, alloc.ID)",
          "343:  deploymentOut, err := snap.DeploymentByID(ws, plan.Deployment.ID)",
          "348:  index, err := planWaitFuture(future)",
          "353:  fsmState := s1.fsm.State()",
          "354:  allocOut, err = fsmState.AllocByID(ws, alloc.ID)",
          "362:  updatedStoppedAlloc, err := fsmState.AllocByID(ws, stoppedAlloc.ID)",
          "371:  updatedPreemptedAlloc, err := fsmState.AllocByID(ws, preemptedAlloc.ID)",
          "376:   \"Preempted by alloc ID \"+preemptedAllocDiff.PreemptedByAllocation)",
          "380:  dout, err := fsmState.DeploymentByID(ws, plan.Deployment.ID)",
          "385:  dout2, err := fsmState.DeploymentByID(ws, oldDeployment.ID)",
          "392:  evalOut, err := fsmState.EvalByID(ws, eval.ID)",
          "396: }",
          "398: func TestPlanApply_signAllocIdentities(t *testing.T) {",
          "",
          "[Removed Lines]",
          "330:  require := require.New(t)",
          "331:  assert := assert.New(t)",
          "335:  require.NoError(err)",
          "340:  require.NoError(err)",
          "341:  require.NotNil(allocOut)",
          "344:  require.NoError(err)",
          "345:  require.NotNil(deploymentOut)",
          "349:  require.NoError(err)",
          "350:  assert.NotEqual(0, index)",
          "355:  require.NoError(err)",
          "356:  require.NotNil(allocOut)",
          "357:  assert.True(allocOut.CreateTime > 0)",
          "358:  assert.True(allocOut.ModifyTime > 0)",
          "359:  assert.Equal(allocOut.CreateTime, allocOut.ModifyTime)",
          "363:  require.NoError(err)",
          "364:  require.NotNil(updatedStoppedAlloc)",
          "365:  assert.True(updatedStoppedAlloc.ModifyTime > timestampBeforeCommit)",
          "366:  assert.Equal(updatedStoppedAlloc.DesiredDescription, stoppedAllocDiff.DesiredDescription)",
          "367:  assert.Equal(updatedStoppedAlloc.ClientStatus, stoppedAllocDiff.ClientStatus)",
          "368:  assert.Equal(updatedStoppedAlloc.DesiredStatus, structs.AllocDesiredStatusStop)",
          "372:  require.NoError(err)",
          "373:  require.NotNil(updatedPreemptedAlloc)",
          "374:  assert.True(updatedPreemptedAlloc.ModifyTime > timestampBeforeCommit)",
          "375:  assert.Equal(updatedPreemptedAlloc.DesiredDescription,",
          "377:  assert.Equal(updatedPreemptedAlloc.DesiredStatus, structs.AllocDesiredStatusEvict)",
          "381:  require.NoError(err)",
          "382:  require.NotNil(dout)",
          "386:  require.NoError(err)",
          "387:  require.NotNil(dout2)",
          "388:  assert.Equal(desiredStatus, dout2.Status)",
          "389:  assert.Equal(desiredStatusDescription, dout2.StatusDescription)",
          "393:  require.NoError(err)",
          "394:  require.NotNil(evalOut)",
          "395:  assert.Equal(index, evalOut.ModifyIndex)",
          "",
          "[Added Lines]",
          "306:  must.NoError(t, err)",
          "311:  must.NoError(t, err)",
          "312:  must.NotNil(t, allocOut)",
          "315:  must.NoError(t, err)",
          "316:  must.NotNil(t, deploymentOut)",
          "320:  must.NoError(t, err)",
          "321:  must.NotEq(t, 0, index)",
          "326:  must.NoError(t, err)",
          "327:  must.NotNil(t, allocOut)",
          "328:  must.True(t, allocOut.CreateTime > 0)",
          "329:  must.True(t, allocOut.ModifyTime > 0)",
          "330:  must.Eq(t, allocOut.CreateTime, allocOut.ModifyTime)",
          "334:  must.NoError(t, err)",
          "335:  must.NotNil(t, updatedStoppedAlloc)",
          "336:  must.True(t, updatedStoppedAlloc.ModifyTime > timestampBeforeCommit)",
          "337:  must.Eq(t, updatedStoppedAlloc.DesiredDescription, stoppedAllocDiff.DesiredDescription)",
          "338:  must.Eq(t, updatedStoppedAlloc.ClientStatus, stoppedAllocDiff.ClientStatus)",
          "339:  must.Eq(t, updatedStoppedAlloc.DesiredStatus, structs.AllocDesiredStatusStop)",
          "343:  must.NoError(t, err)",
          "344:  must.NotNil(t, updatedPreemptedAlloc)",
          "345:  must.True(t, updatedPreemptedAlloc.ModifyTime > timestampBeforeCommit)",
          "346:  must.Eq(t, updatedPreemptedAlloc.DesiredDescription,",
          "348:  must.Eq(t, updatedPreemptedAlloc.DesiredStatus, structs.AllocDesiredStatusEvict)",
          "352:  must.NoError(t, err)",
          "353:  must.NotNil(t, dout)",
          "357:  must.NoError(t, err)",
          "358:  must.NotNil(t, dout2)",
          "359:  must.Eq(t, desiredStatus, dout2.Status)",
          "360:  must.Eq(t, desiredStatusDescription, dout2.StatusDescription)",
          "364:  must.NoError(t, err)",
          "365:  must.NotNil(t, evalOut)",
          "366:  must.Eq(t, index, evalOut.ModifyIndex)",
          "",
          "---------------"
        ],
        "nomad/server.go||nomad/server.go": [
          "File: nomad/server.go -> nomad/server.go"
        ],
        "nomad/state/state_store.go||nomad/state/state_store.go": [
          "File: nomad/state/state_store.go -> nomad/state/state_store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:  if len(results.DeploymentUpdates) != 0 {",
          "419:  }",
          "421:  if results.EvalID != \"\" {",
          "",
          "[Removed Lines]",
          "418:   s.upsertDeploymentUpdates(index, results.DeploymentUpdates, txn)",
          "",
          "[Added Lines]",
          "418:   s.upsertDeploymentUpdates(index, results.UpdatedAt, results.DeploymentUpdates, txn)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:  for _, u := range updates {",
          "520:   if err := s.updateDeploymentStatusImpl(index, u, txn); err != nil {",
          "521:    return err",
          "",
          "[Removed Lines]",
          "518: func (s *StateStore) upsertDeploymentUpdates(index uint64, updates []*structs.DeploymentStatusUpdate, txn *txn) error {",
          "",
          "[Added Lines]",
          "518: func (s *StateStore) upsertDeploymentUpdates(index uint64, now int64, updates []*structs.DeploymentStatusUpdate, txn *txn) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2779: }",
          "2783:  txn := s.db.WriteTxn(index)",
          "2784:  defer txn.Abort()",
          "",
          "[Removed Lines]",
          "2782: func (s *StateStore) CSIVolumeClaim(index uint64, namespace, id string, claim *structs.CSIVolumeClaim) error {",
          "",
          "[Added Lines]",
          "2782: func (s *StateStore) CSIVolumeClaim(index uint64, now int64, namespace, id string, claim *structs.CSIVolumeClaim) error {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2805:   }",
          "2806:   if alloc == nil {",
          "2807:    s.logger.Error(\"AllocByID failed to find alloc\", \"alloc_id\", claim.AllocationID)",
          "2811:   }",
          "2812:  }",
          "",
          "[Removed Lines]",
          "2808:    if err != nil {",
          "2809:     return fmt.Errorf(structs.ErrUnknownAllocationPrefix)",
          "2810:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2831:  }",
          "2833:  volume.ModifyIndex = index",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2831:  volume.ModifyTime = now",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3174:  plug.ModifyIndex = index",
          "3175:  if existing != nil {",
          "3176:   plug.CreateIndex = existing.(*structs.CSIPlugin).CreateIndex",
          "3177:  }",
          "3179:  err = txn.Insert(\"csi_plugins\", plug)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3175:   plug.CreateTime = existing.(*structs.CSIPlugin).CreateTime",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4866:  copy.Status = u.Status",
          "4867:  copy.StatusDescription = u.StatusDescription",
          "4868:  copy.ModifyIndex = index",
          "4871:  if err := txn.Insert(\"deployment\", copy); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4868:  copy.ModifyTime = u.UpdatedAt",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5125:   copy.StatusDescription = structs.DeploymentStatusDescriptionRunning",
          "5126:  }",
          "5129:  if err := s.upsertDeploymentImpl(index, copy, txn); err != nil {",
          "5130:   return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5129:  copy.ModifyTime = req.PromotedAt",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5199:    copy.DeploymentStatus.Healthy = pointer.Of(healthy)",
          "5200:    copy.DeploymentStatus.Timestamp = ts",
          "5201:    copy.DeploymentStatus.ModifyIndex = index",
          "5202:    copy.ModifyIndex = index",
          "5204:    if err := s.updateDeploymentWithAlloc(index, copy, old, txn); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5205:    copy.ModifyTime = req.Timestamp.UnixNano()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5972:  deploymentCopy := deployment.Copy()",
          "5973:  deploymentCopy.ModifyIndex = index",
          "5975:  dstate := deploymentCopy.TaskGroups[alloc.TaskGroup]",
          "5976:  dstate.PlacedAllocs += placed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5978:  deploymentCopy.ModifyTime = alloc.ModifyTime",
          "",
          "---------------"
        ],
        "nomad/state/state_store_test.go||nomad/state/state_store_test.go": [
          "File: nomad/state/state_store_test.go -> nomad/state/state_store_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:  }",
          "194:  require := require.New(t)",
          "196:  require.NoError(state.UpsertJob(structs.MsgTypeTestSetup, 999, nil, job))",
          "",
          "[Removed Lines]",
          "195:  require.NoError(state.UpsertAllocs(structs.MsgTypeTestSetup, 900, []*structs.Allocation{stoppedAlloc, preemptedAlloc}))",
          "",
          "[Added Lines]",
          "195:  require.NoError(state.UpsertAllocs(",
          "196:   structs.MsgTypeTestSetup, 900, []*structs.Allocation{stoppedAlloc, preemptedAlloc}))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3986:  require.NoError(t, err)",
          "3987:  defer state.DeleteNode(structs.MsgTypeTestSetup, 9999, []string{pluginID})",
          "3989:  index++",
          "3990:  err = state.UpsertAllocs(structs.MsgTypeTestSetup, index, []*structs.Allocation{alloc})",
          "3991:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3990:  now := time.Now().UnixNano()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4086:  }",
          "4088:  index++",
          "4090:  require.NoError(t, err)",
          "4091:  index++",
          "4093:  require.NoError(t, err)",
          "4095:  ws = memdb.NewWatchSet()",
          "",
          "[Removed Lines]",
          "4089:  err = state.CSIVolumeClaim(index, ns, vol0, claim0)",
          "4092:  err = state.CSIVolumeClaim(index, ns, vol0, claim1)",
          "",
          "[Added Lines]",
          "4092:  err = state.CSIVolumeClaim(index, now, ns, vol0, claim0)",
          "4095:  err = state.CSIVolumeClaim(index, now, ns, vol0, claim1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4101:  claim2 := new(structs.CSIVolumeClaim)",
          "4103:  claim2.Mode = u",
          "4105:  require.NoError(t, err)",
          "4106:  ws = memdb.NewWatchSet()",
          "4107:  iter, err = state.CSIVolumesByPluginID(ws, ns, \"\", \"minnie\")",
          "",
          "[Removed Lines]",
          "4104:  err = state.CSIVolumeClaim(2, ns, vol0, claim2)",
          "",
          "[Added Lines]",
          "4107:  err = state.CSIVolumeClaim(2, now, ns, vol0, claim2)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4129:  claim3 := new(structs.CSIVolumeClaim)",
          "4131:  claim3.State = structs.CSIVolumeClaimStateReadyToFree",
          "4133:  require.NoError(t, err)",
          "4134:  index++",
          "4135:  claim1.Mode = u",
          "4136:  claim1.State = structs.CSIVolumeClaimStateReadyToFree",
          "4138:  require.NoError(t, err)",
          "4140:  index++",
          "",
          "[Removed Lines]",
          "4132:  err = state.CSIVolumeClaim(index, ns, vol0, claim3)",
          "4137:  err = state.CSIVolumeClaim(index, ns, vol0, claim1)",
          "",
          "[Added Lines]",
          "4135:  err = state.CSIVolumeClaim(index, now, ns, vol0, claim3)",
          "4140:  err = state.CSIVolumeClaim(index, now, ns, vol0, claim1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7438:  alloc2.Namespace = ns2.Name",
          "7440:  require.NoError(t, state.UpsertNamespaces(998, []*structs.Namespace{ns1, ns2}))",
          "7443:  gatherAllocs := func(iter memdb.ResultIterator) []*structs.Allocation {",
          "7444:   var allocs []*structs.Allocation",
          "",
          "[Removed Lines]",
          "7441:  require.NoError(t, state.UpsertAllocs(structs.MsgTypeTestSetup, 1000, []*structs.Allocation{alloc1, alloc2}))",
          "",
          "[Added Lines]",
          "7444:  require.NoError(t, state.UpsertAllocs(",
          "7445:   structs.MsgTypeTestSetup, 1000, []*structs.Allocation{alloc1, alloc2}))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8223:  ci.Parallel(t)",
          "8225:  state := testStateStore(t)",
          "8228:  job := mock.Job()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8230:  now := time.Now().UnixNano()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8231:  }",
          "8235:  if err := state.UpsertDeployment(2, d); err != nil {",
          "8236:   t.Fatalf(\"bad: %v\", err)",
          "8237:  }",
          "",
          "[Removed Lines]",
          "8234:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "8239:  d := structs.NewDeployment(job, 50, now)",
          "",
          "---------------"
        ],
        "nomad/state/testing.go||nomad/state/testing.go": [
          "File: nomad/state/testing.go -> nomad/state/testing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     SupportsCreateDeleteSnapshot:     true,",
          "93:     SupportsListSnapshots:            true,",
          "94:    },",
          "95:   },",
          "96:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:    UpdateTime: time.Now().Add(-6 * time.Hour),",
          "",
          "---------------"
        ],
        "nomad/structs/csi.go||nomad/structs/csi.go": [
          "File: nomad/structs/csi.go -> nomad/structs/csi.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:  CreateIndex uint64",
          "315:  ModifyIndex uint64",
          "316: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:  CreateTime int64",
          "319:  ModifyTime int64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:  CreateIndex uint64",
          "366:  ModifyIndex uint64",
          "367: }",
          "370: func NewCSIVolume(volumeID string, index uint64) *CSIVolume {",
          "371:  out := &CSIVolume{",
          "372:   ID:          volumeID,",
          "373:   CreateIndex: index,",
          "374:   ModifyIndex: index,",
          "375:  }",
          "377:  out.newStructs()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  CreateTime int64",
          "374:  ModifyTime int64",
          "379:  now := time.Now().UnixNano()",
          "384:   CreateTime:  now,",
          "385:   ModifyTime:  now,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421:   ResourceExhausted:   v.ResourceExhausted,",
          "422:   CreateIndex:         v.CreateIndex,",
          "423:   ModifyIndex:         v.ModifyIndex,",
          "424:  }",
          "425: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:   CreateTime:          v.CreateTime,",
          "436:   ModifyTime:          v.ModifyTime,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "843: type CSIVolumeRegisterRequest struct {",
          "845:  WriteRequest",
          "846: }",
          "",
          "[Removed Lines]",
          "844:  Volumes []*CSIVolume",
          "",
          "[Added Lines]",
          "857:  Volumes   []*CSIVolume",
          "858:  Timestamp int64 // UnixNano",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "860: }",
          "862: type CSIVolumeCreateRequest struct {",
          "864:  WriteRequest",
          "865: }",
          "",
          "[Removed Lines]",
          "863:  Volumes []*CSIVolume",
          "",
          "[Added Lines]",
          "877:  Volumes   []*CSIVolume",
          "878:  Timestamp int64 // UnixNano",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "917:  AccessMode     CSIVolumeAccessMode",
          "918:  AttachmentMode CSIVolumeAttachmentMode",
          "919:  State          CSIVolumeClaimState",
          "920:  WriteRequest",
          "921: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "935:  Timestamp      int64 // UnixNano",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1098:  CreateIndex uint64",
          "1099:  ModifyIndex uint64",
          "1100: }",
          "1103: func NewCSIPlugin(id string, index uint64) *CSIPlugin {",
          "1104:  out := &CSIPlugin{",
          "1105:   ID:          id,",
          "1106:   CreateIndex: index,",
          "1107:   ModifyIndex: index,",
          "1108:  }",
          "1110:  out.newStructs()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1118:  CreateTime int64",
          "1119:  ModifyTime int64",
          "1124:  now := time.Now().UnixNano()",
          "1129:   CreateTime:  now,",
          "1130:   ModifyTime:  now,",
          "",
          "---------------"
        ],
        "nomad/structs/structs.go||nomad/structs/structs.go": [
          "File: nomad/structs/structs.go -> nomad/structs/structs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1382:  Groups []string",
          "1384:  WriteRequest",
          "1385: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1385:  PromotedAt int64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10630:  CreateIndex uint64",
          "10631:  ModifyIndex uint64",
          "10632: }",
          "10636:  return &Deployment{",
          "10637:   ID:                 uuid.Generate(),",
          "10638:   Namespace:          job.Namespace,",
          "",
          "[Removed Lines]",
          "10635: func NewDeployment(job *Job, evalPriority int) *Deployment {",
          "",
          "[Added Lines]",
          "10637:  CreateTime int64",
          "10638:  ModifyTime int64",
          "10642: func NewDeployment(job *Job, evalPriority int, now int64) *Deployment {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10646:   StatusDescription:  DeploymentStatusDescriptionRunning,",
          "10647:   TaskGroups:         make(map[string]*DeploymentState, len(job.TaskGroups)),",
          "10648:   EvalPriority:       evalPriority,",
          "10649:  }",
          "10650: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10656:   CreateTime:         now,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10827:  StatusDescription string",
          "10828: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10838:  UpdatedAt int64",
          "",
          "---------------"
        ],
        "nomad/system_endpoint_test.go||nomad/system_endpoint_test.go": [
          "File: nomad/system_endpoint_test.go -> nomad/system_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"fmt\"",
          "8:  \"reflect\"",
          "9:  \"testing\"",
          "11:  memdb \"github.com/hashicorp/go-memdb\"",
          "12:  msgpackrpc \"github.com/hashicorp/net-rpc-msgpackrpc/v2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"time\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "16:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "17:  \"github.com/hashicorp/nomad/testutil\"",
          "18:  \"github.com/stretchr/testify/assert\"",
          "19: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"github.com/shoenig/test/must\"",
          "20:  \"github.com/shoenig/test/wait\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:  job := mock.Job()",
          "32:  job.Type = structs.JobTypeBatch",
          "33:  job.Stop = true",
          "38:  eval := mock.Eval()",
          "39:  eval.Status = structs.EvalStatusComplete",
          "40:  eval.JobID = job.ID",
          "46:  req := &structs.GenericRequest{",
          "",
          "[Removed Lines]",
          "34:  if err := state.UpsertJob(structs.MsgTypeTestSetup, 1000, nil, job); err != nil {",
          "35:   t.Fatalf(\"UpsertJob() failed: %v\", err)",
          "36:  }",
          "41:  if err := state.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval}); err != nil {",
          "42:   t.Fatalf(\"UpsertEvals() failed: %v\", err)",
          "43:  }",
          "",
          "[Added Lines]",
          "38:  job.SubmitTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "39:  must.NoError(t, state.UpsertJob(structs.MsgTypeTestSetup, 1000, nil, job))",
          "45:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "46:  must.NoError(t, state.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:   },",
          "50:  }",
          "51:  var resp structs.GenericResponse",
          "58:   ws := memdb.NewWatchSet()",
          "59:   exist, err := state.JobByID(ws, job.Namespace, job.ID)",
          "",
          "[Removed Lines]",
          "52:  if err := msgpackrpc.CallWithCodec(codec, \"System.GarbageCollect\", req, &resp); err != nil {",
          "53:   t.Fatalf(\"expect err\")",
          "54:  }",
          "56:  testutil.WaitForResult(func() (bool, error) {",
          "",
          "[Added Lines]",
          "55:  must.NoError(t, msgpackrpc.CallWithCodec(codec, \"System.GarbageCollect\", req, &resp))",
          "57:  must.Wait(t, wait.InitialSuccess(wait.TestFunc(func() (bool, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "64:    return false, fmt.Errorf(\"job %+v wasn't garbage collected\", job)",
          "65:   }",
          "66:   return true, nil",
          "70: }",
          "72: func TestSystemEndpoint_GarbageCollect_ACL(t *testing.T) {",
          "",
          "[Removed Lines]",
          "67:  }, func(err error) {",
          "68:   t.Fatalf(\"err: %s\", err)",
          "69:  })",
          "",
          "[Added Lines]",
          "68:  }), wait.Timeout(3*time.Second)))",
          "",
          "---------------"
        ],
        "nomad/timetable.go||nomad/timetable.go": [
          "File: nomad/timetable.go -> nomad/timetable.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/timetable_test.go||nomad/timetable_test.go": [
          "File: nomad/timetable_test.go -> nomad/timetable_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/volumewatcher/volumes_watcher_test.go||nomad/volumewatcher/volumes_watcher_test.go": [
          "File: nomad/volumewatcher/volumes_watcher_test.go -> nomad/volumewatcher/volumes_watcher_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   State: structs.CSIVolumeClaimStateNodeDetached,",
          "49:  }",
          "50:  index++",
          "52:  require.NoError(t, err)",
          "53:  require.Eventually(t, func() bool {",
          "54:   watcher.wlock.RLock()",
          "",
          "[Removed Lines]",
          "51:  err = srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID, claim)",
          "",
          "[Added Lines]",
          "51:  err = srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID, claim)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   State:        structs.CSIVolumeClaimStateUnpublishing,",
          "128:  }",
          "129:  index++",
          "131:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "130:  err = srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID, claim)",
          "",
          "[Added Lines]",
          "130:  err = srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID, claim)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:  }",
          "199:  index++",
          "201:  require.NoError(t, err)",
          "202:  claim.AllocationID = alloc2.ID",
          "203:  index++",
          "205:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "200:  err = srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID, claim)",
          "204:  err = srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID, claim)",
          "",
          "[Added Lines]",
          "200:  err = srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID, claim)",
          "204:  err = srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID, claim)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:   NodeID:       node.ID,",
          "211:  }",
          "212:  index++",
          "214:  require.NoError(t, err)",
          "216:  ws := memdb.NewWatchSet()",
          "",
          "[Removed Lines]",
          "213:  err = srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID, claim)",
          "",
          "[Added Lines]",
          "213:  err = srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID, claim)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:  require.NoError(t, err)",
          "226:  index++",
          "227:  claim.State = structs.CSIVolumeClaimStateReadyToFree",
          "229:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "228:  err = srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID, claim)",
          "",
          "[Added Lines]",
          "228:  err = srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID, claim)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272:  index++",
          "274:   &structs.CSIVolumeClaim{",
          "275:    Mode:  structs.CSIVolumeClaimGC,",
          "276:    State: structs.CSIVolumeClaimStateReadyToFree,",
          "",
          "[Removed Lines]",
          "273:  must.NoError(t, srv.State().CSIVolumeClaim(index, vol.Namespace, vol.ID,",
          "",
          "[Added Lines]",
          "273:  must.NoError(t, srv.State().CSIVolumeClaim(index, time.Now().UnixNano(), vol.Namespace, vol.ID,",
          "",
          "---------------"
        ],
        "scheduler/reconcile.go||scheduler/reconcile.go": [
          "File: scheduler/reconcile.go -> scheduler/reconcile.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "997:  if a.deployment == nil {",
          "999:   a.result.deployment = a.deployment",
          "1000:  }",
          "",
          "[Removed Lines]",
          "998:   a.deployment = structs.NewDeployment(a.job, a.evalPriority)",
          "",
          "[Added Lines]",
          "998:   a.deployment = structs.NewDeployment(a.job, a.evalPriority, a.now.UnixNano())",
          "",
          "---------------"
        ],
        "scheduler/reconcile_test.go||scheduler/reconcile_test.go": [
          "File: scheduler/reconcile_test.go -> scheduler/reconcile_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1625:   }",
          "1626:  }",
          "1629:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "1630:   DesiredTotal: 10,",
          "1631:  }",
          "",
          "[Removed Lines]",
          "1628:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "1628:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2384:  job2 := job.Copy()",
          "2385:  job2.Version++",
          "2388:  d.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "2389:  s := &structs.DeploymentState{",
          "2390:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "2387:  d := structs.NewDeployment(job2, 50)",
          "",
          "[Added Lines]",
          "2387:  d := structs.NewDeployment(job2, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2491:  job2 := job.Copy()",
          "2492:  job2.Version++",
          "2495:  d.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "2496:  s := &structs.DeploymentState{",
          "2497:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "2494:  d := structs.NewDeployment(job2, 50)",
          "",
          "[Added Lines]",
          "2494:  d := structs.NewDeployment(job2, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2619:  job2 := job.Copy()",
          "2620:  job2.Version++",
          "2623:  d.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "2624:  s := &structs.DeploymentState{",
          "2625:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "2622:  d := structs.NewDeployment(job2, 50)",
          "",
          "[Added Lines]",
          "2622:  d := structs.NewDeployment(job2, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2790:  job := mock.Job()",
          "2791:  job.Stop = true",
          "2795:  failed.Status = structs.DeploymentStatusFailed",
          "2797:  cases := []struct {",
          "",
          "[Removed Lines]",
          "2793:  running := structs.NewDeployment(job, 50)",
          "2794:  failed := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "2793:  running := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "2794:  failed := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2891:  job := mock.Job()",
          "2896:  failed.Status = structs.DeploymentStatusFailed",
          "",
          "[Removed Lines]",
          "2894:  running := structs.NewDeployment(job, 50)",
          "2895:  failed := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "2894:  running := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "2895:  failed := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2985:   nil, allocs, nil, \"\", 50, true)",
          "2986:  r := reconciler.Compute()",
          "2989:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "2990:   DesiredTotal: 10,",
          "2991:  }",
          "",
          "[Removed Lines]",
          "2988:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "2990:  d := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3031:   nil, allocs, nil, \"\", 50, true)",
          "3032:  r := reconciler.Compute()",
          "3035:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3036:   DesiredTotal: 10,",
          "3037:  }",
          "",
          "[Removed Lines]",
          "3034:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3038:  d := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3076:   nil, allocs, nil, \"\", 50, true)",
          "3077:  r := reconciler.Compute()",
          "3080:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3081:   DesiredTotal: 5,",
          "3082:  }",
          "",
          "[Removed Lines]",
          "3079:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3085:  d := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3167:  for _, c := range cases {",
          "3168:   t.Run(c.name, func(t *testing.T) {",
          "3171:    d.Status = c.deploymentStatus",
          "3172:    d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3173:     Promoted:        false,",
          "",
          "[Removed Lines]",
          "3170:    d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3176:    d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3248:  for _, c := range cases {",
          "3249:   t.Run(c.name, func(t *testing.T) {",
          "3252:    d.Status = c.deploymentStatus",
          "3253:    d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3254:     Promoted:     false,",
          "",
          "[Removed Lines]",
          "3251:    d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3257:    d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3314:  for _, c := range cases {",
          "3315:   t.Run(c.name, func(t *testing.T) {",
          "3318:    d.Status = c.deploymentStatus",
          "3319:    d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3320:     Promoted:     false,",
          "",
          "[Removed Lines]",
          "3317:    d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3323:    d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3374:  job.TaskGroups[0].Update = canaryUpdate",
          "3378:  s := &structs.DeploymentState{",
          "3379:   Promoted:        false,",
          "3380:   DesiredTotal:    10,",
          "",
          "[Removed Lines]",
          "3377:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3383:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3449:  job.TaskGroups[0].Update = canaryUpdate",
          "3453:  s := &structs.DeploymentState{",
          "3454:   Promoted:        false,",
          "3455:   DesiredTotal:    10,",
          "",
          "[Removed Lines]",
          "3452:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3458:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3525:  job.TaskGroups[0].Update = canaryUpdate",
          "3529:  s := &structs.DeploymentState{",
          "3530:   Promoted:        false,",
          "3531:   DesiredTotal:    10,",
          "",
          "[Removed Lines]",
          "3528:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3534:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3567:   allocs, nil, \"\", 50, true)",
          "3568:  r := reconciler.Compute()",
          "3571:  newD.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "3572:  newD.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3573:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "3570:  newD := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3578:  newD := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3623:   nil, allocs, nil, \"\", 50, true)",
          "3624:  r := reconciler.Compute()",
          "3627:  newD.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "3628:  newD.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3629:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "3626:  newD := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3636:  newD := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3674:   nil, allocs, nil, \"\", 50, true)",
          "3675:  r := reconciler.Compute()",
          "3678:  newD.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "3679:  state := &structs.DeploymentState{",
          "3680:   DesiredCanaries: 7,",
          "",
          "[Removed Lines]",
          "3677:  newD := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3689:  newD := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3728:   nil, allocs, nil, \"\", 50, true)",
          "3729:  r := reconciler.Compute()",
          "3732:  newD.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "3733:  state := &structs.DeploymentState{",
          "3734:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "3731:  newD := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3745:  newD := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3784:   nil, allocs, nil, \"\", 50, true)",
          "3785:  r := reconciler.Compute()",
          "3788:  newD.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "3789:  newD.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3790:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "3787:  newD := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3803:  newD := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3835:   nil, allocs, nil, \"\", 50, true)",
          "3836:  r := reconciler.Compute()",
          "3839:  newD.StatusDescription = structs.DeploymentStatusDescriptionRunningNeedsPromotion",
          "3840:  newD.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "3841:   DesiredCanaries: 2,",
          "",
          "[Removed Lines]",
          "3838:  newD := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3856:  newD := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3876:  }",
          "3880:  s := &structs.DeploymentState{",
          "3881:   Promoted:        false,",
          "3882:   DesiredTotal:    10,",
          "",
          "[Removed Lines]",
          "3879:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3897:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3946:  s := &structs.DeploymentState{",
          "3947:   Promoted:        true,",
          "3948:   DesiredTotal:    10,",
          "",
          "[Removed Lines]",
          "3945:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "3963:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4022:  s := &structs.DeploymentState{",
          "4023:   Promoted:        true,",
          "4024:   DesiredTotal:    2,",
          "",
          "[Removed Lines]",
          "4021:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4039:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4123:   t.Run(fmt.Sprintf(\"%d healthy\", c.healthy), func(t *testing.T) {",
          "4127:    d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4128:     Promoted:     true,",
          "4129:     DesiredTotal: 10,",
          "",
          "[Removed Lines]",
          "4126:    d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4144:    d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4195:  job.TaskGroups[0].Update = noCanaryUpdate",
          "4199:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4200:   Promoted:     true,",
          "4201:   DesiredTotal: 10,",
          "",
          "[Removed Lines]",
          "4198:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4216:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4282:  job.TaskGroups[0].Update = noCanaryUpdate",
          "4286:  d.Status = structs.DeploymentStatusFailed",
          "4287:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4288:   Promoted:     true,",
          "",
          "[Removed Lines]",
          "4285:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4303:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4367:  job := mock.Job()",
          "4368:  job.TaskGroups[0].Update = canaryUpdate",
          "4371:  d.Status = structs.DeploymentStatusSuccessful",
          "4372:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4373:   Promoted:        true,",
          "",
          "[Removed Lines]",
          "4370:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4388:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4421:  job := mock.Job()",
          "4422:  job.TaskGroups[0].Update = noCanaryUpdate",
          "4425:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4426:   DesiredTotal:  10,",
          "4427:   PlacedAllocs:  20,",
          "",
          "[Removed Lines]",
          "4424:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4442:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4489:  job.TaskGroups[1].Name = \"two\"",
          "4493:  d.Status = structs.DeploymentStatusFailed",
          "4494:  s0 := &structs.DeploymentState{",
          "4495:   Promoted:        true,",
          "",
          "[Removed Lines]",
          "4492:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4510:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4582:  job.TaskGroups[0].Update = noCanaryUpdate",
          "4586:  d.Status = structs.DeploymentStatusFailed",
          "4587:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4588:   Promoted:     true,",
          "",
          "[Removed Lines]",
          "4585:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4603:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4625:   d, allocs, nil, \"\", 50, true)",
          "4626:  r := reconciler.Compute()",
          "4629:  dnew.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4630:   DesiredTotal: 10,",
          "4631:  }",
          "",
          "[Removed Lines]",
          "4628:  dnew := structs.NewDeployment(jobNew, 50)",
          "",
          "[Added Lines]",
          "4648:  dnew := structs.NewDeployment(jobNew, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4653:  job := mock.Job()",
          "4654:  job.TaskGroups[0].Update = noCanaryUpdate",
          "4657:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4658:   Promoted:      true,",
          "4659:   DesiredTotal:  10,",
          "",
          "[Removed Lines]",
          "4656:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4676:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4715:  job.TaskGroups[0].Count = 30",
          "4719:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4720:   Promoted:     false,",
          "4721:   DesiredTotal: 30,",
          "",
          "[Removed Lines]",
          "4718:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4738:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4791:   nil, allocs, nil, \"\", 50, true)",
          "4792:  r := reconciler.Compute()",
          "4795:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4796:   DesiredTotal: 10,",
          "4797:  }",
          "",
          "[Removed Lines]",
          "4794:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4814:  d := structs.NewDeployment(job, 50, r.deployment.CreateTime)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4874:  tgName := job.TaskGroups[0].Name",
          "4875:  now := time.Now()",
          "4878:  d.Status = structs.DeploymentStatusFailed",
          "4879:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4880:   Promoted:     true,",
          "",
          "[Removed Lines]",
          "4877:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4897:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4934:  now := time.Now()",
          "4938:  d.Status = structs.DeploymentStatusRunning",
          "4939:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "4940:   Promoted:     false,",
          "",
          "[Removed Lines]",
          "4937:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "4957:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5010:  jobv2.Version = 2",
          "5011:  jobv2.TaskGroups[0].Meta = map[string]string{\"version\": \"2\"}",
          "5014:  state := &structs.DeploymentState{",
          "5015:   Promoted:      true,",
          "5016:   DesiredTotal:  3,",
          "",
          "[Removed Lines]",
          "5013:  d := structs.NewDeployment(jobv2, 50)",
          "",
          "[Added Lines]",
          "5033:  d := structs.NewDeployment(jobv2, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5092:  now := time.Now()",
          "5096:  d.Status = structs.DeploymentStatusSuccessful",
          "5097:  d.TaskGroups[job.TaskGroups[0].Name] = &structs.DeploymentState{",
          "5098:   Promoted:     false,",
          "",
          "[Removed Lines]",
          "5095:  d := structs.NewDeployment(job, 50)",
          "",
          "[Added Lines]",
          "5115:  d := structs.NewDeployment(job, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6182:    must.Eq(t, tc.deploymentState.PlacedAllocs, canariesConfigured, must.Sprintf(\"invalid canary configuration: expect %d got %d\", tc.deploymentState.PlacedAllocs, canariesConfigured))",
          "6185:    deployment.TaskGroups[updatedJob.TaskGroups[0].Name] = tc.deploymentState",
          "",
          "[Removed Lines]",
          "6184:    deployment := structs.NewDeployment(updatedJob, 50)",
          "",
          "[Added Lines]",
          "6204:    deployment := structs.NewDeployment(updatedJob, 50, time.Now().UnixNano())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6333:     if job.UsesDeployments() {",
          "6335:      deployment.Status = structs.DeploymentStatusInitializing",
          "6336:      deployment.StatusDescription = structs.DeploymentStatusDescriptionPendingForPeer",
          "6337:     }",
          "",
          "[Removed Lines]",
          "6334:      deployment = structs.NewDeployment(job, 100)",
          "",
          "[Added Lines]",
          "6354:      deployment = structs.NewDeployment(job, 100, time.Now().UnixNano())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4b0539436457269afa1772ec8fbcbc8bfcaa59e",
      "candidate_info": {
        "commit_hash": "b4b0539436457269afa1772ec8fbcbc8bfcaa59e",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/b4b0539436457269afa1772ec8fbcbc8bfcaa59e",
        "files": [
          "client/testing.go",
          "nomad/client_csi_endpoint_test.go"
        ],
        "message": "Backport of testing: RPC-only test client helper into release/1.9.x (#24372)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "client/testing.go||client/testing.go",
          "nomad/client_csi_endpoint_test.go||nomad/client_csi_endpoint_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/testing.go||client/testing.go": [
          "File: client/testing.go -> client/testing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"github.com/hashicorp/nomad/client/fingerprint\"",
          "14:  \"github.com/hashicorp/nomad/client/servers\"",
          "15:  \"github.com/hashicorp/nomad/client/serviceregistration/mock\"",
          "16:  agentconsul \"github.com/hashicorp/nomad/command/agent/consul\"",
          "17:  \"github.com/hashicorp/nomad/helper/pluginutils/catalog\"",
          "18:  \"github.com/hashicorp/nomad/helper/pluginutils/singleton\"",
          "19:  \"github.com/hashicorp/nomad/helper/pool\"",
          "20:  \"github.com/hashicorp/nomad/helper/testlog\"",
          "21:  testing \"github.com/mitchellh/go-testing-interface\"",
          "22: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/hashicorp/nomad/client/state\"",
          "23:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  conf, cleanup := config.TestClientConfig(t)",
          "99:  client.servers = servers.New(client.logger, client.shutdownCh, client)",
          "101:  client.rpcServer = rpc.NewServer()",
          "102:  for name, rpc := range rpcs {",
          "103:   client.rpcServer.RegisterName(name, rpc)",
          "104:  }",
          "106:  client.connPool = pool.NewPool(testlog.HCLogger(t), 10*time.Second, 10, nil)",
          "109:   ch := make(chan error)",
          "111:   go func() {",
          "112:    defer close(ch)",
          "113:    client.connPool.Shutdown()",
          "114:    client.shutdownGroup.Wait()",
          "115:    cleanup()",
          "116:   }()",
          "118:   select {",
          "119:   case <-ch:",
          "123:   }",
          "124:  }",
          "126:  go client.rpcConnListener()",
          "132:  client.shutdownGroup.Go(client.registerAndHeartbeat)",
          "135: }",
          "",
          "[Removed Lines]",
          "94: func TestRPCOnlyClient(t testing.T, srvAddr net.Addr, rpcs map[string]interface{}) (*Client, func() error, error) {",
          "95:  var err error",
          "98:  client := &Client{config: conf, logger: testlog.HCLogger(t)}",
          "108:  cancelFunc := func() error {",
          "120:    return nil",
          "121:   case <-time.After(1 * time.Minute):",
          "122:    return fmt.Errorf(\"timed out while shutting down client\")",
          "128:  _, err = client.SetServers([]string{srvAddr.String()})",
          "129:  if err != nil {",
          "130:   return nil, cancelFunc, fmt.Errorf(\"could not set servers: %v\", err)",
          "131:  }",
          "134:  return client, cancelFunc, nil",
          "",
          "[Added Lines]",
          "96: func TestRPCOnlyClient(t testing.T, cb func(c *config.Config), srvAddr net.Addr, rpcs map[string]any) (*Client, func()) {",
          "97:  t.Helper()",
          "99:  conf.StateDBFactory = state.GetStateDBFactory(true)",
          "100:  if cb != nil {",
          "101:   cb(conf)",
          "102:  }",
          "104:  client := &Client{config: conf, logger: testlog.HCLogger(t), shutdownCh: make(chan struct{})}",
          "106:  client.registeredCh = make(chan struct{})",
          "111:  client.heartbeatStop = newHeartbeatStop(",
          "112:   client.getAllocRunner, time.Second, client.logger, client.shutdownCh)",
          "114:  client.init()",
          "116:  cancelFunc := func() {",
          "122:    close(client.shutdownCh)",
          "129:    return",
          "130:   case <-time.After(5 * time.Second):",
          "131:    t.Error(\"timed out while shutting down client\")",
          "132:    return",
          "138:  _, err := client.SetServers([]string{srvAddr.String()})",
          "139:  must.NoError(t, err, must.Sprintf(\"could not set servers: %v\", err))",
          "143:  return client, cancelFunc",
          "",
          "---------------"
        ],
        "nomad/client_csi_endpoint_test.go||nomad/client_csi_endpoint_test.go": [
          "File: nomad/client_csi_endpoint_test.go -> nomad/client_csi_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "20:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "21:  \"github.com/hashicorp/nomad/testutil\"",
          "23: )",
          "",
          "[Removed Lines]",
          "22:  \"github.com/stretchr/testify/require\"",
          "",
          "[Added Lines]",
          "22:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: func TestClientCSIController_AttachVolume_Local(t *testing.T) {",
          "119:  ci.Parallel(t)",
          "124:  req := &cstructs.ClientCSIControllerAttachVolumeRequest{",
          "125:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "120:  require := require.New(t)",
          "121:  codec, cleanup := setupLocal(t)",
          "122:  defer cleanup()",
          "",
          "[Added Lines]",
          "120:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  var resp structs.GenericResponse",
          "129:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerAttachVolume\", req, &resp)",
          "132: }",
          "134: func TestClientCSIController_AttachVolume_Forwarded(t *testing.T) {",
          "135:  ci.Parallel(t)",
          "140:  req := &cstructs.ClientCSIControllerAttachVolumeRequest{",
          "141:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "130:  require.Error(err)",
          "131:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "136:  require := require.New(t)",
          "137:  codec, cleanup := setupForward(t)",
          "138:  defer cleanup()",
          "",
          "[Added Lines]",
          "128:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "133:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:  var resp structs.GenericResponse",
          "145:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerAttachVolume\", req, &resp)",
          "148: }",
          "150: func TestClientCSIController_DetachVolume_Local(t *testing.T) {",
          "151:  ci.Parallel(t)",
          "156:  req := &cstructs.ClientCSIControllerDetachVolumeRequest{",
          "157:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "146:  require.Error(err)",
          "147:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "152:  require := require.New(t)",
          "153:  codec, cleanup := setupLocal(t)",
          "154:  defer cleanup()",
          "",
          "[Added Lines]",
          "141:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "146:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:  var resp structs.GenericResponse",
          "161:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerDetachVolume\", req, &resp)",
          "164: }",
          "166: func TestClientCSIController_DetachVolume_Forwarded(t *testing.T) {",
          "167:  ci.Parallel(t)",
          "172:  req := &cstructs.ClientCSIControllerDetachVolumeRequest{",
          "173:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "162:  require.Error(err)",
          "163:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "168:  require := require.New(t)",
          "169:  codec, cleanup := setupForward(t)",
          "170:  defer cleanup()",
          "",
          "[Added Lines]",
          "154:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "159:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:  var resp structs.GenericResponse",
          "177:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerDetachVolume\", req, &resp)",
          "180: }",
          "182: func TestClientCSIController_ValidateVolume_Local(t *testing.T) {",
          "183:  ci.Parallel(t)",
          "188:  req := &cstructs.ClientCSIControllerValidateVolumeRequest{",
          "189:   VolumeID:           \"test\",",
          "",
          "[Removed Lines]",
          "178:  require.Error(err)",
          "179:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "184:  require := require.New(t)",
          "185:  codec, cleanup := setupLocal(t)",
          "186:  defer cleanup()",
          "",
          "[Added Lines]",
          "167:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "172:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:  var resp structs.GenericResponse",
          "194:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerValidateVolume\", req, &resp)",
          "197: }",
          "199: func TestClientCSIController_ValidateVolume_Forwarded(t *testing.T) {",
          "200:  ci.Parallel(t)",
          "205:  req := &cstructs.ClientCSIControllerValidateVolumeRequest{",
          "206:   VolumeID:           \"test\",",
          "",
          "[Removed Lines]",
          "195:  require.Error(err)",
          "196:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "201:  require := require.New(t)",
          "202:  codec, cleanup := setupForward(t)",
          "203:  defer cleanup()",
          "",
          "[Added Lines]",
          "181:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "186:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:  var resp structs.GenericResponse",
          "211:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerValidateVolume\", req, &resp)",
          "214: }",
          "216: func TestClientCSIController_CreateVolume_Local(t *testing.T) {",
          "217:  ci.Parallel(t)",
          "222:  req := &cstructs.ClientCSIControllerCreateVolumeRequest{",
          "223:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "212:  require.Error(err)",
          "213:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "218:  require := require.New(t)",
          "219:  codec, cleanup := setupLocal(t)",
          "220:  defer cleanup()",
          "",
          "[Added Lines]",
          "195:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "200:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "226:  var resp structs.GenericResponse",
          "227:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerCreateVolume\", req, &resp)",
          "230: }",
          "232: func TestClientCSIController_CreateVolume_Forwarded(t *testing.T) {",
          "233:  ci.Parallel(t)",
          "238:  req := &cstructs.ClientCSIControllerCreateVolumeRequest{",
          "239:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "228:  require.Error(err)",
          "229:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "234:  require := require.New(t)",
          "235:  codec, cleanup := setupForward(t)",
          "236:  defer cleanup()",
          "",
          "[Added Lines]",
          "208:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "213:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "242:  var resp structs.GenericResponse",
          "243:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerCreateVolume\", req, &resp)",
          "246: }",
          "248: func TestClientCSIController_DeleteVolume_Local(t *testing.T) {",
          "249:  ci.Parallel(t)",
          "254:  req := &cstructs.ClientCSIControllerDeleteVolumeRequest{",
          "255:   ExternalVolumeID:   \"test\",",
          "",
          "[Removed Lines]",
          "244:  require.Error(err)",
          "245:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "250:  require := require.New(t)",
          "251:  codec, cleanup := setupLocal(t)",
          "252:  defer cleanup()",
          "",
          "[Added Lines]",
          "221:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "226:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "259:  var resp structs.GenericResponse",
          "260:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerDeleteVolume\", req, &resp)",
          "263: }",
          "265: func TestClientCSIController_DeleteVolume_Forwarded(t *testing.T) {",
          "266:  ci.Parallel(t)",
          "271:  req := &cstructs.ClientCSIControllerDeleteVolumeRequest{",
          "272:   ExternalVolumeID:   \"test\",",
          "",
          "[Removed Lines]",
          "261:  require.Error(err)",
          "262:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "267:  require := require.New(t)",
          "268:  codec, cleanup := setupForward(t)",
          "269:  defer cleanup()",
          "",
          "[Added Lines]",
          "235:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "240:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "276:  var resp structs.GenericResponse",
          "277:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerDeleteVolume\", req, &resp)",
          "280: }",
          "282: func TestClientCSIController_ListVolumes_Local(t *testing.T) {",
          "283:  ci.Parallel(t)",
          "288:  req := &cstructs.ClientCSIControllerListVolumesRequest{",
          "289:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "278:  require.Error(err)",
          "279:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "284:  require := require.New(t)",
          "285:  codec, cleanup := setupLocal(t)",
          "286:  defer cleanup()",
          "",
          "[Added Lines]",
          "249:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "254:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "292:  var resp structs.GenericResponse",
          "293:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerListVolumes\", req, &resp)",
          "296: }",
          "298: func TestClientCSIController_ListVolumes_Forwarded(t *testing.T) {",
          "299:  ci.Parallel(t)",
          "304:  req := &cstructs.ClientCSIControllerListVolumesRequest{",
          "305:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "294:  require.Error(err)",
          "295:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "300:  require := require.New(t)",
          "301:  codec, cleanup := setupForward(t)",
          "302:  defer cleanup()",
          "",
          "[Added Lines]",
          "262:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "267:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "308:  var resp structs.GenericResponse",
          "309:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerListVolumes\", req, &resp)",
          "312: }",
          "314: func TestClientCSIController_CreateSnapshot_Local(t *testing.T) {",
          "315:  ci.Parallel(t)",
          "320:  req := &cstructs.ClientCSIControllerCreateSnapshotRequest{",
          "321:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "310:  require.Error(err)",
          "311:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "316:  require := require.New(t)",
          "317:  codec, cleanup := setupLocal(t)",
          "318:  defer cleanup()",
          "",
          "[Added Lines]",
          "275:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "280:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "324:  var resp structs.GenericResponse",
          "325:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerCreateSnapshot\", req, &resp)",
          "328: }",
          "330: func TestClientCSIController_CreateSnapshot_Forwarded(t *testing.T) {",
          "331:  ci.Parallel(t)",
          "336:  req := &cstructs.ClientCSIControllerCreateSnapshotRequest{",
          "337:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "326:  require.Error(err)",
          "327:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "332:  require := require.New(t)",
          "333:  codec, cleanup := setupForward(t)",
          "334:  defer cleanup()",
          "",
          "[Added Lines]",
          "288:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "293:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "340:  var resp structs.GenericResponse",
          "341:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerCreateSnapshot\", req, &resp)",
          "344: }",
          "346: func TestClientCSIController_DeleteSnapshot_Local(t *testing.T) {",
          "347:  ci.Parallel(t)",
          "352:  req := &cstructs.ClientCSIControllerDeleteSnapshotRequest{",
          "353:   ID:                 \"test\",",
          "",
          "[Removed Lines]",
          "342:  require.Error(err)",
          "343:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "348:  require := require.New(t)",
          "349:  codec, cleanup := setupLocal(t)",
          "350:  defer cleanup()",
          "",
          "[Added Lines]",
          "301:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "306:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "357:  var resp structs.GenericResponse",
          "358:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerDeleteSnapshot\", req, &resp)",
          "361: }",
          "363: func TestClientCSIController_DeleteSnapshot_Forwarded(t *testing.T) {",
          "364:  ci.Parallel(t)",
          "369:  req := &cstructs.ClientCSIControllerDeleteSnapshotRequest{",
          "370:   ID:                 \"test\",",
          "",
          "[Removed Lines]",
          "359:  require.Error(err)",
          "360:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "365:  require := require.New(t)",
          "366:  codec, cleanup := setupForward(t)",
          "367:  defer cleanup()",
          "",
          "[Added Lines]",
          "315:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "320:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "374:  var resp structs.GenericResponse",
          "375:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerDeleteSnapshot\", req, &resp)",
          "378: }",
          "380: func TestClientCSIController_ListSnapshots_Local(t *testing.T) {",
          "381:  ci.Parallel(t)",
          "386:  req := &cstructs.ClientCSIControllerListSnapshotsRequest{",
          "387:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "376:  require.Error(err)",
          "377:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "382:  require := require.New(t)",
          "383:  codec, cleanup := setupLocal(t)",
          "384:  defer cleanup()",
          "",
          "[Added Lines]",
          "329:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "334:  codec := setupLocal(t)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "390:  var resp structs.GenericResponse",
          "391:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerListSnapshots\", req, &resp)",
          "394: }",
          "396: func TestClientCSIController_ListSnapshots_Forwarded(t *testing.T) {",
          "397:  ci.Parallel(t)",
          "402:  req := &cstructs.ClientCSIControllerListSnapshotsRequest{",
          "403:   CSIControllerQuery: cstructs.CSIControllerQuery{PluginID: \"minnie\"},",
          "",
          "[Removed Lines]",
          "392:  require.Error(err)",
          "393:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "398:  require := require.New(t)",
          "399:  codec, cleanup := setupForward(t)",
          "400:  defer cleanup()",
          "",
          "[Added Lines]",
          "342:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "347:  codec := setupForward(t)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "406:  var resp structs.GenericResponse",
          "407:  err := msgpackrpc.CallWithCodec(codec, \"ClientCSI.ControllerListSnapshots\", req, &resp)",
          "410: }",
          "412: func TestClientCSI_NodeForControllerPlugin(t *testing.T) {",
          "",
          "[Removed Lines]",
          "408:  require.Error(err)",
          "409:  require.Contains(err.Error(), \"no plugins registered for type\")",
          "",
          "[Added Lines]",
          "355:  must.ErrorContains(t, err, \"no plugins registered for type\")",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "435:  node3.ID = uuid.Generate()",
          "437:  err := state.UpsertNode(structs.MsgTypeTestSetup, 1002, node1)",
          "439:  err = state.UpsertNode(structs.MsgTypeTestSetup, 1003, node2)",
          "441:  err = state.UpsertNode(structs.MsgTypeTestSetup, 1004, node3)",
          "444:  ws := memdb.NewWatchSet()",
          "446:  plugin, err := state.CSIPluginByID(ws, \"minnie\")",
          "449:  clientCSI := NewClientCSIEndpoint(srv, nil)",
          "450:  nodeIDs, err := clientCSI.clientIDsForController(plugin.ID)",
          "455: }",
          "461:  s1, cleanupS1 := TestServer(t, func(c *Config) { c.BootstrapExpect = 2 })",
          "462:  s2, cleanupS2 := TestServer(t, func(c *Config) { c.BootstrapExpect = 2 })",
          "463:  TestJoin(t, s1, s2)",
          "465:  testutil.WaitForLeader(t, s1.RPC)",
          "",
          "[Removed Lines]",
          "438:  require.NoError(t, err)",
          "440:  require.NoError(t, err)",
          "442:  require.NoError(t, err)",
          "447:  require.NoError(t, err)",
          "451:  require.NoError(t, err)",
          "452:  require.Equal(t, 1, len(nodeIDs))",
          "454:  require.Equal(t, nodeIDs[0], node1.ID)",
          "459: func setupForward(t *testing.T) (rpc.ClientCodec, func()) {",
          "",
          "[Added Lines]",
          "384:  must.NoError(t, err)",
          "386:  must.NoError(t, err)",
          "388:  must.NoError(t, err)",
          "393:  must.NoError(t, err)",
          "397:  must.NoError(t, err)",
          "398:  must.Len(t, 1, nodeIDs)",
          "400:  must.Eq(t, nodeIDs[0], node1.ID)",
          "405: func setupForward(t *testing.T) rpc.ClientCodec {",
          "409:  t.Cleanup(cleanupS1)",
          "410:  t.Cleanup(cleanupS2)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "469:  c1, cleanupC1 := client.TestClient(t, func(c *config.Config) {",
          "470:   c.Servers = []string{s1.config.RPCAddr.String()}",
          "471:  })",
          "474:  select {",
          "475:  case <-c1.Ready():",
          "476:  case <-time.After(10 * time.Second):",
          "480:   t.Fatal(\"client timedout on initialize\")",
          "481:  }",
          "483:  c2, cleanupC2 := client.TestClient(t, func(c *config.Config) {",
          "484:   c.Servers = []string{s2.config.RPCAddr.String()}",
          "485:  })",
          "486:  select {",
          "487:  case <-c2.Ready():",
          "488:  case <-time.After(10 * time.Second):",
          "493:   t.Fatal(\"client timedout on initialize\")",
          "494:  }",
          "",
          "[Removed Lines]",
          "477:   cleanupC1()",
          "478:   cleanupS1()",
          "479:   cleanupS2()",
          "489:   cleanupC1()",
          "490:   cleanupC2()",
          "491:   cleanupS1()",
          "492:   cleanupS2()",
          "",
          "[Added Lines]",
          "420:  t.Cleanup(func() { cleanupC1() })",
          "432:  t.Cleanup(func() { cleanupC2() })",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "520:  s1.fsm.state.UpsertNode(structs.MsgTypeTestSetup, 1000, node1)",
          "530: }",
          "534:  var err error",
          "535:  s1, cleanupS1 := TestServer(t, func(c *Config) { c.BootstrapExpect = 1 })",
          "537:  testutil.WaitForLeader(t, s1.RPC)",
          "538:  codec := rpcClient(t, s1)",
          "",
          "[Removed Lines]",
          "522:  cleanup := func() {",
          "523:   cleanupC1()",
          "524:   cleanupC2()",
          "525:   cleanupS2()",
          "526:   cleanupS1()",
          "527:  }",
          "529:  return codec, cleanup",
          "533: func setupLocal(t *testing.T) (rpc.ClientCodec, func()) {",
          "",
          "[Added Lines]",
          "465:  return codec",
          "469: func setupLocal(t *testing.T) rpc.ClientCodec {",
          "472:  t.Cleanup(cleanupS1)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "548:  mockCSI.NextDeleteSnapshotError = fmt.Errorf(\"no plugins registered for type\")",
          "549:  mockCSI.NextListExternalSnapshotsError = fmt.Errorf(\"no plugins registered for type\")",
          "555:   map[string]interface{}{\"CSI\": mockCSI},",
          "556:  )",
          "564:  node1 := c1.UpdateConfig(func(c *config.Config) {",
          "565:   c.Node.Attributes[\"nomad.version\"] = \"0.11.0\" // client RPCs not supported on early versions",
          "",
          "[Removed Lines]",
          "551:  c1, cleanupC1 := client.TestClientWithRPCs(t,",
          "552:   func(c *config.Config) {",
          "553:    c.Servers = []string{s1.config.RPCAddr.String()}",
          "554:   },",
          "558:  if err != nil {",
          "559:   cleanupC1()",
          "560:   cleanupS1()",
          "561:   require.NoError(t, err, \"could not setup test client\")",
          "562:  }",
          "",
          "[Added Lines]",
          "488:  c1, cleanupC1 := client.TestRPCOnlyClient(t, nil, s1.config.RPCAddr,",
          "491:  t.Cleanup(cleanupC1)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "571:  }",
          "572:  var resp structs.NodeUpdateResponse",
          "573:  err = c1.RPC(\"Node.Register\", req, &resp)",
          "580:  waitForNodes(t, s1, 1, 1)",
          "",
          "[Removed Lines]",
          "574:  if err != nil {",
          "575:   cleanupC1()",
          "576:   cleanupS1()",
          "577:   require.NoError(t, err, \"could not register client node\")",
          "578:  }",
          "",
          "[Added Lines]",
          "503:  must.NoError(t, err, must.Sprint(\"could not register client node\"))",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "594:  }).Node",
          "595:  s1.fsm.state.UpsertNode(structs.MsgTypeTestSetup, 1000, node1)",
          "603: }",
          "",
          "[Removed Lines]",
          "597:  cleanup := func() {",
          "598:   cleanupC1()",
          "599:   cleanupS1()",
          "600:  }",
          "602:  return codec, cleanup",
          "",
          "[Added Lines]",
          "522:  return codec",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "630:   }",
          "631:   return true, nil",
          "632:  }, func(err error) {",
          "634:  })",
          "635: }",
          "",
          "[Removed Lines]",
          "633:   require.NoError(t, err)",
          "",
          "[Added Lines]",
          "553:   must.NoError(t, err)",
          "",
          "---------------"
        ]
      }
    }
  ]
}