{
  "cve_id": "CVE-2023-35005",
  "cve_desc": "In Apache Airflow, some potentially sensitive values were being shown to the user in certain situations.\n\nThis vulnerability is mitigated by the fact configuration is not shown in the UI by default (only if `[webserver] expose_config` is set to `non-sensitive-only`), and not all uncensored values are actually sentitive.\n\n\nThis issue affects Apache Airflow: from 2.5.0 before 2.6.2. Users are recommended to update to version 2.6.2 or later.\n\n\n",
  "repo": "apache/airflow",
  "patch_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
  "patch_info": {
    "commit_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/5679a01919ac9d5153e858f8b1390cbc7915f148",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py",
      "airflow/www/views.py",
      "tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py"
    ],
    "message": "Use single source of truth for sensitive config items (#31820)\n\nPreviously we had them defined both in constant and in config.yml.\n\nNow just config.yml\n\n(cherry picked from commit cab342ee010bfd048006ca458c760b37470b6ea5)",
    "before_after_code_files": [
      "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py||airflow/configuration.py",
      "airflow/www/views.py||airflow/www/views.py",
      "tests/core/test_configuration.py||tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py"
    ]
  },
  "patch_diff": {
    "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
      "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
      "--- Hunk 1 ---",
      "[Context before]",
      "995: # Example: result_backend = db+postgresql://postgres:airflow@postgres/airflow",
      "996: # result_backend =",
      "998: # Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start",
      "999: # it ``airflow celery flower``. This defines the IP that Celery Flower runs on",
      "1000: flower_host = 0.0.0.0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "998: # Optional configuration dictionary to pass to the Celery result backend SQLAlchemy engine.",
      "999: # Example: result_backend_sqlalchemy_engine_options = {{\"pool_recycle\": 1800}}",
      "1000: result_backend_sqlalchemy_engine_options =",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1018: # Import path for celery configuration options",
      "1019: celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG",
      "1020: ssl_active = False",
      "1021: ssl_key =",
      "1022: ssl_cert =",
      "1023: ssl_cacert =",
      "1025: # Celery Pool implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1026: # Path to the client key.",
      "1029: # Path to the client certificate.",
      "1032: # Path to the CA certificate.",
      "",
      "---------------"
    ],
    "airflow/configuration.py||airflow/configuration.py": [
      "File: airflow/configuration.py -> airflow/configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: from contextlib import contextmanager, suppress",
      "38: from json.decoder import JSONDecodeError",
      "39: from re import Pattern",
      "41: from urllib.parse import urlsplit",
      "43: from typing_extensions import overload",
      "",
      "[Removed Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Tuple, Union",
      "",
      "[Added Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Set, Tuple, Union",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:         return yaml.safe_load(config_file)",
      "165: class AirflowConfigParser(ConfigParser):",
      "166:     \"\"\"Custom Airflow Configparser supporting defaults and deprecated options.\"\"\"",
      "",
      "[Removed Lines]",
      "150: SENSITIVE_CONFIG_VALUES = {",
      "151:     (\"database\", \"sql_alchemy_conn\"),",
      "152:     (\"core\", \"fernet_key\"),",
      "153:     (\"celery\", \"broker_url\"),",
      "154:     (\"celery\", \"flower_basic_auth\"),",
      "155:     (\"celery\", \"result_backend\"),",
      "156:     (\"atlas\", \"password\"),",
      "157:     (\"smtp\", \"smtp_password\"),",
      "158:     (\"webserver\", \"secret_key\"),",
      "159:     (\"secrets\", \"backend_kwargs\"),",
      "160:     # The following options are deprecated",
      "161:     (\"core\", \"sql_alchemy_conn\"),",
      "162: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:     # These configs can also be fetched from Secrets backend",
      "172:     # following the \"{section}__{name}__secret\" pattern",
      "176:     # A mapping of (new section, new option) -> (old section, old option, since_version).",
      "177:     # When reading new option, the old option will be checked to see if it exists. If it does a",
      "",
      "[Removed Lines]",
      "174:     sensitive_config_values: set[tuple[str, str]] = SENSITIVE_CONFIG_VALUES",
      "",
      "[Added Lines]",
      "159:     @cached_property",
      "160:     def sensitive_config_values(self) -> Set[tuple[str, str]]:  # noqa: UP006",
      "161:         default_config = default_config_yaml()",
      "162:         flattened = {",
      "163:             (s, k): item for s, s_c in default_config.items() for k, item in s_c.get(\"options\").items()",
      "164:         }",
      "165:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
      "166:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
      "167:         depr_section = {",
      "168:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
      "169:         }",
      "170:         sensitive.update(depr_section, depr_option)",
      "171:         return sensitive",
      "",
      "---------------"
    ],
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3951:         # TODO remove \"if raw\" usage in Airflow 3.0. Configuration can be fetched via the REST API.",
      "3952:         if raw:",
      "3953:             if expose_config == \"non-sensitive-only\":",
      "3956:                 updater = configupdater.ConfigUpdater()",
      "3957:                 updater.read(AIRFLOW_CONFIG)",
      "3959:                     if updater.has_option(sect, key):",
      "3960:                         updater[sect][key].value = \"< hidden >\"",
      "3961:                 config = str(updater)",
      "",
      "[Removed Lines]",
      "3954:                 from airflow.configuration import SENSITIVE_CONFIG_VALUES",
      "3958:                 for sect, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "3956:                 for sect, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ],
    "tests/core/test_configuration.py||tests/core/test_configuration.py": [
      "File: tests/core/test_configuration.py -> tests/core/test_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     AirflowConfigException,",
      "37:     AirflowConfigParser,",
      "38:     conf,",
      "39:     expand_env_var,",
      "40:     get_airflow_config,",
      "41:     get_airflow_home,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:     default_config_yaml,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1447:             w = captured.pop()",
      "1448:             assert \"your `conf.get*` call to use the new name\" in str(w.message)",
      "1449:             assert w.category == FutureWarning",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1453: def test_sensitive_values():",
      "1454:     from airflow.settings import conf",
      "1456:     # this list was hardcoded prior to 2.6.2",
      "1457:     # included here to avoid regression in refactor",
      "1458:     # inclusion of keys ending in \"password\" or \"kwargs\" is automated from 2.6.2",
      "1459:     # items not matching this pattern must be added here manually",
      "1460:     sensitive_values = {",
      "1461:         (\"database\", \"sql_alchemy_conn\"),",
      "1462:         (\"core\", \"fernet_key\"),",
      "1463:         (\"celery\", \"broker_url\"),",
      "1464:         (\"celery\", \"flower_basic_auth\"),",
      "1465:         (\"celery\", \"result_backend\"),",
      "1466:         (\"atlas\", \"password\"),",
      "1467:         (\"smtp\", \"smtp_password\"),",
      "1468:         (\"webserver\", \"secret_key\"),",
      "1469:         (\"secrets\", \"backend_kwargs\"),",
      "1470:         (\"sentry\", \"sentry_dsn\"),",
      "1471:         (\"database\", \"sql_alchemy_engine_args\"),",
      "1472:         (\"core\", \"sql_alchemy_conn\"),",
      "1473:     }",
      "1474:     default_config = default_config_yaml()",
      "1475:     all_keys = {(s, k) for s, v in default_config.items() for k in v.get(\"options\")}",
      "1476:     suspected_sensitive = {(s, k) for (s, k) in all_keys if k.endswith((\"password\", \"kwargs\"))}",
      "1477:     exclude_list = {",
      "1478:         (\"kubernetes_executor\", \"delete_option_kwargs\"),",
      "1479:     }",
      "1480:     suspected_sensitive -= exclude_list",
      "1481:     sensitive_values.update(suspected_sensitive)",
      "1482:     assert sensitive_values == conf.sensitive_config_values",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py": [
      "File: tests/www/views/test_views_configuration.py -> tests/www/views/test_views_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import html",
      "22: from tests.test_utils.config import conf_vars",
      "23: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
      "",
      "[Removed Lines]",
      "21: from airflow.configuration import SENSITIVE_CONFIG_VALUES, conf",
      "",
      "[Added Lines]",
      "21: from airflow.configuration import conf",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: @conf_vars({(\"webserver\", \"expose_config\"): \"True\"})",
      "37: def test_user_can_view_configuration(admin_client):",
      "38:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "40:         value = conf.get(section, key, fallback=\"\")",
      "41:         if not value:",
      "42:             continue",
      "",
      "[Removed Lines]",
      "39:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "39:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "46: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "47: def test_configuration_redacted(admin_client):",
      "48:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "50:         value = conf.get(section, key, fallback=\"\")",
      "51:         if not value or value == \"airflow\":",
      "52:             continue",
      "",
      "[Removed Lines]",
      "49:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "49:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "58: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "59: def test_configuration_redacted_in_running_configuration(admin_client):",
      "60:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "62:         value = conf.get(section, key, fallback=\"\")",
      "63:         if not value or value == \"airflow\":",
      "64:             continue",
      "",
      "[Removed Lines]",
      "61:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "61:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1cfdefeba3a29b08bc0f72e2b5d4ee93343e31ce",
      "candidate_info": {
        "commit_hash": "1cfdefeba3a29b08bc0f72e2b5d4ee93343e31ce",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1cfdefeba3a29b08bc0f72e2b5d4ee93343e31ce",
        "files": [
          "airflow/triggers/external_task.py"
        ],
        "message": "Workaround mypy confusing default with necessary arguments (#31562)\n\nMypy heuristics gets the typing wrong in those cases, so we\nneed to ignore them for now\n\n(cherry picked from commit a6bef887298dbbe107efbc0e4634998f1b60f0e7)",
        "before_after_code_files": [
          "airflow/triggers/external_task.py||airflow/triggers/external_task.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/triggers/external_task.py||airflow/triggers/external_task.py": [
          "File: airflow/triggers/external_task.py -> airflow/triggers/external_task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         hit one of the states yet, or not.",
          "78:         \"\"\"",
          "79:         while True:",
          "81:             if num_tasks == len(self.execution_dates):",
          "82:                 yield TriggerEvent(True)",
          "83:             await asyncio.sleep(self.poll_interval)",
          "",
          "[Removed Lines]",
          "80:             num_tasks = await self.count_tasks()",
          "",
          "[Added Lines]",
          "80:             # mypy confuses typing here",
          "81:             num_tasks = await self.count_tasks()  # type: ignore[call-arg]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:         hit one of the states yet, or not.",
          "142:         \"\"\"",
          "143:         while True:",
          "145:             if num_dags == len(self.execution_dates):",
          "146:                 yield TriggerEvent(self.serialize())",
          "147:             await asyncio.sleep(self.poll_interval)",
          "",
          "[Removed Lines]",
          "144:             num_dags = await self.count_dags()",
          "",
          "[Added Lines]",
          "145:             # mypy confuses typing here",
          "146:             num_dags = await self.count_dags()  # type: ignore[call-arg]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbdc2a4e6f14de542f215556ce96a4e2a038d218",
      "candidate_info": {
        "commit_hash": "bbdc2a4e6f14de542f215556ce96a4e2a038d218",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/bbdc2a4e6f14de542f215556ce96a4e2a038d218",
        "files": [
          "airflow/www/static/js/connection_form.js"
        ],
        "message": "Hide old alert box when testing conn with different value (#31606)\n\n(cherry picked from commit efe8473385426bf8c1e23a845f1ba26482843855)",
        "before_after_code_files": [
          "airflow/www/static/js/connection_form.js||airflow/www/static/js/connection_form.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/connection_form.js||airflow/www/static/js/connection_form.js": [
          "File: airflow/www/static/js/connection_form.js -> airflow/www/static/js/connection_form.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     }",
          "229:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   function hideAlert() {",
          "232:     const alertBox = $(\".container .row .alert\");",
          "233:     alertBox.hide();",
          "234:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:   $(\"#test-connection\").on(\"click\", (e) => {",
          "301:     e.preventDefault();",
          "302:     $.ajax({",
          "303:       url: connectionTestUrl,",
          "304:       type: \"post\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:     hideAlert();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb785eae472e51cb5769738f092927eb9dc7f2be",
      "candidate_info": {
        "commit_hash": "cb785eae472e51cb5769738f092927eb9dc7f2be",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/cb785eae472e51cb5769738f092927eb9dc7f2be",
        "files": [
          "airflow/www/extensions/init_manifest_files.py",
          "airflow/www/templates/airflow/dag_audit_log.html"
        ],
        "message": "Fix `url_for_asset` fallback and 404 on DAG Audit Log (#31233)\n\nThere was a 404 on the DAG Audit Log for bootstrap toggle css, which as\nfar as I can tell, we aren't even trying to use. So we will no longer\ntry and add it to the page.\n\nThis highlighted the fact that if we don't have an asset in the\nmanifest, `url_for_asset` would just leave off the filename completely.\nThis resulted in the href being just `/static/`, with no filename as a\nbreadcrumb in the eventual 404. Now we will just use the filename as-is\nso the 404 is more meaningful.\n\n(cherry picked from commit 2b4ad8a18c7c3975a30afe86030b2db9f8daf6f6)",
        "before_after_code_files": [
          "airflow/www/extensions/init_manifest_files.py||airflow/www/extensions/init_manifest_files.py",
          "airflow/www/templates/airflow/dag_audit_log.html||airflow/www/templates/airflow/dag_audit_log.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/extensions/init_manifest_files.py||airflow/www/extensions/init_manifest_files.py": [
          "File: airflow/www/extensions/init_manifest_files.py -> airflow/www/extensions/init_manifest_files.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     def get_asset_url(filename):",
          "47:         if app.debug:",
          "48:             parse_manifest_json()",
          "51:     parse_manifest_json()",
          "",
          "[Removed Lines]",
          "49:         return url_for(\"static\", filename=manifest.get(filename, \"\"))",
          "",
          "[Added Lines]",
          "49:         return url_for(\"static\", filename=manifest.get(filename, filename))",
          "",
          "---------------"
        ],
        "airflow/www/templates/airflow/dag_audit_log.html||airflow/www/templates/airflow/dag_audit_log.html": [
          "File: airflow/www/templates/airflow/dag_audit_log.html -> airflow/www/templates/airflow/dag_audit_log.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: {% block head_css %}",
          "50: {{ super() }}",
          "51: <link href=\"{{ url_for_asset('dataTables.bootstrap.min.css') }}\" rel=\"stylesheet\" type=\"text/css\" >",
          "53: {% endblock %}",
          "55: {% block content %}",
          "",
          "[Removed Lines]",
          "52: <link href=\"{{ url_for_asset('bootstrap-toggle.min.css') }}\" rel=\"stylesheet\" type=\"text/css\">",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38c290ab15128e64fbf540abc245ab3897910430",
      "candidate_info": {
        "commit_hash": "38c290ab15128e64fbf540abc245ab3897910430",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/38c290ab15128e64fbf540abc245ab3897910430",
        "files": [
          "airflow/www/templates/airflow/dags.html"
        ],
        "message": "Wording the next and last run DAG columns better (#31467)\n\n* Better wording the next and last run DAG columns\n\n* review comments from brent\n\n* review comments from Jed\n\n* Undoing test changes\n\n---------\n\nCo-authored-by: Amogh <adesai@cloudera.com>\n(cherry picked from commit 7db42fe6655c28330e80b8a062ef3e07968d6e76)",
        "before_after_code_files": [
          "airflow/www/templates/airflow/dags.html||airflow/www/templates/airflow/dags.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/templates/airflow/dags.html||airflow/www/templates/airflow/dags.html": [
          "File: airflow/www/templates/airflow/dags.html -> airflow/www/templates/airflow/dags.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:           <th>Schedule</th>",
          "210:           <th style=\"width:180px;\">Last Run",
          "211:             <span class=\"material-icons text-muted js-tooltip\" aria-hidden=\"true\"",
          "213:           </th>",
          "214:           <th style=\"width:180px;\">{{ sortable_column(\"Next Run\", \"next_dagrun\") }}",
          "215:             <span class=\"material-icons text-muted js-tooltip\" aria-hidden=\"true\"",
          "217:           </th>",
          "218:           <th>Recent Tasks",
          "219:             <span class=\"material-icons text-muted js-tooltip\" aria-hidden=\"true\"",
          "",
          "[Removed Lines]",
          "212:                   title=\"Date/Time of the latest Dag Run.\">info</span>",
          "216:                   title=\"Expected date/time of the next DAG Run, or for dataset triggered DAGs, how many datasets have been updated since the last DAG Run.\">info</span>",
          "",
          "[Added Lines]",
          "212:                   title=\"Logical Date/Time of the latest Dag Run.\">info</span>",
          "216:                   title=\"Logical Date/Time interval of the next DAG Run, or for dataset triggered DAGs, how many datasets have been updated since the last DAG Run.\">info</span>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc3cd20dce547843125701b2cbc0ef2660c4e452",
      "candidate_info": {
        "commit_hash": "cc3cd20dce547843125701b2cbc0ef2660c4e452",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/cc3cd20dce547843125701b2cbc0ef2660c4e452",
        "files": [
          "airflow/api_connexion/endpoints/user_endpoint.py",
          "tests/api_connexion/endpoints/test_user_endpoint.py"
        ],
        "message": "Fix typing for POST user endpoint (#31767)\n\n* Fix typing for POST user endpoint\n\nThis should raise exception not return it.\n\n* fixup! Fix typing for POST user endpoint\n\n(cherry picked from commit f7ed87823afb2871d8f11e615d96693db3a6c2b8)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/user_endpoint.py||airflow/api_connexion/endpoints/user_endpoint.py",
          "tests/api_connexion/endpoints/test_user_endpoint.py||tests/api_connexion/endpoints/test_user_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/user_endpoint.py||airflow/api_connexion/endpoints/user_endpoint.py": [
          "File: airflow/api_connexion/endpoints/user_endpoint.py -> airflow/api_connexion/endpoints/user_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     user = security_manager.add_user(role=roles_to_add, **data)",
          "120:     if not user:",
          "121:         detail = f\"Failed to add user `{username}`.\"",
          "124:     return user_schema.dump(user)",
          "",
          "[Removed Lines]",
          "122:         return Unknown(detail=detail)",
          "",
          "[Added Lines]",
          "122:         raise Unknown(detail=detail)",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_user_endpoint.py||tests/api_connexion/endpoints/test_user_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_user_endpoint.py -> tests/api_connexion/endpoints/test_user_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "525:             \"type\": EXCEPTIONS_LINK_MAP[400],",
          "526:         }",
          "529: class TestPatchUser(TestUserEndpoint):",
          "530:     @pytest.mark.usefixtures(\"autoclean_admin_user\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     def test_internal_server_error(self, autoclean_user_payload):",
          "529:         with unittest.mock.patch.object(self.app.appbuilder.sm, \"add_user\", return_value=None):",
          "530:             response = self.client.post(",
          "531:                 \"/api/v1/users\",",
          "532:                 json=autoclean_user_payload,",
          "533:                 environ_overrides={\"REMOTE_USER\": \"test\"},",
          "534:             )",
          "535:             assert response.json == {",
          "536:                 \"detail\": \"Failed to add user `example_user`.\",",
          "537:                 \"status\": 500,",
          "538:                 \"title\": \"Internal Server Error\",",
          "539:                 \"type\": EXCEPTIONS_LINK_MAP[500],",
          "540:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}