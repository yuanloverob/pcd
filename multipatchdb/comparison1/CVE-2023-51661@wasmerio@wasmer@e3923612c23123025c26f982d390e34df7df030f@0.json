{
  "cve_id": "CVE-2023-51661",
  "cve_desc": "Wasmer is a WebAssembly runtime that enables containers to run anywhere: from Desktop to the Cloud, Edge and even the browser. Wasm programs can access the filesystem outside of the sandbox. Service providers running untrusted Wasm code on Wasmer can unexpectedly expose the host filesystem. This vulnerability has been patched in version 4.2.4.",
  "repo": "wasmerio/wasmer",
  "patch_hash": "e3923612c23123025c26f982d390e34df7df030f",
  "patch_info": {
    "commit_hash": "e3923612c23123025c26f982d390e34df7df030f",
    "repo": "wasmerio/wasmer",
    "commit_url": "https://github.com/wasmerio/wasmer/commit/e3923612c23123025c26f982d390e34df7df030f",
    "files": [
      "lib/cli/src/commands/mod.rs",
      "lib/cli/src/commands/run/mod.rs",
      "lib/cli/src/commands/run/wasi.rs",
      "lib/wasix/src/os/console/mod.rs",
      "lib/wasix/src/runners/mod.rs",
      "lib/wasix/src/runners/wasi.rs",
      "lib/wasix/src/runners/wasi_common.rs",
      "lib/wasix/src/runners/wcgi/runner.rs",
      "lib/wasix/src/state/builder.rs"
    ],
    "message": "Merge pull request #4301 from wasmerio/cli-wasi-fs-setup-cleanup\n\nrefactor(cli): run: Unify wasi env setup",
    "before_after_code_files": [
      "lib/cli/src/commands/run.rs||lib/cli/src/commands/run/mod.rs",
      "lib/cli/src/commands/run/wasi.rs||lib/cli/src/commands/run/wasi.rs",
      "lib/wasix/src/os/console/mod.rs||lib/wasix/src/os/console/mod.rs",
      "lib/wasix/src/runners/mod.rs||lib/wasix/src/runners/mod.rs",
      "lib/wasix/src/runners/wasi.rs||lib/wasix/src/runners/wasi.rs",
      "lib/wasix/src/runners/wasi_common.rs||lib/wasix/src/runners/wasi_common.rs",
      "lib/wasix/src/runners/wcgi/runner.rs||lib/wasix/src/runners/wcgi/runner.rs",
      "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
    ]
  },
  "patch_diff": {
    "lib/cli/src/commands/run.rs||lib/cli/src/commands/run/mod.rs": [
      "File: lib/cli/src/commands/run.rs -> lib/cli/src/commands/run/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: use wasmer_registry::{wasmer_env::WasmerEnv, Package};",
      "31: use wasmer_wasix::{",
      "32:     bin_factory::BinaryPackage,",
      "34:     runtime::{",
      "35:         module_cache::{CacheError, ModuleHash},",
      "36:         package_loader::PackageLoader,",
      "",
      "[Removed Lines]",
      "33:     runners::{MappedDirectory, Runner},",
      "",
      "[Added Lines]",
      "33:     runners::{MappedCommand, MappedDirectory, Runner},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:         uses: Vec<BinaryPackage>,",
      "216:         runtime: Arc<dyn Runtime + Send + Sync>,",
      "217:     ) -> Result<(), Error> {",
      "229:         runner.run_command(command_name, pkg, runtime)",
      "230:     }",
      "",
      "[Removed Lines]",
      "218:         let mut runner = wasmer_wasix::runners::wasi::WasiRunner::new()",
      "219:             .with_args(self.args.clone())",
      "220:             .with_envs(self.wasi.env_vars.clone())",
      "221:             .with_mapped_directories(self.wasi.mapped_dirs.clone())",
      "222:             .with_injected_packages(uses);",
      "223:         if self.wasi.forward_host_env {",
      "224:             runner.set_forward_host_env();",
      "225:         }",
      "",
      "[Added Lines]",
      "218:         let mut runner = self.build_wasi_runner(&runtime)?;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "298:         Ok(())",
      "299:     }",
      "301:     #[tracing::instrument(skip_all)]",
      "302:     fn execute_wasi_module(",
      "303:         &self,",
      "304:         wasm_path: &Path,",
      "305:         module: &Module,",
      "306:         runtime: Arc<dyn Runtime + Send + Sync>,",
      "308:     ) -> Result<(), Error> {",
      "309:         let program_name = wasm_path.display().to_string();",
      "318:     }",
      "320:     #[tracing::instrument(skip_all)]",
      "",
      "[Removed Lines]",
      "307:         store: Store,",
      "311:         let builder = self",
      "312:             .wasi",
      "313:             .prepare(module, program_name, self.args.clone(), runtime)?;",
      "315:         builder.run_with_store_async(module.clone(), store)?;",
      "317:         Ok(())",
      "",
      "[Added Lines]",
      "291:     fn build_wasi_runner(",
      "292:         &self,",
      "293:         runtime: &Arc<dyn Runtime + Send + Sync>,",
      "294:     ) -> Result<WasiRunner, anyhow::Error> {",
      "295:         let packages = self.load_injected_packages(runtime)?;",
      "297:         let runner = WasiRunner::new()",
      "298:             .with_args(&self.args)",
      "299:             .with_injected_packages(packages)",
      "300:             .with_envs(self.wasi.env_vars.clone())",
      "301:             .with_mapped_host_commands(self.wasi.build_mapped_commands()?)",
      "302:             .with_mapped_directories(self.wasi.build_mapped_directories()?)",
      "303:             .with_forward_host_env(self.wasi.forward_host_env)",
      "304:             .with_capabilities(self.wasi.capabilities());",
      "306:         Ok(runner)",
      "307:     }",
      "315:         mut store: Store,",
      "319:         let runner = self.build_wasi_runner(&runtime)?;",
      "320:         runner.run_wasm(",
      "321:             runtime,",
      "322:             &program_name,",
      "323:             module,",
      "324:             self.wasi.enable_async_threads,",
      "325:         )",
      "",
      "---------------"
    ],
    "lib/cli/src/commands/run/wasi.rs||lib/cli/src/commands/run/wasi.rs": [
      "File: lib/cli/src/commands/run/wasi.rs -> lib/cli/src/commands/run/wasi.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:     http::HttpClient,",
      "21:     os::{tty_sys::SysTty, TtyBridge},",
      "22:     rewind_ext,",
      "24:     runtime::{",
      "25:         module_cache::{FileSystemCache, ModuleCache},",
      "26:         package_loader::{BuiltinPackageLoader, PackageLoader},",
      "",
      "[Removed Lines]",
      "23:     runners::MappedDirectory,",
      "",
      "[Added Lines]",
      "23:     runners::{MappedCommand, MappedDirectory},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:     #[clap(long = \"include-webc\", name = \"WEBC\")]",
      "83:     #[clap(long = \"map-command\", name = \"MAPCMD\")]",
      "87:     #[cfg(feature = \"experimental-io-devices\")]",
      "",
      "[Removed Lines]",
      "80:     include_webcs: Vec<PathBuf>,",
      "84:     map_commands: Vec<String>,",
      "",
      "[Added Lines]",
      "80:     pub(super) include_webcs: Vec<PathBuf>,",
      "84:     pub(super) map_commands: Vec<String>,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "126: #[allow(dead_code)]",
      "127: impl Wasi {",
      "128:     pub fn map_dir(&mut self, alias: &str, target_on_disk: PathBuf) {",
      "129:         self.mapped_dirs.push(MappedDirectory {",
      "130:             guest: alias.to_string(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:     const MAPPED_CURRENT_DIR_DEFAULT_PATH: &'static str = \"/mnt/host\";",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "190:             .uses(uses)",
      "191:             .map_commands(map_commands);",
      "195:             let root_fs = RootFileSystemBuilder::new()",
      "196:                 .with_tty(Box::new(DeviceFile::new(__WASI_STDIN_FILENO)))",
      "197:                 .build();",
      "199:                 let fs_backing: Arc<dyn FileSystem + Send + Sync> =",
      "200:                     Arc::new(PassthruFileSystem::new(default_fs_backing()));",
      "201:                 for MappedDirectory { host, guest } in self.mapped_dirs.clone() {",
      "",
      "[Removed Lines]",
      "193:         let mut builder = if wasmer_wasix::is_wasix_module(module) {",
      "198:             if !self.mapped_dirs.is_empty() {",
      "",
      "[Added Lines]",
      "195:         let mut builder = {",
      "201:             let mut mapped_dirs = Vec::new();",
      "204:             let mut have_current_dir = false;",
      "205:             for dir in &self.pre_opened_directories {",
      "206:                 let mapping = if dir == Path::new(\".\") {",
      "207:                     if have_current_dir {",
      "208:                         bail!(\"Cannot pre-open the current directory twice: --dir=. must only be specified once\");",
      "209:                     }",
      "210:                     have_current_dir = true;",
      "212:                     let current_dir =",
      "213:                         std::env::current_dir().context(\"could not determine current directory\")?;",
      "215:                     MappedDirectory {",
      "216:                         host: current_dir,",
      "217:                         guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
      "218:                     }",
      "219:                 } else {",
      "220:                     let resolved = dir.canonicalize().with_context(|| {",
      "221:                         format!(",
      "222:                             \"could not canonicalize path for argument '--dir {}'\",",
      "223:                             dir.display()",
      "224:                         )",
      "225:                     })?;",
      "227:                     if &resolved != dir {",
      "228:                         bail!(",
      "229:                             \"Invalid argument '--dir {}': path must either be absolute, or '.'\",",
      "230:                             dir.display(),",
      "231:                         );",
      "232:                     }",
      "234:                     let guest = resolved",
      "235:                         .to_str()",
      "236:                         .with_context(|| {",
      "237:                             format!(",
      "238:                                 \"invalid argument '--dir {}': path must be valid utf-8\",",
      "239:                                 dir.display(),",
      "240:                             )",
      "241:                         })?",
      "242:                         .to_string();",
      "244:                     MappedDirectory {",
      "245:                         host: resolved,",
      "246:                         guest,",
      "247:                     }",
      "248:                 };",
      "250:                 mapped_dirs.push(mapping);",
      "251:             }",
      "253:             for MappedDirectory { host, guest } in &self.mapped_dirs {",
      "254:                 let resolved_host = host.canonicalize().with_context(|| {",
      "255:                     format!(",
      "256:                         \"could not canonicalize path for argument '--mapdir {}:{}'\",",
      "257:                         host.display(),",
      "258:                         guest,",
      "259:                     )",
      "260:                 })?;",
      "262:                 let mapping = if guest == \".\" {",
      "263:                     if have_current_dir {",
      "264:                         bail!(\"Cannot pre-open the current directory twice: '--mapdir=?:.' / '--dir=.' must only be specified once\");",
      "265:                     }",
      "266:                     have_current_dir = true;",
      "268:                     MappedDirectory {",
      "269:                         host: resolved_host,",
      "270:                         guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
      "271:                     }",
      "272:                 } else {",
      "273:                     MappedDirectory {",
      "274:                         host: resolved_host,",
      "275:                         guest: guest.clone(),",
      "276:                     }",
      "277:                 };",
      "278:                 mapped_dirs.push(mapping);",
      "279:             }",
      "281:             if !mapped_dirs.is_empty() {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "209:             }",
      "213:                 .sandbox_fs(root_fs)",
      "214:                 .preopen_dir(Path::new(\"/\"))",
      "226:         };",
      "",
      "[Removed Lines]",
      "212:             builder",
      "215:                 .unwrap()",
      "216:                 .map_dir(\".\", \"/\")?",
      "217:         } else {",
      "218:             builder",
      "219:                 .fs(default_fs_backing())",
      "220:                 .preopen_dirs(self.pre_opened_directories.clone())?",
      "221:                 .map_dirs(",
      "222:                     self.mapped_dirs",
      "223:                         .iter()",
      "224:                         .map(|d| (d.guest.clone(), d.host.clone())),",
      "225:                 )?",
      "",
      "[Added Lines]",
      "295:             let b = builder",
      "298:                 .unwrap();",
      "300:             if have_current_dir {",
      "301:                 b.map_dir(\".\", Self::MAPPED_CURRENT_DIR_DEFAULT_PATH)?",
      "302:             } else {",
      "303:                 b.map_dir(\".\", \"/\")?",
      "304:             }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "238:         Ok(builder)",
      "239:     }",
      "241:     pub fn capabilities(&self) -> Capabilities {",
      "242:         let mut caps = Capabilities::default();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "320:     pub fn build_mapped_directories(&self) -> Result<Vec<MappedDirectory>, anyhow::Error> {",
      "321:         let mut mapped_dirs = Vec::new();",
      "324:         let mut have_current_dir = false;",
      "325:         for dir in &self.pre_opened_directories {",
      "326:             let mapping = if dir == Path::new(\".\") {",
      "327:                 if have_current_dir {",
      "328:                     bail!(\"Cannot pre-open the current directory twice: --dir=. must only be specified once\");",
      "329:                 }",
      "330:                 have_current_dir = true;",
      "332:                 let current_dir =",
      "333:                     std::env::current_dir().context(\"could not determine current directory\")?;",
      "335:                 MappedDirectory {",
      "336:                     host: current_dir,",
      "337:                     guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
      "338:                 }",
      "339:             } else {",
      "340:                 let resolved = dir.canonicalize().with_context(|| {",
      "341:                     format!(",
      "342:                         \"could not canonicalize path for argument '--dir {}'\",",
      "343:                         dir.display()",
      "344:                     )",
      "345:                 })?;",
      "347:                 if &resolved != dir {",
      "348:                     bail!(",
      "349:                         \"Invalid argument '--dir {}': path must either be absolute, or '.'\",",
      "350:                         dir.display(),",
      "351:                     );",
      "352:                 }",
      "354:                 let guest = resolved",
      "355:                     .to_str()",
      "356:                     .with_context(|| {",
      "357:                         format!(",
      "358:                             \"invalid argument '--dir {}': path must be valid utf-8\",",
      "359:                             dir.display(),",
      "360:                         )",
      "361:                     })?",
      "362:                     .to_string();",
      "364:                 MappedDirectory {",
      "365:                     host: resolved,",
      "366:                     guest,",
      "367:                 }",
      "368:             };",
      "370:             mapped_dirs.push(mapping);",
      "371:         }",
      "373:         for MappedDirectory { host, guest } in &self.mapped_dirs {",
      "374:             let resolved_host = host.canonicalize().with_context(|| {",
      "375:                 format!(",
      "376:                     \"could not canonicalize path for argument '--mapdir {}:{}'\",",
      "377:                     host.display(),",
      "378:                     guest,",
      "379:                 )",
      "380:             })?;",
      "382:             let mapping = if guest == \".\" {",
      "383:                 if have_current_dir {",
      "384:                     bail!(\"Cannot pre-open the current directory twice: '--mapdir=?:.' / '--dir=.' must only be specified once\");",
      "385:                 }",
      "386:                 have_current_dir = true;",
      "388:                 MappedDirectory {",
      "389:                     host: resolved_host,",
      "390:                     guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
      "391:                 }",
      "392:             } else {",
      "393:                 MappedDirectory {",
      "394:                     host: resolved_host,",
      "395:                     guest: guest.clone(),",
      "396:                 }",
      "397:             };",
      "398:             mapped_dirs.push(mapping);",
      "399:         }",
      "401:         Ok(mapped_dirs)",
      "402:     }",
      "404:     pub fn build_mapped_commands(&self) -> Result<Vec<MappedCommand>, anyhow::Error> {",
      "405:         self.map_commands",
      "406:             .iter()",
      "407:             .map(|item| {",
      "408:                 let (a, b) = item.split_once('=').with_context(|| {",
      "409:                     format!(",
      "410:                         \"Invalid --map-command flag: expected <ALIAS>=<HOST_PATH>, got '{item}'\"",
      "411:                     )",
      "412:                 })?;",
      "414:                 let a = a.trim();",
      "415:                 let b = b.trim();",
      "417:                 if a.is_empty() {",
      "418:                     bail!(\"Invalid --map-command flag - alias cannot be empty: '{item}'\");",
      "419:                 }",
      "421:                 if b.is_empty() {",
      "422:                     bail!(\"Invalid --map-command flag - host path cannot be empty: '{item}'\");",
      "423:                 }",
      "425:                 Ok(MappedCommand {",
      "426:                     alias: a.to_string(),",
      "427:                     target: b.to_string(),",
      "428:                 })",
      "429:             })",
      "430:             .collect::<Result<Vec<_>, anyhow::Error>>()",
      "431:     }",
      "",
      "---------------"
    ],
    "lib/wasix/src/os/console/mod.rs||lib/wasix/src/os/console/mod.rs": [
      "File: lib/wasix/src/os/console/mod.rs -> lib/wasix/src/os/console/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:             .with_stdin(Box::new(self.stdin.clone()))",
      "226:             .with_stdout(Box::new(self.stdout.clone()))",
      "227:             .with_stderr(Box::new(self.stderr.clone()))",
      "230:             .map_err(|err| SpawnError::Other(err.into()))?;",
      "",
      "[Removed Lines]",
      "228:             .prepare_webc_env(prog, &wasi_opts, &pkg, self.runtime.clone(), Some(root_fs))",
      "",
      "[Added Lines]",
      "228:             .prepare_webc_env(",
      "229:                 prog,",
      "230:                 &wasi_opts,",
      "231:                 Some(&pkg),",
      "232:                 self.runtime.clone(),",
      "233:                 Some(root_fs),",
      "234:             )",
      "",
      "---------------"
    ],
    "lib/wasix/src/runners/mod.rs||lib/wasix/src/runners/mod.rs": [
      "File: lib/wasix/src/runners/mod.rs -> lib/wasix/src/runners/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #[cfg(feature = \"webc_runner_rt_wcgi\")]",
      "8: pub mod wcgi;",
      "",
      "[Removed Lines]",
      "10: pub use self::runner::Runner;",
      "",
      "[Added Lines]",
      "10: pub use self::{runner::Runner, wasi_common::MappedCommand};",
      "",
      "---------------"
    ],
    "lib/wasix/src/runners/wasi.rs||lib/wasix/src/runners/wasi.rs": [
      "File: lib/wasix/src/runners/wasi.rs -> lib/wasix/src/runners/wasi.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use anyhow::{Context, Error};",
      "6: use tracing::Instrument;",
      "7: use virtual_fs::{ArcBoxFile, TmpFileSystem, VirtualFile};",
      "8: use webc::metadata::{annotations::Wasi, Command};",
      "10: use crate::{",
      "",
      "[Removed Lines]",
      "3: use std::sync::Arc;",
      "",
      "[Added Lines]",
      "3: use std::{path::PathBuf, sync::Arc};",
      "8: use wasmer::Module;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:     Runtime, WasiEnvBuilder, WasiRuntimeError,",
      "16: };",
      "18: #[derive(Debug, Default, Clone)]",
      "19: pub struct WasiRunner {",
      "20:     wasi: CommonWasiOptions,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: use super::wasi_common::MappedCommand;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "85:         }",
      "86:     }",
      "90:         self",
      "91:     }",
      "95:     }",
      "97:     pub fn with_mapped_directories<I, D>(mut self, dirs: I) -> Self",
      "",
      "[Removed Lines]",
      "88:     pub fn with_forward_host_env(mut self) -> Self {",
      "89:         self.set_forward_host_env();",
      "93:     pub fn set_forward_host_env(&mut self) {",
      "94:         self.wasi.forward_host_env = true;",
      "",
      "[Added Lines]",
      "91:     pub fn with_forward_host_env(mut self, forward: bool) -> Self {",
      "92:         self.set_forward_host_env(forward);",
      "96:     pub fn set_forward_host_env(&mut self, forward: bool) {",
      "97:         self.wasi.forward_host_env = forward;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         self",
      "106:     }",
      "109:     pub fn add_injected_package(&mut self, pkg: BinaryPackage) -> &mut Self {",
      "110:         self.wasi.injected_packages.push(pkg);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     pub fn set_current_dir(&mut self, dir: impl Into<PathBuf>) {",
      "112:         self.wasi.current_dir = Some(dir.into());",
      "113:     }",
      "115:     pub fn with_current_dir(mut self, dir: impl Into<PathBuf>) -> Self {",
      "116:         self.set_current_dir(dir);",
      "117:         self",
      "118:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "135:         self",
      "136:     }",
      "139:         &mut self.wasi.capabilities",
      "140:     }",
      "",
      "[Removed Lines]",
      "138:     pub fn capabilities(&mut self) -> &mut Capabilities {",
      "",
      "[Added Lines]",
      "150:     pub fn add_mapped_host_command(&mut self, alias: impl Into<String>, target: impl Into<String>) {",
      "151:         self.wasi.mapped_host_commands.push(MappedCommand {",
      "152:             alias: alias.into(),",
      "153:             target: target.into(),",
      "154:         });",
      "155:     }",
      "157:     pub fn with_mapped_host_command(",
      "158:         mut self,",
      "159:         alias: impl Into<String>,",
      "160:         target: impl Into<String>,",
      "161:     ) -> Self {",
      "162:         self.add_mapped_host_command(alias, target);",
      "163:         self",
      "164:     }",
      "166:     pub fn add_mapped_host_commands(&mut self, commands: impl IntoIterator<Item = MappedCommand>) {",
      "167:         self.wasi.mapped_host_commands.extend(commands);",
      "168:     }",
      "170:     pub fn with_mapped_host_commands(",
      "171:         mut self,",
      "172:         commands: impl IntoIterator<Item = MappedCommand>,",
      "173:     ) -> Self {",
      "174:         self.add_mapped_host_commands(commands);",
      "175:         self",
      "176:     }",
      "178:     pub fn capabilities_mut(&mut self) -> &mut Capabilities {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "183:         &self,",
      "184:         program_name: &str,",
      "185:         wasi: &Wasi,",
      "187:         runtime: Arc<dyn Runtime + Send + Sync>,",
      "188:         root_fs: Option<TmpFileSystem>,",
      "189:     ) -> Result<WasiEnvBuilder, anyhow::Error> {",
      "192:         self.wasi",
      "193:             .prepare_webc_env(&mut builder, container_fs, wasi, root_fs)?;",
      "",
      "[Removed Lines]",
      "186:         pkg: &BinaryPackage,",
      "190:         let mut builder = WasiEnvBuilder::new(program_name);",
      "191:         let container_fs = Arc::clone(&pkg.webc_fs);",
      "",
      "[Added Lines]",
      "226:         pkg: Option<&BinaryPackage>,",
      "230:         let mut builder = WasiEnvBuilder::new(program_name).runtime(runtime);",
      "232:         let container_fs = if let Some(pkg) = pkg {",
      "233:             builder.add_webc(pkg.clone());",
      "234:             Some(Arc::clone(&pkg.webc_fs))",
      "235:         } else {",
      "236:             None",
      "237:         };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "202:             builder.set_stderr(Box::new(stderr.clone()));",
      "203:         }",
      "208:         Ok(builder)",
      "209:     }",
      "210: }",
      "212: impl crate::runners::Runner for WasiRunner {",
      "",
      "[Removed Lines]",
      "205:         builder.add_webc(pkg.clone());",
      "206:         builder.set_runtime(runtime);",
      "",
      "[Added Lines]",
      "255:     pub fn run_wasm(",
      "256:         &self,",
      "257:         runtime: Arc<dyn Runtime + Send + Sync>,",
      "258:         program_name: &str,",
      "259:         module: &Module,",
      "260:         asyncify: bool,",
      "261:     ) -> Result<(), Error> {",
      "262:         let wasi = webc::metadata::annotations::Wasi::new(program_name);",
      "263:         let mut store = runtime.new_store();",
      "264:         let env = self.prepare_webc_env(program_name, &wasi, None, runtime, None)?;",
      "266:         if asyncify {",
      "267:             env.run_with_store_async(module.clone(), store)?;",
      "268:         } else {",
      "269:             env.run_with_store(module.clone(), &mut store)?;",
      "270:         }",
      "272:         Ok(())",
      "273:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "231:             .annotation(\"wasi\")?",
      "232:             .unwrap_or_else(|| Wasi::new(command_name));",
      "236:         let env = self",
      "238:             .context(\"Unable to prepare the WASI environment\")?",
      "239:             .build()?;",
      "241:         let command_name = command_name.to_string();",
      "242:         let tasks = runtime.task_manager().clone();",
      "243:         let pkg = pkg.clone();",
      "",
      "[Removed Lines]",
      "234:         let store = runtime.new_store();",
      "237:             .prepare_webc_env(command_name, &wasi, pkg, Arc::clone(&runtime), None)",
      "",
      "[Added Lines]",
      "299:             .prepare_webc_env(command_name, &wasi, Some(pkg), Arc::clone(&runtime), None)",
      "303:         let store = runtime.new_store();",
      "",
      "---------------"
    ],
    "lib/wasix/src/runners/wasi_common.rs||lib/wasix/src/runners/wasi_common.rs": [
      "File: lib/wasix/src/runners/wasi_common.rs -> lib/wasix/src/runners/wasi_common.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:     WasiEnvBuilder,",
      "15: };",
      "17: #[derive(Debug, Default, Clone)]",
      "18: pub(crate) struct CommonWasiOptions {",
      "19:     pub(crate) args: Vec<String>,",
      "20:     pub(crate) env: HashMap<String, String>,",
      "21:     pub(crate) forward_host_env: bool,",
      "22:     pub(crate) mapped_dirs: Vec<MappedDirectory>,",
      "23:     pub(crate) injected_packages: Vec<BinaryPackage>,",
      "24:     pub(crate) capabilities: Capabilities,",
      "25: }",
      "27: impl CommonWasiOptions {",
      "28:     pub(crate) fn prepare_webc_env(",
      "29:         &self,",
      "30:         builder: &mut WasiEnvBuilder,",
      "32:         wasi: &WasiAnnotation,",
      "33:         root_fs: Option<TmpFileSystem>,",
      "34:     ) -> Result<(), anyhow::Error> {",
      "",
      "[Removed Lines]",
      "31:         container_fs: Arc<dyn FileSystem + Send + Sync>,",
      "",
      "[Added Lines]",
      "17: #[derive(Debug, Clone)]",
      "18: pub struct MappedCommand {",
      "20:     pub alias: String,",
      "22:     pub target: String,",
      "23: }",
      "31:     pub(crate) mapped_host_commands: Vec<MappedCommand>,",
      "34:     pub(crate) current_dir: Option<PathBuf>,",
      "41:         container_fs: Option<Arc<dyn FileSystem + Send + Sync>>,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:             builder.add_webc(pkg.clone());",
      "49:         }",
      "51:         self.populate_env(wasi, builder);",
      "52:         self.populate_args(wasi, builder);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:         let mapped_cmds = self",
      "62:             .mapped_host_commands",
      "63:             .iter()",
      "64:             .map(|c| (c.alias.as_str(), c.target.as_str()));",
      "65:         builder.add_mapped_commands(mapped_cmds);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:     }",
      "88: }",
      "97:     builder: &mut WasiEnvBuilder,",
      "120:             })?;",
      "124:                 .with_context(|| {",
      "125:                     format!(",
      "127:                         guest_path.display()",
      "128:                     )",
      "129:                 })?;",
      "158:         }",
      "159:     }",
      "",
      "[Removed Lines]",
      "90: type ContainerFs =",
      "91:     OverlayFileSystem<TmpFileSystem, [RelativeOrAbsolutePathHack<Arc<dyn FileSystem>>; 1]>;",
      "93: fn prepare_filesystem(",
      "94:     root_fs: TmpFileSystem,",
      "95:     mapped_dirs: &[MappedDirectory],",
      "96:     container_fs: Arc<dyn FileSystem>,",
      "98: ) -> Result<ContainerFs, Error> {",
      "99:     if !mapped_dirs.is_empty() {",
      "100:         let host_fs: Arc<dyn FileSystem + Send + Sync> = Arc::new(crate::default_fs_backing());",
      "102:         for dir in mapped_dirs {",
      "103:             let MappedDirectory {",
      "104:                 host: host_path,",
      "105:                 guest: guest_path,",
      "106:             } = dir;",
      "107:             let mut guest_path = PathBuf::from(guest_path);",
      "108:             tracing::debug!(",
      "109:                 guest=%guest_path.display(),",
      "110:                 host=%host_path.display(),",
      "111:                 \"Mounting host folder\",",
      "112:             );",
      "114:             if guest_path.is_relative() {",
      "115:                 guest_path = apply_relative_path_mounting_hack(&guest_path);",
      "116:             }",
      "118:             let host_path = std::fs::canonicalize(host_path).with_context(|| {",
      "119:                 format!(\"Unable to canonicalize host path '{}'\", host_path.display())",
      "122:             let guest_path = root_fs",
      "123:                 .canonicalize_unchecked(&guest_path)",
      "126:                         \"Unable to canonicalize guest path '{}'\",",
      "131:             if guest_path == Path::new(\"/\") {",
      "132:                 root_fs",
      "133:                     .mount_directory_entries(&guest_path, &host_fs, &host_path)",
      "134:                     .with_context(|| {",
      "135:                         format!(\"Unable to mount \\\"{}\\\" to root\", host_path.display(),)",
      "136:                     })?;",
      "137:             } else {",
      "138:                 if let Some(parent) = guest_path.parent() {",
      "139:                     create_dir_all(&root_fs, parent).with_context(|| {",
      "140:                         format!(\"Unable to create the \\\"{}\\\" directory\", parent.display())",
      "141:                     })?;",
      "142:                 }",
      "144:                 root_fs",
      "145:                     .mount(guest_path.clone(), &host_fs, host_path.clone())",
      "146:                     .with_context(|| {",
      "147:                         format!(",
      "148:                             \"Unable to mount \\\"{}\\\" to \\\"{}\\\"\",",
      "149:                             host_path.display(),",
      "150:                             guest_path.display()",
      "151:                         )",
      "152:                     })?;",
      "154:                 builder",
      "155:                     .add_preopen_dir(&guest_path)",
      "156:                     .with_context(|| format!(\"Unable to preopen \\\"{}\\\"\", guest_path.display()))?;",
      "157:             }",
      "",
      "[Added Lines]",
      "109: fn build_directory_mappings(",
      "111:     root_fs: &mut TmpFileSystem,",
      "112:     host_fs: &Arc<dyn FileSystem + Send + Sync>,",
      "113:     mapped_dirs: &[MappedDirectory],",
      "114: ) -> Result<(), anyhow::Error> {",
      "115:     for dir in mapped_dirs {",
      "116:         let MappedDirectory {",
      "117:             host: host_path,",
      "118:             guest: guest_path,",
      "119:         } = dir;",
      "120:         let mut guest_path = PathBuf::from(guest_path);",
      "121:         tracing::debug!(",
      "122:             guest=%guest_path.display(),",
      "123:             host=%host_path.display(),",
      "124:             \"Mounting host folder\",",
      "125:         );",
      "127:         if guest_path.is_relative() {",
      "128:             guest_path = apply_relative_path_mounting_hack(&guest_path);",
      "129:         }",
      "131:         let host_path = std::fs::canonicalize(host_path).with_context(|| {",
      "132:             format!(\"Unable to canonicalize host path '{}'\", host_path.display())",
      "133:         })?;",
      "135:         let guest_path = root_fs",
      "136:             .canonicalize_unchecked(&guest_path)",
      "137:             .with_context(|| {",
      "138:                 format!(",
      "139:                     \"Unable to canonicalize guest path '{}'\",",
      "140:                     guest_path.display()",
      "141:                 )",
      "144:         if guest_path == Path::new(\"/\") {",
      "145:             root_fs",
      "146:                 .mount_directory_entries(&guest_path, host_fs, &host_path)",
      "147:                 .with_context(|| format!(\"Unable to mount \\\"{}\\\" to root\", host_path.display(),))?;",
      "148:         } else {",
      "149:             if let Some(parent) = guest_path.parent() {",
      "150:                 create_dir_all(root_fs, parent).with_context(|| {",
      "151:                     format!(\"Unable to create the \\\"{}\\\" directory\", parent.display())",
      "152:                 })?;",
      "153:             }",
      "155:             root_fs",
      "156:                 .mount(guest_path.clone(), host_fs, host_path.clone())",
      "159:                         \"Unable to mount \\\"{}\\\" to \\\"{}\\\"\",",
      "160:                         host_path.display(),",
      "165:             builder",
      "166:                 .add_preopen_dir(&guest_path)",
      "167:                 .with_context(|| format!(\"Unable to preopen \\\"{}\\\"\", guest_path.display()))?;",
      "171:     Ok(())",
      "172: }",
      "174: fn prepare_filesystem(",
      "175:     mut root_fs: TmpFileSystem,",
      "176:     mapped_dirs: &[MappedDirectory],",
      "177:     container_fs: Option<Arc<dyn FileSystem + Send + Sync>>,",
      "178:     builder: &mut WasiEnvBuilder,",
      "179: ) -> Result<Box<dyn FileSystem + Send + Sync>, Error> {",
      "180:     if !mapped_dirs.is_empty() {",
      "181:         let host_fs: Arc<dyn FileSystem + Send + Sync> = Arc::new(crate::default_fs_backing());",
      "182:         build_directory_mappings(builder, &mut root_fs, &host_fs, mapped_dirs)?;",
      "183:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "172:     Ok(fs)",
      "173: }",
      "",
      "[Removed Lines]",
      "169:     let container_fs = RelativeOrAbsolutePathHack(container_fs);",
      "170:     let fs = OverlayFileSystem::new(root_fs, [container_fs]);",
      "",
      "[Added Lines]",
      "194:     let fs = if let Some(container) = container_fs {",
      "195:         let container = RelativeOrAbsolutePathHack(container);",
      "196:         let fs = OverlayFileSystem::new(root_fs, [container]);",
      "197:         Box::new(fs) as Box<dyn FileSystem + Send + Sync>",
      "198:     } else {",
      "199:         let fs = RelativeOrAbsolutePathHack(root_fs);",
      "200:         Box::new(fs) as Box<dyn FileSystem + Send + Sync>",
      "201:     };",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "309:             \"args\".to_string(),",
      "310:         ]);",
      "313:             .unwrap();",
      "315:         assert_eq!(",
      "",
      "[Removed Lines]",
      "312:         args.prepare_webc_env(&mut builder, fs, &annotations, None)",
      "",
      "[Added Lines]",
      "343:         args.prepare_webc_env(&mut builder, Some(fs), &annotations, None)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341:         let mut annotations = WasiAnnotation::new(\"python\");",
      "342:         annotations.env = Some(vec![\"HARD_CODED=env-vars\".to_string()]);",
      "345:             .unwrap();",
      "347:         assert_eq!(",
      "",
      "[Removed Lines]",
      "344:         args.prepare_webc_env(&mut builder, fs, &annotations, None)",
      "",
      "[Added Lines]",
      "375:         args.prepare_webc_env(&mut builder, Some(fs), &annotations, None)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "368:         let mut builder = WasiEnvBuilder::new(\"\");",
      "370:         let root_fs = RootFileSystemBuilder::default().build();",
      "373:         assert!(fs.metadata(\"/home/file.txt\".as_ref()).unwrap().is_file());",
      "374:         assert!(fs.metadata(\"lib\".as_ref()).unwrap().is_dir());",
      "",
      "[Removed Lines]",
      "371:         let fs = prepare_filesystem(root_fs, &mapping, Arc::new(webc_fs), &mut builder).unwrap();",
      "",
      "[Added Lines]",
      "402:         let fs =",
      "403:             prepare_filesystem(root_fs, &mapping, Some(Arc::new(webc_fs)), &mut builder).unwrap();",
      "",
      "---------------"
    ],
    "lib/wasix/src/runners/wcgi/runner.rs||lib/wasix/src/runners/wcgi/runner.rs": [
      "File: lib/wasix/src/runners/wcgi/runner.rs -> lib/wasix/src/runners/wcgi/runner.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:         let wasi_common = self.config.wasi.clone();",
      "68:         let rt = Arc::clone(&runtime);",
      "69:         let setup_builder = move |builder: &mut WasiEnvBuilder| {",
      "71:             builder.set_runtime(Arc::clone(&rt));",
      "73:             Ok(())",
      "",
      "[Removed Lines]",
      "70:             wasi_common.prepare_webc_env(builder, Arc::clone(&container_fs), &wasi, None)?;",
      "",
      "[Added Lines]",
      "70:             wasi_common.prepare_webc_env(builder, Some(Arc::clone(&container_fs)), &wasi, None)?;",
      "",
      "---------------"
    ],
    "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs": [
      "File: lib/wasix/src/state/builder.rs -> lib/wasix/src/state/builder.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: use bytes::Bytes;",
      "10: use rand::Rng;",
      "11: use thiserror::Error;",
      "13: use wasmer::{AsStoreMut, Instance, Module, RuntimeError, Store};",
      "14: use wasmer_wasix_types::wasi::{Errno, ExitCode};",
      "",
      "[Removed Lines]",
      "12: use virtual_fs::{ArcFile, FsError, TmpFileSystem, VirtualFile};",
      "",
      "[Added Lines]",
      "12: use virtual_fs::{ArcFile, FileSystem, FsError, TmpFileSystem, VirtualFile};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:     pub(super) stdin: Option<Box<dyn VirtualFile + Send + Sync + 'static>>,",
      "63:     pub(super) fs: Option<WasiFsRoot>,",
      "64:     pub(super) runtime: Option<Arc<dyn crate::Runtime + Send + Sync + 'static>>,",
      "67:     pub(super) uses: Vec<BinaryPackage>,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     pub(super) current_dir: Option<PathBuf>,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "304:     }",
      "308:     pub fn map_command<Name, Target>(mut self, name: Name, target: Target) -> Self",
      "309:     where",
      "310:         Name: AsRef<str>,",
      "311:         Target: AsRef<str>,",
      "",
      "[Removed Lines]",
      "307:     #[cfg(feature = \"sys\")]",
      "",
      "[Added Lines]",
      "309:     where",
      "310:         Name: AsRef<str>,",
      "311:         Target: AsRef<str>,",
      "312:     {",
      "313:         self.add_mapped_command(name, target);",
      "314:         self",
      "315:     }",
      "318:     pub fn add_mapped_command<Name, Target>(&mut self, name: Name, target: Target)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "313:         let path_buf = PathBuf::from(target.as_ref().to_string());",
      "314:         self.map_commands",
      "315:             .insert(name.as_ref().to_string(), path_buf);",
      "317:     }",
      "321:     pub fn map_commands<I, Name, Target>(mut self, map_commands: I) -> Self",
      "322:     where",
      "323:         I: IntoIterator<Item = (Name, Target)>,",
      "324:         Name: AsRef<str>,",
      "325:         Target: AsRef<str>,",
      "326:     {",
      "332:         self",
      "333:     }",
      "",
      "[Removed Lines]",
      "316:         self",
      "320:     #[cfg(feature = \"sys\")]",
      "327:         map_commands.into_iter().for_each(|(name, target)| {",
      "328:             let path_buf = PathBuf::from(target.as_ref().to_string());",
      "329:             self.map_commands",
      "330:                 .insert(name.as_ref().to_string(), path_buf);",
      "331:         });",
      "",
      "[Added Lines]",
      "335:         self.add_mapped_commands(map_commands);",
      "340:     pub fn add_mapped_commands<I, Name, Target>(&mut self, map_commands: I)",
      "341:     where",
      "342:         I: IntoIterator<Item = (Name, Target)>,",
      "343:         Name: AsRef<str>,",
      "344:         Target: AsRef<str>,",
      "345:     {",
      "346:         for (alias, target) in map_commands {",
      "347:             self.add_mapped_command(alias, target);",
      "348:         }",
      "349:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "480:         Ok(self)",
      "481:     }",
      "485:     pub fn stdout(mut self, new_file: Box<dyn VirtualFile + Send + Sync + 'static>) -> Self {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "499:     pub fn set_current_dir(&mut self, dir: impl Into<PathBuf>) {",
      "500:         self.current_dir = Some(dir.into());",
      "501:     }",
      "503:     pub fn current_dir(mut self, dir: impl Into<PathBuf>) -> Self {",
      "504:         self.set_current_dir(dir);",
      "505:         self",
      "506:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "651:             .take()",
      "652:             .unwrap_or_else(|| WasiFsRoot::Sandbox(Arc::new(TmpFileSystem::new())));",
      "655:         let inodes = crate::state::WasiInodes::new();",
      "656:         let wasi_fs = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "679:         if let Some(dir) = &self.current_dir {",
      "680:             match fs_backing.read_dir(dir) {",
      "681:                 Ok(_) => {",
      "683:                 }",
      "684:                 Err(FsError::EntryNotFound) => {",
      "685:                     fs_backing.create_dir(dir).map_err(|err| {",
      "686:                         WasiStateCreationError::WasiFsSetupError(format!(",
      "687:                             \"Could not create specified current directory at '{}': {err}\",",
      "688:                             dir.display()",
      "689:                         ))",
      "690:                     })?;",
      "691:                 }",
      "692:                 Err(err) => {",
      "693:                     return Err(WasiStateCreationError::WasiFsSetupError(format!(",
      "694:                         \"Could check specified current directory at '{}': {err}\",",
      "695:                         dir.display()",
      "696:                     )));",
      "697:                 }",
      "698:             }",
      "699:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "682:             wasi_fs",
      "683:         };",
      "685:         let envs = self",
      "686:             .envs",
      "687:             .into_iter()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "732:         if let Some(dir) = &self.current_dir {",
      "733:             let s = dir.to_str().ok_or_else(|| {",
      "734:                 WasiStateCreationError::WasiFsSetupError(format!(",
      "735:                     \"Specified current directory is not valid UTF-8: '{}'\",",
      "736:                     dir.display()",
      "737:                 ))",
      "738:             })?;",
      "739:             wasi_fs.set_current_dir(s);",
      "740:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd34c5362708c14aa3a908671750e6171107e3ea",
      "candidate_info": {
        "commit_hash": "bd34c5362708c14aa3a908671750e6171107e3ea",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/bd34c5362708c14aa3a908671750e6171107e3ea",
        "files": [
          "lib/cli/src/commands/mod.rs",
          "lib/cli/src/commands/run/mod.rs",
          "lib/cli/src/commands/run/wasi.rs",
          "lib/wasix/src/os/console/mod.rs",
          "lib/wasix/src/runners/mod.rs",
          "lib/wasix/src/runners/wasi.rs",
          "lib/wasix/src/runners/wasi_common.rs",
          "lib/wasix/src/runners/wcgi/runner.rs",
          "lib/wasix/src/state/builder.rs"
        ],
        "message": "refactor(cli): run: Unify wasi env setup\n\nUnify the setup of the WasiEnv.\nPreviously there were different setup paths for running plain .wasm\nfiles and for running packages.\n\nThis required some modifications to the WasiRunner, but only a\nreasonable amount.\n\nThis also brings some additional improvements:\n\n* Allow customizing the current_dir , both in the WasiEnvBuilder and in\n  the WasiRunner\n* Properly validate and merge --dir and --mapdir flags",
        "before_after_code_files": [
          "lib/cli/src/commands/run.rs||lib/cli/src/commands/run/mod.rs",
          "lib/cli/src/commands/run/wasi.rs||lib/cli/src/commands/run/wasi.rs",
          "lib/wasix/src/os/console/mod.rs||lib/wasix/src/os/console/mod.rs",
          "lib/wasix/src/runners/mod.rs||lib/wasix/src/runners/mod.rs",
          "lib/wasix/src/runners/wasi.rs||lib/wasix/src/runners/wasi.rs",
          "lib/wasix/src/runners/wasi_common.rs||lib/wasix/src/runners/wasi_common.rs",
          "lib/wasix/src/runners/wcgi/runner.rs||lib/wasix/src/runners/wcgi/runner.rs",
          "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/wasmerio/wasmer/pull/4301"
        ],
        "olp_code_files": {
          "patch": [
            "lib/cli/src/commands/run.rs||lib/cli/src/commands/run/mod.rs",
            "lib/cli/src/commands/run/wasi.rs||lib/cli/src/commands/run/wasi.rs",
            "lib/wasix/src/os/console/mod.rs||lib/wasix/src/os/console/mod.rs",
            "lib/wasix/src/runners/mod.rs||lib/wasix/src/runners/mod.rs",
            "lib/wasix/src/runners/wasi.rs||lib/wasix/src/runners/wasi.rs",
            "lib/wasix/src/runners/wasi_common.rs||lib/wasix/src/runners/wasi_common.rs",
            "lib/wasix/src/runners/wcgi/runner.rs||lib/wasix/src/runners/wcgi/runner.rs",
            "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
          ],
          "candidate": [
            "lib/cli/src/commands/run.rs||lib/cli/src/commands/run/mod.rs",
            "lib/cli/src/commands/run/wasi.rs||lib/cli/src/commands/run/wasi.rs",
            "lib/wasix/src/os/console/mod.rs||lib/wasix/src/os/console/mod.rs",
            "lib/wasix/src/runners/mod.rs||lib/wasix/src/runners/mod.rs",
            "lib/wasix/src/runners/wasi.rs||lib/wasix/src/runners/wasi.rs",
            "lib/wasix/src/runners/wasi_common.rs||lib/wasix/src/runners/wasi_common.rs",
            "lib/wasix/src/runners/wcgi/runner.rs||lib/wasix/src/runners/wcgi/runner.rs",
            "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
          ]
        }
      },
      "candidate_diff": {
        "lib/cli/src/commands/run.rs||lib/cli/src/commands/run/mod.rs": [
          "File: lib/cli/src/commands/run.rs -> lib/cli/src/commands/run/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: use wasmer_registry::{wasmer_env::WasmerEnv, Package};",
          "31: use wasmer_wasix::{",
          "32:     bin_factory::BinaryPackage,",
          "34:     runtime::{",
          "35:         module_cache::{CacheError, ModuleHash},",
          "36:         package_loader::PackageLoader,",
          "",
          "[Removed Lines]",
          "33:     runners::{MappedDirectory, Runner},",
          "",
          "[Added Lines]",
          "33:     runners::{MappedCommand, MappedDirectory, Runner},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:         uses: Vec<BinaryPackage>,",
          "216:         runtime: Arc<dyn Runtime + Send + Sync>,",
          "217:     ) -> Result<(), Error> {",
          "229:         runner.run_command(command_name, pkg, runtime)",
          "230:     }",
          "",
          "[Removed Lines]",
          "218:         let mut runner = wasmer_wasix::runners::wasi::WasiRunner::new()",
          "219:             .with_args(self.args.clone())",
          "220:             .with_envs(self.wasi.env_vars.clone())",
          "221:             .with_mapped_directories(self.wasi.mapped_dirs.clone())",
          "222:             .with_injected_packages(uses);",
          "223:         if self.wasi.forward_host_env {",
          "224:             runner.set_forward_host_env();",
          "225:         }",
          "",
          "[Added Lines]",
          "218:         let mut runner = self.build_wasi_runner(&runtime)?;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:         Ok(())",
          "299:     }",
          "301:     #[tracing::instrument(skip_all)]",
          "302:     fn execute_wasi_module(",
          "303:         &self,",
          "304:         wasm_path: &Path,",
          "305:         module: &Module,",
          "306:         runtime: Arc<dyn Runtime + Send + Sync>,",
          "308:     ) -> Result<(), Error> {",
          "309:         let program_name = wasm_path.display().to_string();",
          "318:     }",
          "320:     #[tracing::instrument(skip_all)]",
          "",
          "[Removed Lines]",
          "307:         store: Store,",
          "311:         let builder = self",
          "312:             .wasi",
          "313:             .prepare(module, program_name, self.args.clone(), runtime)?;",
          "315:         builder.run_with_store_async(module.clone(), store)?;",
          "317:         Ok(())",
          "",
          "[Added Lines]",
          "291:     fn build_wasi_runner(",
          "292:         &self,",
          "293:         runtime: &Arc<dyn Runtime + Send + Sync>,",
          "294:     ) -> Result<WasiRunner, anyhow::Error> {",
          "295:         let packages = self.load_injected_packages(runtime)?;",
          "297:         let runner = WasiRunner::new()",
          "298:             .with_args(&self.args)",
          "299:             .with_injected_packages(packages)",
          "300:             .with_envs(self.wasi.env_vars.clone())",
          "301:             .with_mapped_host_commands(self.wasi.build_mapped_commands()?)",
          "302:             .with_mapped_directories(self.wasi.build_mapped_directories()?)",
          "303:             .with_forward_host_env(self.wasi.forward_host_env)",
          "304:             .with_capabilities(self.wasi.capabilities());",
          "306:         Ok(runner)",
          "307:     }",
          "315:         mut store: Store,",
          "319:         let runner = self.build_wasi_runner(&runtime)?;",
          "320:         runner.run_wasm(",
          "321:             runtime,",
          "322:             &program_name,",
          "323:             module,",
          "324:             self.wasi.enable_async_threads,",
          "325:         )",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/run/wasi.rs||lib/cli/src/commands/run/wasi.rs": [
          "File: lib/cli/src/commands/run/wasi.rs -> lib/cli/src/commands/run/wasi.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     http::HttpClient,",
          "21:     os::{tty_sys::SysTty, TtyBridge},",
          "22:     rewind_ext,",
          "24:     runtime::{",
          "25:         module_cache::{FileSystemCache, ModuleCache},",
          "26:         package_loader::{BuiltinPackageLoader, PackageLoader},",
          "",
          "[Removed Lines]",
          "23:     runners::MappedDirectory,",
          "",
          "[Added Lines]",
          "23:     runners::{MappedCommand, MappedDirectory},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     #[clap(long = \"include-webc\", name = \"WEBC\")]",
          "83:     #[clap(long = \"map-command\", name = \"MAPCMD\")]",
          "87:     #[cfg(feature = \"experimental-io-devices\")]",
          "",
          "[Removed Lines]",
          "80:     include_webcs: Vec<PathBuf>,",
          "84:     map_commands: Vec<String>,",
          "",
          "[Added Lines]",
          "80:     pub(super) include_webcs: Vec<PathBuf>,",
          "84:     pub(super) map_commands: Vec<String>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: #[allow(dead_code)]",
          "127: impl Wasi {",
          "128:     pub fn map_dir(&mut self, alias: &str, target_on_disk: PathBuf) {",
          "129:         self.mapped_dirs.push(MappedDirectory {",
          "130:             guest: alias.to_string(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     const MAPPED_CURRENT_DIR_DEFAULT_PATH: &'static str = \"/mnt/host\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:             .uses(uses)",
          "191:             .map_commands(map_commands);",
          "195:             let root_fs = RootFileSystemBuilder::new()",
          "196:                 .with_tty(Box::new(DeviceFile::new(__WASI_STDIN_FILENO)))",
          "197:                 .build();",
          "199:                 let fs_backing: Arc<dyn FileSystem + Send + Sync> =",
          "200:                     Arc::new(PassthruFileSystem::new(default_fs_backing()));",
          "201:                 for MappedDirectory { host, guest } in self.mapped_dirs.clone() {",
          "",
          "[Removed Lines]",
          "193:         let mut builder = if wasmer_wasix::is_wasix_module(module) {",
          "198:             if !self.mapped_dirs.is_empty() {",
          "",
          "[Added Lines]",
          "195:         let mut builder = {",
          "201:             let mut mapped_dirs = Vec::new();",
          "204:             let mut have_current_dir = false;",
          "205:             for dir in &self.pre_opened_directories {",
          "206:                 let mapping = if dir == Path::new(\".\") {",
          "207:                     if have_current_dir {",
          "208:                         bail!(\"Cannot pre-open the current directory twice: --dir=. must only be specified once\");",
          "209:                     }",
          "210:                     have_current_dir = true;",
          "212:                     let current_dir =",
          "213:                         std::env::current_dir().context(\"could not determine current directory\")?;",
          "215:                     MappedDirectory {",
          "216:                         host: current_dir,",
          "217:                         guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
          "218:                     }",
          "219:                 } else {",
          "220:                     let resolved = dir.canonicalize().with_context(|| {",
          "221:                         format!(",
          "222:                             \"could not canonicalize path for argument '--dir {}'\",",
          "223:                             dir.display()",
          "224:                         )",
          "225:                     })?;",
          "227:                     if &resolved != dir {",
          "228:                         bail!(",
          "229:                             \"Invalid argument '--dir {}': path must either be absolute, or '.'\",",
          "230:                             dir.display(),",
          "231:                         );",
          "232:                     }",
          "234:                     let guest = resolved",
          "235:                         .to_str()",
          "236:                         .with_context(|| {",
          "237:                             format!(",
          "238:                                 \"invalid argument '--dir {}': path must be valid utf-8\",",
          "239:                                 dir.display(),",
          "240:                             )",
          "241:                         })?",
          "242:                         .to_string();",
          "244:                     MappedDirectory {",
          "245:                         host: resolved,",
          "246:                         guest,",
          "247:                     }",
          "248:                 };",
          "250:                 mapped_dirs.push(mapping);",
          "251:             }",
          "253:             for MappedDirectory { host, guest } in &self.mapped_dirs {",
          "254:                 let resolved_host = host.canonicalize().with_context(|| {",
          "255:                     format!(",
          "256:                         \"could not canonicalize path for argument '--mapdir {}:{}'\",",
          "257:                         host.display(),",
          "258:                         guest,",
          "259:                     )",
          "260:                 })?;",
          "262:                 let mapping = if guest == \".\" {",
          "263:                     if have_current_dir {",
          "264:                         bail!(\"Cannot pre-open the current directory twice: '--mapdir=?:.' / '--dir=.' must only be specified once\");",
          "265:                     }",
          "266:                     have_current_dir = true;",
          "268:                     MappedDirectory {",
          "269:                         host: resolved_host,",
          "270:                         guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
          "271:                     }",
          "272:                 } else {",
          "273:                     MappedDirectory {",
          "274:                         host: resolved_host,",
          "275:                         guest: guest.clone(),",
          "276:                     }",
          "277:                 };",
          "278:                 mapped_dirs.push(mapping);",
          "279:             }",
          "281:             if !mapped_dirs.is_empty() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:             }",
          "213:                 .sandbox_fs(root_fs)",
          "214:                 .preopen_dir(Path::new(\"/\"))",
          "226:         };",
          "",
          "[Removed Lines]",
          "212:             builder",
          "215:                 .unwrap()",
          "216:                 .map_dir(\".\", \"/\")?",
          "217:         } else {",
          "218:             builder",
          "219:                 .fs(default_fs_backing())",
          "220:                 .preopen_dirs(self.pre_opened_directories.clone())?",
          "221:                 .map_dirs(",
          "222:                     self.mapped_dirs",
          "223:                         .iter()",
          "224:                         .map(|d| (d.guest.clone(), d.host.clone())),",
          "225:                 )?",
          "",
          "[Added Lines]",
          "295:             let b = builder",
          "298:                 .unwrap();",
          "300:             if have_current_dir {",
          "301:                 b.map_dir(\".\", Self::MAPPED_CURRENT_DIR_DEFAULT_PATH)?",
          "302:             } else {",
          "303:                 b.map_dir(\".\", \"/\")?",
          "304:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:         Ok(builder)",
          "239:     }",
          "241:     pub fn capabilities(&self) -> Capabilities {",
          "242:         let mut caps = Capabilities::default();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:     pub fn build_mapped_directories(&self) -> Result<Vec<MappedDirectory>, anyhow::Error> {",
          "321:         let mut mapped_dirs = Vec::new();",
          "324:         let mut have_current_dir = false;",
          "325:         for dir in &self.pre_opened_directories {",
          "326:             let mapping = if dir == Path::new(\".\") {",
          "327:                 if have_current_dir {",
          "328:                     bail!(\"Cannot pre-open the current directory twice: --dir=. must only be specified once\");",
          "329:                 }",
          "330:                 have_current_dir = true;",
          "332:                 let current_dir =",
          "333:                     std::env::current_dir().context(\"could not determine current directory\")?;",
          "335:                 MappedDirectory {",
          "336:                     host: current_dir,",
          "337:                     guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
          "338:                 }",
          "339:             } else {",
          "340:                 let resolved = dir.canonicalize().with_context(|| {",
          "341:                     format!(",
          "342:                         \"could not canonicalize path for argument '--dir {}'\",",
          "343:                         dir.display()",
          "344:                     )",
          "345:                 })?;",
          "347:                 if &resolved != dir {",
          "348:                     bail!(",
          "349:                         \"Invalid argument '--dir {}': path must either be absolute, or '.'\",",
          "350:                         dir.display(),",
          "351:                     );",
          "352:                 }",
          "354:                 let guest = resolved",
          "355:                     .to_str()",
          "356:                     .with_context(|| {",
          "357:                         format!(",
          "358:                             \"invalid argument '--dir {}': path must be valid utf-8\",",
          "359:                             dir.display(),",
          "360:                         )",
          "361:                     })?",
          "362:                     .to_string();",
          "364:                 MappedDirectory {",
          "365:                     host: resolved,",
          "366:                     guest,",
          "367:                 }",
          "368:             };",
          "370:             mapped_dirs.push(mapping);",
          "371:         }",
          "373:         for MappedDirectory { host, guest } in &self.mapped_dirs {",
          "374:             let resolved_host = host.canonicalize().with_context(|| {",
          "375:                 format!(",
          "376:                     \"could not canonicalize path for argument '--mapdir {}:{}'\",",
          "377:                     host.display(),",
          "378:                     guest,",
          "379:                 )",
          "380:             })?;",
          "382:             let mapping = if guest == \".\" {",
          "383:                 if have_current_dir {",
          "384:                     bail!(\"Cannot pre-open the current directory twice: '--mapdir=?:.' / '--dir=.' must only be specified once\");",
          "385:                 }",
          "386:                 have_current_dir = true;",
          "388:                 MappedDirectory {",
          "389:                     host: resolved_host,",
          "390:                     guest: Self::MAPPED_CURRENT_DIR_DEFAULT_PATH.to_string(),",
          "391:                 }",
          "392:             } else {",
          "393:                 MappedDirectory {",
          "394:                     host: resolved_host,",
          "395:                     guest: guest.clone(),",
          "396:                 }",
          "397:             };",
          "398:             mapped_dirs.push(mapping);",
          "399:         }",
          "401:         Ok(mapped_dirs)",
          "402:     }",
          "404:     pub fn build_mapped_commands(&self) -> Result<Vec<MappedCommand>, anyhow::Error> {",
          "405:         self.map_commands",
          "406:             .iter()",
          "407:             .map(|item| {",
          "408:                 let (a, b) = item.split_once('=').with_context(|| {",
          "409:                     format!(",
          "410:                         \"Invalid --map-command flag: expected <ALIAS>=<HOST_PATH>, got '{item}'\"",
          "411:                     )",
          "412:                 })?;",
          "414:                 let a = a.trim();",
          "415:                 let b = b.trim();",
          "417:                 if a.is_empty() {",
          "418:                     bail!(\"Invalid --map-command flag - alias cannot be empty: '{item}'\");",
          "419:                 }",
          "421:                 if b.is_empty() {",
          "422:                     bail!(\"Invalid --map-command flag - host path cannot be empty: '{item}'\");",
          "423:                 }",
          "425:                 Ok(MappedCommand {",
          "426:                     alias: a.to_string(),",
          "427:                     target: b.to_string(),",
          "428:                 })",
          "429:             })",
          "430:             .collect::<Result<Vec<_>, anyhow::Error>>()",
          "431:     }",
          "",
          "---------------"
        ],
        "lib/wasix/src/os/console/mod.rs||lib/wasix/src/os/console/mod.rs": [
          "File: lib/wasix/src/os/console/mod.rs -> lib/wasix/src/os/console/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:             .with_stdin(Box::new(self.stdin.clone()))",
          "226:             .with_stdout(Box::new(self.stdout.clone()))",
          "227:             .with_stderr(Box::new(self.stderr.clone()))",
          "230:             .map_err(|err| SpawnError::Other(err.into()))?;",
          "",
          "[Removed Lines]",
          "228:             .prepare_webc_env(prog, &wasi_opts, &pkg, self.runtime.clone(), Some(root_fs))",
          "",
          "[Added Lines]",
          "228:             .prepare_webc_env(",
          "229:                 prog,",
          "230:                 &wasi_opts,",
          "231:                 Some(&pkg),",
          "232:                 self.runtime.clone(),",
          "233:                 Some(root_fs),",
          "234:             )",
          "",
          "---------------"
        ],
        "lib/wasix/src/runners/mod.rs||lib/wasix/src/runners/mod.rs": [
          "File: lib/wasix/src/runners/mod.rs -> lib/wasix/src/runners/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #[cfg(feature = \"webc_runner_rt_wcgi\")]",
          "8: pub mod wcgi;",
          "",
          "[Removed Lines]",
          "10: pub use self::runner::Runner;",
          "",
          "[Added Lines]",
          "10: pub use self::{runner::Runner, wasi_common::MappedCommand};",
          "",
          "---------------"
        ],
        "lib/wasix/src/runners/wasi.rs||lib/wasix/src/runners/wasi.rs": [
          "File: lib/wasix/src/runners/wasi.rs -> lib/wasix/src/runners/wasi.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use anyhow::{Context, Error};",
          "6: use tracing::Instrument;",
          "7: use virtual_fs::{ArcBoxFile, TmpFileSystem, VirtualFile};",
          "8: use webc::metadata::{annotations::Wasi, Command};",
          "10: use crate::{",
          "",
          "[Removed Lines]",
          "3: use std::sync::Arc;",
          "",
          "[Added Lines]",
          "3: use std::{path::PathBuf, sync::Arc};",
          "8: use wasmer::Module;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     Runtime, WasiEnvBuilder, WasiRuntimeError,",
          "16: };",
          "18: #[derive(Debug, Default, Clone)]",
          "19: pub struct WasiRunner {",
          "20:     wasi: CommonWasiOptions,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use super::wasi_common::MappedCommand;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:         }",
          "86:     }",
          "90:         self",
          "91:     }",
          "95:     }",
          "97:     pub fn with_mapped_directories<I, D>(mut self, dirs: I) -> Self",
          "",
          "[Removed Lines]",
          "88:     pub fn with_forward_host_env(mut self) -> Self {",
          "89:         self.set_forward_host_env();",
          "93:     pub fn set_forward_host_env(&mut self) {",
          "94:         self.wasi.forward_host_env = true;",
          "",
          "[Added Lines]",
          "91:     pub fn with_forward_host_env(mut self, forward: bool) -> Self {",
          "92:         self.set_forward_host_env(forward);",
          "96:     pub fn set_forward_host_env(&mut self, forward: bool) {",
          "97:         self.wasi.forward_host_env = forward;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:         self",
          "106:     }",
          "109:     pub fn add_injected_package(&mut self, pkg: BinaryPackage) -> &mut Self {",
          "110:         self.wasi.injected_packages.push(pkg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     pub fn set_current_dir(&mut self, dir: impl Into<PathBuf>) {",
          "112:         self.wasi.current_dir = Some(dir.into());",
          "113:     }",
          "115:     pub fn with_current_dir(mut self, dir: impl Into<PathBuf>) -> Self {",
          "116:         self.set_current_dir(dir);",
          "117:         self",
          "118:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:         self",
          "136:     }",
          "139:         &mut self.wasi.capabilities",
          "140:     }",
          "",
          "[Removed Lines]",
          "138:     pub fn capabilities(&mut self) -> &mut Capabilities {",
          "",
          "[Added Lines]",
          "150:     pub fn add_mapped_host_command(&mut self, alias: impl Into<String>, target: impl Into<String>) {",
          "151:         self.wasi.mapped_host_commands.push(MappedCommand {",
          "152:             alias: alias.into(),",
          "153:             target: target.into(),",
          "154:         });",
          "155:     }",
          "157:     pub fn with_mapped_host_command(",
          "158:         mut self,",
          "159:         alias: impl Into<String>,",
          "160:         target: impl Into<String>,",
          "161:     ) -> Self {",
          "162:         self.add_mapped_host_command(alias, target);",
          "163:         self",
          "164:     }",
          "166:     pub fn add_mapped_host_commands(&mut self, commands: impl IntoIterator<Item = MappedCommand>) {",
          "167:         self.wasi.mapped_host_commands.extend(commands);",
          "168:     }",
          "170:     pub fn with_mapped_host_commands(",
          "171:         mut self,",
          "172:         commands: impl IntoIterator<Item = MappedCommand>,",
          "173:     ) -> Self {",
          "174:         self.add_mapped_host_commands(commands);",
          "175:         self",
          "176:     }",
          "178:     pub fn capabilities_mut(&mut self) -> &mut Capabilities {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:         &self,",
          "184:         program_name: &str,",
          "185:         wasi: &Wasi,",
          "187:         runtime: Arc<dyn Runtime + Send + Sync>,",
          "188:         root_fs: Option<TmpFileSystem>,",
          "189:     ) -> Result<WasiEnvBuilder, anyhow::Error> {",
          "192:         self.wasi",
          "193:             .prepare_webc_env(&mut builder, container_fs, wasi, root_fs)?;",
          "",
          "[Removed Lines]",
          "186:         pkg: &BinaryPackage,",
          "190:         let mut builder = WasiEnvBuilder::new(program_name);",
          "191:         let container_fs = Arc::clone(&pkg.webc_fs);",
          "",
          "[Added Lines]",
          "226:         pkg: Option<&BinaryPackage>,",
          "230:         let mut builder = WasiEnvBuilder::new(program_name).runtime(runtime);",
          "232:         let container_fs = if let Some(pkg) = pkg {",
          "233:             builder.add_webc(pkg.clone());",
          "234:             Some(Arc::clone(&pkg.webc_fs))",
          "235:         } else {",
          "236:             None",
          "237:         };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "202:             builder.set_stderr(Box::new(stderr.clone()));",
          "203:         }",
          "208:         Ok(builder)",
          "209:     }",
          "210: }",
          "212: impl crate::runners::Runner for WasiRunner {",
          "",
          "[Removed Lines]",
          "205:         builder.add_webc(pkg.clone());",
          "206:         builder.set_runtime(runtime);",
          "",
          "[Added Lines]",
          "255:     pub fn run_wasm(",
          "256:         &self,",
          "257:         runtime: Arc<dyn Runtime + Send + Sync>,",
          "258:         program_name: &str,",
          "259:         module: &Module,",
          "260:         asyncify: bool,",
          "261:     ) -> Result<(), Error> {",
          "262:         let wasi = webc::metadata::annotations::Wasi::new(program_name);",
          "263:         let mut store = runtime.new_store();",
          "264:         let env = self.prepare_webc_env(program_name, &wasi, None, runtime, None)?;",
          "266:         if asyncify {",
          "267:             env.run_with_store_async(module.clone(), store)?;",
          "268:         } else {",
          "269:             env.run_with_store(module.clone(), &mut store)?;",
          "270:         }",
          "272:         Ok(())",
          "273:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "231:             .annotation(\"wasi\")?",
          "232:             .unwrap_or_else(|| Wasi::new(command_name));",
          "236:         let env = self",
          "238:             .context(\"Unable to prepare the WASI environment\")?",
          "239:             .build()?;",
          "241:         let command_name = command_name.to_string();",
          "242:         let tasks = runtime.task_manager().clone();",
          "243:         let pkg = pkg.clone();",
          "",
          "[Removed Lines]",
          "234:         let store = runtime.new_store();",
          "237:             .prepare_webc_env(command_name, &wasi, pkg, Arc::clone(&runtime), None)",
          "",
          "[Added Lines]",
          "299:             .prepare_webc_env(command_name, &wasi, Some(pkg), Arc::clone(&runtime), None)",
          "303:         let store = runtime.new_store();",
          "",
          "---------------"
        ],
        "lib/wasix/src/runners/wasi_common.rs||lib/wasix/src/runners/wasi_common.rs": [
          "File: lib/wasix/src/runners/wasi_common.rs -> lib/wasix/src/runners/wasi_common.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     WasiEnvBuilder,",
          "15: };",
          "17: #[derive(Debug, Default, Clone)]",
          "18: pub(crate) struct CommonWasiOptions {",
          "19:     pub(crate) args: Vec<String>,",
          "20:     pub(crate) env: HashMap<String, String>,",
          "21:     pub(crate) forward_host_env: bool,",
          "22:     pub(crate) mapped_dirs: Vec<MappedDirectory>,",
          "23:     pub(crate) injected_packages: Vec<BinaryPackage>,",
          "24:     pub(crate) capabilities: Capabilities,",
          "25: }",
          "27: impl CommonWasiOptions {",
          "28:     pub(crate) fn prepare_webc_env(",
          "29:         &self,",
          "30:         builder: &mut WasiEnvBuilder,",
          "32:         wasi: &WasiAnnotation,",
          "33:         root_fs: Option<TmpFileSystem>,",
          "34:     ) -> Result<(), anyhow::Error> {",
          "",
          "[Removed Lines]",
          "31:         container_fs: Arc<dyn FileSystem + Send + Sync>,",
          "",
          "[Added Lines]",
          "17: #[derive(Debug, Clone)]",
          "18: pub struct MappedCommand {",
          "20:     pub alias: String,",
          "22:     pub target: String,",
          "23: }",
          "31:     pub(crate) mapped_host_commands: Vec<MappedCommand>,",
          "34:     pub(crate) current_dir: Option<PathBuf>,",
          "41:         container_fs: Option<Arc<dyn FileSystem + Send + Sync>>,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:             builder.add_webc(pkg.clone());",
          "49:         }",
          "51:         self.populate_env(wasi, builder);",
          "52:         self.populate_args(wasi, builder);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         let mapped_cmds = self",
          "62:             .mapped_host_commands",
          "63:             .iter()",
          "64:             .map(|c| (c.alias.as_str(), c.target.as_str()));",
          "65:         builder.add_mapped_commands(mapped_cmds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:     }",
          "88: }",
          "97:     builder: &mut WasiEnvBuilder,",
          "120:             })?;",
          "124:                 .with_context(|| {",
          "125:                     format!(",
          "127:                         guest_path.display()",
          "128:                     )",
          "129:                 })?;",
          "158:         }",
          "159:     }",
          "",
          "[Removed Lines]",
          "90: type ContainerFs =",
          "91:     OverlayFileSystem<TmpFileSystem, [RelativeOrAbsolutePathHack<Arc<dyn FileSystem>>; 1]>;",
          "93: fn prepare_filesystem(",
          "94:     root_fs: TmpFileSystem,",
          "95:     mapped_dirs: &[MappedDirectory],",
          "96:     container_fs: Arc<dyn FileSystem>,",
          "98: ) -> Result<ContainerFs, Error> {",
          "99:     if !mapped_dirs.is_empty() {",
          "100:         let host_fs: Arc<dyn FileSystem + Send + Sync> = Arc::new(crate::default_fs_backing());",
          "102:         for dir in mapped_dirs {",
          "103:             let MappedDirectory {",
          "104:                 host: host_path,",
          "105:                 guest: guest_path,",
          "106:             } = dir;",
          "107:             let mut guest_path = PathBuf::from(guest_path);",
          "108:             tracing::debug!(",
          "109:                 guest=%guest_path.display(),",
          "110:                 host=%host_path.display(),",
          "111:                 \"Mounting host folder\",",
          "112:             );",
          "114:             if guest_path.is_relative() {",
          "115:                 guest_path = apply_relative_path_mounting_hack(&guest_path);",
          "116:             }",
          "118:             let host_path = std::fs::canonicalize(host_path).with_context(|| {",
          "119:                 format!(\"Unable to canonicalize host path '{}'\", host_path.display())",
          "122:             let guest_path = root_fs",
          "123:                 .canonicalize_unchecked(&guest_path)",
          "126:                         \"Unable to canonicalize guest path '{}'\",",
          "131:             if guest_path == Path::new(\"/\") {",
          "132:                 root_fs",
          "133:                     .mount_directory_entries(&guest_path, &host_fs, &host_path)",
          "134:                     .with_context(|| {",
          "135:                         format!(\"Unable to mount \\\"{}\\\" to root\", host_path.display(),)",
          "136:                     })?;",
          "137:             } else {",
          "138:                 if let Some(parent) = guest_path.parent() {",
          "139:                     create_dir_all(&root_fs, parent).with_context(|| {",
          "140:                         format!(\"Unable to create the \\\"{}\\\" directory\", parent.display())",
          "141:                     })?;",
          "142:                 }",
          "144:                 root_fs",
          "145:                     .mount(guest_path.clone(), &host_fs, host_path.clone())",
          "146:                     .with_context(|| {",
          "147:                         format!(",
          "148:                             \"Unable to mount \\\"{}\\\" to \\\"{}\\\"\",",
          "149:                             host_path.display(),",
          "150:                             guest_path.display()",
          "151:                         )",
          "152:                     })?;",
          "154:                 builder",
          "155:                     .add_preopen_dir(&guest_path)",
          "156:                     .with_context(|| format!(\"Unable to preopen \\\"{}\\\"\", guest_path.display()))?;",
          "157:             }",
          "",
          "[Added Lines]",
          "109: fn build_directory_mappings(",
          "111:     root_fs: &mut TmpFileSystem,",
          "112:     host_fs: &Arc<dyn FileSystem + Send + Sync>,",
          "113:     mapped_dirs: &[MappedDirectory],",
          "114: ) -> Result<(), anyhow::Error> {",
          "115:     for dir in mapped_dirs {",
          "116:         let MappedDirectory {",
          "117:             host: host_path,",
          "118:             guest: guest_path,",
          "119:         } = dir;",
          "120:         let mut guest_path = PathBuf::from(guest_path);",
          "121:         tracing::debug!(",
          "122:             guest=%guest_path.display(),",
          "123:             host=%host_path.display(),",
          "124:             \"Mounting host folder\",",
          "125:         );",
          "127:         if guest_path.is_relative() {",
          "128:             guest_path = apply_relative_path_mounting_hack(&guest_path);",
          "129:         }",
          "131:         let host_path = std::fs::canonicalize(host_path).with_context(|| {",
          "132:             format!(\"Unable to canonicalize host path '{}'\", host_path.display())",
          "133:         })?;",
          "135:         let guest_path = root_fs",
          "136:             .canonicalize_unchecked(&guest_path)",
          "137:             .with_context(|| {",
          "138:                 format!(",
          "139:                     \"Unable to canonicalize guest path '{}'\",",
          "140:                     guest_path.display()",
          "141:                 )",
          "144:         if guest_path == Path::new(\"/\") {",
          "145:             root_fs",
          "146:                 .mount_directory_entries(&guest_path, host_fs, &host_path)",
          "147:                 .with_context(|| format!(\"Unable to mount \\\"{}\\\" to root\", host_path.display(),))?;",
          "148:         } else {",
          "149:             if let Some(parent) = guest_path.parent() {",
          "150:                 create_dir_all(root_fs, parent).with_context(|| {",
          "151:                     format!(\"Unable to create the \\\"{}\\\" directory\", parent.display())",
          "152:                 })?;",
          "153:             }",
          "155:             root_fs",
          "156:                 .mount(guest_path.clone(), host_fs, host_path.clone())",
          "159:                         \"Unable to mount \\\"{}\\\" to \\\"{}\\\"\",",
          "160:                         host_path.display(),",
          "165:             builder",
          "166:                 .add_preopen_dir(&guest_path)",
          "167:                 .with_context(|| format!(\"Unable to preopen \\\"{}\\\"\", guest_path.display()))?;",
          "171:     Ok(())",
          "172: }",
          "174: fn prepare_filesystem(",
          "175:     mut root_fs: TmpFileSystem,",
          "176:     mapped_dirs: &[MappedDirectory],",
          "177:     container_fs: Option<Arc<dyn FileSystem + Send + Sync>>,",
          "178:     builder: &mut WasiEnvBuilder,",
          "179: ) -> Result<Box<dyn FileSystem + Send + Sync>, Error> {",
          "180:     if !mapped_dirs.is_empty() {",
          "181:         let host_fs: Arc<dyn FileSystem + Send + Sync> = Arc::new(crate::default_fs_backing());",
          "182:         build_directory_mappings(builder, &mut root_fs, &host_fs, mapped_dirs)?;",
          "183:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:     Ok(fs)",
          "173: }",
          "",
          "[Removed Lines]",
          "169:     let container_fs = RelativeOrAbsolutePathHack(container_fs);",
          "170:     let fs = OverlayFileSystem::new(root_fs, [container_fs]);",
          "",
          "[Added Lines]",
          "194:     let fs = if let Some(container) = container_fs {",
          "195:         let container = RelativeOrAbsolutePathHack(container);",
          "196:         let fs = OverlayFileSystem::new(root_fs, [container]);",
          "197:         Box::new(fs) as Box<dyn FileSystem + Send + Sync>",
          "198:     } else {",
          "199:         let fs = RelativeOrAbsolutePathHack(root_fs);",
          "200:         Box::new(fs) as Box<dyn FileSystem + Send + Sync>",
          "201:     };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "309:             \"args\".to_string(),",
          "310:         ]);",
          "313:             .unwrap();",
          "315:         assert_eq!(",
          "",
          "[Removed Lines]",
          "312:         args.prepare_webc_env(&mut builder, fs, &annotations, None)",
          "",
          "[Added Lines]",
          "343:         args.prepare_webc_env(&mut builder, Some(fs), &annotations, None)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "341:         let mut annotations = WasiAnnotation::new(\"python\");",
          "342:         annotations.env = Some(vec![\"HARD_CODED=env-vars\".to_string()]);",
          "345:             .unwrap();",
          "347:         assert_eq!(",
          "",
          "[Removed Lines]",
          "344:         args.prepare_webc_env(&mut builder, fs, &annotations, None)",
          "",
          "[Added Lines]",
          "375:         args.prepare_webc_env(&mut builder, Some(fs), &annotations, None)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "368:         let mut builder = WasiEnvBuilder::new(\"\");",
          "370:         let root_fs = RootFileSystemBuilder::default().build();",
          "373:         assert!(fs.metadata(\"/home/file.txt\".as_ref()).unwrap().is_file());",
          "374:         assert!(fs.metadata(\"lib\".as_ref()).unwrap().is_dir());",
          "",
          "[Removed Lines]",
          "371:         let fs = prepare_filesystem(root_fs, &mapping, Arc::new(webc_fs), &mut builder).unwrap();",
          "",
          "[Added Lines]",
          "402:         let fs =",
          "403:             prepare_filesystem(root_fs, &mapping, Some(Arc::new(webc_fs)), &mut builder).unwrap();",
          "",
          "---------------"
        ],
        "lib/wasix/src/runners/wcgi/runner.rs||lib/wasix/src/runners/wcgi/runner.rs": [
          "File: lib/wasix/src/runners/wcgi/runner.rs -> lib/wasix/src/runners/wcgi/runner.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         let wasi_common = self.config.wasi.clone();",
          "68:         let rt = Arc::clone(&runtime);",
          "69:         let setup_builder = move |builder: &mut WasiEnvBuilder| {",
          "71:             builder.set_runtime(Arc::clone(&rt));",
          "73:             Ok(())",
          "",
          "[Removed Lines]",
          "70:             wasi_common.prepare_webc_env(builder, Arc::clone(&container_fs), &wasi, None)?;",
          "",
          "[Added Lines]",
          "70:             wasi_common.prepare_webc_env(builder, Some(Arc::clone(&container_fs)), &wasi, None)?;",
          "",
          "---------------"
        ],
        "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs": [
          "File: lib/wasix/src/state/builder.rs -> lib/wasix/src/state/builder.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use bytes::Bytes;",
          "10: use rand::Rng;",
          "11: use thiserror::Error;",
          "13: use wasmer::{AsStoreMut, Instance, Module, RuntimeError, Store};",
          "14: use wasmer_wasix_types::wasi::{Errno, ExitCode};",
          "",
          "[Removed Lines]",
          "12: use virtual_fs::{ArcFile, FsError, TmpFileSystem, VirtualFile};",
          "",
          "[Added Lines]",
          "12: use virtual_fs::{ArcFile, FileSystem, FsError, TmpFileSystem, VirtualFile};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     pub(super) stdin: Option<Box<dyn VirtualFile + Send + Sync + 'static>>,",
          "63:     pub(super) fs: Option<WasiFsRoot>,",
          "64:     pub(super) runtime: Option<Arc<dyn crate::Runtime + Send + Sync + 'static>>,",
          "67:     pub(super) uses: Vec<BinaryPackage>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     pub(super) current_dir: Option<PathBuf>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:     #[cfg(feature = \"sys\")]",
          "308:     pub fn map_command<Name, Target>(mut self, name: Name, target: Target) -> Self",
          "309:     where",
          "310:         Name: AsRef<str>,",
          "311:         Target: AsRef<str>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     where",
          "311:         Name: AsRef<str>,",
          "312:         Target: AsRef<str>,",
          "313:     {",
          "314:         self.add_mapped_command(name, target);",
          "315:         self",
          "316:     }",
          "319:     #[cfg(feature = \"sys\")]",
          "320:     pub fn add_mapped_command<Name, Target>(&mut self, name: Name, target: Target)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:         let path_buf = PathBuf::from(target.as_ref().to_string());",
          "314:         self.map_commands",
          "315:             .insert(name.as_ref().to_string(), path_buf);",
          "317:     }",
          "",
          "[Removed Lines]",
          "316:         self",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "324:         Name: AsRef<str>,",
          "325:         Target: AsRef<str>,",
          "326:     {",
          "332:         self",
          "333:     }",
          "",
          "[Removed Lines]",
          "327:         map_commands.into_iter().for_each(|(name, target)| {",
          "328:             let path_buf = PathBuf::from(target.as_ref().to_string());",
          "329:             self.map_commands",
          "330:                 .insert(name.as_ref().to_string(), path_buf);",
          "331:         });",
          "",
          "[Added Lines]",
          "338:         self.add_mapped_commands(map_commands);",
          "343:     #[cfg(feature = \"sys\")]",
          "344:     pub fn add_mapped_commands<I, Name, Target>(&mut self, map_commands: I)",
          "345:     where",
          "346:         I: IntoIterator<Item = (Name, Target)>,",
          "347:         Name: AsRef<str>,",
          "348:         Target: AsRef<str>,",
          "349:     {",
          "350:         for (alias, target) in map_commands {",
          "351:             self.add_mapped_command(alias, target);",
          "352:         }",
          "353:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "480:         Ok(self)",
          "481:     }",
          "485:     pub fn stdout(mut self, new_file: Box<dyn VirtualFile + Send + Sync + 'static>) -> Self {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:     pub fn set_current_dir(&mut self, dir: impl Into<PathBuf>) {",
          "504:         self.current_dir = Some(dir.into());",
          "505:     }",
          "507:     pub fn current_dir(mut self, dir: impl Into<PathBuf>) -> Self {",
          "508:         self.set_current_dir(dir);",
          "509:         self",
          "510:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "651:             .take()",
          "652:             .unwrap_or_else(|| WasiFsRoot::Sandbox(Arc::new(TmpFileSystem::new())));",
          "655:         let inodes = crate::state::WasiInodes::new();",
          "656:         let wasi_fs = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:         if let Some(dir) = &self.current_dir {",
          "684:             match fs_backing.read_dir(dir) {",
          "685:                 Ok(_) => {",
          "687:                 }",
          "688:                 Err(FsError::EntryNotFound) => {",
          "689:                     fs_backing.create_dir(dir).map_err(|err| {",
          "690:                         WasiStateCreationError::WasiFsSetupError(format!(",
          "691:                             \"Could not create specified current directory at '{}': {err}\",",
          "692:                             dir.display()",
          "693:                         ))",
          "694:                     })?;",
          "695:                 }",
          "696:                 Err(err) => {",
          "697:                     return Err(WasiStateCreationError::WasiFsSetupError(format!(",
          "698:                         \"Could check specified current directory at '{}': {err}\",",
          "699:                         dir.display()",
          "700:                     )));",
          "701:                 }",
          "702:             }",
          "703:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "682:             wasi_fs",
          "683:         };",
          "685:         let envs = self",
          "686:             .envs",
          "687:             .into_iter()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736:         if let Some(dir) = &self.current_dir {",
          "737:             let s = dir.to_str().ok_or_else(|| {",
          "738:                 WasiStateCreationError::WasiFsSetupError(format!(",
          "739:                     \"Specified current directory is not valid UTF-8: '{}'\",",
          "740:                     dir.display()",
          "741:                 ))",
          "742:             })?;",
          "743:             wasi_fs.set_current_dir(s);",
          "744:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11f7403752b03c0b48f0635962169cd60982ed2c",
      "candidate_info": {
        "commit_hash": "11f7403752b03c0b48f0635962169cd60982ed2c",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/11f7403752b03c0b48f0635962169cd60982ed2c",
        "files": [
          "lib/wasix/src/state/builder.rs"
        ],
        "message": "chore(wasix): Stop feature-gating the map_command methods on WasiEnvBuilder\n\nFeature-gating adds complexity to other parts of the code.\nWe can just ignore mappings on other architectures for now.",
        "before_after_code_files": [
          "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/wasmerio/wasmer/pull/4301"
        ],
        "olp_code_files": {
          "patch": [
            "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
          ],
          "candidate": [
            "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs"
          ]
        }
      },
      "candidate_diff": {
        "lib/wasix/src/state/builder.rs||lib/wasix/src/state/builder.rs": [
          "File: lib/wasix/src/state/builder.rs -> lib/wasix/src/state/builder.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     }",
          "309:     pub fn map_command<Name, Target>(mut self, name: Name, target: Target) -> Self",
          "310:     where",
          "311:         Name: AsRef<str>,",
          "",
          "[Removed Lines]",
          "308:     #[cfg(feature = \"sys\")]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     }",
          "320:     pub fn add_mapped_command<Name, Target>(&mut self, name: Name, target: Target)",
          "321:     where",
          "322:         Name: AsRef<str>,",
          "",
          "[Removed Lines]",
          "319:     #[cfg(feature = \"sys\")]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328:     }",
          "332:     pub fn map_commands<I, Name, Target>(mut self, map_commands: I) -> Self",
          "333:     where",
          "334:         I: IntoIterator<Item = (Name, Target)>,",
          "",
          "[Removed Lines]",
          "331:     #[cfg(feature = \"sys\")]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "340:     }",
          "344:     pub fn add_mapped_commands<I, Name, Target>(&mut self, map_commands: I)",
          "345:     where",
          "346:         I: IntoIterator<Item = (Name, Target)>,",
          "",
          "[Removed Lines]",
          "343:     #[cfg(feature = \"sys\")]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}