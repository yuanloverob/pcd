{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "124999563ab5e235d31fdecafcd41eb45e3b21e3",
      "candidate_info": {
        "commit_hash": "124999563ab5e235d31fdecafcd41eb45e3b21e3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/124999563ab5e235d31fdecafcd41eb45e3b21e3",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019020800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190208)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019021500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190215)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82b7ad70b1772e3f57d25ca6db3810794b6bc455",
      "candidate_info": {
        "commit_hash": "82b7ad70b1772e3f57d25ca6db3810794b6bc455",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/82b7ad70b1772e3f57d25ca6db3810794b6bc455",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-62621 comments: Add missing indexes on comments table\n\nThe composite index over the fields contextid, commentarea and itemid\nhelps the comments API to load all comments for the given area\neffectively.\n\nThe index over the userid field helps the privacy API to load all\ncomments by the given user.",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2236:     return true;",
          "2237: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2236:     if ($oldversion < 2018062800.01) {",
          "2238:         $table = new xmldb_table('comments');",
          "2239:         $key = new xmldb_key('fk_user', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));",
          "2240:         $dbman->add_key($table, $key);",
          "2242:         upgrade_main_savepoint(true, 2018062800.01);",
          "2243:     }",
          "2245:     if ($oldversion < 2018062800.02) {",
          "2247:         $table = new xmldb_table('comments');",
          "2248:         $index = new xmldb_index('ix_concomitem', XMLDB_INDEX_NOTUNIQUE, array('contextid', 'commentarea', 'itemid'));",
          "2250:         if (!$dbman->index_exists($table, $index)) {",
          "2251:             $dbman->add_index($table, $index);",
          "2252:         }",
          "2254:         upgrade_main_savepoint(true, 2018062800.02);",
          "2255:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018062800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018062800.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a866c5c23866fe527282429384ddbcb902c41c14",
      "candidate_info": {
        "commit_hash": "a866c5c23866fe527282429384ddbcb902c41c14",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a866c5c23866fe527282429384ddbcb902c41c14",
        "files": [
          "version.php"
        ],
        "message": "weekly back-to-dev release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052000.00;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7 (Build: 20190520)'; // Human-friendly version name",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Added Lines]",
          "32: $version  = 2019052000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190520)'; // Human-friendly version name",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3576b66bfdf07612f3d477ba21796df5e70805f5",
      "candidate_info": {
        "commit_hash": "3576b66bfdf07612f3d477ba21796df5e70805f5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3576b66bfdf07612f3d477ba21796df5e70805f5",
        "files": [
          "admin/settings/analytics.php",
          "admin/tool/analytics/lang/en/tool_analytics.php",
          "admin/tool/analytics/model.php",
          "analytics/classes/manager.php",
          "analytics/classes/model.php",
          "analytics/tests/prediction_test.php",
          "lang/en/analytics.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-60936 analytics: Timesplittings setting only for evaluation",
        "before_after_code_files": [
          "admin/settings/analytics.php||admin/settings/analytics.php",
          "admin/tool/analytics/lang/en/tool_analytics.php||admin/tool/analytics/lang/en/tool_analytics.php",
          "admin/tool/analytics/model.php||admin/tool/analytics/model.php",
          "analytics/classes/manager.php||analytics/classes/manager.php",
          "analytics/classes/model.php||analytics/classes/model.php",
          "analytics/tests/prediction_test.php||analytics/tests/prediction_test.php",
          "lang/en/analytics.php||lang/en/analytics.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/analytics.php||admin/settings/analytics.php": [
          "File: admin/settings/analytics.php -> admin/settings/analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         foreach ($alltimesplittings as $key => $timesplitting) {",
          "84:             $timesplittingoptions[$key] = $timesplitting->get_name();",
          "85:         }",
          "88:             $timesplittingdefaults, $timesplittingoptions)",
          "89:         );",
          "",
          "[Removed Lines]",
          "86:         $settings->add(new admin_setting_configmultiselect('analytics/timesplittings',",
          "87:             new lang_string('enabledtimesplittings', 'analytics'), new lang_string('timesplittingmethod_help', 'analytics'),",
          "",
          "[Added Lines]",
          "86:         $settings->add(new admin_setting_configmultiselect('analytics/defaulttimesplittingsevaluation',",
          "87:             new lang_string('defaulttimesplittingmethods', 'analytics'),",
          "88:             new lang_string('defaulttimesplittingmethods_help', 'analytics'),",
          "",
          "---------------"
        ],
        "admin/tool/analytics/lang/en/tool_analytics.php||admin/tool/analytics/lang/en/tool_analytics.php": [
          "File: admin/tool/analytics/lang/en/tool_analytics.php -> admin/tool/analytics/lang/en/tool_analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: $string['evaluationinbatches'] = 'The site contents are calculated and stored in batches. The evaluation process may be stopped at any time. The next time it is run, it will continue from the point when it was stopped.';",
          "69: $string['exportmodel'] = 'Export configuration';",
          "70: $string['exporttrainingdata'] = 'Export training data';",
          "73: $string['extrainfo'] = 'Info';",
          "74: $string['generalerror'] = 'Evaluation error. Status code {$a}';",
          "75: $string['getpredictions'] = 'Get predictions';",
          "",
          "[Removed Lines]",
          "71: $string['getpredictionsresultscli'] = 'Results using {$a->name} (id: {$a->id}) course duration splitting';",
          "72: $string['getpredictionsresults'] = 'Results using {$a->name} course duration splitting';",
          "",
          "[Added Lines]",
          "71: $string['getpredictionsresultscli'] = 'Results using {$a->name} (id: {$a->id}) time-splitting method';",
          "72: $string['getpredictionsresults'] = 'Results using {$a->name} time-splitting method';",
          "",
          "---------------"
        ],
        "admin/tool/analytics/model.php||admin/tool/analytics/model.php": [
          "File: admin/tool/analytics/model.php -> admin/tool/analytics/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:             'id' => $model->get_id(),",
          "120:             'trainedmodel' => $model->is_trained(),",
          "121:             'indicators' => $model->get_potential_indicators(),",
          "123:             'predictionprocessors' => \\core_analytics\\manager::get_all_prediction_processors()",
          "124:         );",
          "125:         $mform = new \\tool_analytics\\output\\form\\edit_model(null, $customdata);",
          "",
          "[Removed Lines]",
          "122:             'timesplittings' => \\core_analytics\\manager::get_enabled_time_splitting_methods(),",
          "",
          "[Added Lines]",
          "122:             'timesplittings' => \\core_analytics\\manager::get_all_time_splittings(),",
          "",
          "---------------"
        ],
        "analytics/classes/manager.php||analytics/classes/manager.php": [
          "File: analytics/classes/manager.php -> analytics/classes/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     public static function get_enabled_time_splitting_methods() {",
          "262:             $enabledtimesplittings = array_flip(explode(',', $enabledtimesplittings));",
          "263:         }",
          "",
          "[Removed Lines]",
          "261:         if ($enabledtimesplittings = get_config('analytics', 'timesplittings')) {",
          "",
          "[Added Lines]",
          "263:         debugging('This function has been deprecated. You can use self::get_time_splitting_methods_for_evaluation if ' .",
          "264:             'you want to get the default time splitting methods for evaluation, or you can use self::get_all_time_splittings if ' .",
          "265:             'you want to get all the time splitting methods available on this site.');",
          "266:         return self::get_time_splitting_methods_for_evaluation();",
          "267:     }",
          "274:     public static function get_time_splitting_methods_for_evaluation() {",
          "276:         if ($enabledtimesplittings = get_config('analytics', 'defaulttimesplittingsevaluation')) {",
          "",
          "---------------"
        ],
        "analytics/classes/model.php||analytics/classes/model.php": [
          "File: analytics/classes/model.php -> analytics/classes/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:                     $timesplitting = \\core_analytics\\manager::get_time_splitting($options['timesplitting']);",
          "290:                     $timesplittings = array($timesplitting->get_id() => $timesplitting);",
          "291:                 } else {",
          "293:                 }",
          "294:             } else {",
          "",
          "[Removed Lines]",
          "292:                     $timesplittings = \\core_analytics\\manager::get_enabled_time_splitting_methods();",
          "",
          "[Added Lines]",
          "292:                     $timesplittings = \\core_analytics\\manager::get_time_splitting_methods_for_evaluation();",
          "",
          "---------------"
        ],
        "analytics/tests/prediction_test.php||analytics/tests/prediction_test.php": [
          "File: analytics/tests/prediction_test.php -> analytics/tests/prediction_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:         $sometimesplittings = '\\core\\analytics\\time_splitting\\weekly,' .",
          "444:             '\\core\\analytics\\time_splitting\\single_range,' .",
          "445:             '\\core\\analytics\\time_splitting\\quarters';",
          "448:         if ($modelquality === 'perfect') {",
          "449:             $model = $this->add_perfect_model();",
          "",
          "[Removed Lines]",
          "446:         set_config('timesplittings', $sometimesplittings, 'analytics');",
          "",
          "[Added Lines]",
          "446:         set_config('defaulttimesplittingsevaluation', $sometimesplittings, 'analytics');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:         $this->resetAfterTest(true);",
          "488:         $this->setAdminuser();",
          "489:         set_config('enabled_stores', 'logstore_standard', 'tool_log');",
          "493:         $model = $this->add_perfect_model();",
          "",
          "[Removed Lines]",
          "490:         set_config('timesplittings',",
          "491:             '\\core\\analytics\\time_splitting\\quarters,\\core\\analytics\\time_splitting\\quarters_accum', 'analytics');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lang/en/analytics.php||lang/en/analytics.php": [
          "File: lang/en/analytics.php -> lang/en/analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: $string['analyticslogstore_help'] = 'The log store that will be used by the analytics API to read users\\' activity';",
          "31: $string['analyticssettings'] = 'Analytics settings';",
          "32: $string['coursetoolong'] = 'The course is too long';",
          "34: $string['defaultpredictionsprocessor'] = 'Default predictions processor';",
          "35: $string['defaultpredictoroption'] = 'Default processor ({$a})';",
          "36: $string['disabledmodel'] = 'Disabled model';",
          "",
          "[Removed Lines]",
          "33: $string['enabledtimesplittings'] = 'Time splitting methods';",
          "",
          "[Added Lines]",
          "33: $string['defaulttimesplittingmethods'] = 'Default time-splitting methods for model\\'s evaluation';",
          "34: $string['defaulttimesplittingmethods_help'] = 'The time-splitting method divides the course duration into parts; the predictions engine will run at the end of these parts. The model evaluation process will iterate through these time-splitting methods unless a specific time-splitting method is specified (the ability to specify a time-splitting method is only available when evaluating models using the command line script).';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121: $string['processingsitecontents'] = 'Processing site contents';",
          "122: $string['successfullyanalysed'] = 'Successfully analysed';",
          "123: $string['timesplittingmethod'] = 'Time-splitting method';",
          "125: $string['viewprediction'] = 'View prediction details';",
          "",
          "[Removed Lines]",
          "124: $string['timesplittingmethod_help'] = 'The time-splitting method divides the course duration into parts; the predictions engine will run at the end of these parts. It is recommended that you only enable the time-splitting methods you may be interested in using. The evaluation process will iterate through all enabled time-splitting methods, so the more time-splitting methods enabled, the slower the evaluation process will be.';",
          "",
          "[Added Lines]",
          "125: $string['timesplittingmethod_help'] = 'The time-splitting method is what defines when the system will calculate predictions and the portion of activity logs that will be considered for those predictions. E.g. They can divide the course duration in parts and generate a prediction at the end of these parts.';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2905:         upgrade_main_savepoint(true, 2019030800.03);",
          "2906:     }",
          "2908:     return true;",
          "2909: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2908:     if ($oldversion < 2019031500.01) {",
          "2910:         $defaulttimesplittings = get_config('analytics', 'timesplittings');",
          "2911:         if ($defaulttimesplittings !== false) {",
          "2912:             set_config('defaulttimesplittingsevaluation', $defaulttimesplittings, 'analytics');",
          "2913:             unset_config('timesplittings', 'analytics');",
          "2914:         }",
          "2917:         upgrade_main_savepoint(true, 2019031500.01);",
          "2918:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019031500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019031500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dabc69afe5beabd63e332af6c61f84aa1dba1614",
      "candidate_info": {
        "commit_hash": "dabc69afe5beabd63e332af6c61f84aa1dba1614",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/dabc69afe5beabd63e332af6c61f84aa1dba1614",
        "files": [
          "badges/cron.php",
          "lang/en/admin.php",
          "lib/badgeslib.php",
          "lib/classes/task/badges_cron_task.php",
          "lib/classes/task/badges_message_task.php",
          "lib/db/tasks.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-65191-master' of git://github.com/lameze/moodle",
        "before_after_code_files": [
          "badges/cron.php||badges/cron.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/badgeslib.php||lib/badgeslib.php",
          "lib/classes/task/badges_cron_task.php||lib/classes/task/badges_cron_task.php",
          "lib/classes/task/badges_message_task.php||lib/classes/task/badges_message_task.php",
          "lib/db/tasks.php||lib/db/tasks.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "badges/cron.php||badges/cron.php": [
          "File: badges/cron.php -> badges/cron.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1216: $string['taskautomatedbackup'] = 'Automated backups';",
          "1217: $string['taskbackupcleanup'] = 'Clean backup tables and logs';",
          "1218: $string['taskbadgescron'] = 'Award badges';",
          "1219: $string['taskblogcron'] = 'Sync external blogs';",
          "1220: $string['taskcachecleanup'] = 'Remove expired cache entries';",
          "1221: $string['taskcachecron'] = 'Background processing for caches';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1219: $string['taskbadgesmessagecron'] = 'Background processing for sending badges notifications';",
          "",
          "---------------"
        ],
        "lib/badgeslib.php||lib/badgeslib.php": [
          "File: lib/badgeslib.php -> lib/badgeslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:     return $DB->record_exists_sql($sql, $params);",
          "1613: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1620: function badge_assemble_notification(stdClass $badge) {",
          "1621:     global $DB;",
          "1623:     $userfrom = core_user::get_noreply_user();",
          "1624:     $userfrom->maildisplay = true;",
          "1626:     if ($msgs = $DB->get_records_select('badge_issued', 'issuernotified IS NULL AND badgeid = ?', array($badge->id))) {",
          "1628:         $creator = $DB->get_record('user', array('id' => $badge->creator), '*', MUST_EXIST);",
          "1629:         $creatorsubject = get_string('creatorsubject', 'badges', $badge->name);",
          "1630:         $creatormessage = '';",
          "1633:         foreach ($msgs as $msg) {",
          "1634:             $issuedlink = html_writer::link(new moodle_url('/badges/badge.php', array('hash' => $msg->uniquehash)), $badge->name);",
          "1635:             $recipient = $DB->get_record('user', array('id' => $msg->userid), '*', MUST_EXIST);",
          "1637:             $a = new stdClass();",
          "1638:             $a->user = fullname($recipient);",
          "1639:             $a->link = $issuedlink;",
          "1640:             $creatormessage .= get_string('creatorbody', 'badges', $a);",
          "1641:             $DB->set_field('badge_issued', 'issuernotified', time(), array('badgeid' => $msg->badgeid, 'userid' => $msg->userid));",
          "1642:         }",
          "1645:         $eventdata = new \\core\\message\\message();",
          "1646:         $eventdata->courseid          = SITEID;",
          "1647:         $eventdata->component         = 'moodle';",
          "1648:         $eventdata->name              = 'badgecreatornotice';",
          "1649:         $eventdata->userfrom          = $userfrom;",
          "1650:         $eventdata->userto            = $creator;",
          "1651:         $eventdata->notification      = 1;",
          "1652:         $eventdata->subject           = $creatorsubject;",
          "1653:         $eventdata->fullmessage       = format_text_email($creatormessage, FORMAT_HTML);",
          "1654:         $eventdata->fullmessageformat = FORMAT_PLAIN;",
          "1655:         $eventdata->fullmessagehtml   = $creatormessage;",
          "1656:         $eventdata->smallmessage      = $creatorsubject;",
          "1658:         message_send($eventdata);",
          "1659:     }",
          "1660: }",
          "",
          "---------------"
        ],
        "lib/classes/task/badges_cron_task.php||lib/classes/task/badges_cron_task.php": [
          "File: lib/classes/task/badges_cron_task.php -> lib/classes/task/badges_cron_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     }",
          "44:     public function execute() {",
          "51: }",
          "",
          "[Removed Lines]",
          "45:         global $CFG;",
          "47:         require_once($CFG->dirroot . '/badges/cron.php');",
          "48:         badge_cron();",
          "49:     }",
          "",
          "[Added Lines]",
          "47:         global $DB, $CFG;",
          "48:         if (!empty($CFG->enablebadges)) {",
          "49:             require_once($CFG->libdir . '/badgeslib.php');",
          "50:             $total = 0;",
          "52:             $courseparams = array();",
          "53:             if (empty($CFG->badges_allowcoursebadges)) {",
          "54:                 $coursesql = '';",
          "55:             } else {",
          "56:                 $coursesql = ' OR EXISTS (SELECT id FROM {course} WHERE visible = :visible AND startdate < :current) ';",
          "57:                 $courseparams = array('visible' => true, 'current' => time());",
          "58:             }",
          "60:             $sql = 'SELECT id",
          "61:                       FROM {badge}",
          "62:                      WHERE (status = :active OR status = :activelocked)",
          "63:                        AND (type = :site ' . $coursesql . ')';",
          "64:             $badgeparams = [",
          "65:                 'active' => BADGE_STATUS_ACTIVE,",
          "66:                 'activelocked' => BADGE_STATUS_ACTIVE_LOCKED,",
          "67:                 'site' => BADGE_TYPE_SITE",
          "68:             ];",
          "69:             $params = array_merge($badgeparams, $courseparams);",
          "70:             $badges = $DB->get_fieldset_sql($sql, $params);",
          "72:             mtrace('Started reviewing available badges.');",
          "73:             foreach ($badges as $bid) {",
          "74:                 $badge = new \\badge($bid);",
          "76:                 if ($badge->has_criteria()) {",
          "77:                     if (debugging()) {",
          "78:                         mtrace('Processing badge \"' . $badge->name . '\"...');",
          "79:                     }",
          "81:                     $issued = $badge->review_all_criteria();",
          "83:                     if (debugging()) {",
          "84:                         mtrace('...badge was issued to ' . $issued . ' users.');",
          "85:                     }",
          "86:                     $total += $issued;",
          "87:                 }",
          "88:             }",
          "90:             mtrace('Badges were issued ' . $total . ' time(s).');",
          "91:         }",
          "92:     }",
          "",
          "---------------"
        ],
        "lib/classes/task/badges_message_task.php||lib/classes/task/badges_message_task.php": [
          "File: lib/classes/task/badges_message_task.php -> lib/classes/task/badges_message_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core\\task;",
          "29: class badges_message_task extends scheduled_task {",
          "36:     public function get_name() {",
          "37:         return get_string('taskbadgesmessagecron', 'admin');",
          "38:     }",
          "45:     public function execute() {",
          "46:         global $CFG, $DB;",
          "48:         if (!empty($CFG->enablebadges)) {",
          "49:             require_once($CFG->libdir . '/badgeslib.php');",
          "50:             mtrace('Sending scheduled badge notifications.');",
          "52:             $scheduled = $DB->get_records_select('badge', 'notification > ? AND (status != ?) AND nextcron < ?',",
          "53:                 array(BADGE_MESSAGE_ALWAYS, BADGE_STATUS_ARCHIVED, time()),",
          "54:                 'notification ASC', 'id, name, notification, usercreated as creator, timecreated');",
          "56:             foreach ($scheduled as $sch) {",
          "58:                 badge_assemble_notification($sch);",
          "61:                 $nextcron = badges_calculate_message_schedule($sch->notification);",
          "62:                 $DB->set_field('badge', 'nextcron', $nextcron, array('id' => $sch->id));",
          "63:             }",
          "64:         }",
          "65:     }",
          "67: }",
          "",
          "---------------"
        ],
        "lib/db/tasks.php||lib/db/tasks.php": [
          "File: lib/db/tasks.php -> lib/db/tasks.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:         'dayofweek' => '*',",
          "276:         'month' => '*'",
          "277:     ),",
          "278:     array(",
          "279:         'classname' => 'core\\task\\file_temp_cleanup_task',",
          "280:         'blocking' => 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     array(",
          "279:         'classname' => 'core\\task\\badges_message_task',",
          "280:         'blocking' => 0,",
          "281:         'minute' => '*/5',",
          "282:         'hour' => '*',",
          "283:         'day' => '*',",
          "284:         'dayofweek' => '*',",
          "285:         'month' => '*'",
          "286:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019040600.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019040600.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}