{
  "cve_id": "CVE-2021-43775",
  "cve_desc": "Aim is an open-source, self-hosted machine learning experiment tracking tool. Versions of Aim prior to 3.1.0 are vulnerable to a path traversal attack. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. The vulnerability issue is resolved in Aim v3.1.0.",
  "repo": "aimhubio/aim",
  "patch_hash": "b9e53df5e32d14bbd3a2c738e2db7187fb531e93",
  "patch_info": {
    "commit_hash": "b9e53df5e32d14bbd3a2c738e2db7187fb531e93",
    "repo": "aimhubio/aim",
    "commit_url": "https://github.com/aimhubio/aim/commit/b9e53df5e32d14bbd3a2c738e2db7187fb531e93",
    "files": [
      "aim/web/api/views.py"
    ],
    "message": "Security issue fix for `/static-files/{path}` endpoint  (#1003)\n\n* Fix security issue when incorrect path is given to the endpoint that serves static files which can lead to a leak of non wanted files (e.g. /static-files/../../../../etc/passwd)",
    "before_after_code_files": [
      "aim/web/api/views.py||aim/web/api/views.py"
    ]
  },
  "patch_diff": {
    "aim/web/api/views.py||aim/web/api/views.py": [
      "File: aim/web/api/views.py -> aim/web/api/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import os",
      "3: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
      "4: from fastapi.responses import FileResponse",
      "6: statics_router = APIRouter()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: from pathlib import Path",
      "6: from fastapi import HTTPException",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9: @statics_router.get('/static-files/{path:path}/')",
      "10: async def serve_static_files(path):",
      "11:     from aim import web",
      "13:     compressed_file_name = '{}.gz'.format(static_file_name)",
      "14:     if os.path.exists(compressed_file_name):",
      "15:         return FileResponse(compressed_file_name, headers={'Content-Encoding': 'gzip'})",
      "",
      "[Removed Lines]",
      "12:     static_file_name = os.path.join(os.path.dirname(web.__file__), 'ui', 'build', path)",
      "",
      "[Added Lines]",
      "14:     static_files_root = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
      "15:     static_file_name = '/'.join((static_files_root, path))",
      "17:     # check if path is leading inside ui/build directory",
      "18:     if not Path(static_files_root) in Path(static_file_name).resolve().parents:",
      "19:         raise HTTPException(404)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "190b44c420aca4a7a9042d8b5ff6901652aac2c2",
      "candidate_info": {
        "commit_hash": "190b44c420aca4a7a9042d8b5ff6901652aac2c2",
        "repo": "aimhubio/aim",
        "commit_url": "https://github.com/aimhubio/aim/commit/190b44c420aca4a7a9042d8b5ff6901652aac2c2",
        "files": [
          "aim/cli/up/commands.py",
          "aim/cli/up/utils.py",
          "aim/engine/configs.py",
          "aim/web/api/__init__.py",
          "aim/web/api/commits/__init__.py",
          "aim/web/api/commits/models.py",
          "aim/web/api/commits/utils.py",
          "aim/web/api/commits/views.py",
          "aim/web/api/config.py",
          "aim/web/api/dashboard_apps/__init__.py",
          "aim/web/api/dashboard_apps/models.py",
          "aim/web/api/dashboard_apps/serializers.py",
          "aim/web/api/dashboard_apps/views.py",
          "aim/web/api/dashboards/__init__.py",
          "aim/web/api/dashboards/models.py",
          "aim/web/api/dashboards/serializers.py",
          "aim/web/api/dashboards/views.py",
          "aim/web/api/db.py",
          "aim/web/api/projects/__init__.py",
          "aim/web/api/projects/project.py",
          "aim/web/api/projects/utils.py",
          "aim/web/api/projects/views.py",
          "aim/web/api/tags/__init__.py",
          "aim/web/api/tags/views.py",
          "aim/web/api/utils.py",
          "aim/web/api/views.py",
          "aim/web/app/__init__.py",
          "aim/web/app/commits/__init__.py",
          "aim/web/app/commits/models.py",
          "aim/web/app/commits/utils.py",
          "aim/web/app/commits/views.py",
          "aim/web/app/config.py",
          "aim/web/app/dashboard_apps/__init__.py",
          "aim/web/app/dashboard_apps/models.py",
          "aim/web/app/dashboard_apps/serializers.py",
          "aim/web/app/dashboard_apps/views.py",
          "aim/web/app/dashboards/__init__.py",
          "aim/web/app/dashboards/models.py",
          "aim/web/app/dashboards/serializers.py",
          "aim/web/app/dashboards/views.py",
          "aim/web/app/db.py",
          "aim/web/app/projects/__init__.py",
          "aim/web/app/projects/project.py",
          "aim/web/app/projects/utils.py",
          "aim/web/app/projects/views.py",
          "aim/web/app/tags/__init__.py",
          "aim/web/app/tags/views.py",
          "aim/web/app/utils.py",
          "aim/web/app/views.py",
          "aim/web/manage.py",
          "aim/web/migrations/alembic.ini",
          "aim/web/migrations/alembic_dev.ini",
          "aim/web/migrations/env.py",
          "aim/web/run.py",
          "requirements.txt",
          "setup.py"
        ],
        "message": "Set up initial backend structure with FastAPI (#496)\n\n* Initial setup for sqlite without flask-sqlalchemy dependency\n\n* Add wrapper for fastapi's APIRouter to handle trailing slashes\n\n* Move static files serving to FastAPI\n\n* Move commits and projects packages views from Flask to FastAPI\n\n* Change main app from Flask to FastAPI\n\n* Move tags, dashboards and dashboard_apps views from Flask to FastAPI\n\n* Add CORS middleware for FastAPI app\n\n* Change sqlalchemy session usage to more fastapi way\n\n* Change db upgrade and gunicorn(changed to hypercorn) commands construction for FastAPI\n\n* Remove \"manage.py\" file to get rid of flask-migrate, flask-script dependencies\n\n* Restructure web dir and cleanup requirements\n\n* Change FastAPI server from hypercorn to uvicorn and make the corresponding updates on project requirements",
        "before_after_code_files": [
          "aim/cli/up/commands.py||aim/cli/up/commands.py",
          "aim/cli/up/utils.py||aim/cli/up/utils.py",
          "aim/engine/configs.py||aim/engine/configs.py",
          "aim/web/api/__init__.py||aim/web/api/__init__.py",
          "aim/web/api/commits/models.py||aim/web/api/commits/models.py",
          "aim/web/app/commits/utils.py||aim/web/api/commits/utils.py",
          "aim/web/api/commits/views.py||aim/web/api/commits/views.py",
          "aim/web/app/config.py||aim/web/api/config.py",
          "aim/web/api/dashboard_apps/models.py||aim/web/api/dashboard_apps/models.py",
          "aim/web/app/dashboard_apps/serializers.py||aim/web/api/dashboard_apps/serializers.py",
          "aim/web/api/dashboard_apps/views.py||aim/web/api/dashboard_apps/views.py",
          "aim/web/api/dashboards/models.py||aim/web/api/dashboards/models.py",
          "aim/web/app/dashboards/serializers.py||aim/web/api/dashboards/serializers.py",
          "aim/web/api/dashboards/views.py||aim/web/api/dashboards/views.py",
          "aim/web/api/db.py||aim/web/api/db.py",
          "aim/web/app/projects/project.py||aim/web/api/projects/project.py",
          "aim/web/app/projects/utils.py||aim/web/api/projects/utils.py",
          "aim/web/api/projects/views.py||aim/web/api/projects/views.py",
          "aim/web/api/tags/views.py||aim/web/api/tags/views.py",
          "aim/web/app/utils.py||aim/web/api/utils.py",
          "aim/web/api/views.py||aim/web/api/views.py",
          "aim/web/app/__init__.py||aim/web/app/__init__.py",
          "aim/web/app/commits/models.py||aim/web/app/commits/models.py",
          "aim/web/app/commits/views.py||aim/web/app/commits/views.py",
          "aim/web/app/dashboard_apps/models.py||aim/web/app/dashboard_apps/models.py",
          "aim/web/app/dashboard_apps/views.py||aim/web/app/dashboard_apps/views.py",
          "aim/web/app/dashboards/models.py||aim/web/app/dashboards/models.py",
          "aim/web/app/dashboards/views.py||aim/web/app/dashboards/views.py",
          "aim/web/app/db.py||aim/web/app/db.py",
          "aim/web/app/projects/views.py||aim/web/app/projects/views.py",
          "aim/web/app/tags/views.py||aim/web/app/tags/views.py",
          "aim/web/app/views.py||aim/web/app/views.py",
          "aim/web/manage.py||aim/web/manage.py",
          "aim/web/migrations/env.py||aim/web/migrations/env.py",
          "aim/web/run.py||aim/web/run.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ],
          "candidate": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ]
        }
      },
      "candidate_diff": {
        "aim/cli/up/commands.py||aim/cli/up/commands.py": [
          "File: aim/cli/up/commands.py -> aim/cli/up/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     AIM_UI_DEFAULT_HOST,",
          "7:     AIM_TF_LOGS_PATH_KEY,",
          "8:     AIM_UI_TELEMETRY_KEY,",
          "10:     AIM_UI_MOUNTED_REPO_PATH,",
          "11: )",
          "12: from aim.engine.utils import clean_repo_path",
          "",
          "[Removed Lines]",
          "9:     AIM_FLASK_ENV_KEY,",
          "",
          "[Added Lines]",
          "9:     AIM_WEB_ENV_KEY,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: from aim.cli.up.utils import (",
          "15:     repo_init_alert,",
          "16:     build_db_upgrade_command,",
          "18: )",
          "19: from aim.web.utils import exec_cmd",
          "20: from aim.web.utils import ShellCommandException",
          "",
          "[Removed Lines]",
          "17:     build_gunicorn_command,",
          "",
          "[Added Lines]",
          "17:     build_uvicorn_command,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     os.environ[AIM_UI_MOUNTED_REPO_PATH] = repo_inst.root_path",
          "43:     if dev:",
          "45:     else:",
          "48:     if tf_logs:",
          "49:         os.environ[AIM_TF_LOGS_PATH_KEY] = tf_logs",
          "",
          "[Removed Lines]",
          "44:         os.environ[AIM_FLASK_ENV_KEY] = 'dev'",
          "46:         os.environ[AIM_FLASK_ENV_KEY] = 'prod'",
          "",
          "[Added Lines]",
          "44:         os.environ[AIM_WEB_ENV_KEY] = 'dev'",
          "46:         os.environ[AIM_WEB_ENV_KEY] = 'prod'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:     click.echo('Press Ctrl+C to exit')",
          "87:     try:",
          "89:         exec_cmd(server_cmd, stream_output=True)",
          "90:     except ShellCommandException:",
          "91:         click.echo('Failed to run Aim UI. ' +",
          "",
          "[Removed Lines]",
          "88:         server_cmd = build_gunicorn_command(host, port, 1)",
          "",
          "[Added Lines]",
          "88:         server_cmd = build_uvicorn_command(host, port, 1)",
          "",
          "---------------"
        ],
        "aim/cli/up/utils.py||aim/cli/up/utils.py": [
          "File: aim/cli/up/utils.py -> aim/cli/up/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import os",
          "3: import click",
          "8: def repo_init_alert():",
          "",
          "[Removed Lines]",
          "1: import sys",
          "5: from aim.engine.configs import AIM_FLASK_ENV_KEY",
          "",
          "[Added Lines]",
          "4: from aim.engine.configs import AIM_WEB_ENV_KEY",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: def build_db_upgrade_command():",
          "14:     from aim import web",
          "15:     web_dir = os.path.dirname(web.__file__)",
          "17:     migrations_dir = os.path.join(web_dir, 'migrations')",
          "28:     else:",
          "29:         cmd += ['--log-level', 'error']",
          "31:     return cmd",
          "",
          "[Removed Lines]",
          "16:     manage_file = os.path.join(web_dir, 'manage.py')",
          "18:     return [sys.executable, manage_file,",
          "19:             'db', 'upgrade', '--directory', migrations_dir]",
          "22: def build_gunicorn_command(host, port, num_workers):",
          "23:     bind_address = \"%s:%s\" % (host, port)",
          "24:     cmd = ['gunicorn', '-b', bind_address, '-w', '%s' % num_workers,",
          "25:            '--timeout', '300', '--graceful-timeout', '300']",
          "26:     if os.getenv(AIM_FLASK_ENV_KEY) == 'dev':",
          "27:         cmd += ['--reload', '--log-level', 'info']",
          "30:     cmd += ['aim.web.run']",
          "",
          "[Added Lines]",
          "16:     if os.getenv(AIM_WEB_ENV_KEY) == 'dev':",
          "17:         ini_file = os.path.join(migrations_dir, 'alembic_dev.ini')",
          "18:     else:",
          "19:         ini_file = os.path.join(migrations_dir, 'alembic.ini')",
          "20:     return ['alembic', '-c', ini_file, 'upgrade', 'head']",
          "23: def build_uvicorn_command(host, port, num_workers):",
          "24:     cmd = ['uvicorn', '--host', host, '--port', '%s' % port, '--workers', '%s' % num_workers]",
          "25:     if os.getenv(AIM_WEB_ENV_KEY) == 'dev':",
          "26:         import aim",
          "27:         cmd += ['--reload', '--reload-dir', os.path.dirname(aim.__file__), '--log-level', 'debug']",
          "30:     cmd += ['aim.web.run:app']",
          "",
          "---------------"
        ],
        "aim/engine/configs.py||aim/engine/configs.py": [
          "File: aim/engine/configs.py -> aim/engine/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: AIM_UI_DEFAULT_PORT = 43800",
          "49: AIM_UI_DEFAULT_HOST = '127.0.0.1'",
          "50: AIM_TF_LOGS_PATH_KEY = '__AIM_TF_LOGS_PATH__'",
          "52: AIM_UI_MOUNTED_REPO_PATH = '__AIM_UI_MOUNT_REPO_PATH__'",
          "53: AIM_UI_TELEMETRY_KEY = 'AIM_UI_TELEMETRY_ENABLED'",
          "",
          "[Removed Lines]",
          "51: AIM_FLASK_ENV_KEY = '__AIM_FLASK_ENV__'",
          "",
          "[Added Lines]",
          "51: AIM_WEB_ENV_KEY = '__AIM_WEB_ENV__'",
          "",
          "---------------"
        ],
        "aim/web/api/__init__.py||aim/web/api/__init__.py": [
          "File: aim/web/api/__init__.py -> aim/web/api/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from fastapi import FastAPI",
          "2: from fastapi.middleware.cors import CORSMiddleware",
          "5: def create_app():",
          "6:     app = FastAPI(title=__name__)",
          "7:     app.add_middleware(",
          "8:         CORSMiddleware,",
          "9:         allow_origins=['*'],",
          "10:         allow_methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD'],",
          "11:         allow_headers=['Origin', 'X-Requested-With',",
          "12:                        'Content-Type', 'Accept', 'Authorization'],",
          "13:         allow_credentials=True,",
          "14:         max_age=86400",
          "15:     )",
          "16:     from aim.web.api.commits.views import commits_router",
          "17:     from aim.web.api.dashboard_apps.views import dashboard_apps_router",
          "18:     from aim.web.api.dashboards.views import dashboards_router",
          "19:     from aim.web.api.projects.views import projects_router",
          "20:     from aim.web.api.tags.views import tags_router",
          "21:     from aim.web.api.views import general_router",
          "22:     app.include_router(commits_router, prefix='/api/v1/commits')",
          "23:     app.include_router(dashboard_apps_router, prefix='/api/v1/apps')",
          "24:     app.include_router(dashboards_router, prefix='/api/v1/dashboards')",
          "25:     app.include_router(projects_router, prefix='/api/v1/projects')",
          "26:     app.include_router(tags_router, prefix='/api/v1/tags')",
          "27:     app.include_router(general_router)",
          "29:     return app",
          "",
          "---------------"
        ],
        "aim/web/api/commits/models.py||aim/web/api/commits/models.py": [
          "File: aim/web/api/commits/models.py -> aim/web/api/commits/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import uuid",
          "2: import sqlalchemy as sa",
          "4: from sqlalchemy.orm import relationship",
          "6: from aim.web.api.utils import datetime_now",
          "7: from aim.web.api.db import Base",
          "9: CommitTagAssociation = sa.Table('commit_tag',",
          "10:                                 Base.metadata,",
          "11:                                 sa.Column('commit_id', sa.Text, sa.ForeignKey('commits.uuid')),",
          "12:                                 sa.Column('tag_id', sa.Text, sa.ForeignKey('tags.uuid')))",
          "15: class Commit(Base):",
          "16:     __tablename__ = 'commits'",
          "17:     __table_args__ = (sa.UniqueConstraint('experiment_name', 'hash'),)",
          "19:     uuid = sa.Column(sa.Text, primary_key=True)",
          "20:     hash = sa.Column(sa.Text)",
          "21:     experiment_name = sa.Column(sa.Text, default='')",
          "22:     tags = relationship('Tag', secondary=CommitTagAssociation, back_populates='commits')",
          "23:     session_started_at = sa.Column(sa.Integer, default=0)",
          "24:     session_closed_at = sa.Column(sa.Integer, default=0)",
          "25:     created_at = sa.Column(sa.DateTime, default=datetime_now)",
          "26:     is_archived = sa.Column(sa.Boolean, default=False)",
          "28:     def __init__(self, hash, experiment_name):",
          "29:         self.uuid = self.generate_uuid()",
          "30:         self.hash = hash",
          "31:         self.experiment_name = experiment_name",
          "32:         self.is_archived = False",
          "34:     @staticmethod",
          "35:     def generate_uuid():",
          "36:         return str(uuid.uuid1())",
          "39: class TFSummaryLog(Base):",
          "40:     __tablename__ = 'tf_summary_logs'",
          "42:     uuid = sa.Column(sa.Text, primary_key=True)",
          "43:     log_path = sa.Column(sa.Text)",
          "44:     params = sa.Column(sa.Text)",
          "45:     created_at = sa.Column(sa.DateTime, default=datetime_now)",
          "46:     is_archived = sa.Column(sa.Boolean)",
          "48:     def __init__(self, path):",
          "49:         self.uuid = str(uuid.uuid1())",
          "50:         self.log_path = path",
          "51:         self.is_archived = False",
          "54: class Tag(Base):",
          "55:     __tablename__ = 'tags'",
          "57:     uuid = sa.Column(sa.Text, primary_key=True)",
          "58:     name = sa.Column(sa.Text)",
          "59:     color = sa.Column(sa.Text)",
          "60:     commits = relationship('Commit', secondary=CommitTagAssociation, back_populates=\"tags\")",
          "61:     created_at = sa.Column(sa.DateTime, default=datetime_now)",
          "62:     is_archived = sa.Column(sa.Boolean)",
          "63:     is_hidden = sa.Column(sa.Boolean, default=False)",
          "65:     def __init__(self, name, color):",
          "66:         self.uuid = str(uuid.uuid1())",
          "67:         self.name = name",
          "68:         self.color = color",
          "69:         self.is_archived = False",
          "70:         self.is_hidden = False",
          "",
          "---------------"
        ],
        "aim/web/app/commits/utils.py||aim/web/api/commits/utils.py": [
          "File: aim/web/app/commits/utils.py -> aim/web/api/commits/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from aim.ql.grammar import Expression",
          "7: from aim.ql.utils import match",
          "8: from aim.web.adapters.tf_summary_adapter import TFSummaryAdapter",
          "15:     # Search",
          "16:     runs = []",
          "18:     params = {}",
          "20:     for scalar in scalars_models:",
          "21:         scalar_params = json.loads(scalar.params)",
          "22:         for k, v in scalar_params.items():",
          "",
          "[Removed Lines]",
          "9: from aim.web.app.commits.models import TFSummaryLog",
          "10: from aim.web.app.db import db",
          "11: from aim.web.app.utils import normalize_type, unsupported_float_type",
          "14: def select_tf_summary_scalars(tags, expression: Optional[Expression] = None):",
          "19:     scalars_models = db.session.query(TFSummaryLog).all()",
          "",
          "[Added Lines]",
          "9: from aim.web.api.commits.models import TFSummaryLog",
          "10: from aim.web.api.db import get_session",
          "11: from aim.web.api.utils import normalize_type, unsupported_float_type",
          "14: def select_tf_summary_scalars(session, tags, expression: Optional[Expression] = None):",
          "19:     scalars_models = session.query(TFSummaryLog).all()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222: def runs_resp_generator(response, runs, exclude_list=None):",
          "",
          "[Removed Lines]",
          "223:     from aim.web.app import App",
          "224:     with App.api.app_context():",
          "225:         yield json.dumps({",
          "226:             'header': response,",
          "227:         }).encode() + '\\n'.encode()",
          "228:         for run in runs:",
          "229:             if not is_tf_run(run):",
          "230:                 yield json.dumps({",
          "231:                     'run': run.to_dict(include_only_selected_agg_metrics=True, exclude_list=exclude_list),",
          "232:                 }).encode() + '\\n'.encode()",
          "233:             else:",
          "234:                 yield json.dumps({",
          "235:                     'run': run,",
          "236:                 }).encode() + '\\n'.encode()",
          "",
          "[Added Lines]",
          "223:     yield json.dumps({",
          "224:         'header': response,",
          "225:     }).encode() + '\\n'.encode()",
          "226:     for run in runs:",
          "227:         if not is_tf_run(run):",
          "228:             yield json.dumps({",
          "229:                 'run': run.to_dict(include_only_selected_agg_metrics=True, exclude_list=exclude_list),",
          "230:             }).encode() + '\\n'.encode()",
          "231:         else:",
          "232:             yield json.dumps({",
          "233:                 'run': run,",
          "234:             }).encode() + '\\n'.encode()",
          "",
          "---------------"
        ],
        "aim/web/api/commits/views.py||aim/web/api/commits/views.py": [
          "File: aim/web/api/commits/views.py -> aim/web/api/commits/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "2: import os",
          "3: import time",
          "5: from fastapi import Depends, HTTPException, Request",
          "6: from fastapi.responses import JSONResponse, StreamingResponse",
          "7: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "8: from pyrser.error import Diagnostic, Severity, Notification",
          "9: from sqlalchemy.orm import Session",
          "10: from typing import Optional",
          "12: from aim.ql.grammar.statement import Statement, Expression",
          "13: from aim.web.api.projects.project import Project",
          "14: from aim.web.api.commits.models import Commit, TFSummaryLog, Tag",
          "15: from aim.web.api.db import get_session",
          "16: from aim.web.adapters.tf_summary_adapter import TFSummaryAdapter",
          "17: from aim.web.api.commits.utils import (",
          "18:     select_tf_summary_scalars,",
          "19:     separate_select_statement,",
          "20:     is_tf_run,",
          "21:     process_trace_record,",
          "22:     process_custom_aligned_run,",
          "23:     runs_resp_generator",
          "24: )",
          "26: commits_router = APIRouter()",
          "29: @commits_router.get('/search/run/')",
          "30: async def commits_search_api(q: Optional[str] = ''):",
          "31:     # Get project",
          "32:     project = Project()",
          "33:     if not project.exists():",
          "34:         raise HTTPException(status_code=404)",
          "36:     raw_expression = q.strip()",
          "38:     if 'run.archived' not in raw_expression:",
          "39:         default_expression = 'run.archived is not True'",
          "40:     else:",
          "41:         default_expression = None",
          "43:     if raw_expression:",
          "44:         try:",
          "45:             parser = Expression()",
          "46:             parser.parse(raw_expression)",
          "47:         except Diagnostic as d:",
          "48:             parser_error_logs = d.logs or []",
          "49:             for error_log in reversed(parser_error_logs):",
          "50:                 if not isinstance(error_log, Notification):",
          "51:                     continue",
          "52:                 if error_log.severity != Severity.ERROR:",
          "53:                     continue",
          "54:                 error_location = error_log.location",
          "55:                 if error_location:",
          "56:                     JSONResponse(content={",
          "57:                         'type': 'parse_error',",
          "58:                         'statement': raw_expression,",
          "59:                         'location': error_location.col,",
          "60:                     }, status_code=403)",
          "61:             raise HTTPException(status_code=403)",
          "62:         except Exception:",
          "63:             raise HTTPException(status_code=403)",
          "65:     runs = project.repo.select_runs(raw_expression, default_expression)",
          "67:     serialized_runs = []",
          "68:     for run in runs:",
          "69:         serialized_runs.append(run.to_dict())",
          "71:     return {",
          "72:         'runs': serialized_runs,",
          "73:     }",
          "76: @commits_router.post('/search/metric/align/')",
          "77: async def commits_metric_custom_align_api(request: Request):",
          "78:     # Get project",
          "79:     project = Project()",
          "80:     if not project.exists():",
          "81:         raise HTTPException(status_code=404)",
          "83:     request_data = await request.json()",
          "85:     x_axis_metric_name = request_data.get('align_by')",
          "86:     requested_runs = request_data.get('runs')",
          "87:     if not (x_axis_metric_name and requested_runs):",
          "88:         HTTPException(status_code=403)",
          "89:     processed_runs = []",
          "91:     for run_data in requested_runs:",
          "92:         processed_run = process_custom_aligned_run(project, run_data, x_axis_metric_name)",
          "93:         if processed_run:",
          "94:             processed_runs.append(processed_run)",
          "96:     response = {",
          "97:         'runs': [],",
          "98:     }",
          "100:     return StreamingResponse(runs_resp_generator(response, processed_runs, ['params', 'date']),",
          "101:                              media_type='application/json')",
          "104: @commits_router.get('/search/metric/')",
          "105: async def commit_metric_search_api(q: str, p: int = 50,  x_axis: Optional[str] = None,",
          "106:                                    session: Session = Depends(get_session)):",
          "107:     steps_num = p",
          "109:     if x_axis:",
          "110:         x_axis = x_axis.strip()",
          "112:     # Get project",
          "113:     project = Project()",
          "114:     if not project.exists():",
          "115:         raise HTTPException(status_code=404)",
          "117:     search_statement = q.strip()",
          "119:     # Parse statement",
          "120:     try:",
          "121:         parser = Statement()",
          "122:         parsed_stmt = parser.parse(search_statement.strip())",
          "123:     except Diagnostic as d:",
          "124:         parser_error_logs = d.logs or []",
          "125:         for error_log in reversed(parser_error_logs):",
          "126:             if not isinstance(error_log, Notification):",
          "127:                 continue",
          "128:             if error_log.severity != Severity.ERROR:",
          "129:                 continue",
          "130:             error_location = error_log.location",
          "131:             if error_location:",
          "132:                 return JSONResponse(content={",
          "133:                     'type': 'parse_error',",
          "134:                     'statement': search_statement,",
          "135:                     'location': error_location.col,",
          "136:                 }, status_code=403)",
          "137:         raise HTTPException(status_code=403)",
          "138:     except Exception:",
          "139:         raise HTTPException(status_code=403)",
          "141:     statement_select = parsed_stmt.node['select']",
          "142:     statement_expr = parsed_stmt.node['expression']",
          "144:     aim_select, tf_logs = separate_select_statement(statement_select)",
          "146:     if len(tf_logs) and x_axis:",
          "147:         # raise error if tf_run and x_axis are present together",
          "148:         # discuss error message needs",
          "149:         raise HTTPException(status_code=403)",
          "151:     if 'run.archived' not in search_statement:",
          "152:         default_expression = 'run.archived is not True'",
          "153:     else:",
          "154:         default_expression = None",
          "156:     aim_select_result = project.repo.select(aim_select,",
          "157:                                             statement_expr,",
          "158:                                             default_expression)",
          "159:     (",
          "160:         aim_selected_runs,",
          "161:         aim_selected_params,",
          "162:         aim_selected_metrics,",
          "163:     ) = (",
          "164:         aim_select_result.runs,",
          "165:         aim_select_result.get_selected_params(),",
          "166:         aim_select_result.get_selected_metrics_context()",
          "167:     )",
          "169:     aim_selected_runs.sort(key=lambda r: r.config.get('date'), reverse=True)",
          "171:     response = {",
          "172:         'runs': [],",
          "173:         'params': [],",
          "174:         'agg_metrics': {},",
          "175:         'meta': {",
          "176:             'tf_selected': False,",
          "177:             'params_selected': False,",
          "178:             'metrics_selected': False,",
          "179:         },",
          "180:     }",
          "182:     retrieve_traces = False",
          "183:     retrieve_agg_metrics = False",
          "185:     if len(aim_selected_params):",
          "186:         response['meta']['params_selected'] = True",
          "187:         response['params'] = aim_selected_params",
          "188:         if len(aim_selected_metrics):",
          "189:             response['meta']['metrics_selected'] = True",
          "190:             response['agg_metrics'] = aim_selected_metrics",
          "191:             retrieve_agg_metrics = True",
          "192:     elif len(aim_selected_metrics) or len(tf_logs):",
          "193:         response['meta']['metrics_selected'] = True",
          "194:         retrieve_traces = True",
          "196:     runs = []",
          "198:     if aim_selected_runs and len(aim_selected_runs):",
          "199:         runs += aim_selected_runs",
          "200:     if len(tf_logs) > 0:",
          "201:         if not retrieve_traces:",
          "202:             # TODO: aggregate tf logs and return aggregated values",
          "203:             response['meta']['tf_selected'] = True",
          "204:             pass",
          "205:         else:",
          "206:             try:",
          "207:                 tf_runs = select_tf_summary_scalars(session, tf_logs, statement_expr)",
          "208:                 if tf_runs and len(tf_runs):",
          "209:                     runs += tf_runs",
          "210:             except:",
          "211:                 pass",
          "212:             else:",
          "213:                 response['meta']['tf_selected'] = True",
          "215:     if retrieve_traces:",
          "216:         for run in runs:",
          "217:             if is_tf_run(run):",
          "218:                 for metric in run['metrics']:",
          "219:                     for trace in metric['traces']:",
          "220:                         trace_scaled_data = []",
          "221:                         for i in range(0,",
          "222:                                        trace['num_steps'],",
          "223:                                        trace['num_steps'] // steps_num or 1",
          "224:                                        ):",
          "225:                             trace_scaled_data.append(trace['data'][i])",
          "226:                         trace['data'] = trace_scaled_data",
          "227:             else:",
          "228:                 run.open_storage()",
          "229:                 x_axis_metric = None",
          "230:                 if x_axis:",
          "231:                     try:",
          "232:                         x_axis_metric = run.get_all_metrics().get(x_axis)",
          "233:                         x_axis_metric.open_artifact()",
          "234:                     except:",
          "235:                         pass",
          "236:                 for metric in run.metrics.values():",
          "237:                     try:",
          "238:                         metric.open_artifact()",
          "239:                         for trace in metric.traces:",
          "240:                             step = (trace.num_records // steps_num) or 1",
          "241:                             trace.slice = (0, trace.num_records, step)",
          "242:                             x_axis_trace = None",
          "243:                             if x_axis_metric is not None:",
          "244:                                 x_axis_trace = x_axis_metric.get_trace(trace.context)",
          "245:                                 if x_axis_trace is not None:",
          "246:                                     trace.alignment = {",
          "247:                                         'is_synced': True,",
          "248:                                         'is_asc': True,",
          "249:                                         'skipped_steps': 0,",
          "250:                                         'aligned_by': {",
          "251:                                             'metric_name': x_axis_metric.name,",
          "252:                                             'trace_context': x_axis_trace.context",
          "253:                                         }",
          "254:                                     }",
          "255:                             x_idx = 0",
          "256:                             for r in trace.read_records(slice(*trace.slice)):",
          "257:                                 process_trace_record(r, trace, x_axis_trace, x_idx)",
          "258:                                 x_idx += step",
          "259:                             if (trace.num_records - 1) % step != 0:",
          "260:                                 for r in trace.read_records(trace.num_records-1):",
          "261:                                     process_trace_record(r, trace, x_axis_trace, trace.num_records-1)",
          "262:                             if x_axis_trace is not None:",
          "263:                                 # clear current_x_axis_value for the x_axis_trace for the next possible iteration",
          "264:                                 x_axis_trace.current_x_axis_value = None",
          "265:                     except:",
          "266:                         pass",
          "268:                     try:",
          "269:                         metric.close_artifact()",
          "270:                     except:",
          "271:                         pass",
          "272:                 if x_axis:",
          "273:                     try:",
          "274:                         x_axis_metric.close_artifact()",
          "275:                     except:",
          "276:                         pass",
          "277:                 run.close_storage()",
          "279:     if retrieve_agg_metrics:",
          "280:         # TODO: Retrieve and return aggregated metrics",
          "281:         pass",
          "283:     return StreamingResponse(runs_resp_generator(response, runs), media_type='application/json')",
          "286: @commits_router.get('/search/dictionary/')",
          "287: async def commit_dictionary_api():",
          "288:     # Get tf logs saved params",
          "289:     # tf_logs_params = {}",
          "290:     # tf_logs = TFSummaryLog.query.filter(",
          "291:     #     TFSummaryLog.is_archived.is_(False)) \\",
          "292:     #     .all()",
          "293:     #",
          "294:     # for tf_log in tf_logs:",
          "295:     #     tf_logs_params[tf_log.log_path] = {",
          "296:     #         'data': tf_log.params_json,",
          "297:     #     }",
          "298:     # for tf_log_path, tf_log_params in tf_logs_params.items():",
          "299:     #     dicts[tf_log_path] = tf_log_params",
          "301:     return {}",
          "304: @commits_router.get('/tf-summary/list/')",
          "305: async def tf_summary_list_api():",
          "306:     dir_paths = TFSummaryAdapter.list_log_dir_paths()",
          "307:     return dir_paths",
          "310: @commits_router.post('/tf-summary/params/list/')",
          "311: async def tf_summary_params_list_api(request: Request, session: Session = Depends(get_session)):",
          "312:     params_form = await request.form()",
          "313:     path = params_form.get('path')",
          "315:     if not path:",
          "316:         return {'params': ''}",
          "318:     tf_log = session.query(TFSummaryLog)\\",
          "319:         .filter((TFSummaryLog.log_path == path) & (TFSummaryLog.is_archived.is_(False)))\\",
          "320:         .first()",
          "321:     if tf_log is None:",
          "322:         return {'params': ''}",
          "324:     return {",
          "325:         'params': tf_log.params,",
          "326:     }",
          "329: @commits_router.post('/tf-summary/params/update/')",
          "330: async def tf_summary_params_update_api(request: Request, session: Session = Depends(get_session)):",
          "331:     params_form = await request.form()",
          "332:     path = params_form.get('path')",
          "333:     params = params_form.get('params')",
          "335:     if not path:",
          "336:         raise HTTPException(status_code=403)",
          "338:     tf_log = session.query(TFSummaryLog)\\",
          "339:         .filter((TFSummaryLog.log_path == path) & (TFSummaryLog.is_archived.is_(False)))\\",
          "340:         .first()",
          "341:     if tf_log is None:",
          "342:         tf_log = TFSummaryLog(path)",
          "343:         session.add(tf_log)",
          "345:     tf_log.params = params",
          "346:     session.commit()",
          "348:     return {",
          "349:         'params': params,",
          "350:     }",
          "353: @commits_router.get('/tags/{commit_hash}/')",
          "354: async def commit_tag_api(commit_hash: str, session: Session = Depends(get_session)):",
          "355:     commit = session.query(Commit).filter(Commit.hash == commit_hash).first()",
          "357:     if not commit:",
          "358:         raise HTTPException(status_code=404)",
          "360:     commit_tags = []",
          "361:     for t in commit.tags:",
          "362:         commit_tags.append({",
          "363:             'id': t.uuid,",
          "364:             'name': t.name,",
          "365:             'color': t.color,",
          "366:         })",
          "368:     return commit_tags",
          "371: @commits_router.post('/tags/update/')",
          "372: async def commit_tag_update_api(request: Request, session: Session = Depends(get_session)):",
          "373:     form = await request.form()",
          "375:     commit_hash = form.get('commit_hash')",
          "376:     experiment_name = form.get('experiment_name')",
          "377:     tag_id = form.get('tag_id')",
          "379:     commit = session.query(Commit)\\",
          "380:         .filter((Commit.hash == commit_hash) & (Commit.experiment_name == experiment_name))\\",
          "381:         .first()",
          "382:     if not commit:",
          "383:         commit = Commit(commit_hash, experiment_name)",
          "384:         session.add(commit)",
          "385:         session.commit()",
          "387:     tag = session.query(Tag).filter(Tag.uuid == tag_id).first()",
          "388:     if not tag:",
          "389:         raise HTTPException(status_code=404)",
          "391:     if tag in commit.tags:",
          "392:         commit.tags.remove(tag)",
          "393:     else:",
          "394:         for t in commit.tags:",
          "395:             commit.tags.remove(t)",
          "396:         commit.tags.append(tag)",
          "398:     session.commit()",
          "400:     return {",
          "401:         'tag': list(map(lambda t: t.uuid, commit.tags)),",
          "402:     }",
          "405: @commits_router.get('/{experiment}/{commit_hash}/info/')",
          "406: async def commit_info_api(experiment: str, commit_hash: str):",
          "407:     project = Project()",
          "409:     commit_path = os.path.join(project.repo_path, experiment, commit_hash)",
          "411:     if not os.path.isdir(commit_path):",
          "412:         raise HTTPException(status_code=404)",
          "414:     commit_config_file_path = os.path.join(commit_path, 'config.json')",
          "415:     info = {}",
          "417:     try:",
          "418:         with open(commit_config_file_path, 'r+') as commit_config_file:",
          "419:             info = json.loads(commit_config_file.read())",
          "420:     except:",
          "421:         pass",
          "423:     process = info.get('process')",
          "424:     if process:",
          "425:         if not process['finish']:",
          "426:             if process.get('start_date'):",
          "427:                 process['time'] = time.time() - process['start_date']",
          "428:             else:",
          "429:                 process['time'] = None",
          "431:     return info",
          "434: @commits_router.post('/{experiment}/{commit_hash}/archivation/update/')",
          "435: async def commit_archivation_api(experiment, commit_hash):",
          "436:     # Get project",
          "437:     project = Project()",
          "438:     if not project.exists():",
          "439:         raise HTTPException(status_code=404)",
          "441:     if project.repo.is_archived(experiment, commit_hash):",
          "442:         project.repo.unarchive(experiment, commit_hash)",
          "443:         return {",
          "444:             'archived': False,",
          "445:         }",
          "446:     else:",
          "447:         project.repo.archive(experiment, commit_hash)",
          "448:         return {",
          "449:             'archived': True,",
          "450:         }",
          "",
          "---------------"
        ],
        "aim/web/app/config.py||aim/web/api/config.py": [
          "File: aim/web/app/config.py -> aim/web/api/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     \"\"\"",
          "23:     Production Configuration",
          "24:     \"\"\"",
          "26:     SQLALCHEMY_DATABASE_URI = 'sqlite:///{}/.aim/aim_db'.format(get_root_path())",
          "27:     DEBUG = False",
          "",
          "[Removed Lines]",
          "25:     SQLALCHEMY_ECHO = False",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/api/dashboard_apps/models.py||aim/web/api/dashboard_apps/models.py": [
          "File: aim/web/api/dashboard_apps/models.py -> aim/web/api/dashboard_apps/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import uuid",
          "2: import sqlalchemy as sa",
          "4: from sqlalchemy.orm import relationship",
          "5: from sqlalchemy.ext.declarative import declared_attr",
          "7: from aim.web.api.db import Base",
          "8: from aim.web.api.utils import datetime_now",
          "11: class AppMixin(object):",
          "12:     uuid = sa.Column(sa.Text, primary_key=True)",
          "14:     created_at = sa.Column(sa.DateTime, default=datetime_now)",
          "15:     updated_at = sa.Column(sa.DateTime, default=datetime_now, onupdate=datetime_now)",
          "16:     is_archived = sa.Column(sa.Boolean, default=False)",
          "18:     @declared_attr",
          "19:     def dashboard_id(cls):",
          "20:         return sa.Column('dashboard_id', sa.ForeignKey('dashboards.uuid'))",
          "22:     @declared_attr",
          "23:     def dashboard(cls):",
          "24:         return relationship(\"Dashboard\")",
          "27: class ExploreState(AppMixin, Base):",
          "28:     __tablename__ = 'explore_states'",
          "30:     chart_focused_step = sa.Column(sa.Integer)",
          "31:     chart_focused_metric_run_hash = sa.Column(sa.Text)",
          "32:     chart_focused_metric_metric_name = sa.Column(sa.Text)",
          "33:     chart_focused_metric_trace_context = sa.Column(sa.Text)",
          "34:     chart_focused_circle_active = sa.Column(sa.Boolean)",
          "35:     chart_focused_circle_run_hash = sa.Column(sa.Text)",
          "36:     chart_focused_circle_metric_name = sa.Column(sa.Text)",
          "37:     chart_focused_circle_step = sa.Column(sa.Integer)",
          "38:     chart_focused_circle_trace_context = sa.Column(sa.Text)",
          "39:     chart_focused_circle_param = sa.Column(sa.Text)",
          "40:     chart_focused_circle_content_type = sa.Column(sa.Text)",
          "41:     chart_settings_zoom_mode = sa.Column(sa.Boolean)",
          "42:     chart_settings_single_zoom_mode = sa.Column(sa.Boolean)",
          "43:     chart_settings_zoom_history = sa.Column(sa.Text)  # list[tuple[str, dict[str, tuple[int, int]]]]",
          "44:     chart_settings_highlight_mode = sa.Column(sa.Text)",
          "45:     chart_settings_persistent_display_outliers = sa.Column(sa.Boolean)",
          "46:     chart_settings_persistent_zoom = sa.Column(sa.Text)  # dict[str, dict[str, tuple[int, int]]]",
          "47:     chart_settings_persistent_interpolate = sa.Column(sa.Boolean)",
          "48:     chart_settings_persistent_indicator = sa.Column(sa.Boolean)",
          "49:     chart_settings_persistent_x_alignment = sa.Column(sa.Text)  # str | tuple[str]",
          "50:     chart_settings_persistent_x_scale = sa.Column(sa.Integer)",
          "51:     chart_settings_persistent_y_scale = sa.Column(sa.Integer)",
          "52:     chart_settings_persistent_points_count = sa.Column(sa.Integer)",
          "53:     chart_settings_persistent_smoothing_algorithm = sa.Column(sa.Text)",
          "54:     chart_settings_persistent_smooth_factor = sa.Column(sa.Float)",
          "55:     chart_settings_persistent_aggregated = sa.Column(sa.Boolean)",
          "56:     chart_hidden_metrics = sa.Column(sa.Text)  # list[str]",
          "57:     chart_tooltip_options_display = sa.Column(sa.Boolean)",
          "58:     chart_tooltip_options_fields = sa.Column(sa.Text)  # list[str]",
          "60:     search_query = sa.Column(sa.Text)",
          "61:     search_v = sa.Column(sa.Integer)",
          "63:     search_input_value = sa.Column(sa.Text)",
          "64:     search_input_select_input = sa.Column(sa.Text)",
          "65:     search_input_select_condition_input = sa.Column(sa.Text)",
          "67:     context_filter_group_by_color = sa.Column(sa.Text)  # list[str]",
          "68:     context_filter_group_by_style = sa.Column(sa.Text)  # list[str]",
          "69:     context_filter_group_by_chart = sa.Column(sa.Text)  # list[str]",
          "70:     context_filter_group_against_color = sa.Column(sa.Boolean)",
          "71:     context_filter_group_against_style = sa.Column(sa.Boolean)",
          "72:     context_filter_group_against_chart = sa.Column(sa.Boolean)",
          "73:     context_filter_aggregated_area = sa.Column(sa.Text)",
          "74:     context_filter_aggregated_line = sa.Column(sa.Text)",
          "75:     context_filter_seed_color = sa.Column(sa.Integer)",
          "76:     context_filter_seed_style = sa.Column(sa.Integer)",
          "77:     context_filter_persist_color = sa.Column(sa.Boolean)",
          "78:     context_filter_persist_style = sa.Column(sa.Boolean)",
          "80:     color_palette = sa.Column(sa.Integer)",
          "82:     sort_fields = sa.Column(sa.Text)  # list[tuple[str, str]]",
          "84:     table_row_height_mode = sa.Column(sa.Text)",
          "85:     table_columns_order_left = sa.Column(sa.Text)  # list[str]",
          "86:     table_columns_order_middle = sa.Column(sa.Text)  # list[str]",
          "87:     table_columns_order_right = sa.Column(sa.Text)  # list[str]",
          "88:     table_columns_widths = sa.Column(sa.Text)  # dict[str, int]",
          "89:     table_excluded_fields = sa.Column(sa.Text)  # list[str]",
          "91:     screen_view_mode = sa.Column(sa.Text)",
          "92:     screen_panel_flex = sa.Column(sa.Float)",
          "94:     def __init__(self):",
          "95:         self.uuid = str(uuid.uuid1())",
          "96:         self.is_archived = False",
          "",
          "---------------"
        ],
        "aim/web/app/dashboard_apps/serializers.py||aim/web/api/dashboard_apps/serializers.py": [
          "File: aim/web/app/dashboard_apps/serializers.py -> aim/web/api/dashboard_apps/serializers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class ExploreStateModelSerializer(BaseModelSerializer):",
          "",
          "[Removed Lines]",
          "1: from aim.web.app.dashboard_apps.models import ExploreState",
          "2: from aim.web.app.utils import BaseModelSerializer, BaseSerializer, Field, ModelField, json_loads_or_none",
          "",
          "[Added Lines]",
          "1: from aim.web.api.dashboard_apps.models import ExploreState",
          "2: from aim.web.api.utils import BaseModelSerializer, BaseSerializer, Field, ModelField, json_loads_or_none",
          "",
          "---------------"
        ],
        "aim/web/api/dashboard_apps/views.py||aim/web/api/dashboard_apps/views.py": [
          "File: aim/web/api/dashboard_apps/views.py -> aim/web/api/dashboard_apps/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from fastapi import Depends, HTTPException, Request",
          "2: from fastapi.responses import JSONResponse",
          "3: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "4: from sqlalchemy.orm import Session",
          "6: from aim.web.api.dashboard_apps.models import ExploreState",
          "7: from aim.web.api.dashboard_apps.serializers import ExploreStateModelSerializer, explore_state_response_serializer",
          "8: from aim.web.api.db import get_session",
          "10: dashboard_apps_router = APIRouter()",
          "13: @dashboard_apps_router.get('/')",
          "14: async def dashboard_apps_list_api(session: Session = Depends(get_session)):",
          "15:     explore_states = session.query(ExploreState).filter(ExploreState.is_archived == False)  # noqa",
          "16:     result = []",
          "17:     for es in explore_states:",
          "18:         result.append(explore_state_response_serializer(es))",
          "19:     return result",
          "22: @dashboard_apps_router.post('/', status_code=201)",
          "23: async def dashboard_apps_create_api(request: Request, session: Session = Depends(get_session)):",
          "24:     explore_state = ExploreState()",
          "25:     request_data = await request.json()",
          "26:     serializer = ExploreStateModelSerializer(model_instance=explore_state, json_data=request_data)",
          "27:     serializer.validate()",
          "28:     if serializer.error_messages:",
          "29:         return JSONResponse(content=serializer.error_messages, status_code=403)",
          "30:     explore_state = serializer.save()",
          "31:     session.add(explore_state)",
          "32:     session.commit()",
          "34:     return explore_state_response_serializer(explore_state)",
          "37: @dashboard_apps_router.get('/{app_id}/')",
          "38: async def dashboard_apps_get_api(app_id: str, session: Session = Depends(get_session)):",
          "39:     explore_state = session.query(ExploreState) \\",
          "40:         .filter(ExploreState.uuid == app_id, ExploreState.is_archived == False) \\",
          "41:         .first()  # noqa",
          "42:     if not explore_state:",
          "43:         raise HTTPException(status_code=404)",
          "45:     return explore_state_response_serializer(explore_state)",
          "48: @dashboard_apps_router.put('/{app_id}/')",
          "49: async def dashboard_apps_put_api(app_id: str, request: Request, session: Session = Depends(get_session)):",
          "50:     explore_state = session.query(ExploreState) \\",
          "51:         .filter(ExploreState.uuid == app_id, ExploreState.is_archived == False) \\",
          "52:         .first()  # noqa",
          "53:     if not explore_state:",
          "54:         raise HTTPException(status_code=404)",
          "55:     request_data = await request.json()",
          "56:     serializer = ExploreStateModelSerializer(model_instance=explore_state, json_data=request_data)",
          "57:     serializer.validate()",
          "58:     if serializer.error_messages:",
          "59:         return JSONResponse(content=serializer.error_messages, status_code=403)",
          "60:     explore_state = serializer.save()",
          "61:     session.add(explore_state)",
          "62:     session.commit()",
          "64:     return explore_state_response_serializer(explore_state)",
          "67: @dashboard_apps_router.delete('/{app_id}/')",
          "68: async def dashboard_apps_delete_api(app_id: str, session: Session = Depends(get_session)):",
          "69:     explore_state = session.query(ExploreState) \\",
          "70:         .filter(ExploreState.uuid == app_id, ExploreState.is_archived == False) \\",
          "71:         .first()  # noqa",
          "72:     if not explore_state:",
          "73:         raise HTTPException(status_code=404)",
          "75:     explore_state.is_archived = True",
          "76:     session.commit()",
          "",
          "---------------"
        ],
        "aim/web/api/dashboards/models.py||aim/web/api/dashboards/models.py": [
          "File: aim/web/api/dashboards/models.py -> aim/web/api/dashboards/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import uuid",
          "2: import sqlalchemy as sa",
          "4: from aim.web.api.db import Base",
          "5: from aim.web.api.utils import datetime_now",
          "8: class Dashboard(Base):",
          "9:     __tablename__ = 'dashboards'",
          "10:     uuid = sa.Column(sa.Text, primary_key=True)",
          "11:     name = sa.Column(sa.Text)",
          "12:     description = sa.Column(sa.Text)",
          "14:     created_at = sa.Column(sa.DateTime, default=datetime_now)",
          "15:     updated_at = sa.Column(sa.DateTime, default=datetime_now, onupdate=datetime_now)",
          "16:     is_archived = sa.Column(sa.Boolean, default=False)",
          "18:     def __init__(self, name, description):",
          "19:         self.uuid = str(uuid.uuid1())",
          "20:         self.name = name",
          "21:         self.description = description",
          "22:         self.is_archived = False",
          "",
          "---------------"
        ],
        "aim/web/app/dashboards/serializers.py||aim/web/api/dashboards/serializers.py": [
          "File: aim/web/app/dashboards/serializers.py -> aim/web/api/dashboards/serializers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     if not isinstance(dashboard_object, Dashboard):",
          "7:         return None",
          "12:     response = {",
          "13:         'id': dashboard_object.uuid,",
          "",
          "[Removed Lines]",
          "1: from aim.web.app.dashboards.models import Dashboard",
          "2: from aim.web.app.dashboard_apps.models import ExploreState",
          "5: def dashboard_response_serializer(dashboard_object):",
          "9:     app = ExploreState.query.filter(ExploreState.dashboard_id == dashboard_object.uuid,",
          "10:                                     ExploreState.is_archived == False).first()",
          "",
          "[Added Lines]",
          "1: from aim.web.api.dashboards.models import Dashboard",
          "2: from aim.web.api.dashboard_apps.models import ExploreState",
          "5: def dashboard_response_serializer(dashboard_object, session):",
          "9:     app = session.query(ExploreState)\\",
          "10:         .filter(ExploreState.dashboard_id == dashboard_object.uuid, ExploreState.is_archived == False)\\",
          "11:         .first()",
          "",
          "---------------"
        ],
        "aim/web/api/dashboards/views.py||aim/web/api/dashboards/views.py": [
          "File: aim/web/api/dashboards/views.py -> aim/web/api/dashboards/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from fastapi import Depends, HTTPException, Request",
          "2: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "3: from sqlalchemy.orm import Session",
          "5: from aim.web.api.dashboards.models import Dashboard",
          "6: from aim.web.api.dashboard_apps.models import ExploreState",
          "7: from aim.web.api.dashboards.serializers import dashboard_response_serializer",
          "8: from aim.web.api.db import get_session",
          "10: dashboards_router = APIRouter()",
          "13: @dashboards_router.get('/')",
          "14: async def dashboards_list_api(session: Session = Depends(get_session)):",
          "15:     dashboards_query = session.query(Dashboard) \\",
          "16:         .filter(Dashboard.is_archived == False) \\",
          "17:         .order_by(Dashboard.updated_at)  # noqa",
          "18:     result = []",
          "20:     for dashboard in dashboards_query:",
          "21:         result.append(dashboard_response_serializer(dashboard, session))",
          "23:     return result",
          "26: @dashboards_router.post('/', status_code=201)",
          "27: async def dashboards_post_api(request: Request, session: Session = Depends(get_session)):",
          "28:     # create the dashboard object",
          "29:     request_data = await request.json()",
          "30:     dashboard_name = request_data.get('name')",
          "31:     dashboard_description = request_data.get('description')",
          "32:     dashboard = Dashboard(dashboard_name, dashboard_description)",
          "33:     session.add(dashboard)",
          "35:     # update the app object's foreign key relation",
          "36:     app_id = request_data.get('app_id')",
          "37:     app = session.query(ExploreState).filter(ExploreState.uuid == app_id).first()",
          "38:     if app:",
          "39:         app.dashboard_id = dashboard.uuid",
          "41:     # commit db session",
          "42:     session.commit()",
          "44:     return dashboard_response_serializer(dashboard, session)",
          "47: @dashboards_router.get('/{dashboard_id}/')",
          "48: async def dashboards_get_api(dashboard_id: str, session: Session = Depends(get_session)):",
          "49:     dashboard = session.query(Dashboard) \\",
          "50:         .filter(Dashboard.uuid == dashboard_id, Dashboard.is_archived == False) \\",
          "51:         .first()  # noqa",
          "52:     if not dashboard:",
          "53:         raise HTTPException(status_code=404)",
          "55:     return dashboard_response_serializer(dashboard, session)",
          "58: @dashboards_router.put('/{dashboard_id}/')",
          "59: async def dashboards_put_api(dashboard_id: str, request: Request, session: Session = Depends(get_session)):",
          "60:     dashboard = session.query(Dashboard) \\",
          "61:         .filter(Dashboard.uuid == dashboard_id, Dashboard.is_archived == False) \\",
          "62:         .first()  # noqa",
          "63:     if not dashboard:",
          "64:         raise HTTPException(status_code=404)",
          "65:     request_data = await request.json()",
          "66:     dashboard_name = request_data.get('name')",
          "67:     if dashboard_name:",
          "68:         dashboard.name = dashboard_name",
          "69:     dashboard_description = request_data.get('description')",
          "70:     if dashboard_description:",
          "71:         dashboard.description = dashboard_description",
          "72:     session.commit()",
          "74:     return dashboard_response_serializer(dashboard, session)",
          "77: @dashboards_router.delete('/{dashboard_id}/')",
          "78: async def dashboards_delete_api(dashboard_id: str, session: Session = Depends(get_session)):",
          "79:     dashboard = session.query(Dashboard) \\",
          "80:         .filter(Dashboard.uuid == dashboard_id, Dashboard.is_archived == False) \\",
          "81:         .first()  # noqa",
          "82:     if not dashboard:",
          "83:         raise HTTPException(status_code=404)",
          "85:     dashboard.is_archived = True",
          "86:     session.commit()",
          "",
          "---------------"
        ],
        "aim/web/api/db.py||aim/web/api/db.py": [
          "File: aim/web/api/db.py -> aim/web/api/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "3: from sqlalchemy import create_engine",
          "4: from sqlalchemy.ext.declarative import declarative_base",
          "5: from sqlalchemy.orm import sessionmaker",
          "7: from aim.engine.configs import AIM_WEB_ENV_KEY",
          "8: from aim.web.api.config import config",
          "10: env = os.environ.get(AIM_WEB_ENV_KEY, 'prod')",
          "11: config = config[env]",
          "13: engine = create_engine(",
          "14:     config.SQLALCHEMY_DATABASE_URI, echo=config.SQLALCHEMY_ECHO, connect_args={\"check_same_thread\": False}",
          "15: )",
          "16: SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
          "17: Base = declarative_base()",
          "20: def get_session():",
          "21:     session = SessionLocal()",
          "22:     try:",
          "23:         yield session",
          "24:     finally:",
          "25:         session.close()",
          "",
          "---------------"
        ],
        "aim/web/app/projects/project.py||aim/web/api/projects/project.py": [
          "File: aim/web/app/projects/project.py -> aim/web/api/projects/project.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from aim.engine.configs import AIM_COMMIT_CONFIG_FILE_NAME",
          "8: from aim.web.utils import get_root_path",
          "12: class Project:",
          "",
          "[Removed Lines]",
          "9: from aim.web.app.commits.utils import TFSummaryAdapter",
          "",
          "[Added Lines]",
          "9: from aim.web.api.commits.utils import TFSummaryAdapter",
          "",
          "---------------"
        ],
        "aim/web/app/projects/utils.py||aim/web/api/projects/utils.py": [
          "File: aim/web/app/projects/utils.py -> aim/web/api/projects/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from functools import reduce",
          "6: from sqlalchemy import exc",
          "18:     runs_hashes = [run_hash",
          "19:                    for runs in modified_runs.values()",
          "20:                    for run_hash, _ in runs]",
          "31:     for experiment, runs in modified_runs.items():",
          "32:         for run_hash, run_modified_time in runs:",
          "33:             for run_model in runs_models:",
          "",
          "[Removed Lines]",
          "7: from sqlalchemy import engine_from_config",
          "8: from sqlalchemy.orm import sessionmaker",
          "9: from sqlalchemy.sql import insert",
          "11: from aim.engine.configs import AIM_FLASK_ENV_KEY",
          "12: from aim.web.app.db import db",
          "13: from aim.web.app.commits.models import Commit",
          "14: from aim.web.app.config import config",
          "17: def upgrade_runs_table(project, modified_runs):",
          "22:     runs_models = Commit.query.filter(Commit.hash.in_(runs_hashes)).all()",
          "24:     env = os.environ.get(AIM_FLASK_ENV_KEY, 'dev')",
          "25:     session = sessionmaker(bind=engine_from_config({",
          "26:         'db.echo': config[env].SQLALCHEMY_ECHO,",
          "27:         'db.url': config[env].SQLALCHEMY_DATABASE_URI,",
          "28:     }, prefix='db.'))",
          "29:     additions_session = session()",
          "",
          "[Added Lines]",
          "8: from aim.web.api.commits.models import Commit",
          "11: def upgrade_runs_table(project, modified_runs, additions_session):",
          "16:     runs_models = additions_session.query(Commit).filter(Commit.hash.in_(runs_hashes)).all()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:                     additions_session.rollback()",
          "80:     additions_session.commit()",
          "84: def get_branch_commits(branch_path):",
          "",
          "[Removed Lines]",
          "81:     db.session.commit()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/api/projects/views.py||aim/web/api/projects/views.py": [
          "File: aim/web/api/projects/views.py -> aim/web/api/projects/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import copy",
          "2: import json",
          "3: import os",
          "4: import pytz",
          "5: import time",
          "7: from collections import Counter",
          "8: from datetime import datetime",
          "9: from fastapi import Depends, HTTPException, Request",
          "10: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "11: from fastapi.responses import FileResponse",
          "12: from sqlalchemy import func",
          "13: from sqlalchemy.orm import Session",
          "14: from urllib import parse",
          "16: from aim.artifacts.metric import Metric as MetricArtifact",
          "17: from aim.engine.configs import AIM_UI_TELEMETRY_KEY",
          "18: from aim.web.api.db import get_session",
          "19: from aim.web.api.utils import unsupported_float_type",
          "20: from aim.web.api.projects.utils import (",
          "21:     get_branch_commits,",
          "22:     deep_merge,",
          "23:     dump_dict_values,",
          "24:     upgrade_runs_table,",
          "25: )",
          "26: from aim.web.api.projects.project import Project",
          "27: from aim.web.api.commits.models import Commit",
          "29: projects_router = APIRouter()",
          "32: @projects_router.get('/')",
          "33: async def project_api():",
          "34:     project = Project()",
          "36:     if not project.exists():",
          "37:         raise HTTPException(status_code=404)",
          "39:     return {",
          "40:         'name': project.name,",
          "41:         'path': project.path,",
          "42:         'tf_enabled': project.tf_enabled,",
          "43:         'description': project.description,",
          "44:         'branches': project.repo.list_branches(),",
          "45:         'telemetry_enabled': os.getenv(AIM_UI_TELEMETRY_KEY, '1'),",
          "46:     }",
          "49: @projects_router.get('/info/')",
          "50: async def project_data_api():",
          "51:     project = Project()",
          "53:     if not project.exists():",
          "54:         raise HTTPException(status_code=404)",
          "56:     return {",
          "57:         'branches': project.repo.list_branches(),",
          "58:     }",
          "61: @projects_router.get('/activity/')",
          "62: async def project_activity_api(request: Request, session: Session = Depends(get_session)):",
          "63:     project = Project()",
          "65:     if not project.exists():",
          "66:         raise HTTPException(status_code=404)",
          "68:     last_synced_run = session\\",
          "69:         .query(func.max(Commit.session_started_at),",
          "70:                func.max(Commit.session_closed_at))\\",
          "71:         .first()",
          "72:     last_synced_run_time = max(last_synced_run[0] or 0,",
          "73:                                last_synced_run[1] or 0)",
          "75:     modified_runs = project.get_modified_runs(last_synced_run_time)",
          "76:     upgrade_runs_table(project, modified_runs, session)",
          "78:     all_runs = session\\",
          "79:         .query(Commit.hash,",
          "80:                Commit.experiment_name,",
          "81:                Commit.session_started_at)\\",
          "82:         .filter(Commit.session_started_at > 0)\\",
          "83:         .all()",
          "85:     experiments = {r.experiment_name for r in all_runs}",
          "87:     try:",
          "88:         timezone = request.cookies.get('__AIMDE__:TIMEZONE')",
          "89:         if timezone:",
          "90:             timezone = pytz.timezone(parse.unquote(timezone))",
          "91:     except:",
          "92:         timezone = None",
          "94:     if not timezone:",
          "95:         timezone = pytz.timezone('gmt')",
          "97:     activity_counter = Counter([",
          "98:         datetime.fromtimestamp(r.session_started_at, timezone)",
          "99:                 .strftime('%Y-%m-%d')",
          "100:         if r.session_started_at > 0 else 0",
          "101:         for r in all_runs",
          "102:     ])",
          "104:     return {",
          "105:         'num_experiments': len(experiments),",
          "106:         'num_runs': len(all_runs),",
          "107:         'activity_map': dict(activity_counter),",
          "108:     }",
          "111: @projects_router.get('/params/')",
          "112: async def project_params_api():",
          "113:     project = Project()",
          "115:     if not project.exists():",
          "116:         raise HTTPException(status_code=404)",
          "118:     repo = project.repo",
          "119:     metrics = set()",
          "120:     params = {}",
          "122:     for exp_name in repo.list_branches():",
          "123:         for run_hash in repo.list_branch_commits(exp_name):",
          "124:             run = repo.select_run_metrics(exp_name, run_hash)",
          "125:             if run is not None:",
          "126:                 run_params = copy.deepcopy(run.params)",
          "127:                 if run_params is None or len(run_params) == 0:",
          "128:                     continue",
          "129:                 if '__METRICS__' in run_params:",
          "130:                     del run_params['__METRICS__']",
          "131:                 dump_dict_values(run_params, {})",
          "132:                 params = deep_merge(params, run_params)",
          "133:                 for m in run.metrics.keys():",
          "134:                     metrics.add(m)",
          "136:     dump_dict_values(params, True)",
          "138:     return {",
          "139:         'params': params,",
          "140:         'metrics': list(metrics),",
          "141:     }",
          "144: @projects_router.get('/{exp_name}/{commit}/models/{model_name}/')",
          "145: async def experiment_model_api(exp_name, commit, model_name):",
          "146:     project = Project()",
          "148:     model_file = os.path.join(project.repo_path, exp_name, commit, 'objects', 'models', model_name)",
          "150:     return FileResponse(model_file)",
          "153: @projects_router.get('/{experiment_name}/{commit_id}/')",
          "154: async def project_experiment_api(experiment_name, commit_id):",
          "155:     project = Project()",
          "157:     if not project.exists():",
          "158:         raise HTTPException(status_code=404)",
          "160:     dir_path = os.path.join(project.repo_path, experiment_name)",
          "162:     # Check if experiment exists",
          "163:     if not os.path.isdir(dir_path):",
          "164:         return {",
          "165:             'init': True,",
          "166:             'branch_init': False,",
          "167:         }",
          "169:     # Get commits",
          "170:     commits = get_branch_commits(dir_path)",
          "172:     # Get specified commit",
          "173:     commit = None",
          "174:     if commit_id == 'latest':",
          "175:         for commit_item, config in commits.items():",
          "176:             if commit is None or config['date'] > commit['date']:",
          "177:                 commit = config",
          "178:     else:",
          "179:         commit = commits.get(commit_id)",
          "181:     if not commit:",
          "182:         return {",
          "183:             'init': True,",
          "184:             'branch_init': True,",
          "185:             'branch_empty': True,",
          "186:         }",
          "188:     if 'process' in commit.keys():",
          "189:         if not commit['process']['finish']:",
          "190:             if commit['process'].get('start_date'):",
          "191:                 duration = time.time() - commit['process']['start_date']",
          "192:                 commit['process']['time'] = duration",
          "193:             else:",
          "194:                 commit['process']['time'] = None",
          "195:         elif commit['process'].get('start_date') is not None \\",
          "196:                 and commit['process'].get('finish_date') is not None:",
          "197:             commit['process']['time'] = commit['process']['finish_date'] \\",
          "198:                                         - commit['process']['start_date']",
          "200:     objects_dir_path = os.path.join(dir_path, commit['hash'], 'objects')",
          "201:     meta_file_path = os.path.join(objects_dir_path, 'meta.json')",
          "203:     # Read meta file content",
          "204:     try:",
          "205:         with open(meta_file_path, 'r+') as meta_file:",
          "206:             meta_file_content = json.loads(meta_file.read())",
          "207:     except:",
          "208:         meta_file_content = {}",
          "210:     # Get all artifacts(objects) listed in the meta file",
          "211:     metric_objects = []",
          "212:     model_objects = []",
          "213:     dir_objects = []",
          "214:     map_objects = []",
          "215:     stats_objects = []",
          "217:     # Limit distributions",
          "218:     for obj_key, obj in meta_file_content.items():",
          "219:         if obj['type'] == 'dir':",
          "220:             dir_objects.append({",
          "221:                 'name': obj['name'],",
          "222:                 'cat': obj['cat'],",
          "223:                 'data': obj['data'],",
          "224:                 'data_path': obj['data_path'],",
          "225:             })",
          "226:         elif obj['type'] == 'models':",
          "227:             model_file_path = os.path.join(objects_dir_path,",
          "228:                                            'models',",
          "229:                                            '{}.aim'.format(obj['name']))",
          "230:             model_file_size = os.stat(model_file_path).st_size",
          "231:             model_objects.append({",
          "232:                 'name': obj['name'],",
          "233:                 'data': obj['data'],",
          "234:                 'size': model_file_size,",
          "235:             })",
          "236:         elif (obj['type'] == 'metrics'",
          "237:               and obj['data_path'] != '__AIMRECORDS__') or \\",
          "238:                 ('map' in obj['type'] or obj['type'] == 'map'):",
          "239:                 # obj['type'] == 'distribution':",
          "240:             # Get object's data file path",
          "241:             obj_data_file_path = os.path.join(objects_dir_path,",
          "242:                                               obj['data_path'],",
          "243:                                               obj_key)",
          "245:             # Incompatible version",
          "246:             if obj_key.endswith('.json'):",
          "247:                 raise HTTPException(status_code=501)",
          "249:         if obj['type'] == 'metrics':",
          "250:             steps = 200",
          "251:             run = project.repo.select_run_metrics(experiment_name,",
          "252:                                                   commit['hash'],",
          "253:                                                   obj['name'])",
          "254:             if run is not None and run.metrics.get(obj['name']) \\",
          "255:                     and len(run.metrics[obj['name']].traces):",
          "256:                 metric = run.metrics[obj['name']]",
          "257:                 run.open_storage()",
          "258:                 metric.open_artifact()",
          "259:                 traces = []",
          "260:                 for trace in metric.traces:",
          "261:                     num = trace.num_records",
          "262:                     step = (num // steps) or 1",
          "263:                     for r in trace.read_records(slice(0, num, step)):",
          "264:                         base, metric_record = MetricArtifact.deserialize_pb(r)",
          "265:                         if unsupported_float_type(metric_record.value):",
          "266:                             continue",
          "267:                         trace.append((",
          "268:                             base.step,  # 0 => step",
          "269:                             metric_record.value,  # 1 => value",
          "270:                         ))",
          "271:                     if (num - 1) % steps != 0:",
          "272:                         for r in trace.read_records(num-1):",
          "273:                             base, metric_record = MetricArtifact.deserialize_pb(r)",
          "274:                             if unsupported_float_type(metric_record.value):",
          "275:                                 continue",
          "276:                             trace.append((",
          "277:                                 base.step,  # 0 => step",
          "278:                                 metric_record.value,  # 1 => value",
          "279:                             ))",
          "280:                     traces.append(trace.to_dict())",
          "281:                 metric.close_artifact()",
          "282:                 run.close_storage()",
          "283:             else:",
          "284:                 traces = []",
          "286:             metric_objects.append({",
          "287:                 'name': obj['name'],",
          "288:                 'mode': 'plot',",
          "289:                 'traces': traces,",
          "290:             })",
          "291:         elif 'map' in obj['type'] or obj['type'] == 'map':",
          "292:             try:",
          "293:                 with open(obj_data_file_path, 'r+') as obj_data_file:",
          "294:                     params_str = obj_data_file.read().strip()",
          "295:                     if params_str:",
          "296:                         map_objects.append({",
          "297:                             'name': obj['name'],",
          "298:                             'data': json.loads(params_str),",
          "299:                             'nested': 'nested_map' in obj['type']",
          "300:                         })",
          "301:             except:",
          "302:                 pass",
          "304:     # Return found objects",
          "305:     return {",
          "306:         'init': True,",
          "307:         'branch_init': True,",
          "308:         'branch_empty': False,",
          "309:         'commit': commit,",
          "310:         'commits': commits,",
          "311:         'metrics': metric_objects,",
          "312:         'models': model_objects,",
          "313:         'dirs': dir_objects,",
          "314:         'maps': map_objects,",
          "315:         'stats': stats_objects,",
          "316:     }",
          "319: @projects_router.get('/insight/{insight_name}/')",
          "320: async def project_insight_api(insight_name):",
          "321:     raise HTTPException(status_code=404)",
          "",
          "---------------"
        ],
        "aim/web/api/tags/views.py||aim/web/api/tags/views.py": [
          "File: aim/web/api/tags/views.py -> aim/web/api/tags/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from fastapi import Depends,HTTPException, Request",
          "2: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "3: from sqlalchemy.orm import joinedload, Session",
          "5: from aim.web.api.db import get_session",
          "6: from aim.web.api.commits.models import Tag",
          "8: tags_router = APIRouter()",
          "11: @tags_router.get('/list/')",
          "12: async def tags_list_api(session: Session = Depends(get_session)):",
          "13:     tags = session.query(Tag).filter(Tag.is_hidden.isnot(True)) \\",
          "14:         .order_by(Tag.created_at.desc()).all()",
          "16:     result = []",
          "17:     for t in tags:",
          "18:         result.append({",
          "19:             'id': t.uuid,",
          "20:             'name': t.name,",
          "21:             'color': t.color,",
          "22:             'num_commits': len(t.commits),",
          "23:         })",
          "25:     return result",
          "28: @tags_router.post('/new/')",
          "29: async def tags_create_api(request: Request, session: Session = Depends(get_session)):",
          "30:     command_form = await request.form()",
          "32:     name = command_form.get('name') or ''",
          "33:     name = name.strip()",
          "35:     color = command_form.get('color') or ''",
          "36:     color = color.strip()",
          "38:     if not name or not color:",
          "39:         raise HTTPException(status_code=403)",
          "41:     t = Tag(name, color)",
          "42:     session.add(t)",
          "43:     session.commit()",
          "45:     return {",
          "46:         'id': t.uuid,",
          "47:     }",
          "50: @tags_router.post('/update/')",
          "51: async def tag_update_api(request: Request, session: Session = Depends(get_session)):",
          "52:     command_form = await request.form()",
          "54:     uuid = command_form.get('id') or ''",
          "55:     uuid = uuid.strip()",
          "57:     tag = session.query(Tag).filter_by(uuid=uuid).first()",
          "58:     if not tag:",
          "59:         raise HTTPException(status_code=404)",
          "61:     if 'name' in command_form:",
          "62:         tag.name = command_form.get('name').strip()",
          "63:         if not tag.name:",
          "64:             raise HTTPException(status_code=403)",
          "65:     if 'color' in command_form:",
          "66:         tag.color = command_form.get('color').strip()",
          "67:         if not tag.color:",
          "68:             raise HTTPException(status_code=403)",
          "69:     if 'is_hidden' in command_form:",
          "70:         tag.is_hidden = command_form.get('is_hidden') == 'true'",
          "72:     session.commit()",
          "74:     return {",
          "75:         'id': tag.uuid,",
          "76:     }",
          "79: @tags_router.get('/runs/{tag_id}/')",
          "80: async def tag_get_related_runs(tag_id: str, session: Session = Depends(get_session)):",
          "81:     tag = session.query(Tag).options(joinedload('commits')) \\",
          "82:         .filter_by(uuid=tag_id) \\",
          "83:         .first()",
          "85:     related_runs = []",
          "86:     if tag:",
          "87:         for commit in tag.commits:",
          "88:             related_runs.append({",
          "89:                 'hash': commit.hash,",
          "90:                 'experiment_name': commit.experiment_name,",
          "91:                 'uuid': commit.uuid,",
          "92:                 'created_at': commit.created_at,",
          "93:             })",
          "95:     return {",
          "96:         'data': related_runs,",
          "97:     }",
          "100: @tags_router.get('/{tag_id}/')",
          "101: async def tag_get_api(tag_id: str, session: Session = Depends(get_session)):",
          "102:     tag = session.query(Tag).filter_by(uuid=tag_id).first()",
          "104:     if not tag:",
          "105:         raise HTTPException(status_code=404)",
          "107:     return {",
          "108:         'name': tag.name,",
          "109:         'color': tag.color,",
          "110:         'is_hidden': tag.is_hidden,",
          "111:     }",
          "",
          "---------------"
        ],
        "aim/web/app/utils.py||aim/web/api/utils.py": [
          "File: aim/web/app/utils.py -> aim/web/api/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import datetime",
          "2: import json",
          "3: import math",
          "5: import pytz",
          "9: from collections import OrderedDict",
          "10: from collections.abc import Iterable",
          "13: def datetime_now():",
          "",
          "[Removed Lines]",
          "4: import os",
          "7: from flask import send_from_directory",
          "",
          "[Added Lines]",
          "8: from fastapi import APIRouter as FastAPIRouter",
          "9: from fastapi.types import DecoratedCallable",
          "10: from typing import Any, Callable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     return False",
          "57: def json_loads_or_none(obj):",
          "58:     return json.loads(obj) if obj else None",
          "",
          "[Removed Lines]",
          "48: def send_from_directory_gzip_compressed(directory, filename, **options):",
          "49:     compressed_filename = '{}.gz'.format(filename)",
          "50:     if os.path.exists(os.path.join(directory, compressed_filename)):",
          "51:         rv = send_from_directory(directory, compressed_filename, **options)",
          "52:         rv.headers.add('Content-Encoding', 'gzip')",
          "53:         return rv",
          "55:     return send_from_directory(directory, filename, **options)",
          "",
          "[Added Lines]",
          "49: class APIRouter(FastAPIRouter):",
          "50:     def api_route(",
          "51:         self, path: str, *, include_in_schema: bool = True, **kwargs: Any",
          "52:     ) -> Callable[[DecoratedCallable], DecoratedCallable]:",
          "53:         if path.endswith(\"/\"):",
          "54:             path = path[:-1]",
          "56:         add_path = super().api_route(",
          "57:             path, include_in_schema=include_in_schema, **kwargs",
          "58:         )",
          "60:         alternate_path = path + \"/\"",
          "61:         add_alternate_path = super().api_route(",
          "62:             alternate_path, include_in_schema=False, **kwargs",
          "63:         )",
          "65:         def decorator(func: DecoratedCallable) -> DecoratedCallable:",
          "66:             add_alternate_path(func)",
          "67:             return add_path(func)",
          "69:         return decorator",
          "",
          "---------------"
        ],
        "aim/web/api/views.py||aim/web/api/views.py": [
          "File: aim/web/api/views.py -> aim/web/api/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "3: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "4: from fastapi.responses import FileResponse",
          "6: from aim.web.api.projects.project import Project",
          "8: general_router = APIRouter()",
          "11: @general_router.get('/static-files/{path:path}/')",
          "12: async def serve_static_files(path):",
          "13:     from aim import web",
          "14:     static_file_name = os.path.join(os.path.dirname(web.__file__), 'ui', 'build', path)",
          "15:     compressed_file_name = '{}.gz'.format(static_file_name)",
          "16:     if os.path.exists(compressed_file_name):",
          "17:         return FileResponse(compressed_file_name, headers={'Content-Encoding': 'gzip'})",
          "18:     return FileResponse(static_file_name)",
          "21: @general_router.get('/static/{exp_name}/{commit_hash}/media/images/{path}/')",
          "22: async def serve_images(exp_name, commit_hash, path):",
          "23:     project = Project()",
          "24:     image_file = os.path.join(project.repo_path,",
          "25:                               exp_name, commit_hash,",
          "26:                               'objects', 'media', 'images',",
          "27:                               path)",
          "28:     return FileResponse(image_file)",
          "31: # do not change the placement of this method",
          "32: # as it also serves as a fallback for wrong url routes",
          "33: @general_router.get('/{path:path}/')",
          "34: async def serve_index_html():",
          "35:     from aim import web",
          "36:     static_file_name = os.path.join(os.path.dirname(web.__file__), 'ui', 'build', 'index.html')",
          "37:     compressed_file_name = '{}.gz'.format(static_file_name)",
          "38:     if os.path.exists(compressed_file_name):",
          "39:         return FileResponse(compressed_file_name, headers={'Content-Encoding': 'gzip'})",
          "40:     return FileResponse(static_file_name)",
          "",
          "---------------"
        ],
        "aim/web/app/__init__.py||aim/web/app/__init__.py": [
          "File: aim/web/app/__init__.py -> aim/web/app/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/commits/models.py||aim/web/app/commits/models.py": [
          "File: aim/web/app/commits/models.py -> aim/web/app/commits/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/commits/views.py||aim/web/app/commits/views.py": [
          "File: aim/web/app/commits/views.py -> aim/web/app/commits/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/dashboard_apps/models.py||aim/web/app/dashboard_apps/models.py": [
          "File: aim/web/app/dashboard_apps/models.py -> aim/web/app/dashboard_apps/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/dashboard_apps/views.py||aim/web/app/dashboard_apps/views.py": [
          "File: aim/web/app/dashboard_apps/views.py -> aim/web/app/dashboard_apps/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/dashboards/models.py||aim/web/app/dashboards/models.py": [
          "File: aim/web/app/dashboards/models.py -> aim/web/app/dashboards/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/dashboards/views.py||aim/web/app/dashboards/views.py": [
          "File: aim/web/app/dashboards/views.py -> aim/web/app/dashboards/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/db.py||aim/web/app/db.py": [
          "File: aim/web/app/db.py -> aim/web/app/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/projects/views.py||aim/web/app/projects/views.py": [
          "File: aim/web/app/projects/views.py -> aim/web/app/projects/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/tags/views.py||aim/web/app/tags/views.py": [
          "File: aim/web/app/tags/views.py -> aim/web/app/tags/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/app/views.py||aim/web/app/views.py": [
          "File: aim/web/app/views.py -> aim/web/app/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/manage.py||aim/web/manage.py": [
          "File: aim/web/manage.py -> aim/web/manage.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/migrations/env.py||aim/web/migrations/env.py": [
          "File: aim/web/migrations/env.py -> aim/web/migrations/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from alembic import context",
          "8: from alembic.config import Config",
          "13: # this is the Alembic Config object, which provides",
          "14: # access to the values within the .ini file in use.",
          "15: config = context.config",
          "18:     here = os.path.abspath(os.path.dirname(__file__))",
          "19:     config = Config(os.path.join(here, 'alembic_dev.ini'))",
          "",
          "[Removed Lines]",
          "9: from flask import current_app",
          "11: from aim.engine.configs import AIM_FLASK_ENV_KEY",
          "17: if os.getenv(AIM_FLASK_ENV_KEY) == 'dev':",
          "",
          "[Added Lines]",
          "10: from aim.engine.configs import AIM_WEB_ENV_KEY",
          "11: from aim.web.api.db import Base, engine, config as sql_config",
          "17: if os.getenv(AIM_WEB_ENV_KEY) == 'dev':",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: # add your model's MetaData object here",
          "27: # for 'autogenerate' support",
          "35: # other values from the config, defined by the needs of env.py,",
          "36: # can be acquired:",
          "",
          "[Removed Lines]",
          "28: # from myapp import mymodel",
          "29: # target_metadata = mymodel.Base.metadata",
          "30: config.set_main_option(",
          "31:     'sqlalchemy.url',",
          "32:     str(current_app.extensions['migrate'].db.engine.url).replace('%', '%%'))",
          "33: target_metadata = current_app.extensions['migrate'].db.metadata",
          "",
          "[Added Lines]",
          "28: target_metadata = Base.metadata",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     script output.",
          "52:     \"\"\"",
          "54:     context.configure(",
          "55:         url=url, target_metadata=target_metadata, literal_binds=True",
          "56:     )",
          "",
          "[Removed Lines]",
          "53:     url = config.get_main_option(\"sqlalchemy.url\")",
          "",
          "[Added Lines]",
          "48:     url = sql_config.SQLALCHEMY_DATABASE_URI",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:                 directives[:] = []",
          "78:                 logger.info('No changes in schema detected.')",
          "82:     with connectable.connect() as connection:",
          "83:         context.configure(",
          "84:             connection=connection,",
          "85:             target_metadata=target_metadata,",
          "88:         )",
          "90:         with context.begin_transaction():",
          "",
          "[Removed Lines]",
          "80:     connectable = current_app.extensions['migrate'].db.engine",
          "86:             process_revision_directives=process_revision_directives,",
          "",
          "[Added Lines]",
          "75:     connectable = engine",
          "81:             process_revision_directives=process_revision_directives",
          "",
          "---------------"
        ],
        "aim/web/run.py||aim/web/run.py": [
          "File: aim/web/run.py -> aim/web/run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: from aim.web.app import App",
          "4: application = App().api",
          "",
          "[Added Lines]",
          "1: from aim.web.api import create_app",
          "3: app = create_app()",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: NAME = os.getenv('AIM_PKG_NAME') or 'aim'",
          "14: DESCRIPTION = 'A super-easy way to record, search and compare AI experiments.'",
          "15: VERSION = __version__",
          "18: # Get packages",
          "19: packages = find_packages(exclude=('tests',))",
          "",
          "[Removed Lines]",
          "16: REQUIRES_PYTHON = '>=3.5.0'",
          "",
          "[Added Lines]",
          "16: REQUIRES_PYTHON = '>=3.6.0'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: # What packages are required for this module to be executed?",
          "38: REQUIRED = [",
          "40:     'anytree>=2.8.0',",
          "42:     'GitPython>=3.0.4',",
          "44:     'psutil>=5.6.7',",
          "45:     'py3nvml>=0.2.5',",
          "61: ]",
          "",
          "[Removed Lines]",
          "39:     'click>=6.7',",
          "41:     'pyrser>=0.2.0',",
          "43:     'requests>=2.0.0',",
          "46:     'docker>=4.1.0',",
          "47:     'aimrecords==0.0.7',",
          "48:     'protobuf>=3.11.0',",
          "49:     'alembic==1.6.0',",
          "50:     'Flask==1.1.2',",
          "51:     'Flask-Cors==3.0.10',",
          "52:     'Flask-Migrate==2.7.0',",
          "53:     'Flask-RESTful==0.3.8',",
          "54:     'Flask-Script==2.0.6',",
          "55:     'Flask-SQLAlchemy==2.5.1',",
          "56:     'SQLAlchemy==1.4.13',",
          "57:     'pysqlite3',",
          "58:     'pytz==2020.1',",
          "59:     'tensorboard==2.3.0',",
          "60:     'gunicorn==20.1.0',",
          "",
          "[Added Lines]",
          "39:     'aimrecords==0.0.7',",
          "41:     'click>=7.0',",
          "43:     'protobuf>=3.11.0',",
          "45:     'pyrser>=0.2.0',",
          "47:     'requests>=2.0.0',",
          "48:     'aiofiles>=0.5.0',",
          "49:     'alembic>=1.4.0',",
          "50:     'fastapi>=0.65.0',",
          "51:     'uvicorn>=0.12.0',",
          "52:     'python-multipart>=0.0.3',",
          "53:     'pytz>=2019.1',",
          "54:     'SQLAlchemy>=1.3.0',",
          "55:     'tensorboard>=2.0.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60b99dc8a509f989ed9fd819454c87ac5d2b0257",
      "candidate_info": {
        "commit_hash": "60b99dc8a509f989ed9fd819454c87ac5d2b0257",
        "repo": "aimhubio/aim",
        "commit_url": "https://github.com/aimhubio/aim/commit/60b99dc8a509f989ed9fd819454c87ac5d2b0257",
        "files": [
          "CHANGELOG.md",
          "aim/cli/up/commands.py",
          "aim/web/api/__init__.py",
          "aim/web/api/experiments/views.py",
          "aim/web/api/runs/object_views.py",
          "aim/web/api/runs/views.py",
          "aim/web/api/tags/views.py",
          "aim/web/api/views.py",
          "aim/web/configs.py",
          "aim/web/middlewares/__init__.py",
          "aim/web/middlewares/profiler/__init__.py",
          "aim/web/middlewares/profiler/profiler.py",
          "tests/api/test_structured_data_api.py"
        ],
        "message": "[feat] api profiler (#1520)\n\n* added api profiler and trigger command\n\n* flake8 fixes\n\n* minor updates\n\n* logging request details\n\n* storing request data inside html file\n\n* fixes on HTTPException\n\n* added error response handler and updated messages\n\n* error msg and test update\n\n* updated CHANGELOG.md\n\n* minor updates\n\n* resolved relative import",
        "before_after_code_files": [
          "aim/cli/up/commands.py||aim/cli/up/commands.py",
          "aim/web/api/__init__.py||aim/web/api/__init__.py",
          "aim/web/api/experiments/views.py||aim/web/api/experiments/views.py",
          "aim/web/api/runs/object_views.py||aim/web/api/runs/object_views.py",
          "aim/web/api/runs/views.py||aim/web/api/runs/views.py",
          "aim/web/api/tags/views.py||aim/web/api/tags/views.py",
          "aim/web/api/views.py||aim/web/api/views.py",
          "aim/web/configs.py||aim/web/configs.py",
          "aim/web/middlewares/profiler/__init__.py||aim/web/middlewares/profiler/__init__.py",
          "aim/web/middlewares/profiler/profiler.py||aim/web/middlewares/profiler/profiler.py",
          "tests/api/test_structured_data_api.py||tests/api/test_structured_data_api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ],
          "candidate": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ]
        }
      },
      "candidate_diff": {
        "aim/cli/up/commands.py||aim/cli/up/commands.py": [
          "File: aim/cli/up/commands.py -> aim/cli/up/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     AIM_UI_DEFAULT_PORT,",
          "10:     AIM_UI_MOUNTED_REPO_PATH,",
          "11:     AIM_UI_TELEMETRY_KEY,",
          "13: )",
          "14: from aim.sdk.repo import Repo, RepoStatus",
          "15: from aim.sdk.utils import clean_repo_path",
          "",
          "[Removed Lines]",
          "12:     AIM_PROXY_URL",
          "",
          "[Added Lines]",
          "12:     AIM_PROXY_URL,",
          "13:     AIM_PROFILER_KEY",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:                                                                 readable=True))",
          "40: @click.option('--base-path', required=False, default='', type=str)",
          "41: @click.option('--force-init', is_flag=True, default=False)",
          "43:     if dev:",
          "44:         os.environ[AIM_ENV_MODE_KEY] = 'dev'",
          "45:     else:",
          "",
          "[Removed Lines]",
          "42: def up(dev, host, port, workers, repo, tf_logs, ssl_keyfile, ssl_certfile, base_path, force_init):",
          "",
          "[Added Lines]",
          "43: @click.option('--profiler', is_flag=True, default=False)",
          "44: def up(dev, host, port, workers, repo, tf_logs, ssl_keyfile, ssl_certfile, base_path, force_init, profiler):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     click.echo('Press Ctrl+C to exit')",
          "128:     try:",
          "129:         server_cmd = build_uvicorn_command(host, port, workers, ssl_keyfile, ssl_certfile)",
          "130:         exec_cmd(server_cmd, stream_output=True)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     if profiler:",
          "131:         os.environ[AIM_PROFILER_KEY] = '1'",
          "",
          "---------------"
        ],
        "aim/web/api/__init__.py||aim/web/api/__init__.py": [
          "File: aim/web/api/__init__.py -> aim/web/api/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from fastapi import FastAPI",
          "2: from fastapi.middleware.cors import CORSMiddleware",
          "3: from fastapi.middleware.gzip import GZipMiddleware",
          "7: def create_app():",
          "",
          "[Removed Lines]",
          "4: import os",
          "",
          "[Added Lines]",
          "1: import os",
          "4: from fastapi.exceptions import HTTPException",
          "7: from fastapi.responses import JSONResponse",
          "9: from aim.web.configs import AIM_PROFILER_KEY",
          "10: from aim.web.middlewares.profiler import PyInstrumentProfilerMiddleware",
          "11: from aim.web.utils import get_root_path",
          "14: async def http_exception_handler(request, exc):",
          "15:     if isinstance(exc.detail, dict):",
          "16:         message = exc.detail.pop('message', 'Something went wrong')",
          "17:         detail = exc.detail",
          "18:     else:",
          "19:         message = 'Something went wrong'",
          "20:         detail = str(exc.detail)",
          "22:     response = {",
          "23:         'message': message,",
          "24:         'detail': detail",
          "25:     }",
          "26:     return JSONResponse(response, status_code=exc.status_code)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     api_app = FastAPI()",
          "39:     api_app.add_middleware(GZipMiddleware)",
          "41:     add_api_routes()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     api_app.add_exception_handler(HTTPException, http_exception_handler)",
          "64:     if os.environ.get(AIM_PROFILER_KEY) == \"1\":",
          "65:         api_app.add_middleware(PyInstrumentProfilerMiddleware,",
          "66:                                repo_path=get_root_path())",
          "",
          "---------------"
        ],
        "aim/web/api/experiments/views.py||aim/web/api/experiments/views.py": [
          "File: aim/web/api/experiments/views.py -> aim/web/api/experiments/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         try:",
          "39:             exp = factory.create_experiment(exp_in.name.strip())",
          "40:         except ValueError as e:",
          "43:     return {",
          "44:         'id': exp.uuid,",
          "",
          "[Removed Lines]",
          "41:             raise HTTPException(400, detail=str(e))",
          "",
          "[Added Lines]",
          "41:             raise HTTPException(status_code=400, detail=str(e))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:             exp.name = exp_in.name.strip()",
          "73:         if exp_in.archived is not None:",
          "74:             if exp_in.archived and len(exp.runs) > 0:",
          "77:             exp.archived = exp_in.archived",
          "79:     return {",
          "",
          "[Removed Lines]",
          "75:                 raise HTTPException(status_code=400,",
          "76:                                     detail=f'Cannot archive experiment \\'{exp_id}\\'. Experiment has associated runs.')",
          "",
          "[Added Lines]",
          "75:                 raise HTTPException(status_code=400, detail={",
          "76:                     'message': f'Cannot archive experiment \\'{exp_id}\\'.',",
          "77:                     'reason': 'Experiment has associated runs.'",
          "78:                 })",
          "",
          "---------------"
        ],
        "aim/web/api/runs/object_views.py||aim/web/api/runs/object_views.py": [
          "File: aim/web/api/runs/object_views.py -> aim/web/api/runs/object_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     @staticmethod",
          "32:     def check_density(density):",
          "33:         if density <= 0:",
          "36:     @classmethod",
          "37:     def register_endpoints(cls, router):",
          "",
          "[Removed Lines]",
          "34:             raise HTTPException(status_code=400, detail=f'Invalid density value: \\'{density}\\'. Density must be > 0.')",
          "",
          "[Added Lines]",
          "34:             raise HTTPException(status_code=400, detail={",
          "35:                 'message': f'Invalid density value: \\'{density}\\'.',",
          "36:                 'reason': 'Density must be > 0.'",
          "37:             })",
          "",
          "---------------"
        ],
        "aim/web/api/runs/views.py||aim/web/api/runs/views.py": [
          "File: aim/web/api/runs/views.py -> aim/web/api/runs/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from fastapi import Depends, HTTPException, Query",
          "2: from fastapi.responses import JSONResponse, StreamingResponse",
          "5:     FigureApiConfig",
          "6: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "7: from typing import Optional, Tuple",
          "",
          "[Removed Lines]",
          "4: from aim.web.api.runs.object_views import ImageApiConfig, TextApiConfig, DistributionApiConfig, AudioApiConfig, \\",
          "",
          "[Added Lines]",
          "4: from aim.web.api.runs.object_views import (",
          "5:     ImageApiConfig,",
          "6:     TextApiConfig,",
          "7:     DistributionApiConfig,",
          "8:     AudioApiConfig,",
          "10: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:     repo = get_project_repo()",
          "170:     success = repo.delete_run(run_id)",
          "171:     if not success:",
          "174:     return {",
          "175:         'id': run_id,",
          "",
          "[Removed Lines]",
          "172:         raise HTTPException(400, detail=f'Error while deleting run {run_id}.')",
          "",
          "[Added Lines]",
          "177:         raise HTTPException(status_code=400, detail={",
          "178:             'message': f'Error while deleting run {run_id}.'",
          "179:         })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:     repo = get_project_repo()",
          "183:     success, remaining_runs = repo.delete_runs(runs_batch)",
          "184:     if not success:",
          "188:     return {",
          "189:         'status': 'OK'",
          "",
          "[Removed Lines]",
          "185:         raise HTTPException(400, detail={'message': 'Error while deleting runs.',",
          "186:                                          'remaining_runs': remaining_runs})",
          "",
          "[Added Lines]",
          "192:         raise HTTPException(status_code=400, detail={",
          "193:             'message': 'Error while deleting runs.',",
          "194:             'remaining_runs': remaining_runs",
          "195:         })",
          "",
          "---------------"
        ],
        "aim/web/api/tags/views.py||aim/web/api/tags/views.py": [
          "File: aim/web/api/tags/views.py -> aim/web/api/tags/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             if tag_in.description is not None:",
          "48:                 tag.description = tag_in.description.strip()",
          "49:         except ValueError as e:",
          "52:     return {",
          "53:         'id': tag.uuid,",
          "",
          "[Removed Lines]",
          "50:             raise HTTPException(400, detail=str(e))",
          "",
          "[Added Lines]",
          "50:             raise HTTPException(status_code=400, detail=str(e))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: async def get_tag_api(tag_id: str, factory=Depends(object_factory)):",
          "60:     tag = factory.find_tag(tag_id)",
          "61:     if not tag:",
          "64:     response = {",
          "65:         'id': tag.uuid,",
          "",
          "[Removed Lines]",
          "62:         raise HTTPException",
          "",
          "[Added Lines]",
          "62:         raise HTTPException(status_code=404)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:     tag = factory.find_tag(tag_id)",
          "109:     if not tag:",
          "112:     from aim.sdk.run import Run",
          "",
          "[Removed Lines]",
          "110:         raise HTTPException",
          "",
          "[Added Lines]",
          "110:         raise HTTPException(status_code=404)",
          "",
          "---------------"
        ],
        "aim/web/api/views.py||aim/web/api/views.py": [
          "File: aim/web/api/views.py -> aim/web/api/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     # check if path is leading inside ui/build directory",
          "20:     if not Path(static_files_root).resolve() in Path(static_file_name).resolve().parents:",
          "23:     compressed_file_name = '{}.gz'.format(static_file_name)",
          "24:     if os.path.exists(compressed_file_name):",
          "",
          "[Removed Lines]",
          "21:         raise HTTPException(404)",
          "",
          "[Added Lines]",
          "21:         raise HTTPException(status_code=404)",
          "",
          "---------------"
        ],
        "aim/web/configs.py||aim/web/configs.py": [
          "File: aim/web/configs.py -> aim/web/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: AIM_UI_TELEMETRY_KEY = 'AIM_UI_TELEMETRY_ENABLED'",
          "8: AIM_UI_BASE_PATH = '__AIM_UI_BASE_PATH__'",
          "9: AIM_PROXY_URL = '__AIM_PROXY_URL__'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: AIM_PROFILER_KEY = '__AIM_PROFILER_ENABLED__'",
          "",
          "---------------"
        ],
        "aim/web/middlewares/profiler/__init__.py||aim/web/middlewares/profiler/__init__.py": [
          "File: aim/web/middlewares/profiler/__init__.py -> aim/web/middlewares/profiler/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from aim.web.middlewares.profiler.profiler import PyInstrumentProfilerMiddleware",
          "",
          "---------------"
        ],
        "aim/web/middlewares/profiler/profiler.py||aim/web/middlewares/profiler/profiler.py": [
          "File: aim/web/middlewares/profiler/profiler.py -> aim/web/middlewares/profiler/profiler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: This code is taken from https://github.com/sunhailin-Leo/fastapi_profiler",
          "3: Credits to the author of the repo.",
          "4: \"\"\"",
          "6: import json",
          "7: import os.path",
          "8: import time",
          "9: from typing import Optional",
          "10: from logging import getLogger",
          "12: from starlette.routing import Router",
          "13: from starlette.requests import Request",
          "14: from starlette.types import ASGIApp, Message, Receive, Scope, Send",
          "16: logger = getLogger(\"profiler\")",
          "19: class PyInstrumentProfilerMiddleware:",
          "21:     def __init__(",
          "22:             self, app: ASGIApp,",
          "24:             server_app: Optional[Router] = None,",
          "25:             profiler_interval: float = 0.0001,",
          "26:             repo_path=None,",
          "28:     ):",
          "29:         try:",
          "30:             from pyinstrument import Profiler",
          "31:         except ImportError:",
          "32:             raise RuntimeError('Please install \"pyinstrument\" module to use enable api profiler.')",
          "34:         self.app = app",
          "35:         self._profiler = Profiler(interval=profiler_interval)",
          "37:         self._server_app = server_app",
          "38:         self._profiler_kwargs: dict = profiler_kwargs",
          "40:         self._profiler_timestamp = str(time.time())",
          "41:         self._profiler_log_path = os.path.join(repo_path, \"profiler\", self._profiler_timestamp)",
          "42:         os.makedirs(self._profiler_log_path, exist_ok=True)",
          "44:     async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:",
          "45:         if scope[\"type\"] != \"http\":",
          "46:             await self.app(scope, receive, send)",
          "47:             return",
          "49:         if self._profiler.is_running:",
          "50:             should_stop = False",
          "51:         else:",
          "52:             should_stop = True",
          "53:             self._profiler.start()",
          "55:         request = Request(scope, receive=receive)",
          "56:         method = request.method",
          "57:         path = request.url.path",
          "58:         params = dict(request.query_params)",
          "60:         try:",
          "61:             body = await request.json()",
          "62:         except json.decoder.JSONDecodeError:",
          "63:             body = None",
          "65:         file_name = (",
          "66:             '{timestamp}_{method}_{path}'.format(",
          "67:                 timestamp=time.time(),",
          "68:                 method=method.lower(),",
          "69:                 path='_'.join(path.strip('/').split('/')).lower()",
          "70:             )",
          "71:         )",
          "73:         # Default status code used when the application does not return a valid response",
          "74:         # or an unhandled exception occurs.",
          "75:         status_code = 500",
          "77:         async def wrapped_send(message: Message) -> None:",
          "78:             if message['type'] == 'http.response.start':",
          "79:                 nonlocal status_code",
          "80:                 status_code = message['status']",
          "81:             await send(message)",
          "83:         try:",
          "84:             await self.app(scope, receive, wrapped_send)",
          "85:         finally:",
          "86:             if scope[\"type\"] == \"http\" and should_stop:",
          "87:                 self._profiler.stop()",
          "89:                 request_data = json.dumps({",
          "90:                     \"path\": path,",
          "91:                     \"body\": body,",
          "92:                     \"method\": method,",
          "93:                     \"params\": params",
          "94:                 }, separators=(',', ':'))",
          "96:                 html_output = self._profiler.output_html(**self._profiler_kwargs)",
          "98:                 # inject request data",
          "99:                 body_tag_idx_end = html_output.find('<body>') + 6",
          "100:                 html_output = (",
          "101:                     f'{html_output[:body_tag_idx_end]}'",
          "102:                     f'<pre><code>{request_data}</code></pre>'",
          "103:                     f'{html_output[body_tag_idx_end:]}'",
          "104:                 )",
          "106:                 with open(os.path.join(self._profiler_log_path, f'{file_name}.html'), 'w') as fp:",
          "107:                     fp.write(html_output)",
          "",
          "---------------"
        ],
        "tests/api/test_structured_data_api.py||tests/api/test_structured_data_api.py": [
          "File: tests/api/test_structured_data_api.py -> tests/api/test_structured_data_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:             for idx, run in enumerate(self.repo.iter_runs()):",
          "11:                 exp_name = 'Experiment 1' if idx < 5 else 'Experiment 2'",
          "14:                 run.experiment = exp_name",
          "15:                 if idx < 3:",
          "16:                     run.add_tag('first runs')",
          "",
          "[Removed Lines]",
          "13:                 run.name = f'Run number {idx+1}'",
          "",
          "[Added Lines]",
          "13:                 run.name = f'Run number {idx + 1}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:         response = client.put(f'/api/experiments/{exp_uuid}/', json={'archived': True})",
          "260:         self.assertEqual(response.status_code, 400)",
          "",
          "[Removed Lines]",
          "261:         expected_text = '{{\"detail\":\"Cannot archive experiment \\'{}\\'. Experiment has associated runs.\"}}'.format(exp_uuid)",
          "262:         self.assertEqual(response.text, expected_text)",
          "",
          "[Added Lines]",
          "261:         self.assertEqual(response.json()['message'], f'Cannot archive experiment \\'{exp_uuid}\\'.')",
          "262:         self.assertEqual(response.json()['detail']['reason'], 'Experiment has associated runs.')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdc375038829f3a0a505cd59b3fec57d34d70533",
      "candidate_info": {
        "commit_hash": "bdc375038829f3a0a505cd59b3fec57d34d70533",
        "repo": "aimhubio/aim",
        "commit_url": "https://github.com/aimhubio/aim/commit/bdc375038829f3a0a505cd59b3fec57d34d70533",
        "files": [
          "CHANGELOG.md",
          "aim/cli/manager/manager.py",
          "aim/cli/up/commands.py",
          "aim/ext/notebook/notebook.py",
          "aim/web/api/__init__.py",
          "aim/web/api/views.py",
          "aim/web/ui/config-overrides.js",
          "aim/web/ui/package-lock.json",
          "aim/web/ui/package.json",
          "aim/web/ui/public/assets/icomoon/fonts/icomoon.eot",
          "aim/web/ui/public/assets/icomoon/fonts/icomoon.svg",
          "aim/web/ui/public/assets/icomoon/fonts/icomoon.ttf",
          "aim/web/ui/public/assets/icomoon/fonts/icomoon.woff",
          "aim/web/ui/public/assets/icomoon/icomoonIcons.css",
          "aim/web/ui/public/assets/icomoon/selection.json",
          "aim/web/ui/public/assets/inter/fonts/Inter-Bold.ttf",
          "aim/web/ui/public/assets/inter/fonts/Inter-Light.ttf",
          "aim/web/ui/public/assets/inter/fonts/Inter-Medium.ttf",
          "aim/web/ui/public/assets/inter/fonts/Inter-Regular.ttf",
          "aim/web/ui/public/assets/inter/fonts/Inter-SemiBold.ttf",
          "aim/web/ui/public/assets/inter/inter.css",
          "aim/web/ui/public/index.html",
          "aim/web/ui/src/App.scss",
          "aim/web/ui/src/App.tsx",
          "aim/web/ui/src/fonts/icomoon/fonts/icomoon.eot",
          "aim/web/ui/src/fonts/icomoon/fonts/icomoon.svg",
          "aim/web/ui/src/fonts/icomoon/fonts/icomoon.ttf",
          "aim/web/ui/src/fonts/icomoon/fonts/icomoon.woff",
          "aim/web/ui/src/fonts/icomoon/icomoonIcons.scss",
          "aim/web/ui/src/fonts/icomoon/selection.json",
          "aim/web/ui/src/fonts/inter/Inter-Bold.ttf",
          "aim/web/ui/src/fonts/inter/Inter-Light.ttf",
          "aim/web/ui/src/fonts/inter/Inter-Medium.ttf",
          "aim/web/ui/src/fonts/inter/Inter-Regular.ttf",
          "aim/web/ui/src/fonts/inter/Inter-SemiBold.ttf",
          "aim/web/ui/src/styles/abstracts/_variables.scss",
          "aim/web/ui/src/styles/base/__fonts.scss",
          "aim/web/ui/src/utils/app/updateUrlParam.ts",
          "aim/web/ui/tasks/index-html-template-generator.js"
        ],
        "message": "Add custom url prefix support (#1141)\n\n* Add ability to support custom prefix for backend endpoints (both api and static files)\n\n* Add experimental usage of dynamic-public-path\n\n* Add base-path to aim server, when running on notebook.\n\n* Change public path to relative and replace to chunk loading of modules. Move fonts to public folder.\n\n* Fix relative path issue, add new post-build step for generating index.template.html, and fix stateful URL logic compatibility with base path.\n\n* Add `base_path` to `aim up` command successful outputs (`Open {scheme}://{host}:{port}{base_path}`) and change notebook successful message listener accordingly\n\n\nCo-authored-by: mihran113 <vanyanmihran@gmail.com>\nCo-authored-by: Ruben Karapetyan <karapetyanrouben@gmail.com>\nCo-authored-by: Hamik Hambardzumyan <hamikhambardzumyan25@gmail.com>",
        "before_after_code_files": [
          "aim/cli/manager/manager.py||aim/cli/manager/manager.py",
          "aim/cli/up/commands.py||aim/cli/up/commands.py",
          "aim/ext/notebook/notebook.py||aim/ext/notebook/notebook.py",
          "aim/web/api/__init__.py||aim/web/api/__init__.py",
          "aim/web/api/views.py||aim/web/api/views.py",
          "aim/web/ui/config-overrides.js||aim/web/ui/config-overrides.js",
          "aim/web/ui/public/assets/inter/inter.css||aim/web/ui/public/assets/inter/inter.css",
          "aim/web/ui/public/index.html||aim/web/ui/public/index.html",
          "aim/web/ui/src/App.scss||aim/web/ui/src/App.scss",
          "aim/web/ui/src/App.tsx||aim/web/ui/src/App.tsx",
          "aim/web/ui/src/styles/abstracts/_variables.scss||aim/web/ui/src/styles/abstracts/_variables.scss",
          "aim/web/ui/src/styles/base/__fonts.scss||aim/web/ui/src/styles/base/__fonts.scss",
          "aim/web/ui/src/utils/app/updateUrlParam.ts||aim/web/ui/src/utils/app/updateUrlParam.ts",
          "aim/web/ui/tasks/index-html-template-generator.js||aim/web/ui/tasks/index-html-template-generator.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ],
          "candidate": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ]
        }
      },
      "candidate_diff": {
        "aim/cli/manager/manager.py||aim/cli/manager/manager.py": [
          "File: aim/cli/manager/manager.py -> aim/cli/manager/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     for p in args.keys():",
          "32:         args_list.append(p + '=' + args[p])",
          "36:     child_process = subprocess.Popen(",
          "37:         ['aim', UP_NAME] + args_list + ['--force-init'],",
          "",
          "[Removed Lines]",
          "34:     success_msg = 'Open http://{}:{}'.format(args['--host'], args['--port'])",
          "",
          "[Added Lines]",
          "34:     success_msg = 'Open http://{}:{}{}'.format(args['--host'], args['--port'], args['--base-path'])",
          "",
          "---------------"
        ],
        "aim/cli/up/commands.py||aim/cli/up/commands.py": [
          "File: aim/cli/up/commands.py -> aim/cli/up/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         os.environ[AIM_ENV_MODE_KEY] = 'prod'",
          "40:     if base_path:",
          "41:         os.environ[AIM_UI_BASE_PATH] = base_path",
          "43:     repo_path = clean_repo_path(repo) or Repo.default_repo_path()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:         # process `base_path` as ui requires leading slash",
          "42:         if base_path.endswith('/'):",
          "43:             base_path = base_path[:-1]",
          "44:         if base_path and not base_path.startswith('/'):",
          "45:             base_path = f'/{base_path}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     scheme = 'https' if ssl_keyfile or ssl_certfile else 'http'",
          "110:     click.echo('Press Ctrl+C to exit')",
          "112:     try:",
          "",
          "[Removed Lines]",
          "109:     click.echo('Open {}://{}:{}'.format(scheme, host, port), err=True)",
          "",
          "[Added Lines]",
          "114:     click.echo('Open {}://{}:{}{}'.format(scheme, host, port, base_path), err=True)",
          "",
          "---------------"
        ],
        "aim/ext/notebook/notebook.py||aim/ext/notebook/notebook.py": [
          "File: aim/ext/notebook/notebook.py -> aim/ext/notebook/notebook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     options = {",
          "71:         '--host': '127.0.0.1',",
          "73:     }",
          "74:     for arg in args[1:]:",
          "75:         key, value = arg.split('=', 1)",
          "",
          "[Removed Lines]",
          "72:         '--port': '43800'",
          "",
          "[Added Lines]",
          "72:         '--port': '43800',",
          "73:         '--base-path': '/notebook'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     shell = \"\"\"",
          "89:         (async () => {{",
          "92:             const iframe = document.createElement('iframe');",
          "93:             iframe.src = url;",
          "94:             iframe.setAttribute('width', '100%');",
          "",
          "[Removed Lines]",
          "90:             const url = new URL(await google.colab.kernel.proxyPort({port}, {{'cache': true}}));",
          "91:             url.searchParams.set('aim', 'true');",
          "",
          "[Added Lines]",
          "91:             let url = new URL('/notebook/', await google.colab.kernel.proxyPort({port}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     \"\"\"",
          "112:     import IPython.display",
          "113:     shell = \"\"\"",
          "115:           </iframe>",
          "118:     # @TODO write passing proxy logic",
          "",
          "[Removed Lines]",
          "114:           <iframe id=\"aim\" width=\"100%\" height=\"800\" frameborder=\"0\" src={}:{}>",
          "116:         \"\"\".format(host, port)",
          "",
          "[Added Lines]",
          "114:           <iframe id=\"aim\" width=\"100%\" height=\"800\" frameborder=\"0\" src={}:{}{}>",
          "116:         \"\"\".format(host, port, '/notebook/')",
          "",
          "---------------"
        ],
        "aim/web/api/__init__.py||aim/web/api/__init__.py": [
          "File: aim/web/api/__init__.py -> aim/web/api/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from fastapi import FastAPI",
          "2: from fastapi.middleware.cors import CORSMiddleware",
          "3: from fastapi.middleware.gzip import GZipMiddleware",
          "6: def create_app():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     from aim.web.api.dashboards.views import dashboards_router",
          "24:     from aim.web.api.projects.views import projects_router",
          "25:     from aim.web.api.views import statics_router",
          "27:     api_app = FastAPI()",
          "28:     api_app.add_middleware(GZipMiddleware)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     from aim.web.configs import AIM_UI_BASE_PATH",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:     api_app.include_router(projects_router, prefix='/projects')",
          "34:     api_app.include_router(runs_router, prefix='/runs')",
          "35:     api_app.include_router(tags_router, prefix='/tags')",
          "38:     static_files_app = FastAPI()",
          "40:     static_files_app.include_router(statics_router)",
          "43:     return app",
          "",
          "[Removed Lines]",
          "36:     app.mount('/api', api_app)",
          "41:     app.mount('/', static_files_app)",
          "",
          "[Added Lines]",
          "39:     base_path = os.environ.get(AIM_UI_BASE_PATH, '')",
          "41:     app.mount(f'{base_path}/api', api_app)",
          "45:     app.mount(f'{base_path}/', static_files_app)",
          "",
          "---------------"
        ],
        "aim/web/api/views.py||aim/web/api/views.py": [
          "File: aim/web/api/views.py -> aim/web/api/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     static_file_name = '/'.join((static_files_root, path))",
          "19:     # check if path is leading inside ui/build directory",
          "21:         raise HTTPException(404)",
          "23:     compressed_file_name = '{}.gz'.format(static_file_name)",
          "",
          "[Removed Lines]",
          "20:     if not Path(static_files_root) in Path(static_file_name).resolve().parents:",
          "",
          "[Added Lines]",
          "20:     if not Path(static_files_root).resolve() in Path(static_file_name).resolve().parents:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     template_files_dir = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
          "35:     templates = Jinja2Templates(directory=template_files_dir)",
          "36:     base_path = os.environ.get(AIM_UI_BASE_PATH, '')",
          "",
          "[Removed Lines]",
          "37:     # process `base_path` as ui requires leading slash",
          "38:     if base_path.endswith('/'):",
          "39:         base_path = base_path[:-1]",
          "40:     if base_path and not base_path.startswith('/'):",
          "41:         base_path = f'/{base_path}'",
          "43:     return templates.TemplateResponse('index.html', {'request': request, 'base_path': base_path})",
          "",
          "[Added Lines]",
          "38:     return templates.TemplateResponse('index-template.html', {'request': request, 'base_path': base_path})",
          "",
          "---------------"
        ],
        "aim/web/ui/config-overrides.js||aim/web/ui/config-overrides.js": [
          "File: aim/web/ui/config-overrides.js -> aim/web/ui/config-overrides.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const WebpackDynamicPublicPathPlugin = require('webpack-dynamic-public-path');",
          "3: module.exports = {",
          "4:   webpack: function (config, env) {",
          "5:     config.optimization.splitChunks = {",
          "6:       cacheGroups: {",
          "7:         default: false,",
          "8:       },",
          "9:     };",
          "10:     config.optimization.runtimeChunk = true;",
          "11:     config.plugins.push(",
          "12:       new WebpackDynamicPublicPathPlugin({",
          "13:         externalPublicPath: 'window.externalPublicPath',",
          "14:       }),",
          "15:     );",
          "17:     return config;",
          "18:   },",
          "19: };",
          "",
          "---------------"
        ],
        "aim/web/ui/public/assets/inter/inter.css||aim/web/ui/public/assets/inter/inter.css": [
          "File: aim/web/ui/public/assets/inter/inter.css -> aim/web/ui/public/assets/inter/inter.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @font-face {",
          "2:   font-family: 'Inter';",
          "3:   src: url('./fonts/Inter-Light.ttf') format('truetype');",
          "4:   font-weight: 300;",
          "5: }",
          "6: @font-face {",
          "7:   font-family: 'Inter';",
          "8:   src: url('./fonts/Inter-Regular.ttf') format('truetype');",
          "9:   font-width: 400;",
          "10: }",
          "11: @font-face {",
          "12:   font-family: 'Inter';",
          "13:   src: url('./fonts/Inter-Medium.ttf') format('truetype');",
          "14:   font-weight: 500;",
          "15: }",
          "16: @font-face {",
          "17:   font-family: 'Inter';",
          "18:   src: url('./fonts/Inter-SemiBold.ttf') format('truetype');",
          "19:   font-weight: 600;",
          "20: }",
          "21: @font-face {",
          "22:   font-family: 'Inter';",
          "23:   src: url('./fonts/Inter-Bold.ttf') format('truetype');",
          "24:   font-weight: 700;",
          "25: }",
          "",
          "---------------"
        ],
        "aim/web/ui/public/index.html||aim/web/ui/public/index.html": [
          "File: aim/web/ui/public/index.html -> aim/web/ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html lang=\"en\">",
          "3:   <head>",
          "4:     <meta charset=\"utf-8\" />",
          "5:     <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />",
          "6:     <meta",
          "7:       name=\"viewport\"",
          "8:       content=\"minimum-scale=1, initial-scale=1, width=device-width\"",
          "9:     />",
          "10:     <meta name=\"theme-color\" content=\"#000000\" />",
          "12:     <!--",
          "13:       manifest.json provides metadata used when your web app is installed on a",
          "14:       user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/",
          "",
          "[Removed Lines]",
          "11:     <meta name=\"description\" content=\"Open-source, self-hosted AI experiment tracking tool\">",
          "",
          "[Added Lines]",
          "5:     <!-- Replaceable with base path -->",
          "12:     <meta",
          "13:       name=\"description\"",
          "14:       content=\"Open-source, self-hosted AI experiment tracking tool\"",
          "15:     />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:       work correctly both with client-side routing and a non-root public URL.",
          "24:       Learn how to configure a non-root public URL by running `npm run build`.",
          "25:     -->",
          "27:     <title>Aim</title>",
          "28:     <script>",
          "30:     </script>",
          "31:     <script>",
          "32:       window.API_BASE_PATH = '{{ base_path }}';",
          "33:     </script>",
          "34:   </head>",
          "35:   <body>",
          "",
          "[Removed Lines]",
          "26:     <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />",
          "29:       !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"once\",\"off\",\"on\",\"addSourceMiddleware\",\"addIntegrationMiddleware\",\"setAnonymousId\",\"addDestinationMiddleware\"];analytics.factory=function(e){return function(){var t=Array.prototype.slice.call(arguments);t.unshift(e);analytics.push(t);return analytics}};for(var e=0;e<analytics.methods.length;e++){var key=analytics.methods[e];analytics[key]=analytics.factory(key)}analytics.load=function(key,e){var t=document.createElement(\"script\");t.type=\"text/javascript\";t.async=!0;t.src=\"https://cdn.segment.com/analytics.js/v1/\" + key + \"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(t,n);analytics._loadOptions=e};analytics.SNIPPET_VERSION=\"4.15.3\";}}();",
          "",
          "[Added Lines]",
          "30:     <link",
          "31:       rel=\"stylesheet\"",
          "32:       href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"",
          "33:     />",
          "35:     <link",
          "36:       rel=\"stylesheet\"",
          "37:       href=\"%PUBLIC_URL%/assets/icomoon/icomoonIcons.css\"",
          "38:     />",
          "39:     <link rel=\"stylesheet\" href=\"%PUBLIC_URL%/assets/inter/inter.css\" />",
          "44:       !(function () {",
          "45:         var analytics = (window.analytics = window.analytics || []);",
          "46:         if (!analytics.initialize)",
          "47:           if (analytics.invoked)",
          "48:             window.console &&",
          "49:               console.error &&",
          "50:               console.error('Segment snippet included twice.');",
          "51:           else {",
          "52:             analytics.invoked = !0;",
          "53:             analytics.methods = [",
          "54:               'trackSubmit',",
          "55:               'trackClick',",
          "56:               'trackLink',",
          "57:               'trackForm',",
          "58:               'pageview',",
          "59:               'identify',",
          "60:               'reset',",
          "61:               'group',",
          "62:               'track',",
          "63:               'ready',",
          "64:               'alias',",
          "65:               'debug',",
          "66:               'page',",
          "67:               'once',",
          "68:               'off',",
          "69:               'on',",
          "70:               'addSourceMiddleware',",
          "71:               'addIntegrationMiddleware',",
          "72:               'setAnonymousId',",
          "73:               'addDestinationMiddleware',",
          "74:             ];",
          "75:             analytics.factory = function (e) {",
          "76:               return function () {",
          "77:                 var t = Array.prototype.slice.call(arguments);",
          "78:                 t.unshift(e);",
          "79:                 analytics.push(t);",
          "80:                 return analytics;",
          "81:               };",
          "82:             };",
          "83:             for (var e = 0; e < analytics.methods.length; e++) {",
          "84:               var key = analytics.methods[e];",
          "85:               analytics[key] = analytics.factory(key);",
          "86:             }",
          "87:             analytics.load = function (key, e) {",
          "88:               var t = document.createElement('script');",
          "89:               t.type = 'text/javascript';",
          "90:               t.async = !0;",
          "91:               t.src =",
          "92:                 'https://cdn.segment.com/analytics.js/v1/' +",
          "93:                 key +",
          "94:                 '/analytics.min.js';",
          "95:               var n = document.getElementsByTagName('script')[0];",
          "96:               n.parentNode.insertBefore(t, n);",
          "97:               analytics._loadOptions = e;",
          "98:             };",
          "99:             analytics.SNIPPET_VERSION = '4.15.3';",
          "100:           }",
          "101:       })();",
          "105:       window.externalPublicPath = '%PUBLIC_URL%/';",
          "",
          "---------------"
        ],
        "aim/web/ui/src/App.scss||aim/web/ui/src/App.scss": [
          "File: aim/web/ui/src/App.scss -> aim/web/ui/src/App.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: @import 'src/styles/base/_reset.scss';",
          "4: @import 'src/styles/components/_autocomplete.scss';",
          "5: @import 'src/styles/components/_inputs.scss';",
          "6: @import 'src/styles/_global.scss';",
          "",
          "[Removed Lines]",
          "1: @import 'fonts/icomoon/icomoonIcons.scss';",
          "3: @import 'src/styles/base/_fonts.scss';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/ui/src/App.tsx||aim/web/ui/src/App.tsx": [
          "File: aim/web/ui/src/App.tsx -> aim/web/ui/src/App.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import './App.scss';",
          "12: function App(): React.FunctionComponentElement<React.ReactNode> {",
          "13:   return (",
          "14:     <>",
          "16:         <ProjectWrapper />",
          "17:         <Theme>",
          "18:           <div className='pageContainer'>",
          "",
          "[Removed Lines]",
          "15:       <BrowserRouter>",
          "",
          "[Added Lines]",
          "12: let basePath = '/';",
          "14: if ((window as any).API_BASE_PATH !== '{{ base_path }}') {",
          "15:   basePath = (window as any).API_BASE_PATH;",
          "16: }",
          "21:       <BrowserRouter basename={basePath}>",
          "",
          "---------------"
        ],
        "aim/web/ui/src/styles/abstracts/_variables.scss||aim/web/ui/src/styles/abstracts/_variables.scss": [
          "File: aim/web/ui/src/styles/abstracts/_variables.scss -> aim/web/ui/src/styles/abstracts/_variables.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: $primary-light: #7a94cc;",
          "38: $primary-color-90: #2c81e9;",
          "39: $primary-color-80: #438feb;",
          "40: $primary-color-70: #5b9dee;",
          "",
          "[Removed Lines]",
          "37: $primary-color-110: #1266CC;",
          "",
          "[Added Lines]",
          "37: $primary-color-110: #1266cc;",
          "",
          "---------------"
        ],
        "aim/web/ui/src/styles/base/__fonts.scss||aim/web/ui/src/styles/base/__fonts.scss": [
          "File: aim/web/ui/src/styles/base/__fonts.scss -> aim/web/ui/src/styles/base/__fonts.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aim/web/ui/src/utils/app/updateUrlParam.ts||aim/web/ui/src/utils/app/updateUrlParam.ts": [
          "File: aim/web/ui/src/utils/app/updateUrlParam.ts -> aim/web/ui/src/utils/app/updateUrlParam.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     return;",
          "22:   }",
          "25:   if (!appId) {",
          "27:   }",
          "29:   window.history.pushState(null, '', url);",
          "",
          "[Removed Lines]",
          "24:   const appId: string = window.location.pathname.split('/')[2];",
          "26:     setItem(`${appName}Url`, url);",
          "",
          "[Added Lines]",
          "24:   const isExistBasePath = (window as any).API_BASE_PATH !== '{{ base_path }}';",
          "26:   const appId: string =",
          "27:     window.location.pathname.split('/')[isExistBasePath ? 3 : 2];",
          "29:     let fullURL = url;",
          "31:     if (isExistBasePath) {",
          "32:       fullURL = fullURL.replace((window as any).API_BASE_PATH, '');",
          "33:     }",
          "35:     setItem(`${appName}Url`, fullURL);",
          "",
          "---------------"
        ],
        "aim/web/ui/tasks/index-html-template-generator.js||aim/web/ui/tasks/index-html-template-generator.js": [
          "File: aim/web/ui/tasks/index-html-template-generator.js -> aim/web/ui/tasks/index-html-template-generator.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const fs = require('fs').promises;",
          "3: const buildDirectoryPath = `${__dirname}/../build/`;",
          "4: const staticFilesKey = '/static-files/';",
          "5: const basePathKey = `{{ base_path }}${staticFilesKey}`;",
          "7: (async () => {",
          "8:   const HTML = await fs.readFile(`${buildDirectoryPath}index.html`, 'utf8');",
          "9:   const replacedHTML = HTML.replaceAll(staticFilesKey, basePathKey);",
          "11:   await fs.writeFile(`${buildDirectoryPath}index-template.html`, replacedHTML);",
          "13:   console.log('index-template.html file is generated');",
          "14: })();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc2a033ff223b8ca1c1a2c46f943f96d261df4d3",
      "candidate_info": {
        "commit_hash": "bc2a033ff223b8ca1c1a2c46f943f96d261df4d3",
        "repo": "aimhubio/aim",
        "commit_url": "https://github.com/aimhubio/aim/commit/bc2a033ff223b8ca1c1a2c46f943f96d261df4d3",
        "files": [
          "aim/web/api/views.py",
          "aim/web/ui/VERSION",
          "aim/web/ui/aim_ui/VERSION",
          "aim/web/ui/aim_ui/__init__.py",
          "aim/web/ui/aim_ui/build",
          "aim/web/ui/setup.py",
          "setup.py"
        ],
        "message": "[fix] Resolve aim-ui packaging issue",
        "before_after_code_files": [
          "aim/web/api/views.py||aim/web/api/views.py",
          "aim/web/ui/setup.py||aim/web/ui/setup.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ],
          "candidate": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ]
        }
      },
      "candidate_diff": {
        "aim/web/api/views.py||aim/web/api/views.py": [
          "File: aim/web/api/views.py -> aim/web/api/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from fastapi.templating import Jinja2Templates",
          "9: from aim.web.configs import AIM_UI_BASE_PATH",
          "10: statics_router = APIRouter()",
          "13: @statics_router.get('/static-files/{path:path}/')",
          "14: async def serve_static_files(path):",
          "17:     static_file_name = '/'.join((static_files_root, path))",
          "19:     # check if path is leading inside ui/build directory",
          "",
          "[Removed Lines]",
          "15:     from aim import web",
          "16:     static_files_root = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
          "",
          "[Added Lines]",
          "16:     import aim_ui",
          "18:     static_files_root = os.path.join(os.path.dirname(aim_ui.__file__), 'build')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: # as it also serves as a fallback for wrong url routes",
          "31: @statics_router.get('/{path:path}/', response_class=HTMLResponse)",
          "32: async def serve_index_html(request: Request):",
          "35:     templates = Jinja2Templates(directory=template_files_dir)",
          "36:     base_path = os.environ.get(AIM_UI_BASE_PATH, '')",
          "",
          "[Removed Lines]",
          "33:     from aim import web",
          "34:     template_files_dir = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
          "",
          "[Added Lines]",
          "35:     import aim_ui",
          "37:     template_files_dir = os.path.join(os.path.dirname(aim_ui.__file__), 'build')",
          "",
          "---------------"
        ],
        "aim/web/ui/setup.py||aim/web/ui/setup.py": [
          "File: aim/web/ui/setup.py -> aim/web/ui/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: here = os.path.abspath(os.path.dirname(__file__))",
          "8: with open(version_file) as vf:",
          "9:     __version__ = vf.read().strip()",
          "",
          "[Removed Lines]",
          "7: version_file = os.path.join(here, 'VERSION')",
          "",
          "[Added Lines]",
          "7: version_file = os.path.join(here, 'aim_ui/VERSION')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     paths = []",
          "19:     for (path, _, filenames) in os.walk(directory):",
          "20:         for filename in filenames:",
          "22:     return paths",
          "30: setup(",
          "31:     name=NAME,",
          "32:     version=__version__,",
          "33:     description=DESCRIPTION,",
          "37: )",
          "",
          "[Removed Lines]",
          "21:             paths.append(os.path.join(path, filename))",
          "25: files = package_files('build')",
          "27: # This is a symlink so main version",
          "28: files.append('VERSION')",
          "34:     packages=[\"aim.web.ui\"],",
          "35:     package_dir={'aim.web.ui': '.'},",
          "36:     package_data={'aim.web.ui': files}",
          "",
          "[Added Lines]",
          "21:             paths.append(os.path.join('..', path, filename))",
          "25: # These are symlinks to main files",
          "26: files = package_files('aim_ui/build')",
          "27: files.append('../aim_ui/VERSION')",
          "33:     packages=['aim_ui'],",
          "34:     package_data={'aim_ui': files}",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: REQUIRES_PYTHON = '>=3.6.0'",
          "21: # Get packages",
          "25: # Get a list of all files in the html directory to include in our module",
          "",
          "[Removed Lines]",
          "22: packages = find_packages(exclude=('tests',))",
          "",
          "[Added Lines]",
          "22: packages = find_packages(exclude=('tests', 'aim.web.ui'))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ef43c47122f2e903a02774930222bad8bf33153",
      "candidate_info": {
        "commit_hash": "9ef43c47122f2e903a02774930222bad8bf33153",
        "repo": "aimhubio/aim",
        "commit_url": "https://github.com/aimhubio/aim/commit/9ef43c47122f2e903a02774930222bad8bf33153",
        "files": [
          "CHANGELOG.md",
          "aim/cli/up/commands.py",
          "aim/web/api/views.py",
          "aim/web/configs.py",
          "aim/web/ui/public/index.html",
          "aim/web/ui/src/config/config.ts",
          "aim/web/ui/src/services/api/api.ts",
          "aim/web/ui/src/services/live-update/Worker.ts",
          "aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js"
        ],
        "message": "Add ability to provide custom base path for API (#1099)\n\n* Add ability to provide custom base path for API\n\n* Add support for `--base-path` argument in `aim up` command which will enable re-rendering `index.html` template based on user input\n\n* Provide API base path to worker when live-update is enabled\n\nCo-authored-by: mihran113 <vanyanmihran@gmail.com>",
        "before_after_code_files": [
          "aim/cli/up/commands.py||aim/cli/up/commands.py",
          "aim/web/api/views.py||aim/web/api/views.py",
          "aim/web/configs.py||aim/web/configs.py",
          "aim/web/ui/public/index.html||aim/web/ui/public/index.html",
          "aim/web/ui/src/config/config.ts||aim/web/ui/src/config/config.ts",
          "aim/web/ui/src/services/api/api.ts||aim/web/ui/src/services/api/api.ts",
          "aim/web/ui/src/services/live-update/Worker.ts||aim/web/ui/src/services/live-update/Worker.ts",
          "aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js||aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ],
          "candidate": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ]
        }
      },
      "candidate_diff": {
        "aim/cli/up/commands.py||aim/cli/up/commands.py": [
          "File: aim/cli/up/commands.py -> aim/cli/up/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import click",
          "4: from aim.web.configs import AIM_UI_DEFAULT_PORT, AIM_UI_DEFAULT_HOST, AIM_TF_LOGS_PATH_KEY, AIM_ENV_MODE_KEY, \\",
          "6: from aim.sdk.repo import Repo, RepoStatus",
          "7: from aim.sdk.utils import clean_repo_path",
          "8: from aim.cli.up.utils import build_db_upgrade_command, build_uvicorn_command",
          "",
          "[Removed Lines]",
          "5:     AIM_UI_MOUNTED_REPO_PATH, AIM_UI_TELEMETRY_KEY",
          "",
          "[Added Lines]",
          "5:     AIM_UI_MOUNTED_REPO_PATH, AIM_UI_TELEMETRY_KEY, AIM_UI_BASE_PATH",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:                                                                 file_okay=True,",
          "30:                                                                 dir_okay=False,",
          "31:                                                                 readable=True))",
          "32: @click.option('--force-init', is_flag=True, default=False)",
          "34:     if dev:",
          "35:         os.environ[AIM_ENV_MODE_KEY] = 'dev'",
          "36:     else:",
          "37:         os.environ[AIM_ENV_MODE_KEY] = 'prod'",
          "39:     repo_path = clean_repo_path(repo) or Repo.default_repo_path()",
          "40:     repo_status = Repo.check_repo_status(repo_path)",
          "41:     if repo_status == RepoStatus.MISSING:",
          "",
          "[Removed Lines]",
          "33: def up(dev, host, port, workers, repo, tf_logs, ssl_keyfile, ssl_certfile, force_init):",
          "",
          "[Added Lines]",
          "32: @click.option('--base-path', required=False, default='', type=str)",
          "34: def up(dev, host, port, workers, repo, tf_logs, ssl_keyfile, ssl_certfile, base_path, force_init):",
          "40:     if base_path:",
          "41:         os.environ[AIM_UI_BASE_PATH] = base_path",
          "",
          "---------------"
        ],
        "aim/web/api/views.py||aim/web/api/views.py": [
          "File: aim/web/api/views.py -> aim/web/api/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from pathlib import Path",
          "4: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "8: statics_router = APIRouter()",
          "",
          "[Removed Lines]",
          "5: from fastapi.responses import FileResponse",
          "6: from fastapi import HTTPException",
          "",
          "[Added Lines]",
          "4: from fastapi import HTTPException, Request",
          "6: from fastapi.responses import FileResponse, HTMLResponse",
          "7: from fastapi.templating import Jinja2Templates",
          "9: from aim.web.configs import AIM_UI_BASE_PATH",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: # do not change the placement of this method",
          "28: # as it also serves as a fallback for wrong url routes",
          "31:     from aim import web",
          "",
          "[Removed Lines]",
          "29: @statics_router.get('/{path:path}/')",
          "30: async def serve_index_html():",
          "32:     static_file_name = os.path.join(os.path.dirname(web.__file__), 'ui', 'build', 'index.html')",
          "33:     compressed_file_name = '{}.gz'.format(static_file_name)",
          "34:     if os.path.exists(compressed_file_name):",
          "35:         return FileResponse(compressed_file_name, headers={'Content-Encoding': 'gzip'})",
          "36:     return FileResponse(static_file_name)",
          "",
          "[Added Lines]",
          "31: @statics_router.get('/{path:path}/', response_class=HTMLResponse)",
          "32: async def serve_index_html(request: Request):",
          "34:     template_files_dir = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
          "35:     templates = Jinja2Templates(directory=template_files_dir)",
          "36:     base_path = os.environ.get(AIM_UI_BASE_PATH, '')",
          "37:     # process `base_path` as ui requires leading slash",
          "38:     if base_path.endswith('/'):",
          "39:         base_path = base_path[:-1]",
          "40:     if base_path and not base_path.startswith('/'):",
          "41:         base_path = f'/{base_path}'",
          "43:     return templates.TemplateResponse('index.html', {'request': request, 'base_path': base_path})",
          "",
          "---------------"
        ],
        "aim/web/configs.py||aim/web/configs.py": [
          "File: aim/web/configs.py -> aim/web/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: AIM_ENV_MODE_KEY = '__AIM_ENV_MODE__'",
          "6: AIM_UI_MOUNTED_REPO_PATH = '__AIM_UI_MOUNT_REPO_PATH__'",
          "7: AIM_UI_TELEMETRY_KEY = 'AIM_UI_TELEMETRY_ENABLED'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: AIM_UI_BASE_PATH = '__AIM_UI_BASE_PATH__'",
          "",
          "---------------"
        ],
        "aim/web/ui/public/index.html||aim/web/ui/public/index.html": [
          "File: aim/web/ui/public/index.html -> aim/web/ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     <script>",
          "29:       !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"once\",\"off\",\"on\",\"addSourceMiddleware\",\"addIntegrationMiddleware\",\"setAnonymousId\",\"addDestinationMiddleware\"];analytics.factory=function(e){return function(){var t=Array.prototype.slice.call(arguments);t.unshift(e);analytics.push(t);return analytics}};for(var e=0;e<analytics.methods.length;e++){var key=analytics.methods[e];analytics[key]=analytics.factory(key)}analytics.load=function(key,e){var t=document.createElement(\"script\");t.type=\"text/javascript\";t.async=!0;t.src=\"https://cdn.segment.com/analytics.js/v1/\" + key + \"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(t,n);analytics._loadOptions=e};analytics.SNIPPET_VERSION=\"4.15.3\";}}();",
          "30:     </script>",
          "31:   </head>",
          "32:   <body>",
          "33:     <noscript>You need to enable JavaScript to run this app.</noscript>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     <script>",
          "32:       window.API_BASE_PATH = '{{ base_path }}';",
          "33:     </script>",
          "",
          "---------------"
        ],
        "aim/web/ui/src/config/config.ts||aim/web/ui/src/config/config.ts": [
          "File: aim/web/ui/src/config/config.ts -> aim/web/ui/src/config/config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: try {",
          "4:   globalScope = window;",
          "",
          "[Removed Lines]",
          "1: let globalScope;",
          "",
          "[Added Lines]",
          "1: interface GlobalScope extends Window {",
          "2:   API_BASE_PATH?: string;",
          "3: }",
          "5: let globalScope: GlobalScope;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: export const isDEVModeOn: boolean = process.env.NODE_ENV === 'development';",
          "",
          "[Removed Lines]",
          "12: export const API_HOST: string = isDEVModeOn",
          "13:   ? 'http://127.0.0.1:43800/api'",
          "14:   : `${globalScope.location.protocol}//${globalScope.location.hostname}:${globalScope.location.port}/api`;",
          "",
          "[Added Lines]",
          "16: function getAPIBasePath() {",
          "17:   if (globalScope.API_BASE_PATH === '{{ base_path }}') {",
          "18:     return '';",
          "19:   }",
          "20:   return globalScope.API_BASE_PATH;",
          "21: }",
          "23: let API_HOST: string = isDEVModeOn",
          "24:   ? `http://127.0.0.1:43800${getAPIBasePath()}/api`",
          "25:   : `${getAPIBasePath()}/api`;",
          "27: export function getAPIHost() {",
          "28:   return API_HOST;",
          "29: }",
          "31: export function setAPIBasePath(basePath: string) {",
          "32:   globalScope.API_BASE_PATH = basePath;",
          "33:   API_HOST = isDEVModeOn",
          "34:     ? `http://127.0.0.1:43800${getAPIBasePath()}/api`",
          "35:     : `${getAPIBasePath()}/api`;",
          "36: }",
          "",
          "---------------"
        ],
        "aim/web/ui/src/services/api/api.ts||aim/web/ui/src/services/api/api.ts": [
          "File: aim/web/ui/src/services/api/api.ts -> aim/web/ui/src/services/api/api.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: function createAPIRequestWrapper<ResponseDataType>(",
          "4:   url: string,",
          "",
          "[Removed Lines]",
          "1: import { API_HOST } from 'config/config';",
          "",
          "[Added Lines]",
          "1: import { getAPIHost } from 'config/config';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:   return {",
          "12:     call: (exceptionHandler?: (error: ResponseDataType) => any) =>",
          "13:       new Promise((resolve: (data: ResponseDataType) => void, reject) => {",
          "15:           .then(async (response) => {",
          "16:             try {",
          "17:               if (response.status >= 400) {",
          "",
          "[Removed Lines]",
          "14:         fetch(`${API_HOST}/${url}`, { ...options, signal })",
          "",
          "[Added Lines]",
          "14:         fetch(`${getAPIHost()}/${url}`, { ...options, signal })",
          "",
          "---------------"
        ],
        "aim/web/ui/src/services/live-update/Worker.ts||aim/web/ui/src/services/live-update/Worker.ts": [
          "File: aim/web/ui/src/services/live-update/Worker.ts -> aim/web/ui/src/services/live-update/Worker.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import * as Comlink from 'comlink';",
          "9: import {",
          "10:   adjustable_reader,",
          "11:   decode_buffer_pairs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import { setAPIBasePath } from 'config/config';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:   invariantError(error, logging);",
          "229: }",
          "232:   subscribeToApiCallResult,",
          "233:   setConfig,",
          "234:   start,",
          "235:   close,",
          "236:   stop,",
          "237: };",
          "",
          "[Removed Lines]",
          "231: const Worker = {",
          "239: export type IWorker = typeof Worker;",
          "242: Comlink.expose(Worker);",
          "",
          "[Added Lines]",
          "233: function replaceBasePath(basePath: string) {",
          "234:   setAPIBasePath(basePath);",
          "235: }",
          "237: const WebWorker = {",
          "243:   replaceBasePath,",
          "246: export type IWorker = typeof WebWorker;",
          "249: Comlink.expose(WebWorker);",
          "",
          "---------------"
        ],
        "aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js||aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js": [
          "File: aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js -> aim/web/ui/src/services/live-update/examples/LiveUpdateBridge.example.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     this.responseListener = responseListener;",
          "34:     this.instance = new LUWorker();",
          "35:     this.instance.setConfig(",
          "36:       appName,",
          "37:       embeddedAppNames[this.appName].endpoint,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     this.instance.replaceBasePath(window.API_BASE_PATH);",
          "",
          "---------------"
        ]
      }
    }
  ]
}