{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87e65b5f1cec08849939033c0958bbf39733c727",
      "candidate_info": {
        "commit_hash": "87e65b5f1cec08849939033c0958bbf39733c727",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/87e65b5f1cec08849939033c0958bbf39733c727",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java"
        ],
        "message": "AMBARI-25268. implement configurable password policy for Ambari users (dlysnichenko) (#2954)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "504:   public static final ConfigurationProperty<String> AGENT_USE_SSL = new ConfigurationProperty<>(",
          "505:       \"agent.ssl\", \"true\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   @Markdown(",
          "511:       description = \"Determines Ambari user password policy. Passwords should match the regex\")",
          "512:   public static final ConfigurationProperty<String> PASSWORD_POLICY_REGEXP = new ConfigurationProperty<>(",
          "513:       \"security.password.policy.regexp\", \".*\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3999:     return getProperty(MYSQL_JAR_NAME);",
          "4000:   }",
          "4002:   public JPATableGenerationStrategy getJPATableGenerationStrategy() {",
          "4003:     return JPATableGenerationStrategy.fromString(",
          "4004:         System.getProperty(SERVER_JDBC_GENERATE_TABLES.getKey()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4013:   public String getPasswordPolicyRegexp() {",
          "4014:     return getProperty(PASSWORD_POLICY_REGEXP);",
          "4015:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:       String username = request.getUsername();",
          "380:       String displayName = StringUtils.defaultIfEmpty(request.getDisplayName(), username);",
          "381:       String localUserName = StringUtils.defaultIfEmpty(request.getLocalUserName(), username);",
          "383:       UserEntity userEntity = users.createUser(username, localUserName, displayName, request.isActive());",
          "384:       if (userEntity != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:       String password = request.getPassword();",
          "385:       if (!StringUtils.isEmpty(password)) {",
          "386:         users.validatePassword(password);",
          "387:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:           addOrUpdateLocalAuthenticationSource(true, userEntity, request.getPassword(), null);",
          "",
          "[Removed Lines]",
          "391:         if (!StringUtils.isEmpty(request.getPassword())) {",
          "",
          "[Added Lines]",
          "397:         if (!StringUtils.isEmpty(password)) {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.Map;",
          "29: import java.util.Optional;",
          "30: import java.util.Set;",
          "32: import javax.persistence.EntityManager;",
          "33: import javax.persistence.OptimisticLockException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1746:   }",
          "1758:     if (StringUtils.isEmpty(password)) {",
          "1760:     }",
          "1763:   }",
          "",
          "[Removed Lines]",
          "1756:   public boolean validatePassword(String password) throws AmbariException {",
          "1759:       throw new AmbariException(\"The new password does not meet the Ambari password requirements\");",
          "1762:     return true;",
          "",
          "[Added Lines]",
          "1757:   public void validatePassword(String password) {",
          "1759:       throw new IllegalArgumentException(\"The password does not meet the password policy requirements\");",
          "1760:     }",
          "1761:     String regexp = configuration.getPasswordPolicyRegexp();",
          "1762:     if (!StringUtils.isEmpty(regexp) && (!Pattern.matches(regexp,password))) {",
          "1763:       final String msg = \"The password does not meet the Ambari user password policy regexp:\" + regexp;",
          "1764:       throw new IllegalArgumentException(msg);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.ambari.server.AmbariException;",
          "37: import org.apache.ambari.server.H2DatabaseCleaner;",
          "38: import org.apache.ambari.server.ldap.domain.AmbariLdapConfiguration;",
          "39: import org.apache.ambari.server.ldap.service.AmbariLdapConfigurationProvider;",
          "40: import org.apache.ambari.server.orm.GuiceJpaInitializer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.ambari.server.configuration.Configuration;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   protected PrincipalDAO principalDAO;",
          "95:   @Inject",
          "96:   protected PasswordEncoder passwordEncoder;",
          "98:   @Before",
          "99:   public void setup() throws AmbariException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   @Inject",
          "99:   protected Configuration configuration;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:     try {",
          "214:       users.modifyAuthentication(foundLocalAuthenticationEntity, \"user\", null, true);",
          "215:       fail(\"Null password should not be allowed\");",
          "218:     }",
          "220:     try {",
          "221:       users.modifyAuthentication(foundLocalAuthenticationEntity, \"user\", \"\", false);",
          "222:       fail(\"Empty password should not be allowed\");",
          "225:     }",
          "226:   }",
          "228:   @Test",
          "",
          "[Removed Lines]",
          "216:     } catch (AmbariException e) {",
          "217:       assertEquals(\"The new password does not meet the Ambari password requirements\", e.getLocalizedMessage());",
          "223:     } catch (AmbariException e) {",
          "224:       assertEquals(\"The new password does not meet the Ambari password requirements\", e.getLocalizedMessage());",
          "",
          "[Added Lines]",
          "219:     } catch (IllegalArgumentException e) {",
          "220:       assertEquals(\"The password does not meet the password policy requirements\", e.getLocalizedMessage());",
          "226:     } catch (IllegalArgumentException e) {",
          "227:       assertEquals(\"The password does not meet the password policy requirements\", e.getLocalizedMessage());",
          "228:     }",
          "231:     configuration.setProperty(Configuration.PASSWORD_POLICY_REGEXP, \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$\");",
          "232:     try {",
          "233:       users.modifyAuthentication(foundLocalAuthenticationEntity, \"user\", \"abc123\", false);",
          "234:       fail(\"Should not pass validation\");",
          "235:     } catch (IllegalArgumentException e) {",
          "236:       assertEquals(\"The password does not meet the Ambari user password policy regexp:^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$\", e.getLocalizedMessage());",
          "238:     users.modifyAuthentication(foundLocalAuthenticationEntity, \"user\", \"abcd1234\", false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe5344da60bd770d7caf25cfe32f4fe9fbdd0e68",
      "candidate_info": {
        "commit_hash": "fe5344da60bd770d7caf25cfe32f4fe9fbdd0e68",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/fe5344da60bd770d7caf25cfe32f4fe9fbdd0e68",
        "files": [
          "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py",
          "ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py"
        ],
        "message": "[AMBARI-25232] : Refresh NameNode client with Commission/Decommission\u2026 (#2976)\n\n* [AMBARI-25232] : Refresh NameNode client with Commission/Decommission of DataNode\n\n* updating tests",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py||ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py",
          "ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py||ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py||ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py": [
          "File: ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py -> ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     env.set_params(params)",
          "169:     hdfs_binary = self.get_hdfs_binary()",
          "170:     namenode(action=\"decommission\", hdfs_binary=hdfs_binary)",
          "172: @OsFamilyImpl(os_family=OsFamilyImpl.DEFAULT)",
          "173: class NameNodeDefault(NameNode):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:     self.configure(env)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py||ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py": [
          "File: ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py -> ambari-server/src/test/python/stacks/2.0.6/HDFS/test_namenode.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:                               user='hdfs',",
          "1057:                               conf_dir='/etc/hadoop/conf',",
          "1058:                               bin_dir='/usr/bin')",
          "1059:     self.assertNoMoreResources()",
          "1061:   def test_decommission_update_files_only(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1059:     self.assert_configure_default()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1071:                               content = Template('exclude_hosts_list.j2'),",
          "1072:                               group = 'hadoop',",
          "1073:                               )",
          "1074:     self.assertNoMoreResources()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075:     self.assert_configure_default()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1092:                               user='hdfs',",
          "1093:                               conf_dir='/etc/hadoop/conf',",
          "1094:                               bin_dir='/usr/bin')",
          "1095:     self.assertNoMoreResources()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1097:     self.assert_configure_default()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1116:                               conf_dir='/etc/hadoop/conf',",
          "1117:                               user='hdfs',",
          "1118:                               )",
          "1119:     self.assertNoMoreResources()",
          "1121:   def assert_configure_default(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     self.assert_configure_secured(False)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d18dace6fe17a9a098eb2f763351601af9f07b5",
      "candidate_info": {
        "commit_hash": "0d18dace6fe17a9a098eb2f763351601af9f07b5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0d18dace6fe17a9a098eb2f763351601af9f07b5",
        "files": [
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/configuration/hbase-env.xml",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py"
        ],
        "message": "AMBARI-22847. Let HBase use ZK principal name set by users when enabling Kerberos (until now it's been hardcoded to 'zookeeper') (#2223)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: user_group = config['configurations']['cluster-env'][\"user_group\"]",
          "216: if security_enabled:",
          "217:   _hostname_lowercase = config['agentLevelParams']['hostname'].lower()",
          "218:   master_jaas_princ = config['configurations']['hbase-site']['hbase.master.kerberos.principal'].replace('_HOST',_hostname_lowercase)",
          "219:   master_keytab_path = config['configurations']['hbase-site']['hbase.master.keytab.file']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   zk_principal_name = default(\"/configurations/zookeeper-env/zookeeper_principal_name\", \"zookeeper/_HOST@EXAMPLE.COM\")",
          "218:   zk_principal_user = zk_principal_name.split('/')[0]",
          "219:   zk_security_opts = format('-Dzookeeper.sasl.client=true -Dzookeeper.sasl.client.username={zk_principal_user} -Dzookeeper.sasl.clientconfig=Client')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0259085965cacc7f89ec4affca0eacb7ab064032",
      "candidate_info": {
        "commit_hash": "0259085965cacc7f89ec4affca0eacb7ab064032",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0259085965cacc7f89ec4affca0eacb7ab064032",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java",
          "ambari-server/src/test/python/TestAmbariServer.py",
          "ambari-server/src/test/python/TestMpacks.py",
          "ambari-server/src/test/python/TestOSCheck.py",
          "ambari-server/src/test/python/TestSetupTrustedProxy.py"
        ],
        "message": "AMBARI-25495. Extend the set of headers from server's response. (#3192) (dvitiiuk via dgrinenko)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java||ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java||ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java||ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java",
          "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py",
          "ambari-server/src/test/python/TestMpacks.py||ambari-server/src/test/python/TestMpacks.py",
          "ambari-server/src/test/python/TestOSCheck.py||ambari-server/src/test/python/TestOSCheck.py",
          "ambari-server/src/test/python/TestSetupTrustedProxy.py||ambari-server/src/test/python/TestSetupTrustedProxy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2222:   public static final ConfigurationProperty<String> HTTP_X_XSS_PROTECTION_HEADER_VALUE = new ConfigurationProperty<>(",
          "2223:       \"http.x-xss-protection\", \"1; mode=block\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2228:   @Markdown(description = \"The value that will be used to set the `Content-Security-Policy` HTTP response header.\")",
          "2229:   public static final ConfigurationProperty<String> HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE = new ConfigurationProperty<>(",
          "2230:       \"http.content-security-policy\", \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2276:   public static final ConfigurationProperty<String> VIEWS_HTTP_X_XSS_PROTECTION_HEADER_VALUE = new ConfigurationProperty<>(",
          "2277:       \"views.http.x-xss-protection\", \"1; mode=block\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2290:   @Markdown(description = \"The value that will be used to set the `Content-Security-Policy` HTTP response header for Ambari View requests.\")",
          "2291:   public static final ConfigurationProperty<String> VIEWS_HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE = new ConfigurationProperty<>(",
          "2292:       \"views.http.content-security-policy\", \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3673:     return getProperty(HTTP_X_XSS_PROTECTION_HEADER_VALUE);",
          "3674:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3698:   public String getContentSecurityPolicyHTTPResponseHeader() {",
          "3699:     return getProperty(HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE);",
          "3700:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3780:     return getProperty(VIEWS_HTTP_X_XSS_PROTECTION_HEADER_VALUE);",
          "3781:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3816:   public String getViewsContentSecurityPolicyHTTPResponseHeader() {",
          "3817:     return getProperty(VIEWS_HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE);",
          "3818:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java||ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   protected final static String STRICT_TRANSPORT_HEADER = \"Strict-Transport-Security\";",
          "54:   protected final static String X_FRAME_OPTIONS_HEADER = \"X-Frame-Options\";",
          "55:   protected final static String X_XSS_PROTECTION_HEADER = \"X-XSS-Protection\";",
          "56:   protected final static String X_CONTENT_TYPE_HEADER = \"X-Content-Type-Options\";",
          "57:   protected final static String CACHE_CONTROL_HEADER = \"Cache-Control\";",
          "58:   protected final static String PRAGMA_HEADER = \"Pragma\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   protected final static String CONTENT_SECURITY_POLICY_HEADER = \"Content-Security-Policy\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   private String xXSSProtectionHeader = Configuration.HTTP_X_XSS_PROTECTION_HEADER_VALUE.getDefaultValue();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   private String contentSecurityPolicyHeader = Configuration.HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE.getDefaultValue();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:     this.xXSSProtectionHeader = xXSSProtectionHeader;",
          "163:   }",
          "165:   protected void setXContentTypeHeader(String xContentTypeHeader) {",
          "166:     this.xContentTypeHeader = xContentTypeHeader;",
          "167:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   protected void setContentSecurityPolicyHeader(String contentSecurityPolicyHeader) {",
          "171:     this.contentSecurityPolicyHeader = contentSecurityPolicyHeader;",
          "172:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:         httpServletResponse.setHeader(X_XSS_PROTECTION_HEADER, xXSSProtectionHeader);",
          "198:       }",
          "201:       if (!StringUtils.isEmpty(xContentTypeHeader)) {",
          "202:         httpServletResponse.setHeader(X_CONTENT_TYPE_HEADER, xContentTypeHeader);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:       if (!StringUtils.isEmpty(contentSecurityPolicyHeader)) {",
          "211:         httpServletResponse.setHeader(CONTENT_SECURITY_POLICY_HEADER, contentSecurityPolicyHeader);",
          "212:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java||ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     setStrictTransportSecurity(configuration.getStrictTransportSecurityHTTPResponseHeader());",
          "48:     setxFrameOptionsHeader(configuration.getXFrameOptionsHTTPResponseHeader());",
          "49:     setxXSSProtectionHeader(configuration.getXXSSProtectionHTTPResponseHeader());",
          "50:     setXContentTypeHeader(configuration.getXContentTypeHTTPResponseHeader());",
          "51:     setCacheControlHeader(configuration.getCacheControlHTTPResponseHeader());",
          "52:     setPragmaHeader(configuration.getPragmaHTTPResponseHeader());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     setContentSecurityPolicyHeader(configuration.getContentSecurityPolicyHTTPResponseHeader());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java||ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/security/AmbariViewsSecurityHeaderFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     setStrictTransportSecurity(configuration.getViewsStrictTransportSecurityHTTPResponseHeader());",
          "44:     setxFrameOptionsHeader(configuration.getViewsXFrameOptionsHTTPResponseHeader());",
          "45:     setxXSSProtectionHeader(configuration.getViewsXXSSProtectionHTTPResponseHeader());",
          "46:     setXContentTypeHeader(configuration.getViewsXContentTypeHTTPResponseHeader());",
          "47:     setCacheControlHeader(configuration.getViewsCacheControlHTTPResponseHeader());",
          "48:     setPragmaHeader(configuration.getViewsPragmaHTTPResponseHeader());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     setContentSecurityPolicyHeader(configuration.getViewsContentSecurityPolicyHTTPResponseHeader());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: import org.apache.ambari.server.audit.AuditLogger;",
          "83: import org.apache.ambari.server.configuration.Configuration;",
          "84: import org.apache.ambari.server.events.publishers.AgentCommandsPublisher;",
          "85: import org.apache.ambari.server.orm.GuiceJpaInitializer;",
          "86: import org.apache.ambari.server.orm.InMemoryDefaultTestModule;",
          "87: import org.apache.ambari.server.orm.OrmTestHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: import org.apache.ambari.server.events.publishers.STOMPUpdatePublisher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:     injector.getInstance(GuiceJpaInitializer.class);",
          "181:     clusters = injector.getInstance(Clusters.class);",
          "182:     injector.injectMembers(this);",
          "184:   }",
          "186:   @After",
          "",
          "[Removed Lines]",
          "183:     EasyMock.replay(auditLogger);",
          "",
          "[Added Lines]",
          "184:     EasyMock.replay(auditLogger, injector.getInstance(STOMPUpdatePublisher.class));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/AmbariServerSecurityHeaderFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     map.put(AbstractSecurityHeaderFilter.STRICT_TRANSPORT_HEADER, Configuration.HTTP_STRICT_TRANSPORT_HEADER_VALUE.getKey());",
          "41:     map.put(AbstractSecurityHeaderFilter.X_FRAME_OPTIONS_HEADER, Configuration.HTTP_X_FRAME_OPTIONS_HEADER_VALUE.getKey());",
          "42:     map.put(AbstractSecurityHeaderFilter.X_XSS_PROTECTION_HEADER, Configuration.HTTP_X_XSS_PROTECTION_HEADER_VALUE.getKey());",
          "43:     map.put(AbstractSecurityHeaderFilter.X_CONTENT_TYPE_HEADER, Configuration.HTTP_X_CONTENT_TYPE_HEADER_VALUE.getKey());",
          "44:     map.put(AbstractSecurityHeaderFilter.CACHE_CONTROL_HEADER, Configuration.HTTP_CACHE_CONTROL_HEADER_VALUE.getKey());",
          "45:     map.put(AbstractSecurityHeaderFilter.PRAGMA_HEADER, Configuration.HTTP_PRAGMA_HEADER_VALUE.getKey());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     map.put(AbstractSecurityHeaderFilter.CONTENT_SECURITY_POLICY_HEADER, Configuration.HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE.getKey());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     map.put(AbstractSecurityHeaderFilter.STRICT_TRANSPORT_HEADER, Configuration.HTTP_STRICT_TRANSPORT_HEADER_VALUE.getDefaultValue());",
          "51:     map.put(AbstractSecurityHeaderFilter.X_FRAME_OPTIONS_HEADER, Configuration.HTTP_X_FRAME_OPTIONS_HEADER_VALUE.getDefaultValue());",
          "52:     map.put(AbstractSecurityHeaderFilter.X_XSS_PROTECTION_HEADER, Configuration.HTTP_X_XSS_PROTECTION_HEADER_VALUE.getDefaultValue());",
          "53:     map.put(AbstractSecurityHeaderFilter.X_CONTENT_TYPE_HEADER, Configuration.HTTP_X_CONTENT_TYPE_HEADER_VALUE.getDefaultValue());",
          "54:     map.put(AbstractSecurityHeaderFilter.CACHE_CONTROL_HEADER, Configuration.HTTP_CACHE_CONTROL_HEADER_VALUE.getDefaultValue());",
          "55:     map.put(AbstractSecurityHeaderFilter.PRAGMA_HEADER, Configuration.HTTP_PRAGMA_HEADER_VALUE.getDefaultValue());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     map.put(AbstractSecurityHeaderFilter.CONTENT_SECURITY_POLICY_HEADER, Configuration.HTTP_CONTENT_SECURITY_POLICY_HEADER_VALUE.getDefaultValue());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py": [
          "File: ambari-server/src/test/python/TestAmbariServer.py -> ambari-server/src/test/python/TestAmbariServer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:       with patch.object(os_utils, \"parse_log4j_file\", return_value={'ambari.log.dir': '/var/log/ambari-server'}):",
          "68:         with patch(\"platform.linux_distribution\", return_value = os_distro_value):",
          "69:           with patch(\"os.symlink\"):",
          "120: CURR_AMBARI_VERSION = \"2.0.0\"",
          "",
          "[Removed Lines]",
          "70:             with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "71:               _ambari_server_ = __import__('ambari-server')",
          "72:               with patch(\"__builtin__.open\"):",
          "73:                 from ambari_commons.firewall import Firewall",
          "74:                 from ambari_commons.os_check import OSCheck, OSConst",
          "75:                 from ambari_commons.os_family_impl import OsFamilyImpl, OsFamilyFuncImpl",
          "76:                 from ambari_commons.exceptions import FatalException, NonFatalException",
          "77:                 from ambari_commons.logging_utils import get_verbose, set_verbose, get_silent, set_silent, get_debug_mode, \\",
          "78:                   print_info_msg, print_warning_msg, print_error_msg",
          "79:                 from ambari_commons.os_utils import run_os_command, search_file, set_file_permissions, remove_file, copy_file, \\",
          "80:                   is_valid_filepath",
          "81:                 from ambari_server.dbConfiguration import DBMSConfigFactory, check_jdbc_drivers, DBMSConfig",
          "82:                 from ambari_server.dbConfiguration_linux import PGConfig, LinuxDBMSConfig, OracleConfig",
          "83:                 from ambari_server.properties import Properties",
          "84:                 from ambari_server.resourceFilesKeeper import ResourceFilesKeeper, KeeperException",
          "85:                 from ambari_server.serverConfiguration import configDefaults, check_database_name_property, OS_FAMILY_PROPERTY, \\",
          "86:                   find_properties_file, get_ambari_properties, get_JAVA_HOME, \\",
          "87:                   parse_properties_file, read_ambari_user, update_ambari_properties, update_properties_2, write_property, find_jdk, \\",
          "88:                   get_is_active_instance, \\",
          "89:                   AMBARI_CONF_VAR, AMBARI_SERVER_LIB, JDBC_DATABASE_PROPERTY, JDBC_RCA_PASSWORD_FILE_PROPERTY, \\",
          "90:                   PERSISTENCE_TYPE_PROPERTY, JDBC_URL_PROPERTY, get_conf_dir, JDBC_USER_NAME_PROPERTY, JDBC_PASSWORD_PROPERTY, \\",
          "91:                   JDBC_DATABASE_NAME_PROPERTY, OS_TYPE_PROPERTY, validate_jdk, JDBC_POSTGRES_SCHEMA_PROPERTY, \\",
          "92:                   RESOURCES_DIR_PROPERTY, JDBC_RCA_PASSWORD_ALIAS, JDBC_RCA_SCHEMA_PROPERTY, \\",
          "93:                   SSL_API, SSL_API_PORT, CLIENT_API_PORT_PROPERTY,\\",
          "94:                   JDBC_CONNECTION_POOL_TYPE, LDAP_MGR_PASSWORD_PROPERTY, LDAP_MGR_PASSWORD_ALIAS, JDBC_PASSWORD_FILENAME, NR_USER_PROPERTY, SECURITY_KEY_IS_PERSISTED, \\",
          "95:                   SSL_TRUSTSTORE_PASSWORD_PROPERTY, SECURITY_IS_ENCRYPTION_ENABLED, PID_DIR_PROPERTY, SSL_TRUSTSTORE_PASSWORD_ALIAS, \\",
          "96:                   SECURITY_MASTER_KEY_LOCATION, SECURITY_KEYS_DIR, store_password_file, \\",
          "97:                   get_pass_file_path, GET_FQDN_SERVICE_URL, SECURITY_KEY_ENV_VAR_NAME, \\",
          "98:                   JAVA_HOME_PROPERTY, JDK_NAME_PROPERTY, JCE_NAME_PROPERTY, STACK_LOCATION_KEY, SERVER_VERSION_FILE_PATH, \\",
          "99:                   COMMON_SERVICES_PATH_PROPERTY, WEBAPP_DIR_PROPERTY, SHARED_RESOURCES_DIR, BOOTSTRAP_SCRIPT, \\",
          "100:                   CUSTOM_ACTION_DEFINITIONS, BOOTSTRAP_SETUP_AGENT_SCRIPT, STACKADVISOR_SCRIPT, BOOTSTRAP_DIR_PROPERTY, MPACKS_STAGING_PATH_PROPERTY, STACK_JAVA_VERSION",
          "101:                 from ambari_server.serverUtils import is_server_runing, refresh_stack_hash",
          "102:                 from ambari_server.serverSetup import check_selinux, check_ambari_user, proceedJDBCProperties, SE_STATUS_DISABLED, SE_MODE_ENFORCING, configure_os_settings, \\",
          "103:                   download_and_install_jdk, prompt_db_properties, setup, \\",
          "104:                   AmbariUserChecks, JDKSetup, reset, setup_jce_policy, expand_jce_zip_file, check_ambari_java_version_is_valid",
          "105:                 from ambari_server.serverUpgrade import upgrade, run_schema_upgrade, move_user_custom_actions, find_and_copy_custom_services",
          "106:                 from ambari_server.setupHttps import is_valid_https_port, setup_https, import_cert_and_key_action, get_fqdn, \\",
          "107:                   generate_random_string, get_cert_info, COMMON_NAME_ATTR, is_valid_cert_exp, NOT_AFTER_ATTR, NOT_BEFORE_ATTR, \\",
          "108:                   SSL_DATE_FORMAT, import_cert_and_key, is_valid_cert_host, setup_truststore, \\",
          "109:                   SRVR_ONE_WAY_SSL_PORT_PROPERTY, SRVR_TWO_WAY_SSL_PORT_PROPERTY",
          "110:                 from ambari_server.setupSecurity import adjust_directory_permissions, get_alias_string, get_ldap_event_spec_names, sync_ldap, \\",
          "111:                   configure_ldap_password, setup_ldap, REGEX_HOSTNAME_PORT, REGEX_TRUE_FALSE, REGEX_ANYTHING, setup_master_key, \\",
          "112:                   setup_ambari_krb5_jaas, LDAP_GENERIC, should_query_ldap_type, LdapPropTemplate, LdapDefault, LdapDefaultMap",
          "113:                 from ambari_server.userInput import get_YN_input, get_choice_string_input, get_validated_string_input, \\",
          "114:                   read_password",
          "115:                 from ambari_server_main import get_ulimit_open_files, ULIMIT_OPEN_FILES_KEY, ULIMIT_OPEN_FILES_DEFAULT",
          "116:                 from ambari_server.serverClassPath import JDBC_DRIVER_PATH_PROPERTY, ServerClassPath",
          "117:                 from ambari_server.hostUpdate import update_host_names",
          "118:                 from ambari_server.checkDatabase import check_database",
          "",
          "[Added Lines]",
          "70:             with patch.object(os_utils, \"is_service_exist\", return_value = True):",
          "71:               with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "72:                 _ambari_server_ = __import__('ambari-server')",
          "73:                 with patch(\"__builtin__.open\"):",
          "74:                   from ambari_commons.firewall import Firewall",
          "75:                   from ambari_commons.os_check import OSCheck, OSConst",
          "76:                   from ambari_commons.os_family_impl import OsFamilyImpl, OsFamilyFuncImpl",
          "77:                   from ambari_commons.exceptions import FatalException, NonFatalException",
          "78:                   from ambari_commons.logging_utils import get_verbose, set_verbose, get_silent, set_silent, get_debug_mode, \\",
          "79:                     print_info_msg, print_warning_msg, print_error_msg",
          "80:                   from ambari_commons.os_utils import run_os_command, search_file, set_file_permissions, remove_file, copy_file, \\",
          "81:                     is_valid_filepath",
          "82:                   from ambari_server.dbConfiguration import DBMSConfigFactory, check_jdbc_drivers, DBMSConfig",
          "83:                   from ambari_server.dbConfiguration_linux import PGConfig, LinuxDBMSConfig, OracleConfig",
          "84:                   from ambari_server.properties import Properties",
          "85:                   from ambari_server.resourceFilesKeeper import ResourceFilesKeeper, KeeperException",
          "86:                   from ambari_server.serverConfiguration import configDefaults, check_database_name_property, OS_FAMILY_PROPERTY, \\",
          "87:                     find_properties_file, get_ambari_properties, get_JAVA_HOME, \\",
          "88:                     parse_properties_file, read_ambari_user, update_ambari_properties, update_properties_2, write_property, find_jdk, \\",
          "89:                     get_is_active_instance, \\",
          "90:                     AMBARI_CONF_VAR, AMBARI_SERVER_LIB, JDBC_DATABASE_PROPERTY, JDBC_RCA_PASSWORD_FILE_PROPERTY, \\",
          "91:                     PERSISTENCE_TYPE_PROPERTY, JDBC_URL_PROPERTY, get_conf_dir, JDBC_USER_NAME_PROPERTY, JDBC_PASSWORD_PROPERTY, \\",
          "92:                     JDBC_DATABASE_NAME_PROPERTY, OS_TYPE_PROPERTY, validate_jdk, JDBC_POSTGRES_SCHEMA_PROPERTY, \\",
          "93:                     RESOURCES_DIR_PROPERTY, JDBC_RCA_PASSWORD_ALIAS, JDBC_RCA_SCHEMA_PROPERTY, \\",
          "94:                     SSL_API, SSL_API_PORT, CLIENT_API_PORT_PROPERTY,\\",
          "95:                     JDBC_CONNECTION_POOL_TYPE, LDAP_MGR_PASSWORD_PROPERTY, LDAP_MGR_PASSWORD_ALIAS, JDBC_PASSWORD_FILENAME, NR_USER_PROPERTY, SECURITY_KEY_IS_PERSISTED, \\",
          "96:                     SSL_TRUSTSTORE_PASSWORD_PROPERTY, SECURITY_IS_ENCRYPTION_ENABLED, PID_DIR_PROPERTY, SSL_TRUSTSTORE_PASSWORD_ALIAS, \\",
          "97:                     SECURITY_MASTER_KEY_LOCATION, SECURITY_KEYS_DIR, store_password_file, \\",
          "98:                     get_pass_file_path, GET_FQDN_SERVICE_URL, SECURITY_KEY_ENV_VAR_NAME, \\",
          "99:                     JAVA_HOME_PROPERTY, JDK_NAME_PROPERTY, JCE_NAME_PROPERTY, STACK_LOCATION_KEY, SERVER_VERSION_FILE_PATH, \\",
          "100:                     COMMON_SERVICES_PATH_PROPERTY, WEBAPP_DIR_PROPERTY, SHARED_RESOURCES_DIR, BOOTSTRAP_SCRIPT, \\",
          "101:                     CUSTOM_ACTION_DEFINITIONS, BOOTSTRAP_SETUP_AGENT_SCRIPT, STACKADVISOR_SCRIPT, BOOTSTRAP_DIR_PROPERTY, MPACKS_STAGING_PATH_PROPERTY, STACK_JAVA_VERSION",
          "102:                   from ambari_server.serverUtils import is_server_runing, refresh_stack_hash",
          "103:                   from ambari_server.serverSetup import check_selinux, check_ambari_user, proceedJDBCProperties, SE_STATUS_DISABLED, SE_MODE_ENFORCING, configure_os_settings, \\",
          "104:                     download_and_install_jdk, prompt_db_properties, setup, \\",
          "105:                     AmbariUserChecks, JDKSetup, reset, setup_jce_policy, expand_jce_zip_file, check_ambari_java_version_is_valid",
          "106:                   from ambari_server.serverUpgrade import upgrade, run_schema_upgrade, move_user_custom_actions, find_and_copy_custom_services",
          "107:                   from ambari_server.setupHttps import is_valid_https_port, setup_https, import_cert_and_key_action, get_fqdn, \\",
          "108:                     generate_random_string, get_cert_info, COMMON_NAME_ATTR, is_valid_cert_exp, NOT_AFTER_ATTR, NOT_BEFORE_ATTR, \\",
          "109:                     SSL_DATE_FORMAT, import_cert_and_key, is_valid_cert_host, setup_truststore, \\",
          "110:                     SRVR_ONE_WAY_SSL_PORT_PROPERTY, SRVR_TWO_WAY_SSL_PORT_PROPERTY",
          "111:                   from ambari_server.setupSecurity import adjust_directory_permissions, get_alias_string, get_ldap_event_spec_names, sync_ldap, \\",
          "112:                     configure_ldap_password, setup_ldap, REGEX_HOSTNAME_PORT, REGEX_TRUE_FALSE, REGEX_ANYTHING, setup_master_key, \\",
          "113:                     setup_ambari_krb5_jaas, LDAP_GENERIC, should_query_ldap_type, LdapPropTemplate, LdapDefault, LdapDefaultMap",
          "114:                   from ambari_server.userInput import get_YN_input, get_choice_string_input, get_validated_string_input, \\",
          "115:                     read_password",
          "116:                   from ambari_server_main import get_ulimit_open_files, ULIMIT_OPEN_FILES_KEY, ULIMIT_OPEN_FILES_DEFAULT",
          "117:                   from ambari_server.serverClassPath import JDBC_DRIVER_PATH_PROPERTY, ServerClassPath",
          "118:                   from ambari_server.hostUpdate import update_host_names",
          "119:                   from ambari_server.checkDatabase import check_database",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestMpacks.py||ambari-server/src/test/python/TestMpacks.py": [
          "File: ambari-server/src/test/python/TestMpacks.py -> ambari-server/src/test/python/TestMpacks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:       with patch.object(os_utils, \"parse_log4j_file\", return_value={'ambari.log.dir': '/var/log/ambari-server'}):",
          "40:         with patch(\"platform.linux_distribution\", return_value = os_distro_value):",
          "41:           with patch(\"os.symlink\"):",
          "50: from ambari_server.setupMpacks import install_mpack, upgrade_mpack, replay_mpack_logs, \\",
          "51:   purge_stacks_and_mpacks, validate_purge, read_mpack_metadata, _uninstall_mpack, \\",
          "",
          "[Removed Lines]",
          "42:             with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "43:               _ambari_server_ = __import__('ambari-server')",
          "44:               os_utils.search_file = _search_file",
          "45:               with patch(\"__builtin__.open\"):",
          "46:                 from ambari_commons.exceptions import FatalException, NonFatalException",
          "47:                 from ambari_server import serverConfiguration",
          "48:                 serverConfiguration.search_file = _search_file",
          "",
          "[Added Lines]",
          "42:             with patch.object(os_utils, \"is_service_exist\", return_value = True):",
          "43:               with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "44:                 _ambari_server_ = __import__('ambari-server')",
          "45:                 os_utils.search_file = _search_file",
          "46:                 with patch(\"__builtin__.open\"):",
          "47:                   from ambari_commons.exceptions import FatalException, NonFatalException",
          "48:                   from ambari_server import serverConfiguration",
          "49:                   serverConfiguration.search_file = _search_file",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestOSCheck.py||ambari-server/src/test/python/TestOSCheck.py": [
          "File: ambari-server/src/test/python/TestOSCheck.py -> ambari-server/src/test/python/TestOSCheck.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     with patch.object(os_utils, \"parse_log4j_file\", return_value={'ambari.log.dir': '/var/log/ambari-server'}):",
          "49:       with patch(\"platform.linux_distribution\", return_value = os_distro_value_linux):",
          "50:         with patch.object(OSCheck, \"os_distribution\", return_value = os_distro_value):",
          "57: @patch.object(platform, \"linux_distribution\", new = MagicMock(return_value=('Redhat', '6.4', 'Final')))",
          "58: class TestOSCheck(TestCase):",
          "",
          "[Removed Lines]",
          "51:           with patch.object(utils, \"get_postgre_hba_dir\"):",
          "52:             os.environ[\"ROOT\"] = \"\"",
          "53:             ambari_server = __import__('ambari-server')",
          "55:             from ambari_server.serverConfiguration import update_ambari_properties, configDefaults",
          "",
          "[Added Lines]",
          "51:           with patch.object(os_utils, \"is_service_exist\", return_value = True):",
          "52:             with patch.object(utils, \"get_postgre_hba_dir\"):",
          "53:               os.environ[\"ROOT\"] = \"\"",
          "54:               ambari_server = __import__('ambari-server')",
          "56:               from ambari_server.serverConfiguration import update_ambari_properties, configDefaults",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestSetupTrustedProxy.py||ambari-server/src/test/python/TestSetupTrustedProxy.py": [
          "File: ambari-server/src/test/python/TestSetupTrustedProxy.py -> ambari-server/src/test/python/TestSetupTrustedProxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:       with patch.object(os_utils, \"parse_log4j_file\", return_value={'ambari.log.dir': '/var/log/ambari-server'}):",
          "66:         with patch(\"platform.linux_distribution\", return_value = os_distro_value):",
          "67:           with patch(\"os.symlink\"):",
          "75: class TestSetupTrustedProxy(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "68:             with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "69:               _ambari_server_ = __import__('ambari-server')",
          "70:               with patch(\"__builtin__.open\"):",
          "71:                 from ambari_commons.exceptions import FatalException, NonFatalException",
          "72:                 from ambari_server.properties import Properties",
          "73:                 from ambari_server.setupTrustedProxy import setup_trusted_proxy, TPROXY_SUPPORT_ENABLED, PROXYUSER_HOSTS, PROXYUSER_USERS, PROXYUSER_GROUPS",
          "",
          "[Added Lines]",
          "68:             with patch.object(os_utils, \"is_service_exist\", return_value = True):",
          "69:               with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "70:                 _ambari_server_ = __import__('ambari-server')",
          "71:                 with patch(\"__builtin__.open\"):",
          "72:                   from ambari_commons.exceptions import FatalException, NonFatalException",
          "73:                   from ambari_server.properties import Properties",
          "74:                   from ambari_server.setupTrustedProxy import setup_trusted_proxy, TPROXY_SUPPORT_ENABLED, PROXYUSER_HOSTS, PROXYUSER_USERS, PROXYUSER_GROUPS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56c8ccf77506ddc1268ee1925f3ca0f73bdfb9da",
      "candidate_info": {
        "commit_hash": "56c8ccf77506ddc1268ee1925f3ca0f73bdfb9da",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/56c8ccf77506ddc1268ee1925f3ca0f73bdfb9da",
        "files": [
          "contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js"
        ],
        "message": "[AMBARI-24296] Yarn Queue manager is allowing to Create a Child Queue for queue-mappings enabled Queue and Save it (asnaik) (#1940)",
        "before_after_code_files": [
          "contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js||contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js||contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js": [
          "File: contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js -> contrib/views/capacity-scheduler/src/main/resources/ui/app/controllers/queues.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:       if(mapping.length!=3 || (mapping[0] != 'u'&& mapping[0] != 'g')) {",
          "408:         hasInvalidMapping = true;",
          "409:       }else{",
          "411:             return !queue.get(\"queues\"); //get all leaf queues",
          "412:           }).map(function(queue){",
          "413:             return queue.get(\"name\");",
          "414:           }).indexOf(mapping[2]) == -1;",
          "415:       }",
          "419:     return hasInvalidMapping;",
          "420:   }.property('scheduler.queue_mappings','content.length','content.@each.capacity'),",
          "",
          "[Removed Lines]",
          "410:         hasInvalidMapping = queues.filter(function(queue){",
          "417:     })",
          "",
          "[Added Lines]",
          "411:         hasInvalidMapping = hasInvalidMapping || queues.filter(function(queue){",
          "418:     });",
          "",
          "---------------"
        ]
      }
    }
  ]
}