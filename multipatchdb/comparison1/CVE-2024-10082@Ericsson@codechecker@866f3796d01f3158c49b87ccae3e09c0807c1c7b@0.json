{
  "cve_id": "CVE-2024-10082",
  "cve_desc": "CodeChecker is an analyzer tooling, defect database and viewer extension for the Clang Static Analyzer and Clang Tidy. \nAuthentication method confusion allows logging in as the built-in root user from an external service. The built-in root user up until 6.24.1 is generated in a weak manner, cannot be disabled, and has universal access.This vulnerability allows an attacker who can create an account on an enabled external authentication service, to log in as the root user, and access and control everything that can be controlled via the web interface.\u00a0The attacker needs to acquire the username of the root user to be successful.\n\nThis issue affects CodeChecker: through 6.24.1.",
  "repo": "Ericsson/codechecker",
  "patch_hash": "866f3796d01f3158c49b87ccae3e09c0807c1c7b",
  "patch_info": {
    "commit_hash": "866f3796d01f3158c49b87ccae3e09c0807c1c7b",
    "repo": "Ericsson/codechecker",
    "commit_url": "https://github.com/Ericsson/codechecker/commit/866f3796d01f3158c49b87ccae3e09c0807c1c7b",
    "files": [
      "docs/web/permissions.md",
      "docs/web/user_guide.md",
      "web/server/codechecker_server/cmd/server.py",
      "web/server/codechecker_server/server.py",
      "web/server/codechecker_server/session_manager.py",
      "web/server/vue-cli/e2e/init.workspace.js",
      "web/tests/libtest/env.py"
    ],
    "message": "Removing the root user creation\n\nInstead the user can assign\nthe super user role to a user",
    "before_after_code_files": [
      "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
      "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
      "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
      "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
      "web/tests/libtest/env.py||web/tests/libtest/env.py"
    ]
  },
  "patch_diff": {
    "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py": [
      "File: web/server/codechecker_server/cmd/server.py -> web/server/codechecker_server/cmd/server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "212: CONFIG_DIRECTORY, and the credentials are printed to the server's standard",
      "213: output. The plaintext credentials are NEVER accessible again.\"\"\")",
      "226:     root_account.add_argument('--force-authentication',",
      "227:                               dest=\"force_auth\",",
      "228:                               action='store_true',",
      "",
      "[Removed Lines]",
      "215:     root_account.add_argument('--reset-root',",
      "216:                               dest=\"reset_root\",",
      "217:                               action='store_true',",
      "218:                               default=argparse.SUPPRESS,",
      "219:                               required=False,",
      "220:                               help=\"Force the server to recreate the master \"",
      "221:                                    \"superuser (root) account name and \"",
      "222:                                    \"password. The previous credentials will \"",
      "223:                                    \"be invalidated, and the new ones will be \"",
      "224:                                    \"printed to the standard output.\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "932:             not os.path.isdir(os.path.dirname(args.sqlite)):",
      "933:         os.makedirs(os.path.dirname(args.sqlite))",
      "944:     if 'force_auth' in args:",
      "945:         LOG.info(\"'--force-authentication' was passed as a command-line \"",
      "946:                  \"option. The server will ask for users to authenticate!\")",
      "",
      "[Removed Lines]",
      "935:     if 'reset_root' in args:",
      "936:         try:",
      "937:             os.remove(os.path.join(args.config_directory, 'root.user'))",
      "938:             LOG.info(\"Master superuser (root) credentials invalidated and \"",
      "939:                      \"deleted. New ones will be generated...\")",
      "940:         except OSError:",
      "941:             # File doesn't exist.",
      "942:             pass",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
      "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: import atexit",
      "15: import datetime",
      "16: from functools import partial",
      "18: from http.server import HTTPServer, SimpleHTTPRequestHandler",
      "19: import os",
      "20: import posixpath",
      "22: import shutil",
      "23: import signal",
      "24: import socket",
      "25: import ssl",
      "26: import sys",
      "28: from typing import List, Optional, Tuple",
      "29: import urllib",
      "",
      "[Removed Lines]",
      "17: from hashlib import sha256",
      "21: from random import sample",
      "27: import stat",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:     Configuration as ORMConfiguration",
      "69: from .database.database import DBSession",
      "70: from .database.run_db_model import IDENTIFIER as RUN_META, Run, RunLock",
      "74: LOG = get_logger('server')",
      "",
      "[Removed Lines]",
      "71: from .tmp import get_tmp_dir_hash",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "991:     address_family = socket.AF_INET6",
      "1031: def start_server(config_directory, package_data, port, config_sql_server,",
      "1032:                  listen_address, force_auth, skip_db_cleanup: bool,",
      "1033:                  context, check_env):",
      "",
      "[Removed Lines]",
      "994: def __make_root_file(root_file):",
      "995:     \"\"\"",
      "996:     Generate a root username and password SHA. This hash is saved to the",
      "997:     given file path, and is also returned.",
      "998:     \"\"\"",
      "1000:     LOG.debug(\"Generating initial superuser (root) credentials...\")",
      "1002:     username = ''.join(sample(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 6))",
      "1003:     password = get_tmp_dir_hash()[:8]",
      "1005:     LOG.info(\"A NEW superuser credential was generated for the server. \"",
      "1006:              \"This information IS SAVED, thus subsequent server starts \"",
      "1007:              \"WILL use these credentials. You WILL NOT get to see \"",
      "1008:              \"the credentials again, so MAKE SURE YOU REMEMBER THIS \"",
      "1009:              \"LOGIN!\")",
      "1011:     # Highlight the message a bit more, as the server owner configuring the",
      "1012:     # server must know this root access initially.",
      "1013:     credential_msg = f\"The superuser's username is '{username}' with the \" \\",
      "1014:                      f\"password '{password}'\"",
      "1015:     LOG.info(\"-\" * len(credential_msg))",
      "1016:     LOG.info(credential_msg)",
      "1017:     LOG.info(\"-\" * len(credential_msg))",
      "1019:     sha = sha256((username + ':' + password).encode('utf-8')).hexdigest()",
      "1020:     secret = f\"{username}:{sha}\"",
      "1021:     with open(root_file, 'w', encoding=\"utf-8\", errors=\"ignore\") as f:",
      "1022:         LOG.debug(\"Save root SHA256 '%s'\", secret)",
      "1023:         f.write(secret)",
      "1025:     # This file should be only readable by the process owner, and noone else.",
      "1026:     os.chmod(root_file, stat.S_IRUSR)",
      "1028:     return secret",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1039:     server_addr = (listen_address, port)",
      "1041:     root_file = os.path.join(config_directory, 'root.user')",
      "1057:     # Check whether configuration file exists, create an example if not.",
      "1058:     server_cfg_file = os.path.join(config_directory, 'server_config.json')",
      "1059:     if not os.path.exists(server_cfg_file):",
      "",
      "[Removed Lines]",
      "1042:     if not os.path.exists(root_file):",
      "1043:         LOG.warning(\"Server started without 'root.user' present in \"",
      "1044:                     \"CONFIG_DIRECTORY!\")",
      "1045:         root_sha = __make_root_file(root_file)",
      "1046:     else:",
      "1047:         LOG.debug(\"Root file was found. Loading...\")",
      "1048:         try:",
      "1049:             with open(root_file, 'r', encoding=\"utf-8\", errors=\"ignore\") as f:",
      "1050:                 root_sha = f.read()",
      "1051:             LOG.debug(\"Root digest is '%s'\", root_sha)",
      "1052:         except IOError:",
      "1053:             LOG.info(\"Cannot open root file '%s' even though it exists\",",
      "1054:                      root_file)",
      "1055:             root_sha = __make_root_file(root_file)",
      "",
      "[Added Lines]",
      "999:     # The root user file is DEPRECATED AND IGNORED",
      "1001:     if os.path.exists(root_file):",
      "1002:         LOG.warning(\"The 'root.user' file:  %s\"",
      "1003:                     \" is deprecated and ignored. If you want to\"",
      "1004:                     \" setup an initial user with SUPER_USER permission,\"",
      "1005:                     \" configure the super_user field in the server_config.json\"",
      "1006:                     \" as described in the documentation.\"",
      "1007:                     \" To get rid off this warning,\"",
      "1008:                     \" simply delete the root.user file.\",",
      "1009:                     root_file)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1077:     try:",
      "1078:         manager = session_manager.SessionManager(",
      "1079:             server_cfg_file,",
      "1081:             force_auth)",
      "1082:     except IOError as ioerr:",
      "1083:         LOG.debug(ioerr)",
      "",
      "[Removed Lines]",
      "1080:             root_sha,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1098:                       \"Earlier logs might contain additional detailed \"",
      "1099:                       \"reasoning.\\n\\t* %s\", len(fails),",
      "1100:                       \"\\n\\t* \".join(",
      "1102:                       ))",
      "1103:     else:",
      "1104:         LOG.debug(\"Skipping db_cleanup, as requested.\")",
      "",
      "[Removed Lines]",
      "1101:                         (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
      "",
      "[Added Lines]",
      "1053:                           (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
      "",
      "---------------"
    ],
    "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py": [
      "File: web/server/codechecker_server/session_manager.py -> web/server/codechecker_server/session_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: Handles the management of authentication sessions on the server's side.",
      "10: \"\"\"",
      "13: import json",
      "14: import os",
      "15: import re",
      "",
      "[Removed Lines]",
      "12: import hashlib",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "161:     CodeChecker server.",
      "162:     \"\"\"",
      "165:         \"\"\"",
      "166:         Initialise a new Session Manager on the server.",
      "168:         :param configuration_file: The configuration file to read",
      "169:             authentication backends from.",
      "171:         :param force_auth: If True, the manager will be enabled even if the",
      "172:             configuration file disables authentication.",
      "173:         \"\"\"",
      "",
      "[Removed Lines]",
      "164:     def __init__(self, configuration_file, root_sha, force_auth=False):",
      "170:         :param root_sha: The SHA-256 hash of the root user's authentication.",
      "",
      "[Added Lines]",
      "163:     def __init__(self, configuration_file, force_auth=False):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "199:         self.__refresh_time = self.__auth_config['refresh_time'] \\",
      "200:             if 'refresh_time' in self.__auth_config else None",
      "205:         self.__regex_groups_enabled = False",
      "207:         # Pre-compile the regular expressions of 'regex_groups'",
      "",
      "[Removed Lines]",
      "202:         # Save the root SHA into the configuration (but only in memory!)",
      "203:         self.__auth_config['method_root'] = root_sha",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "334:             \"error\": self.__auth_config.get('realm_error')",
      "335:         }",
      "337:     @property",
      "338:     def default_superuser_name(self) -> Optional[str]:",
      "339:         \"\"\" Get default superuser name. \"\"\"",
      "349:     def set_database_connection(self, connection):",
      "350:         \"\"\"",
      "",
      "[Removed Lines]",
      "340:         root = self.__auth_config['method_root'].split(\":\")",
      "342:         # Previously the root file doesn't contain the user name. In this case",
      "343:         # we will return with no user name.",
      "344:         if len(root) <= 1:",
      "345:             return None",
      "347:         return root[0]",
      "",
      "[Added Lines]",
      "332:     @property",
      "333:     def get_super_user(self):",
      "334:         return {",
      "335:             \"super_user\": self.__auth_config.get('super_user'),",
      "336:         }",
      "341:         return self.__auth_config['super_user']",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "366:         This validation object contains two keys: username and groups.",
      "367:         \"\"\"",
      "370:             or self.__try_auth_pam(auth_string) \\",
      "371:             or self.__try_auth_ldap(auth_string)",
      "372:         if not validation:",
      "",
      "[Removed Lines]",
      "368:         validation = self.__try_auth_root(auth_string) \\",
      "369:             or self.__try_auth_dictionary(auth_string) \\",
      "",
      "[Added Lines]",
      "362:         validation = self.__try_auth_dictionary(auth_string) \\",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "387:             'method_' + method in self.__auth_config and \\",
      "388:             self.__auth_config['method_' + method].get('enabled')",
      "406:     def __try_auth_token(self, auth_string):",
      "407:         if not self.__database_connection:",
      "408:             return None",
      "",
      "[Removed Lines]",
      "390:     def __try_auth_root(self, auth_string):",
      "391:         \"\"\"",
      "392:         Try to authenticate the user against the root username:password's hash.",
      "393:         \"\"\"",
      "394:         user_name = SessionManager.get_user_name(auth_string)",
      "395:         sha = hashlib.sha256(auth_string.encode('utf8')).hexdigest()",
      "397:         if f\"{user_name}:{sha}\" == self.__auth_config['method_root']:",
      "398:             return {",
      "399:                 'username': SessionManager.get_user_name(auth_string),",
      "400:                 'groups': [],",
      "401:                 'root': True",
      "402:             }",
      "404:         return False",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "563:     def __is_root_user(self, user_name):",
      "564:         \"\"\" Return True if the given user has system permissions. \"\"\"",
      "566:             return True",
      "568:         transaction = None",
      "",
      "[Removed Lines]",
      "565:         if self.__auth_config['method_root'].split(\":\")[0] == user_name:",
      "",
      "[Added Lines]",
      "542:         if self.__auth_config['super_user'] == user_name:",
      "",
      "---------------"
    ],
    "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js": [
      "File: web/server/vue-cli/e2e/init.workspace.js -> web/server/vue-cli/e2e/init.workspace.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: const SERVER_CONFIG = {",
      "8:   authentication: {",
      "9:     enabled : true,",
      "10:     session_lifetime : 60000,",
      "11:     refresh_time : 60,",
      "12:     logins_until_cleanup : 30,",
      "13:     method_dictionary: {",
      "14:       enabled : true,",
      "16:       groups : {}",
      "17:     }",
      "18:   }",
      "19: };",
      "25: if (!fs.existsSync(WORKSPACE_DIR)) {",
      "26:   fs.mkdirSync(WORKSPACE_DIR);",
      "",
      "[Removed Lines]",
      "15:       auths : [ \"cc:admin\" ],",
      "21: const ROOT_USER =",
      "22:   \"root:2691b13e4c5eadd0adad38983e611b2caa19caaa3476ccf31cbcadddf65c321c\";",
      "",
      "[Added Lines]",
      "10:     \"super_user\" : \"root\",",
      "16:       auths : [ \"cc:admin\",",
      "17:         \"root:S3cr3t\" ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: const serverConfigFile = path.join(WORKSPACE_DIR, \"server_config.json\");",
      "31: const data = JSON.stringify(SERVER_CONFIG, null, \"  \");",
      "",
      "[Removed Lines]",
      "32: fs.writeFileSync(serverConfigFile, data);",
      "37: const rootUserFile = path.join(WORKSPACE_DIR, \"root.user\");",
      "38: fs.writeFileSync(rootUserFile, ROOT_USER);",
      "",
      "[Added Lines]",
      "31: fs.writeFileSync(serverConfigFile, data);",
      "",
      "---------------"
    ],
    "web/tests/libtest/env.py||web/tests/libtest/env.py": [
      "File: web/tests/libtest/env.py -> web/tests/libtest/env.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: \"\"\"",
      "14: import os",
      "15: import json",
      "16: import tempfile",
      "17: import shutil",
      "18: import socket",
      "20: import subprocess",
      "22: from codechecker_common.util import load_json",
      "",
      "[Removed Lines]",
      "13: from hashlib import sha256",
      "19: import stat",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "351:     scfg_dict = load_json(server_cfg_file, {})",
      "352:     scfg_dict[\"authentication\"][\"enabled\"] = True",
      "353:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"enabled\"] = True",
      "354:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"auths\"] = \\",
      "355:         [\"cc:test\", \"john:doe\", \"admin:admin123\", \"colon:my:password\",",
      "356:          \"admin_group_user:admin123\", \"regex_admin:blah\",",
      "358:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"groups\"] = \\",
      "359:         {\"admin_group_user\": [\"admin_GROUP\"]}",
      "360:     scfg_dict[\"authentication\"][\"regex_groups\"][\"enabled\"] = True",
      "",
      "[Removed Lines]",
      "357:          \"permission_view_user:pvu\"]",
      "",
      "[Added Lines]",
      "351:     scfg_dict[\"authentication\"][\"super_user\"] = \"root\"",
      "356:          \"permission_view_user:pvu\", \"root:root\"]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "363:               encoding=\"utf-8\", errors=\"ignore\") as scfg:",
      "364:         json.dump(scfg_dict, scfg, indent=2, sort_keys=True)",
      "374: def enable_storage_of_analysis_statistics(workspace):",
      "375:     \"\"\"",
      "",
      "[Removed Lines]",
      "366:     # Create a root user.",
      "367:     root_file = os.path.join(workspace, 'root.user')",
      "368:     with open(root_file, 'w',",
      "369:               encoding='utf-8', errors='ignore') as rootf:",
      "370:         rootf.write(f\"root:{sha256(b'root:root').hexdigest()}\")",
      "371:     os.chmod(root_file, stat.S_IRUSR | stat.S_IWUSR)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "866f3796d01f3158c49b87ccae3e09c0807c1c7b",
      "candidate_info": {
        "commit_hash": "866f3796d01f3158c49b87ccae3e09c0807c1c7b",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/866f3796d01f3158c49b87ccae3e09c0807c1c7b",
        "files": [
          "docs/web/permissions.md",
          "docs/web/user_guide.md",
          "web/server/codechecker_server/cmd/server.py",
          "web/server/codechecker_server/server.py",
          "web/server/codechecker_server/session_manager.py",
          "web/server/vue-cli/e2e/init.workspace.js",
          "web/tests/libtest/env.py"
        ],
        "message": "Removing the root user creation\n\nInstead the user can assign\nthe super user role to a user",
        "before_after_code_files": [
          "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
          "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
          "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
          "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
          "web/tests/libtest/env.py||web/tests/libtest/env.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
            "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
            "web/tests/libtest/env.py||web/tests/libtest/env.py"
          ],
          "candidate": [
            "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
            "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
            "web/tests/libtest/env.py||web/tests/libtest/env.py"
          ]
        }
      },
      "candidate_diff": {
        "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py": [
          "File: web/server/codechecker_server/cmd/server.py -> web/server/codechecker_server/cmd/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: CONFIG_DIRECTORY, and the credentials are printed to the server's standard",
          "213: output. The plaintext credentials are NEVER accessible again.\"\"\")",
          "226:     root_account.add_argument('--force-authentication',",
          "227:                               dest=\"force_auth\",",
          "228:                               action='store_true',",
          "",
          "[Removed Lines]",
          "215:     root_account.add_argument('--reset-root',",
          "216:                               dest=\"reset_root\",",
          "217:                               action='store_true',",
          "218:                               default=argparse.SUPPRESS,",
          "219:                               required=False,",
          "220:                               help=\"Force the server to recreate the master \"",
          "221:                                    \"superuser (root) account name and \"",
          "222:                                    \"password. The previous credentials will \"",
          "223:                                    \"be invalidated, and the new ones will be \"",
          "224:                                    \"printed to the standard output.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "932:             not os.path.isdir(os.path.dirname(args.sqlite)):",
          "933:         os.makedirs(os.path.dirname(args.sqlite))",
          "944:     if 'force_auth' in args:",
          "945:         LOG.info(\"'--force-authentication' was passed as a command-line \"",
          "946:                  \"option. The server will ask for users to authenticate!\")",
          "",
          "[Removed Lines]",
          "935:     if 'reset_root' in args:",
          "936:         try:",
          "937:             os.remove(os.path.join(args.config_directory, 'root.user'))",
          "938:             LOG.info(\"Master superuser (root) credentials invalidated and \"",
          "939:                      \"deleted. New ones will be generated...\")",
          "940:         except OSError:",
          "941:             # File doesn't exist.",
          "942:             pass",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
          "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import atexit",
          "15: import datetime",
          "16: from functools import partial",
          "18: from http.server import HTTPServer, SimpleHTTPRequestHandler",
          "19: import os",
          "20: import posixpath",
          "22: import shutil",
          "23: import signal",
          "24: import socket",
          "25: import ssl",
          "26: import sys",
          "28: from typing import List, Optional, Tuple",
          "29: import urllib",
          "",
          "[Removed Lines]",
          "17: from hashlib import sha256",
          "21: from random import sample",
          "27: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     Configuration as ORMConfiguration",
          "69: from .database.database import DBSession",
          "70: from .database.run_db_model import IDENTIFIER as RUN_META, Run, RunLock",
          "74: LOG = get_logger('server')",
          "",
          "[Removed Lines]",
          "71: from .tmp import get_tmp_dir_hash",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "991:     address_family = socket.AF_INET6",
          "1031: def start_server(config_directory, package_data, port, config_sql_server,",
          "1032:                  listen_address, force_auth, skip_db_cleanup: bool,",
          "1033:                  context, check_env):",
          "",
          "[Removed Lines]",
          "994: def __make_root_file(root_file):",
          "995:     \"\"\"",
          "996:     Generate a root username and password SHA. This hash is saved to the",
          "997:     given file path, and is also returned.",
          "998:     \"\"\"",
          "1000:     LOG.debug(\"Generating initial superuser (root) credentials...\")",
          "1002:     username = ''.join(sample(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 6))",
          "1003:     password = get_tmp_dir_hash()[:8]",
          "1005:     LOG.info(\"A NEW superuser credential was generated for the server. \"",
          "1006:              \"This information IS SAVED, thus subsequent server starts \"",
          "1007:              \"WILL use these credentials. You WILL NOT get to see \"",
          "1008:              \"the credentials again, so MAKE SURE YOU REMEMBER THIS \"",
          "1009:              \"LOGIN!\")",
          "1011:     # Highlight the message a bit more, as the server owner configuring the",
          "1012:     # server must know this root access initially.",
          "1013:     credential_msg = f\"The superuser's username is '{username}' with the \" \\",
          "1014:                      f\"password '{password}'\"",
          "1015:     LOG.info(\"-\" * len(credential_msg))",
          "1016:     LOG.info(credential_msg)",
          "1017:     LOG.info(\"-\" * len(credential_msg))",
          "1019:     sha = sha256((username + ':' + password).encode('utf-8')).hexdigest()",
          "1020:     secret = f\"{username}:{sha}\"",
          "1021:     with open(root_file, 'w', encoding=\"utf-8\", errors=\"ignore\") as f:",
          "1022:         LOG.debug(\"Save root SHA256 '%s'\", secret)",
          "1023:         f.write(secret)",
          "1025:     # This file should be only readable by the process owner, and noone else.",
          "1026:     os.chmod(root_file, stat.S_IRUSR)",
          "1028:     return secret",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1039:     server_addr = (listen_address, port)",
          "1041:     root_file = os.path.join(config_directory, 'root.user')",
          "1057:     # Check whether configuration file exists, create an example if not.",
          "1058:     server_cfg_file = os.path.join(config_directory, 'server_config.json')",
          "1059:     if not os.path.exists(server_cfg_file):",
          "",
          "[Removed Lines]",
          "1042:     if not os.path.exists(root_file):",
          "1043:         LOG.warning(\"Server started without 'root.user' present in \"",
          "1044:                     \"CONFIG_DIRECTORY!\")",
          "1045:         root_sha = __make_root_file(root_file)",
          "1046:     else:",
          "1047:         LOG.debug(\"Root file was found. Loading...\")",
          "1048:         try:",
          "1049:             with open(root_file, 'r', encoding=\"utf-8\", errors=\"ignore\") as f:",
          "1050:                 root_sha = f.read()",
          "1051:             LOG.debug(\"Root digest is '%s'\", root_sha)",
          "1052:         except IOError:",
          "1053:             LOG.info(\"Cannot open root file '%s' even though it exists\",",
          "1054:                      root_file)",
          "1055:             root_sha = __make_root_file(root_file)",
          "",
          "[Added Lines]",
          "999:     # The root user file is DEPRECATED AND IGNORED",
          "1001:     if os.path.exists(root_file):",
          "1002:         LOG.warning(\"The 'root.user' file:  %s\"",
          "1003:                     \" is deprecated and ignored. If you want to\"",
          "1004:                     \" setup an initial user with SUPER_USER permission,\"",
          "1005:                     \" configure the super_user field in the server_config.json\"",
          "1006:                     \" as described in the documentation.\"",
          "1007:                     \" To get rid off this warning,\"",
          "1008:                     \" simply delete the root.user file.\",",
          "1009:                     root_file)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1077:     try:",
          "1078:         manager = session_manager.SessionManager(",
          "1079:             server_cfg_file,",
          "1081:             force_auth)",
          "1082:     except IOError as ioerr:",
          "1083:         LOG.debug(ioerr)",
          "",
          "[Removed Lines]",
          "1080:             root_sha,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1098:                       \"Earlier logs might contain additional detailed \"",
          "1099:                       \"reasoning.\\n\\t* %s\", len(fails),",
          "1100:                       \"\\n\\t* \".join(",
          "1102:                       ))",
          "1103:     else:",
          "1104:         LOG.debug(\"Skipping db_cleanup, as requested.\")",
          "",
          "[Removed Lines]",
          "1101:                         (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "[Added Lines]",
          "1053:                           (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py": [
          "File: web/server/codechecker_server/session_manager.py -> web/server/codechecker_server/session_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: Handles the management of authentication sessions on the server's side.",
          "10: \"\"\"",
          "13: import json",
          "14: import os",
          "15: import re",
          "",
          "[Removed Lines]",
          "12: import hashlib",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     CodeChecker server.",
          "162:     \"\"\"",
          "165:         \"\"\"",
          "166:         Initialise a new Session Manager on the server.",
          "168:         :param configuration_file: The configuration file to read",
          "169:             authentication backends from.",
          "171:         :param force_auth: If True, the manager will be enabled even if the",
          "172:             configuration file disables authentication.",
          "173:         \"\"\"",
          "",
          "[Removed Lines]",
          "164:     def __init__(self, configuration_file, root_sha, force_auth=False):",
          "170:         :param root_sha: The SHA-256 hash of the root user's authentication.",
          "",
          "[Added Lines]",
          "163:     def __init__(self, configuration_file, force_auth=False):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:         self.__refresh_time = self.__auth_config['refresh_time'] \\",
          "200:             if 'refresh_time' in self.__auth_config else None",
          "205:         self.__regex_groups_enabled = False",
          "207:         # Pre-compile the regular expressions of 'regex_groups'",
          "",
          "[Removed Lines]",
          "202:         # Save the root SHA into the configuration (but only in memory!)",
          "203:         self.__auth_config['method_root'] = root_sha",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:             \"error\": self.__auth_config.get('realm_error')",
          "335:         }",
          "337:     @property",
          "338:     def default_superuser_name(self) -> Optional[str]:",
          "339:         \"\"\" Get default superuser name. \"\"\"",
          "349:     def set_database_connection(self, connection):",
          "350:         \"\"\"",
          "",
          "[Removed Lines]",
          "340:         root = self.__auth_config['method_root'].split(\":\")",
          "342:         # Previously the root file doesn't contain the user name. In this case",
          "343:         # we will return with no user name.",
          "344:         if len(root) <= 1:",
          "345:             return None",
          "347:         return root[0]",
          "",
          "[Added Lines]",
          "332:     @property",
          "333:     def get_super_user(self):",
          "334:         return {",
          "335:             \"super_user\": self.__auth_config.get('super_user'),",
          "336:         }",
          "341:         return self.__auth_config['super_user']",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366:         This validation object contains two keys: username and groups.",
          "367:         \"\"\"",
          "370:             or self.__try_auth_pam(auth_string) \\",
          "371:             or self.__try_auth_ldap(auth_string)",
          "372:         if not validation:",
          "",
          "[Removed Lines]",
          "368:         validation = self.__try_auth_root(auth_string) \\",
          "369:             or self.__try_auth_dictionary(auth_string) \\",
          "",
          "[Added Lines]",
          "362:         validation = self.__try_auth_dictionary(auth_string) \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "387:             'method_' + method in self.__auth_config and \\",
          "388:             self.__auth_config['method_' + method].get('enabled')",
          "406:     def __try_auth_token(self, auth_string):",
          "407:         if not self.__database_connection:",
          "408:             return None",
          "",
          "[Removed Lines]",
          "390:     def __try_auth_root(self, auth_string):",
          "391:         \"\"\"",
          "392:         Try to authenticate the user against the root username:password's hash.",
          "393:         \"\"\"",
          "394:         user_name = SessionManager.get_user_name(auth_string)",
          "395:         sha = hashlib.sha256(auth_string.encode('utf8')).hexdigest()",
          "397:         if f\"{user_name}:{sha}\" == self.__auth_config['method_root']:",
          "398:             return {",
          "399:                 'username': SessionManager.get_user_name(auth_string),",
          "400:                 'groups': [],",
          "401:                 'root': True",
          "402:             }",
          "404:         return False",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "563:     def __is_root_user(self, user_name):",
          "564:         \"\"\" Return True if the given user has system permissions. \"\"\"",
          "566:             return True",
          "568:         transaction = None",
          "",
          "[Removed Lines]",
          "565:         if self.__auth_config['method_root'].split(\":\")[0] == user_name:",
          "",
          "[Added Lines]",
          "542:         if self.__auth_config['super_user'] == user_name:",
          "",
          "---------------"
        ],
        "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js": [
          "File: web/server/vue-cli/e2e/init.workspace.js -> web/server/vue-cli/e2e/init.workspace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const SERVER_CONFIG = {",
          "8:   authentication: {",
          "9:     enabled : true,",
          "10:     session_lifetime : 60000,",
          "11:     refresh_time : 60,",
          "12:     logins_until_cleanup : 30,",
          "13:     method_dictionary: {",
          "14:       enabled : true,",
          "16:       groups : {}",
          "17:     }",
          "18:   }",
          "19: };",
          "25: if (!fs.existsSync(WORKSPACE_DIR)) {",
          "26:   fs.mkdirSync(WORKSPACE_DIR);",
          "",
          "[Removed Lines]",
          "15:       auths : [ \"cc:admin\" ],",
          "21: const ROOT_USER =",
          "22:   \"root:2691b13e4c5eadd0adad38983e611b2caa19caaa3476ccf31cbcadddf65c321c\";",
          "",
          "[Added Lines]",
          "10:     \"super_user\" : \"root\",",
          "16:       auths : [ \"cc:admin\",",
          "17:         \"root:S3cr3t\" ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: const serverConfigFile = path.join(WORKSPACE_DIR, \"server_config.json\");",
          "31: const data = JSON.stringify(SERVER_CONFIG, null, \"  \");",
          "",
          "[Removed Lines]",
          "32: fs.writeFileSync(serverConfigFile, data);",
          "37: const rootUserFile = path.join(WORKSPACE_DIR, \"root.user\");",
          "38: fs.writeFileSync(rootUserFile, ROOT_USER);",
          "",
          "[Added Lines]",
          "31: fs.writeFileSync(serverConfigFile, data);",
          "",
          "---------------"
        ],
        "web/tests/libtest/env.py||web/tests/libtest/env.py": [
          "File: web/tests/libtest/env.py -> web/tests/libtest/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: \"\"\"",
          "14: import os",
          "15: import json",
          "16: import tempfile",
          "17: import shutil",
          "18: import socket",
          "20: import subprocess",
          "22: from codechecker_common.util import load_json",
          "",
          "[Removed Lines]",
          "13: from hashlib import sha256",
          "19: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:     scfg_dict = load_json(server_cfg_file, {})",
          "352:     scfg_dict[\"authentication\"][\"enabled\"] = True",
          "353:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"enabled\"] = True",
          "354:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"auths\"] = \\",
          "355:         [\"cc:test\", \"john:doe\", \"admin:admin123\", \"colon:my:password\",",
          "356:          \"admin_group_user:admin123\", \"regex_admin:blah\",",
          "358:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"groups\"] = \\",
          "359:         {\"admin_group_user\": [\"admin_GROUP\"]}",
          "360:     scfg_dict[\"authentication\"][\"regex_groups\"][\"enabled\"] = True",
          "",
          "[Removed Lines]",
          "357:          \"permission_view_user:pvu\"]",
          "",
          "[Added Lines]",
          "351:     scfg_dict[\"authentication\"][\"super_user\"] = \"root\"",
          "356:          \"permission_view_user:pvu\", \"root:root\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:               encoding=\"utf-8\", errors=\"ignore\") as scfg:",
          "364:         json.dump(scfg_dict, scfg, indent=2, sort_keys=True)",
          "374: def enable_storage_of_analysis_statistics(workspace):",
          "375:     \"\"\"",
          "",
          "[Removed Lines]",
          "366:     # Create a root user.",
          "367:     root_file = os.path.join(workspace, 'root.user')",
          "368:     with open(root_file, 'w',",
          "369:               encoding='utf-8', errors='ignore') as rootf:",
          "370:         rootf.write(f\"root:{sha256(b'root:root').hexdigest()}\")",
          "371:     os.chmod(root_file, stat.S_IRUSR | stat.S_IWUSR)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bb2cbf61c868ef34a1cb180a56d0b83f54074d4",
      "candidate_info": {
        "commit_hash": "3bb2cbf61c868ef34a1cb180a56d0b83f54074d4",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/3bb2cbf61c868ef34a1cb180a56d0b83f54074d4",
        "files": [
          "docs/web/permissions.md",
          "docs/web/user_guide.md",
          "web/server/codechecker_server/cmd/server.py",
          "web/server/codechecker_server/server.py",
          "web/server/codechecker_server/session_manager.py",
          "web/server/vue-cli/e2e/init.workspace.js",
          "web/tests/libtest/env.py"
        ],
        "message": "Removing the root user creation\n\nInstead the user can assign\nthe super user role to a user",
        "before_after_code_files": [
          "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
          "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
          "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
          "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
          "web/tests/libtest/env.py||web/tests/libtest/env.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
            "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
            "web/tests/libtest/env.py||web/tests/libtest/env.py"
          ],
          "candidate": [
            "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
            "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
            "web/tests/libtest/env.py||web/tests/libtest/env.py"
          ]
        }
      },
      "candidate_diff": {
        "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py": [
          "File: web/server/codechecker_server/cmd/server.py -> web/server/codechecker_server/cmd/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: CONFIG_DIRECTORY, and the credentials are printed to the server's standard",
          "213: output. The plaintext credentials are NEVER accessible again.\"\"\")",
          "226:     root_account.add_argument('--force-authentication',",
          "227:                               dest=\"force_auth\",",
          "228:                               action='store_true',",
          "",
          "[Removed Lines]",
          "215:     root_account.add_argument('--reset-root',",
          "216:                               dest=\"reset_root\",",
          "217:                               action='store_true',",
          "218:                               default=argparse.SUPPRESS,",
          "219:                               required=False,",
          "220:                               help=\"Force the server to recreate the master \"",
          "221:                                    \"superuser (root) account name and \"",
          "222:                                    \"password. The previous credentials will \"",
          "223:                                    \"be invalidated, and the new ones will be \"",
          "224:                                    \"printed to the standard output.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "932:             not os.path.isdir(os.path.dirname(args.sqlite)):",
          "933:         os.makedirs(os.path.dirname(args.sqlite))",
          "944:     if 'force_auth' in args:",
          "945:         LOG.info(\"'--force-authentication' was passed as a command-line \"",
          "946:                  \"option. The server will ask for users to authenticate!\")",
          "",
          "[Removed Lines]",
          "935:     if 'reset_root' in args:",
          "936:         try:",
          "937:             os.remove(os.path.join(args.config_directory, 'root.user'))",
          "938:             LOG.info(\"Master superuser (root) credentials invalidated and \"",
          "939:                      \"deleted. New ones will be generated...\")",
          "940:         except OSError:",
          "941:             # File doesn't exist.",
          "942:             pass",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
          "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import atexit",
          "15: import datetime",
          "16: from functools import partial",
          "18: from http.server import HTTPServer, SimpleHTTPRequestHandler",
          "19: import os",
          "20: import posixpath",
          "22: import shutil",
          "23: import signal",
          "24: import socket",
          "25: import ssl",
          "26: import sys",
          "28: from typing import List, Optional, Tuple",
          "29: import urllib",
          "",
          "[Removed Lines]",
          "17: from hashlib import sha256",
          "21: from random import sample",
          "27: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     Configuration as ORMConfiguration",
          "69: from .database.database import DBSession",
          "70: from .database.run_db_model import IDENTIFIER as RUN_META, Run, RunLock",
          "74: LOG = get_logger('server')",
          "",
          "[Removed Lines]",
          "71: from .tmp import get_tmp_dir_hash",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "991:     address_family = socket.AF_INET6",
          "1031: def start_server(config_directory, package_data, port, config_sql_server,",
          "1032:                  listen_address, force_auth, skip_db_cleanup: bool,",
          "1033:                  context, check_env):",
          "",
          "[Removed Lines]",
          "994: def __make_root_file(root_file):",
          "995:     \"\"\"",
          "996:     Generate a root username and password SHA. This hash is saved to the",
          "997:     given file path, and is also returned.",
          "998:     \"\"\"",
          "1000:     LOG.debug(\"Generating initial superuser (root) credentials...\")",
          "1002:     username = ''.join(sample(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 6))",
          "1003:     password = get_tmp_dir_hash()[:8]",
          "1005:     LOG.info(\"A NEW superuser credential was generated for the server. \"",
          "1006:              \"This information IS SAVED, thus subsequent server starts \"",
          "1007:              \"WILL use these credentials. You WILL NOT get to see \"",
          "1008:              \"the credentials again, so MAKE SURE YOU REMEMBER THIS \"",
          "1009:              \"LOGIN!\")",
          "1011:     # Highlight the message a bit more, as the server owner configuring the",
          "1012:     # server must know this root access initially.",
          "1013:     credential_msg = f\"The superuser's username is '{username}' with the \" \\",
          "1014:                      f\"password '{password}'\"",
          "1015:     LOG.info(\"-\" * len(credential_msg))",
          "1016:     LOG.info(credential_msg)",
          "1017:     LOG.info(\"-\" * len(credential_msg))",
          "1019:     sha = sha256((username + ':' + password).encode('utf-8')).hexdigest()",
          "1020:     secret = f\"{username}:{sha}\"",
          "1021:     with open(root_file, 'w', encoding=\"utf-8\", errors=\"ignore\") as f:",
          "1022:         LOG.debug(\"Save root SHA256 '%s'\", secret)",
          "1023:         f.write(secret)",
          "1025:     # This file should be only readable by the process owner, and noone else.",
          "1026:     os.chmod(root_file, stat.S_IRUSR)",
          "1028:     return secret",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1039:     server_addr = (listen_address, port)",
          "1041:     root_file = os.path.join(config_directory, 'root.user')",
          "1057:     # Check whether configuration file exists, create an example if not.",
          "1058:     server_cfg_file = os.path.join(config_directory, 'server_config.json')",
          "1059:     if not os.path.exists(server_cfg_file):",
          "",
          "[Removed Lines]",
          "1042:     if not os.path.exists(root_file):",
          "1043:         LOG.warning(\"Server started without 'root.user' present in \"",
          "1044:                     \"CONFIG_DIRECTORY!\")",
          "1045:         root_sha = __make_root_file(root_file)",
          "1046:     else:",
          "1047:         LOG.debug(\"Root file was found. Loading...\")",
          "1048:         try:",
          "1049:             with open(root_file, 'r', encoding=\"utf-8\", errors=\"ignore\") as f:",
          "1050:                 root_sha = f.read()",
          "1051:             LOG.debug(\"Root digest is '%s'\", root_sha)",
          "1052:         except IOError:",
          "1053:             LOG.info(\"Cannot open root file '%s' even though it exists\",",
          "1054:                      root_file)",
          "1055:             root_sha = __make_root_file(root_file)",
          "",
          "[Added Lines]",
          "999:     # The root user file is DEPRECATED AND IGNORED",
          "1001:     if os.path.exists(root_file):",
          "1002:         LOG.warning(\"The 'root.user' file:  %s\"",
          "1003:                     \" is deprecated and ignored. If you want to\"",
          "1004:                     \" setup an initial user with SUPER_USER permission,\"",
          "1005:                     \" configure the super_user field in the server_config.json\"",
          "1006:                     \" as described in the documentation.\"",
          "1007:                     \" To get rid off this warning,\"",
          "1008:                     \" simply delete the root.user file.\",",
          "1009:                     root_file)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1077:     try:",
          "1078:         manager = session_manager.SessionManager(",
          "1079:             server_cfg_file,",
          "1081:             force_auth)",
          "1082:     except IOError as ioerr:",
          "1083:         LOG.debug(ioerr)",
          "",
          "[Removed Lines]",
          "1080:             root_sha,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1098:                       \"Earlier logs might contain additional detailed \"",
          "1099:                       \"reasoning.\\n\\t* %s\", len(fails),",
          "1100:                       \"\\n\\t* \".join(",
          "1102:                       ))",
          "1103:     else:",
          "1104:         LOG.debug(\"Skipping db_cleanup, as requested.\")",
          "",
          "[Removed Lines]",
          "1101:                         (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "[Added Lines]",
          "1053:                           (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py": [
          "File: web/server/codechecker_server/session_manager.py -> web/server/codechecker_server/session_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: Handles the management of authentication sessions on the server's side.",
          "10: \"\"\"",
          "13: import json",
          "14: import os",
          "15: import re",
          "",
          "[Removed Lines]",
          "12: import hashlib",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     CodeChecker server.",
          "162:     \"\"\"",
          "165:         \"\"\"",
          "166:         Initialise a new Session Manager on the server.",
          "168:         :param configuration_file: The configuration file to read",
          "169:             authentication backends from.",
          "171:         :param force_auth: If True, the manager will be enabled even if the",
          "172:             configuration file disables authentication.",
          "173:         \"\"\"",
          "",
          "[Removed Lines]",
          "164:     def __init__(self, configuration_file, root_sha, force_auth=False):",
          "170:         :param root_sha: The SHA-256 hash of the root user's authentication.",
          "",
          "[Added Lines]",
          "163:     def __init__(self, configuration_file, force_auth=False):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:         self.__refresh_time = self.__auth_config['refresh_time'] \\",
          "200:             if 'refresh_time' in self.__auth_config else None",
          "205:         self.__regex_groups_enabled = False",
          "207:         # Pre-compile the regular expressions of 'regex_groups'",
          "",
          "[Removed Lines]",
          "202:         # Save the root SHA into the configuration (but only in memory!)",
          "203:         self.__auth_config['method_root'] = root_sha",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:             \"error\": self.__auth_config.get('realm_error')",
          "335:         }",
          "337:     @property",
          "338:     def default_superuser_name(self) -> Optional[str]:",
          "339:         \"\"\" Get default superuser name. \"\"\"",
          "349:     def set_database_connection(self, connection):",
          "350:         \"\"\"",
          "",
          "[Removed Lines]",
          "340:         root = self.__auth_config['method_root'].split(\":\")",
          "342:         # Previously the root file doesn't contain the user name. In this case",
          "343:         # we will return with no user name.",
          "344:         if len(root) <= 1:",
          "345:             return None",
          "347:         return root[0]",
          "",
          "[Added Lines]",
          "332:     @property",
          "333:     def get_super_user(self):",
          "334:         return {",
          "335:             \"super_user\": self.__auth_config.get('super_user'),",
          "336:         }",
          "341:         return self.__auth_config['super_user']",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366:         This validation object contains two keys: username and groups.",
          "367:         \"\"\"",
          "370:             or self.__try_auth_pam(auth_string) \\",
          "371:             or self.__try_auth_ldap(auth_string)",
          "372:         if not validation:",
          "",
          "[Removed Lines]",
          "368:         validation = self.__try_auth_root(auth_string) \\",
          "369:             or self.__try_auth_dictionary(auth_string) \\",
          "",
          "[Added Lines]",
          "362:         validation = self.__try_auth_dictionary(auth_string) \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "387:             'method_' + method in self.__auth_config and \\",
          "388:             self.__auth_config['method_' + method].get('enabled')",
          "406:     def __try_auth_token(self, auth_string):",
          "407:         if not self.__database_connection:",
          "408:             return None",
          "",
          "[Removed Lines]",
          "390:     def __try_auth_root(self, auth_string):",
          "391:         \"\"\"",
          "392:         Try to authenticate the user against the root username:password's hash.",
          "393:         \"\"\"",
          "394:         user_name = SessionManager.get_user_name(auth_string)",
          "395:         sha = hashlib.sha256(auth_string.encode('utf8')).hexdigest()",
          "397:         if f\"{user_name}:{sha}\" == self.__auth_config['method_root']:",
          "398:             return {",
          "399:                 'username': SessionManager.get_user_name(auth_string),",
          "400:                 'groups': [],",
          "401:                 'root': True",
          "402:             }",
          "404:         return False",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "563:     def __is_root_user(self, user_name):",
          "564:         \"\"\" Return True if the given user has system permissions. \"\"\"",
          "566:             return True",
          "568:         transaction = None",
          "",
          "[Removed Lines]",
          "565:         if self.__auth_config['method_root'].split(\":\")[0] == user_name:",
          "",
          "[Added Lines]",
          "542:         if self.__auth_config['super_user'] == user_name:",
          "",
          "---------------"
        ],
        "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js": [
          "File: web/server/vue-cli/e2e/init.workspace.js -> web/server/vue-cli/e2e/init.workspace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const SERVER_CONFIG = {",
          "8:   authentication: {",
          "9:     enabled : true,",
          "10:     session_lifetime : 60000,",
          "11:     refresh_time : 60,",
          "12:     logins_until_cleanup : 30,",
          "13:     method_dictionary: {",
          "14:       enabled : true,",
          "16:       groups : {}",
          "17:     }",
          "18:   }",
          "19: };",
          "25: if (!fs.existsSync(WORKSPACE_DIR)) {",
          "26:   fs.mkdirSync(WORKSPACE_DIR);",
          "",
          "[Removed Lines]",
          "15:       auths : [ \"cc:admin\" ],",
          "21: const ROOT_USER =",
          "22:   \"root:2691b13e4c5eadd0adad38983e611b2caa19caaa3476ccf31cbcadddf65c321c\";",
          "",
          "[Added Lines]",
          "10:     \"super_user\" : \"root\",",
          "16:       auths : [ \"cc:admin\",",
          "17:         \"root:S3cr3t\" ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: const serverConfigFile = path.join(WORKSPACE_DIR, \"server_config.json\");",
          "31: const data = JSON.stringify(SERVER_CONFIG, null, \"  \");",
          "",
          "[Removed Lines]",
          "32: fs.writeFileSync(serverConfigFile, data);",
          "37: const rootUserFile = path.join(WORKSPACE_DIR, \"root.user\");",
          "38: fs.writeFileSync(rootUserFile, ROOT_USER);",
          "",
          "[Added Lines]",
          "31: fs.writeFileSync(serverConfigFile, data);",
          "",
          "---------------"
        ],
        "web/tests/libtest/env.py||web/tests/libtest/env.py": [
          "File: web/tests/libtest/env.py -> web/tests/libtest/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: \"\"\"",
          "14: import os",
          "15: import json",
          "16: import tempfile",
          "17: import shutil",
          "18: import socket",
          "20: import subprocess",
          "22: from codechecker_common.util import load_json",
          "",
          "[Removed Lines]",
          "13: from hashlib import sha256",
          "19: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:     scfg_dict = load_json(server_cfg_file, {})",
          "352:     scfg_dict[\"authentication\"][\"enabled\"] = True",
          "353:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"enabled\"] = True",
          "354:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"auths\"] = \\",
          "355:         [\"cc:test\", \"john:doe\", \"admin:admin123\", \"colon:my:password\",",
          "356:          \"admin_group_user:admin123\", \"regex_admin:blah\",",
          "358:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"groups\"] = \\",
          "359:         {\"admin_group_user\": [\"admin_GROUP\"]}",
          "360:     scfg_dict[\"authentication\"][\"regex_groups\"][\"enabled\"] = True",
          "",
          "[Removed Lines]",
          "357:          \"permission_view_user:pvu\"]",
          "",
          "[Added Lines]",
          "351:     scfg_dict[\"authentication\"][\"super_user\"] = \"root\"",
          "356:          \"permission_view_user:pvu\", \"root:root\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:               encoding=\"utf-8\", errors=\"ignore\") as scfg:",
          "364:         json.dump(scfg_dict, scfg, indent=2, sort_keys=True)",
          "374: def enable_storage_of_analysis_statistics(workspace):",
          "375:     \"\"\"",
          "",
          "[Removed Lines]",
          "366:     # Create a root user.",
          "367:     root_file = os.path.join(workspace, 'root.user')",
          "368:     with open(root_file, 'w',",
          "369:               encoding='utf-8', errors='ignore') as rootf:",
          "370:         rootf.write(f\"root:{sha256(b'root:root').hexdigest()}\")",
          "371:     os.chmod(root_file, stat.S_IRUSR | stat.S_IWUSR)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06bbddd02de4930ecd475c7a0ce38c71fd1106e",
      "candidate_info": {
        "commit_hash": "c06bbddd02de4930ecd475c7a0ce38c71fd1106e",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/c06bbddd02de4930ecd475c7a0ce38c71fd1106e",
        "files": [
          "docs/web/permissions.md",
          "docs/web/user_guide.md",
          "web/server/codechecker_server/cmd/server.py",
          "web/server/codechecker_server/server.py",
          "web/server/codechecker_server/session_manager.py",
          "web/server/vue-cli/e2e/init.workspace.js",
          "web/tests/libtest/env.py"
        ],
        "message": "Removing the root user creation\n\nInstead the user can assign\nthe super user role to a user",
        "before_after_code_files": [
          "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
          "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
          "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
          "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
          "web/tests/libtest/env.py||web/tests/libtest/env.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
            "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
            "web/tests/libtest/env.py||web/tests/libtest/env.py"
          ],
          "candidate": [
            "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py",
            "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py",
            "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py",
            "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js",
            "web/tests/libtest/env.py||web/tests/libtest/env.py"
          ]
        }
      },
      "candidate_diff": {
        "web/server/codechecker_server/cmd/server.py||web/server/codechecker_server/cmd/server.py": [
          "File: web/server/codechecker_server/cmd/server.py -> web/server/codechecker_server/cmd/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: CONFIG_DIRECTORY, and the credentials are printed to the server's standard",
          "213: output. The plaintext credentials are NEVER accessible again.\"\"\")",
          "226:     root_account.add_argument('--force-authentication',",
          "227:                               dest=\"force_auth\",",
          "228:                               action='store_true',",
          "",
          "[Removed Lines]",
          "215:     root_account.add_argument('--reset-root',",
          "216:                               dest=\"reset_root\",",
          "217:                               action='store_true',",
          "218:                               default=argparse.SUPPRESS,",
          "219:                               required=False,",
          "220:                               help=\"Force the server to recreate the master \"",
          "221:                                    \"superuser (root) account name and \"",
          "222:                                    \"password. The previous credentials will \"",
          "223:                                    \"be invalidated, and the new ones will be \"",
          "224:                                    \"printed to the standard output.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "932:             not os.path.isdir(os.path.dirname(args.sqlite)):",
          "933:         os.makedirs(os.path.dirname(args.sqlite))",
          "944:     if 'force_auth' in args:",
          "945:         LOG.info(\"'--force-authentication' was passed as a command-line \"",
          "946:                  \"option. The server will ask for users to authenticate!\")",
          "",
          "[Removed Lines]",
          "935:     if 'reset_root' in args:",
          "936:         try:",
          "937:             os.remove(os.path.join(args.config_directory, 'root.user'))",
          "938:             LOG.info(\"Master superuser (root) credentials invalidated and \"",
          "939:                      \"deleted. New ones will be generated...\")",
          "940:         except OSError:",
          "941:             # File doesn't exist.",
          "942:             pass",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/server.py||web/server/codechecker_server/server.py": [
          "File: web/server/codechecker_server/server.py -> web/server/codechecker_server/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import atexit",
          "15: import datetime",
          "16: from functools import partial",
          "18: from http.server import HTTPServer, SimpleHTTPRequestHandler",
          "19: import os",
          "20: import posixpath",
          "22: import shutil",
          "23: import signal",
          "24: import socket",
          "25: import ssl",
          "26: import sys",
          "28: from typing import List, Optional, Tuple",
          "29: import urllib",
          "",
          "[Removed Lines]",
          "17: from hashlib import sha256",
          "21: from random import sample",
          "27: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     Configuration as ORMConfiguration",
          "69: from .database.database import DBSession",
          "70: from .database.run_db_model import IDENTIFIER as RUN_META, Run, RunLock",
          "74: LOG = get_logger('server')",
          "",
          "[Removed Lines]",
          "71: from .tmp import get_tmp_dir_hash",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "991:     address_family = socket.AF_INET6",
          "1031: def start_server(config_directory, package_data, port, config_sql_server,",
          "1032:                  listen_address, force_auth, skip_db_cleanup: bool,",
          "1033:                  context, check_env):",
          "",
          "[Removed Lines]",
          "994: def __make_root_file(root_file):",
          "995:     \"\"\"",
          "996:     Generate a root username and password SHA. This hash is saved to the",
          "997:     given file path, and is also returned.",
          "998:     \"\"\"",
          "1000:     LOG.debug(\"Generating initial superuser (root) credentials...\")",
          "1002:     username = ''.join(sample(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 6))",
          "1003:     password = get_tmp_dir_hash()[:8]",
          "1005:     LOG.info(\"A NEW superuser credential was generated for the server. \"",
          "1006:              \"This information IS SAVED, thus subsequent server starts \"",
          "1007:              \"WILL use these credentials. You WILL NOT get to see \"",
          "1008:              \"the credentials again, so MAKE SURE YOU REMEMBER THIS \"",
          "1009:              \"LOGIN!\")",
          "1011:     # Highlight the message a bit more, as the server owner configuring the",
          "1012:     # server must know this root access initially.",
          "1013:     credential_msg = f\"The superuser's username is '{username}' with the \" \\",
          "1014:                      f\"password '{password}'\"",
          "1015:     LOG.info(\"-\" * len(credential_msg))",
          "1016:     LOG.info(credential_msg)",
          "1017:     LOG.info(\"-\" * len(credential_msg))",
          "1019:     sha = sha256((username + ':' + password).encode('utf-8')).hexdigest()",
          "1020:     secret = f\"{username}:{sha}\"",
          "1021:     with open(root_file, 'w', encoding=\"utf-8\", errors=\"ignore\") as f:",
          "1022:         LOG.debug(\"Save root SHA256 '%s'\", secret)",
          "1023:         f.write(secret)",
          "1025:     # This file should be only readable by the process owner, and noone else.",
          "1026:     os.chmod(root_file, stat.S_IRUSR)",
          "1028:     return secret",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1039:     server_addr = (listen_address, port)",
          "1041:     root_file = os.path.join(config_directory, 'root.user')",
          "1057:     # Check whether configuration file exists, create an example if not.",
          "1058:     server_cfg_file = os.path.join(config_directory, 'server_config.json')",
          "1059:     if not os.path.exists(server_cfg_file):",
          "",
          "[Removed Lines]",
          "1042:     if not os.path.exists(root_file):",
          "1043:         LOG.warning(\"Server started without 'root.user' present in \"",
          "1044:                     \"CONFIG_DIRECTORY!\")",
          "1045:         root_sha = __make_root_file(root_file)",
          "1046:     else:",
          "1047:         LOG.debug(\"Root file was found. Loading...\")",
          "1048:         try:",
          "1049:             with open(root_file, 'r', encoding=\"utf-8\", errors=\"ignore\") as f:",
          "1050:                 root_sha = f.read()",
          "1051:             LOG.debug(\"Root digest is '%s'\", root_sha)",
          "1052:         except IOError:",
          "1053:             LOG.info(\"Cannot open root file '%s' even though it exists\",",
          "1054:                      root_file)",
          "1055:             root_sha = __make_root_file(root_file)",
          "",
          "[Added Lines]",
          "999:     # The root user file is DEPRECATED AND IGNORED",
          "1001:     if os.path.exists(root_file):",
          "1002:         LOG.warning(\"The 'root.user' file:  %s\"",
          "1003:                     \" is deprecated and ignored. If you want to\"",
          "1004:                     \" setup an initial user with SUPER_USER permission,\"",
          "1005:                     \" configure the super_user field in the server_config.json\"",
          "1006:                     \" as described in the documentation.\"",
          "1007:                     \" To get rid off this warning,\"",
          "1008:                     \" simply delete the root.user file.\",",
          "1009:                     root_file)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1077:     try:",
          "1078:         manager = session_manager.SessionManager(",
          "1079:             server_cfg_file,",
          "1081:             force_auth)",
          "1082:     except IOError as ioerr:",
          "1083:         LOG.debug(ioerr)",
          "",
          "[Removed Lines]",
          "1080:             root_sha,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1098:                       \"Earlier logs might contain additional detailed \"",
          "1099:                       \"reasoning.\\n\\t* %s\", len(fails),",
          "1100:                       \"\\n\\t* \".join(",
          "1102:                       ))",
          "1103:     else:",
          "1104:         LOG.debug(\"Skipping db_cleanup, as requested.\")",
          "",
          "[Removed Lines]",
          "1101:                         (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "[Added Lines]",
          "1053:                           (f\"'{ep}' ({reason})\" for (ep, reason) in fails)",
          "",
          "---------------"
        ],
        "web/server/codechecker_server/session_manager.py||web/server/codechecker_server/session_manager.py": [
          "File: web/server/codechecker_server/session_manager.py -> web/server/codechecker_server/session_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: Handles the management of authentication sessions on the server's side.",
          "10: \"\"\"",
          "13: import json",
          "14: import os",
          "15: import re",
          "",
          "[Removed Lines]",
          "12: import hashlib",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     CodeChecker server.",
          "162:     \"\"\"",
          "165:         \"\"\"",
          "166:         Initialise a new Session Manager on the server.",
          "168:         :param configuration_file: The configuration file to read",
          "169:             authentication backends from.",
          "171:         :param force_auth: If True, the manager will be enabled even if the",
          "172:             configuration file disables authentication.",
          "173:         \"\"\"",
          "",
          "[Removed Lines]",
          "164:     def __init__(self, configuration_file, root_sha, force_auth=False):",
          "170:         :param root_sha: The SHA-256 hash of the root user's authentication.",
          "",
          "[Added Lines]",
          "163:     def __init__(self, configuration_file, force_auth=False):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:         self.__refresh_time = self.__auth_config['refresh_time'] \\",
          "200:             if 'refresh_time' in self.__auth_config else None",
          "205:         self.__regex_groups_enabled = False",
          "207:         # Pre-compile the regular expressions of 'regex_groups'",
          "",
          "[Removed Lines]",
          "202:         # Save the root SHA into the configuration (but only in memory!)",
          "203:         self.__auth_config['method_root'] = root_sha",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:             \"error\": self.__auth_config.get('realm_error')",
          "335:         }",
          "337:     @property",
          "338:     def default_superuser_name(self) -> Optional[str]:",
          "339:         \"\"\" Get default superuser name. \"\"\"",
          "349:     def set_database_connection(self, connection):",
          "350:         \"\"\"",
          "",
          "[Removed Lines]",
          "340:         root = self.__auth_config['method_root'].split(\":\")",
          "342:         # Previously the root file doesn't contain the user name. In this case",
          "343:         # we will return with no user name.",
          "344:         if len(root) <= 1:",
          "345:             return None",
          "347:         return root[0]",
          "",
          "[Added Lines]",
          "332:     @property",
          "333:     def get_super_user(self):",
          "334:         return {",
          "335:             \"super_user\": self.__auth_config.get('super_user'),",
          "336:         }",
          "341:         return self.__auth_config['super_user']",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366:         This validation object contains two keys: username and groups.",
          "367:         \"\"\"",
          "370:             or self.__try_auth_pam(auth_string) \\",
          "371:             or self.__try_auth_ldap(auth_string)",
          "372:         if not validation:",
          "",
          "[Removed Lines]",
          "368:         validation = self.__try_auth_root(auth_string) \\",
          "369:             or self.__try_auth_dictionary(auth_string) \\",
          "",
          "[Added Lines]",
          "362:         validation = self.__try_auth_dictionary(auth_string) \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "387:             'method_' + method in self.__auth_config and \\",
          "388:             self.__auth_config['method_' + method].get('enabled')",
          "406:     def __try_auth_token(self, auth_string):",
          "407:         if not self.__database_connection:",
          "408:             return None",
          "",
          "[Removed Lines]",
          "390:     def __try_auth_root(self, auth_string):",
          "391:         \"\"\"",
          "392:         Try to authenticate the user against the root username:password's hash.",
          "393:         \"\"\"",
          "394:         user_name = SessionManager.get_user_name(auth_string)",
          "395:         sha = hashlib.sha256(auth_string.encode('utf8')).hexdigest()",
          "397:         if f\"{user_name}:{sha}\" == self.__auth_config['method_root']:",
          "398:             return {",
          "399:                 'username': SessionManager.get_user_name(auth_string),",
          "400:                 'groups': [],",
          "401:                 'root': True",
          "402:             }",
          "404:         return False",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "563:     def __is_root_user(self, user_name):",
          "564:         \"\"\" Return True if the given user has system permissions. \"\"\"",
          "566:             return True",
          "568:         transaction = None",
          "",
          "[Removed Lines]",
          "565:         if self.__auth_config['method_root'].split(\":\")[0] == user_name:",
          "",
          "[Added Lines]",
          "542:         if self.__auth_config['super_user'] == user_name:",
          "",
          "---------------"
        ],
        "web/server/vue-cli/e2e/init.workspace.js||web/server/vue-cli/e2e/init.workspace.js": [
          "File: web/server/vue-cli/e2e/init.workspace.js -> web/server/vue-cli/e2e/init.workspace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const SERVER_CONFIG = {",
          "8:   authentication: {",
          "9:     enabled : true,",
          "10:     session_lifetime : 60000,",
          "11:     refresh_time : 60,",
          "12:     logins_until_cleanup : 30,",
          "13:     method_dictionary: {",
          "14:       enabled : true,",
          "16:       groups : {}",
          "17:     }",
          "18:   }",
          "19: };",
          "25: if (!fs.existsSync(WORKSPACE_DIR)) {",
          "26:   fs.mkdirSync(WORKSPACE_DIR);",
          "",
          "[Removed Lines]",
          "15:       auths : [ \"cc:admin\" ],",
          "21: const ROOT_USER =",
          "22:   \"root:2691b13e4c5eadd0adad38983e611b2caa19caaa3476ccf31cbcadddf65c321c\";",
          "",
          "[Added Lines]",
          "10:     \"super_user\" : \"root\",",
          "16:       auths : [ \"cc:admin\",",
          "17:         \"root:S3cr3t\" ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: const serverConfigFile = path.join(WORKSPACE_DIR, \"server_config.json\");",
          "31: const data = JSON.stringify(SERVER_CONFIG, null, \"  \");",
          "",
          "[Removed Lines]",
          "32: fs.writeFileSync(serverConfigFile, data);",
          "37: const rootUserFile = path.join(WORKSPACE_DIR, \"root.user\");",
          "38: fs.writeFileSync(rootUserFile, ROOT_USER);",
          "",
          "[Added Lines]",
          "31: fs.writeFileSync(serverConfigFile, data);",
          "",
          "---------------"
        ],
        "web/tests/libtest/env.py||web/tests/libtest/env.py": [
          "File: web/tests/libtest/env.py -> web/tests/libtest/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: \"\"\"",
          "14: import os",
          "15: import json",
          "16: import tempfile",
          "17: import shutil",
          "18: import socket",
          "20: import subprocess",
          "22: from codechecker_common.util import load_json",
          "",
          "[Removed Lines]",
          "13: from hashlib import sha256",
          "19: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:     scfg_dict = load_json(server_cfg_file, {})",
          "352:     scfg_dict[\"authentication\"][\"enabled\"] = True",
          "353:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"enabled\"] = True",
          "354:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"auths\"] = \\",
          "355:         [\"cc:test\", \"john:doe\", \"admin:admin123\", \"colon:my:password\",",
          "356:          \"admin_group_user:admin123\", \"regex_admin:blah\",",
          "358:     scfg_dict[\"authentication\"][\"method_dictionary\"][\"groups\"] = \\",
          "359:         {\"admin_group_user\": [\"admin_GROUP\"]}",
          "360:     scfg_dict[\"authentication\"][\"regex_groups\"][\"enabled\"] = True",
          "",
          "[Removed Lines]",
          "357:          \"permission_view_user:pvu\"]",
          "",
          "[Added Lines]",
          "351:     scfg_dict[\"authentication\"][\"super_user\"] = \"root\"",
          "356:          \"permission_view_user:pvu\", \"root:root\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:               encoding=\"utf-8\", errors=\"ignore\") as scfg:",
          "364:         json.dump(scfg_dict, scfg, indent=2, sort_keys=True)",
          "374: def enable_storage_of_analysis_statistics(workspace):",
          "375:     \"\"\"",
          "",
          "[Removed Lines]",
          "366:     # Create a root user.",
          "367:     root_file = os.path.join(workspace, 'root.user')",
          "368:     with open(root_file, 'w',",
          "369:               encoding='utf-8', errors='ignore') as rootf:",
          "370:         rootf.write(f\"root:{sha256(b'root:root').hexdigest()}\")",
          "371:     os.chmod(root_file, stat.S_IRUSR | stat.S_IWUSR)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}