{
  "cve_id": "CVE-2022-24815",
  "cve_desc": "JHipster is a development platform to quickly generate, develop, & deploy modern web applications & microservice architectures. SQL Injection vulnerability in entities for applications generated with the option \"reactive with Spring WebFlux\" enabled and an SQL database using r2dbc. Applications created without \"reactive with Spring WebFlux\" and applications with NoSQL databases are not affected. Users who have generated a microservice Gateway using the affected version may be impacted as Gateways are reactive by default. Currently, SQL injection is possible in the findAllBy(Pageable pageable, Criteria criteria) method of an entity repository class generated in these applications as the where clause using Criteria for queries are not sanitized and user input is passed on as it is by the criteria. This issue has been patched in v7.8.1. Users unable to upgrade should be careful when combining criterias and conditions as the root of the issue lies in the `EntityManager.java` class when creating the where clause via `Conditions.just(criteria.toString())`. `just` accepts the literal string provided. Criteria's `toString` method returns a plain string and this combination is vulnerable to sql injection as the string is not sanitized and will contain whatever used passed as input using any plain SQL.",
  "repo": "jhipster/generator-jhipster",
  "patch_hash": "c220a210fd7742c53eea72bd5fadbb96220faa98",
  "patch_info": {
    "commit_hash": "c220a210fd7742c53eea72bd5fadbb96220faa98",
    "repo": "jhipster/generator-jhipster",
    "commit_url": "https://github.com/jhipster/generator-jhipster/commit/c220a210fd7742c53eea72bd5fadbb96220faa98",
    "files": [
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
      "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
    ],
    "message": "use conditions instead of criteria as workaround\n\ncloses #18269",
    "before_after_code_files": [
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
      "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
    ]
  },
  "patch_diff": {
    "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs": [
      "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;",
      "51: import org.springframework.data.relational.core.query.Criteria;",
      "52: import org.springframework.data.relational.core.sql.Column;",
      "53: import org.springframework.data.relational.core.sql.Expression;",
      "54: import org.springframework.data.relational.core.sql.Select;",
      "55: import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: import org.springframework.data.relational.core.sql.Comparison;",
      "54: import org.springframework.data.relational.core.sql.Condition;",
      "55: import org.springframework.data.relational.core.sql.Conditions;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "122:     @Override",
      "123:     public Flux<<%= persistClass %>> findAllBy(Pageable pageable) {",
      "125:     }",
      "133:         List<Expression> columns = <%= entityClass %>SqlHelper.getColumns(entityTable, EntityManager.ENTITY_ALIAS);",
      "134: <%_ reactiveEagerRelations.forEach(function(rel) { _%>",
      "135:         columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper.getColumns(<%= rel.relationshipName %>Table, \"<%= rel.relationshipName %>\"));",
      "",
      "[Removed Lines]",
      "124:         return findAllBy(pageable, null);",
      "127:     @Override",
      "128:     public Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria) {",
      "129:         return createQuery(pageable, criteria).all();",
      "130:     }",
      "132:     RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Criteria criteria) {",
      "",
      "[Added Lines]",
      "127:         return createQuery(pageable, null).all();",
      "130:     RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Condition whereClause) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138: <%_ reactiveEagerRelations.forEach(function(rel) { _%>",
      "139:             .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create(\"<%= rel.joinColumnNames[0] %>\", entityTable)).equals(Column.create(\"<%= rel.otherEntity.primaryKey.fields[0].columnName %>\", <%= rel.relationshipName %>Table ))",
      "140: <%_ }); _%>;",
      "143:         return db.sql(select).map(this::process);",
      "144:     }",
      "146:     @Override",
      "147:     public Flux<<%= persistClass %>> findAll() {",
      "149:     }",
      "151:     @Override",
      "152:     public Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id) {",
      "154:     }",
      "156: <%_ if (implementsEagerLoadApis) { _%>",
      "",
      "[Removed Lines]",
      "142:         String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, criteria);",
      "148:         return findAllBy(null, null);",
      "153:         return createQuery(null, where(EntityManager.ENTITY_ALIAS + \".<%= primaryKey.fields[0].columnName %>\").is(id)).one();",
      "",
      "[Added Lines]",
      "140:         String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, whereClause);",
      "146:         return findAllBy(null);",
      "151:         Comparison whereClause = Conditions.isEqual(entityTable.column(\"<%= primaryKey.fields[0].columnName %>\"), Conditions.just(id.toString()));",
      "152:         return createQuery(null, whereClause).one();",
      "",
      "---------------"
    ],
    "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs": [
      "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:     Flux<<%= persistClass %>> findAll();",
      "146:     Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id);",
      "150:   <%_ if (implementsEagerLoadApis) { _%>",
      "",
      "[Removed Lines]",
      "148:     Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs": [
      "File: generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs -> generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: import org.springframework.data.r2dbc.mapping.OutboundRow;",
      "34: import org.springframework.data.r2dbc.query.UpdateMapper;",
      "35: import org.springframework.data.relational.core.query.Criteria;",
      "36: import org.springframework.data.relational.core.mapping.RelationalPersistentEntity;",
      "37: import org.springframework.data.relational.core.sql.Conditions;",
      "38: import org.springframework.data.relational.core.sql.OrderByField;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: import org.springframework.data.relational.core.sql.Condition;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "97:         if (pageable != null) {",
      "103:         } else {",
      "109:         }",
      "110:     }",
      "",
      "[Removed Lines]",
      "96:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Criteria criteria) {",
      "98:             if (criteria != null) {",
      "99:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(Conditions.just(criteria.toString())), entityType, pageable.getSort());",
      "100:             } else {",
      "101:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "102:             }",
      "104:             if (criteria != null) {",
      "105:                 return createSelectImpl(selectFrom.where(Conditions.just(criteria.toString())), entityType, null);",
      "106:             } else {",
      "107:                 return createSelectImpl(selectFrom, entityType, null);",
      "108:             }",
      "",
      "[Added Lines]",
      "97:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable) {",
      "99:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "101:             return createSelectImpl(selectFrom, entityType, null);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "120:         if (pageable != null) {",
      "126:         } else {",
      "132:         }",
      "133:     }",
      "",
      "[Removed Lines]",
      "119:     public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Criteria criteria) {",
      "121:             if (criteria != null) {",
      "122:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(Conditions.just(criteria.toString())), entityType, pageable.getSort());",
      "123:             } else {",
      "124:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "125:             }",
      "127:             if (criteria != null) {",
      "128:                 return createSelectImpl(selectFrom.where(Conditions.just(criteria.toString())), entityType, null);",
      "129:             } else {",
      "130:                 return createSelectImpl(selectFrom, entityType, null);",
      "131:             }",
      "",
      "[Added Lines]",
      "112:     public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
      "114:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "116:             return createSelectImpl(selectFrom.where(where), entityType, null);",
      "117:         }",
      "118:     }",
      "120:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
      "121:         if (pageable != null) {",
      "122:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
      "123:         } else {",
      "124:             return createSelectImpl(selectFrom.where(where), entityType, null);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd8debc6809567a8734368c7f045bb2c7ae1657a",
      "candidate_info": {
        "commit_hash": "bd8debc6809567a8734368c7f045bb2c7ae1657a",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/bd8debc6809567a8734368c7f045bb2c7ae1657a",
        "files": [
          "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
        ],
        "message": "Update conditions to take where into consideration",
        "before_after_code_files": [
          "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jhipster/generator-jhipster/pull/18294"
        ],
        "olp_code_files": {
          "patch": [
            "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
          ],
          "candidate": [
            "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs": [
          "File: generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs -> generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
          "113:         if (pageable != null) {",
          "115:         } else {",
          "117:         }",
          "118:     }",
          "120:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
          "121:         if (pageable != null) {",
          "123:         } else {",
          "125:         }",
          "126:     }",
          "",
          "[Removed Lines]",
          "114:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
          "116:             return createSelectImpl(selectFrom.where(where), entityType, null);",
          "122:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
          "124:             return createSelectImpl(selectFrom.where(where), entityType, null);",
          "",
          "[Added Lines]",
          "114:             if (where != null) {",
          "115:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
          "116:             } else {",
          "117:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
          "118:             }",
          "120:             if (where != null) {",
          "121:                 return createSelectImpl(selectFrom.where(where), entityType, null);",
          "122:             } else {",
          "123:                 return createSelectImpl(selectFrom, entityType, null);",
          "124:             }",
          "130:             if (where != null) {",
          "131:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
          "132:             } else {",
          "133:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
          "134:             }",
          "136:             if (where != null) {",
          "137:                 return createSelectImpl(selectFrom.where(where), entityType, null);",
          "138:             } else {",
          "139:                 return createSelectImpl(selectFrom, entityType, null);",
          "140:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3dbc18d676f3f19c86d791ef396fe1a1170f049",
      "candidate_info": {
        "commit_hash": "e3dbc18d676f3f19c86d791ef396fe1a1170f049",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/e3dbc18d676f3f19c86d791ef396fe1a1170f049",
        "files": [
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs",
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs"
        ],
        "message": "reactive handles oneToX",
        "before_after_code_files": [
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs",
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
            "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs"
          ],
          "candidate": [
            "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
            "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs": [
          "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepository.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: <%_ } _%>",
          "71: @Repository",
          "72: public interface <%= entityClass %>Repository extends <% if (databaseTypeSql) { %>JpaRepository<% } %><% if (databaseTypeMongodb) { %>MongoRepository<% } %><% if (databaseTypeNeo4j) { %>Neo4jRepository<% } %><% if (databaseTypeCassandra) { %>CassandraRepository<% } %><<%= persistClass %>, <%= primaryKey.type %>><% if (jpaMetamodelFiltering) { %>, JpaSpecificationExecutor<<%= persistClass %>><% } %> {",
          "77:     @Query(\"select <%= entityInstanceDbSafe %> from <%= persistClass %> <%= entityInstanceDbSafe %> where <%= entityInstanceDbSafe %>.<%= relationship.relationshipFieldName %>.login = ?#{principal.<% if (authenticationTypeOauth2) { %>preferredUsername<% } else { %>username<% } %>}\")",
          "78:     List<<%= persistClass %>> findBy<%= relationship.relationshipNameCapitalized %>IsCurrentUser();",
          "80:   <%_ } _%>",
          "85:     @Query(value = \"select distinct <%= entityInstanceDbSafe %> from <%= persistClass %> <%= entityInstanceDbSafe %><%",
          "86:       for (const relationship of relationships) {",
          "",
          "[Removed Lines]",
          "73:   <%_",
          "74:   for (const relationship of relationships) {",
          "75:     if (relationship.relationshipManyToOne && relationship.otherEntityUser && databaseTypeSql) { _%>",
          "79:     <%_ } _%>",
          "81:   <%_",
          "82:   if (relationshipsContainEagerLoad) {",
          "83:     if (databaseTypeSql) { _%>",
          "",
          "[Added Lines]",
          "73: <%_ for (const relationship of relationships) { _%>",
          "74:   <%_ if (relationship.relationshipManyToOne && relationship.otherEntityUser && databaseTypeSql) { _%>",
          "79: <%_ } _%>",
          "80: <%_ if (relationshipsContainEagerLoad) { _%>",
          "81:   <%_ if (databaseTypeSql) { _%>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         if (relationship.relationshipEagerLoad) { %> left join fetch <%= entityInstanceDbSafe %>.<%= relationship.reference.name %><% }",
          "101:       } %> where <%= entityInstanceDbSafe %>.id =:id\")",
          "102:     Optional<<%= persistClass %>> findOneWithEagerRelationships(@Param(\"id\") <%= primaryKey.type %> id);",
          "106:     @Query(\"{}\")",
          "107:     Page<<%= persistClass %>> findAllWithEagerRelationships(Pageable pageable);",
          "",
          "[Removed Lines]",
          "103:     <%_",
          "104:     } else if (databaseTypeMongodb)  { _%>",
          "",
          "[Added Lines]",
          "101:     <%_ } else if (databaseTypeMongodb)  { _%>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     @Query(\"{'id': ?0}\")",
          "113:     Optional<<%= persistClass %>> findOneWithEagerRelationships(<%= primaryKey.type %> id);",
          "118: }",
          "",
          "[Removed Lines]",
          "114:     <%_",
          "115:     }",
          "116:   }",
          "117:   _%>",
          "",
          "[Added Lines]",
          "111:   <%_ } _%>",
          "112: <%_ } _%>",
          "",
          "---------------"
        ],
        "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs": [
          "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: <%_ if (databaseTypeSql) { _%>",
          "42: import io.r2dbc.spi.Row;",
          "43: import io.r2dbc.spi.RowMetadata;",
          "44: import org.springframework.data.r2dbc.convert.R2dbcConverter;",
          "45: import org.springframework.data.r2dbc.core.R2dbcEntityOperations;",
          "46: import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import static org.springframework.data.relational.core.query.Criteria.where;",
          "45:   <%_ if (fieldsContainOwnerManyToMany) { _%>",
          "46: import static org.springframework.data.relational.core.query.Query.query;",
          "47:   <%_ } _%>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: <%_ reactiveEagerRelations.forEach(function(rel) { _%>",
          "134:         columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper.getColumns(<%= rel.relationshipName %>Table, \"<%= rel.relationshipName %>\"));",
          "135: <%_ }); _%>",
          "140:         String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, criteria);",
          "141:         return db.sql(select).map(this::process);",
          "142:     }",
          "144: <%_ if (fieldsContainOwnerManyToMany) { _%>",
          "146:     @Override",
          "",
          "[Removed Lines]",
          "136:         SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %> selectFrom = Select.builder().select(columns).from(entityTable)<%_ reactiveEagerRelations.forEach(function(rel) {",
          "137:             const colName = _getJoinColumnName(rel); %>",
          "138:             .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create(\"<%= colName %>\", entityTable)).equals(Column.create(\"id\", <%= rel.relationshipName %>Table ))<%_ }); _%>;",
          "",
          "[Added Lines]",
          "140:         SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %> selectFrom = Select.builder().select(columns).from(entityTable)",
          "141: <%_ reactiveEagerRelations.forEach(function(rel) {",
          "142:             const colName = _getJoinColumnName(rel); _%>",
          "143:             .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create(\"<%= colName %>\", entityTable)).equals(Column.create(\"id\", <%= rel.relationshipName %>Table ))",
          "144: <%_ }); _%>;",
          "150:     @Override",
          "151:     public Flux<<%= persistClass %>> findAll() {",
          "152:         return findAllBy(null, null);",
          "153:     }",
          "155:     @Override",
          "156:     public Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id) {",
          "157:         return createQuery(null, where(EntityManager.ENTITY_ALIAS + \".<%= primaryKey.name %>\").is(id)).one();",
          "158:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:         return entity;",
          "168:     }",
          "171:     @Override",
          "172:     public <S extends <%= persistClass %>> Mono<S> save(S entity) {",
          "173:         if (entity.get<%= primaryKey.nameCapitalized %>() == null && entity.get<%= mapsIdAssoc.relationshipNameCapitalized %>() != null) {",
          "174:             entity.set<%= primaryKey.nameCapitalized %>(entity.get<%= mapsIdAssoc.relationshipNameCapitalized %>().get<%= mapsIdAssoc.otherEntity.primaryKey.nameCapitalized %>());",
          "175:             return entityManager.insert(entity);",
          "176:         }",
          "178:     }",
          "179: <%_ } _%>",
          "180: }",
          "",
          "[Removed Lines]",
          "170: <%_ if (isUsingMapsId) { _%>",
          "177:         return super.save(entity);",
          "",
          "[Added Lines]",
          "188: <%_ if (isUsingMapsId) { _%>",
          "193: <%_ } _%>",
          "194:         return super.save(entity)<% if (fieldsContainOwnerManyToMany) { %>.flatMap((S e) -> updateRelations(e))<% } %>;",
          "197: <%_ if (fieldsContainOwnerManyToMany) { _%>",
          "198:     protected <S extends <%= persistClass %>> Mono<S> updateRelations(S entity) {",
          "199:   <%_ relationships.filter(function(rel) {",
          "200:     return (rel.relationshipManyToMany && rel.ownerSide);",
          "201:    }).forEach(function(rel, idx) { _%>",
          "202:     <%_ if (idx === 0) { _%>",
          "203:         Mono<Void> result = entityManager.updateLinkTable(<%= rel.relationshipName %>Link, entity.get<%= primaryKey.nameCapitalized %>(), entity.get<%= rel.relationshipNameCapitalizedPlural %>().stream().map(<%= asEntity(rel.otherEntityNameCapitalized) %>::getId)).then();",
          "204:     <%_ } else { _%>",
          "205:         result = result.and(entityManager.updateLinkTable(<%= rel.relationshipName %>Link, entity.get<%= primaryKey.nameCapitalized %>(), entity.get<%= rel.relationshipNameCapitalizedPlural %>().stream().map(<%= asEntity(rel.otherEntityNameCapitalized) %>::getId)));",
          "206:     <%_ } _%>",
          "207:   <%_ }); _%>",
          "208:         return result.thenReturn(entity);",
          "209:     }",
          "211:     @Override",
          "212:     public Mono<Void> deleteById(Long entityId) {",
          "213:         return deleteRelations(entityId)",
          "214:             .then(super.deleteById(entityId));",
          "215:     }",
          "217:     protected Mono<Void> deleteRelations(Long entityId) {",
          "218:   <%_ relationships.filter(function(rel) {",
          "219:       return (rel.relationshipManyToMany && rel.ownerSide);",
          "220:     }).forEach(function(rel, idx) { _%>",
          "221:     <%_ if (idx === 0) { _%>",
          "222:         return entityManager.deleteFromLinkTable(<%= rel.relationshipName %>Link, entityId)",
          "223:     <%_} else { _%>",
          "224:             .and(entityManager.deleteFromLinkTable(<%= rel.relationshipName %>Link, entityId))",
          "225:     <%_ } _%>",
          "226:   <%_ }); %>;",
          "227:         }",
          "",
          "---------------"
        ],
        "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs": [
          "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     Mono<<%= persistClass %>> findOneWithEagerRelationships(<%= primaryKey.type %> id);",
          "91:   <%_ } _%>",
          "92: <%_ } _%>",
          "97:     @Override",
          "98:     Mono<<%= persistClass %>> findOneWithEagerRelationships(<%= primaryKey.type %> id);",
          "",
          "[Removed Lines]",
          "93: <%_",
          "94: if (databaseTypeSql) {",
          "95:   if (fieldsContainOwnerManyToMany) { _%>",
          "",
          "[Added Lines]",
          "92: <%_ if (databaseTypeSql) { _%>",
          "93:   <%_ if (fieldsContainOwnerManyToMany) { _%>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     @Override",
          "104:     Flux<<%= persistClass %>> findAllWithEagerRelationships(Pageable page);",
          "109:   <%_ } _%>",
          "113:     let relationshipName = relationship.relationshipName;",
          "117:     @Query(\"SELECT * FROM <%= entityTableName %> entity WHERE entity.<%= getColumnName(relationshipName) %>_id = :id\")",
          "118:     Flux<<%= persistClass %>> findBy<%= relationship.relationshipNameCapitalized %>(<%= primaryKey.type %> id);",
          "",
          "[Removed Lines]",
          "106:     @Override",
          "107:     Mono<Void> deleteById(<%= primaryKey.type %> id);",
          "111:   <%_",
          "112:   for (const relationship of relationships) {",
          "114:     let ownerSide = relationship.ownerSide;",
          "115:     if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>",
          "",
          "[Added Lines]",
          "106:   <%_ for (const relationship of relationships) {",
          "108:     let ownerSide = relationship.ownerSide; _%>",
          "109:     <%_ if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     <%_ } _%>",
          "134:   <%_ } _%>",
          "138:     Flux<<%= persistClass %>> findAll();",
          "141:     Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id);",
          "146: <%_ } _%>",
          "148: }",
          "149: <%_ if (databaseTypeSql) { _%>",
          "150: interface <%= entityClass %>RepositoryInternal {",
          "151:     <S extends <%= persistClass %>> Mono<S> save(S entity);",
          "152:     Flux<<%= persistClass %>> findAllBy(Pageable pageable);",
          "153:     Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria);",
          "155:   <%_ if (fieldsContainOwnerManyToMany) { _%>",
          "",
          "[Removed Lines]",
          "137:     @Override",
          "140:     @Override",
          "143:     @Override",
          "144:     <S extends <%= persistClass %>> Mono<S> save(S entity);",
          "",
          "[Added Lines]",
          "130:     <S extends <%= persistClass %>> Mono<S> save(S entity);",
          "136:     Mono<Void> deleteById(<%= primaryKey.type %> id);",
          "146:     Flux<<%= persistClass %>> findAll();",
          "148:     Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     Flux<<%= persistClass %>> findAllWithEagerRelationships();",
          "161:     Flux<<%= persistClass %>> findAllWithEagerRelationships(Pageable page);",
          "162:   <%_ } _%>",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:     Mono<Void> deleteById(<%= primaryKey.type %> id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a75fa5ef3daa5dd99e082240512a1d1cb9424c1c",
      "candidate_info": {
        "commit_hash": "a75fa5ef3daa5dd99e082240512a1d1cb9424c1c",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/a75fa5ef3daa5dd99e082240512a1d1cb9424c1c",
        "files": [
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl"
        ],
        "message": "Fixes to reactive entitySuffix",
        "before_after_code_files": [
          "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl||test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs"
          ],
          "candidate": [
            "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs": [
          "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     public <%= entityClass %>RepositoryInternalImpl(R2dbcEntityTemplate template, EntityManager entityManager<%_",
          "113:             reactiveUniqueEntityTypes.forEach(function(element) { _%>, <%= element %>RowMapper <%= element.toLowerCase() %>Mapper<%_ }); _%>, R2dbcEntityOperations entityOperations,",
          "114:         R2dbcConverter converter) {",
          "116:         this.db = template.getDatabaseClient();",
          "117:         this.r2dbcEntityTemplate = template;",
          "118:         this.entityManager = entityManager;",
          "",
          "[Removed Lines]",
          "115:         super(new MappingRelationalEntityInformation(converter.getMappingContext().getRequiredPersistentEntity(<%= entityClass %>.class)), entityOperations, converter);",
          "",
          "[Added Lines]",
          "115:         super(new MappingRelationalEntityInformation(converter.getMappingContext().getRequiredPersistentEntity(<%= Class %>.class)), entityOperations, converter);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:     }",
          "134:     RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Criteria criteria) {",
          "136: <%_ reactiveEagerRelations.forEach(function(rel) { _%>",
          "137:         columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper.getColumns(<%= rel.relationshipName %>Table, \"<%= rel.relationshipName %>\"));",
          "138: <%_ }); _%>",
          "",
          "[Removed Lines]",
          "135:         List<Expression> columns = <%= persistClass %>SqlHelper.getColumns(entityTable, EntityManager.ENTITY_ALIAS);",
          "",
          "[Added Lines]",
          "135:         List<Expression> columns = <%= entityClass %>SqlHelper.getColumns(entityTable, EntityManager.ENTITY_ALIAS);",
          "",
          "---------------"
        ],
        "test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl||test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl": [
          "File: test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl -> test-integration/jdl-samples/mf-ngx-eureka-jwt-psql-ehcache/blog-store.jdl",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: service Product with serviceClass",
          "152: service Notification with serviceImpl",
          "155: microservice Product with store",
          "156: microservice Blog, Post, Tag with blog",
          "",
          "[Removed Lines]",
          "153: dto Blog, Post, Tag with mapstruct",
          "",
          "[Added Lines]",
          "153: dto Blog, Post, Tag, Notification with mapstruct",
          "",
          "---------------"
        ]
      }
    }
  ]
}