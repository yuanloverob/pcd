{
  "cve_id": "CVE-2024-41659",
  "cve_desc": "memos is a privacy-first, lightweight note-taking service. A CORS misconfiguration exists in memos 0.20.1 and earlier where an arbitrary origin is reflected with Access-Control-Allow-Credentials set to true. This may allow an attacking website to make a cross-origin request, allowing the attacker to read private information or make privileged changes to the system as the vulnerable user account. This vulnerability is fixed in 0.21.0.",
  "repo": "usememos/memos",
  "patch_hash": "8101a5e0b162044c16385bee4f12a4a653d050b9",
  "patch_info": {
    "commit_hash": "8101a5e0b162044c16385bee4f12a4a653d050b9",
    "repo": "usememos/memos",
    "commit_url": "https://github.com/usememos/memos/commit/8101a5e0b162044c16385bee4f12a4a653d050b9",
    "files": [
      "bin/memos/main.go",
      "server/profile/profile.go",
      "server/server.go"
    ],
    "message": "chore: add origin flag to config cors",
    "before_after_code_files": [
      "bin/memos/main.go||bin/memos/main.go",
      "server/profile/profile.go||server/profile/profile.go",
      "server/server.go||server/server.go"
    ]
  },
  "patch_diff": {
    "bin/memos/main.go||bin/memos/main.go": [
      "File: bin/memos/main.go -> bin/memos/main.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: )",
      "33: var (",
      "43:  rootCmd = &cobra.Command{",
      "44:   Use:   \"memos\",",
      "46:   Run: func(_cmd *cobra.Command, _args []string) {",
      "47:    ctx, cancel := context.WithCancel(context.Background())",
      "48:    dbDriver, err := db.NewDBDriver(profile)",
      "",
      "[Removed Lines]",
      "34:  profile       *_profile.Profile",
      "35:  mode          string",
      "36:  addr          string",
      "37:  port          int",
      "38:  data          string",
      "39:  driver        string",
      "40:  dsn           string",
      "41:  serveFrontend bool",
      "45:   Short: `An open-source, self-hosted memo hub with knowledge management and social networking.`,",
      "",
      "[Added Lines]",
      "34:  profile        *_profile.Profile",
      "35:  mode           string",
      "36:  addr           string",
      "37:  port           int",
      "38:  data           string",
      "39:  driver         string",
      "40:  dsn            string",
      "41:  serveFrontend  bool",
      "42:  allowedOrigins []string",
      "46:   Short: `An open source, lightweight note-taking service. Easily capture and share your great thoughts.`,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:  rootCmd.PersistentFlags().StringVarP(&driver, \"driver\", \"\", \"\", \"database driver\")",
      "115:  rootCmd.PersistentFlags().StringVarP(&dsn, \"dsn\", \"\", \"\", \"database source name(aka. DSN)\")",
      "116:  rootCmd.PersistentFlags().BoolVarP(&serveFrontend, \"frontend\", \"\", true, \"serve frontend files\")",
      "118:  err := viper.BindPFlag(\"mode\", rootCmd.PersistentFlags().Lookup(\"mode\"))",
      "119:  if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:  rootCmd.PersistentFlags().StringArrayVarP(&allowedOrigins, \"origins\", \"\", []string{}, \"CORS allowed domain origins\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "143:  if err != nil {",
      "144:   panic(err)",
      "145:  }",
      "147:  viper.SetDefault(\"mode\", \"demo\")",
      "148:  viper.SetDefault(\"driver\", \"sqlite\")",
      "149:  viper.SetDefault(\"addr\", \"\")",
      "150:  viper.SetDefault(\"port\", 8081)",
      "151:  viper.SetDefault(\"frontend\", true)",
      "152:  viper.SetEnvPrefix(\"memos\")",
      "153: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:  err = viper.BindPFlag(\"origins\", rootCmd.PersistentFlags().Lookup(\"origins\"))",
      "149:  if err != nil {",
      "150:   panic(err)",
      "151:  }",
      "158:  viper.SetDefault(\"origins\", []string{})",
      "",
      "---------------"
    ],
    "server/profile/profile.go||server/profile/profile.go": [
      "File: server/profile/profile.go -> server/profile/profile.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  Version string `json:\"version\"`",
      "34:  Frontend bool `json:\"-\"`",
      "35: }",
      "37: func (p *Profile) IsDev() bool {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36:  Origins []string `json:\"-\"`",
      "",
      "---------------"
    ],
    "server/server.go||server/server.go": [
      "File: server/server.go -> server/server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:  }",
      "54:  serverID, err := s.getSystemServerID(ctx)",
      "55:  if err != nil {",
      "",
      "[Removed Lines]",
      "52:  e.Use(CORSMiddleware())",
      "",
      "[Added Lines]",
      "52:  e.Use(CORSMiddleware(s.Profile.Origins))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:  return strings.HasPrefix(c.Request().URL.Path, \"/memos.api.v2.\")",
      "161: }",
      "164:  return func(next echo.HandlerFunc) echo.HandlerFunc {",
      "165:   return func(c echo.Context) error {",
      "166:    if grpcRequestSkipper(c) {",
      "",
      "[Removed Lines]",
      "163: func CORSMiddleware() echo.MiddlewareFunc {",
      "",
      "[Added Lines]",
      "163: func CORSMiddleware(origins []string) echo.MiddlewareFunc {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "170:    r := c.Request()",
      "171:    w := c.Response().Writer",
      "174:    w.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, PATCH, OPTIONS\")",
      "175:    w.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")",
      "176:    w.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")",
      "",
      "[Removed Lines]",
      "173:    w.Header().Set(\"Access-Control-Allow-Origin\", r.Header.Get(\"Origin\"))",
      "",
      "[Added Lines]",
      "173:    requestOrigin := r.Header.Get(\"Origin\")",
      "174:    if len(origins) == 0 {",
      "175:     w.Header().Set(\"Access-Control-Allow-Origin\", requestOrigin)",
      "176:    } else {",
      "177:     for _, origin := range origins {",
      "178:      if origin == requestOrigin {",
      "179:       w.Header().Set(\"Access-Control-Allow-Origin\", origin)",
      "180:       break",
      "181:      }",
      "182:     }",
      "183:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15c90871d966a1dc5e3621e312d4cb0d39f561ad",
      "candidate_info": {
        "commit_hash": "15c90871d966a1dc5e3621e312d4cb0d39f561ad",
        "repo": "usememos/memos",
        "commit_url": "https://github.com/usememos/memos/commit/15c90871d966a1dc5e3621e312d4cb0d39f561ad",
        "files": [
          "server/server.go",
          "web/src/grpcweb.ts",
          "web/src/helpers/api.ts"
        ],
        "message": "chore: update request base url",
        "before_after_code_files": [
          "server/server.go||server/server.go",
          "web/src/grpcweb.ts||wesrc/grpcweb.ts",
          "web/src/helpers/api.ts||wesrc/helpers/api.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/server.go||server/server.go"
          ],
          "candidate": [
            "server/server.go||server/server.go"
          ]
        }
      },
      "candidate_diff": {
        "server/server.go||server/server.go": [
          "File: server/server.go -> server/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   AllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},",
          "63:  }))",
          "65:  e.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{",
          "66:   Skipper: timeoutSkipper,",
          "67:   Timeout: 30 * time.Second,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  e.Use(CORSMiddleware())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:  return c.Request().Method == http.MethodPost && c.Request().URL.Path == \"/api/v1/resource/blob\"",
          "186: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: func CORSMiddleware() echo.MiddlewareFunc {",
          "191:  return func(next echo.HandlerFunc) echo.HandlerFunc {",
          "192:   return func(c echo.Context) error {",
          "193:    if grpcRequestSkipper(c) {",
          "194:     return next(c)",
          "195:    }",
          "197:    r := c.Request()",
          "198:    w := c.Response().Writer",
          "200:    w.Header().Set(\"Access-Control-Allow-Origin\", r.Header.Get(\"Origin\"))",
          "201:    w.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")",
          "202:    w.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")",
          "203:    w.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")",
          "206:    if r.Method == \"OPTIONS\" {",
          "207:     w.WriteHeader(http.StatusOK)",
          "208:     return nil",
          "209:    }",
          "212:    next(c)",
          "213:    return nil",
          "214:   }",
          "215:  }",
          "216: }",
          "",
          "---------------"
        ],
        "web/src/grpcweb.ts||wesrc/grpcweb.ts": [
          "File: web/src/grpcweb.ts -> wesrc/grpcweb.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import { WorkspaceServiceDefinition } from \"./types/proto/api/v2/workspace_service\";",
          "12: const channel = createChannel(",
          "14:   FetchTransport({",
          "15:     credentials: \"include\",",
          "16:   }),",
          "",
          "[Removed Lines]",
          "13:   window.location.origin,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/src/helpers/api.ts||wesrc/helpers/api.ts": [
          "File: web/src/helpers/api.ts -> wesrc/helpers/api.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import axios from \"axios\";",
          "2: import { Resource } from \"@/types/proto/api/v2/resource_service\";",
          "4: export function getSystemStatus() {",
          "5:   return axios.get<SystemStatus>(\"/api/v1/status\");",
          "6: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d967f41d968c882c342e65578a36da2e2df9579",
      "candidate_info": {
        "commit_hash": "5d967f41d968c882c342e65578a36da2e2df9579",
        "repo": "usememos/memos",
        "commit_url": "https://github.com/usememos/memos/commit/5d967f41d968c882c342e65578a36da2e2df9579",
        "files": [
          "go.mod",
          "go.sum",
          "server/route/api/v2/v2.go",
          "server/server.go"
        ],
        "message": "chore: update server",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "server/route/api/v2/v2.go||server/route/api/v2/v2.go",
          "server/server.go||server/server.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/server.go||server/server.go"
          ],
          "candidate": [
            "server/server.go||server/server.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  github.com/mitchellh/mapstructure v1.5.0 // indirect",
          "91:  github.com/pelletier/go-toml/v2 v2.2.1 // indirect",
          "92:  github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect",
          "93:  github.com/spf13/afero v1.11.0 // indirect",
          "94:  github.com/spf13/cast v1.6.0 // indirect",
          "95:  github.com/spf13/pflag v1.0.5 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  github.com/soheilhy/cmux v0.1.5",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "395: github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=",
          "396: github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=",
          "397: github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=",
          "398: github.com/sony/gobreaker v0.4.1/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=",
          "399: github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=",
          "400: github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398: github.com/soheilhy/cmux v0.1.5 h1:jjzc5WVemNEDTLwv9tlmemhC73tI08BNOIGwBOo10Js=",
          "399: github.com/soheilhy/cmux v0.1.5/go.mod h1:T7TcVDs9LWfQgPlPsdngu6I6QIoyIFZDDC6sNE1GqG0=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507: golang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=",
          "508: golang.org/x/net v0.0.0-20200421231249-e086a090c8fd/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=",
          "509: golang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=",
          "510: golang.org/x/net v0.0.0-20210805182204-aaa1db679c0d/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=",
          "511: golang.org/x/net v0.24.0 h1:1PcaxkF854Fu3+lvBIx5SYn9wRlBzzcnHZSiaFFAb0w=",
          "512: golang.org/x/net v0.24.0/go.mod h1:2Q7sJY5mzlzWjKtYUEXSlBWCdyaioyXzRB2RtU8KVE8=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512: golang.org/x/net v0.0.0-20201202161906-c7110b5ffcbb/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "546: golang.org/x/sys v0.0.0-20200420163511-1957bb5e6d1f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "547: golang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "548: golang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "549: golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "550: golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "551: golang.org/x/sys v0.0.0-20210809222454-d867a43fc93e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552: golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556: golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=",
          "557: golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "558: golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=",
          "559: golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "560: golang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=",
          "561: golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563: golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "",
          "---------------"
        ],
        "server/route/api/v2/v2.go||server/route/api/v2/v2.go": [
          "File: server/route/api/v2/v2.go -> server/route/api/v2/v2.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "9:  \"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"",
          "10:  \"github.com/improbable-eng/grpc-web/go/grpcweb\"",
          "11:  \"github.com/labstack/echo/v4\"",
          "13:  \"google.golang.org/grpc\"",
          "14:  \"google.golang.org/grpc/credentials/insecure\"",
          "15:  \"google.golang.org/grpc/reflection\"",
          "",
          "[Removed Lines]",
          "6:  \"log/slog\"",
          "7:  \"net\"",
          "12:  \"github.com/pkg/errors\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:  Profile *profile.Profile",
          "39:  Store   *store.Store",
          "43: }",
          "46:  grpc.EnableTracing = true",
          "54:  apiv2Service := &APIV2Service{",
          "60:  }",
          "62:  apiv2pb.RegisterWorkspaceServiceServer(grpcServer, apiv2Service)",
          "63:  apiv2pb.RegisterWorkspaceSettingServiceServer(grpcServer, apiv2Service)",
          "64:  apiv2pb.RegisterAuthServiceServer(grpcServer, apiv2Service)",
          "",
          "[Removed Lines]",
          "41:  grpcServer     *grpc.Server",
          "42:  grpcServerPort int",
          "45: func NewAPIV2Service(secret string, profile *profile.Profile, store *store.Store, grpcServerPort int) *APIV2Service {",
          "47:  authProvider := NewGRPCAuthInterceptor(store, secret)",
          "48:  grpcServer := grpc.NewServer(",
          "49:   grpc.ChainUnaryInterceptor(",
          "50:    NewLoggerInterceptor().LoggerInterceptor,",
          "51:    authProvider.AuthenticationInterceptor,",
          "52:   ),",
          "53:  )",
          "55:   Secret:         secret,",
          "56:   Profile:        profile,",
          "57:   Store:          store,",
          "58:   grpcServer:     grpcServer,",
          "59:   grpcServerPort: grpcServerPort,",
          "",
          "[Added Lines]",
          "38:  grpcServer *grpc.Server",
          "41: func NewAPIV2Service(secret string, profile *profile.Profile, store *store.Store, grpcServer *grpc.Server) *APIV2Service {",
          "44:   Secret:     secret,",
          "45:   Profile:    profile,",
          "46:   Store:      store,",
          "47:   grpcServer: grpcServer,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:  apiv2pb.RegisterStorageServiceServer(grpcServer, apiv2Service)",
          "74:  apiv2pb.RegisterIdentityProviderServiceServer(grpcServer, apiv2Service)",
          "75:  reflection.Register(grpcServer)",
          "77:  return apiv2Service",
          "78: }",
          "88:  conn, err := grpc.DialContext(",
          "89:   ctx,",
          "91:   grpc.WithTransportCredentials(insecure.NewCredentials()),",
          "92:  )",
          "93:  if err != nil {",
          "",
          "[Removed Lines]",
          "80: func (s *APIV2Service) GetGRPCServer() *grpc.Server {",
          "81:  return s.grpcServer",
          "82: }",
          "85: func (s *APIV2Service) RegisterGateway(ctx context.Context, e *echo.Echo) error {",
          "90:   fmt.Sprintf(\":%d\", s.grpcServerPort),",
          "",
          "[Added Lines]",
          "67: func (s *APIV2Service) RegisterGateway(ctx context.Context, echoServer *echo.Echo) error {",
          "72:   fmt.Sprintf(\":%d\", s.Profile.Port),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:  if err := apiv2pb.RegisterIdentityProviderServiceHandler(context.Background(), gwMux, conn); err != nil {",
          "135:   return err",
          "136:  }",
          "140:  options := []grpcweb.Option{",
          "",
          "[Removed Lines]",
          "137:  e.Any(\"/api/v2/*\", echo.WrapHandler(gwMux))",
          "",
          "[Added Lines]",
          "119:  echoServer.Any(\"/api/v2/*\", echo.WrapHandler(gwMux))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "144:   }),",
          "145:  }",
          "146:  wrappedGrpc := grpcweb.WrapServer(s.grpcServer, options...)",
          "160:  return nil",
          "161: }",
          "",
          "[Removed Lines]",
          "147:  e.Any(\"/memos.api.v2.*\", echo.WrapHandler(wrappedGrpc))",
          "150:  listen, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", s.Profile.Addr, s.grpcServerPort))",
          "151:  if err != nil {",
          "152:   return errors.Wrap(err, \"failed to start gRPC server\")",
          "153:  }",
          "154:  go func() {",
          "155:   if err := s.grpcServer.Serve(listen); err != nil {",
          "156:    slog.Error(\"failed to start gRPC server\", err)",
          "157:   }",
          "158:  }()",
          "",
          "[Added Lines]",
          "129:  echoServer.Any(\"/memos.api.v2.*\", echo.WrapHandler(wrappedGrpc))",
          "",
          "---------------"
        ],
        "server/server.go||server/server.go": [
          "File: server/server.go -> server/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"net/http\"",
          "7:  \"strings\"",
          "8:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"log/slog\"",
          "7:  \"net\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:  \"github.com/google/uuid\"",
          "11:  \"github.com/labstack/echo/v4\"",
          "12:  \"github.com/pkg/errors\"",
          "14:  storepb \"github.com/usememos/memos/proto/gen/store\"",
          "15:  \"github.com/usememos/memos/server/profile\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  \"github.com/soheilhy/cmux\"",
          "16:  \"google.golang.org/grpc\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "23: )",
          "25: type Server struct {",
          "28:  ID      string",
          "29:  Secret  string",
          "30:  Profile *profile.Profile",
          "31:  Store   *store.Store",
          "32: }",
          "34: func NewServer(ctx context.Context, profile *profile.Profile, store *store.Store) (*Server, error) {",
          "40:  s := &Server{",
          "42:   Store:   store,",
          "43:   Profile: profile,",
          "44:  }",
          "49:  workspaceBasicSetting, err := s.getOrUpsertWorkspaceBasicSetting(ctx)",
          "50:  if err != nil {",
          "",
          "[Removed Lines]",
          "26:  e *echo.Echo",
          "35:  e := echo.New()",
          "36:  e.Debug = true",
          "37:  e.HideBanner = true",
          "38:  e.HidePort = true",
          "41:   e:       e,",
          "47:  e.Use(CORSMiddleware(s.Profile.Origins))",
          "",
          "[Added Lines]",
          "35:  echoServer *echo.Echo",
          "36:  grpcServer *grpc.Server",
          "45:  echoServer := echo.New()",
          "46:  echoServer.Debug = true",
          "47:  echoServer.HideBanner = true",
          "48:  echoServer.HidePort = true",
          "49:  s.echoServer = echoServer",
          "52:  echoServer.Use(CORSMiddleware(s.Profile.Origins))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:  s.Secret = secret",
          "63:   return c.String(http.StatusOK, \"Service ready.\")",
          "64:  })",
          "67:  if profile.Frontend {",
          "68:   frontendService := frontend.NewFrontendService(profile, store)",
          "70:  }",
          "75:  publicGroup := rootGroup.Group(\"/o\")",
          "",
          "[Removed Lines]",
          "62:  e.GET(\"/healthz\", func(c echo.Context) error {",
          "69:   frontendService.Serve(ctx, e)",
          "72:  rootGroup := e.Group(\"\")",
          "",
          "[Added Lines]",
          "67:  echoServer.GET(\"/healthz\", func(c echo.Context) error {",
          "74:   frontendService.Serve(ctx, echoServer)",
          "77:  rootGroup := echoServer.Group(\"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:  rss.NewRSSService(s.Profile, s.Store).RegisterRoutes(rootGroup)",
          "89:   return nil, errors.Wrap(err, \"failed to register gRPC gateway\")",
          "90:  }",
          "",
          "[Removed Lines]",
          "86:  apiV2Service := apiv2.NewAPIV2Service(s.Secret, profile, store, s.Profile.Port+1)",
          "88:  if err := apiV2Service.RegisterGateway(ctx, e); err != nil {",
          "",
          "[Added Lines]",
          "91:  grpcServer := grpc.NewServer(grpc.ChainUnaryInterceptor(",
          "92:   apiv2.NewLoggerInterceptor().LoggerInterceptor,",
          "93:   apiv2.NewGRPCAuthInterceptor(store, secret).AuthenticationInterceptor,",
          "94:  ))",
          "95:  s.grpcServer = grpcServer",
          "97:  apiV2Service := apiv2.NewAPIV2Service(s.Secret, profile, store, grpcServer)",
          "99:  if err := apiV2Service.RegisterGateway(ctx, echoServer); err != nil {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93: }",
          "95: func (s *Server) Start(ctx context.Context) error {",
          "98: }",
          "100: func (s *Server) Shutdown(ctx context.Context) {",
          "",
          "[Removed Lines]",
          "96:  go versionchecker.NewVersionChecker(s.Store, s.Profile).Start(ctx)",
          "97:  return s.e.Start(fmt.Sprintf(\"%s:%d\", s.Profile.Addr, s.Profile.Port))",
          "",
          "[Added Lines]",
          "107:  address := fmt.Sprintf(\":%d\", s.Profile.Port)",
          "108:  listener, err := net.Listen(\"tcp\", address)",
          "109:  if err != nil {",
          "110:   return errors.Wrap(err, \"failed to listen\")",
          "111:  }",
          "113:  muxServer := cmux.New(listener)",
          "114:  go func() {",
          "115:   grpcListener := muxServer.Match(cmux.HTTP2HeaderField(\"content-type\", \"application/grpc\"))",
          "116:   if err := s.grpcServer.Serve(grpcListener); err != nil {",
          "117:    slog.Error(\"failed to serve gRPC\", err)",
          "118:   }",
          "119:  }()",
          "120:  go func() {",
          "121:   httpListener := muxServer.Match(cmux.HTTP1Fast(), cmux.Any())",
          "122:   s.echoServer.Listener = httpListener",
          "123:   if err := s.echoServer.Start(address); err != nil {",
          "124:    slog.Error(\"failed to start echo server\", err)",
          "125:   }",
          "126:  }()",
          "128:  return muxServer.Serve()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "102:  defer cancel()",
          "106:   fmt.Printf(\"failed to shutdown server, error: %v\\n\", err)",
          "107:  }",
          "",
          "[Removed Lines]",
          "105:  if err := s.e.Shutdown(ctx); err != nil {",
          "",
          "[Added Lines]",
          "136:  if err := s.echoServer.Shutdown(ctx); err != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "114:  fmt.Printf(\"memos stopped properly\\n\")",
          "115: }",
          "119: }",
          "121: func (s *Server) getOrUpsertWorkspaceBasicSetting(ctx context.Context) (*storepb.WorkspaceBasicSetting, error) {",
          "",
          "[Removed Lines]",
          "117: func (s *Server) GetEcho() *echo.Echo {",
          "118:  return s.e",
          "",
          "[Added Lines]",
          "148: func (s *Server) StartRunners(ctx context.Context) {",
          "149:  go versionchecker.NewVersionChecker(s.Store, s.Profile).Start(ctx)",
          "",
          "---------------"
        ]
      }
    }
  ]
}