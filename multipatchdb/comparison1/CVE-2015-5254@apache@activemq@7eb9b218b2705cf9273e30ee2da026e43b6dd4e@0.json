{
  "cve_id": "CVE-2015-5254",
  "cve_desc": "Apache ActiveMQ 5.x before 5.13.0 does not restrict the classes that can be serialized in the broker, which allows remote attackers to execute arbitrary code via a crafted serialized Java Message Service (JMS) ObjectMessage object.",
  "repo": "apache/activemq",
  "patch_hash": "7eb9b218b2705cf9273e30ee2da026e43b6dd4e0",
  "patch_info": {
    "commit_hash": "7eb9b218b2705cf9273e30ee2da026e43b6dd4e0",
    "repo": "apache/activemq",
    "commit_url": "https://github.com/apache/activemq/commit/7eb9b218b2705cf9273e30ee2da026e43b6dd4e",
    "files": [
      "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
      "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
      "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
      "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
    ],
    "message": "https://issues.apache.org/jira/browse/AMQ-6013 - init serializable packages statically",
    "before_after_code_files": [
      "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
      "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
      "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
      "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
    ]
  },
  "patch_diff": {
    "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java -> activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:     private static final ClassLoader FALLBACK_CLASS_LOADER =",
      "35:         ClassLoadingAwareObjectInputStream.class.getClassLoader();",
      "39:     private final ClassLoader inLoader;",
      "41:     public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException {",
      "42:         super(in);",
      "43:         inLoader = in.getClass().getClassLoader();",
      "",
      "[Removed Lines]",
      "37:     private static String[] serializablePackages;",
      "",
      "[Added Lines]",
      "37:     public static final String[] serializablePackages;",
      "41:     static {",
      "42:         serializablePackages = System.getProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\",",
      "43:                     \"java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper\").split(\",\");",
      "44:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:         }",
      "84:     }",
      "95:     public static boolean isAllAllowed() {",
      "97:     }",
      "99:     private void checkSecurity(Class clazz) throws ClassNotFoundException {",
      "100:         if (!clazz.isPrimitive()) {",
      "101:             if (clazz.getPackage() != null && !isAllAllowed()) {",
      "102:                boolean found = false;",
      "104:                    if (clazz.getPackage().getName().equals(packageName) || clazz.getPackage().getName().startsWith(packageName + \".\")) {",
      "105:                        found = true;",
      "106:                        break;",
      "",
      "[Removed Lines]",
      "86:     public static String[] getSerialziablePackages() {",
      "87:        if (serializablePackages == null) {",
      "88:            serializablePackages = System.getProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\",",
      "89:                        \"java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper\").split(\",\");",
      "90:        }",
      "92:        return serializablePackages;",
      "93:     };",
      "96:         return getSerialziablePackages().length == 1 && getSerialziablePackages()[0].equals(\"*\");",
      "103:                for (String packageName : getSerialziablePackages()) {",
      "",
      "[Added Lines]",
      "92:         return serializablePackages.length == 1 && serializablePackages[0].equals(\"*\");",
      "99:                for (String packageName : serializablePackages) {",
      "",
      "---------------"
    ],
    "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java": [
      "File: activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java -> activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.io.Reader;",
      "24: import com.thoughtworks.xstream.converters.Converter;",
      "25: import com.thoughtworks.xstream.converters.MarshallingContext;",
      "26: import com.thoughtworks.xstream.converters.UnmarshallingContext;",
      "27: import com.thoughtworks.xstream.io.HierarchicalStreamReader;",
      "28: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;",
      "30: import org.apache.activemq.command.MarshallAware;",
      "31: import org.apache.activemq.command.MessageDispatch;",
      "32: import org.apache.activemq.transport.stomp.XStreamSupport;",
      "",
      "[Removed Lines]",
      "22: <<<<<<< HEAD",
      "23: =======",
      "29: >>>>>>> a7e2a44... https://issues.apache.org/jira/browse/AMQ-6013 - restrict classes which can be serialized inside the broker",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     }",
      "106:         if (xStream == null) {",
      "107:             xStream = createXStream();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:     public XStream getXStream() {",
      "",
      "---------------"
    ],
    "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java": [
      "File: activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java -> activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:         if (ClassLoadingAwareObjectInputStream.isAllAllowed()) {",
      "38:             stream.addPermission(AnyTypePermission.ANY);",
      "39:         } else {",
      "41:                 stream.allowTypesByWildcard(new String[]{packageName + \".**\"});",
      "42:             }",
      "43:         }",
      "",
      "[Removed Lines]",
      "40:             for (String packageName : ClassLoadingAwareObjectInputStream.getSerialziablePackages()) {",
      "",
      "[Added Lines]",
      "40:             for (String packageName : ClassLoadingAwareObjectInputStream.serializablePackages) {",
      "",
      "---------------"
    ],
    "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java": [
      "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:     }",
      "113:     public void startBroker() throws Exception {",
      "117:         XStreamBrokerContext context = new XStreamBrokerContext();",
      "118:         brokerService.setBrokerContext(context);",
      "",
      "[Removed Lines]",
      "114:         System.setProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\", \"*\");",
      "115:         createBroker(true);",
      "",
      "[Added Lines]",
      "114:         createBroker();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "540a66baa130d87e8bb2e8bf297f500441923d08",
      "candidate_info": {
        "commit_hash": "540a66baa130d87e8bb2e8bf297f500441923d08",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/540a66baa130d87e8bb2e8bf297f500441923d08",
        "files": [
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java"
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-5621\n\nCleanup the STOMP tests framework and shorten the test duration by only\nusing resources in each test that are actually needed, also fixes some\nissues with tests that ran a long time just waiting for an end signal.",
        "before_after_code_files": [
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ],
          "candidate": [
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/ConnectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: public class ConnectTest {",
          "42:     private static final Logger LOG = LoggerFactory.getLogger(ConnectTest.class);",
          "46:     @Before",
          "47:     public void startBroker() throws Exception {",
          "",
          "[Removed Lines]",
          "43:     BrokerService brokerService;",
          "44:     Vector<Throwable> exceptions = new Vector<Throwable>();",
          "",
          "[Added Lines]",
          "45:     private BrokerService brokerService;",
          "46:     private final Vector<Throwable> exceptions = new Vector<Throwable>();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOSSLTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "27: public class Stomp11NIOSSLTest extends Stomp11Test {",
          "29:     @Override",
          "38:     }",
          "40:     @Override",
          "44:     }",
          "46:     @Override",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "30:     public void setUp() throws Exception {",
          "31:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "32:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "34:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "37:         super.setUp();",
          "41:  protected void addStompConnector() throws Exception {",
          "42:         TransportConnector connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\"+nioSslPort);",
          "43:         nioSslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "28:     protected boolean isUseTcpConnector() {",
          "29:         return false;",
          "33:     protected boolean isUseNioPlusSslConnector() {",
          "34:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11NIOTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.net.Socket;",
          "24: public class Stomp11NIOTest extends Stomp11Test {",
          "26:     @Override",
          "30:     }",
          "32:     @Override",
          "",
          "[Removed Lines]",
          "22: import org.apache.activemq.broker.TransportConnector;",
          "27:  protected void addStompConnector() throws Exception {",
          "28:         TransportConnector connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\"+nioPort);",
          "29:         nioPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "25:     protected boolean isUseTcpConnector() {",
          "26:         return false;",
          "27:     }",
          "29:     @Override",
          "30:     protected boolean isUseNioConnector() {",
          "31:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11SslAuthTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "27: public class Stomp11SslAuthTest extends Stomp11Test {",
          "29:     @Override",
          "39:     }",
          "41:     @Override",
          "46:     }",
          "48:     @Override",
          "53:     }",
          "55:     @Override",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "30:     public void setUp() throws Exception {",
          "31:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "32:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "34:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "38:         super.setUp();",
          "42:     protected void addOpenWireConnector() throws Exception {",
          "43:         TransportConnector connector = brokerService.addConnector(",
          "44:                 \"ssl://0.0.0.0:0?needClientAuth=true\");",
          "45:         jmsUri = connector.getPublishableConnectString();",
          "49:     protected void addStompConnector() throws Exception {",
          "50:         TransportConnector connector = brokerService.addConnector(",
          "51:                 \"stomp+ssl://0.0.0.0:\"+port+\"?needClientAuth=true\");",
          "52:         sslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "28:     protected boolean isUseTcpConnector() {",
          "29:         return false;",
          "33:     protected boolean isUseSslConnector() {",
          "34:         return true;",
          "38:     protected String getAdditionalConfig() {",
          "39:         return \"?needClientAuth=true\";",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import javax.jms.TextMessage;",
          "35: import javax.management.ObjectName;",
          "38: import org.apache.activemq.broker.jmx.BrokerViewMBean;",
          "39: import org.apache.activemq.command.ActiveMQQueue;",
          "40: import org.apache.activemq.command.ActiveMQTextMessage;",
          "",
          "[Removed Lines]",
          "37: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         connection.start();",
          "65:     }",
          "73:     @Test(timeout = 60000)",
          "74:     public void testConnect() throws Exception {",
          "",
          "[Removed Lines]",
          "67:     @Override",
          "68:     protected void addStompConnector() throws Exception {",
          "69:         TransportConnector connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "70:         port = connector.getConnectUri().getPort();",
          "71:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         assertTrue(f.indexOf(\"response-id:1\") >= 0);",
          "90:         assertTrue(f.indexOf(\"version:1.1\") >= 0);",
          "91:         assertTrue(f.indexOf(\"session:\") >= 0);",
          "95:     }",
          "97:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "93:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "94:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:         LOG.info(\"session header follows: \" + f);",
          "121:         assertTrue(f.startsWith(\"ID:\"));",
          "125:     }",
          "127:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "123:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "124:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:         assertTrue(f.startsWith(\"CONNECTED\"));",
          "142:         assertTrue(f.indexOf(\"version:1.1\") >= 0);",
          "143:         assertTrue(f.indexOf(\"session:\") >= 0);",
          "147:     }",
          "149:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "145:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "146:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:         assertTrue(f.startsWith(\"CONNECTED\"));",
          "164:         assertTrue(f.indexOf(\"version:1.0\") >= 0);",
          "165:         assertTrue(f.indexOf(\"session:\") >= 0);",
          "169:     }",
          "171:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "167:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "168:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:             long endTime = System.currentTimeMillis();",
          "227:             assertTrue(\"Broker did not send KeepAlive in time\", (endTime - startTime) >= 900);",
          "228:         }",
          "232:     }",
          "234:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "230:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "231:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "308:         assertTrue(stompFrame.getAction().equals(\"MESSAGE\"));",
          "310:         service.shutdownNow();",
          "314:     }",
          "316:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "312:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "313:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "452:             fail(\"No message should have been received since subscription was removed\");",
          "453:         } catch (SocketTimeoutException e) {",
          "454:         }",
          "458:     }",
          "460:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "456:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "457:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "480:         frame = stompConnection.receiveFrame();",
          "481:         assertTrue(frame.startsWith(\"ERROR\"));",
          "485:     }",
          "487:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "483:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "484:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "513:         frame = stompConnection.receiveFrame();",
          "514:         assertTrue(frame.startsWith(\"ERROR\"));",
          "518:     }",
          "520:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "516:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "517:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "551:         frame = \"UNSUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +",
          "552:                 \"id:12345\\n\\n\" + Stomp.NULL;",
          "553:         stompConnection.sendFrame(frame);",
          "557:     }",
          "559:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "555:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "556:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "596:         String unsub = \"UNSUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +",
          "597:                        \"id:12345\\n\\n\" + Stomp.NULL;",
          "598:         stompConnection.sendFrame(unsub);",
          "602:     }",
          "604:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "600:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "601:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "635:         received = stompConnection.receive();",
          "636:         assertNotNull(received);",
          "640:     }",
          "642:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "638:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "639:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "702:         }",
          "704:         stompConnection.sendFrame(unsub);",
          "708:     }",
          "710:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "706:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "707:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "736:         assertEquals(\"JMSXGroupID\", \"abc\", message.getStringProperty(\"JMSXGroupID\"));",
          "737:         ActiveMQTextMessage amqMessage = (ActiveMQTextMessage)message;",
          "738:         assertEquals(\"GroupID\", \"abc\", amqMessage.getGroupID());",
          "742:     }",
          "744:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "740:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "741:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "766:         assertNotNull(message);",
          "767:         assertEquals(\"Hello World\", message.getText());",
          "768:         assertEquals(\"newest\", message.getStringProperty(\"value\"));",
          "772:     }",
          "774:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "770:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "771:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "795:         final String expectedEncoded = \"\\\\\\\\value\\\\c\";",
          "796:         final String headerVal = frame.substring(start, start + expectedEncoded.length());",
          "797:         assertEquals(\"\" + frame, expectedEncoded, headerVal);",
          "801:     }",
          "803:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "799:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "800:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "851:         frame = \"UNSUBSCRIBE\\n\" + \"destination:/queue/ActiveMQ.DLQ\\n\" +",
          "852:                 \"id:12345\\n\\n\" + Stomp.NULL;",
          "853:         stompConnection.sendFrame(frame);",
          "857:     }",
          "859:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "855:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "856:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "894:         frame = \"UNSUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +",
          "895:                 \"id:12345\\n\\n\" + Stomp.NULL;",
          "896:         stompConnection.sendFrame(frame);",
          "900:     }",
          "902:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "898:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "899:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "988:         assertEquals(\"4\", receipt.getHeaders().get(\"receipt-id\"));",
          "990:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);",
          "994:     }",
          "996:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "992:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "993:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1065:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);",
          "1066:         assertEquals(view.getDurableTopicSubscribers().length, 0);",
          "1070:     }",
          "1072:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "1068:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1069:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1183:         assertEquals(view.getDurableTopicSubscribers().length, 2);",
          "1184:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);",
          "1188:     }",
          "1189: }",
          "",
          "[Removed Lines]",
          "1186:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1187:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOSSLTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "27: public class Stomp12NIOSSLTest extends Stomp12Test {",
          "29:     @Override",
          "38:     }",
          "40:     @Override",
          "44:     }",
          "46:     @Override",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "30:     public void setUp() throws Exception {",
          "31:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "32:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "34:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "37:         super.setUp();",
          "41:  protected void addStompConnector() throws Exception {",
          "42:         TransportConnector connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\"+nioSslPort);",
          "43:         nioSslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "28:     protected boolean isUseTcpConnector() {",
          "29:         return false;",
          "33:     protected boolean isUseNioPlusSslConnector() {",
          "34:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12NIOTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.net.Socket;",
          "24: public class Stomp12NIOTest extends Stomp12Test {",
          "26:     @Override",
          "30:     }",
          "32:     @Override",
          "",
          "[Removed Lines]",
          "22: import org.apache.activemq.broker.TransportConnector;",
          "27:  protected void addStompConnector() throws Exception {",
          "28:         TransportConnector connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\"+nioPort);",
          "29:         nioPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "25:     protected boolean isUseTcpConnector() {",
          "26:         return false;",
          "27:     }",
          "29:     @Override",
          "30:     protected boolean isUseNioConnector() {",
          "31:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12SslAuthTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "27: public class Stomp12SslAuthTest extends Stomp12Test {",
          "29:     @Override",
          "39:     }",
          "41:     @Override",
          "46:     }",
          "48:     @Override",
          "53:     }",
          "55:     @Override",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "30:     public void setUp() throws Exception {",
          "31:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "32:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "34:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "38:         super.setUp();",
          "42:     protected void addOpenWireConnector() throws Exception {",
          "43:         TransportConnector connector = brokerService.addConnector(",
          "44:                 \"ssl://0.0.0.0:0?needClientAuth=true\");",
          "45:         jmsUri = connector.getPublishableConnectString();",
          "49:     protected void addStompConnector() throws Exception {",
          "50:         TransportConnector connector = brokerService.addConnector(",
          "51:                 \"stomp+ssl://0.0.0.0:\"+port+\"?needClientAuth=true\");",
          "52:         sslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "28:     protected boolean isUseTcpConnector() {",
          "29:         return false;",
          "33:     protected boolean isUseSslConnector() {",
          "34:         return true;",
          "38:     protected String getAdditionalConfig() {",
          "39:         return \"?needClientAuth=true\";",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.jms.Connection;",
          "29: import org.apache.activemq.broker.jmx.BrokerViewMBean;",
          "30: import org.apache.activemq.util.Wait;",
          "31: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "28: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     }",
          "52:     @Override",
          "56:     }",
          "58:     @Override",
          "",
          "[Removed Lines]",
          "53:     protected void addStompConnector() throws Exception {",
          "54:         TransportConnector connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "55:         port = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "52:     public void tearDown() throws Exception {",
          "53:         try {",
          "54:             connection.close();",
          "55:         } catch (Exception ex) {}",
          "57:         super.tearDown();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:         return getClass().getName() + \".\" + getName();",
          "66:     }",
          "69:     public void testTelnetStyleSends() throws Exception {",
          "71:         stompConnection.setVersion(Stomp.V1_2);",
          "",
          "[Removed Lines]",
          "68:     @Test",
          "",
          "[Added Lines]",
          "70:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         assertTrue(receipt.getAction().startsWith(\"RECEIPT\"));",
          "101:         String receiptId = receipt.getHeaders().get(\"receipt-id\");",
          "102:         assertEquals(\"1\", receiptId);",
          "106:     }",
          "109:     public void testClientAckWithoutAckId() throws Exception {",
          "111:         stompConnection.setVersion(Stomp.V1_2);",
          "",
          "[Removed Lines]",
          "104:         String disconnect = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "105:         stompConnection.sendFrame(disconnect);",
          "108:     @Test",
          "",
          "[Added Lines]",
          "107:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:         received = stompConnection.receive();",
          "158:         assertTrue(received.getAction().equals(\"ERROR\"));",
          "159:         LOG.info(\"Broker sent: \" + received);",
          "163:     }",
          "166:     public void testClientAck() throws Exception {",
          "168:         stompConnection.setVersion(Stomp.V1_2);",
          "",
          "[Removed Lines]",
          "161:         String disconnect = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "162:         stompConnection.sendFrame(disconnect);",
          "165:     @Test",
          "",
          "[Added Lines]",
          "161:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:         frame = \"ACK\\n\" + \"id:\" +",
          "259:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + \"\\n\\n\" + Stomp.NULL;",
          "260:         stompConnection.sendFrame(frame);",
          "264:     }",
          "267:     public void testClientIndividualAck() throws Exception {",
          "269:         stompConnection.setVersion(Stomp.V1_2);",
          "",
          "[Removed Lines]",
          "262:         String disconnect = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "263:         stompConnection.sendFrame(disconnect);",
          "266:     @Test",
          "",
          "[Added Lines]",
          "259:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "364:         frame = \"ACK\\n\" + \"id:\" +",
          "365:                 received.getHeaders().get(Stomp.Headers.Message.ACK_ID) + \"\\n\\n\" + Stomp.NULL;",
          "366:         stompConnection.sendFrame(frame);",
          "370:     }",
          "373:     public void testQueueBrowerSubscription() throws Exception {",
          "375:         final int MSG_COUNT = 10;",
          "",
          "[Removed Lines]",
          "368:         String disconnect = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "369:         stompConnection.sendFrame(disconnect);",
          "372:     @Test",
          "",
          "[Added Lines]",
          "362:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:         }",
          "434:         stompConnection.sendFrame(unsub);",
          "438:     }",
          "441:     public void testQueueBrowerNotInAutoAckMode() throws Exception {",
          "442:         String connectFrame = \"STOMP\\n\" +",
          "443:                               \"login:system\\n\" +",
          "",
          "[Removed Lines]",
          "436:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "437:         stompConnection.sendFrame(frame);",
          "440:     @Test",
          "",
          "[Added Lines]",
          "427:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "467:         String unsub = \"UNSUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +",
          "468:                        \"id:12345\\n\\n\" + Stomp.NULL;",
          "469:         stompConnection.sendFrame(unsub);",
          "473:     }",
          "475:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "471:         String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "472:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "534:         assertEquals(\"3\", receipt.getHeaders().get(\"receipt-id\"));",
          "536:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);",
          "540:     }",
          "542:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "538:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "539:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "562:         frame = stompConnection.receiveFrame();",
          "563:         assertTrue(frame.startsWith(\"ERROR\"));",
          "567:     }",
          "568: }",
          "",
          "[Removed Lines]",
          "565:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "566:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     protected ActiveMQConnection connection;",
          "54:     @Override",
          "55:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {",
          "56:         plugins.add(new StatisticsBrokerPlugin());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     @Override",
          "55:     public void tearDown() throws Exception {",
          "56:         try {",
          "57:             connection.close();",
          "58:         } catch (Exception ex) {}",
          "60:         super.tearDown();",
          "61:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         brokerService.setAdvisorySupport(true);",
          "79:     }",
          "82:     public void testConnectionAdvisory() throws Exception {",
          "84:         stompConnection.connect(\"system\", \"manager\");",
          "85:         stompConnection.subscribe(\"/topic/ActiveMQ.Advisory.Connection\", Stomp.Headers.Subscribe.AckModeValues.AUTO);",
          "",
          "[Removed Lines]",
          "81:     @Test",
          "",
          "[Added Lines]",
          "90:     @Test(timeout = 60000)",
          "93:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         assertTrue(f.getBody().startsWith(\"{\\\"ConnectionInfo\\\":\"));",
          "106:     }",
          "109:     public void testConnectionAdvisoryJSON() throws Exception {",
          "111:         HashMap<String, String> subheaders = new HashMap<String, String>(1);",
          "112:         subheaders.put(\"transformation\", Stomp.Transformations.JMS_JSON.toString());",
          "",
          "[Removed Lines]",
          "108:     @Test",
          "",
          "[Added Lines]",
          "118:     @Test(timeout = 60000)",
          "120:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:         assertTrue(f.getBody().startsWith(\"{\\\"ConnectionInfo\\\":\"));",
          "137:     }",
          "140:     public void testConnectionAdvisoryXML() throws Exception {",
          "142:         HashMap<String, String> subheaders = new HashMap<String, String>(1);",
          "143:         subheaders.put(\"transformation\", Stomp.Transformations.JMS_XML.toString());",
          "",
          "[Removed Lines]",
          "139:     @Test",
          "",
          "[Added Lines]",
          "150:     @Test(timeout = 60000)",
          "152:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167:         assertTrue(f.getBody().startsWith(\"<ConnectionInfo>\"));",
          "168:     }",
          "171:     public void testConsumerAdvisory() throws Exception {",
          "173:         Destination dest = new ActiveMQQueue(\"testConsumerAdvisory\");",
          "",
          "[Removed Lines]",
          "170:     @Test",
          "",
          "[Added Lines]",
          "182:     @Test(timeout = 60000)",
          "184:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:         c.close();",
          "194:     }",
          "197:     public void testProducerAdvisory() throws Exception {",
          "199:         Destination dest = new ActiveMQQueue(\"testProducerAdvisory\");",
          "",
          "[Removed Lines]",
          "196:     @Test",
          "",
          "[Added Lines]",
          "209:     @Test(timeout = 60000)",
          "211:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "220:         c.close();",
          "221:     }",
          "224:     public void testProducerAdvisoryXML() throws Exception {",
          "226:         Destination dest = new ActiveMQQueue(\"testProducerAdvisoryXML\");",
          "",
          "[Removed Lines]",
          "223:     @Test",
          "",
          "[Added Lines]",
          "237:     @Test(timeout = 60000)",
          "239:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "251:         c.close();",
          "252:     }",
          "255:     public void testProducerAdvisoryJSON() throws Exception {",
          "257:         Destination dest = new ActiveMQQueue(\"testProducerAdvisoryJSON\");",
          "",
          "[Removed Lines]",
          "254:     @Test",
          "",
          "[Added Lines]",
          "269:     @Test(timeout = 60000)",
          "271:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "282:         c.close();",
          "283:     }",
          "286:     public void testStatisticsAdvisory() throws Exception {",
          "287:         Connection c = cf.createConnection(\"system\", \"manager\");",
          "288:         c.start();",
          "",
          "[Removed Lines]",
          "285:     @Test",
          "",
          "[Added Lines]",
          "301:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "312:         });",
          "313:         child.start();",
          "316:         stompConnection.connect(\"system\", \"manager\");",
          "317:         stompConnection.subscribe(\"/topic/\" + replyTo.getTopicName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:         stompConnect();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.junit.Assert.assertNotNull;",
          "21: import static org.junit.Assert.assertTrue;",
          "23: import java.util.HashMap;",
          "24: import java.util.concurrent.CountDownLatch;",
          "25: import java.util.concurrent.ExecutorService;",
          "26: import java.util.concurrent.Executors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.ArrayList;",
          "25: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import java.util.concurrent.TimeUnit;",
          "29: import java.util.concurrent.atomic.AtomicInteger;",
          "36: import org.apache.activemq.util.Wait;",
          "37: import org.junit.Test;",
          "38: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "31: import javax.jms.Connection;",
          "32: import javax.jms.Session;",
          "34: import org.apache.activemq.broker.TransportConnector;",
          "35: import org.apache.activemq.command.ActiveMQQueue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     private static final int TASK_COUNT = 100;",
          "46:     private static final int MSG_COUNT = 250;  // AMQ-3819: Above 250 or so and the CPU goes bonkers with NOI+SSL.",
          "52:     private ExecutorService executor;",
          "53:     private CountDownLatch started;",
          "54:     private CountDownLatch ready;",
          "55:     private AtomicInteger receiveCount;",
          "63:     @Override",
          "64:     public void setUp() throws Exception {",
          "",
          "[Removed Lines]",
          "48:     protected Connection connection;",
          "49:     protected Session session;",
          "50:     protected ActiveMQQueue queue;",
          "57:     @Override",
          "58:     protected void addStompConnector() throws Exception {",
          "59:         TransportConnector connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "60:         port = connector.getConnectUri().getPort();",
          "61:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:         stompConnect();",
          "69:         stompConnection.connect(\"system\", \"manager\");",
          "76:         executor = Executors.newFixedThreadPool(TASK_COUNT, new ThreadFactory() {",
          "78:             private long i = 0;",
          "",
          "[Removed Lines]",
          "71:         connection = cf.createConnection(\"system\", \"manager\");",
          "72:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
          "73:         queue = new ActiveMQQueue(getTopicName());",
          "74:         connection.start();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:     public void tearDown() throws Exception {",
          "95:         try {",
          "96:             executor.shutdownNow();",
          "98:         } catch (Exception e) {",
          "99:         } finally {",
          "100:             super.tearDown();",
          "",
          "[Removed Lines]",
          "97:             connection.close();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:     @Test(timeout=5*60*1000)",
          "105:     public void testStompUnloadLoad() throws Exception {",
          "107:         for (int i = 0; i < TASK_COUNT; ++i) {",
          "108:             executor.execute(new Runnable() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:         final List<StompConnection> taskConnections = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "122:                         LOG.error(\"Caught Exception while connecting: \" + e.getMessage());",
          "123:                     }",
          "125:                     try {",
          "127:                         for (int i = 0; i < 10; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:                     taskConnections.add(connection);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "139:                         TimeUnit.SECONDS.sleep(3);",
          "140:                         started.countDown();",
          "145:                             StompFrame frame = connection.receive(TimeUnit.SECONDS.toMillis(60));",
          "",
          "[Removed Lines]",
          "142:                         while (true) {",
          "",
          "[Added Lines]",
          "127:                         while (receiveCount.get() != TASK_COUNT * MSG_COUNT) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "191:         LOG.info(\"Test Completed and all messages received, shutting down.\");",
          "193:         executor.shutdown();",
          "194:         executor.awaitTermination(2, TimeUnit.MINUTES);",
          "198:     }",
          "199: }",
          "",
          "[Removed Lines]",
          "195:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "196:         stompConnection.sendFrame(frame);",
          "197:         LOG.info(\"Test Finished.\");",
          "",
          "[Added Lines]",
          "178:         for (StompConnection taskConnection : taskConnections) {",
          "179:             try {",
          "180:                 taskConnection.disconnect();",
          "181:                 taskConnection.close();",
          "182:             } catch (Exception ex) {",
          "183:             }",
          "184:         }",
          "189:         stompDisconnect();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxDataSizeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import javax.net.SocketFactory;",
          "28: import javax.net.ssl.SSLSocketFactory;",
          "31: import org.junit.Test;",
          "33: public class StompMaxDataSizeTest extends StompTestSupport {",
          "",
          "[Removed Lines]",
          "30: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     private StompConnection connection;",
          "50:     @Override",
          "51:     public void tearDown() throws Exception {",
          "52:         if (connection != null) {",
          "",
          "[Removed Lines]",
          "39:     @Override",
          "40:     public void setUp() throws Exception {",
          "41:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "42:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "43:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "44:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "45:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "46:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "47:         super.setUp();",
          "48:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     }",
          "60:     @Override",
          "76:     }",
          "78:     @Test(timeout = 60000)",
          "",
          "[Removed Lines]",
          "61:     protected void addStompConnector() throws Exception {",
          "62:         TransportConnector connector = null;",
          "64:         connector = brokerService.addConnector(\"stomp+ssl://0.0.0.0:\"+ sslPort +",
          "65:             \"?transport.maxDataLength=\" + TEST_MAX_DATA_SIZE);",
          "66:         sslPort = connector.getConnectUri().getPort();",
          "67:         connector = brokerService.addConnector(\"stomp://0.0.0.0:\" + port +",
          "68:             \"?transport.maxDataLength=\" + TEST_MAX_DATA_SIZE);",
          "69:         port = connector.getConnectUri().getPort();",
          "70:         connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\" + nioPort +",
          "71:             \"?transport.maxDataLength=\" + TEST_MAX_DATA_SIZE);",
          "72:         nioPort = connector.getConnectUri().getPort();",
          "73:         connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\" + nioSslPort +",
          "74:             \"?transport.maxDataLength=\" + TEST_MAX_DATA_SIZE);",
          "75:         nioSslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "49:     protected boolean isUseSslConnector() {",
          "50:         return true;",
          "51:     }",
          "53:     @Override",
          "54:     protected boolean isUseNioConnector() {",
          "55:         return true;",
          "56:     }",
          "58:     @Override",
          "59:     protected boolean isUseNioPlusSslConnector() {",
          "60:         return true;",
          "61:     }",
          "63:     @Override",
          "64:     protected String getAdditionalConfig() {",
          "65:         return \"?transport.maxDataLength=\" + TEST_MAX_DATA_SIZE;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMaxFrameSizeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import javax.net.SocketFactory;",
          "29: import javax.net.ssl.SSLSocketFactory;",
          "32: import org.junit.Assume;",
          "33: import org.junit.Test;",
          "34: import org.junit.runner.RunWith;",
          "",
          "[Removed Lines]",
          "31: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     }",
          "68:     @Override",
          "77:     }",
          "79:     @Override",
          "95:     }",
          "",
          "[Removed Lines]",
          "69:     public void setUp() throws Exception {",
          "70:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "71:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "72:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "73:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "74:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "75:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "76:         super.setUp();",
          "80:     protected void addStompConnector() throws Exception {",
          "81:         TransportConnector connector = null;",
          "83:         connector = brokerService.addConnector(\"stomp+ssl://0.0.0.0:\"+ sslPort +",
          "84:             \"?transport.maxDataLength=\" + MAX_DATA_SIZE + \"&transport.maxFrameSize=\" + maxFrameSize);",
          "85:         sslPort = connector.getConnectUri().getPort();",
          "86:         connector = brokerService.addConnector(\"stomp://0.0.0.0:\" + port +",
          "87:             \"?transport.maxDataLength=\" + MAX_DATA_SIZE + \"&transport.maxFrameSize=\" + maxFrameSize);",
          "88:         port = connector.getConnectUri().getPort();",
          "89:         connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\" + nioPort +",
          "90:             \"?transport.maxDataLength=\" + MAX_DATA_SIZE + \"&transport.maxFrameSize=\" + maxFrameSize);",
          "91:         nioPort = connector.getConnectUri().getPort();",
          "92:         connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\" + nioSslPort +",
          "93:             \"?transport.maxDataLength=\" + MAX_DATA_SIZE + \"&transport.maxFrameSize=\" + maxFrameSize);",
          "94:         nioSslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "68:     protected boolean isUseSslConnector() {",
          "69:         return true;",
          "73:     protected boolean isUseNioConnector() {",
          "74:         return true;",
          "75:     }",
          "77:     @Override",
          "78:     protected boolean isUseNioPlusSslConnector() {",
          "79:         return true;",
          "80:     }",
          "82:     @Override",
          "83:     protected String getAdditionalConfig() {",
          "84:         return \"?transport.maxDataLength=\" + MAX_DATA_SIZE + \"&transport.maxFrameSize=\" + maxFrameSize;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompMissingMessageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.HashMap;",
          "23: import java.util.UUID;",
          "26: import org.junit.Test;",
          "27: import org.slf4j.Logger;",
          "28: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         destination = \"/topic/\" + getTopicName();",
          "40:     }",
          "49:     public void testProducerConsumerLoop() throws Exception {",
          "50:         final int ITERATIONS = 500;",
          "51:         int received = 0;",
          "",
          "[Removed Lines]",
          "42:     @Override",
          "43:  protected void addStompConnector() throws Exception {",
          "44:         TransportConnector connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "45:         port = connector.getConnectUri().getPort();",
          "46:     }",
          "48:     @Test",
          "",
          "[Added Lines]",
          "41:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:         return message;",
          "89:     }",
          "92:     public void testProducerDurableConsumerLoop() throws Exception {",
          "93:         final int ITERATIONS = 500;",
          "94:         int received = 0;",
          "",
          "[Removed Lines]",
          "91:     @Test",
          "",
          "[Added Lines]",
          "84:     @Test(timeout = 60000)",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOLoadTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.io.IOException;",
          "21: import java.net.Socket;",
          "25: public class StompNIOLoadTest extends StompLoadTest {",
          "27:     @Override",
          "31:     }",
          "33:     @Override",
          "",
          "[Removed Lines]",
          "23: import org.apache.activemq.broker.TransportConnector;",
          "28:  protected void addStompConnector() throws Exception {",
          "29:         TransportConnector connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\"+nioPort);",
          "30:         nioPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "26:     protected boolean isUseTcpConnector() {",
          "27:         return false;",
          "28:     }",
          "30:     @Override",
          "31:     protected boolean isUseNioConnector() {",
          "32:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLLoadTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import javax.net.SocketFactory;",
          "24: import javax.net.ssl.SSLSocketFactory;",
          "28: public class StompNIOSSLLoadTest extends StompLoadTest {",
          "30:     @Override",
          "39:     }",
          "41:     @Override",
          "45:     }",
          "47:     @Override",
          "",
          "[Removed Lines]",
          "26: import org.apache.activemq.broker.TransportConnector;",
          "31:     public void setUp() throws Exception {",
          "32:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "34:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "37:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "38:         super.setUp();",
          "42:  protected void addStompConnector() throws Exception {",
          "43:         TransportConnector connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\"+nioSslPort);",
          "44:         nioSslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "29:     protected boolean isUseTcpConnector() {",
          "30:         return false;",
          "34:     protected boolean isUseNioPlusSslConnector() {",
          "35:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOSSLTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "27: public class StompNIOSSLTest extends StompTest {",
          "29:     @Override",
          "38:     }",
          "40:     @Override",
          "44:     }",
          "46:     @Override",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "30:     public void setUp() throws Exception {",
          "31:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "32:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "34:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "37:         super.setUp();",
          "41:  protected void addStompConnector() throws Exception {",
          "42:         TransportConnector connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\"+nioSslPort);",
          "43:         nioSslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "28:     protected boolean isUseTcpConnector() {",
          "29:         return false;",
          "33:     protected boolean isUseNioPlusSslConnector() {",
          "34:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompNIOTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.net.Socket;",
          "24: public class StompNIOTest extends StompTest {",
          "26:     @Override",
          "30:     }",
          "32:     @Override",
          "",
          "[Removed Lines]",
          "22: import org.apache.activemq.broker.TransportConnector;",
          "27:  protected void addStompConnector() throws Exception {",
          "28:         TransportConnector connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\"+nioPort);",
          "29:         nioPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "25:     protected boolean isUseTcpConnector() {",
          "26:         return false;",
          "27:     }",
          "29:     @Override",
          "30:     protected boolean isUseNioConnector() {",
          "31:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompPrefetchTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     @Test(timeout = 60000)",
          "59:     public void testTopicSubPrefetch() throws Exception {",
          "61:         stompConnection.connect(\"system\", \"manager\");",
          "62:         stompConnection.subscribe(\"/topic/T\", Stomp.Headers.Subscribe.AckModeValues.AUTO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     @Test(timeout = 60000)",
          "68:     public void testDurableSubPrefetch() throws Exception {",
          "69:         stompConnection.connect(\"system\", \"manager\");",
          "70:         HashMap<String,String> headers = new HashMap<String, String>();",
          "71:         headers.put(\"id\", \"durablesub\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:         headers.put(\"browser\", \"true\");",
          "84:         headers.put(\"accept-version\",\"1.1\");",
          "86:         stompConnection.connect(headers);",
          "87:         stompConnection.subscribe(\"/queue/Q\", Stomp.Headers.Subscribe.AckModeValues.AUTO, headers);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:     @Test(timeout = 60000)",
          "93:     public void testQueueSubPrefetch() throws Exception {",
          "94:         stompConnection.connect(\"system\", \"manager\");",
          "95:         stompConnection.subscribe(\"/queue/Q\", Stomp.Headers.Subscribe.AckModeValues.AUTO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:         stompConnect();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSSLLoadTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import javax.net.SocketFactory;",
          "24: import javax.net.ssl.SSLSocketFactory;",
          "28: public class StompSSLLoadTest extends StompLoadTest {",
          "30:     @Override",
          "39:     }",
          "41:     @Override",
          "45:     }",
          "47:     @Override",
          "",
          "[Removed Lines]",
          "26: import org.apache.activemq.broker.TransportConnector;",
          "31:     public void setUp() throws Exception {",
          "32:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "34:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "37:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "38:         super.setUp();",
          "42:     protected void addStompConnector() throws Exception {",
          "43:         TransportConnector connector = brokerService.addConnector(\"stomp+ssl://0.0.0.0:\"+sslPort);",
          "44:         sslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "29:     protected boolean isUseTcpConnector() {",
          "30:         return false;",
          "34:     protected boolean isUseSslConnector() {",
          "35:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "25: import org.apache.activemq.broker.BrokerPlugin;",
          "26: import org.apache.activemq.broker.TransportConnector;",
          "27: import org.apache.activemq.security.JaasCertificateAuthenticationPlugin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.activemq.ActiveMQConnectionFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: public class StompSslAuthTest extends StompTest {",
          "31:     @Override",
          "42:     }",
          "44:     @Override",
          "",
          "[Removed Lines]",
          "32:     public void setUp() throws Exception {",
          "34:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "37:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "38:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "39:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "41:         super.setUp();",
          "",
          "[Added Lines]",
          "33:     protected boolean isUseTcpConnector() {",
          "34:         return false;",
          "35:     }",
          "37:     @Override",
          "38:     protected boolean isUseSslConnector() {",
          "39:         return true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     }",
          "57:     @Override",
          "62:     }",
          "64:     @Override",
          "69:     }",
          "",
          "[Removed Lines]",
          "58:     protected void addOpenWireConnector() throws Exception {",
          "59:         TransportConnector connector = brokerService.addConnector(",
          "60:                 \"ssl://0.0.0.0:0?needClientAuth=true\");",
          "61:         jmsUri = connector.getPublishableConnectString();",
          "65:     protected void addStompConnector() throws Exception {",
          "66:         TransportConnector connector = brokerService.addConnector(",
          "67:                 \"stomp+ssl://0.0.0.0:\"+port+\"?needClientAuth=true\");",
          "68:         sslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "56:     public void addOpenWireConnector() throws Exception {",
          "57:         TransportConnector connector = brokerService.addConnector(\"ssl://0.0.0.0:0?needClientAuth=true\");",
          "58:         cf = new ActiveMQConnectionFactory(connector.getPublishableConnectString());",
          "62:     protected String getAdditionalConfig() {",
          "63:         return \"?needClientAuth=true\";",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSslTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.net.SocketFactory;",
          "23: import javax.net.ssl.SSLSocketFactory;",
          "27: public class StompSslTest extends StompTest {",
          "29:     @Override",
          "38:     }",
          "40:     @Override",
          "44:     }",
          "46:     @Override",
          "",
          "[Removed Lines]",
          "25: import org.apache.activemq.broker.TransportConnector;",
          "30:     public void setUp() throws Exception {",
          "31:         System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");",
          "32:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "33:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "34:         System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");",
          "35:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "36:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "37:         super.setUp();",
          "41:  protected void addStompConnector() throws Exception {",
          "42:         TransportConnector connector = brokerService.addConnector(\"stomp+ssl://0.0.0.0:\"+sslPort);",
          "43:         sslPort = connector.getConnectUri().getPort();",
          "",
          "[Added Lines]",
          "28:     protected boolean isUseTcpConnector() {",
          "29:         return false;",
          "33:     protected boolean isUseSslConnector() {",
          "34:         return true;",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompSubscriptionRemoveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     private static final String COMMAND_MESSAGE = \"MESSAGE\";",
          "41:     private static final String HEADER_MESSAGE_ID = \"message-id\";",
          "44:     public void testRemoveSubscriber() throws Exception {",
          "46:         Connection connection = cf.createConnection(\"system\", \"manager\");",
          "47:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
          "48:         MessageProducer producer = session.createProducer(new ActiveMQQueue(getQueueName()));",
          "",
          "[Removed Lines]",
          "43:     @Test",
          "",
          "[Added Lines]",
          "43:     @Test(timeout = 60000)",
          "45:         stompConnect();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:             ++count;",
          "77:         }",
          "83:         stompDisconnect();",
          "84:         stompConnect();",
          "86:         connectFrame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "79:         stompConnection.sendFrame(\"DISCONNECT\\n\\n\");",
          "80:         Thread.sleep(1000);",
          "81:         stompConnection.close();",
          "",
          "[Added Lines]",
          "80:         Thread.sleep(1000);",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTelnetTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     private static final Logger LOG = LoggerFactory.getLogger(StompTelnetTest.class);",
          "35:     public void testCRLF() throws Exception {",
          "37:         for (TransportConnector connector : brokerService.getTransportConnectors()) {",
          "",
          "[Removed Lines]",
          "34:     @Test",
          "",
          "[Added Lines]",
          "34:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         }",
          "51:     }",
          "54:     public void testCRLF11() throws Exception {",
          "56:         for (TransportConnector connector : brokerService.getTransportConnectors()) {",
          "",
          "[Removed Lines]",
          "53:     @Test",
          "",
          "[Added Lines]",
          "53:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:         return null;",
          "80:     }",
          "90:     protected Socket createSocket(int port) throws IOException {",
          "91:         return new Socket(\"127.0.0.1\", port);",
          "92:     }",
          "94:     @Override",
          "96:         return getClass().getName() + \".\" + getName();",
          "97:     }",
          "98: }",
          "",
          "[Removed Lines]",
          "82:     @Override",
          "83:     protected void addStompConnector() throws Exception {",
          "84:         TransportConnector connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "85:         port = connector.getConnectUri().getPort();",
          "86:         connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\"+nioPort);",
          "87:         nioPort = connector.getConnectUri().getPort();",
          "88:     }",
          "95:  protected String getQueueName() {",
          "",
          "[Added Lines]",
          "87:     protected String getQueueName() {",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: import javax.jms.TextMessage;",
          "46: import javax.management.ObjectName;",
          "49: import org.apache.activemq.broker.jmx.BrokerViewMBean;",
          "50: import org.apache.activemq.broker.jmx.QueueViewMBean;",
          "51: import org.apache.activemq.broker.region.policy.PolicyEntry;",
          "",
          "[Removed Lines]",
          "48: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:         }",
          "155:     }",
          "163:     public void sendMessage(String msg) throws Exception {",
          "164:         sendMessage(msg, \"foo\", \"xyz\");",
          "165:     }",
          "",
          "[Removed Lines]",
          "157:     @Override",
          "158:     protected void addStompConnector() throws Exception {",
          "159:         TransportConnector connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "160:         port = connector.getConnectUri().getPort();",
          "161:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:         producer.send(message);",
          "179:     }",
          "182:     public void testConnect() throws Exception {",
          "184:         String connectFrame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\" + \"request-id:1\\n\" + \"\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "181:     @Test",
          "",
          "[Added Lines]",
          "174:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:         assertTrue(f.indexOf(\"response-id:1\") >= 0);",
          "190:     }",
          "193:     public void testSendMessage() throws Exception {",
          "195:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "192:     @Test",
          "",
          "[Added Lines]",
          "185:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "215:         assertTrue(Math.abs(tnow - tmsg) < 1000);",
          "216:     }",
          "219:     public void testJMSXGroupIdCanBeSet() throws Exception {",
          "221:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "218:     @Test",
          "",
          "[Added Lines]",
          "211:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:         assertEquals(\"TEST\", ((ActiveMQTextMessage)message).getGroupID());",
          "236:     }",
          "239:     public void testSendMessageWithCustomHeadersAndSelector() throws Exception {",
          "241:         MessageConsumer consumer = session.createConsumer(queue, \"foo = 'abc'\");",
          "",
          "[Removed Lines]",
          "238:     @Test",
          "",
          "[Added Lines]",
          "231:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:         assertEquals(\"bar\", \"123\", message.getStringProperty(\"bar\"));",
          "258:     }",
          "261:     public void testSendMessageWithDelay() throws Exception {",
          "263:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "260:     @Test",
          "",
          "[Added Lines]",
          "253:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:         assertNotNull(message);",
          "279:     }",
          "282:     public void testSendMessageWithStandardHeaders() throws Exception {",
          "284:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "281:     @Test",
          "",
          "[Added Lines]",
          "274:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:         assertEquals(\"GroupID\", \"abc\", amqMessage.getGroupID());",
          "309:     }",
          "312:     public void testSendMessageWithNoPriorityReceivesDefault() throws Exception {",
          "314:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "311:     @Test",
          "",
          "[Added Lines]",
          "304:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "330:         assertEquals(\"getJMSPriority\", 4, message.getJMSPriority());",
          "331:     }",
          "334:     public void testReceipts() throws Exception {",
          "336:         StompConnection receiver = new StompConnection();",
          "",
          "[Removed Lines]",
          "333:     @Test",
          "",
          "[Added Lines]",
          "326:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "380:         TextMessage message = (TextMessage)consumer.receive(10000);",
          "381:         assertNotNull(message);",
          "382:         assertNull(\"JMS Message does not contain receipt request\", message.getStringProperty(Stomp.Headers.RECEIPT_REQUESTED));",
          "386:     }",
          "389:     public void testSubscriptionReceipts() throws Exception {",
          "390:         final int done = 20;",
          "391:         int count = 0;",
          "",
          "[Removed Lines]",
          "384:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "385:         stompConnection.sendFrame(frame);",
          "388:     @Test",
          "",
          "[Added Lines]",
          "378:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "435:         } while (count < done);",
          "436:     }",
          "439:     public void testSubscribeWithAutoAck() throws Exception {",
          "441:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "438:     @Test",
          "",
          "[Added Lines]",
          "428:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "452:         frame = stompConnection.receiveFrame();",
          "453:         assertTrue(frame.startsWith(\"MESSAGE\"));",
          "457:     }",
          "460:     public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {",
          "462:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "455:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "456:         stompConnection.sendFrame(frame);",
          "459:     @Test",
          "",
          "[Added Lines]",
          "446:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:         assertEquals(\"5\", clMmatcher.group(1));",
          "483:         assertFalse(Pattern.compile(\"type:\\\\s*null\", Pattern.CASE_INSENSITIVE).matcher(frame).find());",
          "487:     }",
          "490:     public void testBytesMessageWithNulls() throws Exception {",
          "492:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "485:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "486:         stompConnection.sendFrame(frame);",
          "489:     @Test",
          "",
          "[Added Lines]",
          "473:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "508:         assertEquals(\"5\", length);",
          "510:         assertEquals(5, message.getContent().length);",
          "514:     }",
          "517:     public void testSendMultipleBytesMessages() throws Exception {",
          "519:         final int MSG_COUNT = 50;",
          "",
          "[Removed Lines]",
          "512:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "513:         stompConnection.sendFrame(frame);",
          "516:     @Test",
          "",
          "[Added Lines]",
          "497:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "542:             assertEquals(5, message.getContent().length);",
          "543:         }",
          "547:     }",
          "550:     public void testSubscribeWithMessageSentWithProperties() throws Exception {",
          "552:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "545:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "546:         stompConnection.sendFrame(frame);",
          "549:     @Test",
          "",
          "[Added Lines]",
          "527:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "573:         frame = stompConnection.receiveFrame();",
          "574:         assertTrue(frame.startsWith(\"MESSAGE\"));",
          "578:     }",
          "581:     public void testMessagesAreInOrder() throws Exception {",
          "582:         int ctr = 10;",
          "583:         String[] data = new String[ctr];",
          "",
          "[Removed Lines]",
          "576:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "577:         stompConnection.sendFrame(frame);",
          "580:     @Test",
          "",
          "[Added Lines]",
          "555:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "613:             frame = stompConnection.receiveFrame();",
          "614:             assertTrue(\"Message not in order\", frame.indexOf(data[i]) >= 0);",
          "615:         }",
          "619:     }",
          "622:     public void testSubscribeWithAutoAckAndSelector() throws Exception {",
          "624:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "617:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "618:         stompConnection.sendFrame(frame);",
          "621:     @Test",
          "",
          "[Added Lines]",
          "593:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "636:         frame = stompConnection.receiveFrame();",
          "637:         assertTrue(frame.startsWith(\"MESSAGE\"));",
          "638:         assertTrue(\"Should have received the real message but got: \" + frame, frame.indexOf(\"Real message\") > 0);",
          "642:     }",
          "645:     public void testSubscribeWithAutoAckAndNumericSelector() throws Exception {",
          "647:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "640:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "641:         stompConnection.sendFrame(frame);",
          "644:     @Test",
          "",
          "[Added Lines]",
          "613:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "664:         frame = stompConnection.receiveFrame();",
          "665:         assertTrue(frame.startsWith(\"MESSAGE\"));",
          "666:         assertTrue(\"Should have received the real message but got: \" + frame, frame.indexOf(\"Real Message\") > 0);",
          "670:     }",
          "673:     public void testSubscribeWithAutoAckAndBooleanSelector() throws Exception {",
          "675:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "668:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "669:         stompConnection.sendFrame(frame);",
          "672:     @Test",
          "",
          "[Added Lines]",
          "638:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "692:         frame = stompConnection.receiveFrame();",
          "693:         assertTrue(frame.startsWith(\"MESSAGE\"));",
          "694:         assertTrue(\"Should have received the real message but got: \" + frame, frame.indexOf(\"Real Message\") > 0);",
          "698:     }",
          "701:     public void testSubscribeWithAutoAckAnFloatSelector() throws Exception {",
          "703:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "696:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "697:         stompConnection.sendFrame(frame);",
          "700:     @Test",
          "",
          "[Added Lines]",
          "663:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "720:         frame = stompConnection.receiveFrame();",
          "721:         assertTrue(frame.startsWith(\"MESSAGE\"));",
          "722:         assertTrue(\"Should have received the real message but got: \" + frame, frame.indexOf(\"Real Message\") > 0);",
          "726:     }",
          "729:     public void testSubscribeWithClientAck() throws Exception {",
          "731:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "724:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "725:         stompConnection.sendFrame(frame);",
          "728:     @Test",
          "",
          "[Added Lines]",
          "688:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "750:         assertTrue(message.getJMSRedelivered());",
          "751:     }",
          "754:     public void testSubscribeWithClientAckedAndContentLength() throws Exception {",
          "756:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "753:     @Test",
          "",
          "[Added Lines]",
          "713:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "783:             }",
          "784:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));",
          "789:         stompDisconnect();",
          "",
          "[Removed Lines]",
          "786:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "787:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "794:         assertNull(message);",
          "795:     }",
          "798:     public void testUnsubscribe() throws Exception {",
          "800:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "797:     @Test",
          "",
          "[Added Lines]",
          "754:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "830:         }",
          "831:     }",
          "834:     public void testTransactionCommit() throws Exception {",
          "835:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "833:     @Test",
          "",
          "[Added Lines]",
          "790:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "853:         assertNotNull(\"Should have received a message\", message);",
          "854:     }",
          "857:     public void testTransactionRollback() throws Exception {",
          "858:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "856:     @Test",
          "",
          "[Added Lines]",
          "813:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "888:         assertEquals(\"second message\", message.getText().trim());",
          "889:     }",
          "892:     public void testDisconnectedClientsAreRemovedFromTheBroker() throws Exception {",
          "893:         assertClients(1);",
          "894:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "891:     @Test",
          "",
          "[Added Lines]",
          "848:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "903:         assertClients(1);",
          "904:     }",
          "907:     public void testConnectNotAuthenticatedWrongUser() throws Exception {",
          "908:         String frame = \"CONNECT\\n\" + \"login: dejanb\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "909:         stompConnection.sendFrame(frame);",
          "",
          "[Removed Lines]",
          "906:     @Test",
          "",
          "[Added Lines]",
          "863:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "914:         assertClients(1);",
          "915:     }",
          "918:     public void testConnectNotAuthenticatedWrongPassword() throws Exception {",
          "920:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode: dejanb\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "917:     @Test",
          "",
          "[Added Lines]",
          "874:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "926:         assertClients(1);",
          "927:     }",
          "930:     public void testSendNotAuthorized() throws Exception {",
          "932:         String frame = \"CONNECT\\n\" + \"login:guest\\n\" + \"passcode:password\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "929:     @Test",
          "",
          "[Added Lines]",
          "886:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "942:         assertTrue(f.startsWith(\"ERROR\"));",
          "943:     }",
          "946:     public void testSubscribeNotAuthorized() throws Exception {",
          "948:         String frame = \"CONNECT\\n\" + \"login:guest\\n\" + \"passcode:password\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "945:     @Test",
          "",
          "[Added Lines]",
          "902:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "958:         assertTrue(frame.startsWith(\"ERROR\"));",
          "959:     }",
          "962:     public void testSubscribeWithReceiptNotAuthorized() throws Exception {",
          "964:         String frame = \"CONNECT\\n\" + \"login:guest\\n\" + \"passcode:password\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "961:     @Test",
          "",
          "[Added Lines]",
          "918:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "976:         assertTrue(\"Error Frame did not contain receipt-id\", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);",
          "977:     }",
          "980:     public void testSubscribeWithInvalidSelector() throws Exception {",
          "982:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "979:     @Test",
          "",
          "[Added Lines]",
          "936:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "990:         stompConnection.sendFrame(frame);",
          "991:         frame = stompConnection.receiveFrame();",
          "992:         assertTrue(frame.startsWith(\"ERROR\"));",
          "996:     }",
          "999:     public void testTransformationUnknownTranslator() throws Exception {",
          "1000:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "994:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "995:         stompConnection.sendFrame(frame);",
          "998:     @Test",
          "",
          "[Added Lines]",
          "952:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1014:         assertEquals(\"Hello World\", message.getText());",
          "1015:     }",
          "1018:     public void testTransformationFailed() throws Exception {",
          "1019:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "1017:     @Test",
          "",
          "[Added Lines]",
          "971:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1034:         assertEquals(\"Hello World\", message.getText());",
          "1035:     }",
          "1038:     public void testTransformationSendXMLObject() throws Exception {",
          "1039:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "1037:     @Test",
          "",
          "[Added Lines]",
          "991:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1059:         assertEquals(\"Dejan\", object.getName());",
          "1060:     }",
          "1063:     public void testTransformationSendJSONObject() throws Exception {",
          "1064:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "1062:     @Test",
          "",
          "[Added Lines]",
          "1016:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1079:         assertEquals(\"Dejan\", object.getName());",
          "1080:     }",
          "1083:     public void testTransformationSubscribeXML() throws Exception {",
          "1085:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "",
          "[Removed Lines]",
          "1082:     @Test",
          "",
          "[Added Lines]",
          "1036:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1098:         frame = stompConnection.receiveFrame();",
          "1100:         assertTrue(frame.trim().endsWith(xmlObject));",
          "1104:     }",
          "1107:     public void testTransformationReceiveJSONObject() throws Exception {",
          "1108:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "1109:         ObjectMessage message = session.createObjectMessage(new SamplePojo(\"Dejan\", \"Belgrade\"));",
          "",
          "[Removed Lines]",
          "1102:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1103:         stompConnection.sendFrame(frame);",
          "1106:     @Test",
          "",
          "[Added Lines]",
          "1057:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1121:         frame = stompConnection.receiveFrame();",
          "1123:         assertTrue(frame.trim().endsWith(jsonObject));",
          "1127:     }",
          "1130:     public void testTransformationReceiveXMLObject() throws Exception {",
          "1132:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "",
          "[Removed Lines]",
          "1125:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1126:         stompConnection.sendFrame(frame);",
          "1129:     @Test",
          "",
          "[Added Lines]",
          "1077:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1145:         frame = stompConnection.receiveFrame();",
          "1147:         assertTrue(frame.trim().endsWith(xmlObject));",
          "1151:     }",
          "1154:     public void testTransformationReceiveObject() throws Exception {",
          "1156:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "",
          "[Removed Lines]",
          "1149:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1150:         stompConnection.sendFrame(frame);",
          "1153:     @Test",
          "",
          "[Added Lines]",
          "1098:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1169:         frame = stompConnection.receiveFrame();",
          "1171:         assertTrue(frame.trim().endsWith(xmlObject));",
          "1175:     }",
          "1178:     public void testTransformationReceiveXMLObjectAndMap() throws Exception {",
          "1179:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "1180:         ObjectMessage objMessage = session.createObjectMessage(new SamplePojo(\"Dejan\", \"Belgrade\"));",
          "",
          "[Removed Lines]",
          "1173:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1174:         stompConnection.sendFrame(frame);",
          "1177:     @Test",
          "",
          "[Added Lines]",
          "1119:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1208:         assertTrue(map.get(\"name\").equals(\"Dejan\"));",
          "1209:         assertTrue(map.get(\"city\").equals(\"Belgrade\"));",
          "1213:     }",
          "1216:     public void testTransformationReceiveJSONObjectAndMap() throws Exception {",
          "1217:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "1218:         ObjectMessage objMessage = session.createObjectMessage(new SamplePojo(\"Dejan\", \"Belgrade\"));",
          "",
          "[Removed Lines]",
          "1211:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1212:         stompConnection.sendFrame(frame);",
          "1215:     @Test",
          "",
          "[Added Lines]",
          "1154:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1250:         assertTrue(map.get(\"name\").equals(\"Dejan\"));",
          "1251:         assertTrue(map.get(\"city\").equals(\"Belgrade\"));",
          "1255:     }",
          "1258:     public void testTransformationSendAndReceiveXmlMap() throws Exception {",
          "1260:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "1253:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1254:         stompConnection.sendFrame(frame);",
          "1257:     @Test",
          "",
          "[Added Lines]",
          "1193:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1284:         assertTrue(xmlFrame.getHeaders().containsValue(\"jms-map-xml\"));",
          "1285:     }",
          "1288:     public void testTransformationSendAndReceiveJsonMap() throws Exception {",
          "1290:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "1287:     @Test",
          "",
          "[Added Lines]",
          "1223:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1315:         assertEquals(\"Belgrade\", map.get(\"city\"));",
          "1316:     }",
          "1319:     public void testTransformationReceiveBytesMessage() throws Exception {",
          "1321:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "",
          "[Removed Lines]",
          "1318:     @Test",
          "",
          "[Added Lines]",
          "1254:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1341:         assertEquals(\"5\", clMmatcher.group(1));",
          "1343:         assertFalse(Pattern.compile(\"type:\\\\s*null\", Pattern.CASE_INSENSITIVE).matcher(frame).find());",
          "1347:     }",
          "1350:     public void testTransformationNotOverrideSubscription() throws Exception {",
          "1351:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "1352:         ObjectMessage message = session.createObjectMessage(new SamplePojo(\"Dejan\", \"Belgrade\"));",
          "",
          "[Removed Lines]",
          "1345:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1346:         stompConnection.sendFrame(frame);",
          "1349:     @Test",
          "",
          "[Added Lines]",
          "1282:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1365:         frame = stompConnection.receiveFrame();",
          "1367:         assertTrue(frame.trim().endsWith(jsonObject));",
          "1371:     }",
          "1374:     public void testTransformationIgnoreTransformation() throws Exception {",
          "1375:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "1376:         ObjectMessage message = session.createObjectMessage(new SamplePojo(\"Dejan\", \"Belgrade\"));",
          "",
          "[Removed Lines]",
          "1369:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1370:         stompConnection.sendFrame(frame);",
          "1373:     @Test",
          "",
          "[Added Lines]",
          "1303:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1389:         frame = stompConnection.receiveFrame();",
          "1391:         assertTrue(frame.endsWith(\"\\n\\n\"));",
          "1395:     }",
          "1398:     public void testTransformationSendXMLMap() throws Exception {",
          "1399:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "1393:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1394:         stompConnection.sendFrame(frame);",
          "1397:     @Test",
          "",
          "[Added Lines]",
          "1324:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1413:         assertEquals(message.getString(\"name\"), \"Dejan\");",
          "1414:     }",
          "1417:     public void testTransformationSendJSONMap() throws Exception {",
          "1418:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "1416:     @Test",
          "",
          "[Added Lines]",
          "1343:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1432:         assertEquals(message.getString(\"name\"), \"Dejan\");",
          "1433:     }",
          "1436:     public void testTransformationReceiveXMLMap() throws Exception {",
          "1438:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "",
          "[Removed Lines]",
          "1435:     @Test",
          "",
          "[Added Lines]",
          "1362:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1461:         assertEquals(\"Dejan\", map.get(\"name\"));",
          "1462:         assertEquals(\"Belgrade\", map.get(\"city\"));",
          "1466:     }",
          "1469:     public void testTransformationReceiveJSONMap() throws Exception {",
          "1471:         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"USERS.\" + getQueueName()));",
          "",
          "[Removed Lines]",
          "1464:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1465:         stompConnection.sendFrame(frame);",
          "1468:     @Test",
          "",
          "[Added Lines]",
          "1392:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1494:         assertEquals(\"Dejan\", map.get(\"name\"));",
          "1495:         assertEquals(\"Belgrade\", map.get(\"city\"));",
          "1499:     }",
          "1502:     public void testDurableUnsub() throws Exception {",
          "",
          "[Removed Lines]",
          "1497:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1498:         stompConnection.sendFrame(frame);",
          "1501:     @Test",
          "",
          "[Added Lines]",
          "1422:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1566:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);",
          "1567:     }",
          "1570:     public void testDurableSubAttemptOnQueueFails() throws Exception {",
          "",
          "[Removed Lines]",
          "1569:     @Test",
          "",
          "[Added Lines]",
          "1490:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1592:         assertTrue(frame.startsWith(\"ERROR\"));",
          "1594:         assertEquals(view.getQueueSubscribers().length, 0);",
          "1598:     }",
          "1601:     public void testMessageIdHeader() throws Exception {",
          "1602:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1596:         frame = \"DISCONNECT\\nclient-id:test\\n\\n\" + Stomp.NULL;",
          "1597:         stompConnection.sendFrame(frame);",
          "1600:     @Test",
          "",
          "[Added Lines]",
          "1518:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1610:         assertNull(stompMessage.getHeaders().get(\"transaction\"));",
          "1611:     }",
          "1614:     public void testPrefetchSizeOfOneClientAck() throws Exception {",
          "1615:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1613:     @Test",
          "",
          "[Added Lines]",
          "1531:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1690:         } catch (SocketTimeoutException soe) {}",
          "1691:     }",
          "1694:     public void testPrefetchSize() throws Exception {",
          "1695:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1693:     @Test",
          "",
          "[Added Lines]",
          "1611:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1750:         stompDisconnect();",
          "1751:     }",
          "1754:     public void testTransactionsWithMultipleDestinations() throws Exception {",
          "1756:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1753:     @Test",
          "",
          "[Added Lines]",
          "1671:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1776:         StompFrame frame = stompConnection.receive(500);",
          "1777:         assertNotNull(frame);",
          "1780:     }",
          "1783:     public void testTempDestination() throws Exception {",
          "1785:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "1779:         stompConnection.disconnect();",
          "1782:     @Test",
          "",
          "[Added Lines]",
          "1698:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1798:         assertEquals(\"Hello World\", message.getBody());",
          "1799:     }",
          "1802:     public void testJMSXUserIDIsSetInMessage() throws Exception {",
          "1804:         MessageConsumer consumer = session.createConsumer(queue);",
          "",
          "[Removed Lines]",
          "1801:     @Test",
          "",
          "[Added Lines]",
          "1717:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1818:         assertEquals(\"system\", message.getStringProperty(Stomp.Headers.Message.USERID));",
          "1819:     }",
          "1822:     public void testJMSXUserIDIsSetInStompMessage() throws Exception {",
          "1824:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "1821:     @Test",
          "",
          "[Added Lines]",
          "1737:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1837:         assertEquals(\"system\", message.getHeaders().get(Stomp.Headers.Message.USERID));",
          "1838:     }",
          "1841:     public void testClientSetMessageIdIsIgnored() throws Exception {",
          "1842:         HashMap<String, String> headers = new HashMap<String, String>();",
          "1843:         headers.put(Stomp.Headers.Message.MESSAGE_ID, \"Thisisnotallowed\");",
          "",
          "[Removed Lines]",
          "1840:     @Test",
          "",
          "[Added Lines]",
          "1756:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1864:         assertEquals(\"system\", mess_headers.get(Stomp.Headers.Message.USERID));",
          "1865:     }",
          "1868:     public void testExpire() throws Exception {",
          "1869:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1867:     @Test",
          "",
          "[Added Lines]",
          "1783:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1881:         assertEquals(stompMessage.getHeaders().get(Stomp.Headers.Message.ORIGINAL_DESTINATION), \"/queue/\" + getQueueName());",
          "1882:     }",
          "1885:     public void testDefaultJMSReplyToDest() throws Exception {",
          "1886:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1884:     @Test",
          "",
          "[Added Lines]",
          "1800:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1897:         assertEquals(\"\"  + stompMessage, stompMessage.getHeaders().get(Stomp.Headers.Send.REPLY_TO), \"JustAString\");",
          "1898:     }",
          "1901:     public void testPersistent() throws Exception {",
          "1902:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1900:     @Test",
          "",
          "[Added Lines]",
          "1816:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1914:         assertEquals(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT), \"true\");",
          "1915:     }",
          "1918:     public void testPersistentDefaultValue() throws Exception {",
          "1919:         stompConnection.connect(\"system\", \"manager\");",
          "",
          "[Removed Lines]",
          "1917:     @Test",
          "",
          "[Added Lines]",
          "1833:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1929:         assertNull(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT));",
          "1930:     }",
          "1933:     public void testReceiptNewQueue() throws Exception {",
          "1935:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "1932:     @Test",
          "",
          "[Added Lines]",
          "1848:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1961:         String length = message.getHeaders().get(\"content-length\");",
          "1962:         assertEquals(\"0\", length);",
          "1963:         assertEquals(0, message.getContent().length);",
          "1967:     }",
          "1970:     public void testTransactedClientAckBrokerStats() throws Exception {",
          "1971:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "1972:         stompConnection.sendFrame(frame);",
          "",
          "[Removed Lines]",
          "1965:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "1966:         stompConnection.sendFrame(frame);",
          "1969:     @Test",
          "",
          "[Added Lines]",
          "1882:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2007:         assertEquals(0, queueView.getQueueSize());",
          "2008:     }",
          "2011:     public void testReplytoModification() throws Exception {",
          "2012:         String replyto = \"some destination\";",
          "2013:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "2010:     @Test",
          "",
          "[Added Lines]",
          "1923:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2025:         StompFrame message = stompConnection.receive();",
          "2026:         assertTrue(message.getAction().equals(\"MESSAGE\"));",
          "2027:         assertEquals(replyto, message.getHeaders().get(\"reply-to\"));",
          "2030:     }",
          "2033:     public void testReplyToDestinationNaming() throws Exception {",
          "2035:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "2029:         stompConnection.sendFrame(\"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL);",
          "2032:     @Test",
          "",
          "[Added Lines]",
          "1943:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2042:         doTestActiveMQReplyToTempDestination(\"queue\");",
          "2043:     }",
          "2046:     public void testSendNullBodyTextMessage() throws Exception {",
          "2047:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "2048:         stompConnection.sendFrame(frame);",
          "",
          "[Removed Lines]",
          "2045:     @Test",
          "",
          "[Added Lines]",
          "1956:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2056:         sendMessage(null);",
          "2057:         frame = stompConnection.receiveFrame();",
          "2058:         assertNotNull(\"Message not received\", frame);",
          "2062:     }",
          "2064:     private void doTestActiveMQReplyToTempDestination(String type) throws Exception {",
          "",
          "[Removed Lines]",
          "2060:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "2061:         stompConnection.sendFrame(frame);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2103:         }",
          "2104:     }",
          "2107:     public void testReplyToAcrossConnections() throws Exception {",
          "2109:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "2106:     @Test",
          "",
          "[Added Lines]",
          "2014:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2194:         assertEquals(\"Number of clients\", expected, actual);",
          "2195:     }",
          "2198:     public void testDisconnectDoesNotDeadlockBroker() throws Exception {",
          "2199:         for (int i = 0; i < 20; ++i) {",
          "2200:             doTestConnectionLeak();",
          "",
          "[Removed Lines]",
          "2197:     @Test",
          "",
          "[Added Lines]",
          "2105:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2245:                 fail(\"Received a frame that we were not expecting.\");",
          "2246:             }",
          "2247:         }",
          "2253:     }",
          "2256:     public void testHeaderValuesAreTrimmed1_0() throws Exception {",
          "2258:         String connectFrame = \"CONNECT\\n\" +",
          "",
          "[Removed Lines]",
          "2249:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "2250:         stompConnection.sendFrame(frame);",
          "2252:         stompConnection.close();",
          "2255:     @Test",
          "",
          "[Added Lines]",
          "2158:     @Test(timeout = 60000)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2290:         frame = \"UNSUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +",
          "2291:                 \"id:12345\\n\\n\" + Stomp.NULL;",
          "2292:         stompConnection.sendFrame(frame);",
          "2296:     }",
          "2299:     public void testSendReceiveBigMessage() throws Exception {",
          "2301:         String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;",
          "",
          "[Removed Lines]",
          "2294:         frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;",
          "2295:         stompConnection.sendFrame(frame);",
          "2298:     @Test",
          "",
          "[Added Lines]",
          "2198:     @Test(timeout = 60000)",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.security.ProtectionDomain;",
          "24: import java.util.ArrayList;",
          "25: import java.util.List;",
          "27: import javax.jms.JMSException;",
          "28: import javax.management.MalformedObjectNameException;",
          "29: import javax.management.ObjectName;",
          "31: import org.apache.activemq.ActiveMQConnectionFactory;",
          "33: import org.apache.activemq.broker.BrokerPlugin;",
          "34: import org.apache.activemq.broker.BrokerService;",
          "35: import org.apache.activemq.broker.TransportConnector;",
          "",
          "[Removed Lines]",
          "32: import org.apache.activemq.AutoFailTestSupport;",
          "",
          "[Added Lines]",
          "26: import java.util.Vector;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     protected static final Logger LOG = LoggerFactory.getLogger(StompTestSupport.class);",
          "60:     protected BrokerService brokerService;",
          "61:     protected int port;",
          "62:     protected int sslPort;",
          "63:     protected int nioPort;",
          "64:     protected int nioSslPort;",
          "65:     protected String jmsUri = \"vm://localhost\";",
          "67:     protected ActiveMQConnectionFactory cf;",
          "69:     @Rule public TestName name = new TestName();",
          "",
          "[Removed Lines]",
          "59:     protected final AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {};",
          "66:     protected StompConnection stompConnection = new StompConnection();",
          "",
          "[Added Lines]",
          "60:     protected int openwirePort;",
          "66:     protected StompConnection stompConnection;",
          "68:     protected Vector<Throwable> exceptions = new Vector<Throwable>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     @Before",
          "95:     public void setUp() throws Exception {",
          "96:         LOG.info(\"========== start \" + getName() + \" ==========\");",
          "98:         startBroker();",
          "100:     }",
          "102:     @After",
          "103:     public void tearDown() throws Exception {",
          "106:         try {",
          "107:             stompDisconnect();",
          "108:         } catch (Exception ex) {",
          "",
          "[Removed Lines]",
          "97:         autoFailTestSupport.startAutoFailThread();",
          "99:         stompConnect();",
          "104:         LOG.info(\"========== finished \" + getName() + \" ==========\");",
          "105:         autoFailTestSupport.stopAutoFailThread();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:         } finally {",
          "111:             stopBroker();",
          "112:         }",
          "113:     }",
          "115:     public void startBroker() throws Exception {",
          "119:         XStreamBrokerContext context = new XStreamBrokerContext();",
          "120:         brokerService.setBrokerContext(context);",
          "",
          "[Removed Lines]",
          "117:         createBroker();",
          "",
          "[Added Lines]",
          "110:         LOG.info(\"========== finished \" + getName() + \" ==========\");",
          "115:         createBroker(true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:         sslContext.afterPropertiesSet();",
          "135:         brokerService.setSslContext(sslContext);",
          "137:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();",
          "140:         addOpenWireConnector();",
          "144:         BrokerPlugin authenticationPlugin = configureAuthentication();",
          "145:         if (authenticationPlugin != null) {",
          "146:             plugins.add(configureAuthorization());",
          "",
          "[Removed Lines]",
          "139:         addStompConnector();",
          "142:         cf = new ActiveMQConnectionFactory(jmsUri);",
          "",
          "[Added Lines]",
          "135:         System.setProperty(\"javax.net.ssl.trustStore\", keyStore.getCanonicalPath());",
          "136:         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");",
          "137:         System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");",
          "138:         System.setProperty(\"javax.net.ssl.keyStore\", trustStore.getCanonicalPath());",
          "139:         System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "140:         System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");",
          "144:         addTranportConnectors();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:         brokerService.waitUntilStarted();",
          "163:     }",
          "166:     }",
          "169:         brokerService = new BrokerService();",
          "171:         brokerService.setAdvisorySupport(false);",
          "172:         brokerService.setSchedulerSupport(true);",
          "173:         brokerService.setPopulateJMSXUserID(true);",
          "174:         brokerService.setSchedulerSupport(true);",
          "175:         brokerService.getManagementContext().setCreateConnector(false);",
          "176:         brokerService.getManagementContext().setCreateMBeanServer(false);",
          "177:     }",
          "",
          "[Removed Lines]",
          "165:     protected void applyMemoryLimitPolicy() throws Exception {",
          "168:     protected void createBroker() throws Exception {",
          "170:         brokerService.setPersistent(false);",
          "",
          "[Added Lines]",
          "168:     public void stopBroker() throws Exception {",
          "169:         if (brokerService != null) {",
          "170:             brokerService.stop();",
          "171:             brokerService.waitUntilStopped();",
          "172:             brokerService = null;",
          "173:         }",
          "174:     }",
          "176:     public void restartBroker() throws Exception {",
          "177:         restartBroker(false);",
          "180:     public void restartBroker(boolean deleteAllOnStartup) throws Exception {",
          "181:         stopBroker();",
          "182:         createBroker(deleteAllOnStartup);",
          "183:         brokerService.start();",
          "184:         brokerService.waitUntilStarted();",
          "185:     }",
          "187:     protected void createBroker(boolean deleteAllOnStartup) throws Exception {",
          "189:         brokerService.setPersistent(isPersistent());",
          "190:         brokerService.setDeleteAllMessagesOnStartup(deleteAllOnStartup);",
          "195:         brokerService.setUseJmx(isUseJmx());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "179:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {",
          "180:     }",
          "182:     protected BrokerPlugin configureAuthentication() throws Exception {",
          "183:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();",
          "184:         users.add(new AuthenticationUser(\"system\", \"manager\", \"users,admins\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:     protected void applyMemoryLimitPolicy() throws Exception {",
          "204:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:     }",
          "257:     }",
          "260:         TransportConnector connector = null;",
          "271:     }",
          "279:     }",
          "281:     protected StompConnection stompConnect() throws Exception {",
          "",
          "[Removed Lines]",
          "256:     protected void addOpenWireConnector() throws Exception {",
          "259:     protected void addStompConnector() throws Exception {",
          "263:         connector = brokerService.addConnector(\"stomp+ssl://0.0.0.0:\"+sslPort);",
          "264:         sslPort = connector.getConnectUri().getPort();",
          "265:         connector = brokerService.addConnector(\"stomp://0.0.0.0:\"+port);",
          "266:         port = connector.getConnectUri().getPort();",
          "267:         connector = brokerService.addConnector(\"stomp+nio://0.0.0.0:\"+nioPort);",
          "268:         nioPort = connector.getConnectUri().getPort();",
          "269:         connector = brokerService.addConnector(\"stomp+nio+ssl://0.0.0.0:\"+nioSslPort);",
          "270:         nioSslPort = connector.getConnectUri().getPort();",
          "273:     public void stopBroker() throws Exception {",
          "274:         if (brokerService != null) {",
          "275:             brokerService.stop();",
          "276:             brokerService.waitUntilStopped();",
          "277:             brokerService = null;",
          "278:         }",
          "",
          "[Added Lines]",
          "280:     public void addOpenWireConnector() throws Exception {",
          "281:         cf = new ActiveMQConnectionFactory(jmsUri);",
          "284:     protected void addTranportConnectors() throws Exception {",
          "287:         if (isUseTcpConnector()) {",
          "288:             connector = brokerService.addConnector(",
          "289:                 \"stomp://0.0.0.0:\" + port + getAdditionalConfig());",
          "290:             port = connector.getConnectUri().getPort();",
          "291:             LOG.debug(\"Using amqp port \" + port);",
          "292:         }",
          "293:         if (isUseSslConnector()) {",
          "294:             connector = brokerService.addConnector(",
          "295:                 \"stomp+ssl://0.0.0.0:\" + sslPort + getAdditionalConfig());",
          "296:             sslPort = connector.getConnectUri().getPort();",
          "297:             LOG.debug(\"Using amqp+ssl port \" + sslPort);",
          "298:         }",
          "299:         if (isUseNioConnector()) {",
          "300:             connector = brokerService.addConnector(",
          "301:                 \"stomp+nio://0.0.0.0:\" + nioPort + getAdditionalConfig());",
          "302:             nioPort = connector.getConnectUri().getPort();",
          "303:             LOG.debug(\"Using amqp+nio port \" + nioPort);",
          "304:         }",
          "305:         if (isUseNioPlusSslConnector()) {",
          "306:             connector = brokerService.addConnector(",
          "307:                 \"stomp+nio+ssl://0.0.0.0:\" + nioSslPort + getAdditionalConfig());",
          "308:             nioSslPort = connector.getConnectUri().getPort();",
          "309:             LOG.debug(\"Using amqp+nio+ssl port \" + nioSslPort);",
          "310:         }",
          "313:     protected boolean isPersistent() {",
          "314:         return false;",
          "315:     }",
          "317:     protected boolean isUseJmx() {",
          "318:         return true;",
          "319:     }",
          "321:     protected boolean isUseTcpConnector() {",
          "322:         return true;",
          "323:     }",
          "325:     protected boolean isUseSslConnector() {",
          "326:         return false;",
          "327:     }",
          "329:     protected boolean isUseNioConnector() {",
          "330:         return false;",
          "331:     }",
          "333:     protected boolean isUseNioPlusSslConnector() {",
          "334:         return false;",
          "335:     }",
          "337:     protected String getAdditionalConfig() {",
          "338:         return \"\";",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "303:         return getClass().getName() + \".\" + name.getMethodName();",
          "304:     }",
          "307:         if (stompConnection != null) {",
          "308:             stompConnection.close();",
          "309:             stompConnection = null;",
          "310:         }",
          "",
          "[Removed Lines]",
          "306:     protected void stompDisconnect() throws IOException {",
          "",
          "[Added Lines]",
          "366:     protected void stompDisconnect() throws Exception {",
          "368:             stompConnection.disconnect();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTimeStampingBrokerPluginTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.junit.Assert.assertNull;",
          "21: import static org.junit.Assert.assertTrue;",
          "26: import java.util.concurrent.TimeUnit;",
          "28: import javax.jms.Connection;",
          "",
          "[Removed Lines]",
          "23: import java.io.IOException;",
          "24: import java.net.Socket;",
          "25: import java.net.URI;",
          "",
          "[Added Lines]",
          "23: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import javax.jms.Session;",
          "32: import javax.jms.TextMessage;",
          "35: import org.apache.activemq.broker.BrokerPlugin;",
          "37: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;",
          "38: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;",
          "39: import org.apache.activemq.broker.region.policy.PolicyEntry;",
          "40: import org.apache.activemq.broker.region.policy.PolicyMap;",
          "41: import org.apache.activemq.broker.util.TimeStampingBrokerPlugin;",
          "45: import org.junit.Test;",
          "47: import org.slf4j.Logger;",
          "48: import org.slf4j.LoggerFactory;",
          "52:     private static final Logger LOG = LoggerFactory.getLogger(StompTimeStampingBrokerPluginTest.class);",
          "58:     private Connection connection;",
          "59:     private Session session;",
          "78:         PolicyEntry policy = new PolicyEntry();",
          "79:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();",
          "",
          "[Removed Lines]",
          "34: import org.apache.activemq.ActiveMQConnectionFactory;",
          "36: import org.apache.activemq.broker.BrokerService;",
          "42: import org.junit.After;",
          "43: import org.junit.Before;",
          "44: import org.junit.Rule;",
          "46: import org.junit.rules.TestName;",
          "50: public class StompTimeStampingBrokerPluginTest {",
          "54:     private BrokerService broker;",
          "55:     private String connectionUri;",
          "56:     private int port;",
          "57:     private StompConnection stompConnection = new StompConnection();",
          "61:     @Rule public TestName name = new TestName();",
          "63:     @Before",
          "64:     public void setUp() throws Exception {",
          "65:         TimeStampingBrokerPlugin tsbp = new TimeStampingBrokerPlugin();",
          "67:         broker = new BrokerService();",
          "68:         broker.setPersistent(false);",
          "69:         broker.setUseJmx(false);",
          "70:         broker.setPlugins(new BrokerPlugin[] {tsbp});",
          "71:         connectionUri = broker.addConnector(\"tcp://0.0.0.0:0\").getPublishableConnectString();",
          "72:         String stompConnectionUri = broker.addConnector(\"stomp://0.0.0.0:0\").getPublishableConnectString();",
          "74:         URI uri = new URI(stompConnectionUri);",
          "75:         this.port = uri.getPort();",
          "",
          "[Added Lines]",
          "42: public class StompTimeStampingBrokerPluginTest extends StompTestSupport {",
          "49:     @Override",
          "50:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {",
          "51:         plugins.add(new TimeStampingBrokerPlugin());",
          "52:     }",
          "54:     @Override",
          "55:     protected void applyBrokerPolicies() throws Exception {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:         PolicyMap pMap = new PolicyMap();",
          "87:         pMap.setDefaultEntry(policy);",
          "92:         stompConnect();",
          "96:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
          "97:         connection.start();",
          "98:     }",
          "122:     public void testSendMessage() throws Exception {",
          "124:         Destination destination = session.createQueue(getQueueName());",
          "",
          "[Removed Lines]",
          "89:         broker.setDestinationPolicy(pMap);",
          "90:         broker.start();",
          "94:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);",
          "95:         connection = cf.createConnection();",
          "100:     @After",
          "101:     public void tearDown() throws Exception {",
          "102:         broker.stop();",
          "103:     }",
          "105:     protected StompConnection stompConnect() throws Exception {",
          "106:         if (stompConnection == null) {",
          "107:             stompConnection = new StompConnection();",
          "108:         }",
          "109:         stompConnection.open(createSocket());",
          "110:         return stompConnection;",
          "111:     }",
          "113:     protected Socket createSocket() throws IOException {",
          "114:         return new Socket(\"127.0.0.1\", this.port);",
          "115:     }",
          "117:     protected String getQueueName() {",
          "118:         return getClass().getName() + \".\" + name.getMethodName();",
          "119:     }",
          "121:     @Test",
          "",
          "[Added Lines]",
          "68:         brokerService.setDestinationPolicy(pMap);",
          "69:     }",
          "71:     @Override",
          "72:     public void setUp() throws Exception {",
          "73:         super.setUp();",
          "77:         connection = cf.createConnection(\"system\", \"manager\");",
          "82:     @Test(timeout = 60000)",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.junit.Assert.assertTrue;",
          "21: import static org.junit.Assert.fail;",
          "25: import java.util.ArrayList;",
          "26: import java.util.HashMap;",
          "27: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "23: import java.io.File;",
          "24: import java.net.URI;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import javax.management.ObjectName;",
          "35: import org.apache.activemq.broker.jmx.QueueViewMBean;",
          "36: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;",
          "37: import org.apache.activemq.broker.region.policy.PolicyEntry;",
          "38: import org.apache.activemq.broker.region.policy.PolicyMap;",
          "40: import org.apache.activemq.usage.SystemUsage;",
          "41: import org.junit.Test;",
          "42: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "34: import org.apache.activemq.broker.BrokerFactory;",
          "39: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     private String failMsg = null;",
          "67:     @Override",
          "68:     protected void applyMemoryLimitPolicy() throws Exception {",
          "69:         final SystemUsage memoryManager = new SystemUsage();",
          "",
          "[Removed Lines]",
          "52:     @Override",
          "53:     protected void createBroker() throws Exception {",
          "54:         brokerService = BrokerFactory.createBroker(new URI(\"broker://()/localhost\"));",
          "55:         brokerService.setUseJmx(true);",
          "56:         brokerService.getManagementContext().setCreateConnector(false);",
          "57:         brokerService.getManagementContext().setCreateMBeanServer(false);",
          "58:         brokerService.setDeleteAllMessagesOnStartup(true);",
          "60:         File testDataDir = new File(\"target/activemq-data/StompVirtualTopicTest\");",
          "61:         brokerService.setDataDirectoryFile(testDataDir);",
          "62:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();",
          "63:         persistenceAdapter.setDirectory(new File(testDataDir, \"kahadb\"));",
          "64:         brokerService.setPersistenceAdapter(persistenceAdapter);",
          "65:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     @Test(timeout = 90000)",
          "89:     public void testStompOnVirtualTopics() throws Exception {",
          "90:         LOG.info(\"Running Stomp Producer\");",
          "92:         StompConsumer consumerWorker = new StompConsumer(this);",
          "93:         Thread consumer = new Thread(consumerWorker);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         stompConnect();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7a4b53f799685e337972dd36ba0253c04bcc01f",
      "candidate_info": {
        "commit_hash": "e7a4b53f799685e337972dd36ba0253c04bcc01f",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/e7a4b53f799685e337972dd36ba0253c04bcc01",
        "files": [
          "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
          "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java",
          "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java",
          "activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java"
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-6013 - restrict classes which can be serialized inside the broker",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
          "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java",
          "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java",
          "activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java||activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
            "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
            "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
            "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
            "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java -> activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.ObjectInputStream;",
          "22: import java.io.ObjectStreamClass;",
          "23: import java.lang.reflect.Proxy;",
          "25: import org.slf4j.Logger;",
          "26: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Arrays;",
          "25: import java.util.Collection;",
          "26: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     private static final ClassLoader FALLBACK_CLASS_LOADER =",
          "32:         ClassLoadingAwareObjectInputStream.class.getClassLoader();",
          "34:     private final ClassLoader inLoader;",
          "36:     public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     private static String[] serializablePackages;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     @Override",
          "42:     protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {",
          "43:         ClassLoader cl = Thread.currentThread().getContextClassLoader();",
          "45:     }",
          "47:     @Override",
          "",
          "[Removed Lines]",
          "44:         return load(classDesc.getName(), cl, inLoader);",
          "",
          "[Added Lines]",
          "49:         Class clazz = load(classDesc.getName(), cl, inLoader);",
          "50:         checkSecurity(clazz);",
          "51:         return clazz;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52:             cinterfaces[i] = load(interfaces[i], cl);",
          "53:         }",
          "55:         try {",
          "57:         } catch (IllegalArgumentException e) {",
          "58:             try {",
          "60:             } catch (IllegalArgumentException e1) {",
          "62:             }",
          "63:             try {",
          "65:             } catch (IllegalArgumentException e2) {",
          "67:             }",
          "70:         }",
          "71:     }",
          "",
          "[Removed Lines]",
          "56:             return Proxy.getProxyClass(cl, cinterfaces);",
          "59:                 return Proxy.getProxyClass(inLoader, cinterfaces);",
          "64:                 return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);",
          "69:             throw new ClassNotFoundException(null, e);",
          "",
          "[Added Lines]",
          "62:         Class clazz = null;",
          "64:             clazz = Proxy.getProxyClass(cl, cinterfaces);",
          "67:                 clazz = Proxy.getProxyClass(inLoader, cinterfaces);",
          "72:                 clazz = Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);",
          "76:         }",
          "78:         if (clazz != null) {",
          "79:             checkSecurity(clazz);",
          "80:             return clazz;",
          "81:         } else {",
          "82:             throw new ClassNotFoundException(null);",
          "83:         }",
          "84:     }",
          "86:     public static String[] getSerialziablePackages() {",
          "87:        if (serializablePackages == null) {",
          "88:            serializablePackages = System.getProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\",",
          "89:                        \"java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper\").split(\",\");",
          "90:        }",
          "92:        return serializablePackages;",
          "93:     };",
          "95:     public static boolean isAllAllowed() {",
          "96:         return getSerialziablePackages().length == 1 && getSerialziablePackages()[0].equals(\"*\");",
          "97:     }",
          "99:     private void checkSecurity(Class clazz) throws ClassNotFoundException {",
          "100:         if (!clazz.isPrimitive()) {",
          "101:             if (clazz.getPackage() != null && !isAllAllowed()) {",
          "102:                boolean found = false;",
          "103:                for (String packageName : getSerialziablePackages()) {",
          "104:                    if (clazz.getPackage().getName().equals(packageName) || clazz.getPackage().getName().startsWith(packageName + \".\")) {",
          "105:                        found = true;",
          "106:                        break;",
          "107:                    }",
          "108:                }",
          "110:                if (!found) {",
          "111:                    throw new ClassNotFoundException(\"Forbidden \" + clazz + \"! This class is not allowed to be serialized. Add package with 'org.apache.activemq.SERIALIZABLE_PACKAGES' system property.\");",
          "112:                }",
          "113:             }",
          "",
          "---------------"
        ],
        "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java": [
          "File: activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java -> activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.io.Reader;",
          "22: import org.apache.activemq.command.MarshallAware;",
          "23: import org.apache.activemq.command.MessageDispatch;",
          "24: import org.apache.activemq.transport.util.TextWireFormat;",
          "25: import org.apache.activemq.wireformat.WireFormat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: <<<<<<< HEAD",
          "23: =======",
          "24: import com.thoughtworks.xstream.converters.Converter;",
          "25: import com.thoughtworks.xstream.converters.MarshallingContext;",
          "26: import com.thoughtworks.xstream.converters.UnmarshallingContext;",
          "27: import com.thoughtworks.xstream.io.HierarchicalStreamReader;",
          "28: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;",
          "29: >>>>>>> a7e2a44... https://issues.apache.org/jira/browse/AMQ-6013 - restrict classes which can be serialized inside the broker",
          "32: import org.apache.activemq.transport.stomp.XStreamSupport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     }",
          "98:         if (xStream == null) {",
          "99:             xStream = createXStream();",
          "",
          "[Removed Lines]",
          "97:     public XStream getXStream() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     protected XStream createXStream() {",
          "114:         xstream.ignoreUnknownElements();",
          "115:         return xstream;",
          "116:     }",
          "",
          "[Removed Lines]",
          "113:         XStream xstream = new XStream();",
          "",
          "[Added Lines]",
          "121:         final XStream xstream = XStreamSupport.createXStream();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java": [
          "File: activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java -> activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                         msg = createMapMessage(in);",
          "92:                         break;",
          "93:                     default:",
          "95:                 }",
          "96:             } catch (Throwable e) {",
          "97:                 command.getHeaders().put(Headers.TRANSFORMATION_ERROR, e.getMessage());",
          "",
          "[Removed Lines]",
          "94:                         throw new Exception(\"Unkown transformation: \" + transformation);",
          "",
          "[Added Lines]",
          "94:                         throw new Exception(\"Unknown transformation: \" + transformation);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:         }",
          "256:         if (xstream == null) {",
          "258:             xstream.ignoreUnknownElements();",
          "259:         }",
          "",
          "[Removed Lines]",
          "257:             xstream = new XStream();",
          "",
          "[Added Lines]",
          "257:             xstream = XStreamSupport.createXStream();",
          "",
          "---------------"
        ],
        "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java": [
          "File: activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java -> activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.transport.stomp;",
          "19: import com.thoughtworks.xstream.XStream;",
          "20: import com.thoughtworks.xstream.security.AnyTypePermission;",
          "21: import com.thoughtworks.xstream.security.NoTypePermission;",
          "22: import com.thoughtworks.xstream.security.PrimitiveTypePermission;",
          "23: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;",
          "25: import java.util.Collection;",
          "26: import java.util.Map;",
          "28: public class XStreamSupport {",
          "30:     public static XStream createXStream() {",
          "31:         XStream stream = new XStream();",
          "32:         stream.addPermission(NoTypePermission.NONE);",
          "33:         stream.addPermission(PrimitiveTypePermission.PRIMITIVES);",
          "34:         stream.allowTypeHierarchy(Collection.class);",
          "35:         stream.allowTypeHierarchy(Map.class);",
          "36:         stream.allowTypes(new Class[]{String.class});",
          "37:         if (ClassLoadingAwareObjectInputStream.isAllAllowed()) {",
          "38:             stream.addPermission(AnyTypePermission.ANY);",
          "39:         } else {",
          "40:             for (String packageName : ClassLoadingAwareObjectInputStream.getSerialziablePackages()) {",
          "41:                 stream.allowTypesByWildcard(new String[]{packageName + \".**\"});",
          "42:             }",
          "43:         }",
          "44:         return stream;",
          "45:     }",
          "47: }",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     }",
          "113:     public void startBroker() throws Exception {",
          "115:         createBroker(true);",
          "117:         XStreamBrokerContext context = new XStreamBrokerContext();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:         System.setProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\", \"*\");",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/XStreamBrokerContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.apache.activemq.transport.stomp.SamplePojo;",
          "25: import com.thoughtworks.xstream.XStream;",
          "27: public class XStreamBrokerContext implements BrokerContext {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.apache.activemq.transport.stomp.XStreamSupport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public XStreamBrokerContext() {",
          "34:         stream.processAnnotations(SamplePojo.class);",
          "36:         beansMap.put(\"xstream\", stream);",
          "",
          "[Removed Lines]",
          "33:         XStream stream = new XStream();",
          "",
          "[Added Lines]",
          "34:         XStream stream = XStreamSupport.createXStream();",
          "",
          "---------------"
        ],
        "activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java||activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java": [
          "File: activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java -> activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         if (message instanceof ObjectMessage) {",
          "82:             try {",
          "83:                 return ((ObjectMessage) message).getObject();",
          "87:             }",
          "88:         }",
          "89:         if (message instanceof MapMessage) {",
          "",
          "[Removed Lines]",
          "84:             } catch (JMSException e) {",
          "86:                 return e;",
          "",
          "[Added Lines]",
          "84:             } catch (Exception e) {",
          "86:                 return new String(\"Cannot display ObjectMessage body. Reason: \" + e.getMessage());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82e12f0e5f02d68766446bfb91bac021a4596389",
      "candidate_info": {
        "commit_hash": "82e12f0e5f02d68766446bfb91bac021a4596389",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/82e12f0e5f02d68766446bfb91bac021a4596389",
        "files": [
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java"
        ],
        "message": "Fix compile failure after back ports/cherry-picks",
        "before_after_code_files": [
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java||activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ],
          "candidate": [
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     }",
          "113:     public void startBroker() throws Exception {",
          "116:         XStreamBrokerContext context = new XStreamBrokerContext();",
          "117:         brokerService.setBrokerContext(context);",
          "",
          "[Removed Lines]",
          "114:         createBroker();",
          "",
          "[Added Lines]",
          "114:         createBroker(true);",
          "",
          "---------------"
        ],
        "activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java||activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java": [
          "File: activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java -> activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java"
        ]
      }
    },
    {
      "candidate_hash": "7a262b74dbdec043bae4f0aa01a4fd3a6e10243d",
      "candidate_info": {
        "commit_hash": "7a262b74dbdec043bae4f0aa01a4fd3a6e10243d",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/7a262b74dbdec043bae4f0aa01a4fd3a6e10243d",
        "files": [
          "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java",
          "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
          "activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
          "activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java",
          "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java"
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-6077 - define object message trusted packages on connection factory\n\n(cherry picked from commit 94446e53dc348b9109dff46e92484ed9e6cc1d72)\n(cherry picked from commit 5e02e305ea39314589329643c164be62d5b35592)",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java||activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java",
          "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java||activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
          "activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java||activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
          "activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java||activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java",
          "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java||activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java -> activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.net.URI;",
          "21: import java.net.URISyntaxException;",
          "25: import java.util.concurrent.ConcurrentHashMap;",
          "26: import java.util.concurrent.ConcurrentMap;",
          "27: import java.util.concurrent.CopyOnWriteArrayList;",
          "",
          "[Removed Lines]",
          "22: import java.util.HashMap;",
          "23: import java.util.Iterator;",
          "24: import java.util.Map;",
          "",
          "[Added Lines]",
          "22: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:     private int maxThreadPoolSize = DEFAULT_THREAD_POOL_SIZE;",
          "207:     private RejectedExecutionHandler rejectedTaskHandler = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     private List<String> trustedPackages = new ArrayList<String>();",
          "208:     private boolean trustAllPackages = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2593:     public void setConsumerExpiryCheckEnabled(boolean consumerExpiryCheckEnabled) {",
          "2594:         this.consumerExpiryCheckEnabled = consumerExpiryCheckEnabled;",
          "2595:     }",
          "2596: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2598:     public List<String> getTrustedPackages() {",
          "2599:         return trustedPackages;",
          "2600:     }",
          "2602:     public void setTrustedPackages(List<String> trustedPackages) {",
          "2603:         this.trustedPackages = trustedPackages;",
          "2604:     }",
          "2606:     public boolean isTrustAllPackages() {",
          "2607:         return trustAllPackages;",
          "2608:     }",
          "2610:     public void setTrustAllPackages(boolean trustAllPackages) {",
          "2611:         this.trustAllPackages = trustAllPackages;",
          "2612:     }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java||activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java -> activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.net.URISyntaxException;",
          "21: import java.security.AccessController;",
          "22: import java.security.PrivilegedAction;",
          "26: import java.util.concurrent.RejectedExecutionHandler;",
          "28: import javax.jms.Connection;",
          "",
          "[Removed Lines]",
          "23: import java.util.HashMap;",
          "24: import java.util.Map;",
          "25: import java.util.Properties;",
          "",
          "[Added Lines]",
          "23: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     protected int xaAckMode = -1; // ensure default init before setting via brokerUrl introspection in sub class",
          "183:     private boolean rmIdFromConnectionId = false;",
          "184:     private boolean consumerExpiryCheckEnabled = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:     private List<String> trustedPackages = new ArrayList<String>();",
          "184:     private boolean trustAllPackages = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:         connection.setNestedMapAndListEnabled(isNestedMapAndListEnabled());",
          "407:         connection.setRmIdFromConnectionId(isRmIdFromConnectionId());",
          "408:         connection.setConsumerExpiryCheckEnabled(isConsumerExpiryCheckEnabled());",
          "409:         if (transportListener != null) {",
          "410:             connection.addTransportListener(transportListener);",
          "411:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:         connection.setTrustedPackages(getTrustedPackages());",
          "410:         connection.setTrustAllPackages(isTrustAllPackages());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1244:     public void setConsumerExpiryCheckEnabled(boolean consumerExpiryCheckEnabled) {",
          "1245:         this.consumerExpiryCheckEnabled = consumerExpiryCheckEnabled;",
          "1246:     }",
          "1247: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1250:     public List<String> getTrustedPackages() {",
          "1251:         return trustedPackages;",
          "1252:     }",
          "1254:     public void setTrustedPackages(List<String> trustedPackages) {",
          "1255:         this.trustedPackages = trustedPackages;",
          "1256:     }",
          "1258:     public boolean isTrustAllPackages() {",
          "1259:         return trustAllPackages;",
          "1260:     }",
          "1262:     public void setTrustAllPackages(boolean trustAllPackages) {",
          "1263:         this.trustAllPackages = trustAllPackages;",
          "1264:     }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java||activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java -> activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import javax.jms.TransactionRolledBackException;",
          "42: import org.apache.activemq.blob.BlobDownloader;",
          "56: import org.apache.activemq.management.JMSConsumerStatsImpl;",
          "57: import org.apache.activemq.management.StatsCapable;",
          "58: import org.apache.activemq.management.StatsImpl;",
          "",
          "[Removed Lines]",
          "43: import org.apache.activemq.command.ActiveMQBlobMessage;",
          "44: import org.apache.activemq.command.ActiveMQDestination;",
          "45: import org.apache.activemq.command.ActiveMQMessage;",
          "46: import org.apache.activemq.command.ActiveMQTempDestination;",
          "47: import org.apache.activemq.command.CommandTypes;",
          "48: import org.apache.activemq.command.ConsumerId;",
          "49: import org.apache.activemq.command.ConsumerInfo;",
          "50: import org.apache.activemq.command.MessageAck;",
          "51: import org.apache.activemq.command.MessageDispatch;",
          "52: import org.apache.activemq.command.MessageId;",
          "53: import org.apache.activemq.command.MessagePull;",
          "54: import org.apache.activemq.command.RemoveInfo;",
          "55: import org.apache.activemq.command.TransactionId;",
          "",
          "[Added Lines]",
          "43: import org.apache.activemq.command.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:         if (m.getDataStructureType()==CommandTypes.ACTIVEMQ_BLOB_MESSAGE) {",
          "589:             ((ActiveMQBlobMessage)m).setBlobDownloader(new BlobDownloader(session.getBlobTransferPolicy()));",
          "590:         }",
          "591:         if (transformer != null) {",
          "592:             Message transformedMessage = transformer.consumerTransform(session, this, m);",
          "593:             if (transformedMessage != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:         if (m.getDataStructureType() == CommandTypes.ACTIVEMQ_OBJECT_MESSAGE) {",
          "580:             ((ActiveMQObjectMessage)m).setTrustAllPackages(session.getConnection().isTrustAllPackages());",
          "581:             ((ActiveMQObjectMessage)m).setTrustedPackages(session.getConnection().getTrustedPackages());",
          "582:         }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java||activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java -> activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.io.ObjectOutputStream;",
          "25: import java.io.OutputStream;",
          "26: import java.io.Serializable;",
          "27: import java.util.zip.DeflaterOutputStream;",
          "28: import java.util.zip.InflaterInputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.ArrayList;",
          "28: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: public class ActiveMQObjectMessage extends ActiveMQMessage implements ObjectMessage {",
          "69:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_OBJECT_MESSAGE;",
          "72:     protected transient Serializable object;",
          "74:     public Message copy() {",
          "75:         ActiveMQObjectMessage copy = new ActiveMQObjectMessage();",
          "76:         copy(copy);",
          "77:         return copy;",
          "78:     }",
          "",
          "[Removed Lines]",
          "70:     static final ClassLoader ACTIVEMQ_CLASSLOADER = ActiveMQObjectMessage.class.getClassLoader();",
          "",
          "[Added Lines]",
          "72:     private List<String> trustedPackages = new ArrayList<String>();",
          "73:     private boolean trustAllPackages = false;",
          "80:         copy.setTrustAllPackages(trustAllPackages);",
          "81:         copy.setTrustedPackages(trustedPackages);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:                 }",
          "188:                 DataInputStream dataIn = new DataInputStream(is);",
          "189:                 ClassLoadingAwareObjectInputStream objIn = new ClassLoadingAwareObjectInputStream(dataIn);",
          "190:                 try {",
          "191:                     object = (Serializable)objIn.readObject();",
          "192:                 } catch (ClassNotFoundException ce) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:                 objIn.setTrustedPackages(trustedPackages);",
          "196:                 objIn.setTrustAllPackages(trustAllPackages);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:         }",
          "235:         return super.toString();",
          "236:     }",
          "237: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     public List<String> getTrustedPackages() {",
          "246:         return trustedPackages;",
          "247:     }",
          "249:     public void setTrustedPackages(List<String> trustedPackages) {",
          "250:         this.trustedPackages = trustedPackages;",
          "251:     }",
          "253:     public boolean isTrustAllPackages() {",
          "254:         return trustAllPackages;",
          "255:     }",
          "257:     public void setTrustAllPackages(boolean trustAllPackages) {",
          "258:         this.trustAllPackages = trustAllPackages;",
          "259:     }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java -> activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.ObjectInputStream;",
          "22: import java.io.ObjectStreamClass;",
          "23: import java.lang.reflect.Proxy;",
          "28: import org.slf4j.Logger;",
          "29: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "24: import java.util.Arrays;",
          "25: import java.util.Collection;",
          "26: import java.util.Map;",
          "",
          "[Added Lines]",
          "24: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     public static final String[] serializablePackages;",
          "39:     private final ClassLoader inLoader;",
          "41:     static {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     private List<String> trustedPackages = new ArrayList<String>();",
          "38:     private boolean trustAllPackages = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException {",
          "47:         super(in);",
          "48:         inLoader = in.getClass().getClassLoader();",
          "49:     }",
          "51:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         trustedPackages.addAll(Arrays.asList(serializablePackages));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:         return serializablePackages.length == 1 && serializablePackages[0].equals(\"*\");",
          "93:     }",
          "95:     private void checkSecurity(Class clazz) throws ClassNotFoundException {",
          "96:         if (!clazz.isPrimitive()) {",
          "98:                boolean found = false;",
          "100:                    if (clazz.getPackage().getName().equals(packageName) || clazz.getPackage().getName().startsWith(packageName + \".\")) {",
          "101:                        found = true;",
          "102:                        break;",
          "103:                    }",
          "104:                }",
          "106:                if (!found) {",
          "107:                    throw new ClassNotFoundException(\"Forbidden \" + clazz + \"! This class is not allowed to be serialized. Add package with 'org.apache.activemq.SERIALIZABLE_PACKAGES' system property.\");",
          "108:                }",
          "",
          "[Removed Lines]",
          "97:             if (clazz.getPackage() != null && !isAllAllowed()) {",
          "99:                for (String packageName : serializablePackages) {",
          "",
          "[Added Lines]",
          "97:     private boolean trustAllPackages() {",
          "98:         return trustAllPackages || (trustedPackages.size() == 1 && trustedPackages.get(0).equals(\"*\"));",
          "99:     }",
          "103:             if (clazz.getPackage() != null && !trustAllPackages()) {",
          "105:                for (String packageName : getTrustedPackages()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193:         return null;",
          "194:     }",
          "196: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     public List<String> getTrustedPackages() {",
          "202:         return trustedPackages;",
          "203:     }",
          "205:     public void setTrustedPackages(List<String> trustedPackages) {",
          "206:         this.trustedPackages = trustedPackages;",
          "207:     }",
          "209:     public void addTrustedPackage(String trustedPackage) {",
          "210:         this.trustedPackages.add(trustedPackage);",
          "211:     }",
          "213:     public boolean isTrustAllPackages() {",
          "214:         return trustAllPackages;",
          "215:     }",
          "217:     public void setTrustAllPackages(boolean trustAllPackages) {",
          "218:         this.trustAllPackages = trustAllPackages;",
          "219:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73a0caf758f9e4916783a205c7e422b4db27905c",
      "candidate_info": {
        "commit_hash": "73a0caf758f9e4916783a205c7e422b4db27905c",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/73a0caf758f9e4916783a205c7e422b4db27905",
        "files": [
          "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
          "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-6013 - init serializable packages statically",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
          "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
          "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
            "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
            "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
            "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
            "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
            "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java||activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java -> activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     private static final ClassLoader FALLBACK_CLASS_LOADER =",
          "35:         ClassLoadingAwareObjectInputStream.class.getClassLoader();",
          "39:     private final ClassLoader inLoader;",
          "41:     public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException {",
          "42:         super(in);",
          "43:         inLoader = in.getClass().getClassLoader();",
          "",
          "[Removed Lines]",
          "37:     private static String[] serializablePackages;",
          "",
          "[Added Lines]",
          "37:     public static final String[] serializablePackages;",
          "41:     static {",
          "42:         serializablePackages = System.getProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\",",
          "43:                     \"java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper\").split(\",\");",
          "44:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         }",
          "82:     }",
          "93:     public static boolean isAllAllowed() {",
          "95:     }",
          "97:     private void checkSecurity(Class clazz) throws ClassNotFoundException {",
          "98:         if (!clazz.isPrimitive()) {",
          "99:             if (clazz.getPackage() != null && !isAllAllowed()) {",
          "100:                boolean found = false;",
          "102:                    if (clazz.getPackage().getName().equals(packageName) || clazz.getPackage().getName().startsWith(packageName + \".\")) {",
          "103:                        found = true;",
          "104:                        break;",
          "",
          "[Removed Lines]",
          "84:     public static String[] getSerialziablePackages() {",
          "85:        if (serializablePackages == null) {",
          "86:            serializablePackages = System.getProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\",",
          "87:                        \"java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper\").split(\",\");",
          "88:        }",
          "90:        return serializablePackages;",
          "91:     };",
          "94:         return getSerialziablePackages().length == 1 && getSerialziablePackages()[0].equals(\"*\");",
          "101:                for (String packageName : getSerialziablePackages()) {",
          "",
          "[Added Lines]",
          "90:         return serializablePackages.length == 1 && serializablePackages[0].equals(\"*\");",
          "97:                for (String packageName : serializablePackages) {",
          "",
          "---------------"
        ],
        "activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java||activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java": [
          "File: activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java -> activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.io.Reader;",
          "24: import com.thoughtworks.xstream.converters.Converter;",
          "25: import com.thoughtworks.xstream.converters.MarshallingContext;",
          "26: import com.thoughtworks.xstream.converters.UnmarshallingContext;",
          "27: import com.thoughtworks.xstream.io.HierarchicalStreamReader;",
          "28: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;",
          "30: import org.apache.activemq.command.MarshallAware;",
          "31: import org.apache.activemq.command.MessageDispatch;",
          "32: import org.apache.activemq.transport.stomp.XStreamSupport;",
          "",
          "[Removed Lines]",
          "22: <<<<<<< HEAD",
          "23: =======",
          "29: >>>>>>> a7e2a44... https://issues.apache.org/jira/browse/AMQ-6013 - restrict classes which can be serialized inside the broker",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     }",
          "106:         if (xStream == null) {",
          "107:             xStream = createXStream();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     public XStream getXStream() {",
          "",
          "---------------"
        ],
        "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java||activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java": [
          "File: activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java -> activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/XStreamSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         if (ClassLoadingAwareObjectInputStream.isAllAllowed()) {",
          "38:             stream.addPermission(AnyTypePermission.ANY);",
          "39:         } else {",
          "41:                 stream.allowTypesByWildcard(new String[]{packageName + \".**\"});",
          "42:             }",
          "43:         }",
          "",
          "[Removed Lines]",
          "40:             for (String packageName : ClassLoadingAwareObjectInputStream.getSerialziablePackages()) {",
          "",
          "[Added Lines]",
          "40:             for (String packageName : ClassLoadingAwareObjectInputStream.serializablePackages) {",
          "",
          "---------------"
        ],
        "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java||activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java": [
          "File: activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java -> activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     }",
          "110:     public void startBroker() throws Exception {",
          "114:         XStreamBrokerContext context = new XStreamBrokerContext();",
          "115:         brokerService.setBrokerContext(context);",
          "",
          "[Removed Lines]",
          "111:         System.setProperty(\"org.apache.activemq.SERIALIZABLE_PACKAGES\", \"*\");",
          "112:         createBroker(true);",
          "",
          "[Added Lines]",
          "111:         createBroker();",
          "",
          "---------------"
        ]
      }
    }
  ]
}