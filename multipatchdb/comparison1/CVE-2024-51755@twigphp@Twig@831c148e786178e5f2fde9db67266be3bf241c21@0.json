{
  "cve_id": "CVE-2024-51755",
  "cve_desc": "Twig is a template language for PHP. In a sandbox, an attacker can access attributes of Array-like objects as they were not checked by the security policy. They are now checked via the property policy and the `__isset()` method is now called after the security check. This is a BC break. This issue has been patched in versions 3.11.2 and 3.14.1. All users are advised to upgrade. There are no known workarounds for this issue.",
  "repo": "twigphp/Twig",
  "patch_hash": "831c148e786178e5f2fde9db67266be3bf241c21",
  "patch_info": {
    "commit_hash": "831c148e786178e5f2fde9db67266be3bf241c21",
    "repo": "twigphp/Twig",
    "commit_url": "https://github.com/twigphp/Twig/commit/831c148e786178e5f2fde9db67266be3bf241c21",
    "files": [
      "doc/api.rst",
      "src/Extension/CoreExtension.php",
      "src/Node/Expression/GetAttrExpression.php",
      "tests/Extension/SandboxTest.php"
    ],
    "message": "Sandbox ArrayAccess and do sandbox checks before isset() checks",
    "before_after_code_files": [
      "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php",
      "src/Node/Expression/GetAttrExpression.php||src/Node/Expression/GetAttrExpression.php",
      "tests/Extension/SandboxTest.php||tests/Extension/SandboxTest.php"
    ]
  },
  "patch_diff": {
    "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php": [
      "File: src/Extension/CoreExtension.php -> src/Extension/CoreExtension.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: use Twig\\Node\\Node;",
      "66: use Twig\\NodeVisitor\\MacroAutoImportNodeVisitor;",
      "67: use Twig\\Parser;",
      "68: use Twig\\Source;",
      "69: use Twig\\Template;",
      "70: use Twig\\TemplateWrapper;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68: use Twig\\Sandbox\\SecurityNotAllowedMethodError;",
      "69: use Twig\\Sandbox\\SecurityNotAllowedPropertyError;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93: final class CoreExtension extends AbstractExtension",
      "94: {",
      "95:     private $dateFormats = ['F j, Y H:i', '%d days'];",
      "96:     private $numberFormat = [0, '.', ','];",
      "97:     private $timezone = null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97:     public const ARRAY_LIKE_CLASSES = [",
      "98:         'ArrayIterator',",
      "99:         'ArrayObject',",
      "100:         'CachingIterator',",
      "101:         'RecursiveArrayIterator',",
      "102:         'RecursiveCachingIterator',",
      "103:         'SplDoublyLinkedList',",
      "104:         'SplFixedArray',",
      "105:         'SplObjectStorage',",
      "106:         'SplQueue',",
      "107:         'SplStack',",
      "108:         'WeakMap',",
      "109:     ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1588:     public static function getAttribute(Environment $env, Source $source, $object, $item, array $arguments = [], $type = Template::ANY_CALL, $isDefinedTest = false, $ignoreStrictCheck = false, $sandboxed = false, int $lineno = -1)",
      "1589:     {",
      "1591:         if (Template::METHOD_CALL !== $type) {",
      "1592:             $arrayItem = \\is_bool($item) || \\is_float($item) ? (int) $item : $item;",
      "1594:             if (((\\is_array($object) || $object instanceof \\ArrayObject) && (isset($object[$arrayItem]) || \\array_key_exists($arrayItem, (array) $object)))",
      "1595:                 || ($object instanceof \\ArrayAccess && isset($object[$arrayItem]))",
      "1596:             ) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1606:         $propertyNotAllowedError = null;",
      "1612:             if ($sandboxed && $object instanceof \\ArrayAccess && !\\in_array($object::class, self::ARRAY_LIKE_CLASSES, true)) {",
      "1613:                 try {",
      "1614:                     $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $arrayItem, $lineno, $source);",
      "1615:                 } catch (SecurityNotAllowedPropertyError $propertyNotAllowedError) {",
      "1616:                     goto methodCheck;",
      "1617:                 }",
      "1618:             }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1664:         if (Template::METHOD_CALL !== $type) {",
      "1665:             if (isset($object->$item) || \\array_key_exists((string) $item, (array) $object)) {",
      "1666:                 if ($isDefinedTest) {",
      "1667:                     return true;",
      "1668:                 }",
      "1674:                 return $object->$item;",
      "1675:             }",
      "1676:         }",
      "1678:         static $cache = [];",
      "1680:         $class = \\get_class($object);",
      "",
      "[Removed Lines]",
      "1670:                 if ($sandboxed) {",
      "1671:                     $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $lineno, $source);",
      "1672:                 }",
      "",
      "[Added Lines]",
      "1691:             if ($sandboxed) {",
      "1692:                 try {",
      "1693:                     $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $lineno, $source);",
      "1694:                 } catch (SecurityNotAllowedPropertyError $propertyNotAllowedError) {",
      "1695:                     goto methodCheck;",
      "1696:                 }",
      "1697:             }",
      "1708:         methodCheck:",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1733:                 return false;",
      "1734:             }",
      "1736:             if ($ignoreStrictCheck || !$env->isStrictVariables()) {",
      "1737:                 return;",
      "1738:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1768:             if ($propertyNotAllowedError) {",
      "1769:                 throw $propertyNotAllowedError;",
      "1770:             }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1740:             throw new RuntimeError(\\sprintf('Neither the property \"%1$s\" nor one of the methods \"%1$s()\", \"get%1$s()\"/\"is%1$s()\"/\"has%1$s()\" or \"__call()\" exist and have public access in class \"%2$s\".', $item, $class), $lineno, $source);",
      "1741:         }",
      "1745:         }",
      "1749:         }",
      "",
      "[Removed Lines]",
      "1743:         if ($isDefinedTest) {",
      "1744:             return true;",
      "1747:         if ($sandboxed) {",
      "1748:             $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $lineno, $source);",
      "",
      "[Added Lines]",
      "1779:         if ($sandboxed) {",
      "1780:             try {",
      "1781:                 $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $lineno, $source);",
      "1782:             } catch (SecurityNotAllowedMethodError $e) {",
      "1783:                 if ($isDefinedTest) {",
      "1784:                     return false;",
      "1785:                 }",
      "1787:                 if ($propertyNotAllowedError) {",
      "1788:                     throw $propertyNotAllowedError;",
      "1789:                 }",
      "1791:                 throw $e;",
      "1792:             }",
      "1795:         if ($isDefinedTest) {",
      "1796:             return true;",
      "",
      "---------------"
    ],
    "src/Node/Expression/GetAttrExpression.php||src/Node/Expression/GetAttrExpression.php": [
      "File: src/Node/Expression/GetAttrExpression.php -> src/Node/Expression/GetAttrExpression.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     public function compile(Compiler $compiler): void",
      "32:     {",
      "33:         $env = $compiler->getEnvironment();",
      "36:         if (",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:         $arrayAccessSandbox = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:                 ->raw('(('.$var.' = ')",
      "45:                 ->subcompile($this->getNode('node'))",
      "46:                 ->raw(') && is_array(')",
      "48:                 ->raw(') || ')",
      "49:                 ->raw($var)",
      "51:                 ->raw($var)",
      "52:                 ->raw('[')",
      "53:                 ->subcompile($this->getNode('attribute'))",
      "55:             ;",
      "58:         }",
      "60:         $compiler->raw('CoreExtension::getAttribute($this->env, $this->source, ');",
      "",
      "[Removed Lines]",
      "47:                 ->raw($var)",
      "50:                 ->raw(' instanceof ArrayAccess ? (')",
      "54:                 ->raw('] ?? null) : null)')",
      "57:             return;",
      "",
      "[Added Lines]",
      "48:                 ->raw($var);",
      "50:             if (!$env->hasExtension(SandboxExtension::class)) {",
      "51:                 $compiler",
      "52:                     ->raw(') || ')",
      "53:                     ->raw($var)",
      "54:                     ->raw(' instanceof ArrayAccess ? (')",
      "55:                     ->raw($var)",
      "56:                     ->raw('[')",
      "57:                     ->subcompile($this->getNode('attribute'))",
      "58:                     ->raw('] ?? null) : null)')",
      "59:                 ;",
      "61:                 return;",
      "62:             }",
      "64:             $arrayAccessSandbox = true;",
      "66:             $compiler",
      "69:                 ->raw(' instanceof ArrayAccess && in_array(')",
      "70:                 ->raw($var.'::class')",
      "71:                 ->raw(', CoreExtension::ARRAY_LIKE_CLASSES, true) ? (')",
      "75:                 ->raw('] ?? null) : ')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:             ->raw(', ')->repr($this->getNode('node')->getTemplateLine())",
      "84:             ->raw(')')",
      "85:         ;",
      "86:     }",
      "87: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:         if ($arrayAccessSandbox) {",
      "107:             $compiler->raw(')');",
      "108:         }",
      "",
      "---------------"
    ],
    "tests/Extension/SandboxTest.php||tests/Extension/SandboxTest.php": [
      "File: tests/Extension/SandboxTest.php -> tests/Extension/SandboxTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:             'arr' => ['obj' => new FooObject()],",
      "44:             'child_obj' => new ChildClass(),",
      "45:             'some_array' => [5, 6, 7, new FooObject()],",
      "46:         ];",
      "48:         self::$templates = [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:             'array_like' => new ArrayLikeObject(),",
      "47:             'magic' => new MagicObject(),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:             '1_childobj_parentmethod' => '{{ child_obj.ParentMethod() }}',",
      "67:             '1_childobj_childmethod' => '{{ child_obj.ChildMethod() }}',",
      "68:             '1_empty' => '',",
      "69:         ];",
      "70:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:             '1_array_like' => '{{ array_like[\"foo\"] }}',",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "141:         $this->assertEquals('FOO', $twig->load('1_basic')->render(self::$params), 'Sandbox does nothing if it is disabled globally');",
      "142:     }",
      "145:     {",
      "146:         $twig = $this->getEnvironment(true, [], self::$templates);",
      "147:         try {",
      "149:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method is called');",
      "153:         }",
      "154:     }",
      "",
      "[Removed Lines]",
      "144:     public function testSandboxUnallowedMethodAccessor()",
      "148:             $twig->load('1_basic1')->render(self::$params);",
      "150:         } catch (SecurityNotAllowedMethodError $e) {",
      "151:             $this->assertEquals('Twig\\Tests\\Extension\\FooObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\FooObject\" class');",
      "152:             $this->assertEquals('foo', $e->getMethodName(), 'Exception should be raised on the \"foo\" method');",
      "",
      "[Added Lines]",
      "147:     public function testSandboxUnallowedPropertyAccessor()",
      "151:             $twig->load('1_basic1')->render(['obj' => new MagicObject()]);",
      "153:         } catch (SecurityNotAllowedPropertyError $e) {",
      "154:             $this->assertEquals('Twig\\Tests\\Extension\\MagicObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\MagicObject\" class');",
      "155:             $this->assertEquals('foo', $e->getPropertyName(), 'Exception should be raised on the \"foo\" property');",
      "156:         }",
      "157:     }",
      "159:     public function testSandboxUnallowedArrayIndexAccessor()",
      "160:     {",
      "161:         $twig = $this->getEnvironment(true, [], self::$templates);",
      "164:         $this->assertSame('bar', $twig->load('1_array_like')->render(['array_like' => new \\ArrayObject(['foo' => 'bar'])]));",
      "166:         try {",
      "167:             $twig->load('1_array_like')->render(self::$params);",
      "168:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method is called');",
      "169:         } catch (SecurityNotAllowedPropertyError $e) {",
      "170:             $this->assertEquals('Twig\\Tests\\Extension\\ArrayLikeObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\ArrayLikeObject\" class');",
      "171:             $this->assertEquals('foo', $e->getPropertyName(), 'Exception should be raised on the \"foo\" property');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "300:         return [",
      "301:             'constant_test' => ['{{ obj is constant(\"PHP_INT_MAX\") }}', ''],",
      "302:             'set_object' => ['{% set a = obj.anotherFooObject %}{{ a.foo }}', 'foo'],",
      "304:             'is_null' => ['{{ obj is null }}', ''],",
      "305:             'is_sameas' => ['{{ obj is same as(obj) }}', '1'],",
      "306:             'is_sameas_no_brackets' => ['{{ obj is same as obj }}', '1'],",
      "",
      "[Removed Lines]",
      "303:             'is_defined' => ['{{ obj.anotherFooObject is defined }}', '1'],",
      "",
      "[Added Lines]",
      "322:             'is_defined1' => ['{{ obj.anotherFooObject is defined }}', '1'],",
      "323:             'is_defined2' => ['{{ magic.foo is defined }}', ''],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "610:         return new self();",
      "611:     }",
      "612: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "634: class ArrayLikeObject extends \\ArrayObject",
      "635: {",
      "636:     public function offsetExists($offset): bool",
      "637:     {",
      "638:         throw new \\BadMethodCallException('Should not be called');",
      "639:     }",
      "641:     public function offsetGet($offset): mixed",
      "642:     {",
      "643:         throw new \\BadMethodCallException('Should not be called');",
      "644:     }",
      "646:     public function offsetSet($offset, $value): void",
      "647:     {",
      "648:     }",
      "650:     public function offsetUnset($offset): void",
      "651:     {",
      "652:     }",
      "653: }",
      "655: class MagicObject",
      "656: {",
      "657:     public function __get($name): mixed",
      "658:     {",
      "659:         throw new \\BadMethodCallException('Should not be called');",
      "660:     }",
      "662:     public function __isset($name): bool",
      "663:     {",
      "664:         throw new \\BadMethodCallException('Should not be called');",
      "665:     }",
      "666: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2bb8c2460a2c519c498df9b643d5277117155a73",
      "candidate_info": {
        "commit_hash": "2bb8c2460a2c519c498df9b643d5277117155a73",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/2bb8c2460a2c519c498df9b643d5277117155a73",
        "files": [
          "src/Extension/SandboxExtension.php",
          "src/NodeVisitor/SandboxNodeVisitor.php",
          "tests/Extension/SandboxTest.php"
        ],
        "message": "Fix sandbox handling for __toString()",
        "before_after_code_files": [
          "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php",
          "src/NodeVisitor/SandboxNodeVisitor.php||src/NodeVisitor/SandboxNodeVisitor.php",
          "tests/Extension/SandboxTest.php||tests/Extension/SandboxTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Extension/SandboxTest.php||tests/Extension/SandboxTest.php"
          ],
          "candidate": [
            "tests/Extension/SandboxTest.php||tests/Extension/SandboxTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php": [
          "File: src/Extension/SandboxExtension.php -> src/Extension/SandboxExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     public function ensureToStringAllowed($obj, int $lineno = -1, ?Source $source = null)",
          "121:     {",
          "122:         if ($this->isSandboxed($source) && $obj instanceof \\Stringable) {",
          "123:             try {",
          "124:                 $this->policy->checkMethodAllowed($obj, '__toString');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         if (\\is_array($obj)) {",
          "123:             foreach ($obj as $v) {",
          "124:                 $this->ensureToStringAllowed($v, $lineno, $source);",
          "125:             }",
          "127:             return $obj;",
          "128:         }",
          "",
          "---------------"
        ],
        "src/NodeVisitor/SandboxNodeVisitor.php||src/NodeVisitor/SandboxNodeVisitor.php": [
          "File: src/NodeVisitor/SandboxNodeVisitor.php -> src/NodeVisitor/SandboxNodeVisitor.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Twig\\Node\\CheckSecurityCallNode;",
          "16: use Twig\\Node\\CheckSecurityNode;",
          "17: use Twig\\Node\\CheckToStringNode;",
          "18: use Twig\\Node\\Expression\\Binary\\ConcatBinary;",
          "19: use Twig\\Node\\Expression\\Binary\\RangeBinary;",
          "20: use Twig\\Node\\Expression\\FilterExpression;",
          "21: use Twig\\Node\\Expression\\FunctionExpression;",
          "22: use Twig\\Node\\Expression\\GetAttrExpression;",
          "23: use Twig\\Node\\Expression\\NameExpression;",
          "24: use Twig\\Node\\ModuleNode;",
          "25: use Twig\\Node\\Node;",
          "26: use Twig\\Node\\PrintNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use Twig\\Node\\Expression\\ArrayExpression;",
          "25: use Twig\\Node\\Expression\\Unary\\SpreadUnary;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     {",
          "121:         $expr = $node->getNode($name);",
          "122:         if (($expr instanceof NameExpression || $expr instanceof GetAttrExpression) && !$expr->isGenerator()) {",
          "124:         }",
          "125:     }",
          "",
          "[Removed Lines]",
          "123:             $node->setNode($name, new CheckToStringNode($expr));",
          "",
          "[Added Lines]",
          "126:             $new = new CheckToStringNode($expr);",
          "127:             if ($expr->hasAttribute('spread')) {",
          "128:                 $new->setAttribute('spread', $expr->getAttribute('spread'));",
          "129:             }",
          "130:             $node->setNode($name, $new);",
          "131:         } elseif ($expr instanceof SpreadUnary) {",
          "132:             $this->wrapNode($expr, 'node');",
          "133:         } elseif ($expr instanceof ArrayExpression) {",
          "134:             foreach ($expr as $name => $_) {",
          "135:                 $this->wrapNode($expr, $name);",
          "136:             }",
          "",
          "---------------"
        ],
        "tests/Extension/SandboxTest.php||tests/Extension/SandboxTest.php": [
          "File: tests/Extension/SandboxTest.php -> tests/Extension/SandboxTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             'obj' => new FooObject(),",
          "43:             'arr' => ['obj' => new FooObject()],",
          "44:             'child_obj' => new ChildClass(),",
          "45:         ];",
          "47:         self::$templates = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:             'some_array' => [5, 6, 7, new FooObject()],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:     public function testSandboxUnallowedToString($template)",
          "248:     {",
          "250:         try {",
          "251:             $twig->load('index')->render(self::$params);",
          "253:         } catch (SecurityNotAllowedMethodError $e) {",
          "254:             $this->assertEquals('Twig\\Tests\\Extension\\FooObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\FooObject\" class');",
          "255:             $this->assertEquals('__tostring', $e->getMethodName(), 'Exception should be raised on the \"__toString\" method');",
          "",
          "[Removed Lines]",
          "249:         $twig = $this->getEnvironment(true, [], ['index' => $template], [], ['upper'], ['Twig\\Tests\\Extension\\FooObject' => 'getAnotherFooObject'], [], ['random']);",
          "252:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
          "",
          "[Added Lines]",
          "250:         $twig = $this->getEnvironment(true, [], ['index' => $template], [], ['upper', 'join', 'replace'], ['Twig\\Tests\\Extension\\FooObject' => 'getAnotherFooObject'], [], ['random']);",
          "253:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method \"__toString()\" method is called in the template');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:             'object_chain_and_function' => ['{{ random(obj.anotherFooObject) }}'],",
          "273:             'concat' => ['{{ obj ~ \"\" }}'],",
          "274:             'concat_again' => ['{{ \"\" ~ obj }}'],",
          "275:         ];",
          "276:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:             'object_in_arguments' => ['{{ \"__toString\"|replace({\"__toString\": obj}) }}'],",
          "277:             'object_in_array' => ['{{ [12, \"foo\", obj]|join(\", \") }}'],",
          "278:             'object_in_array_var' => ['{{ some_array|join(\", \") }}'],",
          "279:             'object_in_array_nested' => ['{{ [12, \"foo\", [12, \"foo\", obj]]|join(\", \") }}'],",
          "280:             'object_in_array_var_nested' => ['{{ [12, \"foo\", some_array]|join(\", \") }}'],",
          "281:             'object_in_array_dynamic_key' => ['{{ {(obj): \"foo\"}|join(\", \") }}'],",
          "282:             'object_in_array_dynamic_key_nested' => ['{{ {\"foo\": { (obj): \"foo\" }}|join(\", \") }}'],",
          "283:             'context' => ['{{ _context|join(\", \") }}'],",
          "284:             'spread_array_operator' => ['{{ [1, 2, ...[5, 6, 7, obj]]|join(\",\") }}'],",
          "285:             'spread_array_operator_var' => ['{{ [1, 2, ...some_array]|join(\",\") }}'],",
          "",
          "---------------"
        ]
      }
    }
  ]
}