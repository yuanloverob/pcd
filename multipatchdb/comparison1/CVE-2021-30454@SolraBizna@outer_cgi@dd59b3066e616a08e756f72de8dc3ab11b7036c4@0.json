{
  "cve_id": "CVE-2021-30454",
  "cve_desc": "An issue was discovered in the outer_cgi crate before 0.2.1 for Rust. A user-provided Read instance receives an uninitialized memory buffer from KeyValueReader.",
  "repo": "SolraBizna/outer_cgi",
  "patch_hash": "dd59b3066e616a08e756f72de8dc3ab11b7036c4",
  "patch_info": {
    "commit_hash": "dd59b3066e616a08e756f72de8dc3ab11b7036c4",
    "repo": "SolraBizna/outer_cgi",
    "commit_url": "https://github.com/SolraBizna/outer_cgi/commit/dd59b3066e616a08e756f72de8dc3ab11b7036c4",
    "files": [
      "Cargo.toml",
      "src/fcgi.rs",
      "src/lib.rs",
      "src/main.rs",
      "src/options.rs",
      "src/unix.rs"
    ],
    "message": "Fix some unnecessary use of uninitialized memory, and do lots of other minor cleanup",
    "before_after_code_files": [
      "src/fcgi.rs||src/fcgi.rs",
      "src/lib.rs||src/lib.rs",
      "src/main.rs||src/main.rs",
      "src/options.rs||src/options.rs",
      "src/unix.rs||src/unix.rs"
    ]
  },
  "patch_diff": {
    "src/fcgi.rs||src/fcgi.rs": [
      "File: src/fcgi.rs -> src/fcgi.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "180:             Some(Err(x)) => return Some(Err(x)),",
      "181:             None => return Some(Err(io::Error::from(io::ErrorKind::UnexpectedEof))),",
      "182:         } as usize;",
      "189:         match self.reader.read_exact(key_buffer.as_mut_slice()) {",
      "190:             Ok(()) => (),",
      "191:             Err(x) => return Some(Err(x)),",
      "",
      "[Removed Lines]",
      "183:         let mut key_buffer = Vec::with_capacity(key_length);",
      "184:         let mut value_buffer = Vec::with_capacity(value_length);",
      "185:         unsafe {",
      "186:             key_buffer.set_len(key_length);",
      "187:             value_buffer.set_len(value_length);",
      "188:         }",
      "",
      "[Added Lines]",
      "183:         let mut key_buffer = Vec::new();",
      "184:         let mut value_buffer = Vec::new();",
      "185:         key_buffer.resize(key_length, 0);",
      "186:         value_buffer.resize(value_length, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:     }",
      "449:     fn handle_request<H>(&mut self, handler: &H,",
      "450:                          mut env: HashMap<String,String>) -> io::Result<()>",
      "452:                 -> io::Result<i32> {",
      "454:         self.begin_request()?;",
      "",
      "[Removed Lines]",
      "451:     where H: Fn(&mut IO, HashMap<String, String>)",
      "",
      "[Added Lines]",
      "449:     where H: Fn(&mut dyn IO, HashMap<String, String>)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "476:     pub fn handle_requests<H>(&mut self, handler: &H,",
      "477:                               static_env: &HashMap<String,String>)",
      "478:                               -> io::Result<()>",
      "",
      "[Removed Lines]",
      "479:     where H: Fn(&mut IO, HashMap<String, String>) -> io::Result<i32> {",
      "",
      "[Added Lines]",
      "477:     where H: Fn(&mut dyn IO, HashMap<String, String>) -> io::Result<i32> {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "637:                       options: Options,",
      "638:                       static_env: &HashMap<String,String>)",
      "639:                       -> i32",
      "641:     + Sync + Send + Copy + RefUnwindSafe {",
      "642:     use crossbeam_channel as cc;",
      "",
      "[Removed Lines]",
      "636: pub fn listen_loop<H>(mut listener: Box<Listener>, handler: H,",
      "640: where H: 'static + Fn(&mut IO, HashMap<String, String>) -> io::Result<i32>",
      "",
      "[Added Lines]",
      "634: pub fn listen_loop<H>(mut listener: Box<dyn Listener>, handler: H,",
      "638: where H: 'static + Fn(&mut dyn IO, HashMap<String, String>) -> io::Result<i32>",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "673:         loop {",
      "674:             let to_send = listener.accept_connection();",
      "675:             let should_break = to_send.is_err();",
      "678:             if should_break { break }",
      "679:         }",
      "680:     }).expect(\"Error spawning listen thread\");",
      "",
      "[Removed Lines]",
      "677:             listen_tx.send(to_send).is_ok();",
      "",
      "[Added Lines]",
      "675:             if !listen_tx.send(to_send).is_ok() { break }",
      "",
      "---------------"
    ],
    "src/lib.rs||src/lib.rs": [
      "File: src/lib.rs -> src/lib.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "221: pub fn main<I, H>(init: I, handler: H) -> !",
      "222: where I: 'static + Fn(u32),",
      "224:     + Sync + Send + Copy + RefUnwindSafe {",
      "225:     use std::process::exit;",
      "226:     match sub_main(init, handler) {",
      "",
      "[Removed Lines]",
      "223:       H: 'static + Fn(&mut IO, HashMap<String, String>) -> io::Result<i32>",
      "",
      "[Added Lines]",
      "223:       H: 'static + Fn(&mut dyn IO, HashMap<String, String>) -> io::Result<i32>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "235: fn sub_main<I, H>(init: I, handler: H) -> io::Result<i32>",
      "236: where I: 'static + Fn(u32),",
      "238:     + Sync + Send + Copy + RefUnwindSafe {",
      "239:     let args: Vec<String> = std::env::args().collect();",
      "240:     let static_env: HashMap<String, String> = std::env::vars().collect();",
      "",
      "[Removed Lines]",
      "237:       H: 'static + Fn(&mut IO, HashMap<String, String>) -> io::Result<i32>",
      "",
      "[Added Lines]",
      "237:       H: 'static + Fn(&mut dyn IO, HashMap<String, String>) -> io::Result<i32>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "293:                     Ok(1)",
      "294:                 }",
      "295:                 else {",
      "297:                     if let Some(list)=static_env.get(\"FCGI_WEB_SERVER_ADDRS\") {",
      "298:                         Box::new(ParanoidTcpListener::new(bind_options.addr",
      "299:                                                           .unwrap(), list)?)",
      "",
      "[Removed Lines]",
      "296:                     let listener: Box<Listener> =",
      "",
      "[Added Lines]",
      "296:                     let listener: Box<dyn Listener> =",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "334:                         eprintln!(\"WARNING: Value of FCGI_WEB_SERVER_ADDRS is \\",
      "335:                                    ignored for non-TCP sockets!\");",
      "336:                     }",
      "338:                         = unix::listen(bind_options.addr.unwrap().as_path(),",
      "339:                                        unix_socket_options)?;",
      "340:                     os_options.post_setup()?;",
      "",
      "[Removed Lines]",
      "337:                     let mut listener",
      "",
      "[Added Lines]",
      "337:                     let listener",
      "",
      "---------------"
    ],
    "src/main.rs||src/main.rs": [
      "File: src/main.rs -> src/main.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:               max_parallelism);",
      "10: }",
      "13:     io.write_all(b\"Content-type: text/plain; charset=utf-8\\n\\n\\",
      "14:                    Hello world!\\n\\n\")?;",
      "15:     let mut kvs: Vec<(String,String)> = env.into_iter().collect();",
      "",
      "[Removed Lines]",
      "12: fn handler(io: &mut IO, env: HashMap<String,String>) -> io::Result<i32> {",
      "",
      "[Added Lines]",
      "12: fn handler(io: &mut dyn IO, env: HashMap<String,String>) -> io::Result<i32> {",
      "",
      "---------------"
    ],
    "src/options.rs||src/options.rs": [
      "File: src/options.rs -> src/options.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:     pub fn post_setup(self) -> io::Result<()> { Ok(()) }",
      "35: }",
      "38:     #[cfg(unix)] return unix::fix_fds(env);",
      "39:     #[cfg(not(unix))] return None;",
      "40: }",
      "",
      "[Removed Lines]",
      "37: pub fn fix_fds(env: &HashMap<String,String>) -> Option<Box<Listener>> {",
      "",
      "[Added Lines]",
      "37: pub fn fix_fds(env: &HashMap<String,String>) -> Option<Box<dyn Listener>> {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162:                                cmdline: Iter<String>) -> bool {",
      "163:     let mut next = cmdline;",
      "164:     let mut ok = true;",
      "",
      "[Removed Lines]",
      "161: pub fn handle_command_line<'a>(handlers: &mut [&mut OptionHandler],",
      "",
      "[Added Lines]",
      "161: pub fn handle_command_line<'a>(handlers: &mut [&mut dyn OptionHandler],",
      "",
      "---------------"
    ],
    "src/unix.rs||src/unix.rs": [
      "File: src/unix.rs -> src/unix.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     if write_fd != 2 {",
      "43:         nix::unistd::dup2(write_fd, 2)",
      "44:             .expect(\"Unexpected error calling dup2 on syslog diversion pipe\");",
      "46:     }",
      "47:     let read = unsafe { File::from_raw_fd(read_fd) };",
      "",
      "[Removed Lines]",
      "45:         nix::unistd::close(write_fd).is_ok(); // ignore error",
      "",
      "[Added Lines]",
      "45:         let _ = nix::unistd::close(write_fd); // ignore error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     use nix::unistd::ForkResult;",
      "61:     match nix::unistd::fork() {",
      "62:         Ok(ForkResult::Child) => {",
      "64:             unsafe {",
      "65:                 libc::openlog(identifier.as_ptr(), 0, libc::LOG_USER);",
      "66:             }",
      "",
      "[Removed Lines]",
      "63:             nix::unistd::close(write_fd).is_ok(); // ignore result",
      "",
      "[Added Lines]",
      "63:             let _ = nix::unistd::close(write_fd); // ignore result",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:             std::process::exit(0)",
      "80:         },",
      "81:         Ok(ForkResult::Parent{..}) => {",
      "83:         },",
      "84:         Err(_) => {",
      "",
      "[Removed Lines]",
      "82:             nix::unistd::close(read_fd).is_ok(); // ignore result",
      "",
      "[Added Lines]",
      "82:             let _ = nix::unistd::close(read_fd); // ignore result",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:     let fd0_ok = fd_ok(0);",
      "109:     let fd1_ok = fd_ok(1);",
      "",
      "[Removed Lines]",
      "106: pub fn fix_fds(env: &HashMap<String,String>) -> Option<Box<Listener>> {",
      "",
      "[Added Lines]",
      "106: pub fn fix_fds(env: &HashMap<String,String>) -> Option<Box<dyn Listener>> {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a46fd55a8851ce389855ce197cfe61cd6c6c0145",
      "candidate_info": {
        "commit_hash": "a46fd55a8851ce389855ce197cfe61cd6c6c0145",
        "repo": "SolraBizna/outer_cgi",
        "commit_url": "https://github.com/SolraBizna/outer_cgi/commit/a46fd55a8851ce389855ce197cfe61cd6c6c0145",
        "files": [
          "src/fcgi.rs"
        ],
        "message": "More efficient (and a bit clearer) way of making a zero-initialized vector. Thanks, @Shnatsel",
        "before_after_code_files": [
          "src/fcgi.rs||src/fcgi.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/fcgi.rs||src/fcgi.rs"
          ],
          "candidate": [
            "src/fcgi.rs||src/fcgi.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/fcgi.rs||src/fcgi.rs": [
          "File: src/fcgi.rs -> src/fcgi.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:             Some(Err(x)) => return Some(Err(x)),",
          "181:             None => return Some(Err(io::Error::from(io::ErrorKind::UnexpectedEof))),",
          "182:         } as usize;",
          "187:         match self.reader.read_exact(key_buffer.as_mut_slice()) {",
          "188:             Ok(()) => (),",
          "189:             Err(x) => return Some(Err(x)),",
          "",
          "[Removed Lines]",
          "183:         let mut key_buffer = Vec::new();",
          "184:         let mut value_buffer = Vec::new();",
          "185:         key_buffer.resize(key_length, 0);",
          "186:         value_buffer.resize(value_length, 0);",
          "",
          "[Added Lines]",
          "183:         let mut key_buffer = vec![0; key_length];",
          "184:         let mut value_buffer = vec![0; value_length];",
          "",
          "---------------"
        ]
      }
    }
  ]
}