{
  "cve_id": "CVE-2024-29896",
  "cve_desc": "Astro-Shield is a library to compute the subresource integrity hashes for your JS scripts and CSS stylesheets. When automated CSP headers generation for SSR content is enabled and the web application serves content that can be partially controlled by external users, then it is possible that the CSP headers generation feature might be \"allow-listing\" malicious injected resources like inlined JS, or references to external malicious scripts. The fix is available in version 1.3.0.",
  "repo": "KindSpells/astro-shield",
  "patch_hash": "41b84576d37fa486a57005ea297658d0bc38566d",
  "patch_info": {
    "commit_hash": "41b84576d37fa486a57005ea297658d0bc38566d",
    "repo": "KindSpells/astro-shield",
    "commit_url": "https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d",
    "files": [
      "README.md",
      "package.json",
      "src/core.mjs",
      "src/headers.mjs",
      "src/main.mjs",
      "tests/core.test.mts",
      "tests/headers.test.mts",
      "tests/main.test.mts",
      "vitest.config.unit.mts"
    ],
    "message": "feat: cross-origin resources allow-lists\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
    "before_after_code_files": [
      "src/core.mjs||src/core.mjs",
      "src/headers.mjs||src/headers.mjs",
      "src/main.mjs||src/main.mjs",
      "tests/core.test.mts||tests/core.test.mts",
      "tests/headers.test.mts||tests/headers.test.mts",
      "tests/main.test.mts||tests/main.test.mts",
      "vitest.config.unit.mts||vitest.config.unit.mts"
    ]
  },
  "patch_diff": {
    "src/core.mjs||src/core.mjs": [
      "File: src/core.mjs -> src/core.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: const scriptReplacer = (hash, attrs, setCrossorigin, content) =>",
      "54:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "55:  }>${content ?? ''}</script>`",
      "58: const styleReplacer = (hash, attrs, setCrossorigin, content) =>",
      "60:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "61:  }>${content ?? ''}</style>`",
      "64: const linkStyleReplacer = (hash, attrs, setCrossorigin) =>",
      "66:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "67:  }/>`",
      "",
      "[Removed Lines]",
      "53:  `<script${attrs} integrity=\"${hash}\"${",
      "59:  `<style${attrs} integrity=\"${hash}\"${",
      "65:  `<link${attrs} integrity=\"${hash}\"${",
      "",
      "[Added Lines]",
      "53:  `<script${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "59:  `<style${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "65:  `<link${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:  logger,",
      "243:  content,",
      "244:  globalHashes,",
      "246: ) => {",
      "247:  const processors = getRegexProcessors()",
      "",
      "[Removed Lines]",
      "245:  sri",
      "",
      "[Added Lines]",
      "245:  sri,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "331:       if (sriHash) {",
      "332:        pageHashes[t2].add(sriHash)",
      "333:       } else {",
      "340:       }",
      "341:      } else {",
      "342:       logger.warn(`Unable to process external resource: \"${src}\"`)",
      "",
      "[Removed Lines]",
      "334:        const resourceResponse = await fetch(src, { method: 'GET' })",
      "335:        const resourceContent = await resourceResponse.arrayBuffer()",
      "337:        sriHash = generateSRIHash(resourceContent)",
      "338:        globalHashes[t2].set(src, sriHash)",
      "339:        pageHashes[t2].add(sriHash)",
      "",
      "[Added Lines]",
      "334:        logger.warn(",
      "335:         `Detected reference to not-allow-listed external resource \"${src}\"`,",
      "336:        )",
      "337:        if (setCrossorigin) {",
      "338:         updatedContent = updatedContent.replace(",
      "339:          match[0],",
      "340:          replacer(null, attrs, true, ''),",
      "341:         )",
      "342:        }",
      "343:        continue",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "517:  )",
      "518: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "535: export const scanAllowLists = async (sri, h) => {",
      "536:  for (const scriptUrl of sri.scriptsAllowListUrls) {",
      "537:   const resourceResponse = await fetch(scriptUrl, { method: 'GET' })",
      "538:   const resourceContent = await resourceResponse.arrayBuffer()",
      "539:   const sriHash = generateSRIHash(resourceContent)",
      "541:   h.extScriptHashes.add(sriHash)",
      "542:   h.perResourceSriHashes.scripts.set(scriptUrl, sriHash)",
      "543:  }",
      "545:  for (const styleUrl of sri.stylesAllowListUrls) {",
      "546:   const resourceResponse = await fetch(styleUrl, { method: 'GET' })",
      "547:   const resourceContent = await resourceResponse.arrayBuffer()",
      "548:   const sriHash = generateSRIHash(resourceContent)",
      "550:   h.extStyleHashes.add(sriHash)",
      "551:   h.perResourceSriHashes.styles.set(styleUrl, sriHash)",
      "552:  }",
      "553: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "673: }",
      "681:  return async (_ctx, next) => {",
      "682:   const response = await next()",
      "683:   const content = await response.text()",
      "685:   const { updatedContent } = await updateDynamicPageSriHashes(",
      "687:    content,",
      "688:    globalHashes,",
      "689:   )",
      "691:   const patchedResponse = new Response(updatedContent, {",
      "",
      "[Removed Lines]",
      "679: export const getMiddlewareHandler = globalHashes => {",
      "686:    console,",
      "",
      "[Added Lines]",
      "716: export const getMiddlewareHandler = (logger, globalHashes, sri) => {",
      "723:    logger,",
      "726:    sri,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "709:  return async (_ctx, next) => {",
      "710:   const response = await next()",
      "711:   const content = await response.text()",
      "713:   const { updatedContent, pageHashes } = await updateDynamicPageSriHashes(",
      "715:    content,",
      "716:    globalHashes,",
      "717:   )",
      "719:   const patchedResponse = new Response(updatedContent, {",
      "",
      "[Removed Lines]",
      "707: export const getCSPMiddlewareHandler = (globalHashes, securityHeadersOpts) => {",
      "714:    console,",
      "",
      "[Added Lines]",
      "747: export const getCSPMiddlewareHandler = (",
      "748:  logger,",
      "749:  globalHashes,",
      "750:  securityHeadersOpts,",
      "751:  sri,",
      "752: ) => {",
      "759:    logger,",
      "762:    sri,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "766:   await scanForNestedResources(logger, publicDir, h)",
      "767:   await generateSRIHashesModule(",
      "768:    logger,",
      "769:    h,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "813:   await scanAllowLists(sri, h)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "822:  return defineMiddleware(${",
      "823:   securityHeadersOptions !== undefined",
      "825:      securityHeadersOptions,",
      "828:  })",
      "829: })()",
      "830: `",
      "",
      "[Removed Lines]",
      "824:    ? `getCSPMiddlewareHandler(globalHashes, ${JSON.stringify(",
      "826:     )})`",
      "827:    : 'getMiddlewareHandler(globalHashes)'",
      "",
      "[Added Lines]",
      "871:    ? `getCSPMiddlewareHandler(console, globalHashes, ${JSON.stringify(",
      "873:     )}, ${JSON.stringify(sri)})`",
      "874:    : `getMiddlewareHandler(console, globalHashes, ${JSON.stringify(sri)})`",
      "",
      "---------------"
    ],
    "src/headers.mjs||src/headers.mjs": [
      "File: src/headers.mjs -> src/headers.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:  if (pageHashes.scripts.size > 0) {",
      "98:   setSrcDirective(directives, 'script-src', pageHashes.scripts)",
      "99:  }",
      "100:  if (pageHashes.styles.size > 0) {",
      "101:   setSrcDirective(directives, 'style-src', pageHashes.styles)",
      "102:  }",
      "103:  if (Object.keys(directives).length > 0) {",
      "104:   plainHeaders['content-security-policy'] = serialiseCspDirectives(directives)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99:  } else {",
      "100:   directives['script-src'] = \"'none'\"",
      "104:  } else {",
      "105:   directives['style-src'] = \"'none'\"",
      "",
      "---------------"
    ],
    "src/main.mjs||src/main.mjs": [
      "File: src/main.mjs -> src/main.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:  return /** @satisfies {AstroIntegration} */ {",
      "79:   name: '@kindspells/astro-shield',",
      "80:   hooks: {",
      "82:     ? {",
      "83:       'astro:build:done': getAstroBuildDone(_sri),",
      "84:      }",
      "85:     : undefined),",
      "87:     ? {",
      "88:       'astro:config:setup': getAstroConfigSetup(_sri, securityHeaders),",
      "89:      }",
      "",
      "[Removed Lines]",
      "81:    ...((enableStatic_SRI ?? true) === true",
      "86:    ...(enableMiddleware_SRI === true",
      "",
      "[Added Lines]",
      "81:    ...(_sri.enableStatic === true",
      "86:    ...(_sri.enableMiddleware === true",
      "",
      "---------------"
    ],
    "tests/core.test.mts||tests/core.test.mts": [
      "File: tests/core.test.mts -> tests/core.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import { resolve } from 'node:path'",
      "8: import { readdir, rm } from 'node:fs/promises'",
      "11: import {",
      "12:  arraysEqual,",
      "13:  generateSRIHash,",
      "14:  generateSRIHashesModule,",
      "15:  pageHashesEqual,",
      "16:  scanForNestedResources,",
      "17:  sriHashesEqual,",
      "18:  updateDynamicPageSriHashes,",
      "",
      "[Removed Lines]",
      "10: import { beforeEach, describe, expect, it } from 'vitest'",
      "",
      "[Added Lines]",
      "10: import { assert, beforeEach, describe, expect, it } from 'vitest'",
      "15:  getCSPMiddlewareHandler,",
      "16:  getMiddlewareHandler,",
      "18:  scanAllowLists,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "362:     <title>My Test Page</title>",
      "363:    </head>",
      "364:    <body>",
      "366:    </body>",
      "367:   </html>`",
      "",
      "[Removed Lines]",
      "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=\"></script>",
      "",
      "[Added Lines]",
      "368:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-Xbdu1jxIAqCjb78wAdgir+Swc5faxBuLHPm0DC/lG80=\"></script>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "379:   expect(h.extScriptHashes.size).toBe(1)",
      "380:   expect(",
      "381:    h.extScriptHashes.has(",
      "383:    ),",
      "384:   ).toBe(true)",
      "385:   expect(h.inlineScriptHashes.size).toBe(0)",
      "",
      "[Removed Lines]",
      "382:     'sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=',",
      "",
      "[Added Lines]",
      "385:     'sha256-Xbdu1jxIAqCjb78wAdgir+Swc5faxBuLHPm0DC/lG80=',",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "656:   expect(pageHashes.styles.size).toBe(0)",
      "657:  })",
      "660:   const remoteScript =",
      "661:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "662:   const content = `<html>",
      "",
      "[Removed Lines]",
      "659:  it('adds sri hash to external script (cross origin)', async () => {",
      "",
      "[Added Lines]",
      "662:  it('avoids adding sri hash to external script when not allow-listed (cross origin)', async () => {",
      "663:   const remoteScript =",
      "664:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "665:   const content = `<html>",
      "666:    <head>",
      "667:     <title>My Test Page</title>",
      "668:    </head>",
      "669:    <body>",
      "670:     <script type=\"module\" src=\"${remoteScript}\"></script>",
      "671:    </body>",
      "672:   </html>`",
      "674:   const expected = `<html>",
      "675:    <head>",
      "676:     <title>My Test Page</title>",
      "677:    </head>",
      "678:    <body>",
      "679:     <script type=\"module\" src=\"${remoteScript}\" crossorigin=\"anonymous\"></script>",
      "680:    </body>",
      "681:   </html>`",
      "683:   const h = getMiddlewareHashes()",
      "684:   let warnCounter = 0",
      "685:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
      "686:    {",
      "687:     info: () => {},",
      "688:     warn: () => {",
      "689:      warnCounter += 1",
      "690:     },",
      "691:     error: () => {},",
      "692:    },",
      "693:    content,",
      "694:    h,",
      "695:   )",
      "697:   expect(warnCounter).toBe(1)",
      "698:   expect(updatedContent).toEqual(expected)",
      "699:   expect(h.scripts.size).toBe(0)",
      "700:   expect(h.styles.size).toBe(0)",
      "701:   expect(h.scripts.get(remoteScript)).toBeUndefined()",
      "702:   expect(pageHashes.scripts.size).toBe(0)",
      "703:   expect(",
      "704:    pageHashes.scripts.has(",
      "705:     'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "706:    ),",
      "707:   ).toBe(false)",
      "708:   expect(pageHashes.styles.size).toBe(0)",
      "709:  })",
      "711:  it('adds sri hash to external script when allow-listed (cross origin)', async () => {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "678:   </html>`",
      "680:   const h = getMiddlewareHashes()",
      "681:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
      "682:    console,",
      "683:    content,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "733:   h.scripts.set(",
      "734:    remoteScript,",
      "735:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "736:   )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "779:   let warnCalls = 0",
      "780:   const testLogger = {",
      "785:     warnCalls += 1",
      "790:    },",
      "791:   }",
      "793:   const h = getMiddlewareHashes()",
      "",
      "[Removed Lines]",
      "781:    info(msg: string) {",
      "782:     return console.info(msg)",
      "783:    },",
      "784:    warn(msg: string) {",
      "786:     return console.warn(msg)",
      "787:    },",
      "788:    error(msg: string) {",
      "789:     return console.error(msg)",
      "",
      "[Added Lines]",
      "837:    info(_msg: string) {},",
      "838:    warn(_msg: string) {",
      "841:    error(_msg: string) {},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "846:  })",
      "847: })",
      "849: describe('scanForNestedResources', () => {",
      "850:  it('populates our hashes collection with hashes from nested resources', async () => {",
      "851:   const h = getEmptyHashes()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "900: describe('scanAllowLists', () => {",
      "901:  it('populates hashes collection with hashes from allow-listed resources', async () => {",
      "902:   const scriptUrl =",
      "903:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "904:   const styleUrl =",
      "905:    'https://raw.githubusercontent.com/KindSpells/astro-shield/26fdf5399d79baa3a8ea70ded526116b0bfc06ed/e2e/fixtures/hybrid2/src/styles/normalize.css'",
      "907:   const h = getEmptyHashes()",
      "908:   await scanAllowLists(",
      "909:    {",
      "910:     scriptsAllowListUrls: [scriptUrl],",
      "911:     stylesAllowListUrls: [styleUrl],",
      "912:    },",
      "913:    h,",
      "914:   )",
      "916:   expect(h.extScriptHashes.size).toBe(1)",
      "917:   expect(h.extStyleHashes.size).toBe(1)",
      "918:   expect(h.perResourceSriHashes.scripts.get(scriptUrl)).toBe(",
      "919:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "920:   )",
      "921:   expect(h.perResourceSriHashes.styles.get(styleUrl)).toBe(",
      "922:    'sha256-7o69ZgSUx++S5DC0Ek7X2CbY4GnxxUkwGZDdybWxSG8=',",
      "923:   )",
      "924:  })",
      "925: })",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "901:   expect(hashesModule).toHaveProperty('perResourceSriHashes')",
      "902:  })",
      "903: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "983: describe('getMiddlewareHandler', () => {",
      "984:  it('returns a working middleware handler', async () => {",
      "985:   const hashes = {",
      "986:    scripts: new Map<string, string>(),",
      "987:    styles: new Map<string, string>(),",
      "988:   }",
      "989:   let warnCounter = 0",
      "990:   const middleware = getMiddlewareHandler(",
      "991:    {",
      "992:     info: () => {},",
      "993:     warn: () => {",
      "994:      warnCounter += 1",
      "995:     },",
      "996:     error: () => {},",
      "997:    },",
      "998:    hashes,",
      "999:    {",
      "1000:     enableStatic: true,",
      "1001:     enableMiddleware: true,",
      "1002:     hashesModule: undefined,",
      "1003:     allowInlineScripts: 'all',",
      "1004:     allowInlineStyles: 'all',",
      "1005:     scriptsAllowListUrls: [],",
      "1006:     stylesAllowListUrls: [],",
      "1007:    },",
      "1008:   )",
      "1009:   type MidParams = Parameters<typeof middleware>",
      "1011:   const patchedResponse = await middleware(",
      "1012:    undefined as unknown as MidParams[0],",
      "1013:    (async () => {",
      "1014:     return {",
      "1015:      text: async () => `",
      "1016: <html>",
      "1017:  <head>",
      "1018:   <title>My Test Page</title>",
      "1019:  </head>",
      "1020:  <body>",
      "1021:   <script>console.log(\"Hello World!\")</script>",
      "1022:  </body>",
      "1023: </html>`,",
      "1024:      status: 200,",
      "1025:      statusText: 'OK',",
      "1026:      headers: new Headers(),",
      "1027:     }",
      "1028:    }) as MidParams[1],",
      "1029:   )",
      "1031:   expect(warnCounter).toBe(0)",
      "1032:   assert(patchedResponse instanceof Response)",
      "1033:   const responseText = await patchedResponse.text()",
      "1034:   expect(responseText).toBe(`",
      "1035: <html>",
      "1036:  <head>",
      "1037:   <title>My Test Page</title>",
      "1038:  </head>",
      "1039:  <body>",
      "1040:   <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
      "1041:  </body>",
      "1042: </html>`)",
      "1043:  })",
      "1045:  it('protects from validating disallowed inline scripts', async () => {",
      "1046:   const hashes = {",
      "1047:    scripts: new Map<string, string>(),",
      "1048:    styles: new Map<string, string>(),",
      "1049:   }",
      "1051:   let warnCounter = 0",
      "1052:   const middleware = getMiddlewareHandler(",
      "1053:    {",
      "1054:     info: () => {},",
      "1055:     warn: () => {",
      "1056:      warnCounter += 1",
      "1057:     },",
      "1058:     error: () => {},",
      "1059:    },",
      "1060:    hashes,",
      "1061:    {",
      "1062:     enableStatic: true,",
      "1063:     enableMiddleware: true,",
      "1064:     hashesModule: undefined,",
      "1065:     allowInlineScripts: 'static',",
      "1066:     allowInlineStyles: 'static',",
      "1067:     scriptsAllowListUrls: [],",
      "1068:     stylesAllowListUrls: [],",
      "1069:    },",
      "1070:   )",
      "1071:   type MidParams = Parameters<typeof middleware>",
      "1073:   const patchedResponse = await middleware(",
      "1074:    undefined as unknown as MidParams[0],",
      "1075:    (async () => {",
      "1076:     return {",
      "1077:      text: async () => `",
      "1078: <html>",
      "1079:  <head>",
      "1080:   <title>My Test Page</title>",
      "1081:  </head>",
      "1082:  <body>",
      "1083:   <script>console.log(\"Hello World!\")</script>",
      "1084:  </body>",
      "1085: </html>`,",
      "1086:      status: 200,",
      "1087:      statusText: 'OK',",
      "1088:      headers: new Headers(),",
      "1089:     }",
      "1090:    }) as MidParams[1],",
      "1091:   )",
      "1093:   expect(warnCounter).toBe(1)",
      "1094:   assert(patchedResponse instanceof Response)",
      "1095:   const responseText = await patchedResponse.text()",
      "1096:   expect(patchedResponse.headers.has('content-security-policy')).toBe(false)",
      "1097:   expect(responseText).toBe(`",
      "1098: <html>",
      "1099:  <head>",
      "1100:   <title>My Test Page</title>",
      "1101:  </head>",
      "1102:  <body>",
      "1103:   <script>console.log(\"Hello World!\")</script>",
      "1104:  </body>",
      "1105: </html>`)",
      "1106:  })",
      "1107: })",
      "1109: describe('getCSPMiddlewareHandler', () => {",
      "1110:  it('returns a working middleware handler', async () => {",
      "1111:   const hashes = {",
      "1112:    scripts: new Map<string, string>(),",
      "1113:    styles: new Map<string, string>(),",
      "1114:   }",
      "1115:   let warnCounter = 0",
      "1116:   const middleware = getCSPMiddlewareHandler(",
      "1117:    {",
      "1118:     info: () => {},",
      "1119:     warn: () => {",
      "1120:      warnCounter += 1",
      "1121:     },",
      "1122:     error: () => {},",
      "1123:    },",
      "1124:    hashes,",
      "1125:    {",
      "1126:     contentSecurityPolicy: {},",
      "1127:    },",
      "1128:    {",
      "1129:     enableStatic: true,",
      "1130:     enableMiddleware: true,",
      "1131:     hashesModule: undefined,",
      "1132:     allowInlineScripts: 'all',",
      "1133:     allowInlineStyles: 'all',",
      "1134:     scriptsAllowListUrls: [],",
      "1135:     stylesAllowListUrls: [],",
      "1136:    },",
      "1137:   )",
      "1138:   type MidParams = Parameters<typeof middleware>",
      "1140:   const patchedResponse = await middleware(",
      "1141:    undefined as unknown as MidParams[0],",
      "1142:    (async () => {",
      "1143:     return {",
      "1144:      text: async () => `",
      "1145: <html>",
      "1146:  <head>",
      "1147:   <title>My Test Page</title>",
      "1148:  </head>",
      "1149:  <body>",
      "1150:   <script>console.log(\"Hello World!\")</script>",
      "1151:  </body>",
      "1152: </html>`,",
      "1153:      status: 200,",
      "1154:      statusText: 'OK',",
      "1155:      headers: new Headers(),",
      "1156:     }",
      "1157:    }) as MidParams[1],",
      "1158:   )",
      "1160:   expect(warnCounter).toBe(0)",
      "1161:   assert(patchedResponse instanceof Response)",
      "1162:   expect(patchedResponse.headers.has('content-security-policy')).toBe(true)",
      "1163:   expect(patchedResponse.headers.get('content-security-policy')).toBe(",
      "1164:    `script-src 'self' 'sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q='; style-src 'none'`,",
      "1165:   )",
      "1166:   const responseText = await patchedResponse.text()",
      "1167:   expect(responseText).toBe(`",
      "1168: <html>",
      "1169:  <head>",
      "1170:   <title>My Test Page</title>",
      "1171:  </head>",
      "1172:  <body>",
      "1173:   <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
      "1174:  </body>",
      "1175: </html>`)",
      "1176:  })",
      "1178:  it('protects from validating disallowed inline scripts', async () => {",
      "1179:   const hashes = {",
      "1180:    scripts: new Map<string, string>(),",
      "1181:    styles: new Map<string, string>(),",
      "1182:   }",
      "1184:   let warnCounter = 0",
      "1185:   const middleware = getCSPMiddlewareHandler(",
      "1186:    {",
      "1187:     info: () => {},",
      "1188:     warn: () => {",
      "1189:      warnCounter += 1",
      "1190:     },",
      "1191:     error: () => {},",
      "1192:    },",
      "1193:    hashes,",
      "1194:    { contentSecurityPolicy: {} },",
      "1195:    {",
      "1196:     enableStatic: true,",
      "1197:     enableMiddleware: true,",
      "1198:     hashesModule: undefined,",
      "1199:     allowInlineScripts: 'static',",
      "1200:     allowInlineStyles: 'static',",
      "1201:     scriptsAllowListUrls: [],",
      "1202:     stylesAllowListUrls: [],",
      "1203:    },",
      "1204:   )",
      "1205:   type MidParams = Parameters<typeof middleware>",
      "1207:   const patchedResponse = await middleware(",
      "1208:    undefined as unknown as MidParams[0],",
      "1209:    (async () => {",
      "1210:     return {",
      "1211:      text: async () => `",
      "1212: <html>",
      "1213:  <head>",
      "1214:   <title>My Test Page</title>",
      "1215:  </head>",
      "1216:  <body>",
      "1217:   <script>console.log(\"Hello World!\")</script>",
      "1218:  </body>",
      "1219: </html>`,",
      "1220:      status: 200,",
      "1221:      statusText: 'OK',",
      "1222:      headers: new Headers(),",
      "1223:     }",
      "1224:    }) as MidParams[1],",
      "1225:   )",
      "1227:   expect(warnCounter).toBe(1)",
      "1228:   assert(patchedResponse instanceof Response)",
      "1229:   const responseText = await patchedResponse.text()",
      "1230:   expect(patchedResponse.headers.has('content-security-policy')).toBe(true)",
      "1231:   expect(responseText).toBe(`",
      "1232: <html>",
      "1233:  <head>",
      "1234:   <title>My Test Page</title>",
      "1235:  </head>",
      "1236:  <body>",
      "1237:   <script>console.log(\"Hello World!\")</script>",
      "1238:  </body>",
      "1239: </html>`)",
      "1240:  })",
      "1241: })",
      "",
      "---------------"
    ],
    "tests/headers.test.mts||tests/headers.test.mts": [
      "File: tests/headers.test.mts -> tests/headers.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "155:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
      "156:   expect(patchedHeaders.get('content-security-policy')).toBe(",
      "158:   )",
      "159:  })",
      "",
      "[Removed Lines]",
      "157:    \"form-action 'self'; frame-ancestors 'none'\",",
      "",
      "[Added Lines]",
      "157:    \"form-action 'self'; frame-ancestors 'none'; script-src 'none'; style-src 'none'\",",
      "",
      "---------------"
    ],
    "tests/main.test.mts||tests/main.test.mts": [
      "File: tests/main.test.mts -> tests/main.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:  })",
      "38:  it('returns a valid AstroIntegration object for almost-default config', () => {",
      "40:   checkIntegration(integration)",
      "41:  })",
      "43:  it('returns an \"empty\" integration when we disable all features', () => {",
      "45:   checkIntegration(integration, [])",
      "46:  })",
      "48:  it('returns hooks for static & dynamic content when we enable middleware', () => {",
      "50:   checkIntegration(integration, ['astro:build:done', 'astro:config:setup'])",
      "51:  })",
      "",
      "[Removed Lines]",
      "39:   const integration = shield({ enableStatic_SRI: true })",
      "44:   const integration = shield({ enableStatic_SRI: false })",
      "49:   const integration = shield({ enableMiddleware_SRI: true })",
      "",
      "[Added Lines]",
      "39:   const integration = shield({ sri: { enableStatic: true } })",
      "44:   const integration = shield({ sri: { enableStatic: false } })",
      "49:   const integration = shield({ sri: { enableMiddleware: true } })",
      "",
      "---------------"
    ],
    "vitest.config.unit.mts||vitest.config.unit.mts": [
      "File: vitest.config.unit.mts -> vitest.config.unit.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:     'coverage-unit/**/*',",
      "20:    ],",
      "21:    thresholds: {",
      "26:    },",
      "27:    reportsDirectory: 'coverage-unit',",
      "28:   },",
      "",
      "[Removed Lines]",
      "22:     statements: 72.0,",
      "23:     branches: 76.0,",
      "24:     functions: 80.0,",
      "25:     lines: 72.0,",
      "",
      "[Added Lines]",
      "22:     statements: 77.0,",
      "23:     branches: 77.0,",
      "24:     functions: 87.0,",
      "25:     lines: 77.0,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "801ec266a715cb11ea1280ca3fdac923ab33045e",
      "candidate_info": {
        "commit_hash": "801ec266a715cb11ea1280ca3fdac923ab33045e",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/801ec266a715cb11ea1280ca3fdac923ab33045e",
        "files": [
          "main.mjs",
          "tests/core.test.mts",
          "tests/fake.css",
          "tests/main.test.mts",
          "vitest.config.mts"
        ],
        "message": "test: increase tests coverage\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "main.mjs||main.mjs",
          "tests/core.test.mts||tests/core.test.mts",
          "tests/fake.css||tests/fake.css",
          "tests/main.test.mts||tests/main.test.mts",
          "vitest.config.mts||vitest.config.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/core.test.mts||tests/core.test.mts",
            "tests/main.test.mts||tests/main.test.mts"
          ],
          "candidate": [
            "tests/core.test.mts||tests/core.test.mts",
            "tests/main.test.mts||tests/main.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "main.mjs||main.mjs": [
          "File: main.mjs -> main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: export const sriCSP =",
          "15:  sriCspOptions => /** @satisfies {import('astro').AstroIntegration} */ ({",
          "17:   hooks: {",
          "18:    'astro:build:done': async ({ dir, logger }) =>",
          "19:     await generateSRIHashes(logger, {",
          "",
          "[Removed Lines]",
          "16:   name: 'scp-sri-postbuild',",
          "",
          "[Added Lines]",
          "16:   name: 'astro-sri-csp',",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  updateSriHashes,",
          "15: } from '../core.mjs'",
          "16: import { AstroIntegrationLogger } from 'astro'",
          "19: const testsDir = new URL('.', import.meta.url).pathname",
          "20: const rootDir = resolve(testsDir, '..')",
          "",
          "[Removed Lines]",
          "17: import exp from 'node:constants'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   expect(h.extStyleHashes.size).toBe(0)",
          "148:  })",
          "150:  it('adds sri hash to inline style', async () => {",
          "151:   const content = `<html>",
          "152:    <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:  it('preserves sri hash in inline script', async () => {",
          "150:   const content = `<html>",
          "151:    <head>",
          "152:     <title>My Test Page</title>",
          "153:    </head>",
          "154:    <body>",
          "155:     <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
          "156:    </body>",
          "157:   </html>`",
          "159:   const expected = `<html>",
          "160:    <head>",
          "161:     <title>My Test Page</title>",
          "162:    </head>",
          "163:    <body>",
          "164:     <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
          "165:    </body>",
          "166:   </html>`",
          "168:   const h = getEmptyHashes()",
          "169:   const updated = await updateSriHashes(",
          "170:    console as unknown as AstroIntegrationLogger,",
          "171:    testsDir,",
          "172:    content,",
          "173:    h,",
          "174:   )",
          "176:   expect(updated).toEqual(expected)",
          "177:   expect(h.inlineScriptHashes.size).toBe(1)",
          "178:   expect(",
          "179:    h.inlineScriptHashes.has(",
          "180:     'sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=',",
          "181:    ),",
          "182:   ).toBe(true)",
          "183:   expect(h.inlineStyleHashes.size).toBe(0)",
          "184:   expect(h.extScriptHashes.size).toBe(0)",
          "185:   expect(h.extStyleHashes.size).toBe(0)",
          "186:  })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:   expect(h.extStyleHashes.size).toBe(0)",
          "271:  })",
          "274: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:  it('adds sri hash to external style (same origin)', async () => {",
          "312:   const content = `<html>",
          "313:    <head>",
          "314:     <title>My Test Page</title>",
          "315:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "316:     <link rel=\"stylesheet\" href=\"/fake.css\">",
          "317:    </head>",
          "318:    <body>",
          "319:     <h1>My Test Page</h1>",
          "320:     <p>Some text</p>",
          "321:    </body>",
          "322:   </html>`",
          "324:   const expected = `<html>",
          "325:    <head>",
          "326:     <title>My Test Page</title>",
          "327:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "328:     <link rel=\"stylesheet\" href=\"/fake.css\" integrity=\"sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=\"/>",
          "329:    </head>",
          "330:    <body>",
          "331:     <h1>My Test Page</h1>",
          "332:     <p>Some text</p>",
          "333:    </body>",
          "334:   </html>`",
          "336:   const h = getEmptyHashes()",
          "337:   const updated = await updateSriHashes(",
          "338:    console as unknown as AstroIntegrationLogger,",
          "339:    testsDir,",
          "340:    content,",
          "341:    h,",
          "342:   )",
          "344:   expect(updated).toEqual(expected)",
          "345:   expect(h.extStyleHashes.size).toBe(1)",
          "346:   expect(",
          "347:    h.extStyleHashes.has(",
          "348:     'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "349:    ),",
          "350:   ).toBe(true)",
          "351:   expect(h.inlineScriptHashes.size).toBe(0)",
          "352:   expect(h.extScriptHashes.size).toBe(0)",
          "353:   expect(h.inlineStyleHashes.size).toBe(0)",
          "354:  })",
          "",
          "---------------"
        ],
        "tests/fake.css||tests/fake.css": [
          "File: tests/fake.css -> tests/fake.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: h1 { color: red; }",
          "",
          "---------------"
        ],
        "tests/main.test.mts||tests/main.test.mts": [
          "File: tests/main.test.mts -> tests/main.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { describe, expect, it } from 'vitest'",
          "3: import defaultIntegrationExport, { sriCSP } from '../main.mjs'",
          "5: describe('sriCSP', () => {",
          "6:  it('is exported as default', () => {",
          "7:   expect(defaultIntegrationExport).toBe(sriCSP)",
          "8:   expect(sriCSP).toBeInstanceOf(Function)",
          "9:  })",
          "11:  it('returns a valid AstroIntegration object', () => {",
          "12:   const integration = sriCSP({})",
          "14:   expect(Object.keys(integration).sort()).toEqual(['hooks', 'name'])",
          "15:   expect(integration.name).toBe('astro-sri-csp')",
          "17:   expect(Object.keys(integration.hooks).sort()).toEqual(['astro:build:done'])",
          "18:   expect(integration.hooks['astro:build:done']).toBeInstanceOf(Function)",
          "19:  })",
          "20: })",
          "",
          "---------------"
        ],
        "vitest.config.mts||vitest.config.mts": [
          "File: vitest.config.mts -> vitest.config.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:    include: ['*.mjs'],",
          "14:    exclude: ['tests/**/*'],",
          "15:    thresholds: {",
          "20:    },",
          "21:   },",
          "22:  },",
          "",
          "[Removed Lines]",
          "16:     branches: 60.0,",
          "17:     lines: 50.0,",
          "18:     functions: 50.0,",
          "19:     statements: 60.0,",
          "",
          "[Added Lines]",
          "16:     statements: 70.0,",
          "17:     branches: 75.0,",
          "18:     functions: 60.0,",
          "19:     lines: 70.0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}