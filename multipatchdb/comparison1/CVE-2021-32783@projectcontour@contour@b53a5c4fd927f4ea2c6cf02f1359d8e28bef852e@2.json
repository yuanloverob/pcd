{
  "cve_id": "CVE-2021-32783",
  "cve_desc": "Contour is a Kubernetes ingress controller using Envoy proxy. In Contour before version 1.17.1 a specially crafted ExternalName type Service may be used to access Envoy's admin interface, which Contour normally prevents from access outside the Envoy container. This can be used to shut down Envoy remotely (a denial of service), or to expose the existence of any Secret that Envoy is using for its configuration, including most notably TLS Keypairs. However, it *cannot* be used to get the *content* of those secrets. Since this attack allows access to the administration interface, a variety of administration options are available, such as shutting down the Envoy or draining traffic. In general, the Envoy admin interface cannot easily be used for making changes to the cluster, in-flight requests, or backend services, but it could be used to shut down or drain Envoy, change traffic routing, or to retrieve secret metadata, as mentioned above. The issue will be addressed in Contour v1.18.0 and a cherry-picked patch release, v1.17.1, has been released to cover users who cannot upgrade at this time. For more details refer to the linked GitHub Security Advisory.",
  "repo": "projectcontour/contour",
  "patch_hash": "b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
  "patch_info": {
    "commit_hash": "b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
    "repo": "projectcontour/contour",
    "commit_url": "https://github.com/projectcontour/contour/commit/b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
    "files": [
      "cmd/contour/serve.go",
      "examples/contour/01-contour-config.yaml",
      "examples/render/contour-gateway.yaml",
      "examples/render/contour.yaml",
      "go.mod",
      "internal/dag/accessors.go",
      "internal/dag/accessors_test.go",
      "internal/dag/builder_test.go",
      "internal/dag/extension_processor.go",
      "internal/dag/gatewayapi_processor.go",
      "internal/dag/httpproxy_processor.go",
      "internal/dag/ingress_processor.go",
      "internal/dag/status_test.go",
      "internal/featuretests/v3/externalname_test.go",
      "internal/featuretests/v3/headerpolicy_test.go",
      "pkg/config/parameters.go",
      "site/content/docs/main/configuration.md",
      "test/e2e/httpproxy/018_external_name_test.go",
      "test/e2e/httpproxy/httpproxy_test.go"
    ],
    "message": "cherrypicks for v1.17.1 (#3909)\n\n* Merge pull request from GHSA-5ph6-qq5x-7jwc\n\nSigned-off-by: Nick Young <ynick@vmware.com>\n\n* Fix spelling and lint errors that slipped into the ExternalName PR (#3908)\n\nSigned-off-by: Nick Young <ynick@vmware.com>\n\nCo-authored-by: Nick Young <ynick@vmware.com>",
    "before_after_code_files": [
      "cmd/contour/serve.go||cmd/contour/serve.go",
      "go.mod||go.mod",
      "internal/dag/accessors.go||internal/dag/accessors.go",
      "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
      "internal/dag/builder_test.go||internal/dag/builder_test.go",
      "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
      "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
      "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
      "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
      "internal/dag/status_test.go||internal/dag/status_test.go",
      "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
      "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
      "pkg/config/parameters.go||pkg/config/parameters.go",
      "test/e2e/httpproxy/018_external_name_test.go||test/e2e/httpproxy/018_external_name_test.go",
      "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
    ]
  },
  "patch_diff": {
    "cmd/contour/serve.go||cmd/contour/serve.go": [
      "File: cmd/contour/serve.go -> cmd/contour/serve.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "714:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
      "715:  }",
      "718:  dagProcessors := []dag.Processor{",
      "719:   &dag.IngressProcessor{",
      "722:   },",
      "723:   &dag.ExtensionServiceProcessor{",
      "724:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
      "725:    ClientCertificate: clientCert,",
      "726:   },",
      "727:   &dag.HTTPProxyProcessor{",
      "734:   },",
      "735:  }",
      "737:  if ctx.Config.GatewayConfig != nil && clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
      "738:   dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
      "740:   })",
      "741:  }",
      "",
      "[Removed Lines]",
      "720:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
      "721:    ClientCertificate: clientCert,",
      "728:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
      "729:    FallbackCertificate:   fallbackCert,",
      "730:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
      "731:    ClientCertificate:     clientCert,",
      "732:    RequestHeadersPolicy:  &requestHeadersPolicy,",
      "733:    ResponseHeadersPolicy: &responseHeadersPolicy,",
      "739:    FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
      "",
      "[Added Lines]",
      "717:  log.Debugf(\"EnableExternalNameService is set to %t\", ctx.Config.EnableExternalNameService)",
      "721:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "722:    FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
      "723:    ClientCertificate:         clientCert,",
      "732:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "733:    DisablePermitInsecure:     ctx.Config.DisablePermitInsecure,",
      "734:    FallbackCertificate:       fallbackCert,",
      "735:    DNSLookupFamily:           ctx.Config.Cluster.DNSLookupFamily,",
      "736:    ClientCertificate:         clientCert,",
      "737:    RequestHeadersPolicy:      &requestHeadersPolicy,",
      "738:    ResponseHeadersPolicy:     &responseHeadersPolicy,",
      "744:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "745:    FieldLogger:               log.WithField(\"context\", \"GatewayAPIProcessor\"),",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: require (",
      "6:  github.com/ahmetb/gen-crd-api-reference-docs v0.3.0",
      "7:  github.com/bombsimon/logrusr v1.0.0",
      "8:  github.com/envoyproxy/go-control-plane v0.9.9-0.20210111201334-f1f47757da33",
      "9:  github.com/go-logr/logr v0.4.0",
      "10:  github.com/golang/protobuf v1.5.2",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:  github.com/davecgh/go-spew v1.1.1 // indirect",
      "",
      "---------------"
    ],
    "internal/dag/accessors.go||internal/dag/accessors.go": [
      "File: internal/dag/accessors.go -> internal/dag/accessors.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:  svc, svcPort, err := cache.LookupService(meta, port)",
      "56:  if err != nil {",
      "57:   return nil, err",
      "58:  }",
      "60:  if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {",
      "61:   return dagSvc, nil",
      "62:  }",
      "",
      "[Removed Lines]",
      "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache) (*Service, error) {",
      "",
      "[Added Lines]",
      "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache, enableExternalNameSvc bool) (*Service, error) {",
      "60:  err = validateExternalName(svc, enableExternalNameSvc)",
      "61:  if err != nil {",
      "62:   return nil, err",
      "63:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:  return dagSvc, nil",
      "79: }",
      "81: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
      "82:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
      "83:  protocol := up[port.Name]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86: func validateExternalName(svc *v1.Service, enableExternalNameSvc bool) error {",
      "89:  en := externalName(svc)",
      "90:  if en == \"\" {",
      "91:   return nil",
      "92:  }",
      "95:  if !enableExternalNameSvc {",
      "96:   return fmt.Errorf(\"%s/%s is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting\", svc.Namespace, svc.Name)",
      "97:  }",
      "104:  localhostNames := map[string]struct{}{",
      "105:   \"localhost\":               {},",
      "106:   \"localhost.localdomain\":   {},",
      "107:   \"local.projectcontour.io\": {},",
      "108:  }",
      "110:  _, localhost := localhostNames[en]",
      "111:  if localhost {",
      "112:   return fmt.Errorf(\"%s/%s is an ExternalName service that points to localhost, this is not allowed\", svc.Namespace, svc.Name)",
      "113:  }",
      "115:  return nil",
      "116: }",
      "",
      "---------------"
    ],
    "internal/dag/accessors_test.go||internal/dag/accessors_test.go": [
      "File: internal/dag/accessors_test.go -> internal/dag/accessors_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:    }},",
      "41:   },",
      "42:  }",
      "43:  services := map[types.NamespacedName]*v1.Service{",
      "45:  }",
      "47:  tests := map[string]struct {",
      "48:   types.NamespacedName",
      "52:  }{",
      "53:   \"lookup service by port number\": {",
      "54:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
      "",
      "[Removed Lines]",
      "44:   {Name: \"service1\", Namespace: \"default\"}: s1,",
      "49:   port    intstr.IntOrString",
      "50:   want    *Service",
      "51:   wantErr error",
      "",
      "[Added Lines]",
      "44:  externalNameValid := &v1.Service{",
      "45:   ObjectMeta: metav1.ObjectMeta{",
      "46:    Name:      \"externalnamevalid\",",
      "47:    Namespace: \"default\",",
      "48:   },",
      "49:   Spec: v1.ServiceSpec{",
      "50:    Type:         v1.ServiceTypeExternalName,",
      "51:    ExternalName: \"external.projectcontour.io\",",
      "52:    Ports: []v1.ServicePort{{",
      "53:     Name:       \"http\",",
      "54:     Protocol:   \"TCP\",",
      "55:     Port:       80,",
      "56:     TargetPort: intstr.FromInt(80),",
      "57:    }},",
      "58:   },",
      "59:  }",
      "61:  externalNameLocalhost := &v1.Service{",
      "62:   ObjectMeta: metav1.ObjectMeta{",
      "63:    Name:      \"externalnamelocalhost\",",
      "64:    Namespace: \"default\",",
      "65:   },",
      "66:   Spec: v1.ServiceSpec{",
      "67:    Type:         v1.ServiceTypeExternalName,",
      "68:    ExternalName: \"localhost\",",
      "69:    Ports: []v1.ServicePort{{",
      "70:     Name:       \"http\",",
      "71:     Protocol:   \"TCP\",",
      "72:     Port:       80,",
      "73:     TargetPort: intstr.FromInt(80),",
      "74:    }},",
      "75:   },",
      "76:  }",
      "79:   {Name: \"service1\", Namespace: \"default\"}:              s1,",
      "80:   {Name: \"externalnamevalid\", Namespace: \"default\"}:     externalNameValid,",
      "81:   {Name: \"externalnamelocalhost\", Namespace: \"default\"}: externalNameLocalhost,",
      "86:   port                  intstr.IntOrString",
      "87:   enableExternalNameSvc bool",
      "88:   want                  *Service",
      "89:   wantErr               error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:    port:           intstr.FromString(\"9999\"),",
      "81:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
      "82:   },",
      "83:  }",
      "85:  for name, tc := range tests {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:   \"When ExternalName Services are not disabled no error is returned\": {",
      "122:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
      "123:    port:           intstr.FromString(\"80\"),",
      "124:    want: &Service{",
      "125:     Weighted: WeightedService{",
      "126:      Weight:           1,",
      "127:      ServiceName:      \"externalnamevalid\",",
      "128:      ServiceNamespace: \"default\",",
      "129:      ServicePort: v1.ServicePort{",
      "130:       Name:       \"http\",",
      "131:       Protocol:   \"TCP\",",
      "132:       Port:       80,",
      "133:       TargetPort: intstr.FromInt(80),",
      "134:      },",
      "135:     },",
      "136:     ExternalName: \"external.projectcontour.io\",",
      "137:    },",
      "138:    enableExternalNameSvc: true,",
      "139:   },",
      "140:   \"When ExternalName Services are disabled an error is returned\": {",
      "141:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
      "142:    port:           intstr.FromString(\"80\"),",
      "143:    wantErr:        errors.New(`default/externalnamevalid is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting`),",
      "144:   },",
      "145:   \"When ExternalName Services are enabled but a localhost ExternalName is used an error is returned\": {",
      "146:    NamespacedName:        types.NamespacedName{Name: \"externalnamelocalhost\", Namespace: \"default\"},",
      "147:    port:                  intstr.FromString(\"80\"),",
      "148:    wantErr:               errors.New(`default/externalnamelocalhost is an ExternalName service that points to localhost, this is not allowed`),",
      "149:    enableExternalNameSvc: true,",
      "150:   },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:    var dag DAG",
      "97:    assert.Equal(t, tc.want, got)",
      "98:    assert.Equal(t, tc.wantErr, gotErr)",
      "99:   })",
      "",
      "[Removed Lines]",
      "96:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source)",
      "",
      "[Added Lines]",
      "164:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source, tc.enableExternalNameSvc)",
      "",
      "---------------"
    ],
    "internal/dag/builder_test.go||internal/dag/builder_test.go": [
      "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6536:   },",
      "6537:  }",
      "6539:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
      "6540:   ObjectMeta: metav1.ObjectMeta{",
      "6541:    Name:      \"example-com\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6539:  ingressExternalNameService := &networking_v1.Ingress{",
      "6540:   ObjectMeta: metav1.ObjectMeta{",
      "6541:    Name:      \"externalname\",",
      "6542:    Namespace: \"default\",",
      "6543:   },",
      "6544:   Spec: networking_v1.IngressSpec{",
      "6545:    Rules: []networking_v1.IngressRule{{",
      "6546:     Host: \"example.com\",",
      "6547:     IngressRuleValue: networking_v1.IngressRuleValue{",
      "6548:      HTTP: &networking_v1.HTTPIngressRuleValue{",
      "6549:       Paths: []networking_v1.HTTPIngressPath{{",
      "6550:        Backend: *backendv1(s14.GetName(), intstr.FromInt(80)),",
      "6551:       }},",
      "6552:      },",
      "6553:     },",
      "6554:    }},",
      "6555:   },",
      "6556:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6582:  tests := map[string]struct {",
      "6583:   objs                         []interface{}",
      "6584:   disablePermitInsecure        bool",
      "6585:   fallbackCertificateName      string",
      "6586:   fallbackCertificateNamespace string",
      "6587:   want                         []Vertex",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6604:   enableExternalNameSvc        bool",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8980:     },",
      "8981:    ),",
      "8982:   },",
      "8983:   \"insert proxy with externalName service\": {",
      "8984:    objs: []interface{}{",
      "8985:     proxyExternalNameService,",
      "8986:     s14,",
      "8987:    },",
      "8988:    want: listeners(",
      "8989:     &Listener{",
      "8990:      Port: 80,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9003:   \"insert ingress with externalName service\": {",
      "9004:    objs: []interface{}{",
      "9005:     ingressExternalNameService,",
      "9006:     s14,",
      "9007:    },",
      "9008:    enableExternalNameSvc: true,",
      "9009:    want: listeners(",
      "9010:     &Listener{",
      "9011:      Port: 80,",
      "9012:      VirtualHosts: virtualhosts(",
      "9013:       virtualhost(\"example.com\", &Route{",
      "9014:        PathMatchCondition: prefixString(\"/\"),",
      "9015:        Clusters: []*Cluster{{",
      "9016:         Upstream: &Service{",
      "9017:          ExternalName: \"externalservice.io\",",
      "9018:          Weighted: WeightedService{",
      "9019:           Weight:           1,",
      "9020:           ServiceName:      s14.Name,",
      "9021:           ServiceNamespace: s14.Namespace,",
      "9022:           ServicePort:      s14.Spec.Ports[0],",
      "9023:          },",
      "9024:         },",
      "9025:        }},",
      "9026:       }),",
      "9027:      ),",
      "9028:     },",
      "9029:    ),",
      "9030:   },",
      "9031:   \"insert ingress with externalName service, but externalName services disabled\": {",
      "9032:    objs: []interface{}{",
      "9033:     ingressExternalNameService,",
      "9034:     s14,",
      "9035:    },",
      "9036:    enableExternalNameSvc: false,",
      "9037:    want:                  listeners(),",
      "9038:   },",
      "9044:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "9014:     s14,",
      "9015:     sec1,",
      "9016:    },",
      "9017:    want: listeners(",
      "9018:     &Listener{",
      "9019:      Port: 443,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9074:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9073:     proxyReplaceHostHeaderRoute,",
      "9074:     s14,",
      "9075:    },",
      "9076:    want: listeners(",
      "9077:     &Listener{",
      "9078:      Port: 80,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9134:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9111:     proxyReplaceHostHeaderService,",
      "9112:     s14,",
      "9113:    },",
      "9115:   },",
      "9116:   \"insert proxy with response header policy - route - host header\": {",
      "9117:    objs: []interface{}{",
      "",
      "[Removed Lines]",
      "9114:    want: listeners(),",
      "",
      "[Added Lines]",
      "9173:    enableExternalNameSvc: true,",
      "9174:    want:                  listeners(),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "9754:     },",
      "9755:     Processors: []Processor{",
      "9756:      &IngressProcessor{",
      "9758:      },",
      "9759:      &HTTPProxyProcessor{",
      "9761:       FallbackCertificate: &types.NamespacedName{",
      "9762:        Name:      tc.fallbackCertificateName,",
      "9763:        Namespace: tc.fallbackCertificateNamespace,",
      "",
      "[Removed Lines]",
      "9757:       FieldLogger: fixture.NewTestLogger(t),",
      "9760:       DisablePermitInsecure: tc.disablePermitInsecure,",
      "",
      "[Added Lines]",
      "9817:       FieldLogger:               fixture.NewTestLogger(t),",
      "9818:       EnableExternalNameService: tc.enableExternalNameSvc,",
      "9821:       EnableExternalNameService: tc.enableExternalNameSvc,",
      "9822:       DisablePermitInsecure:     tc.disablePermitInsecure,",
      "",
      "---------------"
    ],
    "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
      "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go"
    ],
    "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go": [
      "File: internal/dag/gatewayapi_processor.go -> internal/dag/gatewayapi_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:  dag    *DAG",
      "49:  source *KubernetesCache",
      "50: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "744:  meta := types.NamespacedName{Name: *serviceName, Namespace: namespace}",
      "748:  if err != nil {",
      "750:  }",
      "752:  return service, nil",
      "",
      "[Removed Lines]",
      "747:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source)",
      "749:   return nil, fmt.Errorf(\"service %q does not exist\", meta.Name)",
      "",
      "[Added Lines]",
      "752:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source, p.EnableExternalNameService)",
      "754:   return nil, fmt.Errorf(\"service %q is invalid: %s\", meta.Name, err)",
      "",
      "---------------"
    ],
    "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
      "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:  FallbackCertificate *types.NamespacedName",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "563:     return nil",
      "564:    }",
      "565:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
      "567:    if err != nil {",
      "568:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
      "569:      \"Spec.Routes unresolved service reference: %s\", err)",
      "",
      "[Removed Lines]",
      "566:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
      "",
      "[Added Lines]",
      "571:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "688:   var proxy TCPProxy",
      "689:   for _, service := range httpproxy.Spec.TCPProxy.Services {",
      "690:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
      "692:    if err != nil {",
      "694:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
      "695:     return false",
      "696:    }",
      "",
      "[Removed Lines]",
      "691:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
      "693:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\",",
      "",
      "[Added Lines]",
      "696:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
      "698:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\",",
      "",
      "---------------"
    ],
    "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
      "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:  ClientCertificate *types.NamespacedName",
      "40: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "144:    port = intstr.FromInt(int(be.Service.Port.Number))",
      "145:   }",
      "148:   if err != nil {",
      "149:    p.WithError(err).",
      "150:     WithField(\"name\", ing.GetName()).",
      "",
      "[Removed Lines]",
      "147:   s, err := p.dag.EnsureService(m, port, p.source)",
      "",
      "[Added Lines]",
      "152:   s, err := p.dag.EnsureService(m, port, p.source, p.EnableExternalNameService)",
      "",
      "---------------"
    ],
    "internal/dag/status_test.go||internal/dag/status_test.go": [
      "File: internal/dag/status_test.go -> internal/dag/status_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1758:   objs: []interface{}{proxyTCPInvalidMissingService},",
      "1759:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
      "1760:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
      "1762:   },",
      "1763:  })",
      "",
      "[Removed Lines]",
      "1761:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
      "",
      "[Added Lines]",
      "1761:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1787:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
      "1788:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
      "1789:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
      "1791:   },",
      "1792:  })",
      "",
      "[Removed Lines]",
      "1790:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
      "",
      "[Added Lines]",
      "1790:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2931:      Type:    string(status.ConditionResolvedRefs),",
      "2932:      Status:  contour_api_v1.ConditionFalse,",
      "2933:      Reason:  string(status.ReasonDegraded),",
      "2935:     },",
      "2936:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
      "2937:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
      "",
      "[Removed Lines]",
      "2934:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
      "",
      "[Added Lines]",
      "2934:      Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3661:       Type:    string(status.ConditionResolvedRefs),",
      "3662:       Status:  contour_api_v1.ConditionFalse,",
      "3663:       Reason:  string(status.ReasonDegraded),",
      "3665:      },",
      "3666:      gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
      "3667:       Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
      "",
      "[Removed Lines]",
      "3664:       Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
      "",
      "[Added Lines]",
      "3664:       Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
      "",
      "---------------"
    ],
    "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go": [
      "File: internal/featuretests/v3/externalname_test.go -> internal/featuretests/v3/externalname_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import (",
      "17:  \"testing\"",
      "19:  \"github.com/projectcontour/contour/internal/featuretests\"",
      "21:  envoy_cluster_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"",
      "22:  envoy_route_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  \"github.com/projectcontour/contour/internal/contour\"",
      "20:  \"github.com/projectcontour/contour/internal/dag\"",
      "22:  \"github.com/sirupsen/logrus\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: func TestExternalNameService(t *testing.T) {",
      "41:  defer done()",
      "43:  s1 := fixture.NewService(\"kuard\").",
      "",
      "[Removed Lines]",
      "40:  rh, c, done := setup(t)",
      "",
      "[Added Lines]",
      "43:  rh, c, done := setup(t, enableExternalNameService(t))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "317:   ),",
      "318:  })",
      "319: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "324: func enableExternalNameService(t *testing.T) func(eh *contour.EventHandler) {",
      "325:  return func(eh *contour.EventHandler) {",
      "327:   log := fixture.NewTestLogger(t)",
      "328:   log.SetLevel(logrus.DebugLevel)",
      "330:   eh.Builder.Processors = []dag.Processor{",
      "331:    &dag.IngressProcessor{",
      "332:     EnableExternalNameService: true,",
      "333:     FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
      "334:    },",
      "335:    &dag.HTTPProxyProcessor{",
      "336:     EnableExternalNameService: true,",
      "337:    },",
      "338:    &dag.ExtensionServiceProcessor{",
      "339:     FieldLogger: log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
      "340:    },",
      "341:    &dag.ListenerProcessor{},",
      "342:   }",
      "343:  }",
      "344: }",
      "",
      "---------------"
    ],
    "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go": [
      "File: internal/featuretests/v3/headerpolicy_test.go -> internal/featuretests/v3/headerpolicy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: )",
      "32: func TestHeaderPolicy_ReplaceHeader_HTTProxy(t *testing.T) {",
      "34:  defer done()",
      "36:  rh.OnAdd(fixture.NewService(\"svc1\").",
      "",
      "[Removed Lines]",
      "33:  rh, c, done := setup(t)",
      "",
      "[Added Lines]",
      "36:  rh, c, done := setup(t, enableExternalNameService(t))",
      "",
      "---------------"
    ],
    "pkg/config/parameters.go||pkg/config/parameters.go": [
      "File: pkg/config/parameters.go -> pkg/config/parameters.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "537:  DisableAllowChunkedLength bool `yaml:\"disableAllowChunkedLength,omitempty\"`",
      "540:  LeaderElection LeaderElectionParameters `yaml:\"leaderelection,omitempty\"`",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "542:  EnableExternalNameService bool `yaml:\"enableExternalNameService,omitempty\"`",
      "",
      "---------------"
    ],
    "test/e2e/httpproxy/018_external_name_test.go||test/e2e/httpproxy/018_external_name_test.go": [
      "File: test/e2e/httpproxy/018_external_name_test.go -> test/e2e/httpproxy/018_external_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     },",
      "80:    },",
      "81:   }",
      "84:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
      "85:    Host:      p.Spec.VirtualHost.Fqdn,",
      "",
      "[Removed Lines]",
      "82:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "",
      "[Added Lines]",
      "82:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "83:   if !ok {",
      "84:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
      "85:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:     },",
      "147:    },",
      "148:   }",
      "151:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
      "152:    Host:      p.Spec.VirtualHost.Fqdn,",
      "",
      "[Removed Lines]",
      "149:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "",
      "[Added Lines]",
      "152:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "153:   if !ok {",
      "154:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
      "155:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "159: func stringPtr(s string) *string {",
      "160:  return &s",
      "161: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169: func testExternalNameServiceLocalhostInvalid(namespace string) {",
      "170:  Specify(\"external name services with localhost are rejected\", func() {",
      "171:   t := f.T()",
      "173:   f.Fixtures.Echo.Deploy(namespace, \"ingress-conformance-echo\")",
      "175:   externalNameService := &corev1.Service{",
      "176:    ObjectMeta: metav1.ObjectMeta{",
      "177:     Namespace: namespace,",
      "178:     Name:      \"external-name-service-localhost\",",
      "179:    },",
      "180:    Spec: corev1.ServiceSpec{",
      "181:     Type: corev1.ServiceTypeExternalName,",
      "184:     ExternalName: \"localhost.localdomain\",",
      "185:     Ports: []corev1.ServicePort{",
      "186:      {",
      "187:       Name: \"http\",",
      "188:       Port: 80,",
      "189:      },",
      "190:     },",
      "191:    },",
      "192:   }",
      "193:   require.NoError(t, f.Client.Create(context.TODO(), externalNameService))",
      "195:   p := &contourv1.HTTPProxy{",
      "196:    ObjectMeta: metav1.ObjectMeta{",
      "197:     Namespace: namespace,",
      "198:     Name:      \"external-name-proxy\",",
      "199:    },",
      "200:    Spec: contourv1.HTTPProxySpec{",
      "201:     VirtualHost: &contourv1.VirtualHost{",
      "202:      Fqdn: \"externalnameservice.projectcontour.io\",",
      "203:     },",
      "204:     Routes: []contourv1.Route{",
      "205:      {",
      "206:       Services: []contourv1.Service{",
      "207:        {",
      "208:         Name: externalNameService.Name,",
      "209:         Port: 80,",
      "210:        },",
      "211:       },",
      "212:       RequestHeadersPolicy: &contourv1.HeadersPolicy{",
      "213:        Set: []contourv1.HeaderValue{",
      "214:         {",
      "215:          Name:  \"Host\",",
      "216:          Value: externalNameService.Spec.ExternalName,",
      "217:         },",
      "218:        },",
      "219:       },",
      "220:      },",
      "221:     },",
      "222:    },",
      "223:   }",
      "224:   _, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "225:   require.Falsef(t, ok, \"ExternalName with hostname %s was accepted by Contour.\", externalNameService.Spec.ExternalName)",
      "226:  })",
      "227: }",
      "",
      "---------------"
    ],
    "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go": [
      "File: test/e2e/httpproxy/httpproxy_test.go -> test/e2e/httpproxy/httpproxy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:  \"fmt\"",
      "21:  \"testing\"",
      "23:  certmanagerv1 \"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1\"",
      "24:  certmanagermetav1 \"github.com/jetstack/cert-manager/pkg/apis/meta/v1\"",
      "25:  . \"github.com/onsi/ginkgo\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:  \"github.com/davecgh/go-spew/spew\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:  f.NamespacedTest(\"017-host-header-rewrite\", testHostHeaderRewrite)",
      "221:  f.NamespacedTest(\"019-local-rate-limiting-vhost\", testLocalRateLimitingVirtualHost)",
      "223:  f.NamespacedTest(\"019-local-rate-limiting-route\", testLocalRateLimitingRoute)",
      "",
      "[Removed Lines]",
      "217:  f.NamespacedTest(\"018-external-name-service-insecure\", testExternalNameServiceInsecure)",
      "219:  f.NamespacedTest(\"018-external-name-service-tls\", testExternalNameServiceTLS)",
      "",
      "[Added Lines]",
      "218:  f.NamespacedTest(\"018-external-name-service-insecure\", func(namespace string) {",
      "219:   Context(\"with ExternalName Services enabled\", func() {",
      "220:    BeforeEach(func() {",
      "221:     contourConfig.EnableExternalNameService = true",
      "222:    })",
      "223:    testExternalNameServiceInsecure(namespace)",
      "224:   })",
      "225:  })",
      "227:  f.NamespacedTest(\"018-external-name-service-tls\", func(namespace string) {",
      "228:   Context(\"with ExternalName Services enabled\", func() {",
      "229:    BeforeEach(func() {",
      "230:     contourConfig.EnableExternalNameService = true",
      "231:    })",
      "232:    testExternalNameServiceTLS(namespace)",
      "233:   })",
      "234:  })",
      "236:  f.NamespacedTest(\"018-external-name-service-localhost\", func(namespace string) {",
      "237:   Context(\"with ExternalName Services enabled\", func() {",
      "238:    BeforeEach(func() {",
      "239:     contourConfig.EnableExternalNameService = true",
      "240:    })",
      "241:    testExternalNameServiceLocalhostInvalid(namespace)",
      "242:   })",
      "243:  })",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "280: func httpProxyValid(proxy *contourv1.HTTPProxy) bool {",
      "282: }",
      "",
      "[Removed Lines]",
      "281:  return proxy != nil && proxy.Status.CurrentStatus == \"valid\"",
      "",
      "[Added Lines]",
      "305:  if proxy == nil {",
      "306:   return false",
      "307:  }",
      "309:  if len(proxy.Status.Conditions) == 0 {",
      "310:   return false",
      "311:  }",
      "313:  cond := proxy.Status.GetConditionFor(\"Valid\")",
      "314:  return cond.Status == \"True\"",
      "316: }",
      "320: func httpProxyErrors(proxy *contourv1.HTTPProxy) string {",
      "321:  cond := proxy.Status.GetConditionFor(\"Valid\")",
      "322:  errors := cond.Errors",
      "323:  if len(errors) > 0 {",
      "324:   return spew.Sdump(errors)",
      "325:  }",
      "327:  return \"\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4cc27e013db57eb4dc91cb081e797ddac4597be",
      "candidate_info": {
        "commit_hash": "b4cc27e013db57eb4dc91cb081e797ddac4597be",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/b4cc27e013db57eb4dc91cb081e797ddac4597be",
        "files": [
          "cmd/contour/serve.go",
          "internal/contour/handler.go",
          "internal/contour/metrics.go",
          "internal/contour/metrics_test.go",
          "internal/dag/builder.go",
          "internal/dag/dag.go",
          "internal/dag/httpproxy_processor.go",
          "internal/dag/policy.go",
          "internal/dag/status.go",
          "internal/dag/status_test.go",
          "internal/featuretests/authorization_test.go",
          "internal/featuretests/corspolicy_test.go",
          "internal/featuretests/downstreamvalidation_test.go",
          "internal/featuretests/featuretests.go",
          "internal/featuretests/ingressclass_test.go",
          "internal/featuretests/replaceprefix_test.go",
          "internal/fixture/detailedcondition.go",
          "internal/k8s/status.go",
          "internal/k8s/status_test.go",
          "internal/k8s/statusaddress.go",
          "internal/k8s/statusaddress_test.go",
          "internal/k8s/statuscache.go",
          "internal/k8s/statusupdater.go",
          "internal/status/cache.go",
          "internal/status/proxystatus.go",
          "internal/status/proxystatus_test.go"
        ],
        "message": "Add code for DAG status to emit Conditions (#2962)\n\nThis commit adds code for DAG status updates to emit Conditions\ninstead of updating the `currentStatus` and `description` fields\nonly. Instead, there is a `Valid` condition that indicates the same\ninformation, but allows extra details to be added via SubConditions.\n\nSigned-off-by: Nick Young <ynick@vmware.com>",
        "before_after_code_files": [
          "cmd/contour/serve.go||cmd/contour/serve.go",
          "internal/contour/handler.go||internal/contour/handler.go",
          "internal/contour/metrics.go||internal/contour/metrics.go",
          "internal/contour/metrics_test.go||internal/contour/metrics_test.go",
          "internal/dag/builder.go||internal/dag/builder.go",
          "internal/dag/dag.go||internal/dag/dag.go",
          "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
          "internal/dag/policy.go||internal/dag/policy.go",
          "internal/dag/status.go||internal/dag/status.go",
          "internal/dag/status_test.go||internal/dag/status_test.go",
          "internal/featuretests/authorization_test.go||internal/featuretests/authorization_test.go",
          "internal/featuretests/corspolicy_test.go||internal/featuretests/corspolicy_test.go",
          "internal/featuretests/downstreamvalidation_test.go||internal/featuretests/downstreamvalidation_test.go",
          "internal/featuretests/featuretests.go||internal/featuretests/featuretests.go",
          "internal/featuretests/ingressclass_test.go||internal/featuretests/ingressclass_test.go",
          "internal/featuretests/replaceprefix_test.go||internal/featuretests/replaceprefix_test.go",
          "internal/fixture/detailedcondition.go||internal/fixture/detailedcondition.go",
          "internal/k8s/status.go||internal/k8s/status.go",
          "internal/k8s/status_test.go||internal/k8s/status_test.go",
          "internal/k8s/statusaddress.go||internal/k8s/statusaddress.go",
          "internal/k8s/statusaddress_test.go||internal/k8s/statusaddress_test.go",
          "internal/k8s/statuscache.go||internal/k8s/statuscache.go",
          "internal/k8s/statusupdater.go||internal/k8s/statusupdater.go",
          "internal/status/cache.go||internal/status/cache.go",
          "internal/status/proxystatus.go||internal/status/proxystatus.go",
          "internal/status/proxystatus_test.go||internal/status/proxystatus_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ],
          "candidate": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/contour/serve.go||cmd/contour/serve.go": [
          "File: cmd/contour/serve.go -> cmd/contour/serve.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:  }",
          "480:  sh := k8s.StatusUpdateHandler{",
          "482:   Clients:         clients,",
          "483:   LeaderElected:   eventHandler.IsLeader,",
          "484:   Converter:       converter,",
          "",
          "[Removed Lines]",
          "481:   Log:             log.WithField(\"context\", \"StatusUpdateWriter\"),",
          "",
          "[Added Lines]",
          "481:   Log:             log.WithField(\"context\", \"StatusUpdateHandler\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486:  }",
          "487:  g.Add(sh.Start)",
          "496:  lbsw := loadBalancerStatusWriter{",
          "",
          "[Removed Lines]",
          "491:  eventHandler.StatusClient = &k8s.StatusWriter{",
          "492:   Updater: sh.Writer(),",
          "493:  }",
          "",
          "[Added Lines]",
          "491:  eventHandler.StatusUpdater = sh.Writer()",
          "",
          "---------------"
        ],
        "internal/contour/handler.go||internal/contour/handler.go": [
          "File: internal/contour/handler.go -> internal/contour/handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  \"github.com/projectcontour/contour/internal/k8s\"",
          "27:  \"github.com/sirupsen/logrus\"",
          "28:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "30: )",
          "",
          "[Removed Lines]",
          "29:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  HoldoffDelay, HoldoffMaxDelay time.Duration",
          "43:  logrus.FieldLogger",
          "",
          "[Removed Lines]",
          "41:  StatusClient k8s.StatusClient",
          "",
          "[Added Lines]",
          "40:  StatusUpdater k8s.StatusUpdater",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:  latestDAG := e.Builder.Build()",
          "213:  e.Observer.OnChange(latestDAG)",
          "221:  }",
          "244: }",
          "",
          "[Removed Lines]",
          "215:  select {",
          "216:  case <-e.IsLeader:",
          "218:   e.setStatus(latestDAG.Statuses())",
          "219:  default:",
          "220:   e.Debug(\"skipping metrics and CRD status update, not leader\")",
          "222: }",
          "225: func (e *EventHandler) setStatus(statuses map[types.NamespacedName]dag.Status) {",
          "226:  for _, st := range statuses {",
          "227:   switch obj := st.Object.(type) {",
          "228:   case *contour_api_v1.HTTPProxy:",
          "229:    err := e.StatusClient.SetStatus(st.Status, st.Description, obj)",
          "230:    if err != nil {",
          "231:     e.WithError(err).",
          "232:      WithField(\"status\", st.Status).",
          "233:      WithField(\"desc\", st.Description).",
          "234:      WithField(\"name\", obj.Name).",
          "235:      WithField(\"namespace\", obj.Namespace).",
          "236:      Error(\"failed to set status\")",
          "237:    }",
          "238:   default:",
          "239:    e.WithField(\"namespace\", obj.GetObjectMeta().GetNamespace()).",
          "240:     WithField(\"name\", obj.GetObjectMeta().GetName()).",
          "241:     Error(\"set status: unknown object type\")",
          "242:   }",
          "243:  }",
          "",
          "[Added Lines]",
          "214:  for _, upd := range latestDAG.StatusCache.GetStatusUpdates() {",
          "215:   e.StatusUpdater.Send(upd)",
          "",
          "---------------"
        ],
        "internal/contour/metrics.go||internal/contour/metrics.go": [
          "File: internal/contour/metrics.go -> internal/contour/metrics.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"github.com/projectcontour/contour/internal/dag\"",
          "24:  \"github.com/projectcontour/contour/internal/k8s\"",
          "25:  \"github.com/projectcontour/contour/internal/metrics\"",
          "26:  \"github.com/prometheus/client_golang/prometheus\"",
          "28:  \"k8s.io/client-go/tools/cache\"",
          "29: )",
          "",
          "[Removed Lines]",
          "27:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Added Lines]",
          "26:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  select {",
          "84:  case <-m.IsLeader:",
          "86:  default:",
          "87:  }",
          "88: }",
          "91:  proxyMetricTotal := make(map[metrics.Meta]int)",
          "92:  proxyMetricValid := make(map[metrics.Meta]int)",
          "93:  proxyMetricInvalid := make(map[metrics.Meta]int)",
          "94:  proxyMetricOrphaned := make(map[metrics.Meta]int)",
          "95:  proxyMetricRoots := make(map[metrics.Meta]int)",
          "104:   }",
          "105:  }",
          "",
          "[Removed Lines]",
          "85:   m.Metrics.SetHTTPProxyMetric(calculateRouteMetric(d.Statuses()))",
          "90: func calculateRouteMetric(statuses map[types.NamespacedName]dag.Status) metrics.RouteMetric {",
          "97:  for _, v := range statuses {",
          "98:   switch o := v.Object.(type) {",
          "99:   case *contour_api_v1.HTTPProxy:",
          "100:    calcMetrics(v, proxyMetricValid, proxyMetricInvalid, proxyMetricOrphaned, proxyMetricTotal)",
          "101:    if o.Spec.VirtualHost != nil {",
          "102:     proxyMetricRoots[metrics.Meta{Namespace: v.Object.GetObjectMeta().GetNamespace()}]++",
          "103:    }",
          "",
          "[Added Lines]",
          "85:   m.Metrics.SetHTTPProxyMetric(calculateRouteMetric(d.StatusCache.GetProxyUpdates()))",
          "90: func calculateRouteMetric(updates []*status.ProxyUpdate) metrics.RouteMetric {",
          "97:  for _, u := range updates {",
          "98:   calcMetrics(u, proxyMetricValid, proxyMetricInvalid, proxyMetricOrphaned, proxyMetricTotal)",
          "99:   if u.Vhost != \"\" {",
          "100:    proxyMetricRoots[metrics.Meta{VHost: u.Vhost, Namespace: u.Fullname.Namespace}]++",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  }",
          "114: }",
          "124:  }",
          "126: }",
          "",
          "[Removed Lines]",
          "116: func calcMetrics(v dag.Status, metricValid map[metrics.Meta]int, metricInvalid map[metrics.Meta]int, metricOrphaned map[metrics.Meta]int, metricTotal map[metrics.Meta]int) {",
          "117:  switch v.Status {",
          "118:  case k8s.StatusValid:",
          "119:   metricValid[metrics.Meta{VHost: v.Vhost, Namespace: v.Object.GetObjectMeta().GetNamespace()}]++",
          "120:  case k8s.StatusInvalid:",
          "121:   metricInvalid[metrics.Meta{VHost: v.Vhost, Namespace: v.Object.GetObjectMeta().GetNamespace()}]++",
          "122:  case k8s.StatusOrphaned:",
          "123:   metricOrphaned[metrics.Meta{Namespace: v.Object.GetObjectMeta().GetNamespace()}]++",
          "125:  metricTotal[metrics.Meta{Namespace: v.Object.GetObjectMeta().GetNamespace()}]++",
          "",
          "[Added Lines]",
          "113: func calcMetrics(u *status.ProxyUpdate, metricValid map[metrics.Meta]int, metricInvalid map[metrics.Meta]int, metricOrphaned map[metrics.Meta]int, metricTotal map[metrics.Meta]int) {",
          "114:  validCond := u.ConditionFor(status.ValidCondition)",
          "115:  switch validCond.Status {",
          "116:  case contour_api_v1.ConditionTrue:",
          "117:   metricValid[metrics.Meta{VHost: u.Vhost, Namespace: u.Fullname.Namespace}]++",
          "118:  case contour_api_v1.ConditionFalse:",
          "119:   if _, ok := validCond.GetError(string(status.OrphanedConditionType)); ok {",
          "120:    metricOrphaned[metrics.Meta{Namespace: u.Fullname.Namespace}]++",
          "121:   } else {",
          "122:    metricInvalid[metrics.Meta{VHost: u.Vhost, Namespace: u.Fullname.Namespace}]++",
          "123:   }",
          "125:  metricTotal[metrics.Meta{Namespace: u.Fullname.Namespace}]++",
          "",
          "---------------"
        ],
        "internal/contour/metrics_test.go||internal/contour/metrics_test.go": [
          "File: internal/contour/metrics_test.go -> internal/contour/metrics_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:    dag := builder.Build()",
          "63:    if tc.wantProxy != nil {",
          "64:     assert.Equal(t, *tc.wantProxy, gotProxy)",
          "",
          "[Removed Lines]",
          "61:    gotProxy := calculateRouteMetric(dag.Statuses())",
          "",
          "[Added Lines]",
          "61:    gotProxy := calculateRouteMetric(dag.StatusCache.GetProxyUpdates())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:    },",
          "379:    Orphaned: map[metrics.Meta]int{},",
          "380:    Root: map[metrics.Meta]int{",
          "382:    },",
          "383:    Total: map[metrics.Meta]int{",
          "384:     {Namespace: \"roots\"}: 1,",
          "",
          "[Removed Lines]",
          "381:     {Namespace: \"roots\"}: 1,",
          "",
          "[Added Lines]",
          "381:     {Namespace: \"roots\", VHost: \"example.com\"}: 1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:    Valid:    map[metrics.Meta]int{},",
          "397:    Orphaned: map[metrics.Meta]int{},",
          "398:    Root: map[metrics.Meta]int{",
          "400:    },",
          "401:    Total: map[metrics.Meta]int{",
          "402:     {Namespace: \"roots\"}: 1,",
          "",
          "[Removed Lines]",
          "399:     {Namespace: \"roots\"}: 1,",
          "",
          "[Added Lines]",
          "399:     {Namespace: \"roots\", VHost: \"example.com\"}: 1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "409:   wantIR: nil,",
          "410:   wantProxy: &metrics.RouteMetric{",
          "411:    Invalid: map[metrics.Meta]int{",
          "413:    },",
          "414:    Valid:    map[metrics.Meta]int{},",
          "415:    Orphaned: map[metrics.Meta]int{},",
          "416:    Root: map[metrics.Meta]int{",
          "418:    },",
          "419:    Total: map[metrics.Meta]int{",
          "420:     {Namespace: \"finance\"}: 1,",
          "",
          "[Removed Lines]",
          "412:     {Namespace: \"finance\"}: 1,",
          "417:     {Namespace: \"finance\"}: 1,",
          "",
          "[Added Lines]",
          "412:     {Namespace: \"finance\", VHost: \"example.com\"}: 1,",
          "417:     {Namespace: \"finance\", VHost: \"example.com\"}: 1,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "432:    },",
          "433:    Valid:    map[metrics.Meta]int{},",
          "434:    Orphaned: map[metrics.Meta]int{},",
          "438:    Total: map[metrics.Meta]int{",
          "439:     {Namespace: \"roots\"}: 1,",
          "440:    },",
          "",
          "[Removed Lines]",
          "435:    Root: map[metrics.Meta]int{",
          "436:     {Namespace: \"roots\"}: 1,",
          "437:    },",
          "",
          "[Added Lines]",
          "435:    Root:     map[metrics.Meta]int{},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "451:    Valid:    map[metrics.Meta]int{},",
          "452:    Orphaned: map[metrics.Meta]int{},",
          "453:    Root: map[metrics.Meta]int{",
          "455:    },",
          "456:    Total: map[metrics.Meta]int{",
          "457:     {Namespace: \"roots\"}: 1,",
          "",
          "[Removed Lines]",
          "454:     {Namespace: \"roots\"}: 1,",
          "",
          "[Added Lines]",
          "452:     {Namespace: \"roots\", VHost: \"example.com\"}: 1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "471:    },",
          "472:    Orphaned: map[metrics.Meta]int{},",
          "473:    Root: map[metrics.Meta]int{",
          "475:    },",
          "476:    Total: map[metrics.Meta]int{",
          "477:     {Namespace: \"roots\"}: 2,",
          "",
          "[Removed Lines]",
          "474:     {Namespace: \"roots\"}: 1,",
          "",
          "[Added Lines]",
          "472:     {Namespace: \"roots\", VHost: \"example.com\"}: 1,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "508:    },",
          "509:    Orphaned: map[metrics.Meta]int{},",
          "510:    Root: map[metrics.Meta]int{",
          "512:    },",
          "513:    Total: map[metrics.Meta]int{",
          "514:     {Namespace: \"roots\"}: 3,",
          "",
          "[Removed Lines]",
          "511:     {Namespace: \"roots\"}: 1,",
          "",
          "[Added Lines]",
          "509:     {Namespace: \"roots\", VHost: \"example.com\"}: 1,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "527:    Orphaned: map[metrics.Meta]int{",
          "528:     {Namespace: \"roots\"}: 1,",
          "529:    },",
          "533:    Total: map[metrics.Meta]int{",
          "534:     {Namespace: \"roots\"}: 2,",
          "535:    },",
          "",
          "[Removed Lines]",
          "530:    Root: map[metrics.Meta]int{",
          "531:     {Namespace: \"roots\"}: 1,",
          "532:    },",
          "",
          "[Added Lines]",
          "528:    Root: map[metrics.Meta]int{},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "549:    },",
          "550:    Orphaned: map[metrics.Meta]int{},",
          "551:    Root: map[metrics.Meta]int{",
          "553:    },",
          "554:    Total: map[metrics.Meta]int{",
          "555:     {Namespace: \"roots\"}: 3,",
          "",
          "[Removed Lines]",
          "552:     {Namespace: \"roots\"}: 2,",
          "",
          "[Added Lines]",
          "548:     {Namespace: \"roots\", VHost: \"example.com\"}: 1,",
          "",
          "---------------"
        ],
        "internal/dag/builder.go||internal/dag/builder.go": [
          "File: internal/dag/builder.go -> internal/dag/builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: package dag",
          "16: import (",
          "18: )",
          "",
          "[Removed Lines]",
          "17:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Added Lines]",
          "17:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: func (b *Builder) Build() *DAG {",
          "49:  dag := DAG{",
          "53:  }",
          "55:  for _, p := range b.Processors {",
          "",
          "[Removed Lines]",
          "50:   StatusWriter: StatusWriter{",
          "51:    statuses: map[types.NamespacedName]Status{},",
          "52:   },",
          "",
          "[Added Lines]",
          "50:   StatusCache: status.NewCache(),",
          "",
          "---------------"
        ],
        "internal/dag/dag.go||internal/dag/dag.go": [
          "File: internal/dag/dag.go -> internal/dag/dag.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"time\"",
          "25:  envoy_api_v2_auth \"github.com/envoyproxy/go-control-plane/envoy/api/v2/auth\"",
          "26:  \"github.com/projectcontour/contour/internal/timeout\"",
          "27:  \"github.com/projectcontour/contour/internal/xds\"",
          "28:  v1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "27:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: type DAG struct {",
          "72:  roots []Vertex",
          "",
          "[Removed Lines]",
          "69:  StatusWriter",
          "",
          "[Added Lines]",
          "70:  StatusCache status.Cache",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:  }",
          "80: }",
          "86: }",
          "",
          "[Removed Lines]",
          "84: func (d *DAG) Statuses() map[types.NamespacedName]Status {",
          "85:  return d.statuses",
          "",
          "[Added Lines]",
          "86: func (d *DAG) GetProxyStatusesTesting() map[types.NamespacedName]contour_api_v1.DetailedCondition {",
          "87:  validConds := make(map[types.NamespacedName]contour_api_v1.DetailedCondition)",
          "89:  for _, pu := range d.StatusCache.GetProxyUpdates() {",
          "90:   validConds[pu.Fullname] = *pu.Conditions[status.ValidCondition]",
          "91:  }",
          "93:  return validConds",
          "",
          "---------------"
        ],
        "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
          "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  contour_api_v1alpha1 \"github.com/projectcontour/contour/apis/projectcontour/v1alpha1\"",
          "23:  \"github.com/projectcontour/contour/internal/annotation\"",
          "24:  \"github.com/projectcontour/contour/internal/k8s\"",
          "25:  \"github.com/projectcontour/contour/internal/timeout\"",
          "26:  \"k8s.io/apimachinery/pkg/api/equality\"",
          "27:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  for meta := range p.orphaned {",
          "91:   proxy, ok := p.source.httpproxies[meta]",
          "92:   if ok {",
          "96:    commit()",
          "97:   }",
          "98:  }",
          "99: }",
          "101: func (p *HTTPProxyProcessor) computeHTTPProxy(proxy *contour_api_v1.HTTPProxy) {",
          "103:  defer commit()",
          "105:  if proxy.Spec.VirtualHost == nil {",
          "",
          "[Removed Lines]",
          "93:    sw, commit := p.dag.WithObject(proxy)",
          "94:    sw.WithValue(\"status\", k8s.StatusOrphaned).",
          "95:     WithValue(\"description\", \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "102:  sw, commit := p.dag.WithObject(proxy)",
          "",
          "[Added Lines]",
          "94:    pa, commit := p.dag.StatusCache.ProxyAccessor(proxy)",
          "95:    pa.ConditionFor(status.ValidCondition).AddError(string(status.OrphanedConditionType),",
          "96:     \"Orphaned\",",
          "97:     \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "104:  pa, commit := p.dag.StatusCache.ProxyAccessor(proxy)",
          "105:  validCond := pa.ConditionFor(status.ValidCondition)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:   return",
          "109:  }",
          "114:   return",
          "115:  }",
          "120:   return",
          "121:  }",
          "123:  if strings.Contains(host, \"*\") {",
          "125:   return",
          "126:  }",
          "128:  if len(proxy.Spec.Routes) == 0 && len(proxy.Spec.Includes) == 0 && proxy.Spec.TCPProxy == nil {",
          "130:   return",
          "131:  }",
          "133:  var tlsEnabled bool",
          "134:  if tls := proxy.Spec.VirtualHost.TLS; tls != nil {",
          "135:   if !isBlank(tls.SecretName) && tls.Passthrough {",
          "137:    return",
          "138:   }",
          "140:   if isBlank(tls.SecretName) && !tls.Passthrough {",
          "142:    return",
          "143:   }",
          "145:   if tls.Passthrough && tls.ClientValidation != nil {",
          "147:    return",
          "148:   }",
          "",
          "[Removed Lines]",
          "112:  if !p.rootAllowed(proxy.Namespace) {",
          "113:   sw.SetInvalid(\"root HTTPProxy cannot be defined in this namespace\")",
          "117:  host := proxy.Spec.VirtualHost.Fqdn",
          "118:  if isBlank(host) {",
          "119:   sw.SetInvalid(\"Spec.VirtualHost.Fqdn must be specified\")",
          "122:  sw = sw.WithValue(\"vhost\", host)",
          "124:   sw.SetInvalid(\"Spec.VirtualHost.Fqdn %q cannot use wildcards\", host)",
          "129:   sw.SetInvalid(\"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\")",
          "136:    sw.SetInvalid(\"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\")",
          "141:    sw.SetInvalid(\"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\")",
          "146:    sw.SetInvalid(\"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\")",
          "",
          "[Added Lines]",
          "115:  host := proxy.Spec.VirtualHost.Fqdn",
          "116:  if isBlank(host) {",
          "117:   validCond.AddError(\"VirtualHostError\", \"FQDNNotSpecified\",",
          "118:    \"Spec.VirtualHost.Fqdn must be specified\")",
          "121:  pa.Vhost = host",
          "125:  if !p.rootAllowed(proxy.Namespace) {",
          "126:   validCond.AddError(\"RootNamespaceError\", \"RootProxyNotAllowedInNamespace\",",
          "127:    \"root HTTPProxy cannot be defined in this namespace\")",
          "132:   validCond.AddErrorf(\"VirtualHostError\", \"WildCardNotAllowed\",",
          "133:    \"Spec.VirtualHost.Fqdn %q cannot use wildcards\", host)",
          "138:   validCond.AddError(\"SpecError\", \"NothingDefined\",",
          "139:    \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\")",
          "146:    validCond.AddError(\"TLSError\", \"TLSConfigNotValid\",",
          "147:     \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\")",
          "152:    validCond.AddError(\"TLSError\", \"TLSConfigNotValid\",",
          "153:     \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\")",
          "158:    validCond.AddError(\"TLSError\", \"TLSIncompatibleFeatures\",",
          "159:     \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:    secretName := k8s.NamespacedNameFrom(tls.SecretName, k8s.DefaultNamespace(proxy.Namespace))",
          "155:    sec, err := p.source.LookupSecret(secretName, validSecret)",
          "156:    if err != nil {",
          "158:     return",
          "159:    }",
          "161:    if !p.source.DelegationPermitted(secretName, proxy.Namespace) {",
          "163:     return",
          "164:    }",
          "",
          "[Removed Lines]",
          "157:     sw.SetInvalid(\"Spec.VirtualHost.TLS Secret %q is invalid: %s\", tls.SecretName, err)",
          "162:     sw.SetInvalid(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", tls.SecretName)",
          "",
          "[Added Lines]",
          "170:     validCond.AddErrorf(\"TLSError\", \"SecretNotValid\",",
          "171:      \"Spec.VirtualHost.TLS Secret %q is invalid: %s\", tls.SecretName, err)",
          "176:     validCond.AddErrorf(\"TLSError\", \"DelegationNotPermitted\",",
          "177:      \"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", tls.SecretName)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:    if tls.EnableFallbackCertificate && tls.ClientValidation != nil {",
          "173:     return",
          "174:    }",
          "",
          "[Removed Lines]",
          "172:     sw.SetInvalid(\"Spec.Virtualhost.TLS fallback & client validation are incompatible\")",
          "",
          "[Added Lines]",
          "187:     validCond.AddError(\"TLSError\", \"TLSIncompatibleFeatures\",",
          "188:      \"Spec.Virtualhost.TLS fallback & client validation are incompatible\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "181:    if tls.EnableFallbackCertificate && proxy.Spec.VirtualHost.AuthorizationConfigured() {",
          "183:     return",
          "184:    }",
          "187:    if tls.EnableFallbackCertificate {",
          "188:     if p.FallbackCertificate == nil {",
          "190:      return",
          "191:     }",
          "193:     sec, err = p.source.LookupSecret(*p.FallbackCertificate, validSecret)",
          "194:     if err != nil {",
          "196:      return",
          "197:     }",
          "199:     if !p.source.DelegationPermitted(*p.FallbackCertificate, proxy.Namespace) {",
          "201:      return",
          "202:     }",
          "",
          "[Removed Lines]",
          "182:     sw.SetInvalid(\"Spec.Virtualhost.TLS fallback & client authorization are incompatible\")",
          "189:      sw.SetInvalid(\"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\")",
          "195:      sw.SetInvalid(\"Spec.Virtualhost.TLS Secret %q fallback certificate is invalid: %s\", p.FallbackCertificate, err)",
          "200:      sw.SetInvalid(\"Spec.VirtualHost.TLS fallback Secret %q is not configured for certificate delegation\", p.FallbackCertificate)",
          "",
          "[Added Lines]",
          "198:     validCond.AddError(\"TLSError\", \"TLSIncompatibleFeatures\",",
          "199:      \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\")",
          "206:      validCond.AddError(\"TLSError\", \"FallbackNotPresent\",",
          "207:       \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\")",
          "213:      validCond.AddErrorf(\"TLSError\", \"FallbackNotValid\",",
          "214:       \"Spec.Virtualhost.TLS Secret %q fallback certificate is invalid: %s\", p.FallbackCertificate, err)",
          "219:      validCond.AddErrorf(\"TLSError\", \"FallbackNotDelegated\",",
          "220:       \"Spec.VirtualHost.TLS fallback Secret %q is not configured for certificate delegation\", p.FallbackCertificate)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:    if tls.ClientValidation != nil {",
          "209:     dv, err := p.source.LookupDownstreamValidation(tls.ClientValidation, proxy.Namespace)",
          "210:     if err != nil {",
          "212:      return",
          "213:     }",
          "214:     svhost.DownstreamValidation = dv",
          "",
          "[Removed Lines]",
          "211:      sw.SetInvalid(\"Spec.VirtualHost.TLS client validation is invalid: %s\", err)",
          "",
          "[Added Lines]",
          "231:      validCond.AddErrorf(\"TLSError\", \"ClientValidationInvalid\",",
          "232:       \"Spec.VirtualHost.TLS client validation is invalid: %s\", err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:     ref := defaultExtensionRef(auth.ExtensionServiceRef)",
          "221:     if ref.APIVersion != contour_api_v1alpha1.GroupVersion.String() {",
          "224:      return",
          "225:     }",
          "",
          "[Removed Lines]",
          "222:      sw.SetInvalid(\"Spec.Virtualhost.Authorization.ServiceRef specifies an unsupported resource version %q\",",
          "223:       auth.ExtensionServiceRef.APIVersion)",
          "",
          "[Added Lines]",
          "243:      validCond.AddErrorf(\"AuthError\", \"AuthBadResourceVersion\",",
          "244:       \"Spec.Virtualhost.Authorization.extensionRef specifies an unsupported resource version %q\", auth.ExtensionServiceRef.APIVersion)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "233:     ext := p.dag.GetExtensionCluster(extensionClusterName(extensionName))",
          "234:     if ext == nil {",
          "237:      return",
          "238:     }",
          "",
          "[Removed Lines]",
          "235:      sw.SetInvalid(\"Spec.Virtualhost.Authorization.ServiceRef extension service %q not found\",",
          "236:       extensionName)",
          "",
          "[Added Lines]",
          "256:      validCond.AddErrorf(\"AuthError\", \"ExtensionServiceNotFound\",",
          "257:       \"Spec.Virtualhost.Authorization.ServiceRef extension service %q not found\", extensionName)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "243:     timeout, err := timeout.Parse(auth.ResponseTimeout)",
          "244:     if err != nil {",
          "246:      return",
          "247:     }",
          "248:     svhost.AuthorizationResponseTimeout = timeout",
          "",
          "[Removed Lines]",
          "245:      sw.SetInvalid(\"Spec.Virtualhost.Authorization.ResponseTimeout is invalid: %s\", err)",
          "",
          "[Added Lines]",
          "266:      validCond.AddErrorf(\"AuthError\", \"AuthReponseTimeoutInvalid\",",
          "267:       \"Spec.Virtualhost.Authorization.ResponseTimeout is invalid: %s\", err)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "253:  if proxy.Spec.TCPProxy != nil {",
          "254:   if !tlsEnabled {",
          "256:    return",
          "257:   }",
          "259:    return",
          "260:   }",
          "261:  }",
          "264:  insecure := p.dag.EnsureVirtualHost(host)",
          "265:  cp, err := toCORSPolicy(proxy.Spec.VirtualHost.CORSPolicy)",
          "266:  if err != nil {",
          "268:   return",
          "269:  }",
          "270:  insecure.CORSPolicy = cp",
          "",
          "[Removed Lines]",
          "255:    sw.SetInvalid(\"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\")",
          "258:   if !p.processHTTPProxyTCPProxy(sw, proxy, nil, host) {",
          "263:  routes := p.computeRoutes(sw, proxy, proxy, nil, nil, tlsEnabled)",
          "267:   sw.SetInvalid(fmt.Sprintf(\"Spec.VirtualHost.CORSPolicy: %s\", err))",
          "",
          "[Added Lines]",
          "277:    validCond.AddError(\"TCPProxyError\", \"TLSMustBeConfigured\",",
          "278:     \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\")",
          "281:   if !p.processHTTPProxyTCPProxy(validCond, proxy, nil, host) {",
          "286:  routes := p.computeRoutes(validCond, proxy, proxy, nil, nil, tlsEnabled)",
          "290:   validCond.AddErrorf(\"CORSError\", \"PolicyDidNotParse\",",
          "291:    \"Spec.VirtualHost.CORSPolicy: %s\", err)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "291: }",
          "293: func (p *HTTPProxyProcessor) computeRoutes(",
          "295:  rootProxy *contour_api_v1.HTTPProxy,",
          "296:  proxy *contour_api_v1.HTTPProxy,",
          "297:  conditions []contour_api_v1.MatchCondition,",
          "",
          "[Removed Lines]",
          "294:  sw *ObjectStatusWriter,",
          "",
          "[Added Lines]",
          "318:  validCond *contour_api_v1.DetailedCondition,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "306:   }",
          "307:   if v.Name == proxy.Name && v.Namespace == proxy.Namespace {",
          "308:    path = append(path, fmt.Sprintf(\"%s/%s\", proxy.Namespace, proxy.Name))",
          "310:    return nil",
          "311:   }",
          "312:  }",
          "",
          "[Removed Lines]",
          "309:    sw.SetInvalid(\"include creates a delegation cycle: %s\", strings.Join(path, \" -> \"))",
          "",
          "[Added Lines]",
          "333:    validCond.AddErrorf(\"IncludeError\", \"IncludeCreatesCycle\",",
          "334:     \"include creates an include cycle: %s\", strings.Join(path, \" -> \"))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "318:  if includeMatchConditionsIdentical(proxy.Spec.Includes) {",
          "320:   return nil",
          "321:  }",
          "",
          "[Removed Lines]",
          "319:   sw.SetInvalid(\"duplicate conditions defined on an include\")",
          "",
          "[Added Lines]",
          "344:   validCond.AddError(\"IncludeError\", \"DuplicateMatchConditions\",",
          "345:    \"duplicate conditions defined on an include\")",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "327:    namespace = proxy.Namespace",
          "328:   }",
          "331:   if !ok {",
          "333:    return nil",
          "334:   }",
          "337:    return nil",
          "338:   }",
          "340:   if err := pathMatchConditionsValid(include.Conditions); err != nil {",
          "342:    return nil",
          "343:   }",
          "351:  }",
          "353:  for _, route := range proxy.Spec.Routes {",
          "354:   if err := pathMatchConditionsValid(route.Conditions); err != nil {",
          "356:    return nil",
          "357:   }",
          "",
          "[Removed Lines]",
          "330:   delegate, ok := p.source.httpproxies[types.NamespacedName{Name: include.Name, Namespace: namespace}]",
          "332:    sw.SetInvalid(\"include %s/%s not found\", namespace, include.Name)",
          "335:   if delegate.Spec.VirtualHost != nil {",
          "336:    sw.SetInvalid(\"root httpproxy cannot delegate to another root httpproxy\")",
          "341:    sw.SetInvalid(\"include: %s\", err)",
          "345:   sw, commit := p.dag.WithObject(delegate)",
          "346:   routes = append(routes, p.computeRoutes(sw, rootProxy, delegate, append(conditions, include.Conditions...), visited, enforceTLS)...)",
          "347:   commit()",
          "350:   delete(p.orphaned, types.NamespacedName{Name: delegate.Name, Namespace: delegate.Namespace})",
          "355:    sw.SetInvalid(\"route: %s\", err)",
          "",
          "[Added Lines]",
          "356:   includedProxy, ok := p.source.httpproxies[types.NamespacedName{Name: include.Name, Namespace: namespace}]",
          "358:    validCond.AddErrorf(\"IncludeError\", \"IncludeNotFound\",",
          "359:     \"include %s/%s not found\", namespace, include.Name)",
          "362:   if includedProxy.Spec.VirtualHost != nil {",
          "363:    validCond.AddErrorf(\"IncludeError\", \"RootIncludesRoot\",",
          "364:     \"root httpproxy cannot include another root httpproxy\")",
          "369:    validCond.AddErrorf(\"IncludeError\", \"PathMatchConditionsNotValid\",",
          "370:     \"include: %s\", err)",
          "374:   inc, incCommit := p.dag.StatusCache.ProxyAccessor(includedProxy)",
          "375:   incValidCond := inc.ConditionFor(status.ValidCondition)",
          "376:   routes = append(routes, p.computeRoutes(incValidCond, rootProxy, includedProxy, append(conditions, include.Conditions...), visited, enforceTLS)...)",
          "377:   incCommit()",
          "380:   delete(p.orphaned, types.NamespacedName{Name: includedProxy.Name, Namespace: includedProxy.Namespace})",
          "385:    validCond.AddErrorf(\"RouteError\", \"PathMatchConditionsNotValid\",",
          "386:     \"route: %s\", err)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "362:   if err := headerMatchConditionsValid(conds); err != nil {",
          "364:    return nil",
          "365:   }",
          "367:   reqHP, err := headersPolicyRoute(route.RequestHeadersPolicy, true /* allow Host */)",
          "368:   if err != nil {",
          "370:    return nil",
          "371:   }",
          "373:   respHP, err := headersPolicyRoute(route.ResponseHeadersPolicy, false /* disallow Host */)",
          "374:   if err != nil {",
          "376:    return nil",
          "377:   }",
          "379:   if len(route.Services) < 1 {",
          "381:    return nil",
          "382:   }",
          "384:   tp, err := timeoutPolicy(route.TimeoutPolicy)",
          "385:   if err != nil {",
          "387:    return nil",
          "388:   }",
          "",
          "[Removed Lines]",
          "363:    sw.SetInvalid(err.Error())",
          "369:    sw.SetInvalid(err.Error())",
          "375:    sw.SetInvalid(\"%s on response headers\", err)",
          "380:    sw.SetInvalid(\"route.services must have at least one entry\")",
          "386:    sw.SetInvalid(\"route.timeoutPolicy failed to parse: %v\", err)",
          "",
          "[Added Lines]",
          "394:    validCond.AddError(\"RouteError\", \"HeaderMatchConditionsNotValid\",",
          "395:     err.Error())",
          "401:    validCond.AddErrorf(\"RouteError\", \"RequestHeadersPolicyInvalid\",",
          "402:     \"%s on request headers\", err)",
          "408:    validCond.AddErrorf(\"RouteError\", \"ResponseHeaderPolicyInvalid\",",
          "409:     \"%s on response headers\", err)",
          "414:    validCond.AddError(\"RouteError\", \"NoServicesPresent\",",
          "415:     \"route.services must have at least one entry\")",
          "421:    validCond.AddErrorf(\"RouteError\", \"TimeoutPolicyNotValid\",",
          "422:     \"route.timeoutPolicy failed to parse: %s\", err)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "423:   if len(route.GetPrefixReplacements()) > 0 {",
          "424:    if !r.HasPathPrefix() {",
          "426:     return nil",
          "427:    }",
          "431:     return nil",
          "432:    }",
          "",
          "[Removed Lines]",
          "425:     sw.SetInvalid(\"cannot specify prefix replacements without a prefix condition\")",
          "429:    if err := prefixReplacementsAreValid(route.GetPrefixReplacements()); err != nil {",
          "430:     sw.SetInvalid(err.Error())",
          "",
          "[Added Lines]",
          "461:     validCond.AddError(\"PrefixReplaceError\", \"MustHavePrefix\",",
          "462:      \"cannot specify prefix replacements without a prefix condition\")",
          "466:    if reason, err := prefixReplacementsAreValid(route.GetPrefixReplacements()); err != nil {",
          "467:     validCond.AddError(\"PrefixReplaceError\", reason, err.Error())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "460:   for _, service := range route.Services {",
          "461:    if service.Port < 1 || service.Port > 65535 {",
          "463:     return nil",
          "464:    }",
          "465:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
          "466:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "467:    if err != nil {",
          "469:     return nil",
          "470:    }",
          "473:    protocol, err := getProtocol(service, s)",
          "474:    if err != nil {",
          "476:     return nil",
          "477:    }",
          "",
          "[Removed Lines]",
          "462:     sw.SetInvalid(\"service %q: port must be in the range 1-65535\", service.Name)",
          "468:     sw.SetInvalid(\"Spec.Routes unresolved service reference: %s\", err)",
          "475:     sw.SetInvalid(err.Error())",
          "",
          "[Added Lines]",
          "499:     validCond.AddErrorf(\"ServiceError\", \"ServicePortInvalid\",",
          "500:      \"service %q: port must be in the range 1-65535\", service.Name)",
          "506:     validCond.AddErrorf(\"ServiceError\", \"ServiceUnresolvedReference\",",
          "507:      \"Spec.Routes unresolved service reference: %s\", err)",
          "514:     validCond.AddError(\"ServiceError\", \"UnsupportedProtocol\", err.Error())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "482:     uv, err = p.source.LookupUpstreamValidation(service.UpstreamValidation, proxy.Namespace)",
          "483:     if err != nil {",
          "486:      return nil",
          "487:     }",
          "488:    }",
          "490:    reqHP, err := headersPolicyService(service.RequestHeadersPolicy)",
          "491:    if err != nil {",
          "493:     return nil",
          "494:    }",
          "496:    respHP, err := headersPolicyService(service.ResponseHeadersPolicy)",
          "497:    if err != nil {",
          "499:     return nil",
          "500:    }",
          "",
          "[Removed Lines]",
          "484:      sw.SetInvalid(\"Service [%s:%d] TLS upstream validation policy error: %s\",",
          "485:       service.Name, service.Port, err)",
          "492:     sw.SetInvalid(\"%s on a service\", err)",
          "498:     sw.SetInvalid(\"%s on response headers\", err)",
          "",
          "[Added Lines]",
          "523:      validCond.AddErrorf(\"ServiceError\", \"TLSUpstreamValidation\",",
          "524:       \"Service [%s:%d] TLS upstream validation policy error: %s\", service.Name, service.Port, err)",
          "531:     validCond.AddErrorf(\"ServiceError\", \"RequestHeadersPolicyInvalid\",",
          "532:      \"%s on request headers\", err)",
          "538:     validCond.AddErrorf(\"ServiceError\", \"ResponseHeadersPolicyInvalid\",",
          "539:      \"%s on response headers\", err)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "503:    if p.ClientCertificate != nil {",
          "504:     clientCertSecret, err = p.source.LookupSecret(*p.ClientCertificate, validSecret)",
          "505:     if err != nil {",
          "507:      return nil",
          "508:     }",
          "509:    }",
          "",
          "[Removed Lines]",
          "506:      sw.SetInvalid(\"tls.envoy-client-certificate Secret %q is invalid: %s\", p.ClientCertificate, err)",
          "",
          "[Added Lines]",
          "547:      validCond.AddErrorf(\"TLSError\", \"SecretNotValid\",",
          "548:       \"tls.envoy-client-certificate Secret %q is invalid: %s\", p.ClientCertificate, err)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "522:     ClientCertificate:     clientCertSecret,",
          "523:    }",
          "524:    if service.Mirror && r.MirrorPolicy != nil {",
          "526:     return nil",
          "527:    }",
          "528:    if service.Mirror {",
          "",
          "[Removed Lines]",
          "525:     sw.SetInvalid(\"only one service per route may be nominated as mirror\")",
          "",
          "[Added Lines]",
          "567:     validCond.AddError(\"ServiceError\", \"OnlyOneMirror\",",
          "568:      \"only one service per route may be nominated as mirror\")",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "539:  routes = expandPrefixMatches(routes)",
          "542:  return routes",
          "543: }",
          "",
          "[Removed Lines]",
          "541:  sw.SetValid()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "550:  tcpproxy := httpproxy.Spec.TCPProxy",
          "551:  if tcpproxy == nil {",
          "",
          "[Removed Lines]",
          "549: func (p *HTTPProxyProcessor) processHTTPProxyTCPProxy(sw *ObjectStatusWriter, httpproxy *contour_api_v1.HTTPProxy, visited []*contour_api_v1.HTTPProxy, host string) bool {",
          "",
          "[Added Lines]",
          "591: func (p *HTTPProxyProcessor) processHTTPProxyTCPProxy(validCond *contour_api_v1.DetailedCondition, httpproxy *contour_api_v1.HTTPProxy, visited []*contour_api_v1.HTTPProxy, host string) bool {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "563:  }",
          "565:  if len(tcpproxy.Services) > 0 && tcpProxyInclude != nil {",
          "567:   return false",
          "568:  }",
          "",
          "[Removed Lines]",
          "566:   sw.SetInvalid(\"tcpproxy: cannot specify services and include in the same httpproxy\")",
          "",
          "[Added Lines]",
          "608:   validCond.AddError(\"TCPProxyError\", \"NoServicesAndInclude\",",
          "609:    \"cannot specify services and include in the same httpproxy\")",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "573:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
          "574:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "575:    if err != nil {",
          "577:     return false",
          "578:    }",
          "579:    proxy.Clusters = append(proxy.Clusters, &Cluster{",
          "",
          "[Removed Lines]",
          "576:     sw.SetInvalid(\"Spec.TCPProxy unresolved service reference: %s\", err)",
          "",
          "[Added Lines]",
          "619:     validCond.AddErrorf(\"TCPProxyError\", \"UnresolvedServiceRef\",",
          "620:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "592:  if tcpProxyInclude == nil {",
          "595:   return false",
          "596:  }",
          "",
          "[Removed Lines]",
          "594:   sw.SetInvalid(\"tcpproxy: either services or inclusion must be specified\")",
          "",
          "[Added Lines]",
          "638:   validCond.AddError(\"TCPProxyError\", \"NothingDefined\",",
          "639:    \"either services or inclusion must be specified\")",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "604:  m := types.NamespacedName{Name: tcpProxyInclude.Name, Namespace: namespace}",
          "605:  dest, ok := p.source.httpproxies[m]",
          "606:  if !ok {",
          "608:   return false",
          "609:  }",
          "611:  if dest.Spec.VirtualHost != nil {",
          "613:   return false",
          "614:  }",
          "",
          "[Removed Lines]",
          "607:   sw.SetInvalid(\"tcpproxy: include %s/%s not found\", m.Namespace, m.Name)",
          "612:   sw.SetInvalid(\"root httpproxy cannot delegate to another root httpproxy\")",
          "",
          "[Added Lines]",
          "652:   validCond.AddErrorf(\"TCPProxyIncludeError\", \"IncludeNotFound\",",
          "653:    \"include %s/%s not found\", m.Namespace, m.Name)",
          "659:   validCond.AddErrorf(\"TCPProxyIncludeError\", \"RootIncludesRoot\",",
          "660:    \"root httpproxy cannot include another root httpproxy\")",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "624:  for _, hp := range visited {",
          "625:   if dest.Name == hp.Name && dest.Namespace == hp.Namespace {",
          "626:    path = append(path, fmt.Sprintf(\"%s/%s\", dest.Namespace, dest.Name))",
          "628:    return false",
          "629:   }",
          "630:  }",
          "634:  defer commit()",
          "639:  return ok",
          "640: }",
          "",
          "[Removed Lines]",
          "627:    sw.SetInvalid(\"tcpproxy include creates a cycle: %s\", strings.Join(path, \" -> \"))",
          "633:  sw, commit := sw.WithObject(dest)",
          "635:  ok = p.processHTTPProxyTCPProxy(sw, dest, visited, host)",
          "636:  if ok {",
          "637:   sw.SetValid()",
          "638:  }",
          "",
          "[Added Lines]",
          "675:    validCond.AddErrorf(\"TCPProxyIncludeError\", \"IncludeCreatesCycle\",",
          "676:     \"include creates a cycle: %s\", strings.Join(path, \" -> \"))",
          "682:  inc, commit := p.dag.StatusCache.ProxyAccessor(dest)",
          "683:  incValidCond := inc.ConditionFor(status.ValidCondition)",
          "685:  ok = p.processHTTPProxyTCPProxy(incValidCond, dest, visited, host)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "667:    sort.Strings(conflicting) // sort for test stability",
          "668:    msg := fmt.Sprintf(\"fqdn %q is used in multiple HTTPProxies: %s\", fqdn, strings.Join(conflicting, \", \"))",
          "669:    for _, proxy := range proxies {",
          "672:     commit()",
          "673:    }",
          "674:   }",
          "",
          "[Removed Lines]",
          "670:     sw, commit := p.dag.WithObject(proxy)",
          "671:     sw.WithValue(\"vhost\", fqdn).SetInvalid(msg)",
          "",
          "[Added Lines]",
          "717:     pa, commit := p.dag.StatusCache.ProxyAccessor(proxy)",
          "718:     pa.Vhost = fqdn",
          "719:     pa.ConditionFor(status.ValidCondition).AddError(\"VirtualHostError\",",
          "720:      \"DuplicateVhost\",",
          "721:      msg)",
          "",
          "---------------"
        ],
        "internal/dag/policy.go||internal/dag/policy.go": [
          "File: internal/dag/policy.go -> internal/dag/policy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:  return b",
          "257: }",
          "260:  prefixes := map[string]bool{}",
          "262:  for _, r := range replacements {",
          "263:   if prefixes[r.Prefix] {",
          "264:    if len(r.Prefix) > 0 {",
          "267:    }",
          "270:   }",
          "272:   prefixes[r.Prefix] = true",
          "273:  }",
          "276: }",
          "",
          "[Removed Lines]",
          "259: func prefixReplacementsAreValid(replacements []contour_api_v1.ReplacePrefix) error {",
          "266:     return fmt.Errorf(\"duplicate replacement prefix '%s'\", r.Prefix)",
          "269:    return fmt.Errorf(\"ambiguous prefix replacement\")",
          "275:  return nil",
          "",
          "[Added Lines]",
          "259: func prefixReplacementsAreValid(replacements []contour_api_v1.ReplacePrefix) (string, error) {",
          "266:     return \"DuplicateReplacement\", fmt.Errorf(\"duplicate replacement prefix '%s'\", r.Prefix)",
          "269:    return \"AmbiguousReplacement\", fmt.Errorf(\"ambiguous prefix replacement\")",
          "275:  return \"\", nil",
          "",
          "---------------"
        ],
        "internal/dag/status.go||internal/dag/status.go": [
          "File: internal/dag/status.go -> internal/dag/status.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "20:  \"github.com/projectcontour/contour/internal/k8s\"",
          "21:  \"k8s.io/apimachinery/pkg/types\"",
          "22: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: }",
          "85: func (osw *ObjectStatusWriter) SetInvalid(format string, args ...interface{}) {",
          "87: }",
          "89: func (osw *ObjectStatusWriter) SetValid() {",
          "90:  switch osw.obj.(type) {",
          "91:  case *contour_api_v1.HTTPProxy:",
          "93:  default:",
          "95:  }",
          "",
          "[Removed Lines]",
          "86:  osw.WithValue(\"description\", fmt.Sprintf(format, args...)).WithValue(\"status\", k8s.StatusInvalid)",
          "92:   osw.WithValue(\"description\", \"valid HTTPProxy\").WithValue(\"status\", k8s.StatusValid)",
          "",
          "[Added Lines]",
          "87:  osw.WithValue(\"description\", fmt.Sprintf(format, args...)).WithValue(\"status\", string(status.ProxyStatusInvalid))",
          "93:   osw.WithValue(\"description\", \"valid HTTPProxy\").WithValue(\"status\", string(status.ProxyStatusValid))",
          "",
          "---------------"
        ],
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: package dag",
          "16: import (",
          "18:  \"testing\"",
          "20:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "21:  \"github.com/projectcontour/contour/internal/fixture\"",
          "23:  \"github.com/stretchr/testify/assert\"",
          "24:  v1 \"k8s.io/api/core/v1\"",
          "25:  \"k8s.io/api/networking/v1beta1\"",
          "",
          "[Removed Lines]",
          "17:  \"fmt\"",
          "22:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  type testcase struct {",
          "34:   objs                []interface{}",
          "35:   fallbackCertificate *types.NamespacedName",
          "37:  }",
          "40:   t.Run(desc, func(t *testing.T) {",
          "41:    builder := Builder{",
          "42:     Source: KubernetesCache{",
          "43:      RootNamespaces: []string{\"roots\", \"marketing\"},",
          "",
          "[Removed Lines]",
          "36:   want                map[types.NamespacedName]Status",
          "39:  run := func(desc string, tc testcase) {",
          "",
          "[Added Lines]",
          "34:   want                map[types.NamespacedName]contour_api_v1.DetailedCondition",
          "37:  run := func(t *testing.T, desc string, tc testcase) {",
          "38:   t.Helper()",
          "40:    t.Helper()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     builder.Source.Insert(o)",
          "58:    }",
          "59:    dag := builder.Build()",
          "61:    assert.Equal(t, tc.want, got)",
          "62:   })",
          "63:  }",
          "68:  proxyNoFQDN := &contour_api_v1.HTTPProxy{",
          "69:   ObjectMeta: metav1.ObjectMeta{",
          "72:   },",
          "73:   Spec: contour_api_v1.HTTPProxySpec{",
          "74:    VirtualHost: &contour_api_v1.VirtualHost{},",
          "",
          "[Removed Lines]",
          "60:    got := dag.Statuses()",
          "70:    Namespace: \"roots\",",
          "71:    Name:      \"parent\",",
          "",
          "[Added Lines]",
          "60:    t.Logf(\"%#v\\n\", dag.StatusCache)",
          "61:    got := dag.GetProxyStatusesTesting()",
          "69:    Namespace:  \"roots\",",
          "70:    Name:       \"parent\",",
          "71:    Generation: 23,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:  }",
          "89:   objs: []interface{}{proxyNoFQDN},",
          "92:   },",
          "93:  })",
          "96:  proxyValidHomeService := &contour_api_v1.HTTPProxy{",
          "97:   ObjectMeta: metav1.ObjectMeta{",
          "100:   },",
          "101:   Spec: contour_api_v1.HTTPProxySpec{",
          "102:    VirtualHost: &contour_api_v1.VirtualHost{",
          "",
          "[Removed Lines]",
          "88:  run(\"root proxy does not specify FQDN\", testcase{",
          "90:   want: map[types.NamespacedName]Status{",
          "91:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: {Object: proxyNoFQDN, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "98:    Namespace: \"roots\",",
          "99:    Name:      \"example\",",
          "",
          "[Added Lines]",
          "88:  run(t, \"root proxy does not specify FQDN\", testcase{",
          "90:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "91:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: fixture.NewValidCondition().WithGeneration(proxyNoFQDN.Generation).",
          "92:     WithError(\"VirtualHostError\", \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "99:    Namespace:  \"roots\",",
          "100:    Name:       \"example\",",
          "101:    Generation: 24,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:   },",
          "115:  }",
          "118:   objs: []interface{}{proxyValidHomeService, fixture.ServiceRootsHome},",
          "121:   },",
          "122:  })",
          "125:  proxyMultiIncludeOneInvalid := &contour_api_v1.HTTPProxy{",
          "126:   ObjectMeta: metav1.ObjectMeta{",
          "129:   },",
          "130:   Spec: contour_api_v1.HTTPProxySpec{",
          "131:    VirtualHost: &contour_api_v1.VirtualHost{",
          "",
          "[Removed Lines]",
          "117:  run(\"valid proxy\", testcase{",
          "119:   want: map[types.NamespacedName]Status{",
          "120:    {Name: proxyValidHomeService.Name, Namespace: proxyValidHomeService.Namespace}: {Object: proxyValidHomeService, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "127:    Namespace: \"roots\",",
          "128:    Name:      \"parent\",",
          "",
          "[Added Lines]",
          "119:  run(t, \"valid proxy\", testcase{",
          "121:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "122:    {Name: proxyValidHomeService.Name, Namespace: proxyValidHomeService.Namespace}: fixture.NewValidCondition().",
          "123:     WithGeneration(proxyValidHomeService.Generation).",
          "124:     Valid(),",
          "131:    Namespace:  \"roots\",",
          "132:    Name:       \"parent\",",
          "133:    Generation: 45,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:  proxyChildValidFoo2 := &contour_api_v1.HTTPProxy{",
          "167:   ObjectMeta: metav1.ObjectMeta{",
          "170:   },",
          "171:   Spec: contour_api_v1.HTTPProxySpec{",
          "172:    Routes: []contour_api_v1.Route{{",
          "",
          "[Removed Lines]",
          "168:    Namespace: \"roots\",",
          "169:    Name:      \"validChild\",",
          "",
          "[Added Lines]",
          "173:    Namespace:  \"roots\",",
          "174:    Name:       \"validChild\",",
          "175:    Generation: 1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:   },",
          "194:  }",
          "197:   objs: []interface{}{proxyMultiIncludeOneInvalid, proxyChildValidFoo2, proxyChildInvalidBadPort, fixture.ServiceRootsFoo2, fixture.ServiceRootsFoo3InvalidPort},",
          "202:   },",
          "203:  })",
          "206:   objs: []interface{}{proxyNoFQDN, proxyChildValidFoo2, proxyIncludeValidChild, fixture.ServiceRootsKuard, fixture.ServiceRootsFoo2},",
          "211:   },",
          "212:  })",
          "",
          "[Removed Lines]",
          "196:  run(\"proxy has multiple includes, one is invalid\", testcase{",
          "198:   want: map[types.NamespacedName]Status{",
          "199:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}:                 {Object: proxyChildValidFoo2, Status: \"valid\", Description: \"valid HTTPProxy\"},",
          "200:    {Name: proxyChildInvalidBadPort.Name, Namespace: proxyChildInvalidBadPort.Namespace}:       {Object: proxyChildInvalidBadPort, Status: \"invalid\", Description: `service \"foo3\": port must be in the range 1-65535`},",
          "201:    {Name: proxyMultiIncludeOneInvalid.Name, Namespace: proxyMultiIncludeOneInvalid.Namespace}: {Object: proxyMultiIncludeOneInvalid, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "205:  run(\"multi-parent child is not orphaned when one of the parents is invalid\", testcase{",
          "207:   want: map[types.NamespacedName]Status{",
          "208:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}:                       {Object: proxyNoFQDN, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "209:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}:       {Object: proxyChildValidFoo2, Status: \"valid\", Description: \"valid HTTPProxy\"},",
          "210:    {Name: proxyIncludeValidChild.Name, Namespace: proxyIncludeValidChild.Namespace}: {Object: proxyIncludeValidChild, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "",
          "[Added Lines]",
          "202:  run(t, \"proxy has multiple includes, one is invalid\", testcase{",
          "204:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "205:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}: fixture.NewValidCondition().",
          "206:     WithGeneration(proxyChildValidFoo2.Generation).",
          "207:     Valid(),",
          "208:    {Name: proxyChildInvalidBadPort.Name, Namespace: proxyChildInvalidBadPort.Namespace}: fixture.NewValidCondition().",
          "209:     WithGeneration(proxyChildInvalidBadPort.Generation).",
          "210:     WithError(\"ServiceError\", \"ServicePortInvalid\", `service \"foo3\": port must be in the range 1-65535`),",
          "211:    {Name: proxyMultiIncludeOneInvalid.Name, Namespace: proxyMultiIncludeOneInvalid.Namespace}: fixture.NewValidCondition().",
          "212:     WithGeneration(proxyMultiIncludeOneInvalid.Generation).",
          "213:     Valid(),",
          "217:  run(t, \"multi-parent child is not orphaned when one of the parents is invalid\", testcase{",
          "219:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "220:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: fixture.NewValidCondition().",
          "221:     WithGeneration(proxyNoFQDN.Generation).",
          "222:     WithError(\"VirtualHostError\", \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "223:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}: fixture.NewValidCondition().",
          "224:     WithGeneration(proxyChildValidFoo2.Generation).",
          "225:     Valid(),",
          "226:    {Name: proxyIncludeValidChild.Name, Namespace: proxyIncludeValidChild.Namespace}: fixture.NewValidCondition().",
          "227:     WithGeneration(proxyIncludeValidChild.Generation).",
          "228:     Valid(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "250:  }",
          "254:   objs: []interface{}{",
          "255:    fixture.SecretRootsCert, fixture.ServiceRootsNginx, ingressSharedService, proxyTCPSharedService,",
          "256:   },",
          "264:   },",
          "265:  })",
          "",
          "[Removed Lines]",
          "253:  run(\"service shared across ingress and httpproxy tcpproxy\", testcase{",
          "257:   want: map[types.NamespacedName]Status{",
          "258:    {Name: proxyTCPSharedService.Name, Namespace: proxyTCPSharedService.Namespace}: {",
          "259:     Object:      proxyTCPSharedService,",
          "260:     Status:      k8s.StatusValid,",
          "261:     Description: `valid HTTPProxy`,",
          "262:     Vhost:       \"example.com\",",
          "263:    },",
          "",
          "[Added Lines]",
          "271:  run(t, \"service shared across ingress and httpproxy tcpproxy\", testcase{",
          "275:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "276:    {Name: proxyTCPSharedService.Name, Namespace: proxyTCPSharedService.Namespace}: fixture.NewValidCondition().",
          "277:     WithGeneration(proxyTCPSharedService.Generation).",
          "278:     Valid(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "286:  }",
          "290:   objs: []interface{}{",
          "291:    fixture.SecretProjectContourCert,",
          "292:    proxyDelegatedTCPTLS,",
          "293:   },",
          "301:   },",
          "302:  })",
          "",
          "[Removed Lines]",
          "289:  run(\"tcpproxy with tls delegation failure\", testcase{",
          "294:   want: map[types.NamespacedName]Status{",
          "295:    {Name: proxyDelegatedTCPTLS.Name, Namespace: proxyDelegatedTCPTLS.Namespace}: {",
          "296:     Object:      proxyDelegatedTCPTLS,",
          "297:     Status:      k8s.StatusInvalid,",
          "298:     Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(fixture.SecretProjectContourCert)),",
          "299:     Vhost:       proxyDelegatedTCPTLS.Spec.VirtualHost.Fqdn,",
          "300:    },",
          "",
          "[Added Lines]",
          "304:  run(t, \"tcpproxy with tls delegation failure\", testcase{",
          "309:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "310:    {Name: proxyDelegatedTCPTLS.Name, Namespace: proxyDelegatedTCPTLS.Namespace}: fixture.NewValidCondition().",
          "311:     WithGeneration(proxyDelegatedTCPTLS.Generation).",
          "312:     WithError(\"TLSError\", \"DelegationNotPermitted\", `Spec.VirtualHost.TLS Secret \"projectcontour/default-ssl-cert\" certificate delegation not permitted`),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "323:  }",
          "327:   objs: []interface{}{",
          "328:    fixture.SecretProjectContourCert,",
          "329:    proxyDelegatedTLS,",
          "330:   },",
          "338:   },",
          "339:  })",
          "",
          "[Removed Lines]",
          "326:  run(\"routes with tls delegation failure\", testcase{",
          "331:   want: map[types.NamespacedName]Status{",
          "332:    {Name: proxyDelegatedTLS.Name, Namespace: proxyDelegatedTLS.Namespace}: {",
          "333:     Object:      proxyDelegatedTLS,",
          "334:     Status:      k8s.StatusInvalid,",
          "335:     Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(fixture.SecretProjectContourCert)),",
          "336:     Vhost:       proxyDelegatedTLS.Spec.VirtualHost.Fqdn,",
          "337:    },",
          "",
          "[Added Lines]",
          "338:  run(t, \"routes with tls delegation failure\", testcase{",
          "343:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "344:    {Name: proxyDelegatedTLS.Name, Namespace: proxyDelegatedTLS.Namespace}: fixture.NewValidCondition().",
          "345:     WithGeneration(proxyDelegatedTCPTLS.Generation).",
          "346:     WithError(\"TLSError\", \"DelegationNotPermitted\", `Spec.VirtualHost.TLS Secret \"projectcontour/default-ssl-cert\" certificate delegation not permitted`),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "389:  }",
          "393:   objs: []interface{}{",
          "394:    serviceTLSPassthrough,",
          "395:    proxyPassthroughProxyNonSecure,",
          "396:   },",
          "404:   },",
          "405:  })",
          "",
          "[Removed Lines]",
          "392:  run(\"non tls routes can be combined with tcp proxy\", testcase{",
          "397:   want: map[types.NamespacedName]Status{",
          "398:    {Name: proxyPassthroughProxyNonSecure.Name, Namespace: proxyPassthroughProxyNonSecure.Namespace}: {",
          "399:     Object:      proxyPassthroughProxyNonSecure,",
          "400:     Status:      k8s.StatusValid,",
          "401:     Description: `valid HTTPProxy`,",
          "402:     Vhost:       proxyPassthroughProxyNonSecure.Spec.VirtualHost.Fqdn,",
          "403:    },",
          "",
          "[Added Lines]",
          "401:  run(t, \"non tls routes can be combined with tcp proxy\", testcase{",
          "406:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "407:    {Name: proxyPassthroughProxyNonSecure.Name, Namespace: proxyPassthroughProxyNonSecure.Namespace}: fixture.NewValidCondition().",
          "408:     WithGeneration(proxyPassthroughProxyNonSecure.Generation).",
          "409:     Valid(),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "451:   },",
          "452:  }",
          "455:   objs: []interface{}{",
          "456:    fixture.ServiceRootsKuard, proxyMultipleIncludersSite1, proxyMultipleIncludersSite2, proxyMultiIncludeChild,",
          "457:   },",
          "476:   },",
          "477:  })",
          "",
          "[Removed Lines]",
          "454:  run(\"two root httpproxies with different hostnames delegated to the same object are valid\", testcase{",
          "458:   want: map[types.NamespacedName]Status{",
          "459:    {Name: proxyMultipleIncludersSite1.Name, Namespace: proxyMultipleIncludersSite1.Namespace}: {",
          "460:     Object:      proxyMultipleIncludersSite1,",
          "461:     Status:      \"valid\",",
          "462:     Description: \"valid HTTPProxy\",",
          "463:     Vhost:       \"site1.com\",",
          "464:    },",
          "465:    {Name: proxyMultipleIncludersSite2.Name, Namespace: proxyMultipleIncludersSite2.Namespace}: {",
          "466:     Object:      proxyMultipleIncludersSite2,",
          "467:     Status:      \"valid\",",
          "468:     Description: \"valid HTTPProxy\",",
          "469:     Vhost:       \"site2.com\",",
          "470:    },",
          "471:    {Name: proxyMultiIncludeChild.Name, Namespace: proxyMultiIncludeChild.Namespace}: {",
          "472:     Object:      proxyMultiIncludeChild,",
          "473:     Status:      \"valid\",",
          "474:     Description: \"valid HTTPProxy\",",
          "475:    },",
          "",
          "[Added Lines]",
          "460:  run(t, \"two root httpproxies with different hostnames delegated to the same object are valid\", testcase{",
          "464:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "465:    {Name: proxyMultipleIncludersSite1.Name, Namespace: proxyMultipleIncludersSite1.Namespace}: fixture.NewValidCondition().",
          "466:     WithGeneration(proxyMultipleIncludersSite1.Generation).",
          "467:     Valid(),",
          "468:    {Name: proxyMultipleIncludersSite2.Name, Namespace: proxyMultipleIncludersSite2.Namespace}: fixture.NewValidCondition().",
          "469:     WithGeneration(proxyMultipleIncludersSite2.Generation).",
          "470:     Valid(),",
          "471:    {Name: proxyMultiIncludeChild.Name, Namespace: proxyMultiIncludeChild.Namespace}: fixture.NewValidCondition().",
          "472:     WithGeneration(proxyMultiIncludeChild.Generation).",
          "473:     Valid(),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "498:   },",
          "499:  }",
          "502:   objs: []interface{}{proxyInvalidNegativePortHomeService},",
          "505:   },",
          "506:  })",
          "",
          "[Removed Lines]",
          "501:  run(\"invalid port in service\", testcase{",
          "503:   want: map[types.NamespacedName]Status{",
          "504:    {Name: proxyInvalidNegativePortHomeService.Name, Namespace: proxyInvalidNegativePortHomeService.Namespace}: {Object: proxyInvalidNegativePortHomeService, Status: \"invalid\", Description: `service \"home\": port must be in the range 1-65535`, Vhost: \"example.com\"},",
          "",
          "[Added Lines]",
          "499:  run(t, \"invalid port in service\", testcase{",
          "501:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "502:    {Name: proxyInvalidNegativePortHomeService.Name, Namespace: proxyInvalidNegativePortHomeService.Namespace}: fixture.NewValidCondition().",
          "503:     WithGeneration(proxyInvalidNegativePortHomeService.Generation).",
          "504:     WithError(\"ServiceError\", \"ServicePortInvalid\", `service \"home\": port must be in the range 1-65535`),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "527:   },",
          "528:  }",
          "531:   objs: []interface{}{proxyInvalidOutsideRootNamespace},",
          "534:   },",
          "535:  })",
          "",
          "[Removed Lines]",
          "530:  run(\"root proxy outside of roots namespace\", testcase{",
          "532:   want: map[types.NamespacedName]Status{",
          "533:    {Name: proxyInvalidOutsideRootNamespace.Name, Namespace: proxyInvalidOutsideRootNamespace.Namespace}: {Object: proxyInvalidOutsideRootNamespace, Status: \"invalid\", Description: \"root HTTPProxy cannot be defined in this namespace\"},",
          "",
          "[Added Lines]",
          "530:  run(t, \"root proxy outside of roots namespace\", testcase{",
          "532:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "533:    {Name: proxyInvalidOutsideRootNamespace.Name, Namespace: proxyInvalidOutsideRootNamespace.Namespace}: fixture.NewValidCondition().",
          "534:     WithGeneration(proxyInvalidNegativePortHomeService.Generation).",
          "535:     WithError(\"RootNamespaceError\", \"RootProxyNotAllowedInNamespace\", \"root HTTPProxy cannot be defined in this namespace\"),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "560:   },",
          "561:  }",
          "564:   objs: []interface{}{proxyInvalidIncludeCycle, fixture.ServiceRootsKuard},",
          "572:   },",
          "573:  })",
          "",
          "[Removed Lines]",
          "563:  run(\"proxy self-edge produces a cycle\", testcase{",
          "565:   want: map[types.NamespacedName]Status{",
          "566:    {Name: proxyInvalidIncludeCycle.Name, Namespace: proxyInvalidIncludeCycle.Namespace}: {",
          "567:     Object:      proxyInvalidIncludeCycle,",
          "568:     Status:      \"invalid\",",
          "569:     Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "570:     Vhost:       \"example.com\",",
          "571:    },",
          "",
          "[Added Lines]",
          "565:  run(t, \"proxy self-edge produces a cycle\", testcase{",
          "567:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "568:    {Name: proxyInvalidIncludeCycle.Name, Namespace: proxyInvalidIncludeCycle.Namespace}: fixture.NewValidCondition().",
          "569:     WithGeneration(proxyInvalidIncludeCycle.Generation).",
          "570:     WithError(\"IncludeError\", \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "608:   },",
          "609:  }",
          "612:   objs: []interface{}{proxyIncludesProxyWithIncludeCycle, proxyIncludedChildInvalidIncludeCycle},",
          "625:   },",
          "626:  })",
          "629:   objs: []interface{}{proxyIncludedChildInvalidIncludeCycle},",
          "632:   },",
          "633:  })",
          "",
          "[Removed Lines]",
          "611:  run(\"proxy child delegates to parent, producing a cycle\", testcase{",
          "613:   want: map[types.NamespacedName]Status{",
          "614:    {Name: proxyIncludesProxyWithIncludeCycle.Name, Namespace: proxyIncludesProxyWithIncludeCycle.Namespace}: {",
          "615:     Object:      proxyIncludesProxyWithIncludeCycle,",
          "616:     Status:      \"valid\",",
          "617:     Description: \"valid HTTPProxy\",",
          "618:     Vhost:       \"example.com\",",
          "619:    },",
          "620:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: {",
          "621:     Object:      proxyIncludedChildInvalidIncludeCycle,",
          "622:     Status:      \"invalid\",",
          "623:     Description: \"include creates a delegation cycle: roots/parent -> roots/child -> roots/child\",",
          "624:    },",
          "628:  run(\"proxy orphaned route\", testcase{",
          "630:   want: map[types.NamespacedName]Status{",
          "631:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: {Object: proxyIncludedChildInvalidIncludeCycle, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\"},",
          "",
          "[Added Lines]",
          "610:  run(t, \"proxy child delegates to itself, producing a cycle\", testcase{",
          "612:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "613:    {Name: proxyIncludesProxyWithIncludeCycle.Name, Namespace: proxyIncludesProxyWithIncludeCycle.Namespace}: fixture.NewValidCondition().",
          "614:     WithGeneration(proxyIncludesProxyWithIncludeCycle.Generation).Valid(),",
          "615:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: fixture.NewValidCondition().",
          "616:     WithGeneration(proxyIncludedChildInvalidIncludeCycle.Generation).",
          "617:     WithError(\"IncludeError\", \"IncludeCreatesCycle\", \"include creates an include cycle: roots/parent -> roots/child -> roots/child\"),",
          "621:  run(t, \"proxy orphaned route\", testcase{",
          "623:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "624:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: fixture.NewValidCondition().",
          "625:     WithGeneration(proxyIncludedChildInvalidIncludeCycle.Generation).",
          "626:     Orphaned(),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "665:   },",
          "666:  }",
          "669:   objs: []interface{}{proxyNotRootIncludeRootProxy, proxyIncludedChildValid},",
          "673:   },",
          "674:  })",
          "",
          "[Removed Lines]",
          "668:  run(\"proxy invalid parent orphans child\", testcase{",
          "670:   want: map[types.NamespacedName]Status{",
          "671:    {Name: proxyNotRootIncludeRootProxy.Name, Namespace: proxyNotRootIncludeRootProxy.Namespace}: {Object: proxyNotRootIncludeRootProxy, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "672:    {Name: proxyIncludedChildValid.Name, Namespace: proxyIncludedChildValid.Namespace}:           {Object: proxyIncludedChildValid, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\"},",
          "",
          "[Added Lines]",
          "663:  run(t, \"proxy invalid parent orphans child\", testcase{",
          "665:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "666:    {Name: proxyNotRootIncludeRootProxy.Name, Namespace: proxyNotRootIncludeRootProxy.Namespace}: fixture.NewValidCondition().",
          "667:     WithGeneration(proxyNotRootIncludeRootProxy.Generation).",
          "668:     WithError(\"VirtualHostError\", \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "669:    {Name: proxyIncludedChildValid.Name, Namespace: proxyIncludedChildValid.Namespace}: fixture.NewValidCondition().",
          "670:     WithGeneration(proxyIncludedChildValid.Generation).",
          "671:     Orphaned(),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "695:   },",
          "696:  }",
          "699:   objs: []interface{}{proxyWildCardFQDN},",
          "702:   },",
          "703:  })",
          "",
          "[Removed Lines]",
          "698:  run(\"proxy invalid FQDN contains wildcard\", testcase{",
          "700:   want: map[types.NamespacedName]Status{",
          "701:    {Name: proxyWildCardFQDN.Name, Namespace: proxyWildCardFQDN.Namespace}: {Object: proxyWildCardFQDN, Status: \"invalid\", Description: `Spec.VirtualHost.Fqdn \"example.*.com\" cannot use wildcards`, Vhost: \"example.*.com\"},",
          "",
          "[Added Lines]",
          "697:  run(t, \"proxy invalid FQDN contains wildcard\", testcase{",
          "699:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "700:    {Name: proxyWildCardFQDN.Name, Namespace: proxyWildCardFQDN.Namespace}: fixture.NewValidCondition().",
          "701:     WithGeneration(proxyWildCardFQDN.Generation).",
          "702:     WithError(\"VirtualHostError\", \"WildCardNotAllowed\", `Spec.VirtualHost.Fqdn \"example.*.com\" cannot use wildcards`),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "724:   },",
          "725:  }",
          "728:   objs: []interface{}{proxyInvalidServiceInvalid},",
          "736:   },",
          "737:  })",
          "",
          "[Removed Lines]",
          "727:  run(\"proxy missing service is invalid\", testcase{",
          "729:   want: map[types.NamespacedName]Status{",
          "730:    {Name: proxyInvalidServiceInvalid.Name, Namespace: proxyInvalidServiceInvalid.Namespace}: {",
          "731:     Object:      proxyInvalidServiceInvalid,",
          "732:     Status:      \"invalid\",",
          "733:     Description: `Spec.Routes unresolved service reference: service \"roots/invalid\" not found`,",
          "734:     Vhost:       proxyInvalidServiceInvalid.Spec.VirtualHost.Fqdn,",
          "735:    },",
          "",
          "[Added Lines]",
          "728:  run(t, \"proxy missing service is invalid\", testcase{",
          "730:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "731:    {Name: proxyInvalidServiceInvalid.Name, Namespace: proxyInvalidServiceInvalid.Namespace}: fixture.NewValidCondition().",
          "732:     WithGeneration(proxyInvalidServiceInvalid.Generation).",
          "733:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: service \"roots/invalid\" not found`),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "758:   },",
          "759:  }",
          "762:   objs: []interface{}{proxyInvalidServicePortInvalid, fixture.ServiceRootsHome},",
          "770:   },",
          "771:  })",
          "",
          "[Removed Lines]",
          "761:  run(\"proxy with service missing port is invalid\", testcase{",
          "763:   want: map[types.NamespacedName]Status{",
          "764:    {Name: proxyInvalidServicePortInvalid.Name, Namespace: proxyInvalidServicePortInvalid.Namespace}: {",
          "765:     Object:      proxyInvalidServicePortInvalid,",
          "766:     Status:      \"invalid\",",
          "767:     Description: `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/home\" not matched`,",
          "768:     Vhost:       proxyInvalidServicePortInvalid.Spec.VirtualHost.Fqdn,",
          "769:    },",
          "",
          "[Added Lines]",
          "759:  run(t, \"proxy with service missing port is invalid\", testcase{",
          "761:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "762:    {Name: proxyInvalidServicePortInvalid.Name, Namespace: proxyInvalidServicePortInvalid.Namespace}: fixture.NewValidCondition().",
          "763:     WithGeneration(proxyInvalidServiceInvalid.Generation).",
          "764:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/home\" not matched`),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "809:   },",
          "810:  }",
          "813:   objs: []interface{}{proxyValidExampleCom, proxyValidReuseExampleCom},",
          "827:   },",
          "828:  })",
          "",
          "[Removed Lines]",
          "812:  run(\"conflicting proxies due to fqdn reuse\", testcase{",
          "814:   want: map[types.NamespacedName]Status{",
          "815:    {Name: proxyValidExampleCom.Name, Namespace: proxyValidExampleCom.Namespace}: {",
          "816:     Object:      proxyValidExampleCom,",
          "817:     Status:      k8s.StatusInvalid,",
          "818:     Description: `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`,",
          "819:     Vhost:       \"example.com\",",
          "820:    },",
          "821:    {Name: proxyValidReuseExampleCom.Name, Namespace: proxyValidReuseExampleCom.Namespace}: {",
          "822:     Object:      proxyValidReuseExampleCom,",
          "823:     Status:      k8s.StatusInvalid,",
          "824:     Description: `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`,",
          "825:     Vhost:       \"example.com\",",
          "826:    },",
          "",
          "[Added Lines]",
          "807:  run(t, \"conflicting proxies due to fqdn reuse\", testcase{",
          "809:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "810:    {Name: proxyValidExampleCom.Name, Namespace: proxyValidExampleCom.Namespace}: fixture.NewValidCondition().",
          "811:     WithGeneration(proxyValidExampleCom.Generation).",
          "812:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`),",
          "813:    {Name: proxyValidReuseExampleCom.Name, Namespace: proxyValidReuseExampleCom.Namespace}: fixture.NewValidCondition().",
          "814:     WithGeneration(proxyValidReuseExampleCom.Generation).",
          "815:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "870:   },",
          "871:  }",
          "874:   objs: []interface{}{proxyRootIncludesRoot, proxyRootIncludedByRoot},",
          "888:   },",
          "889:  })",
          "",
          "[Removed Lines]",
          "873:  run(\"root proxy including another root\", testcase{",
          "875:   want: map[types.NamespacedName]Status{",
          "876:    {Name: proxyRootIncludesRoot.Name, Namespace: proxyRootIncludesRoot.Namespace}: {",
          "877:     Object:      proxyRootIncludesRoot,",
          "878:     Status:      k8s.StatusInvalid,",
          "879:     Description: `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`,",
          "880:     Vhost:       \"blog.containersteve.com\",",
          "881:    },",
          "882:    {Name: proxyRootIncludedByRoot.Name, Namespace: proxyRootIncludedByRoot.Namespace}: {",
          "883:     Object:      proxyRootIncludedByRoot,",
          "884:     Status:      k8s.StatusInvalid,",
          "885:     Description: `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`,",
          "886:     Vhost:       \"blog.containersteve.com\",",
          "887:    },",
          "",
          "[Added Lines]",
          "862:  run(t, \"root proxy including another root\", testcase{",
          "864:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "865:    {Name: proxyRootIncludesRoot.Name, Namespace: proxyRootIncludesRoot.Namespace}: fixture.NewValidCondition().",
          "866:     WithGeneration(proxyRootIncludesRoot.Generation).",
          "867:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`),",
          "868:    {Name: proxyRootIncludedByRoot.Name, Namespace: proxyRootIncludedByRoot.Namespace}: fixture.NewValidCondition().",
          "869:     WithGeneration(proxyRootIncludedByRoot.Generation).",
          "870:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "925:   },",
          "926:  }",
          "929:   objs: []interface{}{proxyIncludesRootDifferentFQDN, proxyRootIncludedByRootDiffFQDN, fixture.ServiceMarketingGreen},",
          "943:   },",
          "944:  })",
          "",
          "[Removed Lines]",
          "928:  run(\"root proxy including another root w/ different hostname\", testcase{",
          "930:   want: map[types.NamespacedName]Status{",
          "931:    {Name: proxyIncludesRootDifferentFQDN.Name, Namespace: proxyIncludesRootDifferentFQDN.Namespace}: {",
          "932:     Object:      proxyIncludesRootDifferentFQDN,",
          "933:     Status:      k8s.StatusInvalid,",
          "934:     Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "935:     Vhost:       \"blog.containersteve.com\",",
          "936:    },",
          "937:    {Name: proxyRootIncludedByRootDiffFQDN.Name, Namespace: proxyRootIncludedByRootDiffFQDN.Namespace}: {",
          "938:     Object:      proxyRootIncludedByRootDiffFQDN,",
          "939:     Status:      k8s.StatusValid,",
          "940:     Description: `valid HTTPProxy`,",
          "941:     Vhost:       \"www.containersteve.com\",",
          "942:    },",
          "",
          "[Added Lines]",
          "911:  run(t, \"root proxy including another root w/ different hostname\", testcase{",
          "913:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "914:    {Name: proxyIncludesRootDifferentFQDN.Name, Namespace: proxyIncludesRootDifferentFQDN.Namespace}: fixture.NewValidCondition().",
          "915:     WithGeneration(proxyIncludesRootDifferentFQDN.Generation).",
          "916:     WithError(\"IncludeError\", \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "917:    {Name: proxyRootIncludedByRootDiffFQDN.Name, Namespace: proxyRootIncludedByRootDiffFQDN.Namespace}: fixture.NewValidCondition().",
          "918:     WithGeneration(proxyRootIncludedByRootDiffFQDN.Generation).",
          "919:     Valid(),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "977:   },",
          "978:  }",
          "981:   objs: []interface{}{proxyValidIncludeBlogMarketing, proxyRootValidIncludesBlogMarketing, fixture.ServiceRootsKuard, fixture.ServiceMarketingGreen},",
          "994:   },",
          "995:  })",
          "",
          "[Removed Lines]",
          "980:  run(\"proxy includes another\", testcase{",
          "982:   want: map[types.NamespacedName]Status{",
          "983:    {Name: proxyValidIncludeBlogMarketing.Name, Namespace: proxyValidIncludeBlogMarketing.Namespace}: {",
          "984:     Object:      proxyValidIncludeBlogMarketing,",
          "985:     Status:      \"valid\",",
          "986:     Description: \"valid HTTPProxy\",",
          "987:    },",
          "988:    {Name: proxyRootValidIncludesBlogMarketing.Name, Namespace: proxyRootValidIncludesBlogMarketing.Namespace}: {",
          "989:     Object:      proxyRootValidIncludesBlogMarketing,",
          "990:     Status:      \"valid\",",
          "991:     Description: \"valid HTTPProxy\",",
          "992:     Vhost:       \"example.com\",",
          "993:    },",
          "",
          "[Added Lines]",
          "957:  run(t, \"proxy includes another\", testcase{",
          "959:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "960:    {Name: proxyValidIncludeBlogMarketing.Name, Namespace: proxyValidIncludeBlogMarketing.Namespace}: fixture.NewValidCondition().",
          "961:     WithGeneration(proxyValidIncludeBlogMarketing.Generation).",
          "962:     Valid(),",
          "963:    {Name: proxyRootValidIncludesBlogMarketing.Name, Namespace: proxyRootValidIncludesBlogMarketing.Namespace}: fixture.NewValidCondition().",
          "964:     WithGeneration(proxyRootValidIncludesBlogMarketing.Generation).",
          "965:     Valid(),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1019:   },",
          "1020:  }",
          "1023:   objs: []interface{}{proxyValidWithMirror, fixture.ServiceRootsKuard},",
          "1031:   },",
          "1032:  })",
          "",
          "[Removed Lines]",
          "1022:  run(\"proxy with mirror\", testcase{",
          "1024:   want: map[types.NamespacedName]Status{",
          "1025:    {Name: proxyValidWithMirror.Name, Namespace: proxyValidWithMirror.Namespace}: {",
          "1026:     Object:      proxyValidWithMirror,",
          "1027:     Status:      \"valid\",",
          "1028:     Description: \"valid HTTPProxy\",",
          "1029:     Vhost:       \"example.com\",",
          "1030:    },",
          "",
          "[Added Lines]",
          "994:  run(t, \"proxy with mirror\", testcase{",
          "996:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "997:    {Name: proxyValidWithMirror.Name, Namespace: proxyValidWithMirror.Namespace}: fixture.NewValidCondition().",
          "998:     WithGeneration(proxyValidWithMirror.Generation).",
          "999:     Valid(),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1057:   },",
          "1058:  }",
          "1061:   objs: []interface{}{proxyInvalidTwoMirrors, fixture.ServiceRootsKuard},",
          "1069:   },",
          "1070:  })",
          "",
          "[Removed Lines]",
          "1060:  run(\"proxy with two mirrors\", testcase{",
          "1062:   want: map[types.NamespacedName]Status{",
          "1063:    {Name: proxyInvalidTwoMirrors.Name, Namespace: proxyInvalidTwoMirrors.Namespace}: {",
          "1064:     Object:      proxyInvalidTwoMirrors,",
          "1065:     Status:      \"invalid\",",
          "1066:     Description: \"only one service per route may be nominated as mirror\",",
          "1067:     Vhost:       \"example.com\",",
          "1068:    },",
          "",
          "[Added Lines]",
          "1029:  run(t, \"proxy with two mirrors\", testcase{",
          "1031:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1032:    {Name: proxyInvalidTwoMirrors.Name, Namespace: proxyInvalidTwoMirrors.Namespace}: fixture.NewValidCondition().",
          "1033:     WithGeneration(proxyInvalidTwoMirrors.Generation).",
          "1034:     WithError(\"ServiceError\", \"OnlyOneMirror\", \"only one service per route may be nominated as mirror\"),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1100:   },",
          "1101:  }",
          "1104:   objs: []interface{}{proxyInvalidDuplicateMatchConditionHeaders, fixture.ServiceRootsHome},",
          "1111:   },",
          "1112:  })",
          "",
          "[Removed Lines]",
          "1103:  run(\"duplicate route condition headers\", testcase{",
          "1105:   want: map[types.NamespacedName]Status{",
          "1106:    {Name: proxyInvalidDuplicateMatchConditionHeaders.Name, Namespace: proxyInvalidDuplicateMatchConditionHeaders.Namespace}: {",
          "1107:     Object: proxyInvalidDuplicateMatchConditionHeaders,",
          "1108:     Status: \"invalid\", Description: \"cannot specify duplicate header 'exact match' conditions in the same route\",",
          "1109:     Vhost: \"example.com\",",
          "1110:    },",
          "",
          "[Added Lines]",
          "1069:  run(t, \"duplicate route condition headers\", testcase{",
          "1071:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1072:    {Name: proxyInvalidDuplicateMatchConditionHeaders.Name, Namespace: proxyInvalidDuplicateMatchConditionHeaders.Namespace}: fixture.NewValidCondition().",
          "1073:     WithGeneration(proxyInvalidDuplicateMatchConditionHeaders.Generation).",
          "1074:     WithError(\"RouteError\", \"HeaderMatchConditionsNotValid\", \"cannot specify duplicate header 'exact match' conditions in the same route\"),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1160:   },",
          "1161:  }",
          "1164:   objs: []interface{}{proxyInvalidDuplicateIncludeCondtionHeaders, proxyValidDelegatedRoots, fixture.ServiceRootsHome},",
          "1166:    {Name: proxyInvalidDuplicateIncludeCondtionHeaders.Name,",
          "1172:    {Name: proxyValidDelegatedRoots.Name,",
          "1178:   },",
          "1179:  })",
          "",
          "[Removed Lines]",
          "1163:  run(\"duplicate include condition headers\", testcase{",
          "1165:   want: map[types.NamespacedName]Status{",
          "1167:     Namespace: proxyInvalidDuplicateIncludeCondtionHeaders.Namespace}: {",
          "1168:     Object: proxyInvalidDuplicateIncludeCondtionHeaders,",
          "1169:     Status: \"valid\", Description: \"valid HTTPProxy\",",
          "1170:     Vhost: \"example.com\",",
          "1171:    },",
          "1173:     Namespace: proxyValidDelegatedRoots.Namespace}: {",
          "1174:     Object:      proxyValidDelegatedRoots,",
          "1175:     Status:      \"invalid\",",
          "1176:     Description: \"cannot specify duplicate header 'exact match' conditions in the same route\",",
          "1177:     Vhost:       \"\"},",
          "",
          "[Added Lines]",
          "1127:  run(t, \"duplicate include condition headers\", testcase{",
          "1129:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1131:     Namespace: proxyInvalidDuplicateIncludeCondtionHeaders.Namespace}: fixture.NewValidCondition().",
          "1132:     WithGeneration(proxyInvalidDuplicateIncludeCondtionHeaders.Generation).Valid(),",
          "1134:     Namespace: proxyValidDelegatedRoots.Namespace}: fixture.NewValidCondition().",
          "1135:     WithGeneration(proxyValidDelegatedRoots.Generation).",
          "1136:     WithError(\"RouteError\", \"HeaderMatchConditionsNotValid\", \"cannot specify duplicate header 'exact match' conditions in the same route\"),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1209:   },",
          "1210:  }",
          "1213:   objs: []interface{}{proxyInvalidRouteConditionHeaders, fixture.ServiceRootsHome},",
          "1220:   },",
          "1221:  })",
          "",
          "[Removed Lines]",
          "1212:  run(\"duplicate valid route condition headers\", testcase{",
          "1214:   want: map[types.NamespacedName]Status{",
          "1215:    {Name: proxyInvalidRouteConditionHeaders.Name, Namespace: proxyInvalidRouteConditionHeaders.Namespace}: {",
          "1216:     Object: proxyInvalidRouteConditionHeaders,",
          "1217:     Status: \"valid\", Description: \"valid HTTPProxy\",",
          "1218:     Vhost: \"example.com\",",
          "1219:    },",
          "",
          "[Added Lines]",
          "1171:  run(t, \"duplicate valid route condition headers\", testcase{",
          "1173:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1174:    {Name: proxyInvalidRouteConditionHeaders.Name, Namespace: proxyInvalidRouteConditionHeaders.Namespace}: fixture.NewValidCondition().",
          "1175:     WithGeneration(proxyInvalidRouteConditionHeaders.Generation).Valid(),",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1245:   },",
          "1246:  }",
          "1249:   objs: []interface{}{proxyInvalidMultiplePrefixes, fixture.ServiceRootsKuard},",
          "1257:   },",
          "1258:  })",
          "",
          "[Removed Lines]",
          "1248:  run(\"proxy with two prefix conditions on route\", testcase{",
          "1250:   want: map[types.NamespacedName]Status{",
          "1251:    {Name: proxyInvalidMultiplePrefixes.Name, Namespace: proxyInvalidMultiplePrefixes.Namespace}: {",
          "1252:     Object:      proxyInvalidMultiplePrefixes,",
          "1253:     Status:      \"invalid\",",
          "1254:     Description: \"route: more than one prefix is not allowed in a condition block\",",
          "1255:     Vhost:       \"example.com\",",
          "1256:    },",
          "",
          "[Added Lines]",
          "1204:  run(t, \"proxy with two prefix conditions on route\", testcase{",
          "1206:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1207:    {Name: proxyInvalidMultiplePrefixes.Name, Namespace: proxyInvalidMultiplePrefixes.Namespace}: fixture.NewValidCondition().",
          "1208:     WithGeneration(proxyInvalidMultiplePrefixes.Generation).",
          "1209:     WithError(\"RouteError\", \"PathMatchConditionsNotValid\", \"route: more than one prefix is not allowed in a condition block\"),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1301:   },",
          "1302:  }",
          "1305:   objs: []interface{}{proxyInvalidTwoPrefixesWithInclude, proxyValidChildTeamA, fixture.ServiceRootsKuard},",
          "1317:   },",
          "1318:  })",
          "",
          "[Removed Lines]",
          "1304:  run(\"proxy with two prefix conditions orphans include\", testcase{",
          "1306:   want: map[types.NamespacedName]Status{",
          "1307:    {Name: proxyInvalidTwoPrefixesWithInclude.Name, Namespace: proxyInvalidTwoPrefixesWithInclude.Namespace}: {",
          "1308:     Object:      proxyInvalidTwoPrefixesWithInclude,",
          "1309:     Status:      \"invalid\",",
          "1310:     Description: \"include: more than one prefix is not allowed in a condition block\",",
          "1311:     Vhost:       \"example.com\",",
          "1312:    }, {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: {",
          "1313:     Object:      proxyValidChildTeamA,",
          "1314:     Status:      \"orphaned\",",
          "1315:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1316:    },",
          "",
          "[Added Lines]",
          "1257:  run(t, \"proxy with two prefix conditions orphans include\", testcase{",
          "1259:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1260:    {Name: proxyInvalidTwoPrefixesWithInclude.Name, Namespace: proxyInvalidTwoPrefixesWithInclude.Namespace}: fixture.NewValidCondition().",
          "1261:     WithGeneration(proxyInvalidTwoPrefixesWithInclude.Generation).",
          "1262:     WithError(\"IncludeError\", \"PathMatchConditionsNotValid\", \"include: more than one prefix is not allowed in a condition block\"),",
          "1263:    {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: fixture.NewValidCondition().",
          "1264:     WithGeneration(proxyValidChildTeamA.Generation).",
          "1265:     Orphaned(),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1340:   },",
          "1341:  }",
          "1344:   objs: []interface{}{proxyInvalidPrefixNoSlash, fixture.ServiceRootsKuard},",
          "1352:   },",
          "1353:  })",
          "",
          "[Removed Lines]",
          "1343:  run(\"proxy with prefix conditions on route that does not start with slash\", testcase{",
          "1345:   want: map[types.NamespacedName]Status{",
          "1346:    {Name: proxyInvalidPrefixNoSlash.Name, Namespace: proxyInvalidPrefixNoSlash.Namespace}: {",
          "1347:     Object:      proxyInvalidPrefixNoSlash,",
          "1348:     Status:      \"invalid\",",
          "1349:     Description: \"route: prefix conditions must start with /, api was supplied\",",
          "1350:     Vhost:       \"example.com\",",
          "1351:    },",
          "",
          "[Added Lines]",
          "1292:  run(t, \"proxy with prefix conditions on route that does not start with slash\", testcase{",
          "1294:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1295:    {Name: proxyInvalidPrefixNoSlash.Name, Namespace: proxyInvalidPrefixNoSlash.Namespace}: fixture.NewValidCondition().",
          "1296:     WithGeneration(proxyInvalidPrefixNoSlash.Generation).",
          "1297:     WithError(\"RouteError\", \"PathMatchConditionsNotValid\", \"route: prefix conditions must start with /, api was supplied\"),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1379:   },",
          "1380:  }",
          "1383:   objs: []interface{}{proxyInvalidIncludePrefixNoSlash, proxyValidChildTeamA, fixture.ServiceRootsKuard},",
          "1395:   },",
          "1396:  })",
          "",
          "[Removed Lines]",
          "1382:  run(\"proxy with include prefix that does not start with slash\", testcase{",
          "1384:   want: map[types.NamespacedName]Status{",
          "1385:    {Name: proxyInvalidIncludePrefixNoSlash.Name, Namespace: proxyInvalidIncludePrefixNoSlash.Namespace}: {",
          "1386:     Object:      proxyInvalidIncludePrefixNoSlash,",
          "1387:     Status:      \"invalid\",",
          "1388:     Description: \"include: prefix conditions must start with /, api was supplied\",",
          "1389:     Vhost:       \"example.com\",",
          "1390:    }, {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: {",
          "1391:     Object:      proxyValidChildTeamA,",
          "1392:     Status:      \"orphaned\",",
          "1393:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1394:    },",
          "",
          "[Added Lines]",
          "1328:  run(t, \"proxy with include prefix that does not start with slash\", testcase{",
          "1330:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1331:    {Name: proxyInvalidIncludePrefixNoSlash.Name, Namespace: proxyInvalidIncludePrefixNoSlash.Namespace}: fixture.NewValidCondition().",
          "1332:     WithError(\"IncludeError\", \"PathMatchConditionsNotValid\", \"include: prefix conditions must start with /, api was supplied\"),",
          "1333:    {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: fixture.NewValidCondition().",
          "1334:     Orphaned(),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1420:   },",
          "1421:  }",
          "1424:   objs: []interface{}{proxyInvalidTCPProxyIncludeAndService, fixture.ServiceRootsKuard},",
          "1432:   },",
          "1433:  })",
          "",
          "[Removed Lines]",
          "1423:  run(\"tcpproxy cannot specify services and include\", testcase{",
          "1425:   want: map[types.NamespacedName]Status{",
          "1426:    {Name: proxyInvalidTCPProxyIncludeAndService.Name, Namespace: proxyInvalidTCPProxyIncludeAndService.Namespace}: {",
          "1427:     Object:      proxyInvalidTCPProxyIncludeAndService,",
          "1428:     Status:      \"invalid\",",
          "1429:     Description: \"tcpproxy: cannot specify services and include in the same httpproxy\",",
          "1430:     Vhost:       \"passthrough.example.com\",",
          "1431:    },",
          "",
          "[Added Lines]",
          "1363:  run(t, \"tcpproxy cannot specify services and include\", testcase{",
          "1365:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1366:    {Name: proxyInvalidTCPProxyIncludeAndService.Name, Namespace: proxyInvalidTCPProxyIncludeAndService.Namespace}: fixture.NewValidCondition().",
          "1367:     WithError(\"TCPProxyError\", \"NoServicesAndInclude\", \"cannot specify services and include in the same httpproxy\"),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1448:   },",
          "1449:  }",
          "1452:   objs: []interface{}{proxyTCPNoServiceOrInclusion, fixture.ServiceRootsKuard},",
          "1460:   },",
          "1461:  })",
          "",
          "[Removed Lines]",
          "1451:  run(\"tcpproxy empty\", testcase{",
          "1453:   want: map[types.NamespacedName]Status{",
          "1454:    {Name: proxyTCPNoServiceOrInclusion.Name, Namespace: proxyTCPNoServiceOrInclusion.Namespace}: {",
          "1455:     Object:      proxyTCPNoServiceOrInclusion,",
          "1456:     Status:      \"invalid\",",
          "1457:     Description: \"tcpproxy: either services or inclusion must be specified\",",
          "1458:     Vhost:       \"passthrough.example.com\",",
          "1459:    },",
          "",
          "[Added Lines]",
          "1387:  run(t, \"tcpproxy empty\", testcase{",
          "1389:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1390:    {Name: proxyTCPNoServiceOrInclusion.Name, Namespace: proxyTCPNoServiceOrInclusion.Namespace}: fixture.NewValidCondition().",
          "1391:     WithError(\"TCPProxyError\", \"NothingDefined\", \"either services or inclusion must be specified\"),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1481:   },",
          "1482:  }",
          "1485:   objs: []interface{}{proxyTCPIncludesFoo, fixture.ServiceRootsKuard},",
          "1493:   },",
          "1494:  })",
          "",
          "[Removed Lines]",
          "1484:  run(\"tcpproxy w/ missing include\", testcase{",
          "1486:   want: map[types.NamespacedName]Status{",
          "1487:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: {",
          "1488:     Object:      proxyTCPIncludesFoo,",
          "1489:     Status:      \"invalid\",",
          "1490:     Description: \"tcpproxy: include roots/foo not found\",",
          "1491:     Vhost:       \"passthrough.example.com\",",
          "1492:    },",
          "",
          "[Added Lines]",
          "1416:  run(t, \"tcpproxy w/ missing include\", testcase{",
          "1418:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1419:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: fixture.NewValidCondition().",
          "1420:     WithError(\"TCPProxyIncludeError\", \"IncludeNotFound\", \"include roots/foo not found\"),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1514:   },",
          "1515:  }",
          "1518:   objs: []interface{}{proxyTCPIncludesFoo, proxyValidTCPRoot, fixture.ServiceRootsKuard},",
          "1532:   },",
          "1533:  })",
          "",
          "[Removed Lines]",
          "1517:  run(\"tcpproxy includes another root\", testcase{",
          "1519:   want: map[types.NamespacedName]Status{",
          "1520:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: {",
          "1521:     Object:      proxyTCPIncludesFoo,",
          "1522:     Status:      \"invalid\",",
          "1523:     Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "1524:     Vhost:       \"passthrough.example.com\",",
          "1525:    },",
          "1526:    {Name: proxyValidTCPRoot.Name, Namespace: proxyValidTCPRoot.Namespace}: {",
          "1527:     Object:      proxyValidTCPRoot,",
          "1528:     Status:      \"valid\",",
          "1529:     Description: \"valid HTTPProxy\",",
          "1530:     Vhost:       \"www.example.com\",",
          "1531:    },",
          "",
          "[Added Lines]",
          "1445:  run(t, \"tcpproxy includes another root\", testcase{",
          "1447:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1448:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: fixture.NewValidCondition().",
          "1449:     WithError(\"TCPProxyIncludeError\", \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "1450:    {Name: proxyValidTCPRoot.Name, Namespace: proxyValidTCPRoot.Namespace}: fixture.NewValidCondition().Valid(),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1547:   },",
          "1548:  }",
          "1551:   objs: []interface{}{proxyTCPIncludesFoo, proxyTCPValidChildFoo, fixture.ServiceRootsKuard},",
          "1565:   },",
          "1566:  })",
          "",
          "[Removed Lines]",
          "1550:  run(\"tcpproxy includes valid child\", testcase{",
          "1552:   want: map[types.NamespacedName]Status{",
          "1553:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: {",
          "1554:     Object:      proxyTCPIncludesFoo,",
          "1555:     Status:      \"valid\",",
          "1556:     Description: \"valid HTTPProxy\",",
          "1557:     Vhost:       \"passthrough.example.com\",",
          "1558:    },",
          "1559:    {Name: proxyTCPValidChildFoo.Name, Namespace: proxyTCPValidChildFoo.Namespace}: {",
          "1560:     Object:      proxyTCPValidChildFoo,",
          "1561:     Status:      \"valid\",",
          "1562:     Description: \"valid HTTPProxy\",",
          "1563:     Vhost:       \"passthrough.example.com\",",
          "1564:    },",
          "",
          "[Added Lines]",
          "1469:  run(t, \"tcpproxy includes valid child\", testcase{",
          "1471:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1472:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}:     fixture.NewValidCondition().Valid(),",
          "1473:    {Name: proxyTCPValidChildFoo.Name, Namespace: proxyTCPValidChildFoo.Namespace}: fixture.NewValidCondition().Valid(),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1635:   },",
          "1636:  }",
          "1639:   objs: []interface{}{proxyInvalidConflictingIncludeConditions, proxyValidBlogTeamA, proxyValidBlogTeamB, fixture.ServiceRootsHome, fixture.ServiceTeamAKuard, fixture.ServiceTeamBKuard},",
          "1641:    {Name: proxyInvalidConflictingIncludeConditions.Name,",
          "1660:   },",
          "1661:  })",
          "",
          "[Removed Lines]",
          "1638:  run(\"duplicate path conditions on an include\", testcase{",
          "1640:   want: map[types.NamespacedName]Status{",
          "1642:     Namespace: proxyInvalidConflictingIncludeConditions.Namespace}: {",
          "1643:     Object:      proxyInvalidConflictingIncludeConditions,",
          "1644:     Status:      \"invalid\",",
          "1645:     Description: \"duplicate conditions defined on an include\",",
          "1646:     Vhost:       \"example.com\",",
          "1647:    },",
          "1648:    {Name: proxyValidBlogTeamA.Name, Namespace: proxyValidBlogTeamA.Namespace}: {",
          "1649:     Object:      proxyValidBlogTeamA,",
          "1650:     Status:      \"orphaned\",",
          "1651:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1652:     Vhost:       \"\",",
          "1653:    },",
          "1654:    {Name: proxyValidBlogTeamB.Name, Namespace: proxyValidBlogTeamB.Namespace}: {",
          "1655:     Object:      proxyValidBlogTeamB,",
          "1656:     Status:      \"orphaned\",",
          "1657:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1658:     Vhost:       \"\",",
          "1659:    },",
          "",
          "[Added Lines]",
          "1547:  run(t, \"duplicate path conditions on an include\", testcase{",
          "1549:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1551:     Namespace: proxyInvalidConflictingIncludeConditions.Namespace}: fixture.NewValidCondition().",
          "1552:     WithError(\"IncludeError\", \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "1553:    {Name: proxyValidBlogTeamA.Name, Namespace: proxyValidBlogTeamA.Namespace}: fixture.NewValidCondition().",
          "1554:     Orphaned(),",
          "1555:    {Name: proxyValidBlogTeamB.Name, Namespace: proxyValidBlogTeamB.Namespace}: fixture.NewValidCondition().",
          "1556:     Orphaned(),",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1700:   },",
          "1701:  }",
          "1704:   objs: []interface{}{proxyInvalidConflictHeaderConditions, proxyValidBlogTeamA, proxyValidBlogTeamB, fixture.ServiceRootsHome, fixture.ServiceTeamAKuard, fixture.ServiceTeamBKuard},",
          "1706:    {Name: proxyInvalidConflictHeaderConditions.Name,",
          "1713:    {Name: proxyValidBlogTeamA.Name,",
          "1720:    {Name: proxyValidBlogTeamB.Name,",
          "1727:   },",
          "1728:  })",
          "",
          "[Removed Lines]",
          "1703:  run(\"duplicate header conditions on an include\", testcase{",
          "1705:   want: map[types.NamespacedName]Status{",
          "1707:     Namespace: proxyInvalidConflictHeaderConditions.Namespace}: {",
          "1708:     Object:      proxyInvalidConflictHeaderConditions,",
          "1709:     Status:      \"invalid\",",
          "1710:     Description: \"duplicate conditions defined on an include\",",
          "1711:     Vhost:       \"example.com\",",
          "1712:    },",
          "1714:     Namespace: proxyValidBlogTeamA.Namespace}: {",
          "1715:     Object:      proxyValidBlogTeamA,",
          "1716:     Status:      \"orphaned\",",
          "1717:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1718:     Vhost:       \"\",",
          "1719:    },",
          "1721:     Namespace: proxyValidBlogTeamB.Namespace}: {",
          "1722:     Object:      proxyValidBlogTeamB,",
          "1723:     Status:      \"orphaned\",",
          "1724:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1725:     Vhost:       \"\",",
          "1726:    },",
          "",
          "[Added Lines]",
          "1600:  run(t, \"duplicate header conditions on an include\", testcase{",
          "1602:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1604:     Namespace: proxyInvalidConflictHeaderConditions.Namespace}: fixture.NewValidCondition().",
          "1605:     WithError(\"IncludeError\", \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "1607:     Namespace: proxyValidBlogTeamA.Namespace}: fixture.NewValidCondition().Orphaned(),",
          "1609:     Namespace: proxyValidBlogTeamB.Namespace}: fixture.NewValidCondition().Orphaned(),",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1769:   },",
          "1770:  }",
          "1773:   objs: []interface{}{proxyInvalidDuplicateHeaderAndPathConditions, proxyValidBlogTeamA, proxyValidBlogTeamB, fixture.ServiceRootsHome, fixture.ServiceTeamAKuard, fixture.ServiceTeamBKuard},",
          "1775:    {Name: proxyInvalidDuplicateHeaderAndPathConditions.Name,",
          "1782:    {Name: proxyValidBlogTeamA.Name,",
          "1789:    {Name: proxyValidBlogTeamB.Name,",
          "1796:   },",
          "1797:  })",
          "",
          "[Removed Lines]",
          "1772:  run(\"duplicate header+path conditions on an include\", testcase{",
          "1774:   want: map[types.NamespacedName]Status{",
          "1776:     Namespace: proxyInvalidDuplicateHeaderAndPathConditions.Namespace}: {",
          "1777:     Object:      proxyInvalidDuplicateHeaderAndPathConditions,",
          "1778:     Status:      \"invalid\",",
          "1779:     Description: \"duplicate conditions defined on an include\",",
          "1780:     Vhost:       \"example.com\",",
          "1781:    },",
          "1783:     Namespace: proxyValidBlogTeamA.Namespace}: {",
          "1784:     Object:      proxyValidBlogTeamA,",
          "1785:     Status:      \"orphaned\",",
          "1786:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1787:     Vhost:       \"\",",
          "1788:    },",
          "1790:     Namespace: proxyValidBlogTeamB.Namespace}: {",
          "1791:     Object:      proxyValidBlogTeamB,",
          "1792:     Status:      \"orphaned\",",
          "1793:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1794:     Vhost:       \"\",",
          "1795:    },",
          "",
          "[Added Lines]",
          "1655:  run(t, \"duplicate header+path conditions on an include\", testcase{",
          "1657:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1659:     Namespace: proxyInvalidDuplicateHeaderAndPathConditions.Namespace}: fixture.NewValidCondition().",
          "1660:     WithError(\"IncludeError\", \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "1662:     Namespace: proxyValidBlogTeamA.Namespace}: fixture.NewValidCondition().",
          "1663:     Orphaned(),",
          "1665:     Namespace: proxyValidBlogTeamB.Namespace}: fixture.NewValidCondition().",
          "1666:     Orphaned(),",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1811:   },",
          "1812:  }",
          "1815:   objs: []interface{}{proxyInvalidMissingInclude, fixture.ServiceRootsKuard},",
          "1823:   },",
          "1824:  })",
          "",
          "[Removed Lines]",
          "1814:  run(\"httpproxy w/ missing include\", testcase{",
          "1816:   want: map[types.NamespacedName]Status{",
          "1817:    {Name: proxyInvalidMissingInclude.Name, Namespace: proxyInvalidMissingInclude.Namespace}: {",
          "1818:     Object:      proxyInvalidMissingInclude,",
          "1819:     Status:      \"invalid\",",
          "1820:     Description: \"include roots/child not found\",",
          "1821:     Vhost:       \"example.com\",",
          "1822:    },",
          "",
          "[Added Lines]",
          "1685:  run(t, \"httpproxy w/ missing include\", testcase{",
          "1687:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1688:    {Name: proxyInvalidMissingInclude.Name, Namespace: proxyInvalidMissingInclude.Namespace}: fixture.NewValidCondition().",
          "1689:     WithError(\"IncludeError\", \"IncludeNotFound\", \"include roots/child not found\"),",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1844:   },",
          "1845:  }",
          "1848:   objs: []interface{}{proxyTCPInvalidMissingService},",
          "1856:   },",
          "1857:  })",
          "",
          "[Removed Lines]",
          "1847:  run(\"httpproxy w/ tcpproxy w/ missing service\", testcase{",
          "1849:   want: map[types.NamespacedName]Status{",
          "1850:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: {",
          "1851:     Object:      proxyTCPInvalidMissingService,",
          "1852:     Status:      \"invalid\",",
          "1853:     Description: `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`,",
          "1854:     Vhost:       \"tcpproxy.example.com\",",
          "1855:    },",
          "",
          "[Added Lines]",
          "1714:  run(t, \"httpproxy w/ tcpproxy w/ missing service\", testcase{",
          "1716:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1717:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
          "1718:     WithError(\"TCPProxyError\", \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1877:   },",
          "1878:  }",
          "1881:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
          "1889:   },",
          "1890:  })",
          "",
          "[Removed Lines]",
          "1880:  run(\"httpproxy w/ tcpproxy w/ service missing port\", testcase{",
          "1882:   want: map[types.NamespacedName]Status{",
          "1883:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: {",
          "1884:     Object:      proxyTCPInvalidPortNotMatched,",
          "1885:     Status:      \"invalid\",",
          "1886:     Description: `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`,",
          "1887:     Vhost:       \"tcpproxy.example.com\",",
          "1888:    },",
          "",
          "[Added Lines]",
          "1743:  run(t, \"httpproxy w/ tcpproxy w/ service missing port\", testcase{",
          "1745:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1746:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
          "1747:     WithError(\"TCPProxyError\", \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1907:   },",
          "1908:  }",
          "1911:   objs: []interface{}{proxyTCPInvalidMissingTLS},",
          "1919:   },",
          "1920:  })",
          "",
          "[Removed Lines]",
          "1910:  run(\"httpproxy w/ tcpproxy missing tls\", testcase{",
          "1912:   want: map[types.NamespacedName]Status{",
          "1913:    {Name: proxyTCPInvalidMissingTLS.Name, Namespace: proxyTCPInvalidMissingTLS.Namespace}: {",
          "1914:     Object:      proxyTCPInvalidMissingTLS,",
          "1915:     Status:      \"invalid\",",
          "1916:     Description: \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\",",
          "1917:     Vhost:       \"tcpproxy.example.com\",",
          "1918:    },",
          "",
          "[Added Lines]",
          "1769:  run(t, \"httpproxy w/ tcpproxy missing tls\", testcase{",
          "1771:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1772:    {Name: proxyTCPInvalidMissingTLS.Name, Namespace: proxyTCPInvalidMissingTLS.Namespace}: fixture.NewValidCondition().",
          "1773:     WithError(\"TCPProxyError\", \"TLSMustBeConfigured\", \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\"),",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1945:   },",
          "1946:  }",
          "1949:   objs: []interface{}{fixture.SecretRootsCert, fixture.ServiceRootsKuard, proxyInvalidMissingServiceWithTCPProxy},",
          "1957:   },",
          "1958:  })",
          "",
          "[Removed Lines]",
          "1948:  run(\"httpproxy w/ tcpproxy missing service\", testcase{",
          "1950:   want: map[types.NamespacedName]Status{",
          "1951:    {Name: proxyInvalidMissingServiceWithTCPProxy.Name, Namespace: proxyInvalidMissingServiceWithTCPProxy.Namespace}: {",
          "1952:     Object:      proxyInvalidMissingServiceWithTCPProxy,",
          "1953:     Status:      \"invalid\",",
          "1954:     Description: `Spec.Routes unresolved service reference: service \"roots/missing\" not found`,",
          "1955:     Vhost:       \"tcpproxy.example.com\",",
          "1956:    },",
          "",
          "[Added Lines]",
          "1803:  run(t, \"httpproxy w/ tcpproxy missing service\", testcase{",
          "1805:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1806:    {Name: proxyInvalidMissingServiceWithTCPProxy.Name, Namespace: proxyInvalidMissingServiceWithTCPProxy.Namespace}: fixture.NewValidCondition().",
          "1807:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: service \"roots/missing\" not found`),",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1983:   },",
          "1984:  }",
          "1987:   objs: []interface{}{fixture.SecretRootsCert, fixture.ServiceRootsKuard, proxyRoutePortNotMatchedWithTCP},",
          "1995:   },",
          "1996:  })",
          "",
          "[Removed Lines]",
          "1986:  run(\"tcpproxy route unmatched service port\", testcase{",
          "1988:   want: map[types.NamespacedName]Status{",
          "1989:    {Name: proxyRoutePortNotMatchedWithTCP.Name, Namespace: proxyRoutePortNotMatchedWithTCP.Namespace}: {",
          "1990:     Object:      proxyRoutePortNotMatchedWithTCP,",
          "1991:     Status:      \"invalid\",",
          "1992:     Description: `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`,",
          "1993:     Vhost:       \"tcpproxy.example.com\",",
          "1994:    },",
          "",
          "[Added Lines]",
          "1837:  run(t, \"tcpproxy route unmatched service port\", testcase{",
          "1839:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1840:    {Name: proxyRoutePortNotMatchedWithTCP.Name, Namespace: proxyRoutePortNotMatchedWithTCP.Namespace}: fixture.NewValidCondition().",
          "1841:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2052:   },",
          "2053:  }",
          "2056:   objs: []interface{}{proxyTCPValidIncludesChild, proxyTCPValidChild, fixture.ServiceRootsKuard, fixture.SecretRootsCert},",
          "2058:    {Name: proxyTCPValidIncludesChild.Name,",
          "2065:    {Name: proxyTCPValidChild.Name,",
          "2072:   },",
          "2073:  })",
          "2076:   objs: []interface{}{proxyTCPValidIncludeChild, proxyTCPValidChild, fixture.ServiceRootsKuard, fixture.SecretRootsCert},",
          "2078:    {Name: proxyTCPValidIncludeChild.Name,",
          "2085:    {Name: proxyTCPValidChild.Name,",
          "2091:   },",
          "2092:  })",
          "",
          "[Removed Lines]",
          "2055:  run(\"valid HTTPProxy.TCPProxy - plural\", testcase{",
          "2057:   want: map[types.NamespacedName]Status{",
          "2059:     Namespace: proxyTCPValidIncludesChild.Namespace}: {",
          "2060:     Object:      proxyTCPValidIncludesChild,",
          "2061:     Status:      \"valid\",",
          "2062:     Description: \"valid HTTPProxy\",",
          "2063:     Vhost:       \"tcpproxy.example.com\",",
          "2064:    },",
          "2066:     Namespace: proxyTCPValidChild.Namespace}: {",
          "2067:     Object:      proxyTCPValidChild,",
          "2068:     Status:      \"valid\",",
          "2069:     Description: \"valid HTTPProxy\",",
          "2070:     Vhost:       \"tcpproxy.example.com\",",
          "2071:    },",
          "2075:  run(\"valid HTTPProxy.TCPProxy\", testcase{",
          "2077:   want: map[types.NamespacedName]Status{",
          "2079:     Namespace: proxyTCPValidIncludeChild.Namespace}: {",
          "2080:     Object:      proxyTCPValidIncludeChild,",
          "2081:     Status:      \"valid\",",
          "2082:     Description: \"valid HTTPProxy\",",
          "2083:     Vhost:       \"tcpproxy.example.com\",",
          "2084:    },",
          "2086:     Namespace: proxyTCPValidChild.Namespace}: {",
          "2087:     Object:      proxyTCPValidChild,",
          "2088:     Status:      \"valid\",",
          "2089:     Description: \"valid HTTPProxy\",",
          "2090:     Vhost:       \"tcpproxy.example.com\"},",
          "",
          "[Added Lines]",
          "1902:  run(t, \"valid HTTPProxy.TCPProxy - plural\", testcase{",
          "1904:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1906:     Namespace: proxyTCPValidIncludesChild.Namespace}: fixture.NewValidCondition().Valid(),",
          "1908:     Namespace: proxyTCPValidChild.Namespace}: fixture.NewValidCondition().Valid(),",
          "1912:  run(t, \"valid HTTPProxy.TCPProxy\", testcase{",
          "1914:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1916:     Namespace: proxyTCPValidIncludeChild.Namespace}: fixture.NewValidCondition().Valid(),",
          "1918:     Namespace: proxyTCPValidChild.Namespace}: fixture.NewValidCondition().Valid(),",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2110:   },",
          "2111:  }",
          "2114:   objs: []interface{}{proxyInvalidNoServices, fixture.ServiceRootsKuard},",
          "2122:   },",
          "2123:  })",
          "",
          "[Removed Lines]",
          "2113:  run(\"invalid HTTPProxy due to empty route.service\", testcase{",
          "2115:   want: map[types.NamespacedName]Status{",
          "2116:    {Name: proxyInvalidNoServices.Name, Namespace: proxyInvalidNoServices.Namespace}: {",
          "2117:     Object:      proxyInvalidNoServices,",
          "2118:     Status:      \"invalid\",",
          "2119:     Description: \"route.services must have at least one entry\",",
          "2120:     Vhost:       \"missing-service.example.com\",",
          "2121:    },",
          "",
          "[Added Lines]",
          "1941:  run(t, \"invalid HTTPProxy due to empty route.service\", testcase{",
          "1943:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1944:    {Name: proxyInvalidNoServices.Name, Namespace: proxyInvalidNoServices.Namespace}: fixture.NewValidCondition().",
          "1945:     WithError(\"RouteError\", \"NoServicesPresent\", \"route.services must have at least one entry\"),",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2147:   },",
          "2148:  }",
          "2151:   fallbackCertificate: &types.NamespacedName{",
          "2152:    Name:      \"invalid\",",
          "2153:    Namespace: \"invalid\",",
          "2154:   },",
          "2155:   objs: []interface{}{fallbackCertificate, fixture.SecretRootsFallback, fixture.SecretRootsCert, fixture.ServiceRootsHome},",
          "2157:    {Name: fallbackCertificate.Name,",
          "2164:   },",
          "2165:  })",
          "2168:   objs: []interface{}{fallbackCertificate, fixture.SecretRootsFallback, fixture.SecretRootsCert, fixture.ServiceRootsHome},",
          "2170:    {Name: fallbackCertificate.Name,",
          "2177:   },",
          "2178:  })",
          "",
          "[Removed Lines]",
          "2150:  run(\"invalid fallback certificate passed to contour\", testcase{",
          "2156:   want: map[types.NamespacedName]Status{",
          "2158:     Namespace: fallbackCertificate.Namespace}: {",
          "2159:     Object:      fallbackCertificate,",
          "2160:     Status:      \"invalid\",",
          "2161:     Description: \"Spec.Virtualhost.TLS Secret \\\"invalid/invalid\\\" fallback certificate is invalid: Secret not found\",",
          "2162:     Vhost:       \"example.com\",",
          "2163:    },",
          "2167:  run(\"fallback certificate requested but cert not configured in contour\", testcase{",
          "2169:   want: map[types.NamespacedName]Status{",
          "2171:     Namespace: fallbackCertificate.Namespace}: {",
          "2172:     Object:      fallbackCertificate,",
          "2173:     Status:      \"invalid\",",
          "2174:     Description: \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\",",
          "2175:     Vhost:       \"example.com\",",
          "2176:    },",
          "",
          "[Added Lines]",
          "1974:  run(t, \"invalid fallback certificate passed to contour\", testcase{",
          "1980:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1982:     Namespace: fallbackCertificate.Namespace}: fixture.NewValidCondition().",
          "1983:     WithError(\"TLSError\", \"FallbackNotValid\", `Spec.Virtualhost.TLS Secret \"invalid/invalid\" fallback certificate is invalid: Secret not found`),",
          "1987:  run(t, \"fallback certificate requested but cert not configured in contour\", testcase{",
          "1989:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1991:     Namespace: fallbackCertificate.Namespace}: fixture.NewValidCondition().",
          "1992:     WithError(\"TLSError\", \"FallbackNotPresent\", \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\"),",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2205:   },",
          "2206:  }",
          "2209:   objs: []interface{}{fallbackCertificateWithClientValidation, fixture.SecretRootsFallback, fixture.SecretRootsCert, fixture.ServiceRootsHome},",
          "2211:    {Name: fallbackCertificateWithClientValidation.Name,",
          "2218:   },",
          "2219:  })",
          "",
          "[Removed Lines]",
          "2208:  run(\"fallback certificate requested and clientValidation also configured\", testcase{",
          "2210:   want: map[types.NamespacedName]Status{",
          "2212:     Namespace: fallbackCertificateWithClientValidation.Namespace}: {",
          "2213:     Object:      fallbackCertificateWithClientValidation,",
          "2214:     Status:      \"invalid\",",
          "2215:     Description: \"Spec.Virtualhost.TLS fallback & client validation are incompatible\",",
          "2216:     Vhost:       \"example.com\",",
          "2217:    },",
          "",
          "[Added Lines]",
          "2024:  run(t, \"fallback certificate requested and clientValidation also configured\", testcase{",
          "2026:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2028:     Namespace: fallbackCertificateWithClientValidation.Namespace}: fixture.NewValidCondition().",
          "2029:     WithError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client validation are incompatible\"),",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2237:   },",
          "2238:  }",
          "2241:   objs: []interface{}{fixture.SecretRootsCert, tlsPassthroughAndValidation},",
          "2249:   },",
          "2250:  })",
          "",
          "[Removed Lines]",
          "2240:  run(\"passthrough and client auth are incompatible tlsPassthroughAndValidation\", testcase{",
          "2242:   want: map[types.NamespacedName]Status{",
          "2243:    {Name: tlsPassthroughAndValidation.Name, Namespace: tlsPassthroughAndValidation.Namespace}: {",
          "2244:     Object:      tlsPassthroughAndValidation,",
          "2245:     Status:      \"invalid\",",
          "2246:     Description: \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\",",
          "2247:     Vhost:       tlsPassthroughAndValidation.Spec.VirtualHost.Fqdn,",
          "2248:    },",
          "",
          "[Added Lines]",
          "2052:  run(t, \"passthrough and client auth are incompatible tlsPassthroughAndValidation\", testcase{",
          "2054:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2055:    {Name: tlsPassthroughAndValidation.Name, Namespace: tlsPassthroughAndValidation.Namespace}: fixture.NewValidCondition().",
          "2056:     WithError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\"),",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2266:   },",
          "2267:  }",
          "2270:   objs: []interface{}{",
          "2271:    fixture.SecretRootsCert,",
          "2272:    tlsPassthroughAndSecretName,",
          "2273:   },",
          "2281:   },",
          "2282:  })",
          "",
          "[Removed Lines]",
          "2269:  run(\"tcpproxy with TLS passthrough and secret name both specified\", testcase{",
          "2274:   want: map[types.NamespacedName]Status{",
          "2275:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: {",
          "2276:     Object:      tlsPassthroughAndSecretName,",
          "2277:     Status:      \"invalid\",",
          "2278:     Description: \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\",",
          "2279:     Vhost:       \"tcpproxy.example.com\",",
          "2280:    },",
          "",
          "[Added Lines]",
          "2077:  run(t, \"tcpproxy with TLS passthrough and secret name both specified\", testcase{",
          "2082:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2083:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: fixture.NewValidCondition().",
          "2084:     WithError(\"TLSError\", \"TLSConfigNotValid\", \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\"),",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2298:   },",
          "2299:  }",
          "2302:   objs: []interface{}{",
          "2303:    fixture.SecretRootsCert,",
          "2304:    tlsNoPassthroughOrSecretName,",
          "2305:   },",
          "2313:   },",
          "2314:  })",
          "",
          "[Removed Lines]",
          "2301:  run(\"httpproxy w/ tcpproxy with neither TLS passthrough nor secret name specified\", testcase{",
          "2306:   want: map[types.NamespacedName]Status{",
          "2307:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: {",
          "2308:     Object:      tlsNoPassthroughOrSecretName,",
          "2309:     Status:      \"invalid\",",
          "2310:     Description: \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\",",
          "2311:     Vhost:       \"tcpproxy.example.com\",",
          "2312:    },",
          "",
          "[Added Lines]",
          "2105:  run(t, \"httpproxy w/ tcpproxy with neither TLS passthrough nor secret name specified\", testcase{",
          "2110:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2111:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: fixture.NewValidCondition().",
          "2112:     WithError(\"TLSError\", \"TLSConfigNotValid\", \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\"),",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2325:   },",
          "2326:  }",
          "2329:   objs: []interface{}{emptyProxy},",
          "2337:   },",
          "2338:  })",
          "",
          "[Removed Lines]",
          "2328:  run(\"proxy with no routes, includes, or tcpproxy is invalid\", testcase{",
          "2330:   want: map[types.NamespacedName]Status{",
          "2331:    {Name: emptyProxy.Name, Namespace: emptyProxy.Namespace}: {",
          "2332:     Object:      emptyProxy,",
          "2333:     Status:      \"invalid\",",
          "2334:     Description: \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\",",
          "2335:     Vhost:       emptyProxy.Spec.VirtualHost.Fqdn,",
          "2336:    },",
          "",
          "[Added Lines]",
          "2128:  run(t, \"proxy with no routes, includes, or tcpproxy is invalid\", testcase{",
          "2130:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2131:    {Name: emptyProxy.Name, Namespace: emptyProxy.Namespace}: fixture.NewValidCondition().",
          "2132:     WithError(\"SpecError\", \"NothingDefined\", \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\"),",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2363:   },",
          "2364:  }",
          "2367:   objs: []interface{}{invalidRequestHeadersPolicyService, fixture.ServiceRootsKuard},",
          "2375:   },",
          "2376:  })",
          "",
          "[Removed Lines]",
          "2366:  run(\"requestHeadersPolicy, Host header invalid on Service\", testcase{",
          "2368:   want: map[types.NamespacedName]Status{",
          "2369:    {Name: invalidRequestHeadersPolicyService.Name, Namespace: invalidRequestHeadersPolicyService.Namespace}: {",
          "2370:     Object:      invalidRequestHeadersPolicyService,",
          "2371:     Status:      \"invalid\",",
          "2372:     Description: \"rewriting \\\"Host\\\" header is not supported on a service\",",
          "2373:     Vhost:       invalidRequestHeadersPolicyService.Spec.VirtualHost.Fqdn,",
          "2374:    },",
          "",
          "[Added Lines]",
          "2162:  run(t, \"requestHeadersPolicy, Host header invalid on Service\", testcase{",
          "2164:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2165:    {Name: invalidRequestHeadersPolicyService.Name, Namespace: invalidRequestHeadersPolicyService.Namespace}: fixture.NewValidCondition().",
          "2166:     WithError(\"ServiceError\", \"RequestHeadersPolicyInvalid\", `rewriting \"Host\" header is not supported on request headers`),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2401:   },",
          "2402:  }",
          "2405:   objs: []interface{}{invalidResponseHeadersPolicyService, fixture.ServiceRootsKuard},",
          "2413:   },",
          "2414:  })",
          "",
          "[Removed Lines]",
          "2404:  run(\"responseHeadersPolicy, Host header invalid on Service\", testcase{",
          "2406:   want: map[types.NamespacedName]Status{",
          "2407:    {Name: invalidResponseHeadersPolicyService.Name, Namespace: invalidResponseHeadersPolicyService.Namespace}: {",
          "2408:     Object:      invalidResponseHeadersPolicyService,",
          "2409:     Status:      \"invalid\",",
          "2410:     Description: \"rewriting \\\"Host\\\" header is not supported on response headers\",",
          "2411:     Vhost:       invalidResponseHeadersPolicyService.Spec.VirtualHost.Fqdn,",
          "2412:    },",
          "",
          "[Added Lines]",
          "2196:  run(t, \"responseHeadersPolicy, Host header invalid on Service\", testcase{",
          "2198:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2199:    {Name: invalidResponseHeadersPolicyService.Name, Namespace: invalidResponseHeadersPolicyService.Namespace}: fixture.NewValidCondition().",
          "2200:     WithError(\"ServiceError\", \"ResponseHeadersPolicyInvalid\", `rewriting \"Host\" header is not supported on response headers`),",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2439:   },",
          "2440:  }",
          "2443:   objs: []interface{}{invalidResponseHeadersPolicyRoute, fixture.ServiceRootsKuard},",
          "2451:   },",
          "2452:  })",
          "",
          "[Removed Lines]",
          "2442:  run(\"responseHeadersPolicy, Host header invalid on Route\", testcase{",
          "2444:   want: map[types.NamespacedName]Status{",
          "2445:    {Name: invalidResponseHeadersPolicyRoute.Name, Namespace: invalidResponseHeadersPolicyRoute.Namespace}: {",
          "2446:     Object:      invalidResponseHeadersPolicyRoute,",
          "2447:     Status:      \"invalid\",",
          "2448:     Description: \"rewriting \\\"Host\\\" header is not supported on response headers\",",
          "2449:     Vhost:       invalidResponseHeadersPolicyRoute.Spec.VirtualHost.Fqdn,",
          "2450:    },",
          "",
          "[Added Lines]",
          "2230:  run(t, \"responseHeadersPolicy, Host header invalid on Route\", testcase{",
          "2232:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2233:    {Name: invalidResponseHeadersPolicyRoute.Name, Namespace: invalidResponseHeadersPolicyRoute.Namespace}: fixture.NewValidCondition().",
          "2234:     WithError(\"RouteError\", \"ResponseHeaderPolicyInvalid\", `rewriting \"Host\" header is not supported on response headers`),",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2471:    }},",
          "2472:   })",
          "2475:   objs: []interface{}{fixture.SecretRootsCert, proxyAuthFallback},",
          "2483:   },",
          "2484:  })",
          "",
          "[Removed Lines]",
          "2474:  run(\"fallback and client auth is invalid\", testcase{",
          "2476:   want: map[types.NamespacedName]Status{",
          "2477:    {Name: proxyAuthFallback.Name, Namespace: proxyAuthFallback.Namespace}: {",
          "2478:     Object:      proxyAuthFallback,",
          "2479:     Status:      \"invalid\",",
          "2480:     Description: \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\",",
          "2481:     Vhost:       proxyAuthFallback.Spec.VirtualHost.Fqdn,",
          "2482:    },",
          "",
          "[Added Lines]",
          "2258:  run(t, \"fallback and client auth is invalid\", testcase{",
          "2260:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2261:    {Name: proxyAuthFallback.Name, Namespace: proxyAuthFallback.Namespace}: fixture.NewValidCondition().",
          "2262:     WithError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\"),",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2507:   },",
          "2508:  }",
          "2511:   objs: []interface{}{invalidResponseTimeout, fixture.ServiceRootsKuard},",
          "2513:    {",
          "2514:     Name:      invalidResponseTimeout.Name,",
          "2515:     Namespace: invalidResponseTimeout.Namespace,",
          "2522:   },",
          "2523:  })",
          "",
          "[Removed Lines]",
          "2510:  run(\"proxy with invalid response timeout value is invalid\", testcase{",
          "2512:   want: map[types.NamespacedName]Status{",
          "2516:    }: {",
          "2517:     Object:      invalidResponseTimeout,",
          "2518:     Status:      \"invalid\",",
          "2519:     Description: \"route.timeoutPolicy failed to parse: error parsing response timeout: unable to parse timeout string \\\"invalid-val\\\": time: invalid duration \\\"invalid-val\\\"\",",
          "2520:     Vhost:       invalidResponseTimeout.Spec.VirtualHost.Fqdn,",
          "2521:    },",
          "",
          "[Added Lines]",
          "2290:  run(t, \"proxy with invalid response timeout value is invalid\", testcase{",
          "2292:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2296:    }: fixture.NewValidCondition().WithError(\"RouteError\", \"TimeoutPolicyNotValid\",",
          "2297:     `route.timeoutPolicy failed to parse: error parsing response timeout: unable to parse timeout string \"invalid-val\": time: invalid duration \"invalid-val\"`),",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2546:   },",
          "2547:  }",
          "2550:   objs: []interface{}{invalidIdleTimeout, fixture.ServiceRootsKuard},",
          "2552:    {",
          "2553:     Name:      invalidIdleTimeout.Name,",
          "2554:     Namespace: invalidIdleTimeout.Namespace,",
          "2561:   },",
          "2562:  })",
          "",
          "[Removed Lines]",
          "2549:  run(\"proxy with invalid idle timeout value is invalid\", testcase{",
          "2551:   want: map[types.NamespacedName]Status{",
          "2555:    }: {",
          "2556:     Object:      invalidIdleTimeout,",
          "2557:     Status:      \"invalid\",",
          "2558:     Description: \"route.timeoutPolicy failed to parse: error parsing idle timeout: unable to parse timeout string \\\"invalid-val\\\": time: invalid duration \\\"invalid-val\\\"\",",
          "2559:     Vhost:       invalidIdleTimeout.Spec.VirtualHost.Fqdn,",
          "2560:    },",
          "",
          "[Added Lines]",
          "2325:  run(t, \"proxy with invalid idle timeout value is invalid\", testcase{",
          "2327:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2331:    }: fixture.NewValidCondition().WithError(\"RouteError\", \"TimeoutPolicyNotValid\",",
          "2332:     `route.timeoutPolicy failed to parse: error parsing idle timeout: unable to parse timeout string \"invalid-val\": time: invalid duration \"invalid-val\"`),",
          "",
          "---------------"
        ],
        "internal/featuretests/authorization_test.go||internal/featuretests/authorization_test.go": [
          "File: internal/featuretests/authorization_test.go -> internal/featuretests/authorization_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  \"github.com/projectcontour/contour/apis/projectcontour/v1alpha1\"",
          "29:  envoy_v2 \"github.com/projectcontour/contour/internal/envoy/v2\"",
          "30:  \"github.com/projectcontour/contour/internal/fixture\"",
          "32:  \"github.com/projectcontour/contour/internal/protobuf\"",
          "33:  corev1 \"k8s.io/api/core/v1\"",
          "34:  \"k8s.io/client-go/tools/cache\"",
          "35: )",
          "",
          "[Removed Lines]",
          "31:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "32:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:    },",
          "105:    staticListener()),",
          "106:  }).Status(p).Like(contour_api_v1.HTTPProxyStatus{",
          "108:  })",
          "109: }",
          "",
          "[Removed Lines]",
          "107:   CurrentStatus: k8s.StatusValid,",
          "",
          "[Added Lines]",
          "107:   CurrentStatus: string(status.ProxyStatusValid),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:  c.Request(listenerType).Equals(&envoy_api_v2.DiscoveryResponse{",
          "136:   TypeUrl:   listenerType,",
          "137:   Resources: resources(t, staticListener()),",
          "142: }",
          "144: func authzFailOpen(t *testing.T, rh cache.ResourceEventHandler, c *Contour) {",
          "",
          "[Removed Lines]",
          "138:  }).Status(p).Equals(contour_api_v1.HTTPProxyStatus{",
          "139:   CurrentStatus: k8s.StatusInvalid,",
          "140:   Description:   `Spec.Virtualhost.Authorization.ResponseTimeout is invalid: unable to parse timeout string \"invalid-timeout\": time: invalid duration \"invalid-timeout\"`,",
          "141:  })",
          "",
          "[Added Lines]",
          "138:  }).Status(p).HasError(\"AuthError\", \"AuthReponseTimeoutInvalid\", `Spec.Virtualhost.Authorization.ResponseTimeout is invalid: unable to parse timeout string \"invalid-timeout\": time: invalid duration \"invalid-timeout\"`)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:    },",
          "198:    staticListener()),",
          "199:  }).Status(p).Like(contour_api_v1.HTTPProxyStatus{",
          "201:  })",
          "202: }",
          "",
          "[Removed Lines]",
          "200:   CurrentStatus: k8s.StatusValid,",
          "",
          "[Added Lines]",
          "197:   CurrentStatus: string(status.ProxyStatusValid),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:  c.Request(listenerType).Equals(&envoy_api_v2.DiscoveryResponse{",
          "225:   TypeUrl:   listenerType,",
          "226:   Resources: resources(t, staticListener()),",
          "231: }",
          "233: func authzOverrideDisabled(t *testing.T, rh cache.ResourceEventHandler, c *Contour) {",
          "",
          "[Removed Lines]",
          "227:  }).Status(p).Equals(contour_api_v1.HTTPProxyStatus{",
          "228:   CurrentStatus: k8s.StatusInvalid,",
          "229:   Description:   `Spec.Virtualhost.TLS fallback & client authorization are incompatible`,",
          "230:  })",
          "",
          "[Added Lines]",
          "224:  }).Status(p).HasError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "457:  c.Request(listenerType).Equals(&envoy_api_v2.DiscoveryResponse{",
          "458:   TypeUrl:   listenerType,",
          "459:   Resources: resources(t, staticListener()),",
          "465:  invalid.Spec.VirtualHost.Authorization.ExtensionServiceRef = contour_api_v1.ExtensionServiceReference{",
          "466:   APIVersion: \"projectcontour.io/v1alpha1\",",
          "",
          "[Removed Lines]",
          "460:  }).Status(invalid).Equals(contour_api_v1.HTTPProxyStatus{",
          "461:   CurrentStatus: k8s.StatusInvalid,",
          "462:   Description:   `Spec.Virtualhost.Authorization.ServiceRef specifies an unsupported resource version \"foo/bar\"`,",
          "463:  })",
          "",
          "[Added Lines]",
          "454:  }).Status(invalid).HasError(\"AuthError\", \"AuthBadResourceVersion\", `Spec.Virtualhost.Authorization.extensionRef specifies an unsupported resource version \"foo/bar\"`)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474:  c.Request(listenerType).Equals(&envoy_api_v2.DiscoveryResponse{",
          "475:   TypeUrl:   listenerType,",
          "476:   Resources: resources(t, staticListener()),",
          "482:  invalid.Spec.VirtualHost.Authorization.ExtensionServiceRef = contour_api_v1.ExtensionServiceReference{",
          "483:   Namespace: \"auth\",",
          "",
          "[Removed Lines]",
          "477:  }).Status(invalid).Equals(contour_api_v1.HTTPProxyStatus{",
          "478:   CurrentStatus: k8s.StatusInvalid,",
          "479:   Description:   `Spec.Virtualhost.Authorization.ServiceRef extension service \"missing/extension\" not found`,",
          "480:  })",
          "",
          "[Added Lines]",
          "468:  }).Status(invalid).HasError(\"AuthError\", \"ExtensionServiceNotFound\", `Spec.Virtualhost.Authorization.ServiceRef extension service \"missing/extension\" not found`)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "522:    },",
          "523:    staticListener()),",
          "524:  }).Status(invalid).Like(contour_api_v1.HTTPProxyStatus{",
          "526:  })",
          "527: }",
          "",
          "[Removed Lines]",
          "525:   CurrentStatus: k8s.StatusValid,",
          "",
          "[Added Lines]",
          "513:   CurrentStatus: string(status.ProxyStatusValid),",
          "",
          "---------------"
        ],
        "internal/featuretests/corspolicy_test.go||internal/featuretests/corspolicy_test.go": [
          "File: internal/featuretests/corspolicy_test.go -> internal/featuretests/corspolicy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "24:  envoy_v2 \"github.com/projectcontour/contour/internal/envoy/v2\"",
          "25:  \"github.com/projectcontour/contour/internal/fixture\"",
          "27:  v1 \"k8s.io/api/core/v1\"",
          "28:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "29: )",
          "",
          "[Removed Lines]",
          "26:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "26:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:    envoy_v2.RouteConfiguration(\"ingress_http\")),",
          "354:   TypeUrl: routeType,",
          "355:  }).Status(invvhost).Like(",
          "357:  )",
          "359: }",
          "",
          "[Removed Lines]",
          "356:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusInvalid},",
          "",
          "[Added Lines]",
          "356:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusInvalid)},",
          "",
          "---------------"
        ],
        "internal/featuretests/downstreamvalidation_test.go||internal/featuretests/downstreamvalidation_test.go": [
          "File: internal/featuretests/downstreamvalidation_test.go -> internal/featuretests/downstreamvalidation_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"github.com/projectcontour/contour/internal/dag\"",
          "22:  envoy_v2 \"github.com/projectcontour/contour/internal/envoy/v2\"",
          "23:  \"github.com/projectcontour/contour/internal/fixture\"",
          "25:  v1 \"k8s.io/api/core/v1\"",
          "26:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "27:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "",
          "[Removed Lines]",
          "24:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "24:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   ),",
          "115:   TypeUrl: listenerType,",
          "116:  }).Status(proxy).Like(",
          "118:  )",
          "120: }",
          "",
          "[Removed Lines]",
          "117:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "117:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------"
        ],
        "internal/featuretests/featuretests.go||internal/featuretests/featuretests.go": [
          "File: internal/featuretests/featuretests.go -> internal/featuretests/featuretests.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  \"github.com/projectcontour/contour/internal/metrics\"",
          "36:  \"github.com/projectcontour/contour/internal/protobuf\"",
          "37:  \"github.com/projectcontour/contour/internal/sorter\"",
          "38:  \"github.com/projectcontour/contour/internal/workgroup\"",
          "39:  \"github.com/projectcontour/contour/internal/xds\"",
          "40:  \"github.com/projectcontour/contour/internal/xdscache\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  rand.Seed(time.Now().Unix())",
          "90:  eh := &contour.EventHandler{",
          "91:   IsLeader:        make(chan struct{}),",
          "93:   FieldLogger:     log,",
          "94:   Sequence:        make(chan int, 1),",
          "95:   HoldoffDelay:    time.Duration(rand.Intn(100)) * time.Millisecond,",
          "",
          "[Removed Lines]",
          "88:  statusCache := &k8s.StatusCacher{}",
          "92:   StatusClient:    statusCache,",
          "",
          "[Added Lines]",
          "89:  statusUpdateCacher := &k8s.StatusUpdateCacher{}",
          "92:   StatusUpdater:   statusUpdateCacher,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:  require.NoError(t, err)",
          "149:  rh := &resourceEventHandler{",
          "154:  }",
          "156:  ctx, cancel := context.WithCancel(context.Background())",
          "",
          "[Removed Lines]",
          "150:   EventHandler:     eh,",
          "151:   EndpointsHandler: et,",
          "152:   Sequence:         eh.Sequence,",
          "153:   statusCache:      statusCache,",
          "",
          "[Added Lines]",
          "150:   EventHandler:       eh,",
          "151:   EndpointsHandler:   et,",
          "152:   Sequence:           eh.Sequence,",
          "153:   statusUpdateCacher: statusUpdateCacher,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:  }()",
          "163:  return rh, &Contour{",
          "167:   }, func() {",
          "169:    cc.Close()",
          "",
          "[Removed Lines]",
          "164:    T:           t,",
          "165:    ClientConn:  cc,",
          "166:    statusCache: statusCache,",
          "",
          "[Added Lines]",
          "164:    T:                 t,",
          "165:    ClientConn:        cc,",
          "166:    statusUpdateCache: statusUpdateCacher,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:  Sequence chan int",
          "187: }",
          "189: func (r *resourceEventHandler) OnAdd(obj interface{}) {",
          "192:  }",
          "194:  switch obj.(type) {",
          "",
          "[Removed Lines]",
          "186:  statusCache *k8s.StatusCacher",
          "190:  if r.statusCache.IsCacheable(obj) {",
          "191:   r.statusCache.Delete(obj)",
          "",
          "[Added Lines]",
          "186:  statusUpdateCacher *k8s.StatusUpdateCacher",
          "190:  if r.statusUpdateCacher.IsCacheable(obj) {",
          "191:   r.statusUpdateCacher.OnAdd(obj)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203: func (r *resourceEventHandler) OnUpdate(oldObj, newObj interface{}) {",
          "207:  }",
          "209:  switch newObj.(type) {",
          "",
          "[Removed Lines]",
          "205:  if r.statusCache.IsCacheable(oldObj) {",
          "206:   r.statusCache.Delete(oldObj)",
          "",
          "[Added Lines]",
          "205:  if r.statusUpdateCacher.IsCacheable(oldObj) {",
          "206:   r.statusUpdateCacher.OnDelete(oldObj)",
          "207:  }",
          "209:  if r.statusUpdateCacher.IsCacheable(newObj) {",
          "210:   r.statusUpdateCacher.OnAdd(newObj)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218: func (r *resourceEventHandler) OnDelete(obj interface{}) {",
          "223:  }",
          "225:  switch obj.(type) {",
          "",
          "[Removed Lines]",
          "221:  if r.statusCache.IsCacheable(obj) {",
          "222:   r.statusCache.Delete(obj)",
          "",
          "[Added Lines]",
          "225:  if r.statusUpdateCacher.IsCacheable(obj) {",
          "226:   r.statusUpdateCacher.OnDelete(obj)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "302:  return s.Contour",
          "303: }",
          "305: type Contour struct {",
          "310: }",
          "314: func (c *Contour) Status(obj interface{}) *statusResult {",
          "317:  return &statusResult{",
          "318:   Contour: c,",
          "",
          "[Removed Lines]",
          "309:  statusCache *k8s.StatusCacher",
          "315:  s, err := c.statusCache.GetStatus(obj)",
          "",
          "[Added Lines]",
          "311: func (s *statusResult) HasError(condType, reason, message string) *Contour {",
          "312:  assert.Equal(s.T, s.Have.CurrentStatus, string(status.ProxyStatusInvalid))",
          "313:  assert.Equal(s.T, s.Have.Description, `At least one error present, see Errors for details`)",
          "314:  validCond := s.Have.GetConditionFor(contour_api_v1.ValidConditionType)",
          "315:  assert.NotNil(s.T, validCond)",
          "317:  subCond, ok := validCond.GetError(condType)",
          "318:  if !ok {",
          "319:   s.T.Fatalf(\"Did not find error %s\", condType)",
          "320:  }",
          "321:  assert.Equal(s.T, reason, subCond.Reason)",
          "322:  assert.Equal(s.T, message, subCond.Message)",
          "324:  return s.Contour",
          "325: }",
          "331:  statusUpdateCache *k8s.StatusUpdateCacher",
          "337:  s, err := c.statusUpdateCache.GetStatus(obj)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "325: func (c *Contour) NoStatus(obj interface{}) *Contour {",
          "327:   c.T.Errorf(\"found cached object status, wanted no status\")",
          "328:  }",
          "",
          "[Removed Lines]",
          "326:  if _, err := c.statusCache.GetStatus(obj); err == nil {",
          "",
          "[Added Lines]",
          "348:  if _, err := c.statusUpdateCache.GetStatus(obj); err == nil {",
          "",
          "---------------"
        ],
        "internal/featuretests/ingressclass_test.go||internal/featuretests/ingressclass_test.go": [
          "File: internal/featuretests/ingressclass_test.go -> internal/featuretests/ingressclass_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/projectcontour/contour/internal/contour\"",
          "23:  envoy_v2 \"github.com/projectcontour/contour/internal/envoy/v2\"",
          "24:  \"github.com/projectcontour/contour/internal/fixture\"",
          "26:  v1 \"k8s.io/api/core/v1\"",
          "27:  \"k8s.io/api/networking/v1beta1\"",
          "28:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "25:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "25:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501: func TestIngressClassUpdate(t *testing.T) {",
          "502:  rh, c, done := setup(t, func(reh *contour.EventHandler) {",
          "503:   reh.Builder.Source.IngressClass = \"contour\"",
          "504:  })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:  t.Skip(\"Test disabled, see issue #2964\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "543:   ),",
          "544:   TypeUrl: routeType,",
          "545:  }).Status(vhost).Like(",
          "547:  )",
          "",
          "[Removed Lines]",
          "546:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "548:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------"
        ],
        "internal/featuretests/replaceprefix_test.go||internal/featuretests/replaceprefix_test.go": [
          "File: internal/featuretests/replaceprefix_test.go -> internal/featuretests/replaceprefix_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "22:  envoy_v2 \"github.com/projectcontour/contour/internal/envoy/v2\"",
          "23:  \"github.com/projectcontour/contour/internal/fixture\"",
          "25:  v1 \"k8s.io/api/core/v1\"",
          "26:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "27:  \"k8s.io/client-go/tools/cache\"",
          "",
          "[Removed Lines]",
          "24:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "24:  \"github.com/projectcontour/contour/internal/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   ),",
          "85:   TypeUrl: routeType,",
          "86:  }).Status(vhost).Like(",
          "88:  )",
          "",
          "[Removed Lines]",
          "87:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "87:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:    envoy_v2.RouteConfiguration(\"ingress_http\"),",
          "103:   ),",
          "104:   TypeUrl: routeType,",
          "111:  vhost = update(rh, vhost,",
          "",
          "[Removed Lines]",
          "105:  }).Status(vhost).Equals(contour_api_v1.HTTPProxyStatus{",
          "106:   CurrentStatus: k8s.StatusInvalid,",
          "107:   Description:   \"ambiguous prefix replacement\",",
          "108:  })",
          "",
          "[Added Lines]",
          "105:  }).Status(vhost).HasError(\"PrefixReplaceError\", \"AmbiguousReplacement\", \"ambiguous prefix replacement\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:   ),",
          "135:   TypeUrl: routeType,",
          "136:  }).Status(vhost).Like(",
          "138:  )",
          "",
          "[Removed Lines]",
          "137:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "134:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:    envoy_v2.RouteConfiguration(\"ingress_http\"),",
          "154:   ),",
          "155:   TypeUrl: routeType,",
          "162:  vhost = update(rh, vhost,",
          "",
          "[Removed Lines]",
          "156:  }).Status(vhost).Equals(contour_api_v1.HTTPProxyStatus{",
          "157:   CurrentStatus: k8s.StatusInvalid,",
          "158:   Description:   \"duplicate replacement prefix '/foo'\",",
          "159:  })",
          "",
          "[Added Lines]",
          "153:  }).Status(vhost).HasError(\"PrefixReplaceError\", \"DuplicateReplacement\", \"duplicate replacement prefix '/foo'\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:   ),",
          "186:   TypeUrl: routeType,",
          "187:  }).Status(vhost).Like(",
          "189:  )",
          "",
          "[Removed Lines]",
          "188:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "182:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "209:   ),",
          "210:   TypeUrl: routeType,",
          "211:  }).Status(vhost).Like(",
          "213:  )",
          "214: }",
          "",
          "[Removed Lines]",
          "212:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "206:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "291:   ),",
          "292:   TypeUrl: routeType,",
          "293:  }).Status(vhost1).Like(",
          "295:  ).Status(vhost2).Like(",
          "297:  )",
          "",
          "[Removed Lines]",
          "294:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "296:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "288:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "290:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "328:   ),",
          "329:   TypeUrl: routeType,",
          "330:  }).Status(vhost1).Like(",
          "332:  ).Status(vhost2).Like(",
          "334:  )",
          "335: }",
          "",
          "[Removed Lines]",
          "331:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "333:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "325:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "327:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "412:   ),",
          "413:   TypeUrl: routeType,",
          "414:  }).Status(vhost1).Like(",
          "416:  ).Status(vhost2).Like(",
          "418:  )",
          "",
          "[Removed Lines]",
          "415:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "417:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "409:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "411:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "453:   ),",
          "454:   TypeUrl: routeType,",
          "455:  }).Status(vhost1).Like(",
          "457:  ).Status(vhost2).Like(",
          "459:  )",
          "460: }",
          "",
          "[Removed Lines]",
          "456:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "458:   contour_api_v1.HTTPProxyStatus{CurrentStatus: k8s.StatusValid},",
          "",
          "[Added Lines]",
          "450:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "452:   contour_api_v1.HTTPProxyStatus{CurrentStatus: string(status.ProxyStatusValid)},",
          "",
          "---------------"
        ],
        "internal/fixture/detailedcondition.go||internal/fixture/detailedcondition.go": [
          "File: internal/fixture/detailedcondition.go -> internal/fixture/detailedcondition.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package fixture",
          "16: import (",
          "17:  v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "18: )",
          "21: type DetailedConditionBuilder v1.DetailedCondition",
          "24: func NewValidCondition() *DetailedConditionBuilder {",
          "25:  b := &DetailedConditionBuilder{",
          "26:   Condition: v1.Condition{",
          "27:    Type: v1.ValidConditionType,",
          "28:   },",
          "29:  }",
          "31:  return b",
          "32: }",
          "34: func (dcb *DetailedConditionBuilder) WithGeneration(gen int64) *DetailedConditionBuilder {",
          "35:  dcb.ObservedGeneration = gen",
          "36:  return dcb",
          "37: }",
          "39: func (dcb *DetailedConditionBuilder) Valid() v1.DetailedCondition {",
          "41:  dc := (*v1.DetailedCondition)(dcb)",
          "42:  dc.Status = v1.ConditionTrue",
          "43:  dc.Reason = \"Valid\"",
          "44:  dc.Message = \"Valid HTTPProxy\"",
          "46:  return *dc",
          "47: }",
          "49: func (dcb *DetailedConditionBuilder) Orphaned() v1.DetailedCondition {",
          "51:  dc := (*v1.DetailedCondition)(dcb)",
          "52:  dc.AddError(\"Orphaned\", \"Orphaned\", \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "54:  return *dc",
          "55: }",
          "57: func (dcb *DetailedConditionBuilder) WithError(errorType, reason, message string) v1.DetailedCondition {",
          "59:  dc := (*v1.DetailedCondition)(dcb)",
          "60:  dc.AddError(errorType, reason, message)",
          "62:  return *dc",
          "64: }",
          "66: func (dcb *DetailedConditionBuilder) WithErrorf(errorType, reason, formatmsg string, args ...interface{}) v1.DetailedCondition {",
          "68:  dc := (*v1.DetailedCondition)(dcb)",
          "69:  dc.AddErrorf(errorType, reason, formatmsg, args...)",
          "71:  return *dc",
          "73: }",
          "75: func (dcb *DetailedConditionBuilder) WithWarning(errorType, reason, message string) v1.DetailedCondition {",
          "77:  dc := (*v1.DetailedCondition)(dcb)",
          "78:  dc.AddWarning(errorType, reason, message)",
          "80:  return *dc",
          "82: }",
          "84: func (dcb *DetailedConditionBuilder) WithWarningf(warnType, reason, formatmsg string, args ...interface{}) v1.DetailedCondition {",
          "86:  dc := (*v1.DetailedCondition)(dcb)",
          "87:  dc.AddErrorf(warnType, reason, formatmsg, args...)",
          "89:  return *dc",
          "91: }",
          "",
          "---------------"
        ],
        "internal/k8s/status.go||internal/k8s/status.go": [
          "File: internal/k8s/status.go -> internal/k8s/status.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: package k8s",
          "16: import (",
          "21: )",
          "33: }",
          "38: }",
          "50: }",
          "60:  }",
          "61: }",
          "68: }",
          "79:  }",
          "82: }",
          "93:  }",
          "96: }",
          "101: }",
          "106: }",
          "132: }",
          "",
          "[Removed Lines]",
          "17:  \"errors\"",
          "18:  \"fmt\"",
          "20:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "23: const (",
          "24:  StatusValid    = \"valid\"",
          "25:  StatusInvalid  = \"invalid\"",
          "26:  StatusOrphaned = \"orphaned\"",
          "27: )",
          "30: type StatusClient interface {",
          "31:  SetStatus(status string, desc string, obj interface{}) error",
          "32:  GetStatus(obj interface{}) (*contour_api_v1.HTTPProxyStatus, error)",
          "36: type StatusCacher struct {",
          "37:  objectStatus map[string]contour_api_v1.HTTPProxyStatus",
          "40: func objectKey(obj interface{}) string {",
          "41:  switch obj := obj.(type) {",
          "42:  case *contour_api_v1.HTTPProxy:",
          "43:   return fmt.Sprintf(\"%s/%s/%s\",",
          "44:    KindOf(obj),",
          "45:    obj.GetObjectMeta().GetNamespace(),",
          "46:    obj.GetObjectMeta().GetName())",
          "47:  default:",
          "48:   panic(fmt.Sprintf(\"status caching not supported for object type %T\", obj))",
          "49:  }",
          "54: func (c *StatusCacher) IsCacheable(obj interface{}) bool {",
          "55:  switch obj.(type) {",
          "56:  case *contour_api_v1.HTTPProxy:",
          "57:   return true",
          "58:  default:",
          "59:   return false",
          "64: func (c *StatusCacher) Delete(obj interface{}) {",
          "65:  if c.objectStatus != nil {",
          "66:   delete(c.objectStatus, objectKey(obj))",
          "67:  }",
          "71: func (c *StatusCacher) GetStatus(obj interface{}) (*contour_api_v1.HTTPProxyStatus, error) {",
          "72:  if c.objectStatus == nil {",
          "73:   c.objectStatus = make(map[string]contour_api_v1.HTTPProxyStatus)",
          "74:  }",
          "76:  s, ok := c.objectStatus[objectKey(obj)]",
          "77:  if !ok {",
          "78:   return nil, fmt.Errorf(\"no status for key '%s'\", objectKey(obj))",
          "81:  return &s, nil",
          "85: func (c *StatusCacher) SetStatus(status, desc string, obj interface{}) error {",
          "86:  if c.objectStatus == nil {",
          "87:   c.objectStatus = make(map[string]contour_api_v1.HTTPProxyStatus)",
          "88:  }",
          "90:  c.objectStatus[objectKey(obj)] = contour_api_v1.HTTPProxyStatus{",
          "91:   CurrentStatus: status,",
          "92:   Description:   desc,",
          "95:  return nil",
          "99: type StatusWriter struct {",
          "100:  Updater StatusUpdater",
          "104: func (irs *StatusWriter) GetStatus(obj interface{}) (*contour_api_v1.HTTPProxyStatus, error) {",
          "105:  return nil, errors.New(\"not implemented\")",
          "109: func (irs *StatusWriter) SetStatus(status, desc string, existing interface{}) error {",
          "110:  switch exist := existing.(type) {",
          "111:  case *contour_api_v1.HTTPProxy:",
          "114:   irs.Updater.Update(exist.Name,",
          "115:    exist.Namespace,",
          "116:    contour_api_v1.HTTPProxyGVR,",
          "117:    StatusMutatorFunc(func(obj interface{}) interface{} {",
          "118:     switch o := obj.(type) {",
          "119:     case *contour_api_v1.HTTPProxy:",
          "120:      dco := o.DeepCopy()",
          "121:      dco.Status.CurrentStatus = status",
          "122:      dco.Status.Description = desc",
          "123:      return dco",
          "124:     default:",
          "125:      panic(fmt.Sprintf(\"Unsupported object %s/%s in status Address mutator\",",
          "126:       exist.Namespace, exist.Name,",
          "127:      ))",
          "128:     }",
          "129:    }))",
          "130:  }",
          "131:  return nil",
          "",
          "[Added Lines]",
          "17:  \"context\"",
          "19:  \"github.com/sirupsen/logrus\"",
          "20:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "21:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "22:  \"k8s.io/apimachinery/pkg/types\"",
          "27: type StatusUpdate struct {",
          "28:  NamespacedName types.NamespacedName",
          "29:  Resource       schema.GroupVersionResource",
          "30:  Mutator        StatusMutator",
          "33: func NewStatusUpdate(name, namespace string, gvr schema.GroupVersionResource, mutator StatusMutator) StatusUpdate {",
          "34:  return StatusUpdate{",
          "35:   NamespacedName: types.NamespacedName{",
          "36:    Name:      name,",
          "37:    Namespace: namespace,",
          "38:   },",
          "39:   Resource: gvr,",
          "40:   Mutator:  mutator,",
          "41:  }",
          "45: type StatusMutator interface {",
          "46:  Mutate(obj interface{}) interface{}",
          "50: type StatusMutatorFunc func(interface{}) interface{}",
          "53: func (m StatusMutatorFunc) Mutate(old interface{}) interface{} {",
          "54:  if m == nil {",
          "55:   return nil",
          "58:  return m(old)",
          "62: type StatusUpdateHandler struct {",
          "63:  Log             logrus.FieldLogger",
          "64:  Clients         *Clients",
          "65:  UpdateChannel   chan StatusUpdate",
          "66:  LeaderElected   chan struct{}",
          "67:  IsLeader        bool",
          "68:  Converter       *UnstructuredConverter",
          "69:  InformerFactory InformerFactory",
          "74: func (suh *StatusUpdateHandler) Start(stop <-chan struct{}) error {",
          "76:  for {",
          "77:   select {",
          "78:   case <-stop:",
          "79:    return nil",
          "80:   case <-suh.LeaderElected:",
          "81:    suh.Log.Info(\"elected leader\")",
          "82:    suh.IsLeader = true",
          "84:    suh.LeaderElected = nil",
          "85:   case upd := <-suh.UpdateChannel:",
          "86:    if !suh.IsLeader {",
          "87:     suh.Log.WithField(\"name\", upd.NamespacedName.Name).",
          "88:      WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "89:      Debug(\"not leader, not applying update\")",
          "90:     continue",
          "91:    }",
          "93:    suh.Log.WithField(\"name\", upd.NamespacedName.Name).",
          "94:     WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "95:     Debug(\"received a status update\")",
          "98:    lister := suh.InformerFactory.ForResource(upd.Resource).Lister()",
          "99:    uObj, err := lister.ByNamespace(upd.NamespacedName.Namespace).Get(upd.NamespacedName.Name)",
          "100:    if err != nil {",
          "101:     suh.Log.WithError(err).",
          "102:      WithField(\"name\", upd.NamespacedName.Name).",
          "103:      WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "104:      WithField(\"resource\", upd.Resource).",
          "105:      Error(\"unable to retrieve object for updating\")",
          "106:     continue",
          "107:    }",
          "109:    obj, err := suh.Converter.FromUnstructured(uObj)",
          "110:    if err != nil {",
          "111:     suh.Log.WithError(err).",
          "112:      WithField(\"name\", upd.NamespacedName.Name).",
          "113:      WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "114:      Error(\"unable to convert from unstructured\")",
          "115:     continue",
          "116:    }",
          "118:    newObj := upd.Mutator.Mutate(obj)",
          "120:    if IsStatusEqual(obj, newObj) {",
          "121:     suh.Log.WithField(\"name\", upd.NamespacedName.Name).",
          "122:      WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "123:      Debug(\"Update was a no-op\")",
          "124:     continue",
          "125:    }",
          "127:    usNewObj, err := suh.Converter.ToUnstructured(newObj)",
          "128:    if err != nil {",
          "129:     suh.Log.WithError(err).",
          "130:      WithField(\"name\", upd.NamespacedName.Name).",
          "131:      WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "132:      Error(\"unable to convert update to unstructured\")",
          "133:     continue",
          "134:    }",
          "136:    _, err = suh.Clients.DynamicClient().Resource(upd.Resource).Namespace(upd.NamespacedName.Namespace).UpdateStatus(context.TODO(), usNewObj, metav1.UpdateOptions{})",
          "137:    if err != nil {",
          "138:     suh.Log.WithError(err).",
          "139:      WithField(\"name\", upd.NamespacedName.Name).",
          "140:      WithField(\"namespace\", upd.NamespacedName.Namespace).",
          "141:      Error(\"unable to update status\")",
          "142:     continue",
          "143:    }",
          "144:   }",
          "151: func (suh *StatusUpdateHandler) Writer() StatusUpdater {",
          "153:  if suh.UpdateChannel == nil {",
          "154:   suh.UpdateChannel = make(chan StatusUpdate, 100)",
          "157:  return &StatusUpdateWriter{",
          "158:   UpdateChannel: suh.UpdateChannel,",
          "159:  }",
          "163: type StatusUpdater interface {",
          "164:  Send(su StatusUpdate)",
          "168: type StatusUpdateWriter struct {",
          "169:  UpdateChannel chan StatusUpdate",
          "173: func (suw *StatusUpdateWriter) Send(update StatusUpdate) {",
          "174:  suw.UpdateChannel <- update",
          "",
          "---------------"
        ],
        "internal/k8s/status_test.go||internal/k8s/status_test.go": [
          "File: internal/k8s/status_test.go -> internal/k8s/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/k8s/statusaddress.go||internal/k8s/statusaddress.go": [
          "File: internal/k8s/statusaddress.go -> internal/k8s/statusaddress.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   WithField(\"defined-ingress-class\", s.IngressClass).",
          "86:   Debug(\"received an object, sending status address update\")",
          "89:   typed.GetObjectMeta().GetName(),",
          "90:   typed.GetObjectMeta().GetNamespace(),",
          "91:   gvr,",
          "",
          "[Removed Lines]",
          "88:  s.StatusUpdater.Update(",
          "",
          "[Added Lines]",
          "88:  s.StatusUpdater.Send(NewStatusUpdate(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     ))",
          "106:    }",
          "107:   }),",
          "109: }",
          "111: func (s *StatusAddressUpdater) OnUpdate(oldObj, newObj interface{}) {",
          "",
          "[Removed Lines]",
          "108:  )",
          "",
          "[Added Lines]",
          "108:  ))",
          "",
          "---------------"
        ],
        "internal/k8s/statusaddress_test.go||internal/k8s/statusaddress_test.go": [
          "File: internal/k8s/statusaddress_test.go -> internal/k8s/statusaddress_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:  run := func(t *testing.T, name string, tc sauTestcase) {",
          "206:   suc := StatusUpdateCacher{}",
          "208:    t.Fatal(\"unable to add object to cache\")",
          "209:   }",
          "",
          "[Removed Lines]",
          "207:   if !suc.AddObject(tc.objname, tc.objname, tc.gvr, tc.preop) {",
          "",
          "[Added Lines]",
          "207:   if !suc.Add(tc.objname, tc.objname, tc.gvr, tc.preop) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:   isu.OnAdd(tc.preop)",
          "222:   if !IsStatusEqual(tc.postop, newObj) {",
          "223:    t.Fatalf(\"%s: Status not equal: %s\\n\", name, cmp.Diff(tc.postop, newObj))",
          "224:   }",
          "",
          "[Removed Lines]",
          "221:   newObj := suc.GetObject(tc.objname, tc.objname, tc.gvr)",
          "",
          "[Added Lines]",
          "221:   newObj := suc.Get(tc.objname, tc.objname, tc.gvr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:  run := func(t *testing.T, name string, tc sauTestcase) {",
          "342:   suc := StatusUpdateCacher{}",
          "344:    t.Fatal(\"unable to add object to cache\")",
          "345:   }",
          "",
          "[Removed Lines]",
          "343:   if !suc.AddObject(tc.objname, tc.objname, tc.gvr, tc.preop) {",
          "",
          "[Added Lines]",
          "343:   if !suc.Add(tc.objname, tc.objname, tc.gvr, tc.preop) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:   isu.OnUpdate(tc.preop, tc.preop)",
          "358:   if !IsStatusEqual(tc.postop, newObj) {",
          "359:    t.Fatalf(\"%s: Status not equal: %s\\n\", name, cmp.Diff(tc.postop, newObj))",
          "360:   }",
          "",
          "[Removed Lines]",
          "357:   newObj := suc.GetObject(tc.objname, tc.objname, tc.gvr)",
          "",
          "[Added Lines]",
          "357:   newObj := suc.Get(tc.objname, tc.objname, tc.gvr)",
          "",
          "---------------"
        ],
        "internal/k8s/statuscache.go||internal/k8s/statuscache.go": [
          "File: internal/k8s/statuscache.go -> internal/k8s/statuscache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package k8s",
          "16: import (",
          "17:  \"fmt\"",
          "19:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "20:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "21: )",
          "24: type StatusUpdateCacher struct {",
          "25:  objectCache map[string]interface{}",
          "26: }",
          "30: func (suc *StatusUpdateCacher) IsCacheable(obj interface{}) bool {",
          "31:  switch obj.(type) {",
          "32:  case *contour_api_v1.HTTPProxy:",
          "33:   return true",
          "34:  default:",
          "35:   return false",
          "36:  }",
          "37: }",
          "40: func (suc *StatusUpdateCacher) OnDelete(obj interface{}) {",
          "41:  if suc.objectCache != nil {",
          "42:   switch o := obj.(type) {",
          "43:   case *contour_api_v1.HTTPProxy:",
          "44:    delete(suc.objectCache, suc.objKey(o.Name, o.Namespace, contour_api_v1.HTTPProxyGVR))",
          "45:   default:",
          "46:    panic(fmt.Sprintf(\"status caching not supported for object type %T\", obj))",
          "47:   }",
          "49:  }",
          "50: }",
          "53: func (suc *StatusUpdateCacher) OnAdd(obj interface{}) {",
          "54:  if suc.objectCache == nil {",
          "55:   suc.objectCache = make(map[string]interface{})",
          "56:  }",
          "58:  switch o := obj.(type) {",
          "59:  case *contour_api_v1.HTTPProxy:",
          "60:   suc.objectCache[suc.objKey(o.Name, o.Namespace, contour_api_v1.HTTPProxyGVR)] = obj",
          "61:  default:",
          "62:   panic(fmt.Sprintf(\"status caching not supported for object type %T\", obj))",
          "63:  }",
          "65: }",
          "68: func (suc *StatusUpdateCacher) Get(name, namespace string, gvr schema.GroupVersionResource) interface{} {",
          "70:  if suc.objectCache == nil {",
          "71:   suc.objectCache = make(map[string]interface{})",
          "72:  }",
          "74:  obj, ok := suc.objectCache[suc.objKey(name, namespace, gvr)]",
          "75:  if ok {",
          "76:   return obj",
          "77:  }",
          "78:  return nil",
          "80: }",
          "82: func (suc *StatusUpdateCacher) Add(name, namespace string, gvr schema.GroupVersionResource, obj interface{}) bool {",
          "84:  if suc.objectCache == nil {",
          "85:   suc.objectCache = make(map[string]interface{})",
          "86:  }",
          "88:  prefix := suc.objKey(name, namespace, gvr)",
          "89:  _, ok := suc.objectCache[prefix]",
          "90:  if ok {",
          "91:   return false",
          "92:  }",
          "94:  suc.objectCache[prefix] = obj",
          "96:  return true",
          "98: }",
          "100: func (suc *StatusUpdateCacher) GetStatus(obj interface{}) (*contour_api_v1.HTTPProxyStatus, error) {",
          "101:  switch o := obj.(type) {",
          "102:  case *contour_api_v1.HTTPProxy:",
          "103:   objectKey := suc.objKey(o.Name, o.Namespace, contour_api_v1.HTTPProxyGVR)",
          "104:   cachedObj, ok := suc.objectCache[objectKey]",
          "105:   if ok {",
          "106:    switch c := cachedObj.(type) {",
          "107:    case *contour_api_v1.HTTPProxy:",
          "108:     return &c.Status, nil",
          "109:    }",
          "110:   }",
          "111:   return nil, fmt.Errorf(\"no status for key '%s'\", objectKey)",
          "112:  default:",
          "113:   panic(fmt.Sprintf(\"status caching not supported for object type %T\", obj))",
          "114:  }",
          "115: }",
          "117: func (suc *StatusUpdateCacher) objKey(name, namespace string, gvr schema.GroupVersionResource) string {",
          "119:  return fmt.Sprintf(\"%s/%s/%s/%s\", gvr.Group, gvr.Resource, namespace, name)",
          "120: }",
          "122: func (suc *StatusUpdateCacher) Send(su StatusUpdate) {",
          "123:  if suc.objectCache == nil {",
          "124:   suc.objectCache = make(map[string]interface{})",
          "125:  }",
          "126:  objKey := suc.objKey(su.NamespacedName.Name, su.NamespacedName.Namespace, su.Resource)",
          "127:  obj, ok := suc.objectCache[objKey]",
          "128:  if ok {",
          "129:   suc.objectCache[objKey] = su.Mutator.Mutate(obj)",
          "130:  }",
          "132: }",
          "",
          "---------------"
        ],
        "internal/k8s/statusupdater.go||internal/k8s/statusupdater.go": [
          "File: internal/k8s/statusupdater.go -> internal/k8s/statusupdater.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/status/cache.go||internal/status/cache.go": [
          "File: internal/status/cache.go -> internal/status/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import (",
          "19:  \"time\"",
          "22:  \"github.com/projectcontour/contour/internal/k8s\"",
          "23:  v1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "24:  \"k8s.io/apimachinery/pkg/types\"",
          "25: )",
          "28: func NewCache() Cache {",
          "29:  return Cache{",
          "",
          "[Removed Lines]",
          "21:  projcontour \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "",
          "[Added Lines]",
          "21:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "27: type ProxyStatus string",
          "29: const (",
          "30:  ProxyStatusValid    ProxyStatus = \"valid\"",
          "31:  ProxyStatusInvalid  ProxyStatus = \"invalid\"",
          "32:  ProxyStatusOrphaned ProxyStatus = \"orphaned\"",
          "34:  OrphanedConditionType ConditionType = \"Orphaned\"",
          "35: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  pu := &ProxyUpdate{",
          "48:   Fullname:       k8s.NamespacedNameOf(proxy),",
          "49:   Generation:     proxy.Generation,",
          "50:   TransitionTime: v1.NewTime(time.Now()),",
          "52:  }",
          "54:  return pu, func() {",
          "",
          "[Removed Lines]",
          "46: func (c Cache) ProxyAccessor(proxy *projcontour.HTTPProxy) (*ProxyUpdate, func()) {",
          "51:   Conditions:     make(map[ConditionType]*projcontour.DetailedCondition),",
          "",
          "[Added Lines]",
          "56: func (c Cache) ProxyAccessor(proxy *contour_api_v1.HTTPProxy) (*ProxyUpdate, func()) {",
          "61:   Conditions:     make(map[ConditionType]*contour_api_v1.DetailedCondition),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   return",
          "62:  }",
          "64:  c.proxyUpdates[pu.Fullname] = pu",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  _, ok := c.proxyUpdates[pu.Fullname]",
          "75:  if ok {",
          "81:   if c.proxyUpdates[pu.Fullname].Conditions[ValidCondition].Status == contour_api_v1.ConditionFalse {",
          "82:    if pu.Conditions[ValidCondition].Status == contour_api_v1.ConditionTrue {",
          "83:     return",
          "84:    }",
          "85:   }",
          "86:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:   update := k8s.StatusUpdate{",
          "80:    NamespacedName: fullname,",
          "82:    Mutator:        pu,",
          "83:   }",
          "",
          "[Removed Lines]",
          "81:    Resource:       projcontour.HTTPProxyGVR,",
          "",
          "[Added Lines]",
          "104:    Resource:       contour_api_v1.HTTPProxyGVR,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:  return psu",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: func (c Cache) GetProxyUpdates() []*ProxyUpdate {",
          "120:  var allUpdates []*ProxyUpdate",
          "121:  for _, pu := range c.proxyUpdates {",
          "122:   allUpdates = append(allUpdates, pu)",
          "123:  }",
          "124:  return allUpdates",
          "125: }",
          "",
          "---------------"
        ],
        "internal/status/proxystatus.go||internal/status/proxystatus.go": [
          "File: internal/status/proxystatus.go -> internal/status/proxystatus.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"fmt\"",
          "18:  projectcontour \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "20:  v1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "21:  \"k8s.io/apimachinery/pkg/types\"",
          "22: )",
          "",
          "[Removed Lines]",
          "19:  \"github.com/projectcontour/contour/internal/k8s\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: type ProxyUpdate struct {",
          "37:  Fullname       types.NamespacedName",
          "38:  Generation     int64",
          "39:  TransitionTime v1.Time",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  Vhost          string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:  if !ok {",
          "52:   newDc := &projectcontour.DetailedCondition{}",
          "53:   newDc.Type = string(cond)",
          "55:   pu.Conditions[cond] = newDc",
          "56:   return newDc",
          "57:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   newDc.ObservedGeneration = pu.Generation",
          "52:   if cond == ValidCondition {",
          "53:    newDc.Status = projectcontour.ConditionTrue",
          "54:    newDc.Reason = \"Valid\"",
          "55:    newDc.Message = \"Valid HTTPProxy\"",
          "56:   } else {",
          "57:    newDc.Status = projectcontour.ConditionFalse",
          "58:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:  switch validCond.Status {",
          "91:  case projectcontour.ConditionTrue:",
          "95:  case projectcontour.ConditionFalse:",
          "99:    proxy.Status.Description = orphanCond.Message",
          "100:    break",
          "101:   }",
          "104:  }",
          "106:  return proxy",
          "",
          "[Removed Lines]",
          "93:   proxy.Status.CurrentStatus = k8s.StatusValid",
          "94:   proxy.Status.Description = validCond.Reason + \": \" + validCond.Message",
          "96:   orphanCond, orphaned := validCond.GetError(k8s.StatusOrphaned)",
          "97:   if orphaned {",
          "98:    proxy.Status.CurrentStatus = k8s.StatusOrphaned",
          "102:   proxy.Status.CurrentStatus = k8s.StatusInvalid",
          "103:   proxy.Status.Description = validCond.Reason + \": \" + validCond.Message",
          "",
          "[Added Lines]",
          "97:   proxy.Status.CurrentStatus = string(ProxyStatusValid)",
          "98:   proxy.Status.Description = validCond.Message",
          "100:   if orphanCond, ok := validCond.GetError(string(OrphanedConditionType)); ok {",
          "101:    proxy.Status.CurrentStatus = string(ProxyStatusOrphaned)",
          "105:   proxy.Status.CurrentStatus = string(ProxyStatusInvalid)",
          "108:   proxy.Status.Description = validCond.Message",
          "",
          "---------------"
        ],
        "internal/status/proxystatus_test.go||internal/status/proxystatus_test.go": [
          "File: internal/status/proxystatus_test.go -> internal/status/proxystatus_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"testing\"",
          "17:  \"time\"",
          "20:  \"github.com/projectcontour/contour/internal/k8s\"",
          "21:  \"github.com/stretchr/testify/assert\"",
          "22:  v1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "23: )",
          "25: func TestConditionFor(t *testing.T) {",
          "28:    Type: \"Valid\",",
          "29:   },",
          "30:  }",
          "32:  pu := ProxyUpdate{",
          "33:   Fullname: k8s.NamespacedNameFrom(\"test/test\"),",
          "35:    ValidCondition: &simpleValidCondition,",
          "36:   },",
          "37:  }",
          "",
          "[Removed Lines]",
          "19:  projectcontour \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "26:  simpleValidCondition := projectcontour.DetailedCondition{",
          "27:   Condition: projectcontour.Condition{",
          "34:   Conditions: map[ConditionType]*projectcontour.DetailedCondition{",
          "",
          "[Added Lines]",
          "19:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "26:  simpleValidCondition := contour_api_v1.DetailedCondition{",
          "27:   Condition: contour_api_v1.Condition{",
          "34:   Conditions: map[ConditionType]*contour_api_v1.DetailedCondition{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:  emptyProxyUpdate := ProxyUpdate{",
          "44:   Fullname:   k8s.NamespacedNameFrom(\"test/test\"),",
          "46:  }",
          "51:   },",
          "52:  }",
          "53:  gotEmpty := emptyProxyUpdate.ConditionFor(ValidCondition)",
          "",
          "[Removed Lines]",
          "45:   Conditions: make(map[ConditionType]*projectcontour.DetailedCondition),",
          "48:  newDc := projectcontour.DetailedCondition{",
          "49:   Condition: projectcontour.Condition{",
          "50:    Type: string(ValidCondition),",
          "",
          "[Added Lines]",
          "45:   Conditions: make(map[ConditionType]*contour_api_v1.DetailedCondition),",
          "48:  newDc := contour_api_v1.DetailedCondition{",
          "49:   Condition: contour_api_v1.Condition{",
          "50:    Type:    string(ValidCondition),",
          "51:    Status:  contour_api_v1.ConditionTrue,",
          "52:    Reason:  \"Valid\",",
          "53:    Message: \"Valid HTTPProxy\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: func TestStatusMutator(t *testing.T) {",
          "59:  type testcase struct {",
          "61:   proxyUpdate       ProxyUpdate",
          "63:   wantCurrentStatus string",
          "64:   wantDescription   string",
          "65:  }",
          "",
          "[Removed Lines]",
          "60:   testProxy         projectcontour.HTTPProxy",
          "62:   wantConditions    []projectcontour.DetailedCondition",
          "",
          "[Added Lines]",
          "63:   testProxy         contour_api_v1.HTTPProxy",
          "65:   wantConditions    []contour_api_v1.DetailedCondition",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:   newProxy := tc.proxyUpdate.Mutate(&tc.testProxy)",
          "73:   switch o := newProxy.(type) {",
          "75:    assert.Equal(t, tc.wantConditions, o.Status.Conditions, desc)",
          "76:    assert.Equal(t, tc.wantCurrentStatus, o.Status.CurrentStatus, desc)",
          "77:    assert.Equal(t, tc.wantDescription, o.Status.Description, desc)",
          "",
          "[Removed Lines]",
          "74:   case *projectcontour.HTTPProxy:",
          "",
          "[Added Lines]",
          "77:   case *contour_api_v1.HTTPProxy:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:  }",
          "83:  validConditionWarning := testcase{",
          "85:    ObjectMeta: v1.ObjectMeta{",
          "86:     Name:       \"test\",",
          "87:     Namespace:  \"test\",",
          "",
          "[Removed Lines]",
          "84:   testProxy: projectcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "87:   testProxy: contour_api_v1.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "92:    Fullname:       k8s.NamespacedNameFrom(\"test/test\"),",
          "93:    Generation:     testGeneration,",
          "94:    TransitionTime: testTransitionTime,",
          "96:     ValidCondition: {",
          "98:       Type:    string(ValidCondition),",
          "102:      },",
          "104:       {",
          "105:        Type:    \"TLSError\",",
          "106:        Reason:  \"TLSConfigError\",",
          "",
          "[Removed Lines]",
          "95:    Conditions: map[ConditionType]*projectcontour.DetailedCondition{",
          "97:      Condition: projectcontour.Condition{",
          "99:       Status:  projectcontour.ConditionTrue,",
          "100:       Reason:  \"TLSErrorTLSConfigError\",",
          "101:       Message: \"Syntax Error in TLS Config\",",
          "103:      Warnings: []projectcontour.SubCondition{",
          "",
          "[Added Lines]",
          "98:    Conditions: map[ConditionType]*contour_api_v1.DetailedCondition{",
          "100:      Condition: contour_api_v1.Condition{",
          "102:       Status:  contour_api_v1.ConditionTrue,",
          "103:       Reason:  \"Valid\",",
          "104:       Message: \"Valid HTTPProxy\",",
          "106:      Warnings: []contour_api_v1.SubCondition{",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "110:     },",
          "111:    },",
          "112:   },",
          "114:    {",
          "116:      Type:               string(ValidCondition),",
          "118:      ObservedGeneration: testGeneration,",
          "119:      LastTransitionTime: testTransitionTime,",
          "122:     },",
          "124:      {",
          "125:       Type:    \"TLSError\",",
          "126:       Reason:  \"TLSConfigError\",",
          "",
          "[Removed Lines]",
          "113:   wantConditions: []projectcontour.DetailedCondition{",
          "115:     Condition: projectcontour.Condition{",
          "117:      Status:             projectcontour.ConditionTrue,",
          "120:      Reason:             \"TLSErrorTLSConfigError\",",
          "121:      Message:            \"Syntax Error in TLS Config\",",
          "123:     Warnings: []projectcontour.SubCondition{",
          "",
          "[Added Lines]",
          "116:   wantConditions: []contour_api_v1.DetailedCondition{",
          "118:     Condition: contour_api_v1.Condition{",
          "120:      Status:             contour_api_v1.ConditionTrue,",
          "123:      Reason:             \"Valid\",",
          "124:      Message:            \"Valid HTTPProxy\",",
          "126:     Warnings: []contour_api_v1.SubCondition{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "129:     },",
          "130:    },",
          "131:   },",
          "134:  }",
          "135:  run(\"valid with one warning\", validConditionWarning)",
          "137:  inValidConditionError := testcase{",
          "139:    ObjectMeta: v1.ObjectMeta{",
          "140:     Name:       \"test\",",
          "141:     Namespace:  \"test\",",
          "",
          "[Removed Lines]",
          "132:   wantCurrentStatus: k8s.StatusValid,",
          "133:   wantDescription:   \"TLSErrorTLSConfigError: Syntax Error in TLS Config\",",
          "138:   testProxy: projectcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "135:   wantCurrentStatus: string(ProxyStatusValid),",
          "136:   wantDescription:   \"Valid HTTPProxy\",",
          "141:   testProxy: contour_api_v1.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "146:    Fullname:       k8s.NamespacedNameFrom(\"test/test\"),",
          "147:    Generation:     testGeneration,",
          "148:    TransitionTime: testTransitionTime,",
          "150:     ValidCondition: {",
          "152:       Type:    string(ValidCondition),",
          "156:      },",
          "158:       {",
          "159:        Type:    \"TLSError\",",
          "160:        Reason:  \"TLSConfigError\",",
          "",
          "[Removed Lines]",
          "149:    Conditions: map[ConditionType]*projectcontour.DetailedCondition{",
          "151:      Condition: projectcontour.Condition{",
          "153:       Status:  projectcontour.ConditionFalse,",
          "154:       Reason:  \"TLSErrorTLSConfigError\",",
          "155:       Message: \"Syntax Error in TLS Config\",",
          "157:      Errors: []projectcontour.SubCondition{",
          "",
          "[Added Lines]",
          "152:    Conditions: map[ConditionType]*contour_api_v1.DetailedCondition{",
          "154:      Condition: contour_api_v1.Condition{",
          "156:       Status:  contour_api_v1.ConditionFalse,",
          "157:       Reason:  \"ErrorPresent\",",
          "158:       Message: \"At least one error present, see Errors for details\",",
          "160:      Errors: []contour_api_v1.SubCondition{",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "164:     },",
          "165:    },",
          "166:   },",
          "168:    {",
          "170:      Type:               string(ValidCondition),",
          "172:      ObservedGeneration: testGeneration,",
          "173:      LastTransitionTime: testTransitionTime,",
          "176:     },",
          "178:      {",
          "179:       Type:    \"TLSError\",",
          "180:       Reason:  \"TLSConfigError\",",
          "",
          "[Removed Lines]",
          "167:   wantConditions: []projectcontour.DetailedCondition{",
          "169:     Condition: projectcontour.Condition{",
          "171:      Status:             projectcontour.ConditionFalse,",
          "174:      Reason:             \"TLSErrorTLSConfigError\",",
          "175:      Message:            \"Syntax Error in TLS Config\",",
          "177:     Errors: []projectcontour.SubCondition{",
          "",
          "[Added Lines]",
          "170:   wantConditions: []contour_api_v1.DetailedCondition{",
          "172:     Condition: contour_api_v1.Condition{",
          "174:      Status:             contour_api_v1.ConditionFalse,",
          "177:      Reason:             \"ErrorPresent\",",
          "178:      Message:            \"At least one error present, see Errors for details\",",
          "180:     Errors: []contour_api_v1.SubCondition{",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "183:     },",
          "184:    },",
          "185:   },",
          "188:  }",
          "189:  run(\"invalid status, one error\", inValidConditionError)",
          "191:  orphanedCondition := testcase{",
          "193:    ObjectMeta: v1.ObjectMeta{",
          "194:     Name:       \"test\",",
          "195:     Namespace:  \"test\",",
          "",
          "[Removed Lines]",
          "186:   wantCurrentStatus: k8s.StatusInvalid,",
          "187:   wantDescription:   \"TLSErrorTLSConfigError: Syntax Error in TLS Config\",",
          "192:   testProxy: projectcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "189:   wantCurrentStatus: string(ProxyStatusInvalid),",
          "190:   wantDescription:   \"At least one error present, see Errors for details\",",
          "195:   testProxy: contour_api_v1.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "200:    Fullname:       k8s.NamespacedNameFrom(\"test/test\"),",
          "201:    Generation:     testGeneration,",
          "202:    TransitionTime: testTransitionTime,",
          "204:     ValidCondition: {",
          "206:       Type:    string(ValidCondition),",
          "209:       Message: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "210:      },",
          "212:       {",
          "214:        Reason:  \"Orphaned\",",
          "215:        Message: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "216:       },",
          "",
          "[Removed Lines]",
          "203:    Conditions: map[ConditionType]*projectcontour.DetailedCondition{",
          "205:      Condition: projectcontour.Condition{",
          "207:       Status:  projectcontour.ConditionFalse,",
          "208:       Reason:  \"orphaned\",",
          "211:      Errors: []projectcontour.SubCondition{",
          "213:        Type:    \"orphaned\",",
          "",
          "[Added Lines]",
          "206:    Conditions: map[ConditionType]*contour_api_v1.DetailedCondition{",
          "208:      Condition: contour_api_v1.Condition{",
          "210:       Status:  contour_api_v1.ConditionFalse,",
          "211:       Reason:  \"Orphaned\",",
          "214:      Errors: []contour_api_v1.SubCondition{",
          "216:        Type:    \"Orphaned\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "218:     },",
          "219:    },",
          "220:   },",
          "222:    {",
          "224:      Type:               string(ValidCondition),",
          "226:      ObservedGeneration: testGeneration,",
          "227:      LastTransitionTime: testTransitionTime,",
          "229:      Message:            \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "230:     },",
          "232:      {",
          "234:       Reason:  \"Orphaned\",",
          "235:       Message: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "236:      },",
          "237:     },",
          "238:    },",
          "239:   },",
          "241:   wantDescription:   \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "242:  }",
          "244:  run(\"orphaned HTTPProxy\", orphanedCondition)",
          "246:  updateExistingValidCond := testcase{",
          "248:    ObjectMeta: v1.ObjectMeta{",
          "249:     Name:       \"test\",",
          "250:     Namespace:  \"test\",",
          "251:     Generation: testGeneration,",
          "252:    },",
          "255:      {",
          "257:        Type:   string(ValidCondition),",
          "259:       },",
          "260:      },",
          "261:     },",
          "",
          "[Removed Lines]",
          "221:   wantConditions: []projectcontour.DetailedCondition{",
          "223:     Condition: projectcontour.Condition{",
          "225:      Status:             projectcontour.ConditionFalse,",
          "228:      Reason:             \"orphaned\",",
          "231:     Errors: []projectcontour.SubCondition{",
          "233:       Type:    \"orphaned\",",
          "240:   wantCurrentStatus: k8s.StatusOrphaned,",
          "247:   testProxy: projectcontour.HTTPProxy{",
          "253:    Status: projectcontour.HTTPProxyStatus{",
          "254:     Conditions: []projectcontour.DetailedCondition{",
          "256:       Condition: projectcontour.Condition{",
          "258:        Status: projectcontour.ConditionTrue,",
          "",
          "[Added Lines]",
          "224:   wantConditions: []contour_api_v1.DetailedCondition{",
          "226:     Condition: contour_api_v1.Condition{",
          "228:      Status:             contour_api_v1.ConditionFalse,",
          "231:      Reason:             \"Orphaned\",",
          "234:     Errors: []contour_api_v1.SubCondition{",
          "236:       Type:    \"Orphaned\",",
          "243:   wantCurrentStatus: string(ProxyStatusOrphaned),",
          "250:   testProxy: contour_api_v1.HTTPProxy{",
          "256:    Status: contour_api_v1.HTTPProxyStatus{",
          "257:     Conditions: []contour_api_v1.DetailedCondition{",
          "259:       Condition: contour_api_v1.Condition{",
          "261:        Status: contour_api_v1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "265:    Fullname:       k8s.NamespacedNameFrom(\"test/test\"),",
          "266:    Generation:     testGeneration,",
          "267:    TransitionTime: testTransitionTime,",
          "269:     ValidCondition: {",
          "271:       Type:    string(ValidCondition),",
          "275:      },",
          "277:       {",
          "278:        Type:    \"TLSError\",",
          "279:        Reason:  \"TLSConfigError\",",
          "",
          "[Removed Lines]",
          "268:    Conditions: map[ConditionType]*projectcontour.DetailedCondition{",
          "270:      Condition: projectcontour.Condition{",
          "272:       Status:  projectcontour.ConditionTrue,",
          "273:       Reason:  \"TLSErrorTLSConfigError\",",
          "274:       Message: \"Syntax Error in TLS Config\",",
          "276:      Warnings: []projectcontour.SubCondition{",
          "",
          "[Added Lines]",
          "271:    Conditions: map[ConditionType]*contour_api_v1.DetailedCondition{",
          "273:      Condition: contour_api_v1.Condition{",
          "275:       Status:  contour_api_v1.ConditionTrue,",
          "276:       Reason:  \"Valid\",",
          "277:       Message: \"Valid HTTPProxy\",",
          "279:      Warnings: []contour_api_v1.SubCondition{",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "283:     },",
          "284:    },",
          "285:   },",
          "287:    {",
          "289:      Type:               string(ValidCondition),",
          "291:      ObservedGeneration: testGeneration,",
          "292:      LastTransitionTime: testTransitionTime,",
          "295:     },",
          "297:      {",
          "298:       Type:    \"TLSError\",",
          "299:       Reason:  \"TLSConfigError\",",
          "",
          "[Removed Lines]",
          "286:   wantConditions: []projectcontour.DetailedCondition{",
          "288:     Condition: projectcontour.Condition{",
          "290:      Status:             projectcontour.ConditionTrue,",
          "293:      Reason:             \"TLSErrorTLSConfigError\",",
          "294:      Message:            \"Syntax Error in TLS Config\",",
          "296:     Warnings: []projectcontour.SubCondition{",
          "",
          "[Added Lines]",
          "289:   wantConditions: []contour_api_v1.DetailedCondition{",
          "291:     Condition: contour_api_v1.Condition{",
          "293:      Status:             contour_api_v1.ConditionTrue,",
          "296:      Reason:             \"Valid\",",
          "297:      Message:            \"Valid HTTPProxy\",",
          "299:     Warnings: []contour_api_v1.SubCondition{",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "302:     },",
          "303:    },",
          "304:   },",
          "307:  }",
          "309:  run(\"Test updating existing Valid Condition\", updateExistingValidCond)",
          "",
          "[Removed Lines]",
          "305:   wantCurrentStatus: k8s.StatusValid,",
          "306:   wantDescription:   \"TLSErrorTLSConfigError: Syntax Error in TLS Config\",",
          "",
          "[Added Lines]",
          "308:   wantCurrentStatus: string(ProxyStatusValid),",
          "309:   wantDescription:   \"Valid HTTPProxy\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a288abf9bcadbd248f7c963285976c07b0c6e13",
      "candidate_info": {
        "commit_hash": "6a288abf9bcadbd248f7c963285976c07b0c6e13",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/6a288abf9bcadbd248f7c963285976c07b0c6e13",
        "files": [
          "cmd/contour/serve.go",
          "examples/contour/02-role-contour.yaml",
          "examples/render/contour.yaml",
          "internal/annotation/annotations.go",
          "internal/annotation/annotations_test.go",
          "internal/dag/builder_test.go",
          "internal/dag/cache.go",
          "internal/dag/cache_test.go",
          "internal/dag/ingress_processor.go",
          "internal/dag/policy.go",
          "internal/dag/policy_test.go",
          "internal/k8s/informers.go"
        ],
        "message": "internal: Add support for watching ingress/v1 resources (#3266)\n\nAdd support for watching networking.k8s.io/v1 Ingress & IngressClass resources\nand add/remove from internal cache later allowing these objects to be implemented.\n\nSigned-off-by: Steve Sloka <slokas@vmware.com>",
        "before_after_code_files": [
          "cmd/contour/serve.go||cmd/contour/serve.go",
          "internal/annotation/annotations.go||internal/annotation/annotations.go",
          "internal/annotation/annotations_test.go||internal/annotation/annotations_test.go",
          "internal/dag/builder_test.go||internal/dag/builder_test.go",
          "internal/dag/cache.go||internal/dag/cache.go",
          "internal/dag/cache_test.go||internal/dag/cache_test.go",
          "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
          "internal/dag/policy.go||internal/dag/policy.go",
          "internal/dag/policy_test.go||internal/dag/policy_test.go",
          "internal/k8s/informers.go||internal/k8s/informers.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go"
          ],
          "candidate": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/contour/serve.go||cmd/contour/serve.go": [
          "File: cmd/contour/serve.go -> cmd/contour/serve.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:   inf.AddEventHandler(&dynamicHandler)",
          "374:  }",
          "377:  if ctx.UseExperimentalServiceAPITypes {",
          "378:   for _, r := range k8s.ServiceAPIResources() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:  if clients.ResourcesExist(k8s.IngressV1Resources()...) {",
          "379:   for _, r := range k8s.IngressV1Resources() {",
          "380:    if err := informOnResource(clients, r, &dynamicHandler); err != nil {",
          "381:     log.WithError(err).WithField(\"resource\", r).Fatal(\"failed to create informer\")",
          "382:    }",
          "383:   }",
          "384:  } else {",
          "385:   if err := informOnResource(clients, k8s.IngressV1Beta1Resource(), &dynamicHandler); err != nil {",
          "386:    log.WithError(err).WithField(\"resource\", k8s.IngressV1Beta1Resource()).Fatal(\"failed to create informer\")",
          "387:   }",
          "388:  }",
          "",
          "---------------"
        ],
        "internal/annotation/annotations.go||internal/annotation/annotations.go": [
          "File: internal/annotation/annotations.go -> internal/annotation/annotations.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"strings\"",
          "21:  \"github.com/projectcontour/contour/internal/timeout\"",
          "23:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "24: )",
          "",
          "[Removed Lines]",
          "22:  \"k8s.io/api/networking/v1beta1\"",
          "",
          "[Added Lines]",
          "22:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:  return !(i.Annotations[\"kubernetes.io/ingress.allow-http\"] == \"false\")",
          "135: }",
          "140:  return i.Annotations[\"ingress.kubernetes.io/force-ssl-redirect\"] == \"true\"",
          "141: }",
          "146:  routes := make(map[string]bool)",
          "147:  for _, v := range strings.Split(i.Annotations[\"projectcontour.io/websocket-routes\"], \",\") {",
          "148:   route := strings.TrimSpace(v)",
          "",
          "[Removed Lines]",
          "133: func HTTPAllowed(i *v1beta1.Ingress) bool {",
          "139: func TLSRequired(i *v1beta1.Ingress) bool {",
          "145: func WebsocketRoutes(i *v1beta1.Ingress) map[string]bool {",
          "",
          "[Added Lines]",
          "133: func HTTPAllowed(i *networking_v1.Ingress) bool {",
          "139: func TLSRequired(i *networking_v1.Ingress) bool {",
          "145: func WebsocketRoutes(i *networking_v1.Ingress) map[string]bool {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:  return parseUInt32(ContourAnnotation(i, \"num-retries\"))",
          "160: }",
          "164:  return timeout.Parse(ContourAnnotation(i, \"per-try-timeout\"))",
          "165: }",
          "",
          "[Removed Lines]",
          "158: func NumRetries(i *v1beta1.Ingress) uint32 {",
          "163: func PerTryTimeout(i *v1beta1.Ingress) (timeout.Setting, error) {",
          "",
          "[Added Lines]",
          "158: func NumRetries(i *networking_v1.Ingress) uint32 {",
          "163: func PerTryTimeout(i *networking_v1.Ingress) (timeout.Setting, error) {",
          "",
          "---------------"
        ],
        "internal/annotation/annotations_test.go||internal/annotation/annotations_test.go": [
          "File: internal/annotation/annotations_test.go -> internal/annotation/annotations_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "21:  \"github.com/stretchr/testify/assert\"",
          "22:  v1 \"k8s.io/api/core/v1\"",
          "24:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "25:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "26: )",
          "",
          "[Removed Lines]",
          "23:  \"k8s.io/api/networking/v1beta1\"",
          "",
          "[Added Lines]",
          "23:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114: func TestWebsocketRoutes(t *testing.T) {",
          "115:  tests := map[string]struct {",
          "117:   want map[string]bool",
          "118:  }{",
          "119:   \"empty\": {",
          "121:     ObjectMeta: metav1.ObjectMeta{",
          "122:      Annotations: map[string]string{",
          "123:       \"projectcontour.io/websocket-routes\": \"\",",
          "",
          "[Removed Lines]",
          "116:   a    *v1beta1.Ingress",
          "120:    a: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "116:   a    *networking_v1.Ingress",
          "120:    a: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:    want: map[string]bool{},",
          "128:   },",
          "129:   \"empty with spaces\": {",
          "131:     ObjectMeta: metav1.ObjectMeta{",
          "132:      Annotations: map[string]string{",
          "133:       \"projectcontour.io/websocket-routes\": \", ,\",",
          "",
          "[Removed Lines]",
          "130:    a: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "130:    a: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:    want: map[string]bool{},",
          "138:   },",
          "139:   \"single value\": {",
          "141:     ObjectMeta: metav1.ObjectMeta{",
          "142:      Annotations: map[string]string{",
          "143:       \"projectcontour.io/websocket-routes\": \"/ws1\",",
          "",
          "[Removed Lines]",
          "140:    a: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "140:    a: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:    },",
          "150:   },",
          "151:   \"multiple values\": {",
          "153:     ObjectMeta: metav1.ObjectMeta{",
          "154:      Annotations: map[string]string{",
          "155:       \"projectcontour.io/websocket-routes\": \"/ws1,/ws2\",",
          "",
          "[Removed Lines]",
          "152:    a: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "152:    a: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:    },",
          "163:   },",
          "164:   \"multiple values with spaces and invalid entries\": {",
          "166:     ObjectMeta: metav1.ObjectMeta{",
          "167:      Annotations: map[string]string{",
          "168:       \"projectcontour.io/websocket-routes\": \" /ws1, , /ws2 \",",
          "",
          "[Removed Lines]",
          "165:    a: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "165:    a: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187: func TestHttpAllowed(t *testing.T) {",
          "188:  tests := map[string]struct {",
          "190:   valid bool",
          "191:  }{",
          "192:   \"basic ingress\": {",
          "194:     ObjectMeta: metav1.ObjectMeta{",
          "195:      Name:      \"simple\",",
          "196:      Namespace: \"default\",",
          "197:     },",
          "200:       Hosts:      []string{\"whatever.example.com\"},",
          "201:       SecretName: \"secret\",",
          "202:      }},",
          "204:     },",
          "205:    },",
          "206:    valid: true,",
          "207:   },",
          "208:   \"kubernetes.io/ingress.allow-http: \\\"false\\\"\": {",
          "210:     ObjectMeta: metav1.ObjectMeta{",
          "211:      Name:      \"simple\",",
          "212:      Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "189:   i     *v1beta1.Ingress",
          "193:    i: &v1beta1.Ingress{",
          "198:     Spec: v1beta1.IngressSpec{",
          "199:      TLS: []v1beta1.IngressTLS{{",
          "203:      Backend: backend(\"backend\", intstr.FromInt(80)),",
          "209:    i: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "189:   i     *networking_v1.Ingress",
          "193:    i: &networking_v1.Ingress{",
          "198:     Spec: networking_v1.IngressSpec{",
          "199:      TLS: []networking_v1.IngressTLS{{",
          "203:      DefaultBackend: backend(\"backend\", intstr.FromInt(80)),",
          "209:    i: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214:       \"kubernetes.io/ingress.allow-http\": \"false\",",
          "215:      },",
          "216:     },",
          "219:       Hosts:      []string{\"whatever.example.com\"},",
          "220:       SecretName: \"secret\",",
          "221:      }},",
          "223:     },",
          "224:    },",
          "225:    valid: false,",
          "",
          "[Removed Lines]",
          "217:     Spec: v1beta1.IngressSpec{",
          "218:      TLS: []v1beta1.IngressTLS{{",
          "222:      Backend: backend(\"backend\", intstr.FromInt(80)),",
          "",
          "[Added Lines]",
          "217:     Spec: networking_v1.IngressSpec{",
          "218:      TLS: []networking_v1.IngressTLS{{",
          "222:      DefaultBackend: backend(\"backend\", intstr.FromInt(80)),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "326:  for _, kind := range []string{",
          "327:   kindOf(&v1.Service{}),",
          "329:   kindOf(&contour_api_v1.HTTPProxy{}),",
          "330:  } {",
          "331:   for key := range annotationsByKind[kind] {",
          "",
          "[Removed Lines]",
          "328:   kindOf(&v1beta1.Ingress{}),",
          "",
          "[Added Lines]",
          "328:   kindOf(&networking_v1.Ingress{}),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "361:   want []bool",
          "362:  }{",
          "363:   \"ingress nginx kubernetes.io/ingress.class\": {",
          "365:     ObjectMeta: metav1.ObjectMeta{",
          "366:      Name:      \"incorrect\",",
          "367:      Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "364:    fixture: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "364:    fixture: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "373:    want: []bool{false, false},",
          "374:   },",
          "375:   \"ingress nginx projectcontour.io/ingress.class\": {",
          "377:     ObjectMeta: metav1.ObjectMeta{",
          "378:      Name:      \"incorrect\",",
          "379:      Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "376:    fixture: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "376:    fixture: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "385:    want: []bool{false, false},",
          "386:   },",
          "387:   \"ingress contour kubernetes.io/ingress.class\": {",
          "389:     ObjectMeta: metav1.ObjectMeta{",
          "390:      Name:      \"incorrect\",",
          "391:      Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "388:    fixture: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "388:    fixture: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "397:    want: []bool{true, true},",
          "398:   },",
          "399:   \"ingress contour projectcontour.io/ingress.class\": {",
          "401:     ObjectMeta: metav1.ObjectMeta{",
          "402:      Name:      \"incorrect\",",
          "403:      Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "400:    fixture: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "400:    fixture: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "409:    want: []bool{true, true},",
          "410:   },",
          "411:   \"no annotation\": {",
          "413:     ObjectMeta: metav1.ObjectMeta{",
          "414:      Name:      \"noannotation\",",
          "415:      Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "412:    fixture: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "412:    fixture: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "432:   })",
          "433:  }",
          "434: }",
          "439:  }",
          "440: }",
          "",
          "[Removed Lines]",
          "435: func backend(name string, port intstr.IntOrString) *v1beta1.IngressBackend {",
          "436:  return &v1beta1.IngressBackend{",
          "437:   ServiceName: name,",
          "438:   ServicePort: port,",
          "",
          "[Added Lines]",
          "435: func backend(name string, port intstr.IntOrString) *networking_v1.IngressBackend {",
          "436:  var portObj networking_v1.ServiceBackendPort",
          "437:  if port.Type == intstr.Int {",
          "438:   portObj = networking_v1.ServiceBackendPort{",
          "439:    Number: port.IntVal,",
          "440:   }",
          "441:  } else {",
          "442:   portObj = networking_v1.ServiceBackendPort{",
          "443:    Name: port.StrVal,",
          "444:   }",
          "445:  }",
          "447:  return &networking_v1.IngressBackend{",
          "448:   Service: &networking_v1.IngressServiceBackend{",
          "449:    Name: name,",
          "450:    Port: portObj,",
          "451:   },",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "452:   return \"Secret\"",
          "453:  case *v1.Service:",
          "454:   return \"Service\"",
          "456:   return \"Ingress\"",
          "457:  case *contour_api_v1.HTTPProxy:",
          "458:   return \"HTTPProxy\"",
          "",
          "[Removed Lines]",
          "455:  case *v1beta1.Ingress:",
          "",
          "[Added Lines]",
          "468:  case *networking_v1.Ingress:",
          "",
          "---------------"
        ],
        "internal/dag/builder_test.go||internal/dag/builder_test.go": [
          "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"github.com/projectcontour/contour/internal/timeout\"",
          "24:  \"github.com/stretchr/testify/assert\"",
          "25:  v1 \"k8s.io/api/core/v1\"",
          "26:  \"k8s.io/api/networking/v1beta1\"",
          "27:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "28:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   },",
          "105:  }",
          "108:   ObjectMeta: metav1.ObjectMeta{",
          "109:    Name:      \"kuard\",",
          "110:    Namespace: \"default\",",
          "111:   },",
          "114:  }",
          "116:   ObjectMeta: metav1.ObjectMeta{",
          "117:    Name:      \"kuard\",",
          "118:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "107:  i1 := &v1beta1.Ingress{",
          "112:   Spec: v1beta1.IngressSpec{",
          "113:    Backend: backend(\"kuard\", intstr.FromInt(8080))},",
          "115:  i1a := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "108:  i1V1 := &networking_v1.Ingress{",
          "113:   Spec: networking_v1.IngressSpec{",
          "114:    Rules: []networking_v1.IngressRule{{",
          "115:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "116:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "117:       Paths: []networking_v1.HTTPIngressPath{{",
          "118:        Backend: *backendv1(\"kuard\", intstr.FromInt(8080)),",
          "119:       }},",
          "120:      },",
          "121:     },",
          "122:    }},",
          "123:   },",
          "126:  i1aV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     \"kubernetes.io/ingress.allow-http\": \"false\",",
          "121:    },",
          "122:   },",
          "125:  }",
          "129:   ObjectMeta: metav1.ObjectMeta{",
          "130:    Name:      \"kuard\",",
          "131:    Namespace: \"default\",",
          "132:   },",
          "136:    }},",
          "137:   },",
          "138:  }",
          "143:   ObjectMeta: metav1.ObjectMeta{",
          "144:    Name:      \"kuard\",",
          "145:    Namespace: \"default\",",
          "146:   },",
          "149:     Host: \"test1.test.com\",",
          "150:    }},",
          "151:   },",
          "152:  }",
          "156:   ObjectMeta: metav1.ObjectMeta{",
          "157:    Name:      \"kuard\",",
          "158:    Namespace: \"default\",",
          "159:   },",
          "162:     Hosts:      []string{\"kuard.example.com\"},",
          "163:     SecretName: sec1.Name,",
          "164:    }},",
          "166:     Host:             \"kuard.example.com\",",
          "168:    }},",
          "169:   },",
          "170:  }",
          "173:   ObjectMeta: metav1.ObjectMeta{",
          "174:    Name:      \"kuard\",",
          "175:    Namespace: \"default\",",
          "176:   },",
          "179:  }",
          "182:   ObjectMeta: metav1.ObjectMeta{",
          "183:    Name:      \"kuard\",",
          "184:    Namespace: \"default\",",
          "185:   },",
          "189:    }},",
          "190:   },",
          "191:  }",
          "195:   ObjectMeta: metav1.ObjectMeta{",
          "196:    Name:      \"two-vhosts\",",
          "197:    Namespace: \"default\",",
          "198:   },",
          "201:     Hosts:      []string{\"b.example.com\"},",
          "202:     SecretName: sec1.Name,",
          "203:    }},",
          "205:     Host:             \"a.example.com\",",
          "207:    }, {",
          "208:     Host:             \"b.example.com\",",
          "210:    }},",
          "211:   },",
          "212:  }",
          "214:   ObjectMeta: metav1.ObjectMeta{",
          "215:    Name:      \"two-vhosts\",",
          "216:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "123:   Spec: v1beta1.IngressSpec{",
          "124:    Backend: backend(\"kuard\", intstr.FromInt(8080))},",
          "128:  i2 := &v1beta1.Ingress{",
          "133:   Spec: v1beta1.IngressSpec{",
          "134:    Rules: []v1beta1.IngressRule{{",
          "135:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "142:  i2a := &v1beta1.Ingress{",
          "147:   Spec: v1beta1.IngressSpec{",
          "148:    Rules: []v1beta1.IngressRule{{",
          "155:  i3 := &v1beta1.Ingress{",
          "160:   Spec: v1beta1.IngressSpec{",
          "161:    TLS: []v1beta1.IngressTLS{{",
          "165:    Rules: []v1beta1.IngressRule{{",
          "167:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "172:  i4 := &v1beta1.Ingress{",
          "177:   Spec: v1beta1.IngressSpec{",
          "178:    Backend: backend(\"kuard\", intstr.FromString(\"http\"))},",
          "181:  i5 := &v1beta1.Ingress{",
          "186:   Spec: v1beta1.IngressSpec{",
          "187:    Rules: []v1beta1.IngressRule{{",
          "188:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "194:  i6 := &v1beta1.Ingress{",
          "199:   Spec: v1beta1.IngressSpec{",
          "200:    TLS: []v1beta1.IngressTLS{{",
          "204:    Rules: []v1beta1.IngressRule{{",
          "206:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "209:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "213:  i6a := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "134:   Spec: networking_v1.IngressSpec{",
          "135:    Rules: []networking_v1.IngressRule{{",
          "136:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "137:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "138:       Paths: []networking_v1.HTTPIngressPath{{",
          "139:        Backend: *backendv1(\"kuard\", intstr.FromInt(8080)),",
          "140:       }},",
          "141:      },",
          "142:     },",
          "143:    }},",
          "144:   },",
          "148:  i2V1 := &networking_v1.Ingress{",
          "153:   Spec: networking_v1.IngressSpec{",
          "154:    Rules: []networking_v1.IngressRule{{",
          "155:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromInt(8080))),",
          "162:  i2aV1 := &networking_v1.Ingress{",
          "167:   Spec: networking_v1.IngressSpec{",
          "168:    Rules: []networking_v1.IngressRule{{",
          "175:  i3V1 := &networking_v1.Ingress{",
          "180:   Spec: networking_v1.IngressSpec{",
          "181:    TLS: []networking_v1.IngressTLS{{",
          "185:    Rules: []networking_v1.IngressRule{{",
          "187:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromInt(8080))),",
          "192:  i4V1 := &networking_v1.Ingress{",
          "197:   Spec: networking_v1.IngressSpec{",
          "198:    Rules: []networking_v1.IngressRule{{",
          "199:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "200:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "201:       Paths: []networking_v1.HTTPIngressPath{{",
          "202:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "203:       }},",
          "204:      },",
          "205:     },",
          "206:    }},",
          "207:   },",
          "211:  i5V1 := &networking_v1.Ingress{",
          "216:   Spec: networking_v1.IngressSpec{",
          "217:    Rules: []networking_v1.IngressRule{{",
          "218:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromString(\"http\"))),",
          "224:  i6V1 := &networking_v1.Ingress{",
          "229:   Spec: networking_v1.IngressSpec{",
          "230:    TLS: []networking_v1.IngressTLS{{",
          "234:    Rules: []networking_v1.IngressRule{{",
          "236:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromInt(8080))),",
          "239:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromString(\"http\"))),",
          "243:  i6aV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "218:     \"kubernetes.io/ingress.allow-http\": \"false\",",
          "219:    },",
          "220:   },",
          "223:     Hosts:      []string{\"b.example.com\"},",
          "224:     SecretName: sec1.Name,",
          "225:    }},",
          "227:     Host:             \"a.example.com\",",
          "229:    }, {",
          "230:     Host:             \"b.example.com\",",
          "232:    }},",
          "233:   },",
          "234:  }",
          "236:   ObjectMeta: metav1.ObjectMeta{",
          "237:    Name:      \"two-vhosts\",",
          "238:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "221:   Spec: v1beta1.IngressSpec{",
          "222:    TLS: []v1beta1.IngressTLS{{",
          "226:    Rules: []v1beta1.IngressRule{{",
          "228:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "231:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "235:  i6b := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "251:   Spec: networking_v1.IngressSpec{",
          "252:    TLS: []networking_v1.IngressTLS{{",
          "256:    Rules: []networking_v1.IngressRule{{",
          "258:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromInt(8080))),",
          "261:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromString(\"http\"))),",
          "266:  i6bV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240:     \"ingress.kubernetes.io/force-ssl-redirect\": \"true\",",
          "241:    },",
          "242:   },",
          "245:     Hosts:      []string{\"b.example.com\"},",
          "246:     SecretName: sec1.Name,",
          "247:    }},",
          "249:     Host:             \"b.example.com\",",
          "251:    }},",
          "252:   },",
          "253:  }",
          "255:   ObjectMeta: metav1.ObjectMeta{",
          "256:    Name:      \"two-vhosts\",",
          "257:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "243:   Spec: v1beta1.IngressSpec{",
          "244:    TLS: []v1beta1.IngressTLS{{",
          "248:    Rules: []v1beta1.IngressRule{{",
          "250:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "254:  i6c := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "274:   Spec: networking_v1.IngressSpec{",
          "275:    TLS: []networking_v1.IngressTLS{{",
          "279:    Rules: []networking_v1.IngressRule{{",
          "281:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromString(\"http\"))),",
          "286:  i6cV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:     \"kubernetes.io/ingress.allow-http\":         \"false\",",
          "261:    },",
          "262:   },",
          "265:     Hosts:      []string{\"b.example.com\"},",
          "266:     SecretName: sec1.Name,",
          "267:    }},",
          "269:     Host:             \"b.example.com\",",
          "271:    }},",
          "272:   },",
          "273:  }",
          "277:   ObjectMeta: metav1.ObjectMeta{",
          "278:    Name:      \"two-paths\",",
          "279:    Namespace: \"default\",",
          "280:   },",
          "283:     Hosts:      []string{\"b.example.com\"},",
          "284:     SecretName: sec1.Name,",
          "285:    }},",
          "287:     Host: \"b.example.com\",",
          "295:       }, {",
          "301:       }},",
          "302:      },",
          "303:     },",
          "",
          "[Removed Lines]",
          "263:   Spec: v1beta1.IngressSpec{",
          "264:    TLS: []v1beta1.IngressTLS{{",
          "268:    Rules: []v1beta1.IngressRule{{",
          "270:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "276:  i7 := &v1beta1.Ingress{",
          "281:   Spec: v1beta1.IngressSpec{",
          "282:    TLS: []v1beta1.IngressTLS{{",
          "286:    Rules: []v1beta1.IngressRule{{",
          "288:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "289:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "290:       Paths: []v1beta1.HTTPIngressPath{{",
          "291:        Backend: v1beta1.IngressBackend{",
          "292:         ServiceName: \"kuard\",",
          "293:         ServicePort: intstr.FromString(\"http\"),",
          "294:        },",
          "296:        Path: \"/kuarder\",",
          "297:        Backend: v1beta1.IngressBackend{",
          "298:         ServiceName: \"kuarder\",",
          "299:         ServicePort: intstr.FromInt(8080),",
          "300:        },",
          "",
          "[Added Lines]",
          "295:   Spec: networking_v1.IngressSpec{",
          "296:    TLS: []networking_v1.IngressTLS{{",
          "300:    Rules: []networking_v1.IngressRule{{",
          "302:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromString(\"http\"))),",
          "308:  i7V1 := &networking_v1.Ingress{",
          "313:   Spec: networking_v1.IngressSpec{",
          "314:    TLS: []networking_v1.IngressTLS{{",
          "318:    Rules: []networking_v1.IngressRule{{",
          "320:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "321:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "322:       Paths: []networking_v1.HTTPIngressPath{{",
          "323:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "325:        Path:    \"/kuarder\",",
          "326:        Backend: *backendv1(\"kuarder\", intstr.FromInt(8080)),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "305:   },",
          "306:  }",
          "310:   ObjectMeta: metav1.ObjectMeta{",
          "311:    Name:      \"two-rules\",",
          "312:    Namespace: \"default\",",
          "313:   },",
          "316:     Hosts:      []string{\"b.example.com\"},",
          "317:     SecretName: sec1.Name,",
          "318:    }},",
          "320:     Host: \"b.example.com\",",
          "328:       }},",
          "329:      },",
          "330:     },",
          "331:    }, {",
          "332:     Host: \"b.example.com\",",
          "341:       }},",
          "342:      },",
          "343:     },",
          "344:    }},",
          "345:   },",
          "346:  }",
          "349:   ObjectMeta: metav1.ObjectMeta{",
          "350:    Name:      \"two-rules\",",
          "351:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "309:  i8 := &v1beta1.Ingress{",
          "314:   Spec: v1beta1.IngressSpec{",
          "315:    TLS: []v1beta1.IngressTLS{{",
          "319:    Rules: []v1beta1.IngressRule{{",
          "321:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "322:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "323:       Paths: []v1beta1.HTTPIngressPath{{",
          "324:        Backend: v1beta1.IngressBackend{",
          "325:         ServiceName: \"kuard\",",
          "326:         ServicePort: intstr.FromString(\"http\"),",
          "327:        },",
          "333:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "334:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "335:       Paths: []v1beta1.HTTPIngressPath{{",
          "336:        Path: \"/kuarder\",",
          "337:        Backend: v1beta1.IngressBackend{",
          "338:         ServiceName: \"kuarder\",",
          "339:         ServicePort: intstr.FromInt(8080),",
          "340:        },",
          "348:  i9 := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "335:  i8V1 := &networking_v1.Ingress{",
          "340:   Spec: networking_v1.IngressSpec{",
          "341:    TLS: []networking_v1.IngressTLS{{",
          "345:    Rules: []networking_v1.IngressRule{{",
          "347:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "348:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "349:       Paths: []networking_v1.HTTPIngressPath{{",
          "350:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "356:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "357:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "358:       Paths: []networking_v1.HTTPIngressPath{{",
          "359:        Path:    \"/kuarder\",",
          "360:        Backend: *backendv1(\"kuarder\", intstr.FromInt(8080)),",
          "368:  i9V1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "353:     \"kubernetes.io/ingress.allow-http\": \"false\",",
          "354:    },",
          "355:   },",
          "358:     Hosts:      []string{\"b.example.com\"},",
          "359:     SecretName: sec1.Name,",
          "360:    }},",
          "362:     Host: \"b.example.com\",",
          "370:       }},",
          "371:      },",
          "372:     },",
          "373:    }, {",
          "374:     Host: \"b.example.com\",",
          "383:       }},",
          "384:      },",
          "385:     },",
          "",
          "[Removed Lines]",
          "356:   Spec: v1beta1.IngressSpec{",
          "357:    TLS: []v1beta1.IngressTLS{{",
          "361:    Rules: []v1beta1.IngressRule{{",
          "363:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "364:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "365:       Paths: []v1beta1.HTTPIngressPath{{",
          "366:        Backend: v1beta1.IngressBackend{",
          "367:         ServiceName: \"kuard\",",
          "368:         ServicePort: intstr.FromString(\"http\"),",
          "369:        },",
          "375:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "376:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "377:       Paths: []v1beta1.HTTPIngressPath{{",
          "378:        Path: \"/kuarder\",",
          "379:        Backend: v1beta1.IngressBackend{",
          "380:         ServiceName: \"kuarder\",",
          "381:         ServicePort: intstr.FromInt(8080),",
          "382:        },",
          "",
          "[Added Lines]",
          "376:   Spec: networking_v1.IngressSpec{",
          "377:    TLS: []networking_v1.IngressTLS{{",
          "381:    Rules: []networking_v1.IngressRule{{",
          "383:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "384:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "385:       Paths: []networking_v1.HTTPIngressPath{{",
          "386:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "392:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "393:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "394:       Paths: []networking_v1.HTTPIngressPath{{",
          "395:        Path:    \"/kuarder\",",
          "396:        Backend: *backendv1(\"kuarder\", intstr.FromInt(8080)),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "387:   },",
          "388:  }",
          "391:   ObjectMeta: metav1.ObjectMeta{",
          "392:    Name:      \"two-rules\",",
          "393:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "390:  i10a := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "404:  i10aV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "395:     \"projectcontour.io/tls-minimum-protocol-version\": \"1.3\",",
          "396:    },",
          "397:   },",
          "400:     Hosts:      []string{\"b.example.com\"},",
          "401:     SecretName: sec1.Name,",
          "402:    }},",
          "404:     Host: \"b.example.com\",",
          "412:       }},",
          "413:      },",
          "414:     },",
          "",
          "[Removed Lines]",
          "398:   Spec: v1beta1.IngressSpec{",
          "399:    TLS: []v1beta1.IngressTLS{{",
          "403:    Rules: []v1beta1.IngressRule{{",
          "405:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "406:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "407:       Paths: []v1beta1.HTTPIngressPath{{",
          "408:        Backend: v1beta1.IngressBackend{",
          "409:         ServiceName: \"kuard\",",
          "410:         ServicePort: intstr.FromString(\"http\"),",
          "411:        },",
          "",
          "[Added Lines]",
          "412:   Spec: networking_v1.IngressSpec{",
          "413:    TLS: []networking_v1.IngressTLS{{",
          "417:    Rules: []networking_v1.IngressRule{{",
          "419:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "420:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "421:       Paths: []networking_v1.HTTPIngressPath{{",
          "422:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "416:   },",
          "417:  }",
          "421:   ObjectMeta: metav1.ObjectMeta{",
          "422:    Name:      \"websocket\",",
          "423:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "420:  i11 := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "431:  i11V1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "425:     \"projectcontour.io/websocket-routes\": \"/ws1 , /ws2\",",
          "426:    },",
          "427:   },",
          "437:       }, {",
          "443:       }},",
          "444:      },",
          "445:     },",
          "",
          "[Removed Lines]",
          "428:   Spec: v1beta1.IngressSpec{",
          "429:    Rules: []v1beta1.IngressRule{{",
          "430:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "431:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "432:       Paths: []v1beta1.HTTPIngressPath{{",
          "433:        Backend: v1beta1.IngressBackend{",
          "434:         ServiceName: \"kuard\",",
          "435:         ServicePort: intstr.FromString(\"http\"),",
          "436:        },",
          "438:        Path: \"/ws1\",",
          "439:        Backend: v1beta1.IngressBackend{",
          "440:         ServiceName: \"kuard\",",
          "441:         ServicePort: intstr.FromString(\"http\"),",
          "442:        },",
          "",
          "[Added Lines]",
          "439:   Spec: networking_v1.IngressSpec{",
          "440:    Rules: []networking_v1.IngressRule{{",
          "441:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "442:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "443:       Paths: []networking_v1.HTTPIngressPath{{",
          "444:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "446:        Path:    \"/ws1\",",
          "447:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "447:   },",
          "448:  }",
          "452:   ObjectMeta: metav1.ObjectMeta{",
          "453:    Name:      \"timeout\",",
          "454:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "451:  i12a := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "456:  i12aV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "456:     \"projectcontour.io/request-timeout\": \"peanut\",",
          "457:    },",
          "458:   },",
          "469:       }},",
          "470:      },",
          "471:     },",
          "",
          "[Removed Lines]",
          "459:   Spec: v1beta1.IngressSpec{",
          "460:    Rules: []v1beta1.IngressRule{{",
          "461:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "462:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "463:       Paths: []v1beta1.HTTPIngressPath{{",
          "464:        Path: \"/\",",
          "465:        Backend: v1beta1.IngressBackend{",
          "466:         ServiceName: \"kuard\",",
          "467:         ServicePort: intstr.FromString(\"http\"),",
          "468:        },",
          "",
          "[Added Lines]",
          "464:   Spec: networking_v1.IngressSpec{",
          "465:    Rules: []networking_v1.IngressRule{{",
          "466:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "467:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "468:       Paths: []networking_v1.HTTPIngressPath{{",
          "469:        Path:    \"/\",",
          "470:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "473:   },",
          "474:  }",
          "478:   ObjectMeta: metav1.ObjectMeta{",
          "479:    Name:      \"timeout\",",
          "480:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "477:  i12b := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "479:  i12bV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "482:     \"projectcontour.io/request-timeout\": \"1m30s\", // 90 seconds y'all",
          "483:    },",
          "484:   },",
          "495:       }},",
          "496:      },",
          "497:     },",
          "",
          "[Removed Lines]",
          "485:   Spec: v1beta1.IngressSpec{",
          "486:    Rules: []v1beta1.IngressRule{{",
          "487:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "488:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "489:       Paths: []v1beta1.HTTPIngressPath{{",
          "490:        Path: \"/\",",
          "491:        Backend: v1beta1.IngressBackend{",
          "492:         ServiceName: \"kuard\",",
          "493:         ServicePort: intstr.FromString(\"http\"),",
          "494:        },",
          "",
          "[Added Lines]",
          "487:   Spec: networking_v1.IngressSpec{",
          "488:    Rules: []networking_v1.IngressRule{{",
          "489:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "490:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "491:       Paths: []networking_v1.HTTPIngressPath{{",
          "492:        Path:    \"/\",",
          "493:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "499:   },",
          "500:  }",
          "504:   ObjectMeta: metav1.ObjectMeta{",
          "505:    Name:      \"timeout\",",
          "506:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "503:  i12c := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "502:  i12cV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "508:     \"projectcontour.io/request-timeout\": \"infinite\",",
          "509:    },",
          "510:   },",
          "517:      }}},",
          "518:     }}}},",
          "519:  }",
          "522:   ObjectMeta: metav1.ObjectMeta{",
          "523:    Name:      \"timeout\",",
          "524:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "511:   Spec: v1beta1.IngressSpec{",
          "512:    Rules: []v1beta1.IngressRule{{",
          "513:     IngressRuleValue: v1beta1.IngressRuleValue{HTTP: &v1beta1.HTTPIngressRuleValue{",
          "514:      Paths: []v1beta1.HTTPIngressPath{{Path: \"/\",",
          "515:       Backend: v1beta1.IngressBackend{ServiceName: \"kuard\",",
          "516:        ServicePort: intstr.FromString(\"http\")},",
          "521:  i12d := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "510:   Spec: networking_v1.IngressSpec{",
          "511:    Rules: []networking_v1.IngressRule{{",
          "512:     IngressRuleValue: networking_v1.IngressRuleValue{HTTP: &networking_v1.HTTPIngressRuleValue{",
          "513:      Paths: []networking_v1.HTTPIngressPath{{Path: \"/\",",
          "514:       Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "519:  i12dV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "526:     \"projectcontour.io/response-timeout\": \"peanut\",",
          "527:    },",
          "528:   },",
          "539:       }},",
          "540:      },",
          "541:     },",
          "",
          "[Removed Lines]",
          "529:   Spec: v1beta1.IngressSpec{",
          "530:    Rules: []v1beta1.IngressRule{{",
          "531:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "532:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "533:       Paths: []v1beta1.HTTPIngressPath{{",
          "534:        Path: \"/\",",
          "535:        Backend: v1beta1.IngressBackend{",
          "536:         ServiceName: \"kuard\",",
          "537:         ServicePort: intstr.FromString(\"http\"),",
          "538:        },",
          "",
          "[Added Lines]",
          "527:   Spec: networking_v1.IngressSpec{",
          "528:    Rules: []networking_v1.IngressRule{{",
          "529:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "530:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "531:       Paths: []networking_v1.HTTPIngressPath{{",
          "532:        Path:    \"/\",",
          "533:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "543:   },",
          "544:  }",
          "547:   ObjectMeta: metav1.ObjectMeta{",
          "548:    Name:      \"timeout\",",
          "549:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "546:  i12e := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "541:  i12eV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "551:     \"projectcontour.io/response-timeout\": \"1m30s\", // 90 seconds y'all",
          "552:    },",
          "553:   },",
          "564:       }},",
          "565:      },",
          "566:     },",
          "",
          "[Removed Lines]",
          "554:   Spec: v1beta1.IngressSpec{",
          "555:    Rules: []v1beta1.IngressRule{{",
          "556:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "557:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "558:       Paths: []v1beta1.HTTPIngressPath{{",
          "559:        Path: \"/\",",
          "560:        Backend: v1beta1.IngressBackend{",
          "561:         ServiceName: \"kuard\",",
          "562:         ServicePort: intstr.FromString(\"http\"),",
          "563:        },",
          "",
          "[Added Lines]",
          "549:   Spec: networking_v1.IngressSpec{",
          "550:    Rules: []networking_v1.IngressRule{{",
          "551:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "552:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "553:       Paths: []networking_v1.HTTPIngressPath{{",
          "554:        Path:    \"/\",",
          "555:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "568:   },",
          "569:  }",
          "572:   ObjectMeta: metav1.ObjectMeta{",
          "573:    Name:      \"timeout\",",
          "574:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "571:  i12f := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "563:  i12fV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "576:     \"projectcontour.io/response-timeout\": \"infinite\",",
          "577:    },",
          "578:   },",
          "585:      }}},",
          "586:     }}}},",
          "587:  }",
          "593:   ObjectMeta: metav1.ObjectMeta{",
          "594:    Name:      \"app\",",
          "595:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "579:   Spec: v1beta1.IngressSpec{",
          "580:    Rules: []v1beta1.IngressRule{{",
          "581:     IngressRuleValue: v1beta1.IngressRuleValue{HTTP: &v1beta1.HTTPIngressRuleValue{",
          "582:      Paths: []v1beta1.HTTPIngressPath{{Path: \"/\",",
          "583:       Backend: v1beta1.IngressBackend{ServiceName: \"kuard\",",
          "584:        ServicePort: intstr.FromString(\"http\")},",
          "592:  i13a := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "571:   Spec: networking_v1.IngressSpec{",
          "572:    Rules: []networking_v1.IngressRule{{",
          "573:     IngressRuleValue: networking_v1.IngressRuleValue{HTTP: &networking_v1.HTTPIngressRuleValue{",
          "574:      Paths: []networking_v1.HTTPIngressPath{{Path: \"/\",",
          "575:       Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "583:  i13aV1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "597:     \"ingress.kubernetes.io/force-ssl-redirect\": \"true\",",
          "598:    },",
          "599:   },",
          "602:     Hosts:      []string{\"example.com\"},",
          "603:     SecretName: \"example-tls\",",
          "604:    }},",
          "606:     Host: \"example.com\",",
          "615:       }},",
          "616:      },",
          "617:     },",
          "618:    }},",
          "619:   },",
          "620:  }",
          "622:   ObjectMeta: metav1.ObjectMeta{Name: \"challenge\", Namespace: \"nginx-ingress\"},",
          "625:     Host: \"example.com\",",
          "634:       }},",
          "635:      },",
          "636:     },",
          "",
          "[Removed Lines]",
          "600:   Spec: v1beta1.IngressSpec{",
          "601:    TLS: []v1beta1.IngressTLS{{",
          "605:    Rules: []v1beta1.IngressRule{{",
          "607:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "608:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "609:       Paths: []v1beta1.HTTPIngressPath{{",
          "610:        Path: \"/\",",
          "611:        Backend: v1beta1.IngressBackend{",
          "612:         ServiceName: \"app-service\",",
          "613:         ServicePort: intstr.FromInt(8080),",
          "614:        },",
          "621:  i13b := &v1beta1.Ingress{",
          "623:   Spec: v1beta1.IngressSpec{",
          "624:    Rules: []v1beta1.IngressRule{{",
          "626:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "627:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "628:       Paths: []v1beta1.HTTPIngressPath{{",
          "629:        Path: \"/.well-known/acme-challenge/gVJl5NWL2owUqZekjHkt_bo3OHYC2XNDURRRgLI5JTk\",",
          "630:        Backend: v1beta1.IngressBackend{",
          "631:         ServiceName: \"challenge-service\",",
          "632:         ServicePort: intstr.FromInt(8009),",
          "633:        },",
          "",
          "[Added Lines]",
          "591:   Spec: networking_v1.IngressSpec{",
          "592:    TLS: []networking_v1.IngressTLS{{",
          "596:    Rules: []networking_v1.IngressRule{{",
          "598:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "599:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "600:       Paths: []networking_v1.HTTPIngressPath{{",
          "601:        Path:    \"/\",",
          "602:        Backend: *backendv1(\"app-service\", intstr.FromInt(8080)),",
          "610:  i13bV1 := &networking_v1.Ingress{",
          "612:   Spec: networking_v1.IngressSpec{",
          "613:    Rules: []networking_v1.IngressRule{{",
          "615:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "616:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "617:       Paths: []networking_v1.HTTPIngressPath{{",
          "618:        Path:    \"/.well-known/acme-challenge/gVJl5NWL2owUqZekjHkt_bo3OHYC2XNDURRRgLI5JTk\",",
          "619:        Backend: *backendv1(\"challenge-service\", intstr.FromInt(8009)),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "638:   },",
          "639:  }",
          "642:   ObjectMeta: metav1.ObjectMeta{",
          "643:    Name:      \"kuard\",",
          "644:    Namespace: \"default\",",
          "645:   },",
          "649:    }},",
          "650:   },",
          "651:  }",
          "654:   ObjectMeta: metav1.ObjectMeta{",
          "655:    Name:      \"timeout\",",
          "656:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "641:  i3a := &v1beta1.Ingress{",
          "646:   Spec: v1beta1.IngressSpec{",
          "647:    Rules: []v1beta1.IngressRule{{",
          "648:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(80))),",
          "653:  i14 := &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "627:  i3aV1 := &networking_v1.Ingress{",
          "632:   Spec: networking_v1.IngressSpec{",
          "633:    Rules: []networking_v1.IngressRule{{",
          "634:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromInt(80))),",
          "639:  i14V1 := &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "660:     \"projectcontour.io/per-try-timeout\": \"10s\",",
          "661:    },",
          "662:   },",
          "673:       }},",
          "674:      },",
          "675:     },",
          "",
          "[Removed Lines]",
          "663:   Spec: v1beta1.IngressSpec{",
          "664:    Rules: []v1beta1.IngressRule{{",
          "665:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "666:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "667:       Paths: []v1beta1.HTTPIngressPath{{",
          "668:        Path: \"/\",",
          "669:        Backend: v1beta1.IngressBackend{",
          "670:         ServiceName: \"kuard\",",
          "671:         ServicePort: intstr.FromString(\"http\"),",
          "672:        },",
          "",
          "[Added Lines]",
          "649:   Spec: networking_v1.IngressSpec{",
          "650:    Rules: []networking_v1.IngressRule{{",
          "651:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "652:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "653:       Paths: []networking_v1.HTTPIngressPath{{",
          "654:        Path:    \"/\",",
          "655:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "677:   },",
          "678:  }",
          "681:   ObjectMeta: metav1.ObjectMeta{",
          "682:    Name:      \"regex\",",
          "683:    Namespace: \"default\",",
          "684:   },",
          "695:       }},",
          "696:      },",
          "697:     },",
          "",
          "[Removed Lines]",
          "680:  i15 := &v1beta1.Ingress{",
          "685:   Spec: v1beta1.IngressSpec{",
          "686:    Rules: []v1beta1.IngressRule{{",
          "687:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "688:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "689:       Paths: []v1beta1.HTTPIngressPath{{",
          "690:        Path: \"/[^/]+/invoices(/.*|/?)\", // issue 1243",
          "691:        Backend: v1beta1.IngressBackend{",
          "692:         ServiceName: \"kuard\",",
          "693:         ServicePort: intstr.FromString(\"http\"),",
          "694:        },",
          "",
          "[Added Lines]",
          "663:  i15V1 := &networking_v1.Ingress{",
          "668:   Spec: networking_v1.IngressSpec{",
          "669:    Rules: []networking_v1.IngressRule{{",
          "670:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "671:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "672:       Paths: []networking_v1.HTTPIngressPath{{",
          "673:        Path:    \"/[^/]+/invoices(/.*|/?)\", // issue 1243",
          "674:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "699:   },",
          "700:  }",
          "703:   ObjectMeta: metav1.ObjectMeta{",
          "704:    Name:      \"regex\",",
          "705:    Namespace: \"default\",",
          "706:   },",
          "717:       }},",
          "718:      },",
          "719:     },",
          "",
          "[Removed Lines]",
          "702:  i15InvalidRegex := &v1beta1.Ingress{",
          "707:   Spec: v1beta1.IngressSpec{",
          "708:    Rules: []v1beta1.IngressRule{{",
          "709:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "710:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "711:       Paths: []v1beta1.HTTPIngressPath{{",
          "712:        Path: \"^\\\\/(?!\\\\/)(.*?)\",",
          "713:        Backend: v1beta1.IngressBackend{",
          "714:         ServiceName: \"kuard\",",
          "715:         ServicePort: intstr.FromString(\"http\"),",
          "716:        },",
          "",
          "[Added Lines]",
          "682:  i15InvalidRegexV1 := &networking_v1.Ingress{",
          "687:   Spec: networking_v1.IngressSpec{",
          "688:    Rules: []networking_v1.IngressRule{{",
          "689:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "690:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "691:       Paths: []networking_v1.HTTPIngressPath{{",
          "692:        Path:    \"^\\\\/(?!\\\\/)(.*?)\",",
          "693:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "721:   },",
          "722:  }",
          "725:   ObjectMeta: metav1.ObjectMeta{",
          "726:    Name:      \"wildcards\",",
          "727:    Namespace: \"default\",",
          "728:   },",
          "738:       }},",
          "739:      },",
          "740:     },",
          "741:    }, {",
          "742:     Host: \"*\",",
          "750:       }},",
          "751:      },",
          "752:     },",
          "753:    }, {",
          "754:     Host: \"*.example.com\",",
          "762:       }},",
          "763:      },",
          "764:     },",
          "",
          "[Removed Lines]",
          "724:  i16 := &v1beta1.Ingress{",
          "729:   Spec: v1beta1.IngressSpec{",
          "730:    Rules: []v1beta1.IngressRule{{",
          "732:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "733:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "734:       Paths: []v1beta1.HTTPIngressPath{{",
          "735:        Backend: v1beta1.IngressBackend{",
          "736:         ServiceName: \"kuard\",",
          "737:         ServicePort: intstr.FromString(\"http\")},",
          "743:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "744:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "745:       Paths: []v1beta1.HTTPIngressPath{{",
          "746:        Backend: v1beta1.IngressBackend{",
          "747:         ServiceName: \"kuard\",",
          "748:         ServicePort: intstr.FromString(\"http\"),",
          "749:        },",
          "755:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "756:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "757:       Paths: []v1beta1.HTTPIngressPath{{",
          "758:        Backend: v1beta1.IngressBackend{",
          "759:         ServiceName: \"kuarder\",",
          "760:         ServicePort: intstr.FromInt(8080),",
          "761:        },",
          "",
          "[Added Lines]",
          "701:  i16V1 := &networking_v1.Ingress{",
          "706:   Spec: networking_v1.IngressSpec{",
          "707:    Rules: []networking_v1.IngressRule{{",
          "709:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "710:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "711:       Paths: []networking_v1.HTTPIngressPath{{",
          "712:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "718:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "719:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "720:       Paths: []networking_v1.HTTPIngressPath{{",
          "721:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "727:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "728:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "729:       Paths: []networking_v1.HTTPIngressPath{{",
          "730:        Backend: *backendv1(\"kuarder\", intstr.FromInt(8080)),",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "766:   },",
          "767:  }",
          "770:   ObjectMeta: metav1.ObjectMeta{",
          "771:    Name:      \"kuard\",",
          "772:    Namespace: \"default\",",
          "773:   },",
          "776:     Host:             \"example.com\",",
          "778:    }},",
          "779:   },",
          "780:  }",
          "783:   ObjectMeta: metav1.ObjectMeta{",
          "784:    Name:      \"kuard\",",
          "785:    Namespace: \"default\",",
          "797:   },",
          "798:  }",
          "801:   ObjectMeta: metav1.ObjectMeta{",
          "804:    Annotations: map[string]string{",
          "806:    },",
          "807:   },",
          "809:  }",
          "812:   ObjectMeta: metav1.ObjectMeta{",
          "818:   },",
          "820:  }",
          "823:   ObjectMeta: metav1.ObjectMeta{",
          "825:    Namespace: \"default\",",
          "826:   },",
          "829:  }",
          "832:   ObjectMeta: metav1.ObjectMeta{",
          "834:    Namespace: \"default\",",
          "835:   },",
          "842:    }},",
          "843:   },",
          "844:  }",
          "847:   ObjectMeta: metav1.ObjectMeta{",
          "858:   },",
          "859:  }",
          "862:   ObjectMeta: metav1.ObjectMeta{",
          "864:    Namespace: \"default\",",
          "865:   },",
          "881:    }},",
          "882:   },",
          "883:  }",
          "886:   ObjectMeta: metav1.ObjectMeta{",
          "888:    Namespace: \"default\",",
          "889:   },",
          "906:    }},",
          "907:   },",
          "908:  }",
          "911:   ObjectMeta: metav1.ObjectMeta{",
          "913:    Namespace: \"default\",",
          "922:    },",
          "931:    }},",
          "932:   },",
          "933:  }",
          "936:   ObjectMeta: metav1.ObjectMeta{",
          "938:    Namespace: \"default\",",
          "947:    },",
          "956:    }},",
          "957:   },",
          "958:  }",
          "961:   ObjectMeta: metav1.ObjectMeta{",
          "963:    Namespace: \"default\",",
          "968:    },",
          "987:    }},",
          "988:   },",
          "989:  }",
          "992:   ObjectMeta: metav1.ObjectMeta{",
          "994:    Namespace: \"default\",",
          "995:   },",
          "1013:    }},",
          "1014:   },",
          "1015:  }",
          "1018:   ObjectMeta: metav1.ObjectMeta{",
          "1020:    Namespace: \"default\",",
          "1021:   },",
          "1033:     },",
          "1038:    }},",
          "1039:   },",
          "1040:  }",
          "1043:   ObjectMeta: metav1.ObjectMeta{",
          "1045:    Namespace: \"default\",",
          "1050:    },",
          "1058:     },",
          "1063:    }},",
          "1064:   },",
          "1065:  }",
          "1068:   ObjectMeta: metav1.ObjectMeta{",
          "1070:    Namespace: \"default\",",
          "1075:    },",
          "1083:     },",
          "1088:    }},",
          "1089:   },",
          "1090:  }",
          "1093:   ObjectMeta: metav1.ObjectMeta{",
          "1095:    Namespace: \"default\",",
          "1100:    },",
          "1112:    }},",
          "1113:   },",
          "1114:  }",
          "1117:   ObjectMeta: metav1.ObjectMeta{",
          "1119:    Namespace: \"default\",",
          "1124:    },",
          "1131:     },",
          "1136:    }},",
          "1137:   },",
          "1138:  }",
          "1141:   ObjectMeta: metav1.ObjectMeta{",
          "1143:    Namespace: \"default\",",
          "1148:    },",
          "1155:     },",
          "1160:    }},",
          "1161:   },",
          "1162:  }",
          "1165:   ObjectMeta: metav1.ObjectMeta{",
          "1167:    Namespace: \"default\",",
          "1168:   },",
          "1177:  }",
          "1181:   ObjectMeta: metav1.ObjectMeta{",
          "1183:    Namespace: \"default\",",
          "1184:    Annotations: map[string]string{",
          "1186:    },",
          "1187:   },",
          "1194:    }},",
          "1195:   },",
          "1196:  }",
          "1200:   ObjectMeta: metav1.ObjectMeta{",
          "1202:    Namespace: \"default\",",
          "1203:    Annotations: map[string]string{",
          "1208:    },",
          "1209:   },",
          "1216:    }},",
          "1217:   },",
          "1218:  }",
          "1222:   ObjectMeta: metav1.ObjectMeta{",
          "1224:    Namespace: \"default\",",
          "1225:   },",
          "1234:  }",
          "1239:   ObjectMeta: metav1.ObjectMeta{",
          "1241:    Namespace: \"default\",",
          "1242:   },",
          "1249:    }},",
          "1250:   },",
          "1251:  }",
          "1255:   ObjectMeta: metav1.ObjectMeta{",
          "1256:    Name:      \"kuard\",",
          "1257:    Namespace: \"default\",",
          "1258:   },",
          "1265:    }},",
          "1266:   },",
          "1267:  }",
          "1270:   ObjectMeta: metav1.ObjectMeta{",
          "1273:   },",
          "1280:    }},",
          "1281:   },",
          "1282:  }",
          "1285:   ObjectMeta: metav1.ObjectMeta{",
          "1287:    Namespace: \"default\",",
          "1288:   },",
          "1293:    }},",
          "1294:   },",
          "1295:  }",
          "1298:   ObjectMeta: metav1.ObjectMeta{",
          "1300:    Namespace: \"default\",",
          "1301:   },",
          "1313:    }},",
          "1314:   },",
          "1315:  }",
          "1318:   ObjectMeta: metav1.ObjectMeta{",
          "1321:   },",
          "1327:    }},",
          "1328:   },",
          "1329:  }",
          "1332:   ObjectMeta: metav1.ObjectMeta{",
          "1333:    Name:      \"kuard\",",
          "1335:   },",
          "1336:   Spec: v1.ServiceSpec{",
          "1337:    Ports: []v1.ServicePort{{",
          "1338:     Name:       \"http\",",
          "1339:     Protocol:   \"TCP\",",
          "1342:    }},",
          "1343:   },",
          "1344:  }",
          "1347:   ObjectMeta: metav1.ObjectMeta{",
          "1350:   },",
          "1351:   Spec: v1.ServiceSpec{",
          "1352:    Ports: []v1.ServicePort{{",
          "",
          "[Removed Lines]",
          "769:  i17 := &v1beta1.Ingress{",
          "774:   Spec: v1beta1.IngressSpec{",
          "775:    Rules: []v1beta1.IngressRule{{",
          "777:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "782:  s3a := &v1.Service{",
          "786:    Annotations: map[string]string{",
          "787:     \"projectcontour.io/upstream-protocol.h2c\": \"80,http\",",
          "788:    },",
          "789:   },",
          "790:   Spec: v1.ServiceSpec{",
          "791:    Ports: []v1.ServicePort{{",
          "792:     Name:       \"http\",",
          "793:     Protocol:   \"TCP\",",
          "794:     Port:       80,",
          "795:     TargetPort: intstr.FromInt(8888),",
          "796:    }},",
          "800:  s3b := &v1.Service{",
          "802:    Name:      s3a.Name,",
          "803:    Namespace: s3a.Namespace,",
          "805:     \"projectcontour.io/upstream-protocol.h2\": \"80,http\",",
          "808:   Spec: s3a.Spec,",
          "811:  s3c := &v1.Service{",
          "813:    Name:      s3b.Name,",
          "814:    Namespace: s3b.Namespace,",
          "815:    Annotations: map[string]string{",
          "816:     \"projectcontour.io/upstream-protocol.tls\": \"80,http\",",
          "817:    },",
          "819:   Spec: s3b.Spec,",
          "822:  sec13 := &v1.Secret{",
          "824:    Name:      \"example-tls\",",
          "827:   Type: v1.SecretTypeTLS,",
          "828:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "831:  s13a := &v1.Service{",
          "833:    Name:      \"app-service\",",
          "836:   Spec: v1.ServiceSpec{",
          "837:    Ports: []v1.ServicePort{{",
          "838:     Name:       \"http\",",
          "839:     Protocol:   \"TCP\",",
          "840:     Port:       8080,",
          "841:     TargetPort: intstr.FromInt(8080),",
          "846:  s13b := &v1.Service{",
          "848:    Name:      \"challenge-service\",",
          "849:    Namespace: \"nginx-ingress\",",
          "850:   },",
          "851:   Spec: v1.ServiceSpec{",
          "852:    Ports: []v1.ServicePort{{",
          "853:     Name:       \"http\",",
          "854:     Protocol:   \"TCP\",",
          "855:     Port:       8009,",
          "856:     TargetPort: intstr.FromInt(8080),",
          "857:    }},",
          "861:  proxyMultipleBackends := &contour_api_v1.HTTPProxy{",
          "863:    Name:      \"example-com\",",
          "866:   Spec: contour_api_v1.HTTPProxySpec{",
          "867:    VirtualHost: &contour_api_v1.VirtualHost{",
          "868:     Fqdn: \"example.com\",",
          "869:    },",
          "870:    Routes: []contour_api_v1.Route{{",
          "871:     Conditions: []contour_api_v1.MatchCondition{{",
          "872:      Prefix: \"/\",",
          "873:     }},",
          "874:     Services: []contour_api_v1.Service{{",
          "875:      Name: \"kuard\",",
          "876:      Port: 8080,",
          "877:     }, {",
          "878:      Name: \"kuarder\",",
          "879:      Port: 8080,",
          "880:     }},",
          "885:  proxyMinTLS12 := &contour_api_v1.HTTPProxy{",
          "887:    Name:      \"example-com\",",
          "890:   Spec: contour_api_v1.HTTPProxySpec{",
          "891:    VirtualHost: &contour_api_v1.VirtualHost{",
          "892:     Fqdn: \"foo.com\",",
          "893:     TLS: &contour_api_v1.TLS{",
          "894:      SecretName:             sec1.Name,",
          "895:      MinimumProtocolVersion: \"1.2\",",
          "896:     },",
          "897:    },",
          "898:    Routes: []contour_api_v1.Route{{",
          "899:     Conditions: []contour_api_v1.MatchCondition{{",
          "900:      Prefix: \"/\",",
          "901:     }},",
          "902:     Services: []contour_api_v1.Service{{",
          "903:      Name: \"kuard\",",
          "904:      Port: 8080,",
          "905:     }},",
          "910:  proxyMinTLS13 := &contour_api_v1.HTTPProxy{",
          "912:    Name:      \"example-com\",",
          "914:   },",
          "915:   Spec: contour_api_v1.HTTPProxySpec{",
          "916:    VirtualHost: &contour_api_v1.VirtualHost{",
          "917:     Fqdn: \"foo.com\",",
          "918:     TLS: &contour_api_v1.TLS{",
          "919:      SecretName:             sec1.Name,",
          "920:      MinimumProtocolVersion: \"1.3\",",
          "921:     },",
          "923:    Routes: []contour_api_v1.Route{{",
          "924:     Conditions: []contour_api_v1.MatchCondition{{",
          "925:      Prefix: \"/\",",
          "926:     }},",
          "927:     Services: []contour_api_v1.Service{{",
          "928:      Name: \"kuard\",",
          "929:      Port: 8080,",
          "930:     }},",
          "935:  proxyMinTLSInvalid := &contour_api_v1.HTTPProxy{",
          "937:    Name:      \"example-com\",",
          "939:   },",
          "940:   Spec: contour_api_v1.HTTPProxySpec{",
          "941:    VirtualHost: &contour_api_v1.VirtualHost{",
          "942:     Fqdn: \"foo.com\",",
          "943:     TLS: &contour_api_v1.TLS{",
          "944:      SecretName:             sec1.Name,",
          "945:      MinimumProtocolVersion: \"0.999\",",
          "946:     },",
          "948:    Routes: []contour_api_v1.Route{{",
          "949:     Conditions: []contour_api_v1.MatchCondition{{",
          "950:      Prefix: \"/\",",
          "951:     }},",
          "952:     Services: []contour_api_v1.Service{{",
          "953:      Name: \"kuard\",",
          "954:      Port: 8080,",
          "955:     }},",
          "960:  proxyWeightsTwoRoutesDiffWeights := &contour_api_v1.HTTPProxy{",
          "962:    Name:      \"example-com\",",
          "964:   },",
          "965:   Spec: contour_api_v1.HTTPProxySpec{",
          "966:    VirtualHost: &contour_api_v1.VirtualHost{",
          "967:     Fqdn: \"example.com\",",
          "969:    Routes: []contour_api_v1.Route{{",
          "970:     Conditions: []contour_api_v1.MatchCondition{{",
          "971:      Prefix: \"/a\",",
          "972:     }},",
          "973:     Services: []contour_api_v1.Service{{",
          "974:      Name:   \"kuard\",",
          "975:      Port:   8080,",
          "976:      Weight: 90,",
          "977:     }},",
          "978:    }, {",
          "979:     Conditions: []contour_api_v1.MatchCondition{{",
          "980:      Prefix: \"/b\",",
          "981:     }},",
          "982:     Services: []contour_api_v1.Service{{",
          "983:      Name:   \"kuard\",",
          "984:      Port:   8080,",
          "985:      Weight: 60,",
          "986:     }},",
          "991:  proxyWeightsOneRouteDiffWeights := &contour_api_v1.HTTPProxy{",
          "993:    Name:      \"example-com\",",
          "996:   Spec: contour_api_v1.HTTPProxySpec{",
          "997:    VirtualHost: &contour_api_v1.VirtualHost{",
          "998:     Fqdn: \"example.com\",",
          "999:    },",
          "1000:    Routes: []contour_api_v1.Route{{",
          "1001:     Conditions: []contour_api_v1.MatchCondition{{",
          "1002:      Prefix: \"/a\",",
          "1003:     }},",
          "1004:     Services: []contour_api_v1.Service{{",
          "1005:      Name:   \"kuard\",",
          "1006:      Port:   8080,",
          "1007:      Weight: 90,",
          "1008:     }, {",
          "1009:      Name:   \"kuard\",",
          "1010:      Port:   8080,",
          "1011:      Weight: 60,",
          "1012:     }},",
          "1017:  proxyRetryPolicyValidTimeout := &contour_api_v1.HTTPProxy{",
          "1019:    Name:      \"bar-com\",",
          "1022:   Spec: contour_api_v1.HTTPProxySpec{",
          "1023:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1024:     Fqdn: \"bar.com\",",
          "1025:    },",
          "1026:    Routes: []contour_api_v1.Route{{",
          "1027:     Conditions: []contour_api_v1.MatchCondition{{",
          "1028:      Prefix: \"/\",",
          "1029:     }},",
          "1030:     RetryPolicy: &contour_api_v1.RetryPolicy{",
          "1031:      NumRetries:    6,",
          "1032:      PerTryTimeout: \"10s\",",
          "1034:     Services: []contour_api_v1.Service{{",
          "1035:      Name: \"kuard\",",
          "1036:      Port: 8080,",
          "1037:     }},",
          "1042:  proxyRetryPolicyInvalidTimeout := &contour_api_v1.HTTPProxy{",
          "1044:    Name:      \"bar-com\",",
          "1046:   },",
          "1047:   Spec: contour_api_v1.HTTPProxySpec{",
          "1048:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1049:     Fqdn: \"bar.com\",",
          "1051:    Routes: []contour_api_v1.Route{{",
          "1052:     Conditions: []contour_api_v1.MatchCondition{{",
          "1053:      Prefix: \"/\",",
          "1054:     }},",
          "1055:     RetryPolicy: &contour_api_v1.RetryPolicy{",
          "1056:      NumRetries:    6,",
          "1057:      PerTryTimeout: \"please\",",
          "1059:     Services: []contour_api_v1.Service{{",
          "1060:      Name: \"kuard\",",
          "1061:      Port: 8080,",
          "1062:     }},",
          "1067:  proxyRetryPolicyZeroRetries := &contour_api_v1.HTTPProxy{",
          "1069:    Name:      \"bar-com\",",
          "1071:   },",
          "1072:   Spec: contour_api_v1.HTTPProxySpec{",
          "1073:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1074:     Fqdn: \"bar.com\",",
          "1076:    Routes: []contour_api_v1.Route{{",
          "1077:     Conditions: []contour_api_v1.MatchCondition{{",
          "1078:      Prefix: \"/\",",
          "1079:     }},",
          "1080:     RetryPolicy: &contour_api_v1.RetryPolicy{",
          "1081:      NumRetries:    0,",
          "1082:      PerTryTimeout: \"10s\",",
          "1084:     Services: []contour_api_v1.Service{{",
          "1085:      Name: \"kuard\",",
          "1086:      Port: 8080,",
          "1087:     }},",
          "1092:  proxyTimeoutPolicyInvalidResponse := &contour_api_v1.HTTPProxy{",
          "1094:    Name:      \"bar-com\",",
          "1096:   },",
          "1097:   Spec: contour_api_v1.HTTPProxySpec{",
          "1098:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1099:     Fqdn: \"bar.com\",",
          "1101:    Routes: []contour_api_v1.Route{{",
          "1102:     Conditions: []contour_api_v1.MatchCondition{{",
          "1103:      Prefix: \"/\",",
          "1104:     }},",
          "1105:     TimeoutPolicy: &contour_api_v1.TimeoutPolicy{",
          "1106:      Response: \"peanut\",",
          "1107:     },",
          "1108:     Services: []contour_api_v1.Service{{",
          "1109:      Name: \"kuard\",",
          "1110:      Port: 8080,",
          "1111:     }},",
          "1116:  proxyTimeoutPolicyValidResponse := &contour_api_v1.HTTPProxy{",
          "1118:    Name:      \"bar-com\",",
          "1120:   },",
          "1121:   Spec: contour_api_v1.HTTPProxySpec{",
          "1122:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1123:     Fqdn: \"bar.com\",",
          "1125:    Routes: []contour_api_v1.Route{{",
          "1126:     Conditions: []contour_api_v1.MatchCondition{{",
          "1127:      Prefix: \"/\",",
          "1128:     }},",
          "1129:     TimeoutPolicy: &contour_api_v1.TimeoutPolicy{",
          "1130:      Response: \"1m30s\",",
          "1132:     Services: []contour_api_v1.Service{{",
          "1133:      Name: \"kuard\",",
          "1134:      Port: 8080,",
          "1135:     }},",
          "1140:  proxyTimeoutPolicyInfiniteResponse := &contour_api_v1.HTTPProxy{",
          "1142:    Name:      \"bar-com\",",
          "1144:   },",
          "1145:   Spec: contour_api_v1.HTTPProxySpec{",
          "1146:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1147:     Fqdn: \"bar.com\",",
          "1149:    Routes: []contour_api_v1.Route{{",
          "1150:     Conditions: []contour_api_v1.MatchCondition{{",
          "1151:      Prefix: \"/\",",
          "1152:     }},",
          "1153:     TimeoutPolicy: &contour_api_v1.TimeoutPolicy{",
          "1154:      Response: \"infinite\",",
          "1156:     Services: []contour_api_v1.Service{{",
          "1157:      Name: \"kuard\",",
          "1158:      Port: 8080,",
          "1159:     }},",
          "1164:  s1 := &v1.Service{",
          "1166:    Name:      \"kuard\",",
          "1169:   Spec: v1.ServiceSpec{",
          "1170:    Ports: []v1.ServicePort{{",
          "1171:     Name:       \"http\",",
          "1172:     Protocol:   \"TCP\",",
          "1173:     Port:       8080,",
          "1174:     TargetPort: intstr.FromInt(8080),",
          "1175:    }},",
          "1176:   },",
          "1180:  s1a := &v1.Service{",
          "1182:    Name:      \"kuard\",",
          "1185:     \"projectcontour.io/upstream-protocol.tls\": \"8080\",",
          "1188:   Spec: v1.ServiceSpec{",
          "1189:    Ports: []v1.ServicePort{{",
          "1190:     Name:       \"http\",",
          "1191:     Protocol:   \"TCP\",",
          "1192:     Port:       8080,",
          "1193:     TargetPort: intstr.FromInt(8080),",
          "1199:  s1b := &v1.Service{",
          "1201:    Name:      \"kuard\",",
          "1204:     \"projectcontour.io/max-connections\":      \"9000\",",
          "1205:     \"projectcontour.io/max-pending-requests\": \"4096\",",
          "1206:     \"projectcontour.io/max-requests\":         \"404\",",
          "1207:     \"projectcontour.io/max-retries\":          \"7\",",
          "1210:   Spec: v1.ServiceSpec{",
          "1211:    Ports: []v1.ServicePort{{",
          "1212:     Name:       \"http\",",
          "1213:     Protocol:   \"TCP\",",
          "1214:     Port:       8080,",
          "1215:     TargetPort: intstr.FromInt(8080),",
          "1221:  s2 := &v1.Service{",
          "1223:    Name:      \"kuarder\",",
          "1226:   Spec: v1.ServiceSpec{",
          "1227:    Ports: []v1.ServicePort{{",
          "1228:     Name:       \"http\",",
          "1229:     Protocol:   \"TCP\",",
          "1230:     Port:       8080,",
          "1231:     TargetPort: intstr.FromInt(8080),",
          "1232:    }},",
          "1233:   },",
          "1238:  s2a := &v1.Service{",
          "1240:    Name:      \"kuardest\",",
          "1243:   Spec: v1.ServiceSpec{",
          "1244:    Ports: []v1.ServicePort{{",
          "1245:     Name:       \"http\",",
          "1246:     Protocol:   \"TCP\",",
          "1247:     Port:       8080,",
          "1248:     TargetPort: intstr.FromInt(8080),",
          "1254:  s3 := &v1.Service{",
          "1259:   Spec: v1.ServiceSpec{",
          "1260:    Ports: []v1.ServicePort{{",
          "1261:     Name:       \"http\",",
          "1262:     Protocol:   \"TCP\",",
          "1263:     Port:       9999,",
          "1264:     TargetPort: intstr.FromInt(8080),",
          "1269:  s4 := &v1.Service{",
          "1271:    Name:      \"blog\",",
          "1272:    Namespace: \"marketing\",",
          "1274:   Spec: v1.ServiceSpec{",
          "1275:    Ports: []v1.ServicePort{{",
          "1276:     Name:       \"http\",",
          "1277:     Protocol:   \"TCP\",",
          "1278:     Port:       8080,",
          "1279:     TargetPort: intstr.FromInt(8080),",
          "1284:  s9 := &v1.Service{",
          "1286:    Name:      \"nginx\",",
          "1289:   Spec: v1.ServiceSpec{",
          "1290:    Ports: []v1.ServicePort{{",
          "1291:     Protocol: \"TCP\",",
          "1292:     Port:     80,",
          "1297:  s10 := &v1.Service{",
          "1299:    Name:      \"tls-passthrough\",",
          "1302:   Spec: v1.ServiceSpec{",
          "1303:    Ports: []v1.ServicePort{{",
          "1304:     Name:       \"https\",",
          "1305:     Protocol:   \"TCP\",",
          "1306:     Port:       443,",
          "1307:     TargetPort: intstr.FromInt(443),",
          "1308:    }, {",
          "1309:     Name:       \"http\",",
          "1310:     Protocol:   \"TCP\",",
          "1311:     Port:       80,",
          "1312:     TargetPort: intstr.FromInt(80),",
          "1317:  s11 := &v1.Service{",
          "1319:    Name:      \"blog\",",
          "1320:    Namespace: \"it\",",
          "1322:   Spec: v1.ServiceSpec{",
          "1323:    Ports: []v1.ServicePort{{",
          "1324:     Name:     \"blog\",",
          "1325:     Protocol: \"TCP\",",
          "1326:     Port:     8080,",
          "1331:  s12 := &v1.Service{",
          "1334:    Namespace: \"teama\",",
          "1340:     Port:       8080,",
          "1341:     TargetPort: intstr.FromInt(8080),",
          "1346:  s13 := &v1.Service{",
          "1348:    Name:      \"kuard\",",
          "1349:    Namespace: \"teamb\",",
          "",
          "[Added Lines]",
          "738:  i17V1 := &networking_v1.Ingress{",
          "743:   Spec: networking_v1.IngressSpec{",
          "744:    Rules: []networking_v1.IngressRule{{",
          "746:     IngressRuleValue: ingressrulev1value(backendv1(\"kuard\", intstr.FromInt(8080))),",
          "751:  i1 := &v1beta1.Ingress{",
          "756:   Spec: v1beta1.IngressSpec{",
          "757:    Backend: backend(\"kuard\", intstr.FromInt(8080))},",
          "759:  i1a := &v1beta1.Ingress{",
          "761:    Name:      \"kuard\",",
          "762:    Namespace: \"default\",",
          "764:     \"kubernetes.io/ingress.allow-http\": \"false\",",
          "767:   Spec: v1beta1.IngressSpec{",
          "768:    Backend: backend(\"kuard\", intstr.FromInt(8080))},",
          "772:  i2 := &v1beta1.Ingress{",
          "774:    Name:      \"kuard\",",
          "775:    Namespace: \"default\",",
          "776:   },",
          "777:   Spec: v1beta1.IngressSpec{",
          "778:    Rules: []v1beta1.IngressRule{{",
          "779:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "780:    }},",
          "786:  i2a := &v1beta1.Ingress{",
          "788:    Name:      \"kuard\",",
          "791:   Spec: v1beta1.IngressSpec{",
          "792:    Rules: []v1beta1.IngressRule{{",
          "793:     Host: \"test1.test.com\",",
          "794:    }},",
          "795:   },",
          "799:  i3 := &v1beta1.Ingress{",
          "801:    Name:      \"kuard\",",
          "804:   Spec: v1beta1.IngressSpec{",
          "805:    TLS: []v1beta1.IngressTLS{{",
          "806:     Hosts:      []string{\"kuard.example.com\"},",
          "807:     SecretName: sec1.Name,",
          "808:    }},",
          "809:    Rules: []v1beta1.IngressRule{{",
          "810:     Host:             \"kuard.example.com\",",
          "811:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "816:  i4 := &v1beta1.Ingress{",
          "818:    Name:      \"kuard\",",
          "819:    Namespace: \"default\",",
          "821:   Spec: v1beta1.IngressSpec{",
          "822:    Backend: backend(\"kuard\", intstr.FromString(\"http\"))},",
          "825:  i5 := &v1beta1.Ingress{",
          "827:    Name:      \"kuard\",",
          "830:   Spec: v1beta1.IngressSpec{",
          "831:    Rules: []v1beta1.IngressRule{{",
          "832:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "838:  i6 := &v1beta1.Ingress{",
          "840:    Name:      \"two-vhosts\",",
          "843:   Spec: v1beta1.IngressSpec{",
          "844:    TLS: []v1beta1.IngressTLS{{",
          "845:     Hosts:      []string{\"b.example.com\"},",
          "846:     SecretName: sec1.Name,",
          "847:    }},",
          "848:    Rules: []v1beta1.IngressRule{{",
          "849:     Host:             \"a.example.com\",",
          "850:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "851:    }, {",
          "852:     Host:             \"b.example.com\",",
          "853:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "857:  i6a := &v1beta1.Ingress{",
          "859:    Name:      \"two-vhosts\",",
          "861:    Annotations: map[string]string{",
          "862:     \"kubernetes.io/ingress.allow-http\": \"false\",",
          "864:   },",
          "865:   Spec: v1beta1.IngressSpec{",
          "866:    TLS: []v1beta1.IngressTLS{{",
          "867:     Hosts:      []string{\"b.example.com\"},",
          "868:     SecretName: sec1.Name,",
          "869:    }},",
          "870:    Rules: []v1beta1.IngressRule{{",
          "871:     Host:             \"a.example.com\",",
          "872:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "873:    }, {",
          "874:     Host:             \"b.example.com\",",
          "875:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "879:  i6b := &v1beta1.Ingress{",
          "881:    Name:      \"two-vhosts\",",
          "883:    Annotations: map[string]string{",
          "884:     \"ingress.kubernetes.io/force-ssl-redirect\": \"true\",",
          "886:   },",
          "887:   Spec: v1beta1.IngressSpec{",
          "888:    TLS: []v1beta1.IngressTLS{{",
          "889:     Hosts:      []string{\"b.example.com\"},",
          "890:     SecretName: sec1.Name,",
          "891:    }},",
          "892:    Rules: []v1beta1.IngressRule{{",
          "893:     Host:             \"b.example.com\",",
          "894:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "898:  i6c := &v1beta1.Ingress{",
          "900:    Name:      \"two-vhosts\",",
          "902:    Annotations: map[string]string{",
          "903:     \"ingress.kubernetes.io/force-ssl-redirect\": \"true\",",
          "904:     \"kubernetes.io/ingress.allow-http\":         \"false\",",
          "906:   },",
          "907:   Spec: v1beta1.IngressSpec{",
          "908:    TLS: []v1beta1.IngressTLS{{",
          "909:     Hosts:      []string{\"b.example.com\"},",
          "910:     SecretName: sec1.Name,",
          "911:    }},",
          "912:    Rules: []v1beta1.IngressRule{{",
          "913:     Host:             \"b.example.com\",",
          "914:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromString(\"http\"))),",
          "920:  i7 := &v1beta1.Ingress{",
          "922:    Name:      \"two-paths\",",
          "925:   Spec: v1beta1.IngressSpec{",
          "926:    TLS: []v1beta1.IngressTLS{{",
          "927:     Hosts:      []string{\"b.example.com\"},",
          "928:     SecretName: sec1.Name,",
          "929:    }},",
          "930:    Rules: []v1beta1.IngressRule{{",
          "931:     Host: \"b.example.com\",",
          "932:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "933:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "934:       Paths: []v1beta1.HTTPIngressPath{{",
          "935:        Backend: v1beta1.IngressBackend{",
          "936:         ServiceName: \"kuard\",",
          "937:         ServicePort: intstr.FromString(\"http\"),",
          "938:        },",
          "939:       }, {",
          "940:        Path: \"/kuarder\",",
          "941:        Backend: v1beta1.IngressBackend{",
          "942:         ServiceName: \"kuarder\",",
          "943:         ServicePort: intstr.FromInt(8080),",
          "944:        },",
          "945:       }},",
          "946:      },",
          "947:     },",
          "953:  i8 := &v1beta1.Ingress{",
          "955:    Name:      \"two-rules\",",
          "958:   Spec: v1beta1.IngressSpec{",
          "959:    TLS: []v1beta1.IngressTLS{{",
          "960:     Hosts:      []string{\"b.example.com\"},",
          "961:     SecretName: sec1.Name,",
          "962:    }},",
          "963:    Rules: []v1beta1.IngressRule{{",
          "964:     Host: \"b.example.com\",",
          "965:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "966:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "967:       Paths: []v1beta1.HTTPIngressPath{{",
          "968:        Backend: v1beta1.IngressBackend{",
          "969:         ServiceName: \"kuard\",",
          "970:         ServicePort: intstr.FromString(\"http\"),",
          "971:        },",
          "972:       }},",
          "973:      },",
          "974:     },",
          "975:    }, {",
          "976:     Host: \"b.example.com\",",
          "977:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "978:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "979:       Paths: []v1beta1.HTTPIngressPath{{",
          "980:        Path: \"/kuarder\",",
          "981:        Backend: v1beta1.IngressBackend{",
          "982:         ServiceName: \"kuarder\",",
          "983:         ServicePort: intstr.FromInt(8080),",
          "984:        },",
          "985:       }},",
          "986:      },",
          "992:  i9 := &v1beta1.Ingress{",
          "994:    Name:      \"two-rules\",",
          "996:    Annotations: map[string]string{",
          "997:     \"kubernetes.io/ingress.allow-http\": \"false\",",
          "999:   },",
          "1000:   Spec: v1beta1.IngressSpec{",
          "1001:    TLS: []v1beta1.IngressTLS{{",
          "1002:     Hosts:      []string{\"b.example.com\"},",
          "1003:     SecretName: sec1.Name,",
          "1004:    }},",
          "1005:    Rules: []v1beta1.IngressRule{{",
          "1006:     Host: \"b.example.com\",",
          "1007:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1008:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1009:       Paths: []v1beta1.HTTPIngressPath{{",
          "1010:        Backend: v1beta1.IngressBackend{",
          "1011:         ServiceName: \"kuard\",",
          "1012:         ServicePort: intstr.FromString(\"http\"),",
          "1013:        },",
          "1014:       }},",
          "1015:      },",
          "1016:     },",
          "1017:    }, {",
          "1018:     Host: \"b.example.com\",",
          "1019:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1020:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1021:       Paths: []v1beta1.HTTPIngressPath{{",
          "1022:        Path: \"/kuarder\",",
          "1023:        Backend: v1beta1.IngressBackend{",
          "1024:         ServiceName: \"kuarder\",",
          "1025:         ServicePort: intstr.FromInt(8080),",
          "1026:        },",
          "1027:       }},",
          "1028:      },",
          "1034:  i10a := &v1beta1.Ingress{",
          "1036:    Name:      \"two-rules\",",
          "1038:    Annotations: map[string]string{",
          "1039:     \"projectcontour.io/tls-minimum-protocol-version\": \"1.3\",",
          "1041:   },",
          "1042:   Spec: v1beta1.IngressSpec{",
          "1043:    TLS: []v1beta1.IngressTLS{{",
          "1044:     Hosts:      []string{\"b.example.com\"},",
          "1045:     SecretName: sec1.Name,",
          "1046:    }},",
          "1047:    Rules: []v1beta1.IngressRule{{",
          "1048:     Host: \"b.example.com\",",
          "1049:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1050:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1051:       Paths: []v1beta1.HTTPIngressPath{{",
          "1052:        Backend: v1beta1.IngressBackend{",
          "1053:         ServiceName: \"kuard\",",
          "1054:         ServicePort: intstr.FromString(\"http\"),",
          "1055:        },",
          "1056:       }},",
          "1057:      },",
          "1064:  i11 := &v1beta1.Ingress{",
          "1066:    Name:      \"websocket\",",
          "1068:    Annotations: map[string]string{",
          "1069:     \"projectcontour.io/websocket-routes\": \"/ws1 , /ws2\",",
          "1071:   },",
          "1072:   Spec: v1beta1.IngressSpec{",
          "1073:    Rules: []v1beta1.IngressRule{{",
          "1074:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1075:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1076:       Paths: []v1beta1.HTTPIngressPath{{",
          "1077:        Backend: v1beta1.IngressBackend{",
          "1078:         ServiceName: \"kuard\",",
          "1079:         ServicePort: intstr.FromString(\"http\"),",
          "1080:        },",
          "1081:       }, {",
          "1082:        Path: \"/ws1\",",
          "1083:        Backend: v1beta1.IngressBackend{",
          "1084:         ServiceName: \"kuard\",",
          "1085:         ServicePort: intstr.FromString(\"http\"),",
          "1086:        },",
          "1087:       }},",
          "1088:      },",
          "1089:     },",
          "1095:  i12a := &v1beta1.Ingress{",
          "1097:    Name:      \"timeout\",",
          "1099:    Annotations: map[string]string{",
          "1100:     \"projectcontour.io/request-timeout\": \"peanut\",",
          "1102:   },",
          "1103:   Spec: v1beta1.IngressSpec{",
          "1104:    Rules: []v1beta1.IngressRule{{",
          "1105:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1106:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1107:       Paths: []v1beta1.HTTPIngressPath{{",
          "1108:        Path: \"/\",",
          "1109:        Backend: v1beta1.IngressBackend{",
          "1110:         ServiceName: \"kuard\",",
          "1111:         ServicePort: intstr.FromString(\"http\"),",
          "1112:        },",
          "1113:       }},",
          "1114:      },",
          "1121:  i12b := &v1beta1.Ingress{",
          "1123:    Name:      \"timeout\",",
          "1125:    Annotations: map[string]string{",
          "1126:     \"projectcontour.io/request-timeout\": \"1m30s\", // 90 seconds y'all",
          "1128:   },",
          "1129:   Spec: v1beta1.IngressSpec{",
          "1130:    Rules: []v1beta1.IngressRule{{",
          "1131:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1132:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1133:       Paths: []v1beta1.HTTPIngressPath{{",
          "1134:        Path: \"/\",",
          "1135:        Backend: v1beta1.IngressBackend{",
          "1136:         ServiceName: \"kuard\",",
          "1137:         ServicePort: intstr.FromString(\"http\"),",
          "1138:        },",
          "1139:       }},",
          "1140:      },",
          "1147:  i12c := &v1beta1.Ingress{",
          "1149:    Name:      \"timeout\",",
          "1151:    Annotations: map[string]string{",
          "1152:     \"projectcontour.io/request-timeout\": \"infinite\",",
          "1153:    },",
          "1155:   Spec: v1beta1.IngressSpec{",
          "1156:    Rules: []v1beta1.IngressRule{{",
          "1157:     IngressRuleValue: v1beta1.IngressRuleValue{HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1158:      Paths: []v1beta1.HTTPIngressPath{{Path: \"/\",",
          "1159:       Backend: v1beta1.IngressBackend{ServiceName: \"kuard\",",
          "1160:        ServicePort: intstr.FromString(\"http\")},",
          "1161:      }}},",
          "1162:     }}}},",
          "1165:  i12d := &v1beta1.Ingress{",
          "1167:    Name:      \"timeout\",",
          "1170:     \"projectcontour.io/response-timeout\": \"peanut\",",
          "1173:   Spec: v1beta1.IngressSpec{",
          "1174:    Rules: []v1beta1.IngressRule{{",
          "1175:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1176:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1177:       Paths: []v1beta1.HTTPIngressPath{{",
          "1178:        Path: \"/\",",
          "1179:        Backend: v1beta1.IngressBackend{",
          "1180:         ServiceName: \"kuard\",",
          "1181:         ServicePort: intstr.FromString(\"http\"),",
          "1182:        },",
          "1183:       }},",
          "1184:      },",
          "1185:     },",
          "1190:  i12e := &v1beta1.Ingress{",
          "1192:    Name:      \"timeout\",",
          "1195:     \"projectcontour.io/response-timeout\": \"1m30s\", // 90 seconds y'all",
          "1198:   Spec: v1beta1.IngressSpec{",
          "1199:    Rules: []v1beta1.IngressRule{{",
          "1200:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1201:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1202:       Paths: []v1beta1.HTTPIngressPath{{",
          "1203:        Path: \"/\",",
          "1204:        Backend: v1beta1.IngressBackend{",
          "1205:         ServiceName: \"kuard\",",
          "1206:         ServicePort: intstr.FromString(\"http\"),",
          "1207:        },",
          "1208:       }},",
          "1209:      },",
          "1210:     },",
          "1215:  i12f := &v1beta1.Ingress{",
          "1217:    Name:      \"timeout\",",
          "1219:    Annotations: map[string]string{",
          "1220:     \"projectcontour.io/response-timeout\": \"infinite\",",
          "1221:    },",
          "1223:   Spec: v1beta1.IngressSpec{",
          "1224:    Rules: []v1beta1.IngressRule{{",
          "1225:     IngressRuleValue: v1beta1.IngressRuleValue{HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1226:      Paths: []v1beta1.HTTPIngressPath{{Path: \"/\",",
          "1227:       Backend: v1beta1.IngressBackend{ServiceName: \"kuard\",",
          "1228:        ServicePort: intstr.FromString(\"http\")},",
          "1229:      }}},",
          "1230:     }}}},",
          "1236:  i13a := &v1beta1.Ingress{",
          "1238:    Name:      \"app\",",
          "1240:    Annotations: map[string]string{",
          "1241:     \"ingress.kubernetes.io/force-ssl-redirect\": \"true\",",
          "1242:    },",
          "1244:   Spec: v1beta1.IngressSpec{",
          "1245:    TLS: []v1beta1.IngressTLS{{",
          "1246:     Hosts:      []string{\"example.com\"},",
          "1247:     SecretName: \"example-tls\",",
          "1248:    }},",
          "1249:    Rules: []v1beta1.IngressRule{{",
          "1250:     Host: \"example.com\",",
          "1251:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1252:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1253:       Paths: []v1beta1.HTTPIngressPath{{",
          "1254:        Path: \"/\",",
          "1255:        Backend: v1beta1.IngressBackend{",
          "1256:         ServiceName: \"app-service\",",
          "1257:         ServicePort: intstr.FromInt(8080),",
          "1258:        },",
          "1259:       }},",
          "1260:      },",
          "1261:     },",
          "1262:    }},",
          "1263:   },",
          "1264:  }",
          "1265:  i13b := &v1beta1.Ingress{",
          "1266:   ObjectMeta: metav1.ObjectMeta{Name: \"challenge\", Namespace: \"nginx-ingress\"},",
          "1267:   Spec: v1beta1.IngressSpec{",
          "1268:    Rules: []v1beta1.IngressRule{{",
          "1269:     Host: \"example.com\",",
          "1270:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1271:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1272:       Paths: []v1beta1.HTTPIngressPath{{",
          "1273:        Path: \"/.well-known/acme-challenge/gVJl5NWL2owUqZekjHkt_bo3OHYC2XNDURRRgLI5JTk\",",
          "1274:        Backend: v1beta1.IngressBackend{",
          "1275:         ServiceName: \"challenge-service\",",
          "1276:         ServicePort: intstr.FromInt(8009),",
          "1277:        },",
          "1278:       }},",
          "1279:      },",
          "1280:     },",
          "1285:  i3a := &v1beta1.Ingress{",
          "1290:   Spec: v1beta1.IngressSpec{",
          "1291:    Rules: []v1beta1.IngressRule{{",
          "1292:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(80))),",
          "1297:  i14 := &v1beta1.Ingress{",
          "1299:    Name:      \"timeout\",",
          "1300:    Namespace: \"default\",",
          "1301:    Annotations: map[string]string{",
          "1302:     \"projectcontour.io/retry-on\":        \"gateway-error\",",
          "1303:     \"projectcontour.io/num-retries\":     \"6\",",
          "1304:     \"projectcontour.io/per-try-timeout\": \"10s\",",
          "1305:    },",
          "1307:   Spec: v1beta1.IngressSpec{",
          "1308:    Rules: []v1beta1.IngressRule{{",
          "1309:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1310:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1311:       Paths: []v1beta1.HTTPIngressPath{{",
          "1312:        Path: \"/\",",
          "1313:        Backend: v1beta1.IngressBackend{",
          "1314:         ServiceName: \"kuard\",",
          "1315:         ServicePort: intstr.FromString(\"http\"),",
          "1316:        },",
          "1317:       }},",
          "1318:      },",
          "1319:     },",
          "1324:  i15 := &v1beta1.Ingress{",
          "1326:    Name:      \"regex\",",
          "1329:   Spec: v1beta1.IngressSpec{",
          "1330:    Rules: []v1beta1.IngressRule{{",
          "1331:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1332:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1333:       Paths: []v1beta1.HTTPIngressPath{{",
          "1334:        Path: \"/[^/]+/invoices(/.*|/?)\", // issue 1243",
          "1335:        Backend: v1beta1.IngressBackend{",
          "1336:         ServiceName: \"kuard\",",
          "1337:         ServicePort: intstr.FromString(\"http\"),",
          "1338:        },",
          "1339:       }},",
          "1340:      },",
          "1341:     },",
          "1346:  i15InvalidRegex := &v1beta1.Ingress{",
          "1348:    Name:      \"regex\",",
          "1351:   Spec: v1beta1.IngressSpec{",
          "1352:    Rules: []v1beta1.IngressRule{{",
          "1353:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1354:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1355:       Paths: []v1beta1.HTTPIngressPath{{",
          "1356:        Path: \"^\\\\/(?!\\\\/)(.*?)\",",
          "1357:        Backend: v1beta1.IngressBackend{",
          "1358:         ServiceName: \"kuard\",",
          "1359:         ServicePort: intstr.FromString(\"http\"),",
          "1360:        },",
          "1361:       }},",
          "1362:      },",
          "1363:     },",
          "1368:  i16 := &v1beta1.Ingress{",
          "1370:    Name:      \"wildcards\",",
          "1371:    Namespace: \"default\",",
          "1373:   Spec: v1beta1.IngressSpec{",
          "1374:    Rules: []v1beta1.IngressRule{{",
          "1376:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1377:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1378:       Paths: []v1beta1.HTTPIngressPath{{",
          "1379:        Backend: v1beta1.IngressBackend{",
          "1380:         ServiceName: \"kuard\",",
          "1381:         ServicePort: intstr.FromString(\"http\")},",
          "1382:       }},",
          "1383:      },",
          "1384:     },",
          "1385:    }, {",
          "1386:     Host: \"*\",",
          "1387:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1388:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1389:       Paths: []v1beta1.HTTPIngressPath{{",
          "1390:        Backend: v1beta1.IngressBackend{",
          "1391:         ServiceName: \"kuard\",",
          "1392:         ServicePort: intstr.FromString(\"http\"),",
          "1393:        },",
          "1394:       }},",
          "1395:      },",
          "1396:     },",
          "1397:    }, {",
          "1398:     Host: \"*.example.com\",",
          "1399:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "1400:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "1401:       Paths: []v1beta1.HTTPIngressPath{{",
          "1402:        Backend: v1beta1.IngressBackend{",
          "1403:         ServiceName: \"kuarder\",",
          "1404:         ServicePort: intstr.FromInt(8080),",
          "1405:        },",
          "1406:       }},",
          "1407:      },",
          "1408:     },",
          "1413:  i17 := &v1beta1.Ingress{",
          "1416:    Namespace: \"default\",",
          "1417:   },",
          "1418:   Spec: v1beta1.IngressSpec{",
          "1419:    Rules: []v1beta1.IngressRule{{",
          "1420:     Host:             \"example.com\",",
          "1421:     IngressRuleValue: ingressrulevalue(backend(\"kuard\", intstr.FromInt(8080))),",
          "1422:    }},",
          "1423:   },",
          "1424:  }",
          "1426:  s3a := &v1.Service{",
          "1427:   ObjectMeta: metav1.ObjectMeta{",
          "1428:    Name:      \"kuard\",",
          "1429:    Namespace: \"default\",",
          "1430:    Annotations: map[string]string{",
          "1431:     \"projectcontour.io/upstream-protocol.h2c\": \"80,http\",",
          "1432:    },",
          "1438:     Port:       80,",
          "1439:     TargetPort: intstr.FromInt(8888),",
          "1444:  s3b := &v1.Service{",
          "1446:    Name:      s3a.Name,",
          "1447:    Namespace: s3a.Namespace,",
          "1448:    Annotations: map[string]string{",
          "1449:     \"projectcontour.io/upstream-protocol.h2\": \"80,http\",",
          "1450:    },",
          "1451:   },",
          "1452:   Spec: s3a.Spec,",
          "1453:  }",
          "1455:  s3c := &v1.Service{",
          "1456:   ObjectMeta: metav1.ObjectMeta{",
          "1457:    Name:      s3b.Name,",
          "1458:    Namespace: s3b.Namespace,",
          "1459:    Annotations: map[string]string{",
          "1460:     \"projectcontour.io/upstream-protocol.tls\": \"80,http\",",
          "1461:    },",
          "1462:   },",
          "1463:   Spec: s3b.Spec,",
          "1464:  }",
          "1466:  sec13 := &v1.Secret{",
          "1467:   ObjectMeta: metav1.ObjectMeta{",
          "1468:    Name:      \"example-tls\",",
          "1469:    Namespace: \"default\",",
          "1470:   },",
          "1471:   Type: v1.SecretTypeTLS,",
          "1472:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "1473:  }",
          "1475:  s13a := &v1.Service{",
          "1476:   ObjectMeta: metav1.ObjectMeta{",
          "1477:    Name:      \"app-service\",",
          "1478:    Namespace: \"default\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1358:   },",
          "1359:  }",
          "1362:   ObjectMeta: metav1.ObjectMeta{",
          "1365:   },",
          "1366:   Spec: v1.ServiceSpec{",
          "1368:    Ports: []v1.ServicePort{{",
          "1371:    }},",
          "1373:   },",
          "1374:  }",
          "1377:   ObjectMeta: metav1.ObjectMeta{",
          "1380:   },",
          "1381:   Spec: contour_api_v1.HTTPProxySpec{",
          "1382:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1387:    },",
          "1388:    Routes: []contour_api_v1.Route{{",
          "1389:     Conditions: []contour_api_v1.MatchCondition{{",
          "1390:      Prefix: \"/\",",
          "1391:     }},",
          "1392:     Services: []contour_api_v1.Service{{",
          "1395:     }},",
          "1396:    }},",
          "1397:   },",
          "1398:  }",
          "1401:   ObjectMeta: metav1.ObjectMeta{",
          "1402:    Name:      \"example-com\",",
          "1403:    Namespace: \"default\",",
          "1404:   },",
          "1405:   Spec: contour_api_v1.HTTPProxySpec{",
          "1406:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1408:    },",
          "1409:    Routes: []contour_api_v1.Route{{",
          "1410:     Conditions: []contour_api_v1.MatchCondition{{",
          "",
          "[Removed Lines]",
          "1361:  s14 := &v1.Service{",
          "1363:    Name:      \"nginx\",",
          "1364:    Namespace: \"default\",",
          "1367:    ExternalName: \"externalservice.io\",",
          "1369:     Protocol: \"TCP\",",
          "1370:     Port:     80,",
          "1372:    Type: v1.ServiceTypeExternalName,",
          "1376:  proxyDelegatedTLSSecret := &contour_api_v1.HTTPProxy{",
          "1378:    Name:      \"app-with-tls-delegation\",",
          "1379:    Namespace: s10.Namespace,",
          "1383:     Fqdn: \"app-with-tls-delegation.127.0.0.1.nip.io\",",
          "1384:     TLS: &contour_api_v1.TLS{",
          "1385:      SecretName: \"projectcontour/ssl-cert\", // not delegated",
          "1386:     },",
          "1393:      Name: s10.Name,",
          "1394:      Port: 80,",
          "1400:  proxy1 := &contour_api_v1.HTTPProxy{",
          "1407:     Fqdn: \"example.com\",",
          "",
          "[Added Lines]",
          "1490:  s13b := &v1.Service{",
          "1492:    Name:      \"challenge-service\",",
          "1493:    Namespace: \"nginx-ingress\",",
          "1497:     Name:       \"http\",",
          "1498:     Protocol:   \"TCP\",",
          "1499:     Port:       8009,",
          "1500:     TargetPort: intstr.FromInt(8080),",
          "1505:  proxyMultipleBackends := &contour_api_v1.HTTPProxy{",
          "1507:    Name:      \"example-com\",",
          "1508:    Namespace: \"default\",",
          "1512:     Fqdn: \"example.com\",",
          "1519:      Name: \"kuard\",",
          "1520:      Port: 8080,",
          "1521:     }, {",
          "1522:      Name: \"kuarder\",",
          "1523:      Port: 8080,",
          "1529:  proxyMinTLS12 := &contour_api_v1.HTTPProxy{",
          "1536:     Fqdn: \"foo.com\",",
          "1537:     TLS: &contour_api_v1.TLS{",
          "1538:      SecretName:             sec1.Name,",
          "1539:      MinimumProtocolVersion: \"1.2\",",
          "1540:     },",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1418:   },",
          "1419:  }",
          "1423:   ObjectMeta: metav1.ObjectMeta{",
          "1425:    Namespace: \"default\",",
          "1426:   },",
          "1427:   Spec: contour_api_v1.HTTPProxySpec{",
          "1428:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1430:     TLS: &contour_api_v1.TLS{",
          "1432:     },",
          "1433:    },",
          "1435:     Services: []contour_api_v1.Service{{",
          "1436:      Name: \"kuard\",",
          "1437:      Port: 8080,",
          "1438:     }},",
          "1440:   },",
          "1441:  }",
          "1445:   ObjectMeta: metav1.ObjectMeta{",
          "1446:    Name:      \"example-com\",",
          "1447:    Namespace: \"default\",",
          "1448:   },",
          "1449:   Spec: contour_api_v1.HTTPProxySpec{",
          "1450:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1455:      Name: \"kuard\",",
          "1456:      Port: 8080,",
          "1457:     }},",
          "",
          "[Removed Lines]",
          "1422:  proxy1a := &contour_api_v1.HTTPProxy{",
          "1424:    Name:      \"kuard-tcp\",",
          "1429:     Fqdn: \"kuard.example.com\",",
          "1431:      Passthrough: true,",
          "1434:    TCPProxy: &contour_api_v1.TCPProxy{",
          "1439:    },",
          "1444:  proxy1b := &contour_api_v1.HTTPProxy{",
          "1451:     Fqdn: \"example.com\",",
          "1452:    },",
          "1453:    Routes: []contour_api_v1.Route{{",
          "1454:     Services: []contour_api_v1.Service{{",
          "",
          "[Added Lines]",
          "1554:  proxyMinTLS13 := &contour_api_v1.HTTPProxy{",
          "1556:    Name:      \"example-com\",",
          "1561:     Fqdn: \"foo.com\",",
          "1563:      SecretName:             sec1.Name,",
          "1564:      MinimumProtocolVersion: \"1.3\",",
          "1567:    Routes: []contour_api_v1.Route{{",
          "1568:     Conditions: []contour_api_v1.MatchCondition{{",
          "1569:      Prefix: \"/\",",
          "1570:     }},",
          "1575:    }},",
          "1579:  proxyMinTLSInvalid := &contour_api_v1.HTTPProxy{",
          "1586:     Fqdn: \"foo.com\",",
          "1587:     TLS: &contour_api_v1.TLS{",
          "1588:      SecretName:             sec1.Name,",
          "1589:      MinimumProtocolVersion: \"0.999\",",
          "1590:     },",
          "1591:    },",
          "1592:    Routes: []contour_api_v1.Route{{",
          "1593:     Conditions: []contour_api_v1.MatchCondition{{",
          "1594:      Prefix: \"/\",",
          "1595:     }},",
          "1596:     Services: []contour_api_v1.Service{{",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1459:   },",
          "1460:  }",
          "1464:   ObjectMeta: metav1.ObjectMeta{",
          "1465:    Name:      \"example-com\",",
          "1466:    Namespace: \"default\",",
          "",
          "[Removed Lines]",
          "1463:  proxy1c := &contour_api_v1.HTTPProxy{",
          "",
          "[Added Lines]",
          "1604:  proxyWeightsTwoRoutesDiffWeights := &contour_api_v1.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1471:    },",
          "1472:    Routes: []contour_api_v1.Route{{",
          "1473:     Conditions: []contour_api_v1.MatchCondition{{",
          "1500:     }},",
          "1501:     Services: []contour_api_v1.Service{{",
          "1504:     }},",
          "1505:    }},",
          "1506:   },",
          "1507:  }",
          "1512:   ObjectMeta: metav1.ObjectMeta{",
          "1515:   },",
          "1516:   Spec: contour_api_v1.HTTPProxySpec{",
          "1517:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1522:    },",
          "1523:    Routes: []contour_api_v1.Route{{",
          "1527:     }},",
          "1530:     Services: []contour_api_v1.Service{{",
          "1533:     }},",
          "1535:   },",
          "1536:  }",
          "1541:   ObjectMeta: metav1.ObjectMeta{",
          "1544:   },",
          "1545:   Spec: contour_api_v1.HTTPProxySpec{",
          "1546:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1551:    },",
          "1552:    Routes: []contour_api_v1.Route{{",
          "1557:     }},",
          "1560:     Services: []contour_api_v1.Service{{",
          "1563:     }},",
          "1565:   },",
          "1566:  }",
          "1571:   ObjectMeta: metav1.ObjectMeta{",
          "1573:    Namespace: \"default\",",
          "1574:   },",
          "1575:   Spec: contour_api_v1.HTTPProxySpec{",
          "1576:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1578:    },",
          "1579:    Routes: []contour_api_v1.Route{{",
          "1580:     Conditions: []contour_api_v1.MatchCondition{{",
          "1581:      Prefix: \"/\",",
          "1582:     }},",
          "1583:     Services: []contour_api_v1.Service{{",
          "1585:      Port: 8080,",
          "1586:     }},",
          "1587:    }},",
          "1588:   },",
          "1589:  }",
          "1592:   ObjectMeta: metav1.ObjectMeta{",
          "1595:   },",
          "1596:   Spec: contour_api_v1.HTTPProxySpec{",
          "1597:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1599:    },",
          "1601:     Conditions: []contour_api_v1.MatchCondition{{",
          "1616:     }},",
          "1619:    }},",
          "1620:   },",
          "1621:  }",
          "1624:   ObjectMeta: metav1.ObjectMeta{",
          "1626:    Namespace: \"default\",",
          "1627:   },",
          "1628:   Spec: contour_api_v1.HTTPProxySpec{",
          "1629:    Routes: []contour_api_v1.Route{{",
          "1630:     Conditions: []contour_api_v1.MatchCondition{{",
          "1642:     }},",
          "1643:     Services: []contour_api_v1.Service{{",
          "1644:      Name: \"kuard\",",
          "1645:      Port: 8080,",
          "",
          "[Removed Lines]",
          "1474:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1475:       Name:    \"x-request-id\",",
          "1476:       Present: true,",
          "1477:      },",
          "1478:     }, {",
          "1479:      Prefix: \"/kuard\",",
          "1480:     }, {",
          "1481:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1482:       Name:     \"e-tag\",",
          "1483:       Contains: \"abcdef\",",
          "1484:      },",
          "1485:     }, {",
          "1486:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1487:       Name:        \"x-timeout\",",
          "1488:       NotContains: \"infinity\",",
          "1489:      },",
          "1490:     }, {",
          "1491:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1492:       Name:  \"digest-auth\",",
          "1493:       Exact: \"scott\",",
          "1494:      },",
          "1495:     }, {",
          "1496:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1497:       Name:     \"digest-password\",",
          "1498:       NotExact: \"tiger\",",
          "1499:      },",
          "1502:      Name: \"kuard\",",
          "1503:      Port: 8080,",
          "1511:  proxy1d := &contour_api_v1.HTTPProxy{",
          "1513:    Name:      \"kuard-tcp\",",
          "1514:    Namespace: s1.Namespace,",
          "1518:     Fqdn: \"kuard.example.com\",",
          "1519:     TLS: &contour_api_v1.TLS{",
          "1520:      Passthrough: true,",
          "1521:     },",
          "1524:     Services: []contour_api_v1.Service{{",
          "1525:      Name: s1.Name,",
          "1526:      Port: 8080,",
          "1528:    }},",
          "1529:    TCPProxy: &contour_api_v1.TCPProxy{",
          "1531:      Name: s1.Name,",
          "1532:      Port: 8080,",
          "1534:    },",
          "1540:  proxy1e := &contour_api_v1.HTTPProxy{",
          "1542:    Name:      \"kuard-tcp\",",
          "1543:    Namespace: s1.Namespace,",
          "1547:     Fqdn: \"kuard.example.com\",",
          "1548:     TLS: &contour_api_v1.TLS{",
          "1549:      Passthrough: true,",
          "1550:     },",
          "1553:     PermitInsecure: true,",
          "1554:     Services: []contour_api_v1.Service{{",
          "1555:      Name: s10.Name,",
          "1556:      Port: 80,",
          "1558:    }},",
          "1559:    TCPProxy: &contour_api_v1.TCPProxy{",
          "1561:      Name: s10.Name,",
          "1562:      Port: 443,",
          "1564:    },",
          "1570:  proxy1f := &contour_api_v1.HTTPProxy{",
          "1572:    Name:      \"example-com\",",
          "1577:     Fqdn: \"example.com\",",
          "1584:      Name: s2a.Name,",
          "1591:  proxy2a := &contour_api_v1.HTTPProxy{",
          "1593:    Name:      \"example-com\",",
          "1594:    Namespace: \"kubesystem\",",
          "1598:     Fqdn: \"example.com\",",
          "1600:    Includes: []contour_api_v1.Include{{",
          "1602:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1603:       Name:    \"x-request-id\",",
          "1604:       Present: true,",
          "1605:      },",
          "1606:     }, {",
          "1607:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1608:       Name:        \"x-timeout\",",
          "1609:       NotContains: \"infinity\",",
          "1610:      },",
          "1611:     }, {",
          "1612:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1613:       Name:  \"digest-auth\",",
          "1614:       Exact: \"scott\",",
          "1615:      },",
          "1617:     Name:      \"kuard\",",
          "1618:     Namespace: \"default\",",
          "1623:  proxy2b := &contour_api_v1.HTTPProxy{",
          "1625:    Name:      \"kuard\",",
          "1631:      Prefix: \"/kuard\",",
          "1632:     }, {",
          "1633:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1634:       Name:     \"e-tag\",",
          "1635:       Contains: \"abcdef\",",
          "1636:      },",
          "1637:     }, {",
          "1638:      Header: &contour_api_v1.HeaderMatchCondition{",
          "1639:       Name:     \"digest-password\",",
          "1640:       NotExact: \"tiger\",",
          "1641:      },",
          "",
          "[Added Lines]",
          "1615:      Prefix: \"/a\",",
          "1618:      Name:   \"kuard\",",
          "1619:      Port:   8080,",
          "1620:      Weight: 90,",
          "1621:     }},",
          "1622:    }, {",
          "1623:     Conditions: []contour_api_v1.MatchCondition{{",
          "1624:      Prefix: \"/b\",",
          "1625:     }},",
          "1626:     Services: []contour_api_v1.Service{{",
          "1627:      Name:   \"kuard\",",
          "1628:      Port:   8080,",
          "1629:      Weight: 60,",
          "1635:  proxyWeightsOneRouteDiffWeights := &contour_api_v1.HTTPProxy{",
          "1637:    Name:      \"example-com\",",
          "1638:    Namespace: \"default\",",
          "1642:     Fqdn: \"example.com\",",
          "1645:     Conditions: []contour_api_v1.MatchCondition{{",
          "1646:      Prefix: \"/a\",",
          "1649:      Name:   \"kuard\",",
          "1650:      Port:   8080,",
          "1651:      Weight: 90,",
          "1652:     }, {",
          "1653:      Name:   \"kuard\",",
          "1654:      Port:   8080,",
          "1655:      Weight: 60,",
          "1657:    }},",
          "1661:  proxyRetryPolicyValidTimeout := &contour_api_v1.HTTPProxy{",
          "1663:    Name:      \"bar-com\",",
          "1664:    Namespace: \"default\",",
          "1668:     Fqdn: \"bar.com\",",
          "1671:     Conditions: []contour_api_v1.MatchCondition{{",
          "1672:      Prefix: \"/\",",
          "1674:     RetryPolicy: &contour_api_v1.RetryPolicy{",
          "1675:      NumRetries:    6,",
          "1676:      PerTryTimeout: \"10s\",",
          "1677:     },",
          "1679:      Name: \"kuard\",",
          "1680:      Port: 8080,",
          "1682:    }},",
          "1686:  proxyRetryPolicyInvalidTimeout := &contour_api_v1.HTTPProxy{",
          "1688:    Name:      \"bar-com\",",
          "1693:     Fqdn: \"bar.com\",",
          "1699:     RetryPolicy: &contour_api_v1.RetryPolicy{",
          "1700:      NumRetries:    6,",
          "1701:      PerTryTimeout: \"please\",",
          "1702:     },",
          "1704:      Name: \"kuard\",",
          "1711:  proxyRetryPolicyZeroRetries := &contour_api_v1.HTTPProxy{",
          "1713:    Name:      \"bar-com\",",
          "1714:    Namespace: \"default\",",
          "1718:     Fqdn: \"bar.com\",",
          "1720:    Routes: []contour_api_v1.Route{{",
          "1722:      Prefix: \"/\",",
          "1723:     }},",
          "1724:     RetryPolicy: &contour_api_v1.RetryPolicy{",
          "1725:      NumRetries:    0,",
          "1726:      PerTryTimeout: \"10s\",",
          "1727:     },",
          "1728:     Services: []contour_api_v1.Service{{",
          "1729:      Name: \"kuard\",",
          "1730:      Port: 8080,",
          "1736:  proxyTimeoutPolicyInvalidResponse := &contour_api_v1.HTTPProxy{",
          "1738:    Name:      \"bar-com\",",
          "1742:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1743:     Fqdn: \"bar.com\",",
          "1744:    },",
          "1747:      Prefix: \"/\",",
          "1749:     TimeoutPolicy: &contour_api_v1.TimeoutPolicy{",
          "1750:      Response: \"peanut\",",
          "1751:     },",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1648:   },",
          "1649:  }",
          "1652:   ObjectMeta: metav1.ObjectMeta{",
          "1654:    Namespace: \"default\",",
          "1655:   },",
          "1656:   Spec: contour_api_v1.HTTPProxySpec{",
          "1657:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1659:    },",
          "1660:    Routes: []contour_api_v1.Route{{",
          "1661:     Conditions: []contour_api_v1.MatchCondition{{",
          "1662:      Prefix: \"/\",",
          "1663:     }},",
          "1666:     },",
          "1667:     Services: []contour_api_v1.Service{{",
          "1668:      Name: \"kuard\",",
          "",
          "[Removed Lines]",
          "1651:  proxy2c := &contour_api_v1.HTTPProxy{",
          "1653:    Name:      \"example-com\",",
          "1658:     Fqdn: \"example.com\",",
          "1664:     HealthCheckPolicy: &contour_api_v1.HTTPHealthCheckPolicy{",
          "1665:      Path: \"/healthz\",",
          "",
          "[Added Lines]",
          "1760:  proxyTimeoutPolicyValidResponse := &contour_api_v1.HTTPProxy{",
          "1762:    Name:      \"bar-com\",",
          "1767:     Fqdn: \"bar.com\",",
          "1773:     TimeoutPolicy: &contour_api_v1.TimeoutPolicy{",
          "1774:      Response: \"1m30s\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1672:   },",
          "1673:  }",
          "1678:   ObjectMeta: metav1.ObjectMeta{",
          "1680:    Namespace: \"default\",",
          "1681:   },",
          "1682:   Spec: contour_api_v1.HTTPProxySpec{",
          "1683:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1685:    },",
          "1720:     },",
          "1722:   },",
          "1723:  }",
          "1728:   ObjectMeta: metav1.ObjectMeta{",
          "1730:    Namespace: \"default\",",
          "1731:   },",
          "1772:   },",
          "1773:  }",
          "1777:   ObjectMeta: metav1.ObjectMeta{",
          "1779:    Namespace: \"default\",",
          "1787:    },",
          "1796:    }},",
          "1797:   },",
          "1798:  }",
          "1801:   ObjectMeta: metav1.ObjectMeta{",
          "1803:    Namespace: \"default\",",
          "1808:    },",
          "1821:    }},",
          "1822:   },",
          "1823:  }",
          "1826:   ObjectMeta: metav1.ObjectMeta{",
          "1828:    Namespace: \"default\",",
          "1829:   },",
          "1847:    }},",
          "1848:   },",
          "1849:  }",
          "1853:   ObjectMeta: metav1.ObjectMeta{",
          "1855:    Namespace: \"default\",",
          "1856:   },",
          "1875:    }},",
          "1876:   },",
          "1877:  }",
          "1881:   ObjectMeta: metav1.ObjectMeta{",
          "1883:    Namespace: \"default\",",
          "1884:   },",
          "1901:   },",
          "1902:  }",
          "1906:   ObjectMeta: metav1.ObjectMeta{",
          "1908:    Namespace: \"default\",",
          "1909:   },",
          "1931:    }},",
          "1932:   },",
          "1933:  }",
          "1937:   ObjectMeta: metav1.ObjectMeta{",
          "1939:    Namespace: \"default\",",
          "1940:   },",
          "1953:    }, {",
          "1962:    }},",
          "1963:   },",
          "1964:  }",
          "1968:   ObjectMeta: metav1.ObjectMeta{",
          "1971:   },",
          "1972:   Spec: contour_api_v1.HTTPProxySpec{",
          "1973:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1975:    },",
          "1976:    Routes: []contour_api_v1.Route{{",
          "1977:     Conditions: []contour_api_v1.MatchCondition{{",
          "1978:      Prefix: \"/\",",
          "1979:     }},",
          "1980:     Services: []contour_api_v1.Service{{",
          "1987:     }},",
          "1988:    }},",
          "1989:   },",
          "1990:  }",
          "1994:   ObjectMeta: metav1.ObjectMeta{",
          "1995:    Name:      \"example-com\",",
          "1997:   },",
          "1998:   Spec: contour_api_v1.HTTPProxySpec{",
          "1999:    VirtualHost: &contour_api_v1.VirtualHost{",
          "",
          "[Removed Lines]",
          "1677:  proxy2d := &contour_api_v1.HTTPProxy{",
          "1679:    Name:      \"example-com\",",
          "1684:     Fqdn: \"example.com\",",
          "1686:    Routes: []contour_api_v1.Route{",
          "1687:     {",
          "1688:      Conditions: []contour_api_v1.MatchCondition{",
          "1689:       {",
          "1690:        Header: &contour_api_v1.HeaderMatchCondition{",
          "1691:         Name:     \"e-tag\",",
          "1692:         Contains: \"abc\",",
          "1693:        },",
          "1694:       },",
          "1695:       {",
          "1696:        Prefix: \"/\",",
          "1697:       },",
          "1698:      },",
          "1699:      Services: []contour_api_v1.Service{{",
          "1700:       Name: \"kuard\",",
          "1701:       Port: 8080,",
          "1702:      }},",
          "1703:     },",
          "1704:     {",
          "1705:      Conditions: []contour_api_v1.MatchCondition{",
          "1706:       {",
          "1707:        Header: &contour_api_v1.HeaderMatchCondition{",
          "1708:         Name:     \"e-tag\",",
          "1709:         Contains: \"def\",",
          "1710:        },",
          "1711:       },",
          "1712:       {",
          "1713:        Prefix: \"/\",",
          "1714:       },",
          "1715:      },",
          "1716:      Services: []contour_api_v1.Service{{",
          "1717:       Name: \"kuard\",",
          "1718:       Port: 8080,",
          "1719:      }},",
          "1721:    },",
          "1727:  proxy2e := &contour_api_v1.HTTPProxy{",
          "1729:    Name:      \"example-com\",",
          "1732:   Spec: contour_api_v1.HTTPProxySpec{",
          "1733:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1734:     Fqdn: \"example.com\",",
          "1735:    },",
          "1736:    Routes: []contour_api_v1.Route{",
          "1737:     {",
          "1738:      Conditions: []contour_api_v1.MatchCondition{",
          "1739:       {",
          "1740:        Header: &contour_api_v1.HeaderMatchCondition{",
          "1741:         Name:     \"e-tag\",",
          "1742:         Contains: \"abc\",",
          "1743:        },",
          "1744:       },",
          "1745:       {",
          "1746:        Prefix: \"/\",",
          "1747:       },",
          "1748:      },",
          "1749:      Services: []contour_api_v1.Service{{",
          "1750:       Name: \"kuard\",",
          "1751:       Port: 8080,",
          "1752:      }},",
          "1753:     },",
          "1754:     {",
          "1755:      Conditions: []contour_api_v1.MatchCondition{",
          "1756:       {",
          "1757:        Header: &contour_api_v1.HeaderMatchCondition{",
          "1758:         Name:        \"e-tag\",",
          "1759:         NotContains: \"abc\",",
          "1760:        },",
          "1761:       },",
          "1762:       {",
          "1763:        Prefix: \"/\",",
          "1764:       },",
          "1765:      },",
          "1766:      Services: []contour_api_v1.Service{{",
          "1767:       Name: \"kuard\",",
          "1768:       Port: 8080,",
          "1769:      }},",
          "1770:     },",
          "1771:    },",
          "1776:  proxy6 := &contour_api_v1.HTTPProxy{",
          "1778:    Name:      \"example-com\",",
          "1780:   },",
          "1781:   Spec: contour_api_v1.HTTPProxySpec{",
          "1782:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1783:     Fqdn: \"foo.com\",",
          "1784:     TLS: &contour_api_v1.TLS{",
          "1785:      SecretName: sec1.Name,",
          "1786:     },",
          "1788:    Routes: []contour_api_v1.Route{{",
          "1789:     Conditions: []contour_api_v1.MatchCondition{{",
          "1790:      Prefix: \"/\",",
          "1791:     }},",
          "1792:     Services: []contour_api_v1.Service{{",
          "1793:      Name: \"kuard\",",
          "1794:      Port: 8080,",
          "1795:     }},",
          "1800:  proxy17 := &contour_api_v1.HTTPProxy{",
          "1802:    Name:      \"example-com\",",
          "1804:   },",
          "1805:   Spec: contour_api_v1.HTTPProxySpec{",
          "1806:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1807:     Fqdn: \"example.com\",",
          "1809:    Routes: []contour_api_v1.Route{{",
          "1810:     Conditions: []contour_api_v1.MatchCondition{{",
          "1811:      Prefix: \"/\",",
          "1812:     }},",
          "1813:     Services: []contour_api_v1.Service{{",
          "1814:      Name: \"kuard\",",
          "1815:      Port: 8080,",
          "1816:      UpstreamValidation: &contour_api_v1.UpstreamValidation{",
          "1817:       CACertificate: cert1.Name,",
          "1818:       SubjectName:   \"example.com\",",
          "1819:      },",
          "1820:     }},",
          "1824:  protocolh2 := \"h2\"",
          "1825:  proxy17h2 := &contour_api_v1.HTTPProxy{",
          "1827:    Name:      \"example-com\",",
          "1830:   Spec: contour_api_v1.HTTPProxySpec{",
          "1831:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1832:     Fqdn: \"example.com\",",
          "1833:    },",
          "1834:    Routes: []contour_api_v1.Route{{",
          "1835:     Conditions: []contour_api_v1.MatchCondition{{",
          "1836:      Prefix: \"/\",",
          "1837:     }},",
          "1838:     Services: []contour_api_v1.Service{{",
          "1839:      Name:     \"kuard\",",
          "1840:      Port:     8080,",
          "1841:      Protocol: &protocolh2,",
          "1842:      UpstreamValidation: &contour_api_v1.UpstreamValidation{",
          "1843:       CACertificate: cert1.Name,",
          "1844:       SubjectName:   \"example.com\",",
          "1845:      },",
          "1846:     }},",
          "1852:  proxy18 := &contour_api_v1.HTTPProxy{",
          "1854:    Name:      \"example-com\",",
          "1857:   Spec: contour_api_v1.HTTPProxySpec{",
          "1858:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1859:     Fqdn: \"example.com\",",
          "1860:     TLS: &contour_api_v1.TLS{",
          "1861:      SecretName: sec1.Name,",
          "1862:      ClientValidation: &contour_api_v1.DownstreamValidation{",
          "1863:       CACertificate: cert1.Name,",
          "1864:      },",
          "1865:     },",
          "1866:    },",
          "1867:    Routes: []contour_api_v1.Route{{",
          "1868:     Conditions: []contour_api_v1.MatchCondition{{",
          "1869:      Prefix: \"/\",",
          "1870:     }},",
          "1871:     Services: []contour_api_v1.Service{{",
          "1872:      Name: s1.Name,",
          "1873:      Port: 8080,",
          "1874:     }},",
          "1880:  proxy19 := &contour_api_v1.HTTPProxy{",
          "1882:    Name:      \"example-com\",",
          "1885:   Spec: contour_api_v1.HTTPProxySpec{",
          "1886:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1887:     Fqdn: \"example.com\",",
          "1888:     TLS: &contour_api_v1.TLS{",
          "1889:      SecretName: sec1.Name,",
          "1890:      ClientValidation: &contour_api_v1.DownstreamValidation{",
          "1891:       CACertificate: cert1.Name,",
          "1892:      },",
          "1893:     },",
          "1894:    },",
          "1895:    TCPProxy: &contour_api_v1.TCPProxy{",
          "1896:     Services: []contour_api_v1.Service{{",
          "1897:      Name: s1.Name,",
          "1898:      Port: 8080,",
          "1899:     }},",
          "1900:    },",
          "1905:  proxy10 := &contour_api_v1.HTTPProxy{",
          "1907:    Name:      \"example-com\",",
          "1910:   Spec: contour_api_v1.HTTPProxySpec{",
          "1911:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1912:     Fqdn: \"example.com\",",
          "1913:    },",
          "1914:    Routes: []contour_api_v1.Route{{",
          "1915:     Conditions: []contour_api_v1.MatchCondition{{",
          "1916:      Prefix: \"/\",",
          "1917:     }},",
          "1918:     Services: []contour_api_v1.Service{{",
          "1919:      Name: \"kuard\",",
          "1920:      Port: 8080,",
          "1921:     }},",
          "1922:    }, {",
          "1923:     Conditions: []contour_api_v1.MatchCondition{{",
          "1924:      Prefix: \"/websocket\",",
          "1925:     }},",
          "1926:     EnableWebsockets: true,",
          "1927:     Services: []contour_api_v1.Service{{",
          "1928:      Name: \"kuard\",",
          "1929:      Port: 8080,",
          "1930:     }},",
          "1936:  proxy10b := &contour_api_v1.HTTPProxy{",
          "1938:    Name:      \"example-com\",",
          "1941:   Spec: contour_api_v1.HTTPProxySpec{",
          "1942:    VirtualHost: &contour_api_v1.VirtualHost{",
          "1943:     Fqdn: \"example.com\",",
          "1944:    },",
          "1945:    Routes: []contour_api_v1.Route{{",
          "1946:     Conditions: []contour_api_v1.MatchCondition{{",
          "1947:      Prefix: \"/\",",
          "1948:     }},",
          "1949:     Services: []contour_api_v1.Service{{",
          "1950:      Name: \"kuard\",",
          "1951:      Port: 8080,",
          "1952:     }},",
          "1954:     Conditions: []contour_api_v1.MatchCondition{{",
          "1955:      Prefix: \"/websocket\",",
          "1956:     }},",
          "1957:     EnableWebsockets: true,",
          "1958:     Services: []contour_api_v1.Service{{",
          "1959:      Name: \"kuard\",",
          "1960:      Port: 8080,",
          "1961:     }},",
          "1967:  proxy12 := &contour_api_v1.HTTPProxy{",
          "1969:    Name:      \"example-com\",",
          "1970:    Namespace: s1.Namespace,",
          "1974:     Fqdn: \"example.com\",",
          "1981:      Name: s1.Name,",
          "1982:      Port: 8080,",
          "1983:     }, {",
          "1984:      Name:   s2.Name,",
          "1985:      Port:   8080,",
          "1986:      Mirror: true,",
          "1993:  proxy13 := &contour_api_v1.HTTPProxy{",
          "1996:    Namespace: s1.Namespace,",
          "",
          "[Added Lines]",
          "1784:  proxyTimeoutPolicyInfiniteResponse := &contour_api_v1.HTTPProxy{",
          "1786:    Name:      \"bar-com\",",
          "1791:     Fqdn: \"bar.com\",",
          "1793:    Routes: []contour_api_v1.Route{{",
          "1794:     Conditions: []contour_api_v1.MatchCondition{{",
          "1795:      Prefix: \"/\",",
          "1796:     }},",
          "1797:     TimeoutPolicy: &contour_api_v1.TimeoutPolicy{",
          "1798:      Response: \"infinite\",",
          "1800:     Services: []contour_api_v1.Service{{",
          "1801:      Name: \"kuard\",",
          "1802:      Port: 8080,",
          "1803:     }},",
          "1804:    }},",
          "1808:  s1 := &v1.Service{",
          "1810:    Name:      \"kuard\",",
          "1813:   Spec: v1.ServiceSpec{",
          "1814:    Ports: []v1.ServicePort{{",
          "1815:     Name:       \"http\",",
          "1816:     Protocol:   \"TCP\",",
          "1817:     Port:       8080,",
          "1818:     TargetPort: intstr.FromInt(8080),",
          "1819:    }},",
          "1824:  s1a := &v1.Service{",
          "1826:    Name:      \"kuard\",",
          "1828:    Annotations: map[string]string{",
          "1829:     \"projectcontour.io/upstream-protocol.tls\": \"8080\",",
          "1831:   },",
          "1832:   Spec: v1.ServiceSpec{",
          "1833:    Ports: []v1.ServicePort{{",
          "1834:     Name:       \"http\",",
          "1835:     Protocol:   \"TCP\",",
          "1836:     Port:       8080,",
          "1837:     TargetPort: intstr.FromInt(8080),",
          "1843:  s1b := &v1.Service{",
          "1845:    Name:      \"kuard\",",
          "1847:    Annotations: map[string]string{",
          "1848:     \"projectcontour.io/max-connections\":      \"9000\",",
          "1849:     \"projectcontour.io/max-pending-requests\": \"4096\",",
          "1850:     \"projectcontour.io/max-requests\":         \"404\",",
          "1851:     \"projectcontour.io/max-retries\":          \"7\",",
          "1853:   },",
          "1854:   Spec: v1.ServiceSpec{",
          "1855:    Ports: []v1.ServicePort{{",
          "1856:     Name:       \"http\",",
          "1857:     Protocol:   \"TCP\",",
          "1858:     Port:       8080,",
          "1859:     TargetPort: intstr.FromInt(8080),",
          "1865:  s2 := &v1.Service{",
          "1867:    Name:      \"kuarder\",",
          "1870:   Spec: v1.ServiceSpec{",
          "1871:    Ports: []v1.ServicePort{{",
          "1872:     Name:       \"http\",",
          "1873:     Protocol:   \"TCP\",",
          "1874:     Port:       8080,",
          "1875:     TargetPort: intstr.FromInt(8080),",
          "1882:  s2a := &v1.Service{",
          "1884:    Name:      \"kuardest\",",
          "1887:   Spec: v1.ServiceSpec{",
          "1888:    Ports: []v1.ServicePort{{",
          "1889:     Name:       \"http\",",
          "1890:     Protocol:   \"TCP\",",
          "1891:     Port:       8080,",
          "1892:     TargetPort: intstr.FromInt(8080),",
          "1898:  s3 := &v1.Service{",
          "1900:    Name:      \"kuard\",",
          "1903:   Spec: v1.ServiceSpec{",
          "1904:    Ports: []v1.ServicePort{{",
          "1905:     Name:       \"http\",",
          "1906:     Protocol:   \"TCP\",",
          "1907:     Port:       9999,",
          "1908:     TargetPort: intstr.FromInt(8080),",
          "1909:    }},",
          "1913:  s4 := &v1.Service{",
          "1915:    Name:      \"blog\",",
          "1916:    Namespace: \"marketing\",",
          "1917:   },",
          "1918:   Spec: v1.ServiceSpec{",
          "1919:    Ports: []v1.ServicePort{{",
          "1920:     Name:       \"http\",",
          "1921:     Protocol:   \"TCP\",",
          "1922:     Port:       8080,",
          "1923:     TargetPort: intstr.FromInt(8080),",
          "1924:    }},",
          "1925:   },",
          "1926:  }",
          "1928:  s9 := &v1.Service{",
          "1929:   ObjectMeta: metav1.ObjectMeta{",
          "1930:    Name:      \"nginx\",",
          "1933:   Spec: v1.ServiceSpec{",
          "1934:    Ports: []v1.ServicePort{{",
          "1935:     Protocol: \"TCP\",",
          "1936:     Port:     80,",
          "1941:  s10 := &v1.Service{",
          "1943:    Name:      \"tls-passthrough\",",
          "1946:   Spec: v1.ServiceSpec{",
          "1947:    Ports: []v1.ServicePort{{",
          "1948:     Name:       \"https\",",
          "1949:     Protocol:   \"TCP\",",
          "1950:     Port:       443,",
          "1951:     TargetPort: intstr.FromInt(443),",
          "1953:     Name:       \"http\",",
          "1954:     Protocol:   \"TCP\",",
          "1955:     Port:       80,",
          "1956:     TargetPort: intstr.FromInt(80),",
          "1961:  s11 := &v1.Service{",
          "1963:    Name:      \"blog\",",
          "1964:    Namespace: \"it\",",
          "1965:   },",
          "1966:   Spec: v1.ServiceSpec{",
          "1967:    Ports: []v1.ServicePort{{",
          "1968:     Name:     \"blog\",",
          "1969:     Protocol: \"TCP\",",
          "1970:     Port:     8080,",
          "1971:    }},",
          "1972:   },",
          "1973:  }",
          "1975:  s12 := &v1.Service{",
          "1976:   ObjectMeta: metav1.ObjectMeta{",
          "1977:    Name:      \"kuard\",",
          "1978:    Namespace: \"teama\",",
          "1979:   },",
          "1980:   Spec: v1.ServiceSpec{",
          "1981:    Ports: []v1.ServicePort{{",
          "1982:     Name:       \"http\",",
          "1983:     Protocol:   \"TCP\",",
          "1984:     Port:       8080,",
          "1985:     TargetPort: intstr.FromInt(8080),",
          "1986:    }},",
          "1987:   },",
          "1988:  }",
          "1990:  s13 := &v1.Service{",
          "1991:   ObjectMeta: metav1.ObjectMeta{",
          "1992:    Name:      \"kuard\",",
          "1993:    Namespace: \"teamb\",",
          "1994:   },",
          "1995:   Spec: v1.ServiceSpec{",
          "1996:    Ports: []v1.ServicePort{{",
          "1997:     Name:       \"http\",",
          "1998:     Protocol:   \"TCP\",",
          "1999:     Port:       8080,",
          "2000:     TargetPort: intstr.FromInt(8080),",
          "2001:    }},",
          "2002:   },",
          "2003:  }",
          "2005:  s14 := &v1.Service{",
          "2006:   ObjectMeta: metav1.ObjectMeta{",
          "2007:    Name:      \"nginx\",",
          "2008:    Namespace: \"default\",",
          "2009:   },",
          "2010:   Spec: v1.ServiceSpec{",
          "2011:    ExternalName: \"externalservice.io\",",
          "2012:    Ports: []v1.ServicePort{{",
          "2013:     Protocol: \"TCP\",",
          "2014:     Port:     80,",
          "2015:    }},",
          "2016:    Type: v1.ServiceTypeExternalName,",
          "2017:   },",
          "2018:  }",
          "2020:  proxyDelegatedTLSSecret := &contour_api_v1.HTTPProxy{",
          "2021:   ObjectMeta: metav1.ObjectMeta{",
          "2022:    Name:      \"app-with-tls-delegation\",",
          "2023:    Namespace: s10.Namespace,",
          "2027:     Fqdn: \"app-with-tls-delegation.127.0.0.1.nip.io\",",
          "2028:     TLS: &contour_api_v1.TLS{",
          "2029:      SecretName: \"projectcontour/ssl-cert\", // not delegated",
          "2030:     },",
          "2037:      Name: s10.Name,",
          "2038:      Port: 80,",
          "2044:  proxy1 := &contour_api_v1.HTTPProxy{",
          "2047:    Namespace: \"default\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2004:      Prefix: \"/\",",
          "2005:     }},",
          "2006:     Services: []contour_api_v1.Service{{",
          "2008:      Port: 8080,",
          "2020:     }},",
          "2021:    }},",
          "2022:   },",
          "2023:  }",
          "2028:   ObjectMeta: metav1.ObjectMeta{",
          "2031:   },",
          "2032:   Spec: contour_api_v1.HTTPProxySpec{",
          "2033:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2035:     TLS: &contour_api_v1.TLS{",
          "2036:      Passthrough: true,",
          "2037:     },",
          "2038:    },",
          "2039:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2044:     Services: []contour_api_v1.Service{{",
          "2046:      Port: 8080,",
          "2047:     }},",
          "2048:    },",
          "2049:   },",
          "2050:  }",
          "2055:   ObjectMeta: metav1.ObjectMeta{",
          "2058:   },",
          "2059:   Spec: contour_api_v1.HTTPProxySpec{",
          "2060:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2065:    },",
          "2067:   },",
          "2068:  }",
          "2073:   ObjectMeta: metav1.ObjectMeta{",
          "2076:   },",
          "2077:   Spec: contour_api_v1.HTTPProxySpec{",
          "2078:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2089:    },",
          "2090:   },",
          "2091:  }",
          "2094:   ObjectMeta: metav1.ObjectMeta{",
          "2096:    Namespace: s1.Namespace,",
          "2097:   },",
          "2098:   Spec: contour_api_v1.HTTPProxySpec{",
          "2099:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2101:     TLS: &contour_api_v1.TLS{",
          "2102:      Passthrough: true,",
          "2103:     },",
          "2104:    },",
          "2105:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2106:     Services: []contour_api_v1.Service{{",
          "2107:      Name: s1.Name,",
          "",
          "[Removed Lines]",
          "2007:      Name: s1.Name,",
          "2009:     }, {",
          "2010:      Name:   s2.Name,",
          "2011:      Port:   8080,",
          "2012:      Mirror: true,",
          "2013:     }, {",
          "2017:      Name:   s2.Name,",
          "2018:      Port:   8080,",
          "2019:      Mirror: true,",
          "2027:  proxy37 := &contour_api_v1.HTTPProxy{",
          "2029:    Name:      \"simple\",",
          "2030:    Namespace: \"roots\",",
          "2034:     Fqdn: \"passthrough.example.com\",",
          "2040:     Include: &contour_api_v1.TCPProxyInclude{",
          "2041:      Name:      \"foo\",",
          "2042:      Namespace: \"roots\",",
          "2043:     },",
          "2045:      Name: s1.Name,",
          "2054:  proxy37a := &contour_api_v1.HTTPProxy{",
          "2056:    Name:      \"simple\",",
          "2057:    Namespace: \"roots\",",
          "2061:     Fqdn: \"passthrough.example.com\",",
          "2062:     TLS: &contour_api_v1.TLS{",
          "2063:      Passthrough: true,",
          "2064:     },",
          "2066:    TCPProxy: &contour_api_v1.TCPProxy{},",
          "2072:  proxy38 := &contour_api_v1.HTTPProxy{",
          "2074:    Name:      \"simple\",",
          "2075:    Namespace: \"roots\",",
          "2079:     Fqdn: \"passthrough.example.com\",",
          "2080:     TLS: &contour_api_v1.TLS{",
          "2081:      Passthrough: true,",
          "2082:     },",
          "2083:    },",
          "2084:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2085:     Include: &contour_api_v1.TCPProxyInclude{",
          "2086:      Name:      \"foo\",",
          "2087:      Namespace: s1.Namespace,",
          "2088:     },",
          "2093:  proxy39 := &contour_api_v1.HTTPProxy{",
          "2095:    Name:      \"foo\",",
          "2100:     Fqdn: \"www.example.com\",",
          "",
          "[Added Lines]",
          "2058:      Name: \"kuard\",",
          "2066:  proxy1a := &contour_api_v1.HTTPProxy{",
          "2068:    Name:      \"kuard-tcp\",",
          "2069:    Namespace: \"default\",",
          "2073:     Fqdn: \"kuard.example.com\",",
          "2080:      Name: \"kuard\",",
          "2088:  proxy1b := &contour_api_v1.HTTPProxy{",
          "2090:    Name:      \"example-com\",",
          "2091:    Namespace: \"default\",",
          "2095:     Fqdn: \"example.com\",",
          "2097:    Routes: []contour_api_v1.Route{{",
          "2098:     Services: []contour_api_v1.Service{{",
          "2099:      Name: \"kuard\",",
          "2100:      Port: 8080,",
          "2101:     }},",
          "2102:    }},",
          "2107:  proxy1c := &contour_api_v1.HTTPProxy{",
          "2109:    Name:      \"example-com\",",
          "2110:    Namespace: \"default\",",
          "2114:     Fqdn: \"example.com\",",
          "2116:    Routes: []contour_api_v1.Route{{",
          "2117:     Conditions: []contour_api_v1.MatchCondition{{",
          "2118:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2119:       Name:    \"x-request-id\",",
          "2120:       Present: true,",
          "2121:      },",
          "2122:     }, {",
          "2123:      Prefix: \"/kuard\",",
          "2124:     }, {",
          "2125:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2126:       Name:     \"e-tag\",",
          "2127:       Contains: \"abcdef\",",
          "2128:      },",
          "2129:     }, {",
          "2130:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2131:       Name:        \"x-timeout\",",
          "2132:       NotContains: \"infinity\",",
          "2133:      },",
          "2134:     }, {",
          "2135:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2136:       Name:  \"digest-auth\",",
          "2137:       Exact: \"scott\",",
          "2138:      },",
          "2139:     }, {",
          "2140:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2141:       Name:     \"digest-password\",",
          "2142:       NotExact: \"tiger\",",
          "2143:      },",
          "2144:     }},",
          "2145:     Services: []contour_api_v1.Service{{",
          "2146:      Name: \"kuard\",",
          "2147:      Port: 8080,",
          "2148:     }},",
          "2149:    }},",
          "2155:  proxy1d := &contour_api_v1.HTTPProxy{",
          "2157:    Name:      \"kuard-tcp\",",
          "2162:     Fqdn: \"kuard.example.com\",",
          "2167:    Routes: []contour_api_v1.Route{{",
          "2168:     Services: []contour_api_v1.Service{{",
          "2169:      Name: s1.Name,",
          "2170:      Port: 8080,",
          "2171:     }},",
          "2172:    }},",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2111:   },",
          "2112:  }",
          "2116:   ObjectMeta: metav1.ObjectMeta{",
          "2118:    Namespace: s1.Namespace,",
          "2119:   },",
          "2120:   Spec: contour_api_v1.HTTPProxySpec{",
          "2121:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2123:     TLS: &contour_api_v1.TLS{",
          "2124:      Passthrough: true,",
          "2125:     },",
          "2126:    },",
          "2127:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2132:    },",
          "2133:   },",
          "2134:  }",
          "2140:   },",
          "2141:   Spec: contour_api_v1.HTTPProxySpec{",
          "2142:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2153:    },",
          "2154:   },",
          "2155:  }",
          "2158:   ObjectMeta: metav1.ObjectMeta{",
          "2161:   },",
          "2162:   Spec: contour_api_v1.HTTPProxySpec{",
          "2168:    },",
          "2169:   },",
          "2170:  }",
          "2173:   ObjectMeta: metav1.ObjectMeta{",
          "2176:   },",
          "2177:   Spec: contour_api_v1.HTTPProxySpec{",
          "2179:     Services: []contour_api_v1.Service{{",
          "2181:      Port: 8080,",
          "2182:     }},",
          "2184:   },",
          "2185:  }",
          "2189:   ObjectMeta: metav1.ObjectMeta{",
          "2192:   },",
          "2193:   Spec: contour_api_v1.HTTPProxySpec{",
          "2194:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2196:    },",
          "2197:    Routes: []contour_api_v1.Route{{",
          "2198:     Conditions: []contour_api_v1.MatchCondition{{",
          "2199:      Prefix: \"/\",",
          "2200:     }},",
          "2202:    }},",
          "2203:   },",
          "2204:  }",
          "2207:   ObjectMeta: metav1.ObjectMeta{",
          "2208:    Name:      \"example-com\",",
          "2210:   },",
          "2211:   Spec: contour_api_v1.HTTPProxySpec{",
          "2212:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2213:     Fqdn: \"example.com\",",
          "2214:    },",
          "2231:   },",
          "2232:  }",
          "2235:   ObjectMeta: metav1.ObjectMeta{",
          "2238:   },",
          "2239:   Spec: contour_api_v1.HTTPProxySpec{",
          "2246:   },",
          "2247:  }",
          "2250:   ObjectMeta: metav1.ObjectMeta{",
          "2253:   },",
          "2254:   Spec: contour_api_v1.HTTPProxySpec{",
          "2255:    Routes: []contour_api_v1.Route{{",
          "2256:     Conditions: []contour_api_v1.MatchCondition{{",
          "2258:     }},",
          "2259:     Services: []contour_api_v1.Service{{",
          "2261:      Port: 8080,",
          "2262:     }},",
          "2263:    }},",
          "2264:   },",
          "2265:  }",
          "2268:   ObjectMeta: metav1.ObjectMeta{",
          "2271:   },",
          "2272:   Spec: contour_api_v1.HTTPProxySpec{",
          "2280:    Routes: []contour_api_v1.Route{{",
          "2281:     Conditions: []contour_api_v1.MatchCondition{{",
          "2283:     }},",
          "2284:     Services: []contour_api_v1.Service{{",
          "2291:      Port: 8080,",
          "2292:     }},",
          "2293:    }},",
          "2294:   },",
          "2295:  }",
          "2298:   ObjectMeta: metav1.ObjectMeta{",
          "2301:   },",
          "2302:   Spec: contour_api_v1.HTTPProxySpec{",
          "2303:    Routes: []contour_api_v1.Route{{",
          "2304:     Conditions: []contour_api_v1.MatchCondition{{",
          "2306:     }},",
          "2307:     Services: []contour_api_v1.Service{{",
          "2310:     }},",
          "2311:    }},",
          "2312:   },",
          "2313:  }",
          "2317:   ObjectMeta: metav1.ObjectMeta{",
          "2318:    Name:      \"example-com\",",
          "2320:   },",
          "2321:   Spec: contour_api_v1.HTTPProxySpec{",
          "2322:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2323:     Fqdn: \"example.com\",",
          "2324:    },",
          "2331:    Routes: []contour_api_v1.Route{{",
          "2332:     Conditions: []contour_api_v1.MatchCondition{{",
          "2333:      Prefix: \"/\",",
          "",
          "[Removed Lines]",
          "2115:  proxy39broot := &contour_api_v1.HTTPProxy{",
          "2117:    Name:      \"root\",",
          "2122:     Fqdn: \"www.example.com\",",
          "2128:     Include: &contour_api_v1.TCPProxyInclude{",
          "2129:      Name:      \"foo\",",
          "2130:      Namespace: s1.Namespace,",
          "2131:     },",
          "2136:  proxy39brootplural := &contour_api_v1.HTTPProxy{",
          "2137:   ObjectMeta: metav1.ObjectMeta{",
          "2138:    Name:      \"root\",",
          "2139:    Namespace: s1.Namespace,",
          "2143:     Fqdn: \"www.example.com\",",
          "2144:     TLS: &contour_api_v1.TLS{",
          "2145:      Passthrough: true,",
          "2146:     },",
          "2147:    },",
          "2148:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2149:     IncludesDeprecated: &contour_api_v1.TCPProxyInclude{",
          "2150:      Name:      \"foo\",",
          "2151:      Namespace: s1.Namespace,",
          "2152:     },",
          "2157:  proxy39bchild := &contour_api_v1.HTTPProxy{",
          "2159:    Name:      \"foo\",",
          "2160:    Namespace: s1.Namespace,",
          "2163:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2164:     Services: []contour_api_v1.Service{{",
          "2165:      Name: s1.Name,",
          "2166:      Port: 8080,",
          "2167:     }},",
          "2172:  proxy40 := &contour_api_v1.HTTPProxy{",
          "2174:    Name:      \"foo\",",
          "2175:    Namespace: s1.Namespace,",
          "2178:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2180:      Name: s1.Name,",
          "2183:    },",
          "2188:  proxy41 := &contour_api_v1.HTTPProxy{",
          "2190:    Name:      \"missing-service\",",
          "2191:    Namespace: s1.Namespace,",
          "2195:     Fqdn: \"missing-service.example.com\",",
          "2201:     Services: nil, // missing",
          "2206:  proxy100 := &contour_api_v1.HTTPProxy{",
          "2209:    Namespace: s1.Namespace,",
          "2215:    Includes: []contour_api_v1.Include{{",
          "2216:     Name:      \"marketingwww\",",
          "2217:     Namespace: \"marketing\",",
          "2218:     Conditions: []contour_api_v1.MatchCondition{{",
          "2219:      Prefix: \"/blog\",",
          "2220:     }},",
          "2221:    }},",
          "2222:    Routes: []contour_api_v1.Route{{",
          "2223:     Conditions: []contour_api_v1.MatchCondition{{",
          "2224:      Prefix: \"/\",",
          "2225:     }},",
          "2226:     Services: []contour_api_v1.Service{{",
          "2227:      Name: s1.Name,",
          "2228:      Port: 8080,",
          "2229:     }},",
          "2230:    }},",
          "2234:  proxy100a := &contour_api_v1.HTTPProxy{",
          "2236:    Name:      \"marketingwww\",",
          "2237:    Namespace: \"marketing\",",
          "2240:    Routes: []contour_api_v1.Route{{",
          "2241:     Services: []contour_api_v1.Service{{",
          "2242:      Name: \"blog\",",
          "2243:      Port: 8080,",
          "2244:     }},",
          "2245:    }},",
          "2249:  proxy100b := &contour_api_v1.HTTPProxy{",
          "2251:    Name:      \"marketingwww\",",
          "2252:    Namespace: \"marketing\",",
          "2257:      Prefix: \"/infotech\",",
          "2260:      Name: \"blog\",",
          "2267:  proxy100c := &contour_api_v1.HTTPProxy{",
          "2269:    Name:      \"marketingwww\",",
          "2270:    Namespace: \"marketing\",",
          "2273:    Includes: []contour_api_v1.Include{{",
          "2274:     Name:      \"marketingit\",",
          "2275:     Namespace: \"it\",",
          "2276:     Conditions: []contour_api_v1.MatchCondition{{",
          "2277:      Prefix: \"/it\",",
          "2278:     }},",
          "2279:    }},",
          "2282:      Prefix: \"/infotech\",",
          "2285:      Name: \"blog\",",
          "2286:      Port: 8080,",
          "2287:     }},",
          "2288:    }, {",
          "2289:     Services: []contour_api_v1.Service{{",
          "2290:      Name: \"blog\",",
          "2297:  proxy100d := &contour_api_v1.HTTPProxy{",
          "2299:    Name:      \"marketingit\",",
          "2300:    Namespace: \"it\",",
          "2305:      Prefix: \"/foo\",",
          "2308:      Name: \"blog\",",
          "2309:      Port: 8080,",
          "2316:  proxy101 := &contour_api_v1.HTTPProxy{",
          "2319:    Namespace: s1.Namespace,",
          "2325:    Includes: []contour_api_v1.Include{{",
          "2326:     Name: \"kuarder\",",
          "2327:     Conditions: []contour_api_v1.MatchCondition{{",
          "2328:      Prefix: \"/kuarder\",",
          "2329:     }},",
          "2330:    }},",
          "",
          "[Added Lines]",
          "2184:  proxy1e := &contour_api_v1.HTTPProxy{",
          "2186:    Name:      \"kuard-tcp\",",
          "2191:     Fqdn: \"kuard.example.com\",",
          "2196:    Routes: []contour_api_v1.Route{{",
          "2197:     PermitInsecure: true,",
          "2198:     Services: []contour_api_v1.Service{{",
          "2199:      Name: s10.Name,",
          "2200:      Port: 80,",
          "2201:     }},",
          "2202:    }},",
          "2204:     Services: []contour_api_v1.Service{{",
          "2205:      Name: s10.Name,",
          "2206:      Port: 443,",
          "2207:     }},",
          "2214:  proxy1f := &contour_api_v1.HTTPProxy{",
          "2215:   ObjectMeta: metav1.ObjectMeta{",
          "2216:    Name:      \"example-com\",",
          "2217:    Namespace: \"default\",",
          "2221:     Fqdn: \"example.com\",",
          "2223:    Routes: []contour_api_v1.Route{{",
          "2224:     Conditions: []contour_api_v1.MatchCondition{{",
          "2225:      Prefix: \"/\",",
          "2226:     }},",
          "2227:     Services: []contour_api_v1.Service{{",
          "2228:      Name: s2a.Name,",
          "2229:      Port: 8080,",
          "2230:     }},",
          "2231:    }},",
          "2235:  proxy2a := &contour_api_v1.HTTPProxy{",
          "2237:    Name:      \"example-com\",",
          "2238:    Namespace: \"kubesystem\",",
          "2241:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2242:     Fqdn: \"example.com\",",
          "2244:    Includes: []contour_api_v1.Include{{",
          "2245:     Conditions: []contour_api_v1.MatchCondition{{",
          "2246:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2247:       Name:    \"x-request-id\",",
          "2248:       Present: true,",
          "2249:      },",
          "2250:     }, {",
          "2251:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2252:       Name:        \"x-timeout\",",
          "2253:       NotContains: \"infinity\",",
          "2254:      },",
          "2255:     }, {",
          "2256:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2257:       Name:  \"digest-auth\",",
          "2258:       Exact: \"scott\",",
          "2259:      },",
          "2260:     }},",
          "2261:     Name:      \"kuard\",",
          "2262:     Namespace: \"default\",",
          "2263:    }},",
          "2267:  proxy2b := &contour_api_v1.HTTPProxy{",
          "2269:    Name:      \"kuard\",",
          "2270:    Namespace: \"default\",",
          "2273:    Routes: []contour_api_v1.Route{{",
          "2274:     Conditions: []contour_api_v1.MatchCondition{{",
          "2275:      Prefix: \"/kuard\",",
          "2276:     }, {",
          "2277:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2278:       Name:     \"e-tag\",",
          "2279:       Contains: \"abcdef\",",
          "2280:      },",
          "2281:     }, {",
          "2282:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2283:       Name:     \"digest-password\",",
          "2284:       NotExact: \"tiger\",",
          "2285:      },",
          "2286:     }},",
          "2288:      Name: \"kuard\",",
          "2291:    }},",
          "2295:  proxy2c := &contour_api_v1.HTTPProxy{",
          "2297:    Name:      \"example-com\",",
          "2298:    Namespace: \"default\",",
          "2302:     Fqdn: \"example.com\",",
          "2308:     HealthCheckPolicy: &contour_api_v1.HTTPHealthCheckPolicy{",
          "2309:      Path: \"/healthz\",",
          "2310:     },",
          "2311:     Services: []contour_api_v1.Service{{",
          "2312:      Name: \"kuard\",",
          "2313:      Port: 8080,",
          "2314:     }},",
          "2321:  proxy2d := &contour_api_v1.HTTPProxy{",
          "2324:    Namespace: \"default\",",
          "2330:    Routes: []contour_api_v1.Route{",
          "2331:     {",
          "2332:      Conditions: []contour_api_v1.MatchCondition{",
          "2333:       {",
          "2334:        Header: &contour_api_v1.HeaderMatchCondition{",
          "2335:         Name:     \"e-tag\",",
          "2336:         Contains: \"abc\",",
          "2337:        },",
          "2338:       },",
          "2339:       {",
          "2340:        Prefix: \"/\",",
          "2341:       },",
          "2342:      },",
          "2343:      Services: []contour_api_v1.Service{{",
          "2344:       Name: \"kuard\",",
          "2345:       Port: 8080,",
          "2346:      }},",
          "2347:     },",
          "2348:     {",
          "2349:      Conditions: []contour_api_v1.MatchCondition{",
          "2350:       {",
          "2351:        Header: &contour_api_v1.HeaderMatchCondition{",
          "2352:         Name:     \"e-tag\",",
          "2353:         Contains: \"def\",",
          "2354:        },",
          "2355:       },",
          "2356:       {",
          "2357:        Prefix: \"/\",",
          "2358:       },",
          "2359:      },",
          "2360:      Services: []contour_api_v1.Service{{",
          "2361:       Name: \"kuard\",",
          "2362:       Port: 8080,",
          "2363:      }},",
          "2364:     },",
          "2365:    },",
          "2371:  proxy2e := &contour_api_v1.HTTPProxy{",
          "2373:    Name:      \"example-com\",",
          "2374:    Namespace: \"default\",",
          "2377:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2378:     Fqdn: \"example.com\",",
          "2379:    },",
          "2380:    Routes: []contour_api_v1.Route{",
          "2381:     {",
          "2382:      Conditions: []contour_api_v1.MatchCondition{",
          "2383:       {",
          "2384:        Header: &contour_api_v1.HeaderMatchCondition{",
          "2385:         Name:     \"e-tag\",",
          "2386:         Contains: \"abc\",",
          "2387:        },",
          "2388:       },",
          "2389:       {",
          "2390:        Prefix: \"/\",",
          "2391:       },",
          "2392:      },",
          "2393:      Services: []contour_api_v1.Service{{",
          "2394:       Name: \"kuard\",",
          "2395:       Port: 8080,",
          "2396:      }},",
          "2397:     },",
          "2398:     {",
          "2399:      Conditions: []contour_api_v1.MatchCondition{",
          "2400:       {",
          "2401:        Header: &contour_api_v1.HeaderMatchCondition{",
          "2402:         Name:        \"e-tag\",",
          "2403:         NotContains: \"abc\",",
          "2404:        },",
          "2405:       },",
          "2406:       {",
          "2407:        Prefix: \"/\",",
          "2408:       },",
          "2409:      },",
          "2410:      Services: []contour_api_v1.Service{{",
          "2411:       Name: \"kuard\",",
          "2412:       Port: 8080,",
          "2413:      }},",
          "2414:     },",
          "2415:    },",
          "2420:  proxy6 := &contour_api_v1.HTTPProxy{",
          "2422:    Name:      \"example-com\",",
          "2423:    Namespace: \"default\",",
          "2426:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2427:     Fqdn: \"foo.com\",",
          "2428:     TLS: &contour_api_v1.TLS{",
          "2429:      SecretName: sec1.Name,",
          "2430:     },",
          "2431:    },",
          "2434:      Prefix: \"/\",",
          "2437:      Name: \"kuard\",",
          "2444:  proxy17 := &contour_api_v1.HTTPProxy{",
          "2446:    Name:      \"example-com\",",
          "2447:    Namespace: \"default\",",
          "2450:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2451:     Fqdn: \"example.com\",",
          "2452:    },",
          "2455:      Prefix: \"/\",",
          "2458:      Name: \"kuard\",",
          "2460:      UpstreamValidation: &contour_api_v1.UpstreamValidation{",
          "2461:       CACertificate: cert1.Name,",
          "2462:       SubjectName:   \"example.com\",",
          "2463:      },",
          "2468:  protocolh2 := \"h2\"",
          "2469:  proxy17h2 := &contour_api_v1.HTTPProxy{",
          "2471:    Name:      \"example-com\",",
          "2472:    Namespace: \"default\",",
          "2475:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2476:     Fqdn: \"example.com\",",
          "2477:    },",
          "2480:      Prefix: \"/\",",
          "2483:      Name:     \"kuard\",",
          "2484:      Port:     8080,",
          "2485:      Protocol: &protocolh2,",
          "2486:      UpstreamValidation: &contour_api_v1.UpstreamValidation{",
          "2487:       CACertificate: cert1.Name,",
          "2488:       SubjectName:   \"example.com\",",
          "2489:      },",
          "2496:  proxy18 := &contour_api_v1.HTTPProxy{",
          "2499:    Namespace: \"default\",",
          "2504:     TLS: &contour_api_v1.TLS{",
          "2505:      SecretName: sec1.Name,",
          "2506:      ClientValidation: &contour_api_v1.DownstreamValidation{",
          "2507:       CACertificate: cert1.Name,",
          "2508:      },",
          "2509:     },",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2340:   },",
          "2341:  }",
          "2360:   ObjectMeta: metav1.ObjectMeta{",
          "2361:    Name:      \"example-com\",",
          "2363:   },",
          "2364:   Spec: contour_api_v1.HTTPProxySpec{",
          "2365:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2366:     Fqdn: \"example.com\",",
          "2367:    },",
          "2374:     Services: []contour_api_v1.Service{{",
          "2375:      Name: s1.Name,",
          "2376:      Port: 8080,",
          "2377:     }},",
          "2379:   },",
          "2380:  }",
          "2384:   ObjectMeta: metav1.ObjectMeta{",
          "2385:    Name:      \"example-com\",",
          "2387:   },",
          "2388:   Spec: contour_api_v1.HTTPProxySpec{",
          "2389:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2390:     Fqdn: \"example.com\",",
          "2391:    },",
          "2395:     Conditions: []contour_api_v1.MatchCondition{{",
          "2399:     }},",
          "2402:     Services: []contour_api_v1.Service{{",
          "2404:      Port: 8080,",
          "2405:     }},",
          "2417:     Conditions: []contour_api_v1.MatchCondition{{",
          "2421:     }},",
          "2422:     Services: []contour_api_v1.Service{{",
          "2424:      Port: 8080,",
          "2425:     }},",
          "2426:    }},",
          "2427:   },",
          "2428:  }",
          "2431:   ObjectMeta: metav1.ObjectMeta{",
          "2432:    Name:      \"example-com\",",
          "2434:   },",
          "2435:   Spec: contour_api_v1.HTTPProxySpec{",
          "2436:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2437:     Fqdn: \"example.com\",",
          "2438:    },",
          "2445:    Routes: []contour_api_v1.Route{{",
          "2446:     Conditions: []contour_api_v1.MatchCondition{{",
          "2447:      Prefix: \"/\",",
          "2448:     }},",
          "2449:     Services: []contour_api_v1.Service{{",
          "2451:      Port: 8080,",
          "2452:     }},",
          "2464:     Services: []contour_api_v1.Service{{",
          "2466:      Port: 8080,",
          "2467:     }},",
          "2468:    }},",
          "2469:   },",
          "2470:  }",
          "2473:   ObjectMeta: metav1.ObjectMeta{",
          "2474:    Name:      \"example-com\",",
          "2475:    Namespace: s1.Namespace,",
          "",
          "[Removed Lines]",
          "2343:  proxy101a := &contour_api_v1.HTTPProxy{",
          "2344:   ObjectMeta: metav1.ObjectMeta{",
          "2345:    Name:      \"kuarder\",",
          "2346:    Namespace: proxy101.Namespace,",
          "2347:   },",
          "2348:   Spec: contour_api_v1.HTTPProxySpec{",
          "2349:    Routes: []contour_api_v1.Route{{",
          "2350:     Services: []contour_api_v1.Service{{",
          "2351:      Name: s2.Name,",
          "2352:      Port: 8080,",
          "2353:     }},",
          "2354:    }},",
          "2355:   },",
          "2356:  }",
          "2359:  proxy102 := &contour_api_v1.HTTPProxy{",
          "2362:    Namespace: s1.Namespace,",
          "2368:    Routes: []contour_api_v1.Route{{",
          "2369:     Conditions: []contour_api_v1.MatchCondition{{",
          "2370:      Prefix: \"/v1\",",
          "2371:     }, {",
          "2372:      Prefix: \"/api\",",
          "2373:     }},",
          "2378:    }},",
          "2383:  proxy103 := &contour_api_v1.HTTPProxy{",
          "2386:    Namespace: s1.Namespace,",
          "2392:    Includes: []contour_api_v1.Include{{",
          "2393:     Name:      \"www\",",
          "2394:     Namespace: \"teama\",",
          "2396:      Prefix: \"/v1\",",
          "2397:     }, {",
          "2398:      Prefix: \"/api\",",
          "2400:    }},",
          "2401:    Routes: []contour_api_v1.Route{{",
          "2403:      Name: s1.Name,",
          "2406:    }},",
          "2407:   },",
          "2408:  }",
          "2410:  proxy103a := &contour_api_v1.HTTPProxy{",
          "2411:   ObjectMeta: metav1.ObjectMeta{",
          "2412:    Name:      \"www\",",
          "2413:    Namespace: \"teama\",",
          "2414:   },",
          "2415:   Spec: contour_api_v1.HTTPProxySpec{",
          "2416:    Routes: []contour_api_v1.Route{{",
          "2418:      Prefix: \"/v1\",",
          "2419:     }, {",
          "2420:      Prefix: \"/api\",",
          "2423:      Name: s1.Name,",
          "2430:  proxy104 := &contour_api_v1.HTTPProxy{",
          "2433:    Namespace: s1.Namespace,",
          "2439:    Includes: []contour_api_v1.Include{{",
          "2440:     Name: \"kuarder\",",
          "2441:     Conditions: []contour_api_v1.MatchCondition{{",
          "2442:      Prefix: \"/kuarder\",",
          "2443:     }},",
          "2444:    }},",
          "2450:      Name: s1.Name,",
          "2453:    }},",
          "2454:   },",
          "2455:  }",
          "2457:  proxy104a := &contour_api_v1.HTTPProxy{",
          "2458:   ObjectMeta: metav1.ObjectMeta{",
          "2459:    Name:      \"kuarder\",",
          "2460:    Namespace: proxy104.Namespace,",
          "2461:   },",
          "2462:   Spec: contour_api_v1.HTTPProxySpec{",
          "2463:    Routes: []contour_api_v1.Route{{",
          "2465:      Name: s2.Name,",
          "2472:  proxy105 := &contour_api_v1.HTTPProxy{",
          "",
          "[Added Lines]",
          "2524:  proxy19 := &contour_api_v1.HTTPProxy{",
          "2527:    Namespace: \"default\",",
          "2532:     TLS: &contour_api_v1.TLS{",
          "2533:      SecretName: sec1.Name,",
          "2534:      ClientValidation: &contour_api_v1.DownstreamValidation{",
          "2535:       CACertificate: cert1.Name,",
          "2536:      },",
          "2537:     },",
          "2539:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2544:    },",
          "2549:  proxy10 := &contour_api_v1.HTTPProxy{",
          "2552:    Namespace: \"default\",",
          "2558:    Routes: []contour_api_v1.Route{{",
          "2560:      Prefix: \"/\",",
          "2563:      Name: \"kuard\",",
          "2566:    }, {",
          "2568:      Prefix: \"/websocket\",",
          "2570:     EnableWebsockets: true,",
          "2572:      Name: \"kuard\",",
          "2580:  proxy10b := &contour_api_v1.HTTPProxy{",
          "2583:    Namespace: \"default\",",
          "2594:      Name: \"kuard\",",
          "2597:    }, {",
          "2598:     Conditions: []contour_api_v1.MatchCondition{{",
          "2599:      Prefix: \"/websocket\",",
          "2600:     }},",
          "2601:     EnableWebsockets: true,",
          "2603:      Name: \"kuard\",",
          "2611:  proxy12 := &contour_api_v1.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2478:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2479:     Fqdn: \"example.com\",",
          "2480:    },",
          "2487:    Routes: []contour_api_v1.Route{{",
          "2488:     Conditions: []contour_api_v1.MatchCondition{{",
          "2489:      Prefix: \"/\",",
          "",
          "[Removed Lines]",
          "2481:    Includes: []contour_api_v1.Include{{",
          "2482:     Name: \"kuarder\",",
          "2483:     Conditions: []contour_api_v1.MatchCondition{{",
          "2484:      Prefix: \"/kuarder\",",
          "2485:     }},",
          "2486:    }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2491:     Services: []contour_api_v1.Service{{",
          "2492:      Name: s1.Name,",
          "2493:      Port: 8080,",
          "2494:     }},",
          "2495:    }},",
          "2496:   },",
          "2497:  }",
          "2518:   ObjectMeta: metav1.ObjectMeta{",
          "2519:    Name:      \"example-com\",",
          "2520:    Namespace: s1.Namespace,",
          "",
          "[Removed Lines]",
          "2499:  proxy105a := &contour_api_v1.HTTPProxy{",
          "2500:   ObjectMeta: metav1.ObjectMeta{",
          "2501:    Name:      \"kuarder\",",
          "2502:    Namespace: proxy105.Namespace,",
          "2503:   },",
          "2504:   Spec: contour_api_v1.HTTPProxySpec{",
          "2505:    Routes: []contour_api_v1.Route{{",
          "2506:     Conditions: []contour_api_v1.MatchCondition{{",
          "2507:      Prefix: \"/\",",
          "2508:     }},",
          "2509:     Services: []contour_api_v1.Service{{",
          "2510:      Name: s2.Name,",
          "2511:      Port: 8080,",
          "2512:     }},",
          "2513:    }},",
          "2514:   },",
          "2515:  }",
          "2517:  proxy106 := &contour_api_v1.HTTPProxy{",
          "",
          "[Added Lines]",
          "2627:     }, {",
          "2628:      Name:   s2.Name,",
          "2629:      Port:   8080,",
          "2630:      Mirror: true,",
          "2637:  proxy13 := &contour_api_v1.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2523:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2524:     Fqdn: \"example.com\",",
          "2525:    },",
          "2532:    Routes: []contour_api_v1.Route{{",
          "2533:     Conditions: []contour_api_v1.MatchCondition{{",
          "2534:      Prefix: \"/\",",
          "",
          "[Removed Lines]",
          "2526:    Includes: []contour_api_v1.Include{{",
          "2527:     Name: \"kuarder\",",
          "2528:     Conditions: []contour_api_v1.MatchCondition{{",
          "2529:      Prefix: \"/kuarder/\",",
          "2530:     }},",
          "2531:    }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2536:     Services: []contour_api_v1.Service{{",
          "2537:      Name: s1.Name,",
          "2538:      Port: 8080,",
          "2539:     }},",
          "2540:    }},",
          "2541:   },",
          "2542:  }",
          "2545:   ObjectMeta: metav1.ObjectMeta{",
          "2548:   },",
          "2549:   Spec: contour_api_v1.HTTPProxySpec{",
          "2554:     Services: []contour_api_v1.Service{{",
          "2556:      Port: 8080,",
          "2557:     }},",
          "2559:   },",
          "2560:  }",
          "2563:   ObjectMeta: metav1.ObjectMeta{",
          "2566:   },",
          "2567:   Spec: contour_api_v1.HTTPProxySpec{",
          "2568:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2570:    },",
          "2586:   },",
          "2587:  }",
          "2593:   },",
          "2594:   Spec: contour_api_v1.HTTPProxySpec{",
          "2604:   },",
          "2605:  }",
          "2609:   ObjectMeta: metav1.ObjectMeta{",
          "2611:    Namespace: s1.Namespace,",
          "2612:   },",
          "2613:   Spec: contour_api_v1.HTTPProxySpec{",
          "2614:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2616:    },",
          "2642:     Services: []contour_api_v1.Service{{",
          "2643:      Name: s1.Name,",
          "2644:      Port: 8080,",
          "2645:     }},",
          "2647:   },",
          "2648:  }",
          "2651:   ObjectMeta: metav1.ObjectMeta{",
          "2654:   },",
          "2655:   Spec: contour_api_v1.HTTPProxySpec{",
          "2657:     Services: []contour_api_v1.Service{{",
          "2659:      Port: 8080,",
          "2660:     }},",
          "2662:   },",
          "2663:  }",
          "2666:   ObjectMeta: metav1.ObjectMeta{",
          "2669:   },",
          "2670:   Spec: contour_api_v1.HTTPProxySpec{",
          "2672:     Services: []contour_api_v1.Service{{",
          "2674:      Port: 8080,",
          "2675:     }},",
          "2677:   },",
          "2678:  }",
          "2681:   ObjectMeta: metav1.ObjectMeta{",
          "2684:   },",
          "2685:   Spec: contour_api_v1.HTTPProxySpec{",
          "2686:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2688:    },",
          "2689:    Routes: []contour_api_v1.Route{{",
          "2690:     Conditions: []contour_api_v1.MatchCondition{{",
          "2691:      Prefix: \"/\",",
          "2692:     }},",
          "2703:    }},",
          "2704:   },",
          "2705:  }",
          "2708:   ObjectMeta: metav1.ObjectMeta{",
          "2709:    Name:      \"example-com\",",
          "2711:   },",
          "2712:   Spec: contour_api_v1.HTTPProxySpec{",
          "2713:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2714:     Fqdn: \"example.com\",",
          "2715:    },",
          "2716:    Routes: []contour_api_v1.Route{{",
          "2717:     Conditions: []contour_api_v1.MatchCondition{{",
          "2718:      Prefix: \"/\",",
          "2719:     }},",
          "2720:     Services: []contour_api_v1.Service{{",
          "2729:     }},",
          "2730:    }},",
          "2731:   },",
          "2732:  }",
          "2735:   ObjectMeta: metav1.ObjectMeta{",
          "2738:   },",
          "2739:   Spec: contour_api_v1.HTTPProxySpec{",
          "2743:    Routes: []contour_api_v1.Route{{",
          "2747:     Services: []contour_api_v1.Service{{",
          "2750:     }},",
          "2763:    }},",
          "2764:   },",
          "2765:  }",
          "2768:   ObjectMeta: metav1.ObjectMeta{",
          "2771:   },",
          "2772:   Spec: contour_api_v1.HTTPProxySpec{",
          "2776:    Routes: []contour_api_v1.Route{{",
          "2777:     Conditions: []contour_api_v1.MatchCondition{{",
          "2779:     }},",
          "2780:     Services: []contour_api_v1.Service{{",
          "2783:     }},",
          "2790:    }},",
          "2791:   },",
          "2792:  }",
          "2795:   ObjectMeta: metav1.ObjectMeta{",
          "2798:   },",
          "2799:   Spec: contour_api_v1.HTTPProxySpec{",
          "2803:    Routes: []contour_api_v1.Route{{",
          "2804:     Conditions: []contour_api_v1.MatchCondition{{",
          "2806:     }},",
          "2807:     Services: []contour_api_v1.Service{{",
          "2810:     }},",
          "2816:    }},",
          "2817:   },",
          "2818:  }",
          "2821:   ObjectMeta: metav1.ObjectMeta{",
          "2822:    Name:      \"example-com\",",
          "2824:   },",
          "2825:   Spec: contour_api_v1.HTTPProxySpec{",
          "2826:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2827:     Fqdn: \"example.com\",",
          "2828:    },",
          "2829:    Routes: []contour_api_v1.Route{{",
          "2830:     Conditions: []contour_api_v1.MatchCondition{{",
          "2831:      Prefix: \"/\",",
          "2832:     }},",
          "2833:     Services: []contour_api_v1.Service{{",
          "2836:     }},",
          "2840:    }},",
          "2841:   },",
          "2842:  }",
          "2845:   ObjectMeta: metav1.ObjectMeta{",
          "2846:    Name:      \"example-com\",",
          "2848:   },",
          "2849:   Spec: contour_api_v1.HTTPProxySpec{",
          "2850:    VirtualHost: &contour_api_v1.VirtualHost{",
          "",
          "[Removed Lines]",
          "2544:  proxy106a := &contour_api_v1.HTTPProxy{",
          "2546:    Name:      \"kuarder\",",
          "2547:    Namespace: proxy105.Namespace,",
          "2550:    Routes: []contour_api_v1.Route{{",
          "2551:     Conditions: []contour_api_v1.MatchCondition{{",
          "2552:      Prefix: \"/\",",
          "2553:     }},",
          "2555:      Name: s2.Name,",
          "2558:    }},",
          "2562:  proxy107 := &contour_api_v1.HTTPProxy{",
          "2564:    Name:      \"example-com\",",
          "2565:    Namespace: s1.Namespace,",
          "2569:     Fqdn: \"example.com\",",
          "2571:    Includes: []contour_api_v1.Include{{",
          "2572:     Name: \"kuarder\",",
          "2573:     Conditions: []contour_api_v1.MatchCondition{{",
          "2574:      Prefix: \"/kuarder\",",
          "2575:     }},",
          "2576:    }},",
          "2577:    Routes: []contour_api_v1.Route{{",
          "2578:     Conditions: []contour_api_v1.MatchCondition{{",
          "2579:      Prefix: \"/\",",
          "2580:     }},",
          "2581:     Services: []contour_api_v1.Service{{",
          "2582:      Name: s1.Name,",
          "2583:      Port: 8080,",
          "2584:     }},",
          "2585:    }},",
          "2589:  proxy107a := &contour_api_v1.HTTPProxy{",
          "2590:   ObjectMeta: metav1.ObjectMeta{",
          "2591:    Name:      \"kuarder\",",
          "2592:    Namespace: proxy105.Namespace,",
          "2595:    Routes: []contour_api_v1.Route{{",
          "2596:     Conditions: []contour_api_v1.MatchCondition{{",
          "2597:      Prefix: \"/withavengeance\",",
          "2598:     }},",
          "2599:     Services: []contour_api_v1.Service{{",
          "2600:      Name: s2.Name,",
          "2601:      Port: 8080,",
          "2602:     }},",
          "2603:    }},",
          "2608:  proxy108 := &contour_api_v1.HTTPProxy{",
          "2610:    Name:      \"root\",",
          "2615:     Fqdn: \"example.com\",",
          "2617:    Includes: []contour_api_v1.Include{{",
          "2618:     Name:      \"blogteama\",",
          "2619:     Namespace: \"teama\",",
          "2620:     Conditions: []contour_api_v1.MatchCondition{{",
          "2621:      Prefix: \"/blog\",",
          "2622:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2623:       Name:     \"x-header\",",
          "2624:       Contains: \"abc\",",
          "2625:      },",
          "2626:     }},",
          "2627:    }, {",
          "2628:     Name:      \"blogteama\",",
          "2629:     Namespace: \"teamb\",",
          "2630:     Conditions: []contour_api_v1.MatchCondition{{",
          "2631:      Prefix: \"/blog\",",
          "2632:      Header: &contour_api_v1.HeaderMatchCondition{",
          "2633:       Name:     \"x-header\",",
          "2634:       Contains: \"abc\",",
          "2635:      },",
          "2636:     }},",
          "2637:    }},",
          "2638:    Routes: []contour_api_v1.Route{{",
          "2639:     Conditions: []contour_api_v1.MatchCondition{{",
          "2640:      Prefix: \"/\",",
          "2641:     }},",
          "2646:    }},",
          "2650:  proxy108a := &contour_api_v1.HTTPProxy{",
          "2652:    Name:      \"blogteama\",",
          "2653:    Namespace: \"teama\",",
          "2656:    Routes: []contour_api_v1.Route{{",
          "2658:      Name: s12.Name,",
          "2661:    }},",
          "2665:  proxy108b := &contour_api_v1.HTTPProxy{",
          "2667:    Name:      \"blogteamb\",",
          "2668:    Namespace: \"teamb\",",
          "2671:    Routes: []contour_api_v1.Route{{",
          "2673:      Name: s13.Name,",
          "2676:    }},",
          "2680:  proxyReplaceHostHeaderRoute := &contour_api_v1.HTTPProxy{",
          "2682:    Name:      \"example-com\",",
          "2683:    Namespace: \"default\",",
          "2687:     Fqdn: \"example.com\",",
          "2693:     Services: []contour_api_v1.Service{{",
          "2694:      Name: \"nginx\",",
          "2695:      Port: 80,",
          "2696:     }},",
          "2697:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2698:      Set: []contour_api_v1.HeaderValue{{",
          "2699:       Name:  \"Host\",",
          "2700:       Value: \"bar.com\",",
          "2701:      }},",
          "2702:     },",
          "2707:  proxyReplaceHostHeaderService := &contour_api_v1.HTTPProxy{",
          "2710:    Namespace: \"default\",",
          "2721:      Name: \"nginx\",",
          "2722:      Port: 80,",
          "2723:      RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2724:       Set: []contour_api_v1.HeaderValue{{",
          "2725:        Name:  \"Host\",",
          "2726:        Value: \"bar.com\",",
          "2727:       }},",
          "2728:      },",
          "2734:  proxyReplaceHostHeaderMultiple := &contour_api_v1.HTTPProxy{",
          "2736:    Name:      \"example-com\",",
          "2737:    Namespace: \"default\",",
          "2740:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2741:     Fqdn: \"example.com\",",
          "2742:    },",
          "2744:     Conditions: []contour_api_v1.MatchCondition{{",
          "2745:      Prefix: \"/\",",
          "2746:     }},",
          "2748:      Name: \"nginx\",",
          "2749:      Port: 80,",
          "2751:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2752:      Set: []contour_api_v1.HeaderValue{{",
          "2753:       Name:  \"Host\",",
          "2754:       Value: \"bar.com\",",
          "2755:      }, {",
          "2756:       Name:  \"x-header\",",
          "2757:       Value: \"bar.com\",",
          "2758:      }, {",
          "2759:       Name:  \"y-header\",",
          "2760:       Value: \"zed.com\",",
          "2761:      }},",
          "2762:     },",
          "2767:  proxyReplaceNonHostHeader := &contour_api_v1.HTTPProxy{",
          "2769:    Name:      \"example-com\",",
          "2770:    Namespace: \"default\",",
          "2773:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2774:     Fqdn: \"example.com\",",
          "2775:    },",
          "2778:      Prefix: \"/\",",
          "2781:      Name: \"nginx\",",
          "2782:      Port: 80,",
          "2784:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2785:      Set: []contour_api_v1.HeaderValue{{",
          "2786:       Name:  \"x-header\",",
          "2787:       Value: \"bar.com\",",
          "2788:      }},",
          "2789:     },",
          "2794:  proxyReplaceHeaderEmptyValue := &contour_api_v1.HTTPProxy{",
          "2796:    Name:      \"example-com\",",
          "2797:    Namespace: \"default\",",
          "2800:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2801:     Fqdn: \"example.com\",",
          "2802:    },",
          "2805:      Prefix: \"/\",",
          "2808:      Name: \"nginx\",",
          "2809:      Port: 80,",
          "2811:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2812:      Set: []contour_api_v1.HeaderValue{{",
          "2813:       Name: \"x-header\",",
          "2814:      }},",
          "2815:     },",
          "2820:  proxyCookieLoadBalancer := &contour_api_v1.HTTPProxy{",
          "2823:    Namespace: \"default\",",
          "2834:      Name: \"nginx\",",
          "2835:      Port: 80,",
          "2837:     LoadBalancerPolicy: &contour_api_v1.LoadBalancerPolicy{",
          "2838:      Strategy: \"Cookie\",",
          "2839:     },",
          "2844:  proxyLoadBalancerHashPolicyHeader := &contour_api_v1.HTTPProxy{",
          "2847:    Namespace: \"default\",",
          "",
          "[Added Lines]",
          "2653:     }, {",
          "2654:      Name:   s2.Name,",
          "2655:      Port:   8080,",
          "2656:      Mirror: true,",
          "2657:     }, {",
          "2661:      Name:   s2.Name,",
          "2662:      Port:   8080,",
          "2663:      Mirror: true,",
          "2671:  proxy37 := &contour_api_v1.HTTPProxy{",
          "2673:    Name:      \"simple\",",
          "2674:    Namespace: \"roots\",",
          "2677:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2678:     Fqdn: \"passthrough.example.com\",",
          "2679:     TLS: &contour_api_v1.TLS{",
          "2680:      Passthrough: true,",
          "2681:     },",
          "2682:    },",
          "2683:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2684:     Include: &contour_api_v1.TCPProxyInclude{",
          "2685:      Name:      \"foo\",",
          "2686:      Namespace: \"roots\",",
          "2687:     },",
          "2689:      Name: s1.Name,",
          "2692:    },",
          "2698:  proxy37a := &contour_api_v1.HTTPProxy{",
          "2700:    Name:      \"simple\",",
          "2701:    Namespace: \"roots\",",
          "2705:     Fqdn: \"passthrough.example.com\",",
          "2706:     TLS: &contour_api_v1.TLS{",
          "2707:      Passthrough: true,",
          "2708:     },",
          "2710:    TCPProxy: &contour_api_v1.TCPProxy{},",
          "2716:  proxy38 := &contour_api_v1.HTTPProxy{",
          "2717:   ObjectMeta: metav1.ObjectMeta{",
          "2718:    Name:      \"simple\",",
          "2719:    Namespace: \"roots\",",
          "2722:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2723:     Fqdn: \"passthrough.example.com\",",
          "2724:     TLS: &contour_api_v1.TLS{",
          "2725:      Passthrough: true,",
          "2726:     },",
          "2727:    },",
          "2728:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2729:     Include: &contour_api_v1.TCPProxyInclude{",
          "2730:      Name:      \"foo\",",
          "2731:      Namespace: s1.Namespace,",
          "2732:     },",
          "2733:    },",
          "2737:  proxy39 := &contour_api_v1.HTTPProxy{",
          "2739:    Name:      \"foo\",",
          "2744:     Fqdn: \"www.example.com\",",
          "2745:     TLS: &contour_api_v1.TLS{",
          "2746:      Passthrough: true,",
          "2747:     },",
          "2749:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2754:    },",
          "2759:  proxy39broot := &contour_api_v1.HTTPProxy{",
          "2761:    Name:      \"root\",",
          "2762:    Namespace: s1.Namespace,",
          "2765:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2766:     Fqdn: \"www.example.com\",",
          "2767:     TLS: &contour_api_v1.TLS{",
          "2768:      Passthrough: true,",
          "2769:     },",
          "2770:    },",
          "2771:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2772:     Include: &contour_api_v1.TCPProxyInclude{",
          "2773:      Name:      \"foo\",",
          "2774:      Namespace: s1.Namespace,",
          "2775:     },",
          "2776:    },",
          "2777:   },",
          "2778:  }",
          "2780:  proxy39brootplural := &contour_api_v1.HTTPProxy{",
          "2781:   ObjectMeta: metav1.ObjectMeta{",
          "2782:    Name:      \"root\",",
          "2783:    Namespace: s1.Namespace,",
          "2784:   },",
          "2785:   Spec: contour_api_v1.HTTPProxySpec{",
          "2786:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2787:     Fqdn: \"www.example.com\",",
          "2788:     TLS: &contour_api_v1.TLS{",
          "2789:      Passthrough: true,",
          "2790:     },",
          "2791:    },",
          "2792:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2793:     IncludesDeprecated: &contour_api_v1.TCPProxyInclude{",
          "2794:      Name:      \"foo\",",
          "2795:      Namespace: s1.Namespace,",
          "2796:     },",
          "2797:    },",
          "2798:   },",
          "2799:  }",
          "2801:  proxy39bchild := &contour_api_v1.HTTPProxy{",
          "2802:   ObjectMeta: metav1.ObjectMeta{",
          "2803:    Name:      \"foo\",",
          "2804:    Namespace: s1.Namespace,",
          "2805:   },",
          "2806:   Spec: contour_api_v1.HTTPProxySpec{",
          "2807:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2809:      Name: s1.Name,",
          "2812:    },",
          "2816:  proxy40 := &contour_api_v1.HTTPProxy{",
          "2818:    Name:      \"foo\",",
          "2819:    Namespace: s1.Namespace,",
          "2822:    TCPProxy: &contour_api_v1.TCPProxy{",
          "2824:      Name: s1.Name,",
          "2827:    },",
          "2832:  proxy41 := &contour_api_v1.HTTPProxy{",
          "2834:    Name:      \"missing-service\",",
          "2835:    Namespace: s1.Namespace,",
          "2839:     Fqdn: \"missing-service.example.com\",",
          "2845:     Services: nil, // missing",
          "2850:  proxy100 := &contour_api_v1.HTTPProxy{",
          "2853:    Namespace: s1.Namespace,",
          "2859:    Includes: []contour_api_v1.Include{{",
          "2860:     Name:      \"marketingwww\",",
          "2861:     Namespace: \"marketing\",",
          "2862:     Conditions: []contour_api_v1.MatchCondition{{",
          "2863:      Prefix: \"/blog\",",
          "2864:     }},",
          "2865:    }},",
          "2871:      Name: s1.Name,",
          "2872:      Port: 8080,",
          "2878:  proxy100a := &contour_api_v1.HTTPProxy{",
          "2880:    Name:      \"marketingwww\",",
          "2881:    Namespace: \"marketing\",",
          "2886:      Name: \"blog\",",
          "2887:      Port: 8080,",
          "2893:  proxy100b := &contour_api_v1.HTTPProxy{",
          "2895:    Name:      \"marketingwww\",",
          "2896:    Namespace: \"marketing\",",
          "2901:      Prefix: \"/infotech\",",
          "2904:      Name: \"blog\",",
          "2905:      Port: 8080,",
          "2911:  proxy100c := &contour_api_v1.HTTPProxy{",
          "2913:    Name:      \"marketingwww\",",
          "2914:    Namespace: \"marketing\",",
          "2917:    Includes: []contour_api_v1.Include{{",
          "2918:     Name:      \"marketingit\",",
          "2919:     Namespace: \"it\",",
          "2920:     Conditions: []contour_api_v1.MatchCondition{{",
          "2921:      Prefix: \"/it\",",
          "2922:     }},",
          "2923:    }},",
          "2926:      Prefix: \"/infotech\",",
          "2929:      Name: \"blog\",",
          "2930:      Port: 8080,",
          "2931:     }},",
          "2932:    }, {",
          "2933:     Services: []contour_api_v1.Service{{",
          "2934:      Name: \"blog\",",
          "2935:      Port: 8080,",
          "2941:  proxy100d := &contour_api_v1.HTTPProxy{",
          "2942:   ObjectMeta: metav1.ObjectMeta{",
          "2943:    Name:      \"marketingit\",",
          "2944:    Namespace: \"it\",",
          "2945:   },",
          "2946:   Spec: contour_api_v1.HTTPProxySpec{",
          "2947:    Routes: []contour_api_v1.Route{{",
          "2948:     Conditions: []contour_api_v1.MatchCondition{{",
          "2949:      Prefix: \"/foo\",",
          "2950:     }},",
          "2951:     Services: []contour_api_v1.Service{{",
          "2952:      Name: \"blog\",",
          "2953:      Port: 8080,",
          "2954:     }},",
          "2955:    }},",
          "2956:   },",
          "2957:  }",
          "2960:  proxy101 := &contour_api_v1.HTTPProxy{",
          "2963:    Namespace: s1.Namespace,",
          "2969:    Includes: []contour_api_v1.Include{{",
          "2970:     Name: \"kuarder\",",
          "2971:     Conditions: []contour_api_v1.MatchCondition{{",
          "2972:      Prefix: \"/kuarder\",",
          "2973:     }},",
          "2974:    }},",
          "2980:      Name: s1.Name,",
          "2981:      Port: 8080,",
          "2987:  proxy101a := &contour_api_v1.HTTPProxy{",
          "2988:   ObjectMeta: metav1.ObjectMeta{",
          "2989:    Name:      \"kuarder\",",
          "2990:    Namespace: proxy101.Namespace,",
          "2991:   },",
          "2992:   Spec: contour_api_v1.HTTPProxySpec{",
          "2993:    Routes: []contour_api_v1.Route{{",
          "2994:     Services: []contour_api_v1.Service{{",
          "2995:      Name: s2.Name,",
          "2996:      Port: 8080,",
          "2997:     }},",
          "2998:    }},",
          "2999:   },",
          "3000:  }",
          "3003:  proxy102 := &contour_api_v1.HTTPProxy{",
          "3006:    Namespace: s1.Namespace,",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2852:    },",
          "2853:    Routes: []contour_api_v1.Route{{",
          "2854:     Conditions: []contour_api_v1.MatchCondition{{",
          "2856:     }},",
          "2857:     Services: []contour_api_v1.Service{{",
          "2860:     }},",
          "2891:    }},",
          "2892:   },",
          "2893:  }",
          "2896:   ObjectMeta: metav1.ObjectMeta{",
          "2897:    Name:      \"example-com\",",
          "2899:   },",
          "2900:   Spec: contour_api_v1.HTTPProxySpec{",
          "2901:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2902:     Fqdn: \"example.com\",",
          "2903:    },",
          "2904:    Routes: []contour_api_v1.Route{{",
          "2905:     Conditions: []contour_api_v1.MatchCondition{{",
          "2907:     }},",
          "2908:     Services: []contour_api_v1.Service{{",
          "2911:     }},",
          "2925:    }},",
          "2926:   },",
          "2927:  }",
          "2931:   ObjectMeta: metav1.ObjectMeta{",
          "2932:    Name:      \"example-com\",",
          "2934:   },",
          "2935:   Spec: contour_api_v1.HTTPProxySpec{",
          "2936:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2937:     Fqdn: \"example.com\",",
          "2938:    },",
          "2939:    Routes: []contour_api_v1.Route{{",
          "2940:     Conditions: []contour_api_v1.MatchCondition{{",
          "2941:      Prefix: \"/\",",
          "2942:     }},",
          "2943:     Services: []contour_api_v1.Service{{",
          "2945:      Port: 8080,",
          "2946:     }},",
          "2965:    }},",
          "2966:   },",
          "2967:  }",
          "2970:   ObjectMeta: metav1.ObjectMeta{",
          "2971:    Name:      \"example-com\",",
          "2973:   },",
          "2974:   Spec: contour_api_v1.HTTPProxySpec{",
          "2975:    VirtualHost: &contour_api_v1.VirtualHost{",
          "2976:     Fqdn: \"example.com\",",
          "2977:    },",
          "2978:    Routes: []contour_api_v1.Route{{",
          "2979:     Conditions: []contour_api_v1.MatchCondition{{",
          "2980:      Prefix: \"/\",",
          "2981:     }},",
          "2982:     Services: []contour_api_v1.Service{{",
          "2984:      Port: 8080,",
          "2985:     }},",
          "2992:    }},",
          "2993:   },",
          "2994:  }",
          "2997:   ObjectMeta: metav1.ObjectMeta{",
          "2998:    Name:      \"example-com\",",
          "3000:   },",
          "3001:   Spec: contour_api_v1.HTTPProxySpec{",
          "3002:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3003:     Fqdn: \"example.com\",",
          "3004:    },",
          "3005:    Routes: []contour_api_v1.Route{{",
          "3006:     Conditions: []contour_api_v1.MatchCondition{{",
          "3007:      Prefix: \"/\",",
          "3008:     }},",
          "3009:     Services: []contour_api_v1.Service{{",
          "3011:      Port: 8080,",
          "3018:     }},",
          "3019:    }},",
          "3020:   },",
          "3021:  }",
          "3024:   ObjectMeta: metav1.ObjectMeta{",
          "3027:   },",
          "3031:    },",
          "3042:   },",
          "3049:   },",
          "3053:    },",
          "3060:      Port: 80,",
          "3063:   },",
          "3074:    objs: []interface{}{",
          "3075:     i1,",
          "3076:    },",
          "3077:    want: listeners(),",
          "3078:   },",
          "3080:    objs: []interface{}{",
          "3082:     s1,",
          "3083:    },",
          "3084:    want: listeners(",
          "3085:     &Listener{",
          "",
          "[Removed Lines]",
          "2855:      Prefix: \"/\",",
          "2858:      Name: \"nginx\",",
          "2859:      Port: 80,",
          "2861:     LoadBalancerPolicy: &contour_api_v1.LoadBalancerPolicy{",
          "2862:      Strategy: \"RequestHash\",",
          "2863:      RequestHashPolicies: []contour_api_v1.RequestHashPolicy{",
          "2864:       {",
          "2865:        Terminal: true,",
          "2866:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "2867:         HeaderName: \"X-Some-Header\",",
          "2868:        },",
          "2869:       },",
          "2870:       {",
          "2872:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "2873:         HeaderName: \"x-some-header\",",
          "2874:        },",
          "2875:       },",
          "2876:       {",
          "2877:        HeaderHashOptions: nil,",
          "2878:       },",
          "2879:       {",
          "2880:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "2881:         HeaderName: \"X-Some-Other-Header\",",
          "2882:        },",
          "2883:       },",
          "2884:       {",
          "2885:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "2886:         HeaderName: \"\",",
          "2887:        },",
          "2888:       },",
          "2889:      },",
          "2890:     },",
          "2895:  proxyLoadBalancerHashPolicyHeaderAllInvalid := &contour_api_v1.HTTPProxy{",
          "2898:    Namespace: \"default\",",
          "2906:      Prefix: \"/\",",
          "2909:      Name: \"nginx\",",
          "2910:      Port: 80,",
          "2912:     LoadBalancerPolicy: &contour_api_v1.LoadBalancerPolicy{",
          "2913:      Strategy: \"RequestHash\",",
          "2914:      RequestHashPolicies: []contour_api_v1.RequestHashPolicy{",
          "2915:       {",
          "2916:        HeaderHashOptions: nil,",
          "2917:       },",
          "2918:       {",
          "2919:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "2920:         HeaderName: \"\",",
          "2921:        },",
          "2922:       },",
          "2923:      },",
          "2924:     },",
          "2930:  proxy109 := &contour_api_v1.HTTPProxy{",
          "2933:    Namespace: \"default\",",
          "2944:      Name: \"kuard\",",
          "2947:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2948:      Set: []contour_api_v1.HeaderValue{{",
          "2949:       Name:  \"In-Foo\",",
          "2950:       Value: \"bar\",",
          "2951:      }},",
          "2952:      Remove: []string{",
          "2953:       \"In-Baz\",",
          "2954:      },",
          "2955:     },",
          "2956:     ResponseHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2957:      Set: []contour_api_v1.HeaderValue{{",
          "2958:       Name:  \"Out-Foo\",",
          "2959:       Value: \"bar\",",
          "2960:      }},",
          "2961:      Remove: []string{",
          "2962:       \"Out-Baz\",",
          "2963:      },",
          "2964:     },",
          "2969:  proxy111 := &contour_api_v1.HTTPProxy{",
          "2972:    Namespace: \"default\",",
          "2983:      Name: \"kuard\",",
          "2986:     ResponseHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "2987:      Set: []contour_api_v1.HeaderValue{{",
          "2988:       Name:  \"Host\",",
          "2989:       Value: \"bar.baz\",",
          "2990:      }},",
          "2991:     },",
          "2996:  proxy112 := &contour_api_v1.HTTPProxy{",
          "2999:    Namespace: \"default\",",
          "3010:      Name: \"kuard\",",
          "3012:      ResponseHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3013:       Set: []contour_api_v1.HeaderValue{{",
          "3014:        Name:  \"Host\",",
          "3015:        Value: \"bar.baz\",",
          "3016:       }},",
          "3017:      },",
          "3022:  protocol := \"h2c\"",
          "3023:  proxy110 := &contour_api_v1.HTTPProxy{",
          "3025:    Name:      \"example-com\",",
          "3026:    Namespace: \"default\",",
          "3028:   Spec: contour_api_v1.HTTPProxySpec{",
          "3029:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3030:     Fqdn: \"example.com\",",
          "3032:    Routes: []contour_api_v1.Route{{",
          "3033:     Conditions: []contour_api_v1.MatchCondition{{",
          "3034:      Prefix: \"/\",",
          "3035:     }},",
          "3036:     Services: []contour_api_v1.Service{{",
          "3037:      Name:     \"kuard\",",
          "3038:      Port:     8080,",
          "3039:      Protocol: &protocol,",
          "3040:     }},",
          "3041:    }},",
          "3043:  }",
          "3045:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
          "3046:   ObjectMeta: metav1.ObjectMeta{",
          "3047:    Name:      \"example-com\",",
          "3048:    Namespace: \"default\",",
          "3050:   Spec: contour_api_v1.HTTPProxySpec{",
          "3051:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3052:     Fqdn: \"example.com\",",
          "3054:    Routes: []contour_api_v1.Route{{",
          "3055:     Conditions: []contour_api_v1.MatchCondition{{",
          "3056:      Prefix: \"/\",",
          "3057:     }},",
          "3058:     Services: []contour_api_v1.Service{{",
          "3059:      Name: s14.GetName(),",
          "3061:     }},",
          "3062:    }},",
          "3064:  }",
          "3066:  tests := map[string]struct {",
          "3067:   objs                         []interface{}",
          "3068:   disablePermitInsecure        bool",
          "3069:   fallbackCertificateName      string",
          "3070:   fallbackCertificateNamespace string",
          "3071:   want                         []Vertex",
          "3072:  }{",
          "3073:   \"insert ingress w/ default backend w/o matching service\": {",
          "3079:   \"insert ingress w/ default backend\": {",
          "3081:     i1,",
          "",
          "[Added Lines]",
          "3014:      Prefix: \"/v1\",",
          "3015:     }, {",
          "3016:      Prefix: \"/api\",",
          "3019:      Name: s1.Name,",
          "3020:      Port: 8080,",
          "3027:  proxy103 := &contour_api_v1.HTTPProxy{",
          "3030:    Namespace: s1.Namespace,",
          "3036:    Includes: []contour_api_v1.Include{{",
          "3037:     Name:      \"www\",",
          "3038:     Namespace: \"teama\",",
          "3039:     Conditions: []contour_api_v1.MatchCondition{{",
          "3040:      Prefix: \"/v1\",",
          "3041:     }, {",
          "3042:      Prefix: \"/api\",",
          "3043:     }},",
          "3044:    }},",
          "3045:    Routes: []contour_api_v1.Route{{",
          "3046:     Services: []contour_api_v1.Service{{",
          "3047:      Name: s1.Name,",
          "3048:      Port: 8080,",
          "3049:     }},",
          "3050:    }},",
          "3051:   },",
          "3052:  }",
          "3054:  proxy103a := &contour_api_v1.HTTPProxy{",
          "3055:   ObjectMeta: metav1.ObjectMeta{",
          "3056:    Name:      \"www\",",
          "3057:    Namespace: \"teama\",",
          "3058:   },",
          "3059:   Spec: contour_api_v1.HTTPProxySpec{",
          "3062:      Prefix: \"/v1\",",
          "3063:     }, {",
          "3064:      Prefix: \"/api\",",
          "3067:      Name: s1.Name,",
          "3068:      Port: 8080,",
          "3074:  proxy104 := &contour_api_v1.HTTPProxy{",
          "3077:    Namespace: s1.Namespace,",
          "3083:    Includes: []contour_api_v1.Include{{",
          "3084:     Name: \"kuarder\",",
          "3085:     Conditions: []contour_api_v1.MatchCondition{{",
          "3086:      Prefix: \"/kuarder\",",
          "3087:     }},",
          "3088:    }},",
          "3094:      Name: s1.Name,",
          "3101:  proxy104a := &contour_api_v1.HTTPProxy{",
          "3102:   ObjectMeta: metav1.ObjectMeta{",
          "3103:    Name:      \"kuarder\",",
          "3104:    Namespace: proxy104.Namespace,",
          "3105:   },",
          "3106:   Spec: contour_api_v1.HTTPProxySpec{",
          "3107:    Routes: []contour_api_v1.Route{{",
          "3108:     Services: []contour_api_v1.Service{{",
          "3109:      Name: s2.Name,",
          "3110:      Port: 8080,",
          "3111:     }},",
          "3112:    }},",
          "3113:   },",
          "3114:  }",
          "3116:  proxy105 := &contour_api_v1.HTTPProxy{",
          "3119:    Namespace: s1.Namespace,",
          "3125:    Includes: []contour_api_v1.Include{{",
          "3126:     Name: \"kuarder\",",
          "3127:     Conditions: []contour_api_v1.MatchCondition{{",
          "3128:      Prefix: \"/kuarder\",",
          "3129:     }},",
          "3130:    }},",
          "3136:      Name: s1.Name,",
          "3143:  proxy105a := &contour_api_v1.HTTPProxy{",
          "3144:   ObjectMeta: metav1.ObjectMeta{",
          "3145:    Name:      \"kuarder\",",
          "3146:    Namespace: proxy105.Namespace,",
          "3147:   },",
          "3148:   Spec: contour_api_v1.HTTPProxySpec{",
          "3149:    Routes: []contour_api_v1.Route{{",
          "3150:     Conditions: []contour_api_v1.MatchCondition{{",
          "3151:      Prefix: \"/\",",
          "3152:     }},",
          "3153:     Services: []contour_api_v1.Service{{",
          "3154:      Name: s2.Name,",
          "3155:      Port: 8080,",
          "3156:     }},",
          "3157:    }},",
          "3158:   },",
          "3159:  }",
          "3161:  proxy106 := &contour_api_v1.HTTPProxy{",
          "3164:    Namespace: s1.Namespace,",
          "3170:    Includes: []contour_api_v1.Include{{",
          "3171:     Name: \"kuarder\",",
          "3172:     Conditions: []contour_api_v1.MatchCondition{{",
          "3173:      Prefix: \"/kuarder/\",",
          "3174:     }},",
          "3175:    }},",
          "3181:      Name: s1.Name,",
          "3188:  proxy106a := &contour_api_v1.HTTPProxy{",
          "3190:    Name:      \"kuarder\",",
          "3191:    Namespace: proxy105.Namespace,",
          "3192:   },",
          "3193:   Spec: contour_api_v1.HTTPProxySpec{",
          "3194:    Routes: []contour_api_v1.Route{{",
          "3195:     Conditions: []contour_api_v1.MatchCondition{{",
          "3196:      Prefix: \"/\",",
          "3197:     }},",
          "3198:     Services: []contour_api_v1.Service{{",
          "3199:      Name: s2.Name,",
          "3200:      Port: 8080,",
          "3201:     }},",
          "3202:    }},",
          "3203:   },",
          "3204:  }",
          "3206:  proxy107 := &contour_api_v1.HTTPProxy{",
          "3207:   ObjectMeta: metav1.ObjectMeta{",
          "3208:    Name:      \"example-com\",",
          "3209:    Namespace: s1.Namespace,",
          "3210:   },",
          "3211:   Spec: contour_api_v1.HTTPProxySpec{",
          "3212:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3213:     Fqdn: \"example.com\",",
          "3214:    },",
          "3215:    Includes: []contour_api_v1.Include{{",
          "3216:     Name: \"kuarder\",",
          "3217:     Conditions: []contour_api_v1.MatchCondition{{",
          "3218:      Prefix: \"/kuarder\",",
          "3219:     }},",
          "3220:    }},",
          "3221:    Routes: []contour_api_v1.Route{{",
          "3222:     Conditions: []contour_api_v1.MatchCondition{{",
          "3223:      Prefix: \"/\",",
          "3224:     }},",
          "3225:     Services: []contour_api_v1.Service{{",
          "3226:      Name: s1.Name,",
          "3227:      Port: 8080,",
          "3228:     }},",
          "3229:    }},",
          "3230:   },",
          "3231:  }",
          "3233:  proxy107a := &contour_api_v1.HTTPProxy{",
          "3234:   ObjectMeta: metav1.ObjectMeta{",
          "3235:    Name:      \"kuarder\",",
          "3236:    Namespace: proxy105.Namespace,",
          "3237:   },",
          "3238:   Spec: contour_api_v1.HTTPProxySpec{",
          "3239:    Routes: []contour_api_v1.Route{{",
          "3240:     Conditions: []contour_api_v1.MatchCondition{{",
          "3241:      Prefix: \"/withavengeance\",",
          "3242:     }},",
          "3243:     Services: []contour_api_v1.Service{{",
          "3244:      Name: s2.Name,",
          "3245:      Port: 8080,",
          "3246:     }},",
          "3247:    }},",
          "3248:   },",
          "3249:  }",
          "3252:  proxy108 := &contour_api_v1.HTTPProxy{",
          "3253:   ObjectMeta: metav1.ObjectMeta{",
          "3254:    Name:      \"root\",",
          "3255:    Namespace: s1.Namespace,",
          "3256:   },",
          "3257:   Spec: contour_api_v1.HTTPProxySpec{",
          "3258:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3259:     Fqdn: \"example.com\",",
          "3260:    },",
          "3261:    Includes: []contour_api_v1.Include{{",
          "3262:     Name:      \"blogteama\",",
          "3263:     Namespace: \"teama\",",
          "3264:     Conditions: []contour_api_v1.MatchCondition{{",
          "3265:      Prefix: \"/blog\",",
          "3266:      Header: &contour_api_v1.HeaderMatchCondition{",
          "3267:       Name:     \"x-header\",",
          "3268:       Contains: \"abc\",",
          "3269:      },",
          "3270:     }},",
          "3271:    }, {",
          "3272:     Name:      \"blogteama\",",
          "3273:     Namespace: \"teamb\",",
          "3274:     Conditions: []contour_api_v1.MatchCondition{{",
          "3275:      Prefix: \"/blog\",",
          "3276:      Header: &contour_api_v1.HeaderMatchCondition{",
          "3277:       Name:     \"x-header\",",
          "3278:       Contains: \"abc\",",
          "3279:      },",
          "3280:     }},",
          "3281:    }},",
          "3282:    Routes: []contour_api_v1.Route{{",
          "3283:     Conditions: []contour_api_v1.MatchCondition{{",
          "3284:      Prefix: \"/\",",
          "3285:     }},",
          "3286:     Services: []contour_api_v1.Service{{",
          "3287:      Name: s1.Name,",
          "3288:      Port: 8080,",
          "3289:     }},",
          "3290:    }},",
          "3291:   },",
          "3292:  }",
          "3294:  proxy108a := &contour_api_v1.HTTPProxy{",
          "3295:   ObjectMeta: metav1.ObjectMeta{",
          "3296:    Name:      \"blogteama\",",
          "3297:    Namespace: \"teama\",",
          "3298:   },",
          "3299:   Spec: contour_api_v1.HTTPProxySpec{",
          "3300:    Routes: []contour_api_v1.Route{{",
          "3301:     Services: []contour_api_v1.Service{{",
          "3302:      Name: s12.Name,",
          "3303:      Port: 8080,",
          "3304:     }},",
          "3305:    }},",
          "3306:   },",
          "3307:  }",
          "3309:  proxy108b := &contour_api_v1.HTTPProxy{",
          "3310:   ObjectMeta: metav1.ObjectMeta{",
          "3311:    Name:      \"blogteamb\",",
          "3312:    Namespace: \"teamb\",",
          "3313:   },",
          "3314:   Spec: contour_api_v1.HTTPProxySpec{",
          "3315:    Routes: []contour_api_v1.Route{{",
          "3316:     Services: []contour_api_v1.Service{{",
          "3317:      Name: s13.Name,",
          "3318:      Port: 8080,",
          "3319:     }},",
          "3320:    }},",
          "3321:   },",
          "3322:  }",
          "3324:  proxyReplaceHostHeaderRoute := &contour_api_v1.HTTPProxy{",
          "3325:   ObjectMeta: metav1.ObjectMeta{",
          "3326:    Name:      \"example-com\",",
          "3327:    Namespace: \"default\",",
          "3328:   },",
          "3329:   Spec: contour_api_v1.HTTPProxySpec{",
          "3330:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3331:     Fqdn: \"example.com\",",
          "3332:    },",
          "3333:    Routes: []contour_api_v1.Route{{",
          "3334:     Conditions: []contour_api_v1.MatchCondition{{",
          "3335:      Prefix: \"/\",",
          "3336:     }},",
          "3337:     Services: []contour_api_v1.Service{{",
          "3338:      Name: \"nginx\",",
          "3339:      Port: 80,",
          "3340:     }},",
          "3341:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3342:      Set: []contour_api_v1.HeaderValue{{",
          "3343:       Name:  \"Host\",",
          "3344:       Value: \"bar.com\",",
          "3345:      }},",
          "3346:     },",
          "3347:    }},",
          "3348:   },",
          "3349:  }",
          "3351:  proxyReplaceHostHeaderService := &contour_api_v1.HTTPProxy{",
          "3352:   ObjectMeta: metav1.ObjectMeta{",
          "3353:    Name:      \"example-com\",",
          "3354:    Namespace: \"default\",",
          "3355:   },",
          "3356:   Spec: contour_api_v1.HTTPProxySpec{",
          "3357:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3358:     Fqdn: \"example.com\",",
          "3359:    },",
          "3360:    Routes: []contour_api_v1.Route{{",
          "3361:     Conditions: []contour_api_v1.MatchCondition{{",
          "3362:      Prefix: \"/\",",
          "3363:     }},",
          "3364:     Services: []contour_api_v1.Service{{",
          "3365:      Name: \"nginx\",",
          "3366:      Port: 80,",
          "3367:      RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3368:       Set: []contour_api_v1.HeaderValue{{",
          "3369:        Name:  \"Host\",",
          "3370:        Value: \"bar.com\",",
          "3371:       }},",
          "3372:      },",
          "3373:     }},",
          "3374:    }},",
          "3375:   },",
          "3376:  }",
          "3378:  proxyReplaceHostHeaderMultiple := &contour_api_v1.HTTPProxy{",
          "3379:   ObjectMeta: metav1.ObjectMeta{",
          "3380:    Name:      \"example-com\",",
          "3381:    Namespace: \"default\",",
          "3382:   },",
          "3383:   Spec: contour_api_v1.HTTPProxySpec{",
          "3384:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3385:     Fqdn: \"example.com\",",
          "3386:    },",
          "3387:    Routes: []contour_api_v1.Route{{",
          "3388:     Conditions: []contour_api_v1.MatchCondition{{",
          "3389:      Prefix: \"/\",",
          "3390:     }},",
          "3391:     Services: []contour_api_v1.Service{{",
          "3392:      Name: \"nginx\",",
          "3393:      Port: 80,",
          "3394:     }},",
          "3395:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3396:      Set: []contour_api_v1.HeaderValue{{",
          "3397:       Name:  \"Host\",",
          "3398:       Value: \"bar.com\",",
          "3399:      }, {",
          "3400:       Name:  \"x-header\",",
          "3401:       Value: \"bar.com\",",
          "3402:      }, {",
          "3403:       Name:  \"y-header\",",
          "3404:       Value: \"zed.com\",",
          "3405:      }},",
          "3406:     },",
          "3407:    }},",
          "3408:   },",
          "3409:  }",
          "3411:  proxyReplaceNonHostHeader := &contour_api_v1.HTTPProxy{",
          "3412:   ObjectMeta: metav1.ObjectMeta{",
          "3413:    Name:      \"example-com\",",
          "3414:    Namespace: \"default\",",
          "3415:   },",
          "3416:   Spec: contour_api_v1.HTTPProxySpec{",
          "3417:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3418:     Fqdn: \"example.com\",",
          "3419:    },",
          "3420:    Routes: []contour_api_v1.Route{{",
          "3421:     Conditions: []contour_api_v1.MatchCondition{{",
          "3422:      Prefix: \"/\",",
          "3423:     }},",
          "3424:     Services: []contour_api_v1.Service{{",
          "3425:      Name: \"nginx\",",
          "3426:      Port: 80,",
          "3427:     }},",
          "3428:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3429:      Set: []contour_api_v1.HeaderValue{{",
          "3430:       Name:  \"x-header\",",
          "3431:       Value: \"bar.com\",",
          "3432:      }},",
          "3433:     },",
          "3434:    }},",
          "3435:   },",
          "3436:  }",
          "3438:  proxyReplaceHeaderEmptyValue := &contour_api_v1.HTTPProxy{",
          "3439:   ObjectMeta: metav1.ObjectMeta{",
          "3440:    Name:      \"example-com\",",
          "3441:    Namespace: \"default\",",
          "3442:   },",
          "3443:   Spec: contour_api_v1.HTTPProxySpec{",
          "3444:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3445:     Fqdn: \"example.com\",",
          "3446:    },",
          "3447:    Routes: []contour_api_v1.Route{{",
          "3448:     Conditions: []contour_api_v1.MatchCondition{{",
          "3449:      Prefix: \"/\",",
          "3450:     }},",
          "3451:     Services: []contour_api_v1.Service{{",
          "3452:      Name: \"nginx\",",
          "3453:      Port: 80,",
          "3454:     }},",
          "3455:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3456:      Set: []contour_api_v1.HeaderValue{{",
          "3457:       Name: \"x-header\",",
          "3458:      }},",
          "3459:     },",
          "3460:    }},",
          "3461:   },",
          "3462:  }",
          "3464:  proxyCookieLoadBalancer := &contour_api_v1.HTTPProxy{",
          "3465:   ObjectMeta: metav1.ObjectMeta{",
          "3466:    Name:      \"example-com\",",
          "3467:    Namespace: \"default\",",
          "3468:   },",
          "3469:   Spec: contour_api_v1.HTTPProxySpec{",
          "3470:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3471:     Fqdn: \"example.com\",",
          "3472:    },",
          "3473:    Routes: []contour_api_v1.Route{{",
          "3474:     Conditions: []contour_api_v1.MatchCondition{{",
          "3475:      Prefix: \"/\",",
          "3476:     }},",
          "3477:     Services: []contour_api_v1.Service{{",
          "3478:      Name: \"nginx\",",
          "3479:      Port: 80,",
          "3480:     }},",
          "3481:     LoadBalancerPolicy: &contour_api_v1.LoadBalancerPolicy{",
          "3482:      Strategy: \"Cookie\",",
          "3483:     },",
          "3484:    }},",
          "3485:   },",
          "3486:  }",
          "3488:  proxyLoadBalancerHashPolicyHeader := &contour_api_v1.HTTPProxy{",
          "3489:   ObjectMeta: metav1.ObjectMeta{",
          "3490:    Name:      \"example-com\",",
          "3491:    Namespace: \"default\",",
          "3492:   },",
          "3493:   Spec: contour_api_v1.HTTPProxySpec{",
          "3494:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3495:     Fqdn: \"example.com\",",
          "3496:    },",
          "3497:    Routes: []contour_api_v1.Route{{",
          "3498:     Conditions: []contour_api_v1.MatchCondition{{",
          "3499:      Prefix: \"/\",",
          "3500:     }},",
          "3501:     Services: []contour_api_v1.Service{{",
          "3502:      Name: \"nginx\",",
          "3503:      Port: 80,",
          "3504:     }},",
          "3505:     LoadBalancerPolicy: &contour_api_v1.LoadBalancerPolicy{",
          "3506:      Strategy: \"RequestHash\",",
          "3507:      RequestHashPolicies: []contour_api_v1.RequestHashPolicy{",
          "3508:       {",
          "3509:        Terminal: true,",
          "3510:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "3511:         HeaderName: \"X-Some-Header\",",
          "3512:        },",
          "3513:       },",
          "3514:       {",
          "3516:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "3517:         HeaderName: \"x-some-header\",",
          "3518:        },",
          "3519:       },",
          "3520:       {",
          "3521:        HeaderHashOptions: nil,",
          "3522:       },",
          "3523:       {",
          "3524:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "3525:         HeaderName: \"X-Some-Other-Header\",",
          "3526:        },",
          "3527:       },",
          "3528:       {",
          "3529:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "3530:         HeaderName: \"\",",
          "3531:        },",
          "3532:       },",
          "3533:      },",
          "3534:     },",
          "3535:    }},",
          "3536:   },",
          "3537:  }",
          "3539:  proxyLoadBalancerHashPolicyHeaderAllInvalid := &contour_api_v1.HTTPProxy{",
          "3540:   ObjectMeta: metav1.ObjectMeta{",
          "3541:    Name:      \"example-com\",",
          "3542:    Namespace: \"default\",",
          "3543:   },",
          "3544:   Spec: contour_api_v1.HTTPProxySpec{",
          "3545:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3546:     Fqdn: \"example.com\",",
          "3547:    },",
          "3548:    Routes: []contour_api_v1.Route{{",
          "3549:     Conditions: []contour_api_v1.MatchCondition{{",
          "3550:      Prefix: \"/\",",
          "3551:     }},",
          "3552:     Services: []contour_api_v1.Service{{",
          "3553:      Name: \"nginx\",",
          "3554:      Port: 80,",
          "3555:     }},",
          "3556:     LoadBalancerPolicy: &contour_api_v1.LoadBalancerPolicy{",
          "3557:      Strategy: \"RequestHash\",",
          "3558:      RequestHashPolicies: []contour_api_v1.RequestHashPolicy{",
          "3559:       {",
          "3560:        HeaderHashOptions: nil,",
          "3561:       },",
          "3562:       {",
          "3563:        HeaderHashOptions: &contour_api_v1.HeaderHashOptions{",
          "3564:         HeaderName: \"\",",
          "3565:        },",
          "3566:       },",
          "3567:      },",
          "3568:     },",
          "3569:    }},",
          "3570:   },",
          "3571:  }",
          "3574:  proxy109 := &contour_api_v1.HTTPProxy{",
          "3575:   ObjectMeta: metav1.ObjectMeta{",
          "3576:    Name:      \"example-com\",",
          "3577:    Namespace: \"default\",",
          "3578:   },",
          "3579:   Spec: contour_api_v1.HTTPProxySpec{",
          "3580:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3581:     Fqdn: \"example.com\",",
          "3582:    },",
          "3583:    Routes: []contour_api_v1.Route{{",
          "3584:     Conditions: []contour_api_v1.MatchCondition{{",
          "3585:      Prefix: \"/\",",
          "3586:     }},",
          "3587:     Services: []contour_api_v1.Service{{",
          "3588:      Name: \"kuard\",",
          "3589:      Port: 8080,",
          "3590:     }},",
          "3591:     RequestHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3592:      Set: []contour_api_v1.HeaderValue{{",
          "3593:       Name:  \"In-Foo\",",
          "3594:       Value: \"bar\",",
          "3595:      }},",
          "3596:      Remove: []string{",
          "3597:       \"In-Baz\",",
          "3598:      },",
          "3599:     },",
          "3600:     ResponseHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3601:      Set: []contour_api_v1.HeaderValue{{",
          "3602:       Name:  \"Out-Foo\",",
          "3603:       Value: \"bar\",",
          "3604:      }},",
          "3605:      Remove: []string{",
          "3606:       \"Out-Baz\",",
          "3607:      },",
          "3608:     },",
          "3609:    }},",
          "3610:   },",
          "3611:  }",
          "3613:  proxy111 := &contour_api_v1.HTTPProxy{",
          "3614:   ObjectMeta: metav1.ObjectMeta{",
          "3615:    Name:      \"example-com\",",
          "3616:    Namespace: \"default\",",
          "3617:   },",
          "3618:   Spec: contour_api_v1.HTTPProxySpec{",
          "3619:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3620:     Fqdn: \"example.com\",",
          "3621:    },",
          "3622:    Routes: []contour_api_v1.Route{{",
          "3623:     Conditions: []contour_api_v1.MatchCondition{{",
          "3624:      Prefix: \"/\",",
          "3625:     }},",
          "3626:     Services: []contour_api_v1.Service{{",
          "3627:      Name: \"kuard\",",
          "3628:      Port: 8080,",
          "3629:     }},",
          "3630:     ResponseHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3631:      Set: []contour_api_v1.HeaderValue{{",
          "3632:       Name:  \"Host\",",
          "3633:       Value: \"bar.baz\",",
          "3634:      }},",
          "3635:     },",
          "3636:    }},",
          "3637:   },",
          "3638:  }",
          "3640:  proxy112 := &contour_api_v1.HTTPProxy{",
          "3641:   ObjectMeta: metav1.ObjectMeta{",
          "3642:    Name:      \"example-com\",",
          "3643:    Namespace: \"default\",",
          "3644:   },",
          "3645:   Spec: contour_api_v1.HTTPProxySpec{",
          "3646:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3647:     Fqdn: \"example.com\",",
          "3648:    },",
          "3649:    Routes: []contour_api_v1.Route{{",
          "3650:     Conditions: []contour_api_v1.MatchCondition{{",
          "3651:      Prefix: \"/\",",
          "3652:     }},",
          "3653:     Services: []contour_api_v1.Service{{",
          "3654:      Name: \"kuard\",",
          "3655:      Port: 8080,",
          "3656:      ResponseHeadersPolicy: &contour_api_v1.HeadersPolicy{",
          "3657:       Set: []contour_api_v1.HeaderValue{{",
          "3658:        Name:  \"Host\",",
          "3659:        Value: \"bar.baz\",",
          "3660:       }},",
          "3661:      },",
          "3662:     }},",
          "3663:    }},",
          "3664:   },",
          "3665:  }",
          "3666:  protocol := \"h2c\"",
          "3667:  proxy110 := &contour_api_v1.HTTPProxy{",
          "3668:   ObjectMeta: metav1.ObjectMeta{",
          "3669:    Name:      \"example-com\",",
          "3670:    Namespace: \"default\",",
          "3671:   },",
          "3672:   Spec: contour_api_v1.HTTPProxySpec{",
          "3673:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3674:     Fqdn: \"example.com\",",
          "3675:    },",
          "3676:    Routes: []contour_api_v1.Route{{",
          "3677:     Conditions: []contour_api_v1.MatchCondition{{",
          "3678:      Prefix: \"/\",",
          "3679:     }},",
          "3680:     Services: []contour_api_v1.Service{{",
          "3681:      Name:     \"kuard\",",
          "3682:      Port:     8080,",
          "3683:      Protocol: &protocol,",
          "3684:     }},",
          "3685:    }},",
          "3686:   },",
          "3687:  }",
          "3689:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
          "3690:   ObjectMeta: metav1.ObjectMeta{",
          "3691:    Name:      \"example-com\",",
          "3692:    Namespace: \"default\",",
          "3693:   },",
          "3694:   Spec: contour_api_v1.HTTPProxySpec{",
          "3695:    VirtualHost: &contour_api_v1.VirtualHost{",
          "3696:     Fqdn: \"example.com\",",
          "3697:    },",
          "3698:    Routes: []contour_api_v1.Route{{",
          "3699:     Conditions: []contour_api_v1.MatchCondition{{",
          "3700:      Prefix: \"/\",",
          "3701:     }},",
          "3702:     Services: []contour_api_v1.Service{{",
          "3703:      Name: s14.GetName(),",
          "3704:      Port: 80,",
          "3705:     }},",
          "3706:    }},",
          "3707:   },",
          "3708:  }",
          "3710:  tests := map[string]struct {",
          "3711:   objs                         []interface{}",
          "3712:   disablePermitInsecure        bool",
          "3713:   fallbackCertificateName      string",
          "3714:   fallbackCertificateNamespace string",
          "3715:   want                         []Vertex",
          "3716:  }{",
          "3717:   \"insert ingress w/ default backend w/o matching service\": {",
          "3718:    objs: []interface{}{",
          "3719:     i1,",
          "3720:    },",
          "3721:    want: listeners(),",
          "3722:   },",
          "3723:   \"insert ingress w/ default backend\": {",
          "3724:    objs: []interface{}{",
          "3725:     i1,",
          "3726:     s1,",
          "3727:    },",
          "3728:    want: listeners(",
          "3729:     &Listener{",
          "3730:      Port: 80,",
          "3731:      VirtualHosts: virtualhosts(",
          "3732:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3733:      ),",
          "3734:     },",
          "3735:    ),",
          "3736:   },",
          "3737:   \"insert ingress w/ single unnamed backend w/o matching service\": {",
          "3738:    objs: []interface{}{",
          "3739:     i2,",
          "3740:    },",
          "3741:    want: listeners(),",
          "3742:   },",
          "3743:   \"insert ingress w/ single unnamed backend\": {",
          "3744:    objs: []interface{}{",
          "3745:     i2,",
          "3746:     s1,",
          "3747:    },",
          "3748:    want: listeners(",
          "3749:     &Listener{",
          "3750:      Port: 80,",
          "3751:      VirtualHosts: virtualhosts(",
          "3752:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3753:      ),",
          "3754:     },",
          "3755:    ),",
          "3756:   },",
          "3757:   \"insert ingress with missing spec.rule.http key\": {",
          "3758:    objs: []interface{}{",
          "3759:     i2a,",
          "3760:    },",
          "3761:    want: listeners(),",
          "3762:   },",
          "3763:   \"insert ingress w/ host name and single backend w/o matching service\": {",
          "3764:    objs: []interface{}{",
          "3765:     i3,",
          "3766:    },",
          "3767:    want: listeners(),",
          "3768:   },",
          "3769:   \"insert ingress w/ host name and single backend\": {",
          "3770:    objs: []interface{}{",
          "3771:     i3,",
          "3772:     s1,",
          "3773:    },",
          "3774:    want: listeners(",
          "3775:     &Listener{",
          "3776:      Port: 80,",
          "3777:      VirtualHosts: virtualhosts(",
          "3778:       virtualhost(\"kuard.example.com\", prefixroute(\"/\", service(s1))),",
          "3779:      ),",
          "3780:     },",
          "3781:    ),",
          "3782:   },",
          "3783:   \"insert non matching service then ingress w/ default backend\": {",
          "3784:    objs: []interface{}{",
          "3785:     s2,",
          "3786:     i1,",
          "3787:    },",
          "3788:    want: listeners(),",
          "3789:   },",
          "3790:   \"insert ingress w/ default backend then matching service with wrong port\": {",
          "3791:    objs: []interface{}{",
          "3792:     i1,",
          "3793:     s3,",
          "3794:    },",
          "3795:    want: listeners(),",
          "3796:   },",
          "3797:   \"insert unnamed ingress w/ single backend then matching service with wrong port\": {",
          "3798:    objs: []interface{}{",
          "3799:     i2,",
          "3800:     s3,",
          "3801:    },",
          "3802:    want: listeners(),",
          "3803:   },",
          "3804:   \"insert ingress w/ default backend then matching service w/ named port\": {",
          "3805:    objs: []interface{}{",
          "3806:     i4,",
          "3807:     s1,",
          "3808:    },",
          "3809:    want: listeners(",
          "3810:     &Listener{",
          "3811:      Port: 80,",
          "3812:      VirtualHosts: virtualhosts(",
          "3813:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3814:      ),",
          "3815:     },",
          "3816:    ),",
          "3817:   },",
          "3818:   \"insert service w/ named port then ingress w/ default backend\": {",
          "3819:    objs: []interface{}{",
          "3820:     s1,",
          "3821:     i4,",
          "3822:    },",
          "3823:    want: listeners(",
          "3824:     &Listener{",
          "3825:      Port: 80,",
          "3826:      VirtualHosts: virtualhosts(",
          "3827:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3828:      ),",
          "3829:     },",
          "3830:    ),",
          "3831:   },",
          "3832:   \"insert ingress w/ single unnamed backend w/ named service port then service\": {",
          "3833:    objs: []interface{}{",
          "3834:     i5,",
          "3835:     s1,",
          "3836:    },",
          "3837:    want: listeners(",
          "3838:     &Listener{",
          "3839:      Port: 80,",
          "3840:      VirtualHosts: virtualhosts(",
          "3841:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3842:      ),",
          "3843:     },",
          "3844:    ),",
          "3845:   },",
          "3846:   \"insert service then ingress w/ single unnamed backend w/ named service port\": {",
          "3847:    objs: []interface{}{",
          "3848:     s1,",
          "3849:     i5,",
          "3850:    },",
          "3851:    want: listeners(",
          "3852:     &Listener{",
          "3853:      Port: 80,",
          "3854:      VirtualHosts: virtualhosts(",
          "3855:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3856:      ),",
          "3857:     },",
          "3858:    ),",
          "3859:   },",
          "3860:   \"ingressv1: insert ingress w/ default backend w/o matching service\": {",
          "3861:    objs: []interface{}{",
          "3862:     i1V1,",
          "3863:    },",
          "3864:    want: listeners(),",
          "3865:   },",
          "3866:   \"ingressv1: insert ingress w/ default backend\": {",
          "3867:    objs: []interface{}{",
          "3868:     i1V1,",
          "3869:     s1,",
          "3870:    },",
          "3871:    want: listeners(",
          "3872:     &Listener{",
          "3873:      Port: 80,",
          "3874:      VirtualHosts: virtualhosts(",
          "3875:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3876:      ),",
          "3877:     },",
          "3878:    ),",
          "3879:   },",
          "3880:   \"ingressv1: insert ingress w/ single unnamed backend w/o matching service\": {",
          "3881:    objs: []interface{}{",
          "3882:     i2V1,",
          "3883:    },",
          "3884:    want: listeners(),",
          "3885:   },",
          "3886:   \"ingressv1: insert ingress w/ single unnamed backend\": {",
          "3887:    objs: []interface{}{",
          "3888:     i2V1,",
          "3889:     s1,",
          "3890:    },",
          "3891:    want: listeners(",
          "3892:     &Listener{",
          "3893:      Port: 80,",
          "3894:      VirtualHosts: virtualhosts(",
          "3895:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3896:      ),",
          "3897:     },",
          "3898:    ),",
          "3899:   },",
          "3900:   \"ingressv1: insert ingress with missing spec.rule.http key\": {",
          "3901:    objs: []interface{}{",
          "3902:     i2aV1,",
          "3903:    },",
          "3904:    want: listeners(),",
          "3905:   },",
          "3906:   \"ingressv1: insert ingress w/ host name and single backend w/o matching service\": {",
          "3907:    objs: []interface{}{",
          "3908:     i3V1,",
          "3909:    },",
          "3910:    want: listeners(),",
          "3911:   },",
          "3912:   \"ingressv1: insert ingress w/ host name and single backend\": {",
          "3913:    objs: []interface{}{",
          "3914:     i3V1,",
          "3915:     s1,",
          "3916:    },",
          "3917:    want: listeners(",
          "3918:     &Listener{",
          "3919:      Port: 80,",
          "3920:      VirtualHosts: virtualhosts(",
          "3921:       virtualhost(\"kuard.example.com\", prefixroute(\"/\", service(s1))),",
          "3922:      ),",
          "3923:     },",
          "3924:    ),",
          "3925:   },",
          "3926:   \"ingressv1: insert non matching service then ingress w/ default backend\": {",
          "3927:    objs: []interface{}{",
          "3928:     s2,",
          "3929:     i1V1,",
          "3930:    },",
          "3931:    want: listeners(),",
          "3932:   },",
          "3933:   \"ingressv1: insert ingress w/ default backend then matching service with wrong port\": {",
          "3934:    objs: []interface{}{",
          "3935:     i1V1,",
          "3936:     s3,",
          "3937:    },",
          "3938:    want: listeners(),",
          "3939:   },",
          "3940:   \"ingressv1: insert unnamed ingress w/ single backend then matching service with wrong port\": {",
          "3941:    objs: []interface{}{",
          "3942:     i2V1,",
          "3943:     s3,",
          "3944:    },",
          "3945:    want: listeners(),",
          "3946:   },",
          "3947:   \"ingressv1: insert ingress w/ default backend then matching service w/ named port\": {",
          "3948:    objs: []interface{}{",
          "3949:     i4V1,",
          "3950:     s1,",
          "3951:    },",
          "3952:    want: listeners(",
          "3953:     &Listener{",
          "3954:      Port: 80,",
          "3955:      VirtualHosts: virtualhosts(",
          "3956:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3957:      ),",
          "3958:     },",
          "3959:    ),",
          "3960:   },",
          "3961:   \"ingressv1: insert service w/ named port then ingress w/ default backend\": {",
          "3962:    objs: []interface{}{",
          "3963:     s1,",
          "3964:     i4V1,",
          "3965:    },",
          "3966:    want: listeners(",
          "3967:     &Listener{",
          "3968:      Port: 80,",
          "3969:      VirtualHosts: virtualhosts(",
          "3970:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3971:      ),",
          "3972:     },",
          "3973:    ),",
          "3974:   },",
          "3975:   \"ingressv1: insert ingress w/ single unnamed backend w/ named service port then service\": {",
          "3976:    objs: []interface{}{",
          "3977:     i5V1,",
          "3978:     s1,",
          "3979:    },",
          "3980:    want: listeners(",
          "3981:     &Listener{",
          "3982:      Port: 80,",
          "3983:      VirtualHosts: virtualhosts(",
          "3984:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3985:      ),",
          "3986:     },",
          "3987:    ),",
          "3988:   },",
          "3989:   \"ingressv1: insert service then ingress w/ single unnamed backend w/ named service port\": {",
          "3990:    objs: []interface{}{",
          "3991:     s1,",
          "3992:     i5V1,",
          "3993:    },",
          "3994:    want: listeners(",
          "3995:     &Listener{",
          "3996:      Port: 80,",
          "3997:      VirtualHosts: virtualhosts(",
          "3998:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3999:      ),",
          "4000:     },",
          "4001:    ),",
          "4002:   },",
          "4003:   \"insert secret\": {",
          "4004:    objs: []interface{}{",
          "4005:     sec1,",
          "4006:    },",
          "4007:    want: listeners(),",
          "4008:   },",
          "4009:   \"insert secret then ingress w/o tls\": {",
          "4010:    objs: []interface{}{",
          "4011:     sec1,",
          "4012:     i1,",
          "4013:    },",
          "4014:    want: listeners(),",
          "4015:   },",
          "4016:   \"insert service, secret then ingress w/o tls\": {",
          "4017:    objs: []interface{}{",
          "4018:     s1,",
          "4019:     sec1,",
          "4020:     i1,",
          "4021:    },",
          "4022:    want: listeners(",
          "4023:     &Listener{",
          "4024:      Port: 80,",
          "4025:      VirtualHosts: virtualhosts(",
          "4026:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "4027:      ),",
          "4028:     },",
          "4029:    ),",
          "4031:   \"insert secret then ingress w/ tls\": {",
          "4032:    objs: []interface{}{",
          "4033:     sec1,",
          "4034:     i3,",
          "4036:    want: listeners(),",
          "4038:   \"insert service, secret then ingress w/ tls\": {",
          "4039:    objs: []interface{}{",
          "4040:     s1,",
          "4041:     sec1,",
          "4042:     i3,",
          "4043:    },",
          "4044:    want: listeners(",
          "4045:     &Listener{",
          "4046:      Port: 80,",
          "4047:      VirtualHosts: virtualhosts(",
          "4048:       virtualhost(\"kuard.example.com\", prefixroute(\"/\", service(s1))),",
          "4049:      ),",
          "4050:     },",
          "4051:     &Listener{",
          "4052:      Port: 443,",
          "4053:      VirtualHosts: virtualhosts(",
          "4054:       securevirtualhost(\"kuard.example.com\", sec1, prefixroute(\"/\", service(s1))),",
          "4055:      ),",
          "4056:     },",
          "4057:    ),",
          "4059:   \"insert service w/ secret with w/ blank ca.crt\": {",
          "4060:    objs: []interface{}{",
          "4061:     s1,",
          "4062:     sec3, // issue 1644",
          "4063:     i3,",
          "4065:    want: listeners(",
          "4066:     &Listener{",
          "4068:      VirtualHosts: virtualhosts(",
          "4069:       virtualhost(\"kuard.example.com\", prefixroute(\"/\", service(s1))),",
          "4070:      ),",
          "4071:     },",
          "4072:     &Listener{",
          "4073:      Port: 443,",
          "4074:      VirtualHosts: virtualhosts(",
          "4075:       securevirtualhost(\"kuard.example.com\", sec3, prefixroute(\"/\", service(s1))),",
          "4076:      ),",
          "4077:     },",
          "4078:    ),",
          "4080:   \"insert invalid secret then ingress w/o tls\": {",
          "4082:     sec2,",
          "4087:   \"insert service, invalid secret then ingress w/o tls\": {",
          "4090:     sec2,",
          "4091:     i1,",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3090:     },",
          "3091:    ),",
          "3092:   },",
          "3094:    objs: []interface{}{",
          "3096:    },",
          "3097:    want: listeners(),",
          "3098:   },",
          "3100:    objs: []interface{}{",
          "3102:     s1,",
          "3103:    },",
          "3104:    want: listeners(",
          "3105:     &Listener{",
          "3106:      Port: 80,",
          "3107:      VirtualHosts: virtualhosts(",
          "3109:      ),",
          "3110:     },",
          "3111:    ),",
          "3112:   },",
          "3114:    objs: []interface{}{",
          "3116:    },",
          "3118:   },",
          "3120:    objs: []interface{}{",
          "3122:    },",
          "3124:   },",
          "3126:    objs: []interface{}{",
          "3128:     s1,",
          "3129:    },",
          "3130:    want: listeners(",
          "3131:     &Listener{",
          "3132:      Port: 80,",
          "3133:      VirtualHosts: virtualhosts(",
          "3135:      ),",
          "3136:     },",
          "3137:    ),",
          "3138:   },",
          "3140:    objs: []interface{}{",
          "3141:     s2,",
          "3143:    },",
          "3145:   },",
          "3147:    objs: []interface{}{",
          "3150:    },",
          "3152:   },",
          "3154:    objs: []interface{}{",
          "3157:    },",
          "3159:   },",
          "3161:    objs: []interface{}{",
          "3164:    },",
          "3165:    want: listeners(",
          "3166:     &Listener{",
          "3168:      VirtualHosts: virtualhosts(",
          "3170:      ),",
          "3171:     },",
          "3172:    ),",
          "3173:   },",
          "3175:    objs: []interface{}{",
          "3178:    },",
          "3179:    want: listeners(",
          "3180:     &Listener{",
          "3181:      Port: 80,",
          "3182:      VirtualHosts: virtualhosts(",
          "3184:      ),",
          "3196:      VirtualHosts: virtualhosts(",
          "3198:      ),",
          "3199:     },",
          "3200:    ),",
          "3201:   },",
          "3203:    objs: []interface{}{",
          "3206:    },",
          "3207:    want: listeners(",
          "3208:     &Listener{",
          "3209:      Port: 80,",
          "3210:      VirtualHosts: virtualhosts(",
          "3212:      ),",
          "3213:     },",
          "3214:    ),",
          "3215:   },",
          "3223:    objs: []interface{}{",
          "3224:     sec1,",
          "3226:    },",
          "3227:    want: listeners(),",
          "3228:   },",
          "3230:    objs: []interface{}{",
          "3231:     s1,",
          "3232:     sec1,",
          "3234:    },",
          "3235:    want: listeners(",
          "3236:     &Listener{",
          "",
          "[Removed Lines]",
          "3093:   \"insert ingress w/ single unnamed backend w/o matching service\": {",
          "3095:     i2,",
          "3099:   \"insert ingress w/ single unnamed backend\": {",
          "3101:     i2,",
          "3108:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3113:   \"insert ingress with missing spec.rule.http key\": {",
          "3115:     i2a,",
          "3117:    want: listeners(),",
          "3119:   \"insert ingress w/ host name and single backend w/o matching service\": {",
          "3121:     i3,",
          "3123:    want: listeners(),",
          "3125:   \"insert ingress w/ host name and single backend\": {",
          "3127:     i3,",
          "3134:       virtualhost(\"kuard.example.com\", prefixroute(\"/\", service(s1))),",
          "3139:   \"insert non matching service then ingress w/ default backend\": {",
          "3142:     i1,",
          "3144:    want: listeners(),",
          "3146:   \"insert ingress w/ default backend then matching service with wrong port\": {",
          "3148:     i1,",
          "3149:     s3,",
          "3151:    want: listeners(),",
          "3153:   \"insert unnamed ingress w/ single backend then matching service with wrong port\": {",
          "3155:     i2,",
          "3156:     s3,",
          "3158:    want: listeners(),",
          "3160:   \"insert ingress w/ default backend then matching service w/ named port\": {",
          "3162:     i4,",
          "3163:     s1,",
          "3167:      Port: 80,",
          "3169:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3174:   \"insert service w/ named port then ingress w/ default backend\": {",
          "3176:     s1,",
          "3177:     i4,",
          "3183:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3185:     },",
          "3186:    ),",
          "3187:   },",
          "3188:   \"insert ingress w/ single unnamed backend w/ named service port then service\": {",
          "3189:    objs: []interface{}{",
          "3190:     i5,",
          "3191:     s1,",
          "3192:    },",
          "3193:    want: listeners(",
          "3194:     &Listener{",
          "3195:      Port: 80,",
          "3197:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3202:   \"insert service then ingress w/ single unnamed backend w/ named service port\": {",
          "3204:     s1,",
          "3205:     i5,",
          "3211:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "3216:   \"insert secret\": {",
          "3217:    objs: []interface{}{",
          "3218:     sec1,",
          "3219:    },",
          "3220:    want: listeners(),",
          "3221:   },",
          "3222:   \"insert secret then ingress w/o tls\": {",
          "3225:     i1,",
          "3229:   \"insert service, secret then ingress w/o tls\": {",
          "3233:     i1,",
          "",
          "[Added Lines]",
          "4102:   \"insert invalid secret then ingress w/ tls\": {",
          "4104:     sec2,",
          "4105:     i3,",
          "4109:   \"insert service, invalid secret then ingress w/ tls\": {",
          "4112:     sec2,",
          "4113:     i3,",
          "4119:       virtualhost(\"kuard.example.com\", prefixroute(\"/\", service(s1))),",
          "4124:   \"insert ingress w/ two vhosts\": {",
          "4126:     i6,",
          "4128:    want: nil, // no matching service",
          "4130:   \"insert ingress w/ two vhosts then matching service\": {",
          "4132:     i6,",
          "4133:     s1,",
          "4135:    want: listeners(",
          "4136:     &Listener{",
          "4137:      Port: 80,",
          "4138:      VirtualHosts: virtualhosts(",
          "4139:       virtualhost(\"a.example.com\", prefixroute(\"/\", service(s1))),",
          "4140:       virtualhost(\"b.example.com\", prefixroute(\"/\", service(s1))),",
          "4141:      ),",
          "4142:     },",
          "4143:    ),",
          "4145:   \"insert service then ingress w/ two vhosts\": {",
          "4148:     i6,",
          "4154:       virtualhost(\"a.example.com\", prefixroute(\"/\", service(s1))),",
          "4155:       virtualhost(\"b.example.com\", prefixroute(\"/\", service(s1))),",
          "4160:   \"insert ingress w/ two vhosts then service then secret\": {",
          "4161:    objs: []interface{}{",
          "4162:     i6,",
          "4163:     s1,",
          "4164:     sec1,",
          "4165:    },",
          "4166:    want: listeners(",
          "4167:     &Listener{",
          "4168:      Port: 80,",
          "4169:      VirtualHosts: virtualhosts(",
          "4170:       virtualhost(\"a.example.com\", prefixroute(\"/\", service(s1))),",
          "4171:       virtualhost(\"b.example.com\", prefixroute(\"/\", service(s1))),",
          "4172:      ),",
          "4173:     }, &Listener{",
          "4174:      Port: 443,",
          "4175:      VirtualHosts: virtualhosts(",
          "4176:       securevirtualhost(\"b.example.com\", sec1, prefixroute(\"/\", service(s1))),",
          "4177:      ),",
          "4178:     },",
          "4179:    ),",
          "4180:   },",
          "4181:   \"insert service then secret then ingress w/ two vhosts\": {",
          "4182:    objs: []interface{}{",
          "4183:     s1,",
          "4184:     sec1,",
          "4185:     i6,",
          "4186:    },",
          "4187:    want: listeners(",
          "4188:     &Listener{",
          "4189:      Port: 80,",
          "4190:      VirtualHosts: virtualhosts(",
          "4191:       virtualhost(\"a.example.com\", prefixroute(\"/\", service(s1))),",
          "4192:       virtualhost(\"b.example.com\", prefixroute(\"/\", service(s1))),",
          "4193:      ),",
          "4194:     }, &Listener{",
          "4195:      Port: 443,",
          "4196:      VirtualHosts: virtualhosts(",
          "4197:       securevirtualhost(\"b.example.com\", sec1, prefixroute(\"/\", service(s1))),",
          "4198:      ),",
          "4199:     },",
          "4200:    ),",
          "4201:   },",
          "4202:   \"insert ingress w/ two paths then one service\": {",
          "4203:    objs: []interface{}{",
          "4204:     i7,",
          "4205:     s1,",
          "4206:    },",
          "4207:    want: listeners(",
          "4208:     &Listener{",
          "4209:      Port: 80,",
          "4210:      VirtualHosts: virtualhosts(",
          "4211:       virtualhost(\"b.example.com\",",
          "4212:        prefixroute(\"/\", service(s1)),",
          "4213:       ),",
          "4214:      ),",
          "4215:     },",
          "4216:    ),",
          "4217:   },",
          "4218:   \"insert ingress w/ two paths then services\": {",
          "4220:     i7,",
          "4222:     s1,",
          "4224:    want: listeners(",
          "4225:     &Listener{",
          "4226:      Port: 80,",
          "4227:      VirtualHosts: virtualhosts(",
          "4228:       virtualhost(\"b.example.com\",",
          "4229:        prefixroute(\"/\", service(s1)),",
          "4230:        prefixroute(\"/kuarder\", service(s2)),",
          "4231:       ),",
          "4232:      ),",
          "4233:     },",
          "4234:    ),",
          "4236:   \"insert two services then ingress w/ two ingress rules\": {",
          "4238:     s1, s2, i8,",
          "4239:    },",
          "4240:    want: listeners(",
          "4241:     &Listener{",
          "4242:      Port: 80,",
          "4243:      VirtualHosts: virtualhosts(",
          "4244:       virtualhost(\"b.example.com\",",
          "4245:        prefixroute(\"/\", service(s1)),",
          "4246:        prefixroute(\"/kuarder\", service(s2)),",
          "4247:       ),",
          "4248:      ),",
          "4249:     },",
          "4250:    ),",
          "4251:   },",
          "4252:   \"insert ingress w/ two paths httpAllowed: false\": {",
          "4253:    objs: []interface{}{",
          "4254:     i9,",
          "4255:    },",
          "4256:    want: []Vertex{},",
          "4257:   },",
          "4258:   \"insert ingress w/ two paths httpAllowed: false then tls and service\": {",
          "4259:    objs: []interface{}{",
          "4260:     i9,",
          "4261:     sec1,",
          "4262:     s1, s2,",
          "4263:    },",
          "4264:    want: listeners(",
          "4265:     &Listener{",
          "4266:      Port: 443,",
          "4267:      VirtualHosts: virtualhosts(",
          "4268:       securevirtualhost(\"b.example.com\", sec1,",
          "4269:        prefixroute(\"/\", service(s1)),",
          "4270:        prefixroute(\"/kuarder\", service(s2)),",
          "4271:       ),",
          "4272:      ),",
          "4273:     },",
          "4274:    ),",
          "4275:   },",
          "4276:   \"insert default ingress httpAllowed: false\": {",
          "4277:    objs: []interface{}{",
          "4278:     i1a,",
          "4279:    },",
          "4280:    want: []Vertex{},",
          "4281:   },",
          "4282:   \"insert default ingress httpAllowed: false then tls and service\": {",
          "4283:    objs: []interface{}{",
          "4284:     i1a, sec1, s1,",
          "4286:    want: []Vertex{}, // default ingress cannot be tls",
          "4288:   \"insert ingress w/ two vhosts httpAllowed: false\": {",
          "4290:     i6a,",
          "4292:    want: []Vertex{},",
          "4294:   \"insert ingress w/ two vhosts httpAllowed: false then tls and service\": {",
          "4296:     i6a, sec1, s1,",
          "4300:      Port: 443,",
          "4302:       securevirtualhost(\"b.example.com\", sec1, prefixroute(\"/\", service(s1))),",
          "4307:   \"insert ingress w/ force-ssl-redirect: true\": {",
          "4309:     i6b, sec1, s1,",
          "4315:       virtualhost(\"b.example.com\", routeUpgrade(\"/\", service(s1))),",
          "4317:     }, &Listener{",
          "4318:      Port: 443,",
          "4320:       securevirtualhost(\"b.example.com\", sec1, routeUpgrade(\"/\", service(s1))),",
          "4326:   \"insert ingress w/ force-ssl-redirect: true and allow-http: false\": {",
          "4328:     i6c, sec1, s1,",
          "4334:       virtualhost(\"b.example.com\", routeUpgrade(\"/\", service(s1))),",
          "4335:      ),",
          "4336:     }, &Listener{",
          "4337:      Port: 443,",
          "4338:      VirtualHosts: virtualhosts(",
          "4339:       securevirtualhost(\"b.example.com\", sec1, routeUpgrade(\"/\", service(s1))),",
          "4344:   \"ingressv1: insert secret then ingress w/o tls\": {",
          "4347:     i1V1,",
          "4351:   \"ingressv1: insert service, secret then ingress w/o tls\": {",
          "4355:     i1V1,",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3241:     },",
          "3242:    ),",
          "3243:   },",
          "3245:    objs: []interface{}{",
          "3246:     sec1,",
          "3248:    },",
          "3249:    want: listeners(),",
          "3250:   },",
          "3252:    objs: []interface{}{",
          "3253:     s1,",
          "3254:     sec1,",
          "3256:    },",
          "3257:    want: listeners(",
          "3258:     &Listener{",
          "",
          "[Removed Lines]",
          "3244:   \"insert secret then ingress w/ tls\": {",
          "3247:     i3,",
          "3251:   \"insert service, secret then ingress w/ tls\": {",
          "3255:     i3,",
          "",
          "[Added Lines]",
          "4366:   \"ingressv1: insert secret then ingress w/ tls\": {",
          "4369:     i3V1,",
          "4373:   \"ingressv1: insert service, secret then ingress w/ tls\": {",
          "4377:     i3V1,",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3269:     },",
          "3270:    ),",
          "3271:   },",
          "3273:    objs: []interface{}{",
          "3274:     s1,",
          "3275:     sec3, // issue 1644",
          "3277:    },",
          "3278:    want: listeners(",
          "3279:     &Listener{",
          "",
          "[Removed Lines]",
          "3272:   \"insert service w/ secret with w/ blank ca.crt\": {",
          "3276:     i3,",
          "",
          "[Added Lines]",
          "4394:   \"ingressv1: insert service w/ secret with w/ blank ca.crt\": {",
          "4398:     i3V1,",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3290:     },",
          "3291:    ),",
          "3292:   },",
          "3294:    objs: []interface{}{",
          "3295:     sec2,",
          "3297:    },",
          "3298:    want: listeners(),",
          "3299:   },",
          "3301:    objs: []interface{}{",
          "3302:     s1,",
          "3303:     sec2,",
          "3305:    },",
          "3306:    want: listeners(",
          "3307:     &Listener{",
          "",
          "[Removed Lines]",
          "3293:   \"insert invalid secret then ingress w/o tls\": {",
          "3296:     i1,",
          "3300:   \"insert service, invalid secret then ingress w/o tls\": {",
          "3304:     i1,",
          "",
          "[Added Lines]",
          "4415:   \"ingressv1: insert invalid secret then ingress w/o tls\": {",
          "4418:     i1V1,",
          "4422:   \"ingressv1: insert service, invalid secret then ingress w/o tls\": {",
          "4426:     i1V1,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3312:     },",
          "3313:    ),",
          "3314:   },",
          "3316:    objs: []interface{}{",
          "3317:     sec2,",
          "3319:    },",
          "3320:    want: listeners(),",
          "3321:   },",
          "3323:    objs: []interface{}{",
          "3324:     s1,",
          "3325:     sec2,",
          "3327:    },",
          "3328:    want: listeners(",
          "3329:     &Listener{",
          "",
          "[Removed Lines]",
          "3315:   \"insert invalid secret then ingress w/ tls\": {",
          "3318:     i3,",
          "3322:   \"insert service, invalid secret then ingress w/ tls\": {",
          "3326:     i3,",
          "",
          "[Added Lines]",
          "4437:   \"ingressv1: insert invalid secret then ingress w/ tls\": {",
          "4440:     i3V1,",
          "4444:   \"ingressv1: insert service, invalid secret then ingress w/ tls\": {",
          "4448:     i3V1,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3334:     },",
          "3335:    ),",
          "3336:   },",
          "3338:    objs: []interface{}{",
          "3340:    },",
          "3341:    want: nil, // no matching service",
          "3342:   },",
          "3344:    objs: []interface{}{",
          "3346:     s1,",
          "3347:    },",
          "3348:    want: listeners(",
          "",
          "[Removed Lines]",
          "3337:   \"insert ingress w/ two vhosts\": {",
          "3339:     i6,",
          "3343:   \"insert ingress w/ two vhosts then matching service\": {",
          "3345:     i6,",
          "",
          "[Added Lines]",
          "4459:   \"ingressv1: insert ingress w/ two vhosts\": {",
          "4461:     i6V1,",
          "4465:   \"ingressv1: insert ingress w/ two vhosts then matching service\": {",
          "4467:     i6V1,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3355:     },",
          "3356:    ),",
          "3357:   },",
          "3359:    objs: []interface{}{",
          "3360:     s1,",
          "3362:    },",
          "3363:    want: listeners(",
          "3364:     &Listener{",
          "",
          "[Removed Lines]",
          "3358:   \"insert service then ingress w/ two vhosts\": {",
          "3361:     i6,",
          "",
          "[Added Lines]",
          "4480:   \"ingressv1: insert service then ingress w/ two vhosts\": {",
          "4483:     i6V1,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3370:     },",
          "3371:    ),",
          "3372:   },",
          "3374:    objs: []interface{}{",
          "3376:     s1,",
          "3377:     sec1,",
          "3378:    },",
          "",
          "[Removed Lines]",
          "3373:   \"insert ingress w/ two vhosts then service then secret\": {",
          "3375:     i6,",
          "",
          "[Added Lines]",
          "4495:   \"ingressv1: insert ingress w/ two vhosts then service then secret\": {",
          "4497:     i6V1,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3391:     },",
          "3392:    ),",
          "3393:   },",
          "3395:    objs: []interface{}{",
          "3396:     s1,",
          "3397:     sec1,",
          "3399:    },",
          "3400:    want: listeners(",
          "3401:     &Listener{",
          "",
          "[Removed Lines]",
          "3394:   \"insert service then secret then ingress w/ two vhosts\": {",
          "3398:     i6,",
          "",
          "[Added Lines]",
          "4516:   \"ingressv1: insert service then secret then ingress w/ two vhosts\": {",
          "4520:     i6V1,",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3412:     },",
          "3413:    ),",
          "3414:   },",
          "3416:    objs: []interface{}{",
          "3418:     s1,",
          "3419:    },",
          "3420:    want: listeners(",
          "",
          "[Removed Lines]",
          "3415:   \"insert ingress w/ two paths then one service\": {",
          "3417:     i7,",
          "",
          "[Added Lines]",
          "4537:   \"ingressv1: insert ingress w/ two paths then one service\": {",
          "4539:     i7V1,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3428:     },",
          "3429:    ),",
          "3430:   },",
          "3432:    objs: []interface{}{",
          "3434:     s2,",
          "3435:     s1,",
          "3436:    },",
          "",
          "[Removed Lines]",
          "3431:   \"insert ingress w/ two paths then services\": {",
          "3433:     i7,",
          "",
          "[Added Lines]",
          "4553:   \"ingressv1: insert ingress w/ two paths then services\": {",
          "4555:     i7V1,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3446:     },",
          "3447:    ),",
          "3448:   },",
          "3450:    objs: []interface{}{",
          "3452:    },",
          "3453:    want: listeners(",
          "3454:     &Listener{",
          "",
          "[Removed Lines]",
          "3449:   \"insert two services then ingress w/ two ingress rules\": {",
          "3451:     s1, s2, i8,",
          "",
          "[Added Lines]",
          "4571:   \"ingressv1: insert two services then ingress w/ two ingress rules\": {",
          "4573:     s1, s2, i8V1,",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3462:     },",
          "3463:    ),",
          "3464:   },",
          "3466:    objs: []interface{}{",
          "3468:    },",
          "3469:    want: []Vertex{},",
          "3470:   },",
          "3472:    objs: []interface{}{",
          "3474:     sec1,",
          "3475:     s1, s2,",
          "3476:    },",
          "",
          "[Removed Lines]",
          "3465:   \"insert ingress w/ two paths httpAllowed: false\": {",
          "3467:     i9,",
          "3471:   \"insert ingress w/ two paths httpAllowed: false then tls and service\": {",
          "3473:     i9,",
          "",
          "[Added Lines]",
          "4587:   \"ingressv1: insert ingress w/ two paths httpAllowed: false\": {",
          "4589:     i9V1,",
          "4593:   \"ingressv1: insert ingress w/ two paths httpAllowed: false then tls and service\": {",
          "4595:     i9V1,",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3486:     },",
          "3487:    ),",
          "3488:   },",
          "3490:    objs: []interface{}{",
          "3492:    },",
          "3493:    want: []Vertex{},",
          "3494:   },",
          "3496:    objs: []interface{}{",
          "3498:    },",
          "3499:    want: []Vertex{}, // default ingress cannot be tls",
          "3500:   },",
          "3502:    objs: []interface{}{",
          "3504:    },",
          "3505:    want: []Vertex{},",
          "3506:   },",
          "3508:    objs: []interface{}{",
          "3510:    },",
          "3511:    want: listeners(",
          "3512:     &Listener{",
          "",
          "[Removed Lines]",
          "3489:   \"insert default ingress httpAllowed: false\": {",
          "3491:     i1a,",
          "3495:   \"insert default ingress httpAllowed: false then tls and service\": {",
          "3497:     i1a, sec1, s1,",
          "3501:   \"insert ingress w/ two vhosts httpAllowed: false\": {",
          "3503:     i6a,",
          "3507:   \"insert ingress w/ two vhosts httpAllowed: false then tls and service\": {",
          "3509:     i6a, sec1, s1,",
          "",
          "[Added Lines]",
          "4611:   \"ingressv1: insert default ingress httpAllowed: false\": {",
          "4613:     i1aV1,",
          "4617:   \"ingressv1: insert default ingress httpAllowed: false then tls and service\": {",
          "4619:     i1aV1, sec1, s1,",
          "4623:   \"ingressv1: insert ingress w/ two vhosts httpAllowed: false\": {",
          "4625:     i6aV1,",
          "4629:   \"ingressv1: insert ingress w/ two vhosts httpAllowed: false then tls and service\": {",
          "4631:     i6aV1, sec1, s1,",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3517:     },",
          "3518:    ),",
          "3519:   },",
          "3521:    objs: []interface{}{",
          "3523:    },",
          "3524:    want: listeners(",
          "3525:     &Listener{",
          "",
          "[Removed Lines]",
          "3520:   \"insert ingress w/ force-ssl-redirect: true\": {",
          "3522:     i6b, sec1, s1,",
          "",
          "[Added Lines]",
          "4642:   \"ingressv1: insert ingress w/ force-ssl-redirect: true\": {",
          "4644:     i6bV1, sec1, s1,",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3536:    ),",
          "3537:   },",
          "3540:    objs: []interface{}{",
          "3542:    },",
          "3543:    want: listeners(",
          "3544:     &Listener{",
          "",
          "[Removed Lines]",
          "3539:   \"insert ingress w/ force-ssl-redirect: true and allow-http: false\": {",
          "3541:     i6c, sec1, s1,",
          "",
          "[Added Lines]",
          "4661:   \"ingressv1: insert ingress w/ force-ssl-redirect: true and allow-http: false\": {",
          "4663:     i6cV1, sec1, s1,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3691:     },",
          "3692:    ),",
          "3693:   },",
          "3695:    objs: []interface{}{",
          "3697:     s1,",
          "3698:    },",
          "3699:    want: listeners(",
          "",
          "[Removed Lines]",
          "3694:   \"insert ingress w/ invalid legacy timeout annotation\": {",
          "3696:     i12a,",
          "",
          "[Added Lines]",
          "4816:   \"insert ingress w/ invalid legacy timeout annotation\": {",
          "4817:    objs: []interface{}{",
          "4818:     i12a,",
          "4819:     s1,",
          "4820:    },",
          "4821:    want: listeners(",
          "4822:     &Listener{",
          "4823:      Port: 80,",
          "4824:      VirtualHosts: virtualhosts(",
          "4825:       virtualhost(\"*\", &Route{",
          "4826:        PathMatchCondition: prefix(\"/\"),",
          "4827:        Clusters:           clustermap(s1),",
          "4828:       }),",
          "4829:      ),",
          "4830:     },",
          "4831:    ),",
          "4832:   },",
          "4833:   \"insert ingress w/ invalid timeout annotation\": {",
          "4834:    objs: []interface{}{",
          "4835:     i12d,",
          "4836:     s1,",
          "4837:    },",
          "4838:    want: listeners(",
          "4839:     &Listener{",
          "4840:      Port: 80,",
          "4841:      VirtualHosts: virtualhosts(",
          "4842:       virtualhost(\"*\", &Route{",
          "4843:        PathMatchCondition: prefix(\"/\"),",
          "4844:        Clusters:           clustermap(s1),",
          "4845:       }),",
          "4846:      ),",
          "4847:     },",
          "4848:    ),",
          "4849:   },",
          "4850:   \"ingressv1: insert ingress w/ tls min proto annotation\": {",
          "4851:    objs: []interface{}{",
          "4852:     i10aV1,",
          "4853:     sec1,",
          "4854:     s1,",
          "4855:    },",
          "4856:    want: listeners(",
          "4857:     &Listener{",
          "4858:      Port: 80,",
          "4859:      VirtualHosts: virtualhosts(",
          "4860:       virtualhost(\"b.example.com\", prefixroute(\"/\", service(s1))),",
          "4861:      ),",
          "4862:     }, &Listener{",
          "4863:      Port: 443,",
          "4864:      VirtualHosts: virtualhosts(",
          "4865:       &SecureVirtualHost{",
          "4866:        VirtualHost: VirtualHost{",
          "4867:         Name: \"b.example.com\",",
          "4868:         routes: routes(",
          "4869:          prefixroute(\"/\", service(s1)),",
          "4870:         ),",
          "4871:        },",
          "4872:        MinTLSVersion: \"1.3\",",
          "4873:        Secret:        secret(sec1),",
          "4874:       },",
          "4875:      ),",
          "4876:     },",
          "4877:    ),",
          "4878:   },",
          "4879:   \"ingressv1: insert ingress w/ websocket route annotation\": {",
          "4880:    objs: []interface{}{",
          "4881:     i11V1,",
          "4882:     s1,",
          "4883:    },",
          "4884:    want: listeners(",
          "4885:     &Listener{",
          "4886:      Port: 80,",
          "4887:      VirtualHosts: virtualhosts(",
          "4888:       virtualhost(\"*\",",
          "4889:        prefixroute(\"/\", service(s1)),",
          "4890:        routeWebsocket(\"/ws1\", service(s1)),",
          "4891:       ),",
          "4892:      ),",
          "4893:     },",
          "4894:    ),",
          "4895:   },",
          "4896:   \"ingressv1: insert ingress w/ invalid legacy timeout annotation\": {",
          "4897:    objs: []interface{}{",
          "4898:     i12aV1,",
          "4899:     s1,",
          "4900:    },",
          "4901:    want: listeners(",
          "4902:     &Listener{",
          "4903:      Port: 80,",
          "4904:      VirtualHosts: virtualhosts(",
          "4905:       virtualhost(\"*\", &Route{",
          "4906:        PathMatchCondition: prefix(\"/\"),",
          "4907:        Clusters:           clustermap(s1),",
          "4908:       }),",
          "4909:      ),",
          "4910:     },",
          "4911:    ),",
          "4912:   },",
          "4913:   \"ingressv1: insert ingress w/ invalid timeout annotation\": {",
          "4914:    objs: []interface{}{",
          "4915:     i12dV1,",
          "4916:     s1,",
          "4917:    },",
          "4918:    want: listeners(",
          "4919:     &Listener{",
          "4920:      Port: 80,",
          "4921:      VirtualHosts: virtualhosts(",
          "4922:       virtualhost(\"*\", &Route{",
          "4923:        PathMatchCondition: prefix(\"/\"),",
          "4924:        Clusters:           clustermap(s1),",
          "4925:       }),",
          "4926:      ),",
          "4927:     },",
          "4928:    ),",
          "4929:   },",
          "4930:   \"insert httpproxy w/ invalid timeoutpolicy\": {",
          "4931:    objs: []interface{}{",
          "4932:     proxyTimeoutPolicyInvalidResponse,",
          "4933:     s1,",
          "4934:    },",
          "4935:    want: listeners(),",
          "4936:   },",
          "4937:   \"insert ingress w/ valid legacy timeout annotation\": {",
          "4938:    objs: []interface{}{",
          "4939:     i12b,",
          "4940:     s1,",
          "4941:    },",
          "4942:    want: listeners(",
          "4943:     &Listener{",
          "4944:      Port: 80,",
          "4945:      VirtualHosts: virtualhosts(",
          "4946:       virtualhost(\"*\", &Route{",
          "4947:        PathMatchCondition: prefix(\"/\"),",
          "4948:        Clusters:           clustermap(s1),",
          "4949:        TimeoutPolicy: TimeoutPolicy{",
          "4950:         ResponseTimeout: timeout.DurationSetting(90 * time.Second),",
          "4951:        },",
          "4952:       }),",
          "4953:      ),",
          "4954:     },",
          "4955:    ),",
          "4956:   },",
          "4957:   \"insert ingress w/ valid timeout annotation\": {",
          "4958:    objs: []interface{}{",
          "4959:     i12e,",
          "4960:     s1,",
          "4961:    },",
          "4962:    want: listeners(",
          "4963:     &Listener{",
          "4964:      Port: 80,",
          "4965:      VirtualHosts: virtualhosts(",
          "4966:       virtualhost(\"*\", &Route{",
          "4967:        PathMatchCondition: prefix(\"/\"),",
          "4968:        Clusters:           clustermap(s1),",
          "4969:        TimeoutPolicy: TimeoutPolicy{",
          "4970:         ResponseTimeout: timeout.DurationSetting(90 * time.Second),",
          "4971:        },",
          "4972:       }),",
          "4973:      ),",
          "4974:     },",
          "4975:    ),",
          "4976:   },",
          "4977:   \"ingressv1: insert ingress w/ valid legacy timeout annotation\": {",
          "4979:     i12bV1,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3703:       virtualhost(\"*\", &Route{",
          "3704:        PathMatchCondition: prefix(\"/\"),",
          "3705:        Clusters:           clustermap(s1),",
          "3706:       }),",
          "3707:      ),",
          "3708:     },",
          "3709:    ),",
          "3710:   },",
          "3712:    objs: []interface{}{",
          "3714:     s1,",
          "3715:    },",
          "3716:    want: listeners(",
          "",
          "[Removed Lines]",
          "3711:   \"insert ingress w/ invalid timeout annotation\": {",
          "3713:     i12d,",
          "",
          "[Added Lines]",
          "4989:        TimeoutPolicy: TimeoutPolicy{",
          "4990:         ResponseTimeout: timeout.DurationSetting(90 * time.Second),",
          "4991:        },",
          "4997:   \"ingressv1: insert ingress w/ valid timeout annotation\": {",
          "4999:     i12eV1,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3720:       virtualhost(\"*\", &Route{",
          "3721:        PathMatchCondition: prefix(\"/\"),",
          "3722:        Clusters:           clustermap(s1),",
          "3723:       }),",
          "3724:      ),",
          "3725:     },",
          "3726:    ),",
          "3727:   },",
          "3737:    objs: []interface{}{",
          "3739:     s1,",
          "3740:    },",
          "3741:    want: listeners(",
          "3742:     &Listener{",
          "3743:      Port: 80,",
          "3744:      VirtualHosts: virtualhosts(",
          "3746:        PathMatchCondition: prefix(\"/\"),",
          "3747:        Clusters:           clustermap(s1),",
          "3748:        TimeoutPolicy: TimeoutPolicy{",
          "",
          "[Removed Lines]",
          "3729:   \"insert httpproxy w/ invalid timeoutpolicy\": {",
          "3730:    objs: []interface{}{",
          "3731:     proxyTimeoutPolicyInvalidResponse,",
          "3732:     s1,",
          "3733:    },",
          "3734:    want: listeners(),",
          "3735:   },",
          "3736:   \"insert ingress w/ valid legacy timeout annotation\": {",
          "3738:     i12b,",
          "3745:       virtualhost(\"*\", &Route{",
          "",
          "[Added Lines]",
          "5009:        TimeoutPolicy: TimeoutPolicy{",
          "5010:         ResponseTimeout: timeout.DurationSetting(90 * time.Second),",
          "5011:        },",
          "5017:   \"insert httpproxy w/ valid timeoutpolicy\": {",
          "5019:     proxyTimeoutPolicyValidResponse,",
          "5026:       virtualhost(\"bar.com\", &Route{",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3753:     },",
          "3754:    ),",
          "3755:   },",
          "3757:    objs: []interface{}{",
          "3759:     s1,",
          "3760:    },",
          "3761:    want: listeners(",
          "",
          "[Removed Lines]",
          "3756:   \"insert ingress w/ valid timeout annotation\": {",
          "3758:     i12e,",
          "",
          "[Added Lines]",
          "5037:   \"insert ingress w/ legacy infinite timeout annotation\": {",
          "5039:     i12c,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3766:        PathMatchCondition: prefix(\"/\"),",
          "3767:        Clusters:           clustermap(s1),",
          "3768:        TimeoutPolicy: TimeoutPolicy{",
          "3770:        },",
          "3771:       }),",
          "3772:      ),",
          "3773:     },",
          "3774:    ),",
          "3775:   },",
          "3778:    objs: []interface{}{",
          "3780:     s1,",
          "3781:    },",
          "3782:    want: listeners(",
          "3783:     &Listener{",
          "3784:      Port: 80,",
          "3785:      VirtualHosts: virtualhosts(",
          "3787:        PathMatchCondition: prefix(\"/\"),",
          "3788:        Clusters:           clustermap(s1),",
          "3789:        TimeoutPolicy: TimeoutPolicy{",
          "3791:        },",
          "3792:       }),",
          "3793:      ),",
          "3794:     },",
          "3795:    ),",
          "3796:   },",
          "3798:    objs: []interface{}{",
          "3800:     s1,",
          "3801:    },",
          "3802:    want: listeners(",
          "",
          "[Removed Lines]",
          "3769:         ResponseTimeout: timeout.DurationSetting(90 * time.Second),",
          "3777:   \"insert httpproxy w/ valid timeoutpolicy\": {",
          "3779:     proxyTimeoutPolicyValidResponse,",
          "3786:       virtualhost(\"bar.com\", &Route{",
          "3790:         ResponseTimeout: timeout.DurationSetting(90 * time.Second),",
          "3797:   \"insert ingress w/ legacy infinite timeout annotation\": {",
          "3799:     i12c,",
          "",
          "[Added Lines]",
          "5050:         ResponseTimeout: timeout.DisabledSetting(),",
          "5057:   \"insert ingress w/ infinite timeout annotation\": {",
          "5059:     i12f,",
          "5066:       virtualhost(\"*\", &Route{",
          "5070:         ResponseTimeout: timeout.DisabledSetting(),",
          "5077:   \"ingressv1: insert ingress w/ legacy infinite timeout annotation\": {",
          "5079:     i12cV1,",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3814:     },",
          "3815:    ),",
          "3816:   },",
          "3818:    objs: []interface{}{",
          "3820:     s1,",
          "3821:    },",
          "3822:    want: listeners(",
          "",
          "[Removed Lines]",
          "3817:   \"insert ingress w/ infinite timeout annotation\": {",
          "3819:     i12f,",
          "",
          "[Added Lines]",
          "5097:   \"ingressv1: insert ingress w/ infinite timeout annotation\": {",
          "5099:     i12fV1,",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "4109:     },",
          "4110:    ),",
          "4111:   },",
          "4112:   \"insert httpproxy with two routes to the same service\": {",
          "4113:    objs: []interface{}{",
          "4114:     proxyWeightsTwoRoutesDiffWeights, s1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:   \"ingressv1: insert ingress with timeout policy\": {",
          "5392:    objs: []interface{}{",
          "5393:     i14V1,",
          "5394:     s1,",
          "5395:    },",
          "5396:    want: listeners(",
          "5397:     &Listener{",
          "5398:      Port: 80,",
          "5399:      VirtualHosts: virtualhosts(",
          "5400:       virtualhost(\"*\", &Route{",
          "5401:        PathMatchCondition: prefix(\"/\"),",
          "5402:        Clusters:           clustermap(s1),",
          "5403:        RetryPolicy: &RetryPolicy{",
          "5404:         RetryOn:       \"gateway-error\",",
          "5405:         NumRetries:    6,",
          "5406:         PerTryTimeout: timeout.DurationSetting(10 * time.Second),",
          "5407:        },",
          "5408:       }),",
          "5409:      ),",
          "5410:     },",
          "5411:    ),",
          "5412:   },",
          "5413:   \"ingressv1: insert ingress with regex route\": {",
          "5414:    objs: []interface{}{",
          "5415:     i15V1,",
          "5416:     s1,",
          "5417:    },",
          "5418:    want: listeners(",
          "5419:     &Listener{",
          "5420:      Port: 80,",
          "5421:      VirtualHosts: virtualhosts(",
          "5422:       virtualhost(\"*\", &Route{",
          "5423:        PathMatchCondition: regex(\"/[^/]+/invoices(/.*|/?)\"),",
          "5424:        Clusters:           clustermap(s1),",
          "5425:       }),",
          "5426:      ),",
          "5427:     },",
          "5428:    ),",
          "5429:   },",
          "5430:   \"ingressv1: insert ingress with invalid regex route\": {",
          "5431:    objs: []interface{}{",
          "5432:     i15InvalidRegexV1,",
          "5433:     s1,",
          "5434:    },",
          "5435:    want: listeners(),",
          "5436:   },",
          "5438:   \"ingressv1: insert ingress with wildcard hostnames\": {",
          "5439:    objs: []interface{}{",
          "5440:     s1,",
          "5441:     i16V1,",
          "5442:    },",
          "5443:    want: listeners(",
          "5444:     &Listener{",
          "5445:      Port: 80,",
          "5446:      VirtualHosts: virtualhosts(",
          "5447:       virtualhost(\"*\", prefixroute(\"/\", service(s1))),",
          "5448:      ),",
          "5449:     },",
          "5450:    ),",
          "5451:   },",
          "5452:   \"ingressv1: insert ingress overlay\": {",
          "5453:    objs: []interface{}{",
          "5454:     i13aV1, i13bV1, sec13, s13a, s13b,",
          "5455:    },",
          "5456:    want: listeners(",
          "5457:     &Listener{",
          "5458:      Port: 80,",
          "5459:      VirtualHosts: virtualhosts(",
          "5460:       virtualhost(\"example.com\",",
          "5461:        routeUpgrade(\"/\", service(s13a)),",
          "5462:        prefixroute(\"/.well-known/acme-challenge/gVJl5NWL2owUqZekjHkt_bo3OHYC2XNDURRRgLI5JTk\", service(s13b)),",
          "5463:       ),",
          "5464:      ),",
          "5465:     }, &Listener{",
          "5466:      Port: 443,",
          "5467:      VirtualHosts: virtualhosts(",
          "5468:       securevirtualhost(\"example.com\", sec13,",
          "5469:        routeUpgrade(\"/\", service(s13a)),",
          "5470:        prefixroute(\"/.well-known/acme-challenge/gVJl5NWL2owUqZekjHkt_bo3OHYC2XNDURRRgLI5JTk\", service(s13b)),",
          "5471:       ),",
          "5472:      ),",
          "5473:     },",
          "5474:    ),",
          "5475:   },",
          "5476:   \"ingressv1: h2c service annotation\": {",
          "5477:    objs: []interface{}{",
          "5478:     i3aV1, s3a,",
          "5479:    },",
          "5480:    want: listeners(",
          "5481:     &Listener{",
          "5482:      Port: 80,",
          "5483:      VirtualHosts: virtualhosts(",
          "5484:       virtualhost(\"*\",",
          "5485:        prefixroute(\"/\", &Service{",
          "5486:         Protocol: \"h2c\",",
          "5487:         Weighted: WeightedService{",
          "5488:          Weight:           1,",
          "5489:          ServiceName:      s3a.Name,",
          "5490:          ServiceNamespace: s3a.Namespace,",
          "5491:          ServicePort:      s3a.Spec.Ports[0],",
          "5492:         },",
          "5493:        }),",
          "5494:       ),",
          "5495:      ),",
          "5496:     },",
          "5497:    ),",
          "5498:   },",
          "5499:   \"ingressv1: h2 service annotation\": {",
          "5500:    objs: []interface{}{",
          "5501:     i3aV1, s3b,",
          "5502:    },",
          "5503:    want: listeners(",
          "5504:     &Listener{",
          "5505:      Port: 80,",
          "5506:      VirtualHosts: virtualhosts(",
          "5507:       virtualhost(\"*\",",
          "5508:        prefixroute(\"/\", &Service{",
          "5509:         Protocol: \"h2\",",
          "5510:         Weighted: WeightedService{",
          "5511:          Weight:           1,",
          "5512:          ServiceName:      s3b.Name,",
          "5513:          ServiceNamespace: s3b.Namespace,",
          "5514:          ServicePort:      s3b.Spec.Ports[0],",
          "5515:         },",
          "5516:        }),",
          "5517:       ),",
          "5518:      ),",
          "5519:     },",
          "5520:    ),",
          "5521:   },",
          "5522:   \"ingressv1: tls service annotation\": {",
          "5523:    objs: []interface{}{",
          "5524:     i3aV1, s3c,",
          "5525:    },",
          "5526:    want: listeners(",
          "5527:     &Listener{",
          "5528:      Port: 80,",
          "5529:      VirtualHosts: virtualhosts(",
          "5530:       virtualhost(\"*\",",
          "5531:        prefixroute(\"/\", &Service{",
          "5532:         Protocol: \"tls\",",
          "5533:         Weighted: WeightedService{",
          "5534:          Weight:           1,",
          "5535:          ServiceName:      s3c.Name,",
          "5536:          ServiceNamespace: s3c.Namespace,",
          "5537:          ServicePort:      s3c.Spec.Ports[0],",
          "5538:         },",
          "5539:        }),",
          "5540:       ),",
          "5541:      ),",
          "5542:     },",
          "5543:    ),",
          "5544:   },",
          "5545:   \"ingressv1: insert ingress then service w/ upstream annotations\": {",
          "5546:    objs: []interface{}{",
          "5547:     i1V1,",
          "5548:     s1b,",
          "5549:    },",
          "5550:    want: listeners(",
          "5551:     &Listener{",
          "5552:      Port: 80,",
          "5553:      VirtualHosts: virtualhosts(",
          "5554:       virtualhost(\"*\",",
          "5555:        prefixroute(\"/\", &Service{",
          "5556:         Weighted: WeightedService{",
          "5557:          Weight:           1,",
          "5558:          ServiceName:      s1b.Name,",
          "5559:          ServiceNamespace: s1b.Namespace,",
          "5560:          ServicePort:      s1b.Spec.Ports[0],",
          "5561:         },",
          "5562:         MaxConnections:     9000,",
          "5563:         MaxPendingRequests: 4096,",
          "5564:         MaxRequests:        404,",
          "5565:         MaxRetries:         7,",
          "5566:        }),",
          "5567:       ),",
          "5568:      ),",
          "5569:     },",
          "5570:    ),",
          "5571:   },",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "5147:    objs: []interface{}{",
          "5148:     sec1,",
          "5149:     s9,",
          "5151:      ObjectMeta: metav1.ObjectMeta{",
          "5152:       Name:      \"nginx\",",
          "5153:       Namespace: \"default\",",
          "5154:      },",
          "5157:        Hosts:      []string{\"example.com\"},",
          "5158:        SecretName: s1.Name,",
          "5159:       }},",
          "5161:        Host:             \"example.com\",",
          "5163:       }},",
          "5164:      },",
          "5165:     },",
          "",
          "[Removed Lines]",
          "5150:     &v1beta1.Ingress{",
          "5155:      Spec: v1beta1.IngressSpec{",
          "5156:       TLS: []v1beta1.IngressTLS{{",
          "5160:       Rules: []v1beta1.IngressRule{{",
          "5162:        IngressRuleValue: ingressrulevalue(backend(s9.Name, intstr.FromInt(80))),",
          "",
          "[Added Lines]",
          "6610:     &networking_v1.Ingress{",
          "6615:      Spec: networking_v1.IngressSpec{",
          "6616:       TLS: []networking_v1.IngressTLS{{",
          "6620:       Rules: []networking_v1.IngressRule{{",
          "6622:        IngressRuleValue: ingressrulev1value(backendv1(s9.Name, intstr.FromInt(80))),",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "5338:     },",
          "5339:    ),",
          "5340:   },",
          "5341:   \"insert proxy with externalName service\": {",
          "5342:    objs: []interface{}{",
          "5343:     proxyExternalNameService,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6801:   \"ingressv1: Ingress then HTTPProxy with identical details, except referencing s2a\": {",
          "6802:    objs: []interface{}{",
          "6803:     i17V1,",
          "6804:     proxy1f,",
          "6805:     s1,",
          "6806:     s2a,",
          "6807:    },",
          "6808:    want: listeners(",
          "6809:     &Listener{",
          "6810:      Port: 80,",
          "6811:      VirtualHosts: virtualhosts(",
          "6812:       virtualhost(\"example.com\", prefixroute(\"/\", service(s2a))),",
          "6813:      ),",
          "6814:     },",
          "6815:    ),",
          "6816:   },",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "6115:  }",
          "6116: }",
          "6118: func ingressrulevalue(backend *v1beta1.IngressBackend) v1beta1.IngressRuleValue {",
          "6119:  return v1beta1.IngressRuleValue{",
          "6120:   HTTP: &v1beta1.HTTPIngressRuleValue{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7594: func backendv1(name string, port intstr.IntOrString) *networking_v1.IngressBackend {",
          "7596:  var v1port networking_v1.ServiceBackendPort",
          "7598:  switch port.Type {",
          "7599:  case intstr.Int:",
          "7600:   v1port = networking_v1.ServiceBackendPort{",
          "7601:    Number: port.IntVal,",
          "7602:   }",
          "7603:  case intstr.String:",
          "7604:   v1port = networking_v1.ServiceBackendPort{",
          "7605:    Name: port.StrVal,",
          "7606:   }",
          "7607:  }",
          "7609:  return &networking_v1.IngressBackend{",
          "7610:   Service: &networking_v1.IngressServiceBackend{",
          "7611:    Name: name,",
          "7612:    Port: v1port,",
          "7613:   },",
          "7614:  }",
          "7615: }",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "6125:  }",
          "6126: }",
          "6128: func TestDAGRootNamespaces(t *testing.T) {",
          "6129:  proxy1 := &contour_api_v1.HTTPProxy{",
          "6130:   ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7627: func ingressrulev1value(backend *networking_v1.IngressBackend) networking_v1.IngressRuleValue {",
          "7628:  return networking_v1.IngressRuleValue{",
          "7629:   HTTP: &networking_v1.HTTPIngressRuleValue{",
          "7630:    Paths: []networking_v1.HTTPIngressPath{{",
          "7631:     Backend: *backend,",
          "7632:    }},",
          "7633:   },",
          "7634:  }",
          "7635: }",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "6276: func TestHttpPaths(t *testing.T) {",
          "6277:  tests := map[string]struct {",
          "6280:  }{",
          "6281:   \"zero value\": {",
          "6283:    want: nil,",
          "6284:   },",
          "6285:   \"empty paths\": {",
          "6289:     },",
          "6290:    },",
          "6291:    want: nil,",
          "6292:   },",
          "6293:   \"several paths\": {",
          "6302:       }, {",
          "6308:       }},",
          "6309:      },",
          "6310:     },",
          "6311:    },",
          "6317:    }, {",
          "6322:    }},",
          "6323:   },",
          "6324:  }",
          "",
          "[Removed Lines]",
          "6278:   rule v1beta1.IngressRule",
          "6279:   want []v1beta1.HTTPIngressPath",
          "6282:    rule: v1beta1.IngressRule{},",
          "6286:    rule: v1beta1.IngressRule{",
          "6287:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "6288:      HTTP: &v1beta1.HTTPIngressRuleValue{},",
          "6294:    rule: v1beta1.IngressRule{",
          "6295:     IngressRuleValue: v1beta1.IngressRuleValue{",
          "6296:      HTTP: &v1beta1.HTTPIngressRuleValue{",
          "6297:       Paths: []v1beta1.HTTPIngressPath{{",
          "6298:        Backend: v1beta1.IngressBackend{",
          "6299:         ServiceName: \"kuard\",",
          "6300:         ServicePort: intstr.FromString(\"http\"),",
          "6301:        },",
          "6303:        Path: \"/kuarder\",",
          "6304:        Backend: v1beta1.IngressBackend{",
          "6305:         ServiceName: \"kuarder\",",
          "6306:         ServicePort: intstr.FromInt(8080),",
          "6307:        },",
          "6312:    want: []v1beta1.HTTPIngressPath{{",
          "6313:     Backend: v1beta1.IngressBackend{",
          "6314:      ServiceName: \"kuard\",",
          "6315:      ServicePort: intstr.FromString(\"http\"),",
          "6316:     },",
          "6318:     Path: \"/kuarder\",",
          "6319:     Backend: v1beta1.IngressBackend{ServiceName: \"kuarder\",",
          "6320:      ServicePort: intstr.FromInt(8080),",
          "6321:     },",
          "",
          "[Added Lines]",
          "7787:   rule networking_v1.IngressRule",
          "7788:   want []networking_v1.HTTPIngressPath",
          "7791:    rule: networking_v1.IngressRule{},",
          "7795:    rule: networking_v1.IngressRule{",
          "7796:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "7797:      HTTP: &networking_v1.HTTPIngressRuleValue{},",
          "7803:    rule: networking_v1.IngressRule{",
          "7804:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "7805:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "7806:       Paths: []networking_v1.HTTPIngressPath{{",
          "7807:        Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "7809:        Path:    \"/kuarder\",",
          "7810:        Backend: *backendv1(\"kuarder\", intstr.FromInt(8080)),",
          "7815:    want: []networking_v1.HTTPIngressPath{{",
          "7816:     Backend: *backendv1(\"kuard\", intstr.FromString(\"http\")),",
          "7818:     Path:    \"/kuarder\",",
          "7819:     Backend: *backendv1(\"kuarder\", intstr.FromInt(8080)),",
          "",
          "---------------"
        ],
        "internal/dag/cache.go||internal/dag/cache.go": [
          "File: internal/dag/cache.go -> internal/dag/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  \"github.com/projectcontour/contour/internal/k8s\"",
          "25:  \"github.com/sirupsen/logrus\"",
          "26:  v1 \"k8s.io/api/core/v1\"",
          "27:  \"k8s.io/api/networking/v1beta1\"",
          "28:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "29:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  ConfiguredSecretRefs []*types.NamespacedName",
          "51:  httpproxies          map[types.NamespacedName]*contour_api_v1.HTTPProxy",
          "52:  secrets              map[types.NamespacedName]*v1.Secret",
          "53:  httpproxydelegations map[types.NamespacedName]*contour_api_v1.TLSCertificateDelegation",
          "",
          "[Removed Lines]",
          "50:  ingresses            map[types.NamespacedName]*v1beta1.Ingress",
          "",
          "[Added Lines]",
          "51:  ingresses            map[types.NamespacedName]*networking_v1.Ingress",
          "52:  ingressclasses       map[string]*networking_v1.IngressClass",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: func (kc *KubernetesCache) init() {",
          "69:  kc.httpproxies = make(map[types.NamespacedName]*contour_api_v1.HTTPProxy)",
          "70:  kc.secrets = make(map[types.NamespacedName]*v1.Secret)",
          "71:  kc.httpproxydelegations = make(map[types.NamespacedName]*contour_api_v1.TLSCertificateDelegation)",
          "",
          "[Removed Lines]",
          "68:  kc.ingresses = make(map[types.NamespacedName]*v1beta1.Ingress)",
          "",
          "[Added Lines]",
          "70:  kc.ingresses = make(map[types.NamespacedName]*networking_v1.Ingress)",
          "71:  kc.ingressclasses = make(map[string]*networking_v1.IngressClass)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:   kc.services[k8s.NamespacedNameOf(obj)] = obj",
          "146:   return kc.serviceTriggersRebuild(obj)",
          "147:  case *v1beta1.Ingress:",
          "148:   if kc.matchesIngressClass(obj) {",
          "149:    kc.ingresses[k8s.NamespacedNameOf(obj)] = obj",
          "150:    return true",
          "151:   }",
          "152:  case *contour_api_v1.HTTPProxy:",
          "153:   if kc.matchesIngressClass(obj) {",
          "154:    kc.httpproxies[k8s.NamespacedNameOf(obj)] = obj",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   if kc.matchesIngressClass(obj) {",
          "154:    kc.ingresses[k8s.NamespacedNameOf(obj)] = toV1Ingress(obj)",
          "155:    return true",
          "156:   }",
          "157:  case *networking_v1.Ingress:",
          "162:  case *networking_v1.IngressClass:",
          "163:   kc.ingressclasses[obj.Name] = obj",
          "164:   return true",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:  return false",
          "199: }",
          "203: func (kc *KubernetesCache) Remove(obj interface{}) bool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: func toV1Ingress(obj *v1beta1.Ingress) *networking_v1.Ingress {",
          "216:  if obj == nil {",
          "217:   return nil",
          "218:  }",
          "220:  var convertedTLS []networking_v1.IngressTLS",
          "221:  var convertedIngressRules []networking_v1.IngressRule",
          "222:  var paths []networking_v1.HTTPIngressPath",
          "223:  var convertedDefaultBackend *networking_v1.IngressBackend",
          "225:  for _, tls := range obj.Spec.TLS {",
          "226:   convertedTLS = append(convertedTLS, networking_v1.IngressTLS{",
          "227:    Hosts:      tls.Hosts,",
          "228:    SecretName: tls.SecretName,",
          "229:   })",
          "230:  }",
          "232:  for _, r := range obj.Spec.Rules {",
          "234:   rule := networking_v1.IngressRule{}",
          "236:   if r.Host != \"\" {",
          "237:    rule.Host = r.Host",
          "238:   }",
          "240:   if r.HTTP != nil {",
          "242:    for _, p := range r.HTTP.Paths {",
          "243:     var pathType networking_v1.PathType",
          "244:     if p.PathType != nil {",
          "245:      switch *p.PathType {",
          "246:      case v1beta1.PathTypePrefix:",
          "247:       pathType = networking_v1.PathTypePrefix",
          "248:      case v1beta1.PathTypeExact:",
          "249:       pathType = networking_v1.PathTypeExact",
          "250:      case v1beta1.PathTypeImplementationSpecific:",
          "251:       pathType = networking_v1.PathTypeImplementationSpecific",
          "252:      }",
          "253:     }",
          "255:     paths = append(paths, networking_v1.HTTPIngressPath{",
          "256:      Path:     p.Path,",
          "257:      PathType: &pathType,",
          "258:      Backend: networking_v1.IngressBackend{",
          "259:       Service: &networking_v1.IngressServiceBackend{",
          "260:        Name: p.Backend.ServiceName,",
          "261:        Port: serviceBackendPort(p.Backend.ServicePort),",
          "262:       },",
          "263:      },",
          "264:     })",
          "265:    }",
          "267:    rule.IngressRuleValue = networking_v1.IngressRuleValue{",
          "268:     HTTP: &networking_v1.HTTPIngressRuleValue{",
          "269:      Paths: paths,",
          "270:     },",
          "271:    }",
          "272:   }",
          "274:   convertedIngressRules = append(convertedIngressRules, rule)",
          "275:  }",
          "277:  if obj.Spec.Backend != nil {",
          "278:   convertedDefaultBackend = &networking_v1.IngressBackend{",
          "279:    Service: &networking_v1.IngressServiceBackend{",
          "280:     Name: obj.Spec.Backend.ServiceName,",
          "281:     Port: serviceBackendPort(obj.Spec.Backend.ServicePort),",
          "282:    },",
          "283:   }",
          "284:  }",
          "286:  return &networking_v1.Ingress{",
          "287:   ObjectMeta: obj.ObjectMeta,",
          "288:   Spec: networking_v1.IngressSpec{",
          "289:    DefaultBackend: convertedDefaultBackend,",
          "290:    TLS:            convertedTLS,",
          "291:    Rules:          convertedIngressRules,",
          "292:   },",
          "293:  }",
          "294: }",
          "296: func serviceBackendPort(port intstr.IntOrString) networking_v1.ServiceBackendPort {",
          "297:  if port.Type == intstr.String {",
          "298:   return networking_v1.ServiceBackendPort{",
          "299:    Name: port.StrVal,",
          "300:   }",
          "301:  }",
          "302:  return networking_v1.ServiceBackendPort{",
          "303:   Number: port.IntVal,",
          "304:  }",
          "305: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:   _, ok := kc.ingresses[m]",
          "229:   delete(kc.ingresses, m)",
          "230:   return ok",
          "231:  case *contour_api_v1.HTTPProxy:",
          "232:   m := k8s.NamespacedNameOf(obj)",
          "233:   _, ok := kc.httpproxies[m]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:  case *networking_v1.Ingress:",
          "338:   m := k8s.NamespacedNameOf(obj)",
          "339:   _, ok := kc.ingresses[m]",
          "340:   delete(kc.ingresses, m)",
          "341:   return ok",
          "342:  case *networking_v1.IngressClass:",
          "343:   _, ok := kc.ingressclasses[obj.Name]",
          "344:   delete(kc.ingressclasses, obj.Name)",
          "345:   return ok",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290:   if ingress.Namespace != service.Namespace {",
          "291:    continue",
          "292:   }",
          "295:     return true",
          "296:    }",
          "297:   }",
          "",
          "[Removed Lines]",
          "293:   if backend := ingress.Spec.Backend; backend != nil {",
          "294:    if backend.ServiceName == service.Name {",
          "",
          "[Added Lines]",
          "408:   if backend := ingress.Spec.DefaultBackend; backend != nil {",
          "409:    if backend.Service.Name == service.Name {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "302:     continue",
          "303:    }",
          "304:    for _, path := range http.Paths {",
          "306:      return true",
          "307:     }",
          "308:    }",
          "",
          "[Removed Lines]",
          "305:     if path.Backend.ServiceName == service.Name {",
          "",
          "[Added Lines]",
          "420:     if path.Backend.Service.Name == service.Name {",
          "",
          "---------------"
        ],
        "internal/dag/cache_test.go||internal/dag/cache_test.go": [
          "File: internal/dag/cache_test.go -> internal/dag/cache_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  \"errors\"",
          "18:  \"testing\"",
          "20:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "21:  contour_api_v1alpha1 \"github.com/projectcontour/contour/apis/projectcontour/v1alpha1\"",
          "22:  \"github.com/projectcontour/contour/internal/annotation\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "784:    },",
          "785:    want: true,",
          "786:   },",
          "787:   \"remove ingress incorrect ingressclass\": {",
          "788:    cache: cache(&v1beta1.Ingress{",
          "789:     ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "789:   \"remove ingressv1\": {",
          "790:    cache: cache(&networking_v1.Ingress{",
          "791:     ObjectMeta: metav1.ObjectMeta{",
          "792:      Name:      \"ingress\",",
          "793:      Namespace: \"default\",",
          "794:     },",
          "795:    }),",
          "796:    obj: &networking_v1.Ingress{",
          "797:     ObjectMeta: metav1.ObjectMeta{",
          "798:      Name:      \"ingress\",",
          "799:      Namespace: \"default\",",
          "800:     },",
          "801:    },",
          "802:    want: true,",
          "803:   },",
          "",
          "---------------"
        ],
        "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
          "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"strings\"",
          "19:  \"github.com/projectcontour/contour/internal/annotation\"",
          "20:  \"github.com/projectcontour/contour/internal/k8s\"",
          "21:  \"github.com/sirupsen/logrus\"",
          "23:  \"k8s.io/apimachinery/pkg/types\"",
          "24: )",
          "",
          "[Removed Lines]",
          "22:  \"k8s.io/api/networking/v1beta1\"",
          "",
          "[Added Lines]",
          "19:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "24:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  }",
          "106: }",
          "109:  host := rule.Host",
          "110:  if strings.Contains(host, \"*\") {",
          "",
          "[Removed Lines]",
          "108: func (p *IngressProcessor) computeIngressRule(ing *v1beta1.Ingress, rule v1beta1.IngressRule) {",
          "",
          "[Added Lines]",
          "110: func (p *IngressProcessor) computeIngressRule(ing *networking_v1.Ingress, rule networking_v1.IngressRule) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:  for _, httppath := range httppaths(rule) {",
          "134:   path := stringOrDefault(httppath.Path, \"/\")",
          "135:   be := httppath.Backend",
          "138:   if err != nil {",
          "139:    continue",
          "140:   }",
          "",
          "[Removed Lines]",
          "136:   m := types.NamespacedName{Name: be.ServiceName, Namespace: ing.Namespace}",
          "137:   s, err := p.dag.EnsureService(m, be.ServicePort, p.source)",
          "",
          "[Added Lines]",
          "138:   m := types.NamespacedName{Name: be.Service.Name, Namespace: ing.Namespace}",
          "140:   var port intstr.IntOrString",
          "141:   if len(be.Service.Port.Name) > 0 {",
          "142:    port = intstr.FromString(be.Service.Port.Name)",
          "143:   } else {",
          "144:    port = intstr.FromInt(int(be.Service.Port.Number))",
          "145:   }",
          "147:   s, err := p.dag.EnsureService(m, port, p.source)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165: }",
          "169:  log = log.WithFields(logrus.Fields{",
          "170:   \"name\":      ingress.Name,",
          "171:   \"namespace\": ingress.Namespace,",
          "",
          "[Removed Lines]",
          "168: func route(ingress *v1beta1.Ingress, path string, service *Service, clientCertSecret *Secret, log logrus.FieldLogger) (*Route, error) {",
          "",
          "[Added Lines]",
          "178: func route(ingress *networking_v1.Ingress, path string, service *Service, clientCertSecret *Secret, log logrus.FieldLogger) (*Route, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:  rules := spec.Rules",
          "205:   rule := defaultBackendRule(backend)",
          "206:   rules = append(rules, rule)",
          "207:  }",
          "",
          "[Removed Lines]",
          "202: func rulesFromSpec(spec v1beta1.IngressSpec) []v1beta1.IngressRule {",
          "204:  if backend := spec.Backend; backend != nil {",
          "",
          "[Added Lines]",
          "212: func rulesFromSpec(spec networking_v1.IngressSpec) []networking_v1.IngressRule {",
          "214:  if backend := spec.DefaultBackend; backend != nil {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "209: }",
          "220:      },",
          "221:     }},",
          "222:    },",
          "",
          "[Removed Lines]",
          "212: func defaultBackendRule(be *v1beta1.IngressBackend) v1beta1.IngressRule {",
          "213:  return v1beta1.IngressRule{",
          "214:   IngressRuleValue: v1beta1.IngressRuleValue{",
          "215:    HTTP: &v1beta1.HTTPIngressRuleValue{",
          "216:     Paths: []v1beta1.HTTPIngressPath{{",
          "217:      Backend: v1beta1.IngressBackend{",
          "218:       ServiceName: be.ServiceName,",
          "219:       ServicePort: be.ServicePort,",
          "",
          "[Added Lines]",
          "222: func defaultBackendRule(be *networking_v1.IngressBackend) networking_v1.IngressRule {",
          "223:  return networking_v1.IngressRule{",
          "224:   IngressRuleValue: networking_v1.IngressRuleValue{",
          "225:    HTTP: &networking_v1.HTTPIngressRuleValue{",
          "226:     Paths: []networking_v1.HTTPIngressPath{{",
          "227:      Backend: networking_v1.IngressBackend{",
          "228:       Service: &networking_v1.IngressServiceBackend{",
          "229:        Name: be.Service.Name,",
          "230:        Port: be.Service.Port,",
          "231:       },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:  if rule.IngressRuleValue.HTTP == nil {",
          "240:   return nil",
          "",
          "[Removed Lines]",
          "237: func httppaths(rule v1beta1.IngressRule) []v1beta1.HTTPIngressPath {",
          "",
          "[Added Lines]",
          "249: func httppaths(rule networking_v1.IngressRule) []networking_v1.HTTPIngressPath {",
          "",
          "---------------"
        ],
        "internal/dag/policy.go||internal/dag/policy.go": [
          "File: internal/dag/policy.go -> internal/dag/policy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"strings\"",
          "21:  \"time\"",
          "23:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "24:  \"github.com/projectcontour/contour/internal/annotation\"",
          "25:  \"github.com/projectcontour/contour/internal/timeout\"",
          "26:  \"github.com/sirupsen/logrus\"",
          "28:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "29:  \"k8s.io/apimachinery/pkg/util/validation\"",
          "30: )",
          "",
          "[Removed Lines]",
          "27:  \"k8s.io/api/networking/v1beta1\"",
          "",
          "[Added Lines]",
          "23:  networking_v1 \"k8s.io/api/networking/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: }",
          "194:  retryOn := annotation.ContourAnnotation(ingress, \"retry-on\")",
          "195:  if len(retryOn) < 1 {",
          "196:   return nil",
          "",
          "[Removed Lines]",
          "193: func ingressRetryPolicy(ingress *v1beta1.Ingress, log logrus.FieldLogger) *RetryPolicy {",
          "",
          "[Added Lines]",
          "194: func ingressRetryPolicy(ingress *networking_v1.Ingress, log logrus.FieldLogger) *RetryPolicy {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:  return rp",
          "216: }",
          "219:  response := annotation.ContourAnnotation(ingress, \"response-timeout\")",
          "220:  if len(response) == 0 {",
          "",
          "[Removed Lines]",
          "218: func ingressTimeoutPolicy(ingress *v1beta1.Ingress, log logrus.FieldLogger) TimeoutPolicy {",
          "",
          "[Added Lines]",
          "219: func ingressTimeoutPolicy(ingress *networking_v1.Ingress, log logrus.FieldLogger) TimeoutPolicy {",
          "",
          "---------------"
        ],
        "internal/dag/policy_test.go||internal/dag/policy_test.go": [
          "File: internal/dag/policy_test.go -> internal/dag/policy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/projectcontour/contour/internal/timeout\"",
          "23:  \"github.com/sirupsen/logrus\"",
          "24:  \"github.com/stretchr/testify/assert\"",
          "26:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "27: )",
          "29: func TestRetryPolicyIngress(t *testing.T) {",
          "30:  tests := map[string]struct {",
          "32:   want *RetryPolicy",
          "33:  }{",
          "34:   \"no anotations\": {",
          "36:    want: nil,",
          "37:   },",
          "38:   \"retry-on\": {",
          "40:     ObjectMeta: metav1.ObjectMeta{",
          "41:      Annotations: map[string]string{",
          "42:       \"projectcontour.io/retry-on\": \"5xx\",",
          "",
          "[Removed Lines]",
          "25:  \"k8s.io/api/networking/v1beta1\"",
          "31:   i    *v1beta1.Ingress",
          "35:    i:    &v1beta1.Ingress{},",
          "39:    i: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "25:  networking_v1 \"k8s.io/api/networking/v1\"",
          "31:   i    *networking_v1.Ingress",
          "35:    i:    &networking_v1.Ingress{},",
          "39:    i: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:    },",
          "49:   },",
          "50:   \"explicitly zero retries\": {",
          "52:     ObjectMeta: metav1.ObjectMeta{",
          "53:      Annotations: map[string]string{",
          "54:       \"projectcontour.io/retry-on\":    \"5xx\",",
          "",
          "[Removed Lines]",
          "51:    i: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "51:    i: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:    },",
          "63:   },",
          "64:   \"num-retries\": {",
          "66:     ObjectMeta: metav1.ObjectMeta{",
          "67:      Annotations: map[string]string{",
          "68:       \"projectcontour.io/retry-on\":    \"5xx\",",
          "",
          "[Removed Lines]",
          "65:    i: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "65:    i: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:    },",
          "77:   },",
          "78:   \"no retry count, per try timeout\": {",
          "80:     ObjectMeta: metav1.ObjectMeta{",
          "81:      Annotations: map[string]string{",
          "82:       \"projectcontour.io/retry-on\":        \"5xx\",",
          "",
          "[Removed Lines]",
          "79:    i: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "79:    i: &networking_v1.Ingress{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:    },",
          "92:   },",
          "93:   \"explicit 0s timeout\": {",
          "95:     ObjectMeta: metav1.ObjectMeta{",
          "96:      Annotations: map[string]string{",
          "97:       \"projectcontour.io/retry-on\":        \"5xx\",",
          "",
          "[Removed Lines]",
          "94:    i: &v1beta1.Ingress{",
          "",
          "[Added Lines]",
          "94:    i: &networking_v1.Ingress{",
          "",
          "---------------"
        ],
        "internal/k8s/informers.go||internal/k8s/informers.go": [
          "File: internal/k8s/informers.go -> internal/k8s/informers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  contour_api_v1 \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "18:  contour_api_v1alpha1 \"github.com/projectcontour/contour/apis/projectcontour/v1alpha1\"",
          "19:  corev1 \"k8s.io/api/core/v1\"",
          "21:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "22:  serviceapis \"sigs.k8s.io/service-apis/apis/v1alpha1\"",
          "23: )",
          "",
          "[Removed Lines]",
          "20:  \"k8s.io/api/networking/v1beta1\"",
          "",
          "[Added Lines]",
          "20:  networking_v1 \"k8s.io/api/networking/v1\"",
          "21:  networking_v1beta1 \"k8s.io/api/networking/v1beta1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   contour_api_v1.TLSCertificateDelegationGVR,",
          "38:   contour_api_v1alpha1.ExtensionServiceGVR,",
          "39:   corev1.SchemeGroupVersion.WithResource(\"services\"),",
          "41:  }",
          "42: }",
          "",
          "[Removed Lines]",
          "40:   v1beta1.SchemeGroupVersion.WithResource(\"ingresses\"),",
          "",
          "[Added Lines]",
          "42:  }",
          "43: }",
          "45: func IngressV1Beta1Resource() schema.GroupVersionResource {",
          "46:  return networking_v1beta1.SchemeGroupVersion.WithResource(\"ingresses\")",
          "47: }",
          "49: func IngressV1Resources() []schema.GroupVersionResource {",
          "50:  return []schema.GroupVersionResource{",
          "51:   networking_v1.SchemeGroupVersion.WithResource(\"ingresses\"),",
          "52:   networking_v1.SchemeGroupVersion.WithResource(\"ingressclasses\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02d77f061524ab7f294ddcd1e38f08eb44c672c4",
      "candidate_info": {
        "commit_hash": "02d77f061524ab7f294ddcd1e38f08eb44c672c4",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/02d77f061524ab7f294ddcd1e38f08eb44c672c4",
        "files": [
          "internal/dag/builder_test.go",
          "internal/dag/cache_test.go",
          "internal/dag/secret_test.go",
          "internal/dag/status_test.go",
          "internal/fixture/certificate_constants.go",
          "internal/fixture/secret_fixtures.go",
          "internal/fixture/service_fixtures.go"
        ],
        "message": "Make status test readable (#2940)\n\nThis commit attempts to make the status tests more readable by putting the\nfixtures next to the test cases they are used in as much as possible.\n\nUpdate to local run function instead of tables as well.\n\nNames are also changed. No more `proxy47a`!\n\nI also found some duplicate tests (probably from when we converted\nIngressRoute tests to HTTPProxy ones).\n\nExtract status Secret and Service fixtures out to `internal/fixture`, assuming they could be reused.\n\nSigned-off-by: Nick Young <ynick@vmware.com>",
        "before_after_code_files": [
          "internal/dag/builder_test.go||internal/dag/builder_test.go",
          "internal/dag/cache_test.go||internal/dag/cache_test.go",
          "internal/dag/secret_test.go||internal/dag/secret_test.go",
          "internal/dag/status_test.go||internal/dag/status_test.go",
          "internal/fixture/certificate_constants.go||internal/fixture/certificate_constants.go",
          "internal/fixture/secret_fixtures.go||internal/fixture/secret_fixtures.go",
          "internal/fixture/service_fixtures.go||internal/fixture/service_fixtures.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ],
          "candidate": [
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/dag/builder_test.go||internal/dag/builder_test.go": [
          "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:    Namespace: \"default\",",
          "41:   },",
          "42:   Type: v1.SecretTypeTLS,",
          "44:  }",
          "",
          "[Removed Lines]",
          "43:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "43:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   Type: v1.SecretTypeTLS,",
          "64:   Data: map[string][]byte{",
          "65:    CACertificateKey:    []byte(\"\"),",
          "68:   },",
          "69:  }",
          "",
          "[Removed Lines]",
          "66:    v1.TLSCertKey:       []byte(CERTIFICATE),",
          "67:    v1.TLSPrivateKeyKey: []byte(RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "66:    v1.TLSCertKey:       []byte(fixture.CERTIFICATE),",
          "67:    v1.TLSPrivateKeyKey: []byte(fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:    Namespace: \"root\",",
          "75:   },",
          "76:   Type: v1.SecretTypeTLS,",
          "78:  }",
          "80:  fallbackCertificateSecret := &v1.Secret{",
          "",
          "[Removed Lines]",
          "77:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "77:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:    Namespace: \"default\",",
          "84:   },",
          "85:   Type: v1.SecretTypeTLS,",
          "87:  }",
          "89:  fallbackCertificateSecretRootNamespace := &v1.Secret{",
          "",
          "[Removed Lines]",
          "86:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "86:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:    Namespace: \"root\",",
          "93:   },",
          "94:   Type: v1.SecretTypeTLS,",
          "96:  }",
          "98:  cert1 := &v1.Secret{",
          "",
          "[Removed Lines]",
          "95:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "95:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "101:    Namespace: \"default\",",
          "102:   },",
          "103:   Data: map[string][]byte{",
          "105:   },",
          "106:  }",
          "",
          "[Removed Lines]",
          "104:    CACertificateKey: []byte(CERTIFICATE),",
          "",
          "[Added Lines]",
          "104:    CACertificateKey: []byte(fixture.CERTIFICATE),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "917:    Namespace: \"default\",",
          "918:   },",
          "919:   Type: v1.SecretTypeTLS,",
          "921:  }",
          "923:  s13a := &v1.Service{",
          "",
          "[Removed Lines]",
          "920:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "920:   Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------"
        ],
        "internal/dag/cache_test.go||internal/dag/cache_test.go": [
          "File: internal/dag/cache_test.go -> internal/dag/cache_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:      Namespace: \"default\",",
          "45:     },",
          "46:     Type: v1.SecretTypeTLS,",
          "48:    },",
          "49:    want: false,",
          "50:   },",
          "",
          "[Removed Lines]",
          "47:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "47:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     Type: v1.SecretTypeTLS,",
          "58:     Data: map[string][]byte{",
          "59:      CACertificateKey:    []byte(\"\"),",
          "62:     },",
          "63:    },",
          "64:    want: true,",
          "",
          "[Removed Lines]",
          "60:      v1.TLSCertKey:       []byte(CERTIFICATE),",
          "61:      v1.TLSPrivateKeyKey: []byte(RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "60:      v1.TLSCertKey:       []byte(fixture.CERTIFICATE),",
          "61:      v1.TLSPrivateKeyKey: []byte(fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     },",
          "72:     Type: v1.SecretTypeOpaque,",
          "73:     Data: map[string][]byte{",
          "75:     },",
          "76:    },",
          "77:    want: true,",
          "",
          "[Removed Lines]",
          "74:      CACertificateKey: []byte(CERTIFICATE_WITH_TEXT),",
          "",
          "[Added Lines]",
          "74:      CACertificateKey: []byte(fixture.CERTIFICATE_WITH_TEXT),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:      Namespace: \"default\",",
          "84:     },",
          "85:     Type: v1.SecretTypeOpaque,",
          "87:    },",
          "88:    want: true,",
          "89:   },",
          "",
          "[Removed Lines]",
          "86:     Data: caBundleData(CERTIFICATE, CERTIFICATE, CERTIFICATE, CERTIFICATE),",
          "",
          "[Added Lines]",
          "86:     Data: caBundleData(fixture.CERTIFICATE, fixture.CERTIFICATE, fixture.CERTIFICATE, fixture.CERTIFICATE),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:      Namespace: \"default\",",
          "120:     },",
          "121:     Type: v1.SecretTypeTLS,",
          "123:    },",
          "124:    want: true,",
          "125:   },",
          "",
          "[Removed Lines]",
          "122:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "122:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143:      Namespace: \"default\",",
          "144:     },",
          "145:     Type: v1.SecretTypeTLS,",
          "147:    },",
          "148:    want: true,",
          "149:   },",
          "",
          "[Removed Lines]",
          "146:     Data: secretdata(EC_CERTIFICATE, EC_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "146:     Data: secretdata(fixture.EC_CERTIFICATE, fixture.EC_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204:      Namespace: \"default\",",
          "205:     },",
          "206:     Type: v1.SecretTypeTLS,",
          "208:    },",
          "209:    want: true,",
          "210:   },",
          "",
          "[Removed Lines]",
          "207:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "207:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243:      Namespace: \"default\",",
          "244:     },",
          "245:     Type: v1.SecretTypeTLS,",
          "247:    },",
          "248:    want: true,",
          "249:   },",
          "",
          "[Removed Lines]",
          "246:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "246:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "269:      Namespace: \"default\",",
          "270:     },",
          "271:     Type: v1.SecretTypeTLS,",
          "273:    },",
          "274:    want: true,",
          "275:   },",
          "",
          "[Removed Lines]",
          "272:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "272:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "309:      Namespace: \"default\",",
          "310:     },",
          "311:     Type: v1.SecretTypeTLS,",
          "313:    },",
          "314:    want: true,",
          "315:   },",
          "",
          "[Removed Lines]",
          "312:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "312:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "349:      Namespace: \"default\",",
          "350:     },",
          "351:     Type: v1.SecretTypeTLS,",
          "353:    },",
          "354:    want: true,",
          "355:   },",
          "",
          "[Removed Lines]",
          "352:     Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "352:     Data: secretdata(fixture.CERTIFICATE, fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "361:     },",
          "362:     Type: v1.SecretTypeOpaque,",
          "363:     Data: map[string][]byte{",
          "365:     },",
          "366:    },",
          "",
          "[Removed Lines]",
          "364:      CACertificateKey: []byte(CERTIFICATE),",
          "",
          "[Added Lines]",
          "364:      CACertificateKey: []byte(fixture.CERTIFICATE),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "404:     },",
          "405:     Type: v1.SecretTypeOpaque,",
          "406:     Data: map[string][]byte{",
          "408:     },",
          "409:    },",
          "410:    want: true,",
          "",
          "[Removed Lines]",
          "407:      CACertificateKey: []byte(CERTIFICATE),",
          "",
          "[Added Lines]",
          "407:      CACertificateKey: []byte(fixture.CERTIFICATE),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "776:     },",
          "777:     Type: v1.SecretTypeTLS,",
          "778:     Data: map[string][]byte{",
          "781:     },",
          "782:    }),",
          "783:    obj: &v1.Secret{",
          "",
          "[Removed Lines]",
          "779:      v1.TLSCertKey:       []byte(CERTIFICATE),",
          "780:      v1.TLSPrivateKeyKey: []byte(RSA_PRIVATE_KEY),",
          "",
          "[Added Lines]",
          "779:      v1.TLSCertKey:       []byte(fixture.CERTIFICATE),",
          "780:      v1.TLSPrivateKeyKey: []byte(fixture.RSA_PRIVATE_KEY),",
          "",
          "---------------"
        ],
        "internal/dag/secret_test.go||internal/dag/secret_test.go": [
          "File: internal/dag/secret_test.go -> internal/dag/secret_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"fmt\"",
          "19:  \"testing\"",
          "21:  \"github.com/stretchr/testify/assert\"",
          "22:  v1 \"k8s.io/api/core/v1\"",
          "23: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"github.com/projectcontour/contour/internal/fixture\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   err       error",
          "30:  }{",
          "31:   \"normal\": {",
          "34:    valid: true,",
          "35:    err:   nil,",
          "36:   },",
          "37:   \"missing CN\": {",
          "40:    valid: false,",
          "41:    err:   errors.New(\"invalid TLS certificate: certificate has no common name or subject alt name\"),",
          "42:   },",
          "43:   \"EC cert with SubjectAltName only\": {",
          "46:    valid: true,",
          "47:    err:   nil,",
          "48:   },",
          "",
          "[Removed Lines]",
          "32:    cert:  CERTIFICATE,",
          "33:    key:   RSA_PRIVATE_KEY,",
          "38:    cert:  MISSING_CN_CERT,",
          "39:    key:   MISSING_CN_KEY,",
          "44:    cert:  EC_CERTIFICATE,",
          "45:    key:   EC_PRIVATE_KEY,",
          "",
          "[Added Lines]",
          "33:    cert:  fixture.CERTIFICATE,",
          "34:    key:   fixture.RSA_PRIVATE_KEY,",
          "39:    cert:  fixture.MISSING_CN_CERT,",
          "40:    key:   fixture.MISSING_CN_KEY,",
          "45:    cert:  fixture.EC_CERTIFICATE,",
          "46:    key:   fixture.EC_PRIVATE_KEY,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  }",
          "70: }",
          "207: func secretdata(cert, key string) map[string][]byte {",
          "208:  return map[string][]byte{",
          "209:   v1.TLSCertKey:       []byte(cert),",
          "",
          "[Removed Lines]",
          "72: const (",
          "74:  CERTIFICATE = `-----BEGIN CERTIFICATE-----",
          "75: MIIDHTCCAgWgAwIBAgIJAOv27DGlF3qdMA0GCSqGSIb3DQEBBQUAMCUxIzAhBgNV",
          "76: BAMMGmJvcmluZy13b3puaWFrLmV4YW1wbGUuY29tMB4XDTE5MTIwNTAxMzQzM1oX",
          "77: DTI5MTIwMjAxMzQzM1owJTEjMCEGA1UEAwwaYm9yaW5nLXdvem5pYWsuZXhhbXBs",
          "78: ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbgwFwfbikZxPb",
          "79: NYidPuNJoexq5W9fJrB/3jqsWox8pfess0bw/EL/VcEUqlrcuo40Md0MxApPuoPj",
          "80: eZCOZYhrA2XgcVTMnq61vusnuvmeG/qcrd5apSOoopSo2pmmI1rsJ1AVpheA+eR6",
          "81: uoWVILK8uYtPmcOQAoCU/E6iZYDLZ0AEiU16kz/cGfWx9lBukd+LQ+ZRQnLDiEI/",
          "82: 4hRmrZrEdJoDglzIgJVI+c8OfwbLq5eRMY2fYnxqm/1BJhqjDBc4Q8ufYgfOwobu",
          "83: JdVoSgiFy7wyH0GxMk4LRR6yJXLs1yjaihLERbjzlStvFVl4yidpE6Bi0amKW8HT",
          "84: Qxgk7iRRAgMBAAGjUDBOMB0GA1UdDgQWBBTLcIMeWLFiL2waFL6FPomNZR7gFDAf",
          "85: BgNVHSMEGDAWgBTLcIMeWLFiL2waFL6FPomNZR7gFDAMBgNVHRMEBTADAQH/MA0G",
          "86: CSqGSIb3DQEBBQUAA4IBAQBQLWokaWuFeSWLpxxaBX6aatgKAKNUSqDWNzM9zVMH",
          "87: xJVDywWJT3pwq7JUXujVS/c9mzCPJEsn7OQPihQECRq09l/nBK0kn9I1X6X1SMtD",
          "88: OJbpEWfQQxgstdgeC6pxrZRanF5a7EWO0pFSfjuM1ABjsdExaG3C8+wgEqOjHFDS",
          "89: NaW826GOFf/uMOnavpG6QePECAtJVpLAZPw6Rah6cAZrYUUezM/Tg+8JUhYUS20F",
          "90: STZG5knGQIe6kksWGkJUhMu8xLdH2HKtUVAkDu7jITy2WZbg0O/Pxe30b4qyt29Y",
          "91: 813p8G+7188EFDBGNihYYVJ+GJ/d/WPoptSHJOfShtbk",
          "92: -----END CERTIFICATE-----`",
          "94:  CERTIFICATE_WITH_TEXT = CERTIFICATE + \"\\t\\r\\n\"",
          "96:  RSA_PRIVATE_KEY = `-----BEGIN RSA PRIVATE KEY-----",
          "97: MIIEpAIBAAKCAQEA24MBcH24pGcT2zWInT7jSaHsauVvXyawf946rFqMfKX3rLNG",
          "98: 8PxC/1XBFKpa3LqONDHdDMQKT7qD43mQjmWIawNl4HFUzJ6utb7rJ7r5nhv6nK3e",
          "99: WqUjqKKUqNqZpiNa7CdQFaYXgPnkerqFlSCyvLmLT5nDkAKAlPxOomWAy2dABIlN",
          "100: epM/3Bn1sfZQbpHfi0PmUUJyw4hCP+IUZq2axHSaA4JcyICVSPnPDn8Gy6uXkTGN",
          "101: n2J8apv9QSYaowwXOEPLn2IHzsKG7iXVaEoIhcu8Mh9BsTJOC0UesiVy7Nco2ooS",
          "102: xEW485UrbxVZeMonaROgYtGpilvB00MYJO4kUQIDAQABAoIBAF5L671gNIZjRVNg",
          "103: rtwl3MuPxJizEOHGJAH5/Ch4CWuufDPzG6GALGO1eekfuUKi3V2sofHO8UMIs4lv",
          "104: elrBYRXfcs80wCHadODcL/Z0SrDSAhl2U1OLJ0NU/BmBNon5HCDgTnXOUMB2GOFj",
          "105: 6OiEEGQkLKU4P5tIh+X4cOswQWCeoVjW0JVgni20hi3LJNTxSNYeU5VFvPKtoBLl",
          "106: 8nFqF3ky+bqYfS6H6qM/mO+XL0NQ2wjMteyUeDXcVGfsf7Ir21SUw3zGaeBJl55B",
          "107: 6BrUgfxVOKuxkw2bwxmu8HX+CxlMMMzaRt+5URFbfOaMgXzjpikrxdeFAAGeu0m4",
          "108: bidUR5UCgYEA8lRGqYfowoOCrV8Ksn8nM0Z9PlnmKM5d9mQ875sm/SYLO43h+s0D",
          "109: R4VWmLzaGyi0m0036lxIthDfbbGWSjmNrgQ0YIS7ilmBPMUKKYzXgDoiI76aJBTz",
          "110: UMpWutb+VYimPPorLKcxNb3BjR3QHx7vCRS2gV5izV0djtMkKc53OXsCgYEA5+Uz",
          "111: A7cmO8gHyxlW6SA3+wMH6VKP5ABTkDmKfRF3NCv4UHNn4TtlNuS1D3ZMNXWgCtz6",
          "112: qJ/bRTAqseBIX15pzR/MvyNmHRUN3A2Ba6vB2pJux+ZyQjxn3Z+gisjX+eN3LvTU",
          "113: YpcJNi0HSuV57n4AAk5YPO5iMEFw95vfBn3MMaMCgYEAnFwyqAsQ7gmLVTDBJ0GS",
          "114: Wqx9/bBmKShXSreM9hIHi0pz7v5ytLB6EDkCElWw6dtPBfJCRQ88v3WNpSr0TXpr",
          "115: Z8BAx5J9rBxqnnqJPxwopQ1dn/DJZsS55wRYCADXZPtiQHAvUYWj5AhHjjWRZ7M/",
          "116: C3348OqlF9ugSdsFN5CIL2cCgYEAqt5lop03XOFdbLe1JH4LAbgQAkpFoDjlWeYs",
          "117: N0/BR/4GMDF5H6sGP1ZyW3xNVy7eyGJfiBSSGv8M1phue2c0CmMeGNDakx9KYRTK",
          "118: gi3C32z6l+0jz852sgTG5Lxs98I1tbHNNQAZV4QCVZuVJrhNBWX4+pykWO4/cRO3",
          "119: WC8lYIUCgYBmmN4z0MR2YWoRvN3lYey3bRGAvsSU6ouiFo40UZdZaRXc1sA3oc+5",
          "120: 6Di3f8eOIhM5IekOBoaTBf90V8seB6Nw+/jzAViG1HDI7k0ZOoApDuFS6NYk1/bU",
          "121: dk98FvYdyAjjgNsxXCyx7vIgYU3OgVNgvFsFubX/Uk66fcfCpPBMLg==",
          "122: -----END RSA PRIVATE KEY-----`",
          "130:  EC_CERTIFICATE = `-----BEGIN CERTIFICATE-----",
          "131: MIIBfzCCASWgAwIBAgIUZ8EBxJShrhAiO9bG6aRVcJdlEJowCgYIKoZIzj0EAwIw",
          "132: KTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMQ0wCwYDVQQKDARBY21lMB4XDTE5",
          "133: MTIwNTAxNTg0NFoXDTI5MTIwMjAxNTg0NFowKTELMAkGA1UEBhMCVVMxCzAJBgNV",
          "134: BAgMAkNBMQ0wCwYDVQQKDARBY21lMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE",
          "135: zCdqvU5dSKxzDAVakEi97epIazdkUKRT2XZtUk41Hp2H4xy8EzR1Re3r9AdJRsJn",
          "136: sGrHGbIg2r7OUNYgeN4ot6MrMCkwJwYDVR0RBCAwHoILZXhhbXBsZS5jb22CD3d3",
          "137: dy5leGFtcGxlLmNvbTAKBggqhkjOPQQDAgNIADBFAiAYFlD2n/uWWxTqi8WcWvb1",
          "138: CUDxSzF2/jLe1PIFkwNk7wIhAP9kMCO1ys050JNvlVZg3xvPvCHKCkWcSachE5fC",
          "139: 5hc6",
          "140: -----END CERTIFICATE-----`",
          "142:  EC_PRIVATE_KEY = `-----BEGIN EC PARAMETERS-----",
          "143: BggqhkjOPQMBBw==",
          "144: -----END EC PARAMETERS-----",
          "145: -----BEGIN EC PRIVATE KEY-----",
          "146: MHcCAQEEIAM3LdZrzZk8Hn4VqBDNTgOuh9E772M4sgEYvZMNOy4moAoGCCqGSM49",
          "147: AwEHoUQDQgAEzCdqvU5dSKxzDAVakEi97epIazdkUKRT2XZtUk41Hp2H4xy8EzR1",
          "148: Re3r9AdJRsJnsGrHGbIg2r7OUNYgeN4otw==",
          "149: -----END EC PRIVATE KEY-----`",
          "154:  MISSING_CN_CERT = `-----BEGIN CERTIFICATE-----",
          "155: MIIDYzCCAkugAwIBAgIUcNI/oD/y3dZ2Rmyvz9Xb4BsC0nswDQYJKoZIhvcNAQEL",
          "156: BQAwQTETMBEGCgmSJomT8ixkARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBmRvbWFp",
          "157: bjESMBAGCgmSJomT8ixkARkWAm15MB4XDTE5MTIwMzA0MDYyM1oXDTIwMTIwMjA0",
          "158: MDYyM1owQTETMBEGCgmSJomT8ixkARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBmRv",
          "159: bWFpbjESMBAGCgmSJomT8ixkARkWAm15MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A",
          "160: MIIBCgKCAQEAxblHSlzhyDY88rhILpn+rCALqK1ELcbL5T3FygLEdUlE/da3VpSz",
          "161: wBaZc9UIhFpwnkvUy8eKYbLy9jIk3C0aJasrX828MkF4lInSJf0BREbddxmwDovl",
          "162: KZoo7xz2rY6LPTopZ1GdszzsPxvBFvc1gWl0UEXkxDAZjtnDuVB+hBv6RR7BpSdN",
          "163: Fxds3OVles1mgasW79gMCb22gFa9vJKkxVJz5IIstrShjCfNvPvULf3aeMJjy8fM",
          "164: x8kHBiRSs6HC4dFR3cR1uuZCdnkeR76X3gAn9A18VBMvA25JehhfLYnVJi80UgGV",
          "165: PAxKgjU8dw8auvbmopzkguyFTfW6sYfDBQIDAQABo1MwUTAdBgNVHQ4EFgQUITS5",
          "166: 7JyH/S2wUrZnUjQXAp1nTPQwHwYDVR0jBBgwFoAUITS57JyH/S2wUrZnUjQXAp1n",
          "167: TPQwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAn5nxNyI6+3MD",
          "168: X5hzg5G0gTZafL8qN5bJGlFRWeyU2CvWsXbHCYtzADkwGCcCyoA1nmb460kwZ4vk",
          "169: fOz9FYqZoh4IIegs5bB559Ze26Kjl5AgAFARXxV6s0cPDQ2O1XFkNIQiLFHHPfRR",
          "170: RJtQgNaLppCe8TFNPjUDqNfoWPQvnlEYMYsvKto7pNw+HGreXhGF5CUCGIqT747P",
          "171: zYmBGZEE2q1L45nErZFK4d74XzGu/4Kc73zEFS6GT71Zu6Ec6wUCKdciyNtFHFmh",
          "172: 4l3l5YC+1zK6ZeOBxdoMKpldD9EV4GQqW8aE2Adpd5RcUUQJnqWM+/ysod/AnHL/",
          "173: fm35MjBa+w==",
          "174: -----END CERTIFICATE-----",
          "175: `",
          "176:  MISSING_CN_KEY = `-----BEGIN PRIVATE KEY-----",
          "177: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDFuUdKXOHINjzy",
          "178: uEgumf6sIAuorUQtxsvlPcXKAsR1SUT91rdWlLPAFplz1QiEWnCeS9TLx4phsvL2",
          "179: MiTcLRolqytfzbwyQXiUidIl/QFERt13GbAOi+UpmijvHPatjos9OilnUZ2zPOw/",
          "180: G8EW9zWBaXRQReTEMBmO2cO5UH6EG/pFHsGlJ00XF2zc5WV6zWaBqxbv2AwJvbaA",
          "181: Vr28kqTFUnPkgiy2tKGMJ828+9Qt/dp4wmPLx8zHyQcGJFKzocLh0VHdxHW65kJ2",
          "182: eR5HvpfeACf0DXxUEy8Dbkl6GF8tidUmLzRSAZU8DEqCNTx3Dxq69uainOSC7IVN",
          "183: 9bqxh8MFAgMBAAECggEAZVvBjAFpTPVg8Rw/BIS05Q/YajPIS58pTu8HwbMBew6A",
          "184: a4/ylFPOgZ4UNCj1IMQsDznYcE5uRf8yRbsW4jfMu5qvtYEGBM1DPwIX1JmKWLHr",
          "185: Pe7RLePRKi545Xr3iakU/+Ic73YLXaLRiNh1d4xqxViF49CwoVH3CB/iEdGNybKX",
          "186: CyWxNUS9Tguzg26zIqvtjjqzP3ULt/P+fi/NTIKswv4Btp6hI8QDA2RL6RFJYIL2",
          "187: jVpRFUSOhl5N7fg8ZKIAaQFetenzM/yF29qa6nlIhXFsep6bRaLqw9Hni2YB6yCh",
          "188: 7z4I/ygSTirPW1yk+NPiLjc6mTZVf7EvdFeApOOSUQKBgQDq71Hb0hciDyFkdq3R",
          "189: nxskJeiSk8b141tarlrUTvoPRYwOaeKcDN2Lzj7Y9Pqxllb8CSjoOR0B/pfwvfxI",
          "190: J2HGoNf7PK3rn166QiFPPFxwa5bMpCcbEoljToB4nCRDsYRlUrd/hAHAb1ptLqK2",
          "191: OHc2pbOo0mmYORstIFccrKJDYwKBgQDXc9FA78KjZ7iS2GCs3yXOdS2U1TD5hZMr",
          "192: MDXMA0CMbxTYmLRLD0x41hXzH/2UsfQNCYQZCOqWhW3FJHqAaBz0w2n+dOMkWeSq",
          "193: EI5ghDQyu/HM2V7xk3tYYXhZ/FxOzcd2l/DUzKZsPJuxsXsNaUn9+ZOE44xHRjNf",
          "194: wYvNv17QdwKBgQCujZO/hLAlYSKJV1g8OD/dMsFDLsMT7JHypTrdJbTLZfvytZ9m",
          "195: HHT7LAkr/5DII5CLgG7BY7X2xmezuiTYo1IVV2pBw8rhFy81qm6/RXTVHksTzx8z",
          "196: ESm8/BWeBz02go2BDt1BxB3dEZ8ZIh5Iz1lb4+/BjlxgeoWDmNTAfE+vSwKBgFGq",
          "197: I7HSb1tSsEJw48wC1Si5f6p/WI3r1Im1P17yCKByZltnHkepJ9pRg4ZhJNQc052x",
          "198: crGukIS3VJE6L3jGfdtEysNZeNNJg4P2vJDW65YjaRa1eehld4Zbg6vQHQj9tNI9",
          "199: 61otrBMwse8bj8HYm+Q5mnHvcjd943EzQpOdKwonAoGBAKGymiC7RgrdaxbKf7oE",
          "200: dsipT/w+MFInBLLiJcqLAfh0647vhjCFNGG4MZ6YGVwiIdvjZ1dH2Ujsdo8e0+Wi",
          "201: 8cnx8JvuAJdr5HzMI6fvnMDzjzAskMgYUNhOUhM2g223JuoyyLY2/DL7dOYkFeSn",
          "202: b5qYn0JNERfPYdLwXNV1HCM9",
          "203: -----END PRIVATE KEY-----",
          "204: `",
          "205: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: )",
          "31: func TestDAGStatus(t *testing.T) {",
          "86:  }",
          "100:  }",
          "117:   ObjectMeta: metav1.ObjectMeta{",
          "120:   },",
          "126:    }},",
          "127:   },",
          "128:  }",
          "140:   },",
          "144:   ObjectMeta: metav1.ObjectMeta{",
          "147:   },",
          "154:    }},",
          "155:   },",
          "156:  }",
          "170:   },",
          "173:  proxyMultiIncludeOneInvalid := &projcontour.HTTPProxy{",
          "174:   ObjectMeta: metav1.ObjectMeta{",
          "175:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "32:  secretRootsNS := &v1.Secret{",
          "33:   ObjectMeta: metav1.ObjectMeta{",
          "34:    Name:      \"ssl-cert\",",
          "35:    Namespace: \"roots\",",
          "36:   },",
          "37:   Type: v1.SecretTypeTLS,",
          "38:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "39:  }",
          "41:  secretContourNS := &v1.Secret{",
          "42:   ObjectMeta: metav1.ObjectMeta{",
          "43:    Name:      \"default-ssl-cert\",",
          "44:    Namespace: \"projectcontour\",",
          "45:   },",
          "46:   Type: v1.SecretTypeTLS,",
          "47:   Data: secretRootsNS.Data,",
          "48:  }",
          "50:  fallbackSecret := &v1.Secret{",
          "51:   ObjectMeta: metav1.ObjectMeta{",
          "52:    Name:      \"fallbacksecret\",",
          "53:    Namespace: \"roots\",",
          "54:   },",
          "55:   Type: v1.SecretTypeTLS,",
          "56:   Data: secretdata(CERTIFICATE, RSA_PRIVATE_KEY),",
          "57:  }",
          "59:  serviceKuard := &v1.Service{",
          "60:   ObjectMeta: metav1.ObjectMeta{",
          "61:    Name:      \"kuard\",",
          "62:    Namespace: secretRootsNS.Namespace,",
          "63:   },",
          "64:   Spec: v1.ServiceSpec{",
          "65:    Ports: []v1.ServicePort{{",
          "66:     Name:       \"http\",",
          "67:     Protocol:   \"TCP\",",
          "68:     Port:       8080,",
          "69:     TargetPort: intstr.FromInt(8080),",
          "70:    }},",
          "71:   },",
          "72:  }",
          "74:  serviceHome := &v1.Service{",
          "75:   ObjectMeta: metav1.ObjectMeta{",
          "76:    Name:      \"home\",",
          "77:    Namespace: serviceKuard.Namespace,",
          "78:   },",
          "79:   Spec: v1.ServiceSpec{",
          "80:    Ports: []v1.ServicePort{{",
          "81:     Name:     \"http\",",
          "82:     Protocol: \"TCP\",",
          "83:     Port:     8080,",
          "84:    }},",
          "85:   },",
          "88:  serviceFoo2 := &v1.Service{",
          "89:   ObjectMeta: metav1.ObjectMeta{",
          "90:    Name:      \"foo2\",",
          "91:    Namespace: serviceKuard.Namespace,",
          "92:   },",
          "93:   Spec: v1.ServiceSpec{",
          "94:    Ports: []v1.ServicePort{{",
          "95:     Name:     \"http\",",
          "96:     Protocol: \"TCP\",",
          "97:     Port:     8080,",
          "98:    }},",
          "99:   },",
          "102:  serviceFoo3InvalidPort := &v1.Service{",
          "103:   ObjectMeta: metav1.ObjectMeta{",
          "104:    Name:      \"foo3\",",
          "105:    Namespace: serviceKuard.Namespace,",
          "106:   },",
          "107:   Spec: v1.ServiceSpec{",
          "108:    Ports: []v1.ServicePort{{",
          "109:     Name:     \"http\",",
          "110:     Protocol: \"TCP\",",
          "111:     Port:     12345678,",
          "112:    }},",
          "113:   },",
          "114:  }",
          "116:  serviceGreenMarketing := &v1.Service{",
          "118:    Name:      \"green\",",
          "119:    Namespace: \"marketing\",",
          "121:   Spec: v1.ServiceSpec{",
          "122:    Ports: []v1.ServicePort{{",
          "123:     Name:     \"http\",",
          "124:     Protocol: \"TCP\",",
          "125:     Port:     80,",
          "130:  serviceNginx := &v1.Service{",
          "131:   ObjectMeta: metav1.ObjectMeta{",
          "132:    Name:      \"nginx\",",
          "133:    Namespace: serviceKuard.Namespace,",
          "134:   },",
          "135:   Spec: v1.ServiceSpec{",
          "136:    Ports: []v1.ServicePort{{",
          "137:     Protocol: \"TCP\",",
          "138:     Port:     80,",
          "139:    }},",
          "141:  }",
          "143:  sericeKuardTeamA := &v1.Service{",
          "145:    Name:      \"kuard\",",
          "146:    Namespace: \"teama\",",
          "148:   Spec: v1.ServiceSpec{",
          "149:    Ports: []v1.ServicePort{{",
          "150:     Name:       \"http\",",
          "151:     Protocol:   \"TCP\",",
          "152:     Port:       8080,",
          "153:     TargetPort: intstr.FromInt(8080),",
          "158:  serviceKuardTeamB := &v1.Service{",
          "159:   ObjectMeta: metav1.ObjectMeta{",
          "160:    Name:      \"kuard\",",
          "161:    Namespace: \"teamb\",",
          "162:   },",
          "163:   Spec: v1.ServiceSpec{",
          "164:    Ports: []v1.ServicePort{{",
          "165:     Name:       \"http\",",
          "166:     Protocol:   \"TCP\",",
          "167:     Port:       8080,",
          "168:     TargetPort: intstr.FromInt(8080),",
          "169:    }},",
          "171:  }",
          "",
          "[Added Lines]",
          "33:  type testcase struct {",
          "34:   objs                []interface{}",
          "35:   fallbackCertificate *types.NamespacedName",
          "36:   want                map[types.NamespacedName]Status",
          "39:  run := func(desc string, tc testcase) {",
          "40:   t.Run(desc, func(t *testing.T) {",
          "41:    builder := Builder{",
          "42:     Source: KubernetesCache{",
          "43:      RootNamespaces: []string{\"roots\", \"marketing\"},",
          "44:      FieldLogger:    fixture.NewTestLogger(t),",
          "45:     },",
          "46:     Processors: []Processor{",
          "47:      &IngressProcessor{",
          "48:       FieldLogger: fixture.NewTestLogger(t),",
          "49:      },",
          "50:      &HTTPProxyProcessor{",
          "51:       FallbackCertificate: tc.fallbackCertificate,",
          "52:      },",
          "53:      &ListenerProcessor{},",
          "54:     },",
          "55:    }",
          "56:    for _, o := range tc.objs {",
          "57:     builder.Source.Insert(o)",
          "58:    }",
          "59:    dag := builder.Build()",
          "60:    got := dag.Statuses()",
          "61:    assert.Equal(t, tc.want, got)",
          "62:   })",
          "68:  proxyNoFQDN := &projcontour.HTTPProxy{",
          "70:    Namespace: \"roots\",",
          "71:    Name:      \"parent\",",
          "73:   Spec: projcontour.HTTPProxySpec{",
          "74:    VirtualHost: &projcontour.VirtualHost{},",
          "75:    Routes: []projcontour.Route{{",
          "76:     Conditions: []projcontour.MatchCondition{{",
          "77:      Prefix: \"/foo\",",
          "78:     }},",
          "79:     Services: []projcontour.Service{{",
          "80:      Name: \"foo\",",
          "81:      Port: 8080,",
          "82:     }},",
          "88:  run(\"root proxy does not specify FQDN\", testcase{",
          "89:   objs: []interface{}{proxyNoFQDN},",
          "90:   want: map[types.NamespacedName]Status{",
          "91:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: {Object: proxyNoFQDN, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "93:  })",
          "96:  proxyValidHomeService := &projcontour.HTTPProxy{",
          "98:    Namespace: \"roots\",",
          "99:    Name:      \"example\",",
          "101:   Spec: projcontour.HTTPProxySpec{",
          "102:    VirtualHost: &projcontour.VirtualHost{",
          "103:     Fqdn: \"example.com\",",
          "104:    },",
          "105:    Routes: []projcontour.Route{{",
          "106:     Conditions: []projcontour.MatchCondition{{",
          "107:      Prefix: \"/foo\",",
          "108:     }},",
          "109:     Services: []projcontour.Service{{",
          "110:      Name: \"home\",",
          "111:      Port: 8080,",
          "112:     }},",
          "117:  run(\"valid proxy\", testcase{",
          "118:   objs: []interface{}{proxyValidHomeService, fixture.ServiceRootsHome},",
          "119:   want: map[types.NamespacedName]Status{",
          "120:    {Name: proxyValidHomeService.Name, Namespace: proxyValidHomeService.Namespace}: {Object: proxyValidHomeService, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "122:  })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:   },",
          "242:  }",
          "244:  ingressSharedService := &v1beta1.Ingress{",
          "245:   ObjectMeta: metav1.ObjectMeta{",
          "246:    Name:      \"nginx\",",
          "248:   },",
          "249:   Spec: v1beta1.IngressSpec{",
          "250:    TLS: []v1beta1.IngressTLS{{",
          "251:     Hosts:      []string{\"example.com\"},",
          "253:    }},",
          "254:    Rules: []v1beta1.IngressRule{{",
          "255:     Host:             \"example.com\",",
          "257:    }},",
          "258:   },",
          "259:  }",
          "",
          "[Removed Lines]",
          "247:    Namespace: serviceNginx.Namespace,",
          "252:     SecretName: secretRootsNS.Name,",
          "256:     IngressRuleValue: ingressrulevalue(backend(serviceNginx.Name, intstr.FromInt(80))),",
          "",
          "[Added Lines]",
          "196:  run(\"proxy has multiple includes, one is invalid\", testcase{",
          "197:   objs: []interface{}{proxyMultiIncludeOneInvalid, proxyChildValidFoo2, proxyChildInvalidBadPort, fixture.ServiceRootsFoo2, fixture.ServiceRootsFoo3InvalidPort},",
          "198:   want: map[types.NamespacedName]Status{",
          "199:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}:                 {Object: proxyChildValidFoo2, Status: \"valid\", Description: \"valid HTTPProxy\"},",
          "200:    {Name: proxyChildInvalidBadPort.Name, Namespace: proxyChildInvalidBadPort.Namespace}:       {Object: proxyChildInvalidBadPort, Status: \"invalid\", Description: `service \"foo3\": port must be in the range 1-65535`},",
          "201:    {Name: proxyMultiIncludeOneInvalid.Name, Namespace: proxyMultiIncludeOneInvalid.Namespace}: {Object: proxyMultiIncludeOneInvalid, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "202:   },",
          "203:  })",
          "205:  run(\"multi-parent child is not orphaned when one of the parents is invalid\", testcase{",
          "206:   objs: []interface{}{proxyNoFQDN, proxyChildValidFoo2, proxyIncludeValidChild, fixture.ServiceRootsKuard, fixture.ServiceRootsFoo2},",
          "207:   want: map[types.NamespacedName]Status{",
          "208:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}:                       {Object: proxyNoFQDN, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "209:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}:       {Object: proxyChildValidFoo2, Status: \"valid\", Description: \"valid HTTPProxy\"},",
          "210:    {Name: proxyIncludeValidChild.Name, Namespace: proxyIncludeValidChild.Namespace}: {Object: proxyIncludeValidChild, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "211:   },",
          "212:  })",
          "217:    Namespace: fixture.ServiceRootsNginx.Namespace,",
          "222:     SecretName: fixture.SecretRootsCert.Name,",
          "226:     IngressRuleValue: ingressrulevalue(backend(fixture.ServiceRootsNginx.Name, intstr.FromInt(80))),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:  proxyTCPSharedService := &projcontour.HTTPProxy{",
          "262:   ObjectMeta: metav1.ObjectMeta{",
          "263:    Name:      \"nginx\",",
          "265:   },",
          "266:   Spec: projcontour.HTTPProxySpec{",
          "267:    VirtualHost: &projcontour.VirtualHost{",
          "268:     Fqdn: \"example.com\",",
          "269:     TLS: &projcontour.TLS{",
          "271:     },",
          "272:    },",
          "273:    TCPProxy: &projcontour.TCPProxy{",
          "274:     Services: []projcontour.Service{{",
          "276:      Port: 80,",
          "277:     }},",
          "278:    },",
          "279:   },",
          "280:  }",
          "282:  proxyDelegatedTCPTLS := &projcontour.HTTPProxy{",
          "283:   ObjectMeta: metav1.ObjectMeta{",
          "284:    Name:      \"app-with-tls-delegation\",",
          "",
          "[Removed Lines]",
          "264:    Namespace: serviceNginx.Namespace,",
          "270:      SecretName: secretRootsNS.Name,",
          "275:      Name: serviceNginx.Name,",
          "",
          "[Added Lines]",
          "234:    Namespace: fixture.ServiceRootsNginx.Namespace,",
          "240:      SecretName: fixture.SecretRootsCert.Name,",
          "245:      Name: fixture.ServiceRootsNginx.Name,",
          "253:  run(\"service shared across ingress and httpproxy tcpproxy\", testcase{",
          "254:   objs: []interface{}{",
          "255:    fixture.SecretRootsCert, fixture.ServiceRootsNginx, ingressSharedService, proxyTCPSharedService,",
          "256:   },",
          "257:   want: map[types.NamespacedName]Status{",
          "258:    {Name: proxyTCPSharedService.Name, Namespace: proxyTCPSharedService.Namespace}: {",
          "259:     Object:      proxyTCPSharedService,",
          "260:     Status:      k8s.StatusValid,",
          "261:     Description: `valid HTTPProxy`,",
          "262:     Vhost:       \"example.com\",",
          "263:    },",
          "264:   },",
          "265:  })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288:    VirtualHost: &projcontour.VirtualHost{",
          "289:     Fqdn: \"app-with-tls-delegation.127.0.0.1.nip.io\",",
          "290:     TLS: &projcontour.TLS{",
          "292:     },",
          "293:    },",
          "294:    TCPProxy: &projcontour.TCPProxy{",
          "",
          "[Removed Lines]",
          "291:      SecretName: secretContourNS.Namespace + \"/\" + secretContourNS.Name,",
          "",
          "[Added Lines]",
          "276:      SecretName: fixture.SecretProjectContourCert.Namespace + \"/\" + fixture.SecretProjectContourCert.Name,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300:   },",
          "301:  }",
          "303:  proxyDelegatedTLS := &projcontour.HTTPProxy{",
          "304:   ObjectMeta: metav1.ObjectMeta{",
          "305:    Name:      \"app-with-tls-delegation\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:  run(\"tcpproxy with tls delegation failure\", testcase{",
          "290:   objs: []interface{}{",
          "291:    fixture.SecretProjectContourCert,",
          "292:    proxyDelegatedTCPTLS,",
          "293:   },",
          "294:   want: map[types.NamespacedName]Status{",
          "295:    {Name: proxyDelegatedTCPTLS.Name, Namespace: proxyDelegatedTCPTLS.Namespace}: {",
          "296:     Object:      proxyDelegatedTCPTLS,",
          "297:     Status:      k8s.StatusInvalid,",
          "298:     Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(fixture.SecretProjectContourCert)),",
          "299:     Vhost:       proxyDelegatedTCPTLS.Spec.VirtualHost.Fqdn,",
          "300:    },",
          "301:   },",
          "302:  })",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:    VirtualHost: &projcontour.VirtualHost{",
          "310:     Fqdn: \"app-with-tls-delegation.127.0.0.1.nip.io\",",
          "311:     TLS: &projcontour.TLS{",
          "313:     },",
          "314:    },",
          "315:    Routes: []projcontour.Route{{",
          "",
          "[Removed Lines]",
          "312:      SecretName: secretContourNS.Namespace + \"/\" + secretContourNS.Name,",
          "",
          "[Added Lines]",
          "313:      SecretName: fixture.SecretProjectContourCert.Namespace + \"/\" + fixture.SecretProjectContourCert.Name,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "321:   },",
          "322:  }",
          "325:   ObjectMeta: metav1.ObjectMeta{",
          "326:    Name:      \"tls-passthrough\",",
          "327:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "324:  s10 := &v1.Service{",
          "",
          "[Added Lines]",
          "326:  run(\"routes with tls delegation failure\", testcase{",
          "327:   objs: []interface{}{",
          "328:    fixture.SecretProjectContourCert,",
          "329:    proxyDelegatedTLS,",
          "330:   },",
          "331:   want: map[types.NamespacedName]Status{",
          "332:    {Name: proxyDelegatedTLS.Name, Namespace: proxyDelegatedTLS.Namespace}: {",
          "333:     Object:      proxyDelegatedTLS,",
          "334:     Status:      k8s.StatusInvalid,",
          "335:     Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(fixture.SecretProjectContourCert)),",
          "336:     Vhost:       proxyDelegatedTLS.Spec.VirtualHost.Fqdn,",
          "337:    },",
          "338:   },",
          "339:  })",
          "341:  serviceTLSPassthrough := &v1.Service{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "344:  proxyPassthroughProxyNonSecure := &projcontour.HTTPProxy{",
          "345:   ObjectMeta: metav1.ObjectMeta{",
          "346:    Name:      \"kuard-tcp\",",
          "348:   },",
          "349:   Spec: projcontour.HTTPProxySpec{",
          "350:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "347:    Namespace: s10.Namespace,",
          "",
          "[Added Lines]",
          "364:    Namespace: serviceTLSPassthrough.Namespace,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "358:      Prefix: \"/\",",
          "359:     }},",
          "360:     Services: []projcontour.Service{{",
          "362:      Port: 80, // proxy non secure traffic to port 80",
          "363:     }},",
          "364:    }},",
          "365:    TCPProxy: &projcontour.TCPProxy{",
          "366:     Services: []projcontour.Service{{",
          "368:      Port: 443, // ssl passthrough to secure port",
          "369:     }},",
          "370:    },",
          "371:   },",
          "372:  }",
          "374:  proxyMultipleIncludersSite1 := &projcontour.HTTPProxy{",
          "375:   ObjectMeta: metav1.ObjectMeta{",
          "376:    Name:      \"site1\",",
          "378:   },",
          "379:   Spec: projcontour.HTTPProxySpec{",
          "380:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "361:      Name: s10.Name,",
          "367:      Name: s10.Name,",
          "377:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "378:      Name: serviceTLSPassthrough.Name,",
          "384:      Name: serviceTLSPassthrough.Name,",
          "392:  run(\"non tls routes can be combined with tcp proxy\", testcase{",
          "393:   objs: []interface{}{",
          "394:    serviceTLSPassthrough,",
          "395:    proxyPassthroughProxyNonSecure,",
          "396:   },",
          "397:   want: map[types.NamespacedName]Status{",
          "398:    {Name: proxyPassthroughProxyNonSecure.Name, Namespace: proxyPassthroughProxyNonSecure.Namespace}: {",
          "399:     Object:      proxyPassthroughProxyNonSecure,",
          "400:     Status:      k8s.StatusValid,",
          "401:     Description: `valid HTTPProxy`,",
          "402:     Vhost:       proxyPassthroughProxyNonSecure.Spec.VirtualHost.Fqdn,",
          "403:    },",
          "404:   },",
          "405:  })",
          "410:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "382:    },",
          "383:    Includes: []projcontour.Include{{",
          "384:     Name:      \"www\",",
          "386:    }},",
          "387:   },",
          "388:  }",
          "",
          "[Removed Lines]",
          "385:     Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "418:     Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "390:  proxyMultipleIncludersSite2 := &projcontour.HTTPProxy{",
          "391:   ObjectMeta: metav1.ObjectMeta{",
          "392:    Name:      \"site2\",",
          "394:   },",
          "395:   Spec: projcontour.HTTPProxySpec{",
          "396:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "393:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "426:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "398:    },",
          "399:    Includes: []projcontour.Include{{",
          "400:     Name:      \"www\",",
          "402:    }},",
          "403:   },",
          "404:  }",
          "",
          "[Removed Lines]",
          "401:     Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "434:     Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "406:  proxyMultiIncludeChild := &projcontour.HTTPProxy{",
          "407:   ObjectMeta: metav1.ObjectMeta{",
          "408:    Name:      \"www\",",
          "410:   },",
          "411:   Spec: projcontour.HTTPProxySpec{",
          "412:    Routes: []projcontour.Route{{",
          "",
          "[Removed Lines]",
          "409:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "442:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "418:   },",
          "419:  }",
          "426:   },",
          "430:    },",
          "440:   },",
          "445:   ObjectMeta: metav1.ObjectMeta{",
          "446:    Namespace: \"roots\",",
          "447:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "422:  proxy1 := &projcontour.HTTPProxy{",
          "423:   ObjectMeta: metav1.ObjectMeta{",
          "424:    Namespace: \"roots\",",
          "425:    Name:      \"example\",",
          "427:   Spec: projcontour.HTTPProxySpec{",
          "428:    VirtualHost: &projcontour.VirtualHost{",
          "429:     Fqdn: \"example.com\",",
          "431:    Routes: []projcontour.Route{{",
          "432:     Conditions: []projcontour.MatchCondition{{",
          "433:      Prefix: \"/foo\",",
          "434:     }},",
          "435:     Services: []projcontour.Service{{",
          "436:      Name: \"home\",",
          "437:      Port: 8080,",
          "438:     }},",
          "439:    }},",
          "441:  }",
          "444:  proxy2 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "454:  run(\"two root httpproxies with different hostnames delegated to the same object are valid\", testcase{",
          "455:   objs: []interface{}{",
          "456:    fixture.ServiceRootsKuard, proxyMultipleIncludersSite1, proxyMultipleIncludersSite2, proxyMultiIncludeChild,",
          "458:   want: map[types.NamespacedName]Status{",
          "459:    {Name: proxyMultipleIncludersSite1.Name, Namespace: proxyMultipleIncludersSite1.Namespace}: {",
          "460:     Object:      proxyMultipleIncludersSite1,",
          "461:     Status:      \"valid\",",
          "462:     Description: \"valid HTTPProxy\",",
          "463:     Vhost:       \"site1.com\",",
          "464:    },",
          "465:    {Name: proxyMultipleIncludersSite2.Name, Namespace: proxyMultipleIncludersSite2.Namespace}: {",
          "466:     Object:      proxyMultipleIncludersSite2,",
          "467:     Status:      \"valid\",",
          "468:     Description: \"valid HTTPProxy\",",
          "469:     Vhost:       \"site2.com\",",
          "470:    },",
          "471:    {Name: proxyMultiIncludeChild.Name, Namespace: proxyMultiIncludeChild.Namespace}: {",
          "472:     Object:      proxyMultiIncludeChild,",
          "473:     Status:      \"valid\",",
          "474:     Description: \"valid HTTPProxy\",",
          "477:  })",
          "480:  proxyInvalidNegativePortHomeService := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "462:   },",
          "463:  }",
          "467:   ObjectMeta: metav1.ObjectMeta{",
          "468:    Namespace: \"finance\",",
          "469:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "466:  proxy3 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "501:  run(\"invalid port in service\", testcase{",
          "502:   objs: []interface{}{proxyInvalidNegativePortHomeService},",
          "503:   want: map[types.NamespacedName]Status{",
          "504:    {Name: proxyInvalidNegativePortHomeService.Name, Namespace: proxyInvalidNegativePortHomeService.Namespace}: {Object: proxyInvalidNegativePortHomeService, Status: \"invalid\", Description: `service \"home\": port must be in the range 1-65535`, Vhost: \"example.com\"},",
          "505:   },",
          "506:  })",
          "509:  proxyInvalidOutsideRootNamespace := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "484:   },",
          "485:  }",
          "489:   ObjectMeta: metav1.ObjectMeta{",
          "490:    Name:      \"self\",",
          "491:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "488:  proxy6 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "530:  run(\"root proxy outside of roots namespace\", testcase{",
          "531:   objs: []interface{}{proxyInvalidOutsideRootNamespace},",
          "532:   want: map[types.NamespacedName]Status{",
          "533:    {Name: proxyInvalidOutsideRootNamespace.Name, Namespace: proxyInvalidOutsideRootNamespace.Namespace}: {Object: proxyInvalidOutsideRootNamespace, Status: \"invalid\", Description: \"root HTTPProxy cannot be defined in this namespace\"},",
          "534:   },",
          "535:  })",
          "538:  proxyInvalidIncludeCycle := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "510:   },",
          "511:  }",
          "515:   ObjectMeta: metav1.ObjectMeta{",
          "516:    Name:      \"parent\",",
          "517:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "514:  proxy7 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "563:  run(\"proxy self-edge produces a cycle\", testcase{",
          "564:   objs: []interface{}{proxyInvalidIncludeCycle, fixture.ServiceRootsKuard},",
          "565:   want: map[types.NamespacedName]Status{",
          "566:    {Name: proxyInvalidIncludeCycle.Name, Namespace: proxyInvalidIncludeCycle.Namespace}: {",
          "567:     Object:      proxyInvalidIncludeCycle,",
          "568:     Status:      \"invalid\",",
          "569:     Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "570:     Vhost:       \"example.com\",",
          "571:    },",
          "572:   },",
          "573:  })",
          "576:  proxyIncludesProxyWithIncludeCycle := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "530:   },",
          "531:  }",
          "534:   ObjectMeta: metav1.ObjectMeta{",
          "535:    Name:      \"child\",",
          "536:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "533:  proxy8 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "595:  proxyIncludedChildInvalidIncludeCycle := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "546:   },",
          "547:  }",
          "553:   },",
          "561:   },",
          "566:   ObjectMeta: metav1.ObjectMeta{",
          "567:    Namespace: \"roots\",",
          "569:   },",
          "570:   Spec: projcontour.HTTPProxySpec{",
          "572:    Routes: []projcontour.Route{{",
          "576:     Services: []projcontour.Service{{",
          "578:      Port: 8080,",
          "579:     }},",
          "580:    }},",
          "581:   },",
          "582:  }",
          "586:   ObjectMeta: metav1.ObjectMeta{",
          "587:    Namespace: \"roots\",",
          "588:    Name:      \"invalidParent\",",
          "",
          "[Removed Lines]",
          "549:  proxy11 := &projcontour.HTTPProxy{",
          "550:   ObjectMeta: metav1.ObjectMeta{",
          "551:    Name:      \"validChild\",",
          "552:    Namespace: \"roots\",",
          "554:   Spec: projcontour.HTTPProxySpec{",
          "555:    Routes: []projcontour.Route{{",
          "556:     Services: []projcontour.Service{{",
          "557:      Name: \"foo2\",",
          "558:      Port: 8080,",
          "559:     }},",
          "560:    }},",
          "562:  }",
          "565:  proxyNoFQDN := &projcontour.HTTPProxy{",
          "568:    Name:      \"parent\",",
          "571:    VirtualHost: &projcontour.VirtualHost{},",
          "573:     Conditions: []projcontour.MatchCondition{{",
          "574:      Prefix: \"/foo\",",
          "575:     }},",
          "577:      Name: \"foo\",",
          "585:  proxy14 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "611:  run(\"proxy child delegates to parent, producing a cycle\", testcase{",
          "612:   objs: []interface{}{proxyIncludesProxyWithIncludeCycle, proxyIncludedChildInvalidIncludeCycle},",
          "613:   want: map[types.NamespacedName]Status{",
          "614:    {Name: proxyIncludesProxyWithIncludeCycle.Name, Namespace: proxyIncludesProxyWithIncludeCycle.Namespace}: {",
          "615:     Object:      proxyIncludesProxyWithIncludeCycle,",
          "616:     Status:      \"valid\",",
          "617:     Description: \"valid HTTPProxy\",",
          "618:     Vhost:       \"example.com\",",
          "619:    },",
          "620:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: {",
          "621:     Object:      proxyIncludedChildInvalidIncludeCycle,",
          "622:     Status:      \"invalid\",",
          "623:     Description: \"include creates a delegation cycle: roots/parent -> roots/child -> roots/child\",",
          "624:    },",
          "626:  })",
          "628:  run(\"proxy orphaned route\", testcase{",
          "629:   objs: []interface{}{proxyIncludedChildInvalidIncludeCycle},",
          "630:   want: map[types.NamespacedName]Status{",
          "631:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: {Object: proxyIncludedChildInvalidIncludeCycle, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\"},",
          "633:  })",
          "635:  proxyIncludedChildValid := &projcontour.HTTPProxy{",
          "637:    Name:      \"validChild\",",
          "643:      Name: \"foo2\",",
          "651:  proxyNotRootIncludeRootProxy := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "599:   },",
          "600:  }",
          "604:   ObjectMeta: metav1.ObjectMeta{",
          "605:    Namespace: \"roots\",",
          "606:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "603:  proxy15 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "668:  run(\"proxy invalid parent orphans child\", testcase{",
          "669:   objs: []interface{}{proxyNotRootIncludeRootProxy, proxyIncludedChildValid},",
          "670:   want: map[types.NamespacedName]Status{",
          "671:    {Name: proxyNotRootIncludeRootProxy.Name, Namespace: proxyNotRootIncludeRootProxy.Namespace}: {Object: proxyNotRootIncludeRootProxy, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "672:    {Name: proxyIncludedChildValid.Name, Namespace: proxyIncludedChildValid.Namespace}:           {Object: proxyIncludedChildValid, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\"},",
          "673:   },",
          "674:  })",
          "677:  proxyWildCardFQDN := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "621:   },",
          "622:  }",
          "626:   ObjectMeta: metav1.ObjectMeta{",
          "627:    Namespace: \"roots\",",
          "628:    Name:      \"invalidir\",",
          "",
          "[Removed Lines]",
          "625:  proxy16 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "698:  run(\"proxy invalid FQDN contains wildcard\", testcase{",
          "699:   objs: []interface{}{proxyWildCardFQDN},",
          "700:   want: map[types.NamespacedName]Status{",
          "701:    {Name: proxyWildCardFQDN.Name, Namespace: proxyWildCardFQDN.Namespace}: {Object: proxyWildCardFQDN, Status: \"invalid\", Description: `Spec.VirtualHost.Fqdn \"example.*.com\" cannot use wildcards`, Vhost: \"example.*.com\"},",
          "702:   },",
          "703:  })",
          "706:  proxyInvalidServiceInvalid := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "643:   },",
          "644:  }",
          "648:   ObjectMeta: metav1.ObjectMeta{",
          "649:    Namespace: \"roots\",",
          "650:    Name:      \"invalidir\",",
          "",
          "[Removed Lines]",
          "647:  proxy16a := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "727:  run(\"proxy missing service is invalid\", testcase{",
          "728:   objs: []interface{}{proxyInvalidServiceInvalid},",
          "729:   want: map[types.NamespacedName]Status{",
          "730:    {Name: proxyInvalidServiceInvalid.Name, Namespace: proxyInvalidServiceInvalid.Namespace}: {",
          "731:     Object:      proxyInvalidServiceInvalid,",
          "732:     Status:      \"invalid\",",
          "733:     Description: `Spec.Routes unresolved service reference: service \"roots/invalid\" not found`,",
          "734:     Vhost:       proxyInvalidServiceInvalid.Spec.VirtualHost.Fqdn,",
          "735:    },",
          "736:   },",
          "737:  })",
          "740:  proxyInvalidServicePortInvalid := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "665:   },",
          "666:  }",
          "669:   ObjectMeta: metav1.ObjectMeta{",
          "670:    Name:      \"example-com\",",
          "671:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "668:  proxy17 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "761:  run(\"proxy with service missing port is invalid\", testcase{",
          "762:   objs: []interface{}{proxyInvalidServicePortInvalid, fixture.ServiceRootsHome},",
          "763:   want: map[types.NamespacedName]Status{",
          "764:    {Name: proxyInvalidServicePortInvalid.Name, Namespace: proxyInvalidServicePortInvalid.Namespace}: {",
          "765:     Object:      proxyInvalidServicePortInvalid,",
          "766:     Status:      \"invalid\",",
          "767:     Description: `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/home\" not matched`,",
          "768:     Vhost:       proxyInvalidServicePortInvalid.Spec.VirtualHost.Fqdn,",
          "769:    },",
          "770:   },",
          "771:  })",
          "773:  proxyValidExampleCom := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "686:   },",
          "687:  }",
          "691:   ObjectMeta: metav1.ObjectMeta{",
          "692:    Name:      \"other-example\",",
          "693:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "690:  proxy18 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "794:  proxyValidReuseExampleCom := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "705:   },",
          "706:  }",
          "719:    },",
          "726:   },",
          "730:   ObjectMeta: metav1.ObjectMeta{",
          "731:    Name:      \"root-blog\",",
          "732:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "708:  proxy19 := &projcontour.HTTPProxy{",
          "709:   ObjectMeta: metav1.ObjectMeta{",
          "710:    Name:      \"app-with-tls-delegation\",",
          "711:    Namespace: \"roots\",",
          "712:   },",
          "713:   Spec: projcontour.HTTPProxySpec{",
          "714:    VirtualHost: &projcontour.VirtualHost{",
          "715:     Fqdn: \"app-with-tls-delegation.127.0.0.1.nip.io\",",
          "716:     TLS: &projcontour.TLS{",
          "717:      SecretName: secretContourNS.Namespace + \"/\" + secretContourNS.Name,",
          "718:     },",
          "720:    Routes: []projcontour.Route{{",
          "721:     Services: []projcontour.Service{{",
          "722:      Name: \"sample-app\",",
          "723:      Port: 80,",
          "724:     }},",
          "725:    }},",
          "727:  }",
          "729:  proxy20 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "812:  run(\"conflicting proxies due to fqdn reuse\", testcase{",
          "813:   objs: []interface{}{proxyValidExampleCom, proxyValidReuseExampleCom},",
          "814:   want: map[types.NamespacedName]Status{",
          "815:    {Name: proxyValidExampleCom.Name, Namespace: proxyValidExampleCom.Namespace}: {",
          "816:     Object:      proxyValidExampleCom,",
          "817:     Status:      k8s.StatusInvalid,",
          "818:     Description: `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`,",
          "819:     Vhost:       \"example.com\",",
          "820:    },",
          "821:    {Name: proxyValidReuseExampleCom.Name, Namespace: proxyValidReuseExampleCom.Namespace}: {",
          "822:     Object:      proxyValidReuseExampleCom,",
          "823:     Status:      k8s.StatusInvalid,",
          "824:     Description: `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`,",
          "825:     Vhost:       \"example.com\",",
          "828:  })",
          "830:  proxyRootIncludesRoot := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "748:   },",
          "749:  }",
          "752:   ObjectMeta: metav1.ObjectMeta{",
          "753:    Name:      \"blog\",",
          "755:   },",
          "756:   Spec: projcontour.HTTPProxySpec{",
          "757:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "751:  proxy21 := &projcontour.HTTPProxy{",
          "754:    Namespace: serviceGreenMarketing.Namespace,",
          "",
          "[Added Lines]",
          "852:  proxyRootIncludedByRoot := &projcontour.HTTPProxy{",
          "855:    Namespace: fixture.ServiceMarketingGreen.Namespace,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "762:    },",
          "763:    Routes: []projcontour.Route{{",
          "764:     Services: []projcontour.Service{{",
          "766:      Port: 80,",
          "767:     }},",
          "768:    }},",
          "769:   },",
          "770:  }",
          "773:   ObjectMeta: metav1.ObjectMeta{",
          "774:    Name:      \"root-blog\",",
          "775:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "765:      Name: serviceGreenMarketing.Name,",
          "772:  proxy22 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "866:      Name: fixture.ServiceMarketingGreen.Name,",
          "873:  run(\"root proxy including another root\", testcase{",
          "874:   objs: []interface{}{proxyRootIncludesRoot, proxyRootIncludedByRoot},",
          "875:   want: map[types.NamespacedName]Status{",
          "876:    {Name: proxyRootIncludesRoot.Name, Namespace: proxyRootIncludesRoot.Namespace}: {",
          "877:     Object:      proxyRootIncludesRoot,",
          "878:     Status:      k8s.StatusInvalid,",
          "879:     Description: `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`,",
          "880:     Vhost:       \"blog.containersteve.com\",",
          "881:    },",
          "882:    {Name: proxyRootIncludedByRoot.Name, Namespace: proxyRootIncludedByRoot.Namespace}: {",
          "883:     Object:      proxyRootIncludedByRoot,",
          "884:     Status:      k8s.StatusInvalid,",
          "885:     Description: `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`,",
          "886:     Vhost:       \"blog.containersteve.com\",",
          "887:    },",
          "888:   },",
          "889:  })",
          "891:  proxyIncludesRootDifferentFQDN := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "788:   },",
          "789:  }",
          "792:   ObjectMeta: metav1.ObjectMeta{",
          "793:    Name:      \"blog\",",
          "795:   },",
          "796:   Spec: projcontour.HTTPProxySpec{",
          "797:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "791:  proxy23 := &projcontour.HTTPProxy{",
          "794:    Namespace: serviceGreenMarketing.Namespace,",
          "",
          "[Added Lines]",
          "910:  proxyRootIncludedByRootDiffFQDN := &projcontour.HTTPProxy{",
          "913:    Namespace: fixture.ServiceMarketingGreen.Namespace,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "799:    },",
          "800:    Routes: []projcontour.Route{{",
          "801:     Services: []projcontour.Service{{",
          "803:      Port: 80,",
          "804:     }},",
          "805:    }},",
          "806:   },",
          "807:  }",
          "810:   ObjectMeta: metav1.ObjectMeta{",
          "811:    Name:      \"blog\",",
          "813:   },",
          "814:   Spec: projcontour.HTTPProxySpec{",
          "815:    Routes: []projcontour.Route{{",
          "816:     Services: []projcontour.Service{{",
          "818:      Port: 80,",
          "819:     }},",
          "820:    }},",
          "821:   },",
          "822:  }",
          "825:   ObjectMeta: metav1.ObjectMeta{",
          "826:    Name:      \"root-blog\",",
          "827:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "802:      Name: serviceGreenMarketing.Name,",
          "809:  proxyBlogMarketing := &projcontour.HTTPProxy{",
          "812:    Namespace: serviceGreenMarketing.Namespace,",
          "817:      Name: serviceGreenMarketing.Name,",
          "824:  proxy25 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "921:      Name: fixture.ServiceMarketingGreen.Name,",
          "928:  run(\"root proxy including another root w/ different hostname\", testcase{",
          "929:   objs: []interface{}{proxyIncludesRootDifferentFQDN, proxyRootIncludedByRootDiffFQDN, fixture.ServiceMarketingGreen},",
          "930:   want: map[types.NamespacedName]Status{",
          "931:    {Name: proxyIncludesRootDifferentFQDN.Name, Namespace: proxyIncludesRootDifferentFQDN.Namespace}: {",
          "932:     Object:      proxyIncludesRootDifferentFQDN,",
          "933:     Status:      k8s.StatusInvalid,",
          "934:     Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "935:     Vhost:       \"blog.containersteve.com\",",
          "936:    },",
          "937:    {Name: proxyRootIncludedByRootDiffFQDN.Name, Namespace: proxyRootIncludedByRootDiffFQDN.Namespace}: {",
          "938:     Object:      proxyRootIncludedByRootDiffFQDN,",
          "939:     Status:      k8s.StatusValid,",
          "940:     Description: `valid HTTPProxy`,",
          "941:     Vhost:       \"www.containersteve.com\",",
          "942:    },",
          "943:   },",
          "944:  })",
          "946:  proxyValidIncludeBlogMarketing := &projcontour.HTTPProxy{",
          "949:    Namespace: fixture.ServiceMarketingGreen.Namespace,",
          "954:      Name: fixture.ServiceMarketingGreen.Name,",
          "961:  proxyRootValidIncludesBlogMarketing := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "831:     Fqdn: \"example.com\",",
          "832:    },",
          "833:    Includes: []projcontour.Include{{",
          "836:     Conditions: []projcontour.MatchCondition{{",
          "837:      Prefix: \"/blog\",",
          "838:     }},",
          "",
          "[Removed Lines]",
          "834:     Name:      proxyBlogMarketing.Name,",
          "835:     Namespace: proxyBlogMarketing.Namespace,",
          "",
          "[Added Lines]",
          "971:     Name:      proxyValidIncludeBlogMarketing.Name,",
          "972:     Namespace: proxyValidIncludeBlogMarketing.Namespace,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "840:   },",
          "841:  }",
          "844:   ObjectMeta: metav1.ObjectMeta{",
          "845:    Name:      \"www\",",
          "847:   },",
          "848:   Spec: projcontour.HTTPProxySpec{",
          "849:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "843:  proxy26 := &projcontour.HTTPProxy{",
          "846:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "980:  run(\"proxy includes another\", testcase{",
          "981:   objs: []interface{}{proxyValidIncludeBlogMarketing, proxyRootValidIncludesBlogMarketing, fixture.ServiceRootsKuard, fixture.ServiceMarketingGreen},",
          "982:   want: map[types.NamespacedName]Status{",
          "983:    {Name: proxyValidIncludeBlogMarketing.Name, Namespace: proxyValidIncludeBlogMarketing.Namespace}: {",
          "984:     Object:      proxyValidIncludeBlogMarketing,",
          "985:     Status:      \"valid\",",
          "986:     Description: \"valid HTTPProxy\",",
          "987:    },",
          "988:    {Name: proxyRootValidIncludesBlogMarketing.Name, Namespace: proxyRootValidIncludesBlogMarketing.Namespace}: {",
          "989:     Object:      proxyRootValidIncludesBlogMarketing,",
          "990:     Status:      \"valid\",",
          "991:     Description: \"valid HTTPProxy\",",
          "992:     Vhost:       \"example.com\",",
          "993:    },",
          "994:   },",
          "995:  })",
          "997:  proxyValidWithMirror := &projcontour.HTTPProxy{",
          "1000:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "851:    },",
          "852:    Routes: []projcontour.Route{{",
          "853:     Services: []projcontour.Service{{",
          "855:      Port: 8080,",
          "856:     }, {",
          "858:      Port: 8080,",
          "859:     }, {",
          "861:      Port:   8080,",
          "862:      Mirror: true,",
          "863:     }},",
          "864:    }},",
          "865:   },",
          "866:  }",
          "868:   ObjectMeta: metav1.ObjectMeta{",
          "869:    Name:      \"www\",",
          "871:   },",
          "872:   Spec: projcontour.HTTPProxySpec{",
          "873:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "854:      Name: serviceKuard.Name,",
          "857:      Name: serviceKuard.Name,",
          "860:      Name:   serviceKuard.Name,",
          "867:  proxy27 := &projcontour.HTTPProxy{",
          "870:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1008:      Name: fixture.ServiceRootsKuard.Name,",
          "1011:      Name: fixture.ServiceRootsKuard.Name,",
          "1014:      Name:   fixture.ServiceRootsKuard.Name,",
          "1022:  run(\"proxy with mirror\", testcase{",
          "1023:   objs: []interface{}{proxyValidWithMirror, fixture.ServiceRootsKuard},",
          "1024:   want: map[types.NamespacedName]Status{",
          "1025:    {Name: proxyValidWithMirror.Name, Namespace: proxyValidWithMirror.Namespace}: {",
          "1026:     Object:      proxyValidWithMirror,",
          "1027:     Status:      \"valid\",",
          "1028:     Description: \"valid HTTPProxy\",",
          "1029:     Vhost:       \"example.com\",",
          "1030:    },",
          "1031:   },",
          "1032:  })",
          "1034:  proxyInvalidTwoMirrors := &projcontour.HTTPProxy{",
          "1037:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "875:    },",
          "876:    Routes: []projcontour.Route{{",
          "877:     Services: []projcontour.Service{{",
          "879:      Port: 8080,",
          "880:     }, {",
          "882:      Port:   8080,",
          "883:      Mirror: true,",
          "884:     }, {",
          "886:      Port:   8080,",
          "887:      Mirror: true,",
          "888:     }},",
          "889:    }},",
          "890:   },",
          "891:  }",
          "894:   ObjectMeta: metav1.ObjectMeta{",
          "895:    Namespace: \"roots\",",
          "896:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "878:      Name: serviceKuard.Name,",
          "881:      Name:   serviceKuard.Name,",
          "885:      Name:   serviceKuard.Name,",
          "893:  proxy28 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1045:      Name: fixture.ServiceRootsKuard.Name,",
          "1048:      Name:   fixture.ServiceRootsKuard.Name,",
          "1052:      Name:   fixture.ServiceRootsKuard.Name,",
          "1060:  run(\"proxy with two mirrors\", testcase{",
          "1061:   objs: []interface{}{proxyInvalidTwoMirrors, fixture.ServiceRootsKuard},",
          "1062:   want: map[types.NamespacedName]Status{",
          "1063:    {Name: proxyInvalidTwoMirrors.Name, Namespace: proxyInvalidTwoMirrors.Namespace}: {",
          "1064:     Object:      proxyInvalidTwoMirrors,",
          "1065:     Status:      \"invalid\",",
          "1066:     Description: \"only one service per route may be nominated as mirror\",",
          "1067:     Vhost:       \"example.com\",",
          "1068:    },",
          "1069:   },",
          "1070:  })",
          "1072:  proxyInvalidDuplicateMatchConditionHeaders := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "921:   },",
          "922:  }",
          "926:   ObjectMeta: metav1.ObjectMeta{",
          "927:    Namespace: \"roots\",",
          "928:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "925:  proxy29 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1103:  run(\"duplicate route condition headers\", testcase{",
          "1104:   objs: []interface{}{proxyInvalidDuplicateMatchConditionHeaders, fixture.ServiceRootsHome},",
          "1105:   want: map[types.NamespacedName]Status{",
          "1106:    {Name: proxyInvalidDuplicateMatchConditionHeaders.Name, Namespace: proxyInvalidDuplicateMatchConditionHeaders.Namespace}: {",
          "1107:     Object: proxyInvalidDuplicateMatchConditionHeaders,",
          "1108:     Status: \"invalid\", Description: \"cannot specify duplicate header 'exact match' conditions in the same route\",",
          "1109:     Vhost: \"example.com\",",
          "1110:    },",
          "1111:   },",
          "1112:  })",
          "1114:  proxyInvalidDuplicateIncludeCondtionHeaders := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "956:    }},",
          "957:   },",
          "958:  }",
          "960:   ObjectMeta: metav1.ObjectMeta{",
          "961:    Namespace: \"roots\",",
          "962:    Name:      \"delegated\",",
          "",
          "[Removed Lines]",
          "959:  proxy30 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1148:  proxyValidDelegatedRoots := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "970:    }},",
          "971:   },",
          "972:  }",
          "975:   ObjectMeta: metav1.ObjectMeta{",
          "976:    Namespace: \"roots\",",
          "977:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "974:  proxy31 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1163:  run(\"duplicate include condition headers\", testcase{",
          "1164:   objs: []interface{}{proxyInvalidDuplicateIncludeCondtionHeaders, proxyValidDelegatedRoots, fixture.ServiceRootsHome},",
          "1165:   want: map[types.NamespacedName]Status{",
          "1166:    {Name: proxyInvalidDuplicateIncludeCondtionHeaders.Name,",
          "1167:     Namespace: proxyInvalidDuplicateIncludeCondtionHeaders.Namespace}: {",
          "1168:     Object: proxyInvalidDuplicateIncludeCondtionHeaders,",
          "1169:     Status: \"valid\", Description: \"valid HTTPProxy\",",
          "1170:     Vhost: \"example.com\",",
          "1171:    },",
          "1172:    {Name: proxyValidDelegatedRoots.Name,",
          "1173:     Namespace: proxyValidDelegatedRoots.Namespace}: {",
          "1174:     Object:      proxyValidDelegatedRoots,",
          "1175:     Status:      \"invalid\",",
          "1176:     Description: \"cannot specify duplicate header 'exact match' conditions in the same route\",",
          "1177:     Vhost:       \"\"},",
          "1178:   },",
          "1179:  })",
          "1181:  proxyInvalidRouteConditionHeaders := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1001:    }},",
          "1002:   },",
          "1003:  }",
          "1005:   ObjectMeta: metav1.ObjectMeta{",
          "1006:    Name:      \"www\",",
          "1008:   },",
          "1009:   Spec: projcontour.HTTPProxySpec{",
          "1010:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1004:  proxy32 := &projcontour.HTTPProxy{",
          "1007:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1212:  run(\"duplicate valid route condition headers\", testcase{",
          "1213:   objs: []interface{}{proxyInvalidRouteConditionHeaders, fixture.ServiceRootsHome},",
          "1214:   want: map[types.NamespacedName]Status{",
          "1215:    {Name: proxyInvalidRouteConditionHeaders.Name, Namespace: proxyInvalidRouteConditionHeaders.Namespace}: {",
          "1216:     Object: proxyInvalidRouteConditionHeaders,",
          "1217:     Status: \"valid\", Description: \"valid HTTPProxy\",",
          "1218:     Vhost: \"example.com\",",
          "1219:    },",
          "1220:   },",
          "1221:  })",
          "1223:  proxyInvalidMultiplePrefixes := &projcontour.HTTPProxy{",
          "1226:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1019:      },",
          "1020:     },",
          "1021:     Services: []projcontour.Service{{",
          "1023:      Port: 8080,",
          "1024:     }},",
          "1025:    }},",
          "1026:   },",
          "1027:  }",
          "1030:   ObjectMeta: metav1.ObjectMeta{",
          "1031:    Name:      \"www\",",
          "1033:   },",
          "1034:   Spec: projcontour.HTTPProxySpec{",
          "1035:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1022:      Name: serviceKuard.Name,",
          "1029:  proxy33 := &projcontour.HTTPProxy{",
          "1032:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1241:      Name: fixture.ServiceRootsKuard.Name,",
          "1248:  run(\"proxy with two prefix conditions on route\", testcase{",
          "1249:   objs: []interface{}{proxyInvalidMultiplePrefixes, fixture.ServiceRootsKuard},",
          "1250:   want: map[types.NamespacedName]Status{",
          "1251:    {Name: proxyInvalidMultiplePrefixes.Name, Namespace: proxyInvalidMultiplePrefixes.Namespace}: {",
          "1252:     Object:      proxyInvalidMultiplePrefixes,",
          "1253:     Status:      \"invalid\",",
          "1254:     Description: \"route: more than one prefix is not allowed in a condition block\",",
          "1255:     Vhost:       \"example.com\",",
          "1256:    },",
          "1257:   },",
          "1258:  })",
          "1260:  proxyInvalidTwoPrefixesWithInclude := &projcontour.HTTPProxy{",
          "1263:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1048:    }},",
          "1049:    Routes: []projcontour.Route{{",
          "1050:     Services: []projcontour.Service{{",
          "1052:      Port: 8080,",
          "1053:     }},",
          "1054:    }},",
          "1055:   },",
          "1056:  }",
          "1058:   ObjectMeta: metav1.ObjectMeta{",
          "1059:    Name:      \"child\",",
          "1060:    Namespace: \"teama\",",
          "",
          "[Removed Lines]",
          "1051:      Name: serviceKuard.Name,",
          "1057:  proxy34 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1282:      Name: fixture.ServiceRootsKuard.Name,",
          "1289:  proxyValidChildTeamA := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1062:   Spec: projcontour.HTTPProxySpec{",
          "1063:    Routes: []projcontour.Route{{",
          "1064:     Services: []projcontour.Service{{",
          "1066:      Port: 8080,",
          "1067:     }},",
          "1068:    }},",
          "1069:   },",
          "1070:  }",
          "1073:   ObjectMeta: metav1.ObjectMeta{",
          "1074:    Name:      \"www\",",
          "1076:   },",
          "1077:   Spec: projcontour.HTTPProxySpec{",
          "1078:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1065:      Name: serviceKuard.Name,",
          "1072:  proxy35 := &projcontour.HTTPProxy{",
          "1075:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1297:      Name: fixture.ServiceRootsKuard.Name,",
          "1304:  run(\"proxy with two prefix conditions orphans include\", testcase{",
          "1305:   objs: []interface{}{proxyInvalidTwoPrefixesWithInclude, proxyValidChildTeamA, fixture.ServiceRootsKuard},",
          "1306:   want: map[types.NamespacedName]Status{",
          "1307:    {Name: proxyInvalidTwoPrefixesWithInclude.Name, Namespace: proxyInvalidTwoPrefixesWithInclude.Namespace}: {",
          "1308:     Object:      proxyInvalidTwoPrefixesWithInclude,",
          "1309:     Status:      \"invalid\",",
          "1310:     Description: \"include: more than one prefix is not allowed in a condition block\",",
          "1311:     Vhost:       \"example.com\",",
          "1312:    }, {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: {",
          "1313:     Object:      proxyValidChildTeamA,",
          "1314:     Status:      \"orphaned\",",
          "1315:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1316:    },",
          "1317:   },",
          "1318:  })",
          "1320:  proxyInvalidPrefixNoSlash := &projcontour.HTTPProxy{",
          "1323:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1085:      },",
          "1086:     },",
          "1087:     Services: []projcontour.Service{{",
          "1089:      Port: 8080,",
          "1090:     }},",
          "1091:    }},",
          "1092:   },",
          "1093:  }",
          "1096:   ObjectMeta: metav1.ObjectMeta{",
          "1097:    Name:      \"www\",",
          "1099:   },",
          "1100:   Spec: projcontour.HTTPProxySpec{",
          "1101:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1088:      Name: serviceKuard.Name,",
          "1095:  proxy36 := &projcontour.HTTPProxy{",
          "1098:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1336:      Name: fixture.ServiceRootsKuard.Name,",
          "1343:  run(\"proxy with prefix conditions on route that does not start with slash\", testcase{",
          "1344:   objs: []interface{}{proxyInvalidPrefixNoSlash, fixture.ServiceRootsKuard},",
          "1345:   want: map[types.NamespacedName]Status{",
          "1346:    {Name: proxyInvalidPrefixNoSlash.Name, Namespace: proxyInvalidPrefixNoSlash.Namespace}: {",
          "1347:     Object:      proxyInvalidPrefixNoSlash,",
          "1348:     Status:      \"invalid\",",
          "1349:     Description: \"route: prefix conditions must start with /, api was supplied\",",
          "1350:     Vhost:       \"example.com\",",
          "1351:    },",
          "1352:   },",
          "1353:  })",
          "1355:  proxyInvalidIncludePrefixNoSlash := &projcontour.HTTPProxy{",
          "1358:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1112:    }},",
          "1113:    Routes: []projcontour.Route{{",
          "1114:     Services: []projcontour.Service{{",
          "1116:      Port: 8080,",
          "1117:     }},",
          "1118:    }},",
          "1119:   },",
          "1120:  }",
          "1127:    Namespace: \"roots\",",
          "1128:   },",
          "1129:   Spec: projcontour.HTTPProxySpec{",
          "",
          "[Removed Lines]",
          "1115:      Name: serviceKuard.Name,",
          "1124:  proxy37 := &projcontour.HTTPProxy{",
          "1125:   ObjectMeta: metav1.ObjectMeta{",
          "1126:    Name:      \"simple\",",
          "",
          "[Added Lines]",
          "1375:      Name: fixture.ServiceRootsKuard.Name,",
          "1382:  run(\"proxy with include prefix that does not start with slash\", testcase{",
          "1383:   objs: []interface{}{proxyInvalidIncludePrefixNoSlash, proxyValidChildTeamA, fixture.ServiceRootsKuard},",
          "1384:   want: map[types.NamespacedName]Status{",
          "1385:    {Name: proxyInvalidIncludePrefixNoSlash.Name, Namespace: proxyInvalidIncludePrefixNoSlash.Namespace}: {",
          "1386:     Object:      proxyInvalidIncludePrefixNoSlash,",
          "1387:     Status:      \"invalid\",",
          "1388:     Description: \"include: prefix conditions must start with /, api was supplied\",",
          "1389:     Vhost:       \"example.com\",",
          "1390:    }, {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: {",
          "1391:     Object:      proxyValidChildTeamA,",
          "1392:     Status:      \"orphaned\",",
          "1393:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1394:    },",
          "1395:   },",
          "1396:  })",
          "1398:  proxyInvalidTCPProxyIncludeAndService := &projcontour.HTTPProxy{",
          "1399:   ObjectMeta: metav1.ObjectMeta{",
          "1400:    Name:      \"simple\",",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1139:      Namespace: \"roots\",",
          "1140:     },",
          "1141:     Services: []projcontour.Service{{",
          "1143:      Port: 8080,",
          "1144:     }},",
          "1145:    },",
          "1146:   },",
          "1147:  }",
          "1152:   ObjectMeta: metav1.ObjectMeta{",
          "1153:    Name:      \"simple\",",
          "1154:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "1142:      Name: serviceKuard.Name,",
          "1151:  proxy37a := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1416:      Name: fixture.ServiceRootsKuard.Name,",
          "1423:  run(\"tcpproxy cannot specify services and include\", testcase{",
          "1424:   objs: []interface{}{proxyInvalidTCPProxyIncludeAndService, fixture.ServiceRootsKuard},",
          "1425:   want: map[types.NamespacedName]Status{",
          "1426:    {Name: proxyInvalidTCPProxyIncludeAndService.Name, Namespace: proxyInvalidTCPProxyIncludeAndService.Namespace}: {",
          "1427:     Object:      proxyInvalidTCPProxyIncludeAndService,",
          "1428:     Status:      \"invalid\",",
          "1429:     Description: \"tcpproxy: cannot specify services and include in the same httpproxy\",",
          "1430:     Vhost:       \"passthrough.example.com\",",
          "1431:    },",
          "1432:   },",
          "1433:  })",
          "1435:  proxyTCPNoServiceOrInclusion := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1164:   },",
          "1165:  }",
          "1170:   ObjectMeta: metav1.ObjectMeta{",
          "1171:    Name:      \"simple\",",
          "1172:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "1169:  proxy38 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1451:  run(\"tcpproxy empty\", testcase{",
          "1452:   objs: []interface{}{proxyTCPNoServiceOrInclusion, fixture.ServiceRootsKuard},",
          "1453:   want: map[types.NamespacedName]Status{",
          "1454:    {Name: proxyTCPNoServiceOrInclusion.Name, Namespace: proxyTCPNoServiceOrInclusion.Namespace}: {",
          "1455:     Object:      proxyTCPNoServiceOrInclusion,",
          "1456:     Status:      \"invalid\",",
          "1457:     Description: \"tcpproxy: either services or inclusion must be specified\",",
          "1458:     Vhost:       \"passthrough.example.com\",",
          "1459:    },",
          "1460:   },",
          "1461:  })",
          "1463:  proxyTCPIncludesFoo := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1181:    TCPProxy: &projcontour.TCPProxy{",
          "1182:     Include: &projcontour.TCPProxyInclude{",
          "1183:      Name:      \"foo\",",
          "1185:     },",
          "1186:    },",
          "1187:   },",
          "1188:  }",
          "1191:   ObjectMeta: metav1.ObjectMeta{",
          "1192:    Name:      \"foo\",",
          "1194:   },",
          "1195:   Spec: projcontour.HTTPProxySpec{",
          "1196:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1184:      Namespace: serviceKuard.Namespace,",
          "1190:  proxy39 := &projcontour.HTTPProxy{",
          "1193:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1478:      Namespace: fixture.ServiceRootsKuard.Namespace,",
          "1484:  run(\"tcpproxy w/ missing include\", testcase{",
          "1485:   objs: []interface{}{proxyTCPIncludesFoo, fixture.ServiceRootsKuard},",
          "1486:   want: map[types.NamespacedName]Status{",
          "1487:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: {",
          "1488:     Object:      proxyTCPIncludesFoo,",
          "1489:     Status:      \"invalid\",",
          "1490:     Description: \"tcpproxy: include roots/foo not found\",",
          "1491:     Vhost:       \"passthrough.example.com\",",
          "1492:    },",
          "1493:   },",
          "1494:  })",
          "1496:  proxyValidTCPRoot := &projcontour.HTTPProxy{",
          "1499:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1201:    },",
          "1202:    TCPProxy: &projcontour.TCPProxy{",
          "1203:     Services: []projcontour.Service{{",
          "1205:      Port: 8080,",
          "1206:     }},",
          "1207:    },",
          "1208:   },",
          "1209:  }",
          "1212:   ObjectMeta: metav1.ObjectMeta{",
          "1213:    Name:      \"foo\",",
          "1215:   },",
          "1216:   Spec: projcontour.HTTPProxySpec{",
          "1217:    TCPProxy: &projcontour.TCPProxy{",
          "1218:     Services: []projcontour.Service{{",
          "1220:      Port: 8080,",
          "1221:     }},",
          "1222:    },",
          "1223:   },",
          "1224:  }",
          "1228:   ObjectMeta: metav1.ObjectMeta{",
          "1229:    Namespace: \"roots\",",
          "1230:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "1204:      Name: serviceKuard.Name,",
          "1211:  proxy40 := &projcontour.HTTPProxy{",
          "1214:    Namespace: serviceKuard.Namespace,",
          "1219:      Name: serviceKuard.Name,",
          "1227:  proxy41 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1510:      Name: fixture.ServiceRootsKuard.Name,",
          "1517:  run(\"tcpproxy includes another root\", testcase{",
          "1518:   objs: []interface{}{proxyTCPIncludesFoo, proxyValidTCPRoot, fixture.ServiceRootsKuard},",
          "1519:   want: map[types.NamespacedName]Status{",
          "1520:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: {",
          "1521:     Object:      proxyTCPIncludesFoo,",
          "1522:     Status:      \"invalid\",",
          "1523:     Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "1524:     Vhost:       \"passthrough.example.com\",",
          "1525:    },",
          "1526:    {Name: proxyValidTCPRoot.Name, Namespace: proxyValidTCPRoot.Namespace}: {",
          "1527:     Object:      proxyValidTCPRoot,",
          "1528:     Status:      \"valid\",",
          "1529:     Description: \"valid HTTPProxy\",",
          "1530:     Vhost:       \"www.example.com\",",
          "1531:    },",
          "1532:   },",
          "1533:  })",
          "1535:  proxyTCPValidChildFoo := &projcontour.HTTPProxy{",
          "1538:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "1543:      Name: fixture.ServiceRootsKuard.Name,",
          "1550:  run(\"tcpproxy includes valid child\", testcase{",
          "1551:   objs: []interface{}{proxyTCPIncludesFoo, proxyTCPValidChildFoo, fixture.ServiceRootsKuard},",
          "1552:   want: map[types.NamespacedName]Status{",
          "1553:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: {",
          "1554:     Object:      proxyTCPIncludesFoo,",
          "1555:     Status:      \"valid\",",
          "1556:     Description: \"valid HTTPProxy\",",
          "1557:     Vhost:       \"passthrough.example.com\",",
          "1558:    },",
          "1559:    {Name: proxyTCPValidChildFoo.Name, Namespace: proxyTCPValidChildFoo.Namespace}: {",
          "1560:     Object:      proxyTCPValidChildFoo,",
          "1561:     Status:      \"valid\",",
          "1562:     Description: \"valid HTTPProxy\",",
          "1563:     Vhost:       \"passthrough.example.com\",",
          "1564:    },",
          "1565:   },",
          "1566:  })",
          "1568:  proxyInvalidConflictingIncludeConditions := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1258:   },",
          "1259:  }",
          "1263:   ObjectMeta: metav1.ObjectMeta{",
          "1264:    Namespace: \"roots\",",
          "1265:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "1262:  proxy42 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1602:  proxyValidBlogTeamA := &projcontour.HTTPProxy{",
          "1603:   ObjectMeta: metav1.ObjectMeta{",
          "1604:    Namespace: \"blogteama\",",
          "1605:    Name:      \"teama\",",
          "1606:   },",
          "1607:   Spec: projcontour.HTTPProxySpec{",
          "1608:    Routes: []projcontour.Route{{",
          "1609:     Conditions: []projcontour.MatchCondition{{",
          "1610:      Prefix: \"/blog\",",
          "1611:     }},",
          "1612:     Services: []projcontour.Service{{",
          "1613:      Name: fixture.ServiceTeamAKuard.Name,",
          "1614:      Port: 8080,",
          "1615:     }},",
          "1616:    }},",
          "1617:   },",
          "1618:  }",
          "1620:  proxyValidBlogTeamB := &projcontour.HTTPProxy{",
          "1621:   ObjectMeta: metav1.ObjectMeta{",
          "1622:    Namespace: \"blogteamb\",",
          "1623:    Name:      \"teamb\",",
          "1624:   },",
          "1625:   Spec: projcontour.HTTPProxySpec{",
          "1626:    Routes: []projcontour.Route{{",
          "1627:     Conditions: []projcontour.MatchCondition{{",
          "1628:      Prefix: \"/blog\",",
          "1629:     }},",
          "1630:     Services: []projcontour.Service{{",
          "1631:      Name: fixture.ServiceTeamBKuard.Name,",
          "1632:      Port: 8080,",
          "1633:     }},",
          "1634:    }},",
          "1635:   },",
          "1636:  }",
          "1638:  run(\"duplicate path conditions on an include\", testcase{",
          "1639:   objs: []interface{}{proxyInvalidConflictingIncludeConditions, proxyValidBlogTeamA, proxyValidBlogTeamB, fixture.ServiceRootsHome, fixture.ServiceTeamAKuard, fixture.ServiceTeamBKuard},",
          "1640:   want: map[types.NamespacedName]Status{",
          "1641:    {Name: proxyInvalidConflictingIncludeConditions.Name,",
          "1642:     Namespace: proxyInvalidConflictingIncludeConditions.Namespace}: {",
          "1643:     Object:      proxyInvalidConflictingIncludeConditions,",
          "1644:     Status:      \"invalid\",",
          "1645:     Description: \"duplicate conditions defined on an include\",",
          "1646:     Vhost:       \"example.com\",",
          "1647:    },",
          "1648:    {Name: proxyValidBlogTeamA.Name, Namespace: proxyValidBlogTeamA.Namespace}: {",
          "1649:     Object:      proxyValidBlogTeamA,",
          "1650:     Status:      \"orphaned\",",
          "1651:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1652:     Vhost:       \"\",",
          "1653:    },",
          "1654:    {Name: proxyValidBlogTeamB.Name, Namespace: proxyValidBlogTeamB.Namespace}: {",
          "1655:     Object:      proxyValidBlogTeamB,",
          "1656:     Status:      \"orphaned\",",
          "1657:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1658:     Vhost:       \"\",",
          "1659:    },",
          "1660:   },",
          "1661:  })",
          "1663:  proxyInvalidConflictHeaderConditions := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1299:   },",
          "1300:  }",
          "1304:   ObjectMeta: metav1.ObjectMeta{",
          "1305:    Namespace: \"roots\",",
          "1306:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "1303:  proxy43 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1703:  run(\"duplicate header conditions on an include\", testcase{",
          "1704:   objs: []interface{}{proxyInvalidConflictHeaderConditions, proxyValidBlogTeamA, proxyValidBlogTeamB, fixture.ServiceRootsHome, fixture.ServiceTeamAKuard, fixture.ServiceTeamBKuard},",
          "1705:   want: map[types.NamespacedName]Status{",
          "1706:    {Name: proxyInvalidConflictHeaderConditions.Name,",
          "1707:     Namespace: proxyInvalidConflictHeaderConditions.Namespace}: {",
          "1708:     Object:      proxyInvalidConflictHeaderConditions,",
          "1709:     Status:      \"invalid\",",
          "1710:     Description: \"duplicate conditions defined on an include\",",
          "1711:     Vhost:       \"example.com\",",
          "1712:    },",
          "1713:    {Name: proxyValidBlogTeamA.Name,",
          "1714:     Namespace: proxyValidBlogTeamA.Namespace}: {",
          "1715:     Object:      proxyValidBlogTeamA,",
          "1716:     Status:      \"orphaned\",",
          "1717:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1718:     Vhost:       \"\",",
          "1719:    },",
          "1720:    {Name: proxyValidBlogTeamB.Name,",
          "1721:     Namespace: proxyValidBlogTeamB.Namespace}: {",
          "1722:     Object:      proxyValidBlogTeamB,",
          "1723:     Status:      \"orphaned\",",
          "1724:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1725:     Vhost:       \"\",",
          "1726:    },",
          "1727:   },",
          "1728:  })",
          "1730:  proxyInvalidDuplicateHeaderAndPathConditions := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1342:   },",
          "1343:  }",
          "1380:   },",
          "1385:   ObjectMeta: metav1.ObjectMeta{",
          "1386:    Namespace: \"roots\",",
          "1387:    Name:      \"example\",",
          "",
          "[Removed Lines]",
          "1346:  proxy41a := &projcontour.HTTPProxy{",
          "1347:   ObjectMeta: metav1.ObjectMeta{",
          "1348:    Namespace: \"blogteama\",",
          "1349:    Name:      \"teama\",",
          "1350:   },",
          "1351:   Spec: projcontour.HTTPProxySpec{",
          "1352:    Routes: []projcontour.Route{{",
          "1353:     Conditions: []projcontour.MatchCondition{{",
          "1354:      Prefix: \"/blog\",",
          "1355:     }},",
          "1356:     Services: []projcontour.Service{{",
          "1357:      Name: sericeKuardTeamA.Name,",
          "1358:      Port: 8080,",
          "1359:     }},",
          "1360:    }},",
          "1361:   },",
          "1362:  }",
          "1365:  proxy41b := &projcontour.HTTPProxy{",
          "1366:   ObjectMeta: metav1.ObjectMeta{",
          "1367:    Namespace: \"blogteamb\",",
          "1368:    Name:      \"teamb\",",
          "1369:   },",
          "1370:   Spec: projcontour.HTTPProxySpec{",
          "1371:    Routes: []projcontour.Route{{",
          "1372:     Conditions: []projcontour.MatchCondition{{",
          "1373:      Prefix: \"/blog\",",
          "1374:     }},",
          "1375:     Services: []projcontour.Service{{",
          "1376:      Name: serviceKuardTeamB.Name,",
          "1377:      Port: 8080,",
          "1378:     }},",
          "1379:    }},",
          "1381:  }",
          "1384:  proxy44 := &projcontour.HTTPProxy{",
          "",
          "[Added Lines]",
          "1772:  run(\"duplicate header+path conditions on an include\", testcase{",
          "1773:   objs: []interface{}{proxyInvalidDuplicateHeaderAndPathConditions, proxyValidBlogTeamA, proxyValidBlogTeamB, fixture.ServiceRootsHome, fixture.ServiceTeamAKuard, fixture.ServiceTeamBKuard},",
          "1774:   want: map[types.NamespacedName]Status{",
          "1775:    {Name: proxyInvalidDuplicateHeaderAndPathConditions.Name,",
          "1776:     Namespace: proxyInvalidDuplicateHeaderAndPathConditions.Namespace}: {",
          "1777:     Object:      proxyInvalidDuplicateHeaderAndPathConditions,",
          "1778:     Status:      \"invalid\",",
          "1779:     Description: \"duplicate conditions defined on an include\",",
          "1780:     Vhost:       \"example.com\",",
          "1781:    },",
          "1782:    {Name: proxyValidBlogTeamA.Name,",
          "1783:     Namespace: proxyValidBlogTeamA.Namespace}: {",
          "1784:     Object:      proxyValidBlogTeamA,",
          "1785:     Status:      \"orphaned\",",
          "1786:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1787:     Vhost:       \"\",",
          "1788:    },",
          "1789:    {Name: proxyValidBlogTeamB.Name,",
          "1790:     Namespace: proxyValidBlogTeamB.Namespace}: {",
          "1791:     Object:      proxyValidBlogTeamB,",
          "1792:     Status:      \"orphaned\",",
          "1793:     Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "1794:     Vhost:       \"\",",
          "1795:    },",
          "1797:  })",
          "1799:  proxyInvalidMissingInclude := &projcontour.HTTPProxy{",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1396:   },",
          "1397:  }",
          "1400:   ObjectMeta: metav1.ObjectMeta{",
          "1401:    Name:      \"missing-tcp-proxy-service\",",
          "1403:   },",
          "1404:   Spec: projcontour.HTTPProxySpec{",
          "1405:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1399:  proxy45 := &projcontour.HTTPProxy{",
          "1402:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1814:  run(\"httpproxy w/ missing include\", testcase{",
          "1815:   objs: []interface{}{proxyInvalidMissingInclude, fixture.ServiceRootsKuard},",
          "1816:   want: map[types.NamespacedName]Status{",
          "1817:    {Name: proxyInvalidMissingInclude.Name, Namespace: proxyInvalidMissingInclude.Namespace}: {",
          "1818:     Object:      proxyInvalidMissingInclude,",
          "1819:     Status:      \"invalid\",",
          "1820:     Description: \"include roots/child not found\",",
          "1821:     Vhost:       \"example.com\",",
          "1822:    },",
          "1823:   },",
          "1824:  })",
          "1826:  proxyTCPInvalidMissingService := &projcontour.HTTPProxy{",
          "1829:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1417:   },",
          "1418:  }",
          "1421:   ObjectMeta: metav1.ObjectMeta{",
          "1422:    Name:      \"tcp-proxy-service-missing-port\",",
          "1424:   },",
          "1425:   Spec: projcontour.HTTPProxySpec{",
          "1426:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1420:  proxy45a := &projcontour.HTTPProxy{",
          "1423:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1847:  run(\"httpproxy w/ tcpproxy w/ missing service\", testcase{",
          "1848:   objs: []interface{}{proxyTCPInvalidMissingService},",
          "1849:   want: map[types.NamespacedName]Status{",
          "1850:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: {",
          "1851:     Object:      proxyTCPInvalidMissingService,",
          "1852:     Status:      \"invalid\",",
          "1853:     Description: `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`,",
          "1854:     Vhost:       \"tcpproxy.example.com\",",
          "1855:    },",
          "1856:   },",
          "1857:  })",
          "1859:  proxyTCPInvalidPortNotMatched := &projcontour.HTTPProxy{",
          "1862:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1431:    },",
          "1432:    TCPProxy: &projcontour.TCPProxy{",
          "1433:     Services: []projcontour.Service{{",
          "1435:      Port: 9999,",
          "1436:     }},",
          "1437:    },",
          "1438:   },",
          "1439:  }",
          "1442:   ObjectMeta: metav1.ObjectMeta{",
          "1443:    Name:      \"missing-tls\",",
          "1445:   },",
          "1446:   Spec: projcontour.HTTPProxySpec{",
          "1447:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1434:      Name: serviceKuard.Name,",
          "1441:  proxy46 := &projcontour.HTTPProxy{",
          "1444:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1873:      Name: fixture.ServiceRootsKuard.Name,",
          "1880:  run(\"httpproxy w/ tcpproxy w/ service missing port\", testcase{",
          "1881:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
          "1882:   want: map[types.NamespacedName]Status{",
          "1883:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: {",
          "1884:     Object:      proxyTCPInvalidPortNotMatched,",
          "1885:     Status:      \"invalid\",",
          "1886:     Description: `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`,",
          "1887:     Vhost:       \"tcpproxy.example.com\",",
          "1888:    },",
          "1889:   },",
          "1890:  })",
          "1892:  proxyTCPInvalidMissingTLS := &projcontour.HTTPProxy{",
          "1895:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1449:    },",
          "1450:    TCPProxy: &projcontour.TCPProxy{",
          "1451:     Services: []projcontour.Service{{",
          "1453:      Port: 8080,",
          "1454:     }},",
          "1455:    },",
          "1456:   },",
          "1457:  }",
          "1460:   ObjectMeta: metav1.ObjectMeta{",
          "1461:    Name:      \"missing-route-service\",",
          "1463:   },",
          "1464:   Spec: projcontour.HTTPProxySpec{",
          "1465:    VirtualHost: &projcontour.VirtualHost{",
          "1466:     Fqdn: \"tcpproxy.example.com\",",
          "1467:     TLS: &projcontour.TLS{",
          "1469:     },",
          "1470:    },",
          "1471:    Routes: []projcontour.Route{{",
          "",
          "[Removed Lines]",
          "1452:      Name: serviceKuard.Name,",
          "1459:  proxy47 := &projcontour.HTTPProxy{",
          "1462:    Namespace: serviceKuard.Namespace,",
          "1468:      SecretName: secretRootsNS.Name,",
          "",
          "[Added Lines]",
          "1903:      Name: fixture.ServiceRootsKuard.Name,",
          "1910:  run(\"httpproxy w/ tcpproxy missing tls\", testcase{",
          "1911:   objs: []interface{}{proxyTCPInvalidMissingTLS},",
          "1912:   want: map[types.NamespacedName]Status{",
          "1913:    {Name: proxyTCPInvalidMissingTLS.Name, Namespace: proxyTCPInvalidMissingTLS.Namespace}: {",
          "1914:     Object:      proxyTCPInvalidMissingTLS,",
          "1915:     Status:      \"invalid\",",
          "1916:     Description: \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\",",
          "1917:     Vhost:       \"tcpproxy.example.com\",",
          "1918:    },",
          "1919:   },",
          "1920:  })",
          "1922:  proxyInvalidMissingServiceWithTCPProxy := &projcontour.HTTPProxy{",
          "1925:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "1931:      SecretName: fixture.SecretRootsCert.Name,",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1475:    }},",
          "1476:    TCPProxy: &projcontour.TCPProxy{",
          "1477:     Services: []projcontour.Service{{",
          "1479:      Port: 8080,",
          "1480:     }},",
          "1481:    },",
          "1482:   },",
          "1483:  }",
          "1486:   ObjectMeta: metav1.ObjectMeta{",
          "1487:    Name:      \"missing-route-service-port\",",
          "1489:   },",
          "1490:   Spec: projcontour.HTTPProxySpec{",
          "1491:    VirtualHost: &projcontour.VirtualHost{",
          "1492:     Fqdn: \"tcpproxy.example.com\",",
          "1493:     TLS: &projcontour.TLS{",
          "1495:     },",
          "1496:    },",
          "1497:    Routes: []projcontour.Route{{",
          "1498:     Services: []projcontour.Service{",
          "1500:     },",
          "1501:    }},",
          "1502:    TCPProxy: &projcontour.TCPProxy{",
          "1503:     Services: []projcontour.Service{{",
          "1505:      Port: 8080,",
          "1506:     }},",
          "1507:    },",
          "1508:   },",
          "1509:  }",
          "1512:   ObjectMeta: metav1.ObjectMeta{",
          "1513:    Name:      \"validtcpproxy\",",
          "1515:   },",
          "1516:   Spec: projcontour.HTTPProxySpec{",
          "1517:    VirtualHost: &projcontour.VirtualHost{",
          "1518:     Fqdn: \"tcpproxy.example.com\",",
          "1519:     TLS: &projcontour.TLS{",
          "1521:     },",
          "1522:    },",
          "1523:    TCPProxy: &projcontour.TCPProxy{",
          "1524:     Include: &projcontour.TCPProxyInclude{",
          "1525:      Name:      \"child\",",
          "1527:     },",
          "1528:    },",
          "1529:   },",
          "1530:  }",
          "1533:   ObjectMeta: metav1.ObjectMeta{",
          "1534:    Name:      \"validtcpproxy\",",
          "1536:   },",
          "1537:   Spec: projcontour.HTTPProxySpec{",
          "1538:    VirtualHost: &projcontour.VirtualHost{",
          "1539:     Fqdn: \"tcpproxy.example.com\",",
          "1540:     TLS: &projcontour.TLS{",
          "1542:     },",
          "1543:    },",
          "1544:    TCPProxy: &projcontour.TCPProxy{",
          "1545:     IncludesDeprecated: &projcontour.TCPProxyInclude{",
          "1546:      Name:      \"child\",",
          "1548:     },",
          "1549:    },",
          "1550:   },",
          "1551:  }",
          "1554:   ObjectMeta: metav1.ObjectMeta{",
          "1555:    Name:      \"child\",",
          "1557:   },",
          "1558:   Spec: projcontour.HTTPProxySpec{",
          "1559:    TCPProxy: &projcontour.TCPProxy{",
          "1560:     Services: []projcontour.Service{{",
          "1562:      Port: 8080,",
          "1563:     }},",
          "1564:    },",
          "1565:   },",
          "1566:  }",
          "1570:   ObjectMeta: metav1.ObjectMeta{",
          "1571:    Name:      \"missing-service\",",
          "1573:   },",
          "1574:   Spec: projcontour.HTTPProxySpec{",
          "1575:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1478:      Name: serviceKuard.Name,",
          "1485:  proxy47a := &projcontour.HTTPProxy{",
          "1488:    Namespace: serviceKuard.Namespace,",
          "1494:      SecretName: secretRootsNS.Name,",
          "1499:      {Name: serviceKuard.Name, Port: 9999},",
          "1504:      Name: serviceKuard.Name,",
          "1511:  proxy48root := &projcontour.HTTPProxy{",
          "1514:    Namespace: serviceKuard.Namespace,",
          "1520:      SecretName: secretRootsNS.Name,",
          "1526:      Namespace: serviceKuard.Namespace,",
          "1532:  proxy48rootplural := &projcontour.HTTPProxy{",
          "1535:    Namespace: serviceKuard.Namespace,",
          "1541:      SecretName: secretRootsNS.Name,",
          "1547:      Namespace: serviceKuard.Namespace,",
          "1553:  proxy48child := &projcontour.HTTPProxy{",
          "1556:    Namespace: serviceKuard.Namespace,",
          "1561:      Name: serviceKuard.Name,",
          "1569:  proxy49 := &projcontour.HTTPProxy{",
          "1572:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "1941:      Name: fixture.ServiceRootsKuard.Name,",
          "1948:  run(\"httpproxy w/ tcpproxy missing service\", testcase{",
          "1949:   objs: []interface{}{fixture.SecretRootsCert, fixture.ServiceRootsKuard, proxyInvalidMissingServiceWithTCPProxy},",
          "1950:   want: map[types.NamespacedName]Status{",
          "1951:    {Name: proxyInvalidMissingServiceWithTCPProxy.Name, Namespace: proxyInvalidMissingServiceWithTCPProxy.Namespace}: {",
          "1952:     Object:      proxyInvalidMissingServiceWithTCPProxy,",
          "1953:     Status:      \"invalid\",",
          "1954:     Description: `Spec.Routes unresolved service reference: service \"roots/missing\" not found`,",
          "1955:     Vhost:       \"tcpproxy.example.com\",",
          "1956:    },",
          "1957:   },",
          "1958:  })",
          "1960:  proxyRoutePortNotMatchedWithTCP := &projcontour.HTTPProxy{",
          "1963:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "1969:      SecretName: fixture.SecretRootsCert.Name,",
          "1974:      {Name: fixture.ServiceRootsKuard.Name, Port: 9999},",
          "1979:      Name: fixture.ServiceRootsKuard.Name,",
          "1986:  run(\"tcpproxy route unmatched service port\", testcase{",
          "1987:   objs: []interface{}{fixture.SecretRootsCert, fixture.ServiceRootsKuard, proxyRoutePortNotMatchedWithTCP},",
          "1988:   want: map[types.NamespacedName]Status{",
          "1989:    {Name: proxyRoutePortNotMatchedWithTCP.Name, Namespace: proxyRoutePortNotMatchedWithTCP.Namespace}: {",
          "1990:     Object:      proxyRoutePortNotMatchedWithTCP,",
          "1991:     Status:      \"invalid\",",
          "1992:     Description: `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`,",
          "1993:     Vhost:       \"tcpproxy.example.com\",",
          "1994:    },",
          "1995:   },",
          "1996:  })",
          "1998:  proxyTCPValidIncludeChild := &projcontour.HTTPProxy{",
          "2001:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "2007:      SecretName: fixture.SecretRootsCert.Name,",
          "2013:      Namespace: fixture.ServiceRootsKuard.Namespace,",
          "2019:  proxyTCPValidIncludesChild := &projcontour.HTTPProxy{",
          "2022:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "2028:      SecretName: fixture.SecretRootsCert.Name,",
          "2034:      Namespace: fixture.ServiceRootsKuard.Namespace,",
          "2040:  proxyTCPValidChild := &projcontour.HTTPProxy{",
          "2043:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "2048:      Name: fixture.ServiceRootsKuard.Name,",
          "2055:  run(\"valid HTTPProxy.TCPProxy - plural\", testcase{",
          "2056:   objs: []interface{}{proxyTCPValidIncludesChild, proxyTCPValidChild, fixture.ServiceRootsKuard, fixture.SecretRootsCert},",
          "2057:   want: map[types.NamespacedName]Status{",
          "2058:    {Name: proxyTCPValidIncludesChild.Name,",
          "2059:     Namespace: proxyTCPValidIncludesChild.Namespace}: {",
          "2060:     Object:      proxyTCPValidIncludesChild,",
          "2061:     Status:      \"valid\",",
          "2062:     Description: \"valid HTTPProxy\",",
          "2063:     Vhost:       \"tcpproxy.example.com\",",
          "2064:    },",
          "2065:    {Name: proxyTCPValidChild.Name,",
          "2066:     Namespace: proxyTCPValidChild.Namespace}: {",
          "2067:     Object:      proxyTCPValidChild,",
          "2068:     Status:      \"valid\",",
          "2069:     Description: \"valid HTTPProxy\",",
          "2070:     Vhost:       \"tcpproxy.example.com\",",
          "2071:    },",
          "2072:   },",
          "2073:  })",
          "2075:  run(\"valid HTTPProxy.TCPProxy\", testcase{",
          "2076:   objs: []interface{}{proxyTCPValidIncludeChild, proxyTCPValidChild, fixture.ServiceRootsKuard, fixture.SecretRootsCert},",
          "2077:   want: map[types.NamespacedName]Status{",
          "2078:    {Name: proxyTCPValidIncludeChild.Name,",
          "2079:     Namespace: proxyTCPValidIncludeChild.Namespace}: {",
          "2080:     Object:      proxyTCPValidIncludeChild,",
          "2081:     Status:      \"valid\",",
          "2082:     Description: \"valid HTTPProxy\",",
          "2083:     Vhost:       \"tcpproxy.example.com\",",
          "2084:    },",
          "2085:    {Name: proxyTCPValidChild.Name,",
          "2086:     Namespace: proxyTCPValidChild.Namespace}: {",
          "2087:     Object:      proxyTCPValidChild,",
          "2088:     Status:      \"valid\",",
          "2089:     Description: \"valid HTTPProxy\",",
          "2090:     Vhost:       \"tcpproxy.example.com\"},",
          "2091:   },",
          "2092:  })",
          "2095:  proxyInvalidNoServices := &projcontour.HTTPProxy{",
          "2098:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1584:   },",
          "1585:  }",
          "1587:  fallbackCertificate := &projcontour.HTTPProxy{",
          "1588:   ObjectMeta: metav1.ObjectMeta{",
          "1589:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2113:  run(\"invalid HTTPProxy due to empty route.service\", testcase{",
          "2114:   objs: []interface{}{proxyInvalidNoServices, fixture.ServiceRootsKuard},",
          "2115:   want: map[types.NamespacedName]Status{",
          "2116:    {Name: proxyInvalidNoServices.Name, Namespace: proxyInvalidNoServices.Namespace}: {",
          "2117:     Object:      proxyInvalidNoServices,",
          "2118:     Status:      \"invalid\",",
          "2119:     Description: \"route.services must have at least one entry\",",
          "2120:     Vhost:       \"missing-service.example.com\",",
          "2121:    },",
          "2122:   },",
          "2123:  })",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1609:   },",
          "1610:  }",
          "1612:  fallbackCertificateWithClientValidation := &projcontour.HTTPProxy{",
          "1613:   ObjectMeta: metav1.ObjectMeta{",
          "1614:    Namespace: \"roots\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2150:  run(\"invalid fallback certificate passed to contour\", testcase{",
          "2151:   fallbackCertificate: &types.NamespacedName{",
          "2152:    Name:      \"invalid\",",
          "2153:    Namespace: \"invalid\",",
          "2154:   },",
          "2155:   objs: []interface{}{fallbackCertificate, fixture.SecretRootsFallback, fixture.SecretRootsCert, fixture.ServiceRootsHome},",
          "2156:   want: map[types.NamespacedName]Status{",
          "2157:    {Name: fallbackCertificate.Name,",
          "2158:     Namespace: fallbackCertificate.Namespace}: {",
          "2159:     Object:      fallbackCertificate,",
          "2160:     Status:      \"invalid\",",
          "2161:     Description: \"Spec.Virtualhost.TLS Secret \\\"invalid/invalid\\\" fallback certificate is invalid: Secret not found\",",
          "2162:     Vhost:       \"example.com\",",
          "2163:    },",
          "2164:   },",
          "2165:  })",
          "2167:  run(\"fallback certificate requested but cert not configured in contour\", testcase{",
          "2168:   objs: []interface{}{fallbackCertificate, fixture.SecretRootsFallback, fixture.SecretRootsCert, fixture.ServiceRootsHome},",
          "2169:   want: map[types.NamespacedName]Status{",
          "2170:    {Name: fallbackCertificate.Name,",
          "2171:     Namespace: fallbackCertificate.Namespace}: {",
          "2172:     Object:      fallbackCertificate,",
          "2173:     Status:      \"invalid\",",
          "2174:     Description: \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\",",
          "2175:     Vhost:       \"example.com\",",
          "2176:    },",
          "2177:   },",
          "2178:  })",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1637:   },",
          "1638:  }",
          "1642:  tlsPassthroughAndValidation := &projcontour.HTTPProxy{",
          "1643:   ObjectMeta: metav1.ObjectMeta{",
          "1644:    Name:      \"invalid\",",
          "1646:   },",
          "1647:   Spec: projcontour.HTTPProxySpec{",
          "1648:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1645:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2208:  run(\"fallback certificate requested and clientValidation also configured\", testcase{",
          "2209:   objs: []interface{}{fallbackCertificateWithClientValidation, fixture.SecretRootsFallback, fixture.SecretRootsCert, fixture.ServiceRootsHome},",
          "2210:   want: map[types.NamespacedName]Status{",
          "2211:    {Name: fallbackCertificateWithClientValidation.Name,",
          "2212:     Namespace: fallbackCertificateWithClientValidation.Namespace}: {",
          "2213:     Object:      fallbackCertificateWithClientValidation,",
          "2214:     Status:      \"invalid\",",
          "2215:     Description: \"Spec.Virtualhost.TLS fallback & client validation are incompatible\",",
          "2216:     Vhost:       \"example.com\",",
          "2217:    },",
          "2218:   },",
          "2219:  })",
          "2224:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1657:    TCPProxy: &projcontour.TCPProxy{},",
          "1658:   },",
          "1659:  }",
          "1662:  tlsPassthroughAndSecretName := &projcontour.HTTPProxy{",
          "1663:   ObjectMeta: metav1.ObjectMeta{",
          "1664:    Name:      \"invalid\",",
          "1666:   },",
          "1667:   Spec: projcontour.HTTPProxySpec{",
          "1668:    VirtualHost: &projcontour.VirtualHost{",
          "1669:     Fqdn: \"tcpproxy.example.com\",",
          "1670:     TLS: &projcontour.TLS{",
          "1671:      Passthrough: true,",
          "1673:     },",
          "1674:    },",
          "1675:    TCPProxy: &projcontour.TCPProxy{},",
          "1676:   },",
          "1677:  }",
          "1681:  tlsNoPassthroughOrSecretName := &projcontour.HTTPProxy{",
          "1682:   ObjectMeta: metav1.ObjectMeta{",
          "1683:    Name:      \"invalid\",",
          "1685:   },",
          "1686:   Spec: projcontour.HTTPProxySpec{",
          "1687:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1665:    Namespace: serviceKuard.Namespace,",
          "1672:      SecretName:  secretRootsNS.Name,",
          "1684:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2240:  run(\"passthrough and client auth are incompatible tlsPassthroughAndValidation\", testcase{",
          "2241:   objs: []interface{}{fixture.SecretRootsCert, tlsPassthroughAndValidation},",
          "2242:   want: map[types.NamespacedName]Status{",
          "2243:    {Name: tlsPassthroughAndValidation.Name, Namespace: tlsPassthroughAndValidation.Namespace}: {",
          "2244:     Object:      tlsPassthroughAndValidation,",
          "2245:     Status:      \"invalid\",",
          "2246:     Description: \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\",",
          "2247:     Vhost:       tlsPassthroughAndValidation.Spec.VirtualHost.Fqdn,",
          "2248:    },",
          "2249:   },",
          "2250:  })",
          "2255:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "2262:      SecretName:  fixture.SecretRootsCert.Name,",
          "2269:  run(\"tcpproxy with TLS passthrough and secret name both specified\", testcase{",
          "2270:   objs: []interface{}{",
          "2271:    fixture.SecretRootsCert,",
          "2272:    tlsPassthroughAndSecretName,",
          "2273:   },",
          "2274:   want: map[types.NamespacedName]Status{",
          "2275:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: {",
          "2276:     Object:      tlsPassthroughAndSecretName,",
          "2277:     Status:      \"invalid\",",
          "2278:     Description: \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\",",
          "2279:     Vhost:       \"tcpproxy.example.com\",",
          "2280:    },",
          "2281:   },",
          "2282:  })",
          "2287:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1695:   },",
          "1696:  }",
          "1700:  emptyProxy := &projcontour.HTTPProxy{",
          "1701:   ObjectMeta: metav1.ObjectMeta{",
          "1702:    Name:      \"empty\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2301:  run(\"httpproxy w/ tcpproxy with neither TLS passthrough nor secret name specified\", testcase{",
          "2302:   objs: []interface{}{",
          "2303:    fixture.SecretRootsCert,",
          "2304:    tlsNoPassthroughOrSecretName,",
          "2305:   },",
          "2306:   want: map[types.NamespacedName]Status{",
          "2307:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: {",
          "2308:     Object:      tlsNoPassthroughOrSecretName,",
          "2309:     Status:      \"invalid\",",
          "2310:     Description: \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\",",
          "2311:     Vhost:       \"tcpproxy.example.com\",",
          "2312:    },",
          "2313:   },",
          "2314:  })",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1709:   },",
          "1710:  }",
          "1712:  invalidRequestHeadersPolicyService := &projcontour.HTTPProxy{",
          "1713:   ObjectMeta: metav1.ObjectMeta{",
          "1714:    Name:      \"invalidRHPService\",",
          "1716:   },",
          "1717:   Spec: projcontour.HTTPProxySpec{",
          "1718:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1715:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2328:  run(\"proxy with no routes, includes, or tcpproxy is invalid\", testcase{",
          "2329:   objs: []interface{}{emptyProxy},",
          "2330:   want: map[types.NamespacedName]Status{",
          "2331:    {Name: emptyProxy.Name, Namespace: emptyProxy.Namespace}: {",
          "2332:     Object:      emptyProxy,",
          "2333:     Status:      \"invalid\",",
          "2334:     Description: \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\",",
          "2335:     Vhost:       emptyProxy.Spec.VirtualHost.Fqdn,",
          "2336:    },",
          "2337:   },",
          "2338:  })",
          "2343:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1721:    Routes: []projcontour.Route{{",
          "1722:     Services: []projcontour.Service{",
          "1723:      {",
          "1725:       Port: 8080,",
          "1726:       RequestHeadersPolicy: &projcontour.HeadersPolicy{",
          "1727:        Set: []projcontour.HeaderValue{{",
          "",
          "[Removed Lines]",
          "1724:       Name: serviceKuard.Name,",
          "",
          "[Added Lines]",
          "2352:       Name: fixture.ServiceRootsKuard.Name,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1735:   },",
          "1736:  }",
          "1738:  invalidResponseHeadersPolicyService := &projcontour.HTTPProxy{",
          "1739:   ObjectMeta: metav1.ObjectMeta{",
          "1740:    Name:      \"invalidRHPService\",",
          "1742:   },",
          "1743:   Spec: projcontour.HTTPProxySpec{",
          "1744:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1741:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2366:  run(\"requestHeadersPolicy, Host header invalid on Service\", testcase{",
          "2367:   objs: []interface{}{invalidRequestHeadersPolicyService, fixture.ServiceRootsKuard},",
          "2368:   want: map[types.NamespacedName]Status{",
          "2369:    {Name: invalidRequestHeadersPolicyService.Name, Namespace: invalidRequestHeadersPolicyService.Namespace}: {",
          "2370:     Object:      invalidRequestHeadersPolicyService,",
          "2371:     Status:      \"invalid\",",
          "2372:     Description: \"rewriting \\\"Host\\\" header is not supported on a service\",",
          "2373:     Vhost:       invalidRequestHeadersPolicyService.Spec.VirtualHost.Fqdn,",
          "2374:    },",
          "2375:   },",
          "2376:  })",
          "2381:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1747:    Routes: []projcontour.Route{{",
          "1748:     Services: []projcontour.Service{",
          "1749:      {",
          "1751:       Port: 8080,",
          "1752:       ResponseHeadersPolicy: &projcontour.HeadersPolicy{",
          "1753:        Set: []projcontour.HeaderValue{{",
          "",
          "[Removed Lines]",
          "1750:       Name: serviceKuard.Name,",
          "",
          "[Added Lines]",
          "2390:       Name: fixture.ServiceRootsKuard.Name,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1761:   },",
          "1762:  }",
          "1764:  invalidResponseHeadersPolicyRoute := &projcontour.HTTPProxy{",
          "1765:   ObjectMeta: metav1.ObjectMeta{",
          "1766:    Name:      \"invalidRHPRoute\",",
          "1768:   },",
          "1769:   Spec: projcontour.HTTPProxySpec{",
          "1770:    VirtualHost: &projcontour.VirtualHost{",
          "",
          "[Removed Lines]",
          "1767:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2404:  run(\"responseHeadersPolicy, Host header invalid on Service\", testcase{",
          "2405:   objs: []interface{}{invalidResponseHeadersPolicyService, fixture.ServiceRootsKuard},",
          "2406:   want: map[types.NamespacedName]Status{",
          "2407:    {Name: invalidResponseHeadersPolicyService.Name, Namespace: invalidResponseHeadersPolicyService.Namespace}: {",
          "2408:     Object:      invalidResponseHeadersPolicyService,",
          "2409:     Status:      \"invalid\",",
          "2410:     Description: \"rewriting \\\"Host\\\" header is not supported on response headers\",",
          "2411:     Vhost:       invalidResponseHeadersPolicyService.Spec.VirtualHost.Fqdn,",
          "2412:    },",
          "2413:   },",
          "2414:  })",
          "2419:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1773:    Routes: []projcontour.Route{{",
          "1774:     Services: []projcontour.Service{",
          "1775:      {",
          "1777:       Port: 8080,",
          "1778:      },",
          "1779:     },",
          "",
          "[Removed Lines]",
          "1776:       Name: serviceKuard.Name,",
          "",
          "[Added Lines]",
          "2428:       Name: fixture.ServiceRootsKuard.Name,",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1787:   },",
          "1788:  }",
          "1791:   WithSpec(projcontour.HTTPProxySpec{",
          "1792:    VirtualHost: &projcontour.VirtualHost{",
          "1793:     Fqdn: \"invalid.com\",",
          "",
          "[Removed Lines]",
          "1790:  authFallback := fixture.NewProxy(\"roots/fallback-incompat\").",
          "",
          "[Added Lines]",
          "2442:  run(\"responseHeadersPolicy, Host header invalid on Route\", testcase{",
          "2443:   objs: []interface{}{invalidResponseHeadersPolicyRoute, fixture.ServiceRootsKuard},",
          "2444:   want: map[types.NamespacedName]Status{",
          "2445:    {Name: invalidResponseHeadersPolicyRoute.Name, Namespace: invalidResponseHeadersPolicyRoute.Namespace}: {",
          "2446:     Object:      invalidResponseHeadersPolicyRoute,",
          "2447:     Status:      \"invalid\",",
          "2448:     Description: \"rewriting \\\"Host\\\" header is not supported on response headers\",",
          "2449:     Vhost:       invalidResponseHeadersPolicyRoute.Spec.VirtualHost.Fqdn,",
          "2450:    },",
          "2451:   },",
          "2452:  })",
          "2454:  proxyAuthFallback := fixture.NewProxy(\"roots/fallback-incompat\").",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1807:    }},",
          "1808:   })",
          "1810:  invalidResponseTimeout := &projcontour.HTTPProxy{",
          "1811:   ObjectMeta: metav1.ObjectMeta{",
          "1813:    Name:      \"invalid-timeouts\",",
          "1814:   },",
          "1815:   Spec: projcontour.HTTPProxySpec{",
          "",
          "[Removed Lines]",
          "1812:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2474:  run(\"fallback and client auth is invalid\", testcase{",
          "2475:   objs: []interface{}{fixture.SecretRootsCert, proxyAuthFallback},",
          "2476:   want: map[types.NamespacedName]Status{",
          "2477:    {Name: proxyAuthFallback.Name, Namespace: proxyAuthFallback.Namespace}: {",
          "2478:     Object:      proxyAuthFallback,",
          "2479:     Status:      \"invalid\",",
          "2480:     Description: \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\",",
          "2481:     Vhost:       proxyAuthFallback.Spec.VirtualHost.Fqdn,",
          "2482:    },",
          "2483:   },",
          "2484:  })",
          "2488:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1820:     {",
          "1821:      Services: []projcontour.Service{",
          "1822:       {",
          "1824:       },",
          "1825:      },",
          "1826:      TimeoutPolicy: &projcontour.TimeoutPolicy{",
          "",
          "[Removed Lines]",
          "1823:        Name: serviceKuard.Name,",
          "",
          "[Added Lines]",
          "2499:        Name: fixture.ServiceRootsKuard.Name,",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1831:   },",
          "1832:  }",
          "1834:  invalidIdleTimeout := &projcontour.HTTPProxy{",
          "1835:   ObjectMeta: metav1.ObjectMeta{",
          "1837:    Name:      \"invalid-timeouts\",",
          "1838:   },",
          "1839:   Spec: projcontour.HTTPProxySpec{",
          "",
          "[Removed Lines]",
          "1836:    Namespace: serviceKuard.Namespace,",
          "",
          "[Added Lines]",
          "2510:  run(\"proxy with invalid response timeout value is invalid\", testcase{",
          "2511:   objs: []interface{}{invalidResponseTimeout, fixture.ServiceRootsKuard},",
          "2512:   want: map[types.NamespacedName]Status{",
          "2513:    {",
          "2514:     Name:      invalidResponseTimeout.Name,",
          "2515:     Namespace: invalidResponseTimeout.Namespace,",
          "2516:    }: {",
          "2517:     Object:      invalidResponseTimeout,",
          "2518:     Status:      \"invalid\",",
          "2519:     Description: \"route.timeoutPolicy failed to parse: error parsing response timeout: unable to parse timeout string \\\"invalid-val\\\": time: invalid duration \\\"invalid-val\\\"\",",
          "2520:     Vhost:       invalidResponseTimeout.Spec.VirtualHost.Fqdn,",
          "2521:    },",
          "2522:   },",
          "2523:  })",
          "2527:    Namespace: fixture.ServiceRootsKuard.Namespace,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1844:     {",
          "1845:      Services: []projcontour.Service{",
          "1846:       {",
          "1848:       },",
          "1849:      },",
          "1850:      TimeoutPolicy: &projcontour.TimeoutPolicy{",
          "",
          "[Removed Lines]",
          "1847:        Name: serviceKuard.Name,",
          "",
          "[Added Lines]",
          "2538:        Name: fixture.ServiceRootsKuard.Name,",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1855:   },",
          "1856:  }",
          "1951:    },",
          "1952:   },",
          "2583: }",
          "",
          "[Removed Lines]",
          "1858:  tests := map[string]struct {",
          "1859:   objs                []interface{}",
          "1860:   fallbackCertificate *types.NamespacedName",
          "1861:   want                map[types.NamespacedName]Status",
          "1862:  }{",
          "1863:   \"proxy has multiple includes, one is invalid\": {",
          "1864:    objs: []interface{}{proxyMultiIncludeOneInvalid, proxyChildValidFoo2, proxyChildInvalidBadPort, serviceFoo2, serviceFoo3InvalidPort},",
          "1865:    want: map[types.NamespacedName]Status{",
          "1866:     {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}:                 {Object: proxyChildValidFoo2, Status: \"valid\", Description: \"valid HTTPProxy\"},",
          "1867:     {Name: proxyChildInvalidBadPort.Name, Namespace: proxyChildInvalidBadPort.Namespace}:       {Object: proxyChildInvalidBadPort, Status: \"invalid\", Description: `service \"foo3\": port must be in the range 1-65535`},",
          "1868:     {Name: proxyMultiIncludeOneInvalid.Name, Namespace: proxyMultiIncludeOneInvalid.Namespace}: {Object: proxyMultiIncludeOneInvalid, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "1869:    },",
          "1870:   },",
          "1871:   \"multi-parent children is not orphaned when one of the parents is invalid\": {",
          "1872:    objs: []interface{}{proxyNoFQDN, proxyChildValidFoo2, proxyIncludeValidChild, serviceKuard, serviceFoo2},",
          "1873:    want: map[types.NamespacedName]Status{",
          "1874:     {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}:                       {Object: proxyNoFQDN, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "1875:     {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}:       {Object: proxyChildValidFoo2, Status: \"valid\", Description: \"valid HTTPProxy\"},",
          "1876:     {Name: proxyIncludeValidChild.Name, Namespace: proxyIncludeValidChild.Namespace}: {Object: proxyIncludeValidChild, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "1877:    },",
          "1878:   },",
          "1880:   \"service shared across ingress and httpproxy tcpproxy\": {",
          "1881:    objs: []interface{}{",
          "1882:     secretRootsNS, serviceNginx, ingressSharedService, proxyTCPSharedService,",
          "1883:    },",
          "1884:    want: map[types.NamespacedName]Status{",
          "1885:     {Name: proxyTCPSharedService.Name, Namespace: proxyTCPSharedService.Namespace}: {",
          "1886:      Object:      proxyTCPSharedService,",
          "1887:      Status:      k8s.StatusValid,",
          "1888:      Description: `valid HTTPProxy`,",
          "1889:      Vhost:       \"example.com\",",
          "1890:     },",
          "1891:    },",
          "1892:   },",
          "1894:   \"check status set when tcpproxy combined with tls delegation failure\": {",
          "1895:    objs: []interface{}{",
          "1896:     secretContourNS,",
          "1897:     proxyDelegatedTCPTLS,",
          "1898:    },",
          "1899:    want: map[types.NamespacedName]Status{",
          "1900:     {Name: proxyDelegatedTCPTLS.Name, Namespace: proxyDelegatedTCPTLS.Namespace}: {",
          "1901:      Object:      proxyDelegatedTCPTLS,",
          "1902:      Status:      k8s.StatusInvalid,",
          "1903:      Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(secretContourNS)),",
          "1904:      Vhost:       proxyDelegatedTCPTLS.Spec.VirtualHost.Fqdn,",
          "1905:     },",
          "1906:    },",
          "1907:   },",
          "1909:   \"check status set when routes combined with tls delegation failure\": {",
          "1910:    objs: []interface{}{",
          "1911:     secretContourNS,",
          "1912:     proxyDelegatedTLS,",
          "1913:    },",
          "1914:    want: map[types.NamespacedName]Status{",
          "1915:     {Name: proxyDelegatedTLS.Name, Namespace: proxyDelegatedTLS.Namespace}: {",
          "1916:      Object:      proxyDelegatedTLS,",
          "1917:      Status:      k8s.StatusInvalid,",
          "1918:      Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(secretContourNS)),",
          "1919:      Vhost:       proxyDelegatedTLS.Spec.VirtualHost.Fqdn,",
          "1920:     },",
          "1921:    },",
          "1922:   },",
          "1924:   \"check status set when httpproxy routes combined with tls delegation failure\": {",
          "1925:    objs: []interface{}{",
          "1926:     secretContourNS,",
          "1927:     proxy19,",
          "1928:    },",
          "1929:    want: map[types.NamespacedName]Status{",
          "1930:     {Name: proxy19.Name, Namespace: proxy19.Namespace}: {",
          "1931:      Object:      proxy19,",
          "1932:      Status:      k8s.StatusInvalid,",
          "1933:      Description: fmt.Sprintf(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", k8s.NamespacedNameOf(secretContourNS)),",
          "1934:      Vhost:       proxy19.Spec.VirtualHost.Fqdn,",
          "1935:     },",
          "1936:    },",
          "1937:   },",
          "1939:   \"non tls routes can be combined with tcp proxy\": {",
          "1940:    objs: []interface{}{",
          "1941:     s10,",
          "1942:     proxyPassthroughProxyNonSecure,",
          "1943:    },",
          "1944:    want: map[types.NamespacedName]Status{",
          "1945:     {Name: proxyPassthroughProxyNonSecure.Name, Namespace: proxyPassthroughProxyNonSecure.Namespace}: {",
          "1946:      Object:      proxyPassthroughProxyNonSecure,",
          "1947:      Status:      k8s.StatusValid,",
          "1948:      Description: `valid HTTPProxy`,",
          "1949:      Vhost:       proxyPassthroughProxyNonSecure.Spec.VirtualHost.Fqdn,",
          "1950:     },",
          "1953:   \"two root httpproxies delegated to the same object should not conflict on hostname\": {",
          "1954:    objs: []interface{}{",
          "1955:     serviceKuard, proxyMultipleIncludersSite1, proxyMultipleIncludersSite2, proxyMultiIncludeChild,",
          "1956:    },",
          "1957:    want: map[types.NamespacedName]Status{",
          "1958:     {Name: proxyMultipleIncludersSite1.Name, Namespace: proxyMultipleIncludersSite1.Namespace}: {",
          "1959:      Object:      proxyMultipleIncludersSite1,",
          "1960:      Status:      \"valid\",",
          "1961:      Description: \"valid HTTPProxy\",",
          "1962:      Vhost:       \"site1.com\",",
          "1963:     },",
          "1964:     {Name: proxyMultipleIncludersSite2.Name, Namespace: proxyMultipleIncludersSite2.Namespace}: {",
          "1965:      Object:      proxyMultipleIncludersSite2,",
          "1966:      Status:      \"valid\",",
          "1967:      Description: \"valid HTTPProxy\",",
          "1968:      Vhost:       \"site2.com\",",
          "1969:     },",
          "1970:     {Name: proxyMultiIncludeChild.Name, Namespace: proxyMultiIncludeChild.Namespace}: {",
          "1971:      Object:      proxyMultiIncludeChild,",
          "1972:      Status:      \"valid\",",
          "1973:      Description: \"valid HTTPProxy\",",
          "1974:     },",
          "1975:    },",
          "1976:   },",
          "1977:   \"valid proxy\": {",
          "1978:    objs: []interface{}{proxy1, serviceHome},",
          "1979:    want: map[types.NamespacedName]Status{",
          "1980:     {Name: proxy1.Name, Namespace: proxy1.Namespace}: {Object: proxy1, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "1981:    },",
          "1982:   },",
          "1983:   \"proxy invalid port in service\": {",
          "1984:    objs: []interface{}{proxy2},",
          "1985:    want: map[types.NamespacedName]Status{",
          "1986:     {Name: proxy2.Name, Namespace: proxy2.Namespace}: {Object: proxy2, Status: \"invalid\", Description: `service \"home\": port must be in the range 1-65535`, Vhost: \"example.com\"},",
          "1987:    },",
          "1988:   },",
          "1989:   \"root proxy outside of roots namespace\": {",
          "1990:    objs: []interface{}{proxy3},",
          "1991:    want: map[types.NamespacedName]Status{",
          "1992:     {Name: proxy3.Name, Namespace: proxy3.Namespace}: {Object: proxy3, Status: \"invalid\", Description: \"root HTTPProxy cannot be defined in this namespace\"},",
          "1993:    },",
          "1994:   },",
          "1995:   \"root proxy does not specify FQDN\": {",
          "1996:    objs: []interface{}{proxyNoFQDN},",
          "1997:    want: map[types.NamespacedName]Status{",
          "1998:     {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: {Object: proxyNoFQDN, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "1999:    },",
          "2000:   },",
          "2001:   \"proxy self-edge produces a cycle\": {",
          "2002:    objs: []interface{}{proxy6, serviceKuard},",
          "2003:    want: map[types.NamespacedName]Status{",
          "2004:     {Name: proxy6.Name, Namespace: proxy6.Namespace}: {",
          "2005:      Object:      proxy6,",
          "2006:      Status:      \"invalid\",",
          "2007:      Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "2008:      Vhost:       \"example.com\",",
          "2009:     },",
          "2010:    },",
          "2011:   },",
          "2012:   \"proxy child delegates to parent, producing a cycle\": {",
          "2013:    objs: []interface{}{proxy7, proxy8},",
          "2014:    want: map[types.NamespacedName]Status{",
          "2015:     {Name: proxy7.Name, Namespace: proxy7.Namespace}: {",
          "2016:      Object:      proxy7,",
          "2017:      Status:      \"valid\",",
          "2018:      Description: \"valid HTTPProxy\",",
          "2019:      Vhost:       \"example.com\",",
          "2020:     },",
          "2021:     {Name: proxy8.Name, Namespace: proxy8.Namespace}: {",
          "2022:      Object:      proxy8,",
          "2023:      Status:      \"invalid\",",
          "2024:      Description: \"include creates a delegation cycle: roots/parent -> roots/child -> roots/child\",",
          "2025:     },",
          "2026:    },",
          "2027:   },",
          "2028:   \"proxy orphaned route\": {",
          "2029:    objs: []interface{}{proxy8},",
          "2030:    want: map[types.NamespacedName]Status{",
          "2031:     {Name: proxy8.Name, Namespace: proxy8.Namespace}: {Object: proxy8, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\"},",
          "2032:    },",
          "2033:   },",
          "2034:   \"proxy invalid parent orphans children\": {",
          "2035:    objs: []interface{}{proxy14, proxy11},",
          "2036:    want: map[types.NamespacedName]Status{",
          "2037:     {Name: proxy14.Name, Namespace: proxy14.Namespace}: {Object: proxy14, Status: \"invalid\", Description: \"Spec.VirtualHost.Fqdn must be specified\"},",
          "2038:     {Name: proxy11.Name, Namespace: proxy11.Namespace}: {Object: proxy11, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\"},",
          "2039:    },",
          "2040:   },",
          "2041:   \"proxy invalid FQDN contains wildcard\": {",
          "2042:    objs: []interface{}{proxy15},",
          "2043:    want: map[types.NamespacedName]Status{",
          "2044:     {Name: proxy15.Name, Namespace: proxy15.Namespace}: {Object: proxy15, Status: \"invalid\", Description: `Spec.VirtualHost.Fqdn \"example.*.com\" cannot use wildcards`, Vhost: \"example.*.com\"},",
          "2045:    },",
          "2046:   },",
          "2047:   \"proxy missing service shows invalid status\": {",
          "2048:    objs: []interface{}{proxy16},",
          "2049:    want: map[types.NamespacedName]Status{",
          "2050:     {Name: proxy16.Name, Namespace: proxy16.Namespace}: {",
          "2051:      Object:      proxy16,",
          "2052:      Status:      \"invalid\",",
          "2053:      Description: `Spec.Routes unresolved service reference: service \"roots/invalid\" not found`,",
          "2054:      Vhost:       proxy16.Spec.VirtualHost.Fqdn,",
          "2055:     },",
          "2056:    },",
          "2057:   },",
          "2058:   \"proxy with service missing port shows invalid status\": {",
          "2059:    objs: []interface{}{proxy16a, serviceHome},",
          "2060:    want: map[types.NamespacedName]Status{",
          "2061:     {Name: proxy16a.Name, Namespace: proxy16a.Namespace}: {",
          "2062:      Object:      proxy16a,",
          "2063:      Status:      \"invalid\",",
          "2064:      Description: `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/home\" not matched`,",
          "2065:      Vhost:       proxy16a.Spec.VirtualHost.Fqdn,",
          "2066:     },",
          "2067:    },",
          "2068:   },",
          "2069:   \"insert conflicting proxies due to fqdn reuse\": {",
          "2070:    objs: []interface{}{proxy17, proxy18},",
          "2071:    want: map[types.NamespacedName]Status{",
          "2072:     {Name: proxy17.Name, Namespace: proxy17.Namespace}: {",
          "2073:      Object:      proxy17,",
          "2074:      Status:      k8s.StatusInvalid,",
          "2075:      Description: `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`,",
          "2076:      Vhost:       \"example.com\",",
          "2077:     },",
          "2078:     {Name: proxy18.Name, Namespace: proxy18.Namespace}: {",
          "2079:      Object:      proxy18,",
          "2080:      Status:      k8s.StatusInvalid,",
          "2081:      Description: `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`,",
          "2082:      Vhost:       \"example.com\",",
          "2083:     },",
          "2084:    },",
          "2085:   },",
          "2086:   \"root proxy including another root\": {",
          "2087:    objs: []interface{}{proxy20, proxy21},",
          "2088:    want: map[types.NamespacedName]Status{",
          "2089:     {Name: proxy20.Name, Namespace: proxy20.Namespace}: {",
          "2090:      Object:      proxy20,",
          "2091:      Status:      k8s.StatusInvalid,",
          "2092:      Description: `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`,",
          "2093:      Vhost:       \"blog.containersteve.com\",",
          "2094:     },",
          "2095:     {Name: proxy21.Name, Namespace: proxy21.Namespace}: {",
          "2096:      Object:      proxy21,",
          "2097:      Status:      k8s.StatusInvalid,",
          "2098:      Description: `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`,",
          "2099:      Vhost:       \"blog.containersteve.com\",",
          "2100:     },",
          "2101:    },",
          "2102:   },",
          "2103:   \"root proxy including another root w/ different hostname\": {",
          "2104:    objs: []interface{}{proxy22, proxy23, serviceGreenMarketing},",
          "2105:    want: map[types.NamespacedName]Status{",
          "2106:     {Name: proxy22.Name, Namespace: proxy22.Namespace}: {",
          "2107:      Object:      proxy22,",
          "2108:      Status:      k8s.StatusInvalid,",
          "2109:      Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "2110:      Vhost:       \"blog.containersteve.com\",",
          "2111:     },",
          "2112:     {Name: proxy23.Name, Namespace: proxy23.Namespace}: {",
          "2113:      Object:      proxy23,",
          "2114:      Status:      k8s.StatusValid,",
          "2115:      Description: `valid HTTPProxy`,",
          "2116:      Vhost:       \"www.containersteve.com\",",
          "2117:     },",
          "2118:    },",
          "2119:   },",
          "2120:   \"proxy includes another\": {",
          "2121:    objs: []interface{}{proxyBlogMarketing, proxy25, serviceKuard, serviceGreenMarketing},",
          "2122:    want: map[types.NamespacedName]Status{",
          "2123:     {Name: proxyBlogMarketing.Name, Namespace: proxyBlogMarketing.Namespace}: {",
          "2124:      Object:      proxyBlogMarketing,",
          "2125:      Status:      \"valid\",",
          "2126:      Description: \"valid HTTPProxy\",",
          "2127:     },",
          "2128:     {Name: proxy25.Name, Namespace: proxy25.Namespace}: {",
          "2129:      Object:      proxy25,",
          "2130:      Status:      \"valid\",",
          "2131:      Description: \"valid HTTPProxy\",",
          "2132:      Vhost:       \"example.com\",",
          "2133:     },",
          "2134:    },",
          "2135:   },",
          "2136:   \"proxy with mirror\": {",
          "2137:    objs: []interface{}{proxy26, serviceKuard},",
          "2138:    want: map[types.NamespacedName]Status{",
          "2139:     {Name: proxy26.Name, Namespace: proxy26.Namespace}: {",
          "2140:      Object:      proxy26,",
          "2141:      Status:      \"valid\",",
          "2142:      Description: \"valid HTTPProxy\",",
          "2143:      Vhost:       \"example.com\",",
          "2144:     },",
          "2145:    },",
          "2146:   },",
          "2147:   \"proxy with two mirrors\": {",
          "2148:    objs: []interface{}{proxy27, serviceKuard},",
          "2149:    want: map[types.NamespacedName]Status{",
          "2150:     {Name: proxy27.Name, Namespace: proxy27.Namespace}: {",
          "2151:      Object:      proxy27,",
          "2152:      Status:      \"invalid\",",
          "2153:      Description: \"only one service per route may be nominated as mirror\",",
          "2154:      Vhost:       \"example.com\",",
          "2155:     },",
          "2156:    },",
          "2157:   },",
          "2158:   \"proxy with two prefix conditions on route\": {",
          "2159:    objs: []interface{}{proxy32, serviceKuard},",
          "2160:    want: map[types.NamespacedName]Status{",
          "2161:     {Name: proxy32.Name, Namespace: proxy32.Namespace}: {",
          "2162:      Object:      proxy32,",
          "2163:      Status:      \"invalid\",",
          "2164:      Description: \"route: more than one prefix is not allowed in a condition block\",",
          "2165:      Vhost:       \"example.com\",",
          "2166:     },",
          "2167:    },",
          "2168:   },",
          "2169:   \"proxy with two prefix conditions as an include\": {",
          "2170:    objs: []interface{}{proxy33, proxy34, serviceKuard},",
          "2171:    want: map[types.NamespacedName]Status{",
          "2172:     {Name: proxy33.Name, Namespace: proxy33.Namespace}: {",
          "2173:      Object:      proxy33,",
          "2174:      Status:      \"invalid\",",
          "2175:      Description: \"include: more than one prefix is not allowed in a condition block\",",
          "2176:      Vhost:       \"example.com\",",
          "2177:     }, {Name: proxy34.Name, Namespace: proxy34.Namespace}: {",
          "2178:      Object:      proxy34,",
          "2179:      Status:      \"orphaned\",",
          "2180:      Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "2181:     },",
          "2182:    },",
          "2183:   },",
          "2184:   \"proxy with prefix conditions on route that does not start with slash\": {",
          "2185:    objs: []interface{}{proxy35, serviceKuard},",
          "2186:    want: map[types.NamespacedName]Status{",
          "2187:     {Name: proxy35.Name, Namespace: proxy35.Namespace}: {",
          "2188:      Object:      proxy35,",
          "2189:      Status:      \"invalid\",",
          "2190:      Description: \"route: prefix conditions must start with /, api was supplied\",",
          "2191:      Vhost:       \"example.com\",",
          "2192:     },",
          "2193:    },",
          "2194:   },",
          "2195:   \"proxy with include prefix that does not start with slash\": {",
          "2196:    objs: []interface{}{proxy36, proxy34, serviceKuard},",
          "2197:    want: map[types.NamespacedName]Status{",
          "2198:     {Name: proxy36.Name, Namespace: proxy36.Namespace}: {",
          "2199:      Object:      proxy36,",
          "2200:      Status:      \"invalid\",",
          "2201:      Description: \"include: prefix conditions must start with /, api was supplied\",",
          "2202:      Vhost:       \"example.com\",",
          "2203:     }, {Name: proxy34.Name, Namespace: proxy34.Namespace}: {",
          "2204:      Object:      proxy34,",
          "2205:      Status:      \"orphaned\",",
          "2206:      Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\",",
          "2207:     },",
          "2208:    },",
          "2209:   },",
          "2210:   \"duplicate route condition headers\": {",
          "2211:    objs: []interface{}{proxy28, serviceHome},",
          "2212:    want: map[types.NamespacedName]Status{",
          "2213:     {Name: proxy28.Name, Namespace: proxy28.Namespace}: {Object: proxy28, Status: \"invalid\", Description: \"cannot specify duplicate header 'exact match' conditions in the same route\", Vhost: \"example.com\"},",
          "2214:    },",
          "2215:   },",
          "2216:   \"duplicate valid route condition headers\": {",
          "2217:    objs: []interface{}{proxy31, serviceHome},",
          "2218:    want: map[types.NamespacedName]Status{",
          "2219:     {Name: proxy31.Name, Namespace: proxy31.Namespace}: {Object: proxy31, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "2220:    },",
          "2221:   },",
          "2222:   \"duplicate include condition headers\": {",
          "2223:    objs: []interface{}{proxy29, proxy30, serviceHome},",
          "2224:    want: map[types.NamespacedName]Status{",
          "2225:     {Name: proxy29.Name, Namespace: proxy29.Namespace}: {Object: proxy29, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"example.com\"},",
          "2226:     {Name: proxy30.Name, Namespace: proxy30.Namespace}: {Object: proxy30, Status: \"invalid\", Description: \"cannot specify duplicate header 'exact match' conditions in the same route\", Vhost: \"\"},",
          "2227:    },",
          "2228:   },",
          "2229:   \"duplicate path conditions on an include\": {",
          "2230:    objs: []interface{}{proxy41, proxy41a, proxy41b, serviceHome, sericeKuardTeamA, serviceKuardTeamB},",
          "2231:    want: map[types.NamespacedName]Status{",
          "2232:     {Name: proxy41.Name, Namespace: proxy41.Namespace}:   {Object: proxy41, Status: \"invalid\", Description: \"duplicate conditions defined on an include\", Vhost: \"example.com\"},",
          "2233:     {Name: proxy41a.Name, Namespace: proxy41a.Namespace}: {Object: proxy41a, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\", Vhost: \"\"},",
          "2234:     {Name: proxy41b.Name, Namespace: proxy41b.Namespace}: {Object: proxy41b, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\", Vhost: \"\"},",
          "2235:    },",
          "2236:   },",
          "2237:   \"duplicate header conditions on an include\": {",
          "2238:    objs: []interface{}{proxy42, proxy41a, proxy41b, serviceHome, sericeKuardTeamA, serviceKuardTeamB},",
          "2239:    want: map[types.NamespacedName]Status{",
          "2240:     {Name: proxy42.Name, Namespace: proxy42.Namespace}:   {Object: proxy42, Status: \"invalid\", Description: \"duplicate conditions defined on an include\", Vhost: \"example.com\"},",
          "2241:     {Name: proxy41a.Name, Namespace: proxy41a.Namespace}: {Object: proxy41a, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\", Vhost: \"\"},",
          "2242:     {Name: proxy41b.Name, Namespace: proxy41b.Namespace}: {Object: proxy41b, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\", Vhost: \"\"},",
          "2243:    },",
          "2244:   },",
          "2245:   \"duplicate header+path conditions on an include\": {",
          "2246:    objs: []interface{}{proxy43, proxy41a, proxy41b, serviceHome, sericeKuardTeamA, serviceKuardTeamB},",
          "2247:    want: map[types.NamespacedName]Status{",
          "2248:     {Name: proxy43.Name, Namespace: proxy43.Namespace}:   {Object: proxy43, Status: \"invalid\", Description: \"duplicate conditions defined on an include\", Vhost: \"example.com\"},",
          "2249:     {Name: proxy41a.Name, Namespace: proxy41a.Namespace}: {Object: proxy41a, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\", Vhost: \"\"},",
          "2250:     {Name: proxy41b.Name, Namespace: proxy41b.Namespace}: {Object: proxy41b, Status: \"orphaned\", Description: \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\", Vhost: \"\"},",
          "2251:    },",
          "2252:   },",
          "2253:   \"httpproxy with invalid tcpproxy\": {",
          "2254:    objs: []interface{}{proxy37, serviceKuard},",
          "2255:    want: map[types.NamespacedName]Status{",
          "2256:     {Name: proxy37.Name, Namespace: proxy37.Namespace}: {",
          "2257:      Object:      proxy37,",
          "2258:      Status:      \"invalid\",",
          "2259:      Description: \"tcpproxy: cannot specify services and include in the same httpproxy\",",
          "2260:      Vhost:       \"passthrough.example.com\",",
          "2261:     },",
          "2262:    },",
          "2263:   },",
          "2264:   \"httpproxy with empty tcpproxy\": {",
          "2265:    objs: []interface{}{proxy37a, serviceKuard},",
          "2266:    want: map[types.NamespacedName]Status{",
          "2267:     {Name: proxy37a.Name, Namespace: proxy37a.Namespace}: {",
          "2268:      Object:      proxy37a,",
          "2269:      Status:      \"invalid\",",
          "2270:      Description: \"tcpproxy: either services or inclusion must be specified\",",
          "2271:      Vhost:       \"passthrough.example.com\",",
          "2272:     },",
          "2273:    },",
          "2274:   },",
          "2275:   \"httpproxy w/ tcpproxy w/ missing include\": {",
          "2276:    objs: []interface{}{proxy38, serviceKuard},",
          "2277:    want: map[types.NamespacedName]Status{",
          "2278:     {Name: proxy38.Name, Namespace: proxy38.Namespace}: {",
          "2279:      Object:      proxy38,",
          "2280:      Status:      \"invalid\",",
          "2281:      Description: \"tcpproxy: include roots/foo not found\",",
          "2282:      Vhost:       \"passthrough.example.com\",",
          "2283:     },",
          "2284:    },",
          "2285:   },",
          "2286:   \"httpproxy w/ tcpproxy w/ includes another root\": {",
          "2287:    objs: []interface{}{proxy38, proxy39, serviceKuard},",
          "2288:    want: map[types.NamespacedName]Status{",
          "2289:     {Name: proxy38.Name, Namespace: proxy38.Namespace}: {",
          "2290:      Object:      proxy38,",
          "2291:      Status:      \"invalid\",",
          "2292:      Description: \"root httpproxy cannot delegate to another root httpproxy\",",
          "2293:      Vhost:       \"passthrough.example.com\",",
          "2294:     },",
          "2295:     {Name: proxy39.Name, Namespace: proxy39.Namespace}: {",
          "2296:      Object:      proxy39,",
          "2297:      Status:      \"valid\",",
          "2298:      Description: \"valid HTTPProxy\",",
          "2299:      Vhost:       \"www.example.com\",",
          "2300:     },",
          "2301:    },",
          "2302:   },",
          "2303:   \"httpproxy w/ tcpproxy w/ includes valid child\": {",
          "2304:    objs: []interface{}{proxy38, proxy40, serviceKuard},",
          "2305:    want: map[types.NamespacedName]Status{",
          "2306:     {Name: proxy38.Name, Namespace: proxy38.Namespace}: {",
          "2307:      Object:      proxy38,",
          "2308:      Status:      \"valid\",",
          "2309:      Description: \"valid HTTPProxy\",",
          "2310:      Vhost:       \"passthrough.example.com\",",
          "2311:     },",
          "2312:     {Name: proxy40.Name, Namespace: proxy40.Namespace}: {",
          "2313:      Object:      proxy40,",
          "2314:      Status:      \"valid\",",
          "2315:      Description: \"valid HTTPProxy\",",
          "2316:      Vhost:       \"passthrough.example.com\",",
          "2317:     },",
          "2318:    },",
          "2319:   },",
          "2320:   \"httpproxy w/ missing include\": {",
          "2321:    objs: []interface{}{proxy44, serviceKuard},",
          "2322:    want: map[types.NamespacedName]Status{",
          "2323:     {Name: proxy44.Name, Namespace: proxy44.Namespace}: {",
          "2324:      Object:      proxy44,",
          "2325:      Status:      \"invalid\",",
          "2326:      Description: \"include roots/child not found\",",
          "2327:      Vhost:       \"example.com\",",
          "2328:     },",
          "2329:    },",
          "2330:   },",
          "2331:   \"httpproxy w/ tcpproxy w/ missing service\": {",
          "2332:    objs: []interface{}{proxy45},",
          "2333:    want: map[types.NamespacedName]Status{",
          "2334:     {Name: proxy45.Name, Namespace: proxy45.Namespace}: {",
          "2335:      Object:      proxy45,",
          "2336:      Status:      \"invalid\",",
          "2337:      Description: `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`,",
          "2338:      Vhost:       \"tcpproxy.example.com\",",
          "2339:     },",
          "2340:    },",
          "2341:   },",
          "2342:   \"httpproxy w/ tcpproxy w/ service missing port\": {",
          "2343:    objs: []interface{}{proxy45a, serviceKuard},",
          "2344:    want: map[types.NamespacedName]Status{",
          "2345:     {Name: proxy45a.Name, Namespace: proxy45a.Namespace}: {",
          "2346:      Object:      proxy45a,",
          "2347:      Status:      \"invalid\",",
          "2348:      Description: `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`,",
          "2349:      Vhost:       \"tcpproxy.example.com\",",
          "2350:     },",
          "2351:    },",
          "2352:   },",
          "2353:   \"httpproxy w/ tcpproxy missing tls\": {",
          "2354:    objs: []interface{}{proxy46},",
          "2355:    want: map[types.NamespacedName]Status{",
          "2356:     {Name: proxy46.Name, Namespace: proxy46.Namespace}: {",
          "2357:      Object:      proxy46,",
          "2358:      Status:      \"invalid\",",
          "2359:      Description: \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\",",
          "2360:      Vhost:       \"tcpproxy.example.com\",",
          "2361:     },",
          "2362:    },",
          "2363:   },",
          "2364:   \"httpproxy w/ tcpproxy missing service\": {",
          "2365:    objs: []interface{}{secretRootsNS, serviceKuard, proxy47},",
          "2366:    want: map[types.NamespacedName]Status{",
          "2367:     {Name: proxy47.Name, Namespace: proxy47.Namespace}: {",
          "2368:      Object:      proxy47,",
          "2369:      Status:      \"invalid\",",
          "2370:      Description: `Spec.Routes unresolved service reference: service \"roots/missing\" not found`,",
          "2371:      Vhost:       \"tcpproxy.example.com\",",
          "2372:     },",
          "2373:    },",
          "2374:   },",
          "2375:   \"httpproxy w/ tcpproxy missing service port\": {",
          "2376:    objs: []interface{}{secretRootsNS, serviceKuard, proxy47a},",
          "2377:    want: map[types.NamespacedName]Status{",
          "2378:     {Name: proxy47a.Name, Namespace: proxy47a.Namespace}: {",
          "2379:      Object:      proxy47a,",
          "2380:      Status:      \"invalid\",",
          "2381:      Description: `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`,",
          "2382:      Vhost:       \"tcpproxy.example.com\",",
          "2383:     },",
          "2384:    },",
          "2385:   },",
          "2386:   \"httpproxy w/ tcpproxy with TLS passthrough and secret name both specified\": {",
          "2387:    objs: []interface{}{",
          "2388:     secretRootsNS,",
          "2389:     tlsPassthroughAndSecretName,",
          "2390:    },",
          "2391:    want: map[types.NamespacedName]Status{",
          "2392:     {Name: \"invalid\", Namespace: serviceKuard.Namespace}: {",
          "2393:      Object:      tlsPassthroughAndSecretName,",
          "2394:      Status:      \"invalid\",",
          "2395:      Description: \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\",",
          "2396:      Vhost:       \"tcpproxy.example.com\",",
          "2397:     },",
          "2398:    },",
          "2399:   },",
          "2400:   \"httpproxy w/ tcpproxy with neither TLS passthrough nor secret name specified\": {",
          "2401:    objs: []interface{}{",
          "2402:     secretRootsNS,",
          "2403:     tlsNoPassthroughOrSecretName,",
          "2404:    },",
          "2405:    want: map[types.NamespacedName]Status{",
          "2406:     {Name: \"invalid\", Namespace: serviceKuard.Namespace}: {",
          "2407:      Object:      tlsNoPassthroughOrSecretName,",
          "2408:      Status:      \"invalid\",",
          "2409:      Description: \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\",",
          "2410:      Vhost:       \"tcpproxy.example.com\",",
          "2411:     },",
          "2412:    },",
          "2413:   },",
          "2414:   \"valid HTTPProxy.TCPProxy\": {",
          "2415:    objs: []interface{}{proxy48root, proxy48child, serviceKuard, secretRootsNS},",
          "2416:    want: map[types.NamespacedName]Status{",
          "2417:     {Name: proxy48root.Name, Namespace: proxy48root.Namespace}:   {Object: proxy48root, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"tcpproxy.example.com\"},",
          "2418:     {Name: proxy48child.Name, Namespace: proxy48child.Namespace}: {Object: proxy48child, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"tcpproxy.example.com\"},",
          "2419:    },",
          "2420:   },",
          "2421:   \"valid HTTPProxy.TCPProxy - plural\": {",
          "2422:    objs: []interface{}{proxy48rootplural, proxy48child, serviceKuard, secretRootsNS},",
          "2423:    want: map[types.NamespacedName]Status{",
          "2424:     {Name: proxy48rootplural.Name, Namespace: proxy48rootplural.Namespace}: {Object: proxy48rootplural, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"tcpproxy.example.com\"},",
          "2425:     {Name: proxy48child.Name, Namespace: proxy48child.Namespace}:           {Object: proxy48child, Status: \"valid\", Description: \"valid HTTPProxy\", Vhost: \"tcpproxy.example.com\"},",
          "2426:    },",
          "2427:   },",
          "2429:   \"invalid HTTPProxy due to empty route.service\": {",
          "2430:    objs: []interface{}{proxy49, serviceKuard},",
          "2431:    want: map[types.NamespacedName]Status{",
          "2432:     {Name: proxy49.Name, Namespace: proxy49.Namespace}: {",
          "2433:      Object:      proxy49,",
          "2434:      Status:      \"invalid\",",
          "2435:      Description: \"route.services must have at least one entry\",",
          "2436:      Vhost:       \"missing-service.example.com\",",
          "2437:     },",
          "2438:    },",
          "2439:   },",
          "2440:   \"invalid fallback certificate passed to contour\": {",
          "2441:    fallbackCertificate: &types.NamespacedName{",
          "2442:     Name:      \"invalid\",",
          "2443:     Namespace: \"invalid\",",
          "2444:    },",
          "2445:    objs: []interface{}{fallbackCertificate, fallbackSecret, secretRootsNS, serviceHome},",
          "2446:    want: map[types.NamespacedName]Status{",
          "2447:     {Name: fallbackCertificate.Name, Namespace: fallbackCertificate.Namespace}: {Object: fallbackCertificate, Status: \"invalid\", Description: \"Spec.Virtualhost.TLS Secret \\\"invalid/invalid\\\" fallback certificate is invalid: Secret not found\", Vhost: \"example.com\"},",
          "2448:    },",
          "2449:   },",
          "2450:   \"fallback certificate requested but cert not configured in contour\": {",
          "2451:    objs: []interface{}{fallbackCertificate, fallbackSecret, secretRootsNS, serviceHome},",
          "2452:    want: map[types.NamespacedName]Status{",
          "2453:     {Name: fallbackCertificate.Name, Namespace: fallbackCertificate.Namespace}: {Object: fallbackCertificate, Status: \"invalid\", Description: \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\", Vhost: \"example.com\"},",
          "2454:    },",
          "2455:   },",
          "2456:   \"fallback certificate requested and clientValidation also configured\": {",
          "2457:    objs: []interface{}{fallbackCertificateWithClientValidation, fallbackSecret, secretRootsNS, serviceHome},",
          "2458:    want: map[types.NamespacedName]Status{",
          "2459:     {Name: fallbackCertificateWithClientValidation.Name, Namespace: fallbackCertificateWithClientValidation.Namespace}: {Object: fallbackCertificateWithClientValidation, Status: \"invalid\", Description: \"Spec.Virtualhost.TLS fallback & client validation are incompatible\", Vhost: \"example.com\"},",
          "2460:    },",
          "2461:   },",
          "2462:   \"proxy with no routes, includes, or tcpproxy is invalid\": {",
          "2463:    objs: []interface{}{emptyProxy},",
          "2464:    want: map[types.NamespacedName]Status{",
          "2465:     {Name: emptyProxy.Name, Namespace: emptyProxy.Namespace}: {",
          "2466:      Object:      emptyProxy,",
          "2467:      Status:      \"invalid\",",
          "2468:      Description: \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\",",
          "2469:      Vhost:       emptyProxy.Spec.VirtualHost.Fqdn,",
          "2470:     },",
          "2471:    },",
          "2472:   },",
          "2473:   \"incompat\": {",
          "2474:    objs: []interface{}{secretRootsNS, authFallback},",
          "2475:    want: map[types.NamespacedName]Status{",
          "2476:     {Name: authFallback.Name, Namespace: authFallback.Namespace}: {",
          "2477:      Object:      authFallback,",
          "2478:      Status:      \"invalid\",",
          "2479:      Description: \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\",",
          "2480:      Vhost:       authFallback.Spec.VirtualHost.Fqdn,",
          "2481:     },",
          "2482:    },",
          "2483:   },",
          "2484:   \"passthrough and client auth are incompatible tlsPassthroughAndValidation\": {",
          "2485:    objs: []interface{}{secretRootsNS, tlsPassthroughAndValidation},",
          "2486:    want: map[types.NamespacedName]Status{",
          "2487:     {Name: tlsPassthroughAndValidation.Name, Namespace: tlsPassthroughAndValidation.Namespace}: {",
          "2488:      Object:      tlsPassthroughAndValidation,",
          "2489:      Status:      \"invalid\",",
          "2490:      Description: \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\",",
          "2491:      Vhost:       tlsPassthroughAndValidation.Spec.VirtualHost.Fqdn,",
          "2492:     },",
          "2493:    },",
          "2494:   },",
          "2495:   \"requestHeadersPolicy, Host header invalid on Service\": {",
          "2496:    objs: []interface{}{invalidRequestHeadersPolicyService, serviceKuard},",
          "2497:    want: map[types.NamespacedName]Status{",
          "2498:     {Name: invalidRequestHeadersPolicyService.Name, Namespace: invalidRequestHeadersPolicyService.Namespace}: {",
          "2499:      Object:      invalidRequestHeadersPolicyService,",
          "2500:      Status:      \"invalid\",",
          "2501:      Description: \"rewriting \\\"Host\\\" header is not supported on a service\",",
          "2502:      Vhost:       invalidRequestHeadersPolicyService.Spec.VirtualHost.Fqdn,",
          "2503:     },",
          "2504:    },",
          "2505:   },",
          "2506:   \"responseHeadersPolicy, Host header invalid on Service\": {",
          "2507:    objs: []interface{}{invalidResponseHeadersPolicyService, serviceKuard},",
          "2508:    want: map[types.NamespacedName]Status{",
          "2509:     {Name: invalidResponseHeadersPolicyService.Name, Namespace: invalidResponseHeadersPolicyService.Namespace}: {",
          "2510:      Object:      invalidResponseHeadersPolicyService,",
          "2511:      Status:      \"invalid\",",
          "2512:      Description: \"rewriting \\\"Host\\\" header is not supported on response headers\",",
          "2513:      Vhost:       invalidResponseHeadersPolicyService.Spec.VirtualHost.Fqdn,",
          "2514:     },",
          "2515:    },",
          "2516:   },",
          "2517:   \"responseHeadersPolicy, Host header invalid on Route\": {",
          "2518:    objs: []interface{}{invalidResponseHeadersPolicyRoute, serviceKuard},",
          "2519:    want: map[types.NamespacedName]Status{",
          "2520:     {Name: invalidResponseHeadersPolicyRoute.Name, Namespace: invalidResponseHeadersPolicyRoute.Namespace}: {",
          "2521:      Object:      invalidResponseHeadersPolicyRoute,",
          "2522:      Status:      \"invalid\",",
          "2523:      Description: \"rewriting \\\"Host\\\" header is not supported on response headers\",",
          "2524:      Vhost:       invalidResponseHeadersPolicyRoute.Spec.VirtualHost.Fqdn,",
          "2525:     },",
          "2526:    },",
          "2527:   },",
          "2528:   \"proxy with invalid response timeout value is invalid\": {",
          "2529:    objs: []interface{}{invalidResponseTimeout, serviceKuard},",
          "2530:    want: map[types.NamespacedName]Status{",
          "2531:     {",
          "2532:      Name:      invalidResponseTimeout.Name,",
          "2533:      Namespace: invalidResponseTimeout.Namespace,",
          "2534:     }: {",
          "2535:      Object:      invalidResponseTimeout,",
          "2536:      Status:      \"invalid\",",
          "2537:      Description: \"route.timeoutPolicy failed to parse: error parsing response timeout: unable to parse timeout string \\\"invalid-val\\\": time: invalid duration \\\"invalid-val\\\"\",",
          "2538:      Vhost:       invalidResponseTimeout.Spec.VirtualHost.Fqdn,",
          "2539:     },",
          "2540:    },",
          "2541:   },",
          "2542:   \"proxy with invalid idle timeout value is invalid\": {",
          "2543:    objs: []interface{}{invalidIdleTimeout, serviceKuard},",
          "2544:    want: map[types.NamespacedName]Status{",
          "2545:     {",
          "2546:      Name:      invalidIdleTimeout.Name,",
          "2547:      Namespace: invalidIdleTimeout.Namespace,",
          "2548:     }: {",
          "2549:      Object:      invalidIdleTimeout,",
          "2550:      Status:      \"invalid\",",
          "2551:      Description: \"route.timeoutPolicy failed to parse: error parsing idle timeout: unable to parse timeout string \\\"invalid-val\\\": time: invalid duration \\\"invalid-val\\\"\",",
          "2552:      Vhost:       invalidIdleTimeout.Spec.VirtualHost.Fqdn,",
          "2553:     },",
          "2554:    },",
          "2555:   },",
          "2556:  }",
          "2558:  for name, tc := range tests {",
          "2559:   t.Run(name, func(t *testing.T) {",
          "2560:    builder := Builder{",
          "2561:     Source: KubernetesCache{",
          "2562:      RootNamespaces: []string{\"roots\", \"marketing\"},",
          "2563:      FieldLogger:    fixture.NewTestLogger(t),",
          "2564:     },",
          "2565:     Processors: []Processor{",
          "2566:      &IngressProcessor{",
          "2567:       FieldLogger: fixture.NewTestLogger(t),",
          "2568:      },",
          "2569:      &HTTPProxyProcessor{",
          "2570:       FallbackCertificate: tc.fallbackCertificate,",
          "2571:      },",
          "2572:      &ListenerProcessor{},",
          "2573:     },",
          "2574:    }",
          "2575:    for _, o := range tc.objs {",
          "2576:     builder.Source.Insert(o)",
          "2577:    }",
          "2578:    dag := builder.Build()",
          "2579:    got := dag.Statuses()",
          "2580:    assert.Equal(t, tc.want, got)",
          "2581:   })",
          "2582:  }",
          "",
          "[Added Lines]",
          "2549:  run(\"proxy with invalid idle timeout value is invalid\", testcase{",
          "2550:   objs: []interface{}{invalidIdleTimeout, fixture.ServiceRootsKuard},",
          "2551:   want: map[types.NamespacedName]Status{",
          "2552:    {",
          "2553:     Name:      invalidIdleTimeout.Name,",
          "2554:     Namespace: invalidIdleTimeout.Namespace,",
          "2555:    }: {",
          "2556:     Object:      invalidIdleTimeout,",
          "2557:     Status:      \"invalid\",",
          "2558:     Description: \"route.timeoutPolicy failed to parse: error parsing idle timeout: unable to parse timeout string \\\"invalid-val\\\": time: invalid duration \\\"invalid-val\\\"\",",
          "2559:     Vhost:       invalidIdleTimeout.Spec.VirtualHost.Fqdn,",
          "2562:  })",
          "",
          "---------------"
        ],
        "internal/fixture/certificate_constants.go||internal/fixture/certificate_constants.go": [
          "File: internal/fixture/certificate_constants.go -> internal/fixture/certificate_constants.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: package fixture",
          "15: const (",
          "17:  CERTIFICATE = `-----BEGIN CERTIFICATE-----",
          "18: MIIDHTCCAgWgAwIBAgIJAOv27DGlF3qdMA0GCSqGSIb3DQEBBQUAMCUxIzAhBgNV",
          "19: BAMMGmJvcmluZy13b3puaWFrLmV4YW1wbGUuY29tMB4XDTE5MTIwNTAxMzQzM1oX",
          "20: DTI5MTIwMjAxMzQzM1owJTEjMCEGA1UEAwwaYm9yaW5nLXdvem5pYWsuZXhhbXBs",
          "21: ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbgwFwfbikZxPb",
          "22: NYidPuNJoexq5W9fJrB/3jqsWox8pfess0bw/EL/VcEUqlrcuo40Md0MxApPuoPj",
          "23: eZCOZYhrA2XgcVTMnq61vusnuvmeG/qcrd5apSOoopSo2pmmI1rsJ1AVpheA+eR6",
          "24: uoWVILK8uYtPmcOQAoCU/E6iZYDLZ0AEiU16kz/cGfWx9lBukd+LQ+ZRQnLDiEI/",
          "25: 4hRmrZrEdJoDglzIgJVI+c8OfwbLq5eRMY2fYnxqm/1BJhqjDBc4Q8ufYgfOwobu",
          "26: JdVoSgiFy7wyH0GxMk4LRR6yJXLs1yjaihLERbjzlStvFVl4yidpE6Bi0amKW8HT",
          "27: Qxgk7iRRAgMBAAGjUDBOMB0GA1UdDgQWBBTLcIMeWLFiL2waFL6FPomNZR7gFDAf",
          "28: BgNVHSMEGDAWgBTLcIMeWLFiL2waFL6FPomNZR7gFDAMBgNVHRMEBTADAQH/MA0G",
          "29: CSqGSIb3DQEBBQUAA4IBAQBQLWokaWuFeSWLpxxaBX6aatgKAKNUSqDWNzM9zVMH",
          "30: xJVDywWJT3pwq7JUXujVS/c9mzCPJEsn7OQPihQECRq09l/nBK0kn9I1X6X1SMtD",
          "31: OJbpEWfQQxgstdgeC6pxrZRanF5a7EWO0pFSfjuM1ABjsdExaG3C8+wgEqOjHFDS",
          "32: NaW826GOFf/uMOnavpG6QePECAtJVpLAZPw6Rah6cAZrYUUezM/Tg+8JUhYUS20F",
          "33: STZG5knGQIe6kksWGkJUhMu8xLdH2HKtUVAkDu7jITy2WZbg0O/Pxe30b4qyt29Y",
          "34: 813p8G+7188EFDBGNihYYVJ+GJ/d/WPoptSHJOfShtbk",
          "35: -----END CERTIFICATE-----`",
          "37:  CERTIFICATE_WITH_TEXT = CERTIFICATE + \"\\t\\r\\n\"",
          "39:  RSA_PRIVATE_KEY = `-----BEGIN RSA PRIVATE KEY-----",
          "40: MIIEpAIBAAKCAQEA24MBcH24pGcT2zWInT7jSaHsauVvXyawf946rFqMfKX3rLNG",
          "41: 8PxC/1XBFKpa3LqONDHdDMQKT7qD43mQjmWIawNl4HFUzJ6utb7rJ7r5nhv6nK3e",
          "42: WqUjqKKUqNqZpiNa7CdQFaYXgPnkerqFlSCyvLmLT5nDkAKAlPxOomWAy2dABIlN",
          "43: epM/3Bn1sfZQbpHfi0PmUUJyw4hCP+IUZq2axHSaA4JcyICVSPnPDn8Gy6uXkTGN",
          "44: n2J8apv9QSYaowwXOEPLn2IHzsKG7iXVaEoIhcu8Mh9BsTJOC0UesiVy7Nco2ooS",
          "45: xEW485UrbxVZeMonaROgYtGpilvB00MYJO4kUQIDAQABAoIBAF5L671gNIZjRVNg",
          "46: rtwl3MuPxJizEOHGJAH5/Ch4CWuufDPzG6GALGO1eekfuUKi3V2sofHO8UMIs4lv",
          "47: elrBYRXfcs80wCHadODcL/Z0SrDSAhl2U1OLJ0NU/BmBNon5HCDgTnXOUMB2GOFj",
          "48: 6OiEEGQkLKU4P5tIh+X4cOswQWCeoVjW0JVgni20hi3LJNTxSNYeU5VFvPKtoBLl",
          "49: 8nFqF3ky+bqYfS6H6qM/mO+XL0NQ2wjMteyUeDXcVGfsf7Ir21SUw3zGaeBJl55B",
          "50: 6BrUgfxVOKuxkw2bwxmu8HX+CxlMMMzaRt+5URFbfOaMgXzjpikrxdeFAAGeu0m4",
          "51: bidUR5UCgYEA8lRGqYfowoOCrV8Ksn8nM0Z9PlnmKM5d9mQ875sm/SYLO43h+s0D",
          "52: R4VWmLzaGyi0m0036lxIthDfbbGWSjmNrgQ0YIS7ilmBPMUKKYzXgDoiI76aJBTz",
          "53: UMpWutb+VYimPPorLKcxNb3BjR3QHx7vCRS2gV5izV0djtMkKc53OXsCgYEA5+Uz",
          "54: A7cmO8gHyxlW6SA3+wMH6VKP5ABTkDmKfRF3NCv4UHNn4TtlNuS1D3ZMNXWgCtz6",
          "55: qJ/bRTAqseBIX15pzR/MvyNmHRUN3A2Ba6vB2pJux+ZyQjxn3Z+gisjX+eN3LvTU",
          "56: YpcJNi0HSuV57n4AAk5YPO5iMEFw95vfBn3MMaMCgYEAnFwyqAsQ7gmLVTDBJ0GS",
          "57: Wqx9/bBmKShXSreM9hIHi0pz7v5ytLB6EDkCElWw6dtPBfJCRQ88v3WNpSr0TXpr",
          "58: Z8BAx5J9rBxqnnqJPxwopQ1dn/DJZsS55wRYCADXZPtiQHAvUYWj5AhHjjWRZ7M/",
          "59: C3348OqlF9ugSdsFN5CIL2cCgYEAqt5lop03XOFdbLe1JH4LAbgQAkpFoDjlWeYs",
          "60: N0/BR/4GMDF5H6sGP1ZyW3xNVy7eyGJfiBSSGv8M1phue2c0CmMeGNDakx9KYRTK",
          "61: gi3C32z6l+0jz852sgTG5Lxs98I1tbHNNQAZV4QCVZuVJrhNBWX4+pykWO4/cRO3",
          "62: WC8lYIUCgYBmmN4z0MR2YWoRvN3lYey3bRGAvsSU6ouiFo40UZdZaRXc1sA3oc+5",
          "63: 6Di3f8eOIhM5IekOBoaTBf90V8seB6Nw+/jzAViG1HDI7k0ZOoApDuFS6NYk1/bU",
          "64: dk98FvYdyAjjgNsxXCyx7vIgYU3OgVNgvFsFubX/Uk66fcfCpPBMLg==",
          "65: -----END RSA PRIVATE KEY-----`",
          "73:  EC_CERTIFICATE = `-----BEGIN CERTIFICATE-----",
          "74: MIIBfzCCASWgAwIBAgIUZ8EBxJShrhAiO9bG6aRVcJdlEJowCgYIKoZIzj0EAwIw",
          "75: KTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMQ0wCwYDVQQKDARBY21lMB4XDTE5",
          "76: MTIwNTAxNTg0NFoXDTI5MTIwMjAxNTg0NFowKTELMAkGA1UEBhMCVVMxCzAJBgNV",
          "77: BAgMAkNBMQ0wCwYDVQQKDARBY21lMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE",
          "78: zCdqvU5dSKxzDAVakEi97epIazdkUKRT2XZtUk41Hp2H4xy8EzR1Re3r9AdJRsJn",
          "79: sGrHGbIg2r7OUNYgeN4ot6MrMCkwJwYDVR0RBCAwHoILZXhhbXBsZS5jb22CD3d3",
          "80: dy5leGFtcGxlLmNvbTAKBggqhkjOPQQDAgNIADBFAiAYFlD2n/uWWxTqi8WcWvb1",
          "81: CUDxSzF2/jLe1PIFkwNk7wIhAP9kMCO1ys050JNvlVZg3xvPvCHKCkWcSachE5fC",
          "82: 5hc6",
          "83: -----END CERTIFICATE-----`",
          "85:  EC_PRIVATE_KEY = `-----BEGIN EC PARAMETERS-----",
          "86: BggqhkjOPQMBBw==",
          "87: -----END EC PARAMETERS-----",
          "88: -----BEGIN EC PRIVATE KEY-----",
          "89: MHcCAQEEIAM3LdZrzZk8Hn4VqBDNTgOuh9E772M4sgEYvZMNOy4moAoGCCqGSM49",
          "90: AwEHoUQDQgAEzCdqvU5dSKxzDAVakEi97epIazdkUKRT2XZtUk41Hp2H4xy8EzR1",
          "91: Re3r9AdJRsJnsGrHGbIg2r7OUNYgeN4otw==",
          "92: -----END EC PRIVATE KEY-----`",
          "97:  MISSING_CN_CERT = `-----BEGIN CERTIFICATE-----",
          "98: MIIDYzCCAkugAwIBAgIUcNI/oD/y3dZ2Rmyvz9Xb4BsC0nswDQYJKoZIhvcNAQEL",
          "99: BQAwQTETMBEGCgmSJomT8ixkARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBmRvbWFp",
          "100: bjESMBAGCgmSJomT8ixkARkWAm15MB4XDTE5MTIwMzA0MDYyM1oXDTIwMTIwMjA0",
          "101: MDYyM1owQTETMBEGCgmSJomT8ixkARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBmRv",
          "102: bWFpbjESMBAGCgmSJomT8ixkARkWAm15MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A",
          "103: MIIBCgKCAQEAxblHSlzhyDY88rhILpn+rCALqK1ELcbL5T3FygLEdUlE/da3VpSz",
          "104: wBaZc9UIhFpwnkvUy8eKYbLy9jIk3C0aJasrX828MkF4lInSJf0BREbddxmwDovl",
          "105: KZoo7xz2rY6LPTopZ1GdszzsPxvBFvc1gWl0UEXkxDAZjtnDuVB+hBv6RR7BpSdN",
          "106: Fxds3OVles1mgasW79gMCb22gFa9vJKkxVJz5IIstrShjCfNvPvULf3aeMJjy8fM",
          "107: x8kHBiRSs6HC4dFR3cR1uuZCdnkeR76X3gAn9A18VBMvA25JehhfLYnVJi80UgGV",
          "108: PAxKgjU8dw8auvbmopzkguyFTfW6sYfDBQIDAQABo1MwUTAdBgNVHQ4EFgQUITS5",
          "109: 7JyH/S2wUrZnUjQXAp1nTPQwHwYDVR0jBBgwFoAUITS57JyH/S2wUrZnUjQXAp1n",
          "110: TPQwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAn5nxNyI6+3MD",
          "111: X5hzg5G0gTZafL8qN5bJGlFRWeyU2CvWsXbHCYtzADkwGCcCyoA1nmb460kwZ4vk",
          "112: fOz9FYqZoh4IIegs5bB559Ze26Kjl5AgAFARXxV6s0cPDQ2O1XFkNIQiLFHHPfRR",
          "113: RJtQgNaLppCe8TFNPjUDqNfoWPQvnlEYMYsvKto7pNw+HGreXhGF5CUCGIqT747P",
          "114: zYmBGZEE2q1L45nErZFK4d74XzGu/4Kc73zEFS6GT71Zu6Ec6wUCKdciyNtFHFmh",
          "115: 4l3l5YC+1zK6ZeOBxdoMKpldD9EV4GQqW8aE2Adpd5RcUUQJnqWM+/ysod/AnHL/",
          "116: fm35MjBa+w==",
          "117: -----END CERTIFICATE-----",
          "118: `",
          "119:  MISSING_CN_KEY = `-----BEGIN PRIVATE KEY-----",
          "120: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDFuUdKXOHINjzy",
          "121: uEgumf6sIAuorUQtxsvlPcXKAsR1SUT91rdWlLPAFplz1QiEWnCeS9TLx4phsvL2",
          "122: MiTcLRolqytfzbwyQXiUidIl/QFERt13GbAOi+UpmijvHPatjos9OilnUZ2zPOw/",
          "123: G8EW9zWBaXRQReTEMBmO2cO5UH6EG/pFHsGlJ00XF2zc5WV6zWaBqxbv2AwJvbaA",
          "124: Vr28kqTFUnPkgiy2tKGMJ828+9Qt/dp4wmPLx8zHyQcGJFKzocLh0VHdxHW65kJ2",
          "125: eR5HvpfeACf0DXxUEy8Dbkl6GF8tidUmLzRSAZU8DEqCNTx3Dxq69uainOSC7IVN",
          "126: 9bqxh8MFAgMBAAECggEAZVvBjAFpTPVg8Rw/BIS05Q/YajPIS58pTu8HwbMBew6A",
          "127: a4/ylFPOgZ4UNCj1IMQsDznYcE5uRf8yRbsW4jfMu5qvtYEGBM1DPwIX1JmKWLHr",
          "128: Pe7RLePRKi545Xr3iakU/+Ic73YLXaLRiNh1d4xqxViF49CwoVH3CB/iEdGNybKX",
          "129: CyWxNUS9Tguzg26zIqvtjjqzP3ULt/P+fi/NTIKswv4Btp6hI8QDA2RL6RFJYIL2",
          "130: jVpRFUSOhl5N7fg8ZKIAaQFetenzM/yF29qa6nlIhXFsep6bRaLqw9Hni2YB6yCh",
          "131: 7z4I/ygSTirPW1yk+NPiLjc6mTZVf7EvdFeApOOSUQKBgQDq71Hb0hciDyFkdq3R",
          "132: nxskJeiSk8b141tarlrUTvoPRYwOaeKcDN2Lzj7Y9Pqxllb8CSjoOR0B/pfwvfxI",
          "133: J2HGoNf7PK3rn166QiFPPFxwa5bMpCcbEoljToB4nCRDsYRlUrd/hAHAb1ptLqK2",
          "134: OHc2pbOo0mmYORstIFccrKJDYwKBgQDXc9FA78KjZ7iS2GCs3yXOdS2U1TD5hZMr",
          "135: MDXMA0CMbxTYmLRLD0x41hXzH/2UsfQNCYQZCOqWhW3FJHqAaBz0w2n+dOMkWeSq",
          "136: EI5ghDQyu/HM2V7xk3tYYXhZ/FxOzcd2l/DUzKZsPJuxsXsNaUn9+ZOE44xHRjNf",
          "137: wYvNv17QdwKBgQCujZO/hLAlYSKJV1g8OD/dMsFDLsMT7JHypTrdJbTLZfvytZ9m",
          "138: HHT7LAkr/5DII5CLgG7BY7X2xmezuiTYo1IVV2pBw8rhFy81qm6/RXTVHksTzx8z",
          "139: ESm8/BWeBz02go2BDt1BxB3dEZ8ZIh5Iz1lb4+/BjlxgeoWDmNTAfE+vSwKBgFGq",
          "140: I7HSb1tSsEJw48wC1Si5f6p/WI3r1Im1P17yCKByZltnHkepJ9pRg4ZhJNQc052x",
          "141: crGukIS3VJE6L3jGfdtEysNZeNNJg4P2vJDW65YjaRa1eehld4Zbg6vQHQj9tNI9",
          "142: 61otrBMwse8bj8HYm+Q5mnHvcjd943EzQpOdKwonAoGBAKGymiC7RgrdaxbKf7oE",
          "143: dsipT/w+MFInBLLiJcqLAfh0647vhjCFNGG4MZ6YGVwiIdvjZ1dH2Ujsdo8e0+Wi",
          "144: 8cnx8JvuAJdr5HzMI6fvnMDzjzAskMgYUNhOUhM2g223JuoyyLY2/DL7dOYkFeSn",
          "145: b5qYn0JNERfPYdLwXNV1HCM9",
          "146: -----END PRIVATE KEY-----",
          "147: `",
          "148: )",
          "",
          "---------------"
        ],
        "internal/fixture/secret_fixtures.go||internal/fixture/secret_fixtures.go": [
          "File: internal/fixture/secret_fixtures.go -> internal/fixture/secret_fixtures.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: package fixture",
          "15: import (",
          "16:  v1 \"k8s.io/api/core/v1\"",
          "17: )",
          "19: var SecretRootsCert = &v1.Secret{",
          "20:  ObjectMeta: ObjectMeta(\"roots/ssl-cert\"),",
          "21:  Type:       v1.SecretTypeTLS,",
          "22:  Data: map[string][]byte{",
          "23:   v1.TLSCertKey:       []byte(CERTIFICATE),",
          "24:   v1.TLSPrivateKeyKey: []byte(RSA_PRIVATE_KEY),",
          "25:  },",
          "26: }",
          "28: var SecretProjectContourCert = &v1.Secret{",
          "29:  ObjectMeta: ObjectMeta(\"projectcontour/default-ssl-cert\"),",
          "30:  Type:       v1.SecretTypeTLS,",
          "31:  Data:       SecretRootsCert.Data,",
          "32: }",
          "34: var SecretRootsFallback = &v1.Secret{",
          "35:  ObjectMeta: ObjectMeta(\"roots/fallbacksecret\"),",
          "36:  Type:       v1.SecretTypeTLS,",
          "37:  Data: map[string][]byte{",
          "38:   v1.TLSCertKey:       []byte(CERTIFICATE),",
          "39:   v1.TLSPrivateKeyKey: []byte(RSA_PRIVATE_KEY),",
          "40:  },",
          "41: }",
          "",
          "---------------"
        ],
        "internal/fixture/service_fixtures.go||internal/fixture/service_fixtures.go": [
          "File: internal/fixture/service_fixtures.go -> internal/fixture/service_fixtures.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: package fixture",
          "15: import (",
          "16:  v1 \"k8s.io/api/core/v1\"",
          "17:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "18: )",
          "20: var ServiceRootsKuard = &v1.Service{",
          "21:  ObjectMeta: ObjectMeta(\"roots/kuard\"),",
          "22:  Spec: v1.ServiceSpec{",
          "23:   Ports: []v1.ServicePort{{",
          "24:    Name:       \"http\",",
          "25:    Protocol:   \"TCP\",",
          "26:    Port:       8080,",
          "27:    TargetPort: intstr.FromInt(8080),",
          "28:   }},",
          "29:  },",
          "30: }",
          "32: var ServiceRootsHome = &v1.Service{",
          "33:  ObjectMeta: ObjectMeta(\"roots/home\"),",
          "34:  Spec: v1.ServiceSpec{",
          "35:   Ports: []v1.ServicePort{{",
          "36:    Name:     \"http\",",
          "37:    Protocol: \"TCP\",",
          "38:    Port:     8080,",
          "39:   }},",
          "40:  },",
          "41: }",
          "43: var ServiceRootsFoo2 = &v1.Service{",
          "44:  ObjectMeta: ObjectMeta(\"roots/foo2\"),",
          "45:  Spec: v1.ServiceSpec{",
          "46:   Ports: []v1.ServicePort{{",
          "47:    Name:     \"http\",",
          "48:    Protocol: \"TCP\",",
          "49:    Port:     8080,",
          "50:   }},",
          "51:  },",
          "52: }",
          "54: var ServiceRootsFoo3InvalidPort = &v1.Service{",
          "55:  ObjectMeta: ObjectMeta(\"roots/foo3\"),",
          "56:  Spec: v1.ServiceSpec{",
          "57:   Ports: []v1.ServicePort{{",
          "58:    Name:     \"http\",",
          "59:    Protocol: \"TCP\",",
          "60:    Port:     12345678,",
          "61:   }},",
          "62:  },",
          "63: }",
          "65: var ServiceMarketingGreen = &v1.Service{",
          "66:  ObjectMeta: ObjectMeta(\"marketing/green\"),",
          "67:  Spec: v1.ServiceSpec{",
          "68:   Ports: []v1.ServicePort{{",
          "69:    Name:     \"http\",",
          "70:    Protocol: \"TCP\",",
          "71:    Port:     80,",
          "72:   }},",
          "73:  },",
          "74: }",
          "76: var ServiceRootsNginx = &v1.Service{",
          "77:  ObjectMeta: ObjectMeta(\"roots/nginx\"),",
          "78:  Spec: v1.ServiceSpec{",
          "79:   Ports: []v1.ServicePort{{",
          "80:    Protocol: \"TCP\",",
          "81:    Port:     80,",
          "82:   }},",
          "83:  },",
          "84: }",
          "86: var ServiceTeamAKuard = &v1.Service{",
          "87:  ObjectMeta: ObjectMeta(\"teama/kuard\"),",
          "88:  Spec: v1.ServiceSpec{",
          "89:   Ports: []v1.ServicePort{{",
          "90:    Name:       \"http\",",
          "91:    Protocol:   \"TCP\",",
          "92:    Port:       8080,",
          "93:    TargetPort: intstr.FromInt(8080),",
          "94:   }},",
          "95:  },",
          "96: }",
          "98: var ServiceTeamBKuard = &v1.Service{",
          "99:  ObjectMeta: ObjectMeta(\"teamb/kuard\"),",
          "100:  Spec: v1.ServiceSpec{",
          "101:   Ports: []v1.ServicePort{{",
          "102:    Name:       \"http\",",
          "103:    Protocol:   \"TCP\",",
          "104:    Port:       8080,",
          "105:    TargetPort: intstr.FromInt(8080),",
          "106:   }},",
          "107:  },",
          "108: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f3e6d0ab1d48e64bae46400c85c490b200393a3",
      "candidate_info": {
        "commit_hash": "5f3e6d0ab1d48e64bae46400c85c490b200393a3",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/5f3e6d0ab1d48e64bae46400c85c490b200393a3",
        "files": [
          "cmd/contour/serve.go",
          "examples/contour/01-contour-config.yaml",
          "examples/render/contour-gateway.yaml",
          "examples/render/contour.yaml",
          "go.mod",
          "internal/dag/accessors.go",
          "internal/dag/accessors_test.go",
          "internal/dag/builder_test.go",
          "internal/dag/extension_processor.go",
          "internal/dag/gatewayapi_processor.go",
          "internal/dag/httpproxy_processor.go",
          "internal/dag/ingress_processor.go",
          "internal/dag/status_test.go",
          "internal/featuretests/v3/externalname_test.go",
          "internal/featuretests/v3/headerpolicy_test.go",
          "pkg/config/parameters.go",
          "site/content/docs/main/configuration.md",
          "test/e2e/httpproxy/external_name_test.go",
          "test/e2e/httpproxy/httpproxy_test.go"
        ],
        "message": "Merge pull request from GHSA-5ph6-qq5x-7jwc\n\nSigned-off-by: Nick Young <ynick@vmware.com>",
        "before_after_code_files": [
          "cmd/contour/serve.go||cmd/contour/serve.go",
          "go.mod||go.mod",
          "internal/dag/accessors.go||internal/dag/accessors.go",
          "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
          "internal/dag/builder_test.go||internal/dag/builder_test.go",
          "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
          "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
          "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
          "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
          "internal/dag/status_test.go||internal/dag/status_test.go",
          "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
          "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
          "pkg/config/parameters.go||pkg/config/parameters.go",
          "test/e2e/httpproxy/external_name_test.go||test/e2e/httpproxy/external_name_test.go",
          "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "go.mod||go.mod",
            "internal/dag/accessors.go||internal/dag/accessors.go",
            "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go",
            "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
            "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
            "pkg/config/parameters.go||pkg/config/parameters.go",
            "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
          ],
          "candidate": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "go.mod||go.mod",
            "internal/dag/accessors.go||internal/dag/accessors.go",
            "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go",
            "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
            "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
            "pkg/config/parameters.go||pkg/config/parameters.go",
            "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/contour/serve.go||cmd/contour/serve.go": [
          "File: cmd/contour/serve.go -> cmd/contour/serve.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
          "716:  }",
          "719:  dagProcessors := []dag.Processor{",
          "720:   &dag.IngressProcessor{",
          "723:   },",
          "724:   &dag.ExtensionServiceProcessor{",
          "725:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
          "726:    ClientCertificate: clientCert,",
          "727:   },",
          "728:   &dag.HTTPProxyProcessor{",
          "735:   },",
          "736:  }",
          "738:  if ctx.Config.GatewayConfig != nil && clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
          "739:   dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
          "741:   })",
          "742:  }",
          "",
          "[Removed Lines]",
          "721:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
          "722:    ClientCertificate: clientCert,",
          "729:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
          "730:    FallbackCertificate:   fallbackCert,",
          "731:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
          "732:    ClientCertificate:     clientCert,",
          "733:    RequestHeadersPolicy:  &requestHeadersPolicy,",
          "734:    ResponseHeadersPolicy: &responseHeadersPolicy,",
          "740:    FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
          "",
          "[Added Lines]",
          "718:  log.Debugf(\"EnableExternalNameService is set to %t\", ctx.Config.EnableExternalNameService)",
          "722:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
          "723:    FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
          "724:    ClientCertificate:         clientCert,",
          "733:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
          "734:    DisablePermitInsecure:     ctx.Config.DisablePermitInsecure,",
          "735:    FallbackCertificate:       fallbackCert,",
          "736:    DNSLookupFamily:           ctx.Config.Cluster.DNSLookupFamily,",
          "737:    ClientCertificate:         clientCert,",
          "738:    RequestHeadersPolicy:      &requestHeadersPolicy,",
          "739:    ResponseHeadersPolicy:     &responseHeadersPolicy,",
          "745:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
          "746:    FieldLogger:               log.WithField(\"context\", \"GatewayAPIProcessor\"),",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: require (",
          "6:  github.com/ahmetb/gen-crd-api-reference-docs v0.3.0",
          "7:  github.com/bombsimon/logrusr v1.0.0",
          "8:  github.com/envoyproxy/go-control-plane v0.9.9-0.20210111201334-f1f47757da33",
          "9:  github.com/go-logr/logr v0.4.0",
          "10:  github.com/golang/protobuf v1.5.2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  github.com/davecgh/go-spew v1.1.1 // indirect",
          "",
          "---------------"
        ],
        "internal/dag/accessors.go||internal/dag/accessors.go": [
          "File: internal/dag/accessors.go -> internal/dag/accessors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  svc, svcPort, err := cache.LookupService(meta, port)",
          "56:  if err != nil {",
          "57:   return nil, err",
          "58:  }",
          "60:  if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {",
          "61:   return dagSvc, nil",
          "62:  }",
          "",
          "[Removed Lines]",
          "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache) (*Service, error) {",
          "",
          "[Added Lines]",
          "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache, enableExternalNameSvc bool) (*Service, error) {",
          "60:  err = validateExternalName(svc, enableExternalNameSvc)",
          "61:  if err != nil {",
          "62:   return nil, err",
          "63:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  return dagSvc, nil",
          "79: }",
          "81: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
          "82:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
          "83:  protocol := up[port.Name]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: func validateExternalName(svc *v1.Service, enableExternalNameSvc bool) error {",
          "89:  en := externalName(svc)",
          "90:  if en == \"\" {",
          "91:   return nil",
          "92:  }",
          "95:  if !enableExternalNameSvc {",
          "96:   return fmt.Errorf(\"%s/%s is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting.\", svc.Namespace, svc.Name)",
          "97:  }",
          "104:  localhostNames := map[string]struct{}{",
          "105:   \"localhost\":               {},",
          "106:   \"localhost.localdomain\":   {},",
          "107:   \"local.projectcontour.io\": {},",
          "108:  }",
          "110:  _, localhost := localhostNames[en]",
          "111:  if localhost {",
          "112:   return fmt.Errorf(\"%s/%s is an ExternalName service that points to localhost, this is not allowed.\", svc.Namespace, svc.Name)",
          "113:  }",
          "115:  return nil",
          "116: }",
          "",
          "---------------"
        ],
        "internal/dag/accessors_test.go||internal/dag/accessors_test.go": [
          "File: internal/dag/accessors_test.go -> internal/dag/accessors_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:    }},",
          "41:   },",
          "42:  }",
          "43:  services := map[types.NamespacedName]*v1.Service{",
          "45:  }",
          "47:  tests := map[string]struct {",
          "48:   types.NamespacedName",
          "52:  }{",
          "53:   \"lookup service by port number\": {",
          "54:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "",
          "[Removed Lines]",
          "44:   {Name: \"service1\", Namespace: \"default\"}: s1,",
          "49:   port    intstr.IntOrString",
          "50:   want    *Service",
          "51:   wantErr error",
          "",
          "[Added Lines]",
          "44:  externalNameValid := &v1.Service{",
          "45:   ObjectMeta: metav1.ObjectMeta{",
          "46:    Name:      \"externalnamevalid\",",
          "47:    Namespace: \"default\",",
          "48:   },",
          "49:   Spec: v1.ServiceSpec{",
          "50:    Type:         v1.ServiceTypeExternalName,",
          "51:    ExternalName: \"external.projectcontour.io\",",
          "52:    Ports: []v1.ServicePort{{",
          "53:     Name:       \"http\",",
          "54:     Protocol:   \"TCP\",",
          "55:     Port:       80,",
          "56:     TargetPort: intstr.FromInt(80),",
          "57:    }},",
          "58:   },",
          "59:  }",
          "61:  externalNameLocalhost := &v1.Service{",
          "62:   ObjectMeta: metav1.ObjectMeta{",
          "63:    Name:      \"externalnamelocalhost\",",
          "64:    Namespace: \"default\",",
          "65:   },",
          "66:   Spec: v1.ServiceSpec{",
          "67:    Type:         v1.ServiceTypeExternalName,",
          "68:    ExternalName: \"localhost\",",
          "69:    Ports: []v1.ServicePort{{",
          "70:     Name:       \"http\",",
          "71:     Protocol:   \"TCP\",",
          "72:     Port:       80,",
          "73:     TargetPort: intstr.FromInt(80),",
          "74:    }},",
          "75:   },",
          "76:  }",
          "79:   {Name: \"service1\", Namespace: \"default\"}:              s1,",
          "80:   {Name: \"externalnamevalid\", Namespace: \"default\"}:     externalNameValid,",
          "81:   {Name: \"externalnamelocalhost\", Namespace: \"default\"}: externalNameLocalhost,",
          "86:   port                  intstr.IntOrString",
          "87:   enableExternalNameSvc bool",
          "88:   want                  *Service",
          "89:   wantErr               error",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:    port:           intstr.FromString(\"9999\"),",
          "81:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
          "82:   },",
          "83:  }",
          "85:  for name, tc := range tests {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   \"When ExternalName Services are not disabled no error is returned\": {",
          "122:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
          "123:    port:           intstr.FromString(\"80\"),",
          "124:    want: &Service{",
          "125:     Weighted: WeightedService{",
          "126:      Weight:           1,",
          "127:      ServiceName:      \"externalnamevalid\",",
          "128:      ServiceNamespace: \"default\",",
          "129:      ServicePort: v1.ServicePort{",
          "130:       Name:       \"http\",",
          "131:       Protocol:   \"TCP\",",
          "132:       Port:       80,",
          "133:       TargetPort: intstr.FromInt(80),",
          "134:      },",
          "135:     },",
          "136:     ExternalName: \"external.projectcontour.io\",",
          "137:    },",
          "138:    enableExternalNameSvc: true,",
          "139:   },",
          "140:   \"When ExternalName Services are disabled an error is returned\": {",
          "141:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
          "142:    port:           intstr.FromString(\"80\"),",
          "143:    wantErr:        errors.New(`default/externalnamevalid is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting.`),",
          "144:   },",
          "145:   \"When ExternalName Services are enabled but a localhost ExternalName is used an error is returned\": {",
          "146:    NamespacedName:        types.NamespacedName{Name: \"externalnamelocalhost\", Namespace: \"default\"},",
          "147:    port:                  intstr.FromString(\"80\"),",
          "148:    wantErr:               errors.New(`default/externalnamelocalhost is an ExternalName service that points to localhost, this is not allowed.`),",
          "149:    enableExternalNameSvc: true,",
          "150:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:    var dag DAG",
          "97:    assert.Equal(t, tc.want, got)",
          "98:    assert.Equal(t, tc.wantErr, gotErr)",
          "99:   })",
          "",
          "[Removed Lines]",
          "96:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source)",
          "",
          "[Added Lines]",
          "164:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source, tc.enableExternalNameSvc)",
          "",
          "---------------"
        ],
        "internal/dag/builder_test.go||internal/dag/builder_test.go": [
          "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6536:   },",
          "6537:  }",
          "6539:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
          "6540:   ObjectMeta: metav1.ObjectMeta{",
          "6541:    Name:      \"example-com\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6539:  ingressExternalNameService := &networking_v1.Ingress{",
          "6540:   ObjectMeta: metav1.ObjectMeta{",
          "6541:    Name:      \"externalname\",",
          "6542:    Namespace: \"default\",",
          "6543:   },",
          "6544:   Spec: networking_v1.IngressSpec{",
          "6545:    Rules: []networking_v1.IngressRule{{",
          "6546:     Host: \"example.com\",",
          "6547:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "6548:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "6549:       Paths: []networking_v1.HTTPIngressPath{{",
          "6550:        Backend: *backendv1(s14.GetName(), intstr.FromInt(80)),",
          "6551:       }},",
          "6552:      },",
          "6553:     },",
          "6554:    }},",
          "6555:   },",
          "6556:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6582:  tests := map[string]struct {",
          "6583:   objs                         []interface{}",
          "6584:   disablePermitInsecure        bool",
          "6585:   fallbackCertificateName      string",
          "6586:   fallbackCertificateNamespace string",
          "6587:   want                         []Vertex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6604:   enableExternalNameSvc        bool",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8980:     },",
          "8981:    ),",
          "8982:   },",
          "8983:   \"insert proxy with externalName service\": {",
          "8984:    objs: []interface{}{",
          "8985:     proxyExternalNameService,",
          "8986:     s14,",
          "8987:    },",
          "8988:    want: listeners(",
          "8989:     &Listener{",
          "8990:      Port: 80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9003:   \"insert ingress with externalName service\": {",
          "9004:    objs: []interface{}{",
          "9005:     ingressExternalNameService,",
          "9006:     s14,",
          "9007:    },",
          "9008:    enableExternalNameSvc: true,",
          "9009:    want: listeners(",
          "9010:     &Listener{",
          "9011:      Port: 80,",
          "9012:      VirtualHosts: virtualhosts(",
          "9013:       virtualhost(\"example.com\", &Route{",
          "9014:        PathMatchCondition: prefixString(\"/\"),",
          "9015:        Clusters: []*Cluster{{",
          "9016:         Upstream: &Service{",
          "9017:          ExternalName: \"externalservice.io\",",
          "9018:          Weighted: WeightedService{",
          "9019:           Weight:           1,",
          "9020:           ServiceName:      s14.Name,",
          "9021:           ServiceNamespace: s14.Namespace,",
          "9022:           ServicePort:      s14.Spec.Ports[0],",
          "9023:          },",
          "9024:         },",
          "9025:        }},",
          "9026:       }),",
          "9027:      ),",
          "9028:     },",
          "9029:    ),",
          "9030:   },",
          "9031:   \"insert ingress with externalName service, but externalName services disabled\": {",
          "9032:    objs: []interface{}{",
          "9033:     ingressExternalNameService,",
          "9034:     s14,",
          "9035:    },",
          "9036:    enableExternalNameSvc: false,",
          "9037:    want:                  listeners(),",
          "9038:   },",
          "9044:    enableExternalNameSvc: true,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9014:     s14,",
          "9015:     sec1,",
          "9016:    },",
          "9017:    want: listeners(",
          "9018:     &Listener{",
          "9019:      Port: 443,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9074:    enableExternalNameSvc: true,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9073:     proxyReplaceHostHeaderRoute,",
          "9074:     s14,",
          "9075:    },",
          "9076:    want: listeners(",
          "9077:     &Listener{",
          "9078:      Port: 80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9134:    enableExternalNameSvc: true,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9111:     proxyReplaceHostHeaderService,",
          "9112:     s14,",
          "9113:    },",
          "9115:   },",
          "9116:   \"insert proxy with response header policy - route - host header\": {",
          "9117:    objs: []interface{}{",
          "",
          "[Removed Lines]",
          "9114:    want: listeners(),",
          "",
          "[Added Lines]",
          "9173:    enableExternalNameSvc: true,",
          "9174:    want:                  listeners(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9754:     },",
          "9755:     Processors: []Processor{",
          "9756:      &IngressProcessor{",
          "9758:      },",
          "9759:      &HTTPProxyProcessor{",
          "9761:       FallbackCertificate: &types.NamespacedName{",
          "9762:        Name:      tc.fallbackCertificateName,",
          "9763:        Namespace: tc.fallbackCertificateNamespace,",
          "",
          "[Removed Lines]",
          "9757:       FieldLogger: fixture.NewTestLogger(t),",
          "9760:       DisablePermitInsecure: tc.disablePermitInsecure,",
          "",
          "[Added Lines]",
          "9817:       FieldLogger:               fixture.NewTestLogger(t),",
          "9818:       EnableExternalNameService: tc.enableExternalNameSvc,",
          "9821:       EnableExternalNameService: tc.enableExternalNameSvc,",
          "9822:       DisablePermitInsecure:     tc.disablePermitInsecure,",
          "",
          "---------------"
        ],
        "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
          "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go"
        ],
        "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go": [
          "File: internal/dag/gatewayapi_processor.go -> internal/dag/gatewayapi_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  dag    *DAG",
          "49:  source *KubernetesCache",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:  EnableExternalNameService bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:  meta := types.NamespacedName{Name: *serviceName, Namespace: namespace}",
          "747:  if err != nil {",
          "749:  }",
          "751:  return service, nil",
          "",
          "[Removed Lines]",
          "746:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source)",
          "748:   return nil, fmt.Errorf(\"service %q does not exist\", meta.Name)",
          "",
          "[Added Lines]",
          "751:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source, p.EnableExternalNameService)",
          "753:   return nil, fmt.Errorf(\"service %q is invalid: %s\", meta.Name, err)",
          "",
          "---------------"
        ],
        "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
          "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  FallbackCertificate *types.NamespacedName",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:  EnableExternalNameService bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:     return nil",
          "564:    }",
          "565:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
          "567:    if err != nil {",
          "568:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
          "569:      \"Spec.Routes unresolved service reference: %s\", err)",
          "",
          "[Removed Lines]",
          "566:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "",
          "[Added Lines]",
          "571:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "688:   var proxy TCPProxy",
          "689:   for _, service := range httpproxy.Spec.TCPProxy.Services {",
          "690:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
          "692:    if err != nil {",
          "694:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
          "695:     return false",
          "696:    }",
          "",
          "[Removed Lines]",
          "691:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "693:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\",",
          "",
          "[Added Lines]",
          "696:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
          "698:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\",",
          "",
          "---------------"
        ],
        "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
          "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  ClientCertificate *types.NamespacedName",
          "40: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  EnableExternalNameService bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:    port = intstr.FromInt(int(be.Service.Port.Number))",
          "145:   }",
          "148:   if err != nil {",
          "149:    p.WithError(err).",
          "150:     WithField(\"name\", ing.GetName()).",
          "",
          "[Removed Lines]",
          "147:   s, err := p.dag.EnsureService(m, port, p.source)",
          "",
          "[Added Lines]",
          "152:   s, err := p.dag.EnsureService(m, port, p.source, p.EnableExternalNameService)",
          "",
          "---------------"
        ],
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1770:   objs: []interface{}{proxyTCPInvalidMissingService},",
          "1771:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1772:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
          "1774:   },",
          "1775:  })",
          "",
          "[Removed Lines]",
          "1773:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "[Added Lines]",
          "1773:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1799:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
          "1800:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1801:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
          "1803:   },",
          "1804:  })",
          "",
          "[Removed Lines]",
          "1802:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "[Added Lines]",
          "1802:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2967:      Type:    string(status.ConditionResolvedRefs),",
          "2968:      Status:  contour_api_v1.ConditionFalse,",
          "2969:      Reason:  string(status.ReasonDegraded),",
          "2971:     },",
          "2972:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2973:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "2970:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
          "",
          "[Added Lines]",
          "2970:      Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3758:       Type:    string(status.ConditionResolvedRefs),",
          "3759:       Status:  contour_api_v1.ConditionFalse,",
          "3760:       Reason:  string(status.ReasonDegraded),",
          "3762:      },",
          "3763:      gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3764:       Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "3761:       Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
          "",
          "[Added Lines]",
          "3761:       Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go": [
          "File: internal/featuretests/v3/externalname_test.go -> internal/featuretests/v3/externalname_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"testing\"",
          "19:  \"github.com/projectcontour/contour/internal/featuretests\"",
          "21:  envoy_cluster_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"",
          "22:  envoy_route_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"github.com/projectcontour/contour/internal/contour\"",
          "20:  \"github.com/projectcontour/contour/internal/dag\"",
          "22:  \"github.com/sirupsen/logrus\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: func TestExternalNameService(t *testing.T) {",
          "41:  defer done()",
          "43:  s1 := fixture.NewService(\"kuard\").",
          "",
          "[Removed Lines]",
          "40:  rh, c, done := setup(t)",
          "",
          "[Added Lines]",
          "43:  rh, c, done := setup(t, enableExternalNameService(t))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:   ),",
          "318:  })",
          "319: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: func enableExternalNameService(t *testing.T) func(eh *contour.EventHandler) {",
          "325:  return func(eh *contour.EventHandler) {",
          "327:   log := fixture.NewTestLogger(t)",
          "328:   log.SetLevel(logrus.DebugLevel)",
          "330:   eh.Builder.Processors = []dag.Processor{",
          "331:    &dag.IngressProcessor{",
          "332:     EnableExternalNameService: true,",
          "333:     FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
          "334:    },",
          "335:    &dag.HTTPProxyProcessor{",
          "336:     EnableExternalNameService: true,",
          "337:    },",
          "338:    &dag.ExtensionServiceProcessor{",
          "339:     FieldLogger: log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
          "340:    },",
          "341:    &dag.ListenerProcessor{},",
          "342:   }",
          "343:  }",
          "344: }",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go": [
          "File: internal/featuretests/v3/headerpolicy_test.go -> internal/featuretests/v3/headerpolicy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: func TestHeaderPolicy_ReplaceHeader_HTTProxy(t *testing.T) {",
          "34:  defer done()",
          "36:  rh.OnAdd(fixture.NewService(\"svc1\").",
          "",
          "[Removed Lines]",
          "33:  rh, c, done := setup(t)",
          "",
          "[Added Lines]",
          "36:  rh, c, done := setup(t, enableExternalNameService(t))",
          "",
          "---------------"
        ],
        "pkg/config/parameters.go||pkg/config/parameters.go": [
          "File: pkg/config/parameters.go -> pkg/config/parameters.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:  DisableAllowChunkedLength bool `yaml:\"disableAllowChunkedLength,omitempty\"`",
          "540:  LeaderElection LeaderElectionParameters `yaml:\"leaderelection,omitempty\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  EnableExternalNameService bool `yaml:\"enableExternalNameService,omitempty\"`",
          "",
          "---------------"
        ],
        "test/e2e/httpproxy/external_name_test.go||test/e2e/httpproxy/external_name_test.go": [
          "File: test/e2e/httpproxy/external_name_test.go -> test/e2e/httpproxy/external_name_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     },",
          "80:    },",
          "81:   }",
          "84:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
          "85:    Host:      p.Spec.VirtualHost.Fqdn,",
          "",
          "[Removed Lines]",
          "82:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "",
          "[Added Lines]",
          "82:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "83:   if !ok {",
          "84:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
          "85:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     },",
          "147:    },",
          "148:   }",
          "151:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
          "152:    Host:      p.Spec.VirtualHost.Fqdn,",
          "",
          "[Removed Lines]",
          "149:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "",
          "[Added Lines]",
          "152:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "153:   if !ok {",
          "154:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
          "155:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159: func stringPtr(s string) *string {",
          "160:  return &s",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: func testExternalNameServiceLocalhostInvalid(namespace string) {",
          "170:  Specify(\"external name services with localhost are rejected\", func() {",
          "171:   t := f.T()",
          "173:   f.Fixtures.Echo.Deploy(namespace, \"ingress-conformance-echo\")",
          "175:   externalNameService := &corev1.Service{",
          "176:    ObjectMeta: metav1.ObjectMeta{",
          "177:     Namespace: namespace,",
          "178:     Name:      \"external-name-service-localhost\",",
          "179:    },",
          "180:    Spec: corev1.ServiceSpec{",
          "181:     Type: corev1.ServiceTypeExternalName,",
          "184:     ExternalName: \"localhost.localdomain\",",
          "185:     Ports: []corev1.ServicePort{",
          "186:      {",
          "187:       Name: \"http\",",
          "188:       Port: 80,",
          "189:      },",
          "190:     },",
          "191:    },",
          "192:   }",
          "193:   require.NoError(t, f.Client.Create(context.TODO(), externalNameService))",
          "195:   p := &contourv1.HTTPProxy{",
          "196:    ObjectMeta: metav1.ObjectMeta{",
          "197:     Namespace: namespace,",
          "198:     Name:      \"external-name-proxy\",",
          "199:    },",
          "200:    Spec: contourv1.HTTPProxySpec{",
          "201:     VirtualHost: &contourv1.VirtualHost{",
          "202:      Fqdn: \"externalnameservice.projectcontour.io\",",
          "203:     },",
          "204:     Routes: []contourv1.Route{",
          "205:      {",
          "206:       Services: []contourv1.Service{",
          "207:        {",
          "208:         Name: externalNameService.Name,",
          "209:         Port: 80,",
          "210:        },",
          "211:       },",
          "212:       RequestHeadersPolicy: &contourv1.HeadersPolicy{",
          "213:        Set: []contourv1.HeaderValue{",
          "214:         {",
          "215:          Name:  \"Host\",",
          "216:          Value: externalNameService.Spec.ExternalName,",
          "217:         },",
          "218:        },",
          "219:       },",
          "220:      },",
          "221:     },",
          "222:    },",
          "223:   }",
          "224:   _, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "225:   require.Falsef(t, ok, \"ExternalName with hostname %s was accepted by Contour.\", externalNameService.Spec.ExternalName)",
          "226:  })",
          "227: }",
          "",
          "---------------"
        ],
        "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go": [
          "File: test/e2e/httpproxy/httpproxy_test.go -> test/e2e/httpproxy/httpproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"fmt\"",
          "21:  \"testing\"",
          "23:  certmanagerv1 \"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1\"",
          "24:  certmanagermetav1 \"github.com/jetstack/cert-manager/pkg/apis/meta/v1\"",
          "25:  . \"github.com/onsi/ginkgo\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  \"github.com/davecgh/go-spew/spew\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:  f.NamespacedTest(\"httpproxy-host-header-rewrite\", testHostHeaderRewrite)",
          "221:  f.NamespacedTest(\"httpproxy-local-rate-limiting-vhost\", testLocalRateLimitingVirtualHost)",
          "223:  f.NamespacedTest(\"httpproxy-local-rate-limiting-route\", testLocalRateLimitingRoute)",
          "",
          "[Removed Lines]",
          "217:  f.NamespacedTest(\"httpproxy-external-name-service-insecure\", testExternalNameServiceInsecure)",
          "219:  f.NamespacedTest(\"httpproxy-external-name-service-tls\", testExternalNameServiceTLS)",
          "",
          "[Added Lines]",
          "218:  f.NamespacedTest(\"httpproxy-external-name-service-insecure\", func(namespace string) {",
          "219:   Context(\"with ExternalName Services enabled\", func() {",
          "220:    BeforeEach(func() {",
          "221:     contourConfig.EnableExternalNameService = true",
          "222:    })",
          "223:    testExternalNameServiceInsecure(namespace)",
          "224:   })",
          "225:  })",
          "227:  f.NamespacedTest(\"httpproxy-external-name-service-tls\", func(namespace string) {",
          "228:   Context(\"with ExternalName Services enabled\", func() {",
          "229:    BeforeEach(func() {",
          "230:     contourConfig.EnableExternalNameService = true",
          "231:    })",
          "232:    testExternalNameServiceTLS(namespace)",
          "233:   })",
          "234:  })",
          "236:  f.NamespacedTest(\"httpproxy-external-name-service-localhost\", func(namespace string) {",
          "237:   Context(\"with ExternalName Services enabled\", func() {",
          "238:    BeforeEach(func() {",
          "239:     contourConfig.EnableExternalNameService = true",
          "240:    })",
          "241:    testExternalNameServiceLocalhostInvalid(namespace)",
          "242:   })",
          "243:  })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280: func httpProxyValid(proxy *contourv1.HTTPProxy) bool {",
          "282: }",
          "",
          "[Removed Lines]",
          "281:  return proxy != nil && proxy.Status.CurrentStatus == \"valid\"",
          "",
          "[Added Lines]",
          "305:  if proxy == nil {",
          "306:   return false",
          "307:  }",
          "309:  if len(proxy.Status.Conditions) == 0 {",
          "310:   return false",
          "311:  }",
          "313:  cond := proxy.Status.GetConditionFor(\"Valid\")",
          "314:  if cond.Status == \"True\" {",
          "315:   return true",
          "316:  }",
          "317:  return false",
          "319: }",
          "323: func httpProxyErrors(proxy *contourv1.HTTPProxy) string {",
          "324:  cond := proxy.Status.GetConditionFor(\"Valid\")",
          "325:  errors := cond.Errors",
          "326:  if len(errors) > 0 {",
          "327:   return spew.Sdump(errors)",
          "328:  }",
          "330:  return \"\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}