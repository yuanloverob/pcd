{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dbbd08d350f8d44c6f9ab20dfceae7293da17c28",
      "candidate_info": {
        "commit_hash": "dbbd08d350f8d44c6f9ab20dfceae7293da17c28",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/dbbd08d350f8d44c6f9ab20dfceae7293da17c28",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890510 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/PageExtractor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: public class PageExtractor",
          "29: {",
          "33:     private int startPage = 1;",
          "",
          "[Removed Lines]",
          "30:     private PDDocument sourceDocument;",
          "35:     private int endPage = 0;",
          "",
          "[Added Lines]",
          "30:     private final PDDocument sourceDocument;",
          "35:     private int endPage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public PageExtractor(PDDocument sourceDocument, int startPage, int endPage)",
          "54:     {",
          "56:         this.startPage = startPage;",
          "57:         this.endPage = endPage;",
          "58:     }",
          "",
          "[Removed Lines]",
          "55:         this(sourceDocument);",
          "",
          "[Added Lines]",
          "55:         this.sourceDocument = sourceDocument;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a93dbb1a81b8f1b0224754011f59a980699b41d7",
      "candidate_info": {
        "commit_hash": "a93dbb1a81b8f1b0224754011f59a980699b41d7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a93dbb1a81b8f1b0224754011f59a980699b41d7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
        ],
        "message": "PDFBOX-4947: create a real List instead of an AbstractList (created by Arrays.asList) so that addSubstitute() works, as suggested by Lonzak\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881369 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     {",
          "60:         substitutes.put(\"Courier\",",
          "62:         substitutes.put(\"Courier-Bold\",",
          "65:         substitutes.put(\"Courier-Oblique\",",
          "68:         substitutes.put(\"Courier-BoldOblique\",",
          "71:         substitutes.put(\"Helvetica\",",
          "73:         substitutes.put(\"Helvetica-Bold\",",
          "76:         substitutes.put(\"Helvetica-Oblique\",",
          "79:         substitutes.put(\"Helvetica-BoldOblique\",",
          "82:         substitutes.put(\"Times-Roman\",",
          "85:         substitutes.put(\"Times-Bold\",",
          "87:                         \"TimesNewRoman-Bold\", \"LiberationSerif-Bold\",",
          "89:         substitutes.put(\"Times-Italic\",",
          "93:         substitutes.put(\"Times-BoldItalic\",",
          "",
          "[Removed Lines]",
          "61:                 Arrays.asList(\"CourierNew\", \"CourierNewPSMT\", \"LiberationMono\", \"NimbusMonL-Regu\"));",
          "63:                 Arrays.asList(\"CourierNewPS-BoldMT\", \"CourierNew-Bold\", \"LiberationMono-Bold\",",
          "64:                         \"NimbusMonL-Bold\"));",
          "66:                 Arrays.asList(\"CourierNewPS-ItalicMT\",\"CourierNew-Italic\",",
          "67:                         \"LiberationMono-Italic\", \"NimbusMonL-ReguObli\"));",
          "69:                 Arrays.asList(\"CourierNewPS-BoldItalicMT\",\"CourierNew-BoldItalic\",",
          "70:                         \"LiberationMono-BoldItalic\", \"NimbusMonL-BoldObli\"));",
          "72:                 Arrays.asList(\"ArialMT\", \"Arial\", \"LiberationSans\", \"NimbusSanL-Regu\"));",
          "74:                 Arrays.asList(\"Arial-BoldMT\", \"Arial-Bold\", \"LiberationSans-Bold\",",
          "75:                         \"NimbusSanL-Bold\"));",
          "77:                 Arrays.asList(\"Arial-ItalicMT\", \"Arial-Italic\", \"Helvetica-Italic\",",
          "78:                         \"LiberationSans-Italic\", \"NimbusSanL-ReguItal\"));",
          "80:                 Arrays.asList(\"Arial-BoldItalicMT\", \"Helvetica-BoldItalic\",",
          "81:                         \"LiberationSans-BoldItalic\", \"NimbusSanL-BoldItal\"));",
          "83:                 Arrays.asList(\"TimesNewRomanPSMT\", \"TimesNewRoman\", \"TimesNewRomanPS\",",
          "84:                         \"LiberationSerif\", \"NimbusRomNo9L-Regu\"));",
          "86:                 Arrays.asList(\"TimesNewRomanPS-BoldMT\", \"TimesNewRomanPS-Bold\",",
          "88:                         \"NimbusRomNo9L-Medi\"));",
          "90:                 Arrays.asList(\"TimesNewRomanPS-ItalicMT\", \"TimesNewRomanPS-Italic\",",
          "91:                         \"TimesNewRoman-Italic\", \"LiberationSerif-Italic\",",
          "92:                         \"NimbusRomNo9L-ReguItal\"));",
          "94:                 Arrays.asList(\"TimesNewRomanPS-BoldItalicMT\", \"TimesNewRomanPS-BoldItalic\",",
          "95:                         \"TimesNewRoman-BoldItalic\", \"LiberationSerif-BoldItalic\",",
          "96:                         \"NimbusRomNo9L-MediItal\"));",
          "97:         substitutes.put(\"Symbol\", Arrays.asList(\"Symbol\", \"SymbolMT\", \"StandardSymL\"));",
          "98:         substitutes.put(\"ZapfDingbats\", Arrays.asList(\"ZapfDingbatsITCbyBT-Regular\",",
          "99:                         \"ZapfDingbatsITC\", \"Dingbats\", \"MS-Gothic\"));",
          "",
          "[Added Lines]",
          "61:                 new ArrayList<String>(Arrays.asList(\"CourierNew\", \"CourierNewPSMT\", \"LiberationMono\",",
          "62:                         \"NimbusMonL-Regu\")));",
          "64:                 new ArrayList<String>(Arrays.asList(\"CourierNewPS-BoldMT\", \"CourierNew-Bold\",",
          "65:                         \"LiberationMono-Bold\", \"NimbusMonL-Bold\")));",
          "67:                 new ArrayList<String>(Arrays.asList(\"CourierNewPS-ItalicMT\",\"CourierNew-Italic\",",
          "68:                         \"LiberationMono-Italic\", \"NimbusMonL-ReguObli\")));",
          "70:                 new ArrayList<String>(Arrays.asList(\"CourierNewPS-BoldItalicMT\",",
          "71:                         \"CourierNew-BoldItalic\", \"LiberationMono-BoldItalic\",",
          "72:                         \"NimbusMonL-BoldObli\")));",
          "74:                 new ArrayList<String>(Arrays.asList(\"ArialMT\", \"Arial\", \"LiberationSans\",",
          "75:                         \"NimbusSanL-Regu\")));",
          "77:                 new ArrayList<String>(Arrays.asList(\"Arial-BoldMT\", \"Arial-Bold\",",
          "78:                         \"LiberationSans-Bold\", \"NimbusSanL-Bold\")));",
          "80:                 new ArrayList<String>(Arrays.asList(\"Arial-ItalicMT\", \"Arial-Italic\",",
          "81:                         \"Helvetica-Italic\", \"LiberationSans-Italic\", \"NimbusSanL-ReguItal\")));",
          "83:                 new ArrayList<String>(Arrays.asList(\"Arial-BoldItalicMT\", \"Helvetica-BoldItalic\",",
          "84:                         \"LiberationSans-BoldItalic\", \"NimbusSanL-BoldItal\")));",
          "86:                 new ArrayList<String>(Arrays.asList(\"TimesNewRomanPSMT\", \"TimesNewRoman\",",
          "87:                         \"TimesNewRomanPS\", \"LiberationSerif\", \"NimbusRomNo9L-Regu\")));",
          "89:                 new ArrayList<String>(Arrays.asList(\"TimesNewRomanPS-BoldMT\", \"TimesNewRomanPS-Bold\",",
          "91:                         \"NimbusRomNo9L-Medi\")));",
          "93:                 new ArrayList<String>(Arrays.asList(\"TimesNewRomanPS-ItalicMT\",",
          "94:                         \"TimesNewRomanPS-Italic\", \"TimesNewRoman-Italic\", \"LiberationSerif-Italic\",",
          "95:                         \"NimbusRomNo9L-ReguItal\")));",
          "97:                 new ArrayList<String>(Arrays.asList(\"TimesNewRomanPS-BoldItalicMT\",",
          "98:                         \"TimesNewRomanPS-BoldItalic\", \"TimesNewRoman-BoldItalic\",",
          "99:                         \"LiberationSerif-BoldItalic\", \"NimbusRomNo9L-MediItal\")));",
          "100:         substitutes.put(\"Symbol\",",
          "101:                 new ArrayList<String>(Arrays.asList(\"Symbol\", \"SymbolMT\", \"StandardSymL\")));",
          "102:         substitutes.put(\"ZapfDingbats\", new ArrayList<String>(",
          "103:                 Arrays.asList(\"ZapfDingbatsITCbyBT-Regular\", \"ZapfDingbatsITC\", \"Dingbats\",",
          "104:                         \"MS-Gothic\")));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f13308974a797f5c89a8912e6d79bbb470dc71f",
      "candidate_info": {
        "commit_hash": "5f13308974a797f5c89a8912e6d79bbb470dc71f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5f13308974a797f5c89a8912e6d79bbb470dc71f",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ],
        "message": "PDFBOX-4892: optimize / simplify, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888151 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:         String headerString;",
          "588:         if (fdfDocument != null)",
          "589:         {",
          "591:         }",
          "592:         else",
          "593:         {",
          "595:         }",
          "596:         getStandardOutput().write( headerString.getBytes(Charsets.ISO_8859_1) );",
          "",
          "[Removed Lines]",
          "590:             headerString = \"%FDF-\"+ Float.toString(doc.getVersion());",
          "594:             headerString = \"%PDF-\"+ Float.toString(doc.getVersion());",
          "",
          "[Added Lines]",
          "590:             headerString = \"%FDF-\"+ doc.getVersion();",
          "594:             headerString = \"%PDF-\"+ doc.getVersion();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:         int xRefLength = xRefRanges.length;",
          "714:         int x = 0;",
          "715:         int j = 0;",
          "717:         {",
          "721:             {",
          "723:             }",
          "725:         }",
          "726:     }",
          "",
          "[Removed Lines]",
          "716:         while (x < xRefLength && (xRefLength % 2) == 0)",
          "718:             writeXrefRange(xRefRanges[x], xRefRanges[x + 1]);",
          "720:             for (int i = 0; i < xRefRanges[x + 1]; ++i)",
          "722:                 writeXrefEntry(xRefEntries.get(j++));",
          "724:             x += 2;",
          "",
          "[Added Lines]",
          "716:         if ((xRefLength % 2) == 0)",
          "718:             while (x < xRefLength)",
          "720:                 writeXrefRange(xRefRanges[x], xRefRanges[x + 1]);",
          "722:                 for (int i = 0; i < xRefRanges[x + 1]; ++i)",
          "723:                 {",
          "724:                     writeXrefEntry(xRefEntries.get(j++));",
          "725:                 }",
          "726:                 x += 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "721626ec9e8a475cecdb5024c06dd9e47d4494a3",
      "candidate_info": {
        "commit_hash": "721626ec9e8a475cecdb5024c06dd9e47d4494a3",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/721626ec9e8a475cecdb5024c06dd9e47d4494a3",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java"
        ],
        "message": "PDFBOX-5184: Add test for PDFMarkedContentExtractor class\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889453 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Arrays;",
          "25: import java.util.Collection;",
          "26: import java.util.HashSet;",
          "27: import java.util.Set;",
          "28: import javax.imageio.ImageIO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "40: import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;",
          "41: import org.apache.pdfbox.pdmodel.PageMode;",
          "42: import org.apache.pdfbox.pdmodel.font.PDFont;",
          "43: import org.apache.pdfbox.pdmodel.font.PDType1Font;",
          "44: import org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties.BaseState;",
          "45: import org.apache.pdfbox.rendering.PDFRenderer;",
          "46: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent;",
          "48: import org.apache.pdfbox.text.PDFMarkedContentExtractor;",
          "49: import org.apache.pdfbox.text.TextPosition;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:             assertTrue(nameSet.contains(\"background\"));",
          "208:             assertTrue(nameSet.contains(\"enabled\"));",
          "209:             assertTrue(nameSet.contains(\"disabled\"));",
          "210:         }",
          "211:         finally",
          "212:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:             PDFMarkedContentExtractor extractor = new PDFMarkedContentExtractor();",
          "216:             extractor.processPage(page);",
          "217:             List<PDMarkedContent> markedContents = extractor.getMarkedContents();",
          "218:             assertEquals(\"oc1\", markedContents.get(0).getTag());",
          "219:             assertEquals(\"PDF 1.5: Optional Content Groups\"",
          "220:                     + \"You should see a green textline, but no red text line.\",",
          "221:                     textPositionListToString(markedContents.get(0).getContents()));",
          "222:             assertEquals(\"oc2\", markedContents.get(1).getTag());",
          "223:             assertEquals(\"This is from an enabled layer. If you see this, that's good.\",",
          "224:                     textPositionListToString(markedContents.get(1).getContents()));",
          "225:             assertEquals(\"oc3\", markedContents.get(2).getTag());",
          "226:             assertEquals(\"This is from a disabled layer. If you see this, that's NOT good!\",",
          "227:                     textPositionListToString(markedContents.get(2).getContents()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:         }",
          "215:     }",
          "217:     public void testOCGsWithSameNameCanHaveDifferentVisibility() throws Exception",
          "218:     {",
          "219:         PDDocument doc = new PDDocument();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     private String textPositionListToString(List<Object> contents)",
          "242:     {",
          "243:         StringBuilder sb = new StringBuilder();",
          "244:         for (Object o : contents)",
          "245:         {",
          "246:             TextPosition tp = (TextPosition) o;",
          "247:             sb.append(tp.getUnicode());",
          "248:         }",
          "249:         return sb.toString();",
          "250:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a6420a42bd7508719458c5007c7f82ec55946de",
      "candidate_info": {
        "commit_hash": "1a6420a42bd7508719458c5007c7f82ec55946de",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1a6420a42bd7508719458c5007c7f82ec55946de",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ],
        "message": "PDFBOX-4892: avoid ArrayIndexOutOfBoundsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884425 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:                     if (multiplyer == 16)",
          "577:                     {",
          "578:                         bufferIndex++;",
          "579:                         tokenParserByteBuffer[bufferIndex] = 0;",
          "580:                         multiplyer = 1;",
          "581:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:                         if (bufferIndex >= tokenParserByteBuffer.length)",
          "580:                         {",
          "581:                             throw new IOException(\"cmap token ist larger than buffer size \" +",
          "582:                                     tokenParserByteBuffer.length);",
          "583:                         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}