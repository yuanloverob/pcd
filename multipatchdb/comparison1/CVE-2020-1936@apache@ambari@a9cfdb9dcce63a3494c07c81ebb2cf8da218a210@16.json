{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c04daafbcbbaac4a5a2fe5796e3aa35cfdfe7585",
      "candidate_info": {
        "commit_hash": "c04daafbcbbaac4a5a2fe5796e3aa35cfdfe7585",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c04daafbcbbaac4a5a2fe5796e3aa35cfdfe7585",
        "files": [
          "ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java",
          "ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java",
          "ambari-logsearch/docker/test-config/logfeeder/shipper-conf/input.config-logsearch-docker.json"
        ],
        "message": "AMBARI-24329. Log Feeder define default log levels per component.",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java||ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java",
          "ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java||ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java||ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java||ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java": [
          "File: ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java -> ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputDescriptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.ambari.logsearch.config.api.model.inputconfig;",
          "22: import java.util.Map;",
          "24: public interface InputDescriptor {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   String getGroup();",
          "55:   Boolean isInitDefaultFields();",
          "56: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   List<String> getDefaultLogLevels();",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java||ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java": [
          "File: ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java -> ambari-logsearch/ambari-logsearch-config-json/src/main/java/org/apache/ambari/logsearch/config/json/model/inputconfig/impl/InputDescriptorImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.ambari.logsearch.config.json.model.inputconfig.impl;",
          "22: import java.util.Map;",
          "24: import org.apache.ambari.logsearch.config.api.ShipperConfigElementDescription;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   @SerializedName(\"init_default_fields\")",
          "201:   private Boolean initDefaultFields;",
          "203:   public String getType() {",
          "204:     return type;",
          "205:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   @ShipperConfigElementDescription(",
          "205:     path = \"/input/[]/default_log_levels\",",
          "206:     type = \"list of strings\",",
          "207:     description = \"Use these as default log levels for the input - overrides the global default log levels.\",",
          "208:     examples = {\"default_log_levels: [\\\"INFO\\\", \\\"WARN\\\"]\"}",
          "209:   )",
          "210:   @Expose",
          "211:   @SerializedName(\"default_log_levels\")",
          "212:   private List<String> defaultLogLevels;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:   public void setInitDefaultFields(Boolean initDefaultFields) {",
          "330:     this.initDefaultFields = initDefaultFields;",
          "331:   }",
          "332: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   @Override",
          "345:   public List<String> getDefaultLogLevels() {",
          "346:     return defaultLogLevels;",
          "347:   }",
          "349:   public void setDefaultLogLevels(List<String> defaultLogLevels) {",
          "350:     this.defaultLogLevels = defaultLogLevels;",
          "351:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     return filters;",
          "99:   }",
          "102:     if (!logFeederProps.isLogLevelFilterEnabled()) {",
          "103:       return true;",
          "104:     }",
          "107:     List<String> allowedLevels = getAllowedLevels(hostName, logFilter);",
          "108:     return allowedLevels.isEmpty() || allowedLevels.contains(level);",
          "109:   }",
          "112:     if (org.apache.commons.lang3.StringUtils.isEmpty(jsonBlock)) {",
          "113:       return DEFAULT_VALUE;",
          "114:     }",
          "115:     Map<String, Object> jsonObj = LogFeederUtil.toJSONObject(jsonBlock);",
          "117:   }",
          "120:     if (\"audit\".equals(inputMarker.getInput().getInputDescriptor().getRowtype()))",
          "121:       return true;",
          "124:     if (!isAllowed) {",
          "125:       LOG.trace(\"Filter block the content :\" + LogFeederUtil.getGson().toJson(jsonObj));",
          "126:     }",
          "",
          "[Removed Lines]",
          "101:   public boolean isAllowed(String hostName, String logId, String level) {",
          "106:     LogLevelFilter logFilter = findLogFilter(logId);",
          "111:   public boolean isAllowed(String jsonBlock, InputMarker inputMarker) {",
          "116:     return isAllowed(jsonObj, inputMarker);",
          "119:   public boolean isAllowed(Map<String, Object> jsonObj, InputMarker inputMarker) {",
          "123:     boolean isAllowed = applyFilter(jsonObj);",
          "",
          "[Added Lines]",
          "101:   public boolean isAllowed(String hostName, String logId, String level, List<String> defaultLogLevels) {",
          "106:     LogLevelFilter logFilter = findLogFilter(logId, defaultLogLevels);",
          "111:   public boolean isAllowed(String jsonBlock, InputMarker inputMarker, List<String> defaultLogLevels) {",
          "116:     return isAllowed(jsonObj, inputMarker, defaultLogLevels);",
          "119:   public boolean isAllowed(Map<String, Object> jsonObj, InputMarker inputMarker, List<String> defaultLogLevels) {",
          "123:     boolean isAllowed = applyFilter(jsonObj, defaultLogLevels);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   }",
          "132:     if (MapUtils.isEmpty(jsonObj)) {",
          "133:       LOG.warn(\"Output jsonobj is empty\");",
          "134:       return DEFAULT_VALUE;",
          "",
          "[Removed Lines]",
          "131:   public boolean applyFilter(Map<String, Object> jsonObj) {",
          "",
          "[Added Lines]",
          "131:   public boolean applyFilter(Map<String, Object> jsonObj, List<String> defaultLogLevels) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     String logId = (String) jsonObj.get(LogFeederConstants.SOLR_COMPONENT);",
          "139:     String level = (String) jsonObj.get(LogFeederConstants.SOLR_LEVEL);",
          "140:     if (org.apache.commons.lang3.StringUtils.isNotBlank(hostName) && org.apache.commons.lang3.StringUtils.isNotBlank(logId) && org.apache.commons.lang3.StringUtils.isNotBlank(level)) {",
          "142:     } else {",
          "143:       return DEFAULT_VALUE;",
          "144:     }",
          "145:   }",
          "148:     LogLevelFilter logFilter = filters.get(logId);",
          "149:     if (logFilter != null) {",
          "150:       return logFilter;",
          "",
          "[Removed Lines]",
          "141:       return isAllowed(hostName, logId, level);",
          "147:   private synchronized LogLevelFilter findLogFilter(String logId) {",
          "",
          "[Added Lines]",
          "141:       return isAllowed(hostName, logId, level, defaultLogLevels);",
          "147:   private synchronized LogLevelFilter findLogFilter(String logId, List<String> defaultLogLevels) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:     LOG.info(\"Filter is not present for log \" + logId + \", creating default filter\");",
          "154:     LogLevelFilter defaultFilter = new LogLevelFilter();",
          "155:     defaultFilter.setLabel(logId);",
          "158:     try {",
          "159:       config.getLogLevelFilterManager().createLogLevelFilter(logFeederProps.getClusterName(), logId, defaultFilter);",
          "",
          "[Removed Lines]",
          "156:     defaultFilter.setDefaultLevels(logFeederProps.getIncludeDefaultLogLevels());",
          "",
          "[Added Lines]",
          "156:     defaultFilter.setDefaultLevels(defaultLogLevels);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.apache.ambari.logfeeder.plugin.output.Output;",
          "32: import org.apache.ambari.logfeeder.util.LogFeederUtil;",
          "33: import org.apache.ambari.logsearch.config.api.OutputConfigMonitor;",
          "34: import org.apache.commons.lang3.StringUtils;",
          "35: import org.apache.log4j.Level;",
          "36: import org.apache.log4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.commons.collections.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         jsonObj.put(\"message_md5\", \"\" + Hashing.md5().hashBytes(logMessage.getBytes()).asLong());",
          "148:       }",
          "149:     }",
          "151:       && !outputLineFilter.apply(jsonObj, inputMarker.getInput())) {",
          "152:       List<? extends Output> outputList = input.getOutputList();",
          "153:       for (Output output : outputList) {",
          "",
          "[Removed Lines]",
          "150:     if (logLevelFilterHandler.isAllowed(jsonObj, inputMarker)",
          "",
          "[Added Lines]",
          "151:     List<String> defaultLogLevels = getDefaultLogLevels(input);",
          "152:     if (logLevelFilterHandler.isAllowed(jsonObj, inputMarker, defaultLogLevels)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:     }",
          "161:   }",
          "163:   @SuppressWarnings(\"unchecked\")",
          "164:   private String truncateLongLogMessage(Map<String, Object> jsonObj, Input input, String logMessage) {",
          "165:     if (logMessage != null && logMessage.getBytes().length > MAX_OUTPUT_SIZE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   private List<String> getDefaultLogLevels(Input input) {",
          "166:     List<String> defaultLogLevels = logFeederProps.getIncludeDefaultLogLevels();",
          "167:     List<String> overrideDefaultLogLevels = input.getInputDescriptor().getDefaultLogLevels();",
          "168:     if (CollectionUtils.isNotEmpty(overrideDefaultLogLevels)) {",
          "169:       return overrideDefaultLogLevels;",
          "170:     } else {",
          "171:       return defaultLogLevels;",
          "172:     }",
          "173:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:   }",
          "183:   public void write(String jsonBlock, InputMarker inputMarker) {",
          "185:       List<? extends Output> outputList = inputMarker.getInput().getOutputList();",
          "186:       for (Output output : outputList) {",
          "187:         try {",
          "",
          "[Removed Lines]",
          "184:     if (logLevelFilterHandler.isAllowed(jsonBlock, inputMarker)) {",
          "",
          "[Added Lines]",
          "196:     List<String> defaultLogLevels = getDefaultLogLevels(inputMarker.getInput());",
          "197:     if (logLevelFilterHandler.isAllowed(jsonBlock, inputMarker, defaultLogLevels)) {",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java||ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/output/OutputManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     expect(mockInput.isUseEventMD5()).andReturn(false).anyTimes();",
          "111:     expect(mockInput.isGenEventMD5()).andReturn(false).anyTimes();",
          "112:     expect(mockInput.getInputDescriptor()).andReturn(inputDescriptor).anyTimes();",
          "114:     expect(mockInput.getCache()).andReturn(null);",
          "115:     expect(mockInput.getOutputList()).andReturn(Arrays.asList(output1, output2, output3));",
          "",
          "[Removed Lines]",
          "113:     expect(mockFilter.isAllowed(jsonObj, inputMarker)).andReturn(true).anyTimes();",
          "",
          "[Added Lines]",
          "113:     expect(mockFilter.isAllowed(jsonObj, inputMarker, null)).andReturn(true).anyTimes();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     replay(output1, output2, output3, mockFilter, mockInput);",
          "123:     OutputManagerImpl manager = new OutputManagerImpl();",
          "124:     manager.setLogLevelFilterHandler(mockFilter);",
          "125:     manager.add(output1);",
          "126:     manager.add(output2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     manager.setLogFeederProps(new LogFeederProps());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:     LogLevelFilterHandler mockFilter = strictMock(LogLevelFilterHandler.class);",
          "148:     expect(mockInput.getInputDescriptor()).andReturn(inputDescriptor).anyTimes();",
          "150:     expect(mockInput.getOutputList()).andReturn(Arrays.asList(output1, output2, output3));",
          "152:     output1.write(jsonString, inputMarker); expectLastCall();",
          "",
          "[Removed Lines]",
          "149:     expect(mockFilter.isAllowed(jsonString, inputMarker)).andReturn(true).anyTimes();",
          "",
          "[Added Lines]",
          "150:     expect(mockFilter.isAllowed(jsonString, inputMarker, null)).andReturn(true).anyTimes();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:     OutputManagerImpl manager = new OutputManagerImpl();",
          "159:     manager.setLogLevelFilterHandler(mockFilter);",
          "160:     manager.add(output1);",
          "161:     manager.add(output2);",
          "162:     manager.add(output3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     manager.setLogFeederProps(new LogFeederProps());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInput.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.ambari.logsearch.model.common;",
          "22: import java.util.Map;",
          "24: import javax.validation.constraints.NotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:   @JsonProperty(\"init_default_fields\")",
          "75:   private Boolean initDefaultFields;",
          "77:   public LSServerInput() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   @JsonProperty(\"default_log_levels\")",
          "79:   private List<String> defaultLogLevels;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     this.cacheDedupInterval = inputDescriptor.getCacheDedupInterval();",
          "93:     this.isEnabled = inputDescriptor.isEnabled();",
          "94:     this.initDefaultFields = inputDescriptor.isInitDefaultFields();",
          "95:   }",
          "97:   public String getType() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     this.defaultLogLevels = inputDescriptor.getDefaultLogLevels();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:   public Boolean getInitDefaultFields() {",
          "154:     return initDefaultFields;",
          "155:   }",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:   public List<String> getDefaultLogLevels() {",
          "163:     return defaultLogLevels;",
          "164:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e36067c034be510f33201821404534366b28ac16",
      "candidate_info": {
        "commit_hash": "e36067c034be510f33201821404534366b28ac16",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e36067c034be510f33201821404534366b28ac16",
        "files": [
          "ambari-web/app/styles/service_configurations.less",
          "ambari-web/app/templates/common/configs/configs_comparison_cell.hbs",
          "ambari-web/app/templates/common/configs/configs_comparison_row.hbs"
        ],
        "message": "AMBARI-24633. Ambari strips leading space for valid YARN configs on the config compare screen",
        "before_after_code_files": [
          "ambari-web/app/styles/service_configurations.less||ambari-web/app/styles/service_configurations.less",
          "ambari-web/app/templates/common/configs/configs_comparison_cell.hbs||ambari-web/app/templates/common/configs/configs_comparison_cell.hbs",
          "ambari-web/app/templates/common/configs/configs_comparison_row.hbs||ambari-web/app/templates/common/configs/configs_comparison_row.hbs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/styles/service_configurations.less||ambari-web/app/styles/service_configurations.less": [
          "File: ambari-web/app/styles/service_configurations.less -> ambari-web/app/styles/service_configurations.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   .comparison-row {",
          "45:     margin-left: -25px;",
          "46:     padding: 10px 0;",
          "47:   }",
          "49:   .undefined {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     .compare-config-cell {",
          "48:       white-space: pre;",
          "49:     }",
          "",
          "---------------"
        ],
        "ambari-web/app/templates/common/configs/configs_comparison_cell.hbs||ambari-web/app/templates/common/configs/configs_comparison_cell.hbs": [
          "File: ambari-web/app/templates/common/configs/configs_comparison_cell.hbs -> ambari-web/app/templates/common/configs/configs_comparison_cell.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }}",
          "22: {{#unless compareConfig.isMock}}",
          "23:   {{#if compareConfig.supportsFinal}}",
          "24:     <i {{bindAttr class=\":glyphicon :glyphicon-lock compareConfig.isFinal::hidden\" }}></i>",
          "",
          "[Removed Lines]",
          "19: <span {{bindAttr class=\"compareConfig.isMock:undefined\"}}>",
          "20:   {{compareConfig.value}}&nbsp;{{compareConfig.unit}}",
          "21: </span>",
          "",
          "[Added Lines]",
          "19: <span {{bindAttr class=\"compareConfig.isMock:undefined :compare-config-cell\"}}>{{compareConfig.value}}&nbsp;{{compareConfig.unit}}</span>",
          "",
          "---------------"
        ],
        "ambari-web/app/templates/common/configs/configs_comparison_row.hbs||ambari-web/app/templates/common/configs/configs_comparison_row.hbs": [
          "File: ambari-web/app/templates/common/configs/configs_comparison_row.hbs -> ambari-web/app/templates/common/configs/configs_comparison_row.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   <div class=\"col-md-4 property-value-column\">",
          "33:     {{#if controller.selectedConfigGroup.isDefault}}",
          "34:       {{! Comparing config-versions from Default config-group}}",
          "36:       {{#unless configData.isMock}}",
          "37:         {{#if configData.supportsFinal}}",
          "38:           <i {{bindAttr class=\":glyphicon :glyphicon-lock configData.isFinal::hidden\" }}></i>",
          "",
          "[Removed Lines]",
          "35:       <span {{bindAttr class=\"configData.isMock:undefined\"}}>{{configData.value}}&nbsp;{{configData.unit}}</span>",
          "",
          "[Added Lines]",
          "35:       <span {{bindAttr class=\"configData.isMock:undefined :compare-config-cell\"}}>{{configData.value}}&nbsp;{{configData.unit}}</span>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a750bf11d4c7f24c901ee2d87c1d746870da6747",
      "candidate_info": {
        "commit_hash": "a750bf11d4c7f24c901ee2d87c1d746870da6747",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a750bf11d4c7f24c901ee2d87c1d746870da6747",
        "files": [
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py",
          "ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py",
          "ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py"
        ],
        "message": "AMBARI-24844. Improve copy of atlas.war (#2558)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py||ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py",
          "ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py||ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py",
          "ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py||ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py||ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py": [
          "File: ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py -> ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                 group=params.user_group,",
          "86:                 create_parents = True",
          "87:       )",
          "91:       File(format(\"{conf_dir}/atlas-log4j.xml\"),",
          "92:            mode=0644,",
          "93:            owner=params.metadata_user,",
          "",
          "[Removed Lines]",
          "88:       File(format(\"{expanded_war_dir}/atlas.war\"),",
          "89:            content = StaticFile(format('{metadata_home}/server/webapp/atlas.war'))",
          "90:       )",
          "",
          "[Added Lines]",
          "89:       war_source = format('{metadata_home}/server/webapp/atlas.war')",
          "90:       war_target = format(\"{expanded_war_dir}/atlas.war\")",
          "91:       Execute(('cp', war_source, war_target),",
          "92:               sudo = True,",
          "93:               not_if = war_source == war_target)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py||ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py": [
          "File: ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py -> ambari-server/src/test/python/stacks/2.3/ATLAS/test_metadata_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                                 cd_access='a',",
          "83:                                 mode=0644",
          "84:       )",
          "87:       )",
          "88:       host_name = u\"c6401.ambari.apache.org\"",
          "89:       app_props =  dict(self.getConfig()['configurations']['application-properties'])",
          "",
          "[Removed Lines]",
          "85:       self.assertResourceCalled('File', self.stack_root+'/current/atlas-server/server/webapp/atlas.war',",
          "86:           content = StaticFile(self.stack_root+'/current/atlas-server/server/webapp/atlas.war'),",
          "",
          "[Added Lines]",
          "85:       self.assertResourceCalled('Execute', ('cp', '/usr/hdp/current/atlas-server/server/webapp/atlas.war', '/usr/hdp/current/atlas-server/server/webapp/atlas.war'),",
          "86:                                 sudo = True,",
          "87:                                 not_if = True,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:                               cd_access='a',",
          "218:                               mode=0644",
          "219:     )",
          "223:     host_name = u\"c6401.ambari.apache.org\"",
          "224:     app_props =  dict(self.getConfig()['configurations']['application-properties'])",
          "225:     app_props['atlas.server.bind.address'] = host_name",
          "",
          "[Removed Lines]",
          "220:     self.assertResourceCalled('File', self.stack_root+'/current/atlas-server/server/webapp/atlas.war',",
          "221:                               content = StaticFile(self.stack_root+'/current/atlas-server/server/webapp/atlas.war'),",
          "222:                               )",
          "",
          "[Added Lines]",
          "221:     self.assertResourceCalled('Execute', ('cp', self.stack_root+'/current/atlas-server/server/webapp/atlas.war', self.stack_root+'/current/atlas-server/server/webapp/atlas.war'),",
          "222:                               sudo = True,",
          "223:                               not_if = True,",
          "224:     )",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py||ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py": [
          "File: ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py -> ambari-server/src/test/python/stacks/2.5/ATLAS/test_atlas_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:                               cd_access='a',",
          "78:                               mode=0644",
          "79:     )",
          "82:     )",
          "83:     host_name = u\"c6401.ambari.apache.org\"",
          "84:     app_props =  dict(self.getConfig()['configurations'][",
          "",
          "[Removed Lines]",
          "80:     self.assertResourceCalled('File', '/usr/hdp/current/atlas-server/server/webapp/atlas.war',",
          "81:                               content = StaticFile('/usr/hdp/current/atlas-server/server/webapp/atlas.war'),",
          "",
          "[Added Lines]",
          "80:     self.assertResourceCalled('Execute', ('cp', '/usr/hdp/current/atlas-server/server/webapp/atlas.war', '/usr/hdp/current/atlas-server/server/webapp/atlas.war'),",
          "81:                               sudo = True,",
          "82:                               not_if = True,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fe67ccc50eab290b182b3034c3c016e7e4c0386",
      "candidate_info": {
        "commit_hash": "4fe67ccc50eab290b182b3034c3c016e7e4c0386",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4fe67ccc50eab290b182b3034c3c016e7e4c0386",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java"
        ],
        "message": "AMBARI-25332. Kerberos keytab regeneration working slow (dgrinenko) (#3120)\n\nRemoved unused imports to pass StyleCheck",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collection;",
          "26: import java.util.HashMap;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "30: import java.util.Set;",
          "",
          "[Removed Lines]",
          "27: import java.util.HashSet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.util.concurrent.Executors;",
          "35: import java.util.concurrent.Future;",
          "36: import java.util.concurrent.ThreadFactory;",
          "39: import org.apache.ambari.server.AmbariException;",
          "40: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "",
          "[Removed Lines]",
          "37: import java.util.concurrent.TimeUnit;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: import org.apache.ambari.server.state.Cluster;",
          "54: import org.apache.ambari.server.state.Clusters;",
          "55: import org.apache.ambari.server.state.Config;",
          "58: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "59: import org.apache.ambari.server.utils.StageUtils;",
          "60: import org.apache.commons.io.FileUtils;",
          "",
          "[Removed Lines]",
          "56: import org.apache.ambari.server.state.Host;",
          "57: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d8503c718593cae8cae13c58e4405c0fd719501",
      "candidate_info": {
        "commit_hash": "8d8503c718593cae8cae13c58e4405c0fd719501",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8d8503c718593cae8cae13c58e4405c0fd719501",
        "files": [
          "ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js",
          "ambari-web/app/controllers/main/alerts/definition_details_controller.js",
          "ambari-web/app/controllers/main/service/item.js"
        ],
        "message": "[AMBARI-25317] : Updating incorrect css class name for different popups(cherry-pick to branch-2.7) (#3024)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js||ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js",
          "ambari-web/app/controllers/main/alerts/definition_details_controller.js||ambari-web/app/controllers/main/alerts/definition_details_controller.js",
          "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js||ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js": [
          "File: ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js -> ambari-web/app/controllers/main/alerts/alert_definitions_actions_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     var configProperties = App.router.get('clusterController.clusterEnv.properties');",
          "222:     return App.ModalPopup.show({",
          "224:       header: Em.I18n.t('alerts.actions.manageSettings'),",
          "225:       primary: Em.I18n.t('common.save'),",
          "226:       secondary: Em.I18n.t('common.cancel'),",
          "",
          "[Removed Lines]",
          "223:       classNames: ['fourty-percent-width-modal'],",
          "",
          "[Added Lines]",
          "223:       classNames: ['forty-percent-width-modal'],",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/alerts/definition_details_controller.js||ambari-web/app/controllers/main/alerts/definition_details_controller.js": [
          "File: ambari-web/app/controllers/main/alerts/definition_details_controller.js -> ambari-web/app/controllers/main/alerts/definition_details_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:     var alertsRepeatTolerance = App.router.get('clusterController.clusterEnv.properties.alerts_repeat_tolerance') || \"1\";",
          "282:     return App.ModalPopup.show({",
          "284:       header: Em.I18n.t('alerts.actions.editRepeatTolerance.header'),",
          "285:       primary: Em.I18n.t('common.save'),",
          "286:       secondary: Em.I18n.t('common.cancel'),",
          "",
          "[Removed Lines]",
          "283:       classNames: ['fourty-percent-width-modal'],",
          "",
          "[Added Lines]",
          "283:       classNames: ['forty-percent-width-modal'],",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js": [
          "File: ambari-web/app/controllers/main/service/item.js -> ambari-web/app/controllers/main/service/item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:   rebalanceHdfsNodes: function () {",
          "830:     var controller = this;",
          "831:     App.ModalPopup.show({",
          "833:       header: Em.I18n.t('services.service.actions.run.rebalanceHdfsNodes.context'),",
          "834:       primary: Em.I18n.t('common.start'),",
          "835:       secondary: Em.I18n.t('common.cancel'),",
          "",
          "[Removed Lines]",
          "832:       classNames: ['fourty-percent-width-modal'],",
          "",
          "[Added Lines]",
          "832:       classNames: ['forty-percent-width-modal'],",
          "",
          "---------------"
        ]
      }
    }
  ]
}