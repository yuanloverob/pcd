{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ea16a2de8cf54924aa6a7a2722f90147d98520e",
      "candidate_info": {
        "commit_hash": "3ea16a2de8cf54924aa6a7a2722f90147d98520e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3ea16a2de8cf54924aa6a7a2722f90147d98520e",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"
        ],
        "message": "PDFBOX-2941: clear log before opening\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882976 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java||debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java||debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java -> debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297:         }",
          "1298:         currentFilePath = file.getPath();",
          "1299:         recentFiles.removeFile(file.getPath());",
          "1300:         DocumentOpener documentOpener = new DocumentOpener(password)",
          "1301:         {",
          "1302:             @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300:         LogDialog.instance().clear();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1334:             }",
          "1335:         }",
          "1336:         currentFilePath = urlString;",
          "1337:         DocumentOpener documentOpener = new DocumentOpener(password)",
          "1338:         {",
          "1339:             @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1338:         LogDialog.instance().clear();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fda76ccf963ff62d3ea5d809ef60697ecbe7b668",
      "candidate_info": {
        "commit_hash": "fda76ccf963ff62d3ea5d809ef60697ecbe7b668",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fda76ccf963ff62d3ea5d809ef60697ecbe7b668",
        "files": [
          "tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java",
          "xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java",
          "xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881581 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java||tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java",
          "xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java||xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java",
          "xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java||xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java||tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java": [
          "File: tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java -> tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import org.apache.pdfbox.rendering.PDFRenderer;",
          "52: import org.apache.pdfbox.util.filetypedetector.FileType;",
          "53: import org.apache.pdfbox.util.filetypedetector.FileTypeDetector;",
          "54: import org.w3c.dom.Element;",
          "55: import org.w3c.dom.Node;",
          "56: import org.w3c.dom.NodeList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:     private void checkResolution(String filename, int expectedResolution)",
          "318:             throws IOException",
          "319:     {",
          "321:         String suffix = filename.substring(filename.lastIndexOf('.') + 1);",
          "323:         {",
          "325:             checkBmpResolution(filename, expectedResolution);",
          "",
          "[Removed Lines]",
          "320:         assertFalse(\"Empty file \" + filename, new File(filename).length() == 0);",
          "322:         if (\"BMP\".equals(suffix.toUpperCase()))",
          "",
          "[Added Lines]",
          "321:         Assert.assertNotEquals(\"Empty file \" + filename, 0, new File(filename).length());",
          "323:         if (\"BMP\".equalsIgnoreCase(suffix))",
          "",
          "---------------"
        ],
        "xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java||xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java": [
          "File: xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java -> xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:         Calendar createDate1 = basicSchema.getCreateDate();",
          "184:         basicSchema.setCreateDate(new GregorianCalendar());",
          "185:         Calendar createDate2 = basicSchema.getCreateDate();",
          "189:         DublinCoreSchema dublinCoreSchema = xmp.getDublinCoreSchema();",
          "",
          "[Removed Lines]",
          "186:         Assert.assertFalse(\"CreateDate has not been set\", createDate1.equals(createDate2));",
          "",
          "[Added Lines]",
          "186:         Assert.assertNotEquals(\"CreateDate has not been set\", createDate1, createDate2);",
          "",
          "---------------"
        ],
        "xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java||xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java": [
          "File: xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java -> xmpbox/src/test/java/org/apache/xmpbox/schema/AbstractXMPSchemaTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:         String img = \"/9j/4AAQSkZJRgABAgEASABIAAD\";",
          "497:         setMethod.invoke(schema, height, width, format, img);",
          "498:         List<ThumbnailType> found = ((List<ThumbnailType>) getMethod.invoke(schema));",
          "500:         ThumbnailType t1 = found.get(0);",
          "501:         Assert.assertEquals(height, t1.getHeight());",
          "502:         Assert.assertEquals(width, t1.getWidth());",
          "503:         Assert.assertEquals(format, t1.getFormat());",
          "504:         Assert.assertEquals(img, t1.getImage());",
          "506:     }",
          "508:     protected void testGetSetLangAltValue() throws Exception",
          "",
          "[Removed Lines]",
          "499:         Assert.assertTrue(found.size() == 1);",
          "",
          "[Added Lines]",
          "499:         Assert.assertEquals(1, found.size());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce8529e027c8d3fb4fd4da4fcbfc7864258583ce",
      "candidate_info": {
        "commit_hash": "ce8529e027c8d3fb4fd4da4fcbfc7864258583ce",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/ce8529e027c8d3fb4fd4da4fcbfc7864258583ce",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java"
        ],
        "message": "PDFBOX-5239: introduce BGR for JavaCV library and OpenCV, as suggested by Andrei Eichler; closes #125\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891607 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/ImageType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         {",
          "62:             return BufferedImage.TYPE_INT_ARGB;",
          "63:         }",
          "64:     };",
          "66:     abstract int toBufferedImageType();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     },",
          "67:     BGR",
          "68:     {",
          "69:         @Override",
          "70:         int toBufferedImageType()",
          "71:         {",
          "72:             return BufferedImage.TYPE_3BYTE_BGR;",
          "73:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28b6a93d3931ba9a463a99833c2e637bbb3eb3d7",
      "candidate_info": {
        "commit_hash": "28b6a93d3931ba9a463a99833c2e637bbb3eb3d7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/28b6a93d3931ba9a463a99833c2e637bbb3eb3d7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ],
        "message": "PDFBOX-3891: avoid UnsupportedOperationException by creating fields from scratch\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884369 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: import java.io.IOException;",
          "20: import java.util.HashMap;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.ArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         Map<String, PDField> nonTerminalFieldsMap = new HashMap<String, PDField>();",
          "80:         LOG.debug(\"rebuilding fields from widgets\");",
          "82:         for (PDPage page : document.getPages())",
          "83:         {",
          "84:             try",
          "",
          "[Removed Lines]",
          "81:         List<PDField> fields = acroForm.getFields();",
          "",
          "[Added Lines]",
          "82:         List<PDField> fields = new ArrayList<PDField>();",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertNotNull;",
          "22: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.junit.Assert.assertFalse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:         }",
          "342:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:     @Test",
          "350:     public void testFromAnnots3891NullField() throws IOException",
          "351:     {",
          "352:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13016993/poppler-14433-0.pdf\";",
          "354:         PDDocument testPdf = null;",
          "355:         try",
          "356:         {",
          "357:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "358:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "359:             boolean thrown = false;",
          "360:             try",
          "361:             {",
          "362:                 catalog.getAcroForm(new CreateFieldsFixup(testPdf));",
          "363:             }",
          "364:             catch (Exception e)",
          "365:             {",
          "366:                 thrown = true;",
          "367:             }",
          "368:             assertFalse(\"There shall be no exception when getting the AcroForm\", thrown);",
          "369:         }",
          "370:         finally",
          "371:         {",
          "372:             IOUtils.closeQuietly(testPdf);",
          "373:         }",
          "374:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95c3b3b47015a5f2b0eaeab9f4976ef1acec5755",
      "candidate_info": {
        "commit_hash": "95c3b3b47015a5f2b0eaeab9f4976ef1acec5755",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/95c3b3b47015a5f2b0eaeab9f4976ef1acec5755",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java"
        ],
        "message": "PDFBOX-4940: remove unused imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881113 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import javax.imageio.ImageIO;",
          "25: import org.apache.pdfbox.io.IOUtils;",
          "26: import org.apache.pdfbox.pdmodel.PDDocument;",
          "29: import org.junit.Assert;",
          "32: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "27: import org.junit.After;",
          "28: import org.junit.AfterClass;",
          "30: import org.junit.Before;",
          "31: import org.junit.BeforeClass;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}