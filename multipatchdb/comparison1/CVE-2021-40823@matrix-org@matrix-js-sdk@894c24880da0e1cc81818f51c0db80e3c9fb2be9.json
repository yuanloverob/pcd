{
  "cve_id": "CVE-2021-40823",
  "cve_desc": "A logic error in the room key sharing functionality of matrix-js-sdk (aka Matrix Javascript SDK) before 12.4.1 allows a malicious Matrix homeserver present in an encrypted room to steal room encryption keys (via crafted Matrix protocol messages) that were originally sent by affected Matrix clients participating in that room. This allows the homeserver to decrypt end-to-end encrypted messages sent by affected clients.",
  "repo": "matrix-org/matrix-js-sdk",
  "patch_hash": "894c24880da0e1cc81818f51c0db80e3c9fb2be9",
  "patch_info": {
    "commit_hash": "894c24880da0e1cc81818f51c0db80e3c9fb2be9",
    "repo": "matrix-org/matrix-js-sdk",
    "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/894c24880da0e1cc81818f51c0db80e3c9fb2be9",
    "files": [
      "src/crypto/algorithms/megolm.ts"
    ],
    "message": "Verify target device key on reshare",
    "before_after_code_files": [
      "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
    ]
  },
  "patch_diff": {
    "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
      "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "101: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104: interface SharedWithData {",
      "106:     deviceKey: string;",
      "108:     messageIndex: number;",
      "109: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120: class OutboundSessionInfo {",
      "121:     public useCount = 0;",
      "122:     public creationTime: number;",
      "124:     public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};",
      "126:     constructor(public readonly sessionId: string, public readonly sharedHistory = false) {",
      "",
      "[Removed Lines]",
      "123:     public sharedWithDevices: Record<string, Record<string, number>> = {};",
      "",
      "[Added Lines]",
      "130:     public sharedWithDevices: Record<string, Record<string, SharedWithData>> = {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:         return false;",
      "151:     }",
      "154:         if (!this.sharedWithDevices[userId]) {",
      "155:             this.sharedWithDevices[userId] = {};",
      "156:         }",
      "158:     }",
      "160:     public markNotifiedBlockedDevice(userId: string, deviceId: string): void {",
      "",
      "[Removed Lines]",
      "153:     public markSharedWithDevice(userId: string, deviceId: string, chainIndex: number): void {",
      "157:         this.sharedWithDevices[userId][deviceId] = chainIndex;",
      "",
      "[Added Lines]",
      "160:     public markSharedWithDevice(userId: string, deviceId: string, deviceKey: string, chainIndex: number): void {",
      "164:         this.sharedWithDevices[userId][deviceId] = { deviceKey, messageIndex: chainIndex };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "572:         payload: IPayload,",
      "573:     ): Promise<void> {",
      "574:         const contentMap = {};",
      "576:         const promises = [];",
      "577:         for (let i = 0; i < userDeviceMap.length; i++) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "584:             const userId = val.userId;",
      "585:             const deviceInfo = val.deviceInfo;",
      "586:             const deviceId = deviceInfo.deviceId;",
      "588:             if (!contentMap[userId]) {",
      "589:                 contentMap[userId] = {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "595:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "636:                 for (const userId of Object.keys(contentMap)) {",
      "637:                     for (const deviceId of Object.keys(contentMap[userId])) {",
      "638:                         session.markSharedWithDevice(",
      "640:                         );",
      "641:                     }",
      "642:                 }",
      "",
      "[Removed Lines]",
      "639:                             userId, deviceId, chainIndex,",
      "",
      "[Added Lines]",
      "648:                             userId,",
      "649:                             deviceId,",
      "650:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
      "651:                             chainIndex,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "719:             logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);",
      "720:             return;",
      "721:         }",
      "724:             logger.debug(",
      "725:                 \"megolm session ID \" + sessionId + \" never shared with device \" +",
      "726:                 userId + \":\" + device.deviceId,",
      "",
      "[Removed Lines]",
      "722:         const sentChainIndex = obSessionInfo.sharedWithDevices[userId][device.deviceId];",
      "723:         if (sentChainIndex === undefined) {",
      "",
      "[Added Lines]",
      "734:         const sessionSharedData = obSessionInfo.sharedWithDevices[userId][device.deviceId];",
      "735:         if (sessionSharedData === undefined) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "728:             return;",
      "729:         }",
      "733:         const key = await this.olmDevice.getInboundGroupSessionKey(",
      "735:         );",
      "737:         if (!key) {",
      "",
      "[Removed Lines]",
      "734:             this.roomId, senderKey, sessionId, sentChainIndex,",
      "",
      "[Added Lines]",
      "743:         if (sessionSharedData.deviceKey !== device.getIdentityKey()) {",
      "744:             logger.warn(",
      "745:                 `Session has been shared with device ${device.deviceId} but with identity ` +",
      "746:                 `key ${sessionSharedData.deviceKey}. Key is now ${device.getIdentityKey()}!`,",
      "747:             );",
      "748:             return;",
      "749:         }",
      "754:             this.roomId, senderKey, sessionId, sessionSharedData.messageIndex,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "882:             const deviceId = deviceInfo.deviceId;",
      "884:             session.markSharedWithDevice(",
      "886:             );",
      "887:         }",
      "",
      "[Removed Lines]",
      "885:                 userId, deviceId, key.chain_index,",
      "",
      "[Added Lines]",
      "905:                 userId, deviceId, deviceInfo.getIdentityKey(), key.chain_index,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8097221e6613e298797e7740abc2009d23e2064",
      "candidate_info": {
        "commit_hash": "f8097221e6613e298797e7740abc2009d23e2064",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/f8097221e6613e298797e7740abc2009d23e2064",
        "files": [
          "package.json",
          "spec/integ/matrix-client-retrying.spec.ts",
          "spec/unit/models/MSC3089TreeSpace.spec.ts",
          "spec/unit/utils.spec.ts",
          "spec/unit/webrtc/call.spec.ts",
          "src/ReEmitter.ts",
          "src/client.ts",
          "src/content-repo.ts",
          "src/crypto/DeviceList.ts",
          "src/crypto/SecretStorage.ts",
          "src/crypto/algorithms/base.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/algorithms/olm.ts",
          "src/crypto/index.ts",
          "src/crypto/keybackup.ts",
          "src/crypto/olmlib.ts",
          "src/crypto/verification/request/InRoomChannel.ts",
          "src/http-api.js",
          "src/interactive-auth.ts",
          "src/logger.ts",
          "src/matrix.ts",
          "src/models/event-timeline-set.ts",
          "src/models/event.ts",
          "src/models/room.ts",
          "src/scheduler.ts",
          "src/store/index.ts",
          "src/store/indexeddb-local-backend.ts",
          "src/utils.ts"
        ],
        "message": "Improve typing (#2055)",
        "before_after_code_files": [
          "spec/integ/matrix-client-retrying.spec.ts||spec/integ/matrix-client-retrying.spec.ts",
          "spec/unit/models/MSC3089TreeSpace.spec.ts||spec/unit/models/MSC3089TreeSpace.spec.ts",
          "spec/unit/utils.spec.ts||spec/unit/utils.spec.ts",
          "spec/unit/webrtc/call.spec.ts||spec/unit/webrtc/call.spec.ts",
          "src/ReEmitter.ts||src/ReEmitter.ts",
          "src/client.ts||src/client.ts",
          "src/content-repo.ts||src/content-repo.ts",
          "src/crypto/DeviceList.ts||src/crypto/DeviceList.ts",
          "src/crypto/SecretStorage.ts||src/crypto/SecretStorage.ts",
          "src/crypto/algorithms/base.ts||src/crypto/algorithms/base.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/algorithms/olm.ts||src/crypto/algorithms/olm.ts",
          "src/crypto/index.ts||src/crypto/index.ts",
          "src/crypto/keybackup.ts||src/crypto/keybackup.ts",
          "src/crypto/olmlib.ts||src/crypto/olmlib.ts",
          "src/crypto/verification/request/InRoomChannel.ts||src/crypto/verification/request/InRoomChannel.ts",
          "src/http-api.js||src/http-api.js",
          "src/interactive-auth.ts||src/interactive-auth.ts",
          "src/logger.ts||src/logger.ts",
          "src/matrix.ts||src/matrix.ts",
          "src/models/event-timeline-set.ts||src/models/event-timeline-set.ts",
          "src/models/event.ts||src/models/event.ts",
          "src/models/room.ts||src/models/room.ts",
          "src/scheduler.ts||src/scheduler.ts",
          "src/store/index.ts||src/store/index.ts",
          "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts",
          "src/utils.ts||src/utils.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "spec/integ/matrix-client-retrying.spec.ts||spec/integ/matrix-client-retrying.spec.ts": [
          "File: spec/integ/matrix-client-retrying.spec.ts -> spec/integ/matrix-client-retrying.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { TestClient } from \"../TestClient\";",
          "6: describe(\"MatrixClient retrying\", function() {",
          "9:     let scheduler;",
          "10:     const userId = \"@alice:localhost\";",
          "11:     const accessToken = \"aseukfgwef\";",
          "12:     const roomId = \"!room:here\";",
          "15:     beforeEach(function() {",
          "16:         scheduler = new MatrixScheduler();",
          "",
          "[Removed Lines]",
          "7:     let client = null;",
          "8:     let httpBackend = null;",
          "13:     let room;",
          "",
          "[Added Lines]",
          "7:     let client: TestClient = null;",
          "8:     let httpBackend: TestClient[\"httpBackend\"] = null;",
          "13:     let room: Room;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         const p1 = client.sendMessage(roomId, {",
          "54:             \"msgtype\": \"m.text\",",
          "55:             \"body\": \"m1\",",
          "58:             throw new Error('Message 1 unexpectedly sent successfully');",
          "61:         });",
          "",
          "[Removed Lines]",
          "56:         }).then(function(ev) {",
          "59:         }, (e) => {",
          "",
          "[Added Lines]",
          "56:         }).then(function() {",
          "59:         }, () => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         expect(ev2.status).toEqual(EventStatus.SENDING);",
          "83:             expect(ev2.status).toEqual(EventStatus.QUEUED);",
          "",
          "[Removed Lines]",
          "81:         httpBackend.when(\"PUT\", \"/send/m.room.message/\").check(function(rq) {",
          "",
          "[Added Lines]",
          "81:         httpBackend.when(\"PUT\", \"/send/m.room.message/\").check(function() {",
          "",
          "---------------"
        ],
        "spec/unit/models/MSC3089TreeSpace.spec.ts||spec/unit/models/MSC3089TreeSpace.spec.ts": [
          "File: spec/unit/models/MSC3089TreeSpace.spec.ts -> spec/unit/models/MSC3089TreeSpace.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     it('should return falsy for unknown files', () => {",
          "1019:         const fileEventId = \"$file\";",
          "1020:         room.currentState = {",
          "1022:                 expect(eventType).toEqual(UNSTABLE_MSC3089_BRANCH.unstable); // test to ensure we're definitely using unstable",
          "1023:                 expect(stateKey).toEqual(fileEventId);",
          "1024:                 return null;",
          "",
          "[Removed Lines]",
          "1021:             getStateEvents: (eventType: string, stateKey?: string) => {",
          "",
          "[Added Lines]",
          "1021:             getStateEvents: (eventType: string, stateKey?: string): MatrixEvent[] | MatrixEvent | null => {",
          "",
          "---------------"
        ],
        "spec/unit/utils.spec.ts||spec/unit/utils.spec.ts": [
          "File: spec/unit/utils.spec.ts -> spec/unit/utils.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     describe(\"deepCompare\", function() {",
          "113:         const assert = {",
          "115:                 expect(x).toBe(true);",
          "116:             },",
          "118:                 expect(x).toBe(false);",
          "119:             },",
          "120:         };",
          "",
          "[Removed Lines]",
          "114:             isTrue: function(x) {",
          "117:             isFalse: function(x) {",
          "",
          "[Added Lines]",
          "114:             isTrue: function(x: any) {",
          "117:             isFalse: function(x: any) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:                 return true;",
          "181:             };",
          "183:                 return true;",
          "184:             };",
          "185:             assert.isTrue(utils.deepCompare(func, func));",
          "",
          "[Removed Lines]",
          "179:             const func = function(x) {",
          "182:             const func2 = function(x) {",
          "",
          "[Added Lines]",
          "179:             const func = function() {",
          "182:             const func2 = function() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:         });",
          "190:     });",
          "252:     describe(\"chunkPromises\", function() {",
          "253:         it(\"should execute promises in chunks\", async function() {",
          "254:             let promiseCount = 0;",
          "",
          "[Removed Lines]",
          "192:     describe(\"extend\", function() {",
          "193:         const SOURCE = { \"prop2\": 1, \"string2\": \"x\", \"newprop\": \"new\" };",
          "195:         it(\"should extend\", function() {",
          "196:             const target = {",
          "197:                 \"prop1\": 5, \"prop2\": 7, \"string1\": \"baz\", \"string2\": \"foo\",",
          "198:             };",
          "199:             const merged = {",
          "200:                 \"prop1\": 5, \"prop2\": 1, \"string1\": \"baz\", \"string2\": \"x\",",
          "201:                 \"newprop\": \"new\",",
          "202:             };",
          "203:             const sourceOrig = JSON.stringify(SOURCE);",
          "205:             utils.extend(target, SOURCE);",
          "206:             expect(JSON.stringify(target)).toEqual(JSON.stringify(merged));",
          "209:             expect(JSON.stringify(SOURCE)).toEqual(sourceOrig);",
          "210:         });",
          "212:         it(\"should ignore null\", function() {",
          "213:             const target = {",
          "214:                 \"prop1\": 5, \"prop2\": 7, \"string1\": \"baz\", \"string2\": \"foo\",",
          "215:             };",
          "216:             const merged = {",
          "217:                 \"prop1\": 5, \"prop2\": 1, \"string1\": \"baz\", \"string2\": \"x\",",
          "218:                 \"newprop\": \"new\",",
          "219:             };",
          "220:             const sourceOrig = JSON.stringify(SOURCE);",
          "222:             utils.extend(target, null, SOURCE);",
          "223:             expect(JSON.stringify(target)).toEqual(JSON.stringify(merged));",
          "226:             expect(JSON.stringify(SOURCE)).toEqual(sourceOrig);",
          "227:         });",
          "229:         it(\"should handle properties created with defineProperties\", function() {",
          "230:             const source = Object.defineProperties({}, {",
          "231:                 \"enumerableProp\": {",
          "232:                     get: function() {",
          "233:                         return true;",
          "234:                     },",
          "235:                     enumerable: true,",
          "236:                 },",
          "237:                 \"nonenumerableProp\": {",
          "238:                     get: function() {",
          "239:                         return true;",
          "240:                     },",
          "241:                 },",
          "242:             });",
          "245:             const target: any = {};",
          "246:             utils.extend(target, source);",
          "247:             expect(target.enumerableProp).toBe(true);",
          "248:             expect(target.nonenumerableProp).toBe(undefined);",
          "249:         });",
          "250:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:         it('should retry', async () => {",
          "274:             let count = 0;",
          "275:             const val = {};",
          "277:                 count++;",
          "",
          "[Removed Lines]",
          "276:             const fn = (attempt) => {",
          "",
          "[Added Lines]",
          "216:             const fn = (attempt: any) => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "480:                 },",
          "481:                 [72]: \"test\",",
          "482:             };",
          "484:                 [\"72\", \"test\"],",
          "485:                 [\"a\", 42],",
          "486:                 [\"b\", [",
          "",
          "[Removed Lines]",
          "483:             const output = [",
          "",
          "[Added Lines]",
          "423:             const output: any = [",
          "",
          "---------------"
        ],
        "spec/unit/webrtc/call.spec.ts||spec/unit/webrtc/call.spec.ts": [
          "File: spec/unit/webrtc/call.spec.ts -> spec/unit/webrtc/call.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { TestClient } from '../../TestClient';",
          "18: import { MatrixCall, CallErrorCode, CallEvent } from '../../../src/webrtc/call';",
          "19: import { SDPStreamMetadataKey, SDPStreamMetadataPurpose } from '../../../src/webrtc/callEventTypes';",
          "21: const DUMMY_SDP = (",
          "22:     \"v=0\\r\\n\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import { RoomMember } from \"../../../src\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: class MockMediaStream {",
          "87:     constructor(",
          "89:     ) {}",
          "91:     getTracks() { return []; }",
          "",
          "[Removed Lines]",
          "88:         public id,",
          "",
          "[Added Lines]",
          "89:         public id: string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:         await callPromise;",
          "364:         call.getOpponentMember = () => {",
          "366:         };",
          "368:         await call.onAnswerReceived({",
          "",
          "[Removed Lines]",
          "365:             return { userId: \"@bob:bar.uk\" };",
          "",
          "[Added Lines]",
          "366:             return { userId: \"@bob:bar.uk\" } as RoomMember;",
          "",
          "---------------"
        ],
        "src/ReEmitter.ts||src/ReEmitter.ts": [
          "File: src/ReEmitter.ts -> src/ReEmitter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "33:             const forSource = (...args) => {",
          "",
          "[Added Lines]",
          "33:             const forSource = (...args: any[]) => {",
          "",
          "---------------"
        ],
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1424:         return this.http.authedRequest(",
          "1425:             undefined, \"GET\", \"/capabilities\",",
          "1427:             logger.error(e);",
          "1428:             return null; // otherwise consume the error",
          "1429:         }).then((r) => {",
          "",
          "[Removed Lines]",
          "1426:         ).catch((e) => {",
          "",
          "[Added Lines]",
          "1426:         ).catch((e: Error) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3110:         if (this.isInitialSyncComplete()) {",
          "3111:             const event = this.store.getAccountData(eventType);",
          "3112:             if (!event) {",
          "",
          "[Removed Lines]",
          "3109:     public async getAccountDataFromServer(eventType: string): Promise<Record<string, any>> {",
          "",
          "[Added Lines]",
          "3109:     public async getAccountDataFromServer<T>(eventType: string): Promise<T> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3201:             );",
          "3202:         }",
          "3205:         if (opts.viaServers) {",
          "3206:             queryString[\"server_name\"] = opts.viaServers;",
          "3207:         }",
          "",
          "[Removed Lines]",
          "3204:         const queryString = {};",
          "",
          "[Added Lines]",
          "3204:         const queryString: Record<string, string | string[]> = {};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3411:         content: IContent,",
          "3412:         txnId?: string,",
          "3413:         callback?: Callback,",
          "3415:     public sendEvent(",
          "3416:         roomId: string,",
          "3417:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3414:     );",
          "",
          "[Added Lines]",
          "3414:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3419:         content: IContent,",
          "3420:         txnId?: string,",
          "3421:         callback?: Callback,",
          "3423:     public sendEvent(",
          "3424:         roomId: string,",
          "3425:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3422:     )",
          "",
          "[Added Lines]",
          "3422:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3699:         eventId: string,",
          "3700:         txnId?: string | undefined,",
          "3701:         cbOrOpts?: Callback | IRedactOpts,",
          "3703:     public redactEvent(",
          "3704:         roomId: string,",
          "3705:         threadId: string | null,",
          "3706:         eventId: string,",
          "3707:         txnId?: string | undefined,",
          "3708:         cbOrOpts?: Callback | IRedactOpts,",
          "3710:     public redactEvent(",
          "3711:         roomId: string,",
          "3712:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3702:     );",
          "3709:     );",
          "",
          "[Added Lines]",
          "3702:     ): Promise<ISendEventResponse>;",
          "3709:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3744:         content: IContent,",
          "3745:         txnId?: string,",
          "3746:         callback?: Callback,",
          "3748:     public sendMessage(",
          "3749:         roomId: string,",
          "3750:         threadId: string | null,",
          "3751:         content: IContent,",
          "3752:         txnId?: string,",
          "3753:         callback?: Callback,",
          "3755:     public sendMessage(",
          "3756:         roomId: string,",
          "3757:         threadId: string | null | IContent,",
          "",
          "[Removed Lines]",
          "3747:     )",
          "3754:     )",
          "",
          "[Added Lines]",
          "3747:     ): Promise<ISendEventResponse>;",
          "3754:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3793:         body: string,",
          "3794:         txnId?: string,",
          "3795:         callback?: Callback,",
          "3797:     public sendTextMessage(",
          "3798:         roomId: string,",
          "3799:         threadId: string | null,",
          "3800:         body: string,",
          "3801:         txnId?: string,",
          "3802:         callback?: Callback,",
          "3804:     public sendTextMessage(",
          "3805:         roomId: string,",
          "3806:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3796:     )",
          "3803:     )",
          "",
          "[Added Lines]",
          "3796:     ): Promise<ISendEventResponse>;",
          "3803:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3832:         body: string,",
          "3833:         txnId?: string,",
          "3834:         callback?: Callback,",
          "3836:     public sendNotice(",
          "3837:         roomId: string,",
          "3838:         threadId: string | null,",
          "3839:         body: string,",
          "3840:         txnId?: string,",
          "3841:         callback?: Callback,",
          "3843:     public sendNotice(",
          "3844:         roomId: string,",
          "3845:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3835:     )",
          "3842:     );",
          "",
          "[Added Lines]",
          "3835:     ): Promise<ISendEventResponse>;",
          "3842:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3871:         body: string,",
          "3872:         txnId?: string,",
          "3873:         callback?: Callback,",
          "3875:     public sendEmoteMessage(",
          "3876:         roomId: string,",
          "3877:         threadId: string | null,",
          "3878:         body: string,",
          "3879:         txnId?: string,",
          "3880:         callback?: Callback,",
          "3882:     public sendEmoteMessage(",
          "3883:         roomId: string,",
          "3884:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3874:     )",
          "3881:     );",
          "",
          "[Added Lines]",
          "3874:     ): Promise<ISendEventResponse>;",
          "3881:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3912:         info?: IImageInfo,",
          "3913:         text?: string,",
          "3914:         callback?: Callback,",
          "3916:     public sendImageMessage(",
          "3917:         roomId: string,",
          "3918:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3915:     );",
          "",
          "[Added Lines]",
          "3915:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3920:         info?: IImageInfo,",
          "3921:         text?: string,",
          "3922:         callback?: Callback,",
          "3924:     public sendImageMessage(",
          "3925:         roomId: string,",
          "3926:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3923:     );",
          "",
          "[Added Lines]",
          "3923:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3965:         info?: IImageInfo,",
          "3966:         text?: string,",
          "3967:         callback?: Callback,",
          "3969:     public sendStickerMessage(",
          "3970:         roomId: string,",
          "3971:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3968:     );",
          "",
          "[Added Lines]",
          "3968:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3973:         info?: IImageInfo,",
          "3974:         text?: string,",
          "3975:         callback?: Callback,",
          "3977:     public sendStickerMessage(",
          "3978:         roomId: string,",
          "3979:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "3976:     );",
          "",
          "[Added Lines]",
          "3976:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4015:         body: string,",
          "4016:         htmlBody: string,",
          "4017:         callback?: Callback,",
          "4019:     public sendHtmlMessage(",
          "4020:         roomId: string,",
          "4021:         threadId: string | null,",
          "4022:         body: string,",
          "4023:         htmlBody: string,",
          "4024:         callback?: Callback,",
          "4026:     public sendHtmlMessage(",
          "4027:         roomId: string,",
          "4028:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "4018:     );",
          "4025:     )",
          "",
          "[Added Lines]",
          "4018:     ): Promise<ISendEventResponse>;",
          "4025:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4053:         body: string,",
          "4054:         htmlBody: string,",
          "4055:         callback?: Callback,",
          "4057:     public sendHtmlNotice(",
          "4058:         roomId: string,",
          "4059:         threadId: string | null,",
          "4060:         body: string,",
          "4061:         htmlBody: string,",
          "4062:         callback?: Callback,",
          "4064:     public sendHtmlNotice(",
          "4065:         roomId: string,",
          "4066:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "4056:     );",
          "4063:     )",
          "",
          "[Added Lines]",
          "4056:     ): Promise<ISendEventResponse>;",
          "4063:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4092:         body: string,",
          "4093:         htmlBody: string,",
          "4094:         callback?: Callback,",
          "4096:     public sendHtmlEmote(",
          "4097:         roomId: string,",
          "4098:         threadId: string | null,",
          "4099:         body: string,",
          "4100:         htmlBody: string,",
          "4101:         callback?: Callback,",
          "4103:     public sendHtmlEmote(",
          "4104:         roomId: string,",
          "4105:         threadId: string | null,",
          "",
          "[Removed Lines]",
          "4095:     );",
          "4102:     )",
          "",
          "[Added Lines]",
          "4095:     ): Promise<ISendEventResponse>;",
          "4102:     ): Promise<ISendEventResponse>;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4420:                 errcode: \"ORG.MATRIX.JSSDK_MISSING_PARAM\",",
          "4421:             }));",
          "4422:         }",
          "4424:             id_server: identityServerUrl,",
          "4425:             medium: medium,",
          "4426:             address: address,",
          "",
          "[Removed Lines]",
          "4423:         const params = {",
          "",
          "[Added Lines]",
          "4423:         const params: Record<string, string> = {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4478:             }",
          "4479:         }",
          "4482:         const promises = [];",
          "4485:             return this.leave(roomId).then(() => {",
          "4486:                 populationResults[roomId] = null;",
          "4487:             }).catch((err) => {",
          "",
          "[Removed Lines]",
          "4481:         const populationResults = {}; // {roomId: Error}",
          "4484:         const doLeave = (roomId) => {",
          "",
          "[Added Lines]",
          "4481:         const populationResults: Record<string, Error> = {}; // {roomId: Error}",
          "4484:         const doLeave = (roomId: string) => {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5065:             return pendingRequest;",
          "5066:         }",
          "5070:         let promise;",
          "5072:         if (isNotifTimeline) {",
          "5073:             path = \"/notifications\";",
          "5074:             params = {",
          "5076:                 only: 'highlight',",
          "5077:             };",
          "",
          "[Removed Lines]",
          "5068:         let path;",
          "5069:         let params;",
          "5075:                 limit: ('limit' in opts) ? opts.limit : 30,",
          "",
          "[Added Lines]",
          "5068:         let path: string;",
          "5069:         let params: Record<string, string>;",
          "5075:                 limit: (opts.limit ?? 30).toString(),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5511:     public setRoomMutePushRule(scope: string, roomId: string, mute: boolean): Promise<void> | void {",
          "5513:         let hasDontNotifyRule;",
          "",
          "[Removed Lines]",
          "5512:         let deferred;",
          "",
          "[Added Lines]",
          "5512:         let promise: Promise<void>;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5523:         if (!mute) {",
          "5525:             if (hasDontNotifyRule) {",
          "5527:             }",
          "5528:         } else {",
          "5529:             if (!roomPushRule) {",
          "5531:                     actions: [\"dont_notify\"],",
          "5532:                 });",
          "5533:             } else if (!hasDontNotifyRule) {",
          "5537:                 this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id)",
          "5538:                     .then(() => {",
          "5539:                         this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {",
          "",
          "[Removed Lines]",
          "5526:                 deferred = this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id);",
          "5530:                 deferred = this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {",
          "5536:                 deferred = utils.defer();",
          "",
          "[Added Lines]",
          "5526:                 promise = this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id);",
          "5530:                 promise = this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {",
          "5536:                 const deferred = utils.defer();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5547:                         deferred.reject(err);",
          "5548:                     });",
          "5551:             }",
          "5552:         }",
          "5555:             return new Promise<void>((resolve, reject) => {",
          "5558:                     this.getPushRules().then((result) => {",
          "5559:                         this.pushRules = result;",
          "5560:                         resolve();",
          "5561:                     }).catch((err) => {",
          "5562:                         reject(err);",
          "5563:                     });",
          "5567:                     this.getPushRules().then((result) => {",
          "",
          "[Removed Lines]",
          "5550:                 deferred = deferred.promise;",
          "5554:         if (deferred) {",
          "5557:                 deferred.then(() => {",
          "5564:                 }).catch((err) => {",
          "",
          "[Added Lines]",
          "5550:                 promise = deferred.promise;",
          "5554:         if (promise) {",
          "5557:                 promise.then(() => {",
          "5564:                 }).catch((err: Error) => {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6281:             fetchedEventType,",
          "6282:             opts);",
          "6283:         const mapper = this.getEventMapper();",
          "6285:         if (result.original_event) {",
          "6286:             originalEvent = mapper(result.original_event);",
          "6287:         }",
          "",
          "[Removed Lines]",
          "6284:         let originalEvent;",
          "",
          "[Added Lines]",
          "6284:         let originalEvent: MatrixEvent;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6564:         };",
          "6569:         return this.http.authedRequest(",
          "6570:             (error, response) => {",
          "",
          "[Removed Lines]",
          "6567:         utils.extend(loginData, data);",
          "",
          "[Added Lines]",
          "6567:         Object.assign(loginData, data);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7546:     public getPushRules(callback?: Callback): Promise<IPushRules> {",
          "7548:             return PushProcessor.rewriteDefaultRules(rules);",
          "7549:         });",
          "7550:     }",
          "",
          "[Removed Lines]",
          "7547:         return this.http.authedRequest(callback, \"GET\", \"/pushrules/\").then(rules => {",
          "",
          "[Added Lines]",
          "7547:         return this.http.authedRequest(callback, \"GET\", \"/pushrules/\").then((rules: IPushRules) => {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "8018:         addressPairs: [string, string][],",
          "8019:         identityAccessToken: string,",
          "8020:     ): Promise<{ address: string, mxid: string }[]> {",
          "",
          "[Removed Lines]",
          "8021:         const params = {",
          "",
          "[Added Lines]",
          "8021:         const params: Record<string, string | string[]> = {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "8033:         params['pepper'] = hashes['lookup_pepper'];",
          "8038:         };",
          "",
          "[Removed Lines]",
          "8035:         const localMapping = {",
          "",
          "[Added Lines]",
          "8035:         const localMapping: Record<string, string> = {",
          "",
          "---------------"
        ],
        "src/content-repo.ts||src/content-repo.ts": [
          "File: src/content-repo.ts -> src/content-repo.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     }",
          "54:     let serverAndMediaId = mxc.slice(6); // strips mxc://",
          "55:     let prefix = \"/_matrix/media/r0/download/\";",
          "58:     if (width) {",
          "60:     }",
          "61:     if (height) {",
          "63:     }",
          "64:     if (resizeMethod) {",
          "65:         params[\"method\"] = resizeMethod;",
          "",
          "[Removed Lines]",
          "56:     const params = {};",
          "59:         params[\"width\"] = Math.round(width);",
          "62:         params[\"height\"] = Math.round(height);",
          "",
          "[Added Lines]",
          "56:     const params: Record<string, string> = {};",
          "59:         params[\"width\"] = Math.round(width).toString();",
          "62:         params[\"height\"] = Math.round(height).toString();",
          "",
          "---------------"
        ],
        "src/crypto/DeviceList.ts||src/crypto/DeviceList.ts": [
          "File: src/crypto/DeviceList.ts -> src/crypto/DeviceList.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     public downloadKeys(userIds: string[], forceDownload: boolean): Promise<DeviceInfoMap> {",
          "271:         userIds.forEach((u) => {",
          "272:             const trackingStatus = this.deviceTrackingStatus[u];",
          "",
          "[Removed Lines]",
          "268:         const usersToDownload = [];",
          "269:         const promises = [];",
          "",
          "[Added Lines]",
          "268:         const usersToDownload: string[] = [];",
          "269:         const promises: Promise<unknown>[] = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633:             }",
          "634:         });",
          "637:             this.emit(\"crypto.willUpdateDevices\", users, !this.hasFetched);",
          "638:             users.forEach((u) => {",
          "639:                 this.dirty = true;",
          "",
          "[Removed Lines]",
          "636:         const finished = (success) => {",
          "",
          "[Added Lines]",
          "636:         const finished = (success: boolean): void => {",
          "",
          "---------------"
        ],
        "src/crypto/SecretStorage.ts||src/crypto/SecretStorage.ts": [
          "File: src/crypto/SecretStorage.ts -> src/crypto/SecretStorage.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: export interface IAccountDataClient extends EventEmitter {",
          "41:     getAccountData: (eventType: string) => MatrixEvent;",
          "42:     setAccountData: (eventType: string, content: any) => Promise<{}>;",
          "43: }",
          "",
          "[Removed Lines]",
          "40:     getAccountDataFromServer: (eventType: string) => Promise<Record<string, any>>;",
          "",
          "[Added Lines]",
          "40:     getAccountDataFromServer: <T>(eventType: string) => Promise<T>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     ) {}",
          "78:     public async getDefaultKeyId(): Promise<string> {",
          "80:             'm.secret_storage.default_key',",
          "81:         );",
          "82:         if (!defaultKey) return null;",
          "",
          "[Removed Lines]",
          "79:         const defaultKey = await this.accountDataAdapter.getAccountDataFromServer(",
          "",
          "[Added Lines]",
          "79:         const defaultKey = await this.accountDataAdapter.getAccountDataFromServer<{ key: string }>(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:     public async store(name: string, secret: string, keys?: string[]): Promise<void> {",
          "235:         if (!keys) {",
          "236:             const defaultKeyId = await this.getDefaultKeyId();",
          "",
          "[Removed Lines]",
          "233:         const encrypted = {};",
          "",
          "[Added Lines]",
          "233:         const encrypted: Record<string, IEncryptedPayload> = {};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:         for (const keyId of keys) {",
          "250:                 \"m.secret_storage.key.\" + keyId,",
          "252:             if (!keyInfo) {",
          "253:                 throw new Error(\"Unknown key: \" + keyId);",
          "254:             }",
          "",
          "[Removed Lines]",
          "249:             const keyInfo = await this.accountDataAdapter.getAccountDataFromServer(",
          "251:             ) as ISecretStorageKeyInfo;",
          "",
          "[Added Lines]",
          "249:             const keyInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(",
          "251:             );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "279:     public async get(name: string): Promise<string> {",
          "281:         if (!secretInfo) {",
          "282:             return;",
          "283:         }",
          "",
          "[Removed Lines]",
          "280:         const secretInfo = await this.accountDataAdapter.getAccountDataFromServer(name);",
          "",
          "[Added Lines]",
          "280:         const secretInfo = await this.accountDataAdapter.getAccountDataFromServer<any>(name); // TODO types",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "286:         }",
          "290:         for (const keyId of Object.keys(secretInfo.encrypted)) {",
          "294:             );",
          "295:             const encInfo = secretInfo.encrypted[keyId];",
          "",
          "[Removed Lines]",
          "289:         const keys = {};",
          "292:             const keyInfo = await this.accountDataAdapter.getAccountDataFromServer(",
          "293:                 \"m.secret_storage.key.\" + keyId,",
          "",
          "[Added Lines]",
          "289:         const keys: Record<string, ISecretStorageKeyInfo> = {};",
          "292:             const keyInfo = (",
          "293:                 await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(",
          "294:                     \"m.secret_storage.key.\" + keyId,",
          "295:                 )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "306:                 `the keys it is encrypted with are for a supported algorithm`);",
          "307:         }",
          "310:         let decryption;",
          "311:         try {",
          "",
          "[Removed Lines]",
          "309:         let keyId;",
          "",
          "[Added Lines]",
          "311:         let keyId: string;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "338:     public async isStored(name: string, checkKey: boolean): Promise<Record<string, ISecretStorageKeyInfo>> {",
          "341:         if (!secretInfo) return null;",
          "342:         if (!secretInfo.encrypted) {",
          "343:             return null;",
          "",
          "[Removed Lines]",
          "340:         const secretInfo = await this.accountDataAdapter.getAccountDataFromServer(name);",
          "",
          "[Added Lines]",
          "342:         const secretInfo = await this.accountDataAdapter.getAccountDataFromServer<any>(name); // TODO types",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "351:         for (const keyId of Object.keys(secretInfo.encrypted)) {",
          "354:                 \"m.secret_storage.key.\" + keyId,",
          "355:             );",
          "356:             if (!keyInfo) continue;",
          "",
          "[Removed Lines]",
          "353:             const keyInfo = await this.accountDataAdapter.getAccountDataFromServer(",
          "",
          "[Added Lines]",
          "355:             const keyInfo = await this.accountDataAdapter.getAccountDataFromServer<any>( // TODO types",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "375:     public request(name: string, devices: string[]): ISecretRequest {",
          "376:         const requestId = this.baseApis.makeTxnId();",
          "380:         const promise = new Promise<string>((res, rej) => {",
          "381:             resolve = res;",
          "382:             reject = rej;",
          "",
          "[Removed Lines]",
          "378:         let resolve: (string) => void;",
          "379:         let reject: (Error) => void;",
          "",
          "[Added Lines]",
          "380:         let resolve: (s: string) => void;",
          "381:         let reject: (e: Error) => void;",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/base.ts||src/crypto/algorithms/base.ts": [
          "File: src/crypto/algorithms/base.ts -> src/crypto/algorithms/base.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: export const DECRYPTION_CLASSES: Record<string, new (params: DecryptionClassParams) => DecryptionAlgorithm> = {};",
          "50:     userId: string;",
          "51:     deviceId: string;",
          "52:     crypto: Crypto;",
          "",
          "[Removed Lines]",
          "49: interface IParams {",
          "",
          "[Added Lines]",
          "49: export interface IParams {",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     DecryptionAlgorithm,",
          "27:     DecryptionError,",
          "28:     EncryptionAlgorithm,",
          "29:     registerAlgorithm,",
          "30:     UnknownDeviceError,",
          "31: } from \"./base\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     IParams,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     algorithm?: string;",
          "100:     sender_key?: string;",
          "101: }",
          "104: interface SharedWithData {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: interface IEncryptedContent {",
          "105:     algorithm: string;",
          "106:     sender_key: string;",
          "107:     ciphertext: Record<string, string>;",
          "108: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:         startTime: number;",
          "239:     };",
          "242:         super(params);",
          "244:         this.sessionRotationPeriodMsgs = params.config?.rotation_period_msgs ?? 100;",
          "",
          "[Removed Lines]",
          "241:     constructor(params) {",
          "",
          "[Added Lines]",
          "248:     constructor(params: IParams) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:         blocked: IBlockedMap,",
          "264:         singleOlmCreationPhase = false,",
          "265:     ): Promise<OutboundSessionInfo> {",
          "",
          "[Removed Lines]",
          "266:         let session;",
          "",
          "[Added Lines]",
          "273:         let session: OutboundSessionInfo;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:             }",
          "307:             for (const [userId, userDevices] of Object.entries(devicesInRoom)) {",
          "308:                 for (const [deviceId, deviceInfo] of Object.entries(userDevices)) {",
          "",
          "[Removed Lines]",
          "305:             const shareMap = {};",
          "",
          "[Added Lines]",
          "312:             const shareMap: Record<string, DeviceInfo[]> = {};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "350:                         `Sharing keys (start phase 1) with new Olm sessions in ${this.roomId}`,",
          "351:                         devicesWithoutSession,",
          "352:                     );",
          "",
          "[Removed Lines]",
          "353:                     const errorDevices = [];",
          "",
          "[Added Lines]",
          "360:                     const errorDevices: IOlmDevice[] = [];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "360:                     const start = Date.now();",
          "362:                     await this.shareKeyWithDevices(",
          "363:                         session, key, payload, devicesWithoutSession, errorDevices,",
          "364:                         singleOlmCreationPhase ? 10000 : 2000, failedServers,",
          "",
          "[Removed Lines]",
          "361:                     const failedServers = [];",
          "",
          "[Added Lines]",
          "368:                     const failedServers: string[] = [];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "378:                             const failedServerMap = new Set;",
          "379:                             for (const server of failedServers) {",
          "380:                                 failedServerMap.add(server);",
          "",
          "[Removed Lines]",
          "377:                             const retryDevices = {};",
          "",
          "[Added Lines]",
          "384:                             const retryDevices: Record<string, DeviceInfo[]> = {};",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "584:         userDeviceMap: IOlmDevice[],",
          "585:         payload: IPayload,",
          "586:     ): Promise<void> {",
          "588:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "591:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "593:                 algorithm: olmlib.OLM_ALGORITHM,",
          "594:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "595:                 ciphertext: {},",
          "",
          "[Removed Lines]",
          "587:         const contentMap = {};",
          "590:         const promises = [];",
          "592:             const encryptedContent = {",
          "",
          "[Added Lines]",
          "594:         const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "597:         const promises: Promise<unknown>[] = [];",
          "599:             const encryptedContent: IEncryptedContent = {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "679:         userDeviceMap: IOlmDevice<IBlockedDevice>[],",
          "680:         payload: IPayload,",
          "681:     ): Promise<void> {",
          "684:         for (const val of userDeviceMap) {",
          "685:             const userId = val.userId;",
          "",
          "[Removed Lines]",
          "682:         const contentMap = {};",
          "",
          "[Added Lines]",
          "689:         const contentMap: Record<string, Record<string, IPayload>> = {};",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1107:     private checkForUnknownDevices(devicesInRoom: DeviceInfoMap): void {",
          "1110:         Object.keys(devicesInRoom).forEach((userId)=>{",
          "1111:             Object.keys(devicesInRoom[userId]).forEach((deviceId)=>{",
          "",
          "[Removed Lines]",
          "1108:         const unknownDevices = {};",
          "",
          "[Added Lines]",
          "1115:         const unknownDevices: Record<string, Record<string, DeviceInfo>> = {};",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1304:                 content.sender_key, event.getTs() - 120000,",
          "1305:             );",
          "1306:             if (problem) {",
          "1309:                 if (problem.fixed) {",
          "1310:                     problemDescription +=",
          "1311:                         \" Trying to create a new secure channel and re-requesting the keys.\";",
          "",
          "[Removed Lines]",
          "1307:                 let problemDescription = PROBLEM_DESCRIPTIONS[problem.type]",
          "1308:                     || PROBLEM_DESCRIPTIONS.unknown;",
          "",
          "[Added Lines]",
          "1314:                 let problemDescription = PROBLEM_DESCRIPTIONS[problem.type as \"no_olm\"] || PROBLEM_DESCRIPTIONS.unknown;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1399:         const senderKey = content.sender_key;",
          "1400:         const sessionId = content.session_id;",
          "1401:         const senderPendingEvents = this.pendingEvents[senderKey];",
          "1403:         if (!pendingEvents) {",
          "1404:             return;",
          "1405:         }",
          "1407:         pendingEvents.delete(event);",
          "1408:         if (pendingEvents.size === 0) {",
          "1410:         }",
          "1411:         if (senderPendingEvents.size === 0) {",
          "1412:             delete this.pendingEvents[senderKey];",
          "",
          "[Removed Lines]",
          "1402:         const pendingEvents = senderPendingEvents && senderPendingEvents.get(sessionId);",
          "1409:             senderPendingEvents.delete(senderKey);",
          "",
          "[Added Lines]",
          "1408:         const pendingEvents = senderPendingEvents?.get(sessionId);",
          "1415:             senderPendingEvents.delete(sessionId);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1760:         }));",
          "1764:     }",
          "1766:     public async retryDecryptionFromSender(senderKey: string): Promise<boolean> {",
          "",
          "[Removed Lines]",
          "1763:         return !((this.pendingEvents[senderKey] || {})[sessionId]);",
          "",
          "[Added Lines]",
          "1769:         return !this.pendingEvents[senderKey]?.has(sessionId);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1794:         for (const [senderKey, sessionId] of sharedHistorySessions) {",
          "1795:             const payload = await this.buildKeyForwardingMessage(this.roomId, senderKey, sessionId);",
          "1799:             for (const [userId, devices] of Object.entries(devicesByUser)) {",
          "1800:                 contentMap[userId] = {};",
          "1801:                 for (const deviceInfo of devices) {",
          "1803:                         algorithm: olmlib.OLM_ALGORITHM,",
          "1804:                         sender_key: this.olmDevice.deviceCurve25519Key,",
          "1805:                         ciphertext: {},",
          "",
          "[Removed Lines]",
          "1797:             const promises = [];",
          "1798:             const contentMap = {};",
          "1802:                     const encryptedContent = {",
          "",
          "[Added Lines]",
          "1803:             const promises: Promise<unknown>[] = [];",
          "1804:             const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "1808:                     const encryptedContent: IEncryptedContent = {",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/olm.ts||src/crypto/algorithms/olm.ts": [
          "File: src/crypto/algorithms/olm.ts -> src/crypto/algorithms/olm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:         const sessionIds = await this.olmDevice.getSessionIdsForDevice(theirDeviceIdentityKey);",
          "286:         for (let i = 0; i < sessionIds.length; i++) {",
          "287:             const sessionId = sessionIds[i];",
          "288:             try {",
          "",
          "[Removed Lines]",
          "285:         const decryptionErrors = {};",
          "",
          "[Added Lines]",
          "285:         const decryptionErrors: Record<string, string> = {};",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import { IStore } from \"../store\";",
          "59: import { Room } from \"../models/room\";",
          "60: import { RoomMember } from \"../models/room-member\";",
          "62: import { MatrixClient, IKeysUploadResponse, SessionStore, ISignedKey, ICrossSigningKey } from \"../client\";",
          "63: import type { EncryptionAlgorithm, DecryptionAlgorithm } from \"./algorithms/base\";",
          "64: import type { IRoomEncryption, RoomList } from \"./RoomList\";",
          "",
          "[Removed Lines]",
          "61: import { MatrixEvent, EventStatus } from \"../models/event\";",
          "",
          "[Added Lines]",
          "61: import { MatrixEvent, EventStatus, IClearEvent } from \"../models/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172: }",
          "174: export interface IEventDecryptionResult {",
          "176:     senderCurve25519Key?: string;",
          "177:     claimedEd25519Key?: string;",
          "179:     untrusted?: boolean;",
          "180: }",
          "",
          "[Removed Lines]",
          "175:     clearEvent: object;",
          "178:     forwardingCurve25519KeyChain?: string[];",
          "",
          "[Added Lines]",
          "175:     clearEvent: IClearEvent;",
          "176:     forwardingCurve25519KeyChain?: string[];",
          "",
          "---------------"
        ],
        "src/crypto/keybackup.ts||src/crypto/keybackup.ts": [
          "File: src/crypto/keybackup.ts -> src/crypto/keybackup.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: export interface IKeyBackupRestoreOpts {",
          "69:     cacheCompleteCallback?: () => void;",
          "71: }",
          "",
          "[Removed Lines]",
          "70:     progressCallback?: ({ stage: string }) => void;",
          "",
          "[Added Lines]",
          "70:     progressCallback?: (progress: { stage: string }) => void;",
          "",
          "---------------"
        ],
        "src/crypto/olmlib.ts||src/crypto/olmlib.ts": [
          "File: src/crypto/olmlib.ts -> src/crypto/olmlib.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { OlmDevice } from \"./OlmDevice\";",
          "28: import { DeviceInfo } from \"./deviceinfo\";",
          "29: import { logger } from '../logger';",
          "31: import { IOneTimeKey } from \"./dehydration\";",
          "32: import { MatrixClient } from \"../client\";",
          "",
          "[Removed Lines]",
          "30: import * as utils from \"../utils\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     resultsObject[deviceKey] = await olmDevice.encryptMessage(",
          "132:         deviceKey, sessionId, JSON.stringify(payload),",
          "",
          "[Removed Lines]",
          "129:     utils.extend(payload, payloadFields);",
          "",
          "[Added Lines]",
          "128:     Object.assign(payload, payloadFields);",
          "",
          "---------------"
        ],
        "src/crypto/verification/request/InRoomChannel.ts||src/crypto/verification/request/InRoomChannel.ts": [
          "File: src/crypto/verification/request/InRoomChannel.ts -> src/crypto/verification/request/InRoomChannel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: export class InRoomChannel implements IVerificationChannel {",
          "",
          "[Removed Lines]",
          "39:     private requestEventId = null;",
          "",
          "[Added Lines]",
          "39:     private requestEventId: string = null;",
          "",
          "---------------"
        ],
        "src/http-api.js||src/http-api.js": [
          "File: src/http-api.js -> src/http-api.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "657:             };",
          "658:         }",
          "661:         const json = opts.json === undefined ? true : opts.json;",
          "662:         let bodyParser = opts.bodyParser;",
          "",
          "[Removed Lines]",
          "660:         const headers = utils.extend({}, opts.headers || {});",
          "",
          "[Added Lines]",
          "660:         const headers = Object.assign({}, opts.headers || {});",
          "",
          "---------------"
        ],
        "src/interactive-auth.ts||src/interactive-auth.ts": [
          "File: src/interactive-auth.ts -> src/interactive-auth.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { logger } from './logger';",
          "23: import { MatrixClient } from \"./client\";",
          "24: import { defer, IDeferred } from \"./utils\";",
          "",
          "[Removed Lines]",
          "21: import * as utils from \"./utils\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: export interface IAuthDict {",
          "70:     type?: string;",
          "74:     user?: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     session?: string;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:         }",
          "364:         if (this.data.session) {",
          "365:             auth = {",
          "366:                 session: this.data.session,",
          "367:             };",
          "369:         } else {",
          "370:             auth = authData;",
          "371:         }",
          "",
          "[Removed Lines]",
          "363:         let auth;",
          "368:             utils.extend(auth, authData);",
          "",
          "[Added Lines]",
          "362:         let auth: IAuthDict;",
          "367:             Object.assign(auth, authData);",
          "",
          "---------------"
        ],
        "src/logger.ts||src/logger.ts": [
          "File: src/logger.ts -> src/logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: extendLogger(logger);",
          "80:     const prefixLogger: PrefixedLogger = log.getLogger(`${DEFAULT_NAMESPACE}-${prefix}`);",
          "81:     if (prefixLogger.prefix !== prefix) {",
          "",
          "[Removed Lines]",
          "79: function getPrefixedLogger(prefix): PrefixedLogger {",
          "",
          "[Added Lines]",
          "79: function getPrefixedLogger(prefix: string): PrefixedLogger {",
          "",
          "---------------"
        ],
        "src/matrix.ts||src/matrix.ts": [
          "File: src/matrix.ts -> src/matrix.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     ) => Promise<string>;",
          "122:     getDehydrationKey?: (",
          "123:         keyInfo: ISecretStorageKeyInfo,",
          "125:     ) => Promise<Uint8Array>;",
          "126:     getBackupKey?: () => Promise<Uint8Array>;",
          "127: }",
          "",
          "[Removed Lines]",
          "124:         checkFunc: (Uint8Array) => void,",
          "",
          "[Added Lines]",
          "124:         checkFunc: (key: Uint8Array) => void,",
          "",
          "---------------"
        ],
        "src/models/event-timeline-set.ts||src/models/event-timeline-set.ts": [
          "File: src/models/event-timeline-set.ts -> src/models/event-timeline-set.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: const DEBUG = true;",
          "37: if (DEBUG) {",
          "39:     debuglog = logger.log.bind(logger);",
          "",
          "[Removed Lines]",
          "36: let debuglog;",
          "",
          "[Added Lines]",
          "36: let debuglog: (...args: any[]) => void;",
          "",
          "---------------"
        ],
        "src/models/event.ts||src/models/event.ts": [
          "File: src/models/event.ts -> src/models/event.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     MsgType,",
          "30:     RelationType,",
          "31: } from \"../@types/event\";",
          "33: import { deepSortedObjectEntries } from \"../utils\";",
          "34: import { RoomMember } from \"./room-member\";",
          "35: import { Thread, ThreadEvent } from \"./thread\";",
          "",
          "[Removed Lines]",
          "32: import { Crypto } from \"../crypto\";",
          "",
          "[Added Lines]",
          "32: import { Crypto, IEventDecryptionResult } from \"../crypto\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     age?: number;",
          "86:     prev_sender?: string;",
          "87:     prev_content?: IContent;",
          "89:     transaction_id?: string;",
          "90:     invite_room_state?: StrippedState[];",
          "91: }",
          "",
          "[Removed Lines]",
          "88:     redacted_because?: IEvent;",
          "",
          "[Added Lines]",
          "88:     redacted_because?: IClearEvent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     key?: string;",
          "125: }",
          "141: export interface IClearEvent {",
          "142:     type: string;",
          "143:     content: Omit<IContent, \"membership\" | \"avatar_url\" | \"displayname\" | \"m.relates_to\">;",
          "144:     unsigned?: IUnsigned;",
          "145: }",
          "147: interface IKeyRequestRecipient {",
          "148:     userId: string;",
          "",
          "[Removed Lines]",
          "127: interface IDecryptionResult {",
          "128:     clearEvent: {",
          "129:         room_id?: string;",
          "130:         type: string;",
          "131:         content: IContent;",
          "132:         unsigned?: IUnsigned;",
          "133:     };",
          "134:     forwardingCurve25519KeyChain?: string[];",
          "135:     senderCurve25519Key?: string;",
          "136:     claimedEd25519Key?: string;",
          "137:     untrusted?: boolean;",
          "138: }",
          "",
          "[Added Lines]",
          "128:     room_id?: string;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:     public sender: RoomMember = null;",
          "216:     public target: RoomMember = null;",
          "217:     public status: EventStatus = null;",
          "219:     public forwardLooking = true;",
          "227:     private readonly reEmitter: ReEmitter;",
          "",
          "[Removed Lines]",
          "218:     public error = null;",
          "225:     public verificationRequest = null;",
          "",
          "[Added Lines]",
          "206:     public error: Error = null;",
          "213:     public verificationRequest: VerificationRequest = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690:         while (true) {",
          "691:             this.retryDecryption = false;",
          "695:             try {",
          "696:                 if (!crypto) {",
          "697:                     res = this.badEncryptedMessage(\"Encryption not enabled\");",
          "",
          "[Removed Lines]",
          "693:             let res;",
          "694:             let err;",
          "",
          "[Added Lines]",
          "681:             let res: IEventDecryptionResult;",
          "682:             let err: Error;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "779:         }",
          "780:     }",
          "783:         return {",
          "784:             clearEvent: {",
          "785:                 type: \"m.room.message\",",
          "",
          "[Removed Lines]",
          "782:     private badEncryptedMessage(reason: string): IDecryptionResult {",
          "",
          "[Added Lines]",
          "770:     private badEncryptedMessage(reason: string): IEventDecryptionResult {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "807:         this.clearEvent = decryptionResult.clearEvent;",
          "808:         this.senderCurve25519Key =",
          "809:             decryptionResult.senderCurve25519Key || null;",
          "",
          "[Removed Lines]",
          "806:     private setClearData(decryptionResult: IDecryptionResult): void {",
          "",
          "[Added Lines]",
          "794:     private setClearData(decryptionResult: IEventDecryptionResult): void {",
          "",
          "---------------"
        ],
        "src/models/room.ts||src/models/room.ts": [
          "File: src/models/room.ts -> src/models/room.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: function synthesizeReceipt(userId: string, event: MatrixEvent, receiptType: string): MatrixEvent {",
          "55:         type: \"m.receipt\",",
          "56:         room_id: event.getRoomId(),",
          "64: }",
          "66: interface IOpts {",
          "",
          "[Removed Lines]",
          "53:     const fakeReceipt = {",
          "54:         content: {},",
          "57:     };",
          "58:     fakeReceipt.content[event.getId()] = {};",
          "59:     fakeReceipt.content[event.getId()][receiptType] = {};",
          "60:     fakeReceipt.content[event.getId()][receiptType][userId] = {",
          "61:         ts: event.getTs(),",
          "62:     };",
          "63:     return new MatrixEvent(fakeReceipt);",
          "",
          "[Added Lines]",
          "51:     return new MatrixEvent({",
          "52:         content: {",
          "53:             [event.getId()]: {",
          "54:                 [receiptType]: {",
          "55:                     [userId]: {",
          "56:                         ts: event.getTs(),",
          "57:                     },",
          "58:                 },",
          "59:             },",
          "60:         },",
          "63:     });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:             const serializedPendingEventList = client.sessionStore.store.getItem(pendingEventsKey(this.roomId));",
          "241:             if (serializedPendingEventList) {",
          "242:                 JSON.parse(serializedPendingEventList)",
          "244:                         const event = new MatrixEvent(serializedEvent);",
          "245:                         if (event.getType() === EventType.RoomMessageEncrypted) {",
          "246:                             await event.attemptDecryption(this.client.crypto);",
          "",
          "[Removed Lines]",
          "243:                     .forEach(async serializedEvent => {",
          "",
          "[Added Lines]",
          "243:                     .forEach(async (serializedEvent: Partial<IEvent>) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "999:     public getAliases(): string[] {",
          "1002:         const aliasEvents = this.currentState.getStateEvents(EventType.RoomAliases);",
          "1003:         if (aliasEvents) {",
          "1004:             for (let i = 0; i < aliasEvents.length; ++i) {",
          "1005:                 const aliasEvent = aliasEvents[i];",
          "1006:                 if (Array.isArray(aliasEvent.getContent().aliases)) {",
          "1008:                         if (typeof(a) !== \"string\") return false;",
          "1009:                         if (a[0] !== '#') return false;",
          "1010:                         if (!a.endsWith(`:${aliasEvent.getStateKey()}`)) return false;",
          "",
          "[Removed Lines]",
          "1000:         const aliasStrings = [];",
          "1007:                     const filteredAliases = aliasEvent.getContent().aliases.filter(a => {",
          "",
          "[Added Lines]",
          "1000:         const aliasStrings: string[] = [];",
          "1007:                     const filteredAliases = aliasEvent.getContent<{ aliases: string[] }>().aliases.filter(a => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1994:     private buildReceiptCache(receipts: Receipts): ReceiptCache {",
          "1996:         Object.keys(receipts).forEach(function(receiptType) {",
          "1997:             Object.keys(receipts[receiptType]).forEach(function(userId) {",
          "1998:                 const receipt = receipts[receiptType][userId];",
          "",
          "[Removed Lines]",
          "1995:         const receiptCacheByEventId = {};",
          "",
          "[Added Lines]",
          "1995:         const receiptCacheByEventId: ReceiptCache = {};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2185:         }",
          "2189:         if (this.summaryHeroes) {",
          "",
          "[Removed Lines]",
          "2188:         let otherNames = null;",
          "",
          "[Added Lines]",
          "2188:         let otherNames: string[] = null;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2296: function memberNamesToRoomName(names: string[], count = (names.length + 1)) {",
          "",
          "[Removed Lines]",
          "2269: const ALLOWED_TRANSITIONS = {};",
          "2271: ALLOWED_TRANSITIONS[EventStatus.ENCRYPTING] = [",
          "2272:     EventStatus.SENDING,",
          "2273:     EventStatus.NOT_SENT,",
          "2274: ];",
          "2276: ALLOWED_TRANSITIONS[EventStatus.SENDING] = [",
          "2277:     EventStatus.ENCRYPTING,",
          "2278:     EventStatus.QUEUED,",
          "2279:     EventStatus.NOT_SENT,",
          "2280:     EventStatus.SENT,",
          "2281: ];",
          "2283: ALLOWED_TRANSITIONS[EventStatus.QUEUED] =",
          "2284:     [EventStatus.SENDING, EventStatus.CANCELLED];",
          "2286: ALLOWED_TRANSITIONS[EventStatus.SENT] =",
          "2287:     [];",
          "2289: ALLOWED_TRANSITIONS[EventStatus.NOT_SENT] =",
          "2290:     [EventStatus.SENDING, EventStatus.QUEUED, EventStatus.CANCELLED];",
          "2292: ALLOWED_TRANSITIONS[EventStatus.CANCELLED] =",
          "2293:     [];",
          "",
          "[Added Lines]",
          "2269: const ALLOWED_TRANSITIONS: Record<EventStatus, EventStatus[]> = {",
          "2270:     [EventStatus.ENCRYPTING]: [",
          "2271:         EventStatus.SENDING,",
          "2272:         EventStatus.NOT_SENT,",
          "2273:     ],",
          "2274:     [EventStatus.SENDING]: [",
          "2275:         EventStatus.ENCRYPTING,",
          "2276:         EventStatus.QUEUED,",
          "2277:         EventStatus.NOT_SENT,",
          "2278:         EventStatus.SENT,",
          "2279:     ],",
          "2280:     [EventStatus.QUEUED]: [",
          "2281:         EventStatus.SENDING,",
          "2282:         EventStatus.CANCELLED,",
          "2283:     ],",
          "2284:     [EventStatus.SENT]: [],",
          "2285:     [EventStatus.NOT_SENT]: [",
          "2286:         EventStatus.SENDING,",
          "2287:         EventStatus.QUEUED,",
          "2288:         EventStatus.CANCELLED,",
          "2289:     ],",
          "2290:     [EventStatus.CANCELLED]: [],",
          "2291: };",
          "",
          "---------------"
        ],
        "src/scheduler.ts||src/scheduler.ts": [
          "File: src/scheduler.ts -> src/scheduler.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:     }",
          "285: }",
          "288:     if (DEBUG) {",
          "289:         logger.log(...args);",
          "290:     }",
          "",
          "[Removed Lines]",
          "287: function debuglog(...args) {",
          "",
          "[Added Lines]",
          "287: function debuglog(...args: any[]) {",
          "",
          "---------------"
        ],
        "src/store/index.ts||src/store/index.ts": [
          "File: src/store/index.ts -> src/store/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "54:     setSyncToken(token: string);",
          "61:     storeGroup(group: Group);",
          "",
          "[Added Lines]",
          "54:     setSyncToken(token: string): void;",
          "61:     storeGroup(group: Group): void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "82:     storeRoom(room: Room);",
          "",
          "[Added Lines]",
          "82:     storeRoom(room: Room): void;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "101:     removeRoom(roomId: string);",
          "",
          "[Added Lines]",
          "101:     removeRoom(roomId: string): void;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "113:     storeUser(user: User);",
          "",
          "[Added Lines]",
          "113:     storeUser(user: User): void;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "143:     storeEvents(room: Room, events: MatrixEvent[], token: string, toStart: boolean);",
          "149:     storeFilter(filter: Filter);",
          "",
          "[Added Lines]",
          "143:     storeEvents(room: Room, events: MatrixEvent[], token: string, toStart: boolean): void;",
          "149:     storeFilter(filter: Filter): void;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "171:     setFilterIdByName(filterName: string, filterId: string);",
          "177:     storeAccountDataEvents(events: MatrixEvent[]);",
          "",
          "[Added Lines]",
          "171:     setFilterIdByName(filterName: string, filterId: string): void;",
          "177:     storeAccountDataEvents(events: MatrixEvent[]): void;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts": [
          "File: src/store/indexeddb-local-backend.ts -> src/store/indexeddb-local-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: ): Promise<T[]> {",
          "67:     const query = store.openCursor(keyRange);",
          "68:     return new Promise((resolve, reject) => {",
          "70:         query.onerror = () => {",
          "71:             reject(new Error(\"Query failed: \" + query.error));",
          "72:         };",
          "",
          "[Removed Lines]",
          "69:         const results = [];",
          "",
          "[Added Lines]",
          "69:         const results: T[] = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:             const range = IDBKeyRange.only(roomId);",
          "239:             const request = roomIndex.openCursor(range);",
          "",
          "[Removed Lines]",
          "241:             const membershipEvents = [];",
          "",
          "[Added Lines]",
          "241:             const membershipEvents: IEvent[] = [];",
          "",
          "---------------"
        ],
        "src/utils.ts||src/utils.ts": [
          "File: src/utils.ts -> src/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     array: T[],",
          "91:     fn: (t: T, i?: number, a?: T[]) => boolean,",
          "92:     reverse?: boolean,",
          "96:     if (reverse) {",
          "97:         for (i = array.length - 1; i >= 0; i--) {",
          "98:             if (fn(array[i], i, array)) {",
          "100:                 array.splice(i, 1);",
          "102:             }",
          "103:         }",
          "104:     } else {",
          "105:         for (i = 0; i < array.length; i++) {",
          "106:             if (fn(array[i], i, array)) {",
          "108:                 array.splice(i, 1);",
          "110:             }",
          "111:         }",
          "112:     }",
          "",
          "[Removed Lines]",
          "93: ) {",
          "94:     let i;",
          "95:     let removed;",
          "99:                 removed = array[i];",
          "101:                 return removed;",
          "107:                 removed = array[i];",
          "109:                 return removed;",
          "",
          "[Added Lines]",
          "93: ): boolean {",
          "94:     let i: number;",
          "99:                 return true;",
          "106:                 return true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:     return pairs;",
          "277: }",
          "",
          "[Removed Lines]",
          "292: export function extend(...restParams) {",
          "293:     const target = restParams[0] || {};",
          "294:     for (let i = 1; i < restParams.length; i++) {",
          "295:         const source = restParams[i];",
          "296:         if (!source) continue;",
          "297:         for (const propName in source) { // eslint-disable-line guard-for-in",
          "298:             target[propName] = source[propName];",
          "299:         }",
          "300:     }",
          "301:     return target;",
          "302: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37c752cb0bc431e25509d4b962f9265b3954fd09",
      "candidate_info": {
        "commit_hash": "37c752cb0bc431e25509d4b962f9265b3954fd09",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/37c752cb0bc431e25509d4b962f9265b3954fd09",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "make it build",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:         userDeviceMap: IOlmDevice[],",
          "579:         payload: IPayload,",
          "580:     ): Promise<void> {",
          "582:             userDeviceMap,",
          "594:                 }",
          "595:             }",
          "597:     }",
          "",
          "[Removed Lines]",
          "581:         this.crypto.encryptAndSendToDevices(",
          "583:             payload",
          "584:         ).then(() => {",
          "586:             for (const userId of Object.keys(contentMap)) {",
          "587:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "588:                     session.markSharedWithDevice(",
          "589:                         userId,",
          "590:                         deviceId,",
          "591:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "592:                         chainIndex,",
          "593:                     );",
          "596:         });",
          "",
          "[Added Lines]",
          "581:         return this.crypto.encryptAndSendToDevices(",
          "583:             payload,",
          "584:             (contentMap, deviceInfoByDeviceId) => {",
          "586:                 for (const userId of Object.keys(contentMap)) {",
          "587:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "588:                         session.markSharedWithDevice(",
          "589:                             userId,",
          "590:                             deviceId,",
          "591:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "592:                             chainIndex,",
          "593:                         );",
          "594:                     }",
          "597:         );",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { ReEmitter } from '../ReEmitter';",
          "28: import { logger } from '../logger';",
          "29: import { IExportedDevice, OlmDevice } from \"./OlmDevice\";",
          "30: import * as olmlib from \"./olmlib\";",
          "31: import { DeviceInfoMap, DeviceList } from \"./DeviceList\";",
          "32: import { DeviceInfo, IDevice } from \"./deviceinfo\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { IOlmDevice } from \"./algorithms/megolm\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049:         payload: object,",
          "3051:         const contentMap = {};",
          "3052:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "",
          "[Removed Lines]",
          "3047:     private encryptAndSendToDevices(",
          "3048:         userDeviceMap: IExportedDevice[],",
          "3050:     ): Promise<{}> {",
          "",
          "[Added Lines]",
          "3049:     encryptAndSendToDevices(",
          "3050:         userDeviceMap: IOlmDevice<DeviceInfo>[],",
          "3052:         afterwards: (contentMap: {}, deviceInfoByDeviceId: Map<string, DeviceInfo>) => void,",
          "3053:     ): Promise<void> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3110:                 return;",
          "3111:             }",
          "3114:         });",
          "3115:     }",
          "",
          "[Removed Lines]",
          "3113:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);",
          "",
          "[Added Lines]",
          "3116:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3117:                 afterwards.bind(contentMap, deviceInfoByDeviceId)",
          "3118:             );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbe917282a5c723d81de816e5b59bf385fbf4f7e",
      "candidate_info": {
        "commit_hash": "dbe917282a5c723d81de816e5b59bf385fbf4f7e",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/dbe917282a5c723d81de816e5b59bf385fbf4f7e",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "switch encryptAndSendToDevices to return a promise rather than use a cb\n\nand assert that olm sessions are open to the destination devices",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:     ): Promise<void> {",
          "581:         return this.crypto.encryptAndSendToDevices(",
          "582:             userDeviceMap,",
          "595:                 }",
          "596:             }",
          "598:     }",
          "",
          "[Removed Lines]",
          "583:             payload,",
          "584:             (contentMap, deviceInfoByDeviceId) => {",
          "586:                 for (const userId of Object.keys(contentMap)) {",
          "587:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "588:                         session.markSharedWithDevice(",
          "589:                             userId,",
          "590:                             deviceId,",
          "591:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "592:                             chainIndex,",
          "593:                         );",
          "594:                     }",
          "597:         );",
          "",
          "[Added Lines]",
          "583:             payload",
          "584:         ).then((result) => {",
          "585:             const {contentMap, deviceInfoByDeviceId} = result;",
          "587:             for (const userId of Object.keys(contentMap)) {",
          "588:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "589:                     session.markSharedWithDevice(",
          "590:                         userId,",
          "591:                         deviceId,",
          "592:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "593:                         chainIndex,",
          "594:                     );",
          "597:         });",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3049:     encryptAndSendToDevices(",
          "3050:         userDeviceMap: IOlmDevice<DeviceInfo>[],",
          "3051:         payload: object,",
          "3054:         const contentMap = {};",
          "3055:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "",
          "[Removed Lines]",
          "3052:         afterwards: (contentMap: {}, deviceInfoByDeviceId: Map<string, DeviceInfo>) => void,",
          "3053:     ): Promise<void> {",
          "",
          "[Added Lines]",
          "3052:     ): Promise<{contentMap, deviceInfoByDeviceId}> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3072:             }",
          "3073:             contentMap[userId][deviceId] = encryptedContent;",
          "3075:             promises.push(",
          "3076:                 olmlib.encryptMessageForDevice(",
          "3077:                     encryptedContent.ciphertext,",
          "3078:                     this.userId,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3074:             const devicesByUser = {};",
          "3075:             devicesByUser[userId] = [deviceInfo];",
          "3078:                 olmlib.ensureOlmSessionsForDevices(",
          "3079:                     this.olmDevice,",
          "3080:                     this.baseApis,",
          "3081:                     devicesByUser,",
          "3082:                 ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3114:             }",
          "3116:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3118:             );",
          "3119:         });",
          "3120:     }",
          "",
          "[Removed Lines]",
          "3117:                 afterwards.bind(contentMap, deviceInfoByDeviceId)",
          "",
          "[Added Lines]",
          "3124:                 (response)=>({ contentMap, deviceInfoByDeviceId })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "835aafcb179bccacae8057c6f9afa74d37c80ca2",
      "candidate_info": {
        "commit_hash": "835aafcb179bccacae8057c6f9afa74d37c80ca2",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/835aafcb179bccacae8057c6f9afa74d37c80ca2",
        "files": [
          "src/crypto/DeviceList.ts",
          "src/crypto/algorithms/base.ts",
          "src/crypto/algorithms/index.js",
          "src/crypto/algorithms/index.ts",
          "src/crypto/algorithms/megolm.js",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/algorithms/olm.js",
          "src/crypto/algorithms/olm.ts",
          "src/crypto/index.ts",
          "src/models/event.ts"
        ],
        "message": "Type the rest of algorithms because tests are unhappy otherwise",
        "before_after_code_files": [
          "src/crypto/DeviceList.ts||src/crypto/DeviceList.ts",
          "src/crypto/algorithms/base.ts||src/crypto/algorithms/base.ts",
          "src/crypto/algorithms/index.js||src/crypto/algorithms/index.ts",
          "src/crypto/algorithms/megolm.js||src/crypto/algorithms/megolm.js",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/algorithms/olm.js||src/crypto/algorithms/olm.js",
          "src/crypto/algorithms/olm.ts||src/crypto/algorithms/olm.ts",
          "src/crypto/index.ts||src/crypto/index.ts",
          "src/models/event.ts||src/models/event.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/DeviceList.ts||src/crypto/DeviceList.ts": [
          "File: src/crypto/DeviceList.ts -> src/crypto/DeviceList.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     UpToDate,",
          "60: }",
          "",
          "[Removed Lines]",
          "62: type DeviceInfoMap = Record<string, Record<string, IDevice>>;",
          "",
          "[Added Lines]",
          "62: export type DeviceInfoMap = Record<string, Record<string, DeviceInfo>>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "73:     private devices: DeviceInfoMap = {};",
          "",
          "[Added Lines]",
          "73:     private devices: Record<string, Record<string, IDevice>> = {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:     private getDevicesFromStore(userIds: string[]): DeviceInfoMap {",
          "319:         userIds.map((u) => {",
          "320:             stored[u] = {};",
          "321:             const devices = this.getStoredDevicesForUser(u) || [];",
          "",
          "[Removed Lines]",
          "318:         const stored = {};",
          "",
          "[Added Lines]",
          "318:         const stored: DeviceInfoMap = {};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "487:         this.dirty = true;",
          "488:     }",
          "",
          "[Removed Lines]",
          "469:     public storeDevicesForUser(u: string, devs: Record<string, IDevice>): void {",
          "471:         if (this.devices[u] !== undefined) {",
          "472:             for (const [deviceId, dev] of Object.entries(this.devices[u])) {",
          "473:                 const identityKey = dev.keys['curve25519:'+deviceId];",
          "475:                 delete this.userByIdentityKey[identityKey];",
          "476:             }",
          "477:         }",
          "479:         this.devices[u] = devs;",
          "482:         for (const [deviceId, dev] of Object.entries(devs)) {",
          "483:             const identityKey = dev.keys['curve25519:'+deviceId];",
          "485:             this.userByIdentityKey[identityKey] = u;",
          "486:         }",
          "",
          "[Added Lines]",
          "469:     public storeDevicesForUser(userId: string, devices: Record<string, IDevice>): void {",
          "470:         this.setRawStoredDevicesForUser(userId, devices);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "859:             );",
          "863:             Object.keys(userStore).forEach((deviceId) => {",
          "864:                 storage[deviceId] = userStore[deviceId].toStorage();",
          "865:             });",
          "",
          "[Removed Lines]",
          "862:             const storage = {};",
          "",
          "[Added Lines]",
          "846:             const storage: Record<string, IDevice> = {};",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/base.ts||src/crypto/algorithms/base.ts": [
          "File: src/crypto/algorithms/base.ts -> src/crypto/algorithms/base.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import { Room } from \"../../models/room\";",
          "25: import { OlmDevice } from \"../OlmDevice\";",
          "26: import { MatrixEvent, RoomMember } from \"../..\";",
          "28: import { DeviceInfo } from \"../deviceinfo\";",
          "",
          "[Removed Lines]",
          "27: import { IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"..\";",
          "",
          "[Added Lines]",
          "27: import { Crypto, IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"..\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "36: export const ENCRYPTION_CLASSES: Record<string, EncryptionAlgorithm> = {};",
          "",
          "[Added Lines]",
          "36: export const ENCRYPTION_CLASSES: Record<string, new (params: IParams) => EncryptionAlgorithm> = {};",
          "38: type DecryptionClassParams = Omit<IParams, \"deviceId\" | \"config\">;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46: interface IParams {",
          "47:     userId: string;",
          "",
          "[Removed Lines]",
          "44: export const DECRYPTION_CLASSES: Record<string, DecryptionAlgorithm> = {};",
          "",
          "[Added Lines]",
          "46: export const DECRYPTION_CLASSES: Record<string, new (params: DecryptionClassParams) => DecryptionAlgorithm> = {};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:     olmDevice: OlmDevice;",
          "51:     baseApis: MatrixClient;",
          "52:     roomId: string;",
          "53: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     config: object;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "92:     public abstract prepareToEncrypt(room: Room): void;",
          "",
          "[Added Lines]",
          "95:     public prepareToEncrypt(room: Room): void {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "121:         senderKey: string,",
          "122:         sessionId: string,",
          "123:         userId: string,",
          "124:         device: DeviceInfo,",
          "125:     ): Promise<void>;",
          "128: }",
          "",
          "[Removed Lines]",
          "118:     public abstract onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string);",
          "120:     public abstract reshareKeyWithDevice(",
          "127:     public forceDiscardSession?: () => void;",
          "",
          "[Added Lines]",
          "121:     public onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {}",
          "123:     public reshareKeyWithDevice?(",
          "130:     public forceDiscardSession?(): void;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "142: export abstract class DecryptionAlgorithm {",
          "150:         this.userId = params.userId;",
          "151:         this.crypto = params.crypto;",
          "152:         this.olmDevice = params.olmDevice;",
          "",
          "[Removed Lines]",
          "143:     private readonly userId: string;",
          "144:     private readonly crypto: Crypto;",
          "145:     private readonly olmDevice: OlmDevice;",
          "146:     private readonly baseApis: MatrixClient;",
          "147:     private readonly roomId: string;",
          "149:     constructor(params: Omit<IParams, \"deviceId\">) {",
          "",
          "[Added Lines]",
          "146:     protected readonly userId: string;",
          "147:     protected readonly crypto: Crypto;",
          "148:     protected readonly olmDevice: OlmDevice;",
          "149:     protected readonly baseApis: MatrixClient;",
          "150:     protected readonly roomId: string;",
          "152:     constructor(params: DecryptionClassParams) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "209:         throw new Error(\"shareKeysWithDevice not supported for this DecryptionAlgorithm\");",
          "210:     }",
          "",
          "[Removed Lines]",
          "208:     public shareKeysWithDevice(keyRequest: IncomingRoomKeyRequest) {",
          "",
          "[Added Lines]",
          "211:     public shareKeysWithDevice(keyRequest: IncomingRoomKeyRequest): void {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "220:     }",
          "224: }",
          "",
          "[Removed Lines]",
          "218:     public async retryDecryptionFromSender(senderKey: string): Promise<void> {",
          "222:     public onRoomKeyWithheldEvent?: (event: MatrixEvent) => Promise<void>;",
          "223:     public sendSharedHistoryInboundSessions?: (devicesByUser: Record<string, DeviceInfo[]>) => Promise<void>;",
          "",
          "[Added Lines]",
          "221:     public async retryDecryptionFromSender(senderKey: string): Promise<boolean> {",
          "223:         return false;",
          "226:     public onRoomKeyWithheldEvent?(event: MatrixEvent): Promise<void>;",
          "227:     public sendSharedHistoryInboundSessions?(devicesByUser: Record<string, DeviceInfo[]>): Promise<void>;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "237: export class DecryptionError extends Error {",
          "238:     public readonly detailedString: string;",
          "241:         super(msg);",
          "242:         this.code = code;",
          "243:         this.name = 'DecryptionError';",
          "",
          "[Removed Lines]",
          "240:     constructor(public readonly code: string, msg: string, details: Record<string, string>) {",
          "",
          "[Added Lines]",
          "244:     constructor(public readonly code: string, msg: string, details?: Record<string, string>) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "245:     }",
          "246: }",
          "249:     let result = err.name + '[msg: ' + err.message;",
          "251:     if (details) {",
          "",
          "[Removed Lines]",
          "248: function detailedStringForDecryptionError(err: DecryptionError, details: Record<string, string>): string {",
          "",
          "[Added Lines]",
          "252: function detailedStringForDecryptionError(err: DecryptionError, details?: Record<string, string>): string {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "290: export function registerAlgorithm(",
          "291:     algorithm: string,",
          "294: ): void {",
          "295:     ENCRYPTION_CLASSES[algorithm] = encryptor;",
          "296:     DECRYPTION_CLASSES[algorithm] = decryptor;",
          "",
          "[Removed Lines]",
          "292:     encryptor: EncryptionAlgorithm,",
          "293:     decryptor: DecryptionAlgorithm,",
          "",
          "[Added Lines]",
          "296:     encryptor: new (params: IParams) => EncryptionAlgorithm,",
          "297:     decryptor: new (params: Omit<IParams, \"deviceId\">) => DecryptionAlgorithm,",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/index.js||src/crypto/algorithms/index.ts": [
          "File: src/crypto/algorithms/index.js -> src/crypto/algorithms/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "6: you may not use this file except in compliance with the License.",
          "",
          "[Removed Lines]",
          "2: Copyright 2016 OpenMarket Ltd",
          "3: Copyright 2019 The Matrix.org Foundation C.I.C.",
          "",
          "[Added Lines]",
          "2: Copyright 2016 - 2021 The Matrix.org Foundation C.I.C.",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.js||src/crypto/algorithms/megolm.js": [
          "File: src/crypto/algorithms/megolm.js -> src/crypto/algorithms/megolm.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2015 - 2021 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "23: import { logger } from '../../logger';",
          "24: import * as olmlib from \"../olmlib\";",
          "25: import {",
          "26:     DecryptionAlgorithm,",
          "27:     DecryptionError,",
          "28:     EncryptionAlgorithm,",
          "29:     registerAlgorithm,",
          "30:     UnknownDeviceError,",
          "31: } from \"./base\";",
          "32: import { WITHHELD_MESSAGES } from '../OlmDevice';",
          "33: import { Room } from '../../models/room';",
          "34: import { DeviceInfo } from \"../deviceinfo\";",
          "35: import { IOlmSessionResult } from \"../olmlib\";",
          "36: import { DeviceInfoMap } from \"../DeviceList\";",
          "37: import { MatrixEvent } from \"../..\";",
          "38: import { IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"../index\";",
          "41: export function isRoomSharedHistory(room: Room): boolean {",
          "42:     const visibilityEvent = room?.currentState?.getStateEvents(\"m.room.history_visibility\", \"\");",
          "48:     const visibility = visibilityEvent?.getContent()?.history_visibility;",
          "49:     return [\"world_readable\", \"shared\"].includes(visibility);",
          "50: }",
          "52: interface IBlockedDevice {",
          "53:     code: string;",
          "54:     reason: string;",
          "55:     deviceInfo: DeviceInfo;",
          "56: }",
          "58: interface IBlockedMap {",
          "59:     [userId: string]: {",
          "60:         [deviceId: string]: IBlockedDevice;",
          "61:     };",
          "62: }",
          "64: interface IOlmDevice<T = DeviceInfo> {",
          "65:     userId: string;",
          "66:     deviceInfo: T;",
          "67: }",
          "70: interface IOutboundGroupSessionKey {",
          "71:     chain_index: number;",
          "72:     key: string;",
          "73: }",
          "75: interface IMessage {",
          "76:     type: string;",
          "77:     content: {",
          "78:         algorithm: string;",
          "79:         room_id: string;",
          "80:         sender_key?: string;",
          "81:         sender_claimed_ed25519_key?: string;",
          "82:         session_id: string;",
          "83:         session_key: string;",
          "84:         chain_index: number;",
          "85:         forwarding_curve25519_key_chain?: string[];",
          "86:         \"org.matrix.msc3061.shared_history\": boolean;",
          "87:     };",
          "88: }",
          "90: interface IKeyForwardingMessage extends IMessage {",
          "91:     type: \"m.forwarded_room_key\";",
          "92: }",
          "94: interface IPayload extends Partial<IMessage> {",
          "95:     code?: string;",
          "96:     reason?: string;",
          "97:     room_id?: string;",
          "98:     session_id?: string;",
          "99:     algorithm?: string;",
          "100:     sender_key?: string;",
          "101: }",
          "120: class OutboundSessionInfo {",
          "121:     public useCount = 0;",
          "122:     public creationTime: number;",
          "123:     public sharedWithDevices: Record<string, Record<string, number>> = {};",
          "124:     public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};",
          "126:     constructor(public readonly sessionId: string, public readonly sharedHistory = false) {",
          "127:         this.creationTime = new Date().getTime();",
          "128:     }",
          "137:     public needsRotation(rotationPeriodMsgs: number, rotationPeriodMs: number): boolean {",
          "138:         const sessionLifetime = new Date().getTime() - this.creationTime;",
          "140:         if (this.useCount >= rotationPeriodMsgs ||",
          "141:             sessionLifetime >= rotationPeriodMs",
          "142:         ) {",
          "143:             logger.log(",
          "144:                 \"Rotating megolm session after \" + this.useCount +",
          "145:                 \" messages, \" + sessionLifetime + \"ms\",",
          "146:             );",
          "147:             return true;",
          "148:         }",
          "150:         return false;",
          "151:     }",
          "153:     public markSharedWithDevice(userId: string, deviceId: string, chainIndex: number): void {",
          "154:         if (!this.sharedWithDevices[userId]) {",
          "155:             this.sharedWithDevices[userId] = {};",
          "156:         }",
          "157:         this.sharedWithDevices[userId][deviceId] = chainIndex;",
          "158:     }",
          "160:     public markNotifiedBlockedDevice(userId: string, deviceId: string): void {",
          "161:         if (!this.blockedDevicesNotified[userId]) {",
          "162:             this.blockedDevicesNotified[userId] = {};",
          "163:         }",
          "164:         this.blockedDevicesNotified[userId][deviceId] = true;",
          "165:     }",
          "177:     public sharedWithTooManyDevices(devicesInRoom: Record<string, Record<string, object>>): boolean {",
          "178:         for (const userId in this.sharedWithDevices) {",
          "179:             if (!this.sharedWithDevices.hasOwnProperty(userId)) {",
          "180:                 continue;",
          "181:             }",
          "183:             if (!devicesInRoom.hasOwnProperty(userId)) {",
          "184:                 logger.log(\"Starting new megolm session because we shared with \" + userId);",
          "185:                 return true;",
          "186:             }",
          "188:             for (const deviceId in this.sharedWithDevices[userId]) {",
          "189:                 if (!this.sharedWithDevices[userId].hasOwnProperty(deviceId)) {",
          "190:                     continue;",
          "191:                 }",
          "193:                 if (!devicesInRoom[userId].hasOwnProperty(deviceId)) {",
          "194:                     logger.log(",
          "195:                         \"Starting new megolm session because we shared with \" +",
          "196:                         userId + \":\" + deviceId,",
          "197:                     );",
          "198:                     return true;",
          "199:                 }",
          "200:             }",
          "201:         }",
          "202:     }",
          "203: }",
          "214: class MegolmEncryption extends EncryptionAlgorithm {",
          "220:     private setupPromise = Promise.resolve<OutboundSessionInfo>(undefined);",
          "225:     private outboundSessions: Record<string, OutboundSessionInfo> = {};",
          "227:     private readonly sessionRotationPeriodMsgs: number;",
          "228:     private readonly sessionRotationPeriodMs: number;",
          "229:     private encryptionPreparation: Promise<void>;",
          "230:     private encryptionPreparationMetadata: {",
          "231:         startTime: number;",
          "232:     };",
          "234:     constructor(params) {",
          "235:         super(params);",
          "237:         this.sessionRotationPeriodMsgs = params.config?.rotation_period_msgs ?? 100;",
          "238:         this.sessionRotationPeriodMs = params.config?.rotation_period_ms ?? 7 * 24 * 3600 * 1000;",
          "239:     }",
          "253:     private async ensureOutboundSession(",
          "254:         room: Room,",
          "255:         devicesInRoom: DeviceInfoMap,",
          "256:         blocked: IBlockedMap,",
          "257:         singleOlmCreationPhase = false,",
          "258:     ): Promise<OutboundSessionInfo> {",
          "259:         let session;",
          "266:         const prepareSession = async (oldSession: OutboundSessionInfo) => {",
          "267:             session = oldSession;",
          "269:             const sharedHistory = isRoomSharedHistory(room);",
          "272:             if (session && sharedHistory !== session.sharedHistory) {",
          "273:                 session = null;",
          "274:             }",
          "277:             if (session && session.needsRotation(this.sessionRotationPeriodMsgs,",
          "278:                 this.sessionRotationPeriodMs)",
          "279:             ) {",
          "280:                 logger.log(\"Starting new megolm session because we need to rotate.\");",
          "281:                 session = null;",
          "282:             }",
          "285:             if (session && session.sharedWithTooManyDevices(devicesInRoom)) {",
          "286:                 session = null;",
          "287:             }",
          "289:             if (!session) {",
          "290:                 logger.log(`Starting new megolm session for room ${this.roomId}`);",
          "291:                 session = await this.prepareNewSession(sharedHistory);",
          "292:                 logger.log(`Started new megolm session ${session.sessionId} ` +",
          "293:                     `for room ${this.roomId}`);",
          "294:                 this.outboundSessions[session.sessionId] = session;",
          "295:             }",
          "298:             const shareMap = {};",
          "300:             for (const [userId, userDevices] of Object.entries(devicesInRoom)) {",
          "301:                 for (const [deviceId, deviceInfo] of Object.entries(userDevices)) {",
          "302:                     const key = deviceInfo.getIdentityKey();",
          "303:                     if (key == this.olmDevice.deviceCurve25519Key) {",
          "305:                         continue;",
          "306:                     }",
          "308:                     if (",
          "309:                         !session.sharedWithDevices[userId] ||",
          "310:                         session.sharedWithDevices[userId][deviceId] === undefined",
          "311:                     ) {",
          "312:                         shareMap[userId] = shareMap[userId] || [];",
          "313:                         shareMap[userId].push(deviceInfo);",
          "314:                     }",
          "315:                 }",
          "316:             }",
          "318:             const key = this.olmDevice.getOutboundGroupSessionKey(session.sessionId);",
          "319:             const payload: IPayload = {",
          "320:                 type: \"m.room_key\",",
          "321:                 content: {",
          "322:                     \"algorithm\": olmlib.MEGOLM_ALGORITHM,",
          "323:                     \"room_id\": this.roomId,",
          "324:                     \"session_id\": session.sessionId,",
          "325:                     \"session_key\": key.key,",
          "326:                     \"chain_index\": key.chain_index,",
          "327:                     \"org.matrix.msc3061.shared_history\": sharedHistory,",
          "328:                 },",
          "329:             };",
          "330:             const [devicesWithoutSession, olmSessions] = await olmlib.getExistingOlmSessions(",
          "331:                 this.olmDevice, this.baseApis, shareMap,",
          "332:             );",
          "334:             await Promise.all([",
          "335:                 (async () => {",
          "337:                     logger.debug(`Sharing keys with existing Olm sessions in ${this.roomId}`);",
          "338:                     await this.shareKeyWithOlmSessions(session, key, payload, olmSessions);",
          "339:                     logger.debug(`Shared keys with existing Olm sessions in ${this.roomId}`);",
          "340:                 })(),",
          "341:                 (async () => {",
          "342:                     logger.debug(`Sharing keys (start phase 1) with new Olm sessions in ${this.roomId}`);",
          "343:                     const errorDevices = [];",
          "350:                     const start = Date.now();",
          "351:                     const failedServers = [];",
          "352:                     await this.shareKeyWithDevices(",
          "353:                         session, key, payload, devicesWithoutSession, errorDevices,",
          "354:                         singleOlmCreationPhase ? 10000 : 2000, failedServers,",
          "355:                     );",
          "356:                     logger.debug(`Shared keys (end phase 1) with new Olm sessions in ${this.roomId}`);",
          "358:                     if (!singleOlmCreationPhase && (Date.now() - start < 10000)) {",
          "361:                         (async () => {",
          "367:                             const retryDevices = {};",
          "368:                             const failedServerMap = new Set;",
          "369:                             for (const server of failedServers) {",
          "370:                                 failedServerMap.add(server);",
          "371:                             }",
          "372:                             const failedDevices = [];",
          "373:                             for (const { userId, deviceInfo } of errorDevices) {",
          "374:                                 const userHS = userId.slice(userId.indexOf(\":\") + 1);",
          "375:                                 if (failedServerMap.has(userHS)) {",
          "376:                                     retryDevices[userId] = retryDevices[userId] || [];",
          "377:                                     retryDevices[userId].push(deviceInfo);",
          "378:                                 } else {",
          "381:                                     failedDevices.push({ userId, deviceInfo });",
          "382:                                 }",
          "383:                             }",
          "385:                             logger.debug(`Sharing keys (start phase 2) with new Olm sessions in ${this.roomId}`);",
          "386:                             await this.shareKeyWithDevices(",
          "387:                                 session, key, payload, retryDevices, failedDevices, 30000,",
          "388:                             );",
          "389:                             logger.debug(`Shared keys (end phase 2) with new Olm sessions in ${this.roomId}`);",
          "391:                             await this.notifyFailedOlmDevices(session, key, failedDevices);",
          "392:                         })();",
          "393:                     } else {",
          "394:                         await this.notifyFailedOlmDevices(session, key, errorDevices);",
          "395:                     }",
          "396:                     logger.debug(`Shared keys (all phases done) with new Olm sessions in ${this.roomId}`);",
          "397:                 })(),",
          "398:                 (async () => {",
          "399:                     logger.debug(`Notifying blocked devices in ${this.roomId}`);",
          "401:                     const blockedMap: Record<string, Record<string, { device: IBlockedDevice }>> = {};",
          "402:                     let blockedCount = 0;",
          "403:                     for (const [userId, userBlockedDevices] of Object.entries(blocked)) {",
          "404:                         for (const [deviceId, device] of Object.entries(userBlockedDevices)) {",
          "405:                             if (",
          "406:                                 !session.blockedDevicesNotified[userId] ||",
          "407:                                 session.blockedDevicesNotified[userId][deviceId] === undefined",
          "408:                             ) {",
          "409:                                 blockedMap[userId] = blockedMap[userId] || {};",
          "410:                                 blockedMap[userId][deviceId] = { device };",
          "411:                                 blockedCount++;",
          "412:                             }",
          "413:                         }",
          "414:                     }",
          "416:                     await this.notifyBlockedDevices(session, blockedMap);",
          "417:                     logger.debug(`Notified ${blockedCount} blocked devices in ${this.roomId}`);",
          "418:                 })(),",
          "419:             ]);",
          "420:         };",
          "423:         function returnSession() {",
          "424:             return session;",
          "425:         }",
          "428:         const prom = this.setupPromise.then(prepareSession);",
          "431:         prom.catch(e => {",
          "432:             logger.error(`Failed to ensure outbound session in ${this.roomId}`, e);",
          "433:         });",
          "436:         this.setupPromise = prom.then(returnSession, returnSession);",
          "439:         return prom.then(returnSession);",
          "440:     }",
          "449:     private async prepareNewSession(sharedHistory: boolean): Promise<OutboundSessionInfo> {",
          "450:         const sessionId = this.olmDevice.createOutboundGroupSession();",
          "451:         const key = this.olmDevice.getOutboundGroupSessionKey(sessionId);",
          "453:         await this.olmDevice.addInboundGroupSession(",
          "454:             this.roomId, this.olmDevice.deviceCurve25519Key, [], sessionId,",
          "455:             key.key, { ed25519: this.olmDevice.deviceEd25519Key }, false,",
          "456:             { sharedHistory },",
          "457:         );",
          "460:         this.crypto.backupManager.backupGroupSession(this.olmDevice.deviceCurve25519Key, sessionId);",
          "462:         return new OutboundSessionInfo(sessionId, sharedHistory);",
          "463:     }",
          "480:     private getDevicesWithoutSessions(",
          "481:         devicemap: Record<string, Record<string, IOlmSessionResult>>,",
          "482:         devicesByUser: Record<string, DeviceInfo[]>,",
          "483:         noOlmDevices: IOlmDevice[] = [],",
          "484:     ): IOlmDevice[] {",
          "485:         for (const [userId, devicesToShareWith] of Object.entries(devicesByUser)) {",
          "486:             const sessionResults = devicemap[userId];",
          "488:             for (const deviceInfo of devicesToShareWith) {",
          "489:                 const deviceId = deviceInfo.deviceId;",
          "491:                 const sessionResult = sessionResults[deviceId];",
          "492:                 if (!sessionResult.sessionId) {",
          "496:                     noOlmDevices.push({ userId, deviceInfo });",
          "497:                     delete sessionResults[deviceId];",
          "501:                     continue;",
          "502:                 }",
          "503:             }",
          "504:         }",
          "506:         return noOlmDevices;",
          "507:     }",
          "519:     private splitDevices<T extends DeviceInfo | IBlockedDevice>(",
          "520:         devicesByUser: Record<string, Record<string, { device: T }>>,",
          "521:     ): IOlmDevice<T>[][] {",
          "522:         const maxDevicesPerRequest = 20;",
          "525:         let currentSlice: IOlmDevice<T>[] = [];",
          "526:         const mapSlices = [currentSlice];",
          "528:         for (const [userId, userDevices] of Object.entries(devicesByUser)) {",
          "529:             for (const deviceInfo of Object.values(userDevices)) {",
          "530:                 currentSlice.push({",
          "531:                     userId: userId,",
          "532:                     deviceInfo: deviceInfo.device,",
          "533:                 });",
          "534:             }",
          "541:             if (currentSlice.length > maxDevicesPerRequest) {",
          "543:                 currentSlice = [];",
          "544:                 mapSlices.push(currentSlice);",
          "545:             }",
          "546:         }",
          "547:         if (currentSlice.length === 0) {",
          "548:             mapSlices.pop();",
          "549:         }",
          "550:         return mapSlices;",
          "551:     }",
          "568:     private encryptAndSendKeysToDevices(",
          "569:         session: OutboundSessionInfo,",
          "570:         chainIndex: number,",
          "571:         userDeviceMap: IOlmDevice[],",
          "572:         payload: IPayload,",
          "573:     ): Promise<void> {",
          "574:         const contentMap = {};",
          "576:         const promises = [];",
          "577:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "578:             const encryptedContent = {",
          "579:                 algorithm: olmlib.OLM_ALGORITHM,",
          "580:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "581:                 ciphertext: {},",
          "582:             };",
          "583:             const val = userDeviceMap[i];",
          "584:             const userId = val.userId;",
          "585:             const deviceInfo = val.deviceInfo;",
          "586:             const deviceId = deviceInfo.deviceId;",
          "588:             if (!contentMap[userId]) {",
          "589:                 contentMap[userId] = {};",
          "590:             }",
          "591:             contentMap[userId][deviceId] = encryptedContent;",
          "593:             promises.push(",
          "594:                 olmlib.encryptMessageForDevice(",
          "595:                     encryptedContent.ciphertext,",
          "596:                     this.userId,",
          "597:                     this.deviceId,",
          "598:                     this.olmDevice,",
          "599:                     userId,",
          "600:                     deviceInfo,",
          "601:                     payload,",
          "602:                 ),",
          "603:             );",
          "604:         }",
          "606:         return Promise.all(promises).then(() => {",
          "611:             for (const userId of Object.keys(contentMap)) {",
          "612:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "613:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "614:                         logger.log(",
          "615:                             \"No ciphertext for device \" +",
          "616:                             userId + \":\" + deviceId + \": pruning\",",
          "617:                         );",
          "618:                         delete contentMap[userId][deviceId];",
          "619:                     }",
          "620:                 }",
          "622:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "623:                     logger.log(\"Pruned all devices for user \" + userId);",
          "624:                     delete contentMap[userId];",
          "625:                 }",
          "626:             }",
          "629:             if (Object.keys(contentMap).length === 0) {",
          "630:                 logger.log(\"No users left to send to: aborting\");",
          "631:                 return;",
          "632:             }",
          "634:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(() => {",
          "636:                 for (const userId of Object.keys(contentMap)) {",
          "637:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "638:                         session.markSharedWithDevice(",
          "639:                             userId, deviceId, chainIndex,",
          "640:                         );",
          "641:                     }",
          "642:                 }",
          "643:             });",
          "644:         });",
          "645:     }",
          "659:     private async sendBlockedNotificationsToDevices(",
          "660:         session: OutboundSessionInfo,",
          "661:         userDeviceMap: IOlmDevice<IBlockedDevice>[],",
          "662:         payload: IPayload,",
          "663:     ): Promise<void> {",
          "664:         const contentMap = {};",
          "666:         for (const val of userDeviceMap) {",
          "667:             const userId = val.userId;",
          "668:             const blockedInfo = val.deviceInfo;",
          "669:             const deviceInfo = blockedInfo.deviceInfo;",
          "670:             const deviceId = deviceInfo.deviceId;",
          "672:             const message = Object.assign({}, payload);",
          "673:             message.code = blockedInfo.code;",
          "674:             message.reason = blockedInfo.reason;",
          "675:             if (message.code === \"m.no_olm\") {",
          "676:                 delete message.room_id;",
          "677:                 delete message.session_id;",
          "678:             }",
          "680:             if (!contentMap[userId]) {",
          "681:                 contentMap[userId] = {};",
          "682:             }",
          "683:             contentMap[userId][deviceId] = message;",
          "684:         }",
          "686:         await this.baseApis.sendToDevice(\"org.matrix.room_key.withheld\", contentMap);",
          "689:         for (const userId of Object.keys(contentMap)) {",
          "690:             for (const deviceId of Object.keys(contentMap[userId])) {",
          "691:                 session.markNotifiedBlockedDevice(userId, deviceId);",
          "692:             }",
          "693:         }",
          "694:     }",
          "705:     public async reshareKeyWithDevice(",
          "706:         senderKey: string,",
          "707:         sessionId: string,",
          "708:         userId: string,",
          "709:         device: DeviceInfo,",
          "710:     ): Promise<void> {",
          "711:         const obSessionInfo = this.outboundSessions[sessionId];",
          "712:         if (!obSessionInfo) {",
          "713:             logger.debug(`megolm session ${sessionId} not found: not re-sharing keys`);",
          "714:             return;",
          "715:         }",
          "718:         if (obSessionInfo.sharedWithDevices[userId] === undefined) {",
          "719:             logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);",
          "720:             return;",
          "721:         }",
          "722:         const sentChainIndex = obSessionInfo.sharedWithDevices[userId][device.deviceId];",
          "723:         if (sentChainIndex === undefined) {",
          "724:             logger.debug(",
          "725:                 \"megolm session ID \" + sessionId + \" never shared with device \" +",
          "726:                 userId + \":\" + device.deviceId,",
          "727:             );",
          "728:             return;",
          "729:         }",
          "733:         const key = await this.olmDevice.getInboundGroupSessionKey(",
          "734:             this.roomId, senderKey, sessionId, sentChainIndex,",
          "735:         );",
          "737:         if (!key) {",
          "738:             logger.warn(",
          "739:                 `No inbound session key found for megolm ${sessionId}: not re-sharing keys`,",
          "740:             );",
          "741:             return;",
          "742:         }",
          "744:         await olmlib.ensureOlmSessionsForDevices(",
          "745:             this.olmDevice, this.baseApis, {",
          "746:                 [userId]: [device],",
          "747:             },",
          "748:         );",
          "750:         const payload = {",
          "751:             type: \"m.forwarded_room_key\",",
          "752:             content: {",
          "753:                 \"algorithm\": olmlib.MEGOLM_ALGORITHM,",
          "754:                 \"room_id\": this.roomId,",
          "755:                 \"session_id\": sessionId,",
          "756:                 \"session_key\": key.key,",
          "757:                 \"chain_index\": key.chain_index,",
          "758:                 \"sender_key\": senderKey,",
          "759:                 \"sender_claimed_ed25519_key\": key.sender_claimed_ed25519_key,",
          "760:                 \"forwarding_curve25519_key_chain\": key.forwarding_curve25519_key_chain,",
          "761:                 \"org.matrix.msc3061.shared_history\": key.shared_history || false,",
          "762:             },",
          "763:         };",
          "765:         const encryptedContent = {",
          "766:             algorithm: olmlib.OLM_ALGORITHM,",
          "767:             sender_key: this.olmDevice.deviceCurve25519Key,",
          "768:             ciphertext: {},",
          "769:         };",
          "770:         await olmlib.encryptMessageForDevice(",
          "771:             encryptedContent.ciphertext,",
          "772:             this.userId,",
          "773:             this.deviceId,",
          "774:             this.olmDevice,",
          "775:             userId,",
          "776:             device,",
          "777:             payload,",
          "778:         );",
          "780:         await this.baseApis.sendToDevice(\"m.room.encrypted\", {",
          "781:             [userId]: {",
          "782:                 [device.deviceId]: encryptedContent,",
          "783:             },",
          "784:         });",
          "785:         logger.debug(`Re-shared key for megolm session ${sessionId} with ${userId}:${device.deviceId}`);",
          "786:     }",
          "811:     private async shareKeyWithDevices(",
          "812:         session: OutboundSessionInfo,",
          "813:         key: IOutboundGroupSessionKey,",
          "814:         payload: IPayload,",
          "815:         devicesByUser: Record<string, DeviceInfo[]>,",
          "816:         errorDevices: IOlmDevice[],",
          "817:         otkTimeout: number,",
          "818:         failedServers?: string[],",
          "819:     ) {",
          "820:         logger.debug(`Ensuring Olm sessions for devices in ${this.roomId}`);",
          "821:         const devicemap = await olmlib.ensureOlmSessionsForDevices(",
          "822:             this.olmDevice, this.baseApis, devicesByUser, false, otkTimeout, failedServers,",
          "823:             logger.withPrefix(`[${this.roomId}]`),",
          "824:         );",
          "825:         logger.debug(`Ensured Olm sessions for devices in ${this.roomId}`);",
          "827:         this.getDevicesWithoutSessions(devicemap, devicesByUser, errorDevices);",
          "829:         logger.debug(`Sharing keys with Olm sessions in ${this.roomId}`);",
          "830:         await this.shareKeyWithOlmSessions(session, key, payload, devicemap);",
          "831:         logger.debug(`Shared keys with Olm sessions in ${this.roomId}`);",
          "832:     }",
          "834:     private async shareKeyWithOlmSessions(",
          "835:         session: OutboundSessionInfo,",
          "836:         key: IOutboundGroupSessionKey,",
          "837:         payload: IPayload,",
          "838:         devicemap: Record<string, Record<string, IOlmSessionResult>>,",
          "839:     ): Promise<void> {",
          "840:         const userDeviceMaps = this.splitDevices(devicemap);",
          "842:         for (let i = 0; i < userDeviceMaps.length; i++) {",
          "843:             const taskDetail =",
          "844:                 `megolm keys for ${session.sessionId} ` +",
          "845:                 `in ${this.roomId} (slice ${i + 1}/${userDeviceMaps.length})`;",
          "846:             try {",
          "847:                 logger.debug(`Sharing ${taskDetail}`);",
          "848:                 await this.encryptAndSendKeysToDevices(",
          "849:                     session, key.chain_index, userDeviceMaps[i], payload,",
          "850:                 );",
          "851:                 logger.debug(`Shared ${taskDetail}`);",
          "852:             } catch (e) {",
          "853:                 logger.error(`Failed to share ${taskDetail}`);",
          "854:                 throw e;",
          "855:             }",
          "856:         }",
          "857:     }",
          "869:     private async notifyFailedOlmDevices(",
          "870:         session: OutboundSessionInfo,",
          "871:         key: IOutboundGroupSessionKey,",
          "872:         failedDevices: IOlmDevice[],",
          "873:     ): Promise<void> {",
          "874:         logger.debug(",
          "875:             `Notifying ${failedDevices.length} devices we failed to ` +",
          "876:             `create Olm sessions in ${this.roomId}`,",
          "877:         );",
          "881:         for (const { userId, deviceInfo } of failedDevices) {",
          "882:             const deviceId = deviceInfo.deviceId;",
          "884:             session.markSharedWithDevice(",
          "885:                 userId, deviceId, key.chain_index,",
          "886:             );",
          "887:         }",
          "889:         const filteredFailedDevices =",
          "890:             await this.olmDevice.filterOutNotifiedErrorDevices(",
          "891:                 failedDevices,",
          "892:             );",
          "893:         logger.debug(",
          "894:             `Filtered down to ${filteredFailedDevices.length} error devices ` +",
          "895:             `in ${this.roomId}`,",
          "896:         );",
          "897:         const blockedMap: Record<string, Record<string, { device: IBlockedDevice }>> = {};",
          "898:         for (const { userId, deviceInfo } of filteredFailedDevices) {",
          "899:             blockedMap[userId] = blockedMap[userId] || {};",
          "903:             blockedMap[userId][deviceInfo.deviceId] = {",
          "904:                 device: {",
          "905:                     code: \"m.no_olm\",",
          "906:                     reason: WITHHELD_MESSAGES[\"m.no_olm\"],",
          "907:                     deviceInfo,",
          "908:                 },",
          "909:             };",
          "910:         }",
          "913:         await this.notifyBlockedDevices(session, blockedMap);",
          "914:         logger.debug(",
          "915:             `Notified ${filteredFailedDevices.length} devices we failed to ` +",
          "916:             `create Olm sessions in ${this.roomId}`,",
          "917:         );",
          "918:     }",
          "928:     private async notifyBlockedDevices(",
          "929:         session: OutboundSessionInfo,",
          "930:         devicesByUser: Record<string, Record<string, { device: IBlockedDevice }>>,",
          "931:     ): Promise<void> {",
          "932:         const payload: IPayload = {",
          "933:             room_id: this.roomId,",
          "934:             session_id: session.sessionId,",
          "935:             algorithm: olmlib.MEGOLM_ALGORITHM,",
          "936:             sender_key: this.olmDevice.deviceCurve25519Key,",
          "937:         };",
          "939:         const userDeviceMaps = this.splitDevices(devicesByUser);",
          "941:         for (let i = 0; i < userDeviceMaps.length; i++) {",
          "942:             try {",
          "943:                 await this.sendBlockedNotificationsToDevices(session, userDeviceMaps[i], payload);",
          "944:                 logger.log(`Completed blacklist notification for ${session.sessionId} `",
          "945:                     + `in ${this.roomId} (slice ${i + 1}/${userDeviceMaps.length})`);",
          "946:             } catch (e) {",
          "947:                 logger.log(`blacklist notification for ${session.sessionId} in `",
          "948:                     + `${this.roomId} (slice ${i + 1}/${userDeviceMaps.length}) failed`);",
          "950:                 throw e;",
          "951:             }",
          "952:         }",
          "953:     }",
          "961:     public prepareToEncrypt(room: Room): void {",
          "962:         if (this.encryptionPreparation) {",
          "966:             const elapsedTime = Date.now() - this.encryptionPreparationMetadata.startTime;",
          "967:             logger.debug(",
          "968:                 `Already started preparing to encrypt for ${this.roomId} ` +",
          "969:                 `${elapsedTime} ms ago, skipping`,",
          "970:             );",
          "971:             return;",
          "972:         }",
          "974:         logger.debug(`Preparing to encrypt events for ${this.roomId}`);",
          "976:         this.encryptionPreparationMetadata = {",
          "977:             startTime: Date.now(),",
          "978:         };",
          "979:         this.encryptionPreparation = (async () => {",
          "980:             try {",
          "981:                 logger.debug(`Getting devices in ${this.roomId}`);",
          "982:                 const [devicesInRoom, blocked] = await this.getDevicesInRoom(room);",
          "984:                 if (this.crypto.getGlobalErrorOnUnknownDevices()) {",
          "988:                     this.removeUnknownDevices(devicesInRoom);",
          "989:                 }",
          "991:                 logger.debug(`Ensuring outbound session in ${this.roomId}`);",
          "992:                 await this.ensureOutboundSession(room, devicesInRoom, blocked, true);",
          "994:                 logger.debug(`Ready to encrypt events for ${this.roomId}`);",
          "995:             } catch (e) {",
          "996:                 logger.error(`Failed to prepare to encrypt events for ${this.roomId}`, e);",
          "997:             } finally {",
          "998:                 delete this.encryptionPreparationMetadata;",
          "999:                 delete this.encryptionPreparation;",
          "1000:             }",
          "1001:         })();",
          "1002:     }",
          "1013:     public async encryptMessage(room: Room, eventType: string, content: object): Promise<object> {",
          "1014:         logger.log(`Starting to encrypt event for ${this.roomId}`);",
          "1016:         if (this.encryptionPreparation) {",
          "1020:             try {",
          "1021:                 await this.encryptionPreparation;",
          "1022:             } catch (e) {",
          "1025:             }",
          "1026:         }",
          "1028:         const [devicesInRoom, blocked] = await this.getDevicesInRoom(room);",
          "1032:         if (this.crypto.getGlobalErrorOnUnknownDevices()) {",
          "1033:             this.checkForUnknownDevices(devicesInRoom);",
          "1034:         }",
          "1036:         const session = await this.ensureOutboundSession(room, devicesInRoom, blocked);",
          "1037:         const payloadJson = {",
          "1038:             room_id: this.roomId,",
          "1039:             type: eventType,",
          "1040:             content: content,",
          "1041:         };",
          "1043:         const ciphertext = this.olmDevice.encryptGroupMessage(",
          "1044:             session.sessionId, JSON.stringify(payloadJson),",
          "1045:         );",
          "1046:         const encryptedContent = {",
          "1047:             algorithm: olmlib.MEGOLM_ALGORITHM,",
          "1048:             sender_key: this.olmDevice.deviceCurve25519Key,",
          "1049:             ciphertext: ciphertext,",
          "1050:             session_id: session.sessionId,",
          "1055:             device_id: this.deviceId,",
          "1056:         };",
          "1058:         session.useCount++;",
          "1059:         return encryptedContent;",
          "1060:     }",
          "1068:     public forceDiscardSession(): void {",
          "1069:         this.setupPromise = this.setupPromise.then(() => null);",
          "1070:     }",
          "1080:     private checkForUnknownDevices(devicesInRoom: DeviceInfoMap): void {",
          "1081:         const unknownDevices = {};",
          "1083:         Object.keys(devicesInRoom).forEach((userId)=>{",
          "1084:             Object.keys(devicesInRoom[userId]).forEach((deviceId)=>{",
          "1085:                 const device = devicesInRoom[userId][deviceId];",
          "1086:                 if (device.isUnverified() && !device.isKnown()) {",
          "1087:                     if (!unknownDevices[userId]) {",
          "1088:                         unknownDevices[userId] = {};",
          "1089:                     }",
          "1090:                     unknownDevices[userId][deviceId] = device;",
          "1091:                 }",
          "1092:             });",
          "1093:         });",
          "1095:         if (Object.keys(unknownDevices).length) {",
          "1097:             throw new UnknownDeviceError(",
          "1098:                 \"This room contains unknown devices which have not been verified. \" +",
          "1099:                 \"We strongly recommend you verify them before continuing.\", unknownDevices);",
          "1100:         }",
          "1101:     }",
          "1110:     private removeUnknownDevices(devicesInRoom: DeviceInfoMap): void {",
          "1111:         for (const [userId, userDevices] of Object.entries(devicesInRoom)) {",
          "1112:             for (const [deviceId, device] of Object.entries(userDevices)) {",
          "1113:                 if (device.isUnverified() && !device.isKnown()) {",
          "1114:                     delete userDevices[deviceId];",
          "1115:                 }",
          "1116:             }",
          "1118:             if (Object.keys(userDevices).length === 0) {",
          "1119:                 delete devicesInRoom[userId];",
          "1120:             }",
          "1121:         }",
          "1122:     }",
          "1135:     private async getDevicesInRoom(room: Room): Promise<[DeviceInfoMap, IBlockedMap]> {",
          "1136:         const members = await room.getEncryptionTargetMembers();",
          "1137:         const roomMembers = members.map(function(u) {",
          "1138:             return u.userId;",
          "1139:         });",
          "1142:         let isBlacklisting = this.crypto.getGlobalBlacklistUnverifiedDevices();",
          "1143:         if (typeof room.getBlacklistUnverifiedDevices() === 'boolean') {",
          "1144:             isBlacklisting = room.getBlacklistUnverifiedDevices();",
          "1145:         }",
          "1153:         const devices = await this.crypto.downloadKeys(roomMembers, false);",
          "1154:         const blocked: IBlockedMap = {};",
          "1156:         for (const userId in devices) {",
          "1157:             if (!devices.hasOwnProperty(userId)) {",
          "1158:                 continue;",
          "1159:             }",
          "1161:             const userDevices = devices[userId];",
          "1162:             for (const deviceId in userDevices) {",
          "1163:                 if (!userDevices.hasOwnProperty(deviceId)) {",
          "1164:                     continue;",
          "1165:                 }",
          "1167:                 const deviceTrust = this.crypto.checkDeviceTrust(userId, deviceId);",
          "1169:                 if (userDevices[deviceId].isBlocked() ||",
          "1170:                     (!deviceTrust.isVerified() && isBlacklisting)",
          "1171:                 ) {",
          "1172:                     if (!blocked[userId]) {",
          "1173:                         blocked[userId] = {};",
          "1174:                     }",
          "1175:                     const isBlocked = userDevices[deviceId].isBlocked();",
          "1176:                     blocked[userId][deviceId] = {",
          "1177:                         code: isBlocked ? \"m.blacklisted\" : \"m.unverified\",",
          "1178:                         reason: WITHHELD_MESSAGES[isBlocked ? \"m.blacklisted\" : \"m.unverified\"],",
          "1179:                         deviceInfo: userDevices[deviceId],",
          "1180:                     };",
          "1181:                     delete userDevices[deviceId];",
          "1182:                 }",
          "1183:             }",
          "1184:         }",
          "1186:         return [devices, blocked];",
          "1187:     }",
          "1188: }",
          "1199: class MegolmDecryption extends DecryptionAlgorithm {",
          "1202:     private pendingEvents: Record<string, Map<string, Set<MatrixEvent>>> = {};",
          "1205:     private olmlib = olmlib;",
          "1217:     public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {",
          "1218:         const content = event.getWireContent();",
          "1220:         if (!content.sender_key || !content.session_id ||",
          "1221:             !content.ciphertext",
          "1222:         ) {",
          "1223:             throw new DecryptionError(",
          "1224:                 \"MEGOLM_MISSING_FIELDS\",",
          "1225:                 \"Missing fields in input\",",
          "1226:             );",
          "1227:         }",
          "1234:         this.addEventToPendingList(event);",
          "1236:         let res;",
          "1237:         try {",
          "1238:             res = await this.olmDevice.decryptGroupMessage(",
          "1239:                 event.getRoomId(), content.sender_key, content.session_id, content.ciphertext,",
          "1240:                 event.getId(), event.getTs(),",
          "1241:             );",
          "1242:         } catch (e) {",
          "1243:             if (e.name === \"DecryptionError\") {",
          "1245:                 throw e;",
          "1246:             }",
          "1248:             let errorCode = \"OLM_DECRYPT_GROUP_MESSAGE_ERROR\";",
          "1250:             if (e && e.message === 'OLM.UNKNOWN_MESSAGE_INDEX') {",
          "1251:                 this.requestKeysForEvent(event);",
          "1253:                 errorCode = 'OLM_UNKNOWN_MESSAGE_INDEX';",
          "1254:             }",
          "1256:             throw new DecryptionError(",
          "1257:                 errorCode,",
          "1258:                 e ? e.toString() : \"Unknown Error: Error is undefined\", {",
          "1259:                     session: content.sender_key + '|' + content.session_id,",
          "1260:                 },",
          "1261:             );",
          "1262:         }",
          "1264:         if (res === null) {",
          "1272:             this.requestKeysForEvent(event);",
          "1276:             const problem = await this.olmDevice.sessionMayHaveProblems(",
          "1277:                 content.sender_key, event.getTs() - 120000,",
          "1278:             );",
          "1279:             if (problem) {",
          "1280:                 let problemDescription = PROBLEM_DESCRIPTIONS[problem.type]",
          "1281:                     || PROBLEM_DESCRIPTIONS.unknown;",
          "1282:                 if (problem.fixed) {",
          "1283:                     problemDescription +=",
          "1284:                         \" Trying to create a new secure channel and re-requesting the keys.\";",
          "1285:                 }",
          "1286:                 throw new DecryptionError(",
          "1287:                     \"MEGOLM_UNKNOWN_INBOUND_SESSION_ID\",",
          "1288:                     problemDescription,",
          "1289:                     {",
          "1290:                         session: content.sender_key + '|' + content.session_id,",
          "1291:                     },",
          "1292:                 );",
          "1293:             }",
          "1295:             throw new DecryptionError(",
          "1296:                 \"MEGOLM_UNKNOWN_INBOUND_SESSION_ID\",",
          "1297:                 \"The sender's device has not sent us the keys for this message.\",",
          "1298:                 {",
          "1299:                     session: content.sender_key + '|' + content.session_id,",
          "1300:                 },",
          "1301:             );",
          "1302:         }",
          "1306:         this.removeEventFromPendingList(event);",
          "1308:         const payload = JSON.parse(res.result);",
          "1313:         if (payload.room_id !== event.getRoomId()) {",
          "1314:             throw new DecryptionError(",
          "1315:                 \"MEGOLM_BAD_ROOM\",",
          "1316:                 \"Message intended for room \" + payload.room_id,",
          "1317:             );",
          "1318:         }",
          "1320:         return {",
          "1321:             clearEvent: payload,",
          "1322:             senderCurve25519Key: res.senderKey,",
          "1323:             claimedEd25519Key: res.keysClaimed.ed25519,",
          "1324:             forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain,",
          "1325:             untrusted: res.untrusted,",
          "1326:         };",
          "1327:     }",
          "1329:     private requestKeysForEvent(event: MatrixEvent): void {",
          "1330:         const wireContent = event.getWireContent();",
          "1332:         const recipients = event.getKeyRequestRecipients(this.userId);",
          "1334:         this.crypto.requestRoomKey({",
          "1335:             room_id: event.getRoomId(),",
          "1336:             algorithm: wireContent.algorithm,",
          "1337:             sender_key: wireContent.sender_key,",
          "1338:             session_id: wireContent.session_id,",
          "1339:         }, recipients);",
          "1340:     }",
          "1349:     private addEventToPendingList(event: MatrixEvent): void {",
          "1350:         const content = event.getWireContent();",
          "1351:         const senderKey = content.sender_key;",
          "1352:         const sessionId = content.session_id;",
          "1353:         if (!this.pendingEvents[senderKey]) {",
          "1354:             this.pendingEvents[senderKey] = new Map();",
          "1355:         }",
          "1356:         const senderPendingEvents = this.pendingEvents[senderKey];",
          "1357:         if (!senderPendingEvents.has(sessionId)) {",
          "1358:             senderPendingEvents.set(sessionId, new Set());",
          "1359:         }",
          "1360:         senderPendingEvents.get(sessionId).add(event);",
          "1361:     }",
          "1370:     private removeEventFromPendingList(event: MatrixEvent): void {",
          "1371:         const content = event.getWireContent();",
          "1372:         const senderKey = content.sender_key;",
          "1373:         const sessionId = content.session_id;",
          "1374:         const senderPendingEvents = this.pendingEvents[senderKey];",
          "1375:         const pendingEvents = senderPendingEvents && senderPendingEvents.get(sessionId);",
          "1376:         if (!pendingEvents) {",
          "1377:             return;",
          "1378:         }",
          "1380:         pendingEvents.delete(event);",
          "1381:         if (pendingEvents.size === 0) {",
          "1382:             senderPendingEvents.delete(senderKey);",
          "1383:         }",
          "1384:         if (senderPendingEvents.size === 0) {",
          "1385:             delete this.pendingEvents[senderKey];",
          "1386:         }",
          "1387:     }",
          "1394:     public onRoomKeyEvent(event: MatrixEvent): void {",
          "1395:         const content = event.getContent();",
          "1396:         const sessionId = content.session_id;",
          "1397:         let senderKey = event.getSenderKey();",
          "1398:         let forwardingKeyChain = [];",
          "1399:         let exportFormat = false;",
          "1400:         let keysClaimed;",
          "1402:         if (!content.room_id ||",
          "1403:             !sessionId ||",
          "1404:             !content.session_key",
          "1405:         ) {",
          "1406:             logger.error(\"key event is missing fields\");",
          "1407:             return;",
          "1408:         }",
          "1410:         if (!senderKey) {",
          "1411:             logger.error(\"key event has no sender key (not encrypted?)\");",
          "1412:             return;",
          "1413:         }",
          "1415:         if (event.getType() == \"m.forwarded_room_key\") {",
          "1416:             exportFormat = true;",
          "1417:             forwardingKeyChain = content.forwarding_curve25519_key_chain;",
          "1418:             if (!Array.isArray(forwardingKeyChain)) {",
          "1419:                 forwardingKeyChain = [];",
          "1420:             }",
          "1423:             forwardingKeyChain = forwardingKeyChain.slice();",
          "1424:             forwardingKeyChain.push(senderKey);",
          "1426:             senderKey = content.sender_key;",
          "1427:             if (!senderKey) {",
          "1428:                 logger.error(\"forwarded_room_key event is missing sender_key field\");",
          "1429:                 return;",
          "1430:             }",
          "1432:             const ed25519Key = content.sender_claimed_ed25519_key;",
          "1433:             if (!ed25519Key) {",
          "1434:                 logger.error(",
          "1435:                     `forwarded_room_key_event is missing sender_claimed_ed25519_key field`,",
          "1436:                 );",
          "1437:                 return;",
          "1438:             }",
          "1440:             keysClaimed = {",
          "1441:                 ed25519: ed25519Key,",
          "1442:             };",
          "1443:         } else {",
          "1444:             keysClaimed = event.getKeysClaimed();",
          "1445:         }",
          "1447:         const extraSessionData: any = {};",
          "1448:         if (content[\"org.matrix.msc3061.shared_history\"]) {",
          "1449:             extraSessionData.sharedHistory = true;",
          "1450:         }",
          "1451:         return this.olmDevice.addInboundGroupSession(",
          "1452:             content.room_id, senderKey, forwardingKeyChain, sessionId,",
          "1453:             content.session_key, keysClaimed,",
          "1454:             exportFormat, extraSessionData,",
          "1455:         ).then(() => {",
          "1457:             this.retryDecryption(senderKey, sessionId)",
          "1458:                 .then((success) => {",
          "1464:                     if (success) {",
          "1465:                         this.crypto.cancelRoomKeyRequest({",
          "1466:                             algorithm: content.algorithm,",
          "1467:                             room_id: content.room_id,",
          "1468:                             session_id: content.session_id,",
          "1469:                             sender_key: senderKey,",
          "1470:                         });",
          "1471:                     }",
          "1472:                 });",
          "1473:         }).then(() => {",
          "1475:             this.crypto.backupManager.backupGroupSession(senderKey, content.session_id);",
          "1476:         }).catch((e) => {",
          "1477:             logger.error(`Error handling m.room_key_event: ${e}`);",
          "1478:         });",
          "1479:     }",
          "1486:     public async onRoomKeyWithheldEvent(event: MatrixEvent): Promise<void> {",
          "1487:         const content = event.getContent();",
          "1488:         const senderKey = content.sender_key;",
          "1490:         if (content.code === \"m.no_olm\") {",
          "1491:             const sender = event.getSender();",
          "1492:             logger.warn(",
          "1493:                 `${sender}:${senderKey} was unable to establish an olm session with us`,",
          "1494:             );",
          "1503:             if (await this.olmDevice.getSessionIdForDevice(senderKey)) {",
          "1506:                 logger.debug(\"New session already created.  Not creating a new one.\");",
          "1507:                 await this.olmDevice.recordSessionProblem(senderKey, \"no_olm\", true);",
          "1508:                 this.retryDecryptionFromSender(senderKey);",
          "1509:                 return;",
          "1510:             }",
          "1511:             let device = this.crypto.deviceList.getDeviceByIdentityKey(",
          "1512:                 content.algorithm, senderKey,",
          "1513:             );",
          "1514:             if (!device) {",
          "1517:                 await this.crypto.downloadKeys([sender], false);",
          "1518:                 device = this.crypto.deviceList.getDeviceByIdentityKey(",
          "1519:                     content.algorithm, senderKey,",
          "1520:                 );",
          "1521:                 if (!device) {",
          "1522:                     logger.info(",
          "1523:                         \"Couldn't find device for identity key \" + senderKey +",
          "1524:                         \": not establishing session\",",
          "1525:                     );",
          "1526:                     await this.olmDevice.recordSessionProblem(senderKey, \"no_olm\", false);",
          "1527:                     this.retryDecryptionFromSender(senderKey);",
          "1528:                     return;",
          "1529:                 }",
          "1530:             }",
          "1531:             await olmlib.ensureOlmSessionsForDevices(",
          "1532:                 this.olmDevice, this.baseApis, { [sender]: [device] }, false,",
          "1533:             );",
          "1534:             const encryptedContent = {",
          "1535:                 algorithm: olmlib.OLM_ALGORITHM,",
          "1536:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "1537:                 ciphertext: {},",
          "1538:             };",
          "1539:             await olmlib.encryptMessageForDevice(",
          "1540:                 encryptedContent.ciphertext,",
          "1541:                 this.userId,",
          "1542:                 this.deviceId,",
          "1543:                 this.olmDevice,",
          "1544:                 sender,",
          "1545:                 device,",
          "1546:                 { type: \"m.dummy\" },",
          "1547:             );",
          "1549:             await this.olmDevice.recordSessionProblem(senderKey, \"no_olm\", true);",
          "1550:             this.retryDecryptionFromSender(senderKey);",
          "1552:             await this.baseApis.sendToDevice(\"m.room.encrypted\", {",
          "1553:                 [sender]: {",
          "1554:                     [device.deviceId]: encryptedContent,",
          "1555:                 },",
          "1556:             });",
          "1557:         } else {",
          "1558:             await this.olmDevice.addInboundGroupSessionWithheld(",
          "1559:                 content.room_id, senderKey, content.session_id, content.code,",
          "1560:                 content.reason,",
          "1561:             );",
          "1562:         }",
          "1563:     }",
          "1568:     public hasKeysForKeyRequest(keyRequest: IncomingRoomKeyRequest): Promise<boolean> {",
          "1569:         const body = keyRequest.requestBody;",
          "1571:         return this.olmDevice.hasInboundSessionKeys(",
          "1572:             body.room_id,",
          "1573:             body.sender_key,",
          "1574:             body.session_id,",
          "1576:         );",
          "1577:     }",
          "1582:     public shareKeysWithDevice(keyRequest: IncomingRoomKeyRequest): void {",
          "1583:         const userId = keyRequest.userId;",
          "1584:         const deviceId = keyRequest.deviceId;",
          "1585:         const deviceInfo = this.crypto.getStoredDevice(userId, deviceId);",
          "1586:         const body = keyRequest.requestBody;",
          "1588:         this.olmlib.ensureOlmSessionsForDevices(",
          "1589:             this.olmDevice, this.baseApis, {",
          "1590:                 [userId]: [deviceInfo],",
          "1591:             },",
          "1592:         ).then((devicemap) => {",
          "1593:             const olmSessionResult = devicemap[userId][deviceId];",
          "1594:             if (!olmSessionResult.sessionId) {",
          "1600:                 return null;",
          "1601:             }",
          "1603:             logger.log(",
          "1604:                 \"sharing keys for session \" + body.sender_key + \"|\"",
          "1605:                 + body.session_id + \" with device \"",
          "1606:                 + userId + \":\" + deviceId,",
          "1607:             );",
          "1609:             return this.buildKeyForwardingMessage(",
          "1610:                 body.room_id, body.sender_key, body.session_id,",
          "1611:             );",
          "1612:         }).then((payload) => {",
          "1613:             const encryptedContent = {",
          "1614:                 algorithm: olmlib.OLM_ALGORITHM,",
          "1615:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "1616:                 ciphertext: {},",
          "1617:             };",
          "1619:             return this.olmlib.encryptMessageForDevice(",
          "1620:                 encryptedContent.ciphertext,",
          "1621:                 this.userId,",
          "1622:                 this.deviceId,",
          "1623:                 this.olmDevice,",
          "1624:                 userId,",
          "1625:                 deviceInfo,",
          "1626:                 payload,",
          "1627:             ).then(() => {",
          "1628:                 const contentMap = {",
          "1629:                     [userId]: {",
          "1630:                         [deviceId]: encryptedContent,",
          "1631:                     },",
          "1632:                 };",
          "1635:                 return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);",
          "1636:             });",
          "1637:         });",
          "1638:     }",
          "1640:     private async buildKeyForwardingMessage(",
          "1641:         roomId: string,",
          "1642:         senderKey: string,",
          "1643:         sessionId: string,",
          "1644:     ): Promise<IKeyForwardingMessage> {",
          "1645:         const key = await this.olmDevice.getInboundGroupSessionKey(roomId, senderKey, sessionId);",
          "1647:         return {",
          "1648:             type: \"m.forwarded_room_key\",",
          "1649:             content: {",
          "1650:                 \"algorithm\": olmlib.MEGOLM_ALGORITHM,",
          "1651:                 \"room_id\": roomId,",
          "1652:                 \"sender_key\": senderKey,",
          "1653:                 \"sender_claimed_ed25519_key\": key.sender_claimed_ed25519_key,",
          "1654:                 \"session_id\": sessionId,",
          "1655:                 \"session_key\": key.key,",
          "1656:                 \"chain_index\": key.chain_index,",
          "1657:                 \"forwarding_curve25519_key_chain\": key.forwarding_curve25519_key_chain,",
          "1658:                 \"org.matrix.msc3061.shared_history\": key.shared_history || false,",
          "1659:             },",
          "1660:         };",
          "1661:     }",
          "1671:     public importRoomKey(session: IMegolmSessionData, opts: any = {}): Promise<void> {",
          "1672:         const extraSessionData: any = {};",
          "1673:         if (opts.untrusted) {",
          "1674:             extraSessionData.untrusted = true;",
          "1675:         }",
          "1676:         if (session[\"org.matrix.msc3061.shared_history\"]) {",
          "1677:             extraSessionData.sharedHistory = true;",
          "1678:         }",
          "1679:         return this.olmDevice.addInboundGroupSession(",
          "1680:             session.room_id,",
          "1681:             session.sender_key,",
          "1682:             session.forwarding_curve25519_key_chain,",
          "1683:             session.session_id,",
          "1684:             session.session_key,",
          "1685:             session.sender_claimed_keys,",
          "1686:             true,",
          "1687:             extraSessionData,",
          "1688:         ).then(() => {",
          "1689:             if (opts.source !== \"backup\") {",
          "1691:                 this.crypto.backupManager.backupGroupSession(",
          "1692:                     session.sender_key, session.session_id,",
          "1693:                 ).catch((e) => {",
          "1696:                     logger.log(\"Failed to back up megolm session\", e);",
          "1697:                 });",
          "1698:             }",
          "1700:             this.retryDecryption(session.sender_key, session.session_id);",
          "1701:         });",
          "1702:     }",
          "1714:     private async retryDecryption(senderKey: string, sessionId: string): Promise<boolean> {",
          "1715:         const senderPendingEvents = this.pendingEvents[senderKey];",
          "1716:         if (!senderPendingEvents) {",
          "1717:             return true;",
          "1718:         }",
          "1720:         const pending = senderPendingEvents.get(sessionId);",
          "1721:         if (!pending) {",
          "1722:             return true;",
          "1723:         }",
          "1725:         logger.debug(\"Retrying decryption on events\", [...pending]);",
          "1727:         await Promise.all([...pending].map(async (ev) => {",
          "1728:             try {",
          "1729:                 await ev.attemptDecryption(this.crypto, { isRetry: true });",
          "1730:             } catch (e) {",
          "1732:             }",
          "1733:         }));",
          "1736:         return !((this.pendingEvents[senderKey] || {})[sessionId]);",
          "1737:     }",
          "1739:     public async retryDecryptionFromSender(senderKey: string): Promise<boolean> {",
          "1740:         const senderPendingEvents = this.pendingEvents[senderKey];",
          "1741:         if (!senderPendingEvents) {",
          "1742:             return true;",
          "1743:         }",
          "1745:         delete this.pendingEvents[senderKey];",
          "1747:         await Promise.all([...senderPendingEvents].map(async ([_sessionId, pending]) => {",
          "1748:             await Promise.all([...pending].map(async (ev) => {",
          "1749:                 try {",
          "1750:                     await ev.attemptDecryption(this.crypto);",
          "1751:                 } catch (e) {",
          "1753:                 }",
          "1754:             }));",
          "1755:         }));",
          "1757:         return !this.pendingEvents[senderKey];",
          "1758:     }",
          "1760:     public async sendSharedHistoryInboundSessions(devicesByUser: Record<string, DeviceInfo[]>): Promise<void> {",
          "1761:         await olmlib.ensureOlmSessionsForDevices(this.olmDevice, this.baseApis, devicesByUser);",
          "1763:         logger.log(\"sendSharedHistoryInboundSessions to users\", Object.keys(devicesByUser));",
          "1765:         const sharedHistorySessions = await this.olmDevice.getSharedHistoryInboundGroupSessions(this.roomId);",
          "1766:         logger.log(\"shared-history sessions\", sharedHistorySessions);",
          "1767:         for (const [senderKey, sessionId] of sharedHistorySessions) {",
          "1768:             const payload = await this.buildKeyForwardingMessage(this.roomId, senderKey, sessionId);",
          "1770:             const promises = [];",
          "1771:             const contentMap = {};",
          "1772:             for (const [userId, devices] of Object.entries(devicesByUser)) {",
          "1773:                 contentMap[userId] = {};",
          "1774:                 for (const deviceInfo of devices) {",
          "1775:                     const encryptedContent = {",
          "1776:                         algorithm: olmlib.OLM_ALGORITHM,",
          "1777:                         sender_key: this.olmDevice.deviceCurve25519Key,",
          "1778:                         ciphertext: {},",
          "1779:                     };",
          "1780:                     contentMap[userId][deviceInfo.deviceId] = encryptedContent;",
          "1781:                     promises.push(",
          "1782:                         olmlib.encryptMessageForDevice(",
          "1783:                             encryptedContent.ciphertext,",
          "1784:                             this.userId,",
          "1785:                             this.deviceId,",
          "1786:                             this.olmDevice,",
          "1787:                             userId,",
          "1788:                             deviceInfo,",
          "1789:                             payload,",
          "1790:                         ),",
          "1791:                     );",
          "1792:                 }",
          "1793:             }",
          "1794:             await Promise.all(promises);",
          "1800:             for (const userId of Object.keys(contentMap)) {",
          "1801:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "1802:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "1803:                         logger.log(",
          "1804:                             \"No ciphertext for device \" +",
          "1805:                             userId + \":\" + deviceId + \": pruning\",",
          "1806:                         );",
          "1807:                         delete contentMap[userId][deviceId];",
          "1808:                     }",
          "1809:                 }",
          "1811:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "1812:                     logger.log(\"Pruned all devices for user \" + userId);",
          "1813:                     delete contentMap[userId];",
          "1814:                 }",
          "1815:             }",
          "1818:             if (Object.keys(contentMap).length === 0) {",
          "1819:                 logger.log(\"No users left to send to: aborting\");",
          "1820:                 return;",
          "1821:             }",
          "1823:             await this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);",
          "1824:         }",
          "1825:     }",
          "1826: }",
          "1828: const PROBLEM_DESCRIPTIONS = {",
          "1829:     no_olm: \"The sender was unable to establish a secure channel.\",",
          "1830:     unknown: \"The secure channel with the sender was corrupted.\",",
          "1831: };",
          "1833: registerAlgorithm(olmlib.MEGOLM_ALGORITHM, MegolmEncryption, MegolmDecryption);",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/olm.js||src/crypto/algorithms/olm.js": [
          "File: src/crypto/algorithms/olm.js -> src/crypto/algorithms/olm.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/olm.ts||src/crypto/algorithms/olm.ts": [
          "File: src/crypto/algorithms/olm.ts -> src/crypto/algorithms/olm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2016 - 2021 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "23: import { logger } from '../../logger';",
          "24: import * as olmlib from \"../olmlib\";",
          "25: import { DeviceInfo } from \"../deviceinfo\";",
          "26: import {",
          "27:     DecryptionAlgorithm,",
          "28:     DecryptionError,",
          "29:     EncryptionAlgorithm,",
          "30:     registerAlgorithm,",
          "31: } from \"./base\";",
          "32: import { Room } from '../../models/room';",
          "33: import { MatrixEvent } from \"../..\";",
          "34: import { IEventDecryptionResult } from \"../index\";",
          "36: const DeviceVerification = DeviceInfo.DeviceVerification;",
          "38: interface IMessage {",
          "39:     type: number | string;",
          "40:     body: string;",
          "41: }",
          "52: class OlmEncryption extends EncryptionAlgorithm {",
          "53:     private sessionPrepared = false;",
          "54:     private prepPromise: Promise<void> = null;",
          "62:     private ensureSession(roomMembers: string[]): Promise<void> {",
          "63:         if (this.prepPromise) {",
          "65:             return this.prepPromise;",
          "66:         }",
          "68:         if (this.sessionPrepared) {",
          "70:             return Promise.resolve();",
          "71:         }",
          "73:         this.prepPromise = this.crypto.downloadKeys(roomMembers).then((res) => {",
          "74:             return this.crypto.ensureOlmSessionsForUsers(roomMembers);",
          "75:         }).then(() => {",
          "76:             this.sessionPrepared = true;",
          "77:         }).finally(() => {",
          "78:             this.prepPromise = null;",
          "79:         });",
          "81:         return this.prepPromise;",
          "82:     }",
          "93:     public async encryptMessage(room: Room, eventType: string, content: object): Promise<object> {",
          "99:         const members = await room.getEncryptionTargetMembers();",
          "101:         const users = members.map(function(u) {",
          "102:             return u.userId;",
          "103:         });",
          "105:         await this.ensureSession(users);",
          "107:         const payloadFields = {",
          "108:             room_id: room.roomId,",
          "109:             type: eventType,",
          "110:             content: content,",
          "111:         };",
          "113:         const encryptedContent = {",
          "114:             algorithm: olmlib.OLM_ALGORITHM,",
          "115:             sender_key: this.olmDevice.deviceCurve25519Key,",
          "116:             ciphertext: {},",
          "117:         };",
          "119:         const promises = [];",
          "121:         for (let i = 0; i < users.length; ++i) {",
          "122:             const userId = users[i];",
          "123:             const devices = this.crypto.getStoredDevicesForUser(userId);",
          "125:             for (let j = 0; j < devices.length; ++j) {",
          "126:                 const deviceInfo = devices[j];",
          "127:                 const key = deviceInfo.getIdentityKey();",
          "128:                 if (key == this.olmDevice.deviceCurve25519Key) {",
          "130:                     continue;",
          "131:                 }",
          "132:                 if (deviceInfo.verified == DeviceVerification.BLOCKED) {",
          "134:                     continue;",
          "135:                 }",
          "137:                 promises.push(",
          "138:                     olmlib.encryptMessageForDevice(",
          "139:                         encryptedContent.ciphertext,",
          "140:                         this.userId, this.deviceId, this.olmDevice,",
          "141:                         userId, deviceInfo, payloadFields,",
          "142:                     ),",
          "143:                 );",
          "144:             }",
          "145:         }",
          "147:         return await Promise.all(promises).then(() => encryptedContent);",
          "148:     }",
          "149: }",
          "159: class OlmDecryption extends DecryptionAlgorithm {",
          "170:     public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {",
          "171:         const content = event.getWireContent();",
          "172:         const deviceKey = content.sender_key;",
          "173:         const ciphertext = content.ciphertext;",
          "175:         if (!ciphertext) {",
          "176:             throw new DecryptionError(",
          "177:                 \"OLM_MISSING_CIPHERTEXT\",",
          "178:                 \"Missing ciphertext\",",
          "179:             );",
          "180:         }",
          "182:         if (!(this.olmDevice.deviceCurve25519Key in ciphertext)) {",
          "183:             throw new DecryptionError(",
          "184:                 \"OLM_NOT_INCLUDED_IN_RECIPIENTS\",",
          "185:                 \"Not included in recipients\",",
          "186:             );",
          "187:         }",
          "188:         const message = ciphertext[this.olmDevice.deviceCurve25519Key];",
          "189:         let payloadString;",
          "191:         try {",
          "192:             payloadString = await this.decryptMessage(deviceKey, message);",
          "193:         } catch (e) {",
          "194:             throw new DecryptionError(",
          "195:                 \"OLM_BAD_ENCRYPTED_MESSAGE\",",
          "196:                 \"Bad Encrypted Message\", {",
          "197:                     sender: deviceKey,",
          "198:                     err: e,",
          "199:                 },",
          "200:             );",
          "201:         }",
          "203:         const payload = JSON.parse(payloadString);",
          "207:         if (payload.recipient != this.userId) {",
          "208:             throw new DecryptionError(",
          "209:                 \"OLM_BAD_RECIPIENT\",",
          "210:                 \"Message was intented for \" + payload.recipient,",
          "211:             );",
          "212:         }",
          "214:         if (payload.recipient_keys.ed25519 != this.olmDevice.deviceEd25519Key) {",
          "215:             throw new DecryptionError(",
          "216:                 \"OLM_BAD_RECIPIENT_KEY\",",
          "217:                 \"Message not intended for this device\", {",
          "218:                     intended: payload.recipient_keys.ed25519,",
          "219:                     our_key: this.olmDevice.deviceEd25519Key,",
          "220:                 },",
          "221:             );",
          "222:         }",
          "228:         if (payload.sender != event.getSender()) {",
          "229:             throw new DecryptionError(",
          "230:                 \"OLM_FORWARDED_MESSAGE\",",
          "231:                 \"Message forwarded from \" + payload.sender, {",
          "232:                     reported_sender: event.getSender(),",
          "233:                 },",
          "234:             );",
          "235:         }",
          "238:         if (payload.room_id !== event.getRoomId()) {",
          "239:             throw new DecryptionError(",
          "240:                 \"OLM_BAD_ROOM\",",
          "241:                 \"Message intended for room \" + payload.room_id, {",
          "242:                     reported_room: event.getRoomId(),",
          "243:                 },",
          "244:             );",
          "245:         }",
          "247:         const claimedKeys = payload.keys || {};",
          "249:         return {",
          "250:             clearEvent: payload,",
          "251:             senderCurve25519Key: deviceKey,",
          "252:             claimedEd25519Key: claimedKeys.ed25519 || null,",
          "253:         };",
          "254:     }",
          "264:     private async decryptMessage(theirDeviceIdentityKey: string, message: IMessage): Promise<string> {",
          "268:         if (message.type !== 0) {",
          "270:             return this.reallyDecryptMessage(theirDeviceIdentityKey, message);",
          "271:         } else {",
          "272:             const myPromise = this.olmDevice._olmPrekeyPromise.then(() => {",
          "273:                 return this.reallyDecryptMessage(theirDeviceIdentityKey, message);",
          "274:             });",
          "276:             this.olmDevice._olmPrekeyPromise = myPromise.catch(() => {});",
          "277:             return await myPromise;",
          "278:         }",
          "279:     }",
          "281:     private async reallyDecryptMessage(theirDeviceIdentityKey: string, message: IMessage): Promise<string> {",
          "282:         const sessionIds = await this.olmDevice.getSessionIdsForDevice(theirDeviceIdentityKey);",
          "285:         const decryptionErrors = {};",
          "286:         for (let i = 0; i < sessionIds.length; i++) {",
          "287:             const sessionId = sessionIds[i];",
          "288:             try {",
          "289:                 const payload = await this.olmDevice.decryptMessage(",
          "290:                     theirDeviceIdentityKey, sessionId, message.type, message.body,",
          "291:                 );",
          "292:                 logger.log(",
          "293:                     \"Decrypted Olm message from \" + theirDeviceIdentityKey +",
          "294:                     \" with session \" + sessionId,",
          "295:                 );",
          "296:                 return payload;",
          "297:             } catch (e) {",
          "298:                 const foundSession = await this.olmDevice.matchesSession(",
          "299:                     theirDeviceIdentityKey, sessionId, message.type, message.body,",
          "300:                 );",
          "302:                 if (foundSession) {",
          "305:                     throw new Error(",
          "306:                         \"Error decrypting prekey message with existing session id \" +",
          "307:                         sessionId + \": \" + e.message,",
          "308:                     );",
          "309:                 }",
          "313:                 decryptionErrors[sessionId] = e.message;",
          "314:             }",
          "315:         }",
          "317:         if (message.type !== 0) {",
          "321:             if (sessionIds.length === 0) {",
          "322:                 throw new Error(\"No existing sessions\");",
          "323:             }",
          "325:             throw new Error(",
          "326:                 \"Error decrypting non-prekey message with existing sessions: \" +",
          "327:                 JSON.stringify(decryptionErrors),",
          "328:             );",
          "329:         }",
          "334:         let res;",
          "335:         try {",
          "336:             res = await this.olmDevice.createInboundSession(",
          "337:                 theirDeviceIdentityKey, message.type, message.body,",
          "338:             );",
          "339:         } catch (e) {",
          "340:             decryptionErrors[\"(new)\"] = e.message;",
          "341:             throw new Error(",
          "342:                 \"Error decrypting prekey message: \" +",
          "343:                 JSON.stringify(decryptionErrors),",
          "344:             );",
          "345:         }",
          "347:         logger.log(",
          "348:             \"created new inbound Olm session ID \" +",
          "349:             res.session_id + \" with \" + theirDeviceIdentityKey,",
          "350:         );",
          "351:         return res.payload;",
          "352:     }",
          "353: }",
          "355: registerAlgorithm(olmlib.OLM_ALGORITHM, OlmEncryption, OlmDecryption);",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import { logger } from '../logger';",
          "29: import { OlmDevice } from \"./OlmDevice\";",
          "30: import * as olmlib from \"./olmlib\";",
          "32: import { DeviceInfo, IDevice } from \"./deviceinfo\";",
          "33: import * as algorithms from \"./algorithms\";",
          "34: import { createCryptoStoreCacheCallbacks, CrossSigningInfo, DeviceTrustLevel, UserTrustLevel } from './CrossSigning';",
          "",
          "[Removed Lines]",
          "31: import { DeviceList } from \"./DeviceList\";",
          "",
          "[Added Lines]",
          "31: import {DeviceInfoMap, DeviceList } from \"./DeviceList\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1930:         return this.deviceList.downloadKeys(userIds, forceDownload);",
          "1931:     }",
          "",
          "[Removed Lines]",
          "1926:     public downloadKeys(",
          "1927:         userIds: string[],",
          "1928:         forceDownload?: boolean,",
          "1929:     ): Promise<Record<string, Record<string, IDevice>>> {",
          "",
          "[Added Lines]",
          "1926:     public downloadKeys(userIds: string[], forceDownload?: boolean): Promise<DeviceInfoMap> {",
          "",
          "---------------"
        ],
        "src/models/event.ts||src/models/event.ts": [
          "File: src/models/event.ts -> src/models/event.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: }",
          "135:     type: string;",
          "136:     content: Omit<IContent, \"membership\" | \"avatar_url\" | \"displayname\" | \"m.relates_to\">;",
          "137:     unsigned?: IUnsigned;",
          "",
          "[Removed Lines]",
          "134: interface IClearEvent {",
          "",
          "[Added Lines]",
          "134: export interface IClearEvent {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24406d24118ce6abe0985b6be73be76000a65f95",
      "candidate_info": {
        "commit_hash": "24406d24118ce6abe0985b6be73be76000a65f95",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/24406d24118ce6abe0985b6be73be76000a65f95",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "make it build",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         userDeviceMap: IOlmDevice[],",
          "585:         payload: IPayload,",
          "586:     ): Promise<void> {",
          "588:             userDeviceMap,",
          "600:                 }",
          "601:             }",
          "603:     }",
          "",
          "[Removed Lines]",
          "587:         this.crypto.encryptAndSendToDevices(",
          "589:             payload",
          "590:         ).then(() => {",
          "592:             for (const userId of Object.keys(contentMap)) {",
          "593:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "594:                     session.markSharedWithDevice(",
          "595:                         userId,",
          "596:                         deviceId,",
          "597:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "598:                         chainIndex,",
          "599:                     );",
          "602:         });",
          "",
          "[Added Lines]",
          "587:         return this.crypto.encryptAndSendToDevices(",
          "589:             payload,",
          "590:             (contentMap, deviceInfoByDeviceId) => {",
          "592:                 for (const userId of Object.keys(contentMap)) {",
          "593:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "594:                         session.markSharedWithDevice(",
          "595:                             userId,",
          "596:                             deviceId,",
          "597:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "598:                             chainIndex,",
          "599:                         );",
          "600:                     }",
          "603:         );",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { ReEmitter } from '../ReEmitter';",
          "28: import { logger } from '../logger';",
          "29: import { IExportedDevice, OlmDevice } from \"./OlmDevice\";",
          "30: import * as olmlib from \"./olmlib\";",
          "31: import { DeviceInfoMap, DeviceList } from \"./DeviceList\";",
          "32: import { DeviceInfo, IDevice } from \"./deviceinfo\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { IOlmDevice } from \"./algorithms/megolm\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049:         payload: object,",
          "3051:         const contentMap = {};",
          "3052:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "",
          "[Removed Lines]",
          "3047:     private encryptAndSendToDevices(",
          "3048:         userDeviceMap: IExportedDevice[],",
          "3050:     ): Promise<{}> {",
          "",
          "[Added Lines]",
          "3049:     encryptAndSendToDevices(",
          "3050:         userDeviceMap: IOlmDevice<DeviceInfo>[],",
          "3052:         afterwards: (contentMap: {}, deviceInfoByDeviceId: Map<string, DeviceInfo>) => void,",
          "3053:     ): Promise<void> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3110:                 return;",
          "3111:             }",
          "3114:         });",
          "3115:     }",
          "",
          "[Removed Lines]",
          "3113:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);",
          "",
          "[Added Lines]",
          "3116:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3117:                 afterwards.bind(contentMap, deviceInfoByDeviceId)",
          "3118:             );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86363cb7f41139490a7976e2bca3a83b521306aa",
      "candidate_info": {
        "commit_hash": "86363cb7f41139490a7976e2bca3a83b521306aa",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/86363cb7f41139490a7976e2bca3a83b521306aa",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "lint",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:     ): Promise<void> {",
          "581:         return this.crypto.encryptAndSendToDevices(",
          "582:             userDeviceMap,",
          "584:         ).then((result) => {",
          "587:             for (const userId of Object.keys(contentMap)) {",
          "588:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "",
          "[Removed Lines]",
          "583:             payload",
          "585:             const {contentMap, deviceInfoByDeviceId} = result;",
          "",
          "[Added Lines]",
          "583:             payload,",
          "585:             const { contentMap, deviceInfoByDeviceId } = result;",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3050:         userDeviceMap: IOlmDevice<DeviceInfo>[],",
          "3051:         payload: object,",
          "3052:     ): Promise<{contentMap, deviceInfoByDeviceId}> {",
          "",
          "[Removed Lines]",
          "3049:     encryptAndSendToDevices(",
          "",
          "[Added Lines]",
          "3049:     public encryptAndSendToDevices(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3121:             }",
          "3123:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3125:             );",
          "3126:         });",
          "3127:     }",
          "",
          "[Removed Lines]",
          "3124:                 (response)=>({ contentMap, deviceInfoByDeviceId })",
          "",
          "[Added Lines]",
          "3124:                 (response)=>({ contentMap, deviceInfoByDeviceId }),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "adaebb4dff092ed2eeb63d2fec3190c85a910f57",
      "candidate_info": {
        "commit_hash": "adaebb4dff092ed2eeb63d2fec3190c85a910f57",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/adaebb4dff092ed2eeb63d2fec3190c85a910f57",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "untested first cut at factoring out a encryptAndSendToDevices method",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:         userDeviceMap: IOlmDevice[],",
          "579:         payload: IPayload,",
          "580:     ): Promise<void> {",
          "620:             for (const userId of Object.keys(contentMap)) {",
          "621:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "634:                 }",
          "635:             }",
          "656:         });",
          "657:     }",
          "",
          "[Removed Lines]",
          "581:         const contentMap = {};",
          "582:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "584:         const promises = [];",
          "585:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "586:             const encryptedContent = {",
          "587:                 algorithm: olmlib.OLM_ALGORITHM,",
          "588:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "589:                 ciphertext: {},",
          "590:             };",
          "591:             const val = userDeviceMap[i];",
          "592:             const userId = val.userId;",
          "593:             const deviceInfo = val.deviceInfo;",
          "594:             const deviceId = deviceInfo.deviceId;",
          "595:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
          "597:             if (!contentMap[userId]) {",
          "598:                 contentMap[userId] = {};",
          "599:             }",
          "600:             contentMap[userId][deviceId] = encryptedContent;",
          "602:             promises.push(",
          "603:                 olmlib.encryptMessageForDevice(",
          "604:                     encryptedContent.ciphertext,",
          "605:                     this.userId,",
          "606:                     this.deviceId,",
          "607:                     this.olmDevice,",
          "608:                     userId,",
          "609:                     deviceInfo,",
          "610:                     payload,",
          "611:                 ),",
          "612:             );",
          "613:         }",
          "615:         return Promise.all(promises).then(() => {",
          "622:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "623:                         logger.log(",
          "624:                             \"No ciphertext for device \" +",
          "625:                             userId + \":\" + deviceId + \": pruning\",",
          "626:                         );",
          "627:                         delete contentMap[userId][deviceId];",
          "628:                     }",
          "629:                 }",
          "631:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "632:                     logger.log(\"Pruned all devices for user \" + userId);",
          "633:                     delete contentMap[userId];",
          "638:             if (Object.keys(contentMap).length === 0) {",
          "639:                 logger.log(\"No users left to send to: aborting\");",
          "640:                 return;",
          "641:             }",
          "643:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(() => {",
          "645:                 for (const userId of Object.keys(contentMap)) {",
          "646:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "647:                         session.markSharedWithDevice(",
          "648:                             userId,",
          "649:                             deviceId,",
          "650:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "651:                             chainIndex,",
          "652:                         );",
          "653:                     }",
          "654:                 }",
          "655:             });",
          "",
          "[Added Lines]",
          "581:         this.crypto.encryptAndSendToDevices(",
          "582:             userDeviceMap,",
          "583:             payload",
          "584:         ).then(() => {",
          "588:                     session.markSharedWithDevice(",
          "589:                         userId,",
          "590:                         deviceId,",
          "591:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "592:                         chainIndex,",
          "593:                     );",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3030:         });",
          "3031:     }",
          "3033:     private onToDeviceEvent = (event: MatrixEvent): void => {",
          "3034:         try {",
          "3035:             logger.log(`received to_device ${event.getType()} from: ` +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3047:     private encryptAndSendToDevices(",
          "3048:         userDeviceMap: IExportedDevice[],",
          "3049:         payload: object,",
          "3050:     ): Promise<{}> {",
          "3051:         const contentMap = {};",
          "3052:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "3054:         const promises = [];",
          "3055:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "3056:             const encryptedContent = {",
          "3057:                 algorithm: olmlib.OLM_ALGORITHM,",
          "3058:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "3059:                 ciphertext: {},",
          "3060:             };",
          "3061:             const val = userDeviceMap[i];",
          "3062:             const userId = val.userId;",
          "3063:             const deviceInfo = val.deviceInfo;",
          "3064:             const deviceId = deviceInfo.deviceId;",
          "3065:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
          "3067:             if (!contentMap[userId]) {",
          "3068:                 contentMap[userId] = {};",
          "3069:             }",
          "3070:             contentMap[userId][deviceId] = encryptedContent;",
          "3072:             promises.push(",
          "3073:                 olmlib.encryptMessageForDevice(",
          "3074:                     encryptedContent.ciphertext,",
          "3075:                     this.userId,",
          "3076:                     this.deviceId,",
          "3077:                     this.olmDevice,",
          "3078:                     userId,",
          "3079:                     deviceInfo,",
          "3080:                     payload,",
          "3081:                 ),",
          "3082:             );",
          "3083:         }",
          "3085:         return Promise.all(promises).then(() => {",
          "3090:             for (const userId of Object.keys(contentMap)) {",
          "3091:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "3092:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "3093:                         logger.log(",
          "3094:                             \"No ciphertext for device \" +",
          "3095:                             userId + \":\" + deviceId + \": pruning\",",
          "3096:                         );",
          "3097:                         delete contentMap[userId][deviceId];",
          "3098:                     }",
          "3099:                 }",
          "3101:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "3102:                     logger.log(\"Pruned all devices for user \" + userId);",
          "3103:                     delete contentMap[userId];",
          "3104:                 }",
          "3105:             }",
          "3108:             if (Object.keys(contentMap).length === 0) {",
          "3109:                 logger.log(\"No users left to send to: aborting\");",
          "3110:                 return;",
          "3111:             }",
          "3113:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);",
          "3114:         });",
          "3115:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a83635ef55307364ca4b8624f0500cd1a27695c",
      "candidate_info": {
        "commit_hash": "5a83635ef55307364ca4b8624f0500cd1a27695c",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/5a83635ef55307364ca4b8624f0500cd1a27695c",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "switch encryptAndSendToDevices to return a promise rather than use a cb\n\nand assert that olm sessions are open to the destination devices",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:     ): Promise<void> {",
          "587:         return this.crypto.encryptAndSendToDevices(",
          "588:             userDeviceMap,",
          "601:                 }",
          "602:             }",
          "604:     }",
          "",
          "[Removed Lines]",
          "589:             payload,",
          "590:             (contentMap, deviceInfoByDeviceId) => {",
          "592:                 for (const userId of Object.keys(contentMap)) {",
          "593:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "594:                         session.markSharedWithDevice(",
          "595:                             userId,",
          "596:                             deviceId,",
          "597:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "598:                             chainIndex,",
          "599:                         );",
          "600:                     }",
          "603:         );",
          "",
          "[Added Lines]",
          "589:             payload",
          "590:         ).then((result) => {",
          "591:             const {contentMap, deviceInfoByDeviceId} = result;",
          "593:             for (const userId of Object.keys(contentMap)) {",
          "594:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "595:                     session.markSharedWithDevice(",
          "596:                         userId,",
          "597:                         deviceId,",
          "598:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "599:                         chainIndex,",
          "600:                     );",
          "603:         });",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3049:     encryptAndSendToDevices(",
          "3050:         userDeviceMap: IOlmDevice<DeviceInfo>[],",
          "3051:         payload: object,",
          "3054:         const contentMap = {};",
          "3055:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "",
          "[Removed Lines]",
          "3052:         afterwards: (contentMap: {}, deviceInfoByDeviceId: Map<string, DeviceInfo>) => void,",
          "3053:     ): Promise<void> {",
          "",
          "[Added Lines]",
          "3052:     ): Promise<{contentMap, deviceInfoByDeviceId}> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3072:             }",
          "3073:             contentMap[userId][deviceId] = encryptedContent;",
          "3075:             promises.push(",
          "3076:                 olmlib.encryptMessageForDevice(",
          "3077:                     encryptedContent.ciphertext,",
          "3078:                     this.userId,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3074:             const devicesByUser = {};",
          "3075:             devicesByUser[userId] = [deviceInfo];",
          "3078:                 olmlib.ensureOlmSessionsForDevices(",
          "3079:                     this.olmDevice,",
          "3080:                     this.baseApis,",
          "3081:                     devicesByUser,",
          "3082:                 ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3114:             }",
          "3116:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3118:             );",
          "3119:         });",
          "3120:     }",
          "",
          "[Removed Lines]",
          "3117:                 afterwards.bind(contentMap, deviceInfoByDeviceId)",
          "",
          "[Added Lines]",
          "3124:                 (response)=>({ contentMap, deviceInfoByDeviceId })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f3f9990ef790a3648941de003ca842d3c7d6575",
      "candidate_info": {
        "commit_hash": "9f3f9990ef790a3648941de003ca842d3c7d6575",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/9f3f9990ef790a3648941de003ca842d3c7d6575",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "untested first cut at factoring out a encryptAndSendToDevices method",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         userDeviceMap: IOlmDevice[],",
          "585:         payload: IPayload,",
          "586:     ): Promise<void> {",
          "626:             for (const userId of Object.keys(contentMap)) {",
          "627:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "640:                 }",
          "641:             }",
          "662:         });",
          "663:     }",
          "",
          "[Removed Lines]",
          "587:         const contentMap = {};",
          "588:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "590:         const promises = [];",
          "591:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "592:             const encryptedContent = {",
          "593:                 algorithm: olmlib.OLM_ALGORITHM,",
          "594:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "595:                 ciphertext: {},",
          "596:             };",
          "597:             const val = userDeviceMap[i];",
          "598:             const userId = val.userId;",
          "599:             const deviceInfo = val.deviceInfo;",
          "600:             const deviceId = deviceInfo.deviceId;",
          "601:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
          "603:             if (!contentMap[userId]) {",
          "604:                 contentMap[userId] = {};",
          "605:             }",
          "606:             contentMap[userId][deviceId] = encryptedContent;",
          "608:             promises.push(",
          "609:                 olmlib.encryptMessageForDevice(",
          "610:                     encryptedContent.ciphertext,",
          "611:                     this.userId,",
          "612:                     this.deviceId,",
          "613:                     this.olmDevice,",
          "614:                     userId,",
          "615:                     deviceInfo,",
          "616:                     payload,",
          "617:                 ),",
          "618:             );",
          "619:         }",
          "621:         return Promise.all(promises).then(() => {",
          "628:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "629:                         logger.log(",
          "630:                             \"No ciphertext for device \" +",
          "631:                             userId + \":\" + deviceId + \": pruning\",",
          "632:                         );",
          "633:                         delete contentMap[userId][deviceId];",
          "634:                     }",
          "635:                 }",
          "637:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "638:                     logger.log(\"Pruned all devices for user \" + userId);",
          "639:                     delete contentMap[userId];",
          "644:             if (Object.keys(contentMap).length === 0) {",
          "645:                 logger.log(\"No users left to send to: aborting\");",
          "646:                 return;",
          "647:             }",
          "649:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(() => {",
          "651:                 for (const userId of Object.keys(contentMap)) {",
          "652:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "653:                         session.markSharedWithDevice(",
          "654:                             userId,",
          "655:                             deviceId,",
          "656:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "657:                             chainIndex,",
          "658:                         );",
          "659:                     }",
          "660:                 }",
          "661:             });",
          "",
          "[Added Lines]",
          "587:         this.crypto.encryptAndSendToDevices(",
          "588:             userDeviceMap,",
          "589:             payload",
          "590:         ).then(() => {",
          "594:                     session.markSharedWithDevice(",
          "595:                         userId,",
          "596:                         deviceId,",
          "597:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "598:                         chainIndex,",
          "599:                     );",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3030:         });",
          "3031:     }",
          "3033:     private onToDeviceEvent = (event: MatrixEvent): void => {",
          "3034:         try {",
          "3035:             logger.log(`received to_device ${event.getType()} from: ` +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3047:     private encryptAndSendToDevices(",
          "3048:         userDeviceMap: IExportedDevice[],",
          "3049:         payload: object,",
          "3050:     ): Promise<{}> {",
          "3051:         const contentMap = {};",
          "3052:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "3054:         const promises = [];",
          "3055:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "3056:             const encryptedContent = {",
          "3057:                 algorithm: olmlib.OLM_ALGORITHM,",
          "3058:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "3059:                 ciphertext: {},",
          "3060:             };",
          "3061:             const val = userDeviceMap[i];",
          "3062:             const userId = val.userId;",
          "3063:             const deviceInfo = val.deviceInfo;",
          "3064:             const deviceId = deviceInfo.deviceId;",
          "3065:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
          "3067:             if (!contentMap[userId]) {",
          "3068:                 contentMap[userId] = {};",
          "3069:             }",
          "3070:             contentMap[userId][deviceId] = encryptedContent;",
          "3072:             promises.push(",
          "3073:                 olmlib.encryptMessageForDevice(",
          "3074:                     encryptedContent.ciphertext,",
          "3075:                     this.userId,",
          "3076:                     this.deviceId,",
          "3077:                     this.olmDevice,",
          "3078:                     userId,",
          "3079:                     deviceInfo,",
          "3080:                     payload,",
          "3081:                 ),",
          "3082:             );",
          "3083:         }",
          "3085:         return Promise.all(promises).then(() => {",
          "3090:             for (const userId of Object.keys(contentMap)) {",
          "3091:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "3092:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "3093:                         logger.log(",
          "3094:                             \"No ciphertext for device \" +",
          "3095:                             userId + \":\" + deviceId + \": pruning\",",
          "3096:                         );",
          "3097:                         delete contentMap[userId][deviceId];",
          "3098:                     }",
          "3099:                 }",
          "3101:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "3102:                     logger.log(\"Pruned all devices for user \" + userId);",
          "3103:                     delete contentMap[userId];",
          "3104:                 }",
          "3105:             }",
          "3108:             if (Object.keys(contentMap).length === 0) {",
          "3109:                 logger.log(\"No users left to send to: aborting\");",
          "3110:                 return;",
          "3111:             }",
          "3113:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);",
          "3114:         });",
          "3115:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c36bfc821c18d90cceb46fe6dd49732ca69bfc0a",
      "candidate_info": {
        "commit_hash": "c36bfc821c18d90cceb46fe6dd49732ca69bfc0a",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/c36bfc821c18d90cceb46fe6dd49732ca69bfc0a",
        "files": [
          "package.json",
          "spec/unit/crypto.spec.ts",
          "spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/matrix-client.spec.ts",
          "src/client.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts",
          "yarn.lock"
        ],
        "message": "Add support for sending user-defined encrypted to-device messages (#2528)\n\n* Add support for sending user-defined encrypted to-device messages\n\nThis is a port of the same change from the robertlong/group-call branch.\n\n* Fix tests\n\n* Expose the method in MatrixClient\n\n* Fix a code smell\n\n* Fix types\n\n* Test the MatrixClient method\n\n* Fix some types in Crypto test suite\n\n* Test the Crypto method\n\n* Fix tests\n\n* Upgrade matrix-mock-request\n\n* Move useRealTimers to afterEach",
        "before_after_code_files": [
          "spec/unit/crypto.spec.ts||spec/unit/crypto.spec.ts",
          "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/matrix-client.spec.ts||spec/unit/matrix-client.spec.ts",
          "src/client.ts||src/client.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "spec/unit/crypto.spec.ts||spec/unit/crypto.spec.ts": [
          "File: spec/unit/crypto.spec.ts -> spec/unit/crypto.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { EventEmitter } from \"events\";",
          "5: import { Crypto } from \"../../src/crypto\";",
          "6: import { MemoryCryptoStore } from \"../../src/crypto/store/memory-crypto-store\";",
          "7: import { MockStorageApi } from \"../MockStorageApi\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import { MatrixClient } from \"../../src/client\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         return Olm.init();",
          "65:     });",
          "67:     it(\"Crypto exposes the correct olm library version\", function() {",
          "68:         expect(Crypto.getOlmVersion()[0]).toEqual(3);",
          "69:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     afterEach(() => {",
          "69:         jest.useRealTimers();",
          "70:     });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:     });",
          "227:     describe('Key requests', function() {",
          "231:         beforeEach(async function() {",
          "232:             aliceClient = (new TestClient(",
          "",
          "[Removed Lines]",
          "228:         let aliceClient;",
          "229:         let bobClient;",
          "",
          "[Added Lines]",
          "233:         let aliceClient: MatrixClient;",
          "234:         let bobClient: MatrixClient;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:             expect(events[0].getContent().msgtype).toBe(\"m.bad.encrypted\");",
          "314:             expect(events[1].getContent().msgtype).not.toBe(\"m.bad.encrypted\");",
          "317:             const eventContent = events[0].getWireContent();",
          "318:             const senderKey = eventContent.sender_key;",
          "319:             const sessionId = eventContent.session_id;",
          "",
          "[Removed Lines]",
          "316:             const cryptoStore = bobClient.cryptoStore;",
          "",
          "[Added Lines]",
          "321:             const cryptoStore = bobClient.crypto.cryptoStore;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:             const ksEvent = await keyshareEventForEvent(aliceClient, event, 1);",
          "385:             ksEvent.getContent().sender_key = undefined; // test",
          "387:             await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "389:         });",
          "391:         it(\"creates a new keyshare request if we request a keyshare\", async function() {",
          "",
          "[Removed Lines]",
          "386:             bobClient.crypto.addInboundGroupSession = jest.fn();",
          "388:             expect(bobClient.crypto.addInboundGroupSession).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "391:             bobClient.crypto.olmDevice.addInboundGroupSession = jest.fn();",
          "393:             expect(bobClient.crypto.olmDevice.addInboundGroupSession).not.toHaveBeenCalled();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "401:                 },",
          "402:             });",
          "403:             await aliceClient.cancelAndResendEventRoomKeyRequest(event);",
          "405:             const roomKeyRequestBody = {",
          "406:                 algorithm: olmlib.MEGOLM_ALGORITHM,",
          "407:                 room_id: \"!someroom\",",
          "",
          "[Removed Lines]",
          "404:             const cryptoStore = aliceClient.cryptoStore;",
          "",
          "[Added Lines]",
          "409:             const cryptoStore = aliceClient.crypto.cryptoStore;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "425:                 },",
          "426:             });",
          "429:             aliceClient.startClient();",
          "",
          "[Removed Lines]",
          "428:             aliceClient.sendToDevice = jest.fn().mockResolvedValue(undefined);",
          "",
          "[Added Lines]",
          "433:             const aliceSendToDevice = jest.fn().mockResolvedValue(undefined);",
          "434:             aliceClient.sendToDevice = aliceSendToDevice;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "437:             aliceClient.crypto.outgoingRoomKeyRequestManager.sendQueuedRequests();",
          "438:             jest.runAllTimers();",
          "439:             await Promise.resolve();",
          "",
          "[Removed Lines]",
          "440:             expect(aliceClient.sendToDevice).toBeCalledTimes(1);",
          "441:             const txnId = aliceClient.sendToDevice.mock.calls[0][2];",
          "",
          "[Added Lines]",
          "447:             expect(aliceSendToDevice).toBeCalledTimes(1);",
          "448:             const txnId = aliceSendToDevice.mock.calls[0][2];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "456:         });",
          "457:     });",
          "",
          "[Removed Lines]",
          "454:             expect(aliceClient.sendToDevice).toBeCalledTimes(3);",
          "455:             expect(aliceClient.sendToDevice.mock.calls[2][2]).not.toBe(txnId);",
          "",
          "[Added Lines]",
          "461:             expect(aliceSendToDevice).toBeCalledTimes(3);",
          "462:             expect(aliceSendToDevice.mock.calls[2][2]).not.toBe(txnId);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "480:             client.stopClient();",
          "481:         });",
          "482:     });",
          "483: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     describe(\"encryptAndSendToDevices\", () => {",
          "492:         let client: TestClient;",
          "493:         let ensureOlmSessionsForDevices: jest.SpiedFunction<typeof olmlib.ensureOlmSessionsForDevices>;",
          "494:         let encryptMessageForDevice: jest.SpiedFunction<typeof olmlib.encryptMessageForDevice>;",
          "495:         const payload = { hello: \"world\" };",
          "496:         let encryptedPayload: object;",
          "498:         beforeEach(async () => {",
          "499:             ensureOlmSessionsForDevices = jest.spyOn(olmlib, \"ensureOlmSessionsForDevices\");",
          "500:             ensureOlmSessionsForDevices.mockResolvedValue({});",
          "501:             encryptMessageForDevice = jest.spyOn(olmlib, \"encryptMessageForDevice\");",
          "502:             encryptMessageForDevice.mockImplementation(async (...[result,,,,,, payload]) => {",
          "503:                 result.plaintext = JSON.stringify(payload);",
          "504:             });",
          "506:             client = new TestClient(\"@alice:example.org\", \"aliceweb\");",
          "507:             await client.client.initCrypto();",
          "509:             encryptedPayload = {",
          "510:                 algorithm: \"m.olm.v1.curve25519-aes-sha2\",",
          "511:                 sender_key: client.client.crypto.olmDevice.deviceCurve25519Key,",
          "512:                 ciphertext: { plaintext: JSON.stringify(payload) },",
          "513:             };",
          "514:         });",
          "516:         afterEach(async () => {",
          "517:             ensureOlmSessionsForDevices.mockRestore();",
          "518:             encryptMessageForDevice.mockRestore();",
          "519:             await client.stop();",
          "520:         });",
          "522:         it(\"encrypts and sends to devices\", async () => {",
          "523:             client.httpBackend",
          "524:                 .when(\"PUT\", \"/sendToDevice/m.room.encrypted\", {",
          "525:                     messages: {",
          "526:                         \"@bob:example.org\": {",
          "527:                             bobweb: encryptedPayload,",
          "528:                             bobmobile: encryptedPayload,",
          "529:                         },",
          "530:                         \"@carol:example.org\": {",
          "531:                             caroldesktop: encryptedPayload,",
          "532:                         },",
          "533:                     },",
          "534:                 })",
          "535:                 .respond(200, {});",
          "537:             await Promise.all([",
          "538:                 client.client.encryptAndSendToDevices(",
          "539:                     [",
          "540:                         { userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobweb\") },",
          "541:                         { userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobmobile\") },",
          "542:                         { userId: \"@carol:example.org\", deviceInfo: new DeviceInfo(\"caroldesktop\") },",
          "543:                     ],",
          "544:                     payload,",
          "545:                 ),",
          "546:                 client.httpBackend.flushAllExpected(),",
          "547:             ]);",
          "548:         });",
          "550:         it(\"sends nothing to devices that couldn't be encrypted to\", async () => {",
          "551:             encryptMessageForDevice.mockImplementation(async (...[result,,,, userId, device, payload]) => {",
          "553:                 if (userId === \"@carol:example.org\" && device.deviceId === \"caroldesktop\") return;",
          "554:                 result.plaintext = JSON.stringify(payload);",
          "555:             });",
          "557:             client.httpBackend",
          "558:                 .when(\"PUT\", \"/sendToDevice/m.room.encrypted\", {",
          "560:                     messages: { \"@bob:example.org\": { bobweb: encryptedPayload } },",
          "561:                 })",
          "562:                 .respond(200, {});",
          "564:             await Promise.all([",
          "565:                 client.client.encryptAndSendToDevices(",
          "566:                     [",
          "567:                         { userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobweb\") },",
          "568:                         { userId: \"@carol:example.org\", deviceInfo: new DeviceInfo(\"caroldesktop\") },",
          "569:                     ],",
          "570:                     payload,",
          "571:                 ),",
          "572:                 client.httpBackend.flushAllExpected(),",
          "573:             ]);",
          "574:         });",
          "576:         it(\"no-ops if no devices can be encrypted to\", async () => {",
          "578:             encryptMessageForDevice.mockResolvedValue(undefined);",
          "581:             client.httpBackend.when(\"GET\", \"/room_keys/version\").respond(404, {});",
          "582:             await client.httpBackend.flush(\"/room_keys/version\", 1);",
          "584:             await client.client.encryptAndSendToDevices(",
          "585:                 [{ userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobweb\") }],",
          "586:                 payload,",
          "587:             );",
          "588:             client.httpBackend.verifyNoOutstandingRequests();",
          "589:         });",
          "590:     });",
          "",
          "---------------"
        ],
        "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts": [
          "File: spec/unit/crypto/algorithms/megolm.spec.ts -> spec/unit/crypto/algorithms/megolm.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:                         rotation_period_ms: rotationPeriodMs,",
          "361:                     },",
          "362:                 });",
          "363:                 mockRoom = {",
          "364:                     getEncryptionTargetMembers: jest.fn().mockReturnValue(",
          "365:                         [{ userId: \"@alice:home.server\" }],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:                 mockCrypto.encryptAndSendToDevices = Crypto.prototype.encryptAndSendToDevices;",
          "369:                 mockCrypto.olmDevice = olmDevice;",
          "371:                 mockCrypto.baseApis = mockBaseApis;",
          "",
          "---------------"
        ],
        "spec/unit/matrix-client.spec.ts||spec/unit/matrix-client.spec.ts": [
          "File: spec/unit/matrix-client.spec.ts -> spec/unit/matrix-client.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     UNSTABLE_MSC3089_TREE_SUBTYPE,",
          "28: } from \"../../src/@types/event\";",
          "29: import { MEGOLM_ALGORITHM } from \"../../src/crypto/olmlib\";",
          "30: import { EventStatus, MatrixEvent } from \"../../src/models/event\";",
          "31: import { Preset } from \"../../src/@types/partials\";",
          "32: import { ReceiptType } from \"../../src/@types/read_receipts\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { Crypto } from \"../../src/crypto\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1297:             expect(result!.aliases).toEqual(response.aliases);",
          "1298:         });",
          "1299:     });",
          "1300: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:     describe(\"encryptAndSendToDevices\", () => {",
          "1303:         it(\"throws an error if crypto is unavailable\", () => {",
          "1304:             client.crypto = undefined;",
          "1305:             expect(() => client.encryptAndSendToDevices([], {})).toThrow();",
          "1306:         });",
          "1308:         it(\"is an alias for the crypto method\", async () => {",
          "1309:             client.crypto = testUtils.mock(Crypto, \"Crypto\");",
          "1310:             const deviceInfos = [];",
          "1311:             const payload = {};",
          "1312:             await client.encryptAndSendToDevices(deviceInfos, payload);",
          "1313:             expect(client.crypto.encryptAndSendToDevices).toHaveBeenLastCalledWith(deviceInfos, payload);",
          "1314:         });",
          "1315:     });",
          "",
          "---------------"
        ],
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import { Direction, EventTimeline } from \"./models/event-timeline\";",
          "41: import { IActionsObject, PushProcessor } from \"./pushprocessor\";",
          "42: import { AutoDiscovery, AutoDiscoveryAction } from \"./autodiscovery\";",
          "43: import * as olmlib from \"./crypto/olmlib\";",
          "44: import { decodeBase64, encodeBase64 } from \"./crypto/olmlib\";",
          "46: import { TypedReEmitter } from './ReEmitter';",
          "47: import { IRoomEncryption, RoomList } from './crypto/RoomList';",
          "48: import { logger } from './logger';",
          "",
          "[Removed Lines]",
          "45: import { IExportedDevice as IOlmDevice } from \"./crypto/OlmDevice\";",
          "",
          "[Added Lines]",
          "43: import { IEncryptAndSendToDevicesResult } from \"./crypto\";",
          "46: import { IExportedDevice as IExportedOlmDevice } from \"./crypto/OlmDevice\";",
          "47: import { IOlmDevice } from \"./crypto/algorithms/megolm\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: const TURN_CHECK_INTERVAL = 10 * 60 * 1000; // poll for turn credentials every 10 minutes",
          "210: interface IExportedDevice {",
          "212:     userId: string;",
          "213:     deviceId: string;",
          "214: }",
          "",
          "[Removed Lines]",
          "211:     olmDevice: IOlmDevice;",
          "",
          "[Added Lines]",
          "213:     olmDevice: IExportedOlmDevice;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "936:     protected turnServers: ITurnServer[] = [];",
          "937:     protected turnServersExpiry = 0;",
          "938:     protected checkTurnServersIntervalID: ReturnType<typeof setInterval>;",
          "940:     protected txnCtr = 0;",
          "941:     protected mediaHandler = new MediaHandler(this);",
          "942:     protected pendingEventEncryption = new Map<string, Promise<void>>();",
          "",
          "[Removed Lines]",
          "939:     protected exportedOlmDeviceToImport: IOlmDevice;",
          "",
          "[Added Lines]",
          "941:     protected exportedOlmDeviceToImport: IExportedOlmDevice;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2558:         return this.roomList.isRoomEncrypted(roomId);",
          "2559:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2577:     public encryptAndSendToDevices(",
          "2578:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "2579:         payload: object,",
          "2580:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "2581:         if (!this.crypto) {",
          "2582:             throw new Error(\"End-to-End encryption disabled\");",
          "2583:         }",
          "2584:         return this.crypto.encryptAndSendToDevices(userDeviceInfoArr, payload);",
          "2585:     }",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { logger } from '../../logger';",
          "24: import * as olmlib from \"../olmlib\";",
          "26: import {",
          "27:     DecryptionAlgorithm,",
          "28:     DecryptionError,",
          "",
          "[Removed Lines]",
          "25: import { EventType } from '../../@types/event';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import { DeviceInfoMap } from \"../DeviceList\";",
          "39: import { MatrixEvent } from \"../..\";",
          "40: import { IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"../index\";",
          "44: export function isRoomSharedHistory(room: Room): boolean {",
          "",
          "[Removed Lines]",
          "41: import { ToDeviceBatch, ToDeviceMessage } from '../../models/ToDeviceMessage';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "611:         userDeviceMap: IOlmDevice[],",
          "612:         payload: IPayload,",
          "613:     ): Promise<void> {",
          "671:             for (const msg of toDeviceBatch.batch) {",
          "680:             }",
          "695:         });",
          "696:     }",
          "",
          "[Removed Lines]",
          "614:         const toDeviceBatch: ToDeviceBatch = {",
          "615:             eventType: EventType.RoomMessageEncrypted,",
          "616:             batch: [],",
          "617:         };",
          "620:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "622:         const promises: Promise<unknown>[] = [];",
          "623:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "624:             const encryptedContent: IEncryptedContent = {",
          "625:                 algorithm: olmlib.OLM_ALGORITHM,",
          "626:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "627:                 ciphertext: {},",
          "628:             };",
          "629:             const val = userDeviceMap[i];",
          "630:             const userId = val.userId;",
          "631:             const deviceInfo = val.deviceInfo;",
          "632:             const deviceId = deviceInfo.deviceId;",
          "635:             let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "637:             if (userIdDeviceInfo === undefined) {",
          "638:                 userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "640:                 deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "641:             }",
          "644:             userIdDeviceInfo.set(deviceId, deviceInfo);",
          "646:             toDeviceBatch.batch.push({",
          "647:                 userId,",
          "648:                 deviceId,",
          "649:                 payload: encryptedContent,",
          "650:             });",
          "652:             promises.push(",
          "653:                 olmlib.encryptMessageForDevice(",
          "654:                     encryptedContent.ciphertext,",
          "655:                     this.userId,",
          "656:                     this.deviceId,",
          "657:                     this.olmDevice,",
          "658:                     userId,",
          "659:                     deviceInfo,",
          "660:                     payload,",
          "661:                 ),",
          "662:             );",
          "663:         }",
          "665:         return Promise.all(promises).then(() => {",
          "670:             const prunedBatch: ToDeviceMessage[] = [];",
          "672:                 if (Object.keys(msg.payload.ciphertext).length > 0) {",
          "673:                     prunedBatch.push(msg);",
          "674:                 } else {",
          "675:                     logger.log(",
          "676:                         \"No ciphertext for device \" +",
          "677:                         msg.userId + \":\" + msg.deviceId + \": pruning\",",
          "678:                     );",
          "679:                 }",
          "682:             toDeviceBatch.batch = prunedBatch;",
          "684:             return this.baseApis.queueToDevice(toDeviceBatch).then(() => {",
          "686:                 for (const msg of toDeviceBatch.batch) {",
          "687:                     session.markSharedWithDevice(",
          "688:                         msg.userId,",
          "689:                         msg.deviceId,",
          "690:                         deviceInfoByUserIdAndDeviceId.get(msg.userId).get(msg.deviceId).getIdentityKey(),",
          "691:                         chainIndex,",
          "692:                     );",
          "693:                 }",
          "694:             });",
          "",
          "[Added Lines]",
          "612:         return this.crypto.encryptAndSendToDevices(",
          "613:             userDeviceMap,",
          "614:             payload,",
          "615:         ).then(({ toDeviceBatch, deviceInfoByUserIdAndDeviceId }) => {",
          "618:                 session.markSharedWithDevice(",
          "619:                     msg.userId,",
          "620:                     msg.deviceId,",
          "621:                     deviceInfoByUserIdAndDeviceId.get(msg.userId).get(msg.deviceId).getIdentityKey(),",
          "622:                     chainIndex,",
          "623:                 );",
          "625:         }).catch((error) => {",
          "626:             logger.error(\"failed to encryptAndSendToDevices\", error);",
          "627:             throw error;",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import anotherjson from \"another-json\";",
          "26: import { TypedReEmitter } from '../ReEmitter';",
          "27: import { logger } from '../logger';",
          "28: import { IExportedDevice, OlmDevice } from \"./OlmDevice\";",
          "29: import * as olmlib from \"./olmlib\";",
          "30: import { DeviceInfoMap, DeviceList } from \"./DeviceList\";",
          "31: import { DeviceInfo, IDevice } from \"./deviceinfo\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import { EventType } from \"../@types/event\";",
          "30: import { IOlmDevice } from \"./algorithms/megolm\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: import { Room, RoomEvent } from \"../models/room\";",
          "69: import { RoomMember, RoomMemberEvent } from \"../models/room-member\";",
          "70: import { EventStatus, IClearEvent, IEvent, MatrixEvent, MatrixEventEvent } from \"../models/event\";",
          "71: import {",
          "72:     ClientEvent,",
          "73:     ICrossSigningKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: import { ToDeviceBatch } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:     setRequestByChannel(channel: IVerificationChannel, request: VerificationRequest): void;",
          "202: }",
          "204: export enum CryptoEvent {",
          "205:     DeviceVerificationChanged = \"deviceVerificationChanged\",",
          "206:     UserTrustStatusChanged = \"userTrustStatusChanged\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: export interface IEncryptedContent {",
          "209:     algorithm: string;",
          "210:     sender_key: string;",
          "211:     ciphertext: Record<string, string>;",
          "212: }",
          "215: export interface IEncryptAndSendToDevicesResult {",
          "216:     toDeviceBatch: ToDeviceBatch;",
          "217:     deviceInfoByUserIdAndDeviceId: Map<string, Map<string, DeviceInfo>>;",
          "218: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3100:         });",
          "3101:     }",
          "3103:     private onMembership = (event: MatrixEvent, member: RoomMember, oldMembership?: string) => {",
          "3104:         try {",
          "3105:             this.onRoomMembership(event, member, oldMembership);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3129:     public async encryptAndSendToDevices(",
          "3130:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "3131:         payload: object,",
          "3132:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "3133:         const toDeviceBatch: ToDeviceBatch = {",
          "3134:             eventType: EventType.RoomMessageEncrypted,",
          "3135:             batch: [],",
          "3136:         };",
          "3137:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "3139:         try {",
          "3140:             await Promise.all(userDeviceInfoArr.map(async ({ userId, deviceInfo }) => {",
          "3141:                 const deviceId = deviceInfo.deviceId;",
          "3142:                 const encryptedContent: IEncryptedContent = {",
          "3143:                     algorithm: olmlib.OLM_ALGORITHM,",
          "3144:                     sender_key: this.olmDevice.deviceCurve25519Key,",
          "3145:                     ciphertext: {},",
          "3146:                 };",
          "3149:                 let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "3151:                 if (userIdDeviceInfo === undefined) {",
          "3152:                     userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "3153:                     deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "3154:                 }",
          "3157:                 userIdDeviceInfo.set(deviceId, deviceInfo);",
          "3159:                 toDeviceBatch.batch.push({",
          "3160:                     userId,",
          "3161:                     deviceId,",
          "3162:                     payload: encryptedContent,",
          "3163:                 });",
          "3165:                 await olmlib.ensureOlmSessionsForDevices(",
          "3166:                     this.olmDevice,",
          "3167:                     this.baseApis,",
          "3168:                     { [userId]: [deviceInfo] },",
          "3169:                 );",
          "3170:                 await olmlib.encryptMessageForDevice(",
          "3171:                     encryptedContent.ciphertext,",
          "3172:                     this.userId,",
          "3173:                     this.deviceId,",
          "3174:                     this.olmDevice,",
          "3175:                     userId,",
          "3176:                     deviceInfo,",
          "3177:                     payload,",
          "3178:                 );",
          "3179:             }));",
          "3185:             toDeviceBatch.batch = toDeviceBatch.batch.filter(msg => {",
          "3186:                 if (Object.keys(msg.payload.ciphertext).length > 0) {",
          "3187:                     return true;",
          "3188:                 } else {",
          "3189:                     logger.log(`No ciphertext for device ${msg.userId}:${msg.deviceId}: pruning`);",
          "3190:                     return false;",
          "3191:                 }",
          "3192:             });",
          "3194:             try {",
          "3195:                 await this.baseApis.queueToDevice(toDeviceBatch);",
          "3196:                 return { toDeviceBatch, deviceInfoByUserIdAndDeviceId };",
          "3197:             } catch (e) {",
          "3198:                 logger.error(\"sendToDevice failed\", e);",
          "3199:                 throw e;",
          "3200:             }",
          "3201:         } catch (e) {",
          "3202:             logger.error(\"encryptAndSendToDevices promises failed\", e);",
          "3203:             throw e;",
          "3204:         }",
          "3205:     }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308: \"@matrix-org/olm@https://gitlab.matrix.org/api/v4/projects/27/packages/npm/@matrix-org/olm/-/@matrix-org/olm-3.2.12.tgz\":",
          "1309:   version \"3.2.12\"",
          "1311:   resolved \"https://gitlab.matrix.org/api/v4/projects/27/packages/npm/@matrix-org/olm/-/@matrix-org/olm-3.2.12.tgz#0bce3c86f9d36a4984d3c3e07df1c3fb4c679bd9\"",
          "1313: \"@nicolo-ribaudo/chokidar-2@2.1.8-no-fsevents.3\":",
          "",
          "[Removed Lines]",
          "1310:   uid \"0bce3c86f9d36a4984d3c3e07df1c3fb4c679bd9\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1438:     \"@octokit/openapi-types\" \"^12.10.0\"",
          "1440: \"@sinclair/typebox@^0.24.1\":",
          "1445: \"@sinonjs/commons@^1.7.0\":",
          "1446:   version \"1.8.3\"",
          "",
          "[Removed Lines]",
          "1441:   version \"0.24.20\"",
          "1442:   resolved \"https://registry.yarnpkg.com/@sinclair/typebox/-/typebox-0.24.20.tgz#11a657875de6008622d53f56e063a6347c51a6dd\"",
          "1443:   integrity sha512-kVaO5aEFZb33nPMTZBxiPEkY+slxiPtqC7QX8f9B3eGOMBvEfuMfxp9DSTTCsRJPumPKjrge4yagyssO4q6qzQ==",
          "",
          "[Added Lines]",
          "1440:   version \"0.24.26\"",
          "1441:   resolved \"https://registry.yarnpkg.com/@sinclair/typebox/-/typebox-0.24.26.tgz#84f9e8c1d93154e734a7947609a1dc7c7a81cc22\"",
          "1442:   integrity sha512-1ZVIyyS1NXDRVT8GjWD5jULjhDyM3IsIHef2VGUMdnWOlX2tkPjyEX/7K0TGSH2S8EaPhp1ylFdjSjUGQ+gecg==",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1581:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
          "1583: \"@types/node@*\":",
          "1588: \"@types/node@16\":",
          "1589:   version \"16.11.45\"",
          "",
          "[Removed Lines]",
          "1584:   version \"18.6.1\"",
          "1585:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-18.6.1.tgz#828e4785ccca13f44e2fb6852ae0ef11e3e20ba5\"",
          "1586:   integrity sha512-z+2vB6yDt1fNwKOeGbckpmirO+VBDuQqecXkgeIqDlaOtmKn6hPR/viQ8cxCfqLU4fTlvM3+YjM367TukWdxpg==",
          "",
          "[Added Lines]",
          "1583:   version \"18.6.3\"",
          "1584:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-18.6.3.tgz#4e4a95b6fe44014563ceb514b2598b3e623d1c98\"",
          "1585:   integrity sha512-6qKpDtoaYLM+5+AFChLhHermMQxc3TOEFIDzrZLPRGHPrLEwqFkkT5Kx3ju05g6X7uDPazz3jHbKPX0KzCjntg==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4802:   resolved \"https://registry.yarnpkg.com/matrix-events-sdk/-/matrix-events-sdk-0.0.1-beta.7.tgz#5ffe45eba1f67cc8d7c2377736c728b322524934\"",
          "4803:   integrity sha512-9jl4wtWanUFSy2sr2lCjErN/oC8KTAtaeaozJtrgot1JiQcEI4Rda9OLgQ7nLKaqb4Z/QUx/fR3XpDzm5Jy1JA==",
          "4809:   dependencies:",
          "4810:     expect \"^28.1.0\"",
          "",
          "[Removed Lines]",
          "4805: matrix-mock-request@^2.1.1:",
          "4806:   version \"2.1.1\"",
          "4807:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.1.tgz#a8fc03a2816464bb95445df4cc8885ac36786b23\"",
          "4808:   integrity sha512-CxdaUPRVB4o8JxTBMASstS2loRe+hlqeJu0Q7yyS1r36LkSSo/KAP4AuomsqxuKqaqYYnEJFJzkG0gOhxV7aqA==",
          "",
          "[Added Lines]",
          "4804: matrix-mock-request@^2.1.2:",
          "4805:   version \"2.1.2\"",
          "4806:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.2.tgz#11e38ed1233dced88a6f2bfba1684d5c5b3aa2c2\"",
          "4807:   integrity sha512-/OXCIzDGSLPJ3fs+uzDrtaOHI/Sqp4iEuniRn31U8S06mPXbvAnXknHqJ4c6A/KVwJj/nPFbGXpK4wPM038I6A==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebcb26f1b3b9e2d709615fde03f9ce6ac77871f1",
      "candidate_info": {
        "commit_hash": "ebcb26f1b3b9e2d709615fde03f9ce6ac77871f1",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/ebcb26f1b3b9e2d709615fde03f9ce6ac77871f1",
        "files": [
          ".eslintrc.js",
          ".github/workflows/jsdoc.yml",
          ".github/workflows/notify-downstream.yaml",
          ".github/workflows/pull_request.yaml",
          ".github/workflows/sonarcloud.yml",
          ".github/workflows/sonarqube.yml",
          ".github/workflows/static_analysis.yml",
          ".github/workflows/tests.yml",
          ".istanbul.yml",
          "CHANGELOG.md",
          "CONTRIBUTING.md",
          "package.json",
          "release.sh",
          "renovate.json",
          "spec/TestClient.js",
          "spec/TestClient.ts",
          "spec/integ/devicelist-integ-spec.js",
          "spec/integ/devicelist-integ.spec.js",
          "spec/integ/matrix-client-crypto.spec.js",
          "spec/integ/matrix-client-event-timeline.spec.js",
          "spec/integ/matrix-client-methods.spec.js",
          "spec/integ/matrix-client-opts.spec.js",
          "spec/integ/matrix-client-retrying.spec.ts",
          "spec/integ/matrix-client-room-timeline.spec.js",
          "spec/integ/matrix-client-syncing.spec.js",
          "spec/integ/megolm-backup.spec.ts",
          "spec/integ/megolm-integ.spec.js",
          "spec/test-utils/beacon.ts",
          "spec/test-utils/test-utils.ts",
          "spec/unit/content-helpers.spec.ts",
          "spec/unit/crypto.spec.js",
          "spec/unit/crypto/CrossSigningInfo.spec.js",
          "spec/unit/crypto/CrossSigningInfo.spec.ts",
          "spec/unit/crypto/DeviceList.spec.js",
          "spec/unit/crypto/DeviceList.spec.ts",
          "spec/unit/crypto/algorithms/megolm.spec.js",
          "spec/unit/crypto/backup.spec.js",
          "spec/unit/crypto/cross-signing.spec.js",
          "spec/unit/crypto/cross-signing.spec.ts",
          "spec/unit/crypto/outgoing-room-key-requests.spec.js",
          "spec/unit/crypto/outgoing-room-key-requests.spec.ts",
          "spec/unit/crypto/secrets.spec.js",
          "spec/unit/crypto/secrets.spec.ts",
          "spec/unit/crypto/verification/request.spec.js",
          "spec/unit/crypto/verification/sas.spec.js",
          "spec/unit/crypto/verification/util.js",
          "spec/unit/event-mapper.spec.ts",
          "spec/unit/event-timeline-set.spec.ts",
          "spec/unit/event-timeline.spec.js",
          "spec/unit/filter-component.spec.ts",
          "spec/unit/interactive-auth.spec.js",
          "spec/unit/matrix-client.spec.ts",
          "spec/unit/models/beacon.spec.ts",
          "spec/unit/models/thread.spec.ts",
          "spec/unit/pushprocessor.spec.js",
          "spec/unit/relations.spec.ts",
          "spec/unit/room-state.spec.js",
          "spec/unit/room.spec.ts",
          "spec/unit/stores/indexeddb.spec.ts",
          "spec/unit/timeline-window.spec.js",
          "spec/unit/webrtc/call.spec.ts",
          "spec/unit/webrtc/callEventHandler.spec.ts",
          "src/@types/event.ts",
          "src/@types/requests.ts",
          "src/@types/topic.ts",
          "src/autodiscovery.ts",
          "src/client.ts",
          "src/content-helpers.ts",
          "src/crypto/CrossSigning.ts",
          "src/crypto/DeviceList.ts",
          "src/crypto/OlmDevice.ts",
          "src/crypto/SecretStorage.ts",
          "src/crypto/algorithms/base.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/algorithms/olm.ts",
          "src/crypto/backup.ts",
          "src/crypto/index.ts",
          "src/crypto/keybackup.ts",
          "src/crypto/olmlib.ts",
          "src/crypto/recoverykey.ts",
          "src/crypto/store/indexeddb-crypto-store.ts",
          "src/crypto/verification/request/VerificationRequest.ts",
          "src/http-api.ts",
          "src/interactive-auth.ts",
          "src/matrix.ts",
          "src/models/beacon.ts",
          "src/models/event-timeline-set.ts",
          "src/models/event-timeline.ts",
          "src/models/event.ts",
          "src/models/relations-container.ts",
          "src/models/relations.ts",
          "src/models/room-state.ts",
          "src/models/room.ts",
          "src/models/thread.ts",
          "src/pushprocessor.ts",
          "src/store/index.ts",
          "src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts",
          "src/store/memory.ts",
          "src/store/session/webstorage.js",
          "src/store/stub.ts",
          "src/sync-accumulator.ts",
          "src/sync.ts",
          "src/webrtc/call.ts",
          "src/webrtc/callEventHandler.ts",
          "yarn.lock",
          ".github/CODEOWNERS",
          "spec/unit/crypto/algorithms/megolm.spec.js",
          "spec/unit/webrtc/call.spec.ts",
          "spec/unit/webrtc/callEventHandler.spec.ts",
          "src/@types/event.ts",
          "src/client.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts",
          "src/matrix.ts",
          "src/webrtc/call.ts",
          "src/webrtc/callEventHandler.ts",
          "src/webrtc/callEventTypes.ts",
          "src/webrtc/callFeed.ts",
          "src/webrtc/groupCall.ts",
          "src/webrtc/groupCallEventHandler.ts",
          "src/webrtc/mediaHandler.ts"
        ],
        "message": "Merge branch 'develop' into robertlong/group-call",
        "before_after_code_files": [
          ".eslintrc.js||.eslintrc.js",
          "release.sh||release.sh",
          "spec/TestClient.js||spec/TestClient.js",
          "spec/TestClient.ts||spec/TestClient.ts",
          "spec/integ/devicelist-integ-spec.js||spec/integ/devicelist-integ.spec.js",
          "spec/integ/matrix-client-crypto.spec.js||spec/integ/matrix-client-crypto.spec.js",
          "spec/integ/matrix-client-event-timeline.spec.js||spec/integ/matrix-client-event-timeline.spec.js",
          "spec/integ/matrix-client-methods.spec.js||spec/integ/matrix-client-methods.spec.js",
          "spec/integ/matrix-client-opts.spec.js||spec/integ/matrix-client-opts.spec.js",
          "spec/integ/matrix-client-retrying.spec.ts||spec/integ/matrix-client-retrying.spec.ts",
          "spec/integ/matrix-client-room-timeline.spec.js||spec/integ/matrix-client-room-timeline.spec.js",
          "spec/integ/matrix-client-syncing.spec.js||spec/integ/matrix-client-syncing.spec.js",
          "spec/integ/megolm-backup.spec.ts||spec/integ/megolm-backup.spec.ts",
          "spec/integ/megolm-integ.spec.js||spec/integ/megolm-integ.spec.js",
          "spec/test-utils/beacon.ts||spec/test-utils/beacon.ts",
          "spec/test-utils/test-utils.ts||spec/test-utils/test-utils.ts",
          "spec/unit/content-helpers.spec.ts||spec/unit/content-helpers.spec.ts",
          "spec/unit/crypto.spec.js||spec/unit/crypto.spec.js",
          "spec/unit/crypto/CrossSigningInfo.spec.js||spec/unit/crypto/CrossSigningInfo.spec.ts",
          "spec/unit/crypto/DeviceList.spec.js||spec/unit/crypto/DeviceList.spec.ts",
          "spec/unit/crypto/algorithms/megolm.spec.js||spec/unit/crypto/algorithms/megolm.spec.js",
          "spec/unit/crypto/backup.spec.js||spec/unit/crypto/backup.spec.js",
          "spec/unit/crypto/cross-signing.spec.js||spec/unit/crypto/cross-signing.spec.ts",
          "spec/unit/crypto/outgoing-room-key-requests.spec.js||spec/unit/crypto/outgoing-room-key-requests.spec.ts",
          "spec/unit/crypto/secrets.spec.js||spec/unit/crypto/secrets.spec.ts",
          "spec/unit/crypto/verification/request.spec.js||spec/unit/crypto/verification/request.spec.js",
          "spec/unit/crypto/verification/sas.spec.js||spec/unit/crypto/verification/sas.spec.js",
          "spec/unit/crypto/verification/util.js||spec/unit/crypto/verification/util.js",
          "spec/unit/event-mapper.spec.ts||spec/unit/event-mapper.spec.ts",
          "spec/unit/event-timeline-set.spec.ts||spec/unit/event-timeline-set.spec.ts",
          "spec/unit/event-timeline.spec.js||spec/unit/event-timeline.spec.js",
          "spec/unit/filter-component.spec.ts||spec/unit/filter-component.spec.ts",
          "spec/unit/interactive-auth.spec.js||spec/unit/interactive-auth.spec.js",
          "spec/unit/matrix-client.spec.ts||spec/unit/matrix-client.spec.ts",
          "spec/unit/models/beacon.spec.ts||spec/unit/models/beacon.spec.ts",
          "spec/unit/models/thread.spec.ts||spec/unit/models/thread.spec.ts",
          "spec/unit/pushprocessor.spec.js||spec/unit/pushprocessor.spec.js",
          "spec/unit/relations.spec.ts||spec/unit/relations.spec.ts",
          "spec/unit/room-state.spec.js||spec/unit/room-state.spec.js",
          "spec/unit/room.spec.ts||spec/unit/room.spec.ts",
          "spec/unit/stores/indexeddb.spec.ts||spec/unit/stores/indexeddb.spec.ts",
          "spec/unit/timeline-window.spec.js||spec/unit/timeline-window.spec.js",
          "spec/unit/webrtc/call.spec.ts||spec/unit/webrtc/call.spec.ts",
          "spec/unit/webrtc/callEventHandler.spec.ts||spec/unit/webrtc/callEventHandler.spec.ts",
          "src/@types/event.ts||src/@types/event.ts",
          "src/@types/requests.ts||src/@types/requests.ts",
          "src/@types/topic.ts||src/@types/topic.ts",
          "src/autodiscovery.ts||src/autodiscovery.ts",
          "src/client.ts||src/client.ts",
          "src/content-helpers.ts||src/content-helpers.ts",
          "src/crypto/CrossSigning.ts||src/crypto/CrossSigning.ts",
          "src/crypto/DeviceList.ts||src/crypto/DeviceList.ts",
          "src/crypto/OlmDevice.ts||src/crypto/OlmDevice.ts",
          "src/crypto/SecretStorage.ts||src/crypto/SecretStorage.ts",
          "src/crypto/algorithms/base.ts||src/crypto/algorithms/base.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/algorithms/olm.ts||src/crypto/algorithms/olm.ts",
          "src/crypto/backup.ts||src/crypto/backup.ts",
          "src/crypto/index.ts||src/crypto/index.ts",
          "src/crypto/keybackup.ts||src/crypto/keybackup.ts",
          "src/crypto/olmlib.ts||src/crypto/olmlib.ts",
          "src/crypto/recoverykey.ts||src/crypto/recoverykey.ts",
          "src/crypto/store/indexeddb-crypto-store.ts||src/crypto/store/indexeddb-crypto-store.ts",
          "src/crypto/verification/request/VerificationRequest.ts||src/crypto/verification/request/VerificationRequest.ts",
          "src/http-api.ts||src/http-api.ts",
          "src/interactive-auth.ts||src/interactive-auth.ts",
          "src/matrix.ts||src/matrix.ts",
          "src/models/beacon.ts||src/models/beacon.ts",
          "src/models/event-timeline-set.ts||src/models/event-timeline-set.ts",
          "src/models/event-timeline.ts||src/models/event-timeline.ts",
          "src/models/event.ts||src/models/event.ts",
          "src/models/relations-container.ts||src/models/relations-container.ts",
          "src/models/relations.ts||src/models/relations.ts",
          "src/models/room-state.ts||src/models/room-state.ts",
          "src/models/room.ts||src/models/room.ts",
          "src/models/thread.ts||src/models/thread.ts",
          "src/pushprocessor.ts||src/pushprocessor.ts",
          "src/store/index.ts||src/store/index.ts",
          "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts||src/store/indexeddb.ts",
          "src/store/memory.ts||src/store/memory.ts",
          "src/store/session/webstorage.js||src/store/session/webstorage.js",
          "src/store/stub.ts||src/store/stub.ts",
          "src/sync-accumulator.ts||src/sync-accumulator.ts",
          "src/sync.ts||src/sync.ts",
          "src/webrtc/call.ts||src/webrtc/call.ts",
          "src/webrtc/callEventHandler.ts||src/webrtc/callEventHandler.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        ".eslintrc.js||.eslintrc.js": [
          "File: .eslintrc.js -> .eslintrc.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:             \"@typescript-eslint/no-explicit-any\": \"off\",",
          "54:             \"@typescript-eslint/ban-ts-comment\": \"off\",",
          "56:             \"quotes\": \"off\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:             \"@typescript-eslint/no-non-null-assertion\": \"off\",",
          "",
          "---------------"
        ],
        "release.sh||release.sh": [
          "File: release.sh -> release.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: npm --version > /dev/null || (echo \"npm is required: please install it\"; kill $$)",
          "30: yarn --version > /dev/null || (echo \"yarn is required: please install it\"; kill $$)",
          "34: help() {",
          "35:     cat <<EOF",
          "",
          "[Removed Lines]",
          "32: USAGE=\"$0 [-xz] [-c changelog_file] vX.Y.Z\"",
          "",
          "[Added Lines]",
          "32: USAGE=\"$0 [-x] [-c changelog_file] vX.Y.Z\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     -c changelog_file:  specify name of file containing changelog",
          "39:     -x:                 skip updating the changelog",
          "41:     -n:                 skip publish to NPM",
          "42: EOF",
          "43: }",
          "",
          "[Removed Lines]",
          "40:     -z:                 skip generating the jsdoc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: fi",
          "62: skip_changelog=",
          "64: skip_npm=",
          "65: changelog_file=\"CHANGELOG.md\"",
          "66: expected_npm_user=\"matrixdotorg\"",
          "",
          "[Removed Lines]",
          "63: skip_jsdoc=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:         x)",
          "77:             skip_changelog=1",
          "78:             ;;",
          "82:         n)",
          "83:             skip_npm=1",
          "84:             ;;",
          "",
          "[Removed Lines]",
          "79:         z)",
          "80:             skip_jsdoc=1",
          "81:             ;;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "326:     fi",
          "327: fi",
          "345: # if it is a pre-release, leave it on the release branch for now.",
          "346: if [ $prerelease -eq 1 ]; then",
          "347:     git checkout \"$rel_branch\"",
          "",
          "[Removed Lines]",
          "329: if [ -z \"$skip_jsdoc\" ]; then",
          "330:     echo \"generating jsdocs\"",
          "331:     yarn gendoc",
          "333:     echo \"copying jsdocs to gh-pages branch\"",
          "334:     git checkout gh-pages",
          "335:     git pull",
          "336:     cp -a \".jsdoc/matrix-js-sdk/$release\" .",
          "337:     perl -i -pe 'BEGIN {$rel=shift} $_ =~ /^<\\/ul>/ && print",
          "338:         \"<li><a href=\\\"${rel}/index.html\\\">Version ${rel}</a></li>\\n\"' \\",
          "339:         $release index.html",
          "340:     git add \"$release\"",
          "341:     git commit --no-verify -m \"Add jsdoc for $release\" index.html \"$release\"",
          "342:     git push origin gh-pages",
          "343: fi",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spec/TestClient.js||spec/TestClient.js": [
          "File: spec/TestClient.js -> spec/TestClient.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spec/TestClient.ts||spec/TestClient.ts": [
          "File: spec/TestClient.ts -> spec/TestClient.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2016 OpenMarket Ltd",
          "3: Copyright 2017 Vector Creations Ltd",
          "4: Copyright 2018-2019 New Vector Ltd",
          "6: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "7: you may not use this file except in compliance with the License.",
          "8: You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "20: import './olm-loader';",
          "22: import MockHttpBackend from 'matrix-mock-request';",
          "24: import { LocalStorageCryptoStore } from '../src/crypto/store/localStorage-crypto-store';",
          "25: import { logger } from '../src/logger';",
          "26: import { syncPromise } from \"./test-utils/test-utils\";",
          "27: import { createClient } from \"../src/matrix\";",
          "28: import { ICreateClientOpts, IDownloadKeyResult, MatrixClient, PendingEventOrdering } from \"../src/client\";",
          "29: import { MockStorageApi } from \"./MockStorageApi\";",
          "30: import { encodeUri } from \"../src/utils\";",
          "31: import { IDeviceKeys, IOneTimeKey } from \"../src/crypto/dehydration\";",
          "32: import { IKeyBackupSession } from \"../src/crypto/keybackup\";",
          "33: import { IHttpOpts } from \"../src/http-api\";",
          "34: import { IKeysUploadResponse, IUploadKeysRequest } from '../src/client';",
          "39: export class TestClient {",
          "40:     public readonly httpBackend: MockHttpBackend;",
          "41:     public readonly client: MatrixClient;",
          "42:     private deviceKeys: IDeviceKeys;",
          "43:     private oneTimeKeys: Record<string, IOneTimeKey>;",
          "45:     constructor(",
          "46:         public readonly userId?: string,",
          "47:         public readonly deviceId?: string,",
          "48:         accessToken?: string,",
          "49:         sessionStoreBackend?: Storage,",
          "50:         options?: Partial<ICreateClientOpts>,",
          "51:     ) {",
          "52:         if (sessionStoreBackend === undefined) {",
          "53:             sessionStoreBackend = new MockStorageApi();",
          "54:         }",
          "56:         this.httpBackend = new MockHttpBackend();",
          "58:         const fullOptions: ICreateClientOpts = {",
          "59:             baseUrl: \"http://\" + userId + \".test.server\",",
          "60:             userId: userId,",
          "61:             accessToken: accessToken,",
          "62:             deviceId: deviceId,",
          "63:             request: this.httpBackend.requestFn as IHttpOpts[\"request\"],",
          "64:             ...options,",
          "65:         };",
          "66:         if (!fullOptions.cryptoStore) {",
          "68:             fullOptions.cryptoStore = new LocalStorageCryptoStore(sessionStoreBackend);",
          "69:         }",
          "70:         this.client = createClient(fullOptions);",
          "72:         this.deviceKeys = null;",
          "73:         this.oneTimeKeys = {};",
          "74:     }",
          "76:     public toString(): string {",
          "77:         return 'TestClient[' + this.userId + ']';",
          "78:     }",
          "83:     public start(): Promise<void> {",
          "84:         logger.log(this + ': starting');",
          "85:         this.httpBackend.when(\"GET\", \"/versions\").respond(200, {});",
          "86:         this.httpBackend.when(\"GET\", \"/pushrules\").respond(200, {});",
          "87:         this.httpBackend.when(\"POST\", \"/filter\").respond(200, { filter_id: \"fid\" });",
          "88:         this.expectDeviceKeyUpload();",
          "92:         this.httpBackend.when(\"GET\", \"/sync\").respond(200, { next_batch: 1 });",
          "94:         this.client.startClient({",
          "96:             pendingEventOrdering: PendingEventOrdering.Detached,",
          "97:         });",
          "99:         return Promise.all([",
          "100:             this.httpBackend.flushAllExpected(),",
          "101:             syncPromise(this.client),",
          "102:         ]).then(() => {",
          "103:             logger.log(this + ': started');",
          "104:         });",
          "105:     }",
          "111:     public async stop(): Promise<void> {",
          "112:         this.client.stopClient();",
          "113:         await this.httpBackend.stop();",
          "114:     }",
          "119:     public expectDeviceKeyUpload() {",
          "120:         this.httpBackend.when(\"POST\", \"/keys/upload\")",
          "121:             .respond<IKeysUploadResponse, IUploadKeysRequest>(200, (_path, content) => {",
          "122:                 expect(content.one_time_keys).toBe(undefined);",
          "123:                 expect(content.device_keys).toBeTruthy();",
          "125:                 logger.log(this + ': received device keys');",
          "127:                 expect(Object.keys(this.oneTimeKeys).length).toEqual(0);",
          "129:                 this.deviceKeys = content.device_keys;",
          "130:                 return { one_time_key_counts: { signed_curve25519: 0 } };",
          "131:             });",
          "132:     }",
          "141:     public awaitOneTimeKeyUpload(): Promise<Record<string, IOneTimeKey>> {",
          "142:         if (Object.keys(this.oneTimeKeys).length != 0) {",
          "144:             return Promise.resolve(this.oneTimeKeys);",
          "145:         }",
          "147:         this.httpBackend.when(\"POST\", \"/keys/upload\")",
          "148:             .respond<IKeysUploadResponse, IUploadKeysRequest>(200, (_path, content: IUploadKeysRequest) => {",
          "149:                 expect(content.device_keys).toBe(undefined);",
          "150:                 expect(content.one_time_keys).toBe(undefined);",
          "151:                 return { one_time_key_counts: {",
          "152:                     signed_curve25519: Object.keys(this.oneTimeKeys).length,",
          "153:                 } };",
          "154:             });",
          "156:         this.httpBackend.when(\"POST\", \"/keys/upload\")",
          "157:             .respond<IKeysUploadResponse, IUploadKeysRequest>(200, (_path, content: IUploadKeysRequest) => {",
          "158:                 expect(content.device_keys).toBe(undefined);",
          "159:                 expect(content.one_time_keys).toBeTruthy();",
          "160:                 expect(content.one_time_keys).not.toEqual({});",
          "161:                 logger.log('%s: received %i one-time keys', this,",
          "162:                     Object.keys(content.one_time_keys).length);",
          "163:                 this.oneTimeKeys = content.one_time_keys;",
          "164:                 return { one_time_key_counts: {",
          "165:                     signed_curve25519: Object.keys(this.oneTimeKeys).length,",
          "166:                 } };",
          "167:             });",
          "170:         return this.httpBackend.flush('/keys/upload', 2, 1000).then((flushed) => {",
          "171:             expect(flushed).toEqual(2);",
          "172:             return this.oneTimeKeys;",
          "173:         });",
          "174:     }",
          "183:     public expectKeyQuery(response: IDownloadKeyResult) {",
          "184:         this.httpBackend.when('POST', '/keys/query').respond<IDownloadKeyResult>(",
          "185:             200, (_path, content) => {",
          "186:                 Object.keys(response.device_keys).forEach((userId) => {",
          "187:                     expect(content.device_keys[userId]).toEqual([]);",
          "188:                 });",
          "189:                 return response;",
          "190:             });",
          "191:     }",
          "196:     public expectKeyBackupQuery(roomId: string, sessionId: string, status: number, response: IKeyBackupSession) {",
          "197:         this.httpBackend.when('GET', encodeUri(\"/room_keys/keys/$roomId/$sessionId\", {",
          "198:             $roomId: roomId,",
          "199:             $sessionId: sessionId,",
          "200:         })).respond(status, response);",
          "201:     }",
          "208:     public getDeviceKey(): string {",
          "209:         const keyId = 'curve25519:' + this.deviceId;",
          "210:         return this.deviceKeys.keys[keyId];",
          "211:     }",
          "218:     public getSigningKey(): string {",
          "219:         const keyId = 'ed25519:' + this.deviceId;",
          "220:         return this.deviceKeys.keys[keyId];",
          "221:     }",
          "226:     public flushSync(): Promise<void> {",
          "227:         logger.log(`${this}: flushSync`);",
          "228:         return Promise.all([",
          "229:             this.httpBackend.flush('/sync', 1),",
          "230:             syncPromise(this.client),",
          "231:         ]).then(() => {",
          "232:             logger.log(`${this}: flushSync completed`);",
          "233:         });",
          "234:     }",
          "236:     public isFallbackICEServerAllowed(): boolean {",
          "237:         return true;",
          "238:     }",
          "239: }",
          "",
          "---------------"
        ],
        "spec/integ/devicelist-integ-spec.js||spec/integ/devicelist-integ.spec.js": [
          "File: spec/integ/devicelist-integ-spec.js -> spec/integ/devicelist-integ.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         });",
          "137:     });",
          "273:     describe(\"Alice should know she has stale device lists\", () => {",
          "",
          "[Removed Lines]",
          "139:     it(\"We should not get confused by out-of-order device query responses\",",
          "140:        () => {",
          "142:            aliceTestClient.expectKeyQuery({ device_keys: { '@alice:localhost': {} } });",
          "143:            return aliceTestClient.start().then(() => {",
          "144:                aliceTestClient.httpBackend.when('GET', '/sync').respond(",
          "145:                    200, getSyncResponse(['@bob:xyz', '@chris:abc']));",
          "146:                return aliceTestClient.flushSync();",
          "147:            }).then(() => {",
          "151:                aliceTestClient.httpBackend.when('POST', '/keys/query').respond(",
          "152:                    200, {",
          "153:                        device_keys: {",
          "154:                            '@bob:xyz': {},",
          "155:                            '@chris:abc': {},",
          "156:                        },",
          "157:                    },",
          "158:                );",
          "160:                aliceTestClient.httpBackend.when('PUT', '/send/').respond(",
          "161:                    200, { event_id: '$event1' });",
          "163:                return Promise.all([",
          "164:                    aliceTestClient.client.sendTextMessage(ROOM_ID, 'test'),",
          "165:                    aliceTestClient.httpBackend.flush('/keys/query', 1).then(",
          "166:                        () => aliceTestClient.httpBackend.flush('/send/', 1),",
          "167:                    ),",
          "168:                    aliceTestClient.client.crypto.deviceList.saveIfDirty(),",
          "169:                ]);",
          "170:            }).then(() => {",
          "171:                aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "172:                    expect(data.syncToken).toEqual(1);",
          "173:                });",
          "176:                aliceTestClient.httpBackend.when('GET', '/sync').respond(200, {",
          "177:                    next_batch: '2',",
          "178:                    device_lists: {",
          "179:                        changed: ['@bob:xyz'],",
          "180:                    },",
          "181:                });",
          "182:                aliceTestClient.httpBackend.when('GET', '/sync').respond(200, {",
          "183:                    next_batch: '3',",
          "184:                    device_lists: {",
          "185:                        changed: ['@chris:abc'],",
          "186:                    },",
          "187:                });",
          "189:                return aliceTestClient.flushSync().then(() => {",
          "190:                    return aliceTestClient.flushSync();",
          "191:                });",
          "192:            }).then(() => {",
          "194:                aliceTestClient.httpBackend.when('POST', '/keys/query', {",
          "195:                    device_keys: {",
          "196:                        '@chris:abc': {},",
          "197:                    },",
          "198:                    token: '3',",
          "199:                }).respond(200, {",
          "200:                    device_keys: { '@chris:abc': {} },",
          "201:                });",
          "202:                return aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "203:            }).then((flushed) => {",
          "204:                expect(flushed).toEqual(0);",
          "205:                return aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "206:            }).then(() => {",
          "207:                aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "208:                    const bobStat = data.trackingStatus['@bob:xyz'];",
          "209:                    if (bobStat != 1 && bobStat != 2) {",
          "210:                        throw new Error('Unexpected status for bob: wanted 1 or 2, got ' +",
          "211:                                        bobStat);",
          "212:                    }",
          "213:                    const chrisStat = data.trackingStatus['@chris:abc'];",
          "214:                    if (chrisStat != 1 && chrisStat != 2) {",
          "215:                        throw new Error(",
          "216:                            'Unexpected status for chris: wanted 1 or 2, got ' + chrisStat,",
          "217:                        );",
          "218:                    }",
          "219:                });",
          "223:                aliceTestClient.httpBackend.when('POST', '/keys/query', {",
          "224:                    device_keys: {",
          "225:                        '@bob:xyz': {},",
          "226:                    },",
          "227:                    token: '2',",
          "228:                }).respond(200, {",
          "229:                    device_keys: { '@bob:xyz': {} },",
          "230:                });",
          "231:                return aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "232:            }).then((flushed) => {",
          "233:                expect(flushed).toEqual(1);",
          "236:                return aliceTestClient.client.downloadKeys(['@bob:xyz']);",
          "237:            }).then(() => {",
          "238:                return aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "239:            }).then(() => {",
          "240:                aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "241:                    const bobStat = data.trackingStatus['@bob:xyz'];",
          "242:                    expect(bobStat).toEqual(3);",
          "243:                    const chrisStat = data.trackingStatus['@chris:abc'];",
          "244:                    if (chrisStat != 1 && chrisStat != 2) {",
          "245:                        throw new Error(",
          "246:                            'Unexpected status for chris: wanted 1 or 2, got ' + bobStat,",
          "247:                        );",
          "248:                    }",
          "249:                });",
          "252:                return aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "253:            }).then((flushed) => {",
          "254:                expect(flushed).toEqual(1);",
          "257:                return aliceTestClient.client.downloadKeys(['@chris:abc']);",
          "258:            }).then(() => {",
          "259:                return aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "260:            }).then(() => {",
          "261:                aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "262:                    const bobStat = data.trackingStatus['@bob:xyz'];",
          "263:                    const chrisStat = data.trackingStatus['@bob:xyz'];",
          "265:                    expect(bobStat).toEqual(3);",
          "266:                    expect(chrisStat).toEqual(3);",
          "267:                    expect(data.syncToken).toEqual(3);",
          "268:                });",
          "269:            });",
          "270:        }).timeout(3000);",
          "",
          "[Added Lines]",
          "139:     it.skip(\"We should not get confused by out-of-order device query responses\", () => {",
          "141:         aliceTestClient.expectKeyQuery({ device_keys: { '@alice:localhost': {} } });",
          "142:         return aliceTestClient.start().then(() => {",
          "143:             aliceTestClient.httpBackend.when('GET', '/sync').respond(",
          "144:                 200, getSyncResponse(['@bob:xyz', '@chris:abc']));",
          "145:             return aliceTestClient.flushSync();",
          "146:         }).then(() => {",
          "150:             aliceTestClient.httpBackend.when('POST', '/keys/query').respond(",
          "151:                 200, {",
          "152:                     device_keys: {",
          "153:                         '@bob:xyz': {},",
          "154:                         '@chris:abc': {},",
          "155:                     },",
          "156:                 },",
          "157:             );",
          "159:             aliceTestClient.httpBackend.when('PUT', '/send/').respond(",
          "160:                 200, { event_id: '$event1' });",
          "162:             return Promise.all([",
          "163:                 aliceTestClient.client.sendTextMessage(ROOM_ID, 'test'),",
          "164:                 aliceTestClient.httpBackend.flush('/keys/query', 1).then(",
          "165:                     () => aliceTestClient.httpBackend.flush('/send/', 1),",
          "166:                 ),",
          "167:                 aliceTestClient.client.crypto.deviceList.saveIfDirty(),",
          "168:             ]);",
          "169:         }).then(() => {",
          "170:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "171:                 expect(data.syncToken).toEqual(1);",
          "172:             });",
          "175:             aliceTestClient.httpBackend.when('GET', '/sync').respond(200, {",
          "176:                 next_batch: '2',",
          "177:                 device_lists: {",
          "178:                     changed: ['@bob:xyz'],",
          "179:                 },",
          "180:             });",
          "181:             aliceTestClient.httpBackend.when('GET', '/sync').respond(200, {",
          "182:                 next_batch: '3',",
          "183:                 device_lists: {",
          "184:                     changed: ['@chris:abc'],",
          "185:                 },",
          "186:             });",
          "188:             return aliceTestClient.flushSync().then(() => {",
          "189:                 return aliceTestClient.flushSync();",
          "190:             });",
          "191:         }).then(() => {",
          "193:             aliceTestClient.httpBackend.when('POST', '/keys/query', {",
          "194:                 device_keys: {",
          "195:                     '@chris:abc': {},",
          "196:                 },",
          "197:                 token: '3',",
          "198:             }).respond(200, {",
          "199:                 device_keys: { '@chris:abc': {} },",
          "200:             });",
          "201:             return aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "202:         }).then((flushed) => {",
          "203:             expect(flushed).toEqual(0);",
          "204:             return aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "205:         }).then(() => {",
          "206:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "207:                 const bobStat = data.trackingStatus['@bob:xyz'];",
          "208:                 if (bobStat != 1 && bobStat != 2) {",
          "209:                     throw new Error('Unexpected status for bob: wanted 1 or 2, got ' +",
          "210:                         bobStat);",
          "211:                 }",
          "212:                 const chrisStat = data.trackingStatus['@chris:abc'];",
          "213:                 if (chrisStat != 1 && chrisStat != 2) {",
          "214:                     throw new Error(",
          "215:                         'Unexpected status for chris: wanted 1 or 2, got ' + chrisStat,",
          "216:                     );",
          "217:                 }",
          "218:             });",
          "222:             aliceTestClient.httpBackend.when('POST', '/keys/query', {",
          "223:                 device_keys: {",
          "224:                     '@bob:xyz': {},",
          "225:                 },",
          "226:                 token: '2',",
          "227:             }).respond(200, {",
          "228:                 device_keys: { '@bob:xyz': {} },",
          "229:             });",
          "230:             return aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "231:         }).then((flushed) => {",
          "232:             expect(flushed).toEqual(1);",
          "235:             return aliceTestClient.client.downloadKeys(['@bob:xyz']);",
          "236:         }).then(() => {",
          "237:             return aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "238:         }).then(() => {",
          "239:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "240:                 const bobStat = data.trackingStatus['@bob:xyz'];",
          "241:                 expect(bobStat).toEqual(3);",
          "242:                 const chrisStat = data.trackingStatus['@chris:abc'];",
          "243:                 if (chrisStat != 1 && chrisStat != 2) {",
          "244:                     throw new Error(",
          "245:                         'Unexpected status for chris: wanted 1 or 2, got ' + bobStat,",
          "246:                     );",
          "247:                 }",
          "248:             });",
          "251:             return aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "252:         }).then((flushed) => {",
          "253:             expect(flushed).toEqual(1);",
          "256:             return aliceTestClient.client.downloadKeys(['@chris:abc']);",
          "257:         }).then(() => {",
          "258:             return aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "259:         }).then(() => {",
          "260:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "261:                 const bobStat = data.trackingStatus['@bob:xyz'];",
          "262:                 const chrisStat = data.trackingStatus['@bob:xyz'];",
          "264:                 expect(bobStat).toEqual(3);",
          "265:                 expect(chrisStat).toEqual(3);",
          "266:                 expect(data.syncToken).toEqual(3);",
          "267:             });",
          "268:         });",
          "269:     });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:             await aliceTestClient.httpBackend.flush('/keys/query', 1);",
          "289:             await aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "292:                 const bobStat = data.trackingStatus['@bob:xyz'];",
          "294:                 expect(bobStat).toBeGreaterThan(",
          "",
          "[Removed Lines]",
          "291:             aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "[Added Lines]",
          "290:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:             await aliceTestClient.flushSync();",
          "325:             await aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "328:                 const bobStat = data.trackingStatus['@bob:xyz'];",
          "330:                 expect(bobStat).toEqual(",
          "",
          "[Removed Lines]",
          "327:             aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "[Added Lines]",
          "326:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "360:             await aliceTestClient.flushSync();",
          "361:             await aliceTestClient.client.crypto.deviceList.saveIfDirty();",
          "364:                 const bobStat = data.trackingStatus['@bob:xyz'];",
          "366:                 expect(bobStat).toEqual(",
          "",
          "[Removed Lines]",
          "363:             aliceTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "[Added Lines]",
          "362:             aliceTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "381:                 await anotherTestClient.flushSync();",
          "382:                 await anotherTestClient.client.crypto.deviceList.saveIfDirty();",
          "385:                     const bobStat = data.trackingStatus['@bob:xyz'];",
          "387:                     expect(bobStat).toEqual(",
          "",
          "[Removed Lines]",
          "384:                 anotherTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "[Added Lines]",
          "383:                 anotherTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-crypto.spec.js||spec/integ/matrix-client-crypto.spec.js": [
          "File: spec/integ/matrix-client-crypto.spec.js -> spec/integ/matrix-client-crypto.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     return Promise.all([p1, p2]).then(() => {",
          "162:         return aliTestClient.client.crypto.deviceList.saveIfDirty();",
          "163:     }).then(() => {",
          "165:             const devices = data.devices[bobUserId];",
          "166:             expect(devices[bobDeviceId].keys).toEqual(bobTestClient.deviceKeys.keys);",
          "167:             expect(devices[bobDeviceId].verified).",
          "",
          "[Removed Lines]",
          "164:         aliTestClient.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "[Added Lines]",
          "164:         aliTestClient.client.cryptoStore.getEndToEndDeviceData(null, (data) => {",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-event-timeline.spec.js||spec/integ/matrix-client-event-timeline.spec.js": [
          "File: spec/integ/matrix-client-event-timeline.spec.js -> spec/integ/matrix-client-event-timeline.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as utils from \"../test-utils/test-utils\";",
          "3: import { logger } from \"../../src/logger\";",
          "4: import { TestClient } from \"../TestClient\";",
          "5: import { Thread, THREAD_RELATION_TYPE } from \"../../src/models/thread\";",
          "",
          "[Removed Lines]",
          "2: import { EventTimeline } from \"../../src/matrix\";",
          "",
          "[Added Lines]",
          "2: import { EventTimeline, Filter, MatrixEvent } from \"../../src/matrix\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     }),",
          "71: ];",
          "74:     room: roomId,",
          "75:     user: userId,",
          "77: });",
          "79: const THREAD_REPLY = utils.mkEvent({",
          "",
          "[Removed Lines]",
          "73: const THREAD_ROOT = utils.mkMessage({",
          "76:     msg: \"thread root\",",
          "",
          "[Added Lines]",
          "73: const THREAD_ROOT = utils.mkEvent({",
          "76:     type: \"m.room.message\",",
          "77:     content: {",
          "78:         \"body\": \"thread root\",",
          "79:         \"msgtype\": \"m.text\",",
          "80:     },",
          "81:     unsigned: {",
          "82:         \"m.relations\": {",
          "83:             \"io.element.thread\": {",
          "84:                 \"latest_event\": undefined,",
          "85:                 \"count\": 1,",
          "86:                 \"current_user_participated\": true,",
          "87:             },",
          "88:         },",
          "89:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     },",
          "92: });",
          "95: function startClient(httpBackend, client) {",
          "96:     httpBackend.when(\"GET\", \"/versions\").respond(200, {});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: THREAD_ROOT.unsigned[\"m.relations\"][\"io.element.thread\"].latest_event = THREAD_REPLY;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:             Thread.setServerSideSupport(true);",
          "501:             client.stopClient(); // we don't need the client to be syncing at this time",
          "502:             const room = client.getRoom(roomId);",
          "505:             httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/context/\" + encodeURIComponent(THREAD_REPLY.event_id))",
          "506:                 .respond(200, function() {",
          "",
          "[Removed Lines]",
          "503:             const timelineSet = room.getTimelineSets()[0];",
          "",
          "[Added Lines]",
          "518:             const thread = room.createThread(THREAD_ROOT.event_id, undefined, [], false);",
          "519:             const timelineSet = thread.timelineSet;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "526:                     return {",
          "527:                         original_event: THREAD_ROOT,",
          "528:                         chunk: [THREAD_REPLY],",
          "531:                     };",
          "532:                 });",
          "",
          "[Removed Lines]",
          "529:                         next_batch: \"next_batch_token0\",",
          "530:                         prev_batch: \"prev_batch_token0\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "537:             const timeline = await timelinePromise;",
          "541:         });",
          "542:     });",
          "",
          "[Removed Lines]",
          "539:             expect(timeline.getEvents().find(e => e.getId() === THREAD_ROOT.event_id));",
          "540:             expect(timeline.getEvents().find(e => e.getId() === THREAD_REPLY.event_id));",
          "",
          "[Added Lines]",
          "554:             expect(timeline.getEvents().find(e => e.getId() === THREAD_ROOT.event_id)).toBeTruthy();",
          "555:             expect(timeline.getEvents().find(e => e.getId() === THREAD_REPLY.event_id)).toBeTruthy();",
          "556:         });",
          "558:         it(\"should return relevant timeline from non-thread timelineSet when asking for the thread root\", async () => {",
          "559:             client.clientOpts.experimentalThreadSupport = true;",
          "560:             Thread.setServerSideSupport(true);",
          "561:             client.stopClient(); // we don't need the client to be syncing at this time",
          "562:             const room = client.getRoom(roomId);",
          "563:             const threadRoot = new MatrixEvent(THREAD_ROOT);",
          "564:             const thread = room.createThread(THREAD_ROOT.event_id, threadRoot, [threadRoot], false);",
          "565:             const timelineSet = room.getTimelineSets()[0];",
          "567:             httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/context/\" + encodeURIComponent(THREAD_ROOT.event_id))",
          "568:                 .respond(200, function() {",
          "569:                     return {",
          "570:                         start: \"start_token0\",",
          "571:                         events_before: [],",
          "572:                         event: THREAD_ROOT,",
          "573:                         events_after: [],",
          "574:                         end: \"end_token0\",",
          "575:                         state: [],",
          "576:                     };",
          "577:                 });",
          "579:             const [timeline] = await Promise.all([",
          "580:                 client.getEventTimeline(timelineSet, THREAD_ROOT.event_id),",
          "581:                 httpBackend.flushAllExpected(),",
          "582:             ]);",
          "584:             expect(timeline).not.toBe(thread.liveTimeline);",
          "585:             expect(timelineSet.getTimelines()).toContain(timeline);",
          "586:             expect(timeline.getEvents().find(e => e.getId() === THREAD_ROOT.event_id)).toBeTruthy();",
          "587:         });",
          "589:         it(\"should return undefined when event is not in the thread that the given timelineSet is representing\", () => {",
          "590:             client.clientOpts.experimentalThreadSupport = true;",
          "591:             Thread.setServerSideSupport(true);",
          "592:             client.stopClient(); // we don't need the client to be syncing at this time",
          "593:             const room = client.getRoom(roomId);",
          "594:             const threadRoot = new MatrixEvent(THREAD_ROOT);",
          "595:             const thread = room.createThread(THREAD_ROOT.event_id, threadRoot, [threadRoot], false);",
          "596:             const timelineSet = thread.timelineSet;",
          "598:             httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/context/\" + encodeURIComponent(EVENTS[0].event_id))",
          "599:                 .respond(200, function() {",
          "600:                     return {",
          "601:                         start: \"start_token0\",",
          "602:                         events_before: [],",
          "603:                         event: EVENTS[0],",
          "604:                         events_after: [],",
          "605:                         end: \"end_token0\",",
          "606:                         state: [],",
          "607:                     };",
          "608:                 });",
          "610:             return Promise.all([",
          "611:                 expect(client.getEventTimeline(timelineSet, EVENTS[0].event_id)).resolves.toBeUndefined(),",
          "612:                 httpBackend.flushAllExpected(),",
          "613:             ]);",
          "614:         });",
          "616:         it(\"should return undefined when event is within a thread but timelineSet is not\", () => {",
          "617:             client.clientOpts.experimentalThreadSupport = true;",
          "618:             Thread.setServerSideSupport(true);",
          "619:             client.stopClient(); // we don't need the client to be syncing at this time",
          "620:             const room = client.getRoom(roomId);",
          "621:             const timelineSet = room.getTimelineSets()[0];",
          "623:             httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/context/\" + encodeURIComponent(THREAD_REPLY.event_id))",
          "624:                 .respond(200, function() {",
          "625:                     return {",
          "626:                         start: \"start_token0\",",
          "627:                         events_before: [],",
          "628:                         event: THREAD_REPLY,",
          "629:                         events_after: [],",
          "630:                         end: \"end_token0\",",
          "631:                         state: [],",
          "632:                     };",
          "633:                 });",
          "635:             return Promise.all([",
          "636:                 expect(client.getEventTimeline(timelineSet, THREAD_REPLY.event_id)).resolves.toBeUndefined(),",
          "637:                 httpBackend.flushAllExpected(),",
          "638:             ]);",
          "639:         });",
          "641:         it(\"should should add lazy loading filter when requested\", async () => {",
          "642:             client.clientOpts.lazyLoadMembers = true;",
          "643:             client.stopClient(); // we don't need the client to be syncing at this time",
          "644:             const room = client.getRoom(roomId);",
          "645:             const timelineSet = room.getTimelineSets()[0];",
          "647:             const req = httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/context/\" + encodeURIComponent(EVENTS[0].event_id));",
          "648:             req.respond(200, function() {",
          "649:                 return {",
          "650:                     start: \"start_token0\",",
          "651:                     events_before: [],",
          "652:                     event: EVENTS[0],",
          "653:                     events_after: [],",
          "654:                     end: \"end_token0\",",
          "655:                     state: [],",
          "656:                 };",
          "657:             });",
          "658:             req.check((request) => {",
          "659:                 expect(request.opts.qs.filter).toEqual(JSON.stringify(Filter.LAZY_LOADING_MESSAGES_FILTER));",
          "660:             });",
          "662:             await Promise.all([",
          "663:                 client.getEventTimeline(timelineSet, EVENTS[0].event_id),",
          "664:                 httpBackend.flushAllExpected(),",
          "665:             ]);",
          "666:         });",
          "667:     });",
          "669:     describe(\"getLatestTimeline\", function() {",
          "670:         it(\"should create a new timeline for new events\", function() {",
          "671:             const room = client.getRoom(roomId);",
          "672:             const timelineSet = room.getTimelineSets()[0];",
          "674:             const latestMessageId = 'event1:bar';",
          "676:             httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/messages\")",
          "677:                 .respond(200, function() {",
          "678:                     return {",
          "679:                         chunk: [{",
          "680:                             event_id: latestMessageId,",
          "681:                         }],",
          "682:                     };",
          "683:                 });",
          "685:             httpBackend.when(\"GET\", `/rooms/!foo%3Abar/context/${encodeURIComponent(latestMessageId)}`)",
          "686:                 .respond(200, function() {",
          "687:                     return {",
          "688:                         start: \"start_token\",",
          "689:                         events_before: [EVENTS[1], EVENTS[0]],",
          "690:                         event: EVENTS[2],",
          "691:                         events_after: [EVENTS[3]],",
          "692:                         state: [",
          "693:                             ROOM_NAME_EVENT,",
          "694:                             USER_MEMBERSHIP_EVENT,",
          "695:                         ],",
          "696:                         end: \"end_token\",",
          "697:                     };",
          "698:                 });",
          "700:             return Promise.all([",
          "701:                 client.getLatestTimeline(timelineSet).then(function(tl) {",
          "706:                     expect(tl.getEvents().length).toEqual(4);",
          "707:                     for (let i = 0; i < 4; i++) {",
          "708:                         expect(tl.getEvents()[i].event).toEqual(EVENTS[i]);",
          "709:                         expect(tl.getEvents()[i].sender.name).toEqual(userName);",
          "710:                     }",
          "711:                     expect(tl.getPaginationToken(EventTimeline.BACKWARDS))",
          "712:                         .toEqual(\"start_token\");",
          "713:                     expect(tl.getPaginationToken(EventTimeline.FORWARDS))",
          "714:                         .toEqual(\"end_token\");",
          "715:                 }),",
          "716:                 httpBackend.flushAllExpected(),",
          "717:             ]);",
          "718:         });",
          "720:         it(\"should throw error when /messages does not return a message\", () => {",
          "721:             const room = client.getRoom(roomId);",
          "722:             const timelineSet = room.getTimelineSets()[0];",
          "724:             httpBackend.when(\"GET\", \"/rooms/!foo%3Abar/messages\")",
          "725:                 .respond(200, () => {",
          "726:                     return {",
          "727:                         chunk: [",
          "729:                         ],",
          "730:                     };",
          "731:                 });",
          "733:             return Promise.all([",
          "734:                 expect(client.getLatestTimeline(timelineSet)).rejects.toThrow(),",
          "735:                 httpBackend.flushAllExpected(),",
          "736:             ]);",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-methods.spec.js||spec/integ/matrix-client-methods.spec.js": [
          "File: spec/integ/matrix-client-methods.spec.js -> spec/integ/matrix-client-methods.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as utils from \"../test-utils/test-utils\";",
          "2: import { CRYPTO_ENABLED } from \"../../src/client\";",
          "3: import { MatrixEvent } from \"../../src/models/event\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     });",
          "28:     describe(\"uploadContent\", function() {",
          "30:         it(\"should upload the file\", function() {",
          "31:             httpBackend.when(",
          "32:                 \"POST\", \"/_matrix/media/r0/upload\",",
          "",
          "[Removed Lines]",
          "29:         const buf = new Buffer('hello world');",
          "",
          "[Added Lines]",
          "45:         const buf = Buffer.from('hello world');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:             return client.initCrypto();",
          "459:         });",
          "461:         it(\"should do an HTTP request and then store the keys\", function() {",
          "462:             const ed25519key = \"7wG2lzAqbjcyEkOP7O4gU7ItYcn+chKzh5sT/5r2l78\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:         afterEach(() => {",
          "478:             client.stopClient();",
          "479:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "823:             ]);",
          "824:         });",
          "825:     });",
          "826: });",
          "828: function withThreadId(event, newThreadId) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847:     describe(\"getThirdpartyUser\", () => {",
          "848:         it(\"should hit the expected API endpoint\", async () => {",
          "849:             const response = [{",
          "850:                 userid: \"@Bob\",",
          "851:                 protocol: \"irc\",",
          "852:                 fields: {},",
          "853:             }];",
          "855:             const prom = client.getThirdpartyUser(\"irc\", {});",
          "856:             httpBackend.when(\"GET\", \"/thirdparty/user/irc\").respond(200, response);",
          "857:             await httpBackend.flush();",
          "858:             expect(await prom).toStrictEqual(response);",
          "859:         });",
          "860:     });",
          "862:     describe(\"getThirdpartyLocation\", () => {",
          "863:         it(\"should hit the expected API endpoint\", async () => {",
          "864:             const response = [{",
          "865:                 alias: \"#alias\",",
          "866:                 protocol: \"irc\",",
          "867:                 fields: {},",
          "868:             }];",
          "870:             const prom = client.getThirdpartyLocation(\"irc\", {});",
          "871:             httpBackend.when(\"GET\", \"/thirdparty/location/irc\").respond(200, response);",
          "872:             await httpBackend.flush();",
          "873:             expect(await prom).toStrictEqual(response);",
          "874:         });",
          "875:     });",
          "877:     describe(\"getPushers\", () => {",
          "878:         it(\"should hit the expected API endpoint\", async () => {",
          "879:             const response = {",
          "880:                 pushers: [],",
          "881:             };",
          "883:             const prom = client.getPushers();",
          "884:             httpBackend.when(\"GET\", \"/pushers\").respond(200, response);",
          "885:             await httpBackend.flush();",
          "886:             expect(await prom).toStrictEqual(response);",
          "887:         });",
          "888:     });",
          "890:     describe(\"getKeyChanges\", () => {",
          "891:         it(\"should hit the expected API endpoint\", async () => {",
          "892:             const response = {",
          "893:                 changed: [],",
          "894:                 left: [],",
          "895:             };",
          "897:             const prom = client.getKeyChanges(\"old\", \"new\");",
          "898:             httpBackend.when(\"GET\", \"/keys/changes\").check((req) => {",
          "899:                 expect(req.queryParams.from).toEqual(\"old\");",
          "900:                 expect(req.queryParams.to).toEqual(\"new\");",
          "901:             }).respond(200, response);",
          "902:             await httpBackend.flush();",
          "903:             expect(await prom).toStrictEqual(response);",
          "904:         });",
          "905:     });",
          "907:     describe(\"getDevices\", () => {",
          "908:         it(\"should hit the expected API endpoint\", async () => {",
          "909:             const response = {",
          "910:                 devices: [],",
          "911:             };",
          "913:             const prom = client.getDevices();",
          "914:             httpBackend.when(\"GET\", \"/devices\").respond(200, response);",
          "915:             await httpBackend.flush();",
          "916:             expect(await prom).toStrictEqual(response);",
          "917:         });",
          "918:     });",
          "920:     describe(\"getDevice\", () => {",
          "921:         it(\"should hit the expected API endpoint\", async () => {",
          "922:             const response = {",
          "923:                 device_id: \"DEADBEEF\",",
          "924:                 display_name: \"NotAPhone\",",
          "925:                 last_seen_ip: \"127.0.0.1\",",
          "926:                 last_seen_ts: 1,",
          "927:             };",
          "929:             const prom = client.getDevice(\"DEADBEEF\");",
          "930:             httpBackend.when(\"GET\", \"/devices/DEADBEEF\").respond(200, response);",
          "931:             await httpBackend.flush();",
          "932:             expect(await prom).toStrictEqual(response);",
          "933:         });",
          "934:     });",
          "936:     describe(\"getThreePids\", () => {",
          "937:         it(\"should hit the expected API endpoint\", async () => {",
          "938:             const response = {",
          "939:                 threepids: [],",
          "940:             };",
          "942:             const prom = client.getThreePids();",
          "943:             httpBackend.when(\"GET\", \"/account/3pid\").respond(200, response);",
          "944:             await httpBackend.flush();",
          "945:             expect(await prom).toStrictEqual(response);",
          "946:         });",
          "947:     });",
          "949:     describe(\"deleteAlias\", () => {",
          "950:         it(\"should hit the expected API endpoint\", async () => {",
          "951:             const response = {};",
          "952:             const prom = client.deleteAlias(\"#foo:bar\");",
          "953:             httpBackend.when(\"DELETE\", \"/directory/room/\" + encodeURIComponent(\"#foo:bar\")).respond(200, response);",
          "954:             await httpBackend.flush();",
          "955:             expect(await prom).toStrictEqual(response);",
          "956:         });",
          "957:     });",
          "959:     describe(\"deleteRoomTag\", () => {",
          "960:         it(\"should hit the expected API endpoint\", async () => {",
          "961:             const response = {};",
          "962:             const prom = client.deleteRoomTag(\"!roomId:server\", \"u.tag\");",
          "963:             const url = `/user/${encodeURIComponent(userId)}/rooms/${encodeURIComponent(\"!roomId:server\")}/tags/u.tag`;",
          "964:             httpBackend.when(\"DELETE\", url).respond(200, response);",
          "965:             await httpBackend.flush();",
          "966:             expect(await prom).toStrictEqual(response);",
          "967:         });",
          "968:     });",
          "970:     describe(\"getRoomTags\", () => {",
          "971:         it(\"should hit the expected API endpoint\", async () => {",
          "972:             const response = {",
          "973:                 tags: {",
          "974:                     \"u.tag\": {",
          "975:                         order: 0.5,",
          "976:                     },",
          "977:                 },",
          "978:             };",
          "980:             const prom = client.getRoomTags(\"!roomId:server\");",
          "981:             const url = `/user/${encodeURIComponent(userId)}/rooms/${encodeURIComponent(\"!roomId:server\")}/tags`;",
          "982:             httpBackend.when(\"GET\", url).respond(200, response);",
          "983:             await httpBackend.flush();",
          "984:             expect(await prom).toStrictEqual(response);",
          "985:         });",
          "986:     });",
          "988:     describe(\"requestRegisterEmailToken\", () => {",
          "989:         it(\"should hit the expected API endpoint\", async () => {",
          "990:             const response = {",
          "991:                 sid: \"random_sid\",",
          "992:                 submit_url: \"https://foobar.matrix/_matrix/matrix\",",
          "993:             };",
          "995:             httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "996:                 versions: [\"r0.5.0\"],",
          "997:             });",
          "999:             const prom = client.requestRegisterEmailToken(\"bob@email\", \"secret\", 1);",
          "1000:             httpBackend.when(\"POST\", \"/register/email/requestToken\").check(req => {",
          "1001:                 expect(req.data).toStrictEqual({",
          "1002:                     email: \"bob@email\",",
          "1003:                     client_secret: \"secret\",",
          "1004:                     send_attempt: 1,",
          "1005:                 });",
          "1006:             }).respond(200, response);",
          "1007:             await httpBackend.flush();",
          "1008:             expect(await prom).toStrictEqual(response);",
          "1009:         });",
          "1010:     });",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-opts.spec.js||spec/integ/matrix-client-opts.spec.js": [
          "File: spec/integ/matrix-client-opts.spec.js -> spec/integ/matrix-client-opts.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: describe(\"MatrixClient opts\", function() {",
          "10:     const baseUrl = \"http://localhost.or.something\";",
          "12:     let httpBackend = null;",
          "13:     const userId = \"@alice:localhost\";",
          "14:     const userB = \"@bob:localhost\";",
          "",
          "[Removed Lines]",
          "11:     let client = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     });",
          "67:     describe(\"without opts.store\", function() {",
          "68:         beforeEach(function() {",
          "69:             client = new MatrixClient({",
          "70:                 request: httpBackend.requestFn,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:         let client;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     });",
          "126:     describe(\"without opts.scheduler\", function() {",
          "127:         beforeEach(function() {",
          "128:             client = new MatrixClient({",
          "129:                 request: httpBackend.requestFn,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:         let client;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:             });",
          "136:         });",
          "138:         it(\"shouldn't retry sending events\", function(done) {",
          "139:             httpBackend.when(\"PUT\", \"/txn1\").fail(500, new MatrixError({",
          "140:                 errcode: \"M_SOMETHING\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:         afterEach(function() {",
          "140:             client.stopClient();",
          "141:         });",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-retrying.spec.ts||spec/integ/matrix-client-retrying.spec.ts": [
          "File: spec/integ/matrix-client-retrying.spec.ts -> spec/integ/matrix-client-retrying.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { MatrixScheduler } from \"../../src/scheduler\";",
          "3: import { Room } from \"../../src/models/room\";",
          "4: import { TestClient } from \"../TestClient\";",
          "6: describe(\"MatrixClient retrying\", function() {",
          "8:     let httpBackend: TestClient[\"httpBackend\"] = null;",
          "9:     let scheduler;",
          "10:     const userId = \"@alice:localhost\";",
          "",
          "[Removed Lines]",
          "1: import { EventStatus, RoomEvent } from \"../../src/matrix\";",
          "7:     let client: TestClient = null;",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { EventStatus, RoomEvent, MatrixClient } from \"../../src/matrix\";",
          "23:     let client: MatrixClient = null;",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-room-timeline.spec.js||spec/integ/matrix-client-room-timeline.spec.js": [
          "File: spec/integ/matrix-client-room-timeline.spec.js -> spec/integ/matrix-client-room-timeline.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as utils from \"../test-utils/test-utils\";",
          "2: import { EventStatus } from \"../../src/models/event\";",
          "3: import { TestClient } from \"../TestClient\";",
          "5: describe(\"MatrixClient room timelines\", function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { RoomEvent } from \"../../src\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:             });",
          "580:         });",
          "583:             const eventData = [",
          "584:                 utils.mkMessage({ user: userId, room: roomId }),",
          "585:             ];",
          "",
          "[Removed Lines]",
          "582:         it(\"should emit a 'Room.timelineReset' event\", function() {",
          "",
          "[Added Lines]",
          "583:         it(\"should emit a `RoomEvent.TimelineReset` event when the sync response is `limited`\", function() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "608:             });",
          "609:         });",
          "610:     });",
          "611: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:     describe('Refresh live timeline', () => {",
          "614:         const initialSyncEventData = [",
          "615:             utils.mkMessage({ user: userId, room: roomId }),",
          "616:             utils.mkMessage({ user: userId, room: roomId }),",
          "617:             utils.mkMessage({ user: userId, room: roomId }),",
          "618:         ];",
          "620:         const contextUrl = `/rooms/${encodeURIComponent(roomId)}/context/` +",
          "621:         `${encodeURIComponent(initialSyncEventData[2].event_id)}`;",
          "622:         const contextResponse = {",
          "623:             start: \"start_token\",",
          "624:             events_before: [initialSyncEventData[1], initialSyncEventData[0]],",
          "625:             event: initialSyncEventData[2],",
          "626:             events_after: [],",
          "627:             state: [",
          "628:                 USER_MEMBERSHIP_EVENT,",
          "629:             ],",
          "630:             end: \"end_token\",",
          "631:         };",
          "633:         let room;",
          "634:         beforeEach(async () => {",
          "635:             setNextSyncData(initialSyncEventData);",
          "638:             await Promise.all([",
          "639:                 httpBackend.flushAllExpected(),",
          "640:                 utils.syncPromise(client, 1),",
          "641:             ]);",
          "644:             room = client.getRoom(roomId);",
          "645:             expect(room).toBeTruthy();",
          "646:         });",
          "648:         it('should clear and refresh messages in timeline', async () => {",
          "651:             httpBackend.when(\"GET\", contextUrl)",
          "652:                 .respond(200, function() {",
          "654:                     expect(room.timeline.length).toEqual(0);",
          "656:                     return contextResponse;",
          "657:                 });",
          "660:             await Promise.all([",
          "661:                 room.refreshLiveTimeline(),",
          "662:                 httpBackend.flushAllExpected(),",
          "663:             ]);",
          "666:             const resultantEventsInTimeline = room.getUnfilteredTimelineSet().getLiveTimeline().getEvents();",
          "667:             const resultantEventIdsInTimeline = resultantEventsInTimeline.map((event) => event.getId());",
          "668:             expect(resultantEventIdsInTimeline).toEqual([",
          "669:                 initialSyncEventData[0].event_id,",
          "670:                 initialSyncEventData[1].event_id,",
          "671:                 initialSyncEventData[2].event_id,",
          "672:             ]);",
          "673:         });",
          "675:         it('Perfectly merges timelines if a sync finishes while refreshing the timeline', async () => {",
          "684:             httpBackend.when(\"GET\", contextUrl)",
          "685:                 .respond(200, () => {",
          "687:                     return contextResponse;",
          "688:                 });",
          "700:             const racingSyncEventData = [",
          "701:                 utils.mkMessage({ user: userId, room: roomId }),",
          "702:             ];",
          "703:             const waitForRaceySyncAfterResetPromise = new Promise((resolve, reject) => {",
          "704:                 let eventFired = false;",
          "706:                 const failTimeout = setTimeout(() => {",
          "707:                     if (eventFired) {",
          "708:                         reject(new Error(",
          "709:                             'TestError: `RoomEvent.TimelineReset` fired but we timed out trying to make' +",
          "710:                             'a `/sync` happen in time.',",
          "711:                         ));",
          "712:                     } else {",
          "713:                         reject(new Error(",
          "714:                             'TestError: Timed out while waiting for `RoomEvent.TimelineReset` to fire.',",
          "715:                         ));",
          "716:                     }",
          "717:                 }, 4000 /* FIXME: Is there a way to reference the current timeout of this test in Jest? */);",
          "719:                 room.on(RoomEvent.TimelineReset, async () => {",
          "720:                     try {",
          "721:                         eventFired = true;",
          "724:                         expect(room.getUnfilteredTimelineSet().getLiveTimeline().getEvents().length).toEqual(0);",
          "728:                         setNextSyncData(racingSyncEventData);",
          "729:                         httpBackend.when(\"GET\", \"/sync\").respond(200, function() {",
          "730:                             return NEXT_SYNC_DATA;",
          "731:                         });",
          "732:                         await Promise.all([",
          "733:                             httpBackend.flush(\"/sync\", 1),",
          "734:                             utils.syncPromise(client, 1),",
          "735:                         ]);",
          "737:                         const afterRaceySyncTimelineEvents = room",
          "738:                             .getUnfilteredTimelineSet()",
          "739:                             .getLiveTimeline()",
          "740:                             .getEvents();",
          "741:                         const afterRaceySyncTimelineEventIds = afterRaceySyncTimelineEvents",
          "742:                             .map((event) => event.getId());",
          "743:                         expect(afterRaceySyncTimelineEventIds).toEqual([",
          "744:                             racingSyncEventData[0].event_id,",
          "745:                         ]);",
          "747:                         clearTimeout(failTimeout);",
          "748:                         resolve();",
          "749:                     } catch (err) {",
          "750:                         reject(err);",
          "751:                     }",
          "752:                 });",
          "753:             });",
          "757:             const refreshLiveTimelinePromise = room.refreshLiveTimeline();",
          "759:             await waitForRaceySyncAfterResetPromise;",
          "761:             await Promise.all([",
          "762:                 refreshLiveTimelinePromise,",
          "764:                 httpBackend.flushAllExpected(),",
          "765:             ]);",
          "769:             const afterRefreshEventData = [",
          "770:                 utils.mkMessage({ user: userId, room: roomId }),",
          "771:             ];",
          "772:             setNextSyncData(afterRefreshEventData);",
          "773:             httpBackend.when(\"GET\", \"/sync\").respond(200, function() {",
          "774:                 return NEXT_SYNC_DATA;",
          "775:             });",
          "776:             await Promise.all([",
          "777:                 httpBackend.flushAllExpected(),",
          "778:                 utils.syncPromise(client, 1),",
          "779:             ]);",
          "786:             const resultantEventsInTimeline = room.getUnfilteredTimelineSet().getLiveTimeline().getEvents();",
          "787:             const resultantEventIdsInTimeline = resultantEventsInTimeline.map((event) => event.getId());",
          "788:             expect(resultantEventIdsInTimeline).toEqual([",
          "789:                 racingSyncEventData[0].event_id,",
          "790:                 afterRefreshEventData[0].event_id,",
          "791:             ]);",
          "792:         });",
          "794:         it('Timeline recovers after `/context` request to generate new timeline fails', async () => {",
          "797:             httpBackend.when(\"GET\", contextUrl)",
          "798:                 .respond(500, function() {",
          "800:                     expect(room.timeline.length).toEqual(0);",
          "802:                     return {",
          "803:                         errcode: 'TEST_FAKE_ERROR',",
          "804:                         error: 'We purposely intercepted this /context request to make it fail ' +",
          "805:                                  'in order to test whether the refresh timeline code is resilient',",
          "806:                     };",
          "807:                 });",
          "810:             const settledFailedRefreshPromises = await Promise.allSettled([",
          "811:                 room.refreshLiveTimeline(),",
          "812:                 httpBackend.flushAllExpected(),",
          "813:             ]);",
          "816:             if (settledFailedRefreshPromises[0].status === 'fulfilled') {",
          "817:                 throw new Error('Expected the /context request to fail with a 500');",
          "818:             } else if (settledFailedRefreshPromises[0].reason.errcode !== 'TEST_FAKE_ERROR') {",
          "819:                 throw settledFailedRefreshPromises[0].reason;",
          "820:             }",
          "824:             expect(room.timeline.length).toEqual(0);",
          "828:             httpBackend.when(\"GET\", `/rooms/${encodeURIComponent(roomId)}/messages`)",
          "829:                 .respond(200, function() {",
          "830:                     return {",
          "831:                         chunk: [{",
          "833:                             event_id: initialSyncEventData[2].event_id,",
          "834:                         }],",
          "835:                     };",
          "836:                 });",
          "840:             httpBackend.when(\"GET\", contextUrl)",
          "841:                 .respond(200, function() {",
          "843:                     expect(room.timeline.length).toEqual(0);",
          "845:                     return contextResponse;",
          "846:                 });",
          "849:             await Promise.all([",
          "850:                 room.refreshLiveTimeline(),",
          "851:                 httpBackend.flushAllExpected(),",
          "852:             ]);",
          "856:             const afterRefreshEventData = [",
          "857:                 utils.mkMessage({ user: userId, room: roomId }),",
          "858:             ];",
          "859:             setNextSyncData(afterRefreshEventData);",
          "860:             httpBackend.when(\"GET\", \"/sync\").respond(200, function() {",
          "861:                 return NEXT_SYNC_DATA;",
          "862:             });",
          "863:             await Promise.all([",
          "864:                 httpBackend.flushAllExpected(),",
          "865:                 utils.syncPromise(client, 1),",
          "866:             ]);",
          "869:             const resultantEventsInTimeline = room.getUnfilteredTimelineSet().getLiveTimeline().getEvents();",
          "870:             const resultantEventIdsInTimeline = resultantEventsInTimeline.map((event) => event.getId());",
          "871:             expect(resultantEventIdsInTimeline).toEqual([",
          "872:                 initialSyncEventData[0].event_id,",
          "873:                 initialSyncEventData[1].event_id,",
          "874:                 initialSyncEventData[2].event_id,",
          "875:                 afterRefreshEventData[0].event_id,",
          "876:             ]);",
          "877:         });",
          "878:     });",
          "",
          "---------------"
        ],
        "spec/integ/matrix-client-syncing.spec.js||spec/integ/matrix-client-syncing.spec.js": [
          "File: spec/integ/matrix-client-syncing.spec.js -> spec/integ/matrix-client-syncing.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import * as utils from \"../test-utils/test-utils\";",
          "4: import { TestClient } from \"../TestClient\";",
          "",
          "[Removed Lines]",
          "1: import { MatrixEvent } from \"../../src/models/event\";",
          "2: import { EventTimeline } from \"../../src/models/event-timeline\";",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { EventTimeline, MatrixEvent, RoomEvent, RoomStateEvent, RoomMemberEvent } from \"../../src\";",
          "18: import { UNSTABLE_MSC2716_MARKER } from \"../../src/@types/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:                 done();",
          "61:             });",
          "62:         });",
          "63:     });",
          "65:     describe(\"resolving invites to profile info\", function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         it(\"should emit RoomEvent.MyMembership for invite->leave->invite cycles\", async () => {",
          "81:             const roomId = \"!cycles:example.org\";",
          "84:             const inviteSyncRoomSection = {",
          "85:                 invite: {",
          "86:                     [roomId]: {",
          "87:                         invite_state: {",
          "88:                             events: [{",
          "89:                                 type: \"m.room.member\",",
          "90:                                 state_key: selfUserId,",
          "91:                                 content: {",
          "92:                                     membership: \"invite\",",
          "93:                                 },",
          "94:                             }],",
          "95:                         },",
          "96:                     },",
          "97:                 },",
          "98:             };",
          "99:             httpBackend.when(\"GET\", \"/sync\").respond(200, {",
          "100:                 ...syncData,",
          "101:                 rooms: inviteSyncRoomSection,",
          "102:             });",
          "105:             httpBackend.when(\"POST\", \"/leave\").respond(200, {});",
          "106:             httpBackend.when(\"GET\", \"/sync\").respond(200, {",
          "107:                 ...syncData,",
          "108:                 rooms: {",
          "109:                     leave: {",
          "110:                         [roomId]: {",
          "111:                             account_data: { events: [] },",
          "112:                             ephemeral: { events: [] },",
          "113:                             state: {",
          "114:                                 events: [{",
          "115:                                     type: \"m.room.member\",",
          "116:                                     state_key: selfUserId,",
          "117:                                     content: {",
          "118:                                         membership: \"leave\",",
          "119:                                     },",
          "120:                                     prev_content: {",
          "121:                                         membership: \"invite\",",
          "122:                                     },",
          "124:                                 }],",
          "125:                             },",
          "126:                             timeline: {",
          "127:                                 limited: false,",
          "128:                                 events: [{",
          "129:                                     type: \"m.room.member\",",
          "130:                                     state_key: selfUserId,",
          "131:                                     content: {",
          "132:                                         membership: \"leave\",",
          "133:                                     },",
          "134:                                     prev_content: {",
          "135:                                         membership: \"invite\",",
          "136:                                     },",
          "138:                                 }],",
          "139:                             },",
          "140:                         },",
          "141:                     },",
          "142:                 },",
          "143:             });",
          "146:             httpBackend.when(\"GET\", \"/sync\").respond(200, {",
          "147:                 ...syncData,",
          "148:                 rooms: inviteSyncRoomSection,",
          "149:             });",
          "152:             let fires = 0;",
          "153:             client.once(RoomEvent.MyMembership, (room, membership, oldMembership) => { // Room, string, string",
          "154:                 fires++;",
          "155:                 expect(room.roomId).toBe(roomId);",
          "156:                 expect(membership).toBe(\"invite\");",
          "157:                 expect(oldMembership).toBeFalsy();",
          "160:                 client.once(RoomEvent.MyMembership, (room, membership, oldMembership) => {",
          "161:                     fires++;",
          "162:                     expect(room.roomId).toBe(roomId);",
          "163:                     expect(membership).toBe(\"leave\");",
          "164:                     expect(oldMembership).toBe(\"invite\");",
          "167:                     client.once(RoomEvent.MyMembership, (room, membership, oldMembership) => {",
          "168:                         fires++;",
          "169:                         expect(room.roomId).toBe(roomId);",
          "170:                         expect(membership).toBe(\"invite\");",
          "171:                         expect(oldMembership).toBe(\"leave\");",
          "172:                     });",
          "173:                 });",
          "176:                 client.leave(roomId);",
          "177:             });",
          "180:             client.startClient();",
          "181:             await httpBackend.flushAllExpected();",
          "183:             expect(fires).toBe(3);",
          "184:         });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:             httpBackend.when(\"GET\", \"/sync\").respond(200, syncData);",
          "179:             let latestFiredName = null;",
          "181:                 if (m.userId === userC && m.roomId === roomOne) {",
          "182:                     latestFiredName = m.name;",
          "183:                 }",
          "",
          "[Removed Lines]",
          "180:             client.on(\"RoomMember.name\", function(event, m) {",
          "",
          "[Added Lines]",
          "302:             client.on(RoomMemberEvent.Name, function(event, m) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "461:         xit(\"should update the room topic\", function() {",
          "463:         });",
          "464:     });",
          "466:     describe(\"timeline\", function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:         describe(\"onMarkerStateEvent\", () => {",
          "588:             const normalMessageEvent = utils.mkMessage({",
          "589:                 room: roomOne, user: otherUserId, msg: \"hello\",",
          "590:             });",
          "592:             it('new marker event *NOT* from the room creator in a subsequent syncs ' +",
          "593:                 'should *NOT* mark the timeline as needing a refresh', async () => {",
          "594:                 const roomCreateEvent = utils.mkEvent({",
          "595:                     type: \"m.room.create\", room: roomOne, user: otherUserId,",
          "596:                     content: {",
          "597:                         creator: otherUserId,",
          "598:                         room_version: '9',",
          "599:                     },",
          "600:                 });",
          "601:                 const normalFirstSync = {",
          "602:                     next_batch: \"batch_token\",",
          "603:                     rooms: {",
          "604:                         join: {},",
          "605:                     },",
          "606:                 };",
          "607:                 normalFirstSync.rooms.join[roomOne] = {",
          "608:                     timeline: {",
          "609:                         events: [normalMessageEvent],",
          "610:                         prev_batch: \"pagTok\",",
          "611:                     },",
          "612:                     state: {",
          "613:                         events: [roomCreateEvent],",
          "614:                     },",
          "615:                 };",
          "617:                 const nextSyncData = {",
          "618:                     next_batch: \"batch_token\",",
          "619:                     rooms: {",
          "620:                         join: {},",
          "621:                     },",
          "622:                 };",
          "623:                 nextSyncData.rooms.join[roomOne] = {",
          "624:                     timeline: {",
          "625:                         events: [",
          "631:                             utils.mkEvent({",
          "632:                                 type: UNSTABLE_MSC2716_MARKER.name,",
          "633:                                 room: roomOne,",
          "636:                                 user: userC,",
          "637:                                 skey: \"\",",
          "638:                                 content: {",
          "639:                                     \"m.insertion_id\": \"$abc\",",
          "640:                                 },",
          "641:                             }),",
          "642:                         ],",
          "643:                         prev_batch: \"pagTok\",",
          "644:                     },",
          "645:                 };",
          "649:                 const markerEvent = nextSyncData.rooms.join[roomOne].timeline.events[0];",
          "650:                 expect(markerEvent.sender).toBeDefined();",
          "651:                 expect(markerEvent.sender).not.toEqual(roomCreateEvent.sender);",
          "653:                 httpBackend.when(\"GET\", \"/sync\").respond(200, normalFirstSync);",
          "654:                 httpBackend.when(\"GET\", \"/sync\").respond(200, nextSyncData);",
          "656:                 client.startClient();",
          "657:                 await Promise.all([",
          "658:                     httpBackend.flushAllExpected(),",
          "659:                     awaitSyncEvent(2),",
          "660:                 ]);",
          "662:                 const room = client.getRoom(roomOne);",
          "663:                 expect(room.getTimelineNeedsRefresh()).toEqual(false);",
          "664:             });",
          "666:             [{",
          "667:                 label: 'In existing room versions (when the room creator sends the MSC2716 events)',",
          "668:                 roomVersion: '9',",
          "669:             }, {",
          "670:                 label: 'In a MSC2716 supported room version',",
          "671:                 roomVersion: 'org.matrix.msc2716v3',",
          "672:             }].forEach((testMeta) => {",
          "673:                 describe(testMeta.label, () => {",
          "674:                     const roomCreateEvent = utils.mkEvent({",
          "675:                         type: \"m.room.create\", room: roomOne, user: otherUserId,",
          "676:                         content: {",
          "677:                             creator: otherUserId,",
          "678:                             room_version: testMeta.roomVersion,",
          "679:                         },",
          "680:                     });",
          "682:                     const markerEventFromRoomCreator = utils.mkEvent({",
          "683:                         type: UNSTABLE_MSC2716_MARKER.name, room: roomOne, user: otherUserId,",
          "684:                         skey: \"\",",
          "685:                         content: {",
          "686:                             \"m.insertion_id\": \"$abc\",",
          "687:                         },",
          "688:                     });",
          "690:                     const normalFirstSync = {",
          "691:                         next_batch: \"batch_token\",",
          "692:                         rooms: {",
          "693:                             join: {},",
          "694:                         },",
          "695:                     };",
          "696:                     normalFirstSync.rooms.join[roomOne] = {",
          "697:                         timeline: {",
          "698:                             events: [normalMessageEvent],",
          "699:                             prev_batch: \"pagTok\",",
          "700:                         },",
          "701:                         state: {",
          "702:                             events: [roomCreateEvent],",
          "703:                         },",
          "704:                     };",
          "706:                     it('no marker event in sync response '+",
          "707:                         'should *NOT* mark the timeline as needing a refresh (check for a sane default)', async () => {",
          "708:                         const syncData = {",
          "709:                             next_batch: \"batch_token\",",
          "710:                             rooms: {",
          "711:                                 join: {},",
          "712:                             },",
          "713:                         };",
          "714:                         syncData.rooms.join[roomOne] = {",
          "715:                             timeline: {",
          "716:                                 events: [normalMessageEvent],",
          "717:                                 prev_batch: \"pagTok\",",
          "718:                             },",
          "719:                             state: {",
          "720:                                 events: [roomCreateEvent],",
          "721:                             },",
          "722:                         };",
          "724:                         httpBackend.when(\"GET\", \"/sync\").respond(200, syncData);",
          "726:                         client.startClient();",
          "727:                         await Promise.all([",
          "728:                             httpBackend.flushAllExpected(),",
          "729:                             awaitSyncEvent(),",
          "730:                         ]);",
          "732:                         const room = client.getRoom(roomOne);",
          "733:                         expect(room.getTimelineNeedsRefresh()).toEqual(false);",
          "734:                     });",
          "736:                     it('marker event already sent within timeline range when you join ' +",
          "737:                         'should *NOT* mark the timeline as needing a refresh (timelineWasEmpty)', async () => {",
          "738:                         const syncData = {",
          "739:                             next_batch: \"batch_token\",",
          "740:                             rooms: {",
          "741:                                 join: {},",
          "742:                             },",
          "743:                         };",
          "744:                         syncData.rooms.join[roomOne] = {",
          "745:                             timeline: {",
          "746:                                 events: [markerEventFromRoomCreator],",
          "747:                                 prev_batch: \"pagTok\",",
          "748:                             },",
          "749:                             state: {",
          "750:                                 events: [roomCreateEvent],",
          "751:                             },",
          "752:                         };",
          "754:                         httpBackend.when(\"GET\", \"/sync\").respond(200, syncData);",
          "756:                         client.startClient();",
          "757:                         await Promise.all([",
          "758:                             httpBackend.flushAllExpected(),",
          "759:                             awaitSyncEvent(),",
          "760:                         ]);",
          "762:                         const room = client.getRoom(roomOne);",
          "763:                         expect(room.getTimelineNeedsRefresh()).toEqual(false);",
          "764:                     });",
          "766:                     it('marker event already sent before joining (in state) ' +",
          "767:                         'should *NOT* mark the timeline as needing a refresh (timelineWasEmpty)', async () => {",
          "768:                         const syncData = {",
          "769:                             next_batch: \"batch_token\",",
          "770:                             rooms: {",
          "771:                                 join: {},",
          "772:                             },",
          "773:                         };",
          "774:                         syncData.rooms.join[roomOne] = {",
          "775:                             timeline: {",
          "776:                                 events: [normalMessageEvent],",
          "777:                                 prev_batch: \"pagTok\",",
          "778:                             },",
          "779:                             state: {",
          "780:                                 events: [",
          "781:                                     roomCreateEvent,",
          "782:                                     markerEventFromRoomCreator,",
          "783:                                 ],",
          "784:                             },",
          "785:                         };",
          "787:                         httpBackend.when(\"GET\", \"/sync\").respond(200, syncData);",
          "789:                         client.startClient();",
          "790:                         await Promise.all([",
          "791:                             httpBackend.flushAllExpected(),",
          "792:                             awaitSyncEvent(),",
          "793:                         ]);",
          "795:                         const room = client.getRoom(roomOne);",
          "796:                         expect(room.getTimelineNeedsRefresh()).toEqual(false);",
          "797:                     });",
          "799:                     it('new marker event in a subsequent syncs timeline range ' +",
          "800:                         'should mark the timeline as needing a refresh', async () => {",
          "801:                         const nextSyncData = {",
          "802:                             next_batch: \"batch_token\",",
          "803:                             rooms: {",
          "804:                                 join: {},",
          "805:                             },",
          "806:                         };",
          "807:                         nextSyncData.rooms.join[roomOne] = {",
          "808:                             timeline: {",
          "809:                                 events: [",
          "812:                                     markerEventFromRoomCreator,",
          "813:                                 ],",
          "814:                                 prev_batch: \"pagTok\",",
          "815:                             },",
          "816:                         };",
          "818:                         const markerEventId = nextSyncData.rooms.join[roomOne].timeline.events[0].event_id;",
          "821:                         httpBackend.when(\"GET\", \"/sync\").respond(200, normalFirstSync);",
          "822:                         client.startClient();",
          "823:                         await Promise.all([",
          "824:                             httpBackend.flushAllExpected(),",
          "825:                             awaitSyncEvent(),",
          "826:                         ]);",
          "829:                         const room = client.getRoom(roomOne);",
          "831:                         let emitCount = 0;",
          "832:                         room.on(RoomEvent.HistoryImportedWithinTimeline, function(markerEvent, room) {",
          "833:                             expect(markerEvent.getId()).toEqual(markerEventId);",
          "834:                             expect(room.roomId).toEqual(roomOne);",
          "835:                             emitCount += 1;",
          "836:                         });",
          "839:                         httpBackend.when(\"GET\", \"/sync\").respond(200, nextSyncData);",
          "840:                         await Promise.all([",
          "841:                             httpBackend.flushAllExpected(),",
          "842:                             awaitSyncEvent(),",
          "843:                         ]);",
          "845:                         expect(room.getTimelineNeedsRefresh()).toEqual(true);",
          "847:                         expect(emitCount).toEqual(1);",
          "848:                     });",
          "851:                     it('new marker event in sync state should mark the timeline as needing a refresh', async () => {",
          "852:                         const nextSyncData = {",
          "853:                             next_batch: \"batch_token\",",
          "854:                             rooms: {",
          "855:                                 join: {},",
          "856:                             },",
          "857:                         };",
          "858:                         nextSyncData.rooms.join[roomOne] = {",
          "859:                             timeline: {",
          "860:                                 events: [",
          "861:                                     utils.mkMessage({",
          "862:                                         room: roomOne, user: otherUserId, msg: \"hello again\",",
          "863:                                     }),",
          "864:                                 ],",
          "865:                                 prev_batch: \"pagTok\",",
          "866:                             },",
          "867:                             state: {",
          "868:                                 events: [",
          "871:                                     markerEventFromRoomCreator,",
          "872:                                 ],",
          "873:                             },",
          "874:                         };",
          "876:                         httpBackend.when(\"GET\", \"/sync\").respond(200, normalFirstSync);",
          "877:                         httpBackend.when(\"GET\", \"/sync\").respond(200, nextSyncData);",
          "879:                         client.startClient();",
          "880:                         await Promise.all([",
          "881:                             httpBackend.flushAllExpected(),",
          "882:                             awaitSyncEvent(2),",
          "883:                         ]);",
          "885:                         const room = client.getRoom(roomOne);",
          "886:                         expect(room.getTimelineNeedsRefresh()).toEqual(true);",
          "887:                     });",
          "888:                 });",
          "889:             });",
          "890:         });",
          "894:         describe('state listeners and re-registered when RoomEvent.CurrentStateUpdated is fired', () => {",
          "895:             const EVENTS = [",
          "896:                 utils.mkMessage({",
          "897:                     room: roomOne, user: userA, msg: \"we\",",
          "898:                 }),",
          "899:                 utils.mkMessage({",
          "900:                     room: roomOne, user: userA, msg: \"could\",",
          "901:                 }),",
          "902:                 utils.mkMessage({",
          "903:                     room: roomOne, user: userA, msg: \"be\",",
          "904:                 }),",
          "905:                 utils.mkMessage({",
          "906:                     room: roomOne, user: userA, msg: \"heroes\",",
          "907:                 }),",
          "908:             ];",
          "910:             const SOME_STATE_EVENT = utils.mkEvent({",
          "911:                 event: true,",
          "912:                 type: 'org.matrix.test_state',",
          "913:                 room: roomOne,",
          "914:                 user: userA,",
          "915:                 skey: \"\",",
          "916:                 content: {",
          "917:                     \"foo\": \"bar\",",
          "918:                 },",
          "919:             });",
          "921:             const USER_MEMBERSHIP_EVENT = utils.mkMembership({",
          "922:                 room: roomOne, mship: \"join\", user: userA,",
          "923:             });",
          "929:             it(\"should be able to listen to state events even after \" +",
          "930:                \"the timeline is reset during `limited` sync response\", async () => {",
          "932:                 httpBackend.when(\"GET\", \"/sync\").respond(200, syncData);",
          "933:                 client.startClient();",
          "934:                 await Promise.all([",
          "935:                     httpBackend.flushAllExpected(),",
          "936:                     awaitSyncEvent(),",
          "937:                 ]);",
          "940:                 const room = client.getRoom(roomOne);",
          "941:                 expect(room).toBeTruthy();",
          "943:                 let stateEventEmitCount = 0;",
          "944:                 client.on(RoomStateEvent.Update, () => {",
          "945:                     stateEventEmitCount += 1;",
          "946:                 });",
          "949:                 room.currentState.setStateEvents([SOME_STATE_EVENT]);",
          "951:                 expect(stateEventEmitCount).toEqual(1);",
          "954:                 const limitedSyncData = {",
          "955:                     next_batch: \"batch_token\",",
          "956:                     rooms: {",
          "957:                         join: {},",
          "958:                     },",
          "959:                 };",
          "960:                 limitedSyncData.rooms.join[roomOne] = {",
          "961:                     timeline: {",
          "962:                         events: [",
          "963:                             utils.mkMessage({",
          "964:                                 room: roomOne, user: otherUserId, msg: \"world\",",
          "965:                             }),",
          "966:                         ],",
          "968:                         limited: true,",
          "969:                         prev_batch: \"newerTok\",",
          "970:                     },",
          "971:                 };",
          "972:                 httpBackend.when(\"GET\", \"/sync\").respond(200, limitedSyncData);",
          "974:                 await Promise.all([",
          "975:                     httpBackend.flushAllExpected(),",
          "976:                     awaitSyncEvent(),",
          "977:                 ]);",
          "980:                 expect(stateEventEmitCount).toEqual(2);",
          "983:                 room.currentState.setStateEvents([SOME_STATE_EVENT]);",
          "985:                 expect(stateEventEmitCount).toEqual(3);",
          "986:             });",
          "990:             it(\"should be able to listen to state events even after \" +",
          "991:                \"refreshing the timeline\", async () => {",
          "992:                 const testClientWithTimelineSupport = new TestClient(",
          "993:                     selfUserId,",
          "994:                     \"DEVICE\",",
          "995:                     selfAccessToken,",
          "996:                     undefined,",
          "997:                     { timelineSupport: true },",
          "998:                 );",
          "999:                 httpBackend = testClientWithTimelineSupport.httpBackend;",
          "1000:                 httpBackend.when(\"GET\", \"/versions\").respond(200, {});",
          "1001:                 httpBackend.when(\"GET\", \"/pushrules\").respond(200, {});",
          "1002:                 httpBackend.when(\"POST\", \"/filter\").respond(200, { filter_id: \"a filter id\" });",
          "1003:                 client = testClientWithTimelineSupport.client;",
          "1006:                 httpBackend.when(\"GET\", \"/sync\").respond(200, syncData);",
          "1007:                 client.startClient();",
          "1008:                 await Promise.all([",
          "1009:                     httpBackend.flushAllExpected(),",
          "1010:                     awaitSyncEvent(),",
          "1011:                 ]);",
          "1014:                 const room = client.getRoom(roomOne);",
          "1015:                 expect(room).toBeTruthy();",
          "1017:                 let stateEventEmitCount = 0;",
          "1018:                 client.on(RoomStateEvent.Update, () => {",
          "1019:                     stateEventEmitCount += 1;",
          "1020:                 });",
          "1023:                 room.currentState.setStateEvents([SOME_STATE_EVENT]);",
          "1025:                 expect(stateEventEmitCount).toEqual(1);",
          "1027:                 const eventsInRoom = syncData.rooms.join[roomOne].timeline.events;",
          "1028:                 const contextUrl = `/rooms/${encodeURIComponent(roomOne)}/context/` +",
          "1029:                     `${encodeURIComponent(eventsInRoom[0].event_id)}`;",
          "1030:                 httpBackend.when(\"GET\", contextUrl)",
          "1031:                     .respond(200, function() {",
          "1032:                         return {",
          "1033:                             start: \"start_token\",",
          "1034:                             events_before: [EVENTS[1], EVENTS[0]],",
          "1035:                             event: EVENTS[2],",
          "1036:                             events_after: [EVENTS[3]],",
          "1037:                             state: [",
          "1038:                                 USER_MEMBERSHIP_EVENT,",
          "1039:                             ],",
          "1040:                             end: \"end_token\",",
          "1041:                         };",
          "1042:                     });",
          "1046:                 await Promise.all([",
          "1047:                     room.refreshLiveTimeline(),",
          "1048:                     httpBackend.flushAllExpected(),",
          "1049:                 ]);",
          "1052:                 room.currentState.setStateEvents([SOME_STATE_EVENT]);",
          "1054:                 expect(stateEventEmitCount).toEqual(2);",
          "1055:             });",
          "1056:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "516:                 awaitSyncEvent(),",
          "517:             ]).then(function() {",
          "518:                 const room = client.getRoom(roomTwo);",
          "520:                 const tok = room.getLiveTimeline()",
          "521:                     .getPaginationToken(EventTimeline.BACKWARDS);",
          "522:                 expect(tok).toEqual(\"roomtwotok\");",
          "",
          "[Removed Lines]",
          "519:                 expect(room).toBeDefined();",
          "",
          "[Added Lines]",
          "1112:                 expect(room).toBeTruthy();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "546:             let resetCallCount = 0;",
          "549:                 resetCallCount++;",
          "551:                 const tl = room.getLiveTimeline();",
          "",
          "[Removed Lines]",
          "548:             client.on(\"Room.timelineReset\", function(room) {",
          "",
          "[Added Lines]",
          "1141:             client.on(RoomEvent.TimelineReset, function(room) {",
          "",
          "---------------"
        ],
        "spec/integ/megolm-backup.spec.ts||spec/integ/megolm-backup.spec.ts": [
          "File: spec/integ/megolm-backup.spec.ts -> spec/integ/megolm-backup.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { Account } from \"@matrix-org/olm\";",
          "19: import { logger } from \"../../src/logger\";",
          "20: import { decodeRecoveryKey } from \"../../src/crypto/recoverykey\";",
          "21: import { IKeyBackupInfo, IKeyBackupSession } from \"../../src/crypto/keybackup\";",
          "22: import { TestClient } from \"../TestClient\";",
          "23: import { IEvent } from \"../../src\";",
          "24: import { MatrixEvent, MatrixEventEvent } from \"../../src/models/event\";",
          "26: const ROOM_ID = '!ROOM:ID';",
          "28: const SESSION_ID = 'o+21hSjP+mgEmcfdslPsQdvzWnkdt0Wyo00Kp++R8Kc';",
          "30: const ENCRYPTED_EVENT: Partial<IEvent> = {",
          "31:     type: 'm.room.encrypted',",
          "32:     content: {",
          "33:         algorithm: 'm.megolm.v1.aes-sha2',",
          "34:         sender_key: 'SENDER_CURVE25519',",
          "35:         session_id: SESSION_ID,",
          "36:         ciphertext: 'AwgAEjD+VwXZ7PoGPRS/H4kwpAsMp/g+WPvJVtPEKE8fmM9IcT/N'",
          "37:             + 'CiwPb8PehecDKP0cjm1XO88k6Bw3D17aGiBHr5iBoP7oSw8CXULXAMTkBl'",
          "38:             + 'mkufRQq2+d0Giy1s4/Cg5n13jSVrSb2q7VTSv1ZHAFjUCsLSfR0gxqcQs',",
          "39:     },",
          "40:     room_id: '!ROOM:ID',",
          "41:     event_id: '$event1',",
          "42:     origin_server_ts: 1507753886000,",
          "43: };",
          "45: const CURVE25519_KEY_BACKUP_DATA: IKeyBackupSession = {",
          "46:     first_message_index: 0,",
          "47:     forwarded_count: 0,",
          "48:     is_verified: false,",
          "49:     session_data: {",
          "50:         ciphertext: '2z2M7CZ+azAiTHN1oFzZ3smAFFt+LEOYY6h3QO3XXGdw'",
          "51:             + '6YpNn/gpHDO6I/rgj1zNd4FoTmzcQgvKdU8kN20u5BWRHxaHTZ'",
          "52:             + 'Slne5RxE6vUdREsBgZePglBNyG0AogR/PVdcrv/v18Y6rLM5O9'",
          "53:             + 'SELmwbV63uV9Kuu/misMxoqbuqEdG7uujyaEKtjlQsJ5MGPQOy'",
          "54:             + 'Syw7XrnesSwF6XWRMxcPGRV0xZr3s9PI350Wve3EncjRgJ9IGF'",
          "55:             + 'ru1bcptMqfXgPZkOyGvrphHoFfoK7nY3xMEHUiaTRfRIjq8HNV'",
          "56:             + '4o8QY1qmWGnxNBQgOlL8MZlykjg3ULmQ3DtFfQPj/YYGS3jzxv'",
          "57:             + 'C+EBjaafmsg+52CTeK3Rswu72PX450BnSZ1i3If4xWAUKvjTpe'",
          "58:             + 'Ug5aDLqttOv1pITolTJDw5W/SD+b5rjEKg1CFCHGEGE9wwV3Nf'",
          "59:             + 'QHVCQL+dfpd7Or0poy4dqKMAi3g0o3Tg7edIF8d5rREmxaALPy'",
          "60:             + 'iie8PHD8mj/5Y0GLqrac4CD6+Mop7eUTzVovprjg',",
          "61:         mac: '5lxYBHQU80M',",
          "62:         ephemeral: '/Bn0A4UMFwJaDDvh0aEk1XZj3k1IfgCxgFY9P9a0b14',",
          "63:     },",
          "64: };",
          "66: const CURVE25519_BACKUP_INFO: IKeyBackupInfo = {",
          "67:     algorithm: \"m.megolm_backup.v1.curve25519-aes-sha2\",",
          "68:     version: \"1\",",
          "69:     auth_data: {",
          "70:         public_key: \"hSDwCYkwp1R0i33ctD73Wg2/Og0mOBr066SpjqqbTmo\",",
          "71:     },",
          "72: };",
          "74: const RECOVERY_KEY = \"EsTc LW2K PGiF wKEA 3As5 g5c4 BXwk qeeJ ZJV8 Q9fu gUMN UE4d\";",
          "79: function createOlmSession(olmAccount: Olm.Account, recipientTestClient: TestClient): Promise<Olm.Session> {",
          "80:     return recipientTestClient.awaitOneTimeKeyUpload().then((keys) => {",
          "81:         const otkId = Object.keys(keys)[0];",
          "82:         const otk = keys[otkId];",
          "84:         const session = new global.Olm.Session();",
          "85:         session.create_outbound(",
          "86:             olmAccount, recipientTestClient.getDeviceKey(), otk.key,",
          "87:         );",
          "88:         return session;",
          "89:     });",
          "90: }",
          "92: describe(\"megolm key backups\", function() {",
          "93:     if (!global.Olm) {",
          "94:         logger.warn('not running megolm tests: Olm not present');",
          "95:         return;",
          "96:     }",
          "97:     const Olm = global.Olm;",
          "99:     let testOlmAccount: Account;",
          "100:     let aliceTestClient: TestClient;",
          "102:     beforeAll(function() {",
          "103:         return Olm.init();",
          "104:     });",
          "106:     beforeEach(async function() {",
          "107:         aliceTestClient = new TestClient(",
          "108:             \"@alice:localhost\", \"xzcvb\", \"akjgkrgjs\",",
          "109:         );",
          "110:         testOlmAccount = new Olm.Account();",
          "111:         testOlmAccount.create();",
          "112:         await aliceTestClient.client.initCrypto();",
          "113:         aliceTestClient.client.crypto.backupManager.backupInfo = CURVE25519_BACKUP_INFO;",
          "114:     });",
          "116:     afterEach(function() {",
          "117:         return aliceTestClient.stop();",
          "118:     });",
          "120:     it(\"Alice checks key backups when receiving a message she can't decrypt\", function() {",
          "121:         const syncResponse = {",
          "122:             next_batch: 1,",
          "123:             rooms: {",
          "124:                 join: {},",
          "125:             },",
          "126:         };",
          "127:         syncResponse.rooms.join[ROOM_ID] = {",
          "128:             timeline: {",
          "129:                 events: [ENCRYPTED_EVENT],",
          "130:             },",
          "131:         };",
          "133:         return aliceTestClient.start().then(() => {",
          "134:             return createOlmSession(testOlmAccount, aliceTestClient);",
          "135:         }).then(() => {",
          "136:             const privkey = decodeRecoveryKey(RECOVERY_KEY);",
          "137:             return aliceTestClient.client.crypto.storeSessionBackupPrivateKey(privkey);",
          "138:         }).then(() => {",
          "139:             aliceTestClient.httpBackend.when(\"GET\", \"/sync\").respond(200, syncResponse);",
          "140:             aliceTestClient.expectKeyBackupQuery(",
          "141:                 ROOM_ID,",
          "142:                 SESSION_ID,",
          "143:                 200,",
          "144:                 CURVE25519_KEY_BACKUP_DATA,",
          "145:             );",
          "146:             return aliceTestClient.httpBackend.flushAllExpected();",
          "147:         }).then(function(): Promise<MatrixEvent> {",
          "148:             const room = aliceTestClient.client.getRoom(ROOM_ID);",
          "149:             const event = room.getLiveTimeline().getEvents()[0];",
          "151:             if (event.getContent()) {",
          "152:                 return Promise.resolve(event);",
          "153:             }",
          "155:             return new Promise((resolve, reject) => {",
          "156:                 event.once(MatrixEventEvent.Decrypted, (ev) => {",
          "157:                     logger.log(`${Date.now()} event ${event.getId()} now decrypted`);",
          "158:                     resolve(ev);",
          "159:                 });",
          "160:             });",
          "161:         }).then((event) => {",
          "162:             expect(event.getContent()).toEqual('testytest');",
          "163:         });",
          "164:     });",
          "165: });",
          "",
          "---------------"
        ],
        "spec/integ/megolm-integ.spec.js||spec/integ/megolm-integ.spec.js": [
          "File: spec/integ/megolm-integ.spec.js -> spec/integ/megolm-integ.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1029:             });",
          "1030:             return event.attemptDecryption(testClient.client.crypto, true).then(() => {",
          "1031:                 expect(event.isKeySourceUntrusted()).toBeFalsy();",
          "1032:             });",
          "1033:         });",
          "1034:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:                 testClient.stop();",
          "",
          "---------------"
        ],
        "spec/test-utils/beacon.ts||spec/test-utils/beacon.ts": [
          "File: spec/test-utils/beacon.ts -> spec/test-utils/beacon.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     isLive?: boolean;",
          "28:     assetType?: LocationAssetType;",
          "29:     description?: string;",
          "30: };",
          "31: const DEFAULT_INFO_CONTENT_PROPS: InfoContentProps = {",
          "32:     timeout: 3600000,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     timestamp?: number;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     eventId?: string,",
          "45: ): MatrixEvent => {",
          "46:     const {",
          "48:     } = {",
          "49:         ...DEFAULT_INFO_CONTENT_PROPS,",
          "50:         ...contentProps,",
          "",
          "[Removed Lines]",
          "47:         timeout, isLive, description, assetType,",
          "",
          "[Added Lines]",
          "48:         timeout,",
          "49:         isLive,",
          "50:         description,",
          "51:         assetType,",
          "52:         timestamp,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:         type: M_BEACON_INFO.name,",
          "54:         room_id: roomId,",
          "55:         state_key: sender,",
          "57:     });",
          "",
          "[Removed Lines]",
          "56:         content: makeBeaconInfoContent(timeout, isLive, description, assetType),",
          "59:     event.event.origin_server_ts = Date.now();",
          "",
          "[Added Lines]",
          "61:         content: makeBeaconInfoContent(timeout, isLive, description, assetType, timestamp),",
          "64:     event.event.origin_server_ts = timestamp || Date.now();",
          "",
          "---------------"
        ],
        "spec/test-utils/test-utils.ts||spec/test-utils/test-utils.ts": [
          "File: spec/test-utils/test-utils.ts -> spec/test-utils/test-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { logger } from '../../src/logger';",
          "8: import { IContent, IEvent, IUnsigned, MatrixEvent, MatrixEventEvent } from \"../../src/models/event\";",
          "10: import { SyncState } from \"../../src/sync\";",
          "11: import { eventMapperFor } from \"../../src/event-mapper\";",
          "",
          "[Removed Lines]",
          "9: import { ClientEvent, EventType, MatrixClient } from \"../../src\";",
          "",
          "[Added Lines]",
          "9: import { ClientEvent, EventType, MatrixClient, MsgType } from \"../../src\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     sender?: string;",
          "75:     skey?: string;",
          "76:     content: IContent;",
          "78:     user?: string;",
          "79:     unsigned?: IUnsigned;",
          "80:     redacts?: string;",
          "",
          "[Removed Lines]",
          "77:     event?: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:     if (!opts.type || !opts.content) {",
          "98:         throw new Error(\"Missing .type or .content =>\" + JSON.stringify(opts));",
          "99:     }",
          "",
          "[Removed Lines]",
          "96: export function mkEvent(opts: IEventOpts, client?: MatrixClient): object | MatrixEvent {",
          "",
          "[Added Lines]",
          "95: export function mkEvent(opts: IEventOpts & { event: true }, client?: MatrixClient): MatrixEvent;",
          "96: export function mkEvent(opts: IEventOpts & { event?: false }, client?: MatrixClient): object;",
          "97: export function mkEvent(opts: IEventOpts & { event?: boolean }, client?: MatrixClient): object | MatrixEvent {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:     const event = {",
          "148:         event_id: \"$\" + Math.random() + \"-\" + Math.random(),",
          "149:         type: \"m.presence\",",
          "",
          "[Removed Lines]",
          "146: export function mkPresence(opts: IPresenceOpts): object | MatrixEvent {",
          "",
          "[Added Lines]",
          "147: export function mkPresence(opts: IPresenceOpts & { event: true }): MatrixEvent;",
          "148: export function mkPresence(opts: IPresenceOpts & { event?: false }): object;",
          "149: export function mkPresence(opts: IPresenceOpts & { event?: boolean }): object | MatrixEvent {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:     const eventOpts: IEventOpts = {",
          "187:         ...opts,",
          "188:         type: EventType.RoomMember,",
          "",
          "[Removed Lines]",
          "185: export function mkMembership(opts: IMembershipOpts): object | MatrixEvent {",
          "",
          "[Added Lines]",
          "188: export function mkMembership(opts: IMembershipOpts & { event: true }): MatrixEvent;",
          "189: export function mkMembership(opts: IMembershipOpts & { event?: false }): object;",
          "190: export function mkMembership(opts: IMembershipOpts & { event?: boolean }): object | MatrixEvent {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:     const eventOpts: IEventOpts = {",
          "225:         ...opts,",
          "226:         type: EventType.RoomMessage,",
          "227:         content: {",
          "229:             body: opts.msg,",
          "230:         },",
          "231:     };",
          "",
          "[Removed Lines]",
          "223: export function mkMessage(opts: IMessageOpts, client?: MatrixClient): object | MatrixEvent {",
          "228:             msgtype: \"m.text\",",
          "",
          "[Added Lines]",
          "228: export function mkMessage(opts: IMessageOpts & { event: true }, client?: MatrixClient): MatrixEvent;",
          "229: export function mkMessage(opts: IMessageOpts & { event?: false }, client?: MatrixClient): object;",
          "230: export function mkMessage(opts: IMessageOpts & { event?: boolean }, client?: MatrixClient): object | MatrixEvent {",
          "235:             msgtype: MsgType.Text,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:     return mkEvent(eventOpts, client);",
          "237: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: interface IReplyMessageOpts extends IMessageOpts {",
          "247:     replyToMessage: MatrixEvent;",
          "248: }",
          "262: export function mkReplyMessage(opts: IReplyMessageOpts & { event: true }, client?: MatrixClient): MatrixEvent;",
          "263: export function mkReplyMessage(opts: IReplyMessageOpts & { event?: false }, client?: MatrixClient): object;",
          "264: export function mkReplyMessage(",
          "265:     opts: IReplyMessageOpts & { event?: boolean },",
          "266:     client?: MatrixClient,",
          "267: ): object | MatrixEvent {",
          "268:     const eventOpts: IEventOpts = {",
          "269:         ...opts,",
          "270:         type: EventType.RoomMessage,",
          "271:         content: {",
          "272:             \"msgtype\": MsgType.Text,",
          "273:             \"body\": opts.msg,",
          "274:             \"m.relates_to\": {",
          "275:                 \"rel_type\": \"m.in_reply_to\",",
          "276:                 \"event_id\": opts.replyToMessage.getId(),",
          "277:                 \"m.in_reply_to\": {",
          "278:                     \"event_id\": opts.replyToMessage.getId(),",
          "279:                 },",
          "280:             },",
          "281:         },",
          "282:     };",
          "284:     if (!eventOpts.content.body) {",
          "285:         eventOpts.content.body = \"Random->\" + Math.random();",
          "286:     }",
          "287:     return mkEvent(eventOpts, client);",
          "288: }",
          "",
          "---------------"
        ],
        "spec/unit/content-helpers.spec.ts||spec/unit/content-helpers.spec.ts": [
          "File: spec/unit/content-helpers.spec.ts -> spec/unit/content-helpers.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { REFERENCE_RELATION } from \"matrix-events-sdk\";",
          "19: import { LocationAssetType, M_ASSET, M_LOCATION, M_TIMESTAMP } from \"../../src/@types/location\";",
          "22: describe('Beacon content helpers', () => {",
          "23:     describe('makeBeaconInfoContent()', () => {",
          "",
          "[Removed Lines]",
          "20: import { makeBeaconContent, makeBeaconInfoContent } from \"../../src/content-helpers\";",
          "",
          "[Added Lines]",
          "20: import { M_TOPIC } from \"../../src/@types/topic\";",
          "21: import {",
          "22:     makeBeaconContent,",
          "23:     makeBeaconInfoContent,",
          "24:     makeTopicContent,",
          "25:     parseTopicContent,",
          "26: } from \"../../src/content-helpers\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         });",
          "123:     });",
          "124: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: describe('Topic content helpers', () => {",
          "133:     describe('makeTopicContent()', () => {",
          "134:         it('creates fully defined event content without html', () => {",
          "135:             expect(makeTopicContent(\"pizza\")).toEqual({",
          "136:                 topic: \"pizza\",",
          "137:                 [M_TOPIC.name]: [{",
          "138:                     body: \"pizza\",",
          "139:                     mimetype: \"text/plain\",",
          "140:                 }],",
          "141:             });",
          "142:         });",
          "144:         it('creates fully defined event content with html', () => {",
          "145:             expect(makeTopicContent(\"pizza\", \"<b>pizza</b>\")).toEqual({",
          "146:                 topic: \"pizza\",",
          "147:                 [M_TOPIC.name]: [{",
          "148:                     body: \"pizza\",",
          "149:                     mimetype: \"text/plain\",",
          "150:                 }, {",
          "151:                     body: \"<b>pizza</b>\",",
          "152:                     mimetype: \"text/html\",",
          "153:                 }],",
          "154:             });",
          "155:         });",
          "156:     });",
          "158:     describe('parseTopicContent()', () => {",
          "159:         it('parses event content with plain text topic without mimetype', () => {",
          "160:             expect(parseTopicContent({",
          "161:                 topic: \"pizza\",",
          "162:                 [M_TOPIC.name]: [{",
          "163:                     body: \"pizza\",",
          "164:                 }],",
          "165:             })).toEqual({",
          "166:                 text: \"pizza\",",
          "167:             });",
          "168:         });",
          "170:         it('parses event content with plain text topic', () => {",
          "171:             expect(parseTopicContent({",
          "172:                 topic: \"pizza\",",
          "173:                 [M_TOPIC.name]: [{",
          "174:                     body: \"pizza\",",
          "175:                     mimetype: \"text/plain\",",
          "176:                 }],",
          "177:             })).toEqual({",
          "178:                 text: \"pizza\",",
          "179:             });",
          "180:         });",
          "182:         it('parses event content with html topic', () => {",
          "183:             expect(parseTopicContent({",
          "184:                 topic: \"pizza\",",
          "185:                 [M_TOPIC.name]: [{",
          "186:                     body: \"<b>pizza</b>\",",
          "187:                     mimetype: \"text/html\",",
          "188:                 }],",
          "189:             })).toEqual({",
          "190:                 text: \"pizza\",",
          "191:                 html: \"<b>pizza</b>\",",
          "192:             });",
          "193:         });",
          "194:     });",
          "195: });",
          "",
          "---------------"
        ],
        "spec/unit/crypto.spec.js||spec/unit/crypto.spec.js": [
          "File: spec/unit/crypto.spec.js -> spec/unit/crypto.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { EventEmitter } from \"events\";",
          "5: import { Crypto } from \"../../src/crypto\";",
          "7: import { MemoryCryptoStore } from \"../../src/crypto/store/memory-crypto-store\";",
          "8: import { MockStorageApi } from \"../MockStorageApi\";",
          "9: import { TestClient } from \"../TestClient\";",
          "",
          "[Removed Lines]",
          "6: import { WebStorageSessionStore } from \"../../src/store/session/webstorage\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: import { CRYPTO_ENABLED } from \"../../src/client\";",
          "15: import { DeviceInfo } from \"../../src/crypto/deviceinfo\";",
          "16: import { logger } from '../../src/logger';",
          "18: const Olm = global.Olm;",
          "20: describe(\"Crypto\", function() {",
          "21:     if (!CRYPTO_ENABLED) {",
          "22:         return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import { MemoryStore } from \"../../src\";",
          "20: function awaitEvent(emitter, event) {",
          "21:     return new Promise((resolve, reject) => {",
          "22:         emitter.once(event, (result) => {",
          "23:             resolve(result);",
          "24:         });",
          "25:     });",
          "26: }",
          "28: async function keyshareEventForEvent(client, event, index) {",
          "29:     const roomId = event.getRoomId();",
          "30:     const eventContent = event.getWireContent();",
          "31:     const key = await client.crypto.olmDevice.getInboundGroupSessionKey(",
          "32:         roomId,",
          "33:         eventContent.sender_key,",
          "34:         eventContent.session_id,",
          "35:         index,",
          "36:     );",
          "37:     const ksEvent = new MatrixEvent({",
          "38:         type: \"m.forwarded_room_key\",",
          "39:         sender: client.getUserId(),",
          "40:         content: {",
          "41:             algorithm: olmlib.MEGOLM_ALGORITHM,",
          "42:             room_id: roomId,",
          "43:             sender_key: eventContent.sender_key,",
          "44:             sender_claimed_ed25519_key: key.sender_claimed_ed25519_key,",
          "45:             session_id: eventContent.session_id,",
          "46:             session_key: key.key,",
          "47:             chain_index: key.chain_index,",
          "48:             forwarding_curve25519_key_chain:",
          "49:             key.forwarding_curve_key_chain,",
          "50:         },",
          "51:     });",
          "53:     ksEvent.senderCurve25519Key = \"akey\";",
          "54:     return ksEvent;",
          "55: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:         beforeEach(async function() {",
          "118:             const mockStorage = new MockStorageApi();",
          "120:             const cryptoStore = new MemoryCryptoStore(mockStorage);",
          "122:             cryptoStore.storeEndToEndDeviceData({",
          "",
          "[Removed Lines]",
          "119:             const sessionStore = new WebStorageSessionStore(mockStorage);",
          "",
          "[Added Lines]",
          "156:             const clientStore = new MemoryStore({ localStorage: mockStorage });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:             crypto = new Crypto(",
          "145:                 mockBaseApis,",
          "147:                 \"@alice:home.server\",",
          "148:                 \"FLIBBLE\",",
          "150:                 cryptoStore,",
          "151:                 mockRoomList,",
          "152:             );",
          "",
          "[Removed Lines]",
          "146:                 sessionStore,",
          "149:                 sessionStore,",
          "",
          "[Added Lines]",
          "185:                 clientStore,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:             bobClient.stopClient();",
          "204:         });",
          "215:                 }",
          "337:         it(\"creates a new keyshare request if we request a keyshare\", async function() {",
          "",
          "[Removed Lines]",
          "206:         it(",
          "207:             \"does not cancel keyshare requests if some messages are not decrypted\",",
          "208:             async function() {",
          "209:                 function awaitEvent(emitter, event) {",
          "210:                     return new Promise((resolve, reject) => {",
          "211:                         emitter.once(event, (result) => {",
          "212:                             resolve(result);",
          "213:                         });",
          "214:                     });",
          "217:                 async function keyshareEventForEvent(event, index) {",
          "218:                     const eventContent = event.getWireContent();",
          "219:                     const key = await aliceClient.crypto.olmDevice",
          "220:                         .getInboundGroupSessionKey(",
          "221:                             roomId, eventContent.sender_key, eventContent.session_id,",
          "222:                             index,",
          "223:                         );",
          "224:                     const ksEvent = new MatrixEvent({",
          "225:                         type: \"m.forwarded_room_key\",",
          "226:                         sender: \"@alice:example.com\",",
          "227:                         content: {",
          "228:                             algorithm: olmlib.MEGOLM_ALGORITHM,",
          "229:                             room_id: roomId,",
          "230:                             sender_key: eventContent.sender_key,",
          "231:                             sender_claimed_ed25519_key: key.sender_claimed_ed25519_key,",
          "232:                             session_id: eventContent.session_id,",
          "233:                             session_key: key.key,",
          "234:                             chain_index: key.chain_index,",
          "235:                             forwarding_curve25519_key_chain:",
          "236:                             key.forwarding_curve_key_chain,",
          "237:                         },",
          "238:                     });",
          "240:                     ksEvent.senderCurve25519Key = \"akey\";",
          "241:                     return ksEvent;",
          "242:                 }",
          "244:                 const encryptionCfg = {",
          "245:                     \"algorithm\": \"m.megolm.v1.aes-sha2\",",
          "246:                 };",
          "247:                 const roomId = \"!someroom\";",
          "248:                 const aliceRoom = new Room(roomId, aliceClient, \"@alice:example.com\", {});",
          "249:                 const bobRoom = new Room(roomId, bobClient, \"@bob:example.com\", {});",
          "250:                 aliceClient.store.storeRoom(aliceRoom);",
          "251:                 bobClient.store.storeRoom(bobRoom);",
          "252:                 await aliceClient.setRoomEncryption(roomId, encryptionCfg);",
          "253:                 await bobClient.setRoomEncryption(roomId, encryptionCfg);",
          "254:                 const events = [",
          "255:                     new MatrixEvent({",
          "256:                         type: \"m.room.message\",",
          "257:                         sender: \"@alice:example.com\",",
          "258:                         room_id: roomId,",
          "259:                         event_id: \"$1\",",
          "260:                         content: {",
          "261:                             msgtype: \"m.text\",",
          "262:                             body: \"1\",",
          "263:                         },",
          "264:                     }),",
          "265:                     new MatrixEvent({",
          "266:                         type: \"m.room.message\",",
          "267:                         sender: \"@alice:example.com\",",
          "268:                         room_id: roomId,",
          "269:                         event_id: \"$2\",",
          "270:                         content: {",
          "271:                             msgtype: \"m.text\",",
          "272:                             body: \"2\",",
          "273:                         },",
          "274:                     }),",
          "275:                 ];",
          "276:                 await Promise.all(events.map(async (event) => {",
          "279:                     await aliceClient.crypto.encryptEvent(event, aliceRoom);",
          "280:                     event.clearEvent = undefined;",
          "281:                     event.senderCurve25519Key = null;",
          "282:                     event.claimedEd25519Key = null;",
          "283:                     try {",
          "284:                         await bobClient.crypto.decryptEvent(event);",
          "285:                     } catch (e) {",
          "288:                     }",
          "289:                 }));",
          "291:                 const bobDecryptor = bobClient.crypto.getRoomDecryptor(",
          "292:                     roomId, olmlib.MEGOLM_ALGORITHM,",
          "293:                 );",
          "295:                 let eventPromise = Promise.all(events.map((ev) => {",
          "296:                     return awaitEvent(ev, \"Event.decrypted\");",
          "297:                 }));",
          "302:                 let ksEvent = await keyshareEventForEvent(events[1], 1);",
          "303:                 await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "304:                 await eventPromise;",
          "305:                 expect(events[0].getContent().msgtype).toBe(\"m.bad.encrypted\");",
          "306:                 expect(events[1].getContent().msgtype).not.toBe(\"m.bad.encrypted\");",
          "308:                 const cryptoStore = bobClient.cryptoStore;",
          "309:                 const eventContent = events[0].getWireContent();",
          "310:                 const senderKey = eventContent.sender_key;",
          "311:                 const sessionId = eventContent.session_id;",
          "312:                 const roomKeyRequestBody = {",
          "313:                     algorithm: olmlib.MEGOLM_ALGORITHM,",
          "314:                     room_id: roomId,",
          "315:                     sender_key: senderKey,",
          "316:                     session_id: sessionId,",
          "317:                 };",
          "320:                 expect(await cryptoStore.getOutgoingRoomKeyRequest(roomKeyRequestBody))",
          "321:                     .toBeDefined();",
          "325:                 eventPromise = awaitEvent(events[0], \"Event.decrypted\");",
          "326:                 ksEvent = await keyshareEventForEvent(events[0], 0);",
          "327:                 await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "328:                 await eventPromise;",
          "329:                 expect(events[0].getContent().msgtype).not.toBe(\"m.bad.encrypted\");",
          "330:                 await sleep(1);",
          "332:                 expect(await cryptoStore.getOutgoingRoomKeyRequest(roomKeyRequestBody))",
          "333:                     .toBeFalsy();",
          "334:             },",
          "335:         );",
          "",
          "[Added Lines]",
          "242:         it(\"does not cancel keyshare requests if some messages are not decrypted\", async function() {",
          "243:             const encryptionCfg = {",
          "244:                 \"algorithm\": \"m.megolm.v1.aes-sha2\",",
          "245:             };",
          "246:             const roomId = \"!someroom\";",
          "247:             const aliceRoom = new Room(roomId, aliceClient, \"@alice:example.com\", {});",
          "248:             const bobRoom = new Room(roomId, bobClient, \"@bob:example.com\", {});",
          "249:             aliceClient.store.storeRoom(aliceRoom);",
          "250:             bobClient.store.storeRoom(bobRoom);",
          "251:             await aliceClient.setRoomEncryption(roomId, encryptionCfg);",
          "252:             await bobClient.setRoomEncryption(roomId, encryptionCfg);",
          "253:             const events = [",
          "254:                 new MatrixEvent({",
          "255:                     type: \"m.room.message\",",
          "256:                     sender: \"@alice:example.com\",",
          "257:                     room_id: roomId,",
          "258:                     event_id: \"$1\",",
          "259:                     content: {",
          "260:                         msgtype: \"m.text\",",
          "261:                         body: \"1\",",
          "262:                     },",
          "263:                 }),",
          "264:                 new MatrixEvent({",
          "265:                     type: \"m.room.message\",",
          "266:                     sender: \"@alice:example.com\",",
          "267:                     room_id: roomId,",
          "268:                     event_id: \"$2\",",
          "269:                     content: {",
          "270:                         msgtype: \"m.text\",",
          "271:                         body: \"2\",",
          "272:                     },",
          "273:                 }),",
          "274:             ];",
          "275:             await Promise.all(events.map(async (event) => {",
          "278:                 await aliceClient.crypto.encryptEvent(event, aliceRoom);",
          "279:                 event.clearEvent = undefined;",
          "280:                 event.senderCurve25519Key = null;",
          "281:                 event.claimedEd25519Key = null;",
          "282:                 try {",
          "283:                     await bobClient.crypto.decryptEvent(event);",
          "284:                 } catch (e) {",
          "288:             }));",
          "290:             const bobDecryptor = bobClient.crypto.getRoomDecryptor(",
          "291:                 roomId, olmlib.MEGOLM_ALGORITHM,",
          "292:             );",
          "294:             let eventPromise = Promise.all(events.map((ev) => {",
          "295:                 return awaitEvent(ev, \"Event.decrypted\");",
          "296:             }));",
          "301:             let ksEvent = await keyshareEventForEvent(aliceClient, events[1], 1);",
          "302:             await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "303:             await eventPromise;",
          "304:             expect(events[0].getContent().msgtype).toBe(\"m.bad.encrypted\");",
          "305:             expect(events[1].getContent().msgtype).not.toBe(\"m.bad.encrypted\");",
          "307:             const cryptoStore = bobClient.cryptoStore;",
          "308:             const eventContent = events[0].getWireContent();",
          "309:             const senderKey = eventContent.sender_key;",
          "310:             const sessionId = eventContent.session_id;",
          "311:             const roomKeyRequestBody = {",
          "312:                 algorithm: olmlib.MEGOLM_ALGORITHM,",
          "313:                 room_id: roomId,",
          "314:                 sender_key: senderKey,",
          "315:                 session_id: sessionId,",
          "316:             };",
          "319:             expect(await cryptoStore.getOutgoingRoomKeyRequest(roomKeyRequestBody)).toBeDefined();",
          "323:             eventPromise = awaitEvent(events[0], \"Event.decrypted\");",
          "324:             ksEvent = await keyshareEventForEvent(aliceClient, events[0], 0);",
          "325:             await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "326:             await eventPromise;",
          "327:             expect(events[0].getContent().msgtype).not.toBe(\"m.bad.encrypted\");",
          "328:             await sleep(1);",
          "330:             expect(await cryptoStore.getOutgoingRoomKeyRequest(roomKeyRequestBody)).toBeFalsy();",
          "331:         });",
          "333:         it(\"should error if a forwarded room key lacks a content.sender_key\", async function() {",
          "334:             const encryptionCfg = {",
          "335:                 \"algorithm\": \"m.megolm.v1.aes-sha2\",",
          "336:             };",
          "337:             const roomId = \"!someroom\";",
          "338:             const aliceRoom = new Room(roomId, aliceClient, \"@alice:example.com\", {});",
          "339:             const bobRoom = new Room(roomId, bobClient, \"@bob:example.com\", {});",
          "340:             aliceClient.store.storeRoom(aliceRoom);",
          "341:             bobClient.store.storeRoom(bobRoom);",
          "342:             await aliceClient.setRoomEncryption(roomId, encryptionCfg);",
          "343:             await bobClient.setRoomEncryption(roomId, encryptionCfg);",
          "344:             const event = new MatrixEvent({",
          "345:                 type: \"m.room.message\",",
          "346:                 sender: \"@alice:example.com\",",
          "347:                 room_id: roomId,",
          "348:                 event_id: \"$1\",",
          "349:                 content: {",
          "350:                     msgtype: \"m.text\",",
          "351:                     body: \"1\",",
          "352:                 },",
          "353:             });",
          "356:             await aliceClient.crypto.encryptEvent(event, aliceRoom);",
          "357:             event.clearEvent = undefined;",
          "358:             event.senderCurve25519Key = null;",
          "359:             event.claimedEd25519Key = null;",
          "360:             try {",
          "361:                 await bobClient.crypto.decryptEvent(event);",
          "362:             } catch (e) {",
          "365:             }",
          "367:             const bobDecryptor = bobClient.crypto.getRoomDecryptor(",
          "368:                 roomId, olmlib.MEGOLM_ALGORITHM,",
          "369:             );",
          "371:             const ksEvent = await keyshareEventForEvent(aliceClient, event, 1);",
          "372:             ksEvent.getContent().sender_key = undefined; // test",
          "373:             bobClient.crypto.addInboundGroupSession = jest.fn();",
          "374:             await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "375:             expect(bobClient.crypto.addInboundGroupSession).not.toHaveBeenCalled();",
          "376:         });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:             await client.crypto.bootstrapSecretStorage({",
          "424:                 createSecretStorageKey,",
          "425:             });",
          "426:         });",
          "427:     });",
          "428: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "467:             client.stopClient();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/CrossSigningInfo.spec.js||spec/unit/crypto/CrossSigningInfo.spec.ts": [
          "File: spec/unit/crypto/CrossSigningInfo.spec.js -> spec/unit/crypto/CrossSigningInfo.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     });",
          "68:     it.each(types)(\"should throw if the callback returns falsey\",",
          "72:         });",
          "76:     it(\"should throw if the expected key doesn't come back\", async () => {",
          "77:         const info = new CrossSigningInfo(userId, {",
          "79:         });",
          "80:         await expect(info.getCrossSigningKey(\"master\", \"\")).rejects.toThrow();",
          "81:     });",
          "83:     it(\"should return a key from its callback\", async () => {",
          "84:         const info = new CrossSigningInfo(userId, {",
          "86:         });",
          "87:         const [pubKey, pkSigning] = await info.getCrossSigningKey(\"master\", masterKeyPub);",
          "88:         expect(pubKey).toEqual(masterKeyPub);",
          "",
          "[Removed Lines]",
          "69:                    async ({ type, shouldCache }) => {",
          "70:         const info = new CrossSigningInfo(userId, {",
          "71:             getCrossSigningKey: () => false,",
          "73:         await expect(info.getCrossSigningKey(type)).rejects.toThrow(\"falsey\");",
          "74:     });",
          "78:             getCrossSigningKey: () => masterKeyPub,",
          "85:             getCrossSigningKey: () => testKey,",
          "",
          "[Added Lines]",
          "69:         async ({ type, shouldCache }) => {",
          "70:             const info = new CrossSigningInfo(userId, {",
          "71:                 getCrossSigningKey: async () => false as unknown as Uint8Array,",
          "72:             });",
          "73:             await expect(info.getCrossSigningKey(type)).rejects.toThrow(\"falsey\");",
          "78:             getCrossSigningKey: async () => masterKeyPub as unknown as Uint8Array,",
          "85:             getCrossSigningKey: async () => testKey,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     it.each(types)(\"should request a key from the cache callback (if set)\" +",
          "100:                    \" and does not call app if one is found\" +",
          "101:                    \" %o\",",
          "103:         const getCrossSigningKey = jest.fn().mockImplementation(() => {",
          "104:             if (shouldCache) {",
          "105:                 return Promise.reject(new Error(\"Regular callback called\"));",
          "",
          "[Removed Lines]",
          "102:                    async ({ type, shouldCache }) => {",
          "",
          "[Added Lines]",
          "102:     async ({ type, shouldCache }) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     });",
          "124:     it.each(types)(\"should store a key with the cache callback (if set)\",",
          "142:     it.each(types)(\"does not store a bad key to the cache\",",
          "155:     it.each(types)(\"does not store a value to the cache if it came from the cache\",",
          "156:         async ({ type, shouldCache }) => {",
          "163:         });",
          "178:     it.each(types)(\"requests a key from the cache callback (if set) and then calls app\" +",
          "179:         \" if one is not found\", async ({ type, shouldCache }) => {",
          "",
          "[Removed Lines]",
          "125:                    async ({ type, shouldCache }) => {",
          "126:         const getCrossSigningKey = jest.fn().mockResolvedValue(testKey);",
          "127:         const storeCrossSigningKeyCache = jest.fn().mockResolvedValue(undefined);",
          "128:         const info = new CrossSigningInfo(",
          "129:             userId,",
          "130:             { getCrossSigningKey },",
          "131:             { storeCrossSigningKeyCache },",
          "132:         );",
          "133:         const [pubKey] = await info.getCrossSigningKey(type, masterKeyPub);",
          "134:         expect(pubKey).toEqual(masterKeyPub);",
          "135:         expect(storeCrossSigningKeyCache.mock.calls.length).toEqual(shouldCache ? 1 : 0);",
          "136:         if (shouldCache) {",
          "137:             expect(storeCrossSigningKeyCache.mock.calls[0][0]).toBe(type);",
          "138:             expect(storeCrossSigningKeyCache.mock.calls[0][1]).toBe(testKey);",
          "139:         }",
          "140:     });",
          "143:                    async ({ type, shouldCache }) => {",
          "144:         const getCrossSigningKey = jest.fn().mockResolvedValue(badKey);",
          "145:         const storeCrossSigningKeyCache = jest.fn().mockResolvedValue(undefined);",
          "146:         const info = new CrossSigningInfo(",
          "147:             userId,",
          "148:             { getCrossSigningKey },",
          "149:             { storeCrossSigningKeyCache },",
          "150:         );",
          "151:         await expect(info.getCrossSigningKey(type, masterKeyPub)).rejects.toThrow();",
          "152:         expect(storeCrossSigningKeyCache.mock.calls.length).toEqual(0);",
          "153:     });",
          "157:         const getCrossSigningKey = jest.fn().mockImplementation(() => {",
          "158:             if (shouldCache) {",
          "159:                 return Promise.reject(new Error(\"Regular callback called\"));",
          "160:             } else {",
          "161:                 return Promise.resolve(testKey);",
          "162:             }",
          "164:         const getCrossSigningKeyCache = jest.fn().mockResolvedValue(testKey);",
          "165:         const storeCrossSigningKeyCache = jest.fn().mockRejectedValue(",
          "166:             new Error(\"Tried to store a value from cache\"),",
          "167:         );",
          "168:         const info = new CrossSigningInfo(",
          "169:             userId,",
          "170:             { getCrossSigningKey },",
          "171:             { getCrossSigningKeyCache, storeCrossSigningKeyCache },",
          "172:         );",
          "173:         expect(storeCrossSigningKeyCache.mock.calls.length).toBe(0);",
          "174:         const [pubKey] = await info.getCrossSigningKey(type, masterKeyPub);",
          "175:         expect(pubKey).toEqual(masterKeyPub);",
          "176:     });",
          "",
          "[Added Lines]",
          "125:         async ({ type, shouldCache }) => {",
          "126:             const getCrossSigningKey = jest.fn().mockResolvedValue(testKey);",
          "127:             const storeCrossSigningKeyCache = jest.fn().mockResolvedValue(undefined);",
          "128:             const info = new CrossSigningInfo(",
          "129:                 userId,",
          "130:                 { getCrossSigningKey },",
          "131:                 { storeCrossSigningKeyCache },",
          "132:             );",
          "133:             const [pubKey] = await info.getCrossSigningKey(type, masterKeyPub);",
          "134:             expect(pubKey).toEqual(masterKeyPub);",
          "135:             expect(storeCrossSigningKeyCache.mock.calls.length).toEqual(shouldCache ? 1 : 0);",
          "136:             if (shouldCache) {",
          "137:                 expect(storeCrossSigningKeyCache.mock.calls[0][0]).toBe(type);",
          "138:                 expect(storeCrossSigningKeyCache.mock.calls[0][1]).toBe(testKey);",
          "139:             }",
          "140:         });",
          "143:         async ({ type, shouldCache }) => {",
          "144:             const getCrossSigningKey = jest.fn().mockResolvedValue(badKey);",
          "145:             const storeCrossSigningKeyCache = jest.fn().mockResolvedValue(undefined);",
          "146:             const info = new CrossSigningInfo(",
          "147:                 userId,",
          "148:                 { getCrossSigningKey },",
          "149:                 { storeCrossSigningKeyCache },",
          "150:             );",
          "151:             await expect(info.getCrossSigningKey(type, masterKeyPub)).rejects.toThrow();",
          "152:             expect(storeCrossSigningKeyCache.mock.calls.length).toEqual(0);",
          "153:         });",
          "157:             const getCrossSigningKey = jest.fn().mockImplementation(() => {",
          "158:                 if (shouldCache) {",
          "159:                     return Promise.reject(new Error(\"Regular callback called\"));",
          "160:                 } else {",
          "161:                     return Promise.resolve(testKey);",
          "162:                 }",
          "163:             });",
          "164:             const getCrossSigningKeyCache = jest.fn().mockResolvedValue(testKey);",
          "165:             const storeCrossSigningKeyCache = jest.fn().mockRejectedValue(",
          "166:                 new Error(\"Tried to store a value from cache\"),",
          "167:             );",
          "168:             const info = new CrossSigningInfo(",
          "169:                 userId,",
          "170:                 { getCrossSigningKey },",
          "171:                 { getCrossSigningKeyCache, storeCrossSigningKeyCache },",
          "172:             );",
          "173:             expect(storeCrossSigningKeyCache.mock.calls.length).toBe(0);",
          "174:             const [pubKey] = await info.getCrossSigningKey(type, masterKeyPub);",
          "175:             expect(pubKey).toEqual(masterKeyPub);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221: describe.each([",
          "222:     [\"IndexedDBCryptoStore\",",
          "224:     [\"LocalStorageCryptoStore\",",
          "226:     [\"MemoryCryptoStore\", () => {",
          "227:         const store = new IndexedDBCryptoStore(undefined, \"tests\");",
          "228:         store._backend = new MemoryCryptoStore();",
          "229:         store._backendPromise = Promise.resolve(store._backend);",
          "230:         return store;",
          "231:     }],",
          "",
          "[Removed Lines]",
          "223:      () => new IndexedDBCryptoStore(global.indexedDB, \"tests\")],",
          "225:      () => new IndexedDBCryptoStore(undefined, \"tests\")],",
          "",
          "[Added Lines]",
          "223:         () => new IndexedDBCryptoStore(global.indexedDB, \"tests\")],",
          "225:         () => new IndexedDBCryptoStore(undefined, \"tests\")],",
          "",
          "---------------"
        ],
        "spec/unit/crypto/DeviceList.spec.js||spec/unit/crypto/DeviceList.spec.ts": [
          "File: spec/unit/crypto/DeviceList.spec.js -> spec/unit/crypto/DeviceList.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Copyright 2017 Vector Creations Ltd",
          "3: Copyright 2018, 2019 New Vector Ltd",
          "6: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "7: you may not use this file except in compliance with the License.",
          "",
          "[Removed Lines]",
          "4: Copyright 2019 The Matrix.org Foundation C.I.C.",
          "",
          "[Added Lines]",
          "4: Copyright 2019, 2022 The Matrix.org Foundation C.I.C.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: import * as utils from \"../../../src/utils\";",
          "21: import { MemoryCryptoStore } from \"../../../src/crypto/store/memory-crypto-store\";",
          "22: import { DeviceList } from \"../../../src/crypto/DeviceList\";",
          "25:     \"failures\": {},",
          "26:     \"device_keys\": {",
          "27:         \"@test1:sw1v.org\": {",
          "",
          "[Removed Lines]",
          "24: const signedDeviceList = {",
          "",
          "[Added Lines]",
          "23: import { IDownloadKeyResult, MatrixClient } from \"../../../src\";",
          "24: import { OlmDevice } from \"../../../src/crypto/OlmDevice\";",
          "26: const signedDeviceList: IDownloadKeyResult = {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:                     \"m.megolm.v1.aes-sha2\",",
          "46:                 ],",
          "47:                 \"device_id\": \"HGKAWHRVJQ\",",
          "49:             },",
          "50:         },",
          "51:     },",
          "52: };",
          "55:     \"failures\": {},",
          "56:     \"device_keys\": {",
          "57:         \"@test2:sw1v.org\": {",
          "",
          "[Removed Lines]",
          "48:                 \"unsigned\": {},",
          "54: const signedDeviceList2 = {",
          "",
          "[Added Lines]",
          "50:                 \"unsigned\": {",
          "51:                     \"device_display_name\": \"\",",
          "52:                 },",
          "58: const signedDeviceList2: IDownloadKeyResult = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:                     \"m.megolm.v1.aes-sha2\",",
          "76:                 ],",
          "77:                 \"device_id\": \"QJVRHWAKGH\",",
          "79:             },",
          "80:         },",
          "81:     },",
          "",
          "[Removed Lines]",
          "78:                 \"unsigned\": {},",
          "",
          "[Added Lines]",
          "82:                 \"unsigned\": {",
          "83:                     \"device_display_name\": \"\",",
          "84:                 },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:             downloadKeysForUsers: downloadSpy,",
          "105:             getUserId: () => '@test1:sw1v.org',",
          "106:             deviceId: 'HGKAWHRVJQ',",
          "108:         const mockOlm = {",
          "109:             verifySignature: function(key, message, signature) {},",
          "111:         const dl = new DeviceList(baseApis, cryptoStore, mockOlm, keyDownloadChunkSize);",
          "112:         deviceLists.push(dl);",
          "113:         return dl;",
          "",
          "[Removed Lines]",
          "107:         };",
          "110:         };",
          "",
          "[Added Lines]",
          "113:         } as unknown as MatrixClient;",
          "116:         } as unknown as OlmDevice;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119:         dl.startTrackingDeviceList('@test1:sw1v.org');",
          "122:         downloadSpy.mockReturnValue(queryDefer1.promise);",
          "124:         const prom1 = dl.refreshOutdatedDeviceLists();",
          "",
          "[Removed Lines]",
          "121:         const queryDefer1 = utils.defer();",
          "",
          "[Added Lines]",
          "127:         const queryDefer1 = utils.defer<IDownloadKeyResult>();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "128:         return prom1.then(() => {",
          "129:             const storedKeys = dl.getRawStoredDevicesForUser('@test1:sw1v.org');",
          "130:             expect(Object.keys(storedKeys)).toEqual(['HGKAWHRVJQ']);",
          "131:         });",
          "132:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:             dl.stop();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "138:         dl.startTrackingDeviceList('@test1:sw1v.org');",
          "141:         downloadSpy.mockReturnValue(queryDefer1.promise);",
          "143:         const prom1 = dl.refreshOutdatedDeviceLists();",
          "",
          "[Removed Lines]",
          "140:         const queryDefer1 = utils.defer();",
          "",
          "[Added Lines]",
          "147:         const queryDefer1 = utils.defer<IDownloadKeyResult>();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "154:         dl.saveIfDirty().then(() => {",
          "156:             queryDefer1.resolve({",
          "157:                 device_keys: {",
          "158:                     '@test1:sw1v.org': {},",
          "159:                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:                 failures: {},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "165:             logger.log(\"Creating new devicelist to simulate app reload\");",
          "166:             downloadSpy.mockReset();",
          "167:             const dl2 = createTestDeviceList();",
          "169:             downloadSpy.mockReturnValue(queryDefer3.promise);",
          "171:             const prom3 = dl2.refreshOutdatedDeviceLists();",
          "172:             expect(downloadSpy).toHaveBeenCalledWith(['@test1:sw1v.org'], {});",
          "174:             queryDefer3.resolve(utils.deepCopy(signedDeviceList));",
          "",
          "[Removed Lines]",
          "168:             const queryDefer3 = utils.defer();",
          "",
          "[Added Lines]",
          "176:             const queryDefer3 = utils.defer<IDownloadKeyResult>();",
          "181:             dl2.stop();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "178:         }).then(() => {",
          "179:             const storedKeys = dl.getRawStoredDevicesForUser('@test1:sw1v.org');",
          "180:             expect(Object.keys(storedKeys)).toEqual(['HGKAWHRVJQ']);",
          "181:         });",
          "182:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:             dl.stop();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "187:         dl.startTrackingDeviceList('@test1:sw1v.org');",
          "188:         dl.startTrackingDeviceList('@test2:sw1v.org');",
          "191:         downloadSpy.mockReturnValueOnce(queryDefer1.promise);",
          "193:         downloadSpy.mockReturnValueOnce(queryDefer2.promise);",
          "195:         const prom1 = dl.refreshOutdatedDeviceLists();",
          "",
          "[Removed Lines]",
          "190:         const queryDefer1 = utils.defer();",
          "192:         const queryDefer2 = utils.defer();",
          "",
          "[Added Lines]",
          "200:         const queryDefer1 = utils.defer<IDownloadKeyResult>();",
          "202:         const queryDefer2 = utils.defer<IDownloadKeyResult>();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "204:             expect(Object.keys(storedKeys1)).toEqual(['HGKAWHRVJQ']);",
          "205:             const storedKeys2 = dl.getRawStoredDevicesForUser('@test2:sw1v.org');",
          "206:             expect(Object.keys(storedKeys2)).toEqual(['QJVRHWAKGH']);",
          "207:         });",
          "208:     });",
          "209: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:             dl.stop();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/algorithms/megolm.spec.js||spec/unit/crypto/algorithms/megolm.spec.js": [
          "File: spec/unit/crypto/algorithms/megolm.spec.js -> spec/unit/crypto/algorithms/megolm.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:         });",
          "259:         describe(\"session reuse and key reshares\", () => {",
          "260:             let megolmEncryption;",
          "261:             let aliceDeviceInfo;",
          "262:             let mockRoom;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:             const rotationPeriodMs = 999 * 24 * 60 * 60 * 1000; // 999 days, so we don't have to deal with it",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:                     baseApis: mockBaseApis,",
          "319:                     roomId: ROOM_ID,",
          "320:                     config: {",
          "322:                     },",
          "323:                 });",
          "",
          "[Removed Lines]",
          "321:                         rotation_period_ms: 9999999999999,",
          "",
          "[Added Lines]",
          "323:                         rotation_period_ms: rotationPeriodMs,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:                 };",
          "337:             });",
          "339:             it(\"re-uses sessions for sequential messages\", async function() {",
          "340:                 const ct1 = await megolmEncryption.encryptMessage(mockRoom, \"a.fake.type\", {",
          "341:                     body: \"Some text\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:             it(\"should use larger otkTimeout when preparing to encrypt room\", async () => {",
          "342:                 megolmEncryption.prepareToEncrypt(mockRoom);",
          "343:                 await megolmEncryption.encryptMessage(mockRoom, \"a.fake.type\", {",
          "344:                     body: \"Some text\",",
          "345:                 });",
          "346:                 expect(mockRoom.getEncryptionTargetMembers).toHaveBeenCalled();",
          "348:                 expect(mockBaseApis.claimOneTimeKeys).toHaveBeenCalledWith(",
          "349:                     [['@alice:home.server', 'aliceDevice']], 'signed_curve25519', 10000,",
          "350:                 );",
          "351:             });",
          "353:             it(\"should generate a new session if this one needs rotation\", async () => {",
          "354:                 const session = await megolmEncryption.prepareNewSession(false);",
          "355:                 session.creationTime -= rotationPeriodMs + 10000; // a smidge over the rotation time",
          "357:                 megolmEncryption.setupPromise = Promise.resolve(session);",
          "359:                 const prepareNewSessionSpy = jest.spyOn(megolmEncryption, \"prepareNewSession\");",
          "360:                 await megolmEncryption.encryptMessage(mockRoom, \"a.fake.type\", {",
          "361:                     body: \"Some text\",",
          "362:                 });",
          "363:                 expect(prepareNewSessionSpy).toHaveBeenCalledTimes(1);",
          "364:             });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:         });",
          "604:         await aliceClient.crypto.encryptEvent(event, aliceRoom);",
          "605:         await sendPromise;",
          "606:     });",
          "608:     it(\"throws an error describing why it doesn't have a key\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:         aliceClient.stopClient();",
          "634:         bobClient.stopClient();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "673:                 session_id: \"session_id2\",",
          "674:             },",
          "675:         }))).rejects.toThrow(\"The sender has blocked you.\");",
          "676:     });",
          "678:     it(\"throws an error describing the lack of an olm session\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:         aliceClient.stopClient();",
          "706:         bobClient.stopClient();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "756:             },",
          "757:             origin_server_ts: now,",
          "758:         }))).rejects.toThrow(\"The sender was unable to establish a secure channel.\");",
          "759:     });",
          "761:     it(\"throws an error to indicate a wedged olm session\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "790:         aliceClient.stopClient();",
          "791:         bobClient.stopClient();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "806:             },",
          "807:             origin_server_ts: now,",
          "808:         }))).rejects.toThrow(\"The secure channel with the sender was corrupted.\");",
          "809:     });",
          "810: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:         aliceClient.stopClient();",
          "843:         bobClient.stopClient();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/backup.spec.js||spec/unit/crypto/backup.spec.js": [
          "File: spec/unit/crypto/backup.spec.js -> spec/unit/crypto/backup.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { MatrixClient } from \"../../../src/client\";",
          "22: import { MatrixEvent } from \"../../../src/models/event\";",
          "23: import * as algorithms from \"../../../src/crypto/algorithms\";",
          "25: import { MemoryCryptoStore } from \"../../../src/crypto/store/memory-crypto-store\";",
          "26: import { MockStorageApi } from \"../../MockStorageApi\";",
          "27: import * as testUtils from \"../../test-utils/test-utils\";",
          "",
          "[Removed Lines]",
          "24: import { WebStorageSessionStore } from \"../../../src/store/session/webstorage\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     Object.assign(keys, k);",
          "119: }",
          "122:     const scheduler = [",
          "123:         \"getQueueForEvent\", \"queueEvent\", \"removeEventFromQueue\",",
          "124:         \"setProcessFunction\",",
          "",
          "[Removed Lines]",
          "121: function makeTestClient(sessionStore, cryptoStore) {",
          "",
          "[Added Lines]",
          "120: function makeTestClient(cryptoStore) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:         scheduler: scheduler,",
          "142:         userId: \"@alice:bar\",",
          "143:         deviceId: \"device\",",
          "145:         cryptoStore: cryptoStore,",
          "146:         cryptoCallbacks: { getCrossSigningKey, saveCrossSigningKeys },",
          "147:     });",
          "",
          "[Removed Lines]",
          "144:         sessionStore: sessionStore,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:     let mockOlmLib;",
          "162:     let mockCrypto;",
          "163:     let mockStorage;",
          "165:     let cryptoStore;",
          "166:     let megolmDecryption;",
          "167:     beforeEach(async function() {",
          "",
          "[Removed Lines]",
          "164:     let sessionStore;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:         mockCrypto.backupInfo = CURVE25519_BACKUP_INFO;",
          "176:         mockStorage = new MockStorageApi();",
          "178:         cryptoStore = new MemoryCryptoStore(mockStorage);",
          "180:         olmDevice = new OlmDevice(cryptoStore);",
          "",
          "[Removed Lines]",
          "177:         sessionStore = new WebStorageSessionStore(mockStorage);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:             const ibGroupSession = new Olm.InboundGroupSession();",
          "262:             ibGroupSession.create(groupSession.session_key());",
          "266:             megolmDecryption = new MegolmDecryption({",
          "267:                 userId: '@user:id',",
          "",
          "[Removed Lines]",
          "264:             const client = makeTestClient(sessionStore, cryptoStore);",
          "",
          "[Added Lines]",
          "260:             const client = makeTestClient(cryptoStore);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329:                         );",
          "330:                     }).then(() => {",
          "331:                         expect(numCalls).toBe(1);",
          "332:                     });",
          "333:                 });",
          "334:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:                         client.stopClient();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "339:             const ibGroupSession = new Olm.InboundGroupSession();",
          "340:             ibGroupSession.create(groupSession.session_key());",
          "344:             megolmDecryption = new MegolmDecryption({",
          "345:                 userId: '@user:id',",
          "",
          "[Removed Lines]",
          "342:             const client = makeTestClient(sessionStore, cryptoStore);",
          "",
          "[Added Lines]",
          "339:             const client = makeTestClient(cryptoStore);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "411:                         );",
          "412:                     }).then(() => {",
          "413:                         expect(numCalls).toBe(1);",
          "414:                     });",
          "415:                 });",
          "416:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:                         client.stopClient();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "421:             const ibGroupSession = new Olm.InboundGroupSession();",
          "422:             ibGroupSession.create(groupSession.session_key());",
          "426:             megolmDecryption = new MegolmDecryption({",
          "427:                 userId: '@user:id',",
          "",
          "[Removed Lines]",
          "424:             const client = makeTestClient(sessionStore, cryptoStore);",
          "",
          "[Added Lines]",
          "422:             const client = makeTestClient(cryptoStore);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "487:                 }),",
          "488:             ]);",
          "489:             expect(numCalls).toBe(2);",
          "490:         });",
          "492:         it('retries when a backup fails', function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:             client.stopClient();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "517:                 scheduler: scheduler,",
          "518:                 userId: \"@alice:bar\",",
          "519:                 deviceId: \"device\",",
          "521:                 cryptoStore: cryptoStore,",
          "522:             });",
          "",
          "[Removed Lines]",
          "520:                 sessionStore: sessionStore,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "593:                         );",
          "594:                     }).then(() => {",
          "595:                         expect(numCalls).toBe(2);",
          "596:                     });",
          "597:                 });",
          "598:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:                         client.stopClient();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "602:         let client;",
          "604:         beforeEach(function() {",
          "607:             megolmDecryption = new MegolmDecryption({",
          "608:                 userId: '@user:id',",
          "",
          "[Removed Lines]",
          "605:             client = makeTestClient(sessionStore, cryptoStore);",
          "",
          "[Added Lines]",
          "604:             client = makeTestClient(cryptoStore);",
          "",
          "---------------"
        ],
        "spec/unit/crypto/cross-signing.spec.js||spec/unit/crypto/cross-signing.spec.ts": [
          "File: spec/unit/crypto/cross-signing.spec.js -> spec/unit/crypto/cross-signing.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import '../../olm-loader';",
          "19: import anotherjson from 'another-json';",
          "21: import * as olmlib from \"../../../src/crypto/olmlib\";",
          "24: import { MatrixError } from '../../../src/http-api';",
          "25: import { logger } from '../../../src/logger';",
          "27: const PUSH_RULES_RESPONSE = {",
          "28:     method: \"GET\",",
          "",
          "[Removed Lines]",
          "22: import { TestClient } from '../../TestClient';",
          "23: import { resetCrossSigningKeys } from \"./crypto-utils\";",
          "",
          "[Added Lines]",
          "20: import { PkSigning } from '@matrix-org/olm';",
          "25: import { ICrossSigningKey, ICreateClientOpts, ISignedKey } from '../../../src/client';",
          "26: import { CryptoEvent } from '../../../src/crypto';",
          "27: import { IDevice } from '../../../src/crypto/deviceinfo';",
          "28: import { TestClient } from '../../TestClient';",
          "29: import { resetCrossSigningKeys } from \"./crypto-utils\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     });",
          "48: }",
          "53:     function getCrossSigningKey(type) {",
          "54:         return keys[type];",
          "55:     }",
          "",
          "[Removed Lines]",
          "50: async function makeTestClient(userInfo, options, keys) {",
          "51:     if (!keys) keys = {};",
          "",
          "[Added Lines]",
          "54: async function makeTestClient(",
          "55:     userInfo: { userId: string, deviceId: string},",
          "56:     options: Partial<ICreateClientOpts> = {},",
          "57:     keys = {},",
          "58: ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         Object.assign(keys, k);",
          "59:     }",
          "62:     options.cryptoCallbacks = Object.assign(",
          "63:         {}, { getCrossSigningKey, saveCrossSigningKeys }, options.cryptoCallbacks || {},",
          "64:     );",
          "",
          "[Removed Lines]",
          "61:     if (!options) options = {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:         const { client: alice } = await makeTestClient(",
          "87:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "88:         );",
          "90:             await olmlib.verifySignature(",
          "91:                 alice.crypto.olmDevice, keys.master_key, \"@alice:example.com\",",
          "92:                 \"Osborne2\", alice.crypto.olmDevice.deviceEd25519Key,",
          "93:             );",
          "94:         });",
          "99:         await alice.bootstrapCrossSigning({",
          "101:         });",
          "102:         expect(alice.uploadDeviceSigningKeys).toHaveBeenCalled();",
          "103:     });",
          "105:     it(\"should abort bootstrap if device signing auth fails\", async function() {",
          "",
          "[Removed Lines]",
          "89:         alice.uploadDeviceSigningKeys = jest.fn(async (auth, keys) => {",
          "95:         alice.uploadKeySignatures = async () => {};",
          "96:         alice.setAccountData = async () => {};",
          "97:         alice.getAccountDataFromServer = async () => {};",
          "100:             authUploadDeviceSigningKeys: async func => await func({}),",
          "",
          "[Added Lines]",
          "94:         alice.uploadDeviceSigningKeys = jest.fn().mockImplementation(async (auth, keys) => {",
          "100:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "101:         alice.setAccountData = async () => ({});",
          "102:         alice.getAccountDataFromServer = async <T>() => ({} as T);",
          "105:             authUploadDeviceSigningKeys: async func => { await func({}); },",
          "108:         alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:             error.httpStatus == 401;",
          "134:             throw error;",
          "135:         };",
          "139:         const authUploadDeviceSigningKeys = async func => await func({});",
          "",
          "[Removed Lines]",
          "136:         alice.uploadKeySignatures = async () => {};",
          "137:         alice.setAccountData = async () => {};",
          "138:         alice.getAccountDataFromServer = async () => { };",
          "",
          "[Added Lines]",
          "142:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "143:         alice.setAccountData = async () => ({});",
          "144:         alice.getAccountDataFromServer = async <T extends {[k: string]: any}>(): Promise<T> => ({} as T);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:             }",
          "152:         }",
          "153:         expect(bootstrapDidThrow).toBeTruthy();",
          "154:     });",
          "156:     it(\"should upload a signature when a user is verified\", async function() {",
          "157:         const { client: alice } = await makeTestClient(",
          "158:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "159:         );",
          "163:         await resetCrossSigningKeys(alice);",
          "",
          "[Removed Lines]",
          "160:         alice.uploadDeviceSigningKeys = async () => {};",
          "161:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "160:         alice.stopClient();",
          "167:         alice.uploadDeviceSigningKeys = async () => ({});",
          "168:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172:                     },",
          "173:                 },",
          "174:             },",
          "175:         });",
          "177:         const promise = new Promise((resolve, reject) => {",
          "179:                 resolve(...args);",
          "180:             };",
          "181:         });",
          "182:         await alice.setDeviceVerified(\"@bob:example.com\", \"bobs+master+pubkey\", true);",
          "184:         await promise;",
          "185:     });",
          "187:     it.skip(\"should get cross-signing keys from sync\", async function() {",
          "",
          "[Removed Lines]",
          "178:             alice.uploadKeySignatures = (...args) => {",
          "",
          "[Added Lines]",
          "182:             firstUse: false,",
          "183:             crossSigningVerifiedBefore: false,",
          "187:             alice.uploadKeySignatures = async (...args) => {",
          "189:                 return { failures: {} };",
          "195:         alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "203:             {",
          "204:                 cryptoCallbacks: {",
          "207:                         if (type === 'master') {",
          "208:                             return masterKey;",
          "209:                         } else {",
          "",
          "[Removed Lines]",
          "206:                     getCrossSigningKey: type => {",
          "",
          "[Added Lines]",
          "217:                     getCrossSigningKey: async type => {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "215:         );",
          "217:         const keyChangePromise = new Promise((resolve, reject) => {",
          "219:                 resolve(e);",
          "220:                 await alice.checkOwnCrossSigningTrust({",
          "221:                     allowPrivateKeyRequests: true,",
          "",
          "[Removed Lines]",
          "218:             alice.once(\"crossSigning.keysChanged\", async (e) => {",
          "",
          "[Added Lines]",
          "229:             alice.once(CryptoEvent.KeysChanged, async (e) => {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "223:             });",
          "224:         });",
          "228:                 try {",
          "229:                     await olmlib.verifySignature(",
          "230:                         alice.crypto.olmDevice,",
          "231:                         content[\"@alice:example.com\"][",
          "232:                             \"nqOvzeuGWT/sRx3h7+MHoInYj3Uk2LD/unI9kDYcHwk\"",
          "234:                         \"@alice:example.com\",",
          "235:                         \"Osborne2\", alice.crypto.olmDevice.deviceEd25519Key,",
          "236:                     );",
          "",
          "[Removed Lines]",
          "226:         const uploadSigsPromise = new Promise((resolve, reject) => {",
          "227:             alice.uploadKeySignatures = jest.fn(async (content) => {",
          "233:                             ],",
          "",
          "[Added Lines]",
          "237:         const uploadSigsPromise = new Promise<void>((resolve, reject) => {",
          "238:             alice.uploadKeySignatures = jest.fn().mockImplementation(async (content) => {",
          "244:                         ],",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "246:             });",
          "247:         });",
          "249:         const deviceInfo = alice.crypto.deviceList.devices[\"@alice:example.com\"]",
          "250:             .Osborne2;",
          "251:         const aliceDevice = {",
          "252:             user_id: \"@alice:example.com\",",
          "253:             device_id: \"Osborne2\",",
          "254:         };",
          "257:         await alice.crypto.signObject(aliceDevice);",
          "261:         const responses = [",
          "",
          "[Removed Lines]",
          "255:         aliceDevice.keys = deviceInfo.keys;",
          "256:         aliceDevice.algorithms = deviceInfo.algorithms;",
          "258:         olmlib.pkSign(aliceDevice, selfSigningKey, \"@alice:example.com\");",
          "",
          "[Added Lines]",
          "266:             keys: deviceInfo.keys,",
          "267:             algorithms: deviceInfo.algorithms,",
          "270:         olmlib.pkSign(",
          "271:             aliceDevice as ISignedKey,",
          "272:             selfSigningKey as unknown as PkSigning,",
          "273:             \"@alice:example.com\",",
          "274:             '',",
          "275:         );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "353:         expect(aliceDeviceTrust.isLocallyVerified()).toBeTruthy();",
          "354:         expect(aliceDeviceTrust.isTofu()).toBeTruthy();",
          "355:         expect(aliceDeviceTrust.isVerified()).toBeTruthy();",
          "356:     });",
          "358:     it(\"should use trust chain to determine device verification\", async function() {",
          "359:         const { client: alice } = await makeTestClient(",
          "360:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "361:         );",
          "365:         await resetCrossSigningKeys(alice);",
          "",
          "[Removed Lines]",
          "362:         alice.uploadDeviceSigningKeys = async () => {};",
          "363:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "373:         alice.stopClient();",
          "380:         alice.uploadDeviceSigningKeys = async () => ({});",
          "381:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "370:         const bobSigning = new global.Olm.PkSigning();",
          "371:         const bobPrivkey = bobSigning.generate_seed();",
          "372:         const bobPubkey = bobSigning.init_with_seed(bobPrivkey);",
          "374:             user_id: \"@bob:example.com\",",
          "375:             usage: [\"self_signing\"],",
          "376:             keys: {",
          "",
          "[Removed Lines]",
          "373:         const bobSSK = {",
          "",
          "[Added Lines]",
          "391:         const bobSSK: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "394:                 },",
          "395:                 self_signing: bobSSK,",
          "396:             },",
          "399:         });",
          "401:             user_id: \"@bob:example.com\",",
          "402:             device_id: \"Dynabook\",",
          "403:             algorithms: [\"m.olm.curve25519-aes-sha256\", \"m.megolm.v1.aes-sha\"],",
          "",
          "[Removed Lines]",
          "397:             firstUse: 1,",
          "398:             unsigned: {},",
          "400:         const bobDevice = {",
          "",
          "[Added Lines]",
          "415:             firstUse: true,",
          "416:             crossSigningVerifiedBefore: false,",
          "418:         const bobDeviceUnsigned = {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "406:                 \"ed25519:Dynabook\": \"someOtherPubkey\",",
          "407:             },",
          "408:         };",
          "413:             },",
          "414:         };",
          "415:         alice.crypto.deviceList.storeDevicesForUser(\"@bob:example.com\", {",
          "416:             Dynabook: bobDevice,",
          "",
          "[Removed Lines]",
          "409:         const sig = bobSigning.sign(anotherjson.stringify(bobDevice));",
          "410:         bobDevice.signatures = {",
          "411:             \"@bob:example.com\": {",
          "412:                 [\"ed25519:\" + bobPubkey]: sig,",
          "",
          "[Added Lines]",
          "427:         const sig = bobSigning.sign(anotherjson.stringify(bobDeviceUnsigned));",
          "428:         const bobDevice: IDevice = {",
          "429:             ...bobDeviceUnsigned,",
          "430:             signatures: {",
          "431:                 \"@bob:example.com\": {",
          "432:                     [\"ed25519:\" + bobPubkey]: sig,",
          "433:                 },",
          "435:             verified: 0,",
          "436:             known: false,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "425:         expect(bobDeviceTrust.isTofu()).toBeTruthy();",
          "429:         await alice.setDeviceVerified(\"@bob:example.com\", bobMasterPubkey, true);",
          "",
          "[Removed Lines]",
          "428:         alice.uploadKeySignatures = () => {};",
          "",
          "[Added Lines]",
          "451:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "437:         expect(bobDeviceTrust2.isCrossSigningVerified()).toBeTruthy();",
          "438:         expect(bobDeviceTrust2.isLocallyVerified()).toBeFalsy();",
          "439:         expect(bobDeviceTrust2.isTofu()).toBeTruthy();",
          "440:     });",
          "442:     it.skip(\"should trust signatures received from other devices\", async function() {",
          "444:         const { client: alice, httpBackend } = await makeTestClient(",
          "445:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "446:             null,",
          "",
          "[Removed Lines]",
          "443:         const aliceKeys = {};",
          "",
          "[Added Lines]",
          "463:         alice.stopClient();",
          "467:         const aliceKeys: Record<string, PkSigning> = {};",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "448:         );",
          "449:         alice.crypto.deviceList.startTrackingDeviceList(\"@bob:example.com\");",
          "450:         alice.crypto.deviceList.stopTrackingAllDeviceLists = () => {};",
          "455:         await resetCrossSigningKeys(alice);",
          "",
          "[Removed Lines]",
          "451:         alice.uploadDeviceSigningKeys = async () => {};",
          "452:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "475:         alice.uploadDeviceSigningKeys = async () => ({});",
          "476:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "461:             0x34, 0xf2, 0x4b, 0x64, 0x9b, 0x52, 0xf8, 0x5f,",
          "462:         ]);",
          "466:                 if (userId === \"@bob:example.com\") {",
          "467:                     resolve();",
          "468:                 }",
          "469:             });",
          "470:         });",
          "472:         const deviceInfo = alice.crypto.deviceList.devices[\"@alice:example.com\"]",
          "473:             .Osborne2;",
          "474:         const aliceDevice = {",
          "475:             user_id: \"@alice:example.com\",",
          "476:             device_id: \"Osborne2\",",
          "477:         };",
          "480:         await alice.crypto.signObject(aliceDevice);",
          "482:         const bobOlmAccount = new global.Olm.Account();",
          "483:         bobOlmAccount.create();",
          "484:         const bobKeys = JSON.parse(bobOlmAccount.identity_keys());",
          "486:             user_id: \"@bob:example.com\",",
          "487:             device_id: \"Dynabook\",",
          "488:             algorithms: [olmlib.OLM_ALGORITHM, olmlib.MEGOLM_ALGORITHM],",
          "",
          "[Removed Lines]",
          "464:         const keyChangePromise = new Promise((resolve, reject) => {",
          "465:             alice.crypto.deviceList.once(\"userCrossSigningUpdated\", (userId) => {",
          "478:         aliceDevice.keys = deviceInfo.keys;",
          "479:         aliceDevice.algorithms = deviceInfo.algorithms;",
          "485:         const bobDevice = {",
          "",
          "[Added Lines]",
          "488:         const keyChangePromise = new Promise<void>((resolve, reject) => {",
          "489:             alice.crypto.deviceList.once(CryptoEvent.UserCrossSigningUpdated, (userId) => {",
          "502:             keys: deviceInfo.keys,",
          "503:             algorithms: deviceInfo.algorithms,",
          "510:         const bobDeviceUnsigned = {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "491:                 \"curve25519:Dynabook\": bobKeys.curve25519,",
          "492:             },",
          "493:         };",
          "498:             },",
          "499:         };",
          "503:             user_id: \"@bob:example.com\",",
          "504:             usage: [\"master\"],",
          "505:             keys: {",
          "",
          "[Removed Lines]",
          "494:         const deviceStr = anotherjson.stringify(bobDevice);",
          "495:         bobDevice.signatures = {",
          "496:             \"@bob:example.com\": {",
          "497:                 \"ed25519:Dynabook\": bobOlmAccount.sign(deviceStr),",
          "500:         olmlib.pkSign(bobDevice, selfSigningKey, \"@bob:example.com\");",
          "502:         const bobMaster = {",
          "",
          "[Added Lines]",
          "519:         const deviceStr = anotherjson.stringify(bobDeviceUnsigned);",
          "520:         const bobDevice: IDevice = {",
          "521:             ...bobDeviceUnsigned,",
          "522:             signatures: {",
          "523:                 \"@bob:example.com\": {",
          "524:                     \"ed25519:Dynabook\": bobOlmAccount.sign(deviceStr),",
          "525:                 },",
          "527:             verified: 0,",
          "528:             known: false,",
          "530:         olmlib.pkSign(",
          "531:             bobDevice,",
          "532:             selfSigningKey as unknown as PkSigning,",
          "533:             \"@bob:example.com\",",
          "534:             '',",
          "535:         );",
          "537:         const bobMaster: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "507:                 \"nqOvzeuGWT/sRx3h7+MHoInYj3Uk2LD/unI9kDYcHwk\",",
          "508:             },",
          "509:         };",
          "",
          "[Removed Lines]",
          "510:         olmlib.pkSign(bobMaster, aliceKeys.user_signing, \"@alice:example.com\");",
          "",
          "[Added Lines]",
          "545:         olmlib.pkSign(bobMaster, aliceKeys.user_signing, \"@alice:example.com\", '');",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "600:         expect(bobDeviceTrust.isCrossSigningVerified()).toBeTruthy();",
          "601:         expect(bobDeviceTrust.isLocallyVerified()).toBeFalsy();",
          "602:         expect(bobDeviceTrust.isTofu()).toBeTruthy();",
          "603:     });",
          "605:     it(\"should dis-trust an unsigned device\", async function() {",
          "606:         const { client: alice } = await makeTestClient(",
          "607:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "608:         );",
          "612:         await resetCrossSigningKeys(alice);",
          "",
          "[Removed Lines]",
          "609:         alice.uploadDeviceSigningKeys = async () => {};",
          "610:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "638:         alice.stopClient();",
          "645:         alice.uploadDeviceSigningKeys = async () => ({});",
          "646:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "618:         const bobSigning = new global.Olm.PkSigning();",
          "619:         const bobPrivkey = bobSigning.generate_seed();",
          "620:         const bobPubkey = bobSigning.init_with_seed(bobPrivkey);",
          "622:             user_id: \"@bob:example.com\",",
          "623:             usage: [\"self_signing\"],",
          "624:             keys: {",
          "",
          "[Removed Lines]",
          "621:         const bobSSK = {",
          "",
          "[Added Lines]",
          "657:         const bobSSK: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "642:                 },",
          "643:                 self_signing: bobSSK,",
          "644:             },",
          "647:         });",
          "648:         const bobDevice = {",
          "649:             user_id: \"@bob:example.com\",",
          "",
          "[Removed Lines]",
          "645:             firstUse: 1,",
          "646:             unsigned: {},",
          "",
          "[Added Lines]",
          "681:             firstUse: true,",
          "682:             crossSigningVerifiedBefore: false,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "655:             },",
          "656:         };",
          "657:         alice.crypto.deviceList.storeDevicesForUser(\"@bob:example.com\", {",
          "659:         });",
          "661:         const bobDeviceTrust = alice.checkDeviceTrust(\"@bob:example.com\", \"Dynabook\");",
          "",
          "[Removed Lines]",
          "658:             Dynabook: bobDevice,",
          "",
          "[Added Lines]",
          "694:             Dynabook: bobDevice as unknown as IDevice,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "669:         const bobDeviceTrust2 = alice.checkDeviceTrust(\"@bob:example.com\", \"Dynabook\");",
          "670:         expect(bobDeviceTrust2.isVerified()).toBeFalsy();",
          "671:         expect(bobDeviceTrust2.isTofu()).toBeFalsy();",
          "672:     });",
          "674:     it(\"should dis-trust a user when their ssk changes\", async function() {",
          "675:         const { client: alice } = await makeTestClient(",
          "676:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "677:         );",
          "680:         await resetCrossSigningKeys(alice);",
          "682:         const bobMasterSigning = new global.Olm.PkSigning();",
          "",
          "[Removed Lines]",
          "678:         alice.uploadDeviceSigningKeys = async () => {};",
          "679:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "708:         alice.stopClient();",
          "715:         alice.uploadDeviceSigningKeys = async () => ({});",
          "716:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "685:         const bobSigning = new global.Olm.PkSigning();",
          "686:         const bobPrivkey = bobSigning.generate_seed();",
          "687:         const bobPubkey = bobSigning.init_with_seed(bobPrivkey);",
          "689:             user_id: \"@bob:example.com\",",
          "690:             usage: [\"self_signing\"],",
          "691:             keys: {",
          "",
          "[Removed Lines]",
          "688:         const bobSSK = {",
          "",
          "[Added Lines]",
          "725:         const bobSSK: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "709:                 },",
          "710:                 self_signing: bobSSK,",
          "711:             },",
          "714:         });",
          "716:             user_id: \"@bob:example.com\",",
          "717:             device_id: \"Dynabook\",",
          "718:             algorithms: [\"m.olm.curve25519-aes-sha256\", \"m.megolm.v1.aes-sha\"],",
          "",
          "[Removed Lines]",
          "712:             firstUse: 1,",
          "713:             unsigned: {},",
          "715:         const bobDevice = {",
          "",
          "[Added Lines]",
          "749:             firstUse: true,",
          "750:             crossSigningVerifiedBefore: false,",
          "752:         const bobDeviceUnsigned = {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "721:                 \"ed25519:Dynabook\": \"someOtherPubkey\",",
          "722:             },",
          "723:         };",
          "725:         const sig = bobSigning.sign(bobDeviceString);",
          "729:         alice.crypto.deviceList.storeDevicesForUser(\"@bob:example.com\", {",
          "730:             Dynabook: bobDevice,",
          "731:         });",
          "734:         await alice.setDeviceVerified(\"@bob:example.com\", bobMasterPubkey, true);",
          "",
          "[Removed Lines]",
          "724:         const bobDeviceString = anotherjson.stringify(bobDevice);",
          "726:         bobDevice.signatures = {};",
          "727:         bobDevice.signatures[\"@bob:example.com\"] = {};",
          "728:         bobDevice.signatures[\"@bob:example.com\"][\"ed25519:\" + bobPubkey] = sig;",
          "733:         alice.uploadKeySignatures = () => {};",
          "",
          "[Added Lines]",
          "761:         const bobDeviceString = anotherjson.stringify(bobDeviceUnsigned);",
          "763:         const bobDevice: IDevice = {",
          "764:             ...bobDeviceUnsigned,",
          "765:             verified: 0,",
          "766:             known: false,",
          "767:             signatures: {",
          "768:                 \"@bob:example.com\": {",
          "769:                     [\"ed25519:\" + bobPubkey]: sig,",
          "770:                 },",
          "771:             },",
          "772:         };",
          "777:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "745:         const bobSigning2 = new global.Olm.PkSigning();",
          "746:         const bobPrivkey2 = bobSigning2.generate_seed();",
          "747:         const bobPubkey2 = bobSigning2.init_with_seed(bobPrivkey2);",
          "749:             user_id: \"@bob:example.com\",",
          "750:             usage: [\"self_signing\"],",
          "751:             keys: {",
          "",
          "[Removed Lines]",
          "748:         const bobSSK2 = {",
          "",
          "[Added Lines]",
          "792:         const bobSSK2: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "769:                 },",
          "770:                 self_signing: bobSSK2,",
          "771:             },",
          "774:         });",
          "776:         const bobTrust = alice.checkUserTrust(\"@bob:example.com\");",
          "",
          "[Removed Lines]",
          "772:             firstUse: 0,",
          "773:             unsigned: {},",
          "",
          "[Added Lines]",
          "816:             firstUse: false,",
          "817:             crossSigningVerifiedBefore: false,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "782:         expect(bobDeviceTrust2.isTofu()).toBeFalsy();",
          "786:         await alice.setDeviceVerified(\"@bob:example.com\", bobMasterPubkey2, true);",
          "",
          "[Removed Lines]",
          "785:         alice.uploadKeySignatures = () => {};",
          "",
          "[Added Lines]",
          "829:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "806:         const bobDeviceTrust4 = alice.checkDeviceTrust(\"@bob:example.com\", \"Dynabook\");",
          "807:         expect(bobDeviceTrust4.isCrossSigningVerified()).toBeTruthy();",
          "808:     });",
          "810:     it(\"should offer to upgrade device verifications to cross-signing\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:         alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "814:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "815:             {",
          "816:                 cryptoCallbacks: {",
          "818:                         expect(verifs.users[\"@bob:example.com\"]).toBeDefined();",
          "819:                         upgradeResolveFunc();",
          "820:                         return [\"@bob:example.com\"];",
          "821:                     },",
          "822:                 },",
          "823:             },",
          "824:         );",
          "825:         const { client: bob } = await makeTestClient(",
          "826:             { userId: \"@bob:example.com\", deviceId: \"Dynabook\" },",
          "827:         );",
          "832:         await resetCrossSigningKeys(bob);",
          "833:         alice.crypto.deviceList.storeDevicesForUser(\"@bob:example.com\", {",
          "",
          "[Removed Lines]",
          "817:                     shouldUpgradeDeviceVerifications: (verifs) => {",
          "829:         bob.uploadDeviceSigningKeys = async () => {};",
          "830:         bob.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "862:                     shouldUpgradeDeviceVerifications: async (verifs) => {",
          "875:         bob.uploadDeviceSigningKeys = async () => ({});",
          "876:         bob.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "846:             bob.crypto.crossSigningInfo.toStorage(),",
          "847:         );",
          "",
          "[Removed Lines]",
          "849:         alice.uploadDeviceSigningKeys = async () => {};",
          "850:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "895:         alice.uploadDeviceSigningKeys = async () => ({});",
          "896:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "873:         upgradePromise = new Promise((resolve) => {",
          "874:             upgradeResolveFunc = resolve;",
          "875:         });",
          "877:         await new Promise((resolve) => {",
          "879:         });",
          "880:         await upgradePromise;",
          "882:         const bobTrust3 = alice.checkUserTrust(\"@bob:example.com\");",
          "883:         expect(bobTrust3.isCrossSigningVerified()).toBeTruthy();",
          "884:         expect(bobTrust3.isTofu()).toBeTruthy();",
          "885:     });",
          "887:     it(",
          "",
          "[Removed Lines]",
          "876:         alice.crypto.deviceList.emit(\"userCrossSigningUpdated\", \"@bob:example.com\");",
          "878:             alice.crypto.on(\"userTrustStatusChanged\", resolve);",
          "",
          "[Added Lines]",
          "922:         alice.crypto.deviceList.emit(CryptoEvent.UserCrossSigningUpdated, \"@bob:example.com\");",
          "924:             alice.crypto.on(CryptoEvent.UserTrustStatusChanged, resolve);",
          "931:         alice.stopClient();",
          "932:         bob.stopClient();",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "890:             const { client: alice } = await makeTestClient(",
          "891:                 { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "892:             );",
          "897:             const aliceMasterSigning = new global.Olm.PkSigning();",
          "",
          "[Removed Lines]",
          "893:             alice.uploadDeviceSigningKeys = async () => {};",
          "894:             alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "941:             alice.uploadDeviceSigningKeys = async () => ({});",
          "942:             alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "900:             const aliceSigning = new global.Olm.PkSigning();",
          "901:             const alicePrivkey = aliceSigning.generate_seed();",
          "902:             const alicePubkey = aliceSigning.init_with_seed(alicePrivkey);",
          "904:                 user_id: \"@alice:example.com\",",
          "905:                 usage: [\"self_signing\"],",
          "906:                 keys: {",
          "",
          "[Removed Lines]",
          "903:             const aliceSSK = {",
          "",
          "[Added Lines]",
          "951:             const aliceSSK: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "926:                     },",
          "927:                     self_signing: aliceSSK,",
          "928:                 },",
          "931:             });",
          "935:                 user_id: \"@alice:example.com\",",
          "937:                 algorithms: [\"m.olm.curve25519-aes-sha256\", \"m.megolm.v1.aes-sha\"],",
          "938:                 keys: {",
          "939:                     \"curve25519:Dynabook\": \"somePubkey\",",
          "940:                     \"ed25519:Dynabook\": \"someOtherPubkey\",",
          "941:                 },",
          "942:             };",
          "949:             alice.crypto.deviceList.storeDevicesForUser(\"@alice:example.com\", {",
          "951:             });",
          "957:         },",
          "958:     );",
          "",
          "[Removed Lines]",
          "929:                 firstUse: 1,",
          "930:                 unsigned: {},",
          "934:             const aliceCrossSignedDevice = {",
          "936:                 device_id: \"Dynabook\",",
          "943:             const sig = aliceSigning.sign(anotherjson.stringify(aliceCrossSignedDevice));",
          "944:             aliceCrossSignedDevice.signatures = {",
          "945:                 \"@alice:example.com\": {",
          "946:                     [\"ed25519:\" + alicePubkey]: sig,",
          "947:                 },",
          "948:             };",
          "950:                 Dynabook: aliceCrossSignedDevice,",
          "954:             expect(alice.checkDeviceTrust(aliceCrossSignedDevice.device_id).isCrossSigningVerified()).toBeFalsy();",
          "956:             expect(alice.checkIfOwnDeviceCrossSigned(aliceCrossSignedDevice.device_id)).toBeTruthy();",
          "",
          "[Added Lines]",
          "977:                 firstUse: true,",
          "978:                 crossSigningVerifiedBefore: false,",
          "982:             const aliceDeviceId = 'Dynabook';",
          "983:             const aliceUnsignedDevice = {",
          "985:                 device_id: aliceDeviceId,",
          "992:             const sig = aliceSigning.sign(anotherjson.stringify(aliceUnsignedDevice));",
          "993:             const aliceCrossSignedDevice: IDevice = {",
          "994:                 ...aliceUnsignedDevice,",
          "995:                 verified: 0,",
          "996:                 known: false,",
          "997:                 signatures: {",
          "998:                     \"@alice:example.com\": {",
          "999:                         [\"ed25519:\" + alicePubkey]: sig,",
          "1000:                     },",
          "1001:                 } };",
          "1003:                 [aliceDeviceId]: aliceCrossSignedDevice,",
          "1007:             expect(",
          "1008:                 alice.checkDeviceTrust(\"@alice:example.com\", aliceDeviceId).isCrossSigningVerified(),",
          "1009:             ).toBeFalsy();",
          "1011:             expect(alice.checkIfOwnDeviceCrossSigned(aliceDeviceId)).toBeTruthy();",
          "1012:             alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "961:         const { client: alice } = await makeTestClient(",
          "962:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "963:         );",
          "968:         const aliceMasterSigning = new global.Olm.PkSigning();",
          "",
          "[Removed Lines]",
          "964:         alice.uploadDeviceSigningKeys = async () => {};",
          "965:         alice.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "1020:         alice.uploadDeviceSigningKeys = async () => ({});",
          "1021:         alice.uploadKeySignatures = async () => ({ failures: {} });",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "971:         const aliceSigning = new global.Olm.PkSigning();",
          "972:         const alicePrivkey = aliceSigning.generate_seed();",
          "973:         const alicePubkey = aliceSigning.init_with_seed(alicePrivkey);",
          "975:             user_id: \"@alice:example.com\",",
          "976:             usage: [\"self_signing\"],",
          "977:             keys: {",
          "",
          "[Removed Lines]",
          "974:         const aliceSSK = {",
          "",
          "[Added Lines]",
          "1030:         const aliceSSK: ICrossSigningKey = {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "997:                 },",
          "998:                 self_signing: aliceSSK,",
          "999:             },",
          "1002:         });",
          "1008:             algorithms: [\"m.olm.curve25519-aes-sha256\", \"m.megolm.v1.aes-sha\"],",
          "1009:             keys: {",
          "1010:                 \"curve25519:Dynabook\": \"somePubkey\",",
          "",
          "[Removed Lines]",
          "1000:             firstUse: 1,",
          "1001:             unsigned: {},",
          "1005:         const aliceNotCrossSignedDevice = {",
          "1006:             user_id: \"@alice:example.com\",",
          "1007:             device_id: \"Dynabook\",",
          "",
          "[Added Lines]",
          "1056:             firstUse: true,",
          "1057:             crossSigningVerifiedBefore: false,",
          "1060:         const deviceId = \"Dynabook\";",
          "1061:         const aliceNotCrossSignedDevice: IDevice = {",
          "1062:             verified: 0,",
          "1063:             known: false,",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1012:             },",
          "1013:         };",
          "1014:         alice.crypto.deviceList.storeDevicesForUser(\"@alice:example.com\", {",
          "1016:         });",
          "1019:     });",
          "1020: });",
          "",
          "[Removed Lines]",
          "1015:             Dynabook: aliceNotCrossSignedDevice,",
          "1018:         expect(alice.checkIfOwnDeviceCrossSigned(aliceNotCrossSignedDevice.device_id)).toBeFalsy();",
          "",
          "[Added Lines]",
          "1071:             [deviceId]: aliceNotCrossSignedDevice,",
          "1074:         expect(alice.checkIfOwnDeviceCrossSigned(deviceId)).toBeFalsy();",
          "1075:         alice.stopClient();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/outgoing-room-key-requests.spec.js||spec/unit/crypto/outgoing-room-key-requests.spec.ts": [
          "File: spec/unit/crypto/outgoing-room-key-requests.spec.js -> spec/unit/crypto/outgoing-room-key-requests.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: describe.each([",
          "45:     [\"IndexedDBCryptoStore\",",
          "47:     [\"LocalStorageCryptoStore\",",
          "49:     [\"MemoryCryptoStore\", () => {",
          "50:         const store = new IndexedDBCryptoStore(undefined, \"tests\");",
          "53:         return store;",
          "54:     }],",
          "55: ])(\"Outgoing room key requests [%s]\", function(name, dbFactory) {",
          "",
          "[Removed Lines]",
          "46:      () => new IndexedDBCryptoStore(global.indexedDB, \"tests\")],",
          "48:      () => new IndexedDBCryptoStore(undefined, \"tests\")],",
          "51:         store._backend = new MemoryCryptoStore();",
          "52:         store._backendPromise = Promise.resolve(store._backend);",
          "",
          "[Added Lines]",
          "46:         () => new IndexedDBCryptoStore(global.indexedDB, \"tests\")],",
          "48:         () => new IndexedDBCryptoStore(undefined, \"tests\")],",
          "52:         store.backend = new MemoryCryptoStore();",
          "54:         store.backendPromise = Promise.resolve(store.backend);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     });",
          "66:     it(\"getAllOutgoingRoomKeyRequestsByState retrieves all entries in a given state\",",
          "69:             store.getAllOutgoingRoomKeyRequestsByState(RoomKeyRequestState.Sent);",
          "73:         });",
          "76:     test(\"getOutgoingRoomKeyRequestByState retrieves any entry in a given state\",",
          "79:             await store.getOutgoingRoomKeyRequestByState([RoomKeyRequestState.Sent]);",
          "85: });",
          "",
          "[Removed Lines]",
          "67:     async () => {",
          "68:         const r = await",
          "70:         expect(r).toHaveLength(2);",
          "71:         requests.filter((e) => e.state === RoomKeyRequestState.Sent).forEach((e) => {",
          "72:             expect(r).toContainEqual(e);",
          "74:     });",
          "77:     async () => {",
          "78:         const r =",
          "80:         expect(r).not.toBeNull();",
          "81:         expect(r).not.toBeUndefined();",
          "82:         expect(r.state).toEqual(RoomKeyRequestState.Sent);",
          "83:         expect(requests).toContainEqual(r);",
          "84:     });",
          "",
          "[Added Lines]",
          "69:         async () => {",
          "70:             const r = await",
          "72:             expect(r).toHaveLength(2);",
          "73:             requests.filter((e) => e.state === RoomKeyRequestState.Sent).forEach((e) => {",
          "74:                 expect(r).toContainEqual(e);",
          "75:             });",
          "79:         async () => {",
          "80:             const r =",
          "82:             expect(r).not.toBeNull();",
          "83:             expect(r).not.toBeUndefined();",
          "84:             expect(r.state).toEqual(RoomKeyRequestState.Sent);",
          "85:             expect(requests).toContainEqual(r);",
          "86:         });",
          "",
          "---------------"
        ],
        "spec/unit/crypto/secrets.spec.js||spec/unit/crypto/secrets.spec.ts": [
          "File: spec/unit/crypto/secrets.spec.js -> spec/unit/crypto/secrets.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "",
          "[Removed Lines]",
          "2: Copyright 2019 The Matrix.org Foundation C.I.C.",
          "",
          "[Added Lines]",
          "2: Copyright 2019, 2022 The Matrix.org Foundation C.I.C.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: import { resetCrossSigningKeys, createSecretStorageKey } from \"./crypto-utils\";",
          "25: import { logger } from '../../../src/logger';",
          "26: import * as utils from \"../../../src/utils\";",
          "28: try {",
          "29:     const crypto = require('crypto');",
          "30:     utils.setCrypto(crypto);",
          "31: } catch (err) {",
          "32:     logger.log('nodejs was compiled without crypto support');",
          "33: }",
          "36:     const client = (new TestClient(",
          "37:         userInfo.userId, userInfo.deviceId, undefined, undefined, options,",
          "38:     )).client;",
          "",
          "[Removed Lines]",
          "35: async function makeTestClient(userInfo, options) {",
          "",
          "[Added Lines]",
          "27: import { ICreateClientOpts } from '../../../src/client';",
          "28: import { ISecretStorageKeyInfo } from '../../../src/crypto/api';",
          "38: async function makeTestClient(userInfo: { userId: string, deviceId: string}, options: Partial<ICreateClientOpts> = {}) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     await client.initCrypto();",
          "51:     return client;",
          "52: }",
          "",
          "[Removed Lines]",
          "49:     client.crypto.downloadKeys = async function() {};",
          "",
          "[Added Lines]",
          "52:     jest.spyOn(client.crypto, 'downloadKeys').mockResolvedValue({});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56: function sign(obj, key, userId) {",
          "58:     return obj;",
          "59: }",
          "",
          "[Removed Lines]",
          "57:     olmlib.pkSign(obj, key, userId);",
          "",
          "[Added Lines]",
          "60:     olmlib.pkSign(obj, key, userId, '');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:             },",
          "85:         };",
          "88:             expect(Object.keys(e.keys)).toEqual([\"abc\"]);",
          "89:             return ['abc', key];",
          "90:         });",
          "",
          "[Removed Lines]",
          "87:         const getKey = jest.fn(e => {",
          "",
          "[Added Lines]",
          "90:         const getKey = jest.fn().mockImplementation(async e => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93:             { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "94:             {",
          "95:                 cryptoCallbacks: {",
          "97:                     getSecretStorageKey: getKey,",
          "98:                 },",
          "99:             },",
          "",
          "[Removed Lines]",
          "96:                     getCrossSigningKey: t => signingKey,",
          "",
          "[Added Lines]",
          "99:                     getCrossSigningKey: async t => signingKey,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "105:         const secretStorage = alice.crypto.secretStorage;",
          "119:         const keyAccountData = {",
          "120:             algorithm: SECRET_STORAGE_ALGORITHM_V1_AES,",
          "",
          "[Removed Lines]",
          "107:         alice.setAccountData = async function(eventType, contents, callback) {",
          "108:             alice.store.storeAccountDataEvents([",
          "109:                 new MatrixEvent({",
          "110:                     type: eventType,",
          "111:                     content: contents,",
          "112:                 }),",
          "113:             ]);",
          "114:             if (callback) {",
          "115:                 callback();",
          "116:             }",
          "117:         };",
          "",
          "[Added Lines]",
          "110:         jest.spyOn(alice, 'setAccountData').mockImplementation(",
          "111:             async function(eventType, contents, callback) {",
          "112:                 alice.store.storeAccountDataEvents([",
          "113:                     new MatrixEvent({",
          "114:                         type: eventType,",
          "115:                         content: contents,",
          "116:                     }),",
          "117:                 ]);",
          "118:                 if (callback) {",
          "119:                     callback(undefined, undefined);",
          "120:                 }",
          "121:                 return {};",
          "122:             });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "136:         expect(await secretStorage.get(\"foo\")).toBe(\"bar\");",
          "138:         expect(getKey).toHaveBeenCalled();",
          "139:     });",
          "141:     it(\"should throw if given a key that doesn't exist\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:         alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "150:             expect(true).toBeFalsy();",
          "151:         } catch (e) {",
          "152:         }",
          "153:     });",
          "155:     it(\"should refuse to encrypt with zero keys\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "162:             expect(true).toBeFalsy();",
          "163:         } catch (e) {",
          "164:         }",
          "165:     });",
          "167:     it(\"should encrypt with default key if keys is null\", async function() {",
          "168:         const key = new Uint8Array(16);",
          "169:         for (let i = 0; i < 16; i++) key[i] = i;",
          "171:             expect(Object.keys(e.keys)).toEqual([newKeyId]);",
          "172:             return [newKeyId, key];",
          "173:         });",
          "",
          "[Removed Lines]",
          "170:         const getKey = jest.fn(e => {",
          "",
          "[Added Lines]",
          "172:         alice.stopClient();",
          "178:         const getKey = jest.fn().mockImplementation(async e => {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "190:                     content: contents,",
          "191:                 }),",
          "192:             ]);",
          "193:         };",
          "194:         resetCrossSigningKeys(alice);",
          "196:         const { keyId: newKeyId } = await alice.addSecretStorageKey(",
          "198:         );",
          "",
          "[Removed Lines]",
          "197:             SECRET_STORAGE_ALGORITHM_V1_AES,",
          "",
          "[Added Lines]",
          "201:             return {};",
          "206:             SECRET_STORAGE_ALGORITHM_V1_AES, { pubkey: undefined, key: undefined },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "204:         const accountData = alice.getAccountData('foo');",
          "205:         expect(accountData.getContent().encrypted).toBeTruthy();",
          "206:     });",
          "208:     it(\"should refuse to encrypt if no keys given and no default key\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:         alice.stopClient();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "215:             expect(true).toBeFalsy();",
          "216:         } catch (e) {",
          "217:         }",
          "218:     });",
          "220:     it(\"should request secrets from other clients\", async function() {",
          "222:             [",
          "223:                 { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "224:                 { userId: \"@alice:example.com\", deviceId: \"VAX\" },",
          "",
          "[Removed Lines]",
          "221:         const [osborne2, vax] = await makeTestClients(",
          "",
          "[Added Lines]",
          "228:         alice.stopClient();",
          "232:         const [[osborne2, vax], clearTestClientTimeouts] = await makeTestClients(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "273:         const secret = await request.promise;",
          "275:         expect(secret).toBe(\"bar\");",
          "276:     });",
          "278:     describe(\"bootstrap\", function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:         osborne2.stop();",
          "288:         vax.stop();",
          "289:         clearTestClientTimeouts();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "298:         it(\"bootstraps when no storage or cross-signing keys locally\", async function() {",
          "299:             const key = new Uint8Array(16);",
          "300:             for (let i = 0; i < 16; i++) key[i] = i;",
          "302:                 return [Object.keys(e.keys)[0], key];",
          "303:             });",
          "",
          "[Removed Lines]",
          "301:             const getKey = jest.fn(e => {",
          "",
          "[Added Lines]",
          "315:             const getKey = jest.fn().mockImplementation(async e => {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "313:                     },",
          "314:                 },",
          "315:             );",
          "318:             bob.setAccountData = async function(eventType, contents, callback) {",
          "319:                 const event = new MatrixEvent({",
          "320:                     type: eventType,",
          "",
          "[Removed Lines]",
          "316:             bob.uploadDeviceSigningKeys = async () => {};",
          "317:             bob.uploadKeySignatures = async () => {};",
          "",
          "[Added Lines]",
          "330:             bob.uploadDeviceSigningKeys = async () => ({});",
          "331:             bob.uploadKeySignatures = jest.fn().mockResolvedValue(undefined);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "324:                     event,",
          "325:                 ]);",
          "326:                 this.emit(\"accountData\", event);",
          "327:             };",
          "329:             await bob.bootstrapCrossSigning({",
          "331:             });",
          "332:             await bob.bootstrapSecretStorage({",
          "333:                 createSecretStorageKey,",
          "",
          "[Removed Lines]",
          "330:                 authUploadDeviceSigningKeys: async func => await func({}),",
          "",
          "[Added Lines]",
          "341:                 return {};",
          "345:                 authUploadDeviceSigningKeys: async func => { await func({}); },",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "340:             expect(await crossSigning.isStoredInSecretStorage(secretStorage))",
          "341:                 .toBeTruthy();",
          "342:             expect(await secretStorage.hasKey()).toBeTruthy();",
          "343:         });",
          "345:         it(\"bootstraps when cross-signing keys in secret storage\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:             bob.stopClient();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "406:             expect(await crossSigning.isStoredInSecretStorage(secretStorage))",
          "407:                 .toBeTruthy();",
          "408:             expect(await secretStorage.hasKey()).toBeTruthy();",
          "409:         });",
          "411:         it(\"adds passphrase checking if it's lacking\", async function() {",
          "413:                 master: XSK,",
          "414:                 user_signing: USK,",
          "415:                 self_signing: SSK,",
          "",
          "[Removed Lines]",
          "412:             let crossSigningKeys = {",
          "",
          "[Added Lines]",
          "425:             bob.stopClient();",
          "429:             let crossSigningKeys: Record<string, Uint8Array> = {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "421:                 { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "422:                 {",
          "423:                     cryptoCallbacks: {",
          "425:                         saveCrossSigningKeys: k => crossSigningKeys = k,",
          "427:                             for (const keyId of Object.keys(keys)) {",
          "428:                                 if (secretStorageKeys[keyId]) {",
          "429:                                     return [keyId, secretStorageKeys[keyId]];",
          "",
          "[Removed Lines]",
          "424:                         getCrossSigningKey: t => crossSigningKeys[t],",
          "426:                         getSecretStorageKey: ({ keys }, name) => {",
          "",
          "[Added Lines]",
          "441:                         getCrossSigningKey: async t => crossSigningKeys[t],",
          "443:                         getSecretStorageKey: async ({ keys }, name) => {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "479:                 }),",
          "480:             ]);",
          "481:             alice.crypto.deviceList.storeCrossSigningForUser(\"@alice:example.com\", {",
          "482:                 keys: {",
          "483:                     master: {",
          "484:                         user_id: \"@alice:example.com\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:                 firstUse: false,",
          "500:                 crossSigningVerifiedBefore: false,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "519:                 });",
          "520:                 alice.store.storeAccountDataEvents([event]);",
          "521:                 this.emit(\"accountData\", event);",
          "522:             };",
          "526:             expect(alice.getAccountData(\"m.secret_storage.default_key\").getContent())",
          "527:                 .toEqual({ key: \"key_id\" });",
          "528:             const keyInfo = alice.getAccountData(\"m.secret_storage.key.key_id\")",
          "530:             expect(keyInfo.algorithm)",
          "531:                 .toEqual(\"m.secret_storage.v1.aes-hmac-sha2\");",
          "532:             expect(keyInfo.passphrase).toEqual({",
          "",
          "[Removed Lines]",
          "524:             await alice.bootstrapSecretStorage();",
          "529:                 .getContent();",
          "",
          "[Added Lines]",
          "541:                 return {};",
          "544:             await alice.bootstrapSecretStorage({});",
          "549:                 .getContent() as ISecretStorageKeyInfo;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "538:             expect(keyInfo).toHaveProperty(\"mac\");",
          "539:             expect(alice.checkSecretStorageKey(secretStorageKeys.key_id, keyInfo))",
          "540:                 .toBeTruthy();",
          "541:         });",
          "542:         it(\"fixes backup keys in the wrong format\", async function() {",
          "544:                 master: XSK,",
          "545:                 user_signing: USK,",
          "546:                 self_signing: SSK,",
          "",
          "[Removed Lines]",
          "543:             let crossSigningKeys = {",
          "",
          "[Added Lines]",
          "561:             alice.stopClient();",
          "564:             let crossSigningKeys: Record<string, Uint8Array> = {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "552:                 { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "553:                 {",
          "554:                     cryptoCallbacks: {",
          "556:                         saveCrossSigningKeys: k => crossSigningKeys = k,",
          "558:                             for (const keyId of Object.keys(keys)) {",
          "559:                                 if (secretStorageKeys[keyId]) {",
          "560:                                     return [keyId, secretStorageKeys[keyId]];",
          "",
          "[Removed Lines]",
          "555:                         getCrossSigningKey: t => crossSigningKeys[t],",
          "557:                         getSecretStorageKey: ({ keys }, name) => {",
          "",
          "[Added Lines]",
          "576:                         getCrossSigningKey: async t => crossSigningKeys[t],",
          "578:                         getSecretStorageKey: async ({ keys }, name) => {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "619:                 }),",
          "620:             ]);",
          "621:             alice.crypto.deviceList.storeCrossSigningForUser(\"@alice:example.com\", {",
          "622:                 keys: {",
          "623:                     master: {",
          "624:                         user_id: \"@alice:example.com\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643:                 firstUse: false,",
          "644:                 crossSigningVerifiedBefore: false,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "659:                 });",
          "660:                 alice.store.storeAccountDataEvents([event]);",
          "661:                 this.emit(\"accountData\", event);",
          "662:             };",
          "666:             const backupKey = alice.getAccountData(\"m.megolm_backup.v1\")",
          "667:                 .getContent();",
          "668:             expect(backupKey.encrypted).toHaveProperty(\"key_id\");",
          "669:             expect(await alice.getSecret(\"m.megolm_backup.v1\"))",
          "670:                 .toEqual(\"ey0GB1kB6jhOWgwiBUMIWg==\");",
          "671:         });",
          "672:     });",
          "673: });",
          "",
          "[Removed Lines]",
          "664:             await alice.bootstrapSecretStorage();",
          "",
          "[Added Lines]",
          "685:                 return {};",
          "688:             await alice.bootstrapSecretStorage({});",
          "695:             alice.stopClient();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/verification/request.spec.js||spec/unit/crypto/verification/request.spec.js": [
          "File: spec/unit/crypto/verification/request.spec.js -> spec/unit/crypto/verification/request.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     });",
          "42:     it(\"should request and accept a verification\", async function() {",
          "44:             [",
          "45:                 { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "46:                 { userId: \"@bob:example.com\", deviceId: \"Dynabook\" },",
          "",
          "[Removed Lines]",
          "43:         const [alice, bob] = await makeTestClients(",
          "",
          "[Added Lines]",
          "43:         const [[alice, bob], clearTestClientTimeouts] = await makeTestClients(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         aliceVerifier.endTimer();",
          "81:     });",
          "82: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         alice.stop();",
          "83:         bob.stop();",
          "84:         clearTestClientTimeouts();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/verification/sas.spec.js||spec/unit/crypto/verification/sas.spec.js": [
          "File: spec/unit/crypto/verification/sas.spec.js -> spec/unit/crypto/verification/sas.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         let bobSasEvent;",
          "76:         let aliceVerifier;",
          "77:         let bobPromise;",
          "79:         beforeEach(async () => {",
          "81:                 [",
          "82:                     { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "83:                     { userId: \"@bob:example.com\", deviceId: \"Dynabook\" },",
          "",
          "[Removed Lines]",
          "80:             [alice, bob] = await makeTestClients(",
          "",
          "[Added Lines]",
          "78:         let clearTestClientTimeouts;",
          "81:             [[alice, bob], clearTestClientTimeouts] = await makeTestClients(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:                 alice.stop(),",
          "179:                 bob.stop(),",
          "180:             ]);",
          "181:         });",
          "183:         it(\"should verify a key\", async () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:             clearTestClientTimeouts();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:     });",
          "336:     it(\"should send a cancellation message on error\", async function() {",
          "338:             [",
          "339:                 { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "340:                 { userId: \"@bob:example.com\", deviceId: \"Dynabook\" },",
          "",
          "[Removed Lines]",
          "337:         const [alice, bob] = await makeTestClients(",
          "",
          "[Added Lines]",
          "340:         const [[alice, bob], clearTestClientTimeouts] = await makeTestClients(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:             .not.toHaveBeenCalled();",
          "378:         expect(bob.client.setDeviceVerified)",
          "379:             .not.toHaveBeenCalled();",
          "380:     });",
          "382:     describe(\"verification in DM\", function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:         alice.stop();",
          "385:         bob.stop();",
          "386:         clearTestClientTimeouts();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "386:         let bobSasEvent;",
          "387:         let aliceVerifier;",
          "388:         let bobPromise;",
          "390:         beforeEach(async function() {",
          "392:                 [",
          "393:                     { userId: \"@alice:example.com\", deviceId: \"Osborne2\" },",
          "394:                     { userId: \"@bob:example.com\", deviceId: \"Dynabook\" },",
          "",
          "[Removed Lines]",
          "391:             [alice, bob] = await makeTestClients(",
          "",
          "[Added Lines]",
          "396:         let clearTestClientTimeouts;",
          "399:             [[alice, bob], clearTestClientTimeouts] = await makeTestClients(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "488:                 alice.stop(),",
          "489:                 bob.stop(),",
          "490:             ]);",
          "491:         });",
          "493:         it(\"should verify a key\", async function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:             clearTestClientTimeouts();",
          "",
          "---------------"
        ],
        "spec/unit/crypto/verification/util.js||spec/unit/crypto/verification/util.js": [
          "File: spec/unit/crypto/verification/util.js -> spec/unit/crypto/verification/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: export async function makeTestClients(userInfos, options) {",
          "25:     const clients = [];",
          "26:     const clientMap = {};",
          "27:     const sendToDevice = function(type, map) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     const timeouts = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:             },",
          "67:         }));",
          "70:             for (const tc of clients) {",
          "71:                 if (tc.client === this) { // eslint-disable-line @babel/no-invalid-this",
          "72:                     logger.log(\"sending remote echo!!\");",
          "",
          "[Removed Lines]",
          "69:         setImmediate(() => {",
          "",
          "[Added Lines]",
          "70:         const timeout = setTimeout(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:             }",
          "78:         });",
          "80:         return Promise.resolve({ event_id: eventId });",
          "81:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         timeouts.push(timeout);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:     await Promise.all(clients.map((testClient) => testClient.client.initCrypto()));",
          "107: }",
          "109: export function setupWebcrypto() {",
          "",
          "[Removed Lines]",
          "106:     return clients;",
          "",
          "[Added Lines]",
          "109:     const destroy = () => {",
          "110:         timeouts.forEach((t) => clearTimeout(t));",
          "111:     };",
          "113:     return [clients, destroy];",
          "",
          "---------------"
        ],
        "spec/unit/event-mapper.spec.ts||spec/unit/event-mapper.spec.ts": [
          "File: spec/unit/event-mapper.spec.ts -> spec/unit/event-mapper.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         rooms = [];",
          "45:     });",
          "47:     it(\"should de-duplicate MatrixEvent instances by means of findEventById on the room object\", async () => {",
          "48:         const roomId = \"!room:example.org\";",
          "49:         const room = new Room(roomId, client, userId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     afterEach(() => {",
          "48:         client.stopClient();",
          "49:     });",
          "",
          "---------------"
        ],
        "spec/unit/event-timeline-set.spec.ts||spec/unit/event-timeline-set.spec.ts": [
          "File: spec/unit/event-timeline-set.spec.ts -> spec/unit/event-timeline-set.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import * as utils from \"../test-utils/test-utils\";",
          "18: import {",
          "19:     EventTimeline,",
          "20:     EventTimelineSet,",
          "21:     EventType,",
          "22:     MatrixClient,",
          "23:     MatrixEvent,",
          "24:     MatrixEventEvent,",
          "25:     Room,",
          "26:     DuplicateStrategy,",
          "27: } from '../../src';",
          "28: import { Thread } from \"../../src/models/thread\";",
          "29: import { ReEmitter } from \"../../src/ReEmitter\";",
          "31: describe('EventTimelineSet', () => {",
          "32:     const roomId = '!foo:bar';",
          "33:     const userA = \"@alice:bar\";",
          "35:     let room: Room;",
          "36:     let eventTimeline: EventTimeline;",
          "37:     let eventTimelineSet: EventTimelineSet;",
          "38:     let client: MatrixClient;",
          "40:     let messageEvent: MatrixEvent;",
          "41:     let replyEvent: MatrixEvent;",
          "43:     const itShouldReturnTheRelatedEvents = () => {",
          "44:         it('should return the related events', () => {",
          "45:             eventTimelineSet.relations.aggregateChildEvent(messageEvent);",
          "46:             const relations = eventTimelineSet.relations.getChildEventsForEvent(",
          "47:                 messageEvent.getId(),",
          "48:                 \"m.in_reply_to\",",
          "49:                 EventType.RoomMessage,",
          "50:             );",
          "51:             expect(relations).toBeDefined();",
          "52:             expect(relations.getRelations().length).toBe(1);",
          "53:             expect(relations.getRelations()[0].getId()).toBe(replyEvent.getId());",
          "54:         });",
          "55:     };",
          "57:     beforeEach(() => {",
          "58:         client = utils.mock(MatrixClient, 'MatrixClient');",
          "59:         client.reEmitter = utils.mock(ReEmitter, 'ReEmitter');",
          "60:         room = new Room(roomId, client, userA);",
          "61:         eventTimelineSet = new EventTimelineSet(room);",
          "62:         eventTimeline = new EventTimeline(eventTimelineSet);",
          "63:         messageEvent = utils.mkMessage({",
          "64:             room: roomId,",
          "65:             user: userA,",
          "66:             msg: 'Hi!',",
          "67:             event: true,",
          "68:         });",
          "69:         replyEvent = utils.mkReplyMessage({",
          "70:             room: roomId,",
          "71:             user: userA,",
          "72:             msg: 'Hoo!',",
          "73:             event: true,",
          "74:             replyToMessage: messageEvent,",
          "75:         });",
          "76:     });",
          "78:     describe('addLiveEvent', () => {",
          "79:         it(\"Adds event to the live timeline in the timeline set\", () => {",
          "80:             const liveTimeline = eventTimelineSet.getLiveTimeline();",
          "81:             expect(liveTimeline.getEvents().length).toStrictEqual(0);",
          "82:             eventTimelineSet.addLiveEvent(messageEvent);",
          "83:             expect(liveTimeline.getEvents().length).toStrictEqual(1);",
          "84:         });",
          "86:         it(\"should replace a timeline event if dupe strategy is 'replace'\", () => {",
          "87:             const liveTimeline = eventTimelineSet.getLiveTimeline();",
          "88:             expect(liveTimeline.getEvents().length).toStrictEqual(0);",
          "89:             eventTimelineSet.addLiveEvent(messageEvent, {",
          "90:                 duplicateStrategy: DuplicateStrategy.Replace,",
          "91:             });",
          "92:             expect(liveTimeline.getEvents().length).toStrictEqual(1);",
          "95:             const duplicateMessageEvent = utils.mkMessage({",
          "96:                 room: roomId, user: userA, msg: \"dupe\", event: true,",
          "97:             });",
          "98:             duplicateMessageEvent.event.event_id = messageEvent.getId();",
          "103:             eventTimelineSet.addLiveEvent(duplicateMessageEvent, {",
          "104:                 duplicateStrategy: DuplicateStrategy.Replace,",
          "105:             });",
          "107:             const eventsInLiveTimeline = liveTimeline.getEvents();",
          "108:             expect(eventsInLiveTimeline.length).toStrictEqual(1);",
          "109:             expect(eventsInLiveTimeline[0]).toStrictEqual(duplicateMessageEvent);",
          "110:         });",
          "112:         it(\"Make sure legacy overload passing options directly as parameters still works\", () => {",
          "113:             expect(() => eventTimelineSet.addLiveEvent(messageEvent, DuplicateStrategy.Replace, false)).not.toThrow();",
          "114:             expect(() => eventTimelineSet.addLiveEvent(messageEvent, DuplicateStrategy.Ignore, true)).not.toThrow();",
          "115:         });",
          "116:     });",
          "118:     describe('addEventToTimeline', () => {",
          "119:         it(\"Adds event to timeline\", () => {",
          "120:             const liveTimeline = eventTimelineSet.getLiveTimeline();",
          "121:             expect(liveTimeline.getEvents().length).toStrictEqual(0);",
          "122:             eventTimelineSet.addEventToTimeline(messageEvent, liveTimeline, {",
          "123:                 toStartOfTimeline: true,",
          "124:             });",
          "125:             expect(liveTimeline.getEvents().length).toStrictEqual(1);",
          "126:         });",
          "128:         it(\"Make sure legacy overload passing options directly as parameters still works\", () => {",
          "129:             const liveTimeline = eventTimelineSet.getLiveTimeline();",
          "130:             expect(() => {",
          "131:                 eventTimelineSet.addEventToTimeline(",
          "132:                     messageEvent,",
          "133:                     liveTimeline,",
          "134:                     true,",
          "135:                 );",
          "136:             }).not.toThrow();",
          "137:             expect(() => {",
          "138:                 eventTimelineSet.addEventToTimeline(",
          "139:                     messageEvent,",
          "140:                     liveTimeline,",
          "141:                     true,",
          "142:                     false,",
          "143:                 );",
          "144:             }).not.toThrow();",
          "145:         });",
          "146:     });",
          "148:     describe('aggregateRelations', () => {",
          "149:         describe('with unencrypted events', () => {",
          "150:             beforeEach(() => {",
          "151:                 eventTimelineSet.addEventsToTimeline(",
          "152:                     [",
          "153:                         messageEvent,",
          "154:                         replyEvent,",
          "155:                     ],",
          "156:                     true,",
          "157:                     eventTimeline,",
          "158:                     'foo',",
          "159:                 );",
          "160:             });",
          "162:             itShouldReturnTheRelatedEvents();",
          "163:         });",
          "165:         describe('with events to be decrypted', () => {",
          "166:             let messageEventShouldAttemptDecryptionSpy: jest.SpyInstance;",
          "167:             let messageEventIsDecryptionFailureSpy: jest.SpyInstance;",
          "169:             let replyEventShouldAttemptDecryptionSpy: jest.SpyInstance;",
          "170:             let replyEventIsDecryptionFailureSpy: jest.SpyInstance;",
          "172:             beforeEach(() => {",
          "173:                 messageEventShouldAttemptDecryptionSpy = jest.spyOn(messageEvent, 'shouldAttemptDecryption');",
          "174:                 messageEventShouldAttemptDecryptionSpy.mockReturnValue(true);",
          "175:                 messageEventIsDecryptionFailureSpy = jest.spyOn(messageEvent, 'isDecryptionFailure');",
          "177:                 replyEventShouldAttemptDecryptionSpy = jest.spyOn(replyEvent, 'shouldAttemptDecryption');",
          "178:                 replyEventShouldAttemptDecryptionSpy.mockReturnValue(true);",
          "179:                 replyEventIsDecryptionFailureSpy = jest.spyOn(messageEvent, 'isDecryptionFailure');",
          "181:                 eventTimelineSet.addEventsToTimeline(",
          "182:                     [",
          "183:                         messageEvent,",
          "184:                         replyEvent,",
          "185:                     ],",
          "186:                     true,",
          "187:                     eventTimeline,",
          "188:                     'foo',",
          "189:                 );",
          "190:             });",
          "192:             it('should not return the related events', () => {",
          "193:                 eventTimelineSet.relations.aggregateChildEvent(messageEvent);",
          "194:                 const relations = eventTimelineSet.relations.getChildEventsForEvent(",
          "195:                     messageEvent.getId(),",
          "196:                     \"m.in_reply_to\",",
          "197:                     EventType.RoomMessage,",
          "198:                 );",
          "199:                 expect(relations).toBeUndefined();",
          "200:             });",
          "202:             describe('after decryption', () => {",
          "203:                 beforeEach(() => {",
          "205:                     messageEventIsDecryptionFailureSpy.mockReturnValue(true);",
          "206:                     replyEventIsDecryptionFailureSpy.mockReturnValue(true);",
          "208:                     messageEvent.emit(MatrixEventEvent.Decrypted, messageEvent);",
          "209:                     replyEvent.emit(MatrixEventEvent.Decrypted, replyEvent);",
          "212:                     messageEventIsDecryptionFailureSpy.mockReturnValue(false);",
          "213:                     replyEventIsDecryptionFailureSpy.mockReturnValue(false);",
          "215:                     messageEventShouldAttemptDecryptionSpy.mockReturnValue(false);",
          "216:                     replyEventShouldAttemptDecryptionSpy.mockReturnValue(false);",
          "218:                     messageEvent.emit(MatrixEventEvent.Decrypted, messageEvent);",
          "219:                     replyEvent.emit(MatrixEventEvent.Decrypted, replyEvent);",
          "220:                 });",
          "222:                 itShouldReturnTheRelatedEvents();",
          "223:             });",
          "224:         });",
          "225:     });",
          "227:     describe(\"canContain\", () => {",
          "228:         const mkThreadResponse = (root: MatrixEvent) => utils.mkEvent({",
          "229:             event: true,",
          "230:             type: EventType.RoomMessage,",
          "231:             user: userA,",
          "232:             room: roomId,",
          "233:             content: {",
          "234:                 \"body\": \"Thread response :: \" + Math.random(),",
          "235:                 \"m.relates_to\": {",
          "236:                     \"event_id\": root.getId(),",
          "237:                     \"m.in_reply_to\": {",
          "238:                         \"event_id\": root.getId(),",
          "239:                     },",
          "240:                     \"rel_type\": \"m.thread\",",
          "241:                 },",
          "242:             },",
          "243:         }, room.client);",
          "245:         let thread: Thread;",
          "247:         beforeEach(() => {",
          "248:             (client.supportsExperimentalThreads as jest.Mock).mockReturnValue(true);",
          "249:             thread = new Thread(\"!thread_id:server\", messageEvent, { room, client });",
          "250:         });",
          "252:         it(\"should throw if timeline set has no room\", () => {",
          "253:             const eventTimelineSet = new EventTimelineSet(undefined, {}, client);",
          "254:             expect(() => eventTimelineSet.canContain(messageEvent)).toThrowError();",
          "255:         });",
          "257:         it(\"should return false if timeline set is for thread but event is not threaded\", () => {",
          "258:             const eventTimelineSet = new EventTimelineSet(room, {}, client, thread);",
          "259:             expect(eventTimelineSet.canContain(replyEvent)).toBeFalsy();",
          "260:         });",
          "262:         it(\"should return false if timeline set it for thread but event it for a different thread\", () => {",
          "263:             const eventTimelineSet = new EventTimelineSet(room, {}, client, thread);",
          "264:             const event = mkThreadResponse(replyEvent);",
          "265:             expect(eventTimelineSet.canContain(event)).toBeFalsy();",
          "266:         });",
          "268:         it(\"should return false if timeline set is not for a thread but event is a thread response\", () => {",
          "269:             const eventTimelineSet = new EventTimelineSet(room, {}, client);",
          "270:             const event = mkThreadResponse(replyEvent);",
          "271:             expect(eventTimelineSet.canContain(event)).toBeFalsy();",
          "272:         });",
          "274:         it(\"should return true if the timeline set is not for a thread and the event is a thread root\", () => {",
          "275:             const eventTimelineSet = new EventTimelineSet(room, {}, client);",
          "276:             expect(eventTimelineSet.canContain(messageEvent)).toBeTruthy();",
          "277:         });",
          "279:         it(\"should return true if the timeline set is for a thread and the event is its thread root\", () => {",
          "280:             const thread = new Thread(messageEvent.getId(), messageEvent, { room, client });",
          "281:             const eventTimelineSet = new EventTimelineSet(room, {}, client, thread);",
          "282:             messageEvent.setThread(thread);",
          "283:             expect(eventTimelineSet.canContain(messageEvent)).toBeTruthy();",
          "284:         });",
          "286:         it(\"should return true if the timeline set is for a thread and the event is a response to it\", () => {",
          "287:             const thread = new Thread(messageEvent.getId(), messageEvent, { room, client });",
          "288:             const eventTimelineSet = new EventTimelineSet(room, {}, client, thread);",
          "289:             messageEvent.setThread(thread);",
          "290:             const event = mkThreadResponse(messageEvent);",
          "291:             expect(eventTimelineSet.canContain(event)).toBeTruthy();",
          "292:         });",
          "293:     });",
          "294: });",
          "",
          "---------------"
        ],
        "spec/unit/event-timeline.spec.js||spec/unit/event-timeline.spec.js": [
          "File: spec/unit/event-timeline.spec.js -> spec/unit/event-timeline.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:             timeline.initialiseState(events);",
          "51:             expect(timeline.startState.setStateEvents).toHaveBeenCalledWith(",
          "52:                 events,",
          "53:             );",
          "54:             expect(timeline.endState.setStateEvents).toHaveBeenCalledWith(",
          "55:                 events,",
          "56:             );",
          "57:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:                 { timelineWasEmpty: undefined },",
          "57:                 { timelineWasEmpty: undefined },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:             expect(function() {",
          "74:                 timeline.initialiseState(state);",
          "75:             }).not.toThrow();",
          "77:             expect(function() {",
          "78:                 timeline.initialiseState(state);",
          "79:             }).toThrow();",
          "",
          "[Removed Lines]",
          "76:             timeline.addEvent(event, false);",
          "",
          "[Added Lines]",
          "78:             timeline.addEvent(event, { toStartOfTimeline: false });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:         ];",
          "151:         it(\"should be able to add events to the end\", function() {",
          "153:             const initialIndex = timeline.getBaseIndex();",
          "155:             expect(timeline.getBaseIndex()).toEqual(initialIndex);",
          "156:             expect(timeline.getEvents().length).toEqual(2);",
          "157:             expect(timeline.getEvents()[0]).toEqual(events[0]);",
          "",
          "[Removed Lines]",
          "152:             timeline.addEvent(events[0], false);",
          "154:             timeline.addEvent(events[1], false);",
          "",
          "[Added Lines]",
          "154:             timeline.addEvent(events[0], { toStartOfTimeline: false });",
          "156:             timeline.addEvent(events[1], { toStartOfTimeline: false });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:         });",
          "161:         it(\"should be able to add events to the start\", function() {",
          "163:             const initialIndex = timeline.getBaseIndex();",
          "165:             expect(timeline.getBaseIndex()).toEqual(initialIndex + 1);",
          "166:             expect(timeline.getEvents().length).toEqual(2);",
          "167:             expect(timeline.getEvents()[0]).toEqual(events[1]);",
          "",
          "[Removed Lines]",
          "162:             timeline.addEvent(events[0], true);",
          "164:             timeline.addEvent(events[1], true);",
          "",
          "[Added Lines]",
          "164:             timeline.addEvent(events[0], { toStartOfTimeline: true });",
          "166:             timeline.addEvent(events[1], { toStartOfTimeline: true });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:                 content: { name: \"Old Room Name\" },",
          "204:             });",
          "207:             expect(newEv.sender).toEqual(sentinel);",
          "209:             expect(oldEv.sender).toEqual(oldSentinel);",
          "210:         });",
          "",
          "[Removed Lines]",
          "206:             timeline.addEvent(newEv, false);",
          "208:             timeline.addEvent(oldEv, true);",
          "",
          "[Added Lines]",
          "208:             timeline.addEvent(newEv, { toStartOfTimeline: false });",
          "210:             timeline.addEvent(oldEv, { toStartOfTimeline: true });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:             const oldEv = utils.mkMembership({",
          "243:                 room: roomId, mship: \"ban\", user: userB, skey: userA, event: true,",
          "244:             });",
          "246:             expect(newEv.target).toEqual(sentinel);",
          "248:             expect(oldEv.target).toEqual(oldSentinel);",
          "249:         });",
          "",
          "[Removed Lines]",
          "245:             timeline.addEvent(newEv, false);",
          "247:             timeline.addEvent(oldEv, true);",
          "",
          "[Added Lines]",
          "247:             timeline.addEvent(newEv, { toStartOfTimeline: false });",
          "249:             timeline.addEvent(oldEv, { toStartOfTimeline: true });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "262:                 }),",
          "263:             ];",
          "268:             expect(timeline.getState(EventTimeline.FORWARDS).setStateEvents).",
          "270:             expect(timeline.getState(EventTimeline.FORWARDS).setStateEvents).",
          "273:             expect(events[0].forwardLooking).toBe(true);",
          "274:             expect(events[1].forwardLooking).toBe(true);",
          "",
          "[Removed Lines]",
          "265:             timeline.addEvent(events[0], false);",
          "266:             timeline.addEvent(events[1], false);",
          "269:                 toHaveBeenCalledWith([events[0]]);",
          "271:                 toHaveBeenCalledWith([events[1]]);",
          "",
          "[Added Lines]",
          "267:             timeline.addEvent(events[0], { toStartOfTimeline: false });",
          "268:             timeline.addEvent(events[1], { toStartOfTimeline: false });",
          "271:                 toHaveBeenCalledWith([events[0]], { timelineWasEmpty: undefined });",
          "273:                 toHaveBeenCalledWith([events[1]], { timelineWasEmpty: undefined });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "291:                 }),",
          "292:             ];",
          "297:             expect(timeline.getState(EventTimeline.BACKWARDS).setStateEvents).",
          "299:             expect(timeline.getState(EventTimeline.BACKWARDS).setStateEvents).",
          "302:             expect(events[0].forwardLooking).toBe(false);",
          "303:             expect(events[1].forwardLooking).toBe(false);",
          "",
          "[Removed Lines]",
          "294:             timeline.addEvent(events[0], true);",
          "295:             timeline.addEvent(events[1], true);",
          "298:                 toHaveBeenCalledWith([events[0]]);",
          "300:                 toHaveBeenCalledWith([events[1]]);",
          "",
          "[Added Lines]",
          "296:             timeline.addEvent(events[0], { toStartOfTimeline: true });",
          "297:             timeline.addEvent(events[1], { toStartOfTimeline: true });",
          "300:                 toHaveBeenCalledWith([events[0]], { timelineWasEmpty: undefined });",
          "302:                 toHaveBeenCalledWith([events[1]], { timelineWasEmpty: undefined });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "305:             expect(timeline.getState(EventTimeline.FORWARDS).setStateEvents).",
          "306:                 not.toHaveBeenCalled();",
          "307:         });",
          "308:     });",
          "310:     describe(\"removeEvent\", function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:         it(\"Make sure legacy overload passing options directly as parameters still works\", () => {",
          "312:             expect(() => timeline.addEvent(events[0], { toStartOfTimeline: true })).not.toThrow();",
          "313:             expect(() => timeline.addEvent(events[0], { stateContext: new RoomState() })).not.toThrow();",
          "314:         });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "324:         ];",
          "326:         it(\"should remove events\", function() {",
          "329:             expect(timeline.getEvents().length).toEqual(2);",
          "331:             let ev = timeline.removeEvent(events[0].getId());",
          "",
          "[Removed Lines]",
          "327:             timeline.addEvent(events[0], false);",
          "328:             timeline.addEvent(events[1], false);",
          "",
          "[Added Lines]",
          "334:             timeline.addEvent(events[0], { toStartOfTimeline: false });",
          "335:             timeline.addEvent(events[1], { toStartOfTimeline: false });",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "338:         });",
          "340:         it(\"should update baseIndex\", function() {",
          "344:             expect(timeline.getEvents().length).toEqual(3);",
          "345:             expect(timeline.getBaseIndex()).toEqual(1);",
          "",
          "[Removed Lines]",
          "341:             timeline.addEvent(events[0], false);",
          "342:             timeline.addEvent(events[1], true);",
          "343:             timeline.addEvent(events[2], false);",
          "",
          "[Added Lines]",
          "348:             timeline.addEvent(events[0], { toStartOfTimeline: false });",
          "349:             timeline.addEvent(events[1], { toStartOfTimeline: true });",
          "350:             timeline.addEvent(events[2], { toStartOfTimeline: false });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "359:         it(\"should not make baseIndex assplode when removing the last event\",",
          "360:            function() {",
          "362:                timeline.removeEvent(events[0].getId());",
          "363:                const initialIndex = timeline.getBaseIndex();",
          "366:                expect(timeline.getBaseIndex()).toEqual(initialIndex);",
          "367:                expect(timeline.getEvents().length).toEqual(2);",
          "368:            });",
          "",
          "[Removed Lines]",
          "361:                timeline.addEvent(events[0], true);",
          "364:                timeline.addEvent(events[1], false);",
          "365:                timeline.addEvent(events[2], false);",
          "",
          "[Added Lines]",
          "368:                timeline.addEvent(events[0], { toStartOfTimeline: true });",
          "371:                timeline.addEvent(events[1], { toStartOfTimeline: false });",
          "372:                timeline.addEvent(events[2], { toStartOfTimeline: false });",
          "",
          "---------------"
        ],
        "spec/unit/filter-component.spec.ts||spec/unit/filter-component.spec.ts": [
          "File: spec/unit/filter-component.spec.ts -> spec/unit/filter-component.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { FilterComponent } from \"../../src/filter-component\";",
          "6: import { mkEvent } from '../test-utils/test-utils';",
          "",
          "[Removed Lines]",
          "1: import {",
          "2:     MatrixEvent,",
          "3:     RelationType,",
          "4: } from \"../../src\";",
          "",
          "[Added Lines]",
          "1: import { RelationType } from \"../../src\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:                 content: { },",
          "15:                 room: 'roomId',",
          "16:                 event: true,",
          "19:             const checkResult = filter.check(event);",
          "",
          "[Removed Lines]",
          "17:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "14:             });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:                 content: { },",
          "29:                 room: 'roomId',",
          "30:                 event: true,",
          "33:             const checkResult = filter.check(event);",
          "",
          "[Removed Lines]",
          "31:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "28:             });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:                         },",
          "56:                     },",
          "57:                 },",
          "60:             expect(filter.check(threadRootNotParticipated)).toBe(false);",
          "61:         });",
          "",
          "[Removed Lines]",
          "58:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "55:             });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "80:                 user: '@someone-else:server.org',",
          "81:                 room: 'roomId',",
          "82:                 event: true,",
          "85:             expect(filter.check(threadRootParticipated)).toBe(true);",
          "86:         });",
          "",
          "[Removed Lines]",
          "83:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "80:             });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "100:                         [RelationType.Reference]: {},",
          "101:                     },",
          "102:                 },",
          "105:             expect(filter.check(referenceRelationEvent)).toBe(false);",
          "106:         });",
          "",
          "[Removed Lines]",
          "103:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "100:             });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:                 },",
          "124:                 room: 'roomId',",
          "125:                 event: true,",
          "128:             const eventWithMultipleRelations = mkEvent({",
          "129:                 \"type\": \"m.room.message\",",
          "",
          "[Removed Lines]",
          "126:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "123:             });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "148:                 },",
          "149:                 \"room\": 'roomId',",
          "150:                 \"event\": true,",
          "153:             const noMatchEvent = mkEvent({",
          "154:                 \"type\": \"m.room.message\",",
          "",
          "[Removed Lines]",
          "151:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "148:             });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "160:                 },",
          "161:                 \"room\": 'roomId',",
          "162:                 \"event\": true,",
          "165:             expect(filter.check(threadRootEvent)).toBe(true);",
          "166:             expect(filter.check(eventWithMultipleRelations)).toBe(true);",
          "",
          "[Removed Lines]",
          "163:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "160:             });",
          "",
          "---------------"
        ],
        "spec/unit/interactive-auth.spec.js||spec/unit/interactive-auth.spec.js": [
          "File: spec/unit/interactive-auth.spec.js -> spec/unit/interactive-auth.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import { logger } from \"../../src/logger\";",
          "19: import { InteractiveAuth } from \"../../src/interactive-auth\";",
          "20: import { MatrixError } from \"../../src/http-api\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import { sleep } from \"../../src/utils\";",
          "22: import { randomString } from \"../../src/randomstring\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:             expect(error.message).toBe('No appropriate authentication flow found');",
          "173:         });",
          "174:     });",
          "175: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     describe(\"requestEmailToken\", () => {",
          "179:         it(\"increases auth attempts\", async () => {",
          "180:             const doRequest = jest.fn();",
          "181:             const stateUpdated = jest.fn();",
          "182:             const requestEmailToken = jest.fn();",
          "183:             requestEmailToken.mockImplementation(async () => ({ sid: \"\" }));",
          "185:             const ia = new InteractiveAuth({",
          "186:                 matrixClient: new FakeClient(),",
          "187:                 doRequest, stateUpdated, requestEmailToken,",
          "188:             });",
          "190:             await ia.requestEmailToken();",
          "191:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 1, undefined);",
          "192:             requestEmailToken.mockClear();",
          "193:             await ia.requestEmailToken();",
          "194:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 2, undefined);",
          "195:             requestEmailToken.mockClear();",
          "196:             await ia.requestEmailToken();",
          "197:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 3, undefined);",
          "198:             requestEmailToken.mockClear();",
          "199:             await ia.requestEmailToken();",
          "200:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 4, undefined);",
          "201:             requestEmailToken.mockClear();",
          "202:             await ia.requestEmailToken();",
          "203:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 5, undefined);",
          "204:         });",
          "206:         it(\"increases auth attempts\", async () => {",
          "207:             const doRequest = jest.fn();",
          "208:             const stateUpdated = jest.fn();",
          "209:             const requestEmailToken = jest.fn();",
          "210:             requestEmailToken.mockImplementation(async () => ({ sid: \"\" }));",
          "212:             const ia = new InteractiveAuth({",
          "213:                 matrixClient: new FakeClient(),",
          "214:                 doRequest, stateUpdated, requestEmailToken,",
          "215:             });",
          "217:             await ia.requestEmailToken();",
          "218:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 1, undefined);",
          "219:             requestEmailToken.mockClear();",
          "220:             await ia.requestEmailToken();",
          "221:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 2, undefined);",
          "222:             requestEmailToken.mockClear();",
          "223:             await ia.requestEmailToken();",
          "224:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 3, undefined);",
          "225:             requestEmailToken.mockClear();",
          "226:             await ia.requestEmailToken();",
          "227:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 4, undefined);",
          "228:             requestEmailToken.mockClear();",
          "229:             await ia.requestEmailToken();",
          "230:             expect(requestEmailToken).toHaveBeenLastCalledWith(undefined, ia.getClientSecret(), 5, undefined);",
          "231:         });",
          "233:         it(\"passes errors through\", async () => {",
          "234:             const doRequest = jest.fn();",
          "235:             const stateUpdated = jest.fn();",
          "236:             const requestEmailToken = jest.fn();",
          "237:             requestEmailToken.mockImplementation(async () => {",
          "238:                 throw new Error(\"unspecific network error\");",
          "239:             });",
          "241:             const ia = new InteractiveAuth({",
          "242:                 matrixClient: new FakeClient(),",
          "243:                 doRequest, stateUpdated, requestEmailToken,",
          "244:             });",
          "246:             expect(async () => await ia.requestEmailToken()).rejects.toThrowError(\"unspecific network error\");",
          "247:         });",
          "249:         it(\"only starts one request at a time\", async () => {",
          "250:             const doRequest = jest.fn();",
          "251:             const stateUpdated = jest.fn();",
          "252:             const requestEmailToken = jest.fn();",
          "253:             requestEmailToken.mockImplementation(() => sleep(500, { sid: \"\" }));",
          "255:             const ia = new InteractiveAuth({",
          "256:                 matrixClient: new FakeClient(),",
          "257:                 doRequest, stateUpdated, requestEmailToken,",
          "258:             });",
          "260:             await Promise.all([ia.requestEmailToken(), ia.requestEmailToken(), ia.requestEmailToken()]);",
          "261:             expect(requestEmailToken).toHaveBeenCalledTimes(1);",
          "262:         });",
          "264:         it(\"stores result in email sid\", async () => {",
          "265:             const doRequest = jest.fn();",
          "266:             const stateUpdated = jest.fn();",
          "267:             const requestEmailToken = jest.fn();",
          "268:             const sid = randomString(24);",
          "269:             requestEmailToken.mockImplementation(() => sleep(500, { sid }));",
          "271:             const ia = new InteractiveAuth({",
          "272:                 matrixClient: new FakeClient(),",
          "273:                 doRequest, stateUpdated, requestEmailToken,",
          "274:             });",
          "276:             await ia.requestEmailToken();",
          "277:             expect(ia.getEmailSid()).toEqual(sid);",
          "278:         });",
          "279:     });",
          "",
          "---------------"
        ],
        "spec/unit/matrix-client.spec.ts||spec/unit/matrix-client.spec.ts": [
          "File: spec/unit/matrix-client.spec.ts -> spec/unit/matrix-client.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import * as testUtils from \"../test-utils/test-utils\";",
          "34: import { makeBeaconInfoContent } from \"../../src/content-helpers\";",
          "35: import { M_BEACON_INFO } from \"../../src/@types/beacon\";",
          "37: import { makeBeaconEvent } from \"../test-utils/beacon\";",
          "39: jest.useFakeTimers();",
          "",
          "[Removed Lines]",
          "36: import { Room } from \"../../src\";",
          "",
          "[Added Lines]",
          "36: import { ContentHelpers, Room } from \"../../src\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     ];",
          "91:     let pendingLookup = null;",
          "92:     function httpReq(cb, method, path, qp, data, prefix) {",
          "93:         if (path === KEEP_ALIVE_PATH && acceptKeepalives) {",
          "",
          "[Removed Lines]",
          "90:     let acceptKeepalives;",
          "",
          "[Added Lines]",
          "90:     let acceptKeepalives: boolean;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:                 method: method,",
          "119:                 path: path,",
          "120:             };",
          "121:             return pendingLookup.promise;",
          "122:         }",
          "123:         if (next.path === path && next.method === method) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:             pendingLookup.promise.abort = () => {}; // to make it a valid IAbortablePromise",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:                 (next.error ? \"BAD\" : \"GOOD\") + \" response\",",
          "127:             );",
          "128:             if (next.expectBody) {",
          "130:             }",
          "131:             if (next.expectQueryParams) {",
          "132:                 Object.keys(next.expectQueryParams).forEach(function(k) {",
          "",
          "[Removed Lines]",
          "129:                 expect(next.expectBody).toEqual(data);",
          "",
          "[Added Lines]",
          "130:                 expect(data).toEqual(next.expectBody);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:         client.http.authedRequest.mockImplementation(function() {",
          "206:             return new Promise(() => {});",
          "207:         });",
          "208:     });",
          "210:     it(\"should create (unstable) file trees\", async () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:         client.stopClient();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "725:     });",
          "727:     describe(\"guest rooms\", function() {",
          "730:             httpLookups.push({",
          "731:                 method: \"GET\",",
          "732:                 path: \"/sync\",",
          "733:                 data: SYNC_DATA,",
          "737:             });",
          "738:             client.setGuest(true);",
          "740:         });",
          "742:         xit(\"should be able to peek into a room using peekInRoom\", function(done) {",
          "",
          "[Removed Lines]",
          "728:         it(\"should only do /sync calls (without filter/pushrules)\", function(done) {",
          "729:             httpLookups = []; // no /pushrules or /filterw",
          "734:                 thenCall: function() {",
          "735:                     done();",
          "736:                 },",
          "739:             client.startClient();",
          "",
          "[Added Lines]",
          "734:         it(\"should only do /sync calls (without filter/pushrules)\", async function() {",
          "735:             httpLookups = []; // no /pushrules or /filter",
          "742:             await client.startClient();",
          "743:             expect(httpLookups.length).toBe(0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "773:                 expectBody: content,",
          "774:             }];",
          "777:         });",
          "779:         it(\"overload with null threadId works\", async () => {",
          "",
          "[Removed Lines]",
          "776:             await client.sendEvent(roomId, EventType.RoomMessage, content, txnId);",
          "",
          "[Added Lines]",
          "780:             await client.sendEvent(roomId, EventType.RoomMessage, { ...content }, txnId);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "786:                 expectBody: content,",
          "787:             }];",
          "790:         });",
          "792:         it(\"overload with threadId works\", async () => {",
          "793:             const eventId = \"$eventId:example.org\";",
          "794:             const txnId = client.makeTxnId();",
          "795:             httpLookups = [{",
          "796:                 method: \"PUT\",",
          "797:                 path: `/rooms/${encodeURIComponent(roomId)}/send/m.room.message/${txnId}`,",
          "798:                 data: { event_id: eventId },",
          "800:             }];",
          "803:         });",
          "804:     });",
          "",
          "[Removed Lines]",
          "789:             await client.sendEvent(roomId, null, EventType.RoomMessage, content, txnId);",
          "799:                 expectBody: content,",
          "802:             await client.sendEvent(roomId, \"$threadId:server\", EventType.RoomMessage, content, txnId);",
          "",
          "[Added Lines]",
          "793:             await client.sendEvent(roomId, null, EventType.RoomMessage, { ...content }, txnId);",
          "799:             const threadId = \"$threadId:server\";",
          "804:                 expectBody: {",
          "805:                     ...content,",
          "806:                     \"m.relates_to\": {",
          "807:                         \"event_id\": threadId,",
          "808:                         \"is_falling_back\": true,",
          "809:                         \"rel_type\": \"m.thread\",",
          "810:                     },",
          "811:                 },",
          "812:             }];",
          "814:             await client.sendEvent(roomId, threadId, EventType.RoomMessage, { ...content }, txnId);",
          "815:         });",
          "817:         it(\"should add thread relation if threadId is passed and the relation is missing\", async () => {",
          "818:             const eventId = \"$eventId:example.org\";",
          "819:             const threadId = \"$threadId:server\";",
          "820:             const txnId = client.makeTxnId();",
          "822:             const room = new Room(roomId, client, userId);",
          "823:             store.getRoom.mockReturnValue(room);",
          "825:             const rootEvent = new MatrixEvent({ event_id: threadId });",
          "826:             room.createThread(threadId, rootEvent, [rootEvent], false);",
          "828:             httpLookups = [{",
          "829:                 method: \"PUT\",",
          "830:                 path: `/rooms/${encodeURIComponent(roomId)}/send/m.room.message/${txnId}`,",
          "831:                 data: { event_id: eventId },",
          "832:                 expectBody: {",
          "833:                     ...content,",
          "834:                     \"m.relates_to\": {",
          "835:                         \"m.in_reply_to\": {",
          "836:                             event_id: threadId,",
          "837:                         },",
          "838:                         \"event_id\": threadId,",
          "839:                         \"is_falling_back\": true,",
          "840:                         \"rel_type\": \"m.thread\",",
          "841:                     },",
          "842:                 },",
          "843:             }];",
          "845:             await client.sendEvent(roomId, threadId, EventType.RoomMessage, { ...content }, txnId);",
          "846:         });",
          "848:         it(\"should add thread relation if threadId is passed and the relation is missing with reply\", async () => {",
          "849:             const eventId = \"$eventId:example.org\";",
          "850:             const threadId = \"$threadId:server\";",
          "851:             const txnId = client.makeTxnId();",
          "853:             const content = {",
          "854:                 body,",
          "855:                 \"m.relates_to\": {",
          "856:                     \"m.in_reply_to\": {",
          "857:                         event_id: \"$other:event\",",
          "858:                     },",
          "859:                 },",
          "860:             };",
          "862:             const room = new Room(roomId, client, userId);",
          "863:             store.getRoom.mockReturnValue(room);",
          "865:             const rootEvent = new MatrixEvent({ event_id: threadId });",
          "866:             room.createThread(threadId, rootEvent, [rootEvent], false);",
          "868:             httpLookups = [{",
          "869:                 method: \"PUT\",",
          "870:                 path: `/rooms/${encodeURIComponent(roomId)}/send/m.room.message/${txnId}`,",
          "871:                 data: { event_id: eventId },",
          "872:                 expectBody: {",
          "873:                     ...content,",
          "874:                     \"m.relates_to\": {",
          "875:                         \"m.in_reply_to\": {",
          "876:                             event_id: \"$other:event\",",
          "877:                         },",
          "878:                         \"event_id\": threadId,",
          "879:                         \"is_falling_back\": false,",
          "880:                         \"rel_type\": \"m.thread\",",
          "881:                     },",
          "882:                 },",
          "885:             await client.sendEvent(roomId, threadId, EventType.RoomMessage, { ...content }, txnId);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "926:             };",
          "927:             client.crypto = { // mock crypto",
          "928:                 encryptEvent: (event, room) => new Promise(() => {}),",
          "929:             };",
          "930:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:                 stop: jest.fn(),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1104:         });",
          "1105:     });",
          "1107:     describe(\"setPassword\", () => {",
          "1108:         const auth = { session: 'abcdef', type: 'foo' };",
          "1109:         const newPassword = 'newpassword';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1191:     describe(\"setRoomTopic\", () => {",
          "1192:         const roomId = \"!foofoofoofoofoofoo:matrix.org\";",
          "1193:         const createSendStateEventMock = (topic: string, htmlTopic?: string) => {",
          "1194:             return jest.fn()",
          "1195:                 .mockImplementation((roomId: string, eventType: string, content: any, stateKey: string) => {",
          "1196:                     expect(roomId).toEqual(roomId);",
          "1197:                     expect(eventType).toEqual(EventType.RoomTopic);",
          "1198:                     expect(content).toMatchObject(ContentHelpers.makeTopicContent(topic, htmlTopic));",
          "1199:                     expect(stateKey).toBeUndefined();",
          "1200:                     return Promise.resolve();",
          "1201:                 });",
          "1202:         };",
          "1204:         it(\"is called with plain text topic and sends state event\", async () => {",
          "1205:             const sendStateEvent = createSendStateEventMock(\"pizza\");",
          "1206:             client.sendStateEvent = sendStateEvent;",
          "1207:             await client.setRoomTopic(roomId, \"pizza\");",
          "1208:             expect(sendStateEvent).toHaveBeenCalledTimes(1);",
          "1209:         });",
          "1211:         it(\"is called with plain text topic and callback and sends state event\", async () => {",
          "1212:             const sendStateEvent = createSendStateEventMock(\"pizza\");",
          "1213:             client.sendStateEvent = sendStateEvent;",
          "1214:             await client.setRoomTopic(roomId, \"pizza\", () => {});",
          "1215:             expect(sendStateEvent).toHaveBeenCalledTimes(1);",
          "1216:         });",
          "1218:         it(\"is called with plain text and HTML topic and sends state event\", async () => {",
          "1219:             const sendStateEvent = createSendStateEventMock(\"pizza\", \"<b>pizza</b>\");",
          "1220:             client.sendStateEvent = sendStateEvent;",
          "1221:             await client.setRoomTopic(roomId, \"pizza\", \"<b>pizza</b>\");",
          "1222:             expect(sendStateEvent).toHaveBeenCalledTimes(1);",
          "1223:         });",
          "1224:     });",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1156:             passwordTest({ auth, new_password: newPassword, logout_devices: false }, callback);",
          "1157:         });",
          "1158:     });",
          "1159: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1279:     describe(\"getLocalAliases\", () => {",
          "1280:         it(\"should call the right endpoint\", async () => {",
          "1281:             const response = {",
          "1282:                 aliases: [\"#woop:example.org\", \"#another:example.org\"],",
          "1283:             };",
          "1284:             client.http.authedRequest.mockClear().mockResolvedValue(response);",
          "1286:             const roomId = \"!whatever:example.org\";",
          "1287:             const result = await client.getLocalAliases(roomId);",
          "1290:             const [callback, method, path, queryParams, data, opts] = client.http.authedRequest.mock.calls[0];",
          "1291:             expect(callback).toBeFalsy();",
          "1292:             expect(data).toBeFalsy();",
          "1293:             expect(method).toBe('GET');",
          "1294:             expect(path).toEqual(`/rooms/${encodeURIComponent(roomId)}/aliases`);",
          "1295:             expect(opts).toMatchObject({ prefix: \"/_matrix/client/v3\" });",
          "1296:             expect(queryParams).toBeFalsy();",
          "1297:             expect(result!.aliases).toEqual(response.aliases);",
          "1298:         });",
          "1299:     });",
          "",
          "---------------"
        ],
        "spec/unit/models/beacon.spec.ts||spec/unit/models/beacon.spec.ts": [
          "File: spec/unit/models/beacon.spec.ts -> spec/unit/models/beacon.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: limitations under the License.",
          "17: import {",
          "18:     isTimestampInDuration,",
          "19:     Beacon,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import { MatrixEvent } from \"../../../src\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:         const advanceDateAndTime = (ms: number) => {",
          "76:             jest.advanceTimersByTime(ms);",
          "77:         };",
          "79:         beforeEach(() => {",
          "82:             liveBeaconEvent = makeBeaconInfoEvent(",
          "83:                 userId,",
          "84:                 roomId,",
          "85:                 {",
          "86:                     timeout: HOUR_MS * 3,",
          "87:                     isLive: true,",
          "88:                 },",
          "89:                 '$live123',",
          "90:             );",
          "91:             notLiveBeaconEvent = makeBeaconInfoEvent(",
          "92:                 userId,",
          "93:                 roomId,",
          "95:                 '$dead123',",
          "96:             );",
          "97:             user2BeaconEvent = makeBeaconInfoEvent(",
          "",
          "[Removed Lines]",
          "68:         let liveBeaconEvent;",
          "69:         let notLiveBeaconEvent;",
          "70:         let user2BeaconEvent;",
          "74:             jest.spyOn(global.Date, 'now').mockReturnValue(now + ms);",
          "81:             jest.spyOn(global.Date, 'now').mockReturnValue(now - HOUR_MS);",
          "94:                 { timeout: HOUR_MS * 3, isLive: false },",
          "",
          "[Added Lines]",
          "69:         let liveBeaconEvent: MatrixEvent;",
          "70:         let notLiveBeaconEvent: MatrixEvent;",
          "71:         let user2BeaconEvent: MatrixEvent;",
          "75:             jest.spyOn(global.Date, 'now').mockReturnValue(Date.now() + ms);",
          "87:                     timestamp: now - HOUR_MS,",
          "94:                 {",
          "95:                     timeout: HOUR_MS * 3,",
          "96:                     isLive: false,",
          "97:                     timestamp: now - HOUR_MS,",
          "98:                 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:                 {",
          "101:                     timeout: HOUR_MS * 3,",
          "102:                     isLive: true,",
          "103:                 },",
          "104:                 '$user2live123',",
          "105:             );",
          "108:             jest.spyOn(global.Date, 'now').mockReturnValue(now);",
          "109:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:                     timestamp: now - HOUR_MS,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:             });",
          "133:             it('returns false when beacon is expired', () => {",
          "137:                 expect(beacon.isLive).toEqual(false);",
          "138:             });",
          "145:                 expect(beacon.isLive).toEqual(false);",
          "146:             });",
          "",
          "[Removed Lines]",
          "135:                 jest.spyOn(global.Date, 'now').mockReturnValue(now - 3 * HOUR_MS);",
          "136:                 const beacon = new Beacon(liveBeaconEvent);",
          "140:             it('returns false when beacon timestamp is in future', () => {",
          "143:                 jest.spyOn(global.Date, 'now').mockReturnValue(now - HOUR_MS - HOUR_MS);",
          "144:                 const beacon = new Beacon(liveBeaconEvent);",
          "",
          "[Added Lines]",
          "139:                 const expiredBeaconEvent = makeBeaconInfoEvent(",
          "140:                     userId2,",
          "141:                     roomId,",
          "142:                     {",
          "143:                         timeout: HOUR_MS,",
          "144:                         isLive: true,",
          "145:                         timestamp: now - HOUR_MS * 2,",
          "146:                     },",
          "147:                     '$user2live123',",
          "148:                 );",
          "149:                 const beacon = new Beacon(expiredBeaconEvent);",
          "153:             it('returns false when beacon timestamp is in future by an hour', () => {",
          "154:                 const beaconStartsInHour = makeBeaconInfoEvent(",
          "155:                     userId2,",
          "156:                     roomId,",
          "157:                     {",
          "158:                         timeout: HOUR_MS,",
          "159:                         isLive: true,",
          "160:                         timestamp: now + HOUR_MS,",
          "161:                     },",
          "162:                     '$user2live123',",
          "163:                 );",
          "164:                 const beacon = new Beacon(beaconStartsInHour);",
          "165:                 expect(beacon.isLive).toEqual(false);",
          "166:             });",
          "168:             it('returns true when beacon timestamp is one minute in the future', () => {",
          "169:                 const beaconStartsInOneMin = makeBeaconInfoEvent(",
          "170:                     userId2,",
          "171:                     roomId,",
          "172:                     {",
          "173:                         timeout: HOUR_MS,",
          "174:                         isLive: true,",
          "175:                         timestamp: now + 60000,",
          "176:                     },",
          "177:                     '$user2live123',",
          "178:                 );",
          "179:                 const beacon = new Beacon(beaconStartsInOneMin);",
          "180:                 expect(beacon.isLive).toEqual(true);",
          "181:             });",
          "183:             it('returns true when beacon timestamp is one minute before expiry', () => {",
          "186:                 const expiresInOneMin = makeBeaconInfoEvent(",
          "187:                     userId2,",
          "188:                     roomId,",
          "189:                     {",
          "190:                         timeout: HOUR_MS,",
          "191:                         isLive: true,",
          "192:                         timestamp: now - HOUR_MS + 60000,",
          "193:                     },",
          "194:                     '$user2live123',",
          "195:                 );",
          "196:                 const beacon = new Beacon(expiresInOneMin);",
          "197:                 expect(beacon.isLive).toEqual(true);",
          "198:             });",
          "200:             it('returns false when beacon timestamp is one minute after expiry', () => {",
          "203:                 const expiredOneMinAgo = makeBeaconInfoEvent(",
          "204:                     userId2,",
          "205:                     roomId,",
          "206:                     {",
          "207:                         timeout: HOUR_MS,",
          "208:                         isLive: true,",
          "209:                         timestamp: now - HOUR_MS - 60000,",
          "210:                     },",
          "211:                     '$user2live123',",
          "212:                 );",
          "213:                 const beacon = new Beacon(expiredOneMinAgo);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:                 beacon.monitorLiveness();",
          "228:                 advanceDateAndTime(HOUR_MS * 2 + 1);",
          "231:                 expect(emitSpy).not.toHaveBeenCalled();",
          "232:             });",
          "234:             it('checks liveness of beacon at expected expiry time', () => {",
          "",
          "[Removed Lines]",
          "227:                 expect(beacon.livenessWatchInterval).toBeFalsy();",
          "",
          "[Added Lines]",
          "296:                 expect(beacon.livenessWatchTimeout).toBeFalsy();",
          "303:             it('checks liveness of beacon at expected start time', () => {",
          "304:                 const futureBeaconEvent = makeBeaconInfoEvent(",
          "305:                     userId,",
          "306:                     roomId,",
          "307:                     {",
          "308:                         timeout: HOUR_MS * 3,",
          "309:                         isLive: true,",
          "311:                         timestamp: now + HOUR_MS,",
          "312:                     },",
          "313:                     '$live123',",
          "314:                 );",
          "316:                 const beacon = new Beacon(futureBeaconEvent);",
          "317:                 expect(beacon.isLive).toBeFalsy();",
          "318:                 const emitSpy = jest.spyOn(beacon, 'emit');",
          "320:                 beacon.monitorLiveness();",
          "323:                 advanceDateAndTime(HOUR_MS + 1);",
          "326:                 expect(emitSpy).toHaveBeenCalledTimes(1);",
          "327:                 expect(emitSpy).toHaveBeenCalledWith(BeaconEvent.LivenessChange, true, beacon);",
          "331:                 advanceDateAndTime(HOUR_MS * 3 + 100);",
          "333:                 expect(emitSpy).toHaveBeenCalledTimes(2);",
          "334:                 expect(emitSpy).toHaveBeenCalledWith(BeaconEvent.LivenessChange, false, beacon);",
          "335:             });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254:                 beacon.monitorLiveness();",
          "258:                 beacon.monitorLiveness();",
          "262:             });",
          "264:             it('destroy kills liveness monitor and emits', () => {",
          "",
          "[Removed Lines]",
          "256:                 const oldMonitor = beacon.livenessWatchInterval;",
          "261:                 expect(beacon.livenessWatchInterval).not.toEqual(oldMonitor);",
          "",
          "[Added Lines]",
          "359:                 const oldMonitor = beacon.livenessWatchTimeout;",
          "364:                 expect(beacon.livenessWatchTimeout).not.toEqual(oldMonitor);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:                 expect(emitSpy).not.toHaveBeenCalled();",
          "310:             });",
          "312:             it('sets latest location state to most recent location', () => {",
          "313:                 const beacon = new Beacon(makeBeaconInfoEvent(userId, roomId, { isLive: true, timeout: 60000 }));",
          "314:                 const emitSpy = jest.spyOn(beacon, 'emit');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:             describe('when beacon is live with a start timestamp is in the future', () => {",
          "416:                 it('ignores locations before the beacon start timestamp', () => {",
          "417:                     const startTimestamp = now + 60000;",
          "418:                     const beacon = new Beacon(makeBeaconInfoEvent(",
          "419:                         userId,",
          "420:                         roomId,",
          "421:                         { isLive: true, timeout: 60000, timestamp: startTimestamp },",
          "422:                     ));",
          "423:                     const emitSpy = jest.spyOn(beacon, 'emit');",
          "425:                     beacon.addLocations([",
          "427:                         makeBeaconEvent(",
          "428:                             userId,",
          "429:                             {",
          "430:                                 beaconInfoId: beacon.beaconInfoId,",
          "432:                                 timestamp: now + 10,",
          "433:                             },",
          "434:                         ),",
          "435:                     ]);",
          "437:                     expect(beacon.latestLocationState).toBeFalsy();",
          "438:                     expect(emitSpy).not.toHaveBeenCalled();",
          "439:                 });",
          "440:                 it('sets latest location when location timestamp is after startTimestamp', () => {",
          "441:                     const startTimestamp = now + 60000;",
          "442:                     const beacon = new Beacon(makeBeaconInfoEvent(",
          "443:                         userId,",
          "444:                         roomId,",
          "445:                         { isLive: true, timeout: 600000, timestamp: startTimestamp },",
          "446:                     ));",
          "447:                     const emitSpy = jest.spyOn(beacon, 'emit');",
          "449:                     beacon.addLocations([",
          "451:                         makeBeaconEvent(",
          "452:                             userId,",
          "453:                             {",
          "454:                                 beaconInfoId: beacon.beaconInfoId,",
          "456:                                 timestamp: startTimestamp + 10,",
          "457:                             },",
          "458:                         ),",
          "459:                     ]);",
          "461:                     expect(beacon.latestLocationState).toBeTruthy();",
          "462:                     expect(emitSpy).toHaveBeenCalled();",
          "463:                 });",
          "464:             });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "340:                 expect(beacon.latestLocationState).toEqual(expectedLatestLocation);",
          "341:                 expect(emitSpy).toHaveBeenCalledWith(BeaconEvent.LocationUpdate, expectedLatestLocation);",
          "342:             });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:                 expect(beacon.latestLocationEvent).toEqual(locations[1]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "356:                 expect(beacon.latestLocationState).toEqual(expect.objectContaining({",
          "357:                     uri: 'geo:bar',",
          "358:                 }));",
          "360:                 const emitSpy = jest.spyOn(beacon, 'emit').mockClear();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:                 expect(beacon.latestLocationEvent).toEqual(newerLocation);",
          "",
          "---------------"
        ],
        "spec/unit/models/thread.spec.ts||spec/unit/models/thread.spec.ts": [
          "File: spec/unit/models/thread.spec.ts -> spec/unit/models/thread.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { Thread } from \"../../../src/models/thread\";",
          "19: describe('Thread', () => {",
          "20:     describe(\"constructor\", () => {",
          "21:         it(\"should explode for element-web#22141 logging\", () => {",
          "23:             expect(() => {",
          "24:                 new Thread(\"$event\", undefined, {} as any); // deliberate cast to test error case",
          "25:             }).toThrow(\"element-web#22141: A thread requires a room in order to function\");",
          "26:         });",
          "27:     });",
          "28: });",
          "",
          "---------------"
        ],
        "spec/unit/pushprocessor.spec.js||spec/unit/pushprocessor.spec.js": [
          "File: spec/unit/pushprocessor.spec.js -> spec/unit/pushprocessor.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:             type: EventType.RoomServerAcl,",
          "303:             room: testRoomId,",
          "304:             user: \"@alfred:localhost\",",
          "305:             event: true,",
          "306:             content: {},",
          "307:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:             skey: \"\",",
          "",
          "---------------"
        ],
        "spec/unit/relations.spec.ts||spec/unit/relations.spec.ts": [
          "File: spec/unit/relations.spec.ts -> spec/unit/relations.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:             },",
          "97:         });",
          "104:         {",
          "105:             const relationsCreated = new Promise(resolve => {",
          "106:                 targetEvent.once(MatrixEventEvent.RelationsCreated, resolve);",
          "107:             });",
          "112:             timelineSet.addLiveEvent(targetEvent);",
          "113:             timelineSet.addLiveEvent(relationEvent);",
          "",
          "[Removed Lines]",
          "101:         const room = new Room(\"room123\", null, null);",
          "109:             const timelineSet = new EventTimelineSet(room, {",
          "110:                 unstableClientRelationAggregation: true,",
          "111:             });",
          "",
          "[Added Lines]",
          "101:             const room = new Room(\"room123\", null, null);",
          "106:             const timelineSet = new EventTimelineSet(room);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         {",
          "120:             const relationsCreated = new Promise(resolve => {",
          "121:                 targetEvent.once(MatrixEventEvent.RelationsCreated, resolve);",
          "122:             });",
          "127:             timelineSet.addLiveEvent(relationEvent);",
          "128:             timelineSet.addLiveEvent(targetEvent);",
          "",
          "[Removed Lines]",
          "124:             const timelineSet = new EventTimelineSet(room, {",
          "125:                 unstableClientRelationAggregation: true,",
          "126:             });",
          "",
          "[Added Lines]",
          "115:             const room = new Room(\"room123\", null, null);",
          "120:             const timelineSet = new EventTimelineSet(room);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         }",
          "132:     });",
          "134:     it(\"should ignore m.replace for state events\", async () => {",
          "135:         const userId = \"@bob:example.com\";",
          "136:         const room = new Room(\"room123\", null, userId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     it(\"should re-use Relations between all timeline sets in a room\", async () => {",
          "129:         const room = new Room(\"room123\", null, null);",
          "130:         const timelineSet1 = new EventTimelineSet(room);",
          "131:         const timelineSet2 = new EventTimelineSet(room);",
          "132:         expect(room.relations).toBe(timelineSet1.relations);",
          "133:         expect(room.relations).toBe(timelineSet2.relations);",
          "134:     });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:         await relations.setTargetEvent(originalTopic);",
          "169:         expect(originalTopic.replacingEvent()).toBe(null);",
          "170:         expect(originalTopic.getContent().topic).toBe(\"orig\");",
          "172:         await relations.addEvent(badlyEditedTopic);",
          "173:         expect(originalTopic.replacingEvent()).toBe(null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:         expect(badlyEditedTopic.isRelation()).toBe(false);",
          "174:         expect(badlyEditedTopic.isRelation(\"m.replace\")).toBe(false);",
          "",
          "---------------"
        ],
        "spec/unit/room-state.spec.js||spec/unit/room-state.spec.js": [
          "File: spec/unit/room-state.spec.js -> spec/unit/room-state.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { filterEmitCallsByEventType } from \"../test-utils/emitter\";",
          "4: import { RoomState, RoomStateEvent } from \"../../src/models/room-state\";",
          "5: import { BeaconEvent, getBeaconInfoIdentifier } from \"../../src/models/beacon\";",
          "7: import {",
          "8:     MatrixEvent,",
          "9:     MatrixEventEvent,",
          "",
          "[Removed Lines]",
          "6: import { EventType, RelationType } from \"../../src/@types/event\";",
          "",
          "[Added Lines]",
          "6: import { EventType, RelationType, UNSTABLE_MSC2716_MARKER } from \"../../src/@types/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:             );",
          "259:         });",
          "261:         describe('beacon events', () => {",
          "262:             it('adds new beacon info events to state and emits', () => {",
          "263:                 const beaconEvent = makeBeaconInfoEvent(userA, roomId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:         it(\"should emit `RoomStateEvent.Marker` for each marker event\", function() {",
          "262:             const events = [",
          "263:                 utils.mkEvent({",
          "264:                     event: true,",
          "265:                     type: UNSTABLE_MSC2716_MARKER.name,",
          "266:                     room: roomId,",
          "267:                     user: userA,",
          "268:                     skey: \"\",",
          "269:                     content: {",
          "270:                         \"m.insertion_id\": \"$abc\",",
          "271:                     },",
          "272:                 }),",
          "273:             ];",
          "274:             let emitCount = 0;",
          "275:             state.on(\"RoomState.Marker\", function(markerEvent, markerFoundOptions) {",
          "276:                 expect(markerEvent).toEqual(events[emitCount]);",
          "277:                 expect(markerFoundOptions).toEqual({ timelineWasEmpty: true });",
          "278:                 emitCount += 1;",
          "279:             });",
          "280:             state.setStateEvents(events, { timelineWasEmpty: true });",
          "281:             expect(emitCount).toEqual(1);",
          "282:         });",
          "",
          "---------------"
        ],
        "spec/unit/room.spec.ts||spec/unit/room.spec.ts": [
          "File: spec/unit/room.spec.ts -> spec/unit/room.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         event: true,",
          "53:         user: userA,",
          "54:         room: roomId,",
          "57:     const mkReply = (target: MatrixEvent) => utils.mkEvent({",
          "58:         event: true,",
          "",
          "[Removed Lines]",
          "55:     }, room.client) as MatrixEvent;",
          "",
          "[Added Lines]",
          "55:     }, room.client);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:                 },",
          "68:             },",
          "69:         },",
          "72:     const mkEdit = (target: MatrixEvent, salt = Math.random()) => utils.mkEvent({",
          "73:         event: true,",
          "",
          "[Removed Lines]",
          "70:     }, room.client) as MatrixEvent;",
          "",
          "[Added Lines]",
          "70:     }, room.client);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:                 event_id: target.getId(),",
          "85:             },",
          "86:         },",
          "89:     const mkThreadResponse = (root: MatrixEvent) => utils.mkEvent({",
          "90:         event: true,",
          "",
          "[Removed Lines]",
          "87:     }, room.client) as MatrixEvent;",
          "",
          "[Added Lines]",
          "87:     }, room.client);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:                 \"rel_type\": \"m.thread\",",
          "102:             },",
          "103:         },",
          "106:     const mkReaction = (target: MatrixEvent) => utils.mkEvent({",
          "107:         event: true,",
          "",
          "[Removed Lines]",
          "104:     }, room.client) as MatrixEvent;",
          "",
          "[Added Lines]",
          "104:     }, room.client);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:                 \"key\": Math.random().toString(),",
          "116:             },",
          "117:         },",
          "120:     const mkRedaction = (target: MatrixEvent) => utils.mkEvent({",
          "121:         event: true,",
          "",
          "[Removed Lines]",
          "118:     }, room.client) as MatrixEvent;",
          "",
          "[Added Lines]",
          "118:     }, room.client);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:         room: roomId,",
          "125:         redacts: target.getId(),",
          "126:         content: {},",
          "129:     beforeEach(function() {",
          "130:         room = new Room(roomId, new TestClient(userA, \"device\").client, userA);",
          "",
          "[Removed Lines]",
          "127:     }, room.client) as MatrixEvent;",
          "",
          "[Added Lines]",
          "127:     }, room.client);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133:         room.currentState = room.getLiveTimeline().endState = utils.mock(RoomState, \"currentState\");",
          "134:     });",
          "136:     describe(\"getAvatarUrl\", function() {",
          "137:         const hsUrl = \"https://my.home.server\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     describe('getCreator', () => {",
          "137:         it(\"should return the creator from m.room.create\", function() {",
          "138:             room.currentState.getStateEvents.mockImplementation(function(type, key) {",
          "139:                 if (type === EventType.RoomCreate && key === \"\") {",
          "140:                     return utils.mkEvent({",
          "141:                         event: true,",
          "142:                         type: EventType.RoomCreate,",
          "143:                         skey: \"\",",
          "144:                         room: roomId,",
          "145:                         user: userA,",
          "146:                         content: {",
          "147:                             creator: userA,",
          "148:                         },",
          "149:                     });",
          "150:                 }",
          "151:             });",
          "152:             const roomCreator = room.getCreator();",
          "153:             expect(roomCreator).toStrictEqual(userA);",
          "154:         });",
          "155:     });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "189:         const events: MatrixEvent[] = [",
          "190:             utils.mkMessage({",
          "191:                 room: roomId, user: userA, msg: \"changing room name\", event: true,",
          "193:             utils.mkEvent({",
          "194:                 type: EventType.RoomName, room: roomId, user: userA, event: true,",
          "195:                 content: { name: \"New Room Name\" },",
          "197:         ];",
          "210:         });",
          "212:         it(\"should throw if duplicateStrategy isn't 'replace' or 'ignore'\", function() {",
          "213:             expect(function() {",
          "215:             }).toThrow();",
          "216:         });",
          "",
          "[Removed Lines]",
          "192:             }) as MatrixEvent,",
          "196:             }) as MatrixEvent,",
          "199:         it(\"should call RoomState.setTypingEvent on m.typing events\", function() {",
          "200:             const typing = utils.mkEvent({",
          "201:                 room: roomId,",
          "202:                 type: EventType.Typing,",
          "203:                 event: true,",
          "204:                 content: {",
          "205:                     user_ids: [userA],",
          "206:                 },",
          "207:             });",
          "208:             room.addEphemeralEvents([typing]);",
          "209:             expect(room.currentState.setTypingEvent).toHaveBeenCalledWith(typing);",
          "214:                 room.addLiveEvents(events, \"foo\");",
          "",
          "[Added Lines]",
          "213:             }),",
          "217:             }),",
          "220:         it(\"Make sure legacy overload passing options directly as parameters still works\", () => {",
          "221:             expect(() => room.addLiveEvents(events, DuplicateStrategy.Replace, false)).not.toThrow();",
          "222:             expect(() => room.addLiveEvents(events, DuplicateStrategy.Ignore, true)).not.toThrow();",
          "223:             expect(() => room.addLiveEvents(events, \"shouldfailbecauseinvalidduplicatestrategy\", false)).toThrow();",
          "228:                 room.addLiveEvents(events, {",
          "229:                     duplicateStrategy: \"foo\",",
          "230:                 });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "220:             const dupe = utils.mkMessage({",
          "221:                 room: roomId, user: userA, msg: \"dupe\", event: true,",
          "223:             dupe.event.event_id = events[0].getId();",
          "224:             room.addLiveEvents(events);",
          "225:             expect(room.timeline[0]).toEqual(events[0]);",
          "227:             expect(room.timeline[0]).toEqual(dupe);",
          "228:         });",
          "",
          "[Removed Lines]",
          "222:             }) as MatrixEvent;",
          "226:             room.addLiveEvents([dupe], DuplicateStrategy.Replace);",
          "",
          "[Added Lines]",
          "238:             });",
          "242:             room.addLiveEvents([dupe], {",
          "243:                 duplicateStrategy: DuplicateStrategy.Replace,",
          "244:             });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "232:             const dupe = utils.mkMessage({",
          "233:                 room: roomId, user: userA, msg: \"dupe\", event: true,",
          "235:             dupe.event.event_id = events[0].getId();",
          "236:             room.addLiveEvents(events);",
          "237:             expect(room.timeline[0]).toEqual(events[0]);",
          "239:             expect(room.timeline[0]).toEqual(events[0]);",
          "240:         });",
          "",
          "[Removed Lines]",
          "234:             }) as MatrixEvent;",
          "238:             room.addLiveEvents([dupe], \"ignore\");",
          "",
          "[Added Lines]",
          "252:             });",
          "256:             room.addLiveEvents([dupe], {",
          "257:                 duplicateStrategy: \"ignore\",",
          "258:             });",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "257:                 const events: MatrixEvent[] = [",
          "258:                     utils.mkMembership({",
          "259:                         room: roomId, mship: \"invite\", user: userB, skey: userA, event: true,",
          "261:                     utils.mkEvent({",
          "262:                         type: EventType.RoomName, room: roomId, user: userB, event: true,",
          "263:                         content: {",
          "264:                             name: \"New room\",",
          "265:                         },",
          "267:                 ];",
          "268:                 room.addLiveEvents(events);",
          "269:                 expect(room.currentState.setStateEvents).toHaveBeenCalledWith(",
          "270:                     [events[0]],",
          "271:                 );",
          "272:                 expect(room.currentState.setStateEvents).toHaveBeenCalledWith(",
          "273:                     [events[1]],",
          "274:                 );",
          "275:                 expect(events[0].forwardLooking).toBe(true);",
          "276:                 expect(events[1].forwardLooking).toBe(true);",
          "",
          "[Removed Lines]",
          "260:                     }) as MatrixEvent,",
          "266:                     }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "280:                     }),",
          "286:                     }),",
          "291:                     { timelineWasEmpty: undefined },",
          "295:                     { timelineWasEmpty: undefined },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "296:         it(\"should emit Room.localEchoUpdated when a local echo is updated\", function() {",
          "297:             const localEvent = utils.mkMessage({",
          "298:                 room: roomId, user: userA, event: true,",
          "300:             localEvent.status = EventStatus.SENDING;",
          "301:             const localEventId = localEvent.getId();",
          "303:             const remoteEvent = utils.mkMessage({",
          "304:                 room: roomId, user: userA, event: true,",
          "306:             remoteEvent.event.unsigned = { transaction_id: \"TXN_ID\" };",
          "307:             const remoteEventId = remoteEvent.getId();",
          "",
          "[Removed Lines]",
          "299:             }) as MatrixEvent;",
          "305:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "321:             });",
          "327:             });",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "341:         });",
          "342:     });",
          "344:     describe(\"addEventsToTimeline\", function() {",
          "345:         const events = [",
          "346:             utils.mkMessage({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:     describe('addEphemeralEvents', () => {",
          "367:         it(\"should call RoomState.setTypingEvent on m.typing events\", function() {",
          "368:             const typing = utils.mkEvent({",
          "369:                 room: roomId,",
          "370:                 type: EventType.Typing,",
          "371:                 event: true,",
          "372:                 content: {",
          "373:                     user_ids: [userA],",
          "374:                 },",
          "375:             });",
          "376:             room.addEphemeralEvents([typing]);",
          "377:             expect(room.currentState.setTypingEvent).toHaveBeenCalledWith(typing);",
          "378:         });",
          "379:     });",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "408:             const newEv = utils.mkEvent({",
          "409:                 type: EventType.RoomName, room: roomId, user: userA, event: true,",
          "410:                 content: { name: \"New Room Name\" },",
          "412:             const oldEv = utils.mkEvent({",
          "413:                 type: EventType.RoomName, room: roomId, user: userA, event: true,",
          "414:                 content: { name: \"Old Room Name\" },",
          "416:             room.addLiveEvents([newEv]);",
          "417:             expect(newEv.sender).toEqual(sentinel);",
          "418:             room.addEventsToTimeline([oldEv], true, room.getLiveTimeline());",
          "",
          "[Removed Lines]",
          "411:             }) as MatrixEvent;",
          "415:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "448:             });",
          "452:             });",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "446:             const newEv = utils.mkMembership({",
          "447:                 room: roomId, mship: \"invite\", user: userB, skey: userA, event: true,",
          "449:             const oldEv = utils.mkMembership({",
          "450:                 room: roomId, mship: \"ban\", user: userB, skey: userA, event: true,",
          "452:             room.addLiveEvents([newEv]);",
          "453:             expect(newEv.target).toEqual(sentinel);",
          "454:             room.addEventsToTimeline([oldEv], true, room.getLiveTimeline());",
          "",
          "[Removed Lines]",
          "448:             }) as MatrixEvent;",
          "451:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "485:             });",
          "488:             });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "460:             const events: MatrixEvent[] = [",
          "461:                 utils.mkMembership({",
          "462:                     room: roomId, mship: \"invite\", user: userB, skey: userA, event: true,",
          "464:                 utils.mkEvent({",
          "465:                     type: EventType.RoomName, room: roomId, user: userB, event: true,",
          "466:                     content: {",
          "467:                         name: \"New room\",",
          "468:                     },",
          "470:             ];",
          "472:             room.addEventsToTimeline(events, true, room.getLiveTimeline());",
          "473:             expect(room.oldState.setStateEvents).toHaveBeenCalledWith(",
          "474:                 [events[0]],",
          "475:             );",
          "476:             expect(room.oldState.setStateEvents).toHaveBeenCalledWith(",
          "477:                 [events[1]],",
          "478:             );",
          "479:             expect(events[0].forwardLooking).toBe(false);",
          "480:             expect(events[1].forwardLooking).toBe(false);",
          "",
          "[Removed Lines]",
          "463:                 }) as MatrixEvent,",
          "469:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "500:                 }),",
          "506:                 }),",
          "512:                 { timelineWasEmpty: undefined },",
          "516:                 { timelineWasEmpty: undefined },",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "520:         it(\"should reset the legacy timeline fields\", function() {",
          "521:             room.addLiveEvents([events[0], events[1]]);",
          "522:             expect(room.timeline.length).toEqual(2);",
          "523:             room.resetLiveTimeline('sometoken', 'someothertoken');",
          "525:             room.addLiveEvents([events[2]]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:             const oldStateBeforeRunningReset = room.oldState;",
          "564:             let oldStateUpdateEmitCount = 0;",
          "565:             room.on(RoomEvent.OldStateUpdated, function(room, previousOldState, oldState) {",
          "566:                 expect(previousOldState).toBe(oldStateBeforeRunningReset);",
          "567:                 expect(oldState).toBe(room.oldState);",
          "568:                 oldStateUpdateEmitCount += 1;",
          "569:             });",
          "571:             const currentStateBeforeRunningReset = room.currentState;",
          "572:             let currentStateUpdateEmitCount = 0;",
          "573:             room.on(RoomEvent.CurrentStateUpdated, function(room, previousCurrentState, currentState) {",
          "574:                 expect(previousCurrentState).toBe(currentStateBeforeRunningReset);",
          "575:                 expect(currentState).toBe(room.currentState);",
          "576:                 currentStateUpdateEmitCount += 1;",
          "577:             });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "529:                 newLiveTimeline.getState(EventTimeline.BACKWARDS));",
          "530:             expect(room.currentState).toEqual(",
          "531:                 newLiveTimeline.getState(EventTimeline.FORWARDS));",
          "532:         });",
          "534:         it(\"should emit Room.timelineReset event and set the correct \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:             expect(oldStateUpdateEmitCount).toEqual(1);",
          "591:             expect(currentStateUpdateEmitCount).toEqual(timelineSupport ? 1 : 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "571:         const events: MatrixEvent[] = [",
          "572:             utils.mkMessage({",
          "573:                 room: roomId, user: userA, msg: \"1111\", event: true,",
          "575:             utils.mkMessage({",
          "576:                 room: roomId, user: userA, msg: \"2222\", event: true,",
          "578:             utils.mkMessage({",
          "579:                 room: roomId, user: userA, msg: \"3333\", event: true,",
          "581:         ];",
          "583:         it(\"should handle events in the same timeline\", function() {",
          "",
          "[Removed Lines]",
          "574:             }) as MatrixEvent,",
          "577:             }) as MatrixEvent,",
          "580:             }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "634:             }),",
          "637:             }),",
          "640:             }),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "718:                 type: EventType.RoomJoinRules, room: roomId, user: userA, content: {",
          "719:                     join_rule: rule,",
          "720:                 }, event: true,",
          "722:         };",
          "723:         const setAltAliases = function(aliases: string[]) {",
          "724:             room.addLiveEvents([utils.mkEvent({",
          "725:                 type: EventType.RoomCanonicalAlias, room: roomId, skey: \"\", content: {",
          "726:                     alt_aliases: aliases,",
          "727:                 }, event: true,",
          "729:         };",
          "730:         const setAlias = function(alias: string) {",
          "731:             room.addLiveEvents([utils.mkEvent({",
          "732:                 type: EventType.RoomCanonicalAlias, room: roomId, skey: \"\", content: { alias }, event: true,",
          "734:         };",
          "735:         const setRoomName = function(name: string) {",
          "736:             room.addLiveEvents([utils.mkEvent({",
          "737:                 type: EventType.RoomName, room: roomId, user: userA, content: {",
          "738:                     name: name,",
          "739:                 }, event: true,",
          "741:         };",
          "742:         const addMember = function(userId: string, state = \"join\", opts: any = {}) {",
          "743:             opts.room = roomId;",
          "",
          "[Removed Lines]",
          "721:             }) as MatrixEvent]);",
          "728:             }) as MatrixEvent]);",
          "733:             }) as MatrixEvent]);",
          "740:             }) as MatrixEvent]);",
          "",
          "[Added Lines]",
          "781:             })]);",
          "788:             })]);",
          "793:             })]);",
          "800:             })]);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "745:             opts.user = opts.user || userId;",
          "746:             opts.skey = userId;",
          "747:             opts.event = true;",
          "749:             room.addLiveEvents([event]);",
          "750:             return event;",
          "751:         };",
          "",
          "[Removed Lines]",
          "748:             const event = utils.mkMembership(opts) as MatrixEvent;",
          "",
          "[Added Lines]",
          "808:             const event = utils.mkMembership(opts);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1053:         const eventToAck = utils.mkMessage({",
          "1054:             room: roomId, user: userA, msg: \"PLEASE ACKNOWLEDGE MY EXISTENCE\",",
          "1055:             event: true,",
          "1058:         function mkReceipt(roomId: string, records) {",
          "1059:             const content = {};",
          "",
          "[Removed Lines]",
          "1056:         }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1116:         });",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1119:                 const nextEventToAck = utils.mkMessage({",
          "1120:                     room: roomId, user: userA, msg: \"I AM HERE YOU KNOW\",",
          "1121:                     event: true,",
          "1123:                 const ts = 13787898424;",
          "1124:                 room.addReceipt(mkReceipt(roomId, [",
          "1125:                     mkRecord(eventToAck.getId(), \"m.read\", userB, ts),",
          "",
          "[Removed Lines]",
          "1122:                 }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1182:                 });",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1154:                 const eventTwo = utils.mkMessage({",
          "1155:                     room: roomId, user: userA, msg: \"2222\",",
          "1156:                     event: true,",
          "1158:                 const eventThree = utils.mkMessage({",
          "1159:                     room: roomId, user: userA, msg: \"3333\",",
          "1160:                     event: true,",
          "1162:                 const ts = 13787898424;",
          "1163:                 room.addReceipt(mkReceipt(roomId, [",
          "1164:                     mkRecord(eventToAck.getId(), \"m.read\", userB, ts),",
          "",
          "[Removed Lines]",
          "1157:                 }) as MatrixEvent;",
          "1161:                 }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1217:                 });",
          "1221:                 });",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1206:                     utils.mkMessage({",
          "1207:                         room: roomId, user: userA, msg: \"1111\",",
          "1208:                         event: true,",
          "1210:                     utils.mkMessage({",
          "1211:                         room: roomId, user: userA, msg: \"2222\",",
          "1212:                         event: true,",
          "1214:                     utils.mkMessage({",
          "1215:                         room: roomId, user: userA, msg: \"3333\",",
          "1216:                         event: true,",
          "1218:                 ];",
          "1220:                 room.addLiveEvents(events);",
          "",
          "[Removed Lines]",
          "1209:                     }) as MatrixEvent,",
          "1213:                     }) as MatrixEvent,",
          "1217:                     }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1269:                     }),",
          "1273:                     }),",
          "1277:                     }),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1244:                     utils.mkMessage({",
          "1245:                         room: roomId, user: userA, msg: \"1111\",",
          "1246:                         event: true,",
          "1248:                     utils.mkMessage({",
          "1249:                         room: roomId, user: userA, msg: \"2222\",",
          "1250:                         event: true,",
          "1252:                     utils.mkMessage({",
          "1253:                         room: roomId, user: userA, msg: \"3333\",",
          "1254:                         event: true,",
          "1256:                 ];",
          "1258:                 room.addLiveEvents(events);",
          "",
          "[Removed Lines]",
          "1247:                     }) as MatrixEvent,",
          "1251:                     }) as MatrixEvent,",
          "1255:                     }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1307:                     }),",
          "1311:                     }),",
          "1315:                     }),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1344:             });",
          "1345:             const eventA = utils.mkMessage({",
          "1346:                 room: roomId, user: userA, msg: \"remote 1\", event: true,",
          "1348:             const eventB = utils.mkMessage({",
          "1349:                 room: roomId, user: userA, msg: \"local 1\", event: true,",
          "1351:             eventB.status = EventStatus.SENDING;",
          "1352:             const eventC = utils.mkMessage({",
          "1353:                 room: roomId, user: userA, msg: \"remote 2\", event: true,",
          "1355:             room.addLiveEvents([eventA]);",
          "1356:             room.addPendingEvent(eventB, \"TXN1\");",
          "1357:             room.addLiveEvents([eventC]);",
          "",
          "[Removed Lines]",
          "1347:             }) as MatrixEvent;",
          "1350:             }) as MatrixEvent;",
          "1354:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1407:             });",
          "1410:             });",
          "1414:             });",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1370:             });",
          "1371:             const eventA = utils.mkMessage({",
          "1372:                 room: roomId, user: userA, msg: \"remote 1\", event: true,",
          "1374:             const eventB = utils.mkMessage({",
          "1375:                 room: roomId, user: userA, msg: \"local 1\", event: true,",
          "1377:             eventB.status = EventStatus.SENDING;",
          "1378:             const eventC = utils.mkMessage({",
          "1379:                 room: roomId, user: userA, msg: \"remote 2\", event: true,",
          "1381:             room.addLiveEvents([eventA]);",
          "1382:             room.addPendingEvent(eventB, \"TXN1\");",
          "1383:             room.addLiveEvents([eventC]);",
          "",
          "[Removed Lines]",
          "1373:             }) as MatrixEvent;",
          "1376:             }) as MatrixEvent;",
          "1380:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1433:             });",
          "1436:             });",
          "1440:             });",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1397:             });",
          "1398:             const eventA = utils.mkMessage({",
          "1399:                 room: roomId, user: userA, event: true,",
          "1401:             eventA.status = EventStatus.SENDING;",
          "1402:             const eventId = eventA.getId();",
          "",
          "[Removed Lines]",
          "1400:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1460:             });",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1430:             const room = new Room(roomId, null, userA);",
          "1431:             const eventA = utils.mkMessage({",
          "1432:                 room: roomId, user: userA, event: true,",
          "1434:             eventA.status = EventStatus.SENDING;",
          "1435:             const eventId = eventA.getId();",
          "",
          "[Removed Lines]",
          "1433:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1493:             });",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1495:                         return Promise.resolve();",
          "1496:                     },",
          "1497:                     getSyncToken: () => \"sync_token\",",
          "1498:                 },",
          "1499:             };",
          "1500:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1558:                     getPendingEvents: jest.fn().mockResolvedValue([]),",
          "1559:                     setPendingEvents: jest.fn().mockResolvedValue(undefined),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1505:             room: roomId,",
          "1506:             event: true,",
          "1507:             name: \"User A\",",
          "1510:         it(\"should load members from server on first call\", async function() {",
          "1511:             const client = createClientMock([memberEvent]);",
          "",
          "[Removed Lines]",
          "1508:         }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1570:         });",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1525:                 room: roomId,",
          "1526:                 event: true,",
          "1527:                 name: \"Ms A\",",
          "1529:             const client = createClientMock([memberEvent2], [memberEvent]);",
          "1530:             const room = new Room(roomId, client as any, null, { lazyLoadMembers: true });",
          "",
          "[Removed Lines]",
          "1528:             }) as MatrixEvent;",
          "",
          "[Added Lines]",
          "1590:             });",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1596:                 mship: \"join\",",
          "1597:                 room: roomId,",
          "1598:                 event: true,",
          "1600:             expect(room.guessDMUserId()).toEqual(userB);",
          "1601:         });",
          "1602:         it(\"should return self if only member present\", function() {",
          "",
          "[Removed Lines]",
          "1599:             }) as MatrixEvent]);",
          "",
          "[Added Lines]",
          "1661:             })]);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1629:                 utils.mkMembership({",
          "1630:                     user: userA, mship: \"join\",",
          "1631:                     room: roomId, event: true, name: \"User A\",",
          "1633:                 utils.mkMembership({",
          "1634:                     user: userB, mship: \"join\",",
          "1635:                     room: roomId, event: true, name: \"User B\",",
          "1637:             ]);",
          "1638:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1639:         });",
          "",
          "[Removed Lines]",
          "1632:                 }) as MatrixEvent,",
          "1636:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1694:                 }),",
          "1698:                 }),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1644:                 utils.mkMembership({",
          "1645:                     user: userA, mship: \"join\",",
          "1646:                     room: roomId, event: true, name: \"User A\",",
          "1648:                 utils.mkMembership({",
          "1649:                     user: userB, mship: \"ban\",",
          "1650:                     room: roomId, event: true, name: \"User B\",",
          "1652:             ]);",
          "1653:             expect(room.getDefaultRoomName(userA)).toEqual(\"Empty room (was User B)\");",
          "1654:         });",
          "",
          "[Removed Lines]",
          "1647:                 }) as MatrixEvent,",
          "1651:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1709:                 }),",
          "1713:                 }),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1659:                 utils.mkMembership({",
          "1660:                     user: userA, mship: \"join\",",
          "1661:                     room: roomId, event: true, name: \"User A\",",
          "1663:                 utils.mkMembership({",
          "1664:                     user: userB, mship: \"invite\",",
          "1665:                     room: roomId, event: true, name: \"User B\",",
          "1667:             ]);",
          "1668:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1669:         });",
          "",
          "[Removed Lines]",
          "1662:                 }) as MatrixEvent,",
          "1666:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1724:                 }),",
          "1728:                 }),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1674:                 utils.mkMembership({",
          "1675:                     user: userA, mship: \"join\",",
          "1676:                     room: roomId, event: true, name: \"User A\",",
          "1678:                 utils.mkMembership({",
          "1679:                     user: userB, mship: \"leave\",",
          "1680:                     room: roomId, event: true, name: \"User B\",",
          "1682:             ]);",
          "1683:             expect(room.getDefaultRoomName(userA)).toEqual(\"Empty room (was User B)\");",
          "1684:         });",
          "",
          "[Removed Lines]",
          "1677:                 }) as MatrixEvent,",
          "1681:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1739:                 }),",
          "1743:                 }),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1689:                 utils.mkMembership({",
          "1690:                     user: userA, mship: \"join\",",
          "1691:                     room: roomId, event: true, name: \"User A\",",
          "1693:                 utils.mkMembership({",
          "1694:                     user: userB, mship: \"join\",",
          "1695:                     room: roomId, event: true, name: \"User B\",",
          "1697:                 utils.mkMembership({",
          "1698:                     user: userC, mship: \"join\",",
          "1699:                     room: roomId, event: true, name: \"User C\",",
          "1701:             ]);",
          "1702:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B and User C\");",
          "1703:         });",
          "",
          "[Removed Lines]",
          "1692:                 }) as MatrixEvent,",
          "1696:                 }) as MatrixEvent,",
          "1700:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1754:                 }),",
          "1758:                 }),",
          "1762:                 }),",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1708:                 utils.mkMembership({",
          "1709:                     user: userA, mship: \"join\",",
          "1710:                     room: roomId, event: true, name: \"User A\",",
          "1712:                 utils.mkMembership({",
          "1713:                     user: userB, mship: \"join\",",
          "1714:                     room: roomId, event: true, name: \"User B\",",
          "1716:                 utils.mkMembership({",
          "1717:                     user: userC, mship: \"join\",",
          "1718:                     room: roomId, event: true, name: \"User C\",",
          "1720:                 utils.mkMembership({",
          "1721:                     user: userD, mship: \"join\",",
          "1722:                     room: roomId, event: true, name: \"User D\",",
          "1724:             ]);",
          "1725:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B and 2 others\");",
          "1726:         });",
          "",
          "[Removed Lines]",
          "1711:                 }) as MatrixEvent,",
          "1715:                 }) as MatrixEvent,",
          "1719:                 }) as MatrixEvent,",
          "1723:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1773:                 }),",
          "1777:                 }),",
          "1781:                 }),",
          "1785:                 }),",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1733:                 utils.mkMembership({",
          "1734:                     user: userA, mship: \"join\",",
          "1735:                     room: roomId, event: true, name: \"User A\",",
          "1737:                 utils.mkMembership({",
          "1738:                     user: userB, mship: \"join\",",
          "1739:                     room: roomId, event: true, name: \"User B\",",
          "1741:                 utils.mkEvent({",
          "1742:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, skey: \"\",",
          "1743:                     room: roomId, event: true,",
          "1744:                     content: {",
          "1745:                         service_members: [],",
          "1746:                     },",
          "1748:             ]);",
          "1749:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1750:         });",
          "",
          "[Removed Lines]",
          "1736:                 }) as MatrixEvent,",
          "1740:                 }) as MatrixEvent,",
          "1747:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1798:                 }),",
          "1802:                 }),",
          "1809:                 }),",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1755:                 utils.mkMembership({",
          "1756:                     user: userA, mship: \"join\",",
          "1757:                     room: roomId, event: true, name: \"User A\",",
          "1759:                 utils.mkMembership({",
          "1760:                     user: userB, mship: \"join\",",
          "1761:                     room: roomId, event: true, name: \"User B\",",
          "1763:                 utils.mkEvent({",
          "1764:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name,",
          "1765:                     skey: \"\",",
          "",
          "[Removed Lines]",
          "1758:                 }) as MatrixEvent,",
          "1762:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1820:                 }),",
          "1824:                 }),",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1768:                     content: {",
          "1769:                         service_members: 1,",
          "1770:                     },",
          "1772:             ]);",
          "1773:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1774:         });",
          "",
          "[Removed Lines]",
          "1771:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1833:                 }),",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1779:                 utils.mkMembership({",
          "1780:                     user: userA, mship: \"join\",",
          "1781:                     room: roomId, event: true, name: \"User A\",",
          "1783:                 utils.mkMembership({",
          "1784:                     user: userB, mship: \"join\",",
          "1785:                     room: roomId, event: true, name: \"User B\",",
          "1787:                 utils.mkEvent({",
          "1788:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, skey: \"\",",
          "1789:                     room: roomId, event: true,",
          "1790:                     content: {",
          "1791:                         service_members: userB,",
          "1792:                     },",
          "1794:             ]);",
          "1795:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1796:         });",
          "",
          "[Removed Lines]",
          "1782:                 }) as MatrixEvent,",
          "1786:                 }) as MatrixEvent,",
          "1793:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1844:                 }),",
          "1848:                 }),",
          "1855:                 }),",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1801:                 utils.mkMembership({",
          "1802:                     user: userA, mship: \"join\",",
          "1803:                     room: roomId, event: true, name: \"User A\",",
          "1805:                 utils.mkMembership({",
          "1806:                     user: userB, mship: \"join\",",
          "1807:                     room: roomId, event: true, name: \"User B\",",
          "1809:                 utils.mkEvent({",
          "1810:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, skey: \"\",",
          "1811:                     room: roomId, event: true,",
          "1812:                     content: {",
          "1813:                         service_members: [userB],",
          "1814:                     },",
          "1816:             ]);",
          "1817:             expect(room.getDefaultRoomName(userA)).toEqual(\"Empty room\");",
          "1818:         });",
          "",
          "[Removed Lines]",
          "1804:                 }) as MatrixEvent,",
          "1808:                 }) as MatrixEvent,",
          "1815:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1866:                 }),",
          "1870:                 }),",
          "1877:                 }),",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1823:                 utils.mkMembership({",
          "1824:                     user: userA, mship: \"join\",",
          "1825:                     room: roomId, event: true, name: \"User A\",",
          "1827:                 utils.mkMembership({",
          "1828:                     user: userB, mship: \"join\",",
          "1829:                     room: roomId, event: true, name: \"User B\",",
          "1831:                 utils.mkMembership({",
          "1832:                     user: userC, mship: \"join\",",
          "1833:                     room: roomId, event: true, name: \"User C\",",
          "1835:                 utils.mkEvent({",
          "1836:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, skey: \"\",",
          "1837:                     room: roomId, event: true, user: userA,",
          "1838:                     content: {",
          "1839:                         service_members: [userC],",
          "1840:                     },",
          "1842:             ]);",
          "1843:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1844:         });",
          "",
          "[Removed Lines]",
          "1826:                 }) as MatrixEvent,",
          "1830:                 }) as MatrixEvent,",
          "1834:                 }) as MatrixEvent,",
          "1841:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1888:                 }),",
          "1892:                 }),",
          "1896:                 }),",
          "1903:                 }),",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1849:                 utils.mkMembership({",
          "1850:                     user: userA, mship: \"join\",",
          "1851:                     room: roomId, event: true, name: \"User A\",",
          "1853:                 utils.mkMembership({",
          "1854:                     user: userB, mship: \"join\",",
          "1855:                     room: roomId, event: true, name: \"User B\",",
          "1857:                 utils.mkMembership({",
          "1858:                     user: userC, mship: \"join\",",
          "1859:                     room: roomId, event: true, name: \"User C\",",
          "1861:                 utils.mkEvent({",
          "1862:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, skey: \"\",",
          "1863:                     room: roomId, event: true, user: userA,",
          "1864:                     content: {",
          "1865:                         service_members: [userB, userC],",
          "1866:                     },",
          "1868:             ]);",
          "1869:             expect(room.getDefaultRoomName(userA)).toEqual(\"Empty room\");",
          "1870:         });",
          "",
          "[Removed Lines]",
          "1852:                 }) as MatrixEvent,",
          "1856:                 }) as MatrixEvent,",
          "1860:                 }) as MatrixEvent,",
          "1867:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1914:                 }),",
          "1918:                 }),",
          "1922:                 }),",
          "1929:                 }),",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1875:                 utils.mkMembership({",
          "1876:                     user: userA, mship: \"join\",",
          "1877:                     room: roomId, event: true, name: \"User A\",",
          "1879:                 utils.mkMembership({",
          "1880:                     user: userB, mship: \"join\",",
          "1881:                     room: roomId, event: true, name: \"User B\",",
          "1883:                 utils.mkEvent({",
          "1884:                     type: UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, skey: \"\",",
          "1885:                     room: roomId, event: true, user: userA,",
          "1886:                     content: {",
          "1887:                         service_members: [userC],",
          "1888:                     },",
          "1890:             ]);",
          "1891:             expect(room.getDefaultRoomName(userA)).toEqual(\"User B\");",
          "1892:         });",
          "",
          "[Removed Lines]",
          "1878:                 }) as MatrixEvent,",
          "1882:                 }) as MatrixEvent,",
          "1889:                 }) as MatrixEvent,",
          "",
          "[Added Lines]",
          "1940:                 }),",
          "1944:                 }),",
          "1951:                 }),",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1937:             expect(() => room.createThread(rootEvent.getId(), rootEvent, [])).not.toThrow();",
          "1938:         });",
          "1940:         it(\"Edits update the lastReply event\", async () => {",
          "1941:             room.client.supportsExperimentalThreads = () => true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2002:         it(\"creating thread from edited event should not conflate old versions of the event\", () => {",
          "2003:             const message = mkMessage();",
          "2004:             const edit = mkEdit(message);",
          "2005:             message.makeReplaced(edit);",
          "2007:             const thread = room.createThread(\"$000\", message, [], true);",
          "2008:             expect(thread).toHaveLength(0);",
          "2009:         });",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2036:                 },",
          "2037:             });",
          "2040:             room.addLiveEvents([threadRoot, threadResponse1, threadResponse2, threadResponse2Reaction]);",
          "2041:             const thread = await prom;",
          "2043:             expect(thread).toHaveLength(2);",
          "2044:             expect(thread.replyToEvent.getId()).toBe(threadResponse2.getId());",
          "2047:             const threadResponse2ReactionRedaction = mkRedaction(threadResponse2Reaction);",
          "2048:             room.addLiveEvents([threadResponse2ReactionRedaction]);",
          "2050:             expect(thread).toHaveLength(2);",
          "2051:             expect(thread.replyToEvent.getId()).toBe(threadResponse2.getId());",
          "2052:         });",
          "",
          "[Removed Lines]",
          "2039:             let prom = emitPromise(room, ThreadEvent.New);",
          "2046:             prom = emitPromise(thread, ThreadEvent.Update);",
          "2049:             await prom;",
          "",
          "[Added Lines]",
          "2110:             const prom = emitPromise(room, ThreadEvent.New);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2267:             const thread = threadRoot.getThread();",
          "2268:             expect(thread.rootEvent).toBe(threadRoot);",
          "2271:                 threadRoot.getId(),",
          "2272:                 RelationType.Annotation,",
          "2273:                 EventType.Reaction,",
          "",
          "[Removed Lines]",
          "2270:             const rootRelations = thread.timelineSet.getRelationsForEvent(",
          "",
          "[Added Lines]",
          "2339:             const rootRelations = thread.timelineSet.relations.getChildEventsForEvent(",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2277:             expect(rootRelations[0][1].size).toEqual(1);",
          "2278:             expect(rootRelations[0][1].has(rootReaction)).toBeTruthy();",
          "2281:                 threadResponse.getId(),",
          "2282:                 RelationType.Annotation,",
          "2283:                 EventType.Reaction,",
          "",
          "[Removed Lines]",
          "2280:             const responseRelations = thread.timelineSet.getRelationsForEvent(",
          "",
          "[Added Lines]",
          "2349:             const responseRelations = thread.timelineSet.relations.getChildEventsForEvent(",
          "",
          "---------------"
        ],
        "spec/unit/stores/indexeddb.spec.ts||spec/unit/stores/indexeddb.spec.ts": [
          "File: spec/unit/stores/indexeddb.spec.ts -> spec/unit/stores/indexeddb.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import 'fake-indexeddb/auto';",
          "18: import 'jest-localstorage-mock';",
          "20: import { IndexedDBStore, IStateEventWithRoomId, MemoryStore } from \"../../../src\";",
          "21: import { emitPromise } from \"../../test-utils/test-utils\";",
          "22: import { LocalIndexedDBStoreBackend } from \"../../../src/store/indexeddb-local-backend\";",
          "24: describe(\"IndexedDBStore\", () => {",
          "25:     afterEach(() => {",
          "26:         jest.clearAllMocks();",
          "27:     });",
          "29:     const roomId = \"!room:id\";",
          "30:     it(\"should degrade to MemoryStore on IDB errors\", async () => {",
          "31:         const store = new IndexedDBStore({",
          "32:             indexedDB: indexedDB,",
          "33:             dbName: \"database\",",
          "34:             localStorage,",
          "35:         });",
          "36:         await store.startup();",
          "38:         const member1: IStateEventWithRoomId = {",
          "39:             room_id: roomId,",
          "40:             event_id: \"!ev1:id\",",
          "41:             sender: \"@user1:id\",",
          "42:             state_key: \"@user1:id\",",
          "43:             type: \"m.room.member\",",
          "44:             origin_server_ts: 123,",
          "45:             content: {},",
          "46:         };",
          "47:         const member2: IStateEventWithRoomId = {",
          "48:             room_id: roomId,",
          "49:             event_id: \"!ev2:id\",",
          "50:             sender: \"@user2:id\",",
          "51:             state_key: \"@user2:id\",",
          "52:             type: \"m.room.member\",",
          "53:             origin_server_ts: 123,",
          "54:             content: {},",
          "55:         };",
          "57:         expect(await store.getOutOfBandMembers(roomId)).toBe(null);",
          "58:         await store.setOutOfBandMembers(roomId, [member1]);",
          "59:         expect(await store.getOutOfBandMembers(roomId)).toHaveLength(1);",
          "62:         (store.backend as LocalIndexedDBStoreBackend)[\"db\"].transaction = (): IDBTransaction => {",
          "63:             const err = new Error(\"Failed to execute 'transaction' on 'IDBDatabase': \" +",
          "64:                 \"The database connection is closing.\");",
          "65:             err.name = \"InvalidStateError\";",
          "66:             throw err;",
          "67:         };",
          "69:         expect(await store.getOutOfBandMembers(roomId)).toHaveLength(1);",
          "70:         await Promise.all([",
          "71:             emitPromise(store[\"emitter\"], \"degraded\"),",
          "72:             store.setOutOfBandMembers(roomId, [member1, member2]),",
          "73:         ]);",
          "74:         expect(await store.getOutOfBandMembers(roomId)).toHaveLength(2);",
          "75:     });",
          "77:     it(\"should use MemoryStore methods for pending events if no localStorage\", async () => {",
          "78:         jest.spyOn(MemoryStore.prototype, \"setPendingEvents\");",
          "79:         jest.spyOn(MemoryStore.prototype, \"getPendingEvents\");",
          "81:         const store = new IndexedDBStore({",
          "82:             indexedDB: indexedDB,",
          "83:             dbName: \"database\",",
          "84:             localStorage: undefined,",
          "85:         });",
          "87:         const events = [{ type: \"test\" }];",
          "88:         await store.setPendingEvents(roomId, events);",
          "89:         expect(MemoryStore.prototype.setPendingEvents).toHaveBeenCalledWith(roomId, events);",
          "90:         await expect(store.getPendingEvents(roomId)).resolves.toEqual(events);",
          "91:         expect(MemoryStore.prototype.getPendingEvents).toHaveBeenCalledWith(roomId);",
          "92:     });",
          "94:     it(\"should persist pending events to localStorage if available\", async () => {",
          "95:         jest.spyOn(MemoryStore.prototype, \"setPendingEvents\");",
          "96:         jest.spyOn(MemoryStore.prototype, \"getPendingEvents\");",
          "98:         const store = new IndexedDBStore({",
          "99:             indexedDB: indexedDB,",
          "100:             dbName: \"database\",",
          "101:             localStorage,",
          "102:         });",
          "104:         await expect(store.getPendingEvents(roomId)).resolves.toEqual([]);",
          "105:         const events = [{ type: \"test\" }];",
          "106:         await store.setPendingEvents(roomId, events);",
          "107:         expect(MemoryStore.prototype.setPendingEvents).not.toHaveBeenCalled();",
          "108:         await expect(store.getPendingEvents(roomId)).resolves.toEqual(events);",
          "109:         expect(MemoryStore.prototype.getPendingEvents).not.toHaveBeenCalled();",
          "110:         expect(localStorage.getItem(\"mx_pending_events_\" + roomId)).toBe(JSON.stringify(events));",
          "111:         await store.setPendingEvents(roomId, []);",
          "112:         expect(localStorage.getItem(\"mx_pending_events_\" + roomId)).toBeNull();",
          "113:     });",
          "114: });",
          "",
          "---------------"
        ],
        "spec/unit/timeline-window.spec.js||spec/unit/timeline-window.spec.js": [
          "File: spec/unit/timeline-window.spec.js -> spec/unit/timeline-window.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     return timeline;",
          "36: }",
          "39:     for (let i = 0; i < numEvents; i++) {",
          "40:         timeline.addEvent(",
          "41:             utils.mkMessage({",
          "42:                 room: ROOM_ID, user: USER_ID,",
          "43:                 event: true,",
          "45:         );",
          "46:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "38: function addEventsToTimeline(timeline, numEvents, atStart) {",
          "44:             }), atStart,",
          "",
          "[Added Lines]",
          "38: function addEventsToTimeline(timeline, numEvents, toStartOfTimeline) {",
          "44:             }),",
          "45:             { toStartOfTimeline },",
          "",
          "---------------"
        ],
        "spec/unit/webrtc/call.spec.ts||spec/unit/webrtc/call.spec.ts": [
          "File: spec/unit/webrtc/call.spec.ts -> spec/unit/webrtc/call.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { TestClient } from '../../TestClient';",
          "19: import { SDPStreamMetadataKey, SDPStreamMetadataPurpose } from '../../../src/webrtc/callEventTypes';",
          "20: import { RoomMember } from \"../../../src\";",
          "",
          "[Removed Lines]",
          "18: import { MatrixCall, CallErrorCode, CallEvent } from '../../../src/webrtc/call';",
          "",
          "[Added Lines]",
          "18: import { MatrixCall, CallErrorCode, CallEvent, supportsMatrixCall } from '../../../src/webrtc/call';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:             return sender?.track?.kind === \"video\";",
          "526:         }).track.id).toBe(\"video_track\");",
          "527:     });",
          "528: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:     describe(\"supportsMatrixCall\", () => {",
          "530:         it(\"should return true when the environment is right\", () => {",
          "531:             expect(supportsMatrixCall()).toBe(true);",
          "532:         });",
          "534:         it(\"should return false if window or document are undefined\", () => {",
          "535:             global.window = undefined;",
          "536:             expect(supportsMatrixCall()).toBe(false);",
          "537:             global.window = prevWindow;",
          "538:             global.document = undefined;",
          "539:             expect(supportsMatrixCall()).toBe(false);",
          "540:         });",
          "542:         it(\"should return false if RTCPeerConnection throws\", () => {",
          "544:             global.window = {};",
          "545:             Object.defineProperty(global.window, \"RTCPeerConnection\", {",
          "546:                 get: () => {",
          "547:                     throw Error(\"Secure mode, naaah!\");",
          "548:                 },",
          "549:             });",
          "550:             expect(supportsMatrixCall()).toBe(false);",
          "551:         });",
          "553:         it(\"should return false if RTCPeerConnection & RTCSessionDescription \" +",
          "554:             \"& RTCIceCandidate & mediaDevices are unavailable\",",
          "555:         () => {",
          "556:             global.window.RTCPeerConnection = undefined;",
          "557:             global.window.RTCSessionDescription = undefined;",
          "558:             global.window.RTCIceCandidate = undefined;",
          "560:             global.navigator.mediaDevices = undefined;",
          "561:             expect(supportsMatrixCall()).toBe(false);",
          "562:         });",
          "563:     });",
          "",
          "---------------"
        ],
        "spec/unit/webrtc/callEventHandler.spec.ts||spec/unit/webrtc/callEventHandler.spec.ts": [
          "File: spec/unit/webrtc/callEventHandler.spec.ts -> spec/unit/webrtc/callEventHandler.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     });",
          "20:         const event1 = new MatrixEvent({",
          "21:             type: EventType.CallInvite,",
          "22:             content: {",
          "",
          "[Removed Lines]",
          "1: import { TestClient } from '../../TestClient';",
          "2: import { CallEventHandler } from '../../../src/webrtc/callEventHandler';",
          "3: import { MatrixEvent } from '../../../src/models/event';",
          "4: import { EventType } from '../../../src/@types/event';",
          "6: describe('CallEventHandler', function() {",
          "7:     let client;",
          "9:     beforeEach(function() {",
          "10:         client = new TestClient(\"@alice:foo\", \"somedevice\", \"token\", undefined, {});",
          "11:     });",
          "13:     afterEach(function() {",
          "14:         client.stop();",
          "17:     it('should enforce inbound toDevice message ordering', async function() {",
          "18:         const callEventHandler = new CallEventHandler(client);",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { TestClient } from '../../TestClient';",
          "18: import {",
          "19:     ClientEvent,",
          "20:     EventTimeline,",
          "21:     EventTimelineSet,",
          "22:     EventType,",
          "23:     IRoomTimelineData,",
          "24:     MatrixEvent,",
          "25:     Room,",
          "26:     RoomEvent,",
          "27: } from \"../../../src\";",
          "28: import { MatrixClient } from \"../../../src/client\";",
          "29: import { CallEventHandler, CallEventHandlerEvent } from \"../../../src/webrtc/callEventHandler\";",
          "30: import { GroupCallEventHandler } from \"../../../src/webrtc/groupCallEventHandler\";",
          "31: import { SyncState } from \"../../../src/sync\";",
          "33: describe(\"CallEventHandler\", () => {",
          "34:     let client: MatrixClient;",
          "35:     beforeEach(() => {",
          "36:         client = new TestClient(\"@alice:foo\", \"somedevice\", \"token\", undefined, {}).client;",
          "37:         client.callEventHandler = new CallEventHandler(client);",
          "38:         client.callEventHandler.start();",
          "39:         client.groupCallEventHandler = new GroupCallEventHandler(client);",
          "40:         client.groupCallEventHandler.start();",
          "43:     afterEach(() => {",
          "44:         client.callEventHandler.stop();",
          "45:         client.groupCallEventHandler.stop();",
          "46:     });",
          "48:     it(\"should enforce inbound toDevice message ordering\", async () => {",
          "49:         const callEventHandler = client.callEventHandler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         expect(callEventHandler.nextSeqByCall.get(\"123\")).toBe(5);",
          "81:         expect(callEventHandler.toDeviceEventBuffers.get(\"123\").length).toBe(0);",
          "82:     });",
          "83: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     it(\"should ignore a call if invite & hangup come within a single sync\", () => {",
          "115:         const room = new Room(\"!room:id\", client, \"@user:id\");",
          "116:         const timelineData: IRoomTimelineData = { timeline: new EventTimeline(new EventTimelineSet(room, {})) };",
          "119:         const callInvite = new MatrixEvent({",
          "120:             type: EventType.CallInvite,",
          "121:             content: {",
          "122:                 call_id: \"123\",",
          "123:             },",
          "124:         });",
          "125:         client.emit(RoomEvent.Timeline, callInvite, room, false, false, timelineData);",
          "127:         const callHangup = new MatrixEvent({",
          "128:             type: EventType.CallHangup,",
          "129:             content: {",
          "130:                 call_id: \"123\",",
          "131:             },",
          "132:         });",
          "133:         client.emit(RoomEvent.Timeline, callHangup, room, false, false, timelineData);",
          "135:         const incomingCallEmitted = jest.fn();",
          "136:         client.on(CallEventHandlerEvent.Incoming, incomingCallEmitted);",
          "138:         client.getSyncState = jest.fn().mockReturnValue(SyncState.Syncing);",
          "139:         client.emit(ClientEvent.Sync, SyncState.Syncing);",
          "141:         expect(incomingCallEmitted).not.toHaveBeenCalled();",
          "142:     });",
          "",
          "---------------"
        ],
        "src/@types/event.ts||src/@types/event.ts": [
          "File: src/@types/event.ts -> src/@types/event.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: export const UNSTABLE_MSC3089_BRANCH = new UnstableValue(\"m.branch\", \"org.matrix.msc3089.branch\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: export const UNSTABLE_MSC2716_MARKER = new UnstableValue(\"m.room.marker\", \"org.matrix.msc2716.marker\");",
          "",
          "---------------"
        ],
        "src/@types/requests.ts||src/@types/requests.ts": [
          "File: src/@types/requests.ts -> src/@types/requests.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { Callback } from \"../client\";",
          "18: import { IContent, IEvent } from \"../models/event\";",
          "19: import { Preset, Visibility } from \"./partials\";",
          "21: import { IRoomEventFilter } from \"../filter\";",
          "22: import { Direction } from \"../models/event-timeline\";",
          "",
          "[Removed Lines]",
          "20: import { SearchKey } from \"./search\";",
          "",
          "[Added Lines]",
          "20: import { IEventWithRoomId, SearchKey } from \"./search\";",
          "23: import { PushRuleAction } from \"./PushRules\";",
          "24: import { IRoomEvent } from \"../sync-accumulator\";",
          "25: import { RoomType } from \"./event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     limit?: number;",
          "110:     since?: string;",
          "111:     filter?: {",
          "113:     };",
          "114:     include_all_networks?: boolean;",
          "115:     third_party_instance_id?: string;",
          "",
          "[Removed Lines]",
          "112:         generic_search_term: string;",
          "",
          "[Added Lines]",
          "115:         generic_search_term?: string;",
          "116:         \"org.matrix.msc3827.room_types\"?: Array<RoomType | null>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     prev_batch?: string;",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: export interface IContextResponse {",
          "163:     end: string;",
          "164:     start: string;",
          "165:     state: IEventWithRoomId[];",
          "166:     events_before: IEventWithRoomId[];",
          "167:     events_after: IEventWithRoomId[];",
          "168:     event: IEventWithRoomId;",
          "169: }",
          "171: export interface IEventsResponse {",
          "172:     chunk: IEventWithRoomId[];",
          "173:     end: string;",
          "174:     start: string;",
          "175: }",
          "177: export interface INotification {",
          "178:     actions: PushRuleAction[];",
          "179:     event: IRoomEvent;",
          "180:     profile_tag?: string;",
          "181:     read: boolean;",
          "182:     room_id: string;",
          "183:     ts: number;",
          "184: }",
          "186: export interface INotificationsResponse {",
          "187:     next_token: string;",
          "188:     notifications: INotification[];",
          "189: }",
          "191: export interface IFilterResponse {",
          "192:     filter_id: string;",
          "193: }",
          "195: export interface ITagsResponse {",
          "196:     tags: {",
          "197:         [tagId: string]: {",
          "198:             order: number;",
          "199:         };",
          "200:     };",
          "201: }",
          "203: export interface IStatusResponse extends IPresenceOpts {",
          "204:     currently_active?: boolean;",
          "205:     last_active_ago?: number;",
          "206: }",
          "",
          "---------------"
        ],
        "src/@types/topic.ts||src/@types/topic.ts": [
          "File: src/@types/topic.ts -> src/@types/topic.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { EitherAnd, IMessageRendering } from \"matrix-events-sdk\";",
          "19: import { UnstableValue } from \"../NamespacedValue\";",
          "47: export const M_TOPIC = new UnstableValue(\"m.topic\", \"org.matrix.msc3765.topic\");",
          "52: export type MTopicContent = IMessageRendering[];",
          "57: export type MTopicEvent = EitherAnd<{ [M_TOPIC.name]: MTopicContent }, { [M_TOPIC.altName]: MTopicContent }>;",
          "62: export type MRoomTopicEventContent = { topic: string } & MTopicEvent;",
          "",
          "---------------"
        ],
        "src/autodiscovery.ts||src/autodiscovery.ts": [
          "File: src/autodiscovery.ts -> src/autodiscovery.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { IClientWellKnown, IWellKnownConfig } from \"./client\";",
          "23: import { logger } from './logger';",
          "",
          "[Removed Lines]",
          "20: import { URL as NodeURL } from \"url\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:         if (!url) return false;",
          "374:         try {",
          "379:             let parsed = null;",
          "380:             try {",
          "384:                 parsed = new URL(url);",
          "385:             }",
          "387:             if (!parsed || !parsed.hostname) return false;",
          "",
          "[Removed Lines]",
          "381:                 if (NodeURL) parsed = new NodeURL(url);",
          "382:                 else parsed = new URL(url);",
          "383:             } catch (e) {",
          "",
          "[Added Lines]",
          "376:             } catch (e) {",
          "377:                 logger.error(\"Could not parse url\", e);",
          "",
          "---------------"
        ],
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     MatrixEventHandlerMap,",
          "33: } from \"./models/event\";",
          "34: import { StubStore } from \"./store/stub\";",
          "36: import { Filter, IFilterDefinition } from \"./filter\";",
          "37: import { CallEventHandlerEvent, CallEventHandler, CallEventHandlerEventHandlerMap } from './webrtc/callEventHandler';",
          "38: import { GroupCallEventHandlerEvent, GroupCallEventHandlerEventHandlerMap } from './webrtc/groupCallEventHandler';",
          "",
          "[Removed Lines]",
          "35: import { CallEvent, CallEventHandlerMap, createNewMatrixCall, MatrixCall } from \"./webrtc/call\";",
          "",
          "[Added Lines]",
          "35: import { CallEvent, CallEventHandlerMap, createNewMatrixCall, MatrixCall, supportsMatrixCall } from \"./webrtc/call\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     PREFIX_R0,",
          "63:     PREFIX_UNSTABLE,",
          "64:     PREFIX_V1,",
          "65:     retryNetworkOperation,",
          "66:     UploadContentResponseType,",
          "67: } from \"./http-api\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     PREFIX_V3,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     RoomMemberEventHandlerMap,",
          "115:     RoomStateEvent,",
          "116:     RoomStateEventHandlerMap,",
          "117: } from \"./matrix\";",
          "118: import {",
          "119:     CrossSigningKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     INotificationsResponse,",
          "119:     IFilterResponse,",
          "120:     ITagsResponse,",
          "121:     IStatusResponse,",
          "122:     IPushRule,",
          "123:     PushRuleActionName,",
          "124:     IAuthDict,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133: import {",
          "134:     IAddThreePidOnlyBody,",
          "135:     IBindThreePidBody,",
          "136:     ICreateRoomOpts,",
          "137:     IEventSearchOpts,",
          "138:     IGuestAccessOpts,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     IContextResponse,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160: import { IAbortablePromise, IdServerUnbindResult, IImageInfo, Preset, Visibility } from \"./@types/partials\";",
          "161: import { EventMapper, eventMapperFor, MapperOpts } from \"./event-mapper\";",
          "162: import { randomString } from \"./randomstring\";",
          "164: import { BackupManager, IKeyBackup, IKeyBackupCheck, IPreparedKeyBackupVersion, TrustInfo } from \"./crypto/backup\";",
          "165: import { DEFAULT_TREE_POWER_LEVELS_TEMPLATE, MSC3089TreeSpace } from \"./models/MSC3089TreeSpace\";",
          "166: import { ISignatures } from \"./@types/signed\";",
          "",
          "[Removed Lines]",
          "163: import { WebStorageSessionStore } from \"./store/session/webstorage\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194: import { MBeaconInfoEventContent, M_BEACON_INFO } from \"./@types/beacon\";",
          "196: export type Store = IStore;",
          "199: export type Callback<T = any> = (err: Error | any | null, data?: T) => void;",
          "200: export type ResetTimelineCallback = (roomId: string) => boolean;",
          "",
          "[Removed Lines]",
          "197: export type SessionStore = WebStorageSessionStore;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "315:     pickleKey?: string;",
          "332:     verificationMethods?: Array<VerificationMethod>;",
          "",
          "[Removed Lines]",
          "323:     sessionStore?: SessionStore;",
          "330:     unstableClientRelationAggregation?: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "589:     intl_fmt: string;",
          "590: }",
          "593:     device_keys?: Required<IDeviceKeys>;",
          "599:     \"org.matrix.msc2732.fallback_keys\"?: Record<string, IOneTimeKey>;",
          "600: }",
          "",
          "[Removed Lines]",
          "592: interface IUploadKeysRequest {",
          "594:     one_time_keys?: {",
          "595:         [userId: string]: {",
          "596:             [deviceId: string]: number;",
          "597:         };",
          "598:     };",
          "",
          "[Added Lines]",
          "584: export interface IUploadKeysRequest {",
          "586:     one_time_keys?: Record<string, IOneTimeKey>;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "633:     };",
          "634: }",
          "636: export interface IPublicRoomsChunkRoom {",
          "637:     room_id: string;",
          "638:     name?: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: export interface IRegisterRequestParams {",
          "625:     auth?: IAuthData;",
          "626:     username?: string;",
          "627:     password?: string;",
          "628:     refresh_token?: boolean;",
          "629:     guest_access_token?: string;",
          "630:     x_show_msisdn?: boolean;",
          "631:     bind_msisdn?: boolean;",
          "632:     bind_email?: boolean;",
          "633:     inhibit_login?: boolean;",
          "634:     initial_device_display_name?: string;",
          "635: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "802:     | RoomEvent.Receipt",
          "803:     | RoomEvent.Tags",
          "804:     | RoomEvent.LocalEchoUpdated",
          "805:     | RoomEvent.AccountData",
          "806:     | RoomEvent.MyMembership",
          "807:     | RoomEvent.Timeline",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:     | RoomEvent.HistoryImportedWithinTimeline",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "811:     | RoomStateEvent.Members",
          "812:     | RoomStateEvent.NewMember",
          "813:     | RoomStateEvent.Update",
          "814:     ;",
          "816: type CryptoEvents = CryptoEvent.KeySignatureUploadFailure",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816:     | RoomStateEvent.Marker",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "897:     public clientRunning = false;",
          "898:     public timelineSupport = false;",
          "899:     public urlPreviewCache: { [key: string]: Promise<IPreviewUrlResponse> } = {};",
          "901:     public identityServer: IIdentityServerProvider;",
          "903:     public http: MatrixHttpApi; // XXX: Intended private, used in code.",
          "904:     public crypto: Crypto; // XXX: Intended private, used in code.",
          "905:     public cryptoCallbacks: ICryptoCallbacks; // XXX: Intended private, used in code.",
          "",
          "[Removed Lines]",
          "900:     public unstableClientRelationAggregation = false;",
          "902:     public sessionStore: SessionStore; // XXX: Intended private, used in code.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1022:             });",
          "1023:         }",
          "1029:             this.callEventHandler = new CallEventHandler(this);",
          "1030:             this.groupCallEventHandler = new GroupCallEventHandler(this);",
          "1031:             this.canSupportVoip = true;",
          "",
          "[Removed Lines]",
          "1027:         const call = createNewMatrixCall(this, undefined, undefined);",
          "1028:         if (call) {",
          "",
          "[Added Lines]",
          "1026:         if (supportsMatrixCall()) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1036:         }",
          "1038:         this.timelineSupport = Boolean(opts.timelineSupport);",
          "1041:         this.cryptoStore = opts.cryptoStore;",
          "1043:         this.verificationMethods = opts.verificationMethods;",
          "1044:         this.cryptoCallbacks = opts.cryptoCallbacks || {};",
          "",
          "[Removed Lines]",
          "1039:         this.unstableClientRelationAggregation = !!opts.unstableClientRelationAggregation;",
          "1042:         this.sessionStore = opts.sessionStore;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1221:     public stopClient() {",
          "1222:         logger.log('stopping MatrixClient');",
          "1224:         this.clientRunning = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218:         this.crypto?.stop(); // crypto might have been initialised even if the client wasn't fully started",
          "1220:         if (!this.clientRunning) return; // already stopped",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1226:         this.syncApi?.stop();",
          "1227:         this.syncApi = null;",
          "1230:         this.peekSync?.stopPeeking();",
          "1232:         this.callEventHandler?.stop();",
          "",
          "[Removed Lines]",
          "1229:         this.crypto?.stop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1715:             return;",
          "1716:         }",
          "1722:         if (!this.cryptoStore) {",
          "1724:             throw new Error(`Cannot enable encryption: no cryptoStore provided`);",
          "",
          "[Removed Lines]",
          "1718:         if (!this.sessionStore) {",
          "1720:             throw new Error(`Cannot enable encryption: no sessionStore provided`);",
          "1721:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1748:         const crypto = new Crypto(",
          "1749:             this,",
          "1752:             this.store,",
          "1753:             this.cryptoStore,",
          "1754:             this.roomList,",
          "",
          "[Removed Lines]",
          "1750:             this.sessionStore,",
          "1751:             userId, this.deviceId,",
          "",
          "[Added Lines]",
          "1745:             userId,",
          "1746:             this.deviceId,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2471:         if (!this.crypto) {",
          "2472:             throw new Error(\"End-to-end encryption disabled\");",
          "2473:         }",
          "2475:     }",
          "",
          "[Removed Lines]",
          "2470:     public isSecretStored(name: string, checkKey: boolean): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "2474:         return this.crypto.isSecretStored(name, checkKey);",
          "",
          "[Added Lines]",
          "2462:     public isSecretStored(name: string): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "2466:         return this.crypto.isSecretStored(name);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2802:     public isKeyBackupKeyStored(): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "2804:     }",
          "",
          "[Removed Lines]",
          "2803:         return Promise.resolve(this.isSecretStored(\"m.megolm_backup.v1\", false /* checkKey */));",
          "",
          "[Added Lines]",
          "2795:         return Promise.resolve(this.isSecretStored(\"m.megolm_backup.v1\"));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3634:     }",
          "3644:             $userId: this.credentials.userId,",
          "3645:             $roomId: roomId,",
          "3646:         });",
          "3650:     }",
          "",
          "[Removed Lines]",
          "3632:     public setRoomTopic(roomId: string, topic: string, callback?: Callback): Promise<ISendEventResponse> {",
          "3633:         return this.sendStateEvent(roomId, EventType.RoomTopic, { topic: topic }, undefined, callback);",
          "3642:     public getRoomTags(roomId: string, callback?: Callback): Promise<unknown> { // TODO: Types",
          "3643:         const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags/\", {",
          "3647:         return this.http.authedRequest(",
          "3648:             callback, Method.Get, path, undefined,",
          "3649:         );",
          "",
          "[Added Lines]",
          "3625:     public setRoomTopic(",
          "3626:         roomId: string,",
          "3627:         topic: string,",
          "3628:         htmlTopic?: string,",
          "3629:     ): Promise<ISendEventResponse>;",
          "3630:     public setRoomTopic(",
          "3631:         roomId: string,",
          "3632:         topic: string,",
          "3633:         callback?: Callback,",
          "3634:     ): Promise<ISendEventResponse>;",
          "3635:     public setRoomTopic(",
          "3636:         roomId: string,",
          "3637:         topic: string,",
          "3638:         htmlTopicOrCallback?: string | Callback,",
          "3639:     ): Promise<ISendEventResponse> {",
          "3640:         const isCallback = typeof htmlTopicOrCallback === 'function';",
          "3641:         const htmlTopic = isCallback ? undefined : htmlTopicOrCallback;",
          "3642:         const callback = isCallback ? htmlTopicOrCallback : undefined;",
          "3643:         const content = ContentHelpers.makeTopicContent(topic, htmlTopic);",
          "3644:         return this.sendStateEvent(roomId, EventType.RoomTopic, content, undefined, callback);",
          "3653:     public getRoomTags(roomId: string, callback?: Callback): Promise<ITagsResponse> {",
          "3654:         const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags\", {",
          "3658:         return this.http.authedRequest(callback, Method.Get, path);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3679:             $roomId: roomId,",
          "3680:             $tag: tagName,",
          "3681:         });",
          "3683:     }",
          "",
          "[Removed Lines]",
          "3682:         return this.http.authedRequest(callback, Method.Delete, path, undefined, undefined);",
          "",
          "[Added Lines]",
          "3691:         return this.http.authedRequest(callback, Method.Delete, path);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3812:         if (threadId && !content[\"m.relates_to\"]?.rel_type) {",
          "3813:             content[\"m.relates_to\"] = {",
          "3814:                 ...content[\"m.relates_to\"],",
          "3815:                 \"rel_type\": THREAD_RELATION_TYPE.name,",
          "3816:                 \"event_id\": threadId,",
          "3817:             };",
          "3818:             const thread = this.getRoom(roomId)?.getThread(threadId);",
          "3820:                 content[\"m.relates_to\"][\"m.in_reply_to\"] = {",
          "3821:                     \"event_id\": thread.lastReply((ev: MatrixEvent) => {",
          "3822:                         return ev.isRelation(THREAD_RELATION_TYPE.name) && !ev.status;",
          "3824:                 };",
          "3825:             }",
          "3826:         }",
          "",
          "[Removed Lines]",
          "3819:             if (thread) {",
          "3823:                     })?.getId(),",
          "",
          "[Added Lines]",
          "3822:             const isReply = !!content[\"m.relates_to\"]?.[\"m.in_reply_to\"];",
          "3828:                 \"is_falling_back\": !isReply,",
          "3831:             if (thread && !isReply) {",
          "3835:                     })?.getId() ?? threadId,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4069:             $txnId: txnId,",
          "4070:         };",
          "4074:         if (event.isState()) {",
          "4075:             let pathTemplate = \"/rooms/$roomId/state/$eventType\";",
          "",
          "[Removed Lines]",
          "4072:         let path;",
          "",
          "[Added Lines]",
          "4084:         let path: string;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5031:         membership: string,",
          "5032:         reason?: string,",
          "5033:         callback?: Callback,",
          "5035:         if (utils.isFunction(reason)) {",
          "5036:             callback = reason as any as Callback; // legacy",
          "5037:             reason = undefined;",
          "",
          "[Removed Lines]",
          "5034:     ): Promise<{}> {",
          "",
          "[Added Lines]",
          "5046:     ): Promise<{}> { // API returns an empty object",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5176:         const path = utils.encodeUri(\"/presence/$userId/status\", {",
          "5177:             $userId: userId,",
          "5178:         });",
          "5181:     }",
          "",
          "[Removed Lines]",
          "5175:     public getPresence(userId: string, callback?: Callback): Promise<unknown> { // TODO: Types",
          "5180:         return this.http.authedRequest(callback, Method.Get, path, undefined, undefined);",
          "",
          "[Added Lines]",
          "5187:     public getPresence(userId: string, callback?: Callback): Promise<IStatusResponse> {",
          "5192:         return this.http.authedRequest(callback, Method.Get, path);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5301:         if (!this.timelineSupport) {",
          "5302:             throw new Error(\"timeline support is disabled. Set the 'timelineSupport'\" +",
          "",
          "[Removed Lines]",
          "5299:     public async getEventTimeline(timelineSet: EventTimelineSet, eventId: string): Promise<EventTimeline> {",
          "",
          "[Added Lines]",
          "5312:     public async getEventTimeline(timelineSet: EventTimelineSet, eventId: string): Promise<EventTimeline | undefined> {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5320:         }",
          "5324:         if (!res.event) {",
          "5325:             throw new Error(\"'event' not in '/context' result - homeserver too old?\");",
          "5326:         }",
          "",
          "[Removed Lines]",
          "5323:         const res = await this.http.authedRequest<any>(undefined, Method.Get, path, params); // TODO types",
          "",
          "[Added Lines]",
          "5336:         const res = await this.http.authedRequest<IContextResponse>(undefined, Method.Get, path, params);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "5333:         const mapper = this.getEventMapper();",
          "5334:         const event = mapper(res.event);",
          "5335:         const events = [",
          "5338:             ...res.events_after.reverse().map(mapper),",
          "5339:             event,",
          "5340:             ...res.events_before.map(mapper),",
          "5341:         ];",
          "5354:             }",
          "5368:                 }",
          "5372:             }",
          "5375:         }",
          "",
          "[Removed Lines]",
          "5346:         if (Thread.hasServerSideSupport &&",
          "5347:             this.supportsExperimentalThreads() &&",
          "5348:             event.isRelation(THREAD_RELATION_TYPE.name)",
          "5349:         ) {",
          "5350:             const [, threadedEvents] = timelineSet.room.partitionThreadedEvents(events);",
          "5351:             let thread = timelineSet.room.getThread(event.threadRootId);",
          "5352:             if (!thread) {",
          "5353:                 thread = timelineSet.room.createThread(event.threadRootId, undefined, threadedEvents, true);",
          "5356:             const opts: IRelationsRequestOpts = {",
          "5357:                 direction: Direction.Backward,",
          "5358:                 limit: 50,",
          "5359:             };",
          "5361:             await thread.fetchInitialEvents();",
          "5362:             let nextBatch = thread.liveTimeline.getPaginationToken(Direction.Backward);",
          "5365:             while (!thread.findEventById(eventId)) {",
          "5366:                 if (nextBatch) {",
          "5367:                     opts.from = nextBatch;",
          "5370:                 ({ nextBatch } = await thread.fetchEvents(opts));",
          "5371:                 if (!nextBatch) break;",
          "5374:             return thread.liveTimeline;",
          "",
          "[Added Lines]",
          "5357:         if (this.supportsExperimentalThreads()) {",
          "5358:             if (!timelineSet.canContain(event)) {",
          "5359:                 return undefined;",
          "5365:             if (Thread.hasServerSideSupport && timelineSet.thread) {",
          "5366:                 const thread = timelineSet.thread;",
          "5367:                 const opts: IRelationsRequestOpts = {",
          "5368:                     direction: Direction.Backward,",
          "5369:                     limit: 50,",
          "5370:                 };",
          "5372:                 await thread.fetchInitialEvents();",
          "5373:                 let nextBatch = thread.liveTimeline.getPaginationToken(Direction.Backward);",
          "5376:                 while (!thread.findEventById(eventId)) {",
          "5377:                     if (nextBatch) {",
          "5378:                         opts.from = nextBatch;",
          "5379:                     }",
          "5381:                     ({ nextBatch } = await thread.fetchEvents(opts));",
          "5382:                     if (!nextBatch) break;",
          "5385:                 return thread.liveTimeline;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "5398:             ?? timeline;",
          "5399:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5423:     public async getLatestTimeline(timelineSet: EventTimelineSet): Promise<EventTimeline> {",
          "5425:         if (!this.timelineSupport) {",
          "5426:             throw new Error(\"timeline support is disabled. Set the 'timelineSupport'\" +",
          "5427:                 \" parameter to true when creating MatrixClient to enable it.\");",
          "5428:         }",
          "5430:         const messagesPath = utils.encodeUri(",
          "5431:             \"/rooms/$roomId/messages\", {",
          "5432:                 $roomId: timelineSet.room.roomId,",
          "5433:             },",
          "5434:         );",
          "5436:         const params: Record<string, string | string[]> = {",
          "5437:             dir: 'b',",
          "5438:         };",
          "5439:         if (this.clientOpts.lazyLoadMembers) {",
          "5440:             params.filter = JSON.stringify(Filter.LAZY_LOADING_MESSAGES_FILTER);",
          "5441:         }",
          "5443:         const res = await this.http.authedRequest<IMessagesResponse>(undefined, Method.Get, messagesPath, params);",
          "5444:         const event = res.chunk?.[0];",
          "5445:         if (!event) {",
          "5446:             throw new Error(\"No message returned from /messages when trying to construct getLatestTimeline\");",
          "5447:         }",
          "5449:         return this.getEventTimeline(timelineSet, event.event_id);",
          "5450:     }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5499:                 params.from = token;",
          "5500:             }",
          "5504:             ).then(async (res) => {",
          "5505:                 const token = res.next_token;",
          "5506:                 const matrixEvents = [];",
          "",
          "[Removed Lines]",
          "5502:             promise = this.http.authedRequest<any>( // TODO types",
          "5503:                 undefined, Method.Get, path, params, undefined,",
          "",
          "[Added Lines]",
          "5553:             promise = this.http.authedRequest<INotificationsResponse>(",
          "5554:                 undefined, Method.Get, path, params,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5880:             const idServerUrl = new URL(this.idBaseUrl);",
          "5881:             postParams.id_server = idServerUrl.host;",
          "5888:                 const identityAccessToken = await this.identityServer.getAccessToken();",
          "5889:                 if (identityAccessToken) {",
          "5890:                     postParams.id_access_token = identityAccessToken;",
          "",
          "[Removed Lines]",
          "5883:             if (",
          "5884:                 this.identityServer &&",
          "5885:                 this.identityServer.getAccessToken &&",
          "5886:                 await this.doesServerAcceptIdentityAccessToken()",
          "5887:             ) {",
          "",
          "[Added Lines]",
          "5934:             if (this.identityServer?.getAccessToken && await this.doesServerAcceptIdentityAccessToken()) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5907:         if (this.pushRules) {",
          "",
          "[Removed Lines]",
          "5904:     public getRoomPushRule(scope: string, roomId: string): any { // TODO: Types",
          "",
          "[Added Lines]",
          "5951:     public getRoomPushRule(scope: string, roomId: string): IPushRule | undefined {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5930:     public setRoomMutePushRule(scope: string, roomId: string, mute: boolean): Promise<void> | void {",
          "5932:         let hasDontNotifyRule = false;",
          "5935:         const roomPushRule = this.getRoomPushRule(scope, roomId);",
          "5940:         }",
          "5942:         if (!mute) {",
          "",
          "[Removed Lines]",
          "5931:         let promise: Promise<void>;",
          "5936:         if (roomPushRule) {",
          "5937:             if (0 <= roomPushRule.actions.indexOf(\"dont_notify\")) {",
          "5938:                 hasDontNotifyRule = true;",
          "5939:             }",
          "",
          "[Added Lines]",
          "5978:         let promise: Promise<unknown>;",
          "5983:         if (roomPushRule?.actions.includes(PushRuleActionName.DontNotify)) {",
          "5984:             hasDontNotifyRule = true;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5947:         } else {",
          "5948:             if (!roomPushRule) {",
          "5949:                 promise = this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {",
          "5951:                 });",
          "5952:             } else if (!hasDontNotifyRule) {",
          "5955:                 const deferred = utils.defer();",
          "5965:                     }).catch((err) => {",
          "5966:                         deferred.reject(err);",
          "5967:                     });",
          "5969:                 promise = deferred.promise;",
          "5970:             }",
          "",
          "[Removed Lines]",
          "5950:                     actions: [\"dont_notify\"],",
          "5956:                 this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id)",
          "5957:                     .then(() => {",
          "5958:                         this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {",
          "5959:                             actions: [\"dont_notify\"],",
          "5960:                         }).then(() => {",
          "5961:                             deferred.resolve();",
          "5962:                         }).catch((err) => {",
          "5963:                             deferred.reject(err);",
          "5964:                         });",
          "",
          "[Added Lines]",
          "5995:                     actions: [PushRuleActionName.DontNotify],",
          "6001:                 this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id).then(() => {",
          "6002:                     this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {",
          "6003:                         actions: [PushRuleActionName.DontNotify],",
          "6004:                     }).then(() => {",
          "6005:                         deferred.resolve();",
          "6009:                 }).catch((err) => {",
          "6010:                     deferred.reject(err);",
          "6011:                 });",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6176:         const path = utils.encodeUri(\"/user/$userId/filter\", {",
          "6177:             $userId: this.credentials.userId,",
          "6178:         });",
          "6188:     }",
          "",
          "[Removed Lines]",
          "6180:         return this.http.authedRequest<any>(undefined, Method.Post, path, undefined, content).then((response) => {",
          "6182:             const filter = Filter.fromJson(",
          "6183:                 this.credentials.userId, response.filter_id, content,",
          "6184:             );",
          "6185:             this.store.storeFilter(filter);",
          "6186:             return filter;",
          "6187:         });",
          "",
          "[Added Lines]",
          "6223:         return this.http.authedRequest<IFilterResponse>(undefined, Method.Post, path, undefined, content)",
          "6224:             .then((response) => {",
          "6226:                 const filter = Filter.fromJson(this.credentials.userId, response.filter_id, content);",
          "6227:                 this.store.storeFilter(filter);",
          "6228:                 return filter;",
          "6229:             });",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6209:             $filterId: filterId,",
          "6210:         });",
          "6216:             const filter = Filter.fromJson(userId, filterId, response);",
          "6217:             this.store.storeFilter(filter);",
          "",
          "[Removed Lines]",
          "6212:         return this.http.authedRequest<IFilterDefinition>(",
          "6213:             undefined, Method.Get, path, undefined, undefined,",
          "6214:         ).then((response) => {",
          "",
          "[Added Lines]",
          "6254:         return this.http.authedRequest<IFilterDefinition>(undefined, Method.Get, path).then((response) => {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6607:         const versions = response[\"versions\"];",
          "6608:         const unstableFeatures = response[\"unstable_features\"];",
          "6612:     }",
          "",
          "[Removed Lines]",
          "6610:         return (versions && versions.includes(\"r0.6.0\"))",
          "6611:             || (unstableFeatures && unstableFeatures[\"m.separate_add_and_bind\"]);",
          "",
          "[Added Lines]",
          "6650:         return versions?.includes(\"r0.6.0\") || unstableFeatures?.[\"m.separate_add_and_bind\"];",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6910:         guestAccessToken?: string,",
          "6911:         inhibitLogin?: boolean,",
          "6912:         callback?: Callback,",
          "6915:         if (bindThreepids === true) {",
          "6916:             bindThreepids = { email: true };",
          "",
          "[Removed Lines]",
          "6913:     ): Promise<any> { // TODO: Types (many)",
          "",
          "[Added Lines]",
          "6952:     ): Promise<IAuthData> {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6926:             auth.session = sessionId;",
          "6927:         }",
          "6930:             auth: auth,",
          "6931:             refresh_token: true, // always ask for a refresh token - does nothing if unsupported",
          "6932:         };",
          "",
          "[Removed Lines]",
          "6929:         const params: any = {",
          "",
          "[Added Lines]",
          "6968:         const params: IRegisterRequestParams = {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7002:         if (kind) {",
          "7003:             params.kind = kind;",
          "7004:         }",
          "",
          "[Removed Lines]",
          "7000:     public registerRequest(data: any, kind?: string, callback?: Callback): Promise<any> { // TODO: Types",
          "7001:         const params: any = {};",
          "",
          "[Added Lines]",
          "7039:     public registerRequest(data: IRegisterRequestParams, kind?: string, callback?: Callback): Promise<IAuthData> {",
          "7040:         const params: { kind?: string } = {};",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "7148:         if (this.crypto?.backupManager?.getKeyBackupEnabled()) {",
          "7149:             try {",
          "7150:                 while (await this.crypto.backupManager.backupPendingKeys(200) > 0);",
          "",
          "[Removed Lines]",
          "7147:     public async logout(callback?: Callback): Promise<{}> {",
          "",
          "[Added Lines]",
          "7187:     public async logout(callback?: Callback, stopClient = false): Promise<{}> {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "7155:                 );",
          "7156:             }",
          "7157:         }",
          "7158:         return this.http.authedRequest(",
          "7159:             callback, Method.Post, '/logout',",
          "7160:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7199:         if (stopClient) {",
          "7200:             this.stopClient();",
          "7201:         }",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "7561:     }",
          "7571:     public deleteAlias(alias: string, callback?: Callback): Promise<{}> {",
          "7572:         const path = utils.encodeUri(\"/directory/room/$alias\", {",
          "7573:             $alias: alias,",
          "7574:         });",
          "7576:     }",
          "7589:     }",
          "",
          "[Removed Lines]",
          "7575:         return this.http.authedRequest(callback, Method.Delete, path, undefined, undefined);",
          "7584:     public unstableGetLocalAliases(roomId: string, callback?: Callback): Promise<{ aliases: string[] }> {",
          "7585:         const path = utils.encodeUri(\"/rooms/$roomId/aliases\",",
          "7586:             { $roomId: roomId });",
          "7587:         const prefix = PREFIX_UNSTABLE + \"/org.matrix.msc2432\";",
          "7588:         return this.http.authedRequest(callback, Method.Get, path, null, null, { prefix });",
          "",
          "[Added Lines]",
          "7620:         return this.http.authedRequest(callback, Method.Delete, path);",
          "7630:     public getLocalAliases(roomId: string): Promise<{ aliases: string[] }> {",
          "7631:         const path = utils.encodeUri(\"/rooms/$roomId/aliases\", { $roomId: roomId });",
          "7632:         const prefix = PREFIX_V3;",
          "7633:         return this.http.authedRequest(undefined, Method.Get, path, null, null, { prefix });",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "7801:     public getThreePids(callback?: Callback): Promise<{ threepids: IThreepid[] }> {",
          "7804:     }",
          "",
          "[Removed Lines]",
          "7802:         const path = \"/account/3pid\";",
          "7803:         return this.http.authedRequest(callback, Method.Get, path, undefined, undefined);",
          "",
          "[Added Lines]",
          "7847:         return this.http.authedRequest(callback, Method.Get, \"/account/3pid\");",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "7966:     public getDevices(): Promise<{ devices: IMyDevice[] }> {",
          "7968:     }",
          "",
          "[Removed Lines]",
          "7967:         return this.http.authedRequest(undefined, Method.Get, \"/devices\", undefined, undefined);",
          "",
          "[Added Lines]",
          "8011:         return this.http.authedRequest(undefined, Method.Get, \"/devices\");",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "7977:         const path = utils.encodeUri(\"/devices/$device_id\", {",
          "7978:             $device_id: deviceId,",
          "7979:         });",
          "7981:     }",
          "",
          "[Removed Lines]",
          "7980:         return this.http.authedRequest(undefined, Method.Get, path, undefined, undefined);",
          "",
          "[Added Lines]",
          "8024:         return this.http.authedRequest(undefined, Method.Get, path);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "8009:         const path = utils.encodeUri(\"/devices/$device_id\", {",
          "8010:             $device_id: deviceId,",
          "8011:         });",
          "",
          "[Removed Lines]",
          "8008:     public deleteDevice(deviceId: string, auth?: any): Promise<any> { // TODO: Types",
          "",
          "[Added Lines]",
          "8052:     public deleteDevice(deviceId: string, auth?: IAuthDict): Promise<IAuthData | {}> {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "8031:         const body: any = { devices };",
          "8033:         if (auth) {",
          "",
          "[Removed Lines]",
          "8030:     public deleteMultipleDevices(devices: string[], auth?: any): Promise<any> { // TODO: Types",
          "",
          "[Added Lines]",
          "8074:     public deleteMultipleDevices(devices: string[], auth?: IAuthDict): Promise<IAuthData | {}> {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "8048:     public getPushers(callback?: Callback): Promise<{ pushers: IPusher[] }> {",
          "8051:     }",
          "",
          "[Removed Lines]",
          "8049:         const path = \"/pushers\";",
          "8050:         return this.http.authedRequest(callback, Method.Get, path, undefined, undefined);",
          "",
          "[Added Lines]",
          "8093:         return this.http.authedRequest(callback, Method.Get, \"/pushers\");",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "8088:         scope: string,",
          "8089:         kind: PushRuleKind,",
          "8090:         ruleId: Exclude<string, RuleId>,",
          "8092:         callback?: Callback,",
          "8095:         const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId\", {",
          "8096:             $kind: kind,",
          "",
          "[Removed Lines]",
          "8091:         body: any,",
          "8093:     ): Promise<any> { // TODO: Types",
          "",
          "[Added Lines]",
          "8134:         body: Pick<IPushRule, \"actions\" | \"conditions\" | \"pattern\">,",
          "8136:     ): Promise<{}> {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "8112:         kind: PushRuleKind,",
          "8113:         ruleId: Exclude<string, RuleId>,",
          "8114:         callback?: Callback,",
          "8117:         const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId\", {",
          "8118:             $kind: kind,",
          "",
          "[Removed Lines]",
          "8115:     ): Promise<any> { // TODO: Types",
          "",
          "[Added Lines]",
          "8158:     ): Promise<{}> {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "8311:             to: newToken,",
          "8312:         };",
          "8316:     }",
          "8319:         const data = Object.assign({}, keys);",
          "8320:         if (auth) Object.assign(data, { auth });",
          "8321:         return this.http.authedRequest(",
          "",
          "[Removed Lines]",
          "8314:         const path = \"/keys/changes\";",
          "8315:         return this.http.authedRequest(undefined, Method.Get, path, qps, undefined);",
          "8318:     public uploadDeviceSigningKeys(auth?: IAuthData, keys?: CrossSigningKeys): Promise<{}> {",
          "",
          "[Added Lines]",
          "8357:         return this.http.authedRequest(undefined, Method.Get, \"/keys/changes\", qps);",
          "8360:     public uploadDeviceSigningKeys(auth?: IAuthData, keys?: CrossSigningKeys): Promise<{}> { // API returns empty object",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "8758:     public getThirdpartyProtocols(): Promise<{ [protocol: string]: IProtocol }> {",
          "8759:         return this.http.authedRequest<Record<string, IProtocol>>(",
          "8761:         ).then((response) => {",
          "8763:             if (!response || typeof (response) !== 'object') {",
          "",
          "[Removed Lines]",
          "8760:             undefined, Method.Get, \"/thirdparty/protocols\", undefined, undefined,",
          "",
          "[Added Lines]",
          "8802:             undefined, Method.Get, \"/thirdparty/protocols\",",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "8783:             $protocol: protocol,",
          "8784:         });",
          "8787:     }",
          "",
          "[Removed Lines]",
          "8786:         return this.http.authedRequest(undefined, Method.Get, path, params, undefined);",
          "",
          "[Added Lines]",
          "8828:         return this.http.authedRequest(undefined, Method.Get, path, params);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "8799:             $protocol: protocol,",
          "8800:         });",
          "8803:     }",
          "8805:     public getTerms(serviceType: SERVICE_TYPES, baseUrl: string): Promise<any> { // TODO: Types",
          "",
          "[Removed Lines]",
          "8802:         return this.http.authedRequest(undefined, Method.Get, path, params, undefined);",
          "",
          "[Added Lines]",
          "8844:         return this.http.authedRequest(undefined, Method.Get, path, params);",
          "",
          "---------------"
        ],
        "src/content-helpers.ts||src/content-helpers.ts": [
          "File: src/content-helpers.ts -> src/content-helpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { MBeaconEventContent, MBeaconInfoContent, MBeaconInfoEventContent } from \"./@types/beacon\";",
          "22: import { MsgType } from \"./@types/event\";",
          "",
          "[Removed Lines]",
          "19: import { REFERENCE_RELATION } from \"matrix-events-sdk\";",
          "",
          "[Added Lines]",
          "19: import { isProvided, REFERENCE_RELATION } from \"matrix-events-sdk\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     MAssetContent,",
          "33:     LegacyLocationEventContent,",
          "34: } from \"./@types/location\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import { MRoomTopicEventContent, MTopicContent, M_TOPIC } from \"./@types/topic\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:     return makeLocationContent(fallbackText, geoUri, timestamp, description, assetType);",
          "191: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: export type MakeTopicContent = (",
          "198:     topic: string,",
          "199:     htmlTopic?: string,",
          "200: ) => MRoomTopicEventContent;",
          "202: export const makeTopicContent: MakeTopicContent = (topic, htmlTopic) => {",
          "203:     const renderings = [{ body: topic, mimetype: \"text/plain\" }];",
          "204:     if (isProvided(htmlTopic)) {",
          "205:         renderings.push({ body: htmlTopic, mimetype: \"text/html\" });",
          "206:     }",
          "207:     return { topic, [M_TOPIC.name]: renderings };",
          "208: };",
          "210: export type TopicState = {",
          "211:     text: string;",
          "212:     html?: string;",
          "213: };",
          "215: export const parseTopicContent = (content: MRoomTopicEventContent): TopicState => {",
          "216:     const mtopic = M_TOPIC.findIn<MTopicContent>(content);",
          "217:     const text = mtopic?.find(r => !isProvided(r.mimetype) || r.mimetype === \"text/plain\")?.body ?? content.topic;",
          "218:     const html = mtopic?.find(r => r.mimetype === \"text/html\")?.body;",
          "219:     return { text, html };",
          "220: };",
          "",
          "---------------"
        ],
        "src/crypto/CrossSigning.ts||src/crypto/CrossSigning.ts": [
          "File: src/crypto/CrossSigning.ts -> src/crypto/CrossSigning.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     public async isStoredInSecretStorage(secretStorage: SecretStorage): Promise<Record<string, object>> {",
          "176:         function intersect(s: Record<string, ISecretStorageKeyInfo>) {",
          "177:             for (const k of Object.keys(stored)) {",
          "",
          "[Removed Lines]",
          "174:         const stored = await secretStorage.isStored(\"m.cross_signing.master\", false) || {};",
          "",
          "[Added Lines]",
          "174:         const stored = await secretStorage.isStored(\"m.cross_signing.master\") || {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:             }",
          "182:         }",
          "183:         for (const type of [\"self_signing\", \"user_signing\"]) {",
          "185:         }",
          "186:         return Object.keys(stored).length ? stored : null;",
          "187:     }",
          "",
          "[Removed Lines]",
          "184:             intersect(await secretStorage.isStored(`m.cross_signing.${type}`, false) || {});",
          "",
          "[Added Lines]",
          "184:             intersect(await secretStorage.isStored(`m.cross_signing.${type}`) || {});",
          "",
          "---------------"
        ],
        "src/crypto/DeviceList.ts||src/crypto/DeviceList.ts": [
          "File: src/crypto/DeviceList.ts -> src/crypto/DeviceList.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "942: async function storeDeviceKeys(",
          "943:     olmDevice: OlmDevice,",
          "944:     userStore: Record<string, DeviceInfo>,",
          "946: ): Promise<boolean> {",
          "947:     if (!deviceResult.keys) {",
          "",
          "[Removed Lines]",
          "945:     deviceResult: any, // TODO types",
          "",
          "[Added Lines]",
          "945:     deviceResult: IDownloadKeyResult[\"device_keys\"][\"user_id\"][\"device_id\"],",
          "",
          "---------------"
        ],
        "src/crypto/OlmDevice.ts||src/crypto/OlmDevice.ts": [
          "File: src/crypto/OlmDevice.ts -> src/crypto/OlmDevice.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     sharedHistory?: boolean;",
          "93: }",
          "96:     result: string;",
          "97:     keysClaimed: Record<string, string>;",
          "98:     senderKey: string;",
          "",
          "[Removed Lines]",
          "95: interface IDecryptedGroupMessage {",
          "",
          "[Added Lines]",
          "95: export interface IDecryptedGroupMessage {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     untrusted: boolean;",
          "101: }",
          "103: export interface IExportedDevice {",
          "104:     pickleKey: string;",
          "105:     pickledAccount: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: export interface IInboundSession {",
          "104:     payload: string;",
          "105:     session_id: string;",
          "106: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "620:         theirDeviceIdentityKey: string,",
          "621:         messageType: number,",
          "622:         ciphertext: string,",
          "624:         if (messageType !== 0) {",
          "625:             throw new Error(\"Need messageType == 0 to create inbound session\");",
          "626:         }",
          "",
          "[Removed Lines]",
          "623:     ): Promise<{ payload: string, session_id: string }> { // eslint-disable-line camelcase",
          "",
          "[Added Lines]",
          "628:     ): Promise<IInboundSession> {",
          "",
          "---------------"
        ],
        "src/crypto/SecretStorage.ts||src/crypto/SecretStorage.ts": [
          "File: src/crypto/SecretStorage.ts -> src/crypto/SecretStorage.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         const secretInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretInfo>(name);",
          "351:         if (!secretInfo?.encrypted) return null;",
          "",
          "[Removed Lines]",
          "348:     public async isStored(name: string, checkKey = true): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "",
          "[Added Lines]",
          "347:     public async isStored(name: string): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/base.ts||src/crypto/algorithms/base.ts": [
          "File: src/crypto/algorithms/base.ts -> src/crypto/algorithms/base.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     }",
          "",
          "[Removed Lines]",
          "182:     public onRoomKeyEvent(params: MatrixEvent): void {",
          "",
          "[Added Lines]",
          "182:     public async onRoomKeyEvent(params: MatrixEvent): Promise<void> {",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     registerAlgorithm,",
          "31:     UnknownDeviceError,",
          "32: } from \"./base\";",
          "34: import { Room } from '../../models/room';",
          "35: import { DeviceInfo } from \"../deviceinfo\";",
          "36: import { IOlmSessionResult } from \"../olmlib\";",
          "37: import { DeviceInfoMap } from \"../DeviceList\";",
          "38: import { MatrixEvent } from \"../..\";",
          "42: export function isRoomSharedHistory(room: Room): boolean {",
          "",
          "[Removed Lines]",
          "33: import { WITHHELD_MESSAGES } from '../OlmDevice';",
          "39: import { IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"../index\";",
          "",
          "[Added Lines]",
          "33: import { IDecryptedGroupMessage, WITHHELD_MESSAGES } from '../OlmDevice';",
          "39: import { IEncryptedContent, IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"../index\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     algorithm?: string;",
          "101:     sender_key?: string;",
          "102: }",
          "111: interface SharedWithData {",
          "",
          "[Removed Lines]",
          "104: interface IEncryptedContent {",
          "105:     algorithm: string;",
          "106:     sender_key: string;",
          "107:     ciphertext: Record<string, string>;",
          "108: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:                 }",
          "214:             }",
          "215:         }",
          "216:     }",
          "217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:         return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "234:     private setupPromise = Promise.resolve<OutboundSessionInfo>(undefined);",
          "",
          "[Added Lines]",
          "230:     private setupPromise = Promise.resolve<OutboundSessionInfo | null>(null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:     private readonly sessionRotationPeriodMsgs: number;",
          "242:     private readonly sessionRotationPeriodMs: number;",
          "245:         startTime: number;",
          "246:     };",
          "",
          "[Removed Lines]",
          "243:     private encryptionPreparation: Promise<void>;",
          "244:     private encryptionPreparationMetadata: {",
          "",
          "[Added Lines]",
          "239:     private encryptionPreparation?: {",
          "240:         promise: Promise<void>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "270:         blocked: IBlockedMap,",
          "271:         singleOlmCreationPhase = false,",
          "272:     ): Promise<OutboundSessionInfo> {",
          "283:             const sharedHistory = isRoomSharedHistory(room);",
          "296:             }",
          "445:         }",
          "460:     }",
          "",
          "[Removed Lines]",
          "273:         let session: OutboundSessionInfo;",
          "280:         const prepareSession = async (oldSession: OutboundSessionInfo) => {",
          "281:             session = oldSession;",
          "286:             if (session && sharedHistory !== session.sharedHistory) {",
          "287:                 session = null;",
          "288:             }",
          "291:             if (session && session.needsRotation(this.sessionRotationPeriodMsgs,",
          "292:                 this.sessionRotationPeriodMs)",
          "293:             ) {",
          "294:                 logger.log(\"Starting new megolm session because we need to rotate.\");",
          "295:                 session = null;",
          "299:             if (session && session.sharedWithTooManyDevices(devicesInRoom)) {",
          "300:                 session = null;",
          "301:             }",
          "303:             if (!session) {",
          "304:                 logger.log(`Starting new megolm session for room ${this.roomId}`);",
          "305:                 session = await this.prepareNewSession(sharedHistory);",
          "306:                 logger.log(`Started new megolm session ${session.sessionId} ` +",
          "307:                     `for room ${this.roomId}`);",
          "308:                 this.outboundSessions[session.sessionId] = session;",
          "309:             }",
          "312:             const shareMap: Record<string, DeviceInfo[]> = {};",
          "314:             for (const [userId, userDevices] of Object.entries(devicesInRoom)) {",
          "315:                 for (const [deviceId, deviceInfo] of Object.entries(userDevices)) {",
          "316:                     const key = deviceInfo.getIdentityKey();",
          "317:                     if (key == this.olmDevice.deviceCurve25519Key) {",
          "319:                         continue;",
          "320:                     }",
          "322:                     if (",
          "323:                         !session.sharedWithDevices[userId] ||",
          "324:                         session.sharedWithDevices[userId][deviceId] === undefined",
          "325:                     ) {",
          "326:                         shareMap[userId] = shareMap[userId] || [];",
          "327:                         shareMap[userId].push(deviceInfo);",
          "328:                     }",
          "329:                 }",
          "330:             }",
          "332:             const key = this.olmDevice.getOutboundGroupSessionKey(session.sessionId);",
          "333:             const payload: IPayload = {",
          "334:                 type: \"m.room_key\",",
          "335:                 content: {",
          "336:                     \"algorithm\": olmlib.MEGOLM_ALGORITHM,",
          "337:                     \"room_id\": this.roomId,",
          "338:                     \"session_id\": session.sessionId,",
          "339:                     \"session_key\": key.key,",
          "340:                     \"chain_index\": key.chain_index,",
          "341:                     \"org.matrix.msc3061.shared_history\": sharedHistory,",
          "342:                 },",
          "343:             };",
          "344:             const [devicesWithoutSession, olmSessions] = await olmlib.getExistingOlmSessions(",
          "345:                 this.olmDevice, this.baseApis, shareMap,",
          "346:             );",
          "348:             await Promise.all([",
          "349:                 (async () => {",
          "351:                     logger.debug(`Sharing keys with existing Olm sessions in ${this.roomId}`, olmSessions);",
          "352:                     await this.shareKeyWithOlmSessions(session, key, payload, olmSessions);",
          "353:                     logger.debug(`Shared keys with existing Olm sessions in ${this.roomId}`);",
          "354:                 })(),",
          "355:                 (async () => {",
          "356:                     logger.debug(",
          "357:                         `Sharing keys (start phase 1) with new Olm sessions in ${this.roomId}`,",
          "358:                         devicesWithoutSession,",
          "359:                     );",
          "360:                     const errorDevices: IOlmDevice[] = [];",
          "367:                     const start = Date.now();",
          "368:                     const failedServers: string[] = [];",
          "369:                     await this.shareKeyWithDevices(",
          "370:                         session, key, payload, devicesWithoutSession, errorDevices,",
          "371:                         singleOlmCreationPhase ? 10000 : 2000, failedServers,",
          "372:                     );",
          "373:                     logger.debug(`Shared keys (end phase 1) with new Olm sessions in ${this.roomId}`);",
          "375:                     if (!singleOlmCreationPhase && (Date.now() - start < 10000)) {",
          "378:                         (async () => {",
          "384:                             const retryDevices: Record<string, DeviceInfo[]> = {};",
          "385:                             const failedServerMap = new Set;",
          "386:                             for (const server of failedServers) {",
          "387:                                 failedServerMap.add(server);",
          "388:                             }",
          "389:                             const failedDevices = [];",
          "390:                             for (const { userId, deviceInfo } of errorDevices) {",
          "391:                                 const userHS = userId.slice(userId.indexOf(\":\") + 1);",
          "392:                                 if (failedServerMap.has(userHS)) {",
          "393:                                     retryDevices[userId] = retryDevices[userId] || [];",
          "394:                                     retryDevices[userId].push(deviceInfo);",
          "395:                                 } else {",
          "398:                                     failedDevices.push({ userId, deviceInfo });",
          "399:                                 }",
          "400:                             }",
          "402:                             logger.debug(`Sharing keys (start phase 2) with new Olm sessions in ${this.roomId}`);",
          "403:                             await this.shareKeyWithDevices(",
          "404:                                 session, key, payload, retryDevices, failedDevices, 30000,",
          "405:                             );",
          "406:                             logger.debug(`Shared keys (end phase 2) with new Olm sessions in ${this.roomId}`);",
          "408:                             await this.notifyFailedOlmDevices(session, key, failedDevices);",
          "409:                         })();",
          "410:                     } else {",
          "411:                         await this.notifyFailedOlmDevices(session, key, errorDevices);",
          "412:                     }",
          "413:                     logger.debug(`Shared keys (all phases done) with new Olm sessions in ${this.roomId}`);",
          "414:                 })(),",
          "415:                 (async () => {",
          "416:                     logger.debug(`There are ${Object.entries(blocked).length} blocked devices in ${this.roomId}`,",
          "417:                         Object.entries(blocked));",
          "420:                     logger.debug(`Notifying newly blocked devices in ${this.roomId}`);",
          "421:                     const blockedMap: Record<string, Record<string, { device: IBlockedDevice }>> = {};",
          "422:                     let blockedCount = 0;",
          "423:                     for (const [userId, userBlockedDevices] of Object.entries(blocked)) {",
          "424:                         for (const [deviceId, device] of Object.entries(userBlockedDevices)) {",
          "425:                             if (",
          "426:                                 !session.blockedDevicesNotified[userId] ||",
          "427:                                 session.blockedDevicesNotified[userId][deviceId] === undefined",
          "428:                             ) {",
          "429:                                 blockedMap[userId] = blockedMap[userId] || {};",
          "430:                                 blockedMap[userId][deviceId] = { device };",
          "431:                                 blockedCount++;",
          "432:                             }",
          "433:                         }",
          "434:                     }",
          "436:                     await this.notifyBlockedDevices(session, blockedMap);",
          "437:                     logger.debug(`Notified ${blockedCount} newly blocked devices in ${this.roomId}`, blockedMap);",
          "438:                 })(),",
          "439:             ]);",
          "440:         };",
          "443:         function returnSession() {",
          "444:             return session;",
          "448:         const prom = this.setupPromise.then(prepareSession);",
          "451:         prom.catch(e => {",
          "452:             logger.error(`Failed to ensure outbound session in ${this.roomId}`, e);",
          "453:         });",
          "456:         this.setupPromise = prom.then(returnSession, returnSession);",
          "459:         return prom.then(returnSession);",
          "",
          "[Added Lines]",
          "275:         const setup = async (oldSession: OutboundSessionInfo | null): Promise<OutboundSessionInfo> => {",
          "278:             const session = await this.prepareSession(devicesInRoom, sharedHistory, oldSession);",
          "280:             try {",
          "281:                 await this.shareSession(devicesInRoom, sharedHistory, singleOlmCreationPhase, blocked, session);",
          "282:             } catch (e) {",
          "283:                 logger.error(`Failed to ensure outbound session in ${this.roomId}`, e);",
          "286:             return session;",
          "287:         };",
          "290:         const prom = this.setupPromise.then(setup);",
          "293:         prom.catch(e => {",
          "294:             logger.error(`Failed to setup outbound session in ${this.roomId}`, e);",
          "295:         });",
          "298:         this.setupPromise = prom;",
          "301:         return prom;",
          "302:     }",
          "304:     private async prepareSession(",
          "305:         devicesInRoom: DeviceInfoMap,",
          "306:         sharedHistory: boolean,",
          "307:         session: OutboundSessionInfo | null,",
          "308:     ): Promise<OutboundSessionInfo> {",
          "310:         if (session && sharedHistory !== session.sharedHistory) {",
          "311:             session = null;",
          "312:         }",
          "315:         if (session?.needsRotation(this.sessionRotationPeriodMsgs, this.sessionRotationPeriodMs)) {",
          "316:             logger.log(\"Starting new megolm session because we need to rotate.\");",
          "317:             session = null;",
          "318:         }",
          "321:         if (session?.sharedWithTooManyDevices(devicesInRoom)) {",
          "322:             session = null;",
          "323:         }",
          "325:         if (!session) {",
          "326:             logger.log(`Starting new megolm session for room ${this.roomId}`);",
          "327:             session = await this.prepareNewSession(sharedHistory);",
          "328:             logger.log(`Started new megolm session ${session.sessionId} ` +",
          "329:                 `for room ${this.roomId}`);",
          "330:             this.outboundSessions[session.sessionId] = session;",
          "331:         }",
          "333:         return session;",
          "334:     }",
          "336:     private async shareSession(",
          "337:         devicesInRoom: DeviceInfoMap,",
          "338:         sharedHistory: boolean,",
          "339:         singleOlmCreationPhase: boolean,",
          "340:         blocked: IBlockedMap,",
          "341:         session: OutboundSessionInfo,",
          "342:     ) {",
          "344:         const shareMap: Record<string, DeviceInfo[]> = {};",
          "346:         for (const [userId, userDevices] of Object.entries(devicesInRoom)) {",
          "347:             for (const [deviceId, deviceInfo] of Object.entries(userDevices)) {",
          "348:                 const key = deviceInfo.getIdentityKey();",
          "349:                 if (key == this.olmDevice.deviceCurve25519Key) {",
          "351:                     continue;",
          "352:                 }",
          "354:                 if (",
          "355:                     !session.sharedWithDevices[userId] ||",
          "356:                     session.sharedWithDevices[userId][deviceId] === undefined",
          "357:                 ) {",
          "358:                     shareMap[userId] = shareMap[userId] || [];",
          "359:                     shareMap[userId].push(deviceInfo);",
          "360:                 }",
          "361:             }",
          "364:         const key = this.olmDevice.getOutboundGroupSessionKey(session.sessionId);",
          "365:         const payload: IPayload = {",
          "366:             type: \"m.room_key\",",
          "367:             content: {",
          "368:                 \"algorithm\": olmlib.MEGOLM_ALGORITHM,",
          "369:                 \"room_id\": this.roomId,",
          "370:                 \"session_id\": session.sessionId,",
          "371:                 \"session_key\": key.key,",
          "372:                 \"chain_index\": key.chain_index,",
          "373:                 \"org.matrix.msc3061.shared_history\": sharedHistory,",
          "374:             },",
          "375:         };",
          "376:         const [devicesWithoutSession, olmSessions] = await olmlib.getExistingOlmSessions(",
          "377:             this.olmDevice, this.baseApis, shareMap,",
          "378:         );",
          "380:         await Promise.all([",
          "381:             (async () => {",
          "383:                 logger.debug(`Sharing keys with existing Olm sessions in ${this.roomId}`, olmSessions);",
          "384:                 await this.shareKeyWithOlmSessions(session, key, payload, olmSessions);",
          "385:                 logger.debug(`Shared keys with existing Olm sessions in ${this.roomId}`);",
          "386:             })(),",
          "387:             (async () => {",
          "388:                 logger.debug(",
          "389:                     `Sharing keys (start phase 1) with new Olm sessions in ${this.roomId}`,",
          "390:                     devicesWithoutSession,",
          "391:                 );",
          "392:                 const errorDevices: IOlmDevice[] = [];",
          "399:                 const start = Date.now();",
          "400:                 const failedServers: string[] = [];",
          "401:                 await this.shareKeyWithDevices(",
          "402:                     session, key, payload, devicesWithoutSession, errorDevices,",
          "403:                     singleOlmCreationPhase ? 10000 : 2000, failedServers,",
          "404:                 );",
          "405:                 logger.debug(`Shared keys (end phase 1) with new Olm sessions in ${this.roomId}`);",
          "407:                 if (!singleOlmCreationPhase && (Date.now() - start < 10000)) {",
          "410:                     (async () => {",
          "416:                         const retryDevices: Record<string, DeviceInfo[]> = {};",
          "417:                         const failedServerMap = new Set;",
          "418:                         for (const server of failedServers) {",
          "419:                             failedServerMap.add(server);",
          "420:                         }",
          "421:                         const failedDevices: IOlmDevice[] = [];",
          "422:                         for (const { userId, deviceInfo } of errorDevices) {",
          "423:                             const userHS = userId.slice(userId.indexOf(\":\") + 1);",
          "424:                             if (failedServerMap.has(userHS)) {",
          "425:                                 retryDevices[userId] = retryDevices[userId] || [];",
          "426:                                 retryDevices[userId].push(deviceInfo);",
          "427:                             } else {",
          "430:                                 failedDevices.push({ userId, deviceInfo });",
          "431:                             }",
          "432:                         }",
          "434:                         logger.debug(`Sharing keys (start phase 2) with new Olm sessions in ${this.roomId}`);",
          "435:                         await this.shareKeyWithDevices(",
          "436:                             session, key, payload, retryDevices, failedDevices, 30000,",
          "437:                         );",
          "438:                         logger.debug(`Shared keys (end phase 2) with new Olm sessions in ${this.roomId}`);",
          "440:                         await this.notifyFailedOlmDevices(session, key, failedDevices);",
          "441:                     })();",
          "442:                 } else {",
          "443:                     await this.notifyFailedOlmDevices(session, key, errorDevices);",
          "444:                 }",
          "445:                 logger.debug(`Shared keys (all phases done) with new Olm sessions in ${this.roomId}`);",
          "446:             })(),",
          "447:             (async () => {",
          "448:                 logger.debug(`There are ${Object.entries(blocked).length} blocked devices in ${this.roomId}`,",
          "449:                     Object.entries(blocked));",
          "452:                 logger.debug(`Notifying newly blocked devices in ${this.roomId}`);",
          "453:                 const blockedMap: Record<string, Record<string, { device: IBlockedDevice }>> = {};",
          "454:                 let blockedCount = 0;",
          "455:                 for (const [userId, userBlockedDevices] of Object.entries(blocked)) {",
          "456:                     for (const [deviceId, device] of Object.entries(userBlockedDevices)) {",
          "457:                         if (",
          "458:                             !session.blockedDevicesNotified[userId] ||",
          "459:                             session.blockedDevicesNotified[userId][deviceId] === undefined",
          "460:                         ) {",
          "461:                             blockedMap[userId] = blockedMap[userId] || {};",
          "462:                             blockedMap[userId][deviceId] = { device };",
          "463:                             blockedCount++;",
          "464:                         }",
          "465:                     }",
          "466:                 }",
          "468:                 await this.notifyBlockedDevices(session, blockedMap);",
          "469:                 logger.debug(`Notified ${blockedCount} newly blocked devices in ${this.roomId}`, blockedMap);",
          "470:             })(),",
          "471:         ]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "594:         return this.crypto.encryptAndSendToDevices(",
          "595:             userDeviceMap,",
          "596:             payload,",
          "600:             for (const userId of Object.keys(contentMap)) {",
          "601:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "602:                     session.markSharedWithDevice(",
          "603:                         userId,",
          "604:                         deviceId,",
          "606:                         chainIndex,",
          "607:                     );",
          "608:                 }",
          "",
          "[Removed Lines]",
          "597:         ).then((result) => {",
          "598:             const { contentMap, deviceInfoByDeviceId } = result;",
          "605:                         deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "",
          "[Added Lines]",
          "609:         ).then(({ contentMap, deviceInfoByUserIdAndDeviceId }) => {",
          "616:                         deviceInfoByUserIdAndDeviceId.get(userId).get(deviceId).getIdentityKey(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "798:         logger.debug(`Ensuring Olm sessions for devices in ${this.roomId}`);",
          "799:         const devicemap = await olmlib.ensureOlmSessionsForDevices(",
          "800:             this.olmDevice, this.baseApis, devicesByUser, false, otkTimeout, failedServers,",
          "802:         );",
          "803:         logger.debug(`Ensured Olm sessions for devices in ${this.roomId}`);",
          "",
          "[Removed Lines]",
          "801:             logger.withPrefix(`[${this.roomId}]`),",
          "",
          "[Added Lines]",
          "812:             logger.withPrefix?.(`[${this.roomId}]`),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "940:     public prepareToEncrypt(room: Room): void {",
          "946:             logger.debug(",
          "947:                 `Already started preparing to encrypt for ${this.roomId} ` +",
          "948:                 `${elapsedTime} ms ago, skipping`,",
          "",
          "[Removed Lines]",
          "941:         if (this.encryptionPreparation) {",
          "945:             const elapsedTime = Date.now() - this.encryptionPreparationMetadata.startTime;",
          "",
          "[Added Lines]",
          "952:         if (this.encryptionPreparation != null) {",
          "956:             const elapsedTime = Date.now() - this.encryptionPreparation.startTime;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "953:         logger.debug(`Preparing to encrypt events for ${this.roomId}`);",
          "956:             startTime: Date.now(),",
          "981:     }",
          "",
          "[Removed Lines]",
          "955:         this.encryptionPreparationMetadata = {",
          "957:         };",
          "958:         this.encryptionPreparation = (async () => {",
          "959:             try {",
          "960:                 logger.debug(`Getting devices in ${this.roomId}`);",
          "961:                 const [devicesInRoom, blocked] = await this.getDevicesInRoom(room);",
          "963:                 if (this.crypto.getGlobalErrorOnUnknownDevices()) {",
          "967:                     this.removeUnknownDevices(devicesInRoom);",
          "968:                 }",
          "970:                 logger.debug(`Ensuring outbound session in ${this.roomId}`);",
          "971:                 await this.ensureOutboundSession(room, devicesInRoom, blocked, true);",
          "973:                 logger.debug(`Ready to encrypt events for ${this.roomId}`);",
          "974:             } catch (e) {",
          "975:                 logger.error(`Failed to prepare to encrypt events for ${this.roomId}`, e);",
          "976:             } finally {",
          "977:                 delete this.encryptionPreparationMetadata;",
          "978:                 delete this.encryptionPreparation;",
          "979:             }",
          "980:         })();",
          "",
          "[Added Lines]",
          "966:         this.encryptionPreparation = {",
          "968:             promise: (async () => {",
          "969:                 try {",
          "970:                     logger.debug(`Getting devices in ${this.roomId}`);",
          "971:                     const [devicesInRoom, blocked] = await this.getDevicesInRoom(room);",
          "973:                     if (this.crypto.getGlobalErrorOnUnknownDevices()) {",
          "977:                         this.removeUnknownDevices(devicesInRoom);",
          "978:                     }",
          "980:                     logger.debug(`Ensuring outbound session in ${this.roomId}`);",
          "981:                     await this.ensureOutboundSession(room, devicesInRoom, blocked, true);",
          "983:                     logger.debug(`Ready to encrypt events for ${this.roomId}`);",
          "984:                 } catch (e) {",
          "985:                     logger.error(`Failed to prepare to encrypt events for ${this.roomId}`, e);",
          "986:                 } finally {",
          "987:                     delete this.encryptionPreparation;",
          "988:                 }",
          "989:             })(),",
          "990:         };",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "992:     public async encryptMessage(room: Room, eventType: string, content: object): Promise<object> {",
          "993:         logger.log(`Starting to encrypt event for ${this.roomId}`);",
          "999:             try {",
          "1001:             } catch (e) {",
          "",
          "[Removed Lines]",
          "995:         if (this.encryptionPreparation) {",
          "1000:                 await this.encryptionPreparation;",
          "",
          "[Added Lines]",
          "1005:         if (this.encryptionPreparation != null) {",
          "1010:                 await this.encryptionPreparation.promise;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1213:         this.addEventToPendingList(event);",
          "1216:         try {",
          "1217:             res = await this.olmDevice.decryptGroupMessage(",
          "1218:                 event.getRoomId(), content.sender_key, content.session_id, content.ciphertext,",
          "",
          "[Removed Lines]",
          "1215:         let res;",
          "",
          "[Added Lines]",
          "1225:         let res: IDecryptedGroupMessage;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1243:         if (res === null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1256:             this.crypto.backupManager.queryKeyBackupRateLimited(event.getRoomId(), content.session_id).catch(() => {});",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1335:         if (!senderPendingEvents.has(sessionId)) {",
          "1336:             senderPendingEvents.set(sessionId, new Set());",
          "1337:         }",
          "1339:     }",
          "",
          "[Removed Lines]",
          "1338:         senderPendingEvents.get(sessionId).add(event);",
          "",
          "[Added Lines]",
          "1350:         senderPendingEvents.get(sessionId)?.add(event);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1375:         let senderKey = event.getSenderKey();",
          "1377:         let exportFormat = false;",
          "1380:         if (!content.room_id ||",
          "1383:         ) {",
          "1384:             logger.error(\"key event is missing fields\");",
          "1385:             return;",
          "",
          "[Removed Lines]",
          "1372:     public onRoomKeyEvent(event: MatrixEvent): Promise<void> {",
          "1373:         const content = event.getContent();",
          "1374:         const sessionId = content.session_id;",
          "1376:         let forwardingKeyChain = [];",
          "1378:         let keysClaimed;",
          "1381:             !sessionId ||",
          "1382:             !content.session_key",
          "",
          "[Added Lines]",
          "1384:     public async onRoomKeyEvent(event: MatrixEvent): Promise<void> {",
          "1385:         const content = event.getContent<Partial<IMessage[\"content\"]>>();",
          "1387:         let forwardingKeyChain: string[] = [];",
          "1389:         let keysClaimed: ReturnType<MatrixEvent[\"getKeysClaimed\"]>;",
          "1392:             !content.session_key ||",
          "1393:             !content.session_id ||",
          "1394:             !content.algorithm",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1393:         if (event.getType() == \"m.forwarded_room_key\") {",
          "1394:             exportFormat = true;",
          "1401:             forwardingKeyChain = forwardingKeyChain.slice();",
          "1402:             forwardingKeyChain.push(senderKey);",
          "1406:                 logger.error(\"forwarded_room_key event is missing sender_key field\");",
          "1407:                 return;",
          "1408:             }",
          "1410:             const ed25519Key = content.sender_claimed_ed25519_key;",
          "1411:             if (!ed25519Key) {",
          "",
          "[Removed Lines]",
          "1395:             forwardingKeyChain = content.forwarding_curve25519_key_chain;",
          "1396:             if (!Array.isArray(forwardingKeyChain)) {",
          "1397:                 forwardingKeyChain = [];",
          "1398:             }",
          "1404:             senderKey = content.sender_key;",
          "1405:             if (!senderKey) {",
          "",
          "[Added Lines]",
          "1407:             forwardingKeyChain = Array.isArray(content.forwarding_curve25519_key_chain) ?",
          "1408:                 content.forwarding_curve25519_key_chain : [];",
          "1414:             if (!content.sender_key) {",
          "1418:             senderKey = content.sender_key;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1426:         if (content[\"org.matrix.msc3061.shared_history\"]) {",
          "1427:             extraSessionData.sharedHistory = true;",
          "1428:         }",
          "1450:                 });",
          "1455:             logger.error(`Error handling m.room_key_event: ${e}`);",
          "1457:     }",
          "",
          "[Removed Lines]",
          "1429:         return this.olmDevice.addInboundGroupSession(",
          "1430:             content.room_id, senderKey, forwardingKeyChain, sessionId,",
          "1431:             content.session_key, keysClaimed,",
          "1432:             exportFormat, extraSessionData,",
          "1433:         ).then(() => {",
          "1435:             this.retryDecryption(senderKey, sessionId)",
          "1436:                 .then((success) => {",
          "1442:                     if (success) {",
          "1443:                         this.crypto.cancelRoomKeyRequest({",
          "1444:                             algorithm: content.algorithm,",
          "1445:                             room_id: content.room_id,",
          "1446:                             session_id: content.session_id,",
          "1447:                             sender_key: senderKey,",
          "1448:                         });",
          "1449:                     }",
          "1451:         }).then(() => {",
          "1453:             this.crypto.backupManager.backupGroupSession(senderKey, content.session_id);",
          "1454:         }).catch((e) => {",
          "1456:         });",
          "",
          "[Added Lines]",
          "1440:         try {",
          "1441:             await this.olmDevice.addInboundGroupSession(",
          "1442:                 content.room_id,",
          "1443:                 senderKey,",
          "1444:                 forwardingKeyChain,",
          "1445:                 content.session_id,",
          "1446:                 content.session_key,",
          "1447:                 keysClaimed,",
          "1448:                 exportFormat,",
          "1449:                 extraSessionData,",
          "1450:             );",
          "1453:             if (await this.retryDecryption(senderKey, content.session_id)) {",
          "1459:                 this.crypto.cancelRoomKeyRequest({",
          "1460:                     algorithm: content.algorithm,",
          "1461:                     room_id: content.room_id,",
          "1462:                     session_id: content.session_id,",
          "1463:                     sender_key: senderKey,",
          "1465:             }",
          "1468:             await this.crypto.backupManager.backupGroupSession(senderKey, content.session_id);",
          "1469:         } catch (e) {",
          "1471:         }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1655:         const extraSessionData: any = {};",
          "1656:         if (opts.untrusted || session.untrusted) {",
          "1657:             extraSessionData.untrusted = true;",
          "",
          "[Removed Lines]",
          "1654:     public importRoomKey(session: IMegolmSessionData, opts: any = {}): Promise<void> {",
          "",
          "[Added Lines]",
          "1669:     public importRoomKey(",
          "1670:         session: IMegolmSessionData,",
          "1671:         opts: { untrusted?: boolean, source?: string } = {},",
          "1672:     ): Promise<void> {",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/olm.ts||src/crypto/algorithms/olm.ts": [
          "File: src/crypto/algorithms/olm.ts -> src/crypto/algorithms/olm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import { Room } from '../../models/room';",
          "33: import { MatrixEvent } from \"../..\";",
          "34: import { IEventDecryptionResult } from \"../index\";",
          "36: const DeviceVerification = DeviceInfo.DeviceVerification;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import { IInboundSession } from \"../OlmDevice\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: class OlmEncryption extends EncryptionAlgorithm {",
          "53:     private sessionPrepared = false;",
          "",
          "[Removed Lines]",
          "54:     private prepPromise: Promise<void> = null;",
          "",
          "[Added Lines]",
          "55:     private prepPromise: Promise<void> | null = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:             ciphertext: {},",
          "117:         };",
          "121:         for (let i = 0; i < users.length; ++i) {",
          "122:             const userId = users[i];",
          "125:             for (let j = 0; j < devices.length; ++j) {",
          "126:                 const deviceInfo = devices[j];",
          "",
          "[Removed Lines]",
          "119:         const promises = [];",
          "123:             const devices = this.crypto.getStoredDevicesForUser(userId);",
          "",
          "[Added Lines]",
          "120:         const promises: Promise<void>[] = [];",
          "124:             const devices = this.crypto.getStoredDevicesForUser(userId) || [];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:             throw new DecryptionError(",
          "240:                 \"OLM_BAD_ROOM\",",
          "241:                 \"Message intended for room \" + payload.room_id, {",
          "243:                 },",
          "244:             );",
          "245:         }",
          "",
          "[Removed Lines]",
          "242:                     reported_room: event.getRoomId(),",
          "",
          "[Added Lines]",
          "243:                     reported_room: event.getRoomId() || \"ROOM_ID_UNDEFINED\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "335:         try {",
          "336:             res = await this.olmDevice.createInboundSession(",
          "337:                 theirDeviceIdentityKey, message.type, message.body,",
          "",
          "[Removed Lines]",
          "334:         let res;",
          "",
          "[Added Lines]",
          "335:         let res: IInboundSession;",
          "",
          "---------------"
        ],
        "src/crypto/backup.ts||src/crypto/backup.ts": [
          "File: src/crypto/backup.ts -> src/crypto/backup.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import { CryptoEvent, IMegolmSessionData } from \"./index\";",
          "37: const KEY_BACKUP_KEYS_PER_REQUEST = 200;",
          "39: type AuthData = IKeyBackupInfo[\"auth_data\"];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: const KEY_BACKUP_CHECK_RATE_LIMIT = 5000; // ms",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     public backupInfo: IKeyBackupInfo | undefined; // The info dict from /room_keys/version",
          "112:     public checkedForBackup: boolean; // Have we checked the server for a backup we can use?",
          "113:     private sendingBackups: boolean; // Are we currently sending backups?",
          "114:     constructor(private readonly baseApis: MatrixClient, public readonly getKey: GetKey) {",
          "115:         this.checkedForBackup = false;",
          "116:         this.sendingBackups = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     private sessionLastCheckAttemptedTime: Record<string, number> = {}; // When did we last try to check the server for a given session id?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:         return this.checkAndStart();",
          "283:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:     public async queryKeyBackupRateLimited(",
          "293:         targetRoomId: string | undefined,",
          "294:         targetSessionId: string | undefined,",
          "295:     ): Promise<void> {",
          "296:         if (!this.backupInfo) { return; }",
          "298:         const now = new Date().getTime();",
          "299:         if (",
          "300:             !this.sessionLastCheckAttemptedTime[targetSessionId]",
          "301:                 || now - this.sessionLastCheckAttemptedTime[targetSessionId] > KEY_BACKUP_CHECK_RATE_LIMIT",
          "302:         ) {",
          "303:             this.sessionLastCheckAttemptedTime[targetSessionId] = now;",
          "304:             await this.baseApis.restoreKeyBackupWithCache(targetRoomId, targetSessionId, this.backupInfo, {});",
          "305:         }",
          "306:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:             const delay = Math.random() * maxDelay;",
          "432:             let numFailures = 0; // number of consecutive failures",
          "433:             for (;;) {",
          "434:                 if (!this.algorithm) {",
          "",
          "[Removed Lines]",
          "431:             await sleep(delay, undefined);",
          "",
          "[Added Lines]",
          "454:             await sleep(delay);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:                 }",
          "463:                 if (numFailures) {",
          "466:                 }",
          "467:             }",
          "468:         } finally {",
          "",
          "[Removed Lines]",
          "465:                     await sleep(1000 * Math.pow(2, Math.min(numFailures - 1, 4)), undefined);",
          "",
          "[Added Lines]",
          "488:                     await sleep(1000 * Math.pow(2, Math.min(numFailures - 1, 4)));",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: import { decodeRecoveryKey, encodeRecoveryKey } from './recoverykey';",
          "60: import { VerificationRequest } from \"./verification/request/VerificationRequest\";",
          "61: import { InRoomChannel, InRoomRequests } from \"./verification/request/InRoomChannel\";",
          "63: import { IllegalMethod } from \"./verification/IllegalMethod\";",
          "64: import { KeySignatureUploadError } from \"../errors\";",
          "65: import { calculateKeyCheck, decryptAES, encryptAES } from './aes';",
          "",
          "[Removed Lines]",
          "62: import { ToDeviceChannel, ToDeviceRequests } from \"./verification/request/ToDeviceChannel\";",
          "",
          "[Added Lines]",
          "62: import { ToDeviceChannel, ToDeviceRequests, Request } from \"./verification/request/ToDeviceChannel\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     ISignedKey,",
          "77:     IUploadKeySignaturesResponse,",
          "78:     MatrixClient,",
          "80: } from \"../client\";",
          "81: import type { IRoomEncryption, RoomList } from \"./RoomList\";",
          "82: import { IKeyBackupInfo } from \"./keybackup\";",
          "",
          "[Removed Lines]",
          "79:     SessionStore,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123: export interface IBootstrapCrossSigningOpts {",
          "124:     setupNewCrossSigning?: boolean;",
          "126: }",
          "",
          "[Removed Lines]",
          "125:     authUploadDeviceSigningKeys?(makeRequest: (authData: any) => {}): Promise<void>;",
          "",
          "[Added Lines]",
          "124:     authUploadDeviceSigningKeys?(makeRequest: (authData: any) => Promise<{}>): Promise<void>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:     setRequestByChannel(channel: IVerificationChannel, request: VerificationRequest): void;",
          "204: }",
          "206: export enum CryptoEvent {",
          "207:     DeviceVerificationChanged = \"deviceVerificationChanged\",",
          "208:     UserTrustStatusChanged = \"userTrustStatusChanged\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: export interface IEncryptedContent {",
          "207:     algorithm: string;",
          "208:     sender_key: string;",
          "209:     ciphertext: Record<string, string>;",
          "210: }",
          "213: interface IEncryptAndSendToDevicesResult {",
          "214:     contentMap: Record<string, Record<string, IEncryptedContent>>;",
          "215:     deviceInfoByUserIdAndDeviceId: Map<string, Map<string, DeviceInfo>>;",
          "216: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:     constructor(",
          "346:         public readonly baseApis: MatrixClient,",
          "348:         public readonly userId: string,",
          "349:         private readonly deviceId: string,",
          "350:         private readonly clientStore: IStore,",
          "",
          "[Removed Lines]",
          "347:         public readonly sessionStore: SessionStore,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1077:         return this.secretStorage.get(name);",
          "1078:     }",
          "1085:     }",
          "1087:     public requestSecret(name: string, devices: string[]): ISecretRequest {",
          "",
          "[Removed Lines]",
          "1080:     public isSecretStored(",
          "1081:         name: string,",
          "1082:         checkKey?: boolean,",
          "1083:     ): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "1084:         return this.secretStorage.isStored(name, checkKey);",
          "",
          "[Added Lines]",
          "1088:     public isSecretStored(name: string): Promise<Record<string, ISecretStorageKeyInfo> | null> {",
          "1089:         return this.secretStorage.isStored(name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1729:         logger.info(`Finished device verification upgrade for ${userId}`);",
          "1730:     }",
          "1741:     public enableLazyLoading(): void {",
          "",
          "[Removed Lines]",
          "1732:     public async setTrustedBackupPubKey(trustedPubKey: string): Promise<void> {",
          "1735:         this.sessionStore.setLocalTrustedBackupPubKey(trustedPubKey);",
          "1736:         await this.backupManager.checkKeyBackup();",
          "1737:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2322:         userId: string,",
          "2323:         deviceId: string,",
          "2324:         transactionId: string = null,",
          "2327:         if (transactionId) {",
          "2328:             request = this.toDeviceVerificationRequests.getRequestBySenderAndTxnId(userId, transactionId);",
          "2329:             if (!request) {",
          "",
          "[Removed Lines]",
          "2325:     ): any { // TODO types",
          "2326:         let request;",
          "",
          "[Added Lines]",
          "2323:     ): VerificationBase<any, any> {",
          "2324:         let request: Request;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2598:         if (!existingConfig) {",
          "2599:             storeConfigPromise = this.roomList.setRoomEncryption(roomId, config);",
          "2600:         }",
          "",
          "[Removed Lines]",
          "2597:         let storeConfigPromise = null;",
          "",
          "[Added Lines]",
          "2595:         let storeConfigPromise: Promise<void> = null;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3131:     public encryptAndSendToDevices(",
          "3132:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "3133:         payload: object,",
          "3141:                 algorithm: olmlib.OLM_ALGORITHM,",
          "3142:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "3143:                 ciphertext: {},",
          "3144:             };",
          "3151:             if (!contentMap[userId]) {",
          "3152:                 contentMap[userId] = {};",
          "3153:             }",
          "3154:             contentMap[userId][deviceId] = encryptedContent;",
          "3159:             promises.push(",
          "3160:                 olmlib.ensureOlmSessionsForDevices(",
          "3161:                     this.olmDevice,",
          "3162:                     this.baseApis,",
          "3164:                 ).then(() =>",
          "3165:                     olmlib.encryptMessageForDevice(",
          "3166:                         encryptedContent.ciphertext,",
          "",
          "[Removed Lines]",
          "3134:     ): Promise<{contentMap, deviceInfoByDeviceId}> {",
          "3135:         const contentMap = {};",
          "3136:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "3138:         const promises = [];",
          "3139:         for (let i = 0; i < userDeviceInfoArr.length; i++) {",
          "3140:             const encryptedContent = {",
          "3145:             const val = userDeviceInfoArr[i];",
          "3146:             const userId = val.userId;",
          "3147:             const deviceInfo = val.deviceInfo;",
          "3148:             const deviceId = deviceInfo.deviceId;",
          "3149:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
          "3156:             const devicesByUser = {};",
          "3157:             devicesByUser[userId] = [deviceInfo];",
          "3163:                     devicesByUser,",
          "",
          "[Added Lines]",
          "3132:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "3133:         const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "3134:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "3136:         const promises: Promise<unknown>[] = [];",
          "3137:         for (const { userId, deviceInfo } of userDeviceInfoArr) {",
          "3138:             const deviceId = deviceInfo.deviceId;",
          "3139:             const encryptedContent: IEncryptedContent = {",
          "3146:             let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "3148:             if (userIdDeviceInfo === undefined) {",
          "3149:                 userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "3150:                 deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "3151:             }",
          "3154:             userIdDeviceInfo.set(deviceId, deviceInfo);",
          "3165:                     { [userId]: [deviceInfo] },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3183:             for (const userId of Object.keys(contentMap)) {",
          "3184:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "3185:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "3190:                         delete contentMap[userId][deviceId];",
          "3191:                     }",
          "3192:                 }",
          "3194:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "3196:                     delete contentMap[userId];",
          "3197:                 }",
          "3198:             }",
          "",
          "[Removed Lines]",
          "3186:                         logger.log(",
          "3187:                             \"No ciphertext for device \" +",
          "3188:                             userId + \":\" + deviceId + \": pruning\",",
          "3189:                         );",
          "3195:                     logger.log(\"Pruned all devices for user \" + userId);",
          "",
          "[Added Lines]",
          "3188:                         logger.log(`No ciphertext for device ${userId}:${deviceId}: pruning`);",
          "3194:                     logger.log(`Pruned all devices for user ${userId}`);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3204:             }",
          "3206:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3208:             ).catch(error => {",
          "3209:                 logger.error(\"sendToDevice failed\", error);",
          "3210:                 throw error;",
          "",
          "[Removed Lines]",
          "3207:                 (response) => ({ contentMap, deviceInfoByDeviceId }),",
          "",
          "[Added Lines]",
          "3206:                 (response) => ({ contentMap, deviceInfoByUserIdAndDeviceId }),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3402:                     event.on(MatrixEventEvent.Status, statusListener);",
          "3403:                 });",
          "3404:             } catch (err) {",
          "3406:                 return;",
          "3407:             } finally {",
          "3408:                 event.removeListener(MatrixEventEvent.LocalEventIdReplaced, eventIdListener);",
          "",
          "[Removed Lines]",
          "3405:                 logger.error(\"error while waiting for the verification event to be sent: \" + err.message);",
          "",
          "[Added Lines]",
          "3404:                 logger.error(\"error while waiting for the verification event to be sent: \", err);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3426:         try {",
          "3427:             await request.channel.handleEvent(event, request, isLiveEvent);",
          "3428:         } catch (err) {",
          "3430:         }",
          "3431:         const shouldEmit = isNewRequest &&",
          "3432:             !request.initiatedByMe &&",
          "",
          "[Removed Lines]",
          "3429:             logger.error(\"error while handling verification event: \" + err.message);",
          "",
          "[Added Lines]",
          "3428:             logger.error(\"error while handling verification event\", err);",
          "",
          "---------------"
        ],
        "src/crypto/keybackup.ts||src/crypto/keybackup.ts": [
          "File: src/crypto/keybackup.ts -> src/crypto/keybackup.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { ISigned } from \"../@types/signed\";",
          "19: export interface IKeyBackupSession {",
          "20:     first_message_index: number; // eslint-disable-line camelcase",
          "21:     forwarded_count: number; // eslint-disable-line camelcase",
          "22:     is_verified: boolean; // eslint-disable-line camelcase",
          "29: }",
          "31: export interface IKeyBackupRoomSessions {",
          "",
          "[Removed Lines]",
          "23:     session_data: { // eslint-disable-line camelcase",
          "24:         ciphertext: string;",
          "25:         ephemeral: string;",
          "26:         mac: string;",
          "27:         iv: string;",
          "28:     };",
          "",
          "[Added Lines]",
          "18: import { IEncryptedPayload } from \"./aes\";",
          "20: export interface Curve25519SessionData {",
          "21:     ciphertext: string;",
          "22:     ephemeral: string;",
          "23:     mac: string;",
          "24: }",
          "30:     session_data: Curve25519SessionData | IEncryptedPayload; // eslint-disable-line camelcase",
          "",
          "---------------"
        ],
        "src/crypto/olmlib.ts||src/crypto/olmlib.ts": [
          "File: src/crypto/olmlib.ts -> src/crypto/olmlib.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: export async function encryptMessageForDevice(",
          "77:     resultsObject: Record<string, string>,",
          "78:     ourUserId: string,",
          "80:     olmDevice: OlmDevice,",
          "81:     recipientUserId: string,",
          "82:     recipientDevice: DeviceInfo,",
          "",
          "[Removed Lines]",
          "79:     ourDeviceId: string,",
          "",
          "[Added Lines]",
          "79:     ourDeviceId: string | undefined,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:     }",
          "325:     const oneTimeKeyAlgorithm = \"signed_curve25519\";",
          "327:     let taskDetail = `one-time keys for ${devicesWithoutSession.length} devices`;",
          "328:     try {",
          "329:         log.debug(`Claiming ${taskDetail}`);",
          "",
          "[Removed Lines]",
          "326:     let res;",
          "",
          "[Added Lines]",
          "326:     let res: IClaimOTKsResult;",
          "",
          "---------------"
        ],
        "src/crypto/recoverykey.ts||src/crypto/recoverykey.ts": [
          "File: src/crypto/recoverykey.ts -> src/crypto/recoverykey.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: const OLM_RECOVERY_KEY_PREFIX = [0x8B, 0x01];",
          "23: export function encodeRecoveryKey(key: ArrayLike<number>): string {",
          "25:     buf.set(OLM_RECOVERY_KEY_PREFIX, 0);",
          "26:     buf.set(key, OLM_RECOVERY_KEY_PREFIX.length);",
          "",
          "[Removed Lines]",
          "24:     const buf = new Buffer(OLM_RECOVERY_KEY_PREFIX.length + key.length + 1);",
          "",
          "[Added Lines]",
          "24:     const buf = Buffer.alloc(OLM_RECOVERY_KEY_PREFIX.length + key.length + 1);",
          "",
          "---------------"
        ],
        "src/crypto/store/indexeddb-crypto-store.ts||src/crypto/store/indexeddb-crypto-store.ts": [
          "File: src/crypto/store/indexeddb-crypto-store.ts -> src/crypto/store/indexeddb-crypto-store.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:             }",
          "158:         }).then(backend => {",
          "159:             this.backend = backend;",
          "161:         });",
          "163:         return this.backendPromise;",
          "",
          "[Removed Lines]",
          "160:             return backend as CryptoStore;",
          "",
          "[Added Lines]",
          "160:             return backend;",
          "",
          "---------------"
        ],
        "src/crypto/verification/request/VerificationRequest.ts||src/crypto/verification/request/VerificationRequest.ts": [
          "File: src/crypto/verification/request/VerificationRequest.ts -> src/crypto/verification/request/VerificationRequest.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:         }",
          "843:         const isUnexpectedRequest = type === REQUEST_TYPE && this.phase !== PHASE_UNSENT;",
          "850:         if (this.phase !== PHASE_UNSENT && (isUnexpectedRequest || isUnexpectedReady)) {",
          "851:             logger.warn(`Cancelling, unexpected ${type} verification ` +",
          "",
          "[Removed Lines]",
          "844:         const isUnexpectedReady = type === READY_TYPE && this.phase !== PHASE_REQUESTED;",
          "",
          "[Added Lines]",
          "844:         const isUnexpectedReady = type === READY_TYPE && this.phase !== PHASE_REQUESTED && this.phase !== PHASE_STARTED;",
          "",
          "---------------"
        ],
        "src/http-api.ts||src/http-api.ts": [
          "File: src/http-api.ts -> src/http-api.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: export const PREFIX_R0 = \"/_matrix/client/r0\";",
          "53: export const PREFIX_V1 = \"/_matrix/client/v1\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: export const PREFIX_V3 = \"/_matrix/client/v3\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:                                 resp = bodyParser(resp);",
          "404:                             }",
          "405:                         } catch (err) {",
          "407:                             cb(err);",
          "408:                             return;",
          "409:                         }",
          "",
          "[Removed Lines]",
          "406:                             err.http_status = xhr.status;",
          "",
          "[Added Lines]",
          "411:                             err.httpStatus = xhr.status;",
          "",
          "---------------"
        ],
        "src/interactive-auth.ts||src/interactive-auth.ts": [
          "File: src/interactive-auth.ts -> src/interactive-auth.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: export interface IAuthData {",
          "46:     session?: string;",
          "47:     completed?: string[];",
          "48:     flows?: IFlow[];",
          "49:     params?: Record<string, Record<string, any>>;",
          "50:     errcode?: string;",
          "51:     error?: string;",
          "52: }",
          "54: export enum AuthType {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     type?: string;",
          "50:     available_flows?: IFlow[];",
          "51:     stages?: string[];",
          "52:     required_stages?: AuthType[];",
          "54:     data?: Record<string, string>;",
          "57:     user_id?: string;",
          "58:     device_id?: string;",
          "59:     access_token?: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:     private chosenFlow: IFlow = null;",
          "204:     private currentStage: string = null;",
          "208:     private submitPromise: Promise<void> = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     private emailAttempt = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408:         this.emailSid = sid;",
          "409:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:     public requestEmailToken = async () => {",
          "425:         if (!this.requestingEmailToken) {",
          "426:             logger.trace(\"Requesting email token. Attempt: \" + this.emailAttempt);",
          "431:             this.requestingEmailToken = true;",
          "432:             try {",
          "433:                 const requestTokenResult = await this.requestEmailTokenCallback(",
          "434:                     this.inputs.emailAddress,",
          "435:                     this.clientSecret,",
          "436:                     this.emailAttempt++,",
          "437:                     this.data.session,",
          "438:                 );",
          "439:                 this.emailSid = requestTokenResult.sid;",
          "440:                 logger.trace(\"Email token request succeeded\");",
          "441:             } finally {",
          "442:                 this.requestingEmailToken = false;",
          "443:             }",
          "444:         } else {",
          "445:             logger.warn(\"Could not request email token: Already requesting\");",
          "446:         }",
          "447:     };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458:                 return;",
          "459:             }",
          "471:                 try {",
          "",
          "[Removed Lines]",
          "461:             if (",
          "462:                 !this.emailSid &&",
          "463:                 !this.requestingEmailToken &&",
          "464:                 this.chosenFlow.stages.includes(AuthType.Email)",
          "465:             ) {",
          "470:                 this.requestingEmailToken = true;",
          "472:                     const requestTokenResult = await this.requestEmailTokenCallback(",
          "473:                         this.inputs.emailAddress,",
          "474:                         this.clientSecret,",
          "475:                         1, // TODO: Multiple send attempts?",
          "476:                         this.data.session,",
          "477:                     );",
          "478:                     this.emailSid = requestTokenResult.sid;",
          "",
          "[Added Lines]",
          "499:             if (!this.emailSid && this.chosenFlow.stages.includes(AuthType.Email)) {",
          "501:                     await this.requestEmailToken();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "492:                     this.attemptAuthDeferred.reject(e);",
          "493:                     this.attemptAuthDeferred = null;",
          "496:                 }",
          "497:             }",
          "498:         }",
          "",
          "[Removed Lines]",
          "494:                 } finally {",
          "495:                     this.requestingEmailToken = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/matrix.ts||src/matrix.ts": [
          "File: src/matrix.ts -> src/matrix.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: export * from \"./service-types\";",
          "42: export * from \"./store/memory\";",
          "43: export * from \"./store/indexeddb\";",
          "45: export * from \"./crypto/store/memory-crypto-store\";",
          "46: export * from \"./crypto/store/indexeddb-crypto-store\";",
          "47: export * from \"./content-repo\";",
          "",
          "[Removed Lines]",
          "44: export * from \"./store/session/webstorage\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/models/beacon.ts||src/models/beacon.ts": [
          "File: src/models/beacon.ts -> src/models/beacon.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     public readonly roomId: string;",
          "55:     private _beaconInfo: BeaconInfoState;",
          "56:     private _isLive: boolean;",
          "60:     constructor(",
          "61:         private rootEvent: MatrixEvent,",
          "",
          "[Removed Lines]",
          "57:     private livenessWatchInterval: ReturnType<typeof setInterval>;",
          "58:     private _latestLocationState: BeaconLocationState | undefined;",
          "",
          "[Added Lines]",
          "57:     private livenessWatchTimeout: ReturnType<typeof setTimeout>;",
          "58:     private _latestLocationEvent: MatrixEvent | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     }",
          "92:     public get latestLocationState(): BeaconLocationState | undefined {",
          "94:     }",
          "96:     public update(beaconInfoEvent: MatrixEvent): void {",
          "",
          "[Removed Lines]",
          "93:         return this._latestLocationState;",
          "",
          "[Added Lines]",
          "93:         return this._latestLocationEvent && parseBeaconContent(this._latestLocationEvent.getContent());",
          "94:     }",
          "96:     public get latestLocationEvent(): MatrixEvent | undefined {",
          "97:         return this._latestLocationEvent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     }",
          "111:     public destroy(): void {",
          "114:         }",
          "116:         this._isLive = false;",
          "",
          "[Removed Lines]",
          "112:         if (this.livenessWatchInterval) {",
          "113:             clearInterval(this.livenessWatchInterval);",
          "",
          "[Added Lines]",
          "116:         if (this.livenessWatchTimeout) {",
          "117:             clearTimeout(this.livenessWatchTimeout);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:     public monitorLiveness(): void {",
          "127:         }",
          "129:         this.checkLiveness();",
          "130:         if (this.isLive) {",
          "131:             const expiryInMs = (this._beaconInfo?.timestamp + this._beaconInfo?.timeout) - Date.now();",
          "132:             if (expiryInMs > 1) {",
          "134:                     () => { this.monitorLiveness(); },",
          "135:                     expiryInMs,",
          "136:                 );",
          "137:             }",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "125:         if (this.livenessWatchInterval) {",
          "126:             clearInterval(this.livenessWatchInterval);",
          "133:                 this.livenessWatchInterval = setInterval(",
          "",
          "[Added Lines]",
          "129:         if (this.livenessWatchTimeout) {",
          "130:             clearTimeout(this.livenessWatchTimeout);",
          "137:                 this.livenessWatchTimeout = setTimeout(",
          "142:         } else if (this._beaconInfo?.timestamp > Date.now()) {",
          "145:             this.livenessWatchTimeout = setTimeout(",
          "146:                 () => { this.monitorLiveness(); },",
          "147:                 this.beaconInfo?.timestamp - Date.now(),",
          "148:             );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:         const latestLocationEvent = validLocationEvents.sort(sortEventsByLatestContentTimestamp)?.[0];",
          "163:         if (latestLocationEvent) {",
          "165:             this.emit(BeaconEvent.LocationUpdate, this.latestLocationState);",
          "166:         }",
          "167:     }",
          "169:     private clearLatestLocation = () => {",
          "171:         this.emit(BeaconEvent.LocationUpdate, this.latestLocationState);",
          "172:     };",
          "",
          "[Removed Lines]",
          "164:             this._latestLocationState = parseBeaconContent(latestLocationEvent.getContent());",
          "170:         this._latestLocationState = undefined;",
          "",
          "[Added Lines]",
          "175:             this._latestLocationEvent = latestLocationEvent;",
          "181:         this._latestLocationEvent = undefined;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:     private checkLiveness(): void {",
          "180:         const prevLiveness = this.isLive;",
          "181:         this._isLive = this._beaconInfo?.live &&",
          "184:         if (prevLiveness !== this.isLive) {",
          "185:             this.emit(BeaconEvent.LivenessChange, this.isLive, this);",
          "",
          "[Removed Lines]",
          "182:             isTimestampInDuration(this._beaconInfo?.timestamp, this._beaconInfo?.timeout, Date.now());",
          "",
          "[Added Lines]",
          "197:         const startTimestamp = this._beaconInfo?.timestamp > Date.now() ?",
          "198:             this._beaconInfo?.timestamp - 360000 /* 6min */ :",
          "199:             this._beaconInfo?.timestamp;",
          "201:             isTimestampInDuration(startTimestamp, this._beaconInfo?.timeout, Date.now());",
          "",
          "---------------"
        ],
        "src/models/event-timeline-set.ts||src/models/event-timeline-set.ts": [
          "File: src/models/event-timeline-set.ts -> src/models/event-timeline-set.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { logger } from '../logger';",
          "25: import { Room, RoomEvent } from \"./room\";",
          "26: import { Filter } from \"../filter\";",
          "28: import { RoomState } from \"./room-state\";",
          "29: import { TypedEventEmitter } from \"./typed-event-emitter\";",
          "31: const DEBUG = true;",
          "",
          "[Removed Lines]",
          "21: import { EventTimeline } from \"./event-timeline\";",
          "22: import { EventStatus, MatrixEvent, MatrixEventEvent } from \"./event\";",
          "24: import { Relations } from './relations';",
          "27: import { EventType, RelationType } from \"../@types/event\";",
          "",
          "[Added Lines]",
          "21: import { EventTimeline, IAddEventOptions } from \"./event-timeline\";",
          "22: import { MatrixEvent } from \"./event\";",
          "28: import { RelationsContainer } from \"./relations-container\";",
          "29: import { MatrixClient } from \"../client\";",
          "30: import { Thread } from \"./thread\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: interface IOpts {",
          "42:     timelineSupport?: boolean;",
          "43:     filter?: Filter;",
          "45:     pendingEvents?: boolean;",
          "46: }",
          "",
          "[Removed Lines]",
          "44:     unstableClientRelationAggregation?: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     liveEvent?: boolean;",
          "56: }",
          "58: type EmittedEvents = RoomEvent.Timeline | RoomEvent.TimelineReset;",
          "60: export type EventTimelineSetHandlerMap = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: export interface IAddEventToTimelineOptions",
          "59:     extends Pick<IAddEventOptions, 'toStartOfTimeline' | 'roomState' | 'timelineWasEmpty'> {",
          "61:     fromCache?: boolean;",
          "62: }",
          "64: export interface IAddLiveEventOptions",
          "65:     extends Pick<IAddEventToTimelineOptions, 'fromCache' | 'roomState' | 'timelineWasEmpty'> {",
          "72:     duplicateStrategy?: DuplicateStrategy;",
          "73: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: };",
          "66: export class EventTimelineSet extends TypedEventEmitter<EmittedEvents, EventTimelineSetHandlerMap> {",
          "67:     private readonly timelineSupport: boolean;",
          "70:     private liveTimeline: EventTimeline;",
          "71:     private timelines: EventTimeline[];",
          "72:     private _eventIdToTimeline: Record<string, EventTimeline>;",
          "73:     private filter?: Filter;",
          "",
          "[Removed Lines]",
          "68:     private unstableClientRelationAggregation: boolean;",
          "69:     private displayPendingEvents: boolean;",
          "74:     private relations: Record<string, Record<string, Record<RelationType, Relations>>>;",
          "",
          "[Added Lines]",
          "84:     public readonly relations?: RelationsContainer;",
          "86:     private readonly displayPendingEvents: boolean;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:         super();",
          "115:         this.timelineSupport = Boolean(opts.timelineSupport);",
          "116:         this.liveTimeline = new EventTimeline(this);",
          "118:         this.displayPendingEvents = opts.pendingEvents !== false;",
          "",
          "[Removed Lines]",
          "112:     constructor(public readonly room: Room, opts: IOpts) {",
          "117:         this.unstableClientRelationAggregation = !!opts.unstableClientRelationAggregation;",
          "",
          "[Added Lines]",
          "127:     constructor(",
          "128:         public readonly room: Room | undefined,",
          "129:         opts: IOpts = {},",
          "130:         client?: MatrixClient,",
          "131:         public readonly thread?: Thread,",
          "132:     ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:         this.filter = opts.filter;",
          "131:     }",
          "",
          "[Removed Lines]",
          "126:         if (this.unstableClientRelationAggregation) {",
          "129:             this.relations = {};",
          "130:         }",
          "",
          "[Added Lines]",
          "145:         this.relations = this.room?.relations ?? new RelationsContainer(room?.client ?? client);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:         return this.liveTimeline;",
          "181:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:     public setLiveTimeline(timeline: EventTimeline): void {",
          "204:         this.liveTimeline = timeline;",
          "205:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "431:             if (!existingTimeline) {",
          "434:                 lastEventWasNew = true;",
          "435:                 didUpdate = true;",
          "436:                 continue;",
          "",
          "[Removed Lines]",
          "433:                 this.addEventToTimeline(event, timeline, toStartOfTimeline);",
          "",
          "[Added Lines]",
          "457:                 this.addEventToTimeline(event, timeline, {",
          "458:                     toStartOfTimeline,",
          "459:                 });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "529:     public addLiveEvent(",
          "530:         event: MatrixEvent,",
          "532:         fromCache = false,",
          "533:         roomState?: RoomState,",
          "534:     ): void {",
          "535:         if (this.filter) {",
          "536:             const events = this.filter.filterRoomTimeline([event]);",
          "537:             if (!events.length) {",
          "",
          "[Removed Lines]",
          "531:         duplicateStrategy: DuplicateStrategy = DuplicateStrategy.Ignore,",
          "",
          "[Added Lines]",
          "553:     public addLiveEvent(",
          "554:         event: MatrixEvent,",
          "555:         {",
          "556:             duplicateStrategy,",
          "557:             fromCache,",
          "558:             roomState,",
          "559:             timelineWasEmpty,",
          "560:         }: IAddLiveEventOptions,",
          "561:     ): void;",
          "567:         duplicateStrategy?: DuplicateStrategy,",
          "568:         fromCache?: boolean,",
          "569:         roomState?: RoomState,",
          "570:     ): void;",
          "571:     public addLiveEvent(",
          "572:         event: MatrixEvent,",
          "573:         duplicateStrategyOrOpts?: DuplicateStrategy | IAddLiveEventOptions,",
          "577:         let duplicateStrategy = duplicateStrategyOrOpts as DuplicateStrategy || DuplicateStrategy.Ignore;",
          "578:         let timelineWasEmpty: boolean;",
          "579:         if (typeof (duplicateStrategyOrOpts) === 'object') {",
          "580:             ({",
          "581:                 duplicateStrategy = DuplicateStrategy.Ignore,",
          "582:                 fromCache = false,",
          "583:                 roomState,",
          "584:                 timelineWasEmpty,",
          "585:             } = duplicateStrategyOrOpts);",
          "586:         } else if (duplicateStrategyOrOpts !== undefined) {",
          "589:             logger.warn(",
          "590:                 'Overload deprecated: ' +",
          "591:                 '`EventTimelineSet.addLiveEvent(event, duplicateStrategy?, fromCache?, roomState?)` ' +",
          "592:                 'is deprecated in favor of the overload with ' +",
          "593:                 '`EventTimelineSet.addLiveEvent(event, IAddLiveEventOptions)`',",
          "594:             );",
          "595:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "542:         const timeline = this._eventIdToTimeline[event.getId()];",
          "543:         if (timeline) {",
          "544:             if (duplicateStrategy === DuplicateStrategy.Replace) {",
          "547:                 const tlEvents = timeline.getEvents();",
          "548:                 for (let j = 0; j < tlEvents.length; j++) {",
          "549:                     if (tlEvents[j].getId() === event.getId()) {",
          "",
          "[Removed Lines]",
          "545:                 debuglog(\"EventTimelineSet.addLiveEvent: replacing duplicate event \" +",
          "546:                     event.getId());",
          "",
          "[Added Lines]",
          "607:                 debuglog(\"EventTimelineSet.addLiveEvent: replacing duplicate event \" + event.getId());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "563:                     }",
          "564:                 }",
          "565:             } else {",
          "568:             }",
          "569:             return;",
          "570:         }",
          "573:     }",
          "",
          "[Removed Lines]",
          "566:                 debuglog(\"EventTimelineSet.addLiveEvent: ignoring duplicate event \" +",
          "567:                     event.getId());",
          "572:         this.addEventToTimeline(event, this.liveTimeline, false, fromCache, roomState);",
          "",
          "[Added Lines]",
          "627:                 debuglog(\"EventTimelineSet.addLiveEvent: ignoring duplicate event \" + event.getId());",
          "632:         this.addEventToTimeline(event, this.liveTimeline, {",
          "633:             toStartOfTimeline: false,",
          "634:             fromCache,",
          "635:             roomState,",
          "636:             timelineWasEmpty,",
          "637:         });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "588:     public addEventToTimeline(",
          "589:         event: MatrixEvent,",
          "590:         timeline: EventTimeline,",
          "591:         toStartOfTimeline: boolean,",
          "592:         fromCache = false,",
          "593:         roomState?: RoomState,",
          "595:         const eventId = event.getId();",
          "597:         this._eventIdToTimeline[eventId] = timeline;",
          "602:         const data: IRoomTimelineData = {",
          "603:             timeline: timeline,",
          "",
          "[Removed Lines]",
          "594:     ) {",
          "596:         timeline.addEvent(event, toStartOfTimeline, roomState);",
          "599:         this.setRelationsTarget(event);",
          "600:         this.aggregateRelations(event);",
          "",
          "[Added Lines]",
          "652:     public addEventToTimeline(",
          "653:         event: MatrixEvent,",
          "654:         timeline: EventTimeline,",
          "655:         {",
          "656:             toStartOfTimeline,",
          "657:             fromCache,",
          "658:             roomState,",
          "659:             timelineWasEmpty,",
          "660:         }: IAddEventToTimelineOptions,",
          "661:     ): void;",
          "669:         fromCache?: boolean,",
          "670:         roomState?: RoomState,",
          "671:     ): void;",
          "672:     public addEventToTimeline(",
          "673:         event: MatrixEvent,",
          "674:         timeline: EventTimeline,",
          "675:         toStartOfTimelineOrOpts: boolean | IAddEventToTimelineOptions,",
          "678:     ): void {",
          "679:         let toStartOfTimeline = !!toStartOfTimelineOrOpts;",
          "680:         let timelineWasEmpty: boolean;",
          "681:         if (typeof (toStartOfTimelineOrOpts) === 'object') {",
          "682:             ({ toStartOfTimeline, fromCache = false, roomState, timelineWasEmpty } = toStartOfTimelineOrOpts);",
          "683:         } else if (toStartOfTimelineOrOpts !== undefined) {",
          "686:             logger.warn(",
          "687:                 'Overload deprecated: ' +",
          "688:                 '`EventTimelineSet.addEventToTimeline(event, timeline, toStartOfTimeline, fromCache?, roomState?)` ' +",
          "689:                 'is deprecated in favor of the overload with ' +",
          "690:                 '`EventTimelineSet.addEventToTimeline(event, timeline, IAddEventToTimelineOptions)`',",
          "691:             );",
          "692:         }",
          "695:         timeline.addEvent(event, {",
          "696:             toStartOfTimeline,",
          "697:             roomState,",
          "698:             timelineWasEmpty,",
          "699:         });",
          "702:         this.relations.aggregateParentEvent(event);",
          "703:         this.relations.aggregateChildEvent(event, this);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "629:         } else {",
          "630:             if (this.filter) {",
          "631:                 if (this.filter.filterRoomTimeline([localEvent]).length) {",
          "633:                 }",
          "634:             } else {",
          "636:             }",
          "637:         }",
          "638:     }",
          "",
          "[Removed Lines]",
          "632:                     this.addEventToTimeline(localEvent, this.liveTimeline, false);",
          "635:                 this.addEventToTimeline(localEvent, this.liveTimeline, false);",
          "",
          "[Added Lines]",
          "735:                     this.addEventToTimeline(localEvent, this.liveTimeline, {",
          "736:                         toStartOfTimeline: false,",
          "737:                     });",
          "740:                 this.addEventToTimeline(localEvent, this.liveTimeline, {",
          "741:                     toStartOfTimeline: false,",
          "742:                 });",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "693:         if (timeline1 === timeline2) {",
          "698:             const events = timeline1.getEvents();",
          "699:             for (let idx = 0; idx < events.length &&",
          "700:             (idx1 === undefined || idx2 === undefined); idx++) {",
          "",
          "[Removed Lines]",
          "696:             let idx1;",
          "697:             let idx2;",
          "",
          "[Added Lines]",
          "803:             let idx1: number;",
          "804:             let idx2: number;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "737:     }",
          "819:         }",
          "836:         }",
          "867:     }",
          "868: }",
          "",
          "[Removed Lines]",
          "756:     public getRelationsForEvent(",
          "757:         eventId: string,",
          "758:         relationType: RelationType | string,",
          "759:         eventType: EventType | string,",
          "760:     ): Relations | undefined {",
          "761:         if (!this.unstableClientRelationAggregation) {",
          "762:             throw new Error(\"Client-side relation aggregation is disabled\");",
          "763:         }",
          "765:         if (!eventId || !relationType || !eventType) {",
          "766:             throw new Error(\"Invalid arguments for `getRelationsForEvent`\");",
          "767:         }",
          "771:         const relationsForEvent = this.relations[eventId] || {};",
          "772:         const relationsWithRelType = relationsForEvent[relationType] || {};",
          "773:         return relationsWithRelType[eventType];",
          "774:     }",
          "776:     public getAllRelationsEventForEvent(eventId: string): MatrixEvent[] {",
          "777:         const relationsForEvent = this.relations?.[eventId] || {};",
          "778:         const events = [];",
          "779:         for (const relationsRecord of Object.values(relationsForEvent)) {",
          "780:             for (const relations of Object.values(relationsRecord)) {",
          "781:                 events.push(...relations.getRelations());",
          "782:             }",
          "783:         }",
          "784:         return events;",
          "785:     }",
          "793:     public setRelationsTarget(event: MatrixEvent): void {",
          "794:         if (!this.unstableClientRelationAggregation) {",
          "795:             return;",
          "796:         }",
          "798:         const relationsForEvent = this.relations[event.getId()];",
          "799:         if (!relationsForEvent) {",
          "800:             return;",
          "801:         }",
          "803:         for (const relationsWithRelType of Object.values(relationsForEvent)) {",
          "804:             for (const relationsWithEventType of Object.values(relationsWithRelType)) {",
          "805:                 relationsWithEventType.setTargetEvent(event);",
          "806:             }",
          "807:         }",
          "808:     }",
          "816:     public aggregateRelations(event: MatrixEvent): void {",
          "817:         if (!this.unstableClientRelationAggregation) {",
          "818:             return;",
          "821:         if (event.isRedacted() || event.status === EventStatus.CANCELLED) {",
          "822:             return;",
          "823:         }",
          "826:         if (event.isBeingDecrypted() || event.shouldAttemptDecryption()) {",
          "827:             event.once(MatrixEventEvent.Decrypted, () => {",
          "828:                 this.aggregateRelations(event);",
          "829:             });",
          "830:             return;",
          "831:         }",
          "833:         const relation = event.getRelation();",
          "834:         if (!relation) {",
          "835:             return;",
          "838:         const relatesToEventId = relation.event_id;",
          "839:         const relationType = relation.rel_type;",
          "840:         const eventType = event.getType();",
          "844:         let relationsForEvent: Record<string, Partial<Record<string, Relations>>> = this.relations[relatesToEventId];",
          "845:         if (!relationsForEvent) {",
          "846:             relationsForEvent = this.relations[relatesToEventId] = {};",
          "847:         }",
          "848:         let relationsWithRelType = relationsForEvent[relationType];",
          "849:         if (!relationsWithRelType) {",
          "850:             relationsWithRelType = relationsForEvent[relationType] = {};",
          "851:         }",
          "852:         let relationsWithEventType = relationsWithRelType[eventType];",
          "854:         if (!relationsWithEventType) {",
          "855:             relationsWithEventType = relationsWithRelType[eventType] = new Relations(",
          "856:                 relationType,",
          "857:                 eventType,",
          "858:                 this.room,",
          "859:             );",
          "860:             const relatesToEvent = this.findEventById(relatesToEventId) || this.room.getPendingEvent(relatesToEventId);",
          "861:             if (relatesToEvent) {",
          "862:                 relationsWithEventType.setTargetEvent(relatesToEvent);",
          "863:             }",
          "864:         }",
          "866:         relationsWithEventType.addEvent(event);",
          "",
          "[Added Lines]",
          "857:     public canContain(event: MatrixEvent): boolean {",
          "858:         if (!this.room) {",
          "859:             throw new Error(\"Cannot call `EventTimelineSet::canContain without a `room` set. \" +",
          "860:                 \"Set the room when creating the EventTimelineSet to call this method.\");",
          "863:         const { threadId, shouldLiveInRoom } = this.room.eventShouldLiveIn(event);",
          "865:         if (this.thread) {",
          "866:             return this.thread.id === threadId;",
          "868:         return shouldLiveInRoom;",
          "",
          "---------------"
        ],
        "src/models/event-timeline.ts||src/models/event-timeline.ts": [
          "File: src/models/event-timeline.ts -> src/models/event-timeline.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { EventTimelineSet } from \"./event-timeline-set\";",
          "23: import { MatrixEvent } from \"./event\";",
          "24: import { Filter } from \"../filter\";",
          "25: import { EventType } from \"../@types/event\";",
          "27: export enum Direction {",
          "28:     Backward = \"b\",",
          "29:     Forward = \"f\",",
          "",
          "[Removed Lines]",
          "21: import { RoomState } from \"./room-state\";",
          "",
          "[Added Lines]",
          "21: import { logger } from '../logger';",
          "22: import { RoomState, IMarkerFoundOptions } from \"./room-state\";",
          "28: export interface IInitialiseStateOptions extends Pick<IMarkerFoundOptions, 'timelineWasEmpty'> {",
          "34: }",
          "36: export interface IAddEventOptions extends Pick<IMarkerFoundOptions, 'timelineWasEmpty'> {",
          "40:     toStartOfTimeline: boolean;",
          "42:     roomState?: RoomState;",
          "43: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:         if (this.events.length > 0) {",
          "136:             throw new Error(\"Cannot initialise state after events are added\");",
          "137:         }",
          "",
          "[Removed Lines]",
          "134:     public initialiseState(stateEvents: MatrixEvent[]): void {",
          "",
          "[Added Lines]",
          "152:     public initialiseState(stateEvents: MatrixEvent[], { timelineWasEmpty }: IInitialiseStateOptions = {}): void {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:             Object.freeze(e);",
          "153:         }",
          "157:     }",
          "",
          "[Removed Lines]",
          "155:         this.startState.setStateEvents(stateEvents);",
          "156:         this.endState.setStateEvents(stateEvents);",
          "",
          "[Added Lines]",
          "173:         this.startState.setStateEvents(stateEvents, {",
          "174:             timelineWasEmpty,",
          "175:         });",
          "176:         this.endState.setStateEvents(stateEvents, {",
          "177:             timelineWasEmpty,",
          "178:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:         }",
          "355:         const timelineSet = this.getTimelineSet();",
          "357:         if (timelineSet.room) {",
          "361:             if (",
          "362:                 event.isState() &&",
          "363:                 timelineSet.room.getUnfilteredTimelineSet() === timelineSet",
          "364:             ) {",
          "",
          "[Removed Lines]",
          "350:     public addEvent(event: MatrixEvent, atStart: boolean, stateContext?: RoomState): void {",
          "351:         if (!stateContext) {",
          "352:             stateContext = atStart ? this.startState : this.endState;",
          "358:             EventTimeline.setEventMetadata(event, stateContext, atStart);",
          "365:                 stateContext.setStateEvents([event]);",
          "",
          "[Added Lines]",
          "372:     public addEvent(",
          "373:         event: MatrixEvent,",
          "374:         {",
          "375:             toStartOfTimeline,",
          "376:             roomState,",
          "377:             timelineWasEmpty,",
          "378:         }: IAddEventOptions,",
          "379:     ): void;",
          "383:     public addEvent(",
          "384:         event: MatrixEvent,",
          "385:         toStartOfTimeline: boolean,",
          "386:         roomState?: RoomState",
          "387:     ): void;",
          "388:     public addEvent(",
          "389:         event: MatrixEvent,",
          "390:         toStartOfTimelineOrOpts: boolean | IAddEventOptions,",
          "391:         roomState?: RoomState,",
          "392:     ): void {",
          "393:         let toStartOfTimeline = !!toStartOfTimelineOrOpts;",
          "394:         let timelineWasEmpty: boolean;",
          "395:         if (typeof (toStartOfTimelineOrOpts) === 'object') {",
          "396:             ({ toStartOfTimeline, roomState, timelineWasEmpty } = toStartOfTimelineOrOpts);",
          "397:         } else if (toStartOfTimelineOrOpts !== undefined) {",
          "400:             logger.warn(",
          "401:                 'Overload deprecated: ' +",
          "402:                 '`EventTimeline.addEvent(event, toStartOfTimeline, roomState?)` ' +",
          "403:                 'is deprecated in favor of the overload with `EventTimeline.addEvent(event, IAddEventOptions)`',",
          "404:             );",
          "405:         }",
          "407:         if (!roomState) {",
          "408:             roomState = toStartOfTimeline ? this.startState : this.endState;",
          "414:             EventTimeline.setEventMetadata(event, roomState, toStartOfTimeline);",
          "421:                 roomState.setStateEvents([event], {",
          "422:                     timelineWasEmpty,",
          "423:                 });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "378:                 }",
          "379:             }",
          "380:         }",
          "385:             insertIndex = 0;",
          "386:         } else {",
          "387:             insertIndex = this.events.length;",
          "388:         }",
          "390:         this.events.splice(insertIndex, 0, event); // insert element",
          "392:             this.baseIndex++;",
          "393:         }",
          "394:     }",
          "",
          "[Removed Lines]",
          "376:                 if (!event.sender || (event.getType() === \"m.room.member\" && !atStart)) {",
          "377:                     EventTimeline.setEventMetadata(event, stateContext, atStart);",
          "382:         let insertIndex;",
          "384:         if (atStart) {",
          "391:         if (atStart) {",
          "",
          "[Added Lines]",
          "434:                 if (!event.sender || (event.getType() === \"m.room.member\" && !toStartOfTimeline)) {",
          "435:                     EventTimeline.setEventMetadata(event, roomState, toStartOfTimeline);",
          "440:         let insertIndex: number;",
          "442:         if (toStartOfTimeline) {",
          "449:         if (toStartOfTimeline) {",
          "",
          "---------------"
        ],
        "src/models/event.ts||src/models/event.ts": [
          "File: src/models/event.ts -> src/models/event.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:         }",
          "515:     }",
          "",
          "[Removed Lines]",
          "520:     public get isThreadRelation(): boolean {",
          "521:         return !!this.threadRootId && this.threadId !== this.getId();",
          "522:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:         return mRelatesTo?.['m.in_reply_to']?.event_id;",
          "545:     }",
          "548:         return this.getWireContent()",
          "549:             ?.[\"m.relates_to\"]",
          "550:             ?.event_id;",
          "",
          "[Removed Lines]",
          "547:     public get relationEventId(): string {",
          "",
          "[Added Lines]",
          "540:     public get relationEventId(): string | undefined {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "831:                 if (this.retryDecryption) {",
          "837:                     continue;",
          "838:                 }",
          "846:                 res = this.badEncryptedMessage(e.message);",
          "847:             }",
          "",
          "[Removed Lines]",
          "833:                     logger.log(",
          "834:                         `Got error decrypting event (id=${this.getId()}: ` +",
          "835:                         `${e}), but retrying`,",
          "836:                     );",
          "842:                 logger.warn(",
          "843:                     `Error decrypting event (id=${this.getId()}): ${e.detailedString}`,",
          "844:                 );",
          "",
          "[Added Lines]",
          "826:                     logger.log(`Got error decrypting event (id=${this.getId()}: ${e.detailedString}), but retrying`, e);",
          "832:                 logger.warn(`Got error decrypting event (id=${this.getId()}: ${e.detailedString})`, e);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1065:                     reason: reason,",
          "1066:                 });",
          "1067:             }",
          "1071:         }",
          "1072:     }",
          "",
          "[Removed Lines]",
          "1068:             if (change) {",
          "1069:                 this.emit(MatrixEventEvent.VisibilityChange, this, visible);",
          "1070:             }",
          "",
          "[Added Lines]",
          "1056:             this.emit(MatrixEventEvent.VisibilityChange, this, visible);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1304:         const relation = this.getWireContent()?.[\"m.relates_to\"];",
          "1307:     }",
          "",
          "[Removed Lines]",
          "1305:         return relation && relation.rel_type && relation.event_id &&",
          "1306:             ((relType && relation.rel_type === relType) || !relType);",
          "",
          "[Added Lines]",
          "1291:         if (this.isState() && relation?.rel_type === RelationType.Replace) {",
          "1293:             return false;",
          "1294:         }",
          "1295:         return relation?.rel_type && relation.event_id && (relType ? relation.rel_type === relType : true);",
          "",
          "---------------"
        ],
        "src/models/relations-container.ts||src/models/relations-container.ts": [
          "File: src/models/relations-container.ts -> src/models/relations-container.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { Relations } from \"./relations\";",
          "18: import { EventType, RelationType } from \"../@types/event\";",
          "19: import { EventStatus, MatrixEvent, MatrixEventEvent } from \"./event\";",
          "20: import { EventTimelineSet } from \"./event-timeline-set\";",
          "21: import { MatrixClient } from \"../client\";",
          "22: import { Room } from \"./room\";",
          "24: export class RelationsContainer {",
          "27:     private relations: {",
          "28:         [parentEventId: string]: {",
          "29:             [relationType: RelationType | string]: {",
          "30:                 [eventType: EventType | string]: Relations;",
          "31:             };",
          "32:         };",
          "33:     } = {};",
          "35:     constructor(private readonly client: MatrixClient, private readonly room?: Room) {",
          "36:     }",
          "55:     public getChildEventsForEvent(",
          "56:         eventId: string,",
          "57:         relationType: RelationType | string,",
          "58:         eventType: EventType | string,",
          "59:     ): Relations | undefined {",
          "60:         return this.relations[eventId]?.[relationType]?.[eventType];",
          "61:     }",
          "63:     public getAllChildEventsForEvent(parentEventId: string): MatrixEvent[] {",
          "64:         const relationsForEvent = this.relations[parentEventId] ?? {};",
          "65:         const events: MatrixEvent[] = [];",
          "66:         for (const relationsRecord of Object.values(relationsForEvent)) {",
          "67:             for (const relations of Object.values(relationsRecord)) {",
          "68:                 events.push(...relations.getRelations());",
          "69:             }",
          "70:         }",
          "71:         return events;",
          "72:     }",
          "81:     public aggregateParentEvent(event: MatrixEvent): void {",
          "82:         const relationsForEvent = this.relations[event.getId()];",
          "83:         if (!relationsForEvent) return;",
          "85:         for (const relationsWithRelType of Object.values(relationsForEvent)) {",
          "86:             for (const relationsWithEventType of Object.values(relationsWithRelType)) {",
          "87:                 relationsWithEventType.setTargetEvent(event);",
          "88:             }",
          "89:         }",
          "90:     }",
          "98:     public aggregateChildEvent(event: MatrixEvent, timelineSet?: EventTimelineSet): void {",
          "99:         if (event.isRedacted() || event.status === EventStatus.CANCELLED) {",
          "100:             return;",
          "101:         }",
          "103:         const relation = event.getRelation();",
          "104:         if (!relation) return;",
          "106:         const onEventDecrypted = () => {",
          "107:             if (event.isDecryptionFailure()) {",
          "110:                 event.once(MatrixEventEvent.Decrypted, onEventDecrypted);",
          "111:                 return;",
          "112:             }",
          "114:             this.aggregateChildEvent(event, timelineSet);",
          "115:         };",
          "118:         if (event.isBeingDecrypted() || event.shouldAttemptDecryption()) {",
          "119:             event.once(MatrixEventEvent.Decrypted, onEventDecrypted);",
          "120:             return;",
          "121:         }",
          "123:         const { event_id: relatesToEventId, rel_type: relationType } = relation;",
          "124:         const eventType = event.getType();",
          "126:         let relationsForEvent = this.relations[relatesToEventId];",
          "127:         if (!relationsForEvent) {",
          "128:             relationsForEvent = this.relations[relatesToEventId] = {};",
          "129:         }",
          "131:         let relationsWithRelType = relationsForEvent[relationType];",
          "132:         if (!relationsWithRelType) {",
          "133:             relationsWithRelType = relationsForEvent[relationType] = {};",
          "134:         }",
          "136:         let relationsWithEventType = relationsWithRelType[eventType];",
          "137:         if (!relationsWithEventType) {",
          "138:             relationsWithEventType = relationsWithRelType[eventType] = new Relations(",
          "139:                 relationType,",
          "140:                 eventType,",
          "141:                 this.client,",
          "142:             );",
          "144:             const room = this.room ?? timelineSet?.room;",
          "145:             const relatesToEvent = timelineSet?.findEventById(relatesToEventId)",
          "146:                 ?? room?.findEventById(relatesToEventId)",
          "147:                 ?? room?.getPendingEvent(relatesToEventId);",
          "148:             if (relatesToEvent) {",
          "149:                 relationsWithEventType.setTargetEvent(relatesToEvent);",
          "150:             }",
          "151:         }",
          "153:         relationsWithEventType.addEvent(event);",
          "154:     }",
          "155: }",
          "",
          "---------------"
        ],
        "src/models/relations.ts||src/models/relations.ts": [
          "File: src/models/relations.ts -> src/models/relations.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { EventStatus, IAggregatedRelation, MatrixEvent, MatrixEventEvent } from './event';",
          "19: import { logger } from '../logger';",
          "20: import { RelationType } from \"../@types/event\";",
          "21: import { TypedEventEmitter } from \"./typed-event-emitter\";",
          "23: export enum RelationsEvent {",
          "24:     Add = \"Relations.add\",",
          "",
          "[Removed Lines]",
          "18: import { Room } from './room';",
          "",
          "[Added Lines]",
          "21: import { MatrixClient } from \"../client\";",
          "22: import { Room } from \"./room\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     private sortedAnnotationsByKey: [string, Set<MatrixEvent>][] = [];",
          "49:     private targetEvent: MatrixEvent = null;",
          "50:     private creationEmitted = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     private readonly client: MatrixClient;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     constructor(",
          "63:         public readonly relationType: RelationType | string,",
          "64:         public readonly eventType: string,",
          "66:     ) {",
          "67:         super();",
          "68:     }",
          "",
          "[Removed Lines]",
          "65:         private readonly room: Room,",
          "",
          "[Added Lines]",
          "66:         client: MatrixClient | Room,",
          "69:         this.client = client instanceof Room ? client.client : client;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         if (this.relationType === RelationType.Annotation) {",
          "105:             this.addAnnotationToAggregation(event);",
          "107:             const lastReplacement = await this.getLastReplacement();",
          "108:             this.targetEvent.makeReplaced(lastReplacement);",
          "109:         }",
          "",
          "[Removed Lines]",
          "106:         } else if (this.relationType === RelationType.Replace && this.targetEvent) {",
          "",
          "[Added Lines]",
          "108:         } else if (this.relationType === RelationType.Replace && this.targetEvent && !this.targetEvent.isState()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:         if (this.relationType === RelationType.Annotation) {",
          "146:             this.removeAnnotationFromAggregation(event);",
          "148:             const lastReplacement = await this.getLastReplacement();",
          "149:             this.targetEvent.makeReplaced(lastReplacement);",
          "150:         }",
          "",
          "[Removed Lines]",
          "147:         } else if (this.relationType === RelationType.Replace && this.targetEvent) {",
          "",
          "[Added Lines]",
          "149:         } else if (this.relationType === RelationType.Replace && this.targetEvent && !this.targetEvent.isState()) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:         if (this.relationType === RelationType.Annotation) {",
          "263:             this.removeAnnotationFromAggregation(redactedEvent);",
          "265:             const lastReplacement = await this.getLastReplacement();",
          "266:             this.targetEvent.makeReplaced(lastReplacement);",
          "267:         }",
          "",
          "[Removed Lines]",
          "264:         } else if (this.relationType === RelationType.Replace && this.targetEvent) {",
          "",
          "[Added Lines]",
          "266:         } else if (this.relationType === RelationType.Replace && this.targetEvent && !this.targetEvent.isState()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "347:         }, null);",
          "349:         if (lastReplacement?.shouldAttemptDecryption()) {",
          "351:         } else if (lastReplacement?.isBeingDecrypted()) {",
          "352:             await lastReplacement.getDecryptionPromise();",
          "353:         }",
          "",
          "[Removed Lines]",
          "350:             await lastReplacement.attemptDecryption(this.room.client.crypto);",
          "",
          "[Added Lines]",
          "352:             await lastReplacement.attemptDecryption(this.client.crypto);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "364:         }",
          "365:         this.targetEvent = event;",
          "368:             const replacement = await this.getLastReplacement();",
          "",
          "[Removed Lines]",
          "367:         if (this.relationType === RelationType.Replace) {",
          "",
          "[Added Lines]",
          "369:         if (this.relationType === RelationType.Replace && !this.targetEvent.isState()) {",
          "",
          "---------------"
        ],
        "src/models/room-state.ts||src/models/room-state.ts": [
          "File: src/models/room-state.ts -> src/models/room-state.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { RoomMember } from \"./room-member\";",
          "22: import { logger } from '../logger';",
          "23: import * as utils from \"../utils\";",
          "25: import { MatrixEvent, MatrixEventEvent } from \"./event\";",
          "26: import { MatrixClient } from \"../client\";",
          "27: import { GuestAccess, HistoryVisibility, IJoinRuleEventContent, JoinRule } from \"../@types/partials\";",
          "",
          "[Removed Lines]",
          "24: import { EventType } from \"../@types/event\";",
          "",
          "[Added Lines]",
          "24: import { EventType, UNSTABLE_MSC2716_MARKER } from \"../@types/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import { TypedReEmitter } from \"../ReEmitter\";",
          "31: import { M_BEACON, M_BEACON_INFO } from \"../@types/beacon\";",
          "34: enum OobStatus {",
          "35:     NotStarted,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: export interface IMarkerFoundOptions {",
          "46:     timelineWasEmpty?: boolean;",
          "47: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     NewMember = \"RoomState.newMember\",",
          "44:     Update = \"RoomState.update\", // signals batches of updates without specificity",
          "45:     BeaconLiveness = \"RoomState.BeaconLiveness\",",
          "46: }",
          "48: export type RoomStateEventHandlerMap = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     Marker = \"RoomState.Marker\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "51:     [RoomStateEvent.NewMember]: (event: MatrixEvent, state: RoomState, member: RoomMember) => void;",
          "52:     [RoomStateEvent.Update]: (state: RoomState) => void;",
          "53:     [RoomStateEvent.BeaconLiveness]: (state: RoomState, hasLiveBeacons: boolean) => void;",
          "54:     [BeaconEvent.New]: (event: MatrixEvent, beacon: Beacon) => void;",
          "55: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     [RoomStateEvent.Marker]: (event: MatrixEvent, setStateOptions: IMarkerFoundOptions) => void;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "314:     }",
          "327:         this.updateModifiedTime();",
          "",
          "[Removed Lines]",
          "326:     public setStateEvents(stateEvents: MatrixEvent[]) {",
          "",
          "[Added Lines]",
          "347:     public setStateEvents(stateEvents: MatrixEvent[], markerFoundOptions?: IMarkerFoundOptions) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "405:                 this.sentinels = {};",
          "406:             }",
          "407:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:             } else if (UNSTABLE_MSC2716_MARKER.matches(event.getType())) {",
          "428:                 this.emit(RoomStateEvent.Marker, event, markerFoundOptions);",
          "",
          "---------------"
        ],
        "src/models/room.ts||src/models/room.ts": [
          "File: src/models/room.ts -> src/models/room.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { Direction, EventTimeline } from \"./event-timeline\";",
          "23: import { getHttpUriForMxc } from \"../content-repo\";",
          "24: import * as utils from \"../utils\";",
          "",
          "[Removed Lines]",
          "21: import { EventTimelineSet, DuplicateStrategy } from \"./event-timeline-set\";",
          "",
          "[Added Lines]",
          "21: import { EventTimelineSet, DuplicateStrategy, IAddLiveEventOptions } from \"./event-timeline-set\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import { TypedEventEmitter } from \"./typed-event-emitter\";",
          "50: import { ReceiptType } from \"../@types/read_receipts\";",
          "51: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import { RelationsContainer } from \"./relations-container\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     storageToken?: string;",
          "81:     pendingEventOrdering?: PendingEventOrdering;",
          "82:     timelineSupport?: boolean;",
          "84:     lazyLoadMembers?: boolean;",
          "85: }",
          "",
          "[Removed Lines]",
          "83:     unstableClientRelationAggregation?: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:     LocalEchoUpdated = \"Room.localEchoUpdated\",",
          "166:     Timeline = \"Room.timeline\",",
          "167:     TimelineReset = \"Room.timelineReset\",",
          "168: }",
          "170: type EmittedEvents = RoomEvent",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:     TimelineRefresh = \"Room.TimelineRefresh\",",
          "169:     OldStateUpdated = \"Room.OldStateUpdated\",",
          "170:     CurrentStateUpdated = \"Room.CurrentStateUpdated\",",
          "171:     HistoryImportedWithinTimeline = \"Room.historyImportedWithinTimeline\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:     | ThreadEvent.NewReply",
          "174:     | RoomEvent.Timeline",
          "175:     | RoomEvent.TimelineReset",
          "176:     | MatrixEventEvent.BeforeRedaction;",
          "178: export type RoomEventHandlerMap = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:     | RoomEvent.TimelineRefresh",
          "181:     | RoomEvent.HistoryImportedWithinTimeline",
          "182:     | RoomEvent.OldStateUpdated",
          "183:     | RoomEvent.CurrentStateUpdated",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:         oldEventId?: string,",
          "190:         oldStatus?: EventStatus,",
          "191:     ) => void;",
          "192:     [ThreadEvent.New]: (thread: Thread, toStartOfTimeline: boolean) => void;",
          "193: } & ThreadHandlerMap & MatrixEventHandlerMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     [RoomEvent.OldStateUpdated]: (room: Room, previousRoomState: RoomState, roomState: RoomState) => void;",
          "201:     [RoomEvent.CurrentStateUpdated]: (room: Room, previousRoomState: RoomState, roomState: RoomState) => void;",
          "202:     [RoomEvent.HistoryImportedWithinTimeline]: (",
          "203:         markerEvent: MatrixEvent,",
          "204:         room: Room,",
          "205:     ) => void;",
          "206:     [RoomEvent.TimelineRefresh]: (room: Room, eventTimelineSet: EventTimelineSet) => void;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "206:     public readonly threadsTimelineSets: EventTimelineSet[] = [];",
          "208:     private readonly filteredTimelineSets: Record<string, EventTimelineSet> = {}; // filter_id: timelineSet",
          "209:     private readonly pendingEventList?: MatrixEvent[];",
          "211:     private blacklistUnverifiedDevices: boolean = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:     private timelineNeedsRefresh = false;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263:     public currentState: RoomState;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:     public readonly relations = new RelationsContainer(this.client, this);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "356:         if (this.opts.pendingEventOrdering === PendingEventOrdering.Detached) {",
          "357:             this.pendingEventList = [];",
          "370:         }",
          "",
          "[Removed Lines]",
          "358:             const serializedPendingEventList = client.sessionStore.store.getItem(pendingEventsKey(this.roomId));",
          "359:             if (serializedPendingEventList) {",
          "360:                 JSON.parse(serializedPendingEventList)",
          "361:                     .forEach(async (serializedEvent: Partial<IEvent>) => {",
          "362:                         const event = new MatrixEvent(serializedEvent);",
          "363:                         if (event.getType() === EventType.RoomMessageEncrypted) {",
          "364:                             await event.attemptDecryption(this.client.crypto);",
          "365:                         }",
          "366:                         event.setStatus(EventStatus.NOT_SENT);",
          "367:                         this.addPendingEvent(event, event.getTxnId());",
          "368:                     });",
          "369:             }",
          "",
          "[Added Lines]",
          "371:             this.client.store.getPendingEvents(this.roomId).then(events => {",
          "372:                 events.forEach(async (serializedEvent: Partial<IEvent>) => {",
          "373:                     const event = new MatrixEvent(serializedEvent);",
          "374:                     if (event.getType() === EventType.RoomMessageEncrypted) {",
          "375:                         await event.attemptDecryption(this.client.crypto);",
          "376:                     }",
          "377:                     event.setStatus(EventStatus.NOT_SENT);",
          "378:                     this.addPendingEvent(event, event.getTxnId());",
          "379:                 });",
          "380:             });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "441:         return Promise.allSettled(decryptionPromises) as unknown as Promise<void>;",
          "442:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:     public getCreator(): string | null {",
          "460:         const createEvent = this.currentState.getStateEvents(EventType.RoomCreate, \"\");",
          "461:         return createEvent?.getContent()['creator'] ?? null;",
          "462:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "897:         });",
          "898:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:     public async refreshLiveTimeline(): Promise<void> {",
          "934:         const liveTimelineBefore = this.getLiveTimeline();",
          "935:         const forwardPaginationToken = liveTimelineBefore.getPaginationToken(EventTimeline.FORWARDS);",
          "936:         const backwardPaginationToken = liveTimelineBefore.getPaginationToken(EventTimeline.BACKWARDS);",
          "937:         const eventsBefore = liveTimelineBefore.getEvents();",
          "938:         const mostRecentEventInTimeline = eventsBefore[eventsBefore.length - 1];",
          "939:         logger.log(",
          "940:             `[refreshLiveTimeline for ${this.roomId}] at ` +",
          "941:             `mostRecentEventInTimeline=${mostRecentEventInTimeline && mostRecentEventInTimeline.getId()} ` +",
          "942:             `liveTimelineBefore=${liveTimelineBefore.toString()} ` +",
          "943:             `forwardPaginationToken=${forwardPaginationToken} ` +",
          "944:             `backwardPaginationToken=${backwardPaginationToken}`,",
          "945:         );",
          "948:         const timelineSet = this.getUnfilteredTimelineSet();",
          "950:         let newTimeline: EventTimeline;",
          "957:         if (!mostRecentEventInTimeline) {",
          "958:             newTimeline = await this.client.getLatestTimeline(timelineSet);",
          "959:         } else {",
          "967:             this.resetLiveTimeline(null, null);",
          "974:             this.emit(RoomEvent.TimelineRefresh, this, timelineSet);",
          "981:             newTimeline = await this.client.getEventTimeline(timelineSet, mostRecentEventInTimeline.getId());",
          "982:         }",
          "987:         const liveTimeline = timelineSet.getLiveTimeline();",
          "988:         if (!liveTimeline || (",
          "989:             liveTimeline.getPaginationToken(Direction.Forward) === null &&",
          "990:             liveTimeline.getPaginationToken(Direction.Backward) === null &&",
          "991:             liveTimeline.getEvents().length === 0",
          "992:         )) {",
          "993:             logger.log(`[refreshLiveTimeline for ${this.roomId}] using our new live timeline`);",
          "998:             newTimeline.setPaginationToken(forwardPaginationToken, EventTimeline.FORWARDS);",
          "1002:             timelineSet.setLiveTimeline(newTimeline);",
          "1005:             this.fixUpLegacyTimelineFields();",
          "1006:         } else {",
          "1007:             logger.log(",
          "1008:                 `[refreshLiveTimeline for ${this.roomId}] \\`/sync\\` or some other request beat us to creating a new ` +",
          "1009:                 `live timeline after we reset it. We'll use that instead since any events in the scrollback from ` +",
          "1010:                 `this timeline will include the history.`,",
          "1011:             );",
          "1012:         }",
          "1015:         this.setTimelineNeedsRefresh(false);",
          "1019:         this.emit(RoomEvent.TimelineRefresh, this, timelineSet);",
          "1020:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "926:     private fixUpLegacyTimelineFields(): void {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1049:         const previousOldState = this.oldState;",
          "1050:         const previousCurrentState = this.currentState;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "933:             .getState(EventTimeline.BACKWARDS);",
          "934:         this.currentState = this.getLiveTimeline()",
          "935:             .getState(EventTimeline.FORWARDS);",
          "936:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065:         if (previousOldState !== this.oldState) {",
          "1066:             this.emit(RoomEvent.OldStateUpdated, this, previousOldState, this.oldState);",
          "1067:         }",
          "1069:         if (previousCurrentState !== this.currentState) {",
          "1070:             this.emit(RoomEvent.CurrentStateUpdated, this, previousCurrentState, this.currentState);",
          "1071:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1000:         return this.getUnfilteredTimelineSet().addTimeline();",
          "1001:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144:     public setTimelineNeedsRefresh(value: boolean): void {",
          "1145:         this.timelineNeedsRefresh = value;",
          "1146:     }",
          "1153:     public getTimelineNeedsRefresh(): boolean {",
          "1154:         return this.timelineNeedsRefresh;",
          "1155:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1454:                         return event.getSender() === this.client.getUserId();",
          "1455:                     });",
          "1456:                     if (filterType !== ThreadFilterType.My || currentUserParticipated) {",
          "1458:                     }",
          "1459:                 });",
          "1460:         }",
          "",
          "[Removed Lines]",
          "1457:                         timelineSet.getLiveTimeline().addEvent(thread.rootEvent, false);",
          "",
          "[Added Lines]",
          "1611:                         timelineSet.getLiveTimeline().addEvent(thread.rootEvent, {",
          "1612:                             toStartOfTimeline: false,",
          "1613:                         });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1501:         let latestMyThreadsRootEvent: MatrixEvent;",
          "1502:         const roomState = this.getLiveTimeline().getState(EventTimeline.FORWARDS);",
          "1503:         for (const rootEvent of threadRoots) {",
          "1508:                 roomState,",
          "1511:             const threadRelationship = rootEvent",
          "1512:                 .getServerAggregatedRelation<IThreadBundledRelationship>(RelationType.Thread);",
          "1513:             if (threadRelationship.current_user_participated) {",
          "1518:                     roomState,",
          "1520:                 latestMyThreadsRootEvent = rootEvent;",
          "1521:             }",
          "",
          "[Removed Lines]",
          "1504:             this.threadsTimelineSets[0].addLiveEvent(",
          "1505:                 rootEvent,",
          "1506:                 DuplicateStrategy.Ignore,",
          "1507:                 false,",
          "1509:             );",
          "1514:                 this.threadsTimelineSets[1].addLiveEvent(",
          "1515:                     rootEvent,",
          "1516:                     DuplicateStrategy.Ignore,",
          "1517:                     false,",
          "1519:                 );",
          "",
          "[Added Lines]",
          "1660:             this.threadsTimelineSets[0].addLiveEvent(rootEvent, {",
          "1661:                 duplicateStrategy: DuplicateStrategy.Ignore,",
          "1662:                 fromCache: false,",
          "1664:             });",
          "1669:                 this.threadsTimelineSets[1].addLiveEvent(rootEvent, {",
          "1670:                     duplicateStrategy: DuplicateStrategy.Ignore,",
          "1671:                     fromCache: false,",
          "1673:                 });",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1578:         }",
          "1582:             return {",
          "1583:                 shouldLiveInRoom: false,",
          "1584:                 shouldLiveInThread: true,",
          "",
          "[Removed Lines]",
          "1581:         if (event.isThreadRelation) {",
          "",
          "[Added Lines]",
          "1735:         if (event.isRelation(THREAD_RELATION_TYPE.name)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1657:         toStartOfTimeline: boolean,",
          "1658:     ): Thread {",
          "1659:         if (rootEvent) {",
          "1664:             }",
          "1665:         }",
          "",
          "[Removed Lines]",
          "1660:             const tl = this.getTimelineForEvent(rootEvent.getId());",
          "1661:             const relatedEvents = tl?.getTimelineSet().getAllRelationsEventForEvent(rootEvent.getId());",
          "1662:             if (relatedEvents) {",
          "1663:                 events = events.concat(relatedEvents);",
          "",
          "[Added Lines]",
          "1814:             const relatedEvents = this.relations.getAllChildEventsForEvent(rootEvent.getId());",
          "1815:             if (relatedEvents?.length) {",
          "1818:                 events = events.concat(relatedEvents.filter(e => !e.isRelation(RelationType.Replace)));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1786:         for (let i = 0; i < this.timelineSets.length; i++) {",
          "1788:         }",
          "",
          "[Removed Lines]",
          "1784:     private addLiveEvent(event: MatrixEvent, duplicateStrategy: DuplicateStrategy, fromCache = false): void {",
          "1787:             this.timelineSets[i].addLiveEvent(event, duplicateStrategy, fromCache);",
          "",
          "[Added Lines]",
          "1938:     private addLiveEvent(event: MatrixEvent, addLiveEventOptions: IAddLiveEventOptions): void {",
          "1939:         const { duplicateStrategy, timelineWasEmpty, fromCache } = addLiveEventOptions;",
          "1943:             this.timelineSets[i].addLiveEvent(event, {",
          "1944:                 duplicateStrategy,",
          "1945:                 fromCache,",
          "1946:                 timelineWasEmpty,",
          "1947:             });",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1870:                 if (timelineSet.getFilter()) {",
          "1871:                     if (timelineSet.getFilter().filterRoomTimeline([event]).length) {",
          "1872:                         timelineSet.addEventToTimeline(event,",
          "1874:                     }",
          "1875:                 } else {",
          "1876:                     timelineSet.addEventToTimeline(event,",
          "1878:                 }",
          "1879:             }",
          "1880:         }",
          "",
          "[Removed Lines]",
          "1873:                             timelineSet.getLiveTimeline(), false);",
          "1877:                         timelineSet.getLiveTimeline(), false);",
          "",
          "[Added Lines]",
          "2033:                             timelineSet.getLiveTimeline(), {",
          "2034:                                 toStartOfTimeline: false,",
          "2035:                             });",
          "2039:                         timelineSet.getLiveTimeline(), {",
          "2040:                             toStartOfTimeline: false,",
          "2041:                         });",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1909:                 return isEventEncrypted || !isRoomEncrypted;",
          "1910:             });",
          "1921:         }",
          "1922:     }",
          "",
          "[Removed Lines]",
          "1912:             const { store } = this.client.sessionStore;",
          "1913:             if (this.pendingEventList.length > 0) {",
          "1914:                 store.setItem(",
          "1915:                     pendingEventsKey(this.roomId),",
          "1916:                     JSON.stringify(pendingEvents),",
          "1917:                 );",
          "1918:             } else {",
          "1919:                 store.removeItem(pendingEventsKey(this.roomId));",
          "1920:             }",
          "",
          "[Added Lines]",
          "2076:             this.client.store.setPendingEvents(this.roomId, pendingEvents);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1934:     private aggregateNonLiveRelation(event: MatrixEvent): void {",
          "1953:     }",
          "1955:     public getEventForTxnId(txnId: string): MatrixEvent {",
          "",
          "[Removed Lines]",
          "1935:         const { shouldLiveInRoom, threadId } = this.eventShouldLiveIn(event);",
          "1936:         const thread = this.getThread(threadId);",
          "1937:         thread?.timelineSet.aggregateRelations(event);",
          "1939:         if (shouldLiveInRoom) {",
          "1942:             for (let i = 0; i < this.timelineSets.length; i++) {",
          "1943:                 const timelineSet = this.timelineSets[i];",
          "1944:                 if (timelineSet.getFilter()) {",
          "1945:                     if (timelineSet.getFilter().filterRoomTimeline([event]).length) {",
          "1946:                         timelineSet.aggregateRelations(event);",
          "1947:                     }",
          "1948:                 } else {",
          "1949:                     timelineSet.aggregateRelations(event);",
          "1950:                 }",
          "1951:             }",
          "1952:         }",
          "",
          "[Added Lines]",
          "2091:         this.relations.aggregateChildEvent(event);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2126:         if (duplicateStrategy && [\"replace\", \"ignore\"].indexOf(duplicateStrategy) === -1) {",
          "2127:             throw new Error(\"duplicateStrategy MUST be either 'replace' or 'ignore'\");",
          "2128:         }",
          "",
          "[Removed Lines]",
          "2125:     public addLiveEvents(events: MatrixEvent[], duplicateStrategy?: DuplicateStrategy, fromCache = false): void {",
          "",
          "[Added Lines]",
          "2256:     public addLiveEvents(events: MatrixEvent[], addLiveEventOptions?: IAddLiveEventOptions): void;",
          "2260:     public addLiveEvents(events: MatrixEvent[], duplicateStrategy?: DuplicateStrategy, fromCache?: boolean): void;",
          "2261:     public addLiveEvents(",
          "2262:         events: MatrixEvent[],",
          "2263:         duplicateStrategyOrOpts?: DuplicateStrategy | IAddLiveEventOptions,",
          "2264:         fromCache = false,",
          "2265:     ): void {",
          "2266:         let duplicateStrategy = duplicateStrategyOrOpts as DuplicateStrategy;",
          "2267:         let timelineWasEmpty: boolean;",
          "2268:         if (typeof (duplicateStrategyOrOpts) === 'object') {",
          "2269:             ({",
          "2270:                 duplicateStrategy,",
          "2271:                 fromCache = false,",
          "2273:                 timelineWasEmpty,",
          "2274:             } = duplicateStrategyOrOpts);",
          "2275:         } else if (duplicateStrategyOrOpts !== undefined) {",
          "2278:             logger.warn(",
          "2279:                 'Overload deprecated: ' +",
          "2280:                 '`Room.addLiveEvents(events, duplicateStrategy?, fromCache?)` ' +",
          "2281:                 'is deprecated in favor of the overload with `Room.addLiveEvents(events, IAddLiveEventOptions)`',",
          "2282:             );",
          "2283:         }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2160:             eventsByThread[threadId]?.push(event);",
          "2162:             if (shouldLiveInRoom) {",
          "2164:             }",
          "2165:         }",
          "",
          "[Removed Lines]",
          "2163:                 this.addLiveEvent(event, duplicateStrategy, fromCache);",
          "",
          "[Added Lines]",
          "2322:                 this.addLiveEvent(event, {",
          "2323:                     duplicateStrategy,",
          "2324:                     fromCache,",
          "2325:                     timelineWasEmpty,",
          "2326:                 });",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2211:     private findThreadRoots(events: MatrixEvent[]): Set<string> {",
          "2212:         const threadRoots = new Set<string>();",
          "2213:         for (const event of events) {",
          "2215:                 threadRoots.add(event.relationEventId);",
          "2216:             }",
          "2217:         }",
          "",
          "[Removed Lines]",
          "2214:             if (event.isThreadRelation) {",
          "",
          "[Added Lines]",
          "2377:             if (event.isRelation(THREAD_RELATION_TYPE.name)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2939:     }",
          "2940: }",
          "2951: const ALLOWED_TRANSITIONS: Record<EventStatus, EventStatus[]> = {",
          "2952:     [EventStatus.ENCRYPTING]: [",
          "",
          "[Removed Lines]",
          "2946: function pendingEventsKey(roomId: string): string {",
          "2947:     return `mx_pending_events_${roomId}`;",
          "2948: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/models/thread.ts||src/models/thread.ts": [
          "File: src/models/thread.ts -> src/models/thread.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: limitations under the License.",
          "17: import { MatrixClient, MatrixEventEvent, RelationType, RoomEvent } from \"../matrix\";",
          "18: import { TypedReEmitter } from \"../ReEmitter\";",
          "19: import { IRelationsRequestOpts } from \"../@types/requests\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import { Optional } from \"matrix-events-sdk\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     ) {",
          "80:         super();",
          "82:         this.room = opts.room;",
          "83:         this.client = opts.client;",
          "84:         this.timelineSet = new EventTimelineSet(this.room, {",
          "86:             timelineSupport: true,",
          "87:             pendingEvents: true,",
          "89:         this.reEmitter = new TypedReEmitter(this);",
          "91:         this.reEmitter.reEmit(this.timelineSet, [",
          "",
          "[Removed Lines]",
          "85:             unstableClientRelationAggregation: true,",
          "88:         });",
          "",
          "[Added Lines]",
          "84:         if (!opts?.room) {",
          "87:             throw new Error(\"element-web#22141: A thread requires a room in order to function\");",
          "88:         }",
          "95:         }, this.client, this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:     private onEcho = (event: MatrixEvent) => {",
          "161:         if (event.threadRootId !== this.id) return; // ignore echoes for other timelines",
          "162:         if (this.lastEvent === event) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:         if (!event.isRelation(THREAD_RELATION_TYPE.name)) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:             this.timelineSet.addEventToTimeline(",
          "194:                 event,",
          "195:                 this.liveTimeline,",
          "199:             );",
          "200:         }",
          "201:     }",
          "",
          "[Removed Lines]",
          "196:                 toStartOfTimeline,",
          "197:                 false,",
          "198:                 this.roomState,",
          "",
          "[Added Lines]",
          "204:                 {",
          "205:                     toStartOfTimeline,",
          "206:                     fromCache: false,",
          "207:                     roomState: this.roomState,",
          "208:                 },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:             this._currentUserParticipated = true;",
          "222:         }",
          "231:         if (!Thread.hasServerSideSupport) {",
          "",
          "[Removed Lines]",
          "225:         if ([RelationType.Annotation, RelationType.Replace].includes(event.getRelation()?.rel_type as RelationType)) {",
          "226:             this.addEventToTimeline(event, toStartOfTimeline);",
          "227:             return;",
          "228:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:         ) {",
          "243:             this.fetchEditsWhereNeeded(event);",
          "244:             this.addEventToTimeline(event, false);",
          "245:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:         } else if (event.isRelation(RelationType.Annotation) || event.isRelation(RelationType.Replace)) {",
          "251:             this.timelineSet.relations.aggregateParentEvent(event);",
          "252:             this.timelineSet.relations.aggregateChildEvent(event, this.timelineSet);",
          "253:             return;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:     private async fetchEditsWhereNeeded(...events: MatrixEvent[]): Promise<unknown> {",
          "286:         return Promise.all(events.filter(e => e.isEncrypted()).map((event: MatrixEvent) => {",
          "287:             return this.client.relations(this.roomId, event.getId(), RelationType.Replace, event.getType(), {",
          "288:                 limit: 1,",
          "289:             }).then(relations => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:             if (event.isRelation()) return; // skip - relations don't get edits",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "320:     }",
          "326:         for (let i = this.events.length - 1; i >= 0; i--) {",
          "327:             const event = this.events[i];",
          "328:             if (matches(event)) {",
          "329:                 return event;",
          "330:             }",
          "331:         }",
          "332:     }",
          "334:     public get roomId(): string {",
          "",
          "[Removed Lines]",
          "325:     public lastReply(matches: (ev: MatrixEvent) => boolean = () => true): MatrixEvent {",
          "",
          "[Added Lines]",
          "335:     public lastReply(matches: (ev: MatrixEvent) => boolean = () => true): Optional<MatrixEvent> {",
          "342:         return null;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "345:     }",
          "351:         return this.lastEvent ?? this.lastReply();",
          "352:     }",
          "",
          "[Removed Lines]",
          "350:     public get replyToEvent(): MatrixEvent {",
          "",
          "[Added Lines]",
          "361:     public get replyToEvent(): Optional<MatrixEvent> {",
          "",
          "---------------"
        ],
        "src/pushprocessor.ts||src/pushprocessor.ts": [
          "File: src/pushprocessor.ts -> src/pushprocessor.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: const DEFAULT_OVERRIDE_RULES: IPushRule[] = [",
          "84:     {",
          "86:         rule_id: \".m.rule.reaction\",",
          "",
          "[Removed Lines]",
          "59:     {",
          "61:         rule_id: \".m.rule.tombstone\",",
          "62:         default: true,",
          "63:         enabled: true,",
          "64:         conditions: [",
          "65:             {",
          "66:                 kind: ConditionKind.EventMatch,",
          "67:                 key: \"type\",",
          "68:                 pattern: \"m.room.tombstone\",",
          "69:             },",
          "70:             {",
          "71:                 kind: ConditionKind.EventMatch,",
          "72:                 key: \"state_key\",",
          "73:                 pattern: \"\",",
          "74:             },",
          "75:         ],",
          "76:         actions: [",
          "77:             PushRuleActionName.Notify,",
          "78:             {",
          "79:                 set_tweak: TweakName.Highlight,",
          "80:                 value: true,",
          "81:             },",
          "82:         ],",
          "83:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:                 key: \"type\",",
          "109:                 pattern: EventType.RoomServerAcl,",
          "110:             },",
          "111:         ],",
          "115:     },",
          "116: ];",
          "",
          "[Removed Lines]",
          "112:         actions: [",
          "113:             PushRuleActionName.DontNotify,",
          "114:         ],",
          "",
          "[Added Lines]",
          "86:             {",
          "87:                 kind: ConditionKind.EventMatch,",
          "88:                 key: \"state_key\",",
          "89:                 pattern: \"\",",
          "90:             },",
          "92:         actions: [],",
          "",
          "---------------"
        ],
        "src/store/index.ts||src/store/index.ts": [
          "File: src/store/index.ts -> src/store/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { EventType } from \"../@types/event\";",
          "18: import { Room } from \"../models/room\";",
          "19: import { User } from \"../models/user\";",
          "21: import { Filter } from \"../filter\";",
          "22: import { RoomSummary } from \"../models/room-summary\";",
          "23: import { IMinimalEvent, IRooms, ISyncResponse } from \"../sync-accumulator\";",
          "",
          "[Removed Lines]",
          "20: import { MatrixEvent } from \"../models/event\";",
          "",
          "[Added Lines]",
          "20: import { IEvent, MatrixEvent } from \"../models/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:     getClientOptions(): Promise<IStartClientOpts>;",
          "220:     storeClientOptions(options: IStartClientOpts): Promise<void>;",
          "221: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     getPendingEvents(roomId: string): Promise<Partial<IEvent>[]>;",
          "224:     setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts": [
          "File: src/store/indexeddb-local-backend.ts -> src/store/indexeddb-local-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     private db: IDBDatabase = null;",
          "128:     private disconnected = true;",
          "129:     private _isNewlyCreated = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     private isPersisting = false;",
          "131:     private pendingUserPresenceData: UserTuple[] = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:                 reject(err);",
          "267:             };",
          "268:         }).then((events) => {",
          "270:             return events;",
          "271:         });",
          "272:     }",
          "",
          "[Removed Lines]",
          "269:             logger.log(`LL: got ${events && events.length} membershipEvents from storage for room ${roomId} ...`);",
          "",
          "[Added Lines]",
          "271:             logger.log(`LL: got ${events?.length} membershipEvents from storage for room ${roomId} ...`);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:     public async syncToDatabase(userTuples: UserTuple[]): Promise<void> {",
          "402:         const syncData = this.syncAccumulator.getJSON(true);",
          "409:     }",
          "",
          "[Removed Lines]",
          "404:         await Promise.all([",
          "405:             this.persistUserPresenceEvents(userTuples),",
          "406:             this.persistAccountData(syncData.accountData),",
          "407:             this.persistSyncData(syncData.nextBatch, syncData.roomsData),",
          "408:         ]);",
          "",
          "[Added Lines]",
          "406:         if (this.isPersisting) {",
          "407:             logger.warn(\"Skipping syncToDatabase() as persist already in flight\");",
          "408:             this.pendingUserPresenceData.push(...userTuples);",
          "409:             return;",
          "410:         } else {",
          "411:             userTuples.unshift(...this.pendingUserPresenceData);",
          "412:             this.isPersisting = true;",
          "413:         }",
          "415:         try {",
          "416:             await Promise.all([",
          "417:                 this.persistUserPresenceEvents(userTuples),",
          "418:                 this.persistAccountData(syncData.accountData),",
          "419:                 this.persistSyncData(syncData.nextBatch, syncData.roomsData),",
          "420:             ]);",
          "421:         } finally {",
          "422:             this.isPersisting = false;",
          "423:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "427:                 nextBatch,",
          "428:                 roomsData,",
          "429:             }); // put == UPSERT",
          "431:         });",
          "432:     }",
          "",
          "[Removed Lines]",
          "430:             return txnAsPromise(txn).then();",
          "",
          "[Added Lines]",
          "445:             return txnAsPromise(txn).then(() => {",
          "446:                 logger.log(\"Persisted sync data up to\", nextBatch);",
          "447:             });",
          "",
          "---------------"
        ],
        "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts": [
          "File: src/store/indexeddb-store-worker.ts -> src/store/indexeddb-store-worker.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:                 result: ret,",
          "123:             });",
          "124:         }, (err) => {",
          "127:             this.postMessage.call(null, {",
          "128:                 command: 'cmd_fail',",
          "129:                 seq: msg.seq,",
          "",
          "[Removed Lines]",
          "125:             logger.error(\"Error running command: \" + msg.command);",
          "126:             logger.error(err);",
          "",
          "[Added Lines]",
          "125:             logger.error(\"Error running command: \" + msg.command, err);",
          "",
          "---------------"
        ],
        "src/store/indexeddb.ts||src/store/indexeddb.ts": [
          "File: src/store/indexeddb.ts -> src/store/indexeddb.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:         return this.backend.getOutOfBandMembers(roomId);",
          "248:     }, \"getOutOfBandMembers\");",
          "",
          "[Removed Lines]",
          "246:     public getOutOfBandMembers = this.degradable((roomId: string): Promise<IStateEventWithRoomId[]> => {",
          "",
          "[Added Lines]",
          "246:     public getOutOfBandMembers = this.degradable((roomId: string): Promise<IStateEventWithRoomId[] | null> => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:         return async (...args) => {",
          "299:             try {",
          "301:             } catch (e) {",
          "302:                 logger.error(\"IndexedDBStore failure, degrading to MemoryStore\", e);",
          "303:                 this.emitter.emit(\"degraded\", e);",
          "",
          "[Removed Lines]",
          "300:                 return func.call(this, ...args);",
          "",
          "[Added Lines]",
          "300:                 return await func.call(this, ...args);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:                 if (fallbackFn) {",
          "324:                 }",
          "325:             }",
          "326:         };",
          "327:     }",
          "328: }",
          "330: type DegradableFn<A extends Array<any>, T> = (...args: A) => Promise<T>;",
          "",
          "[Removed Lines]",
          "323:                     return fallbackFn(...args);",
          "",
          "[Added Lines]",
          "323:                     return fallbackFn.call(this, ...args);",
          "331:     public async getPendingEvents(roomId: string): Promise<Partial<IEvent>[]> {",
          "332:         if (!this.localStorage) return super.getPendingEvents(roomId);",
          "334:         const serialized = this.localStorage.getItem(pendingEventsKey(roomId));",
          "335:         if (serialized) {",
          "336:             try {",
          "337:                 return JSON.parse(serialized);",
          "338:             } catch (e) {",
          "339:                 logger.error(\"Could not parse persisted pending events\", e);",
          "340:             }",
          "341:         }",
          "342:         return [];",
          "343:     }",
          "345:     public async setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "346:         if (!this.localStorage) return super.setPendingEvents(roomId, events);",
          "348:         if (events.length > 0) {",
          "349:             this.localStorage.setItem(pendingEventsKey(roomId), JSON.stringify(events));",
          "350:         } else {",
          "351:             this.localStorage.removeItem(pendingEventsKey(roomId));",
          "352:         }",
          "353:     }",
          "354: }",
          "360: function pendingEventsKey(roomId: string): string {",
          "361:     return `mx_pending_events_${roomId}`;",
          "",
          "---------------"
        ],
        "src/store/memory.ts||src/store/memory.ts": [
          "File: src/store/memory.ts -> src/store/memory.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { EventType } from \"../@types/event\";",
          "23: import { Room } from \"../models/room\";",
          "24: import { User } from \"../models/user\";",
          "26: import { RoomState, RoomStateEvent } from \"../models/room-state\";",
          "27: import { RoomMember } from \"../models/room-member\";",
          "28: import { Filter } from \"../filter\";",
          "",
          "[Removed Lines]",
          "25: import { MatrixEvent } from \"../models/event\";",
          "",
          "[Added Lines]",
          "25: import { IEvent, MatrixEvent } from \"../models/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     private filters: Record<string, Record<string, Filter>> = {};",
          "62:     public accountData: Record<string, MatrixEvent> = {}; // type : content",
          "64:     private oobMembers: Record<string, IStateEventWithRoomId[]> = {}; // roomId: [member events]",
          "65:     private clientOptions = {};",
          "67:     constructor(opts: IOpts = {}) {",
          "",
          "[Removed Lines]",
          "63:     private readonly localStorage: Storage;",
          "",
          "[Added Lines]",
          "63:     protected readonly localStorage: Storage;",
          "65:     private pendingEvents: { [roomId: string]: Partial<IEvent>[] } = {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:         this.clientOptions = Object.assign({}, options);",
          "421:         return Promise.resolve();",
          "422:     }",
          "423: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:     public async getPendingEvents(roomId: string): Promise<Partial<IEvent>[]> {",
          "426:         return this.pendingEvents[roomId] ?? [];",
          "427:     }",
          "429:     public async setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "430:         this.pendingEvents[roomId] = events;",
          "431:     }",
          "",
          "---------------"
        ],
        "src/store/session/webstorage.js||src/store/session/webstorage.js": [
          "File: src/store/session/webstorage.js -> src/store/session/webstorage.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/store/stub.ts||src/store/stub.ts": [
          "File: src/store/stub.ts -> src/store/stub.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { EventType } from \"../@types/event\";",
          "23: import { Room } from \"../models/room\";",
          "24: import { User } from \"../models/user\";",
          "26: import { Filter } from \"../filter\";",
          "27: import { ISavedSync, IStore } from \"./index\";",
          "28: import { RoomSummary } from \"../models/room-summary\";",
          "",
          "[Removed Lines]",
          "25: import { MatrixEvent } from \"../models/event\";",
          "",
          "[Added Lines]",
          "25: import { IEvent, MatrixEvent } from \"../models/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     public storeClientOptions(options: object): Promise<void> {",
          "263:         return Promise.resolve();",
          "264:     }",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:     public async getPendingEvents(roomId: string): Promise<Partial<IEvent>[]> {",
          "267:         return [];",
          "268:     }",
          "270:     public setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "271:         return Promise.resolve();",
          "272:     }",
          "",
          "---------------"
        ],
        "src/sync-accumulator.ts||src/sync-accumulator.ts": [
          "File: src/sync-accumulator.ts -> src/sync-accumulator.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     event_id: string;",
          "51:     sender: string;",
          "52:     origin_server_ts: number;",
          "55:     age?: number;",
          "56: }",
          "",
          "[Removed Lines]",
          "53:     unsigned?: IUnsigned;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sync.ts||src/sync.ts": [
          "File: src/sync.ts -> src/sync.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import { ISavedSync } from \"./store\";",
          "52: import { EventType } from \"./@types/event\";",
          "53: import { IPushRules } from \"./@types/PushRules\";",
          "55: import { RoomMemberEvent } from \"./models/room-member\";",
          "56: import { BeaconEvent } from \"./models/beacon\";",
          "58: const DEBUG = true;",
          "",
          "[Removed Lines]",
          "54: import { RoomStateEvent } from \"./models/room-state\";",
          "",
          "[Added Lines]",
          "54: import { RoomState, RoomStateEvent, IMarkerFoundOptions } from \"./models/room-state\";",
          "57: import { IEventsResponse } from \"./@types/requests\";",
          "58: import { IAbortablePromise } from \"./@types/partials\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: const FAILED_SYNC_ERROR_THRESHOLD = 3;",
          "71: export enum SyncState {",
          "72:     Error = \"ERROR\",",
          "73:     Prepared = \"PREPARED\",",
          "74:     Stopped = \"STOPPED\",",
          "75:     Syncing = \"SYNCING\",",
          "76:     Catchup = \"CATCHUP\",",
          "77:     Reconnecting = \"RECONNECTING\",",
          "78: }",
          "80: function getFilterName(userId: string, suffix?: string): string {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: const MSC2716_ROOM_VERSIONS = [",
          "97:     'org.matrix.msc2716v3',",
          "98: ];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     _cacheBuster?: string | number; // not part of the API itself",
          "121: }",
          "128: type WrappedRoom<T> = T & {",
          "129:     room: Room;",
          "130:     isBrandNewRoom: boolean;",
          "",
          "[Removed Lines]",
          "124: interface IRequestPromise<T> extends Promise<T> {",
          "125:     abort(): void;",
          "126: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148: export class SyncApi {",
          "149:     private _peekRoom: Room = null;",
          "151:     private syncState: SyncState = null;",
          "152:     private syncStateData: ISyncStateData = null; // additional data (eg. error object for failed sync)",
          "153:     private catchingUp = false;",
          "",
          "[Removed Lines]",
          "150:     private currentSyncRequest: IRequestPromise<ISyncResponse> = null;",
          "",
          "[Added Lines]",
          "165:     private currentSyncRequest: IAbortablePromise<ISyncResponse> = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:         const client = this.client;",
          "188:         const {",
          "189:             timelineSupport,",
          "191:         } = client;",
          "192:         const room = new Room(roomId, client, client.getUserId(), {",
          "193:             lazyLoadMembers: this.opts.lazyLoadMembers,",
          "194:             pendingEventOrdering: this.opts.pendingEventOrdering,",
          "195:             timelineSupport,",
          "197:         });",
          "198:         client.reEmitter.reEmit(room, [",
          "199:             RoomEvent.Name,",
          "",
          "[Removed Lines]",
          "190:             unstableClientRelationAggregation,",
          "196:             unstableClientRelationAggregation,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208:             RoomEvent.TimelineReset,",
          "209:         ]);",
          "210:         this.registerStateListeners(room);",
          "211:         return room;",
          "212:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:         room.on(RoomEvent.CurrentStateUpdated, (targetRoom, previousCurrentState) => {",
          "226:             if (targetRoom !== room) {",
          "227:                 return;",
          "228:             }",
          "230:             this.deregisterStateListeners(previousCurrentState);",
          "231:             this.registerStateListeners(room);",
          "232:         });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:                 RoomMemberEvent.Membership,",
          "241:             ]);",
          "242:         });",
          "243:     }",
          "254:     }",
          "",
          "[Removed Lines]",
          "249:     private deregisterStateListeners(room: Room): void {",
          "251:         room.currentState.removeAllListeners(RoomStateEvent.Events);",
          "252:         room.currentState.removeAllListeners(RoomStateEvent.Members);",
          "253:         room.currentState.removeAllListeners(RoomStateEvent.NewMember);",
          "",
          "[Added Lines]",
          "266:         room.currentState.on(RoomStateEvent.Marker, (markerEvent, markerFoundOptions) => {",
          "267:             this.onMarkerStateEvent(room, markerEvent, markerFoundOptions);",
          "268:         });",
          "275:     private deregisterStateListeners(roomState: RoomState): void {",
          "277:         roomState.removeAllListeners(RoomStateEvent.Events);",
          "278:         roomState.removeAllListeners(RoomStateEvent.Members);",
          "279:         roomState.removeAllListeners(RoomStateEvent.NewMember);",
          "280:         roomState.removeAllListeners(RoomStateEvent.Marker);",
          "281:     }",
          "292:     private onMarkerStateEvent(",
          "293:         room: Room,",
          "294:         markerEvent: MatrixEvent,",
          "295:         { timelineWasEmpty }: IMarkerFoundOptions = {},",
          "296:     ): void {",
          "302:         if (timelineWasEmpty) {",
          "303:             logger.debug(",
          "304:                 `MarkerState: Ignoring markerEventId=${markerEvent.getId()} in roomId=${room.roomId} ` +",
          "305:                 `because the timeline was empty before the marker arrived which means there is nothing to refresh.`,",
          "306:             );",
          "307:             return;",
          "308:         }",
          "310:         const isValidMsc2716Event =",
          "314:             MSC2716_ROOM_VERSIONS.includes(room.getVersion()) ||",
          "318:             markerEvent.getSender() === room.getCreator();",
          "332:         if (isValidMsc2716Event) {",
          "335:             logger.debug(",
          "336:                 `MarkerState: Timeline needs to be refreshed because ` +",
          "337:                 `a new markerEventId=${markerEvent.getId()} was sent in roomId=${room.roomId}`,",
          "338:             );",
          "339:             room.setTimelineNeedsRefresh(true);",
          "340:             room.emit(RoomEvent.HistoryImportedWithinTimeline, markerEvent, room);",
          "341:         } else {",
          "342:             logger.debug(",
          "343:                 `MarkerState: Ignoring markerEventId=${markerEvent.getId()} in roomId=${room.roomId} because ` +",
          "344:                 `MSC2716 is not supported in the room version or for any room version, the marker wasn't sent ` +",
          "345:                 `by the room creator.`,",
          "346:             );",
          "347:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "274:             getFilterName(client.credentials.userId, \"LEFT_ROOMS\"), filter,",
          "275:         ).then(function(filterId) {",
          "276:             qps.filter = filterId;",
          "278:                 undefined, Method.Get, \"/sync\", qps as any, undefined, localTimeoutMs,",
          "279:             );",
          "280:         }).then(async (data) => {",
          "",
          "[Removed Lines]",
          "277:             return client.http.authedRequest<any>( // TODO types",
          "",
          "[Added Lines]",
          "371:             return client.http.authedRequest<ISyncResponse>(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "409:         }",
          "414:             room_id: peekRoom.roomId,",
          "415:             timeout: String(30 * 1000),",
          "416:             from: token,",
          "",
          "[Removed Lines]",
          "413:         this.client.http.authedRequest<any>(undefined, Method.Get, \"/events\", {",
          "",
          "[Added Lines]",
          "506:         this.client.http.authedRequest<IEventsResponse>(undefined, Method.Get, \"/events\", {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "702:             global.window.removeEventListener(\"online\", this.onOnline, false);",
          "703:         }",
          "704:         this.running = false;",
          "708:         if (this.keepAliveTimer) {",
          "709:             clearTimeout(this.keepAliveTimer);",
          "710:             this.keepAliveTimer = null;",
          "",
          "[Removed Lines]",
          "705:         if (this.currentSyncRequest) {",
          "706:             this.currentSyncRequest.abort();",
          "707:         }",
          "",
          "[Added Lines]",
          "798:         this.currentSyncRequest?.abort();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "872:         this.doSync(syncOptions);",
          "873:     }",
          "876:         const qps = this.getSyncParams(syncOptions, syncToken);",
          "878:             undefined, Method.Get, \"/sync\", qps as any, undefined,",
          "879:             qps.timeout + BUFFER_PERIOD_MS,",
          "880:         );",
          "",
          "[Removed Lines]",
          "875:     private doSyncRequest(syncOptions: ISyncOptions, syncToken: string): IRequestPromise<ISyncResponse> {",
          "877:         return this.client.http.authedRequest( // TODO types",
          "",
          "[Added Lines]",
          "966:     private doSyncRequest(syncOptions: ISyncOptions, syncToken: string): IAbortablePromise<ISyncResponse> {",
          "968:         return this.client.http.authedRequest<ISyncResponse>(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1166:                 room.recalculate();",
          "1167:                 client.store.storeRoom(room);",
          "1168:                 client.emit(ClientEvent.Room, room);",
          "1169:             }",
          "1170:             stateEvents.forEach(function(e) {",
          "1171:                 client.emit(ClientEvent.Event, e);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1260:             } else {",
          "1262:                 room.recalculate();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1251:                 }",
          "1253:                 if (limited) {",
          "1255:                     room.resetLiveTimeline(",
          "1256:                         joinObj.timeline.prev_batch,",
          "1257:                         this.opts.canResetEntireTimeline(room.roomId) ?",
          "",
          "[Removed Lines]",
          "1254:                     this.deregisterStateListeners(room);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1264:                     client.resetNotifTimelineSet();",
          "1267:                 }",
          "1268:             }",
          "",
          "[Removed Lines]",
          "1266:                     this.registerStateListeners(room);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1587:             for (const ev of stateEventList) {",
          "1588:                 this.client.getPushActionsForEvent(ev);",
          "1589:             }",
          "1591:         }",
          "1593:         this.resolveInvites(room);",
          "",
          "[Removed Lines]",
          "1590:             liveTimeline.initialiseState(stateEventList);",
          "",
          "[Added Lines]",
          "1681:             liveTimeline.initialiseState(stateEventList, {",
          "1682:                 timelineWasEmpty,",
          "1683:             });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1629:         this.client.processBeaconEvents(room, timelineEventList);",
          "1630:     }",
          "",
          "[Removed Lines]",
          "1628:         room.addLiveEvents(timelineEventList || [], null, fromCache);",
          "",
          "[Added Lines]",
          "1721:         room.addLiveEvents(timelineEventList || [], {",
          "1722:             fromCache,",
          "1723:             timelineWasEmpty,",
          "1724:         });",
          "",
          "---------------"
        ],
        "src/webrtc/call.ts||src/webrtc/call.ts": [
          "File: src/webrtc/call.ts -> src/webrtc/call.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2509:     }",
          "2510: }",
          "2527:     if (typeof(window) === 'undefined' || typeof(document) === 'undefined') {",
          "2531:     }",
          "2537:     try {",
          "2538:         const supported = Boolean(",
          "2539:             window.RTCPeerConnection || window.RTCSessionDescription ||",
          "2540:             window.RTCIceCandidate || navigator.mediaDevices,",
          "2541:         );",
          "2542:         if (!supported) {",
          "2544:             if (process.env.NODE_ENV !== \"test\") {",
          "2545:                 logger.error(\"WebRTC is not supported in this browser / environment\");",
          "2546:             }",
          "2548:         }",
          "2549:     } catch (e) {",
          "2550:         logger.error(\"Exception thrown when trying to access WebRTC\", e);",
          "2552:     }",
          "2554:     const optionsForceTURN = options ? options.forceTURN : false;",
          "2556:     const opts: CallOpts = {",
          "",
          "[Removed Lines]",
          "2525: export function createNewMatrixCall(client: any, roomId: string, options?: CallOpts): MatrixCall {",
          "2530:         return null;",
          "2547:             return null;",
          "2551:         return null;",
          "",
          "[Added Lines]",
          "2512: export function supportsMatrixCall(): boolean {",
          "2517:         return false;",
          "2533:             return false;",
          "2537:         return false;",
          "2540:     return true;",
          "2541: }",
          "2556: export function createNewMatrixCall(client: any, roomId: string, options?: CallOpts): MatrixCall | null {",
          "2557:     if (!supportsMatrixCall()) return null;",
          "",
          "---------------"
        ],
        "src/webrtc/callEventHandler.ts||src/webrtc/callEventHandler.ts": [
          "File: src/webrtc/callEventHandler.ts -> src/webrtc/callEventHandler.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             return eventType.startsWith(\"m.call.\") || eventType.startsWith(\"org.matrix.call.\");",
          "95:         });",
          "",
          "[Removed Lines]",
          "97:         const ignoreCallIds = new Set<String>();",
          "",
          "[Added Lines]",
          "97:         const ignoreCallIds = new Set<string>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:             }",
          "301:             for (const thisCall of this.calls.values()) {",
          "302:                 const isCalling = [CallState.WaitLocalMedia, CallState.CreateOffer, CallState.InviteSent].includes(",
          "303:                     thisCall.state,",
          "",
          "[Removed Lines]",
          "300:             let existingCall;",
          "",
          "[Added Lines]",
          "300:             let existingCall: MatrixCall;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:         if (!call || !call.hasPeerConnection) {",
          "388:             return;",
          "389:         }",
          "",
          "[Removed Lines]",
          "387:             logger.warn(\"Discarding an event, we don't have a call/peerConn\", type);",
          "",
          "[Added Lines]",
          "387:             logger.info(`Discarding possible call event ${event.getId()} as we don't have a call/peerConn`, type);",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: \"@actions/core@^1.4.0\":",
          "9:   dependencies:",
          "12: \"@actions/github@^5.0.0\":",
          "16:   dependencies:",
          "18:     \"@octokit/core\" \"^3.6.0\"",
          "19:     \"@octokit/plugin-paginate-rest\" \"^2.17.0\"",
          "20:     \"@octokit/plugin-rest-endpoint-methods\" \"^5.13.0\"",
          "26:   dependencies:",
          "29: \"@ampproject/remapping@^2.1.0\":",
          "30:   version \"2.2.0\"",
          "",
          "[Removed Lines]",
          "6:   version \"1.7.0\"",
          "7:   resolved \"https://registry.yarnpkg.com/@actions/core/-/core-1.7.0.tgz#f179a5a0bf5c1102d89b8cf1712825e763feaee4\"",
          "8:   integrity sha512-7fPSS7yKOhTpgLMbw7lBLc1QJWvJBBAgyTX2PEhagWcKK8t0H8AKCoPMfnrHqIm5cRYH4QFPqD1/ruhuUE7YcQ==",
          "10:     \"@actions/http-client\" \"^1.0.11\"",
          "13:   version \"5.0.1\"",
          "14:   resolved \"https://registry.yarnpkg.com/@actions/github/-/github-5.0.1.tgz#5fdbe371d9a592038668be95d12421361585fba1\"",
          "15:   integrity sha512-JZGyPM9ektb8NVTTI/2gfJ9DL7Rk98tQ7OVyTlgTuaQroariRBsOnzjy0I2EarX4xUZpK88YyO503fhmjFdyAg==",
          "17:     \"@actions/http-client\" \"^1.0.11\"",
          "22: \"@actions/http-client@^1.0.11\":",
          "23:   version \"1.0.11\"",
          "24:   resolved \"https://registry.yarnpkg.com/@actions/http-client/-/http-client-1.0.11.tgz#c58b12e9aa8b159ee39e7dd6cbd0e91d905633c0\"",
          "25:   integrity sha512-VRYHGQV1rqnROJqdMvGUbY/Kn8vriQe/F9HR2AlYHzmKuM/p3kjNuXhmdBfcVgsvRWTz5C5XW5xvndZrVBuAYg==",
          "27:     tunnel \"0.0.6\"",
          "",
          "[Added Lines]",
          "6:   version \"1.8.2\"",
          "7:   resolved \"https://registry.yarnpkg.com/@actions/core/-/core-1.8.2.tgz#67539d669ae9b751430469e9ae4d83e0525973ac\"",
          "8:   integrity sha512-FXcBL7nyik8K5ODeCKlxi+vts7torOkoDAKfeh61EAkAy1HAvwn9uVzZBY0f15YcQTcZZ2/iSGBFHEuioZWfDA==",
          "10:     \"@actions/http-client\" \"^2.0.1\"",
          "13:   version \"5.0.3\"",
          "14:   resolved \"https://registry.yarnpkg.com/@actions/github/-/github-5.0.3.tgz#b305765d6173962d113451ea324ff675aa674f35\"",
          "15:   integrity sha512-myjA/pdLQfhUGLtRZC/J4L1RXOG4o6aYdiEq+zr5wVVKljzbFld+xv10k1FX6IkIJtNxbAq44BdwSNpQ015P0A==",
          "17:     \"@actions/http-client\" \"^2.0.1\"",
          "22: \"@actions/http-client@^2.0.1\":",
          "23:   version \"2.0.1\"",
          "24:   resolved \"https://registry.yarnpkg.com/@actions/http-client/-/http-client-2.0.1.tgz#873f4ca98fe32f6839462a6f046332677322f99c\"",
          "25:   integrity sha512-PIXiMVtz6VvyaRsGY268qvj57hXQEpsYogYOu2nrQhlf+XCGmZstmuZBbAybUl1nQGnvS1k1eEsQ69ZoD7xlSw==",
          "27:     tunnel \"^0.0.6\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     \"@nicolo-ribaudo/chokidar-2\" \"2.1.8-no-fsevents.3\"",
          "51:     chokidar \"^3.4.0\"",
          "54:   version \"7.16.7\"",
          "55:   resolved \"https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.16.7.tgz#44416b6bd7624b998f5b1af5d470856c40138789\"",
          "56:   integrity sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
          "57:   dependencies:",
          "58:     \"@babel/highlight\" \"^7.16.7\"",
          "61:   version \"7.17.10\"",
          "62:   resolved \"https://registry.yarnpkg.com/@babel/compat-data/-/compat-data-7.17.10.tgz#711dc726a492dfc8be8220028b1b92482362baab\"",
          "63:   integrity sha512-GZt/TCsG70Ms19gfZO1tM4CVnXsPgEPBCpJu+Qz3L0LUDsY5nZqFZglIoPC1kIYOtNBZlrnFT+klg12vFGZXrw==",
          "69:   dependencies:",
          "70:     \"@ampproject/remapping\" \"^2.1.0\"",
          "71:     \"@babel/code-frame\" \"^7.16.7\"",
          "77:     \"@babel/template\" \"^7.16.7\"",
          "80:     convert-source-map \"^1.7.0\"",
          "81:     debug \"^4.1.0\"",
          "82:     gensync \"^1.0.0-beta.2\"",
          "",
          "[Removed Lines]",
          "53: \"@babel/code-frame@^7.0.0\", \"@babel/code-frame@^7.16.7\":",
          "60: \"@babel/compat-data@^7.13.11\", \"@babel/compat-data@^7.17.0\", \"@babel/compat-data@^7.17.10\":",
          "65: \"@babel/core@^7.1.0\", \"@babel/core@^7.12.10\", \"@babel/core@^7.12.3\", \"@babel/core@^7.7.5\":",
          "66:   version \"7.17.10\"",
          "67:   resolved \"https://registry.yarnpkg.com/@babel/core/-/core-7.17.10.tgz#74ef0fbf56b7dfc3f198fc2d927f4f03e12f4b05\"",
          "68:   integrity sha512-liKoppandF3ZcBnIYFjfSDHZLKdLHGJRkoWtG8zQyGJBQfIYobpnVGI5+pLBNtS6psFLDzyq8+h5HiVljW9PNA==",
          "72:     \"@babel/generator\" \"^7.17.10\"",
          "73:     \"@babel/helper-compilation-targets\" \"^7.17.10\"",
          "74:     \"@babel/helper-module-transforms\" \"^7.17.7\"",
          "75:     \"@babel/helpers\" \"^7.17.9\"",
          "76:     \"@babel/parser\" \"^7.17.10\"",
          "78:     \"@babel/traverse\" \"^7.17.10\"",
          "79:     \"@babel/types\" \"^7.17.10\"",
          "",
          "[Added Lines]",
          "53: \"@babel/code-frame@^7.0.0\", \"@babel/code-frame@^7.12.13\", \"@babel/code-frame@^7.16.7\":",
          "60: \"@babel/compat-data@^7.13.11\", \"@babel/compat-data@^7.17.10\":",
          "65: \"@babel/core@^7.11.6\", \"@babel/core@^7.12.10\", \"@babel/core@^7.12.3\", \"@babel/core@^7.7.5\":",
          "66:   version \"7.18.2\"",
          "67:   resolved \"https://registry.yarnpkg.com/@babel/core/-/core-7.18.2.tgz#87b2fcd7cce9becaa7f5acebdc4f09f3dd19d876\"",
          "68:   integrity sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
          "72:     \"@babel/generator\" \"^7.18.2\"",
          "73:     \"@babel/helper-compilation-targets\" \"^7.18.2\"",
          "74:     \"@babel/helper-module-transforms\" \"^7.18.0\"",
          "75:     \"@babel/helpers\" \"^7.18.2\"",
          "76:     \"@babel/parser\" \"^7.18.0\"",
          "78:     \"@babel/traverse\" \"^7.18.2\"",
          "79:     \"@babel/types\" \"^7.18.2\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     semver \"^6.3.0\"",
          "86: \"@babel/eslint-parser@^7.12.10\":",
          "90:   dependencies:",
          "91:     eslint-scope \"^5.1.1\"",
          "92:     eslint-visitor-keys \"^2.1.0\"",
          "",
          "[Removed Lines]",
          "87:   version \"7.17.0\"",
          "88:   resolved \"https://registry.yarnpkg.com/@babel/eslint-parser/-/eslint-parser-7.17.0.tgz#eabb24ad9f0afa80e5849f8240d0e5facc2d90d6\"",
          "89:   integrity sha512-PUEJ7ZBXbRkbq3qqM/jZ2nIuakUBqCYc7Qf52Lj7dlZ6zERnqisdHioL0l4wwQZnmskMeasqUNzLBFKs3nylXA==",
          "",
          "[Added Lines]",
          "87:   version \"7.18.2\"",
          "88:   resolved \"https://registry.yarnpkg.com/@babel/eslint-parser/-/eslint-parser-7.18.2.tgz#e14dee36c010edfb0153cf900c2b0815e82e3245\"",
          "89:   integrity sha512-oFQYkE8SuH14+uR51JVAmdqwKYXGRjEXx7s+WiagVjqQ+HPE+nnwyF2qlVG8evUsUHmPcA+6YXMEDbIhEyQc5A==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:   dependencies:",
          "100:     eslint-rule-composer \"^0.3.0\"",
          "106:   dependencies:",
          "109:     jsesc \"^2.5.1\"",
          "111: \"@babel/helper-annotate-as-pure@^7.16.7\":",
          "",
          "[Removed Lines]",
          "102: \"@babel/generator@^7.12.11\", \"@babel/generator@^7.17.10\":",
          "103:   version \"7.17.10\"",
          "104:   resolved \"https://registry.yarnpkg.com/@babel/generator/-/generator-7.17.10.tgz#c281fa35b0c349bbe9d02916f4ae08fc85ed7189\"",
          "105:   integrity sha512-46MJZZo9y3o4kmhBVc7zW7i8dtR1oIK/sdO5NcfcZRhTGYi+KKJRtHNgsU6c4VUcJmUNV/LQdebD/9Dlv4K+Tg==",
          "107:     \"@babel/types\" \"^7.17.10\"",
          "108:     \"@jridgewell/gen-mapping\" \"^0.1.0\"",
          "",
          "[Added Lines]",
          "102: \"@babel/generator@^7.12.11\", \"@babel/generator@^7.18.2\", \"@babel/generator@^7.7.2\":",
          "103:   version \"7.18.2\"",
          "104:   resolved \"https://registry.yarnpkg.com/@babel/generator/-/generator-7.18.2.tgz#33873d6f89b21efe2da63fe554460f3df1c5880d\"",
          "105:   integrity sha512-W1lG5vUwFvfMd8HVXqdfbuG7RuaSrTCCD8cl8fP8wOivdbtbIg2Db3IWUcgvfxKbbn6ZBGYRW/Zk1MIwK49mgw==",
          "107:     \"@babel/types\" \"^7.18.2\"",
          "108:     \"@jridgewell/gen-mapping\" \"^0.3.0\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:     \"@babel/helper-explode-assignable-expression\" \"^7.16.7\"",
          "124:     \"@babel/types\" \"^7.16.7\"",
          "130:   dependencies:",
          "131:     \"@babel/compat-data\" \"^7.17.10\"",
          "132:     \"@babel/helper-validator-option\" \"^7.16.7\"",
          "133:     browserslist \"^4.20.2\"",
          "134:     semver \"^6.3.0\"",
          "140:   dependencies:",
          "141:     \"@babel/helper-annotate-as-pure\" \"^7.16.7\"",
          "142:     \"@babel/helper-environment-visitor\" \"^7.16.7\"",
          "",
          "[Removed Lines]",
          "126: \"@babel/helper-compilation-targets@^7.13.0\", \"@babel/helper-compilation-targets@^7.16.7\", \"@babel/helper-compilation-targets@^7.17.10\":",
          "127:   version \"7.17.10\"",
          "128:   resolved \"https://registry.yarnpkg.com/@babel/helper-compilation-targets/-/helper-compilation-targets-7.17.10.tgz#09c63106d47af93cf31803db6bc49fef354e2ebe\"",
          "129:   integrity sha512-gh3RxjWbauw/dFiU/7whjd0qN9K6nPJMqe6+Er7rOavFh0CQUSwhAE3IcTho2rywPJFxej6TUUHDkWcYI6gGqQ==",
          "136: \"@babel/helper-create-class-features-plugin@^7.16.10\", \"@babel/helper-create-class-features-plugin@^7.16.7\", \"@babel/helper-create-class-features-plugin@^7.17.6\":",
          "137:   version \"7.17.9\"",
          "138:   resolved \"https://registry.yarnpkg.com/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.17.9.tgz#71835d7fb9f38bd9f1378e40a4c0902fdc2ea49d\"",
          "139:   integrity sha512-kUjip3gruz6AJKOq5i3nC6CoCEEF/oHH3cp6tOZhB+IyyyPyW0g1Gfsxn3mkk6S08pIA2y8GQh609v9G/5sHVQ==",
          "",
          "[Added Lines]",
          "126: \"@babel/helper-compilation-targets@^7.13.0\", \"@babel/helper-compilation-targets@^7.16.7\", \"@babel/helper-compilation-targets@^7.17.10\", \"@babel/helper-compilation-targets@^7.18.2\":",
          "127:   version \"7.18.2\"",
          "128:   resolved \"https://registry.yarnpkg.com/@babel/helper-compilation-targets/-/helper-compilation-targets-7.18.2.tgz#67a85a10cbd5fc7f1457fec2e7f45441dc6c754b\"",
          "129:   integrity sha512-s1jnPotJS9uQnzFtiZVBUxe67CuBa679oWFHpxYYnTpRL/1ffhyX44R9uYiXoa/pLXcY9H2moJta0iaanlk/rQ==",
          "136: \"@babel/helper-create-class-features-plugin@^7.17.12\", \"@babel/helper-create-class-features-plugin@^7.18.0\":",
          "137:   version \"7.18.0\"",
          "138:   resolved \"https://registry.yarnpkg.com/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.0.tgz#fac430912606331cb075ea8d82f9a4c145a4da19\"",
          "139:   integrity sha512-Kh8zTGR9de3J63e5nS0rQUdRs/kbtwoeQQ0sriS0lItjC96u8XXZN6lKpuyWd2coKSU13py/y+LTmThLuVX0Pg==",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:     \"@babel/helper-replace-supers\" \"^7.16.7\"",
          "147:     \"@babel/helper-split-export-declaration\" \"^7.16.7\"",
          "153:   dependencies:",
          "154:     \"@babel/helper-annotate-as-pure\" \"^7.16.7\"",
          "155:     regexpu-core \"^5.0.1\"",
          "",
          "[Removed Lines]",
          "149: \"@babel/helper-create-regexp-features-plugin@^7.16.7\", \"@babel/helper-create-regexp-features-plugin@^7.17.0\":",
          "150:   version \"7.17.0\"",
          "151:   resolved \"https://registry.yarnpkg.com/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.17.0.tgz#1dcc7d40ba0c6b6b25618997c5dbfd310f186fe1\"",
          "152:   integrity sha512-awO2So99wG6KnlE+TPs6rn83gCz5WlEePJDTnLEqbchMVrBeAujURVphRdigsk094VhvZehFoNOihSlcBjwsXA==",
          "",
          "[Added Lines]",
          "149: \"@babel/helper-create-regexp-features-plugin@^7.16.7\", \"@babel/helper-create-regexp-features-plugin@^7.17.12\":",
          "150:   version \"7.17.12\"",
          "151:   resolved \"https://registry.yarnpkg.com/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.17.12.tgz#bb37ca467f9694bbe55b884ae7a5cc1e0084e4fd\"",
          "152:   integrity sha512-b2aZrV4zvutr9AIa6/gA3wsZKRwTKYoDxYiFKcESS3Ug2GTXzwBEvMuuFLhCQpEnRXs1zng4ISAXSUxxKBIcxw==",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:     resolve \"^1.14.2\"",
          "169:     semver \"^6.1.2\"",
          "178: \"@babel/helper-explode-assignable-expression@^7.16.7\":",
          "179:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "171: \"@babel/helper-environment-visitor@^7.16.7\":",
          "172:   version \"7.16.7\"",
          "173:   resolved \"https://registry.yarnpkg.com/@babel/helper-environment-visitor/-/helper-environment-visitor-7.16.7.tgz#ff484094a839bde9d89cd63cba017d7aae80ecd7\"",
          "174:   integrity sha512-SLLb0AAn6PkUeAfKJCCOl9e1R53pQlGAfc4y4XuMRZfqeMYLE0dM1LMhqbGAlGQY0lfw5/ohoYWAe9V1yibRag==",
          "175:   dependencies:",
          "176:     \"@babel/types\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "171: \"@babel/helper-environment-visitor@^7.16.7\", \"@babel/helper-environment-visitor@^7.18.2\":",
          "172:   version \"7.18.2\"",
          "173:   resolved \"https://registry.yarnpkg.com/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.2.tgz#8a6d2dedb53f6bf248e31b4baf38739ee4a637bd\"",
          "174:   integrity sha512-14GQKWkX9oJzPiQQ7/J36FTXcD4kSp8egKjO9nINlSKiHITRA9q/R74qu8S9xlc/b/yjsJItQUeeh3xnGN0voQ==",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "197:   dependencies:",
          "198:     \"@babel/types\" \"^7.16.7\"",
          "201:   version \"7.17.7\"",
          "202:   resolved \"https://registry.yarnpkg.com/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.17.7.tgz#a34013b57d8542a8c4ff8ba3f747c02452a4d8c4\"",
          "203:   integrity sha512-thxXgnQ8qQ11W2wVUObIqDL4p148VMxkt5T/qpN5k2fboRyzFGFmKsTGViquyM5QHKUy48OZoca8kw4ajaDPyw==",
          "",
          "[Removed Lines]",
          "200: \"@babel/helper-member-expression-to-functions@^7.16.7\", \"@babel/helper-member-expression-to-functions@^7.17.7\":",
          "",
          "[Added Lines]",
          "198: \"@babel/helper-member-expression-to-functions@^7.17.7\":",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "211:   dependencies:",
          "212:     \"@babel/types\" \"^7.16.7\"",
          "218:   dependencies:",
          "219:     \"@babel/helper-environment-visitor\" \"^7.16.7\"",
          "220:     \"@babel/helper-module-imports\" \"^7.16.7\"",
          "",
          "[Removed Lines]",
          "214: \"@babel/helper-module-transforms@^7.16.7\", \"@babel/helper-module-transforms@^7.17.7\":",
          "215:   version \"7.17.7\"",
          "216:   resolved \"https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.17.7.tgz#3943c7f777139e7954a5355c815263741a9c1cbd\"",
          "217:   integrity sha512-VmZD99F3gNTYB7fJRDTi+u6l/zxY0BE6OIxPSU7a50s6ZUQkHwSDmV92FfM+oCG0pZRVojGYhkR8I0OGeCVREw==",
          "",
          "[Added Lines]",
          "212: \"@babel/helper-module-transforms@^7.18.0\":",
          "213:   version \"7.18.0\"",
          "214:   resolved \"https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.18.0.tgz#baf05dec7a5875fb9235bd34ca18bad4e21221cd\"",
          "215:   integrity sha512-kclUYSUBIjlvnzN2++K9f2qzYKFgjmnmjwL4zlmU5f8ZtzgWe8s0rUPSTGy2HmK4P8T52MQsS+HTQAgZd3dMEA==",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "222:     \"@babel/helper-split-export-declaration\" \"^7.16.7\"",
          "223:     \"@babel/helper-validator-identifier\" \"^7.16.7\"",
          "224:     \"@babel/template\" \"^7.16.7\"",
          "228: \"@babel/helper-optimise-call-expression@^7.16.7\":",
          "229:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "225:     \"@babel/traverse\" \"^7.17.3\"",
          "226:     \"@babel/types\" \"^7.17.0\"",
          "",
          "[Added Lines]",
          "223:     \"@babel/traverse\" \"^7.18.0\"",
          "224:     \"@babel/types\" \"^7.18.0\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "232:   dependencies:",
          "233:     \"@babel/types\" \"^7.16.7\"",
          "240: \"@babel/helper-remap-async-to-generator@^7.16.8\":",
          "241:   version \"7.16.8\"",
          "",
          "[Removed Lines]",
          "235: \"@babel/helper-plugin-utils@^7.0.0\", \"@babel/helper-plugin-utils@^7.10.4\", \"@babel/helper-plugin-utils@^7.12.13\", \"@babel/helper-plugin-utils@^7.13.0\", \"@babel/helper-plugin-utils@^7.14.5\", \"@babel/helper-plugin-utils@^7.16.7\", \"@babel/helper-plugin-utils@^7.8.0\", \"@babel/helper-plugin-utils@^7.8.3\":",
          "236:   version \"7.16.7\"",
          "237:   resolved \"https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.16.7.tgz#aa3a8ab4c3cceff8e65eb9e73d87dc4ff320b2f5\"",
          "238:   integrity sha512-Qg3Nk7ZxpgMrsox6HreY1ZNKdBq7K72tDSliA6dCl5f007jR4ne8iD5UzuNnCJH2xBf2BEEVGr+/OL6Gdp7RxA==",
          "",
          "[Added Lines]",
          "233: \"@babel/helper-plugin-utils@^7.0.0\", \"@babel/helper-plugin-utils@^7.10.4\", \"@babel/helper-plugin-utils@^7.12.13\", \"@babel/helper-plugin-utils@^7.13.0\", \"@babel/helper-plugin-utils@^7.14.5\", \"@babel/helper-plugin-utils@^7.16.7\", \"@babel/helper-plugin-utils@^7.17.12\", \"@babel/helper-plugin-utils@^7.8.0\", \"@babel/helper-plugin-utils@^7.8.3\":",
          "234:   version \"7.17.12\"",
          "235:   resolved \"https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz#86c2347da5acbf5583ba0a10aed4c9bf9da9cf96\"",
          "236:   integrity sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "246:     \"@babel/helper-wrap-function\" \"^7.16.8\"",
          "247:     \"@babel/types\" \"^7.16.8\"",
          "253:   dependencies:",
          "256:     \"@babel/helper-optimise-call-expression\" \"^7.16.7\"",
          "264:   dependencies:",
          "267: \"@babel/helper-skip-transparent-expression-wrappers@^7.16.0\":",
          "268:   version \"7.16.0\"",
          "",
          "[Removed Lines]",
          "249: \"@babel/helper-replace-supers@^7.16.7\":",
          "250:   version \"7.16.7\"",
          "251:   resolved \"https://registry.yarnpkg.com/@babel/helper-replace-supers/-/helper-replace-supers-7.16.7.tgz#e9f5f5f32ac90429c1a4bdec0f231ef0c2838ab1\"",
          "252:   integrity sha512-y9vsWilTNaVnVh6xiJfABzsNpgDPKev9HnAgz6Gb1p6UUwf9NepdlsV7VXGCftJM+jqD5f7JIEubcpLjZj5dBw==",
          "254:     \"@babel/helper-environment-visitor\" \"^7.16.7\"",
          "255:     \"@babel/helper-member-expression-to-functions\" \"^7.16.7\"",
          "257:     \"@babel/traverse\" \"^7.16.7\"",
          "258:     \"@babel/types\" \"^7.16.7\"",
          "260: \"@babel/helper-simple-access@^7.17.7\":",
          "261:   version \"7.17.7\"",
          "262:   resolved \"https://registry.yarnpkg.com/@babel/helper-simple-access/-/helper-simple-access-7.17.7.tgz#aaa473de92b7987c6dfa7ce9a7d9674724823367\"",
          "263:   integrity sha512-txyMCGroZ96i+Pxr3Je3lzEJjqwaRC9buMUgtomcrLe5Nd0+fk1h0LLA+ixUF5OW7AhHuQ7Es1WcQJZmZsz2XA==",
          "265:     \"@babel/types\" \"^7.17.0\"",
          "",
          "[Added Lines]",
          "247: \"@babel/helper-replace-supers@^7.16.7\", \"@babel/helper-replace-supers@^7.18.2\":",
          "248:   version \"7.18.2\"",
          "249:   resolved \"https://registry.yarnpkg.com/@babel/helper-replace-supers/-/helper-replace-supers-7.18.2.tgz#41fdfcc9abaf900e18ba6e5931816d9062a7b2e0\"",
          "250:   integrity sha512-XzAIyxx+vFnrOxiQrToSUOzUOn0e1J2Li40ntddek1Y69AXUTXoDJ40/D5RdjFu7s7qHiaeoTiempZcbuVXh2Q==",
          "252:     \"@babel/helper-environment-visitor\" \"^7.18.2\"",
          "253:     \"@babel/helper-member-expression-to-functions\" \"^7.17.7\"",
          "255:     \"@babel/traverse\" \"^7.18.2\"",
          "256:     \"@babel/types\" \"^7.18.2\"",
          "258: \"@babel/helper-simple-access@^7.17.7\", \"@babel/helper-simple-access@^7.18.2\":",
          "259:   version \"7.18.2\"",
          "260:   resolved \"https://registry.yarnpkg.com/@babel/helper-simple-access/-/helper-simple-access-7.18.2.tgz#4dc473c2169ac3a1c9f4a51cfcd091d1c36fcff9\"",
          "261:   integrity sha512-7LIrjYzndorDY88MycupkpQLKS1AFfsVRm2k/9PtKScSy5tZq0McZTj+DiMRynboZfIqOKvo03pmhTaUgiD6fQ==",
          "263:     \"@babel/types\" \"^7.18.2\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "298:     \"@babel/traverse\" \"^7.16.8\"",
          "299:     \"@babel/types\" \"^7.16.8\"",
          "305:   dependencies:",
          "306:     \"@babel/template\" \"^7.16.7\"",
          "310: \"@babel/highlight@^7.16.7\":",
          "314:   dependencies:",
          "315:     \"@babel/helper-validator-identifier\" \"^7.16.7\"",
          "316:     chalk \"^2.0.0\"",
          "317:     js-tokens \"^4.0.0\"",
          "328:   dependencies:",
          "335:   dependencies:",
          "337:     \"@babel/helper-skip-transparent-expression-wrappers\" \"^7.16.0\"",
          "344:   dependencies:",
          "346:     \"@babel/helper-remap-async-to-generator\" \"^7.16.8\"",
          "347:     \"@babel/plugin-syntax-async-generators\" \"^7.8.4\"",
          "353:   dependencies:",
          "361:   dependencies:",
          "364:     \"@babel/plugin-syntax-class-static-block\" \"^7.14.5\"",
          "366: \"@babel/plugin-proposal-dynamic-import@^7.16.7\":",
          "",
          "[Removed Lines]",
          "301: \"@babel/helpers@^7.17.9\":",
          "302:   version \"7.17.9\"",
          "303:   resolved \"https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.17.9.tgz#b2af120821bfbe44f9907b1826e168e819375a1a\"",
          "304:   integrity sha512-cPCt915ShDWUEzEp3+UNRktO2n6v49l5RSnG9M5pS24hA+2FAc5si+Pn1i4VVbQQ+jh+bIZhPFQOJOzbrOYY1Q==",
          "307:     \"@babel/traverse\" \"^7.17.9\"",
          "308:     \"@babel/types\" \"^7.17.0\"",
          "311:   version \"7.17.9\"",
          "312:   resolved \"https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.17.9.tgz#61b2ee7f32ea0454612def4fccdae0de232b73e3\"",
          "313:   integrity sha512-J9PfEKCbFIv2X5bjTMiZu6Vf341N05QIY+d6FvVKynkG1S7G0j3I0QoRtWIrXhZ+/Nlb5Q0MzqL7TokEJ5BNHg==",
          "319: \"@babel/parser@^7.1.0\", \"@babel/parser@^7.14.7\", \"@babel/parser@^7.16.7\", \"@babel/parser@^7.17.10\", \"@babel/parser@^7.2.3\", \"@babel/parser@^7.9.4\":",
          "320:   version \"7.17.10\"",
          "321:   resolved \"https://registry.yarnpkg.com/@babel/parser/-/parser-7.17.10.tgz#873b16db82a8909e0fbd7f115772f4b739f6ce78\"",
          "322:   integrity sha512-n2Q6i+fnJqzOaq2VkdXxy2TCPCWQZHiCo0XqmrCvDWcZQKRyZzYi4Z0yxlBuN0w+r2ZHmre+Q087DSrw3pbJDQ==",
          "324: \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@^7.16.7\":",
          "325:   version \"7.16.7\"",
          "326:   resolved \"https://registry.yarnpkg.com/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.16.7.tgz#4eda6d6c2a0aa79c70fa7b6da67763dfe2141050\"",
          "327:   integrity sha512-anv/DObl7waiGEnC24O9zqL0pSuI9hljihqiDuFHC8d7/bjr/4RLGPWuc8rYOff/QPzbEPSkzG8wGG9aDuhHRg==",
          "329:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "331: \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@^7.16.7\":",
          "332:   version \"7.16.7\"",
          "333:   resolved \"https://registry.yarnpkg.com/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.16.7.tgz#cc001234dfc139ac45f6bcf801866198c8c72ff9\"",
          "334:   integrity sha512-di8vUHRdf+4aJ7ltXhaDbPoszdkh59AQtJM5soLsuHpQJdFQZOA4uGj0V2u/CZ8bJ/u8ULDL5yq6FO/bCXnKHw==",
          "336:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "338:     \"@babel/plugin-proposal-optional-chaining\" \"^7.16.7\"",
          "340: \"@babel/plugin-proposal-async-generator-functions@^7.16.8\":",
          "341:   version \"7.16.8\"",
          "342:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-async-generator-functions/-/plugin-proposal-async-generator-functions-7.16.8.tgz#3bdd1ebbe620804ea9416706cd67d60787504bc8\"",
          "343:   integrity sha512-71YHIvMuiuqWJQkebWJtdhQTfd4Q4mF76q2IX37uZPkG9+olBxsX+rH1vkhFto4UeJZ9dPY2s+mDvhDm1u2BGQ==",
          "345:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "349: \"@babel/plugin-proposal-class-properties@^7.12.1\", \"@babel/plugin-proposal-class-properties@^7.16.7\":",
          "350:   version \"7.16.7\"",
          "351:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.16.7.tgz#925cad7b3b1a2fcea7e59ecc8eb5954f961f91b0\"",
          "352:   integrity sha512-IobU0Xme31ewjYOShSIqd/ZGM/r/cuOz2z0MDbNrhF5FW+ZVgi0f2lyeoj9KFPDOAqsYxmLWZte1WOwlvY9aww==",
          "354:     \"@babel/helper-create-class-features-plugin\" \"^7.16.7\"",
          "355:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "357: \"@babel/plugin-proposal-class-static-block@^7.17.6\":",
          "358:   version \"7.17.6\"",
          "359:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-class-static-block/-/plugin-proposal-class-static-block-7.17.6.tgz#164e8fd25f0d80fa48c5a4d1438a6629325ad83c\"",
          "360:   integrity sha512-X/tididvL2zbs7jZCeeRJ8167U/+Ac135AM6jCAx6gYXDUviZV5Ku9UDvWS2NCuWlFjIRXklYhwo6HhAC7ETnA==",
          "362:     \"@babel/helper-create-class-features-plugin\" \"^7.17.6\"",
          "363:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "299: \"@babel/helpers@^7.18.2\":",
          "300:   version \"7.18.2\"",
          "301:   resolved \"https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.18.2.tgz#970d74f0deadc3f5a938bfa250738eb4ac889384\"",
          "302:   integrity sha512-j+d+u5xT5utcQSzrh9p+PaJX94h++KN+ng9b9WEJq7pkUPAd61FGqhjuUEdfknb3E/uDBb7ruwEeKkIxNJPIrg==",
          "305:     \"@babel/traverse\" \"^7.18.2\"",
          "306:     \"@babel/types\" \"^7.18.2\"",
          "309:   version \"7.17.12\"",
          "310:   resolved \"https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.17.12.tgz#257de56ee5afbd20451ac0a75686b6b404257351\"",
          "311:   integrity sha512-7yykMVF3hfZY2jsHZEEgLc+3x4o1O+fYyULu11GynEUQNwB6lua+IIQn1FiJxNucd5UlyJryrwsOh8PL9Sn8Qg==",
          "317: \"@babel/parser@^7.1.0\", \"@babel/parser@^7.14.7\", \"@babel/parser@^7.16.7\", \"@babel/parser@^7.18.0\", \"@babel/parser@^7.2.3\", \"@babel/parser@^7.9.4\":",
          "318:   version \"7.18.4\"",
          "319:   resolved \"https://registry.yarnpkg.com/@babel/parser/-/parser-7.18.4.tgz#6774231779dd700e0af29f6ad8d479582d7ce5ef\"",
          "320:   integrity sha512-FDge0dFazETFcxGw/EXzOkN8uJp0PC7Qbm+Pe9T+av2zlBpOgunFHkQPPn+eRuClU73JF+98D531UgayY89tow==",
          "322: \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@^7.17.12\":",
          "323:   version \"7.17.12\"",
          "324:   resolved \"https://registry.yarnpkg.com/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.17.12.tgz#1dca338caaefca368639c9ffb095afbd4d420b1e\"",
          "325:   integrity sha512-xCJQXl4EeQ3J9C4yOmpTrtVGmzpm2iSzyxbkZHw7UCnZBftHpF/hpII80uWVyVrc40ytIClHjgWGTG1g/yB+aw==",
          "327:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "329: \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@^7.17.12\":",
          "330:   version \"7.17.12\"",
          "331:   resolved \"https://registry.yarnpkg.com/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.17.12.tgz#0d498ec8f0374b1e2eb54b9cb2c4c78714c77753\"",
          "332:   integrity sha512-/vt0hpIw0x4b6BLKUkwlvEoiGZYYLNZ96CzyHYPbtG2jZGz6LBe7/V+drYrc/d+ovrF9NBi0pmtvmNb/FsWtRQ==",
          "334:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "336:     \"@babel/plugin-proposal-optional-chaining\" \"^7.17.12\"",
          "338: \"@babel/plugin-proposal-async-generator-functions@^7.17.12\":",
          "339:   version \"7.17.12\"",
          "340:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-async-generator-functions/-/plugin-proposal-async-generator-functions-7.17.12.tgz#094a417e31ce7e692d84bab06c8e2a607cbeef03\"",
          "341:   integrity sha512-RWVvqD1ooLKP6IqWTA5GyFVX2isGEgC5iFxKzfYOIy/QEFdxYyCybBDtIGjipHpb9bDWHzcqGqFakf+mVmBTdQ==",
          "343:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "347: \"@babel/plugin-proposal-class-properties@^7.12.1\", \"@babel/plugin-proposal-class-properties@^7.17.12\":",
          "348:   version \"7.17.12\"",
          "349:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.17.12.tgz#84f65c0cc247d46f40a6da99aadd6438315d80a4\"",
          "350:   integrity sha512-U0mI9q8pW5Q9EaTHFPwSVusPMV/DV9Mm8p7csqROFLtIE9rBF5piLqyrBGigftALrBcsBGu4m38JneAe7ZDLXw==",
          "352:     \"@babel/helper-create-class-features-plugin\" \"^7.17.12\"",
          "353:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "355: \"@babel/plugin-proposal-class-static-block@^7.18.0\":",
          "356:   version \"7.18.0\"",
          "357:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-class-static-block/-/plugin-proposal-class-static-block-7.18.0.tgz#7d02253156e3c3793bdb9f2faac3a1c05f0ba710\"",
          "358:   integrity sha512-t+8LsRMMDE74c6sV7KShIw13sqbqd58tlqNrsWoWBTIMw7SVQ0cZ905wLNS/FBCy/3PyooRHLFFlfrUNyyz5lA==",
          "360:     \"@babel/helper-create-class-features-plugin\" \"^7.18.0\"",
          "361:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "371:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "372:     \"@babel/plugin-syntax-dynamic-import\" \"^7.8.3\"",
          "378:   dependencies:",
          "380:     \"@babel/plugin-syntax-export-namespace-from\" \"^7.8.3\"",
          "386:   dependencies:",
          "388:     \"@babel/plugin-syntax-json-strings\" \"^7.8.3\"",
          "394:   dependencies:",
          "396:     \"@babel/plugin-syntax-logical-assignment-operators\" \"^7.10.4\"",
          "402:   dependencies:",
          "404:     \"@babel/plugin-syntax-nullish-coalescing-operator\" \"^7.8.3\"",
          "406: \"@babel/plugin-proposal-numeric-separator@^7.12.7\", \"@babel/plugin-proposal-numeric-separator@^7.16.7\":",
          "",
          "[Removed Lines]",
          "374: \"@babel/plugin-proposal-export-namespace-from@^7.16.7\":",
          "375:   version \"7.16.7\"",
          "376:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-export-namespace-from/-/plugin-proposal-export-namespace-from-7.16.7.tgz#09de09df18445a5786a305681423ae63507a6163\"",
          "377:   integrity sha512-ZxdtqDXLRGBL64ocZcs7ovt71L3jhC1RGSyR996svrCi3PYqHNkb3SwPJCs8RIzD86s+WPpt2S73+EHCGO+NUA==",
          "379:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "382: \"@babel/plugin-proposal-json-strings@^7.16.7\":",
          "383:   version \"7.16.7\"",
          "384:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-json-strings/-/plugin-proposal-json-strings-7.16.7.tgz#9732cb1d17d9a2626a08c5be25186c195b6fa6e8\"",
          "385:   integrity sha512-lNZ3EEggsGY78JavgbHsK9u5P3pQaW7k4axlgFLYkMd7UBsiNahCITShLjNQschPyjtO6dADrL24757IdhBrsQ==",
          "387:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "390: \"@babel/plugin-proposal-logical-assignment-operators@^7.16.7\":",
          "391:   version \"7.16.7\"",
          "392:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-logical-assignment-operators/-/plugin-proposal-logical-assignment-operators-7.16.7.tgz#be23c0ba74deec1922e639832904be0bea73cdea\"",
          "393:   integrity sha512-K3XzyZJGQCr00+EtYtrDjmwX7o7PLK6U9bi1nCwkQioRFVUv6dJoxbQjtWVtP+bCPy82bONBKG8NPyQ4+i6yjg==",
          "395:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "398: \"@babel/plugin-proposal-nullish-coalescing-operator@^7.16.7\":",
          "399:   version \"7.16.7\"",
          "400:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.16.7.tgz#141fc20b6857e59459d430c850a0011e36561d99\"",
          "401:   integrity sha512-aUOrYU3EVtjf62jQrCj63pYZ7k6vns2h/DQvHPWGmsJRYzWXZ6/AsfgpiRy6XiuIDADhJzP2Q9MwSMKauBQ+UQ==",
          "403:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "372: \"@babel/plugin-proposal-export-namespace-from@^7.17.12\":",
          "373:   version \"7.17.12\"",
          "374:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-export-namespace-from/-/plugin-proposal-export-namespace-from-7.17.12.tgz#b22864ccd662db9606edb2287ea5fd1709f05378\"",
          "375:   integrity sha512-j7Ye5EWdwoXOpRmo5QmRyHPsDIe6+u70ZYZrd7uz+ebPYFKfRcLcNu3Ro0vOlJ5zuv8rU7xa+GttNiRzX56snQ==",
          "377:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "380: \"@babel/plugin-proposal-json-strings@^7.17.12\":",
          "381:   version \"7.17.12\"",
          "382:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-json-strings/-/plugin-proposal-json-strings-7.17.12.tgz#f4642951792437233216d8c1af370bb0fbff4664\"",
          "383:   integrity sha512-rKJ+rKBoXwLnIn7n6o6fulViHMrOThz99ybH+hKHcOZbnN14VuMnH9fo2eHE69C8pO4uX1Q7t2HYYIDmv8VYkg==",
          "385:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "388: \"@babel/plugin-proposal-logical-assignment-operators@^7.17.12\":",
          "389:   version \"7.17.12\"",
          "390:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-logical-assignment-operators/-/plugin-proposal-logical-assignment-operators-7.17.12.tgz#c64a1bcb2b0a6d0ed2ff674fd120f90ee4b88a23\"",
          "391:   integrity sha512-EqFo2s1Z5yy+JeJu7SFfbIUtToJTVlC61/C7WLKDntSw4Sz6JNAIfL7zQ74VvirxpjB5kz/kIx0gCcb+5OEo2Q==",
          "393:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "396: \"@babel/plugin-proposal-nullish-coalescing-operator@^7.17.12\":",
          "397:   version \"7.17.12\"",
          "398:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.17.12.tgz#1e93079bbc2cbc756f6db6a1925157c4a92b94be\"",
          "399:   integrity sha512-ws/g3FSGVzv+VH86+QvgtuJL/kR67xaEIF2x0iPqdDfYW6ra6JF3lKVBkWynRLcNtIC1oCTfDRVxmm2mKzy+ag==",
          "401:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "411:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "412:     \"@babel/plugin-syntax-numeric-separator\" \"^7.10.4\"",
          "418:   dependencies:",
          "422:     \"@babel/plugin-syntax-object-rest-spread\" \"^7.8.3\"",
          "425: \"@babel/plugin-proposal-optional-catch-binding@^7.16.7\":",
          "426:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "414: \"@babel/plugin-proposal-object-rest-spread@^7.12.1\", \"@babel/plugin-proposal-object-rest-spread@^7.17.3\":",
          "415:   version \"7.17.3\"",
          "416:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.17.3.tgz#d9eb649a54628a51701aef7e0ea3d17e2b9dd390\"",
          "417:   integrity sha512-yuL5iQA/TbZn+RGAfxQXfi7CNLmKi1f8zInn4IgobuCWcAb7i+zj4TYzQ9l8cEzVyJ89PDGuqxK1xZpUDISesw==",
          "419:     \"@babel/compat-data\" \"^7.17.0\"",
          "420:     \"@babel/helper-compilation-targets\" \"^7.16.7\"",
          "421:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "423:     \"@babel/plugin-transform-parameters\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "412: \"@babel/plugin-proposal-object-rest-spread@^7.12.1\", \"@babel/plugin-proposal-object-rest-spread@^7.18.0\":",
          "413:   version \"7.18.0\"",
          "414:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.18.0.tgz#79f2390c892ba2a68ec112eb0d895cfbd11155e8\"",
          "415:   integrity sha512-nbTv371eTrFabDfHLElkn9oyf9VG+VKK6WMzhY2o4eHKaG19BToD9947zzGMO6I/Irstx9d8CwX6njPNIAR/yw==",
          "417:     \"@babel/compat-data\" \"^7.17.10\"",
          "418:     \"@babel/helper-compilation-targets\" \"^7.17.10\"",
          "419:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "421:     \"@babel/plugin-transform-parameters\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "430:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "431:     \"@babel/plugin-syntax-optional-catch-binding\" \"^7.8.3\"",
          "437:   dependencies:",
          "439:     \"@babel/helper-skip-transparent-expression-wrappers\" \"^7.16.0\"",
          "440:     \"@babel/plugin-syntax-optional-chaining\" \"^7.8.3\"",
          "446:   dependencies:",
          "454:   dependencies:",
          "455:     \"@babel/helper-annotate-as-pure\" \"^7.16.7\"",
          "458:     \"@babel/plugin-syntax-private-property-in-object\" \"^7.14.5\"",
          "464:   dependencies:",
          "468: \"@babel/plugin-syntax-async-generators@^7.8.4\":",
          "469:   version \"7.8.4\"",
          "",
          "[Removed Lines]",
          "433: \"@babel/plugin-proposal-optional-chaining@^7.16.7\":",
          "434:   version \"7.16.7\"",
          "435:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.16.7.tgz#7cd629564724816c0e8a969535551f943c64c39a\"",
          "436:   integrity sha512-eC3xy+ZrUcBtP7x+sq62Q/HYd674pPTb/77XZMb5wbDPGWIdUbSr4Agr052+zaUPSb+gGRnjxXfKFvx5iMJ+DA==",
          "438:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "442: \"@babel/plugin-proposal-private-methods@^7.16.11\":",
          "443:   version \"7.16.11\"",
          "444:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.16.11.tgz#e8df108288555ff259f4527dbe84813aac3a1c50\"",
          "445:   integrity sha512-F/2uAkPlXDr8+BHpZvo19w3hLFKge+k75XUprE6jaqKxjGkSYcK+4c+bup5PdW/7W/Rpjwql7FTVEDW+fRAQsw==",
          "447:     \"@babel/helper-create-class-features-plugin\" \"^7.16.10\"",
          "448:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "450: \"@babel/plugin-proposal-private-property-in-object@^7.16.7\":",
          "451:   version \"7.16.7\"",
          "452:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.16.7.tgz#b0b8cef543c2c3d57e59e2c611994861d46a3fce\"",
          "453:   integrity sha512-rMQkjcOFbm+ufe3bTZLyOfsOUOxyvLXZJCTARhJr+8UMSoZmqTe1K1BgkFcrW37rAchWg57yI69ORxiWvUINuQ==",
          "456:     \"@babel/helper-create-class-features-plugin\" \"^7.16.7\"",
          "457:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "460: \"@babel/plugin-proposal-unicode-property-regex@^7.16.7\", \"@babel/plugin-proposal-unicode-property-regex@^7.4.4\":",
          "461:   version \"7.16.7\"",
          "462:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-unicode-property-regex/-/plugin-proposal-unicode-property-regex-7.16.7.tgz#635d18eb10c6214210ffc5ff4932552de08188a2\"",
          "463:   integrity sha512-QRK0YI/40VLhNVGIjRNAAQkEHws0cswSdFFjpFyt943YmJIU1da9uW63Iu6NFV6CxTZW5eTDCrwZUstBWgp/Rg==",
          "465:     \"@babel/helper-create-regexp-features-plugin\" \"^7.16.7\"",
          "466:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "431: \"@babel/plugin-proposal-optional-chaining@^7.17.12\":",
          "432:   version \"7.17.12\"",
          "433:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.17.12.tgz#f96949e9bacace3a9066323a5cf90cfb9de67174\"",
          "434:   integrity sha512-7wigcOs/Z4YWlK7xxjkvaIw84vGhDv/P1dFGQap0nHkc8gFKY/r+hXc8Qzf5k1gY7CvGIcHqAnOagVKJJ1wVOQ==",
          "436:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "440: \"@babel/plugin-proposal-private-methods@^7.17.12\":",
          "441:   version \"7.17.12\"",
          "442:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.17.12.tgz#c2ca3a80beb7539289938da005ad525a038a819c\"",
          "443:   integrity sha512-SllXoxo19HmxhDWm3luPz+cPhtoTSKLJE9PXshsfrOzBqs60QP0r8OaJItrPhAj0d7mZMnNF0Y1UUggCDgMz1A==",
          "445:     \"@babel/helper-create-class-features-plugin\" \"^7.17.12\"",
          "446:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "448: \"@babel/plugin-proposal-private-property-in-object@^7.17.12\":",
          "449:   version \"7.17.12\"",
          "450:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.17.12.tgz#b02efb7f106d544667d91ae97405a9fd8c93952d\"",
          "451:   integrity sha512-/6BtVi57CJfrtDNKfK5b66ydK2J5pXUKBKSPD2G1whamMuEnZWgoOIfO8Vf9F/DoD4izBLD/Au4NMQfruzzykg==",
          "454:     \"@babel/helper-create-class-features-plugin\" \"^7.17.12\"",
          "455:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "458: \"@babel/plugin-proposal-unicode-property-regex@^7.17.12\", \"@babel/plugin-proposal-unicode-property-regex@^7.4.4\":",
          "459:   version \"7.17.12\"",
          "460:   resolved \"https://registry.yarnpkg.com/@babel/plugin-proposal-unicode-property-regex/-/plugin-proposal-unicode-property-regex-7.17.12.tgz#3dbd7a67bd7f94c8238b394da112d86aaf32ad4d\"",
          "461:   integrity sha512-Wb9qLjXf3ZazqXA7IvI7ozqRIXIGPtSo+L5coFmEkhTQK18ao4UDDD0zdTGAarmbLj2urpRwrc6893cu5Bfh0A==",
          "463:     \"@babel/helper-create-regexp-features-plugin\" \"^7.17.12\"",
          "464:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "507:   dependencies:",
          "508:     \"@babel/helper-plugin-utils\" \"^7.8.3\"",
          "510: \"@babel/plugin-syntax-import-meta@^7.8.3\":",
          "511:   version \"7.10.4\"",
          "512:   resolved \"https://registry.yarnpkg.com/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz#ee601348c370fa334d2207be158777496521fd51\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: \"@babel/plugin-syntax-import-assertions@^7.17.12\":",
          "509:   version \"7.17.12\"",
          "510:   resolved \"https://registry.yarnpkg.com/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.17.12.tgz#58096a92b11b2e4e54b24c6a0cc0e5e607abcedd\"",
          "511:   integrity sha512-n/loy2zkq9ZEM8tEOwON9wTQSTNDTDEz6NujPtJGLU7qObzT1N4c4YZZf8E6ATB2AjNQg/Ib2AIpO03EZaCehw==",
          "512:   dependencies:",
          "513:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "577:   dependencies:",
          "578:     \"@babel/helper-plugin-utils\" \"^7.14.5\"",
          "584:   dependencies:",
          "591:   dependencies:",
          "598:   dependencies:",
          "599:     \"@babel/helper-module-imports\" \"^7.16.7\"",
          "601:     \"@babel/helper-remap-async-to-generator\" \"^7.16.8\"",
          "603: \"@babel/plugin-transform-block-scoped-functions@^7.16.7\":",
          "",
          "[Removed Lines]",
          "580: \"@babel/plugin-syntax-typescript@^7.16.7\":",
          "581:   version \"7.17.10\"",
          "582:   resolved \"https://registry.yarnpkg.com/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.17.10.tgz#80031e6042cad6a95ed753f672ebd23c30933195\"",
          "583:   integrity sha512-xJefea1DWXW09pW4Tm9bjwVlPDyYA2it3fWlmEjpYz6alPvTUjL0EOzNzI/FEOyI3r4/J7uVH5UqKgl1TQ5hqQ==",
          "585:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "587: \"@babel/plugin-transform-arrow-functions@^7.16.7\":",
          "588:   version \"7.16.7\"",
          "589:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.16.7.tgz#44125e653d94b98db76369de9c396dc14bef4154\"",
          "590:   integrity sha512-9ffkFFMbvzTvv+7dTp/66xvZAWASuPD5Tl9LK3Z9vhOmANo6j94rik+5YMBt4CwHVMWLWpMsriIc2zsa3WW3xQ==",
          "592:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "594: \"@babel/plugin-transform-async-to-generator@^7.16.8\":",
          "595:   version \"7.16.8\"",
          "596:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.16.8.tgz#b83dff4b970cf41f1b819f8b49cc0cfbaa53a808\"",
          "597:   integrity sha512-MtmUmTJQHCnyJVrScNzNlofQJ3dLFuobYn3mwOTKHnSCMtbNsqvF71GQmJfFjdrXSsAA7iysFmYWw4bXZ20hOg==",
          "600:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "585: \"@babel/plugin-syntax-typescript@^7.17.12\", \"@babel/plugin-syntax-typescript@^7.7.2\":",
          "586:   version \"7.17.12\"",
          "587:   resolved \"https://registry.yarnpkg.com/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.17.12.tgz#b54fc3be6de734a56b87508f99d6428b5b605a7b\"",
          "588:   integrity sha512-TYY0SXFiO31YXtNg3HtFwNJHjLsAyIIhAhNWkQ5whPPS7HWUFlg9z0Ta4qAQNjQbP1wsSt/oKkmZ/4/WWdMUpw==",
          "590:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "592: \"@babel/plugin-transform-arrow-functions@^7.17.12\":",
          "593:   version \"7.17.12\"",
          "594:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.17.12.tgz#dddd783b473b1b1537ef46423e3944ff24898c45\"",
          "595:   integrity sha512-PHln3CNi/49V+mza4xMwrg+WGYevSF1oaiXaC2EQfdp4HWlSjRsrDXWJiQBKpP7749u6vQ9mcry2uuFOv5CXvA==",
          "597:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "599: \"@babel/plugin-transform-async-to-generator@^7.17.12\":",
          "600:   version \"7.17.12\"",
          "601:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.17.12.tgz#dbe5511e6b01eee1496c944e35cdfe3f58050832\"",
          "602:   integrity sha512-J8dbrWIOO3orDzir57NRsjg4uxucvhby0L/KZuGsWDj0g7twWK3g7JhJhOrXtuXiw8MeiSdJ3E0OW9H8LYEzLQ==",
          "605:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "607:   dependencies:",
          "608:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "614:   dependencies:",
          "621:   dependencies:",
          "622:     \"@babel/helper-annotate-as-pure\" \"^7.16.7\"",
          "625:     \"@babel/helper-optimise-call-expression\" \"^7.16.7\"",
          "628:     \"@babel/helper-split-export-declaration\" \"^7.16.7\"",
          "629:     globals \"^11.1.0\"",
          "635:   dependencies:",
          "642:   dependencies:",
          "645: \"@babel/plugin-transform-dotall-regex@^7.16.7\", \"@babel/plugin-transform-dotall-regex@^7.4.4\":",
          "646:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "610: \"@babel/plugin-transform-block-scoping@^7.16.7\":",
          "611:   version \"7.16.7\"",
          "612:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.16.7.tgz#f50664ab99ddeaee5bc681b8f3a6ea9d72ab4f87\"",
          "613:   integrity sha512-ObZev2nxVAYA4bhyusELdo9hb3H+A56bxH3FZMbEImZFiEDYVHXQSJ1hQKFlDnlt8G9bBrCZ5ZpURZUrV4G5qQ==",
          "615:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "617: \"@babel/plugin-transform-classes@^7.16.7\":",
          "618:   version \"7.16.7\"",
          "619:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-classes/-/plugin-transform-classes-7.16.7.tgz#8f4b9562850cd973de3b498f1218796eb181ce00\"",
          "620:   integrity sha512-WY7og38SFAGYRe64BrjKf8OrE6ulEHtr5jEYaZMwox9KebgqPi67Zqz8K53EKk1fFEJgm96r32rkKZ3qA2nCWQ==",
          "623:     \"@babel/helper-environment-visitor\" \"^7.16.7\"",
          "624:     \"@babel/helper-function-name\" \"^7.16.7\"",
          "626:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "627:     \"@babel/helper-replace-supers\" \"^7.16.7\"",
          "631: \"@babel/plugin-transform-computed-properties@^7.16.7\":",
          "632:   version \"7.16.7\"",
          "633:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.16.7.tgz#66dee12e46f61d2aae7a73710f591eb3df616470\"",
          "634:   integrity sha512-gN72G9bcmenVILj//sv1zLNaPyYcOzUho2lIJBMh/iakJ9ygCo/hEF9cpGb61SCMEDxbbyBoVQxrt+bWKu5KGw==",
          "636:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "638: \"@babel/plugin-transform-destructuring@^7.17.7\":",
          "639:   version \"7.17.7\"",
          "640:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.17.7.tgz#49dc2675a7afa9a5e4c6bdee636061136c3408d1\"",
          "641:   integrity sha512-XVh0r5yq9sLR4vZ6eVZe8FKfIcSgaTBxVBRSYokRj2qksf6QerYnTxz9/GTuKTH/n/HwLP7t6gtlybHetJ/6hQ==",
          "643:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "615: \"@babel/plugin-transform-block-scoping@^7.17.12\":",
          "616:   version \"7.18.4\"",
          "617:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.18.4.tgz#7988627b3e9186a13e4d7735dc9c34a056613fb9\"",
          "618:   integrity sha512-+Hq10ye+jlvLEogSOtq4mKvtk7qwcUQ1f0Mrueai866C82f844Yom2cttfJdMdqRLTxWpsbfbkIkOIfovyUQXw==",
          "620:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "622: \"@babel/plugin-transform-classes@^7.17.12\":",
          "623:   version \"7.18.4\"",
          "624:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-classes/-/plugin-transform-classes-7.18.4.tgz#51310b812a090b846c784e47087fa6457baef814\"",
          "625:   integrity sha512-e42NSG2mlKWgxKUAD9EJJSkZxR67+wZqzNxLSpc51T8tRU5SLFHsPmgYR5yr7sdgX4u+iHA1C5VafJ6AyImV3A==",
          "628:     \"@babel/helper-environment-visitor\" \"^7.18.2\"",
          "629:     \"@babel/helper-function-name\" \"^7.17.9\"",
          "631:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "632:     \"@babel/helper-replace-supers\" \"^7.18.2\"",
          "636: \"@babel/plugin-transform-computed-properties@^7.17.12\":",
          "637:   version \"7.17.12\"",
          "638:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.17.12.tgz#bca616a83679698f3258e892ed422546e531387f\"",
          "639:   integrity sha512-a7XINeplB5cQUWMg1E/GI1tFz3LfK021IjV1rj1ypE+R7jHm+pIHmHl25VNkZxtx9uuYp7ThGk8fur1HHG7PgQ==",
          "641:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "643: \"@babel/plugin-transform-destructuring@^7.18.0\":",
          "644:   version \"7.18.0\"",
          "645:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.18.0.tgz#dc4f92587e291b4daa78aa20cc2d7a63aa11e858\"",
          "646:   integrity sha512-Mo69klS79z6KEfrLg/1WkmVnB8javh75HX4pi2btjvlIoasuxilEyjtsQW6XPrubNd7AQy0MMaNIaQE4e7+PQw==",
          "648:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "650:     \"@babel/helper-create-regexp-features-plugin\" \"^7.16.7\"",
          "651:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "657:   dependencies:",
          "660: \"@babel/plugin-transform-exponentiation-operator@^7.16.7\":",
          "661:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "653: \"@babel/plugin-transform-duplicate-keys@^7.16.7\":",
          "654:   version \"7.16.7\"",
          "655:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.16.7.tgz#2207e9ca8f82a0d36a5a67b6536e7ef8b08823c9\"",
          "656:   integrity sha512-03DvpbRfvWIXyK0/6QiR1KMTWeT6OcQ7tbhjrXyFS02kjuX/mu5Bvnh5SDSWHxyawit2g5aWhKwI86EE7GUnTw==",
          "658:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "658: \"@babel/plugin-transform-duplicate-keys@^7.17.12\":",
          "659:   version \"7.17.12\"",
          "660:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.17.12.tgz#a09aa709a3310013f8e48e0e23bc7ace0f21477c\"",
          "661:   integrity sha512-EA5eYFUG6xeerdabina/xIoB95jJ17mAkR8ivx6ZSu9frKShBjpOGZPn511MTDTkiCO+zXnzNczvUM69YSf3Zw==",
          "663:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "665:     \"@babel/helper-builder-binary-assignment-operator-visitor\" \"^7.16.7\"",
          "666:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "672:   dependencies:",
          "675: \"@babel/plugin-transform-function-name@^7.16.7\":",
          "676:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "668: \"@babel/plugin-transform-for-of@^7.16.7\":",
          "669:   version \"7.16.7\"",
          "670:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.16.7.tgz#649d639d4617dff502a9a158c479b3b556728d8c\"",
          "671:   integrity sha512-/QZm9W92Ptpw7sjI9Nx1mbcsWz33+l8kuMIQnDwgQBG5s3fAfQvkRjQ7NqXhtNcKOnPkdICmUHyCaWW06HCsqg==",
          "673:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "673: \"@babel/plugin-transform-for-of@^7.18.1\":",
          "674:   version \"7.18.1\"",
          "675:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.18.1.tgz#ed14b657e162b72afbbb2b4cdad277bf2bb32036\"",
          "676:   integrity sha512-+TTB5XwvJ5hZbO8xvl2H4XaMDOAK57zF4miuC9qQJgysPNEAZZ9Z69rdF5LJkozGdZrjBIUAIyKUWRMmebI7vg==",
          "678:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "681:     \"@babel/helper-function-name\" \"^7.16.7\"",
          "682:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "688:   dependencies:",
          "691: \"@babel/plugin-transform-member-expression-literals@^7.16.7\":",
          "692:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "684: \"@babel/plugin-transform-literals@^7.16.7\":",
          "685:   version \"7.16.7\"",
          "686:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-literals/-/plugin-transform-literals-7.16.7.tgz#254c9618c5ff749e87cb0c0cef1a0a050c0bdab1\"",
          "687:   integrity sha512-6tH8RTpTWI0s2sV6uq3e/C9wPo4PTqqZps4uF0kzQ9/xPLFQtipynvmT1g/dOfEJ+0EQsHhkQ/zyRId8J2b8zQ==",
          "689:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "689: \"@babel/plugin-transform-literals@^7.17.12\":",
          "690:   version \"7.17.12\"",
          "691:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-literals/-/plugin-transform-literals-7.17.12.tgz#97131fbc6bbb261487105b4b3edbf9ebf9c830ae\"",
          "692:   integrity sha512-8iRkvaTjJciWycPIZ9k9duu663FT7VrBdNqNgxnVXEFwOIp55JWcZd23VBRySYbnS3PwQ3rGiabJBBBGj5APmQ==",
          "694:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "695:   dependencies:",
          "696:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "702:   dependencies:",
          "705:     babel-plugin-dynamic-import-node \"^2.3.3\"",
          "711:   dependencies:",
          "715:     babel-plugin-dynamic-import-node \"^2.3.3\"",
          "721:   dependencies:",
          "722:     \"@babel/helper-hoist-variables\" \"^7.16.7\"",
          "725:     \"@babel/helper-validator-identifier\" \"^7.16.7\"",
          "726:     babel-plugin-dynamic-import-node \"^2.3.3\"",
          "732:   dependencies:",
          "740:   dependencies:",
          "747:   dependencies:",
          "750: \"@babel/plugin-transform-object-super@^7.16.7\":",
          "751:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "698: \"@babel/plugin-transform-modules-amd@^7.16.7\":",
          "699:   version \"7.16.7\"",
          "700:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.16.7.tgz#b28d323016a7daaae8609781d1f8c9da42b13186\"",
          "701:   integrity sha512-KaaEtgBL7FKYwjJ/teH63oAmE3lP34N3kshz8mm4VMAw7U3PxjVwwUmxEFksbgsNUaO3wId9R2AVQYSEGRa2+g==",
          "703:     \"@babel/helper-module-transforms\" \"^7.16.7\"",
          "704:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "707: \"@babel/plugin-transform-modules-commonjs@^7.17.9\":",
          "708:   version \"7.17.9\"",
          "709:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.17.9.tgz#274be1a2087beec0254d4abd4d86e52442e1e5b6\"",
          "710:   integrity sha512-2TBFd/r2I6VlYn0YRTz2JdazS+FoUuQ2rIFHoAxtyP/0G3D82SBLaRq9rnUkpqlLg03Byfl/+M32mpxjO6KaPw==",
          "712:     \"@babel/helper-module-transforms\" \"^7.17.7\"",
          "713:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "714:     \"@babel/helper-simple-access\" \"^7.17.7\"",
          "717: \"@babel/plugin-transform-modules-systemjs@^7.17.8\":",
          "718:   version \"7.17.8\"",
          "719:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.17.8.tgz#81fd834024fae14ea78fbe34168b042f38703859\"",
          "720:   integrity sha512-39reIkMTUVagzgA5x88zDYXPCMT6lcaRKs1+S9K6NKBPErbgO/w/kP8GlNQTC87b412ZTlmNgr3k2JrWgHH+Bw==",
          "723:     \"@babel/helper-module-transforms\" \"^7.17.7\"",
          "724:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "728: \"@babel/plugin-transform-modules-umd@^7.16.7\":",
          "729:   version \"7.16.7\"",
          "730:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.16.7.tgz#23dad479fa585283dbd22215bff12719171e7618\"",
          "731:   integrity sha512-EMh7uolsC8O4xhudF2F6wedbSHm1HHZ0C6aJ7K67zcDNidMzVcxWdGr+htW9n21klm+bOn+Rx4CBsAntZd3rEQ==",
          "733:     \"@babel/helper-module-transforms\" \"^7.16.7\"",
          "734:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "736: \"@babel/plugin-transform-named-capturing-groups-regex@^7.17.10\":",
          "737:   version \"7.17.10\"",
          "738:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.17.10.tgz#715dbcfafdb54ce8bccd3d12e8917296a4ba66a4\"",
          "739:   integrity sha512-v54O6yLaJySCs6mGzaVOUw9T967GnH38T6CQSAtnzdNPwu84l2qAjssKzo/WSO8Yi7NF+7ekm5cVbF/5qiIgNA==",
          "741:     \"@babel/helper-create-regexp-features-plugin\" \"^7.17.0\"",
          "743: \"@babel/plugin-transform-new-target@^7.16.7\":",
          "744:   version \"7.16.7\"",
          "745:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.16.7.tgz#9967d89a5c243818e0800fdad89db22c5f514244\"",
          "746:   integrity sha512-xiLDzWNMfKoGOpc6t3U+etCE2yRnn3SM09BXqWPIZOBpL2gvVrBWUKnsJx0K/ADi5F5YC5f8APFfWrz25TdlGg==",
          "748:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "703: \"@babel/plugin-transform-modules-amd@^7.18.0\":",
          "704:   version \"7.18.0\"",
          "705:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.18.0.tgz#7ef1002e67e36da3155edc8bf1ac9398064c02ed\"",
          "706:   integrity sha512-h8FjOlYmdZwl7Xm2Ug4iX2j7Qy63NANI+NQVWQzv6r25fqgg7k2dZl03p95kvqNclglHs4FZ+isv4p1uXMA+QA==",
          "708:     \"@babel/helper-module-transforms\" \"^7.18.0\"",
          "709:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "712: \"@babel/plugin-transform-modules-commonjs@^7.18.2\":",
          "713:   version \"7.18.2\"",
          "714:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.18.2.tgz#1aa8efa2e2a6e818b6a7f2235fceaf09bdb31e9e\"",
          "715:   integrity sha512-f5A865gFPAJAEE0K7F/+nm5CmAE3y8AWlMBG9unu5j9+tk50UQVK0QS8RNxSp7MJf0wh97uYyLWt3Zvu71zyOQ==",
          "717:     \"@babel/helper-module-transforms\" \"^7.18.0\"",
          "718:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "719:     \"@babel/helper-simple-access\" \"^7.18.2\"",
          "722: \"@babel/plugin-transform-modules-systemjs@^7.18.0\":",
          "723:   version \"7.18.4\"",
          "724:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.18.4.tgz#3d6fd9868c735cce8f38d6ae3a407fb7e61e6d46\"",
          "725:   integrity sha512-lH2UaQaHVOAeYrUUuZ8i38o76J/FnO8vu21OE+tD1MyP9lxdZoSfz+pDbWkq46GogUrdrMz3tiz/FYGB+bVThg==",
          "728:     \"@babel/helper-module-transforms\" \"^7.18.0\"",
          "729:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "733: \"@babel/plugin-transform-modules-umd@^7.18.0\":",
          "734:   version \"7.18.0\"",
          "735:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.18.0.tgz#56aac64a2c2a1922341129a4597d1fd5c3ff020f\"",
          "736:   integrity sha512-d/zZ8I3BWli1tmROLxXLc9A6YXvGK8egMxHp+E/rRwMh1Kip0AP77VwZae3snEJ33iiWwvNv2+UIIhfalqhzZA==",
          "738:     \"@babel/helper-module-transforms\" \"^7.18.0\"",
          "739:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "741: \"@babel/plugin-transform-named-capturing-groups-regex@^7.17.12\":",
          "742:   version \"7.17.12\"",
          "743:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.17.12.tgz#9c4a5a5966e0434d515f2675c227fd8cc8606931\"",
          "744:   integrity sha512-vWoWFM5CKaTeHrdUJ/3SIOTRV+MBVGybOC9mhJkaprGNt5demMymDW24yC74avb915/mIRe3TgNb/d8idvnCRA==",
          "746:     \"@babel/helper-create-regexp-features-plugin\" \"^7.17.12\"",
          "747:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "749: \"@babel/plugin-transform-new-target@^7.17.12\":",
          "750:   version \"7.17.12\"",
          "751:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.17.12.tgz#10842cd605a620944e81ea6060e9e65c265742e3\"",
          "752:   integrity sha512-CaOtzk2fDYisbjAD4Sd1MTKGVIpRtx9bWLyj24Y/k6p4s4gQ3CqDGJauFJxt8M/LEx003d0i3klVqnN73qvK3w==",
          "754:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "755:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "756:     \"@babel/helper-replace-supers\" \"^7.16.7\"",
          "762:   dependencies:",
          "765: \"@babel/plugin-transform-property-literals@^7.16.7\":",
          "766:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "758: \"@babel/plugin-transform-parameters@^7.16.7\":",
          "759:   version \"7.16.7\"",
          "760:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.16.7.tgz#a1721f55b99b736511cb7e0152f61f17688f331f\"",
          "761:   integrity sha512-AT3MufQ7zZEhU2hwOA11axBnExW0Lszu4RL/tAlUJBuNoRak+wehQW8h6KcXOcgjY42fHtDxswuMhMjFEuv/aw==",
          "763:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "764: \"@babel/plugin-transform-parameters@^7.17.12\":",
          "765:   version \"7.17.12\"",
          "766:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.17.12.tgz#eb467cd9586ff5ff115a9880d6fdbd4a846b7766\"",
          "767:   integrity sha512-6qW4rWo1cyCdq1FkYri7AHpauchbGLXpdwnYsfxFb+KtddHENfsY5JZb35xUwkK5opOLcJ3BNd2l7PhRYGlwIA==",
          "769:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "769:   dependencies:",
          "770:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "776:   dependencies:",
          "777:     regenerator-transform \"^0.15.0\"",
          "783:   dependencies:",
          "786: \"@babel/plugin-transform-runtime@^7.12.10\":",
          "790:   dependencies:",
          "791:     \"@babel/helper-module-imports\" \"^7.16.7\"",
          "793:     babel-plugin-polyfill-corejs2 \"^0.3.0\"",
          "794:     babel-plugin-polyfill-corejs3 \"^0.5.0\"",
          "795:     babel-plugin-polyfill-regenerator \"^0.3.0\"",
          "",
          "[Removed Lines]",
          "772: \"@babel/plugin-transform-regenerator@^7.17.9\":",
          "773:   version \"7.17.9\"",
          "774:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.17.9.tgz#0a33c3a61cf47f45ed3232903683a0afd2d3460c\"",
          "775:   integrity sha512-Lc2TfbxR1HOyn/c6b4Y/b6NHoTb67n/IoWLxTu4kC7h4KQnWlhCq2S8Tx0t2SVvv5Uu87Hs+6JEJ5kt2tYGylQ==",
          "779: \"@babel/plugin-transform-reserved-words@^7.16.7\":",
          "780:   version \"7.16.7\"",
          "781:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.16.7.tgz#1d798e078f7c5958eec952059c460b220a63f586\"",
          "782:   integrity sha512-KQzzDnZ9hWQBjwi5lpY5v9shmm6IVG0U9pB18zvMu2i4H90xpT4gmqwPYsn8rObiadYe2M0gmgsiOIF5A/2rtg==",
          "784:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "787:   version \"7.17.10\"",
          "788:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.17.10.tgz#b89d821c55d61b5e3d3c3d1d636d8d5a81040ae1\"",
          "789:   integrity sha512-6jrMilUAJhktTr56kACL8LnWC5hx3Lf27BS0R0DSyW/OoJfb/iTHeE96V3b1dgKG3FSFdd/0culnYWMkjcKCig==",
          "792:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "778: \"@babel/plugin-transform-regenerator@^7.18.0\":",
          "779:   version \"7.18.0\"",
          "780:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.18.0.tgz#44274d655eb3f1af3f3a574ba819d3f48caf99d5\"",
          "781:   integrity sha512-C8YdRw9uzx25HSIzwA7EM7YP0FhCe5wNvJbZzjVNHHPGVcDJ3Aie+qGYYdS1oVQgn+B3eAIJbWFLrJ4Jipv7nw==",
          "783:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "786: \"@babel/plugin-transform-reserved-words@^7.17.12\":",
          "787:   version \"7.17.12\"",
          "788:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.17.12.tgz#7dbd349f3cdffba751e817cf40ca1386732f652f\"",
          "789:   integrity sha512-1KYqwbJV3Co03NIi14uEHW8P50Md6KqFgt0FfpHdK6oyAHQVTosgPuPSiWud1HX0oYJ1hGRRlk0fP87jFpqXZA==",
          "791:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "794:   version \"7.18.2\"",
          "795:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.18.2.tgz#04637de1e45ae8847ff14b9beead09c33d34374d\"",
          "796:   integrity sha512-mr1ufuRMfS52ttq+1G1PD8OJNqgcTFjq3hwn8SZ5n1x1pBhi0E36rYMdTK0TsKtApJ4lDEdfXJwtGobQMHSMPg==",
          "799:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "802:   dependencies:",
          "803:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "809:   dependencies:",
          "811:     \"@babel/helper-skip-transparent-expression-wrappers\" \"^7.16.0\"",
          "813: \"@babel/plugin-transform-sticky-regex@^7.16.7\":",
          "",
          "[Removed Lines]",
          "805: \"@babel/plugin-transform-spread@^7.16.7\":",
          "806:   version \"7.16.7\"",
          "807:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-spread/-/plugin-transform-spread-7.16.7.tgz#a303e2122f9f12e0105daeedd0f30fb197d8ff44\"",
          "808:   integrity sha512-+pjJpgAngb53L0iaA5gU/1MLXJIfXcYepLgXB3esVRf4fqmj8f2cxM3/FKaHsZms08hFQJkFccEWuIpm429TXg==",
          "810:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "812: \"@babel/plugin-transform-spread@^7.17.12\":",
          "813:   version \"7.17.12\"",
          "814:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-spread/-/plugin-transform-spread-7.17.12.tgz#c112cad3064299f03ea32afed1d659223935d1f5\"",
          "815:   integrity sha512-9pgmuQAtFi3lpNUstvG9nGfk9DkrdmWNp9KeKPFmuZCpEnxRzYlS8JgwPjYj+1AWDOSvoGN0H30p1cBOmT/Svg==",
          "817:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "817:   dependencies:",
          "818:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "824:   dependencies:",
          "831:   dependencies:",
          "838:   dependencies:",
          "843: \"@babel/plugin-transform-unicode-escapes@^7.16.7\":",
          "844:   version \"7.16.7\"",
          "",
          "[Removed Lines]",
          "820: \"@babel/plugin-transform-template-literals@^7.16.7\":",
          "821:   version \"7.16.7\"",
          "822:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.16.7.tgz#f3d1c45d28967c8e80f53666fc9c3e50618217ab\"",
          "823:   integrity sha512-VwbkDDUeenlIjmfNeDX/V0aWrQH2QiVyJtwymVQSzItFDTpxfyJh3EVaQiS0rIN/CqbLGr0VcGmuwyTdZtdIsA==",
          "825:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "827: \"@babel/plugin-transform-typeof-symbol@^7.16.7\":",
          "828:   version \"7.16.7\"",
          "829:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.16.7.tgz#9cdbe622582c21368bd482b660ba87d5545d4f7e\"",
          "830:   integrity sha512-p2rOixCKRJzpg9JB4gjnG4gjWkWa89ZoYUnl9snJ1cWIcTH/hvxZqfO+WjG6T8DRBpctEol5jw1O5rA8gkCokQ==",
          "832:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "834: \"@babel/plugin-transform-typescript@^7.16.7\":",
          "835:   version \"7.16.8\"",
          "836:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.16.8.tgz#591ce9b6b83504903fa9dd3652c357c2ba7a1ee0\"",
          "837:   integrity sha512-bHdQ9k7YpBDO2d0NVfkj51DpQcvwIzIusJ7mEUaMlbZq3Kt/U47j24inXZHQ5MDiYpCs+oZiwnXyKedE8+q7AQ==",
          "839:     \"@babel/helper-create-class-features-plugin\" \"^7.16.7\"",
          "840:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "841:     \"@babel/plugin-syntax-typescript\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "827: \"@babel/plugin-transform-template-literals@^7.18.2\":",
          "828:   version \"7.18.2\"",
          "829:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.18.2.tgz#31ed6915721864847c48b656281d0098ea1add28\"",
          "830:   integrity sha512-/cmuBVw9sZBGZVOMkpAEaVLwm4JmK2GZ1dFKOGGpMzEHWFmyZZ59lUU0PdRr8YNYeQdNzTDwuxP2X2gzydTc9g==",
          "832:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "834: \"@babel/plugin-transform-typeof-symbol@^7.17.12\":",
          "835:   version \"7.17.12\"",
          "836:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.17.12.tgz#0f12f57ac35e98b35b4ed34829948d42bd0e6889\"",
          "837:   integrity sha512-Q8y+Jp7ZdtSPXCThB6zjQ74N3lj0f6TDh1Hnf5B+sYlzQ8i5Pjp8gW0My79iekSpT4WnI06blqP6DT0OmaXXmw==",
          "839:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "841: \"@babel/plugin-transform-typescript@^7.17.12\":",
          "842:   version \"7.18.4\"",
          "843:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.18.4.tgz#587eaf6a39edb8c06215e550dc939faeadd750bf\"",
          "844:   integrity sha512-l4vHuSLUajptpHNEOUDEGsnpl9pfRLsN1XUoDQDD/YBuXTM+v37SHGS+c6n4jdcZy96QtuUuSvZYMLSSsjH8Mw==",
          "846:     \"@babel/helper-create-class-features-plugin\" \"^7.18.0\"",
          "847:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "848:     \"@babel/plugin-syntax-typescript\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "856:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "858: \"@babel/preset-env@^7.12.11\":",
          "862:   dependencies:",
          "863:     \"@babel/compat-data\" \"^7.17.10\"",
          "866:     \"@babel/helper-validator-option\" \"^7.16.7\"",
          "872:     \"@babel/plugin-proposal-dynamic-import\" \"^7.16.7\"",
          "877:     \"@babel/plugin-proposal-numeric-separator\" \"^7.16.7\"",
          "879:     \"@babel/plugin-proposal-optional-catch-binding\" \"^7.16.7\"",
          "884:     \"@babel/plugin-syntax-async-generators\" \"^7.8.4\"",
          "885:     \"@babel/plugin-syntax-class-properties\" \"^7.12.13\"",
          "886:     \"@babel/plugin-syntax-class-static-block\" \"^7.14.5\"",
          "887:     \"@babel/plugin-syntax-dynamic-import\" \"^7.8.3\"",
          "888:     \"@babel/plugin-syntax-export-namespace-from\" \"^7.8.3\"",
          "889:     \"@babel/plugin-syntax-json-strings\" \"^7.8.3\"",
          "890:     \"@babel/plugin-syntax-logical-assignment-operators\" \"^7.10.4\"",
          "891:     \"@babel/plugin-syntax-nullish-coalescing-operator\" \"^7.8.3\"",
          "",
          "[Removed Lines]",
          "859:   version \"7.17.10\"",
          "860:   resolved \"https://registry.yarnpkg.com/@babel/preset-env/-/preset-env-7.17.10.tgz#a81b093669e3eb6541bb81a23173c5963c5de69c\"",
          "861:   integrity sha512-YNgyBHZQpeoBSRBg0xixsZzfT58Ze1iZrajvv0lJc70qDDGuGfonEnMGfWeSY0mQ3JTuCWFbMkzFRVafOyJx4g==",
          "864:     \"@babel/helper-compilation-targets\" \"^7.17.10\"",
          "865:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "867:     \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\" \"^7.16.7\"",
          "868:     \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\" \"^7.16.7\"",
          "869:     \"@babel/plugin-proposal-async-generator-functions\" \"^7.16.8\"",
          "870:     \"@babel/plugin-proposal-class-properties\" \"^7.16.7\"",
          "871:     \"@babel/plugin-proposal-class-static-block\" \"^7.17.6\"",
          "873:     \"@babel/plugin-proposal-export-namespace-from\" \"^7.16.7\"",
          "874:     \"@babel/plugin-proposal-json-strings\" \"^7.16.7\"",
          "875:     \"@babel/plugin-proposal-logical-assignment-operators\" \"^7.16.7\"",
          "876:     \"@babel/plugin-proposal-nullish-coalescing-operator\" \"^7.16.7\"",
          "878:     \"@babel/plugin-proposal-object-rest-spread\" \"^7.17.3\"",
          "880:     \"@babel/plugin-proposal-optional-chaining\" \"^7.16.7\"",
          "881:     \"@babel/plugin-proposal-private-methods\" \"^7.16.11\"",
          "882:     \"@babel/plugin-proposal-private-property-in-object\" \"^7.16.7\"",
          "883:     \"@babel/plugin-proposal-unicode-property-regex\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "866:   version \"7.18.2\"",
          "867:   resolved \"https://registry.yarnpkg.com/@babel/preset-env/-/preset-env-7.18.2.tgz#f47d3000a098617926e674c945d95a28cb90977a\"",
          "868:   integrity sha512-PfpdxotV6afmXMU47S08F9ZKIm2bJIQ0YbAAtDfIENX7G1NUAXigLREh69CWDjtgUy7dYn7bsMzkgdtAlmS68Q==",
          "871:     \"@babel/helper-compilation-targets\" \"^7.18.2\"",
          "872:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "874:     \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\" \"^7.17.12\"",
          "875:     \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\" \"^7.17.12\"",
          "876:     \"@babel/plugin-proposal-async-generator-functions\" \"^7.17.12\"",
          "877:     \"@babel/plugin-proposal-class-properties\" \"^7.17.12\"",
          "878:     \"@babel/plugin-proposal-class-static-block\" \"^7.18.0\"",
          "880:     \"@babel/plugin-proposal-export-namespace-from\" \"^7.17.12\"",
          "881:     \"@babel/plugin-proposal-json-strings\" \"^7.17.12\"",
          "882:     \"@babel/plugin-proposal-logical-assignment-operators\" \"^7.17.12\"",
          "883:     \"@babel/plugin-proposal-nullish-coalescing-operator\" \"^7.17.12\"",
          "885:     \"@babel/plugin-proposal-object-rest-spread\" \"^7.18.0\"",
          "887:     \"@babel/plugin-proposal-optional-chaining\" \"^7.17.12\"",
          "888:     \"@babel/plugin-proposal-private-methods\" \"^7.17.12\"",
          "889:     \"@babel/plugin-proposal-private-property-in-object\" \"^7.17.12\"",
          "890:     \"@babel/plugin-proposal-unicode-property-regex\" \"^7.17.12\"",
          "896:     \"@babel/plugin-syntax-import-assertions\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "895:     \"@babel/plugin-syntax-optional-chaining\" \"^7.8.3\"",
          "896:     \"@babel/plugin-syntax-private-property-in-object\" \"^7.14.5\"",
          "897:     \"@babel/plugin-syntax-top-level-await\" \"^7.14.5\"",
          "900:     \"@babel/plugin-transform-block-scoped-functions\" \"^7.16.7\"",
          "905:     \"@babel/plugin-transform-dotall-regex\" \"^7.16.7\"",
          "907:     \"@babel/plugin-transform-exponentiation-operator\" \"^7.16.7\"",
          "909:     \"@babel/plugin-transform-function-name\" \"^7.16.7\"",
          "911:     \"@babel/plugin-transform-member-expression-literals\" \"^7.16.7\"",
          "918:     \"@babel/plugin-transform-object-super\" \"^7.16.7\"",
          "920:     \"@babel/plugin-transform-property-literals\" \"^7.16.7\"",
          "923:     \"@babel/plugin-transform-shorthand-properties\" \"^7.16.7\"",
          "925:     \"@babel/plugin-transform-sticky-regex\" \"^7.16.7\"",
          "928:     \"@babel/plugin-transform-unicode-escapes\" \"^7.16.7\"",
          "929:     \"@babel/plugin-transform-unicode-regex\" \"^7.16.7\"",
          "930:     \"@babel/preset-modules\" \"^0.1.5\"",
          "932:     babel-plugin-polyfill-corejs2 \"^0.3.0\"",
          "933:     babel-plugin-polyfill-corejs3 \"^0.5.0\"",
          "934:     babel-plugin-polyfill-regenerator \"^0.3.0\"",
          "",
          "[Removed Lines]",
          "898:     \"@babel/plugin-transform-arrow-functions\" \"^7.16.7\"",
          "899:     \"@babel/plugin-transform-async-to-generator\" \"^7.16.8\"",
          "901:     \"@babel/plugin-transform-block-scoping\" \"^7.16.7\"",
          "902:     \"@babel/plugin-transform-classes\" \"^7.16.7\"",
          "903:     \"@babel/plugin-transform-computed-properties\" \"^7.16.7\"",
          "904:     \"@babel/plugin-transform-destructuring\" \"^7.17.7\"",
          "906:     \"@babel/plugin-transform-duplicate-keys\" \"^7.16.7\"",
          "908:     \"@babel/plugin-transform-for-of\" \"^7.16.7\"",
          "910:     \"@babel/plugin-transform-literals\" \"^7.16.7\"",
          "912:     \"@babel/plugin-transform-modules-amd\" \"^7.16.7\"",
          "913:     \"@babel/plugin-transform-modules-commonjs\" \"^7.17.9\"",
          "914:     \"@babel/plugin-transform-modules-systemjs\" \"^7.17.8\"",
          "915:     \"@babel/plugin-transform-modules-umd\" \"^7.16.7\"",
          "916:     \"@babel/plugin-transform-named-capturing-groups-regex\" \"^7.17.10\"",
          "917:     \"@babel/plugin-transform-new-target\" \"^7.16.7\"",
          "919:     \"@babel/plugin-transform-parameters\" \"^7.16.7\"",
          "921:     \"@babel/plugin-transform-regenerator\" \"^7.17.9\"",
          "922:     \"@babel/plugin-transform-reserved-words\" \"^7.16.7\"",
          "924:     \"@babel/plugin-transform-spread\" \"^7.16.7\"",
          "926:     \"@babel/plugin-transform-template-literals\" \"^7.16.7\"",
          "927:     \"@babel/plugin-transform-typeof-symbol\" \"^7.16.7\"",
          "931:     \"@babel/types\" \"^7.17.10\"",
          "",
          "[Added Lines]",
          "906:     \"@babel/plugin-transform-arrow-functions\" \"^7.17.12\"",
          "907:     \"@babel/plugin-transform-async-to-generator\" \"^7.17.12\"",
          "909:     \"@babel/plugin-transform-block-scoping\" \"^7.17.12\"",
          "910:     \"@babel/plugin-transform-classes\" \"^7.17.12\"",
          "911:     \"@babel/plugin-transform-computed-properties\" \"^7.17.12\"",
          "912:     \"@babel/plugin-transform-destructuring\" \"^7.18.0\"",
          "914:     \"@babel/plugin-transform-duplicate-keys\" \"^7.17.12\"",
          "916:     \"@babel/plugin-transform-for-of\" \"^7.18.1\"",
          "918:     \"@babel/plugin-transform-literals\" \"^7.17.12\"",
          "920:     \"@babel/plugin-transform-modules-amd\" \"^7.18.0\"",
          "921:     \"@babel/plugin-transform-modules-commonjs\" \"^7.18.2\"",
          "922:     \"@babel/plugin-transform-modules-systemjs\" \"^7.18.0\"",
          "923:     \"@babel/plugin-transform-modules-umd\" \"^7.18.0\"",
          "924:     \"@babel/plugin-transform-named-capturing-groups-regex\" \"^7.17.12\"",
          "925:     \"@babel/plugin-transform-new-target\" \"^7.17.12\"",
          "927:     \"@babel/plugin-transform-parameters\" \"^7.17.12\"",
          "929:     \"@babel/plugin-transform-regenerator\" \"^7.18.0\"",
          "930:     \"@babel/plugin-transform-reserved-words\" \"^7.17.12\"",
          "932:     \"@babel/plugin-transform-spread\" \"^7.17.12\"",
          "934:     \"@babel/plugin-transform-template-literals\" \"^7.18.2\"",
          "935:     \"@babel/plugin-transform-typeof-symbol\" \"^7.17.12\"",
          "939:     \"@babel/types\" \"^7.18.2\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "947:     esutils \"^2.0.2\"",
          "949: \"@babel/preset-typescript@^7.12.7\":",
          "953:   dependencies:",
          "955:     \"@babel/helper-validator-option\" \"^7.16.7\"",
          "958: \"@babel/register@^7.12.10\":",
          "959:   version \"7.17.7\"",
          "",
          "[Removed Lines]",
          "950:   version \"7.16.7\"",
          "951:   resolved \"https://registry.yarnpkg.com/@babel/preset-typescript/-/preset-typescript-7.16.7.tgz#ab114d68bb2020afc069cd51b37ff98a046a70b9\"",
          "952:   integrity sha512-WbVEmgXdIyvzB77AQjGBEyYPZx+8tTsO50XtfozQrkW8QB2rLJpH2lgx0TRw5EJrBxOZQ+wCcyPVQvS8tjEHpQ==",
          "954:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "956:     \"@babel/plugin-transform-typescript\" \"^7.16.7\"",
          "",
          "[Added Lines]",
          "958:   version \"7.17.12\"",
          "959:   resolved \"https://registry.yarnpkg.com/@babel/preset-typescript/-/preset-typescript-7.17.12.tgz#40269e0a0084d56fc5731b6c40febe1c9a4a3e8c\"",
          "960:   integrity sha512-S1ViF8W2QwAKUGJXxP9NAfNaqGDdEBJKpYkxHf5Yy2C4NPPzXGeR3Lhk7G8xJaaLcFTRfNjVbtbVtm8Gb0mqvg==",
          "962:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "964:     \"@babel/plugin-transform-typescript\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "967:     source-map-support \"^0.5.16\"",
          "969: \"@babel/runtime@^7.12.5\", \"@babel/runtime@^7.7.6\", \"@babel/runtime@^7.8.4\":",
          "973:   dependencies:",
          "974:     regenerator-runtime \"^0.13.4\"",
          "",
          "[Removed Lines]",
          "970:   version \"7.17.9\"",
          "971:   resolved \"https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.17.9.tgz#d19fbf802d01a8cb6cf053a64e472d42c434ba72\"",
          "972:   integrity sha512-lSiBBvodq29uShpWGNbgFdKYNiFDo5/HIYsaCEY9ff4sb10x9jizo2+pRrSyF4jKZCXqgzuqBOQKbUm90gQwJg==",
          "",
          "[Added Lines]",
          "978:   version \"7.18.3\"",
          "979:   resolved \"https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.18.3.tgz#c7b654b57f6f63cf7f8b418ac9ca04408c4579f4\"",
          "980:   integrity sha512-38Y8f7YUhce/K7RMwTp7m0uCumpv9hZkitCbBClqQIow1qSbCvGkcegKOXpEWCQLfWmevgRiWokZ1GkpfhbZug==",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "982:     \"@babel/parser\" \"^7.16.7\"",
          "983:     \"@babel/types\" \"^7.16.7\"",
          "989:   dependencies:",
          "990:     \"@babel/code-frame\" \"^7.16.7\"",
          "993:     \"@babel/helper-function-name\" \"^7.17.9\"",
          "994:     \"@babel/helper-hoist-variables\" \"^7.16.7\"",
          "995:     \"@babel/helper-split-export-declaration\" \"^7.16.7\"",
          "998:     debug \"^4.1.0\"",
          "999:     globals \"^11.1.0\"",
          "1005:   dependencies:",
          "1006:     \"@babel/helper-validator-identifier\" \"^7.16.7\"",
          "1007:     to-fast-properties \"^2.0.0\"",
          "",
          "[Removed Lines]",
          "985: \"@babel/traverse@^7.1.0\", \"@babel/traverse@^7.1.6\", \"@babel/traverse@^7.13.0\", \"@babel/traverse@^7.16.7\", \"@babel/traverse@^7.16.8\", \"@babel/traverse@^7.17.10\", \"@babel/traverse@^7.17.3\", \"@babel/traverse@^7.17.9\":",
          "986:   version \"7.17.10\"",
          "987:   resolved \"https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.17.10.tgz#1ee1a5ac39f4eac844e6cf855b35520e5eb6f8b5\"",
          "988:   integrity sha512-VmbrTHQteIdUUQNTb+zE12SHS/xQVIShmBPhlNP12hD5poF2pbITW1Z4172d03HegaQWhLffdkRJYtAzp0AGcw==",
          "991:     \"@babel/generator\" \"^7.17.10\"",
          "992:     \"@babel/helper-environment-visitor\" \"^7.16.7\"",
          "996:     \"@babel/parser\" \"^7.17.10\"",
          "997:     \"@babel/types\" \"^7.17.10\"",
          "1001: \"@babel/types@^7.0.0\", \"@babel/types@^7.16.0\", \"@babel/types@^7.16.7\", \"@babel/types@^7.16.8\", \"@babel/types@^7.17.0\", \"@babel/types@^7.17.10\", \"@babel/types@^7.2.0\", \"@babel/types@^7.3.0\", \"@babel/types@^7.3.3\", \"@babel/types@^7.4.4\":",
          "1002:   version \"7.17.10\"",
          "1003:   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.17.10.tgz#d35d7b4467e439fcf06d195f8100e0fea7fc82c4\"",
          "1004:   integrity sha512-9O26jG0mBYfGkUYCYZRnBwbVLd1UZOICEr2Em6InB6jVfsAv1GKgwXHmrSg+WFWDmeKTA6vyTZiN8tCSM5Oo3A==",
          "",
          "[Added Lines]",
          "993: \"@babel/traverse@^7.1.6\", \"@babel/traverse@^7.13.0\", \"@babel/traverse@^7.16.8\", \"@babel/traverse@^7.18.0\", \"@babel/traverse@^7.18.2\", \"@babel/traverse@^7.7.2\":",
          "994:   version \"7.18.2\"",
          "995:   resolved \"https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.18.2.tgz#b77a52604b5cc836a9e1e08dca01cba67a12d2e8\"",
          "996:   integrity sha512-9eNwoeovJ6KH9zcCNnENY7DMFwTU9JdGCFtqNLfUAqtUHRCOsTOqWoffosP8vKmNYeSBUv3yVJXjfd8ucwOjUA==",
          "999:     \"@babel/generator\" \"^7.18.2\"",
          "1000:     \"@babel/helper-environment-visitor\" \"^7.18.2\"",
          "1004:     \"@babel/parser\" \"^7.18.0\"",
          "1005:     \"@babel/types\" \"^7.18.2\"",
          "1009: \"@babel/types@^7.0.0\", \"@babel/types@^7.16.0\", \"@babel/types@^7.16.7\", \"@babel/types@^7.16.8\", \"@babel/types@^7.17.0\", \"@babel/types@^7.18.0\", \"@babel/types@^7.18.2\", \"@babel/types@^7.2.0\", \"@babel/types@^7.3.0\", \"@babel/types@^7.3.3\", \"@babel/types@^7.4.4\":",
          "1010:   version \"7.18.4\"",
          "1011:   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.18.4.tgz#27eae9b9fd18e9dccc3f9d6ad051336f307be354\"",
          "1012:   integrity sha512-ThN1mBcMq5pG/Vm2IcBmPPfyPXbd8S02rS+OBIDENdufvqC7Z/jHPCv9IcP01277aKtDI8g/2XysBN4hA8niiw==",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1011:   resolved \"https://registry.yarnpkg.com/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz#75a2e8b51cb758a7553d6804a5932d7aace75c39\"",
          "1012:   integrity sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
          "1026:   dependencies:",
          "1027:     ajv \"^6.12.4\"",
          "1028:     debug \"^4.3.2\"",
          "1031:     ignore \"^5.2.0\"",
          "1032:     import-fresh \"^3.2.1\"",
          "1033:     js-yaml \"^4.1.0\"",
          "1035:     strip-json-comments \"^3.1.1\"",
          "1037: \"@humanwhocodes/config-array@^0.9.2\":",
          "",
          "[Removed Lines]",
          "1014: \"@cnakazawa/watch@^1.0.3\":",
          "1015:   version \"1.0.4\"",
          "1016:   resolved \"https://registry.yarnpkg.com/@cnakazawa/watch/-/watch-1.0.4.tgz#f864ae85004d0fcab6f50be9141c4da368d1656a\"",
          "1017:   integrity sha512-v9kIhKwjeZThiWrLmj0y17CWoyddASLj9O2yvbZkbvw/N3rWOYy9zkV66ursAoVr0mV15bL8g0c4QZUE6cdDoQ==",
          "1018:   dependencies:",
          "1019:     exec-sh \"^0.3.2\"",
          "1020:     minimist \"^1.2.0\"",
          "1022: \"@eslint/eslintrc@^1.1.0\":",
          "1023:   version \"1.2.2\"",
          "1024:   resolved \"https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-1.2.2.tgz#4989b9e8c0216747ee7cca314ae73791bb281aae\"",
          "1025:   integrity sha512-lTVWHs7O2hjBFZunXTZYnYqtB9GakA1lnxIf+gKq2nY5gxkkNi/lQvveW6t8gFdOHTg6nG50Xs95PrLqVpcaLg==",
          "1029:     espree \"^9.3.1\"",
          "1030:     globals \"^13.9.0\"",
          "1034:     minimatch \"^3.0.4\"",
          "",
          "[Added Lines]",
          "1022: \"@eslint/eslintrc@^1.3.0\":",
          "1023:   version \"1.3.0\"",
          "1024:   resolved \"https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-1.3.0.tgz#29f92c30bb3e771e4a2048c95fa6855392dfac4f\"",
          "1025:   integrity sha512-UWW0TMTmk2d7hLcWD1/e2g5HDM/HQ3csaLSqXCfqwh4uNDuNqlaKWXmEsL4Cs41Z0KnILNvwbHAah3C2yt06kw==",
          "1029:     espree \"^9.3.2\"",
          "1030:     globals \"^13.15.0\"",
          "1034:     minimatch \"^3.1.2\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1064:   resolved \"https://registry.yarnpkg.com/@istanbuljs/schema/-/schema-0.1.3.tgz#e45e384e4b8ec16bce2fd903af78450f6bf7ec98\"",
          "1065:   integrity sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
          "1071:   dependencies:",
          "1073:     \"@types/node\" \"*\"",
          "1074:     chalk \"^4.0.0\"",
          "1077:     slash \"^3.0.0\"",
          "1083:   dependencies:",
          "1089:     \"@types/node\" \"*\"",
          "1090:     ansi-escapes \"^4.2.1\"",
          "1091:     chalk \"^4.0.0\"",
          "1092:     exit \"^0.1.2\"",
          "1109:     rimraf \"^3.0.0\"",
          "1110:     slash \"^3.0.0\"",
          "1111:     strip-ansi \"^6.0.0\"",
          "1117:   dependencies:",
          "1120:     \"@types/node\" \"*\"",
          "1127:   dependencies:",
          "1130:     \"@types/node\" \"*\"",
          "1139:   dependencies:",
          "1148:   dependencies:",
          "1149:     \"@bcoe/v8-coverage\" \"^0.2.3\"",
          "1154:     chalk \"^4.0.0\"",
          "1155:     collect-v8-coverage \"^1.0.0\"",
          "1156:     exit \"^0.1.2\"",
          "1159:     istanbul-lib-coverage \"^3.0.0\"",
          "1161:     istanbul-lib-report \"^3.0.0\"",
          "1162:     istanbul-lib-source-maps \"^4.0.0\"",
          "1168:     slash \"^3.0.0\"",
          "1170:     string-length \"^4.0.1\"",
          "1171:     terminal-link \"^2.0.0\"",
          "1180:   dependencies:",
          "1181:     callsites \"^3.0.0\"",
          "1189:   dependencies:",
          "1192:     \"@types/istanbul-lib-coverage\" \"^2.0.0\"",
          "1193:     collect-v8-coverage \"^1.0.0\"",
          "1214:     chalk \"^4.0.0\"",
          "1215:     convert-source-map \"^1.4.0\"",
          "1216:     fast-json-stable-stringify \"^2.0.0\"",
          "1223:     slash \"^3.0.0\"",
          "1231:   dependencies:",
          "1232:     \"@types/istanbul-lib-coverage\" \"^2.0.0\"",
          "1233:     \"@types/istanbul-reports\" \"^3.0.0\"",
          "1234:     \"@types/node\" \"*\"",
          "1236:     chalk \"^4.0.0\"",
          "1238: \"@jridgewell/gen-mapping@^0.1.0\":",
          "",
          "[Removed Lines]",
          "1067: \"@jest/console@^26.6.2\":",
          "1068:   version \"26.6.2\"",
          "1069:   resolved \"https://registry.yarnpkg.com/@jest/console/-/console-26.6.2.tgz#4e04bc464014358b03ab4937805ee36a0aeb98f2\"",
          "1070:   integrity sha512-IY1R2i2aLsLr7Id3S6p2BA82GNWryt4oSvEXLAKc+L2zdi89dSkE8xC1C+0kpATG4JhBJREnQOH7/zmccM2B0g==",
          "1072:     \"@jest/types\" \"^26.6.2\"",
          "1075:     jest-message-util \"^26.6.2\"",
          "1076:     jest-util \"^26.6.2\"",
          "1079: \"@jest/core@^26.6.3\":",
          "1080:   version \"26.6.3\"",
          "1081:   resolved \"https://registry.yarnpkg.com/@jest/core/-/core-26.6.3.tgz#7639fcb3833d748a4656ada54bde193051e45fad\"",
          "1082:   integrity sha512-xvV1kKbhfUqFVuZ8Cyo+JPpipAHHAV3kcDBftiduK8EICXmTFddryy3P7NfZt8Pv37rA9nEJBKCCkglCPt/Xjw==",
          "1084:     \"@jest/console\" \"^26.6.2\"",
          "1085:     \"@jest/reporters\" \"^26.6.2\"",
          "1086:     \"@jest/test-result\" \"^26.6.2\"",
          "1087:     \"@jest/transform\" \"^26.6.2\"",
          "1088:     \"@jest/types\" \"^26.6.2\"",
          "1093:     graceful-fs \"^4.2.4\"",
          "1094:     jest-changed-files \"^26.6.2\"",
          "1095:     jest-config \"^26.6.3\"",
          "1096:     jest-haste-map \"^26.6.2\"",
          "1097:     jest-message-util \"^26.6.2\"",
          "1098:     jest-regex-util \"^26.0.0\"",
          "1099:     jest-resolve \"^26.6.2\"",
          "1100:     jest-resolve-dependencies \"^26.6.3\"",
          "1101:     jest-runner \"^26.6.3\"",
          "1102:     jest-runtime \"^26.6.3\"",
          "1103:     jest-snapshot \"^26.6.2\"",
          "1104:     jest-util \"^26.6.2\"",
          "1105:     jest-validate \"^26.6.2\"",
          "1106:     jest-watcher \"^26.6.2\"",
          "1107:     micromatch \"^4.0.2\"",
          "1108:     p-each-series \"^2.1.0\"",
          "1113: \"@jest/environment@^26.6.2\":",
          "1114:   version \"26.6.2\"",
          "1115:   resolved \"https://registry.yarnpkg.com/@jest/environment/-/environment-26.6.2.tgz#ba364cc72e221e79cc8f0a99555bf5d7577cf92c\"",
          "1116:   integrity sha512-nFy+fHl28zUrRsCeMB61VDThV1pVTtlEokBRgqPrcT1JNq4yRNIyTHfyht6PqtUvY9IsuLGTrbG8kPXjSZIZwA==",
          "1118:     \"@jest/fake-timers\" \"^26.6.2\"",
          "1119:     \"@jest/types\" \"^26.6.2\"",
          "1121:     jest-mock \"^26.6.2\"",
          "1123: \"@jest/fake-timers@^26.6.2\":",
          "1124:   version \"26.6.2\"",
          "1125:   resolved \"https://registry.yarnpkg.com/@jest/fake-timers/-/fake-timers-26.6.2.tgz#459c329bcf70cee4af4d7e3f3e67848123535aad\"",
          "1126:   integrity sha512-14Uleatt7jdzefLPYM3KLcnUl1ZNikaKq34enpb5XG9i81JpppDb5muZvonvKyrl7ftEHkKS5L5/eB/kxJ+bvA==",
          "1128:     \"@jest/types\" \"^26.6.2\"",
          "1129:     \"@sinonjs/fake-timers\" \"^6.0.1\"",
          "1131:     jest-message-util \"^26.6.2\"",
          "1132:     jest-mock \"^26.6.2\"",
          "1133:     jest-util \"^26.6.2\"",
          "1135: \"@jest/globals@^26.6.2\":",
          "1136:   version \"26.6.2\"",
          "1137:   resolved \"https://registry.yarnpkg.com/@jest/globals/-/globals-26.6.2.tgz#5b613b78a1aa2655ae908eba638cc96a20df720a\"",
          "1138:   integrity sha512-85Ltnm7HlB/KesBUuALwQ68YTU72w9H2xW9FjZ1eL1U3lhtefjjl5c2MiUbpXt/i6LaPRvoOFJ22yCBSfQ0JIA==",
          "1140:     \"@jest/environment\" \"^26.6.2\"",
          "1141:     \"@jest/types\" \"^26.6.2\"",
          "1142:     expect \"^26.6.2\"",
          "1144: \"@jest/reporters@^26.6.2\":",
          "1145:   version \"26.6.2\"",
          "1146:   resolved \"https://registry.yarnpkg.com/@jest/reporters/-/reporters-26.6.2.tgz#1f518b99637a5f18307bd3ecf9275f6882a667f6\"",
          "1147:   integrity sha512-h2bW53APG4HvkOnVMo8q3QXa6pcaNt1HkwVsOPMBV6LD/q9oSpxNSYZQYkAnjdMjrJ86UuYeLo+aEZClV6opnw==",
          "1150:     \"@jest/console\" \"^26.6.2\"",
          "1151:     \"@jest/test-result\" \"^26.6.2\"",
          "1152:     \"@jest/transform\" \"^26.6.2\"",
          "1153:     \"@jest/types\" \"^26.6.2\"",
          "1157:     glob \"^7.1.2\"",
          "1158:     graceful-fs \"^4.2.4\"",
          "1160:     istanbul-lib-instrument \"^4.0.3\"",
          "1163:     istanbul-reports \"^3.0.2\"",
          "1164:     jest-haste-map \"^26.6.2\"",
          "1165:     jest-resolve \"^26.6.2\"",
          "1166:     jest-util \"^26.6.2\"",
          "1167:     jest-worker \"^26.6.2\"",
          "1169:     source-map \"^0.6.0\"",
          "1172:     v8-to-istanbul \"^7.0.0\"",
          "1173:   optionalDependencies:",
          "1174:     node-notifier \"^8.0.0\"",
          "1176: \"@jest/source-map@^26.6.2\":",
          "1177:   version \"26.6.2\"",
          "1178:   resolved \"https://registry.yarnpkg.com/@jest/source-map/-/source-map-26.6.2.tgz#29af5e1e2e324cafccc936f218309f54ab69d535\"",
          "1179:   integrity sha512-YwYcCwAnNmOVsZ8mr3GfnzdXDAl4LaenZP5z+G0c8bzC9/dugL8zRmxZzdoTl4IaS3CryS1uWnROLPFmb6lVvA==",
          "1182:     graceful-fs \"^4.2.4\"",
          "1183:     source-map \"^0.6.0\"",
          "1185: \"@jest/test-result@^26.6.2\":",
          "1186:   version \"26.6.2\"",
          "1187:   resolved \"https://registry.yarnpkg.com/@jest/test-result/-/test-result-26.6.2.tgz#55da58b62df134576cc95476efa5f7949e3f5f18\"",
          "1188:   integrity sha512-5O7H5c/7YlojphYNrK02LlDIV2GNPYisKwHm2QTKjNZeEzezCbwYs9swJySv2UfPMyZ0VdsmMv7jIlD/IKYQpQ==",
          "1190:     \"@jest/console\" \"^26.6.2\"",
          "1191:     \"@jest/types\" \"^26.6.2\"",
          "1195: \"@jest/test-sequencer@^26.6.3\":",
          "1196:   version \"26.6.3\"",
          "1197:   resolved \"https://registry.yarnpkg.com/@jest/test-sequencer/-/test-sequencer-26.6.3.tgz#98e8a45100863886d074205e8ffdc5a7eb582b17\"",
          "1198:   integrity sha512-YHlVIjP5nfEyjlrSr8t/YdNfU/1XEt7c5b4OxcXCjyRhjzLYu/rO69/WHPuYcbCWkz8kAeZVZp2N2+IOLLEPGw==",
          "1199:   dependencies:",
          "1200:     \"@jest/test-result\" \"^26.6.2\"",
          "1201:     graceful-fs \"^4.2.4\"",
          "1202:     jest-haste-map \"^26.6.2\"",
          "1203:     jest-runner \"^26.6.3\"",
          "1204:     jest-runtime \"^26.6.3\"",
          "1206: \"@jest/transform@^26.6.2\":",
          "1207:   version \"26.6.2\"",
          "1208:   resolved \"https://registry.yarnpkg.com/@jest/transform/-/transform-26.6.2.tgz#5ac57c5fa1ad17b2aae83e73e45813894dcf2e4b\"",
          "1209:   integrity sha512-E9JjhUgNzvuQ+vVAL21vlyfy12gP0GhazGgJC4h6qUt1jSdUXGWJ1wfu/X7Sd8etSgxV4ovT1pb9v5D6QW4XgA==",
          "1210:   dependencies:",
          "1211:     \"@babel/core\" \"^7.1.0\"",
          "1212:     \"@jest/types\" \"^26.6.2\"",
          "1213:     babel-plugin-istanbul \"^6.0.0\"",
          "1217:     graceful-fs \"^4.2.4\"",
          "1218:     jest-haste-map \"^26.6.2\"",
          "1219:     jest-regex-util \"^26.0.0\"",
          "1220:     jest-util \"^26.6.2\"",
          "1221:     micromatch \"^4.0.2\"",
          "1222:     pirates \"^4.0.1\"",
          "1224:     source-map \"^0.6.1\"",
          "1225:     write-file-atomic \"^3.0.0\"",
          "1227: \"@jest/types@^26.6.2\":",
          "1228:   version \"26.6.2\"",
          "1229:   resolved \"https://registry.yarnpkg.com/@jest/types/-/types-26.6.2.tgz#bef5a532030e1d88a2f5a6d933f84e97226ed48e\"",
          "1230:   integrity sha512-fC6QCp7Sc5sX6g8Tvbmj4XUTbyrik0akgRy03yjXbQaBWWNWGE7SGtJk98m0N8nzegD/7SggrUlivxo5ax4KWQ==",
          "1235:     \"@types/yargs\" \"^15.0.0\"",
          "",
          "[Added Lines]",
          "1067: \"@jest/console@^28.1.0\":",
          "1068:   version \"28.1.0\"",
          "1069:   resolved \"https://registry.yarnpkg.com/@jest/console/-/console-28.1.0.tgz#db78222c3d3b0c1db82f1b9de51094c2aaff2176\"",
          "1070:   integrity sha512-tscn3dlJFGay47kb4qVruQg/XWlmvU0xp3EJOjzzY+sBaI+YgwKcvAmTcyYU7xEiLLIY5HCdWRooAL8dqkFlDA==",
          "1072:     \"@jest/types\" \"^28.1.0\"",
          "1075:     jest-message-util \"^28.1.0\"",
          "1076:     jest-util \"^28.1.0\"",
          "1079: \"@jest/core@^28.1.0\":",
          "1080:   version \"28.1.0\"",
          "1081:   resolved \"https://registry.yarnpkg.com/@jest/core/-/core-28.1.0.tgz#784a1e6ce5358b46fcbdcfbbd93b1b713ed4ea80\"",
          "1082:   integrity sha512-/2PTt0ywhjZ4NwNO4bUqD9IVJfmFVhVKGlhvSpmEfUCuxYf/3NHcKmRFI+I71lYzbTT3wMuYpETDCTHo81gC/g==",
          "1084:     \"@jest/console\" \"^28.1.0\"",
          "1085:     \"@jest/reporters\" \"^28.1.0\"",
          "1086:     \"@jest/test-result\" \"^28.1.0\"",
          "1087:     \"@jest/transform\" \"^28.1.0\"",
          "1088:     \"@jest/types\" \"^28.1.0\"",
          "1092:     ci-info \"^3.2.0\"",
          "1094:     graceful-fs \"^4.2.9\"",
          "1095:     jest-changed-files \"^28.0.2\"",
          "1096:     jest-config \"^28.1.0\"",
          "1097:     jest-haste-map \"^28.1.0\"",
          "1098:     jest-message-util \"^28.1.0\"",
          "1099:     jest-regex-util \"^28.0.2\"",
          "1100:     jest-resolve \"^28.1.0\"",
          "1101:     jest-resolve-dependencies \"^28.1.0\"",
          "1102:     jest-runner \"^28.1.0\"",
          "1103:     jest-runtime \"^28.1.0\"",
          "1104:     jest-snapshot \"^28.1.0\"",
          "1105:     jest-util \"^28.1.0\"",
          "1106:     jest-validate \"^28.1.0\"",
          "1107:     jest-watcher \"^28.1.0\"",
          "1108:     micromatch \"^4.0.4\"",
          "1109:     pretty-format \"^28.1.0\"",
          "1114: \"@jest/environment@^28.1.0\":",
          "1115:   version \"28.1.0\"",
          "1116:   resolved \"https://registry.yarnpkg.com/@jest/environment/-/environment-28.1.0.tgz#dedf7d59ec341b9292fcf459fd0ed819eb2e228a\"",
          "1117:   integrity sha512-S44WGSxkRngzHslhV6RoAExekfF7Qhwa6R5+IYFa81mpcj0YgdBnRSmvHe3SNwOt64yXaE5GG8Y2xM28ii5ssA==",
          "1119:     \"@jest/fake-timers\" \"^28.1.0\"",
          "1120:     \"@jest/types\" \"^28.1.0\"",
          "1122:     jest-mock \"^28.1.0\"",
          "1124: \"@jest/expect-utils@^28.1.0\":",
          "1125:   version \"28.1.0\"",
          "1126:   resolved \"https://registry.yarnpkg.com/@jest/expect-utils/-/expect-utils-28.1.0.tgz#a5cde811195515a9809b96748ae8bcc331a3538a\"",
          "1127:   integrity sha512-5BrG48dpC0sB80wpeIX5FU6kolDJI4K0n5BM9a5V38MGx0pyRvUBSS0u2aNTdDzmOrCjhOg8pGs6a20ivYkdmw==",
          "1128:   dependencies:",
          "1129:     jest-get-type \"^28.0.2\"",
          "1131: \"@jest/expect@^28.1.0\":",
          "1132:   version \"28.1.0\"",
          "1133:   resolved \"https://registry.yarnpkg.com/@jest/expect/-/expect-28.1.0.tgz#2e5a31db692597070932366a1602b5157f0f217c\"",
          "1134:   integrity sha512-be9ETznPLaHOmeJqzYNIXv1ADEzENuQonIoobzThOYPuK/6GhrWNIJDVTgBLCrz3Am73PyEU2urQClZp0hLTtA==",
          "1136:     expect \"^28.1.0\"",
          "1137:     jest-snapshot \"^28.1.0\"",
          "1139: \"@jest/fake-timers@^28.1.0\":",
          "1140:   version \"28.1.0\"",
          "1141:   resolved \"https://registry.yarnpkg.com/@jest/fake-timers/-/fake-timers-28.1.0.tgz#ea77878aabd5c5d50e1fc53e76d3226101e33064\"",
          "1142:   integrity sha512-Xqsf/6VLeAAq78+GNPzI7FZQRf5cCHj1qgQxCjws9n8rKw8r1UYoeaALwBvyuzOkpU3c1I6emeMySPa96rxtIg==",
          "1143:   dependencies:",
          "1144:     \"@jest/types\" \"^28.1.0\"",
          "1145:     \"@sinonjs/fake-timers\" \"^9.1.1\"",
          "1147:     jest-message-util \"^28.1.0\"",
          "1148:     jest-mock \"^28.1.0\"",
          "1149:     jest-util \"^28.1.0\"",
          "1151: \"@jest/globals@^28.1.0\":",
          "1152:   version \"28.1.0\"",
          "1153:   resolved \"https://registry.yarnpkg.com/@jest/globals/-/globals-28.1.0.tgz#a4427d2eb11763002ff58e24de56b84ba79eb793\"",
          "1154:   integrity sha512-3m7sTg52OTQR6dPhsEQSxAvU+LOBbMivZBwOvKEZ+Rb+GyxVnXi9HKgOTYkx/S99T8yvh17U4tNNJPIEQmtwYw==",
          "1156:     \"@jest/environment\" \"^28.1.0\"",
          "1157:     \"@jest/expect\" \"^28.1.0\"",
          "1158:     \"@jest/types\" \"^28.1.0\"",
          "1160: \"@jest/reporters@^28.1.0\":",
          "1161:   version \"28.1.0\"",
          "1162:   resolved \"https://registry.yarnpkg.com/@jest/reporters/-/reporters-28.1.0.tgz#5183a28b9b593b6000fa9b89b031c7216b58a9a0\"",
          "1163:   integrity sha512-qxbFfqap/5QlSpIizH9c/bFCDKsQlM4uAKSOvZrP+nIdrjqre3FmKzpTtYyhsaVcOSNK7TTt2kjm+4BJIjysFA==",
          "1166:     \"@jest/console\" \"^28.1.0\"",
          "1167:     \"@jest/test-result\" \"^28.1.0\"",
          "1168:     \"@jest/transform\" \"^28.1.0\"",
          "1169:     \"@jest/types\" \"^28.1.0\"",
          "1170:     \"@jridgewell/trace-mapping\" \"^0.3.7\"",
          "1171:     \"@types/node\" \"*\"",
          "1175:     glob \"^7.1.3\"",
          "1176:     graceful-fs \"^4.2.9\"",
          "1178:     istanbul-lib-instrument \"^5.1.0\"",
          "1181:     istanbul-reports \"^3.1.3\"",
          "1182:     jest-util \"^28.1.0\"",
          "1183:     jest-worker \"^28.1.0\"",
          "1186:     strip-ansi \"^6.0.0\"",
          "1188:     v8-to-istanbul \"^9.0.0\"",
          "1190: \"@jest/schemas@^28.0.2\":",
          "1191:   version \"28.0.2\"",
          "1192:   resolved \"https://registry.yarnpkg.com/@jest/schemas/-/schemas-28.0.2.tgz#08c30df6a8d07eafea0aef9fb222c5e26d72e613\"",
          "1193:   integrity sha512-YVDJZjd4izeTDkij00vHHAymNXQ6WWsdChFRK86qck6Jpr3DCL5W3Is3vslviRlP+bLuMYRLbdp98amMvqudhA==",
          "1194:   dependencies:",
          "1195:     \"@sinclair/typebox\" \"^0.23.3\"",
          "1197: \"@jest/source-map@^28.0.2\":",
          "1198:   version \"28.0.2\"",
          "1199:   resolved \"https://registry.yarnpkg.com/@jest/source-map/-/source-map-28.0.2.tgz#914546f4410b67b1d42c262a1da7e0406b52dc90\"",
          "1200:   integrity sha512-Y9dxC8ZpN3kImkk0LkK5XCEneYMAXlZ8m5bflmSL5vrwyeUpJfentacCUg6fOb8NOpOO7hz2+l37MV77T6BFPw==",
          "1202:     \"@jridgewell/trace-mapping\" \"^0.3.7\"",
          "1204:     graceful-fs \"^4.2.9\"",
          "1206: \"@jest/test-result@^28.1.0\":",
          "1207:   version \"28.1.0\"",
          "1208:   resolved \"https://registry.yarnpkg.com/@jest/test-result/-/test-result-28.1.0.tgz#fd149dee123510dd2fcadbbf5f0020f98ad7f12c\"",
          "1209:   integrity sha512-sBBFIyoPzrZho3N+80P35A5oAkSKlGfsEFfXFWuPGBsW40UAjCkGakZhn4UQK4iQlW2vgCDMRDOob9FGKV8YoQ==",
          "1211:     \"@jest/console\" \"^28.1.0\"",
          "1212:     \"@jest/types\" \"^28.1.0\"",
          "1216: \"@jest/test-sequencer@^28.1.0\":",
          "1217:   version \"28.1.0\"",
          "1218:   resolved \"https://registry.yarnpkg.com/@jest/test-sequencer/-/test-sequencer-28.1.0.tgz#ce7294bbe986415b9a30e218c7e705e6ebf2cdf2\"",
          "1219:   integrity sha512-tZCEiVWlWNTs/2iK9yi6o3AlMfbbYgV4uuZInSVdzZ7ftpHZhCMuhvk2HLYhCZzLgPFQ9MnM1YaxMnh3TILFiQ==",
          "1220:   dependencies:",
          "1221:     \"@jest/test-result\" \"^28.1.0\"",
          "1222:     graceful-fs \"^4.2.9\"",
          "1223:     jest-haste-map \"^28.1.0\"",
          "1224:     slash \"^3.0.0\"",
          "1226: \"@jest/transform@^28.1.0\":",
          "1227:   version \"28.1.0\"",
          "1228:   resolved \"https://registry.yarnpkg.com/@jest/transform/-/transform-28.1.0.tgz#224a3c9ba4cc98e2ff996c0a89a2d59db15c74ce\"",
          "1229:   integrity sha512-omy2xe5WxlAfqmsTjTPxw+iXRTRnf+NtX0ToG+4S0tABeb4KsKmPUHq5UBuwunHg3tJRwgEQhEp0M/8oiatLEA==",
          "1230:   dependencies:",
          "1231:     \"@babel/core\" \"^7.11.6\"",
          "1232:     \"@jest/types\" \"^28.1.0\"",
          "1233:     \"@jridgewell/trace-mapping\" \"^0.3.7\"",
          "1234:     babel-plugin-istanbul \"^6.1.1\"",
          "1238:     graceful-fs \"^4.2.9\"",
          "1239:     jest-haste-map \"^28.1.0\"",
          "1240:     jest-regex-util \"^28.0.2\"",
          "1241:     jest-util \"^28.1.0\"",
          "1242:     micromatch \"^4.0.4\"",
          "1243:     pirates \"^4.0.4\"",
          "1245:     write-file-atomic \"^4.0.1\"",
          "1247: \"@jest/types@^28.1.0\":",
          "1248:   version \"28.1.0\"",
          "1249:   resolved \"https://registry.yarnpkg.com/@jest/types/-/types-28.1.0.tgz#508327a89976cbf9bd3e1cc74641a29fd7dfd519\"",
          "1250:   integrity sha512-xmEggMPr317MIOjjDoZ4ejCSr9Lpbt/u34+dvc99t7DS8YirW5rwZEhzKPC2BMUFkUhI48qs6qLUSGw5FuL0GA==",
          "1252:     \"@jest/schemas\" \"^28.0.2\"",
          "1256:     \"@types/yargs\" \"^17.0.8\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1243:     \"@jridgewell/set-array\" \"^1.0.0\"",
          "1244:     \"@jridgewell/sourcemap-codec\" \"^1.4.10\"",
          "1246: \"@jridgewell/resolve-uri@^3.0.3\":",
          "1251: \"@jridgewell/set-array@^1.0.0\":",
          "1256: \"@jridgewell/sourcemap-codec@^1.4.10\":",
          "1261: \"@jridgewell/trace-mapping@^0.3.7\", \"@jridgewell/trace-mapping@^0.3.8\", \"@jridgewell/trace-mapping@^0.3.9\":",
          "1265:   dependencies:",
          "1266:     \"@jridgewell/resolve-uri\" \"^3.0.3\"",
          "1267:     \"@jridgewell/sourcemap-codec\" \"^1.4.10\"",
          "",
          "[Removed Lines]",
          "1247:   version \"3.0.6\"",
          "1248:   resolved \"https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.0.6.tgz#4ac237f4dabc8dd93330386907b97591801f7352\"",
          "1249:   integrity sha512-R7xHtBSNm+9SyvpJkdQl+qrM3Hm2fea3Ef197M3mUug+v+yR+Rhfbs7PBtcBUVnIWJ4JcAdjvij+c8hXS9p5aw==",
          "1252:   version \"1.1.0\"",
          "1253:   resolved \"https://registry.yarnpkg.com/@jridgewell/set-array/-/set-array-1.1.0.tgz#1179863356ac8fbea64a5a4bcde93a4871012c01\"",
          "1254:   integrity sha512-SfJxIxNVYLTsKwzB3MoOQ1yxf4w/E6MdkvTgrgAt1bfxjSrLUoHMKrDOykwN14q65waezZIdqDneUIPh4/sKxg==",
          "1257:   version \"1.4.12\"",
          "1258:   resolved \"https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.12.tgz#7ed98f6fa525ffb7c56a2cbecb5f7bb91abd2baf\"",
          "1259:   integrity sha512-az/NhpIwP3K33ILr0T2bso+k2E/SLf8Yidd8mHl0n6sCQ4YdyC8qDhZA6kOPDNDBA56ZnIjngVl0U3jREA0BUA==",
          "1262:   version \"0.3.9\"",
          "1263:   resolved \"https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz#6534fd5933a53ba7cbf3a17615e273a0d1273ff9\"",
          "1264:   integrity sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
          "",
          "[Added Lines]",
          "1267: \"@jridgewell/gen-mapping@^0.3.0\":",
          "1268:   version \"0.3.1\"",
          "1269:   resolved \"https://registry.yarnpkg.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.1.tgz#cf92a983c83466b8c0ce9124fadeaf09f7c66ea9\"",
          "1270:   integrity sha512-GcHwniMlA2z+WFPWuY8lp3fsza0I8xPFMWL5+n8LYyP6PSvPrXf4+n8stDHZY2DM0zy9sVkRDy1jDI4XGzYVqg==",
          "1271:   dependencies:",
          "1272:     \"@jridgewell/set-array\" \"^1.0.0\"",
          "1273:     \"@jridgewell/sourcemap-codec\" \"^1.4.10\"",
          "1274:     \"@jridgewell/trace-mapping\" \"^0.3.9\"",
          "1277:   version \"3.0.7\"",
          "1278:   resolved \"https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.0.7.tgz#30cd49820a962aff48c8fffc5cd760151fca61fe\"",
          "1279:   integrity sha512-8cXDaBBHOr2pQ7j77Y6Vp5VDT2sIqWyWQ56TjEq4ih/a4iST3dItRe8Q9fp0rrIl9DoKhWQtUQz/YpOxLkXbNA==",
          "1282:   version \"1.1.1\"",
          "1283:   resolved \"https://registry.yarnpkg.com/@jridgewell/set-array/-/set-array-1.1.1.tgz#36a6acc93987adcf0ba50c66908bd0b70de8afea\"",
          "1284:   integrity sha512-Ct5MqZkLGEXTVmQYbGtx9SVqD2fqwvdubdps5D3djjAkgkKwT918VNOz65pEHFaYTeWcukmJmH5SwsA9Tn2ObQ==",
          "1286: \"@jridgewell/source-map@^0.3.2\":",
          "1287:   version \"0.3.2\"",
          "1288:   resolved \"https://registry.yarnpkg.com/@jridgewell/source-map/-/source-map-0.3.2.tgz#f45351aaed4527a298512ec72f81040c998580fb\"",
          "1289:   integrity sha512-m7O9o2uR8k2ObDysZYzdfhb08VuEml5oWGiosa1VdaPZ/A6QyPkAJuwN0Q1lhULOf6B7MtQmHENS743hWtCrgw==",
          "1290:   dependencies:",
          "1291:     \"@jridgewell/gen-mapping\" \"^0.3.0\"",
          "1292:     \"@jridgewell/trace-mapping\" \"^0.3.9\"",
          "1295:   version \"1.4.13\"",
          "1296:   resolved \"https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.13.tgz#b6461fb0c2964356c469e115f504c95ad97ab88c\"",
          "1297:   integrity sha512-GryiOJmNcWbovBxTfZSF71V/mXbgcV3MewDe3kIMCLyIh5e7SKAeUZs+rMnJ8jkMolZ/4/VsdBmMrw3l+VdZ3w==",
          "1300:   version \"0.3.13\"",
          "1301:   resolved \"https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.13.tgz#dcfe3e95f224c8fe97a87a5235defec999aa92ea\"",
          "1302:   integrity sha512-o1xbKhp9qnIAoHJSWd6KlCZfqslL4valSF81H8ImioOAxluWYWOpWkpyktY2vnt4tbrX9XYaxovq6cgowaJp2w==",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1397:   dependencies:",
          "1398:     \"@octokit/openapi-types\" \"^11.2.0\"",
          "1400: \"@sinonjs/commons@^1.7.0\":",
          "1401:   version \"1.8.3\"",
          "1402:   resolved \"https://registry.yarnpkg.com/@sinonjs/commons/-/commons-1.8.3.tgz#3802ddd21a50a949b6721ddd72da36e67e7f1b2d\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1438: \"@sinclair/typebox@^0.23.3\":",
          "1439:   version \"0.23.5\"",
          "1440:   resolved \"https://registry.yarnpkg.com/@sinclair/typebox/-/typebox-0.23.5.tgz#93f7b9f4e3285a7a9ade7557d9a8d36809cbc47d\"",
          "1441:   integrity sha512-AFBVi/iT4g20DHoujvMH1aEDn8fGJh4xsRGCP6d8RpLPMqsNPvW01Jcn0QysXTsg++/xj25NmJsGyH9xug/wKg==",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1404:   dependencies:",
          "1405:     type-detect \"4.0.8\"",
          "1411:   dependencies:",
          "1412:     \"@sinonjs/commons\" \"^1.7.0\"",
          "1419: \"@types/babel-types@*\", \"@types/babel-types@^7.0.0\":",
          "1420:   version \"7.0.11\"",
          "1421:   resolved \"https://registry.yarnpkg.com/@types/babel-types/-/babel-types-7.0.11.tgz#263b113fa396fac4373188d73225297fb86f19a9\"",
          "1422:   integrity sha512-pkPtJUUY+Vwv6B1inAz55rQvivClHJxc9aVEPPmaq2cbyeMLCiDpbKpcKyX4LAwpNGi+SHBv0tHv6+0gXv0P2A==",
          "1425:   version \"7.1.19\"",
          "1426:   resolved \"https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.1.19.tgz#7b497495b7d1b4812bdb9d02804d0576f43ee460\"",
          "1427:   integrity sha512-WEOTgRsbYkvA/KCsDwVEGkd7WAr1e3g31VHQ8zy5gul/V1qKullU/BU5I68X5v7V3GnB9eotmom4v5a5gjxorw==",
          "",
          "[Removed Lines]",
          "1407: \"@sinonjs/fake-timers@^6.0.1\":",
          "1408:   version \"6.0.1\"",
          "1409:   resolved \"https://registry.yarnpkg.com/@sinonjs/fake-timers/-/fake-timers-6.0.1.tgz#293674fccb3262ac782c7aadfdeca86b10c75c40\"",
          "1410:   integrity sha512-MZPUxrmFubI36XS1DI3qmI0YdN1gks62JtFZvxR67ljjSNCeK6U08Zx4msEWOXuofgqUt6zPHSi1H9fbjR/NRA==",
          "1414: \"@tootallnate/once@1\":",
          "1415:   version \"1.1.2\"",
          "1416:   resolved \"https://registry.yarnpkg.com/@tootallnate/once/-/once-1.1.2.tgz#ccb91445360179a04e7fe6aff78c00ffc1eeaf82\"",
          "1417:   integrity sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==",
          "1424: \"@types/babel__core@^7.0.0\", \"@types/babel__core@^7.1.7\":",
          "",
          "[Added Lines]",
          "1450: \"@sinonjs/fake-timers@^9.1.1\":",
          "1451:   version \"9.1.2\"",
          "1452:   resolved \"https://registry.yarnpkg.com/@sinonjs/fake-timers/-/fake-timers-9.1.2.tgz#4eaab737fab77332ab132d396a3c0d364bd0ea8c\"",
          "1453:   integrity sha512-BPS4ynJW/o92PUR4wgriz2Ud5gpST5vz6GQfMixEDK0Z8ZCUv2M7SkBLykH56T++Xs+8ln9zTGbOvNGIe02/jw==",
          "1462: \"@types/babel__core@^7.1.14\":",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1447:     \"@babel/parser\" \"^7.1.0\"",
          "1448:     \"@babel/types\" \"^7.0.0\"",
          "1451:   version \"7.17.1\"",
          "1452:   resolved \"https://registry.yarnpkg.com/@types/babel__traverse/-/babel__traverse-7.17.1.tgz#1a0e73e8c28c7e832656db372b779bfd2ef37314\"",
          "1453:   integrity sha512-kVzjari1s2YVi77D3w1yuvohV2idweYXMCDzqBiVNN63TcDWrIlTVOYpqVrvbbyOE/IyzBoTKF0fdnLPEORFxA==",
          "",
          "[Removed Lines]",
          "1450: \"@types/babel__traverse@*\", \"@types/babel__traverse@^7.0.4\", \"@types/babel__traverse@^7.0.6\":",
          "",
          "[Added Lines]",
          "1488: \"@types/babel__traverse@*\", \"@types/babel__traverse@^7.0.6\":",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1478:   resolved \"https://registry.yarnpkg.com/@types/content-type/-/content-type-1.1.5.tgz#aa02dca40864749a9e2bf0161a6216da57e3ede5\"",
          "1479:   integrity sha512-dgMN+syt1xb7Hk8LU6AODOfPlvz5z1CbXpPuJE5ZrX9STfBOIXF09pEB8N7a97WT9dbngt3ksDCm6GW6yMrxfQ==",
          "1482:   version \"4.1.5\"",
          "1483:   resolved \"https://registry.yarnpkg.com/@types/graceful-fs/-/graceful-fs-4.1.5.tgz#21ffba0d98da4350db64891f92a9e5db3cdb4e15\"",
          "1484:   integrity sha512-anKkLmZZ+xm4p8JWBf4hElkM4XR+EZeA2M9BAkkTldmcyDY4mbdIJnRghDJH3Ov5ooY7/UAoENtmdMSkaAd7Cw==",
          "",
          "[Removed Lines]",
          "1481: \"@types/graceful-fs@^4.1.2\":",
          "",
          "[Added Lines]",
          "1519: \"@types/graceful-fs@^4.1.3\":",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1504:   dependencies:",
          "1505:     \"@types/istanbul-lib-report\" \"*\"",
          "1511:   dependencies:",
          "1515: \"@types/json-schema@^7.0.9\":",
          "1516:   version \"7.0.11\"",
          "",
          "[Removed Lines]",
          "1507: \"@types/jest@^26.0.20\":",
          "1508:   version \"26.0.24\"",
          "1509:   resolved \"https://registry.yarnpkg.com/@types/jest/-/jest-26.0.24.tgz#943d11976b16739185913a1936e0de0c4a7d595a\"",
          "1510:   integrity sha512-E/X5Vib8BWqZNRlDxj9vYXhsDwPYbPINqKF9BsnSoon4RQ0D9moEuLD8txgyypFLH7J4+Lho9Nr/c8H0Fi+17w==",
          "1512:     jest-diff \"^26.0.0\"",
          "1513:     pretty-format \"^26.0.0\"",
          "",
          "[Added Lines]",
          "1545: \"@types/jest@^27.0.0\":",
          "1546:   version \"27.5.1\"",
          "1547:   resolved \"https://registry.yarnpkg.com/@types/jest/-/jest-27.5.1.tgz#2c8b6dc6ff85c33bcd07d0b62cb3d19ddfdb3ab9\"",
          "1548:   integrity sha512-fUy7YRpT+rHXto1YlL+J9rs0uLGyiqVt3ZOTQR+4ROc47yNl8WLdVLgUloBRhOxP1PZvguHl44T3H0wAWxahYQ==",
          "1550:     jest-matcher-utils \"^27.0.0\"",
          "1551:     pretty-format \"^27.0.0\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1520: \"@types/json5@^0.0.29\":",
          "1521:   version \"0.0.29\"",
          "1522:   resolved \"https://registry.yarnpkg.com/@types/json5/-/json5-0.0.29.tgz#ee28707ae94e11d2b827bcbe5270bcea7f3e71ee\"",
          "1525: \"@types/linkify-it@*\":",
          "1526:   version \"3.0.2\"",
          "",
          "[Removed Lines]",
          "1523:   integrity sha1-7ihweulOEdK4J7y+UnC86n8+ce4=",
          "",
          "[Added Lines]",
          "1561:   integrity sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1541:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
          "1543: \"@types/node@*\":",
          "1548: \"@types/node@12\":",
          "1563: \"@types/request@^2.48.5\":",
          "1564:   version \"2.48.8\"",
          "",
          "[Removed Lines]",
          "1544:   version \"17.0.31\"",
          "1545:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-17.0.31.tgz#a5bb84ecfa27eec5e1c802c6bbf8139bdb163a5d\"",
          "1546:   integrity sha512-AR0x5HbXGqkEx9CadRH3EBYx/VkiUgZIhP4wvPn/+5KIsgpNoyFaRlVe0Zlx9gRtg8fA06a9tskE2MSN7TcG4Q==",
          "1549:   version \"12.20.50\"",
          "1550:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-12.20.50.tgz#14ba5198f1754ffd0472a2f84ab433b45ee0b65e\"",
          "1551:   integrity sha512-+9axpWx2b2JCVovr7Ilgt96uc6C1zBKOQMpGtRbWT9IoR/8ue32GGMfGA4woP8QyP2gBs6GQWEVM3tCybGCxDA==",
          "1553: \"@types/normalize-package-data@^2.4.0\":",
          "1554:   version \"2.4.1\"",
          "1555:   resolved \"https://registry.yarnpkg.com/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz#d3357479a0fdfdd5907fe67e17e0a85c906e1301\"",
          "1556:   integrity sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==",
          "1558: \"@types/prettier@^2.0.0\":",
          "1559:   version \"2.6.0\"",
          "1560:   resolved \"https://registry.yarnpkg.com/@types/prettier/-/prettier-2.6.0.tgz#efcbd41937f9ae7434c714ab698604822d890759\"",
          "1561:   integrity sha512-G/AdOadiZhnJp0jXCaBQU449W2h716OW/EoXeYkCytxKL06X1WCXB4DZpp8TpZ8eyIJVS1cw4lrlkkSYU21cDw==",
          "",
          "[Added Lines]",
          "1582:   version \"17.0.36\"",
          "1583:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-17.0.36.tgz#c0d5f2fe76b47b63e0e0efc3d2049a9970d68794\"",
          "1584:   integrity sha512-V3orv+ggDsWVHP99K3JlwtH20R7J4IhI1Kksgc+64q5VxgfRkQG8Ws3MFm/FZOKDYGy9feGFlZ70/HpCNe9QaA==",
          "1587:   version \"12.20.52\"",
          "1588:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-12.20.52.tgz#2fd2dc6bfa185601b15457398d4ba1ef27f81251\"",
          "1589:   integrity sha512-cfkwWw72849SNYp3Zx0IcIs25vABmFh73xicxhCkTcvtZQeIez15PpwQN8fY3RD7gv1Wrxlc9MEtfMORZDEsGw==",
          "1591: \"@types/prettier@^2.1.5\":",
          "1592:   version \"2.6.3\"",
          "1593:   resolved \"https://registry.yarnpkg.com/@types/prettier/-/prettier-2.6.3.tgz#68ada76827b0010d0db071f739314fa429943d0a\"",
          "1594:   integrity sha512-ymZk3LEC/fsut+/Q5qejp6R9O1rMxz3XaRHDV6kX8MrGAhOSPqVARbDi+EZvInBpw+BnCX3TD240byVkOfQsHg==",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1590:   resolved \"https://registry.yarnpkg.com/@types/yargs-parser/-/yargs-parser-21.0.0.tgz#0c60e537fa790f5f9472ed2776c2b71ec117351b\"",
          "1591:   integrity sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA==",
          "1597:   dependencies:",
          "1598:     \"@types/yargs-parser\" \"*\"",
          "1600: \"@typescript-eslint/eslint-plugin@^5.6.0\":",
          "1609:     functional-red-black-tree \"^1.0.1\"",
          "1611:     regexpp \"^3.2.0\"",
          "1613:     tsutils \"^3.21.0\"",
          "1615: \"@typescript-eslint/parser@^5.6.0\":",
          "1640:     tsutils \"^3.21.0\"",
          "1651:   dependencies:",
          "1656:     is-glob \"^4.0.3\"",
          "1658:     tsutils \"^3.21.0\"",
          "1664:   dependencies:",
          "1665:     \"@types/json-schema\" \"^7.0.9\"",
          "1669:     eslint-scope \"^5.1.1\"",
          "1670:     eslint-utils \"^3.0.0\"",
          "1676:   dependencies:",
          "1680: JSONStream@^1.0.3:",
          "1681:   version \"1.3.5\"",
          "",
          "[Removed Lines]",
          "1593: \"@types/yargs@^15.0.0\":",
          "1594:   version \"15.0.14\"",
          "1595:   resolved \"https://registry.yarnpkg.com/@types/yargs/-/yargs-15.0.14.tgz#26d821ddb89e70492160b66d10a0eb6df8f6fb06\"",
          "1596:   integrity sha512-yEJzHoxf6SyQGhBhIYGXQDSCkJjB6HohDShto7m8vaKg9Yp0Yn8+71J9eakh2bnPg6BfsH9PRMhiRTZnd4eXGQ==",
          "1601:   version \"5.22.0\"",
          "1602:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.22.0.tgz#7b52a0de2e664044f28b36419210aea4ab619e2a\"",
          "1603:   integrity sha512-YCiy5PUzpAeOPGQ7VSGDEY2NeYUV1B0swde2e0HzokRsHBYjSdF6DZ51OuRZxVPHx0032lXGLvOMls91D8FXlg==",
          "1604:   dependencies:",
          "1605:     \"@typescript-eslint/scope-manager\" \"5.22.0\"",
          "1606:     \"@typescript-eslint/type-utils\" \"5.22.0\"",
          "1607:     \"@typescript-eslint/utils\" \"5.22.0\"",
          "1608:     debug \"^4.3.2\"",
          "1610:     ignore \"^5.1.8\"",
          "1612:     semver \"^7.3.5\"",
          "1616:   version \"5.22.0\"",
          "1617:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-5.22.0.tgz#7bedf8784ef0d5d60567c5ba4ce162460e70c178\"",
          "1618:   integrity sha512-piwC4krUpRDqPaPbFaycN70KCP87+PC5WZmrWs+DlVOxxmF+zI6b6hETv7Quy4s9wbkV16ikMeZgXsvzwI3icQ==",
          "1619:   dependencies:",
          "1620:     \"@typescript-eslint/scope-manager\" \"5.22.0\"",
          "1621:     \"@typescript-eslint/types\" \"5.22.0\"",
          "1622:     \"@typescript-eslint/typescript-estree\" \"5.22.0\"",
          "1623:     debug \"^4.3.2\"",
          "1625: \"@typescript-eslint/scope-manager@5.22.0\":",
          "1626:   version \"5.22.0\"",
          "1627:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/scope-manager/-/scope-manager-5.22.0.tgz#590865f244ebe6e46dc3e9cab7976fc2afa8af24\"",
          "1628:   integrity sha512-yA9G5NJgV5esANJCO0oF15MkBO20mIskbZ8ijfmlKIvQKg0ynVKfHZ15/nhAJN5m8Jn3X5qkwriQCiUntC9AbA==",
          "1629:   dependencies:",
          "1630:     \"@typescript-eslint/types\" \"5.22.0\"",
          "1631:     \"@typescript-eslint/visitor-keys\" \"5.22.0\"",
          "1633: \"@typescript-eslint/type-utils@5.22.0\":",
          "1634:   version \"5.22.0\"",
          "1635:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/type-utils/-/type-utils-5.22.0.tgz#0c0e93b34210e334fbe1bcb7250c470f4a537c19\"",
          "1636:   integrity sha512-iqfLZIsZhK2OEJ4cQ01xOq3NaCuG5FQRKyHicA3xhZxMgaxQazLUHbH/B2k9y5i7l3+o+B5ND9Mf1AWETeMISA==",
          "1637:   dependencies:",
          "1638:     \"@typescript-eslint/utils\" \"5.22.0\"",
          "1639:     debug \"^4.3.2\"",
          "1642: \"@typescript-eslint/types@5.22.0\":",
          "1643:   version \"5.22.0\"",
          "1644:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/types/-/types-5.22.0.tgz#50a4266e457a5d4c4b87ac31903b28b06b2c3ed0\"",
          "1645:   integrity sha512-T7owcXW4l0v7NTijmjGWwWf/1JqdlWiBzPqzAWhobxft0SiEvMJB56QXmeCQjrPuM8zEfGUKyPQr/L8+cFUBLw==",
          "1647: \"@typescript-eslint/typescript-estree@5.22.0\":",
          "1648:   version \"5.22.0\"",
          "1649:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/typescript-estree/-/typescript-estree-5.22.0.tgz#e2116fd644c3e2fda7f4395158cddd38c0c6df97\"",
          "1650:   integrity sha512-EyBEQxvNjg80yinGE2xdhpDYm41so/1kOItl0qrjIiJ1kX/L/L8WWGmJg8ni6eG3DwqmOzDqOhe6763bF92nOw==",
          "1652:     \"@typescript-eslint/types\" \"5.22.0\"",
          "1653:     \"@typescript-eslint/visitor-keys\" \"5.22.0\"",
          "1654:     debug \"^4.3.2\"",
          "1655:     globby \"^11.0.4\"",
          "1657:     semver \"^7.3.5\"",
          "1660: \"@typescript-eslint/utils@5.22.0\":",
          "1661:   version \"5.22.0\"",
          "1662:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/utils/-/utils-5.22.0.tgz#1f2c4897e2cf7e44443c848a13c60407861babd8\"",
          "1663:   integrity sha512-HodsGb037iobrWSUMS7QH6Hl1kppikjA1ELiJlNSTYf/UdMEwzgj0WIp+lBNb6WZ3zTwb0tEz51j0Wee3iJ3wQ==",
          "1666:     \"@typescript-eslint/scope-manager\" \"5.22.0\"",
          "1667:     \"@typescript-eslint/types\" \"5.22.0\"",
          "1668:     \"@typescript-eslint/typescript-estree\" \"5.22.0\"",
          "1672: \"@typescript-eslint/visitor-keys@5.22.0\":",
          "1673:   version \"5.22.0\"",
          "1674:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/visitor-keys/-/visitor-keys-5.22.0.tgz#f49c0ce406944ffa331a1cfabeed451ea4d0909c\"",
          "1675:   integrity sha512-DbgTqn2Dv5RFWluG88tn0pP6Ex0ROF+dpDO1TNNZdRtLjUr6bdznjA6f/qNqJLjd2PgguAES2Zgxh/JzwzETDg==",
          "1677:     \"@typescript-eslint/types\" \"5.22.0\"",
          "1678:     eslint-visitor-keys \"^3.0.0\"",
          "",
          "[Added Lines]",
          "1626: \"@types/yargs@^17.0.8\":",
          "1627:   version \"17.0.10\"",
          "1628:   resolved \"https://registry.yarnpkg.com/@types/yargs/-/yargs-17.0.10.tgz#591522fce85d8739bca7b8bb90d048e4478d186a\"",
          "1629:   integrity sha512-gmEaFwpj/7f/ROdtIlci1R1VYU1J4j95m8T+Tj3iBgiBFKg1foE/PSl93bBd5T9LDXNPo8UlNN6W0qwD8O5OaA==",
          "1634:   version \"5.27.0\"",
          "1635:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.27.0.tgz#23d82a4f21aaafd8f69dbab7e716323bb6695cc8\"",
          "1636:   integrity sha512-DDrIA7GXtmHXr1VCcx9HivA39eprYBIFxbQEHI6NyraRDxCGpxAFiYQAT/1Y0vh1C+o2vfBiy4IuPoXxtTZCAQ==",
          "1637:   dependencies:",
          "1638:     \"@typescript-eslint/scope-manager\" \"5.27.0\"",
          "1639:     \"@typescript-eslint/type-utils\" \"5.27.0\"",
          "1640:     \"@typescript-eslint/utils\" \"5.27.0\"",
          "1641:     debug \"^4.3.4\"",
          "1643:     ignore \"^5.2.0\"",
          "1645:     semver \"^7.3.7\"",
          "1649:   version \"5.27.0\"",
          "1650:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-5.27.0.tgz#62bb091ed5cf9c7e126e80021bb563dcf36b6b12\"",
          "1651:   integrity sha512-8oGjQF46c52l7fMiPPvX4It3u3V3JipssqDfHQ2hcR0AeR8Zge+OYyKUCm5b70X72N1qXt0qgHenwN6Gc2SXZA==",
          "1652:   dependencies:",
          "1653:     \"@typescript-eslint/scope-manager\" \"5.27.0\"",
          "1654:     \"@typescript-eslint/types\" \"5.27.0\"",
          "1655:     \"@typescript-eslint/typescript-estree\" \"5.27.0\"",
          "1656:     debug \"^4.3.4\"",
          "1658: \"@typescript-eslint/scope-manager@5.27.0\":",
          "1659:   version \"5.27.0\"",
          "1660:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/scope-manager/-/scope-manager-5.27.0.tgz#a272178f613050ed62f51f69aae1e19e870a8bbb\"",
          "1661:   integrity sha512-VnykheBQ/sHd1Vt0LJ1JLrMH1GzHO+SzX6VTXuStISIsvRiurue/eRkTqSrG0CexHQgKG8shyJfR4o5VYioB9g==",
          "1662:   dependencies:",
          "1663:     \"@typescript-eslint/types\" \"5.27.0\"",
          "1664:     \"@typescript-eslint/visitor-keys\" \"5.27.0\"",
          "1666: \"@typescript-eslint/type-utils@5.27.0\":",
          "1667:   version \"5.27.0\"",
          "1668:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/type-utils/-/type-utils-5.27.0.tgz#36fd95f6747412251d79c795b586ba766cf0974b\"",
          "1669:   integrity sha512-vpTvRRchaf628Hb/Xzfek+85o//zEUotr1SmexKvTfs7czXfYjXVT/a5yDbpzLBX1rhbqxjDdr1Gyo0x1Fc64g==",
          "1670:   dependencies:",
          "1671:     \"@typescript-eslint/utils\" \"5.27.0\"",
          "1672:     debug \"^4.3.4\"",
          "1675: \"@typescript-eslint/types@5.27.0\":",
          "1676:   version \"5.27.0\"",
          "1677:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/types/-/types-5.27.0.tgz#c3f44b9dda6177a9554f94a74745ca495ba9c001\"",
          "1678:   integrity sha512-lY6C7oGm9a/GWhmUDOs3xAVRz4ty/XKlQ2fOLr8GAIryGn0+UBOoJDWyHer3UgrHkenorwvBnphhP+zPmzmw0A==",
          "1680: \"@typescript-eslint/typescript-estree@5.27.0\":",
          "1681:   version \"5.27.0\"",
          "1682:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/typescript-estree/-/typescript-estree-5.27.0.tgz#7965f5b553c634c5354a47dcce0b40b94611e995\"",
          "1683:   integrity sha512-QywPMFvgZ+MHSLRofLI7BDL+UczFFHyj0vF5ibeChDAJgdTV8k4xgEwF0geFhVlPc1p8r70eYewzpo6ps+9LJQ==",
          "1685:     \"@typescript-eslint/types\" \"5.27.0\"",
          "1686:     \"@typescript-eslint/visitor-keys\" \"5.27.0\"",
          "1687:     debug \"^4.3.4\"",
          "1688:     globby \"^11.1.0\"",
          "1690:     semver \"^7.3.7\"",
          "1693: \"@typescript-eslint/utils@5.27.0\":",
          "1694:   version \"5.27.0\"",
          "1695:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/utils/-/utils-5.27.0.tgz#d0021cbf686467a6a9499bd0589e19665f9f7e71\"",
          "1696:   integrity sha512-nZvCrkIJppym7cIbP3pOwIkAefXOmfGPnCM0LQfzNaKxJHI6VjI8NC662uoiPlaf5f6ymkTy9C3NQXev2mdXmA==",
          "1699:     \"@typescript-eslint/scope-manager\" \"5.27.0\"",
          "1700:     \"@typescript-eslint/types\" \"5.27.0\"",
          "1701:     \"@typescript-eslint/typescript-estree\" \"5.27.0\"",
          "1705: \"@typescript-eslint/visitor-keys@5.27.0\":",
          "1706:   version \"5.27.0\"",
          "1707:   resolved \"https://registry.yarnpkg.com/@typescript-eslint/visitor-keys/-/visitor-keys-5.27.0.tgz#97aa9a5d2f3df8215e6d3b77f9d214a24db269bd\"",
          "1708:   integrity sha512-46cYrteA2MrIAjv9ai44OQDUoCZyHeGIc4lsjCUX2WT6r4C+kidz1bNiR4017wHOPUythYeH+Sc7/cFP97KEAA==",
          "1710:     \"@typescript-eslint/types\" \"5.27.0\"",
          "1711:     eslint-visitor-keys \"^3.3.0\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1685:     jsonparse \"^1.2.0\"",
          "1686:     through \">=2.2.7 <3\"",
          "1693: ace-builds@^1.4.13:",
          "1698: acorn-globals@^3.0.0:",
          "1699:   version \"3.1.0\"",
          "1700:   resolved \"https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-3.1.0.tgz#fd8270f71fbb4996b004fa880ee5d46573a731bf\"",
          "1702:   dependencies:",
          "1703:     acorn \"^4.0.4\"",
          "1714:   version \"5.3.2\"",
          "1715:   resolved \"https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.2.tgz#7ed5bb55908b3b2f1bc55c6af1653bada7f07937\"",
          "1716:   integrity sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
          "1719:   version \"1.8.2\"",
          "1720:   resolved \"https://registry.yarnpkg.com/acorn-node/-/acorn-node-1.8.2.tgz#114c95d64539e53dede23de8b9d96df7c7ae2af8\"",
          "1721:   integrity sha512-8mt+fslDufLYntIoPAaIMUe/lrbrehIiwmR3t2k9LljIzoigEPF27eLk2hy8zSGzmR/ogr7zbRKINMo1u0yh5A==",
          "",
          "[Removed Lines]",
          "1688: abab@^2.0.3, abab@^2.0.5:",
          "1689:   version \"2.0.6\"",
          "1690:   resolved \"https://registry.yarnpkg.com/abab/-/abab-2.0.6.tgz#41b80f2c871d19686216b82309231cfd3cb3d291\"",
          "1691:   integrity sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
          "1694:   version \"1.4.14\"",
          "1695:   resolved \"https://registry.yarnpkg.com/ace-builds/-/ace-builds-1.4.14.tgz#2c41ccbccdd09e665d3489f161a20baeb3a3c852\"",
          "1696:   integrity sha512-NBOQlm9+7RBqRqZwimpgquaLeTJFayqb9UEPtTkpC3TkkwDnlsT/TwsCC0svjt9kEZ6G9mH5AEOHSz6Q/HrzQQ==",
          "1701:   integrity sha1-/YJw9x+7SZawBPqIDuXUZXOnMb8=",
          "1705: acorn-globals@^6.0.0:",
          "1706:   version \"6.0.0\"",
          "1707:   resolved \"https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-6.0.0.tgz#46cdd39f0f8ff08a876619b55f5ac8a6dc770b45\"",
          "1708:   integrity sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==",
          "1709:   dependencies:",
          "1710:     acorn \"^7.1.1\"",
          "1711:     acorn-walk \"^7.1.1\"",
          "1713: acorn-jsx@^5.3.1:",
          "1718: acorn-node@^1.2.0, acorn-node@^1.3.0, acorn-node@^1.5.2, acorn-node@^1.6.1:",
          "",
          "[Added Lines]",
          "1722:   version \"1.5.3\"",
          "1723:   resolved \"https://registry.yarnpkg.com/ace-builds/-/ace-builds-1.5.3.tgz#05f81d3464a9ea19696e5e6fd0f924d37dab442f\"",
          "1724:   integrity sha512-WN5BKR2aTSuBmisO8jo3Fytk6sOmJGki82v/Boeic81IgYN8pFHNkXq2anDF0XkmfDWMqLbRoW9sjc/GtKzQbQ==",
          "1729:   integrity sha512-uWttZCk96+7itPxK8xCzY86PnxKTMrReKDqrHzv42VQY0K30PUO8WY13WMOuI+cOdX4EIdzdvQ8k6jkuGRFMYw==",
          "1733: acorn-jsx@^5.3.2:",
          "1738: acorn-node@^1.2.0, acorn-node@^1.3.0, acorn-node@^1.5.2, acorn-node@^1.8.2:",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1724:     acorn-walk \"^7.0.0\"",
          "1725:     xtend \"^4.0.2\"",
          "1728:   version \"7.2.0\"",
          "1729:   resolved \"https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-7.2.0.tgz#0de889a601203909b0fbe07b8938dc21d2e967bc\"",
          "1730:   integrity sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
          "",
          "[Removed Lines]",
          "1727: acorn-walk@^7.0.0, acorn-walk@^7.1.1:",
          "",
          "[Added Lines]",
          "1747: acorn-walk@^7.0.0:",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1732: acorn@^3.1.0:",
          "1733:   version \"3.3.0\"",
          "1734:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-3.3.0.tgz#45e37fb39e8da3f25baee3ff5369e2bb5f22017a\"",
          "1737: acorn@^4.0.4, acorn@~4.0.2:",
          "1738:   version \"4.0.13\"",
          "1739:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-4.0.13.tgz#105495ae5361d697bd195c825192e1ad7f253787\"",
          "1743:   version \"7.4.1\"",
          "1744:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa\"",
          "1745:   integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
          "1748:   version \"8.7.1\"",
          "1749:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-8.7.1.tgz#0197122c843d1bf6d0a5e83220a788f278f63c30\"",
          "1750:   integrity sha512-Xx54uLJQZ19lKygFXOWsscKUbsBZW0CPykPhVQdhIeIwrbPmJzqeASDInc8nKBnp/JT6igTs82qPXz069H8I/A==",
          "1759: ajv@^6.10.0, ajv@^6.12.3, ajv@^6.12.4:",
          "1760:   version \"6.12.6\"",
          "1761:   resolved \"https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4\"",
          "",
          "[Removed Lines]",
          "1735:   integrity sha1-ReN/s56No/JbruP/U2niu18iAXo=",
          "1740:   integrity sha1-EFSVrlNh1pe9GVyCUZLhrX8lN4c=",
          "1742: acorn@^7.0.0, acorn@^7.1.1:",
          "1747: acorn@^8.2.4, acorn@^8.5.0, acorn@^8.7.0:",
          "1752: agent-base@6:",
          "1753:   version \"6.0.2\"",
          "1754:   resolved \"https://registry.yarnpkg.com/agent-base/-/agent-base-6.0.2.tgz#49fff58577cfee3f37176feab4c22e00f86d7f77\"",
          "1755:   integrity sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
          "1756:   dependencies:",
          "1757:     debug \"4\"",
          "",
          "[Added Lines]",
          "1755:   integrity sha512-OLUyIIZ7mF5oaAUT1w0TFqQS81q3saT46x8t7ukpPjMNk+nbs4ZHhs7ToV8EWnLYLepjETXd4XaCE4uxkMeqUw==",
          "1760:   integrity sha512-fu2ygVGuMmlzG8ZeRJ0bvR41nsAkxxhbyk8bZ1SS521Z7vmgJFTQQlfz/Mp/nJexGBz+v8sC9bM6+lNgskt4Ug==",
          "1762: acorn@^7.0.0:",
          "1767: acorn@^8.5.0, acorn@^8.7.1:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1769: align-text@^0.1.1, align-text@^0.1.3:",
          "1770:   version \"0.1.4\"",
          "1771:   resolved \"https://registry.yarnpkg.com/align-text/-/align-text-0.1.4.tgz#0cd90a561093f35d0a99256c22b7069433fad117\"",
          "1773:   dependencies:",
          "1774:     kind-of \"^3.0.2\"",
          "1775:     longest \"^1.0.1\"",
          "",
          "[Removed Lines]",
          "1772:   integrity sha1-DNkKVhCT810KmSVsIrcGlDP60Rc=",
          "",
          "[Added Lines]",
          "1785:   integrity sha512-GrTZLRpmp6wIC2ztrWW9MjjTgSKccffgFagbNDOX95/dcjEcYZibYTeaOntySQLcdw1ztBoFkviiUvTMbb9MYg==",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1792: another-json@^0.2.0:",
          "1793:   version \"0.2.0\"",
          "1794:   resolved \"https://registry.yarnpkg.com/another-json/-/another-json-0.2.0.tgz#b5f4019c973b6dd5c6506a2d93469cb6d32aeedc\"",
          "1797: ansi-escapes@^4.2.1:",
          "1798:   version \"4.3.2\"",
          "",
          "[Removed Lines]",
          "1795:   integrity sha1-tfQBnJc7bdXGUGotk0acttMq7tw=",
          "",
          "[Added Lines]",
          "1808:   integrity sha512-/Ndrl68UQLhnCdsAzEXLMFuOR546o2qbYRqCglaNHbjXrwG1ayTcdwr3zkSGOGtGXDyR5X9nCFfnyG2AFJIsqg==",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1801:   dependencies:",
          "1802:     type-fest \"^0.21.3\"",
          "1805:   version \"5.0.1\"",
          "1806:   resolved \"https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304\"",
          "1807:   integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "",
          "[Removed Lines]",
          "1804: ansi-regex@^5.0.0, ansi-regex@^5.0.1:",
          "",
          "[Added Lines]",
          "1817: ansi-regex@^5.0.1:",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1820:   dependencies:",
          "1821:     color-convert \"^2.0.1\"",
          "1823: any-promise@^1.3.0:",
          "1824:   version \"1.3.0\"",
          "1825:   resolved \"https://registry.yarnpkg.com/any-promise/-/any-promise-1.3.0.tgz#abc6afeedcea52e809cdc0376aed3ce39635d17f\"",
          "1836: anymatch@^3.0.3, anymatch@~3.1.2:",
          "1837:   version \"3.1.2\"",
          "",
          "[Removed Lines]",
          "1826:   integrity sha1-q8av7tzqUugJzcA3au0845Y10X8=",
          "1828: anymatch@^2.0.0:",
          "1829:   version \"2.0.0\"",
          "1830:   resolved \"https://registry.yarnpkg.com/anymatch/-/anymatch-2.0.0.tgz#bcb24b4f37934d9aa7ac17b4adaf89e7c76ef2eb\"",
          "1831:   integrity sha512-5teOsQWABXHHBFP9y3skS5P3d/WfWXpv3FUpy+LorMrNYaT9pI4oLMQX7jzQ2KklNpGpWHzdCXTDT2Y3XGlZBw==",
          "1832:   dependencies:",
          "1833:     micromatch \"^3.1.4\"",
          "1834:     normalize-path \"^2.1.1\"",
          "",
          "[Added Lines]",
          "1836: ansi-styles@^5.0.0:",
          "1837:   version \"5.2.0\"",
          "1838:   resolved \"https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-5.2.0.tgz#07449690ad45777d1924ac2abb2fc8895dba836b\"",
          "1839:   integrity sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
          "1844:   integrity sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1853:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
          "1854:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
          "1871: array-includes@^3.1.4:",
          "1875:   dependencies:",
          "1876:     call-bind \"^1.0.2\"",
          "1879:     get-intrinsic \"^1.1.1\"",
          "1880:     is-string \"^1.0.7\"",
          "",
          "[Removed Lines]",
          "1856: arr-diff@^4.0.0:",
          "1857:   version \"4.0.0\"",
          "1858:   resolved \"https://registry.yarnpkg.com/arr-diff/-/arr-diff-4.0.0.tgz#d6461074febfec71e7e15235761a329a5dc7c520\"",
          "1859:   integrity sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA=",
          "1861: arr-flatten@^1.1.0:",
          "1862:   version \"1.1.0\"",
          "1863:   resolved \"https://registry.yarnpkg.com/arr-flatten/-/arr-flatten-1.1.0.tgz#36048bbff4e7b47e136644316c99669ea5ae91f1\"",
          "1864:   integrity sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==",
          "1866: arr-union@^3.1.0:",
          "1867:   version \"3.1.0\"",
          "1868:   resolved \"https://registry.yarnpkg.com/arr-union/-/arr-union-3.1.0.tgz#e39b09aea9def866a8f206e288af63919bae39c4\"",
          "1869:   integrity sha1-45sJrqne+Gao8gbiiK9jkZuuOcQ=",
          "1872:   version \"3.1.4\"",
          "1873:   resolved \"https://registry.yarnpkg.com/array-includes/-/array-includes-3.1.4.tgz#f5b493162c760f3539631f005ba2bb46acb45ba9\"",
          "1874:   integrity sha512-ZTNSQkmWumEbiHO2GF4GmWxYVTiQyJy2XOTa15sdQSrvKn7l+180egQMqlrMOUMCyLMD7pmyQe4mMDUT6Behrw==",
          "1877:     define-properties \"^1.1.3\"",
          "1878:     es-abstract \"^1.19.1\"",
          "",
          "[Added Lines]",
          "1867:   version \"3.1.5\"",
          "1868:   resolved \"https://registry.yarnpkg.com/array-includes/-/array-includes-3.1.5.tgz#2c320010db8d31031fd2a5f6b3bbd4b1aad31bdb\"",
          "1869:   integrity sha512-iSDYZMMyTPkiFasVqfuAQnWAYcvO/SeBSCGKePoEthjp4LEMTe4uLc7b025o4jAZpHhihh8xPo99TNWUWWkGDQ==",
          "1872:     define-properties \"^1.1.4\"",
          "1873:     es-abstract \"^1.19.5\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1884:   resolved \"https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d\"",
          "1885:   integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
          "1892: array.prototype.flat@^1.2.5:",
          "1893:   version \"1.3.0\"",
          "1894:   resolved \"https://registry.yarnpkg.com/array.prototype.flat/-/array.prototype.flat-1.3.0.tgz#0b0c1567bf57b38b56b4c97b8aa72ab45e4adc7b\"",
          "",
          "[Removed Lines]",
          "1887: array-unique@^0.3.2:",
          "1888:   version \"0.3.2\"",
          "1889:   resolved \"https://registry.yarnpkg.com/array-unique/-/array-unique-0.3.2.tgz#a894b75d4bc4f6cd679ef3244a9fd8f46ae2d428\"",
          "1890:   integrity sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1902: asap@~2.0.3:",
          "1903:   version \"2.0.6\"",
          "1904:   resolved \"https://registry.yarnpkg.com/asap/-/asap-2.0.6.tgz#e50347611d7e690943208bbdafebcbc2fb866d46\"",
          "1907: asn1.js@^5.2.0:",
          "1908:   version \"5.4.1\"",
          "",
          "[Removed Lines]",
          "1905:   integrity sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY=",
          "",
          "[Added Lines]",
          "1895:   integrity sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1924: assert-plus@1.0.0, assert-plus@^1.0.0:",
          "1925:   version \"1.0.0\"",
          "1926:   resolved \"https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525\"",
          "1929: assert@^1.4.0:",
          "1930:   version \"1.5.0\"",
          "",
          "[Removed Lines]",
          "1927:   integrity sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
          "",
          "[Added Lines]",
          "1917:   integrity sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1934:     object-assign \"^4.1.1\"",
          "1935:     util \"0.10.3\"",
          "1942: ast-types@0.12.4, ast-types@^0.12.2:",
          "1943:   version \"0.12.4\"",
          "1944:   resolved \"https://registry.yarnpkg.com/ast-types/-/ast-types-0.12.4.tgz#71ce6383800f24efc9a1a3308f3a6e420a0974d1\"",
          "",
          "[Removed Lines]",
          "1937: assign-symbols@^1.0.0:",
          "1938:   version \"1.0.0\"",
          "1939:   resolved \"https://registry.yarnpkg.com/assign-symbols/-/assign-symbols-1.0.0.tgz#59667f41fadd4f20ccbc2bb96b8d4f7f78ec0367\"",
          "1940:   integrity sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1954: asynckit@^0.4.0:",
          "1955:   version \"0.4.0\"",
          "1956:   resolved \"https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79\"",
          "1964: available-typed-arrays@^1.0.5:",
          "1965:   version \"1.0.5\"",
          "",
          "[Removed Lines]",
          "1957:   integrity sha1-x57Zf380y48robyXkLzDZkdLS3k=",
          "1959: atob@^2.1.2:",
          "1960:   version \"2.1.2\"",
          "1961:   resolved \"https://registry.yarnpkg.com/atob/-/atob-2.1.2.tgz#6d9517eb9e030d2436666651e86bd9f6f13533c9\"",
          "1962:   integrity sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==",
          "",
          "[Added Lines]",
          "1942:   integrity sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1969: aws-sign2@~0.7.0:",
          "1970:   version \"0.7.0\"",
          "1971:   resolved \"https://registry.yarnpkg.com/aws-sign2/-/aws-sign2-0.7.0.tgz#b46e890934a9591f2d2f6f86d7e6a9f1b3fe76a8\"",
          "1974: aws4@^1.8.0:",
          "1975:   version \"1.11.0\"",
          "1976:   resolved \"https://registry.yarnpkg.com/aws4/-/aws4-1.11.0.tgz#d61f46d83b2519250e2784daf5b09479a8b41c59\"",
          "1977:   integrity sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA==",
          "1983:   dependencies:",
          "1989:     chalk \"^4.0.0\"",
          "1991:     slash \"^3.0.0\"",
          "1993: babel-plugin-dynamic-import-node@^2.3.3:",
          "",
          "[Removed Lines]",
          "1972:   integrity sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=",
          "1979: babel-jest@^26.6.3:",
          "1980:   version \"26.6.3\"",
          "1981:   resolved \"https://registry.yarnpkg.com/babel-jest/-/babel-jest-26.6.3.tgz#d87d25cb0037577a0c89f82e5755c5d293c01056\"",
          "1982:   integrity sha512-pl4Q+GAVOHwvjrck6jKjvmGhnO3jHX/xuB9d27f+EJZ/6k+6nMuPjorrYp7s++bKKdANwzElBWnLWaObvTnaZA==",
          "1984:     \"@jest/transform\" \"^26.6.2\"",
          "1985:     \"@jest/types\" \"^26.6.2\"",
          "1986:     \"@types/babel__core\" \"^7.1.7\"",
          "1987:     babel-plugin-istanbul \"^6.0.0\"",
          "1988:     babel-preset-jest \"^26.6.2\"",
          "1990:     graceful-fs \"^4.2.4\"",
          "",
          "[Added Lines]",
          "1952:   integrity sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
          "1959: babel-jest@^28.0.0, babel-jest@^28.1.0:",
          "1960:   version \"28.1.0\"",
          "1961:   resolved \"https://registry.yarnpkg.com/babel-jest/-/babel-jest-28.1.0.tgz#95a67f8e2e7c0042e7b3ad3951b8af41a533b5ea\"",
          "1962:   integrity sha512-zNKk0yhDZ6QUwfxh9k07GII6siNGMJWVUU49gmFj5gfdqDKLqa2RArXOF2CODp4Dr7dLxN2cvAV+667dGJ4b4w==",
          "1964:     \"@jest/transform\" \"^28.1.0\"",
          "1965:     \"@types/babel__core\" \"^7.1.14\"",
          "1966:     babel-plugin-istanbul \"^6.1.1\"",
          "1967:     babel-preset-jest \"^28.0.2\"",
          "1969:     graceful-fs \"^4.2.9\"",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1997:   dependencies:",
          "1998:     object.assign \"^4.1.0\"",
          "2001:   version \"6.1.1\"",
          "2002:   resolved \"https://registry.yarnpkg.com/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz#fa88ec59232fd9b4e36dbbc540a8ec9a9b47da73\"",
          "2003:   integrity sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
          "",
          "[Removed Lines]",
          "2000: babel-plugin-istanbul@^6.0.0:",
          "",
          "[Added Lines]",
          "1979: babel-plugin-istanbul@^6.1.1:",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2008:     istanbul-lib-instrument \"^5.0.4\"",
          "2009:     test-exclude \"^6.0.0\"",
          "2015:   dependencies:",
          "2016:     \"@babel/template\" \"^7.3.3\"",
          "2017:     \"@babel/types\" \"^7.3.3\"",
          "2019:     \"@types/babel__traverse\" \"^7.0.6\"",
          "2021: babel-plugin-polyfill-corejs2@^0.3.0:",
          "",
          "[Removed Lines]",
          "2011: babel-plugin-jest-hoist@^26.6.2:",
          "2012:   version \"26.6.2\"",
          "2013:   resolved \"https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-26.6.2.tgz#8185bd030348d254c6d7dd974355e6a28b21e62d\"",
          "2014:   integrity sha512-PO9t0697lNTmcEHH69mdtYiOIkkOlj9fySqfO3K1eCcdISevLAE0xY59VLLUj0SoiPiTX/JU2CYFpILydUa5Lw==",
          "2018:     \"@types/babel__core\" \"^7.0.0\"",
          "",
          "[Added Lines]",
          "1990: babel-plugin-jest-hoist@^28.0.2:",
          "1991:   version \"28.0.2\"",
          "1992:   resolved \"https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-28.0.2.tgz#9307d03a633be6fc4b1a6bc5c3a87e22bd01dd3b\"",
          "1993:   integrity sha512-Kizhn/ZL+68ZQHxSnHyuvJv8IchXD62KQxV77TBDV/xoBFBOfgRAk97GNs6hXdTTCiVES9nB2I6+7MXXrk5llQ==",
          "1997:     \"@types/babel__core\" \"^7.1.14\"",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2060:     \"@babel/plugin-syntax-optional-chaining\" \"^7.8.3\"",
          "2061:     \"@babel/plugin-syntax-top-level-await\" \"^7.8.3\"",
          "2067:   dependencies:",
          "2069:     babel-preset-current-node-syntax \"^1.0.0\"",
          "2071: babel-runtime@^6.26.0:",
          "2072:   version \"6.26.0\"",
          "2073:   resolved \"https://registry.yarnpkg.com/babel-runtime/-/babel-runtime-6.26.0.tgz#965c7058668e82b55d7bfe04ff2337bc8b5647fe\"",
          "2075:   dependencies:",
          "2076:     core-js \"^2.4.0\"",
          "2077:     regenerator-runtime \"^0.11.0\"",
          "",
          "[Removed Lines]",
          "2063: babel-preset-jest@^26.6.2:",
          "2064:   version \"26.6.2\"",
          "2065:   resolved \"https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-26.6.2.tgz#747872b1171df032252426586881d62d31798fee\"",
          "2066:   integrity sha512-YvdtlVm9t3k777c5NPQIv6cxFFFapys25HiUmuSgHwIZhfifweR5c5Sf5nwE3MAbfu327CYSvps8Yx6ANLyleQ==",
          "2068:     babel-plugin-jest-hoist \"^26.6.2\"",
          "2074:   integrity sha1-llxwWGaOgrVde/4E/yM3vItWR/4=",
          "",
          "[Added Lines]",
          "2042: babel-preset-jest@^28.0.2:",
          "2043:   version \"28.0.2\"",
          "2044:   resolved \"https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-28.0.2.tgz#d8210fe4e46c1017e9fa13d7794b166e93aa9f89\"",
          "2045:   integrity sha512-sYzXIdgIXXroJTFeB3S6sNDWtlJ2dllCdTEsnZ65ACrMojj3hVNFRmnJ1HZtomGi+Be7aqpY/HJ92fr8OhKVkQ==",
          "2047:     babel-plugin-jest-hoist \"^28.0.2\"",
          "2053:   integrity sha512-ITKNuq2wKlW1fJg9sSW52eepoYgZBggvOAHC0u/CYu/qxQ9EVzThCgR69BnSXLHjy2f7SY5zaQ4yt7H9ZVxY2g==",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2079: babel-types@^6.26.0:",
          "2080:   version \"6.26.0\"",
          "2081:   resolved \"https://registry.yarnpkg.com/babel-types/-/babel-types-6.26.0.tgz#a3b073f94ab49eb6fa55cd65227a334380632497\"",
          "2083:   dependencies:",
          "2084:     babel-runtime \"^6.26.0\"",
          "2085:     esutils \"^2.0.2\"",
          "",
          "[Removed Lines]",
          "2082:   integrity sha1-o7Bz+Uq0nrb6Vc1lInozQ4BjJJc=",
          "",
          "[Added Lines]",
          "2061:   integrity sha512-zhe3V/26rCWsEZK8kZN+HaQj5yQ1CilTObixFzKW1UWjqG7618Twz6YEsCnjfg5gBcJh02DrpCkS9h98ZqDY+g==",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2118:   resolved \"https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a\"",
          "2119:   integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
          "2134: bcrypt-pbkdf@^1.0.0:",
          "2135:   version \"1.0.2\"",
          "2136:   resolved \"https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e\"",
          "2138:   dependencies:",
          "2139:     tweetnacl \"^0.14.3\"",
          "",
          "[Removed Lines]",
          "2121: base@^0.11.1:",
          "2122:   version \"0.11.2\"",
          "2123:   resolved \"https://registry.yarnpkg.com/base/-/base-0.11.2.tgz#7bde5ced145b6d551a90db87f83c558b4eb48a8f\"",
          "2124:   integrity sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==",
          "2125:   dependencies:",
          "2126:     cache-base \"^1.0.1\"",
          "2127:     class-utils \"^0.3.5\"",
          "2128:     component-emitter \"^1.2.1\"",
          "2129:     define-property \"^1.0.0\"",
          "2130:     isobject \"^3.0.1\"",
          "2131:     mixin-deep \"^1.2.0\"",
          "2132:     pascalcase \"^0.1.1\"",
          "2137:   integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
          "",
          "[Added Lines]",
          "2103:   integrity sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2162:   resolved \"https://registry.yarnpkg.com/binary-extensions/-/binary-extensions-2.2.0.tgz#75f502eeaf9ffde42fc98829645be4ea76bd9e2d\"",
          "2163:   integrity sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
          "2166:   version \"3.7.2\"",
          "2167:   resolved \"https://registry.yarnpkg.com/bluebird/-/bluebird-3.7.2.tgz#9f229c15be272454ffa973ace0dbee79a1b0c36f\"",
          "2168:   integrity sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
          "",
          "[Removed Lines]",
          "2165: bluebird@^3.5.0, bluebird@^3.7.2:",
          "",
          "[Added Lines]",
          "2131: bluebird@^3.7.2:",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2173:   integrity sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==",
          "2175: bn.js@^5.0.0, bn.js@^5.1.1:",
          "2180: brace-expansion@^1.1.7:",
          "2181:   version \"1.1.11\"",
          "",
          "[Removed Lines]",
          "2176:   version \"5.2.0\"",
          "2177:   resolved \"https://registry.yarnpkg.com/bn.js/-/bn.js-5.2.0.tgz#358860674396c6997771a9d051fcc1b57d4ae002\"",
          "2178:   integrity sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw==",
          "",
          "[Added Lines]",
          "2142:   version \"5.2.1\"",
          "2143:   resolved \"https://registry.yarnpkg.com/bn.js/-/bn.js-5.2.1.tgz#0bc527a6a0d18d0aa8d5b0538ce4a77dccfa7b70\"",
          "2144:   integrity sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2188: brace@^0.11.0, brace@^0.11.1:",
          "2189:   version \"0.11.1\"",
          "2190:   resolved \"https://registry.yarnpkg.com/brace/-/brace-0.11.1.tgz#4896fcc9d544eef45f4bb7660db320d3b379fe58\"",
          "2209: braces@^3.0.2, braces@~3.0.2:",
          "2210:   version \"3.0.2\"",
          "",
          "[Removed Lines]",
          "2191:   integrity sha1-SJb8ydVE7vRfS7dmDbMg07N5/lg=",
          "2193: braces@^2.3.1:",
          "2194:   version \"2.3.2\"",
          "2195:   resolved \"https://registry.yarnpkg.com/braces/-/braces-2.3.2.tgz#5979fd3f14cd531565e5fa2df1abfff1dfaee729\"",
          "2196:   integrity sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==",
          "2197:   dependencies:",
          "2198:     arr-flatten \"^1.1.0\"",
          "2199:     array-unique \"^0.3.2\"",
          "2200:     extend-shallow \"^2.0.1\"",
          "2201:     fill-range \"^4.0.0\"",
          "2202:     isobject \"^3.0.1\"",
          "2203:     repeat-element \"^1.1.2\"",
          "2204:     snapdragon \"^0.8.1\"",
          "2205:     snapdragon-node \"^2.0.1\"",
          "2206:     split-string \"^3.0.2\"",
          "2207:     to-regex \"^3.0.1\"",
          "",
          "[Added Lines]",
          "2157:   integrity sha512-Fc8Ne62jJlKHiG/ajlonC4Sd66Pq68fFwK4ihJGNZpGqboc324SQk+lRvMzpPRuJOmfrJefdG8/7JdWX4bzJ2Q==",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2216: brorand@^1.0.1, brorand@^1.1.0:",
          "2217:   version \"1.1.0\"",
          "2218:   resolved \"https://registry.yarnpkg.com/brorand/-/brorand-1.1.0.tgz#12c25efe40a45e3c323eb8675a0a0ce57b22371f\"",
          "2221: browser-pack@^6.0.1:",
          "2222:   version \"6.1.0\"",
          "",
          "[Removed Lines]",
          "2219:   integrity sha1-EsJe/kCkXjwyPrhnWgoM5XsiNx8=",
          "",
          "[Added Lines]",
          "2169:   integrity sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2230:     through2 \"^2.0.0\"",
          "2231:     umd \"^3.0.0\"",
          "2238: browser-request@^0.3.3:",
          "2239:   version \"0.3.3\"",
          "2240:   resolved \"https://registry.yarnpkg.com/browser-request/-/browser-request-0.3.3.tgz#9ece5b5aca89a29932242e18bf933def9876cc17\"",
          "2243: browser-resolve@^2.0.0:",
          "2244:   version \"2.0.0\"",
          "",
          "[Removed Lines]",
          "2233: browser-process-hrtime@^1.0.0:",
          "2234:   version \"1.0.0\"",
          "2235:   resolved \"https://registry.yarnpkg.com/browser-process-hrtime/-/browser-process-hrtime-1.0.0.tgz#3c9b4b7d782c8121e56f10106d84c0d0ffc94626\"",
          "2236:   integrity sha512-9o5UecI3GhkpM6DrXr69PblIuWxPKk9Y0jHBRhdocZ2y7YECBFCsHm79Pr3OyR2AvjhDkabFJaDJMYRazHgsow==",
          "2241:   integrity sha1-ns5bWsqJopkyJC4Yv5M975h2zBc=",
          "",
          "[Added Lines]",
          "2186:   integrity sha512-YyNI4qJJ+piQG6MMEuo7J3Bzaqssufx04zpEKYfSrl/1Op59HWali9zMtBpXnkmqMcOuWJPZvudrm9wISmnCbg==",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2376: bs58@^4.0.1:",
          "2377:   version \"4.0.1\"",
          "2378:   resolved \"https://registry.yarnpkg.com/bs58/-/bs58-4.0.1.tgz#be161e76c354f6f788ae4071f63f34e8c4f0a42a\"",
          "2380:   dependencies:",
          "2381:     base-x \"^3.0.2\"",
          "",
          "[Removed Lines]",
          "2379:   integrity sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
          "",
          "[Added Lines]",
          "2324:   integrity sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2395: buffer-xor@^1.0.3:",
          "2396:   version \"1.0.3\"",
          "2397:   resolved \"https://registry.yarnpkg.com/buffer-xor/-/buffer-xor-1.0.3.tgz#26e61ed1422fb70dd42e6e36729ed51d855fe8d9\"",
          "2400: buffer@~5.2.1:",
          "2401:   version \"5.2.1\"",
          "",
          "[Removed Lines]",
          "2398:   integrity sha1-JuYe0UIvtw3ULm42cp7VHYVf6Nk=",
          "",
          "[Added Lines]",
          "2343:   integrity sha512-571s0T7nZWK6vB67HI5dyUF7wXiNcfaPPPTl6zYCNApANjIvYJTg7hlud/+cJpdAhS7dVzqMLmfhfHR3rAcOjQ==",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2408: builtin-status-codes@^3.0.0:",
          "2409:   version \"3.0.0\"",
          "2410:   resolved \"https://registry.yarnpkg.com/builtin-status-codes/-/builtin-status-codes-3.0.0.tgz#85982878e21b98e1c66425e03d0174788f569ee8\"",
          "2413: c8@^7.6.0:",
          "2417:   dependencies:",
          "2418:     \"@bcoe/v8-coverage\" \"^0.2.3\"",
          "2419:     \"@istanbuljs/schema\" \"^0.1.3\"",
          "",
          "[Removed Lines]",
          "2411:   integrity sha1-hZgoeOIbmOHGZCXgPQF0eI9Wnug=",
          "2414:   version \"7.11.2\"",
          "2415:   resolved \"https://registry.yarnpkg.com/c8/-/c8-7.11.2.tgz#2f2103e39079899041e612999a16b31d7ea6d463\"",
          "2416:   integrity sha512-6ahJSrhS6TqSghHm+HnWt/8Y2+z0hM/FQyB1ybKhAR30+NYL9CTQ1uwHxuWw6U7BHlHv6wvhgOrH81I+lfCkxg==",
          "",
          "[Added Lines]",
          "2356:   integrity sha512-HpGFw18DgFWlncDfjTa2rcQ4W88O1mC8e8yZ2AvQY5KDaktSTwo+KRf6nHK6FRI5FyRyb/5T6+TSxfP7QyGsmQ==",
          "2359:   version \"7.11.3\"",
          "2360:   resolved \"https://registry.yarnpkg.com/c8/-/c8-7.11.3.tgz#88c8459c1952ed4f701b619493c9ae732b057163\"",
          "2361:   integrity sha512-6YBmsaNmqRm9OS3ZbIiL2EZgi1+Xc4O24jL3vMYGE6idixYuGdy76rIfIdltSKDj9DpLNrcXSonUTR1miBD0wA==",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2428:     yargs \"^16.2.0\"",
          "2429:     yargs-parser \"^20.2.9\"",
          "2446: cached-path-relative@^1.0.0, cached-path-relative@^1.0.2:",
          "2447:   version \"1.1.0\"",
          "2448:   resolved \"https://registry.yarnpkg.com/cached-path-relative/-/cached-path-relative-1.1.0.tgz#865576dfef39c0d6a7defde794d078f5308e3ef3\"",
          "",
          "[Removed Lines]",
          "2431: cache-base@^1.0.1:",
          "2432:   version \"1.0.1\"",
          "2433:   resolved \"https://registry.yarnpkg.com/cache-base/-/cache-base-1.0.1.tgz#0a7f46416831c8b662ee36fe4e7c59d76f666ab2\"",
          "2434:   integrity sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==",
          "2435:   dependencies:",
          "2436:     collection-visit \"^1.0.0\"",
          "2437:     component-emitter \"^1.2.1\"",
          "2438:     get-value \"^2.0.6\"",
          "2439:     has-value \"^1.0.0\"",
          "2440:     isobject \"^3.0.1\"",
          "2441:     set-value \"^2.0.0\"",
          "2442:     to-object-path \"^0.3.0\"",
          "2443:     union-value \"^1.0.0\"",
          "2444:     unset-value \"^1.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2464: camelcase@^1.0.2:",
          "2465:   version \"1.2.1\"",
          "2466:   resolved \"https://registry.yarnpkg.com/camelcase/-/camelcase-1.2.1.tgz#9bb5304d2e0b56698b2c758b08a3eaa9daa58a39\"",
          "2470:   version \"5.3.1\"",
          "2471:   resolved \"https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320\"",
          "2472:   integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
          "2475:   version \"6.3.0\"",
          "2476:   resolved \"https://registry.yarnpkg.com/camelcase/-/camelcase-6.3.0.tgz#5685b95eb209ac9c0c177467778c9c84df58ba9a\"",
          "2477:   integrity sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
          "2479: caniuse-lite@^1.0.30001332:",
          "2491: caseless@~0.12.0:",
          "2492:   version \"0.12.0\"",
          "2493:   resolved \"https://registry.yarnpkg.com/caseless/-/caseless-0.12.0.tgz#1b681c21ff84033c826543090689420d187151dc\"",
          "2496: catharsis@^0.9.0:",
          "2497:   version \"0.9.0\"",
          "",
          "[Removed Lines]",
          "2467:   integrity sha1-m7UwTS4LVmmLLHWLCKPqqdqlijk=",
          "2469: camelcase@^5.0.0, camelcase@^5.3.1:",
          "2474: camelcase@^6.0.0:",
          "2480:   version \"1.0.30001335\"",
          "2481:   resolved \"https://registry.yarnpkg.com/caniuse-lite/-/caniuse-lite-1.0.30001335.tgz#899254a0b70579e5a957c32dced79f0727c61f2a\"",
          "2482:   integrity sha512-ddP1Tgm7z2iIxu6QTtbZUv6HJxSaV/PZeSrWFZtbY4JZ69tOeNhBCl3HyRQgeNZKE5AOn1kpV7fhljigy0Ty3w==",
          "2484: capture-exit@^2.0.0:",
          "2485:   version \"2.0.0\"",
          "2486:   resolved \"https://registry.yarnpkg.com/capture-exit/-/capture-exit-2.0.0.tgz#fb953bfaebeb781f62898239dabb426d08a509a4\"",
          "2487:   integrity sha512-PiT/hQmTonHhl/HFGN+Lx3JJUznrVYJ3+AQsnthneZbvW7x+f08Tk7yLJTLEOUvBTbduLeeBkxEaYXUOUrRq6g==",
          "2488:   dependencies:",
          "2489:     rsvp \"^4.8.4\"",
          "2494:   integrity sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=",
          "",
          "[Added Lines]",
          "2397:   integrity sha512-wzLkDa4K/mzI1OSITC+DUyjgIl/ETNHE9QvYgy6J6Jvqyyz4C0Xfd+lQhb19sX2jMpZV4IssUn0VDVmglV+s4g==",
          "2399: camelcase@^5.3.1:",
          "2404: camelcase@^6.2.0:",
          "2410:   version \"1.0.30001344\"",
          "2411:   resolved \"https://registry.yarnpkg.com/caniuse-lite/-/caniuse-lite-1.0.30001344.tgz#8a1e7fdc4db9c2ec79a05e9fd68eb93a761888bb\"",
          "2412:   integrity sha512-0ZFjnlCaXNOAYcV7i+TtdKBp0L/3XEU2MF/x6Du1lrh+SRX4IfzIVL4HNJg5pB2PmFb8rszIGyOvsZnqqRoc2g==",
          "2417:   integrity sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw==",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2503: center-align@^0.1.1:",
          "2504:   version \"0.1.3\"",
          "2505:   resolved \"https://registry.yarnpkg.com/center-align/-/center-align-0.1.3.tgz#aa0d32629b6ee972200411cbd4461c907bc2b7ad\"",
          "2507:   dependencies:",
          "2508:     align-text \"^0.1.3\"",
          "2509:     lazy-cache \"^1.0.3\"",
          "",
          "[Removed Lines]",
          "2506:   integrity sha1-qg0yYptu6XIgBBHL1EYckHvCt60=",
          "",
          "[Added Lines]",
          "2429:   integrity sha512-Baz3aNe2gd2LP2qk5U+sDk/m4oSuwSDcBfayTCTBoWpfIGO5XFxPmjILQII4NGiZjD6DoDI6kf7gKaxkf7s3VQ==",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2533: character-parser@^2.1.1:",
          "2534:   version \"2.2.0\"",
          "2535:   resolved \"https://registry.yarnpkg.com/character-parser/-/character-parser-2.2.0.tgz#c7ce28f36d4bcd9744e5ffc2c5fcde1c73261fc0\"",
          "2537:   dependencies:",
          "2538:     is-regex \"^1.0.3\"",
          "",
          "[Removed Lines]",
          "2536:   integrity sha1-x84o821LzZdE5f/CxfzeHHMmH8A=",
          "",
          "[Added Lines]",
          "2459:   integrity sha512-+UqJQjFEFaTAs3bNsF2j2kEN1baG/zghZbdqoYEDxGZtJo9LBzl1A+m0D4n3qKx8N2FNv8/Xp6yV9mQmBuptaw==",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2552:   optionalDependencies:",
          "2553:     fsevents \"~2.3.2\"",
          "2560: cipher-base@^1.0.0, cipher-base@^1.0.1, cipher-base@^1.0.3:",
          "2561:   version \"1.0.4\"",
          "",
          "[Removed Lines]",
          "2555: ci-info@^2.0.0:",
          "2556:   version \"2.0.0\"",
          "2557:   resolved \"https://registry.yarnpkg.com/ci-info/-/ci-info-2.0.0.tgz#67a9e964be31a51e15e5010d58e6f12834002f46\"",
          "2558:   integrity sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==",
          "",
          "[Added Lines]",
          "2478: ci-info@^3.2.0:",
          "2479:   version \"3.3.1\"",
          "2480:   resolved \"https://registry.yarnpkg.com/ci-info/-/ci-info-3.3.1.tgz#58331f6f472a25fe3a50a351ae3052936c2c7f32\"",
          "2481:   integrity sha512-SXgeMX9VwDe7iFFaEWkA5AstuER9YKqy4EhHqr4DVqkwmD9rpVimkMKWHdjn30Ja45txyjhSn63lVX69eVCckg==",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2565:     inherits \"^2.0.1\"",
          "2566:     safe-buffer \"^5.0.1\"",
          "2583: clean-css@^4.1.11:",
          "2584:   version \"4.2.4\"",
          "",
          "[Removed Lines]",
          "2568: cjs-module-lexer@^0.6.0:",
          "2569:   version \"0.6.0\"",
          "2570:   resolved \"https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-0.6.0.tgz#4186fcca0eae175970aee870b9fe2d6cf8d5655f\"",
          "2571:   integrity sha512-uc2Vix1frTfnuzxxu1Hp4ktSvM3QaI4oXl4ZUqL1wjTu/BGki9TrCWoqLTg/drR1KwAEarXuRFCG2Svr1GxPFw==",
          "2573: class-utils@^0.3.5:",
          "2574:   version \"0.3.6\"",
          "2575:   resolved \"https://registry.yarnpkg.com/class-utils/-/class-utils-0.3.6.tgz#f93369ae8b9a7ce02fd41faad0ca83033190c463\"",
          "2576:   integrity sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==",
          "2577:   dependencies:",
          "2578:     arr-union \"^3.1.0\"",
          "2579:     define-property \"^0.2.5\"",
          "2580:     isobject \"^3.0.0\"",
          "2581:     static-extend \"^0.1.1\"",
          "",
          "[Added Lines]",
          "2491: cjs-module-lexer@^1.0.0:",
          "2492:   version \"1.2.2\"",
          "2493:   resolved \"https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-1.2.2.tgz#9f84ba3244a512f3a54e5277e8eef4c489864e40\"",
          "2494:   integrity sha512-cOU9usZw8/dXIXKtwa8pM0OTJQuJkxMN6w30csNRUerHfeQ5R6U3kkU/FtJeIf3M202OHfY2U8ccInBG7/xogA==",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2601: cliui@^2.1.0:",
          "2602:   version \"2.1.0\"",
          "2603:   resolved \"https://registry.yarnpkg.com/cliui/-/cliui-2.1.0.tgz#4b475760ff80264c762c3a1719032e91c7fea0d1\"",
          "2605:   dependencies:",
          "2606:     center-align \"^0.1.1\"",
          "2607:     right-align \"^0.1.1\"",
          "2608:     wordwrap \"0.0.2\"",
          "2619: cliui@^7.0.2:",
          "2620:   version \"7.0.4\"",
          "2621:   resolved \"https://registry.yarnpkg.com/cliui/-/cliui-7.0.4.tgz#a0265ee655476fc807aea9df3df8df7783808b4f\"",
          "",
          "[Removed Lines]",
          "2604:   integrity sha1-S0dXYP+AJkx2LDoXGQMukcf+oNE=",
          "2610: cliui@^6.0.0:",
          "2611:   version \"6.0.0\"",
          "2612:   resolved \"https://registry.yarnpkg.com/cliui/-/cliui-6.0.0.tgz#511d702c0c4e41ca156d7d0e96021f23e13225b1\"",
          "2613:   integrity sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
          "2614:   dependencies:",
          "2615:     string-width \"^4.2.0\"",
          "2616:     strip-ansi \"^6.0.0\"",
          "2617:     wrap-ansi \"^6.2.0\"",
          "",
          "[Added Lines]",
          "2517:   integrity sha512-GIOYRizG+TGoc7Wgc1LiOTLare95R3mzKgoln+Q/lE4ceiYH19gUpl0l0Ffq4lJDEf3FxujMe6IBfOCs7pfqNA==",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2637: co@^4.6.0:",
          "2638:   version \"4.6.0\"",
          "2639:   resolved \"https://registry.yarnpkg.com/co/-/co-4.6.0.tgz#6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184\"",
          "2642: collect-v8-coverage@^1.0.0:",
          "2643:   version \"1.0.1\"",
          "2644:   resolved \"https://registry.yarnpkg.com/collect-v8-coverage/-/collect-v8-coverage-1.0.1.tgz#cc2c8e94fc18bbdffe64d6534570c8a673b27f59\"",
          "2645:   integrity sha512-iBPtljfCNcTKNAto0KEtDfZ3qzjJvqE3aTGZsbhjSBlorqpXJlaWWtPO35D+ZImoC3KWejX64o+yPGxhWSTzfg==",
          "2655: color-convert@^1.9.0:",
          "2656:   version \"1.9.3\"",
          "2657:   resolved \"https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8\"",
          "",
          "[Removed Lines]",
          "2640:   integrity sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=",
          "2647: collection-visit@^1.0.0:",
          "2648:   version \"1.0.0\"",
          "2649:   resolved \"https://registry.yarnpkg.com/collection-visit/-/collection-visit-1.0.0.tgz#4bc0373c164bc3291b4d368c829cf1a80a59dca0\"",
          "2650:   integrity sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=",
          "2651:   dependencies:",
          "2652:     map-visit \"^1.0.0\"",
          "2653:     object-visit \"^1.0.0\"",
          "",
          "[Added Lines]",
          "2544:   integrity sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2669: color-name@1.1.3:",
          "2670:   version \"1.1.3\"",
          "2671:   resolved \"https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25\"",
          "2674: color-name@~1.1.4:",
          "2675:   version \"1.1.4\"",
          "",
          "[Removed Lines]",
          "2672:   integrity sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
          "",
          "[Added Lines]",
          "2568:   integrity sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2679: combine-source-map@^0.8.0, combine-source-map@~0.8.0:",
          "2680:   version \"0.8.0\"",
          "2681:   resolved \"https://registry.yarnpkg.com/combine-source-map/-/combine-source-map-0.8.0.tgz#a58d0df042c186fcf822a8e8015f5450d2d79a8b\"",
          "2683:   dependencies:",
          "2684:     convert-source-map \"~1.1.0\"",
          "2685:     inline-source-map \"~0.6.0\"",
          "2686:     lodash.memoize \"~3.0.3\"",
          "2687:     source-map \"~0.5.3\"",
          "2690:   version \"1.0.8\"",
          "2691:   resolved \"https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f\"",
          "2692:   integrity sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
          "",
          "[Removed Lines]",
          "2682:   integrity sha1-pY0N8ELBhvz4IqjoAV9UUNLXmos=",
          "2689: combined-stream@^1.0.6, combined-stream@^1.0.8, combined-stream@~1.0.6:",
          "",
          "[Added Lines]",
          "2578:   integrity sha512-UlxQ9Vw0b/Bt/KYwCFqdEwsQ1eL8d1gibiFb7lxQJFdvTgc2hIZi6ugsg+kyhzhPV+QEpUiEIwInIAIrgoEkrg==",
          "2585: combined-stream@^1.0.6, combined-stream@~1.0.6:",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2706: commondir@^1.0.1:",
          "2707:   version \"1.0.1\"",
          "2708:   resolved \"https://registry.yarnpkg.com/commondir/-/commondir-1.0.1.tgz#ddd800da0c66127393cca5950ea968a3aaf1253b\"",
          "2716: concat-map@0.0.1:",
          "2717:   version \"0.0.1\"",
          "2718:   resolved \"https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b\"",
          "2721: concat-stream@^1.6.0, concat-stream@^1.6.1, concat-stream@~1.6.0:",
          "2722:   version \"1.6.2\"",
          "",
          "[Removed Lines]",
          "2709:   integrity sha1-3dgA2gxmEnOTzKWVDqloo6rxJTs=",
          "2711: component-emitter@^1.2.1:",
          "2712:   version \"1.3.0\"",
          "2713:   resolved \"https://registry.yarnpkg.com/component-emitter/-/component-emitter-1.3.0.tgz#16e4070fba8ae29b679f2215853ee181ab2eabc0\"",
          "2714:   integrity sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
          "2719:   integrity sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
          "",
          "[Added Lines]",
          "2605:   integrity sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
          "2610:   integrity sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2746: constants-browserify@~1.0.0:",
          "2747:   version \"1.0.0\"",
          "2748:   resolved \"https://registry.yarnpkg.com/constants-browserify/-/constants-browserify-1.0.0.tgz#c20b96d8c617748aaf1c16021760cd27fcb8cb75\"",
          "2751: content-type@^1.0.4:",
          "2752:   version \"1.0.4\"",
          "",
          "[Removed Lines]",
          "2749:   integrity sha1-wguW2MYXdIqvHBYCF2DNJ/y4y3U=",
          "",
          "[Added Lines]",
          "2640:   integrity sha512-xFxOwqIzR/e1k1gLiWEophSCMqXcwVHIH7akf7b/vxcUeGunlj3hvZaaqxwHsTgn+IndtkQJgSztIDWeumWJDQ==",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2763: convert-source-map@~1.1.0:",
          "2764:   version \"1.1.3\"",
          "2765:   resolved \"https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.1.3.tgz#4829c877e9fe49b3161f3bf3673888e204699860\"",
          "2773: core-js-compat@^3.21.0, core-js-compat@^3.22.1:",
          "2777:   dependencies:",
          "2778:     browserslist \"^4.20.3\"",
          "2779:     semver \"7.0.0\"",
          "",
          "[Removed Lines]",
          "2766:   integrity sha1-SCnId+n+SbMWHzvzZziI4gRpmGA=",
          "2768: copy-descriptor@^0.1.0:",
          "2769:   version \"0.1.1\"",
          "2770:   resolved \"https://registry.yarnpkg.com/copy-descriptor/-/copy-descriptor-0.1.1.tgz#676f6eb3c39997c2ee1ac3a924fd6124748f578d\"",
          "2771:   integrity sha1-Z29us8OZl8LuGsOpJP1hJHSPV40=",
          "2774:   version \"3.22.4\"",
          "2775:   resolved \"https://registry.yarnpkg.com/core-js-compat/-/core-js-compat-3.22.4.tgz#d700f451e50f1d7672dcad0ac85d910e6691e579\"",
          "2776:   integrity sha512-dIWcsszDezkFZrfm1cnB4f/J85gyhiCpxbgBdohWCDtSVuAaChTSpPV7ldOQf/Xds2U5xCIJZOK82G4ZPAIswA==",
          "",
          "[Added Lines]",
          "2657:   integrity sha512-Y8L5rp6jo+g9VEPgvqNfEopjTR4OTYct8lXlS8iVQdmnjDvbdbzYe9rjtFCB9egC86JoNCU61WRY+ScjkZpnIg==",
          "2660:   version \"3.22.7\"",
          "2661:   resolved \"https://registry.yarnpkg.com/core-js-compat/-/core-js-compat-3.22.7.tgz#8359eb66ecbf726dd0cfced8e48d5e73f3224239\"",
          "2662:   integrity sha512-uI9DAQKKiiE/mclIC5g4AjRpio27g+VMRhe6rQoz+q4Wm4L6A/fJhiLtBw+sfOpDG9wZ3O0pxIw7GbfOlBgjOA==",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2784:   integrity sha512-Kb2wC0fvsWfQrgk8HU5lW6U/Lcs8+9aaYcy4ZFc6DDlo4nZ7n70dEgE5rtR0oG6ufKDUnrwfWL1mXR5ljDatrQ==",
          "2786: core-js@^3.4:",
          "2791: core-util-is@1.0.2:",
          "2792:   version \"1.0.2\"",
          "2793:   resolved \"https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7\"",
          "2796: core-util-is@~1.0.0:",
          "2797:   version \"1.0.3\"",
          "",
          "[Removed Lines]",
          "2787:   version \"3.22.4\"",
          "2788:   resolved \"https://registry.yarnpkg.com/core-js/-/core-js-3.22.4.tgz#f4b3f108d45736935aa028444a69397e40d8c531\"",
          "2789:   integrity sha512-1uLykR+iOfYja+6Jn/57743gc9n73EWiOnSJJ4ba3B4fOEYDBv25MagmEZBxTp5cWq4b/KPx/l77zgsp28ju4w==",
          "2794:   integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
          "",
          "[Added Lines]",
          "2673:   version \"3.22.7\"",
          "2674:   resolved \"https://registry.yarnpkg.com/core-js/-/core-js-3.22.7.tgz#8d6c37f630f6139b8732d10f2c114c3f1d00024f\"",
          "2675:   integrity sha512-Jt8SReuDKVNZnZEzyEQT5eK6T2RRCXkfTq7Lo09kpm+fHjgGewSbNjV+Wt4yZMhPDdzz2x1ulI5z/w4nxpBseg==",
          "2680:   integrity sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ==",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2829:     safe-buffer \"^5.0.1\"",
          "2830:     sha.js \"^2.4.8\"",
          "2844:   version \"7.0.3\"",
          "2845:   resolved \"https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.3.tgz#f73a85b9d5d41d045551c177e2882d4ac85728a6\"",
          "2846:   integrity sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
          "",
          "[Removed Lines]",
          "2832: cross-spawn@^6.0.0:",
          "2833:   version \"6.0.5\"",
          "2834:   resolved \"https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-6.0.5.tgz#4a5ec7c64dfae22c3a14124dbacdee846d80cbc4\"",
          "2835:   integrity sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
          "2836:   dependencies:",
          "2837:     nice-try \"^1.0.4\"",
          "2838:     path-key \"^2.0.1\"",
          "2839:     semver \"^5.5.0\"",
          "2840:     shebang-command \"^1.2.0\"",
          "2841:     which \"^1.2.9\"",
          "2843: cross-spawn@^7.0.0, cross-spawn@^7.0.2:",
          "",
          "[Added Lines]",
          "2718: cross-spawn@^7.0.0, cross-spawn@^7.0.2, cross-spawn@^7.0.3:",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2866:     randombytes \"^2.0.0\"",
          "2867:     randomfill \"^1.0.3\"",
          "2886: d@1, d@^1.0.1:",
          "2887:   version \"1.0.1\"",
          "2888:   resolved \"https://registry.yarnpkg.com/d/-/d-1.0.1.tgz#8698095372d58dbee346ffd0c7093f99f8f9eb5a\"",
          "",
          "[Removed Lines]",
          "2869: cssom@^0.4.4:",
          "2870:   version \"0.4.4\"",
          "2871:   resolved \"https://registry.yarnpkg.com/cssom/-/cssom-0.4.4.tgz#5a66cf93d2d0b661d80bf6a44fb65f5c2e4e0a10\"",
          "2872:   integrity sha512-p3pvU7r1MyyqbTk+WbNJIgJjG2VmTIaB10rI93LzVPrmDJKkzKYMtxxyAvQXR/NS6otuzveI7+7BBq3SjBS2mw==",
          "2874: cssom@~0.3.6:",
          "2875:   version \"0.3.8\"",
          "2876:   resolved \"https://registry.yarnpkg.com/cssom/-/cssom-0.3.8.tgz#9f1276f5b2b463f2114d3f2c75250af8c1a36f4a\"",
          "2877:   integrity sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==",
          "2879: cssstyle@^2.3.0:",
          "2880:   version \"2.3.0\"",
          "2881:   resolved \"https://registry.yarnpkg.com/cssstyle/-/cssstyle-2.3.0.tgz#ff665a0ddbdc31864b09647f34163443d90b0852\"",
          "2882:   integrity sha512-AZL67abkUzIuvcHqk7c09cezpGNcxUxU4Ioi/05xHk4DQeTkWmGYftIE6ctU6AEt+Gn4n1lDStOtj7FKycP71A==",
          "2883:   dependencies:",
          "2884:     cssom \"~0.3.6\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2899: dashdash@^1.12.0:",
          "2900:   version \"1.14.1\"",
          "2901:   resolved \"https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0\"",
          "2903:   dependencies:",
          "2904:     assert-plus \"^1.0.0\"",
          "2915: de-indent@^1.0.2:",
          "2916:   version \"1.0.2\"",
          "2917:   resolved \"https://registry.yarnpkg.com/de-indent/-/de-indent-1.0.2.tgz#b2038e846dc33baa5796128d0804b455b8c1e21d\"",
          "2928:   version \"2.6.9\"",
          "2929:   resolved \"https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f\"",
          "2930:   integrity sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "",
          "[Removed Lines]",
          "2902:   integrity sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
          "2906: data-urls@^2.0.0:",
          "2907:   version \"2.0.0\"",
          "2908:   resolved \"https://registry.yarnpkg.com/data-urls/-/data-urls-2.0.0.tgz#156485a72963a970f5d5821aaf642bef2bf2db9b\"",
          "2909:   integrity sha512-X5eWTSXO/BJmpdIKCRuKUgSCgAN0OwliVK3yPKbwIWU1Tdw5BRajxlzMidvh+gwko9AfQ9zIj52pzF91Q3YAvQ==",
          "2910:   dependencies:",
          "2911:     abab \"^2.0.3\"",
          "2912:     whatwg-mimetype \"^2.3.0\"",
          "2913:     whatwg-url \"^8.0.0\"",
          "2918:   integrity sha1-sgOOhG3DO6pXlhKNCAS0VbjB4h0=",
          "2920: debug@4, debug@^4.1.0, debug@^4.1.1, debug@^4.3.2:",
          "2921:   version \"4.3.4\"",
          "2922:   resolved \"https://registry.yarnpkg.com/debug/-/debug-4.3.4.tgz#1319f6579357f2338d3337d2cdd4914bb5dcc865\"",
          "2923:   integrity sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "2924:   dependencies:",
          "2925:     ms \"2.1.2\"",
          "2927: debug@^2.2.0, debug@^2.3.3, debug@^2.6.9:",
          "",
          "[Added Lines]",
          "2760:   integrity sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
          "2767:   integrity sha512-e/1zu3xH5MQryN2zdVaF0OrdNLUbvWxzMbi+iNA6Bky7l1RoP8a2fIbRocyHclXt/arDrrR6lL3TqFD9pMQTsg==",
          "2769: debug@^2.6.9:",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2938:   dependencies:",
          "2939:     ms \"^2.1.1\"",
          "2942:   version \"1.2.0\"",
          "2943:   resolved \"https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290\"",
          "2957:   version \"0.1.4\"",
          "2958:   resolved \"https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.4.tgz#a6f2dce612fadd2ef1f519b73551f17e85199831\"",
          "2959:   integrity sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
          "",
          "[Removed Lines]",
          "2941: decamelize@^1.0.0, decamelize@^1.2.0:",
          "2944:   integrity sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=",
          "2946: decimal.js@^10.2.1:",
          "2947:   version \"10.3.1\"",
          "2948:   resolved \"https://registry.yarnpkg.com/decimal.js/-/decimal.js-10.3.1.tgz#d8c3a444a9c6774ba60ca6ad7261c3a94fd5e783\"",
          "2949:   integrity sha512-V0pfhfr8suzyPGOx3nmq4aHqabehUZn6Ch9kyFpV79TGDTWFmHqUqXdabR7QHqxzrYolF4+tVmJhUG4OURg5dQ==",
          "2951: decode-uri-component@^0.2.0:",
          "2952:   version \"0.2.0\"",
          "2953:   resolved \"https://registry.yarnpkg.com/decode-uri-component/-/decode-uri-component-0.2.0.tgz#eb3913333458775cb84cd1a1fae062106bb87545\"",
          "2954:   integrity sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=",
          "2956: deep-is@^0.1.3, deep-is@~0.1.3:",
          "",
          "[Added Lines]",
          "2783: debug@^4.1.0, debug@^4.1.1, debug@^4.3.2, debug@^4.3.4:",
          "2784:   version \"4.3.4\"",
          "2785:   resolved \"https://registry.yarnpkg.com/debug/-/debug-4.3.4.tgz#1319f6579357f2338d3337d2cdd4914bb5dcc865\"",
          "2786:   integrity sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "2787:   dependencies:",
          "2788:     ms \"2.1.2\"",
          "2790: decamelize@^1.0.0:",
          "2793:   integrity sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
          "2795: dedent@^0.7.0:",
          "2796:   version \"0.7.0\"",
          "2797:   resolved \"https://registry.yarnpkg.com/dedent/-/dedent-0.7.0.tgz#2495ddbaf6eb874abb0e1be9df22d2e5a544326c\"",
          "2798:   integrity sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==",
          "2800: deep-is@^0.1.3:",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2963:   resolved \"https://registry.yarnpkg.com/deepmerge/-/deepmerge-4.2.2.tgz#44d2ea3679b8f4d4ffba33f03d865fc1e7bf4955\"",
          "2964:   integrity sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg==",
          "2967:   version \"1.1.4\"",
          "2968:   resolved \"https://registry.yarnpkg.com/define-properties/-/define-properties-1.1.4.tgz#0b14d7bd7fbeb2f3572c3a7eda80ea5d57fb05b1\"",
          "2969:   integrity sha512-uckOqKcfaVvtBdsVkdPv3XjveQJsNQqmhXgRi8uhvWWuPYZCNlzT8qAyblUgNoXdHdjMTzAqeGjAoli8f+bzPA==",
          "",
          "[Removed Lines]",
          "2966: define-properties@^1.1.3, define-properties@^1.1.4, define-properties@~1.1.2:",
          "",
          "[Added Lines]",
          "2810: define-properties@^1.1.3, define-properties@^1.1.4:",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2971:     has-property-descriptors \"^1.0.0\"",
          "2972:     object-keys \"^1.1.1\"",
          "2996: defined@^1.0.0:",
          "2997:   version \"1.0.0\"",
          "2998:   resolved \"https://registry.yarnpkg.com/defined/-/defined-1.0.0.tgz#c98d9bcef75674188e110969151199e39b1fa693\"",
          "3001: delayed-stream@~1.0.0:",
          "3002:   version \"1.0.0\"",
          "3003:   resolved \"https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619\"",
          "3006: deprecation@^2.0.0, deprecation@^2.3.1:",
          "3007:   version \"2.3.1\"",
          "",
          "[Removed Lines]",
          "2974: define-property@^0.2.5:",
          "2975:   version \"0.2.5\"",
          "2976:   resolved \"https://registry.yarnpkg.com/define-property/-/define-property-0.2.5.tgz#c35b1ef918ec3c990f9a5bc57be04aacec5c8116\"",
          "2977:   integrity sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "2978:   dependencies:",
          "2979:     is-descriptor \"^0.1.0\"",
          "2981: define-property@^1.0.0:",
          "2982:   version \"1.0.0\"",
          "2983:   resolved \"https://registry.yarnpkg.com/define-property/-/define-property-1.0.0.tgz#769ebaaf3f4a63aad3af9e8d304c9bbe79bfb0e6\"",
          "2984:   integrity sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "2985:   dependencies:",
          "2986:     is-descriptor \"^1.0.0\"",
          "2988: define-property@^2.0.2:",
          "2989:   version \"2.0.2\"",
          "2990:   resolved \"https://registry.yarnpkg.com/define-property/-/define-property-2.0.2.tgz#d459689e8d654ba77e02a817f8710d702cb16e9d\"",
          "2991:   integrity sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==",
          "2992:   dependencies:",
          "2993:     is-descriptor \"^1.0.2\"",
          "2994:     isobject \"^3.0.1\"",
          "2999:   integrity sha1-yY2bzvdWdBiOEQlpFRGZ45sfppM=",
          "3004:   integrity sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
          "",
          "[Added Lines]",
          "2821:   integrity sha512-Y2caI5+ZwS5c3RiNDJ6u53VhQHv+hHKwhkI1iHvceKUHw9Df6EK2zRLfjejRgMuCuxK7PfSWIMwWecceVvThjQ==",
          "2826:   integrity sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3032:   integrity sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
          "3034: detective@^5.2.0:",
          "3038:   dependencies:",
          "3040:     defined \"^1.0.0\"",
          "3043: diff-match-patch@^1.0.5:",
          "3044:   version \"1.0.5\"",
          "3045:   resolved \"https://registry.yarnpkg.com/diff-match-patch/-/diff-match-patch-1.0.5.tgz#abb584d5f10cd1196dfc55aa03701592ae3f7b37\"",
          "3046:   integrity sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw==",
          "3053: diffie-hellman@^5.0.0:",
          "3054:   version \"5.0.3\"",
          "",
          "[Removed Lines]",
          "3035:   version \"5.2.0\"",
          "3036:   resolved \"https://registry.yarnpkg.com/detective/-/detective-5.2.0.tgz#feb2a77e85b904ecdea459ad897cc90a99bd2a7b\"",
          "3037:   integrity sha512-6SsIx+nUUbuK0EthKjv0zrdnajCCXVYGmbYYiYjFVpzcjwEs/JMDZ8tPRG29J/HhN56t3GJp2cGSWDRjjot8Pg==",
          "3039:     acorn-node \"^1.6.1\"",
          "3041:     minimist \"^1.1.1\"",
          "3048: diff-sequences@^26.6.2:",
          "3049:   version \"26.6.2\"",
          "3050:   resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-26.6.2.tgz#48ba99157de1923412eed41db6b6d4aa9ca7c0b1\"",
          "3051:   integrity sha512-Mv/TDa3nZ9sbc5soK+OoA74BsS3mL37yixCvUAQkiuA4Wz6YtwP/K47n2rv2ovzHZvoiQeA5FTQOschKkEwB0Q==",
          "",
          "[Added Lines]",
          "2857:   version \"5.2.1\"",
          "2858:   resolved \"https://registry.yarnpkg.com/detective/-/detective-5.2.1.tgz#6af01eeda11015acb0e73f933242b70f24f91034\"",
          "2859:   integrity sha512-v9XE1zRnz1wRtgurGu0Bs8uHKFSTdteYZNbIPFVhUZ39L/S79ppMpdmVOZAnoz1jfEFodc48n6MX483Xo3t1yw==",
          "2861:     acorn-node \"^1.8.2\"",
          "2863:     minimist \"^1.2.6\"",
          "2870: diff-sequences@^27.5.1:",
          "2871:   version \"27.5.1\"",
          "2872:   resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-27.5.1.tgz#eaecc0d327fd68c8d9672a1e64ab8dccb2ef5327\"",
          "2873:   integrity sha512-k1gCAXAsNgLwEL+Y8Wvl+M6oEFj5bgazfZULpS5CneoPPXRaCCW7dm+q21Ky2VEE5X+VeRDBVg1Pcvvsr4TtNQ==",
          "2875: diff-sequences@^28.0.2:",
          "2876:   version \"28.0.2\"",
          "2877:   resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-28.0.2.tgz#40f8d4ffa081acbd8902ba35c798458d0ff1af41\"",
          "2878:   integrity sha512-YtEoNynLDFCRznv/XDalsKGSZDoj0U5kLnXvY0JSq3nBboRrZXjD81+eSiwi+nzcZDwedMmcowcxNwwgFW23mQ==",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3088: doctypes@^1.1.0:",
          "3089:   version \"1.1.0\"",
          "3090:   resolved \"https://registry.yarnpkg.com/doctypes/-/doctypes-1.1.0.tgz#ea80b106a87538774e8a3a4a5afe293de489e0a9\"",
          "3093: domain-browser@^1.2.0:",
          "3094:   version \"1.2.0\"",
          "",
          "[Removed Lines]",
          "3091:   integrity sha1-6oCxBqh1OHdOijpKWv4pPeSJ4Kk=",
          "",
          "[Added Lines]",
          "2918:   integrity sha512-LLBi6pEqS6Do3EKQ3J0NqHWV5hhb78Pi8vvESYwyOy2c31ZEZVdtitdzsQsKb7878PEERhzUk0ftqGhG6Mz+pQ==",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3102:   dependencies:",
          "3103:     webidl-conversions \"^4.0.2\"",
          "3112: duplexer2@^0.1.2, duplexer2@~0.1.0, duplexer2@~0.1.2:",
          "3113:   version \"0.1.4\"",
          "3114:   resolved \"https://registry.yarnpkg.com/duplexer2/-/duplexer2-0.1.4.tgz#8b12dab878c0d69e3e7891051662a32fc6bddcc1\"",
          "3116:   dependencies:",
          "3117:     readable-stream \"^2.0.2\"",
          "3119: ecc-jsbn@~0.1.1:",
          "3120:   version \"0.1.2\"",
          "3121:   resolved \"https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz#3a83a904e54353287874c564b7549386849a98c9\"",
          "3123:   dependencies:",
          "3124:     jsbn \"~0.1.0\"",
          "3125:     safer-buffer \"^2.1.0\"",
          "3127: electron-to-chromium@^1.4.118:",
          "3132: elliptic@^6.5.3:",
          "3133:   version \"6.5.4\"",
          "",
          "[Removed Lines]",
          "3105: domexception@^2.0.1:",
          "3106:   version \"2.0.1\"",
          "3107:   resolved \"https://registry.yarnpkg.com/domexception/-/domexception-2.0.1.tgz#fb44aefba793e1574b0af6aed2801d057529f304\"",
          "3108:   integrity sha512-yxJ2mFy/sibVQlu5qHjOkf9J3K6zgmCxgJ94u2EdvDOV09H+32LtRswEcUsmUWN72pVLOEnTSRaIVVzVQgS0dg==",
          "3109:   dependencies:",
          "3110:     webidl-conversions \"^5.0.0\"",
          "3115:   integrity sha1-ixLauHjA1p4+eJEFFmKjL8a93ME=",
          "3122:   integrity sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
          "3128:   version \"1.4.131\"",
          "3129:   resolved \"https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.4.131.tgz#ca42d22eac0fe545860fbc636a6f4a7190ba70a9\"",
          "3130:   integrity sha512-oi3YPmaP87hiHn0c4ePB67tXaF+ldGhxvZnT19tW9zX6/Ej+pLN0Afja5rQ6S+TND7I9EuwQTT8JYn1k7R7rrw==",
          "",
          "[Added Lines]",
          "2935:   integrity sha512-asLFVfWWtJ90ZyOUHMqk7/S2w2guQKxUI2itj3d92ADHhxUSbCMGi1f1cBcJ7xM1To+pE/Khbwo1yuNbMEPKeA==",
          "2942:   integrity sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
          "2948:   version \"1.4.142\"",
          "2949:   resolved \"https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.4.142.tgz#70cc8871f7c0122b29256089989e67cee637b40d\"",
          "2950:   integrity sha512-ea8Q1YX0JRp4GylOmX4gFHIizi0j9GfRW4EkaHnkZp0agRCBB4ZGeCv17IEzIvBkiYVwfoKVhKZJbTfqCRdQdg==",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3142:     minimalistic-assert \"^1.0.1\"",
          "3143:     minimalistic-crypto-utils \"^1.0.1\"",
          "3150: emoji-regex@^8.0.0:",
          "3151:   version \"8.0.0\"",
          "3152:   resolved \"https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37\"",
          "3153:   integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
          "3162: entities@~2.1.0:",
          "3163:   version \"2.1.0\"",
          "3164:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
          "",
          "[Removed Lines]",
          "3145: emittery@^0.7.1:",
          "3146:   version \"0.7.2\"",
          "3147:   resolved \"https://registry.yarnpkg.com/emittery/-/emittery-0.7.2.tgz#25595908e13af0f5674ab419396e2fb394cdfa82\"",
          "3148:   integrity sha512-A8OG5SR/ij3SsJdWDJdkkSYUjQdCUx6APQXem0SaEePBSRg4eymGYwBkKo1Y6DU+af/Jn2dBQqDBvjnr9Vi8nQ==",
          "3155: end-of-stream@^1.1.0:",
          "3156:   version \"1.4.4\"",
          "3157:   resolved \"https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.4.tgz#5ae64a5f45057baf3626ec14da0ca5e4b2431eb0\"",
          "3158:   integrity sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
          "3159:   dependencies:",
          "3160:     once \"^1.4.0\"",
          "",
          "[Added Lines]",
          "2965: emittery@^0.10.2:",
          "2966:   version \"0.10.2\"",
          "2967:   resolved \"https://registry.yarnpkg.com/emittery/-/emittery-0.10.2.tgz#902eec8aedb8c41938c46e9385e9db7e03182933\"",
          "2968:   integrity sha512-aITqOwnLanpHLNXZJENbOgjUBeHocD+xsSJmNrjovKBW5HbSpW3d1pEls7GFQPUWXiwG9+0P4GtHfEqC/4M0Iw==",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3171:   dependencies:",
          "3172:     is-arrayish \"^0.2.1\"",
          "3178:   dependencies:",
          "3179:     call-bind \"^1.0.2\"",
          "3180:     es-to-primitive \"^1.2.1\"",
          "3181:     function-bind \"^1.1.1\"",
          "3182:     get-intrinsic \"^1.1.1\"",
          "3183:     get-symbol-description \"^1.0.0\"",
          "3184:     has \"^1.0.3\"",
          "3185:     has-symbols \"^1.0.3\"",
          "3186:     internal-slot \"^1.0.3\"",
          "3187:     is-callable \"^1.2.4\"",
          "",
          "[Removed Lines]",
          "3174: es-abstract@^1.18.5, es-abstract@^1.19.0, es-abstract@^1.19.1, es-abstract@^1.19.2, es-abstract@^1.19.5:",
          "3175:   version \"1.19.5\"",
          "3176:   resolved \"https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.19.5.tgz#a2cb01eb87f724e815b278b0dd0d00f36ca9a7f1\"",
          "3177:   integrity sha512-Aa2G2+Rd3b6kxEUKTF4TaW67czBLyAv3z7VOhYRU50YBx+bbsYZ9xQP4lMNazePuFlybXI0V4MruPos7qUo5fA==",
          "",
          "[Added Lines]",
          "2987: es-abstract@^1.19.0, es-abstract@^1.19.1, es-abstract@^1.19.2, es-abstract@^1.19.5, es-abstract@^1.20.0:",
          "2988:   version \"1.20.1\"",
          "2989:   resolved \"https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.20.1.tgz#027292cd6ef44bd12b1913b828116f54787d1814\"",
          "2990:   integrity sha512-WEm2oBhfoI2sImeM4OF2zE2V3BYdSF+KnSi9Sidz51fQHd7+JuF8Xgcj9/0o+OWeIeIS/MiuNnlruQrJf16GQA==",
          "2995:     function.prototype.name \"^1.1.5\"",
          "2999:     has-property-descriptors \"^1.0.0\"",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3193:     object-inspect \"^1.12.0\"",
          "3194:     object-keys \"^1.1.1\"",
          "3195:     object.assign \"^4.1.2\"",
          "3214: es-shim-unscopables@^1.0.0:",
          "3215:   version \"1.0.0\"",
          "",
          "[Removed Lines]",
          "3196:     string.prototype.trimend \"^1.0.4\"",
          "3197:     string.prototype.trimstart \"^1.0.4\"",
          "3198:     unbox-primitive \"^1.0.1\"",
          "3200: es-get-iterator@^1.1.2:",
          "3201:   version \"1.1.2\"",
          "3202:   resolved \"https://registry.yarnpkg.com/es-get-iterator/-/es-get-iterator-1.1.2.tgz#9234c54aba713486d7ebde0220864af5e2b283f7\"",
          "3203:   integrity sha512-+DTO8GYwbMCwbywjimwZMHp8AuYXOS2JZFWoi2AlPOS3ebnII9w/NLpNZtA7A0YLaVDw+O7KFCeoIV7OPvM7hQ==",
          "3204:   dependencies:",
          "3205:     call-bind \"^1.0.2\"",
          "3206:     get-intrinsic \"^1.1.0\"",
          "3207:     has-symbols \"^1.0.1\"",
          "3208:     is-arguments \"^1.1.0\"",
          "3209:     is-map \"^2.0.2\"",
          "3210:     is-set \"^2.0.2\"",
          "3211:     is-string \"^1.0.5\"",
          "3212:     isarray \"^2.0.5\"",
          "",
          "[Added Lines]",
          "3011:     regexp.prototype.flags \"^1.4.3\"",
          "3012:     string.prototype.trimend \"^1.0.5\"",
          "3013:     string.prototype.trimstart \"^1.0.5\"",
          "3014:     unbox-primitive \"^1.0.2\"",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3239: es6-iterator@^2.0.3:",
          "3240:   version \"2.0.3\"",
          "3241:   resolved \"https://registry.yarnpkg.com/es6-iterator/-/es6-iterator-2.0.3.tgz#a7de889141a05a94b0854403b2d0a0fbfa98f3b7\"",
          "3243:   dependencies:",
          "3244:     d \"1\"",
          "3245:     es5-ext \"^0.10.35\"",
          "",
          "[Removed Lines]",
          "3242:   integrity sha1-p96IkUGgWpSwhUQDstCg+/qY87c=",
          "",
          "[Added Lines]",
          "3044:   integrity sha512-zw4SRzoUkd+cl+ZoE15A9o1oQd920Bb0iOJMQkQhl3jNc03YqVjAhG7scf9C5KWRU/R13Orf588uCC6525o02g==",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3271: escape-string-regexp@^1.0.5:",
          "3272:   version \"1.0.5\"",
          "3273:   resolved \"https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4\"",
          "3276: escape-string-regexp@^2.0.0:",
          "3277:   version \"2.0.0\"",
          "",
          "[Removed Lines]",
          "3274:   integrity sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
          "",
          "[Added Lines]",
          "3076:   integrity sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3283:   resolved \"https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz#14ba83a5d373e3d311e5afca29cf5bfad965bf34\"",
          "3284:   integrity sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
          "3298: eslint-config-google@^0.14.0:",
          "3299:   version \"0.14.0\"",
          "3300:   resolved \"https://registry.yarnpkg.com/eslint-config-google/-/eslint-config-google-0.14.0.tgz#4f5f8759ba6e11b424294a219dbfa18c508bcc1a\"",
          "",
          "[Removed Lines]",
          "3286: escodegen@^2.0.0:",
          "3287:   version \"2.0.0\"",
          "3288:   resolved \"https://registry.yarnpkg.com/escodegen/-/escodegen-2.0.0.tgz#5e32b12833e8aa8fa35e1bf0befa89380484c7dd\"",
          "3289:   integrity sha512-mmHKys/C8BFUGI+MAWNcSYoORYLMdPzjrknd2Vc+bUsjN5bXcr8EhrNB+UTqfL1y3I9c4fw2ihgtMPQLBRiQxw==",
          "3290:   dependencies:",
          "3291:     esprima \"^4.0.1\"",
          "3292:     estraverse \"^5.2.0\"",
          "3293:     esutils \"^2.0.2\"",
          "3294:     optionator \"^0.8.1\"",
          "3295:   optionalDependencies:",
          "3296:     source-map \"~0.6.1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3335:     resolve \"^1.22.0\"",
          "3336:     tsconfig-paths \"^3.14.1\"",
          "3343: eslint-rule-composer@^0.3.0:",
          "3344:   version \"0.3.0\"",
          "",
          "[Removed Lines]",
          "3338: eslint-plugin-matrix-org@^0.4.0:",
          "3339:   version \"0.4.0\"",
          "3340:   resolved \"https://registry.yarnpkg.com/eslint-plugin-matrix-org/-/eslint-plugin-matrix-org-0.4.0.tgz#de2d2db1cd471d637728133ce9a2b921690e5cd1\"",
          "3341:   integrity sha512-yVkNwtc33qtrQB4PPzpU+PUdFzdkENPan3JF4zhtAQJRUYXyvKEXnYSrXLUWYRXoYFxs9LbyI2CnhJL/RnHJaQ==",
          "",
          "[Added Lines]",
          "3128: eslint-plugin-matrix-org@^0.5.0:",
          "3129:   version \"0.5.2\"",
          "3130:   resolved \"https://registry.yarnpkg.com/eslint-plugin-matrix-org/-/eslint-plugin-matrix-org-0.5.2.tgz#eb355b1a81906ea814235d0b224e8162db7cbbf4\"",
          "3131:   integrity sha512-qJbyxp9cOi35Qpn3WCBqohCJaMSVp3ntOJ3WbjpREbCQdyrFze6MJAayl7GNidbNsdP7ejHTi0PtZzyKLcfLzQ==",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3373:   resolved \"https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz#f65328259305927392c938ed44eb0a5c9b2bd303\"",
          "3374:   integrity sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
          "3377:   version \"3.3.0\"",
          "3378:   resolved \"https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-3.3.0.tgz#f6480fa6b1f30efe2d1968aa8ac745b862469826\"",
          "3379:   integrity sha512-mQ+suqKJVyeuwGYHAdjMFqjCyfl8+Ldnxuyp3ldiMBFKkvytrXUZWaiPCEav8qDHKty44bD+qV1IP4T+w+xXRA==",
          "3385:   dependencies:",
          "3387:     \"@humanwhocodes/config-array\" \"^0.9.2\"",
          "3388:     ajv \"^6.10.0\"",
          "3389:     chalk \"^4.0.0\"",
          "",
          "[Removed Lines]",
          "3376: eslint-visitor-keys@^3.0.0, eslint-visitor-keys@^3.3.0:",
          "3381: eslint@8.9.0:",
          "3382:   version \"8.9.0\"",
          "3383:   resolved \"https://registry.yarnpkg.com/eslint/-/eslint-8.9.0.tgz#a2a8227a99599adc4342fd9b854cb8d8d6412fdb\"",
          "3384:   integrity sha512-PB09IGwv4F4b0/atrbcMFboF/giawbBLVC7fyDamk5Wtey4Jh2K+rYaBhCAbUyEI4QzB1ly09Uglc9iCtFaG2Q==",
          "3386:     \"@eslint/eslintrc\" \"^1.1.0\"",
          "",
          "[Added Lines]",
          "3166: eslint-visitor-keys@^3.3.0:",
          "3171: eslint@8.16.0:",
          "3172:   version \"8.16.0\"",
          "3173:   resolved \"https://registry.yarnpkg.com/eslint/-/eslint-8.16.0.tgz#6d936e2d524599f2a86c708483b4c372c5d3bbae\"",
          "3174:   integrity sha512-MBndsoXY/PeVTDJeWsYj7kLZ5hQpJOfMYLsF6LicLHQWbRDG19lK5jOix4DPl8yY4SUFcE3txy86OzFLWT+yoA==",
          "3176:     \"@eslint/eslintrc\" \"^1.3.0\"",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3394:     eslint-scope \"^7.1.1\"",
          "3395:     eslint-utils \"^3.0.0\"",
          "3396:     eslint-visitor-keys \"^3.3.0\"",
          "3398:     esquery \"^1.4.0\"",
          "3399:     esutils \"^2.0.2\"",
          "3400:     fast-deep-equal \"^3.1.3\"",
          "3401:     file-entry-cache \"^6.0.1\"",
          "3402:     functional-red-black-tree \"^1.0.1\"",
          "3403:     glob-parent \"^6.0.1\"",
          "3405:     ignore \"^5.2.0\"",
          "3406:     import-fresh \"^3.0.0\"",
          "3407:     imurmurhash \"^0.1.4\"",
          "",
          "[Removed Lines]",
          "3397:     espree \"^9.3.1\"",
          "3404:     globals \"^13.6.0\"",
          "",
          "[Added Lines]",
          "3187:     espree \"^9.3.2\"",
          "3194:     globals \"^13.15.0\"",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3410:     json-stable-stringify-without-jsonify \"^1.0.1\"",
          "3411:     levn \"^0.4.1\"",
          "3412:     lodash.merge \"^4.6.2\"",
          "3414:     natural-compare \"^1.4.0\"",
          "3415:     optionator \"^0.9.1\"",
          "3416:     regexpp \"^3.2.0\"",
          "",
          "[Removed Lines]",
          "3413:     minimatch \"^3.0.4\"",
          "",
          "[Added Lines]",
          "3203:     minimatch \"^3.1.2\"",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3419:     text-table \"^0.2.0\"",
          "3420:     v8-compile-cache \"^2.0.3\"",
          "3426:   dependencies:",
          "3429:     eslint-visitor-keys \"^3.3.0\"",
          "3432:   version \"4.0.1\"",
          "3433:   resolved \"https://registry.yarnpkg.com/esprima/-/esprima-4.0.1.tgz#13b04cdb3e6c5d19df91ab6987a8695619b0aa71\"",
          "3434:   integrity sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
          "",
          "[Removed Lines]",
          "3422: espree@^9.3.1:",
          "3423:   version \"9.3.1\"",
          "3424:   resolved \"https://registry.yarnpkg.com/espree/-/espree-9.3.1.tgz#8793b4bc27ea4c778c19908e0719e7b8f4115bcd\"",
          "3425:   integrity sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ==",
          "3427:     acorn \"^8.7.0\"",
          "3428:     acorn-jsx \"^5.3.1\"",
          "3431: esprima@^4.0.0, esprima@^4.0.1, esprima@~4.0.0:",
          "",
          "[Added Lines]",
          "3212: espree@^9.3.2:",
          "3213:   version \"9.3.2\"",
          "3214:   resolved \"https://registry.yarnpkg.com/espree/-/espree-9.3.2.tgz#f58f77bd334731182801ced3380a8cc859091596\"",
          "3215:   integrity sha512-D211tC7ZwouTIuY5x9XnS0E9sWNChB7IYKX/Xp5eQj3nFXhqmiUDB9q27y76oFl8jTg3pXcQx/bpxMfs3CIZbA==",
          "3217:     acorn \"^8.7.1\"",
          "3218:     acorn-jsx \"^5.3.2\"",
          "3221: esprima@^4.0.0, esprima@~4.0.0:",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3474: event-emitter@^0.3.5:",
          "3475:   version \"0.3.5\"",
          "3476:   resolved \"https://registry.yarnpkg.com/event-emitter/-/event-emitter-0.3.5.tgz#df8c69eef1647923c7157b9ce83840610b02cc39\"",
          "3478:   dependencies:",
          "3479:     d \"1\"",
          "3480:     es5-ext \"~0.10.14\"",
          "",
          "[Removed Lines]",
          "3477:   integrity sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk=",
          "",
          "[Added Lines]",
          "3267:   integrity sha512-D9rRn9y7kLPnJ+hMq7S/nhvoKwwvVJahBi2BPmx3bvbsEdK3W9ii8cBSGjP+72/LnM4n6fo3+dkCX5FeTQruXA==",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3492:     md5.js \"^1.3.4\"",
          "3493:     safe-buffer \"^5.1.1\"",
          "3517:   dependencies:",
          "3521:     is-stream \"^2.0.0\"",
          "3522:     merge-stream \"^2.0.0\"",
          "3526:     strip-final-newline \"^2.0.0\"",
          "3528: exit@^0.1.2:",
          "3529:   version \"0.1.2\"",
          "3530:   resolved \"https://registry.yarnpkg.com/exit/-/exit-0.1.2.tgz#0632638f8d877cc82107d30a0fff1a17cba1cd0c\"",
          "3533: exorcist@^1.0.1:",
          "3534:   version \"1.0.1\"",
          "3535:   resolved \"https://registry.yarnpkg.com/exorcist/-/exorcist-1.0.1.tgz#79316e3c4885845490f7bb405c0e5b5db1167c52\"",
          "3537:   dependencies:",
          "3538:     is-stream \"~1.1.0\"",
          "3539:     minimist \"0.0.5\"",
          "3540:     mkdirp \"~0.5.1\"",
          "3541:     mold-source-map \"~0.4.0\"",
          "3573:   dependencies:",
          "3581: ext@^1.1.2:",
          "3582:   version \"1.6.0\"",
          "",
          "[Removed Lines]",
          "3495: exec-sh@^0.3.2:",
          "3496:   version \"0.3.6\"",
          "3497:   resolved \"https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.3.6.tgz#ff264f9e325519a60cb5e273692943483cca63bc\"",
          "3498:   integrity sha512-nQn+hI3yp+oD0huYhKwvYI32+JFeq+XkNcD1GAo3Y/MjxsfVGmrrzrnzjWiNY6f+pUCP440fThsFh5gZrRAU/w==",
          "3500: execa@^1.0.0:",
          "3501:   version \"1.0.0\"",
          "3502:   resolved \"https://registry.yarnpkg.com/execa/-/execa-1.0.0.tgz#c6236a5bb4df6d6f15e88e7f017798216749ddd8\"",
          "3503:   integrity sha512-adbxcyWV46qiHyvSp50TKt05tB4tK3HcmF7/nxfAdhnox83seTDbwnaqKO4sXRy7roHAIFqJP/Rw/AuEbX61LA==",
          "3504:   dependencies:",
          "3505:     cross-spawn \"^6.0.0\"",
          "3506:     get-stream \"^4.0.0\"",
          "3507:     is-stream \"^1.1.0\"",
          "3508:     npm-run-path \"^2.0.0\"",
          "3509:     p-finally \"^1.0.0\"",
          "3510:     signal-exit \"^3.0.0\"",
          "3511:     strip-eof \"^1.0.0\"",
          "3513: execa@^4.0.0:",
          "3514:   version \"4.1.0\"",
          "3515:   resolved \"https://registry.yarnpkg.com/execa/-/execa-4.1.0.tgz#4e5491ad1572f2f17a77d388c6c857135b22847a\"",
          "3516:   integrity sha512-j5W0//W7f8UxAn8hXVnwG8tLwdiUy4FJLcSupCg6maBYZDpyBvTApK7KyuI4bKj8KOh1r2YH+6ucuYtJv1bTZA==",
          "3518:     cross-spawn \"^7.0.0\"",
          "3519:     get-stream \"^5.0.0\"",
          "3520:     human-signals \"^1.1.1\"",
          "3523:     npm-run-path \"^4.0.0\"",
          "3524:     onetime \"^5.1.0\"",
          "3525:     signal-exit \"^3.0.2\"",
          "3531:   integrity sha1-BjJjj42HfMghB9MKD/8aF8uhzQw=",
          "3536:   integrity sha1-eTFuPEiFhFSQ97tAXA5bXbEWfFI=",
          "3543: expand-brackets@^2.1.4:",
          "3544:   version \"2.1.4\"",
          "3545:   resolved \"https://registry.yarnpkg.com/expand-brackets/-/expand-brackets-2.1.4.tgz#b77735e315ce30f6b6eff0f83b04151a22449622\"",
          "3546:   integrity sha1-t3c14xXOMPa27/D4OwQVGiJEliI=",
          "3547:   dependencies:",
          "3548:     debug \"^2.3.3\"",
          "3549:     define-property \"^0.2.5\"",
          "3550:     extend-shallow \"^2.0.1\"",
          "3551:     posix-character-classes \"^0.1.0\"",
          "3552:     regex-not \"^1.0.0\"",
          "3553:     snapdragon \"^0.8.1\"",
          "3554:     to-regex \"^3.0.1\"",
          "3556: expect@^1.20.2:",
          "3557:   version \"1.20.2\"",
          "3558:   resolved \"https://registry.yarnpkg.com/expect/-/expect-1.20.2.tgz#d458fe4c56004036bae3232416a3f6361f04f965\"",
          "3559:   integrity sha1-1Fj+TFYAQDa64yMkFqP2Nh8E+WU=",
          "3560:   dependencies:",
          "3561:     define-properties \"~1.1.2\"",
          "3562:     has \"^1.0.1\"",
          "3563:     is-equal \"^1.5.1\"",
          "3564:     is-regex \"^1.0.3\"",
          "3565:     object-inspect \"^1.1.0\"",
          "3566:     object-keys \"^1.0.9\"",
          "3567:     tmatch \"^2.0.1\"",
          "3569: expect@^26.6.2:",
          "3570:   version \"26.6.2\"",
          "3571:   resolved \"https://registry.yarnpkg.com/expect/-/expect-26.6.2.tgz#c6b996bf26bf3fe18b67b2d0f51fc981ba934417\"",
          "3572:   integrity sha512-9/hlOBkQl2l/PLHJx6JjoDF6xPKcJEsUlWKb23rKE7KzeDqUZKXKNMW27KIue5JMdBV9HgmoJPcc8HtO85t9IA==",
          "3574:     \"@jest/types\" \"^26.6.2\"",
          "3575:     ansi-styles \"^4.0.0\"",
          "3576:     jest-get-type \"^26.3.0\"",
          "3577:     jest-matcher-utils \"^26.6.2\"",
          "3578:     jest-message-util \"^26.6.2\"",
          "3579:     jest-regex-util \"^26.0.0\"",
          "",
          "[Added Lines]",
          "3285: execa@^5.0.0:",
          "3286:   version \"5.1.1\"",
          "3287:   resolved \"https://registry.yarnpkg.com/execa/-/execa-5.1.1.tgz#f80ad9cbf4298f7bd1d4c9555c21e93741c411dd\"",
          "3288:   integrity sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
          "3290:     cross-spawn \"^7.0.3\"",
          "3291:     get-stream \"^6.0.0\"",
          "3292:     human-signals \"^2.1.0\"",
          "3295:     npm-run-path \"^4.0.1\"",
          "3296:     onetime \"^5.1.2\"",
          "3297:     signal-exit \"^3.0.3\"",
          "3303:   integrity sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
          "3308:   integrity sha512-YsUNvZ456n2BlgoAqQuroyla+4LyQAo7OUBVS2vUBW3CJWwQvEjtr3CKeka9RpkEFvKWecH41Mt6zZIjel54JQ==",
          "3315: expect@^28.1.0:",
          "3316:   version \"28.1.0\"",
          "3317:   resolved \"https://registry.yarnpkg.com/expect/-/expect-28.1.0.tgz#10e8da64c0850eb8c39a480199f14537f46e8360\"",
          "3318:   integrity sha512-qFXKl8Pmxk8TBGfaFKRtcQjfXEnKAs+dmlxdwvukJZorwrAabT7M3h8oLOG01I2utEhkmUTi17CHaPBovZsKdw==",
          "3320:     \"@jest/expect-utils\" \"^28.1.0\"",
          "3321:     jest-get-type \"^28.0.2\"",
          "3322:     jest-matcher-utils \"^28.1.0\"",
          "3323:     jest-message-util \"^28.1.0\"",
          "3324:     jest-util \"^28.1.0\"",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3585:   dependencies:",
          "3586:     type \"^2.5.0\"",
          "3603: extend@~3.0.2:",
          "3604:   version \"3.0.2\"",
          "3605:   resolved \"https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa\"",
          "3606:   integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
          "3622: extsprintf@1.3.0:",
          "3623:   version \"1.3.0\"",
          "3624:   resolved \"https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05\"",
          "3627: extsprintf@^1.2.0:",
          "3628:   version \"1.4.1\"",
          "",
          "[Removed Lines]",
          "3588: extend-shallow@^2.0.1:",
          "3589:   version \"2.0.1\"",
          "3590:   resolved \"https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-2.0.1.tgz#51af7d614ad9a9f610ea1bafbb989d6b1c56890f\"",
          "3591:   integrity sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "3592:   dependencies:",
          "3593:     is-extendable \"^0.1.0\"",
          "3595: extend-shallow@^3.0.0, extend-shallow@^3.0.2:",
          "3596:   version \"3.0.2\"",
          "3597:   resolved \"https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-3.0.2.tgz#26a71aaf073b39fb2127172746131c2704028db8\"",
          "3598:   integrity sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=",
          "3599:   dependencies:",
          "3600:     assign-symbols \"^1.0.0\"",
          "3601:     is-extendable \"^1.0.1\"",
          "3608: extglob@^2.0.4:",
          "3609:   version \"2.0.4\"",
          "3610:   resolved \"https://registry.yarnpkg.com/extglob/-/extglob-2.0.4.tgz#ad00fe4dc612a9232e8718711dc5cb5ab0285543\"",
          "3611:   integrity sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==",
          "3612:   dependencies:",
          "3613:     array-unique \"^0.3.2\"",
          "3614:     define-property \"^1.0.0\"",
          "3615:     expand-brackets \"^2.1.4\"",
          "3616:     extend-shallow \"^2.0.1\"",
          "3617:     fragment-cache \"^0.2.1\"",
          "3618:     regex-not \"^1.0.0\"",
          "3619:     snapdragon \"^0.8.1\"",
          "3620:     to-regex \"^3.0.1\"",
          "3625:   integrity sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=",
          "",
          "[Added Lines]",
          "3341:   integrity sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3657:   resolved \"https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633\"",
          "3658:   integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
          "3661:   version \"2.0.6\"",
          "3662:   resolved \"https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917\"",
          "3665: fast-safe-stringify@^2.0.7:",
          "3666:   version \"2.1.1\"",
          "",
          "[Removed Lines]",
          "3660: fast-levenshtein@^2.0.6, fast-levenshtein@~2.0.6:",
          "3663:   integrity sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
          "",
          "[Added Lines]",
          "3376: fast-levenshtein@^2.0.6:",
          "3379:   integrity sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3688:   dependencies:",
          "3689:     flat-cache \"^3.0.4\"",
          "3701: fill-range@^7.0.1:",
          "3702:   version \"7.0.1\"",
          "3703:   resolved \"https://registry.yarnpkg.com/fill-range/-/fill-range-7.0.1.tgz#1919a6a7c75fe38b2c7c77e5198535da9acdda40\"",
          "",
          "[Removed Lines]",
          "3691: fill-range@^4.0.0:",
          "3692:   version \"4.0.0\"",
          "3693:   resolved \"https://registry.yarnpkg.com/fill-range/-/fill-range-4.0.0.tgz#d544811d428f98eb06a63dc402d2403c328c38f7\"",
          "3694:   integrity sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=",
          "3695:   dependencies:",
          "3696:     extend-shallow \"^2.0.1\"",
          "3697:     is-number \"^3.0.0\"",
          "3698:     repeat-string \"^1.6.1\"",
          "3699:     to-regex-range \"^2.1.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3717: find-up@^2.1.0:",
          "3718:   version \"2.1.0\"",
          "3719:   resolved \"https://registry.yarnpkg.com/find-up/-/find-up-2.1.0.tgz#45d1b7e506c717ddd482775a2b77920a3c0c57a7\"",
          "3721:   dependencies:",
          "3722:     locate-path \"^2.0.0\"",
          "",
          "[Removed Lines]",
          "3720:   integrity sha1-RdG35QbHF93UgndaK3eSCjwMV6c=",
          "",
          "[Added Lines]",
          "3426:   integrity sha512-NWzkk0jSJtTt08+FBFMvXoeZnOJD+jTtsRmBYbAIzJdX6l7dLgR7CTubCM5/eDdPUBvLCeVasP1brfVR/9/EZQ==",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3757:   resolved \"https://registry.yarnpkg.com/flatted/-/flatted-3.2.5.tgz#76c8584f4fc843db64702a6bd04ab7a8bd666da3\"",
          "3758:   integrity sha512-WIWGi2L3DyTUvUrwRKgGi9TwxQMUEqPOPQBVi71R96jZXJdFskXEmf54BoZaS1kknGODoIGASGEzBUYdyMCBJg==",
          "3770: foreground-child@^2.0.0:",
          "3771:   version \"2.0.0\"",
          "",
          "[Removed Lines]",
          "3760: for-in@^1.0.2:",
          "3761:   version \"1.0.2\"",
          "3762:   resolved \"https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80\"",
          "3763:   integrity sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=",
          "3765: foreach@^2.0.5:",
          "3766:   version \"2.0.5\"",
          "3767:   resolved \"https://registry.yarnpkg.com/foreach/-/foreach-2.0.5.tgz#0bee005018aeb260d0a3af3ae658dd0136ec1b99\"",
          "3768:   integrity sha1-C+4AUBiusmDQo6865ljdATbsG5k=",
          "",
          "[Added Lines]",
          "3466: for-each@^0.3.3:",
          "3467:   version \"0.3.3\"",
          "3468:   resolved \"https://registry.yarnpkg.com/for-each/-/for-each-0.3.3.tgz#69b447e88a0a5d32c3e7084f3f1710034b21376e\"",
          "3469:   integrity sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==",
          "3470:   dependencies:",
          "3471:     is-callable \"^1.1.3\"",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3778: forever-agent@~0.6.1:",
          "3779:   version \"0.6.1\"",
          "3780:   resolved \"https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91\"",
          "3783: form-data@^2.5.0:",
          "3784:   version \"2.5.1\"",
          "",
          "[Removed Lines]",
          "3781:   integrity sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
          "",
          "[Added Lines]",
          "3484:   integrity sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "3789:     combined-stream \"^1.0.6\"",
          "3790:     mime-types \"^2.1.12\"",
          "3801: form-data@~2.3.2:",
          "3802:   version \"2.3.3\"",
          "3803:   resolved \"https://registry.yarnpkg.com/form-data/-/form-data-2.3.3.tgz#dcce52c05f644f298c6a7ab936bd724ceffbf3a6\"",
          "",
          "[Removed Lines]",
          "3792: form-data@^3.0.0:",
          "3793:   version \"3.0.1\"",
          "3794:   resolved \"https://registry.yarnpkg.com/form-data/-/form-data-3.0.1.tgz#ebd53791b78356a99af9a300d4282c4d5eb9755f\"",
          "3795:   integrity sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
          "3796:   dependencies:",
          "3797:     asynckit \"^0.4.0\"",
          "3798:     combined-stream \"^1.0.8\"",
          "3799:     mime-types \"^2.1.12\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "3807:     combined-stream \"^1.0.6\"",
          "3808:     mime-types \"^2.1.12\"",
          "3817: fs-readdir-recursive@^1.1.0:",
          "3818:   version \"1.1.0\"",
          "3819:   resolved \"https://registry.yarnpkg.com/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz#e32fc030a2ccee44a6b5371308da54be0b397d27\"",
          "",
          "[Removed Lines]",
          "3810: fragment-cache@^0.2.1:",
          "3811:   version \"0.2.1\"",
          "3812:   resolved \"https://registry.yarnpkg.com/fragment-cache/-/fragment-cache-0.2.1.tgz#4290fad27f13e89be7f33799c6bc5a0abfff0d19\"",
          "3813:   integrity sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=",
          "3814:   dependencies:",
          "3815:     map-cache \"^0.2.2\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "3822: fs.realpath@^1.0.0:",
          "3823:   version \"1.0.0\"",
          "3824:   resolved \"https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f\"",
          "3828:   version \"2.3.2\"",
          "3829:   resolved \"https://registry.yarnpkg.com/fsevents/-/fsevents-2.3.2.tgz#8a526f78b8fdf4623b709e0b975c52c24c02fd1a\"",
          "3830:   integrity sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
          "",
          "[Removed Lines]",
          "3825:   integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
          "3827: fsevents@^2.1.2, fsevents@~2.3.2:",
          "",
          "[Added Lines]",
          "3512:   integrity sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
          "3514: fsevents@^2.3.2, fsevents@~2.3.2:",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "3847: functional-red-black-tree@^1.0.1:",
          "3848:   version \"1.0.1\"",
          "3849:   resolved \"https://registry.yarnpkg.com/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz#1b0ab3bd553b2a0d6399d29c0e3ea0b252078327\"",
          "3852: functions-have-names@^1.2.2:",
          "3853:   version \"1.2.3\"",
          "",
          "[Removed Lines]",
          "3850:   integrity sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
          "",
          "[Added Lines]",
          "3537:   integrity sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "3864:   resolved \"https://registry.yarnpkg.com/get-assigned-identifiers/-/get-assigned-identifiers-1.2.0.tgz#6dbf411de648cbaf8d9169ebb0d2d576191e2ff1\"",
          "3865:   integrity sha512-mBBwmeGTrxEMO4pMaaf/uUEFHnYtwr8FTe8Y/mer4rcV/bye0qGm6pw1bGZFGStxC5O76c5ZAVBGnqHmOaJpdQ==",
          "3868:   version \"2.0.5\"",
          "3869:   resolved \"https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e\"",
          "3870:   integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
          "",
          "[Removed Lines]",
          "3867: get-caller-file@^2.0.1, get-caller-file@^2.0.5:",
          "",
          "[Added Lines]",
          "3554: get-caller-file@^2.0.5:",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "3883:   resolved \"https://registry.yarnpkg.com/get-package-type/-/get-package-type-0.1.0.tgz#8de2d803cff44df3bc6c456e6668b36c3926e11a\"",
          "3884:   integrity sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
          "3900: get-symbol-description@^1.0.0:",
          "3901:   version \"1.0.0\"",
          "",
          "[Removed Lines]",
          "3886: get-stream@^4.0.0:",
          "3887:   version \"4.1.0\"",
          "3888:   resolved \"https://registry.yarnpkg.com/get-stream/-/get-stream-4.1.0.tgz#c1b255575f3dc21d59bfc79cd3d2b46b1c3a54b5\"",
          "3889:   integrity sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
          "3890:   dependencies:",
          "3891:     pump \"^3.0.0\"",
          "3893: get-stream@^5.0.0:",
          "3894:   version \"5.2.0\"",
          "3895:   resolved \"https://registry.yarnpkg.com/get-stream/-/get-stream-5.2.0.tgz#4966a1795ee5ace65e706c4b7beb71257d6e22d3\"",
          "3896:   integrity sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
          "3897:   dependencies:",
          "3898:     pump \"^3.0.0\"",
          "",
          "[Added Lines]",
          "3573: get-stream@^6.0.0:",
          "3574:   version \"6.0.1\"",
          "3575:   resolved \"https://registry.yarnpkg.com/get-stream/-/get-stream-6.0.1.tgz#a262d8eef67aced57c2852ad6167526a43cbf7b7\"",
          "3576:   integrity sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "3905:     call-bind \"^1.0.2\"",
          "3906:     get-intrinsic \"^1.1.1\"",
          "3913: getpass@^0.1.1:",
          "3914:   version \"0.1.7\"",
          "3915:   resolved \"https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa\"",
          "3917:   dependencies:",
          "3918:     assert-plus \"^1.0.0\"",
          "",
          "[Removed Lines]",
          "3908: get-value@^2.0.3, get-value@^2.0.6:",
          "3909:   version \"2.0.6\"",
          "3910:   resolved \"https://registry.yarnpkg.com/get-value/-/get-value-2.0.6.tgz#dc15ca1c672387ca76bd37ac0a395ba2042a2c28\"",
          "3911:   integrity sha1-3BXKHGcjh8p2vTesCjlbogQqLCg=",
          "3916:   integrity sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
          "",
          "[Added Lines]",
          "3589:   integrity sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "3931:   dependencies:",
          "3932:     is-glob \"^4.0.3\"",
          "3938:   dependencies:",
          "3939:     fs.realpath \"^1.0.0\"",
          "3940:     inflight \"^1.0.4\"",
          "3941:     inherits \"2\"",
          "3943:     once \"^1.3.0\"",
          "3944:     path-is-absolute \"^1.0.0\"",
          "",
          "[Removed Lines]",
          "3934: glob@^7.0.0, glob@^7.1.0, glob@^7.1.1, glob@^7.1.2, glob@^7.1.3, glob@^7.1.4:",
          "3935:   version \"7.2.0\"",
          "3936:   resolved \"https://registry.yarnpkg.com/glob/-/glob-7.2.0.tgz#d15535af7732e02e948f4c41628bd910293f6023\"",
          "3937:   integrity sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
          "3942:     minimatch \"^3.0.4\"",
          "",
          "[Added Lines]",
          "3607: glob@^7.0.0, glob@^7.1.0, glob@^7.1.3, glob@^7.1.4:",
          "3608:   version \"7.2.3\"",
          "3609:   resolved \"https://registry.yarnpkg.com/glob/-/glob-7.2.3.tgz#b8df0fb802bbfa8e89bd1d938b4e16578ed44f2b\"",
          "3610:   integrity sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
          "3615:     minimatch \"^3.1.1\"",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "3948:   resolved \"https://registry.yarnpkg.com/globals/-/globals-11.12.0.tgz#ab8795338868a0babd8525758018c2a7eb95c42e\"",
          "3949:   integrity sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
          "3955:   dependencies:",
          "3956:     type-fest \"^0.20.2\"",
          "3959:   version \"11.1.0\"",
          "3960:   resolved \"https://registry.yarnpkg.com/globby/-/globby-11.1.0.tgz#bd4be98bb042f83d796f7e3811991fbe82a0d34b\"",
          "3961:   integrity sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
          "",
          "[Removed Lines]",
          "3951: globals@^13.6.0, globals@^13.9.0:",
          "3952:   version \"13.13.0\"",
          "3953:   resolved \"https://registry.yarnpkg.com/globals/-/globals-13.13.0.tgz#ac32261060d8070e2719dd6998406e27d2b5727b\"",
          "3954:   integrity sha512-EQ7Q18AJlPwp3vUDL4mKA0KXrXyNIQyWon6T6XQiBQF0XHvRsiCSrWmmeATpUzdJN2HhWZU6Pdl0a9zdep5p6A==",
          "3958: globby@^11.0.4:",
          "",
          "[Added Lines]",
          "3624: globals@^13.15.0:",
          "3625:   version \"13.15.0\"",
          "3626:   resolved \"https://registry.yarnpkg.com/globals/-/globals-13.15.0.tgz#38113218c907d2f7e98658af246cef8b77e90bac\"",
          "3627:   integrity sha512-bpzcOlgDhMG070Av0Vy5Owklpv1I6+j96GhUI7Rh7IzDCKLzboflLrrfqMu8NquDbiR4EOQk7XzJwqVJxicxog==",
          "3631: globby@^11.1.0:",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "3967:     merge2 \"^1.4.1\"",
          "3968:     slash \"^3.0.0\"",
          "3971:   version \"4.2.10\"",
          "3972:   resolved \"https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.10.tgz#147d3a006da4ca3ce14728c7aefc287c367d7a6c\"",
          "3973:   integrity sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==",
          "3980: har-schema@^2.0.0:",
          "3981:   version \"2.0.0\"",
          "3982:   resolved \"https://registry.yarnpkg.com/har-schema/-/har-schema-2.0.0.tgz#a94c2224ebcac04782a0d9035521f24735b7ec92\"",
          "3985: har-validator@~5.1.3:",
          "3986:   version \"5.1.5\"",
          "",
          "[Removed Lines]",
          "3970: graceful-fs@^4.2.4:",
          "3975: growly@^1.3.0:",
          "3976:   version \"1.3.0\"",
          "3977:   resolved \"https://registry.yarnpkg.com/growly/-/growly-1.3.0.tgz#f10748cbe76af964b7c96c93c6bcc28af120c081\"",
          "3978:   integrity sha1-8QdIy+dq+WS3yWyTxrzCivEgwIE=",
          "3983:   integrity sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
          "",
          "[Added Lines]",
          "3643: graceful-fs@^4.2.9:",
          "3651:   integrity sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "3998: has-flag@^3.0.0:",
          "3999:   version \"3.0.0\"",
          "4000:   resolved \"https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd\"",
          "4003: has-flag@^4.0.0:",
          "4004:   version \"4.0.0\"",
          "",
          "[Removed Lines]",
          "4001:   integrity sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
          "",
          "[Added Lines]",
          "3669:   integrity sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4024:   dependencies:",
          "4025:     has-symbols \"^1.0.2\"",
          "4059:   version \"1.0.3\"",
          "4060:   resolved \"https://registry.yarnpkg.com/has/-/has-1.0.3.tgz#722d7cbfc1f6aa8241f16dd814e011e1f41e8796\"",
          "4061:   integrity sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
          "",
          "[Removed Lines]",
          "4027: has-value@^0.3.1:",
          "4028:   version \"0.3.1\"",
          "4029:   resolved \"https://registry.yarnpkg.com/has-value/-/has-value-0.3.1.tgz#7b1f58bada62ca827ec0a2078025654845995e1f\"",
          "4030:   integrity sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=",
          "4031:   dependencies:",
          "4032:     get-value \"^2.0.3\"",
          "4033:     has-values \"^0.1.4\"",
          "4034:     isobject \"^2.0.0\"",
          "4036: has-value@^1.0.0:",
          "4037:   version \"1.0.0\"",
          "4038:   resolved \"https://registry.yarnpkg.com/has-value/-/has-value-1.0.0.tgz#18b281da585b1c5c51def24c930ed29a0be6b177\"",
          "4039:   integrity sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=",
          "4040:   dependencies:",
          "4041:     get-value \"^2.0.6\"",
          "4042:     has-values \"^1.0.0\"",
          "4043:     isobject \"^3.0.0\"",
          "4045: has-values@^0.1.4:",
          "4046:   version \"0.1.4\"",
          "4047:   resolved \"https://registry.yarnpkg.com/has-values/-/has-values-0.1.4.tgz#6d61de95d91dfca9b9a02089ad384bff8f62b771\"",
          "4048:   integrity sha1-bWHeldkd/Km5oCCJrThL/49it3E=",
          "4050: has-values@^1.0.0:",
          "4051:   version \"1.0.0\"",
          "4052:   resolved \"https://registry.yarnpkg.com/has-values/-/has-values-1.0.0.tgz#95b0b63fec2146619a6fe57fe75628d5a39efe4f\"",
          "4053:   integrity sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=",
          "4054:   dependencies:",
          "4055:     is-number \"^3.0.0\"",
          "4056:     kind-of \"^4.0.0\"",
          "4058: has@^1.0.0, has@^1.0.1, has@^1.0.3:",
          "",
          "[Added Lines]",
          "3695: has@^1.0.0, has@^1.0.3:",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4074: hash-sum@^1.0.2:",
          "4075:   version \"1.0.2\"",
          "4076:   resolved \"https://registry.yarnpkg.com/hash-sum/-/hash-sum-1.0.2.tgz#33b40777754c6432573c120cc3808bbd10d47f04\"",
          "4079: hash.js@^1.0.0, hash.js@^1.0.3:",
          "4080:   version \"1.1.7\"",
          "",
          "[Removed Lines]",
          "4077:   integrity sha1-M7QHd3VMZDJXPBIMw4CLvRDUfwQ=",
          "",
          "[Added Lines]",
          "3714:   integrity sha512-fUs4B4L+mlt8/XAtSOGMUO1TXmAelItBPtJG7CyHJfYTdDjwisntGO2JQz7oUsatOY9o68+57eziUVNw/mRHmA==",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4092: hmac-drbg@^1.0.1:",
          "4093:   version \"1.0.1\"",
          "4094:   resolved \"https://registry.yarnpkg.com/hmac-drbg/-/hmac-drbg-1.0.1.tgz#d2745701025a6c775a6c545793ed502fc0c649a1\"",
          "4096:   dependencies:",
          "4097:     hash.js \"^1.0.3\"",
          "4098:     minimalistic-assert \"^1.0.0\"",
          "4099:     minimalistic-crypto-utils \"^1.0.1\"",
          "4113: html-escaper@^2.0.0:",
          "4114:   version \"2.0.2\"",
          "4115:   resolved \"https://registry.yarnpkg.com/html-escaper/-/html-escaper-2.0.2.tgz#dfd60027da36a36dfcbe236262c00a5822681453\"",
          "",
          "[Removed Lines]",
          "4095:   integrity sha1-0nRXAQJabHdabFRXk+1QL8DGSaE=",
          "4101: hosted-git-info@^2.1.4:",
          "4102:   version \"2.8.9\"",
          "4103:   resolved \"https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-2.8.9.tgz#dffc0bf9a21c02209090f2aa69429e1414daf3f9\"",
          "4104:   integrity sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
          "4106: html-encoding-sniffer@^2.0.1:",
          "4107:   version \"2.0.1\"",
          "4108:   resolved \"https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-2.0.1.tgz#42a6dc4fd33f00281176e8b23759ca4e4fa185f3\"",
          "4109:   integrity sha512-D5JbOMBIR/TVZkubHT+OyT2705QvogUW4IBn6nHd756OwieSF9aDYFj4dv6HHEVGYbHaLETa3WggZYWWMyy3ZQ==",
          "4110:   dependencies:",
          "4111:     whatwg-encoding \"^1.0.5\"",
          "",
          "[Added Lines]",
          "3732:   integrity sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4118: htmlescape@^1.1.0:",
          "4119:   version \"1.1.1\"",
          "4120:   resolved \"https://registry.yarnpkg.com/htmlescape/-/htmlescape-1.1.1.tgz#3a03edc2214bca3b66424a3e7959349509cb0351\"",
          "4132: http-signature@~1.2.0:",
          "4133:   version \"1.2.0\"",
          "4134:   resolved \"https://registry.yarnpkg.com/http-signature/-/http-signature-1.2.0.tgz#9aecd925114772f3d95b65a60abb8f7c18fbace1\"",
          "4136:   dependencies:",
          "4137:     assert-plus \"^1.0.0\"",
          "4138:     jsprim \"^1.2.2\"",
          "",
          "[Removed Lines]",
          "4121:   integrity sha1-OgPtwiFLyjtmQko+eVk0lQnLA1E=",
          "4123: http-proxy-agent@^4.0.1:",
          "4124:   version \"4.0.1\"",
          "4125:   resolved \"https://registry.yarnpkg.com/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz#8a8c8ef7f5932ccf953c296ca8291b95aa74aa3a\"",
          "4126:   integrity sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==",
          "4127:   dependencies:",
          "4128:     \"@tootallnate/once\" \"1\"",
          "4129:     agent-base \"6\"",
          "4130:     debug \"4\"",
          "4135:   integrity sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
          "",
          "[Added Lines]",
          "3746:   integrity sha512-eVcrzgbR4tim7c7soKQKtxa/kQM4TzjnlU83rcZ9bHU6t31ehfV7SktN6McWgwPWg+JYMA/O3qpGxBvFq1z2Jg==",
          "3751:   integrity sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4141: https-browserify@^1.0.0:",
          "4142:   version \"1.0.0\"",
          "4143:   resolved \"https://registry.yarnpkg.com/https-browserify/-/https-browserify-1.0.0.tgz#ec06c10e0a34c0f2faf199f7fd7fc78fffd03c73\"",
          "4166: ieee754@^1.1.4:",
          "4167:   version \"1.2.1\"",
          "4168:   resolved \"https://registry.yarnpkg.com/ieee754/-/ieee754-1.2.1.tgz#8eb7a10a63fff25d15a57b001586d177d1b0d352\"",
          "4169:   integrity sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
          "4172:   version \"5.2.0\"",
          "4173:   resolved \"https://registry.yarnpkg.com/ignore/-/ignore-5.2.0.tgz#6d3bac8fa7fe0d45d9f9be7bac2fc279577e345a\"",
          "4174:   integrity sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
          "",
          "[Removed Lines]",
          "4144:   integrity sha1-7AbBDgo0wPL68Zn3/X/Hj//QPHM=",
          "4146: https-proxy-agent@^5.0.0:",
          "4147:   version \"5.0.1\"",
          "4148:   resolved \"https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz#c59ef224a04fe8b754f3db0063a25ea30d0005d6\"",
          "4149:   integrity sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
          "4150:   dependencies:",
          "4151:     agent-base \"6\"",
          "4152:     debug \"4\"",
          "4154: human-signals@^1.1.1:",
          "4155:   version \"1.1.1\"",
          "4156:   resolved \"https://registry.yarnpkg.com/human-signals/-/human-signals-1.1.1.tgz#c5b1cd14f50aeae09ab6c59fe63ba3395fe4dfa3\"",
          "4157:   integrity sha512-SEQu7vl8KjNL2eoGBLF3+wAjpsNfA9XMlXAYj/3EdaNfAlxKthD1xjEQfGOUhllCGGJVNY34bRr6lPINhNjyZw==",
          "4159: iconv-lite@0.4.24:",
          "4160:   version \"0.4.24\"",
          "4161:   resolved \"https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b\"",
          "4162:   integrity sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
          "4163:   dependencies:",
          "4164:     safer-buffer \">= 2.1.2 < 3\"",
          "4171: ignore@^5.1.8, ignore@^5.2.0:",
          "",
          "[Added Lines]",
          "3760:   integrity sha512-J+FkSdyD+0mA0N+81tMotaRMfSL9SGi+xpD3T6YApKsc3bGSXJlfXri3VyFOeYkfLRQisDk1W+jIFFKBeUBbBg==",
          "3762: human-signals@^2.1.0:",
          "3763:   version \"2.1.0\"",
          "3764:   resolved \"https://registry.yarnpkg.com/human-signals/-/human-signals-2.1.0.tgz#dc91fcba42e4d06e4abaed33b3e7a3c02f514ea0\"",
          "3765:   integrity sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
          "3772: ignore@^5.2.0:",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4192: imurmurhash@^0.1.4:",
          "4193:   version \"0.1.4\"",
          "4194:   resolved \"https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea\"",
          "4197: inflight@^1.0.4:",
          "4198:   version \"1.0.6\"",
          "4199:   resolved \"https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9\"",
          "4201:   dependencies:",
          "4202:     once \"^1.3.0\"",
          "4203:     wrappy \"1\"",
          "",
          "[Removed Lines]",
          "4195:   integrity sha1-khi5srkoojixPcT7a21XbyMUU+o=",
          "4200:   integrity sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
          "",
          "[Added Lines]",
          "3796:   integrity sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
          "3801:   integrity sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4210: inherits@2.0.1:",
          "4211:   version \"2.0.1\"",
          "4212:   resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.1.tgz#b17d08d326b4423e568eff719f91b0b1cbdf69f1\"",
          "4215: inline-source-map@~0.6.0:",
          "4216:   version \"0.6.2\"",
          "4217:   resolved \"https://registry.yarnpkg.com/inline-source-map/-/inline-source-map-0.6.2.tgz#f9393471c18a79d1724f863fa38b586370ade2a5\"",
          "4219:   dependencies:",
          "4220:     source-map \"~0.5.3\"",
          "",
          "[Removed Lines]",
          "4213:   integrity sha1-sX0I0ya0Qj5Wjv9xn5GwscvfafE=",
          "4218:   integrity sha1-+Tk0ccGKedFyT4Y/o4tYY3Ct4qU=",
          "",
          "[Added Lines]",
          "3814:   integrity sha512-8nWq2nLTAwd02jTqJExUYFSD/fKq6VH9Y/oG2accc/kdI0V98Bag8d5a4gi3XHz73rDWa2PvTtvcWYquKqSENA==",
          "3819:   integrity sha512-0mVWSSbNDvedDWIN4wxLsdPM4a7cIPcpyMxj3QZ406QRwQ6ePGB1YIHxVPjqpcUGbWQ5C+nHTwGNWAGvt7ggVA==",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4244:     has \"^1.0.3\"",
          "4245:     side-channel \"^1.0.4\"",
          "4262:   version \"1.1.1\"",
          "4263:   resolved \"https://registry.yarnpkg.com/is-arguments/-/is-arguments-1.1.1.tgz#15b3f88fda01f2a97fec84ca761a560f123efa9b\"",
          "4264:   integrity sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==",
          "",
          "[Removed Lines]",
          "4247: is-accessor-descriptor@^0.1.6:",
          "4248:   version \"0.1.6\"",
          "4249:   resolved \"https://registry.yarnpkg.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz#a9e12cb3ae8d876727eeef3843f8a0897b5c98d6\"",
          "4250:   integrity sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=",
          "4251:   dependencies:",
          "4252:     kind-of \"^3.0.2\"",
          "4254: is-accessor-descriptor@^1.0.0:",
          "4255:   version \"1.0.0\"",
          "4256:   resolved \"https://registry.yarnpkg.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz#169c2f6d3df1f992618072365c9b0ea1f6878656\"",
          "4257:   integrity sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "4258:   dependencies:",
          "4259:     kind-of \"^6.0.0\"",
          "4261: is-arguments@^1.0.4, is-arguments@^1.1.0:",
          "",
          "[Added Lines]",
          "3848: is-arguments@^1.0.4:",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4269: is-arrayish@^0.2.1:",
          "4270:   version \"0.2.1\"",
          "4271:   resolved \"https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d\"",
          "4289:   version \"1.0.4\"",
          "4290:   resolved \"https://registry.yarnpkg.com/is-bigint/-/is-bigint-1.0.4.tgz#08147a1875bc2b32005d41ccd8291dffc6691df3\"",
          "4291:   integrity sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==",
          "",
          "[Removed Lines]",
          "4272:   integrity sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=",
          "4274: is-arrow-function@^2.0.3:",
          "4275:   version \"2.0.3\"",
          "4276:   resolved \"https://registry.yarnpkg.com/is-arrow-function/-/is-arrow-function-2.0.3.tgz#29be2c2d8d9450852b8bbafb635ba7b8d8e87ec2\"",
          "4277:   integrity sha1-Kb4sLY2UUIUri7r7Y1unuNjofsI=",
          "4278:   dependencies:",
          "4279:     is-callable \"^1.0.4\"",
          "4281: is-async-function@^2.0.0:",
          "4282:   version \"2.0.0\"",
          "4283:   resolved \"https://registry.yarnpkg.com/is-async-function/-/is-async-function-2.0.0.tgz#8e4418efd3e5d3a6ebb0164c05ef5afb69aa9646\"",
          "4284:   integrity sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==",
          "4285:   dependencies:",
          "4286:     has-tostringtag \"^1.0.0\"",
          "4288: is-bigint@^1.0.1, is-bigint@^1.0.4:",
          "",
          "[Added Lines]",
          "3859:   integrity sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
          "3861: is-bigint@^1.0.1:",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "4299:   dependencies:",
          "4300:     binary-extensions \"^2.0.0\"",
          "4303:   version \"1.1.2\"",
          "4304:   resolved \"https://registry.yarnpkg.com/is-boolean-object/-/is-boolean-object-1.1.2.tgz#5c6dc200246dd9321ae4b885a114bb1f75f63719\"",
          "4305:   integrity sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==",
          "",
          "[Removed Lines]",
          "4302: is-boolean-object@^1.1.0, is-boolean-object@^1.1.2:",
          "",
          "[Added Lines]",
          "3875: is-boolean-object@^1.1.0:",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "4312:   resolved \"https://registry.yarnpkg.com/is-buffer/-/is-buffer-1.1.6.tgz#efaa2ea9daa0d7ab2ea13a97b2b8ad51fefbe8be\"",
          "4313:   integrity sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==",
          "4316:   version \"1.2.4\"",
          "4317:   resolved \"https://registry.yarnpkg.com/is-callable/-/is-callable-1.2.4.tgz#47301d58dd0259407865547853df6d61fe471945\"",
          "4318:   integrity sha512-nsuwtxZfMX67Oryl9LCQ+upnC0Z0BgpwntpS89m1H/TLF0zNfzfLMV/9Wa/6MZsj0acpEjAO0KF1xT6ZdLl95w==",
          "4327: is-core-module@^2.8.1:",
          "4328:   version \"2.9.0\"",
          "4329:   resolved \"https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.9.0.tgz#e1c34429cd51c6dd9e09e0799e396e27b19a9c69\"",
          "",
          "[Removed Lines]",
          "4315: is-callable@^1.0.4, is-callable@^1.1.4, is-callable@^1.2.4:",
          "4320: is-ci@^2.0.0:",
          "4321:   version \"2.0.0\"",
          "4322:   resolved \"https://registry.yarnpkg.com/is-ci/-/is-ci-2.0.0.tgz#6bc6334181810e04b5c22b3d589fdca55026404c\"",
          "4323:   integrity sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
          "4324:   dependencies:",
          "4325:     ci-info \"^2.0.0\"",
          "",
          "[Added Lines]",
          "3888: is-callable@^1.1.3, is-callable@^1.1.4, is-callable@^1.2.4:",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "4331:   dependencies:",
          "4332:     has \"^1.0.3\"",
          "4349:   version \"1.0.5\"",
          "4350:   resolved \"https://registry.yarnpkg.com/is-date-object/-/is-date-object-1.0.5.tgz#0841d5536e724c25597bf6ea62e1bd38298df31f\"",
          "4351:   integrity sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==",
          "4352:   dependencies:",
          "4353:     has-tostringtag \"^1.0.0\"",
          "4405: is-expression@^3.0.0:",
          "4406:   version \"3.0.0\"",
          "4407:   resolved \"https://registry.yarnpkg.com/is-expression/-/is-expression-3.0.0.tgz#39acaa6be7fd1f3471dc42c7416e61c24317ac9f\"",
          "4409:   dependencies:",
          "4410:     acorn \"~4.0.2\"",
          "4411:     object-assign \"^4.0.1\"",
          "4425: is-extglob@^2.1.1:",
          "4426:   version \"2.1.1\"",
          "4427:   resolved \"https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2\"",
          "4437: is-fullwidth-code-point@^3.0.0:",
          "4438:   version \"3.0.0\"",
          "",
          "[Removed Lines]",
          "4334: is-data-descriptor@^0.1.4:",
          "4335:   version \"0.1.4\"",
          "4336:   resolved \"https://registry.yarnpkg.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz#0b5ee648388e2c860282e793f1856fec3f301b56\"",
          "4337:   integrity sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=",
          "4338:   dependencies:",
          "4339:     kind-of \"^3.0.2\"",
          "4341: is-data-descriptor@^1.0.0:",
          "4342:   version \"1.0.0\"",
          "4343:   resolved \"https://registry.yarnpkg.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz#d84876321d0e7add03990406abbbbd36ba9268c7\"",
          "4344:   integrity sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "4345:   dependencies:",
          "4346:     kind-of \"^6.0.0\"",
          "4348: is-date-object@^1.0.1, is-date-object@^1.0.5:",
          "4355: is-descriptor@^0.1.0:",
          "4356:   version \"0.1.6\"",
          "4357:   resolved \"https://registry.yarnpkg.com/is-descriptor/-/is-descriptor-0.1.6.tgz#366d8240dde487ca51823b1ab9f07a10a78251ca\"",
          "4358:   integrity sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==",
          "4359:   dependencies:",
          "4360:     is-accessor-descriptor \"^0.1.6\"",
          "4361:     is-data-descriptor \"^0.1.4\"",
          "4362:     kind-of \"^5.0.0\"",
          "4364: is-descriptor@^1.0.0, is-descriptor@^1.0.2:",
          "4365:   version \"1.0.2\"",
          "4366:   resolved \"https://registry.yarnpkg.com/is-descriptor/-/is-descriptor-1.0.2.tgz#3b159746a66604b04f8c81524ba365c5f14d86ec\"",
          "4367:   integrity sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "4368:   dependencies:",
          "4369:     is-accessor-descriptor \"^1.0.0\"",
          "4370:     is-data-descriptor \"^1.0.0\"",
          "4371:     kind-of \"^6.0.2\"",
          "4373: is-docker@^2.0.0:",
          "4374:   version \"2.2.1\"",
          "4375:   resolved \"https://registry.yarnpkg.com/is-docker/-/is-docker-2.2.1.tgz#33eeabe23cfe86f14bde4408a02c0cfb853acdaa\"",
          "4376:   integrity sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
          "4378: is-equal@^1.5.1:",
          "4379:   version \"1.6.4\"",
          "4380:   resolved \"https://registry.yarnpkg.com/is-equal/-/is-equal-1.6.4.tgz#9a51b9ff565637ca2452356e293e9c98a1490ea1\"",
          "4381:   integrity sha512-NiPOTBb5ahmIOYkJ7mVTvvB1bydnTzixvfO+59AjJKBpyjPBIULL3EHGxySyZijlVpewveJyhiLQThcivkkAtw==",
          "4382:   dependencies:",
          "4383:     es-get-iterator \"^1.1.2\"",
          "4384:     functions-have-names \"^1.2.2\"",
          "4385:     has \"^1.0.3\"",
          "4386:     has-bigints \"^1.0.1\"",
          "4387:     has-symbols \"^1.0.2\"",
          "4388:     is-arrow-function \"^2.0.3\"",
          "4389:     is-bigint \"^1.0.4\"",
          "4390:     is-boolean-object \"^1.1.2\"",
          "4391:     is-callable \"^1.2.4\"",
          "4392:     is-date-object \"^1.0.5\"",
          "4393:     is-generator-function \"^1.0.10\"",
          "4394:     is-number-object \"^1.0.6\"",
          "4395:     is-regex \"^1.1.4\"",
          "4396:     is-string \"^1.0.7\"",
          "4397:     is-symbol \"^1.0.4\"",
          "4398:     isarray \"^2.0.5\"",
          "4399:     object-inspect \"^1.12.0\"",
          "4400:     object.entries \"^1.1.5\"",
          "4401:     object.getprototypeof \"^1.0.3\"",
          "4402:     which-boxed-primitive \"^1.0.2\"",
          "4403:     which-collection \"^1.0.1\"",
          "4408:   integrity sha1-Oayqa+f9HzRx3ELHQW5hwkMXrJ8=",
          "4413: is-extendable@^0.1.0, is-extendable@^0.1.1:",
          "4414:   version \"0.1.1\"",
          "4415:   resolved \"https://registry.yarnpkg.com/is-extendable/-/is-extendable-0.1.1.tgz#62b110e289a471418e3ec36a617d472e301dfc89\"",
          "4416:   integrity sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=",
          "4418: is-extendable@^1.0.1:",
          "4419:   version \"1.0.1\"",
          "4420:   resolved \"https://registry.yarnpkg.com/is-extendable/-/is-extendable-1.0.1.tgz#a7470f9e426733d81bd81e1155264e3a3507cab4\"",
          "4421:   integrity sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
          "4422:   dependencies:",
          "4423:     is-plain-object \"^2.0.4\"",
          "4428:   integrity sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
          "4430: is-finalizationregistry@^1.0.2:",
          "4431:   version \"1.0.2\"",
          "4432:   resolved \"https://registry.yarnpkg.com/is-finalizationregistry/-/is-finalizationregistry-1.0.2.tgz#c8749b65f17c133313e661b1289b95ad3dbd62e6\"",
          "4433:   integrity sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==",
          "4434:   dependencies:",
          "4435:     call-bind \"^1.0.2\"",
          "",
          "[Added Lines]",
          "3900: is-date-object@^1.0.1:",
          "3910:   integrity sha512-vyMeQMq+AiH5uUnoBfMTwf18tO3bM6k1QXBE9D6ueAAquEfCZe3AJPtud9g6qS0+4X8xA7ndpZiDyeb2l2qOBw==",
          "3918:   integrity sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "4444:   resolved \"https://registry.yarnpkg.com/is-generator-fn/-/is-generator-fn-2.1.0.tgz#7d140adc389aaf3011a8f2a2a4cfa6faadffb118\"",
          "4445:   integrity sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
          "4448:   version \"1.0.10\"",
          "4449:   resolved \"https://registry.yarnpkg.com/is-generator-function/-/is-generator-function-1.0.10.tgz#f1558baf1ac17e0deea7c0415c438351ff2b3c72\"",
          "4450:   integrity sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==",
          "",
          "[Removed Lines]",
          "4447: is-generator-function@^1.0.10, is-generator-function@^1.0.7:",
          "",
          "[Added Lines]",
          "3930: is-generator-function@^1.0.7:",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "4458:   dependencies:",
          "4459:     is-extglob \"^2.1.1\"",
          "4466: is-negative-zero@^2.0.2:",
          "4467:   version \"2.0.2\"",
          "4468:   resolved \"https://registry.yarnpkg.com/is-negative-zero/-/is-negative-zero-2.0.2.tgz#7bf6f03a28003b8b3965de3ac26f664d765f3150\"",
          "4469:   integrity sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==",
          "4472:   version \"1.0.7\"",
          "4473:   resolved \"https://registry.yarnpkg.com/is-number-object/-/is-number-object-1.0.7.tgz#59d50ada4c45251784e9904f5246c742f07a42fc\"",
          "4474:   integrity sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==",
          "4475:   dependencies:",
          "4476:     has-tostringtag \"^1.0.0\"",
          "4485: is-number@^7.0.0:",
          "4486:   version \"7.0.0\"",
          "4487:   resolved \"https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b\"",
          "4488:   integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
          "4491:   version \"2.0.4\"",
          "4492:   resolved \"https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-2.0.4.tgz#2c163b3fafb1b606d9d17928f05c2a1c38e07677\"",
          "4493:   integrity sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
          "",
          "[Removed Lines]",
          "4461: is-map@^2.0.1, is-map@^2.0.2:",
          "4462:   version \"2.0.2\"",
          "4463:   resolved \"https://registry.yarnpkg.com/is-map/-/is-map-2.0.2.tgz#00922db8c9bf73e81b7a335827bc2a43f2b91127\"",
          "4464:   integrity sha512-cOZFQQozTha1f4MxLFzlgKYPTyj26picdZTx82hbc/Xf4K/tZOOXSCkMvU4pKioRXGDLJRn0GM7Upe7kR721yg==",
          "4471: is-number-object@^1.0.4, is-number-object@^1.0.6:",
          "4478: is-number@^3.0.0:",
          "4479:   version \"3.0.0\"",
          "4480:   resolved \"https://registry.yarnpkg.com/is-number/-/is-number-3.0.0.tgz#24fd6201a4782cf50561c810276afc7d12d71195\"",
          "4481:   integrity sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=",
          "4482:   dependencies:",
          "4483:     kind-of \"^3.0.2\"",
          "4490: is-plain-object@^2.0.3, is-plain-object@^2.0.4:",
          "",
          "[Added Lines]",
          "3949: is-number-object@^1.0.4:",
          "3961: is-plain-object@^2.0.4:",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "4499:   resolved \"https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-5.0.0.tgz#4427f50ab3429e9025ea7d52e9043a9ef4159344\"",
          "4500:   integrity sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
          "4507: is-promise@^2.0.0, is-promise@^2.2.2:",
          "4508:   version \"2.2.2\"",
          "4509:   resolved \"https://registry.yarnpkg.com/is-promise/-/is-promise-2.2.2.tgz#39ab959ccbf9a774cf079f7b40c7a26f763135f1\"",
          "",
          "[Removed Lines]",
          "4502: is-potential-custom-element-name@^1.0.1:",
          "4503:   version \"1.0.1\"",
          "4504:   resolved \"https://registry.yarnpkg.com/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz#171ed6f19e3ac554394edf78caa05784a45bebb5\"",
          "4505:   integrity sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "4517:     call-bind \"^1.0.2\"",
          "4518:     has-tostringtag \"^1.0.0\"",
          "4525: is-shared-array-buffer@^1.0.2:",
          "4526:   version \"1.0.2\"",
          "4527:   resolved \"https://registry.yarnpkg.com/is-shared-array-buffer/-/is-shared-array-buffer-1.0.2.tgz#8f259c573b60b6a32d4058a1a07430c0a7344c79\"",
          "",
          "[Removed Lines]",
          "4520: is-set@^2.0.1, is-set@^2.0.2:",
          "4521:   version \"2.0.2\"",
          "4522:   resolved \"https://registry.yarnpkg.com/is-set/-/is-set-2.0.2.tgz#90755fa4c2562dc1c5d4024760d6119b94ca18ec\"",
          "4523:   integrity sha512-+2cnTEZeY5z/iXGbLhPrOAaK/Mau5k5eXq9j14CpRTftq0pAJu2MwVRSZhyZWBzx3o6X795Lz6Bpb6R0GKf37g==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "4529:   dependencies:",
          "4530:     call-bind \"^1.0.2\"",
          "4537: is-stream@^2.0.0:",
          "4538:   version \"2.0.1\"",
          "4539:   resolved \"https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.1.tgz#fac1e3d53b97ad5a9d0ae9cef2389f5810a5c077\"",
          "4540:   integrity sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
          "4542: is-string@^1.0.5, is-string@^1.0.7:",
          "4543:   version \"1.0.7\"",
          "4544:   resolved \"https://registry.yarnpkg.com/is-string/-/is-string-1.0.7.tgz#0dd12bf2006f255bb58f695110eff7491eebc0fd\"",
          "",
          "[Removed Lines]",
          "4532: is-stream@^1.1.0, is-stream@~1.1.0:",
          "4533:   version \"1.1.0\"",
          "4534:   resolved \"https://registry.yarnpkg.com/is-stream/-/is-stream-1.1.0.tgz#12d4a3dd4e68e0b79ceb8dbc84173ae80d91ca44\"",
          "4535:   integrity sha1-EtSj3U5o4Lec6428hBc66A2RykQ=",
          "",
          "[Added Lines]",
          "3998: is-stream@~1.1.0:",
          "3999:   version \"1.1.0\"",
          "4000:   resolved \"https://registry.yarnpkg.com/is-stream/-/is-stream-1.1.0.tgz#12d4a3dd4e68e0b79ceb8dbc84173ae80d91ca44\"",
          "4001:   integrity sha512-uQPm8kcs47jx38atAcWTVxyltQYoPT68y9aWYdV6yWXSyW8mzSat0TL6CiWdZeCdF3KrAvpVtnHbTv4RN+rqdQ==",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "4546:   dependencies:",
          "4547:     has-tostringtag \"^1.0.0\"",
          "4550:   version \"1.0.4\"",
          "4551:   resolved \"https://registry.yarnpkg.com/is-symbol/-/is-symbol-1.0.4.tgz#a6dac93b635b063ca6872236de88910a57af139c\"",
          "4552:   integrity sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==",
          "4553:   dependencies:",
          "4554:     has-symbols \"^1.0.2\"",
          "4560:   dependencies:",
          "4561:     available-typed-arrays \"^1.0.5\"",
          "4562:     call-bind \"^1.0.2\"",
          "4565:     has-tostringtag \"^1.0.0\"",
          "4568:   version \"1.0.0\"",
          "4569:   resolved \"https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a\"",
          "4572: is-utf8@^0.2.0:",
          "4573:   version \"0.2.1\"",
          "4574:   resolved \"https://registry.yarnpkg.com/is-utf8/-/is-utf8-0.2.1.tgz#4b0da1442104d1b336340e80797e865cf39f7d72\"",
          "4582: is-weakref@^1.0.2:",
          "4583:   version \"1.0.2\"",
          "",
          "[Removed Lines]",
          "4549: is-symbol@^1.0.2, is-symbol@^1.0.3, is-symbol@^1.0.4:",
          "4556: is-typed-array@^1.1.3, is-typed-array@^1.1.7:",
          "4557:   version \"1.1.8\"",
          "4558:   resolved \"https://registry.yarnpkg.com/is-typed-array/-/is-typed-array-1.1.8.tgz#cbaa6585dc7db43318bc5b89523ea384a6f65e79\"",
          "4559:   integrity sha512-HqH41TNZq2fgtGT8WHVFVJhBVGuY3AnP3Q36K8JKXUxSxRgk/d+7NjmwG2vo2mYmXK8UYZKu0qH8bVP5gEisjA==",
          "4563:     es-abstract \"^1.18.5\"",
          "4564:     foreach \"^2.0.5\"",
          "4567: is-typedarray@^1.0.0, is-typedarray@~1.0.0:",
          "4570:   integrity sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=",
          "4575:   integrity sha1-Sw2hRCEE0bM2NA6AeX6GXPOffXI=",
          "4577: is-weakmap@^2.0.1:",
          "4578:   version \"2.0.1\"",
          "4579:   resolved \"https://registry.yarnpkg.com/is-weakmap/-/is-weakmap-2.0.1.tgz#5008b59bdc43b698201d18f62b37b2ca243e8cf2\"",
          "4580:   integrity sha512-NSBR4kH5oVj1Uwvv970ruUkCV7O1mzgVFO4/rev2cLRda9Tm9HrL70ZPut4rOHgY0FNrUu9BCbXA2sdQ+x0chA==",
          "",
          "[Added Lines]",
          "4010: is-symbol@^1.0.2, is-symbol@^1.0.3:",
          "4017: is-typed-array@^1.1.3, is-typed-array@^1.1.9:",
          "4018:   version \"1.1.9\"",
          "4019:   resolved \"https://registry.yarnpkg.com/is-typed-array/-/is-typed-array-1.1.9.tgz#246d77d2871e7d9f5aeb1d54b9f52c71329ece67\"",
          "4020:   integrity sha512-kfrlnTTn8pZkfpJMUgYD7YZ3qzeJgWUn8XfVYBARc4wnmNOmLbmuuaAs3q5fvB0UJOn6yHAKaGTPM7d6ezoD/A==",
          "4024:     es-abstract \"^1.20.0\"",
          "4025:     for-each \"^0.3.3\"",
          "4028: is-typedarray@~1.0.0:",
          "4031:   integrity sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
          "4036:   integrity sha512-rMYPYvCzsXywIsldgLaSoPlw5PfoB/ssr7hY4pLfcodrA5M/eArza1a9VmTiNIBNMjOGr1Ow9mTyU2o69U6U9Q==",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "4586:   dependencies:",
          "4587:     call-bind \"^1.0.2\"",
          "4610:   version \"1.0.0\"",
          "4611:   resolved \"https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11\"",
          "4619: isexe@^2.0.0:",
          "4620:   version \"2.0.0\"",
          "4621:   resolved \"https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10\"",
          "4632:   version \"3.0.1\"",
          "4633:   resolved \"https://registry.yarnpkg.com/isobject/-/isobject-3.0.1.tgz#4e431e92b11a9731636aa1f9c8d1ccbcfdab78df\"",
          "4636: isstream@~0.1.2:",
          "4637:   version \"0.1.2\"",
          "4638:   resolved \"https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a\"",
          "4641: istanbul-lib-coverage@^3.0.0, istanbul-lib-coverage@^3.2.0:",
          "4642:   version \"3.2.0\"",
          "4643:   resolved \"https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz#189e7909d0a39fa5a3dfad5b03f71947770191d3\"",
          "4644:   integrity sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
          "4657:   version \"5.2.0\"",
          "4658:   resolved \"https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.0.tgz#31d18bdd127f825dd02ea7bfdfd906f8ab840e9f\"",
          "4659:   integrity sha512-6Lthe1hqXHBNsqvgDzGO6l03XNeu3CrG4RqQ1KM9+l5+jNGpEJfIELx1NS3SEHmJQA8np/u+E4EPRKRiu6m19A==",
          "",
          "[Removed Lines]",
          "4589: is-weakset@^2.0.1:",
          "4590:   version \"2.0.2\"",
          "4591:   resolved \"https://registry.yarnpkg.com/is-weakset/-/is-weakset-2.0.2.tgz#4569d67a747a1ce5a994dfd4ef6dcea76e7c0a1d\"",
          "4592:   integrity sha512-t2yVvttHkQktwnNNmBQ98AhENLdPUTDTE21uPqAQ0ARwQfGeQKRVS0NNurH7bTf7RrvcVn1OOge45CnBeHCSmg==",
          "4593:   dependencies:",
          "4594:     call-bind \"^1.0.2\"",
          "4595:     get-intrinsic \"^1.1.1\"",
          "4597: is-windows@^1.0.2:",
          "4598:   version \"1.0.2\"",
          "4599:   resolved \"https://registry.yarnpkg.com/is-windows/-/is-windows-1.0.2.tgz#d1850eb9791ecd18e6182ce12a30f396634bb19d\"",
          "4600:   integrity sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==",
          "4602: is-wsl@^2.2.0:",
          "4603:   version \"2.2.0\"",
          "4604:   resolved \"https://registry.yarnpkg.com/is-wsl/-/is-wsl-2.2.0.tgz#74a4c76e77ca9fd3f932f290c17ea326cd157271\"",
          "4605:   integrity sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
          "4606:   dependencies:",
          "4607:     is-docker \"^2.0.0\"",
          "4609: isarray@1.0.0, isarray@~1.0.0:",
          "4612:   integrity sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
          "4614: isarray@^2.0.5:",
          "4615:   version \"2.0.5\"",
          "4616:   resolved \"https://registry.yarnpkg.com/isarray/-/isarray-2.0.5.tgz#8af1e4c1221244cc62459faf38940d4e644a5723\"",
          "4617:   integrity sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
          "4622:   integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
          "4624: isobject@^2.0.0:",
          "4625:   version \"2.1.0\"",
          "4626:   resolved \"https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89\"",
          "4627:   integrity sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=",
          "4628:   dependencies:",
          "4629:     isarray \"1.0.0\"",
          "4631: isobject@^3.0.0, isobject@^3.0.1:",
          "4634:   integrity sha1-TkMekrEalzFjaqH5yNHMvP2reN8=",
          "4639:   integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
          "4646: istanbul-lib-instrument@^4.0.3:",
          "4647:   version \"4.0.3\"",
          "4648:   resolved \"https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-4.0.3.tgz#873c6fff897450118222774696a3f28902d77c1d\"",
          "4649:   integrity sha512-BXgQl9kf4WTCPCCpmFGoJkz/+uhvm7h7PFKUYxh7qarQd3ER33vHG//qaE8eN25l07YqZPpHXU9I09l/RD5aGQ==",
          "4650:   dependencies:",
          "4651:     \"@babel/core\" \"^7.7.5\"",
          "4652:     \"@istanbuljs/schema\" \"^0.1.2\"",
          "4653:     istanbul-lib-coverage \"^3.0.0\"",
          "4654:     semver \"^6.3.0\"",
          "4656: istanbul-lib-instrument@^5.0.4:",
          "",
          "[Added Lines]",
          "4045: isarray@~1.0.0:",
          "4048:   integrity sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
          "4053:   integrity sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
          "4055: isobject@^3.0.1:",
          "4058:   integrity sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==",
          "4063:   integrity sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
          "4070: istanbul-lib-instrument@^5.0.4, istanbul-lib-instrument@^5.1.0:",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "4682:     istanbul-lib-coverage \"^3.0.0\"",
          "4683:     source-map \"^0.6.1\"",
          "4686:   version \"3.1.4\"",
          "4687:   resolved \"https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-3.1.4.tgz#1b6f068ecbc6c331040aab5741991273e609e40c\"",
          "4688:   integrity sha512-r1/DshN4KSE7xWEknZLLLLDn5CJybV3nw01VTkp6D5jzLuELlcbudfj/eSQFvrKsJuTVCGnePO7ho82Nw9zzfw==",
          "",
          "[Removed Lines]",
          "4685: istanbul-reports@^3.0.2, istanbul-reports@^3.1.4:",
          "",
          "[Added Lines]",
          "4099: istanbul-reports@^3.1.3, istanbul-reports@^3.1.4:",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "4690:     html-escaper \"^2.0.0\"",
          "4691:     istanbul-lib-report \"^3.0.0\"",
          "4697:   dependencies:",
          "4706:   dependencies:",
          "4710:     chalk \"^4.0.0\"",
          "4711:     exit \"^0.1.2\"",
          "4713:     import-local \"^3.0.2\"",
          "4718:     prompts \"^2.0.1\"",
          "4725:   dependencies:",
          "4730:     chalk \"^4.0.0\"",
          "4731:     deepmerge \"^4.2.2\"",
          "4749:   dependencies:",
          "4750:     chalk \"^4.0.0\"",
          "4759:   dependencies:",
          "4760:     detect-newline \"^3.0.0\"",
          "4766:   dependencies:",
          "4768:     chalk \"^4.0.0\"",
          "4781:     \"@types/node\" \"*\"",
          "4810:     \"@types/node\" \"*\"",
          "4811:     anymatch \"^3.0.3\"",
          "4812:     fb-watchman \"^2.0.0\"",
          "4820:     walker \"^1.0.7\"",
          "4821:   optionalDependencies:",
          "4856: jest-localstorage-mock@^2.4.6:",
          "4857:   version \"2.4.21\"",
          "4858:   resolved \"https://registry.yarnpkg.com/jest-localstorage-mock/-/jest-localstorage-mock-2.4.21.tgz#920aa6fc8f8ab2f81e40433e48e2efdb2d81a6e0\"",
          "4859:   integrity sha512-IBXPBufnfPyr4VkoQeJ+zlfWlG84P0KbL4ejcV9j3xNI0v6OWznQlH6Ke9xjSarleR11090oSeWADSUow0PmFw==",
          "4865:   dependencies:",
          "4866:     chalk \"^4.0.0\"",
          "4875:   dependencies:",
          "4878:     \"@types/stack-utils\" \"^2.0.0\"",
          "4879:     chalk \"^4.0.0\"",
          "4883:     slash \"^3.0.0\"",
          "4890:   dependencies:",
          "4892:     \"@types/node\" \"*\"",
          "4894: jest-pnp-resolver@^1.2.2:",
          "",
          "[Removed Lines]",
          "4693: jest-changed-files@^26.6.2:",
          "4694:   version \"26.6.2\"",
          "4695:   resolved \"https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-26.6.2.tgz#f6198479e1cc66f22f9ae1e22acaa0b429c042d0\"",
          "4696:   integrity sha512-fDS7szLcY9sCtIip8Fjry9oGf3I2ht/QT21bAHm5Dmf0mD4X3ReNUf17y+bO6fR8WgbIZTlbyG1ak/53cbRzKQ==",
          "4698:     \"@jest/types\" \"^26.6.2\"",
          "4699:     execa \"^4.0.0\"",
          "4700:     throat \"^5.0.0\"",
          "4702: jest-cli@^26.6.3:",
          "4703:   version \"26.6.3\"",
          "4704:   resolved \"https://registry.yarnpkg.com/jest-cli/-/jest-cli-26.6.3.tgz#43117cfef24bc4cd691a174a8796a532e135e92a\"",
          "4705:   integrity sha512-GF9noBSa9t08pSyl3CY4frMrqp+aQXFGFkf5hEPbh/pIUFYWMK6ZLTfbmadxJVcJrdRoChlWQsA2VkJcDFK8hg==",
          "4707:     \"@jest/core\" \"^26.6.3\"",
          "4708:     \"@jest/test-result\" \"^26.6.2\"",
          "4709:     \"@jest/types\" \"^26.6.2\"",
          "4712:     graceful-fs \"^4.2.4\"",
          "4714:     is-ci \"^2.0.0\"",
          "4715:     jest-config \"^26.6.3\"",
          "4716:     jest-util \"^26.6.2\"",
          "4717:     jest-validate \"^26.6.2\"",
          "4719:     yargs \"^15.4.1\"",
          "4721: jest-config@^26.6.3:",
          "4722:   version \"26.6.3\"",
          "4723:   resolved \"https://registry.yarnpkg.com/jest-config/-/jest-config-26.6.3.tgz#64f41444eef9eb03dc51d5c53b75c8c71f645349\"",
          "4724:   integrity sha512-t5qdIj/bCj2j7NFVHb2nFB4aUdfucDn3JRKgrZnplb8nieAirAzRSHP8uDEd+qV6ygzg9Pz4YG7UTJf94LPSyg==",
          "4726:     \"@babel/core\" \"^7.1.0\"",
          "4727:     \"@jest/test-sequencer\" \"^26.6.3\"",
          "4728:     \"@jest/types\" \"^26.6.2\"",
          "4729:     babel-jest \"^26.6.3\"",
          "4732:     glob \"^7.1.1\"",
          "4733:     graceful-fs \"^4.2.4\"",
          "4734:     jest-environment-jsdom \"^26.6.2\"",
          "4735:     jest-environment-node \"^26.6.2\"",
          "4736:     jest-get-type \"^26.3.0\"",
          "4737:     jest-jasmine2 \"^26.6.3\"",
          "4738:     jest-regex-util \"^26.0.0\"",
          "4739:     jest-resolve \"^26.6.2\"",
          "4740:     jest-util \"^26.6.2\"",
          "4741:     jest-validate \"^26.6.2\"",
          "4742:     micromatch \"^4.0.2\"",
          "4743:     pretty-format \"^26.6.2\"",
          "4745: jest-diff@^26.0.0, jest-diff@^26.6.2:",
          "4746:   version \"26.6.2\"",
          "4747:   resolved \"https://registry.yarnpkg.com/jest-diff/-/jest-diff-26.6.2.tgz#1aa7468b52c3a68d7d5c5fdcdfcd5e49bd164394\"",
          "4748:   integrity sha512-6m+9Z3Gv9wN0WFVasqjCL/06+EFCMTqDEUl/b87HYK2rAPTyfz4ZIuSlPhY51PIQRWx5TaxeF1qmXKe9gfN3sA==",
          "4751:     diff-sequences \"^26.6.2\"",
          "4752:     jest-get-type \"^26.3.0\"",
          "4753:     pretty-format \"^26.6.2\"",
          "4755: jest-docblock@^26.0.0:",
          "4756:   version \"26.0.0\"",
          "4757:   resolved \"https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-26.0.0.tgz#3e2fa20899fc928cb13bd0ff68bd3711a36889b5\"",
          "4758:   integrity sha512-RDZ4Iz3QbtRWycd8bUEPxQsTlYazfYn/h5R65Fc6gOfwozFhoImx+affzky/FFBuqISPTqjXomoIGJVKBWoo0w==",
          "4762: jest-each@^26.6.2:",
          "4763:   version \"26.6.2\"",
          "4764:   resolved \"https://registry.yarnpkg.com/jest-each/-/jest-each-26.6.2.tgz#02526438a77a67401c8a6382dfe5999952c167cb\"",
          "4765:   integrity sha512-Mer/f0KaATbjl8MCJ+0GEpNdqmnVmDYqCTJYTvoo7rqmRiDllmp2AYN+06F93nXcY3ur9ShIjS+CO/uD+BbH4A==",
          "4767:     \"@jest/types\" \"^26.6.2\"",
          "4769:     jest-get-type \"^26.3.0\"",
          "4770:     jest-util \"^26.6.2\"",
          "4771:     pretty-format \"^26.6.2\"",
          "4773: jest-environment-jsdom@^26.6.2:",
          "4774:   version \"26.6.2\"",
          "4775:   resolved \"https://registry.yarnpkg.com/jest-environment-jsdom/-/jest-environment-jsdom-26.6.2.tgz#78d09fe9cf019a357009b9b7e1f101d23bd1da3e\"",
          "4776:   integrity sha512-jgPqCruTlt3Kwqg5/WVFyHIOJHsiAvhcp2qiR2QQstuG9yWox5+iHpU3ZrcBxW14T4fe5Z68jAfLRh7joCSP2Q==",
          "4777:   dependencies:",
          "4778:     \"@jest/environment\" \"^26.6.2\"",
          "4779:     \"@jest/fake-timers\" \"^26.6.2\"",
          "4780:     \"@jest/types\" \"^26.6.2\"",
          "4782:     jest-mock \"^26.6.2\"",
          "4783:     jest-util \"^26.6.2\"",
          "4784:     jsdom \"^16.4.0\"",
          "4786: jest-environment-node@^26.6.2:",
          "4787:   version \"26.6.2\"",
          "4788:   resolved \"https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-26.6.2.tgz#824e4c7fb4944646356f11ac75b229b0035f2b0c\"",
          "4789:   integrity sha512-zhtMio3Exty18dy8ee8eJ9kjnRyZC1N4C1Nt/VShN1apyXc8rWGtJ9lI7vqiWcyyXS4BVSEn9lxAM2D+07/Tag==",
          "4790:   dependencies:",
          "4791:     \"@jest/environment\" \"^26.6.2\"",
          "4792:     \"@jest/fake-timers\" \"^26.6.2\"",
          "4793:     \"@jest/types\" \"^26.6.2\"",
          "4794:     \"@types/node\" \"*\"",
          "4795:     jest-mock \"^26.6.2\"",
          "4796:     jest-util \"^26.6.2\"",
          "4798: jest-get-type@^26.3.0:",
          "4799:   version \"26.3.0\"",
          "4800:   resolved \"https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-26.3.0.tgz#e97dc3c3f53c2b406ca7afaed4493b1d099199e0\"",
          "4801:   integrity sha512-TpfaviN1R2pQWkIihlfEanwOXK0zcxrKEE4MlU6Tn7keoXdN6/3gK/xl0yEh8DOunn5pOVGKf8hB4R9gVh04ig==",
          "4803: jest-haste-map@^26.6.2:",
          "4804:   version \"26.6.2\"",
          "4805:   resolved \"https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-26.6.2.tgz#dd7e60fe7dc0e9f911a23d79c5ff7fb5c2cafeaa\"",
          "4806:   integrity sha512-easWIJXIw71B2RdR8kgqpjQrbMRWQBgiBwXYEhtGUTaX+doCjBheluShdDMeR8IMfJiTqH4+zfhtg29apJf/8w==",
          "4807:   dependencies:",
          "4808:     \"@jest/types\" \"^26.6.2\"",
          "4809:     \"@types/graceful-fs\" \"^4.1.2\"",
          "4813:     graceful-fs \"^4.2.4\"",
          "4814:     jest-regex-util \"^26.0.0\"",
          "4815:     jest-serializer \"^26.6.2\"",
          "4816:     jest-util \"^26.6.2\"",
          "4817:     jest-worker \"^26.6.2\"",
          "4818:     micromatch \"^4.0.2\"",
          "4819:     sane \"^4.0.3\"",
          "4822:     fsevents \"^2.1.2\"",
          "4824: jest-jasmine2@^26.6.3:",
          "4825:   version \"26.6.3\"",
          "4826:   resolved \"https://registry.yarnpkg.com/jest-jasmine2/-/jest-jasmine2-26.6.3.tgz#adc3cf915deacb5212c93b9f3547cd12958f2edd\"",
          "4827:   integrity sha512-kPKUrQtc8aYwBV7CqBg5pu+tmYXlvFlSFYn18ev4gPFtrRzB15N2gW/Roew3187q2w2eHuu0MU9TJz6w0/nPEg==",
          "4828:   dependencies:",
          "4829:     \"@babel/traverse\" \"^7.1.0\"",
          "4830:     \"@jest/environment\" \"^26.6.2\"",
          "4831:     \"@jest/source-map\" \"^26.6.2\"",
          "4832:     \"@jest/test-result\" \"^26.6.2\"",
          "4833:     \"@jest/types\" \"^26.6.2\"",
          "4834:     \"@types/node\" \"*\"",
          "4835:     chalk \"^4.0.0\"",
          "4836:     co \"^4.6.0\"",
          "4837:     expect \"^26.6.2\"",
          "4838:     is-generator-fn \"^2.0.0\"",
          "4839:     jest-each \"^26.6.2\"",
          "4840:     jest-matcher-utils \"^26.6.2\"",
          "4841:     jest-message-util \"^26.6.2\"",
          "4842:     jest-runtime \"^26.6.3\"",
          "4843:     jest-snapshot \"^26.6.2\"",
          "4844:     jest-util \"^26.6.2\"",
          "4845:     pretty-format \"^26.6.2\"",
          "4846:     throat \"^5.0.0\"",
          "4848: jest-leak-detector@^26.6.2:",
          "4849:   version \"26.6.2\"",
          "4850:   resolved \"https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-26.6.2.tgz#7717cf118b92238f2eba65054c8a0c9c653a91af\"",
          "4851:   integrity sha512-i4xlXpsVSMeKvg2cEKdfhh0H39qlJlP5Ex1yQxwF9ubahboQYMgTtz5oML35AVA3B4Eu+YsmwaiKVev9KCvLxg==",
          "4852:   dependencies:",
          "4853:     jest-get-type \"^26.3.0\"",
          "4854:     pretty-format \"^26.6.2\"",
          "4861: jest-matcher-utils@^26.6.2:",
          "4862:   version \"26.6.2\"",
          "4863:   resolved \"https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-26.6.2.tgz#8e6fd6e863c8b2d31ac6472eeb237bc595e53e7a\"",
          "4864:   integrity sha512-llnc8vQgYcNqDrqRDXWwMr9i7rS5XFiCwvh6DTP7Jqa2mqpcCBBlpCbn+trkG0KNhPu/h8rzyBkriOtBstvWhw==",
          "4867:     jest-diff \"^26.6.2\"",
          "4868:     jest-get-type \"^26.3.0\"",
          "4869:     pretty-format \"^26.6.2\"",
          "4871: jest-message-util@^26.6.2:",
          "4872:   version \"26.6.2\"",
          "4873:   resolved \"https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-26.6.2.tgz#58173744ad6fc0506b5d21150b9be56ef001ca07\"",
          "4874:   integrity sha512-rGiLePzQ3AzwUshu2+Rn+UMFk0pHN58sOG+IaJbk5Jxuqo3NYO1U2/MIR4S1sKgsoYSXSzdtSa0TgrmtUwEbmA==",
          "4876:     \"@babel/code-frame\" \"^7.0.0\"",
          "4877:     \"@jest/types\" \"^26.6.2\"",
          "4880:     graceful-fs \"^4.2.4\"",
          "4881:     micromatch \"^4.0.2\"",
          "4882:     pretty-format \"^26.6.2\"",
          "4884:     stack-utils \"^2.0.2\"",
          "4886: jest-mock@^26.6.2:",
          "4887:   version \"26.6.2\"",
          "4888:   resolved \"https://registry.yarnpkg.com/jest-mock/-/jest-mock-26.6.2.tgz#d6cb712b041ed47fe0d9b6fc3474bc6543feb302\"",
          "4889:   integrity sha512-YyFjePHHp1LzpzYcmgqkJ0nm0gg/lJx2aZFzFy1S6eUqNjXsOqTK10zNRff2dNfssgokjkG65OlWNcIlgd3zew==",
          "4891:     \"@jest/types\" \"^26.6.2\"",
          "",
          "[Added Lines]",
          "4107: jest-changed-files@^28.0.2:",
          "4108:   version \"28.0.2\"",
          "4109:   resolved \"https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-28.0.2.tgz#7d7810660a5bd043af9e9cfbe4d58adb05e91531\"",
          "4110:   integrity sha512-QX9u+5I2s54ZnGoMEjiM2WeBvJR2J7w/8ZUmH2um/WLAuGAYFQcsVXY9+1YL6k0H/AGUdH8pXUAv6erDqEsvIA==",
          "4112:     execa \"^5.0.0\"",
          "4113:     throat \"^6.0.1\"",
          "4115: jest-circus@^28.1.0:",
          "4116:   version \"28.1.0\"",
          "4117:   resolved \"https://registry.yarnpkg.com/jest-circus/-/jest-circus-28.1.0.tgz#e229f590911bd54d60efaf076f7acd9360296dae\"",
          "4118:   integrity sha512-rNYfqfLC0L0zQKRKsg4n4J+W1A2fbyGH7Ss/kDIocp9KXD9iaL111glsLu7+Z7FHuZxwzInMDXq+N1ZIBkI/TQ==",
          "4119:   dependencies:",
          "4120:     \"@jest/environment\" \"^28.1.0\"",
          "4121:     \"@jest/expect\" \"^28.1.0\"",
          "4122:     \"@jest/test-result\" \"^28.1.0\"",
          "4123:     \"@jest/types\" \"^28.1.0\"",
          "4124:     \"@types/node\" \"*\"",
          "4125:     chalk \"^4.0.0\"",
          "4126:     co \"^4.6.0\"",
          "4127:     dedent \"^0.7.0\"",
          "4128:     is-generator-fn \"^2.0.0\"",
          "4129:     jest-each \"^28.1.0\"",
          "4130:     jest-matcher-utils \"^28.1.0\"",
          "4131:     jest-message-util \"^28.1.0\"",
          "4132:     jest-runtime \"^28.1.0\"",
          "4133:     jest-snapshot \"^28.1.0\"",
          "4134:     jest-util \"^28.1.0\"",
          "4135:     pretty-format \"^28.1.0\"",
          "4136:     slash \"^3.0.0\"",
          "4137:     stack-utils \"^2.0.3\"",
          "4138:     throat \"^6.0.1\"",
          "4140: jest-cli@^28.1.0:",
          "4141:   version \"28.1.0\"",
          "4142:   resolved \"https://registry.yarnpkg.com/jest-cli/-/jest-cli-28.1.0.tgz#cd1d8adb9630102d5ba04a22895f63decdd7ac1f\"",
          "4143:   integrity sha512-fDJRt6WPRriHrBsvvgb93OxgajHHsJbk4jZxiPqmZbMDRcHskfJBBfTyjFko0jjfprP544hOktdSi9HVgl4VUQ==",
          "4145:     \"@jest/core\" \"^28.1.0\"",
          "4146:     \"@jest/test-result\" \"^28.1.0\"",
          "4147:     \"@jest/types\" \"^28.1.0\"",
          "4150:     graceful-fs \"^4.2.9\"",
          "4152:     jest-config \"^28.1.0\"",
          "4153:     jest-util \"^28.1.0\"",
          "4154:     jest-validate \"^28.1.0\"",
          "4156:     yargs \"^17.3.1\"",
          "4158: jest-config@^28.1.0:",
          "4159:   version \"28.1.0\"",
          "4160:   resolved \"https://registry.yarnpkg.com/jest-config/-/jest-config-28.1.0.tgz#fca22ca0760e746fe1ce1f9406f6b307ab818501\"",
          "4161:   integrity sha512-aOV80E9LeWrmflp7hfZNn/zGA4QKv/xsn2w8QCBP0t0+YqObuCWTSgNbHJ0j9YsTuCO08ZR/wsvlxqqHX20iUA==",
          "4163:     \"@babel/core\" \"^7.11.6\"",
          "4164:     \"@jest/test-sequencer\" \"^28.1.0\"",
          "4165:     \"@jest/types\" \"^28.1.0\"",
          "4166:     babel-jest \"^28.1.0\"",
          "4168:     ci-info \"^3.2.0\"",
          "4170:     glob \"^7.1.3\"",
          "4171:     graceful-fs \"^4.2.9\"",
          "4172:     jest-circus \"^28.1.0\"",
          "4173:     jest-environment-node \"^28.1.0\"",
          "4174:     jest-get-type \"^28.0.2\"",
          "4175:     jest-regex-util \"^28.0.2\"",
          "4176:     jest-resolve \"^28.1.0\"",
          "4177:     jest-runner \"^28.1.0\"",
          "4178:     jest-util \"^28.1.0\"",
          "4179:     jest-validate \"^28.1.0\"",
          "4180:     micromatch \"^4.0.4\"",
          "4181:     parse-json \"^5.2.0\"",
          "4182:     pretty-format \"^28.1.0\"",
          "4183:     slash \"^3.0.0\"",
          "4184:     strip-json-comments \"^3.1.1\"",
          "4186: jest-diff@^27.5.1:",
          "4187:   version \"27.5.1\"",
          "4188:   resolved \"https://registry.yarnpkg.com/jest-diff/-/jest-diff-27.5.1.tgz#a07f5011ac9e6643cf8a95a462b7b1ecf6680def\"",
          "4189:   integrity sha512-m0NvkX55LDt9T4mctTEgnZk3fmEg3NRYutvMPWM/0iPnkFj2wIeF45O1718cMSOFO1vINkqmxqD8vE37uTEbqw==",
          "4192:     diff-sequences \"^27.5.1\"",
          "4193:     jest-get-type \"^27.5.1\"",
          "4194:     pretty-format \"^27.5.1\"",
          "4196: jest-diff@^28.1.0:",
          "4197:   version \"28.1.0\"",
          "4198:   resolved \"https://registry.yarnpkg.com/jest-diff/-/jest-diff-28.1.0.tgz#77686fef899ec1873dbfbf9330e37dd429703269\"",
          "4199:   integrity sha512-8eFd3U3OkIKRtlasXfiAQfbovgFgRDb0Ngcs2E+FMeBZ4rUezqIaGjuyggJBp+llosQXNEWofk/Sz4Hr5gMUhA==",
          "4200:   dependencies:",
          "4201:     chalk \"^4.0.0\"",
          "4202:     diff-sequences \"^28.0.2\"",
          "4203:     jest-get-type \"^28.0.2\"",
          "4204:     pretty-format \"^28.1.0\"",
          "4206: jest-docblock@^28.0.2:",
          "4207:   version \"28.0.2\"",
          "4208:   resolved \"https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-28.0.2.tgz#3cab8abea53275c9d670cdca814fc89fba1298c2\"",
          "4209:   integrity sha512-FH10WWw5NxLoeSdQlJwu+MTiv60aXV/t8KEwIRGEv74WARE1cXIqh1vGdy2CraHuWOOrnzTWj/azQKqW4fO7xg==",
          "4213: jest-each@^28.1.0:",
          "4214:   version \"28.1.0\"",
          "4215:   resolved \"https://registry.yarnpkg.com/jest-each/-/jest-each-28.1.0.tgz#54ae66d6a0a5b1913e9a87588d26c2687c39458b\"",
          "4216:   integrity sha512-a/XX02xF5NTspceMpHujmOexvJ4GftpYXqr6HhhmKmExtMXsyIN/fvanQlt/BcgFoRKN4OCXxLQKth9/n6OPFg==",
          "4218:     \"@jest/types\" \"^28.1.0\"",
          "4220:     jest-get-type \"^28.0.2\"",
          "4221:     jest-util \"^28.1.0\"",
          "4222:     pretty-format \"^28.1.0\"",
          "4224: jest-environment-node@^28.1.0:",
          "4225:   version \"28.1.0\"",
          "4226:   resolved \"https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-28.1.0.tgz#6ed2150aa31babba0c488c5b4f4d813a585c68e6\"",
          "4227:   integrity sha512-gBLZNiyrPw9CSMlTXF1yJhaBgWDPVvH0Pq6bOEwGMXaYNzhzhw2kA/OijNF8egbCgDS0/veRv97249x2CX+udQ==",
          "4228:   dependencies:",
          "4229:     \"@jest/environment\" \"^28.1.0\"",
          "4230:     \"@jest/fake-timers\" \"^28.1.0\"",
          "4231:     \"@jest/types\" \"^28.1.0\"",
          "4233:     jest-mock \"^28.1.0\"",
          "4234:     jest-util \"^28.1.0\"",
          "4236: jest-get-type@^27.5.1:",
          "4237:   version \"27.5.1\"",
          "4238:   resolved \"https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-27.5.1.tgz#3cd613c507b0f7ace013df407a1c1cd578bcb4f1\"",
          "4239:   integrity sha512-2KY95ksYSaK7DMBWQn6dQz3kqAf3BB64y2udeG+hv4KfSOb9qwcYQstTJc1KCbsix+wLZWZYN8t7nwX3GOBLRw==",
          "4241: jest-get-type@^28.0.2:",
          "4242:   version \"28.0.2\"",
          "4243:   resolved \"https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-28.0.2.tgz#34622e628e4fdcd793d46db8a242227901fcf203\"",
          "4244:   integrity sha512-ioj2w9/DxSYHfOm5lJKCdcAmPJzQXmbM/Url3rhlghrPvT3tt+7a/+oXc9azkKmLvoiXjtV83bEWqi+vs5nlPA==",
          "4246: jest-haste-map@^28.1.0:",
          "4247:   version \"28.1.0\"",
          "4248:   resolved \"https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-28.1.0.tgz#6c1ee2daf1c20a3e03dbd8e5b35c4d73d2349cf0\"",
          "4249:   integrity sha512-xyZ9sXV8PtKi6NCrJlmq53PyNVHzxmcfXNVvIRHpHmh1j/HChC4pwKgyjj7Z9us19JMw8PpQTJsFWOsIfT93Dw==",
          "4250:   dependencies:",
          "4251:     \"@jest/types\" \"^28.1.0\"",
          "4252:     \"@types/graceful-fs\" \"^4.1.3\"",
          "4256:     graceful-fs \"^4.2.9\"",
          "4257:     jest-regex-util \"^28.0.2\"",
          "4258:     jest-util \"^28.1.0\"",
          "4259:     jest-worker \"^28.1.0\"",
          "4260:     micromatch \"^4.0.4\"",
          "4263:     fsevents \"^2.3.2\"",
          "4265: jest-leak-detector@^28.1.0:",
          "4266:   version \"28.1.0\"",
          "4267:   resolved \"https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-28.1.0.tgz#b65167776a8787443214d6f3f54935a4c73c8a45\"",
          "4268:   integrity sha512-uIJDQbxwEL2AMMs2xjhZl2hw8s77c3wrPaQ9v6tXJLGaaQ+4QrNJH5vuw7hA7w/uGT/iJ42a83opAqxGHeyRIA==",
          "4269:   dependencies:",
          "4270:     jest-get-type \"^28.0.2\"",
          "4271:     pretty-format \"^28.1.0\"",
          "4278: jest-matcher-utils@^27.0.0:",
          "4279:   version \"27.5.1\"",
          "4280:   resolved \"https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-27.5.1.tgz#9c0cdbda8245bc22d2331729d1091308b40cf8ab\"",
          "4281:   integrity sha512-z2uTx/T6LBaCoNWNFWwChLBKYxTMcGBRjAt+2SbP929/Fflb9aa5LGma654Rz8z9HLxsrUaYzxE9T/EFIL/PAw==",
          "4284:     jest-diff \"^27.5.1\"",
          "4285:     jest-get-type \"^27.5.1\"",
          "4286:     pretty-format \"^27.5.1\"",
          "4288: jest-matcher-utils@^28.1.0:",
          "4289:   version \"28.1.0\"",
          "4290:   resolved \"https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-28.1.0.tgz#2ae398806668eeabd293c61712227cb94b250ccf\"",
          "4291:   integrity sha512-onnax0n2uTLRQFKAjC7TuaxibrPSvZgKTcSCnNUz/tOjJ9UhxNm7ZmPpoQavmTDUjXvUQ8KesWk2/VdrxIFzTQ==",
          "4293:     chalk \"^4.0.0\"",
          "4294:     jest-diff \"^28.1.0\"",
          "4295:     jest-get-type \"^28.0.2\"",
          "4296:     pretty-format \"^28.1.0\"",
          "4298: jest-message-util@^28.1.0:",
          "4299:   version \"28.1.0\"",
          "4300:   resolved \"https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-28.1.0.tgz#7e8f0b9049e948e7b94c2a52731166774ba7d0af\"",
          "4301:   integrity sha512-RpA8mpaJ/B2HphDMiDlrAZdDytkmwFqgjDZovM21F35lHGeUeCvYmm6W+sbQ0ydaLpg5bFAUuWG1cjqOl8vqrw==",
          "4302:   dependencies:",
          "4303:     \"@babel/code-frame\" \"^7.12.13\"",
          "4304:     \"@jest/types\" \"^28.1.0\"",
          "4307:     graceful-fs \"^4.2.9\"",
          "4308:     micromatch \"^4.0.4\"",
          "4309:     pretty-format \"^28.1.0\"",
          "4311:     stack-utils \"^2.0.3\"",
          "4313: jest-mock@^28.1.0:",
          "4314:   version \"28.1.0\"",
          "4315:   resolved \"https://registry.yarnpkg.com/jest-mock/-/jest-mock-28.1.0.tgz#ccc7cc12a9b330b3182db0c651edc90d163ff73e\"",
          "4316:   integrity sha512-H7BrhggNn77WhdL7O1apG0Q/iwl0Bdd5E1ydhCJzL3oBLh/UYxAwR3EJLsBZ9XA3ZU4PA3UNw4tQjduBTCTmLw==",
          "4318:     \"@jest/types\" \"^28.1.0\"",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "4896:   resolved \"https://registry.yarnpkg.com/jest-pnp-resolver/-/jest-pnp-resolver-1.2.2.tgz#b704ac0ae028a89108a4d040b3f919dfddc8e33c\"",
          "4897:   integrity sha512-olV41bKSMm8BdnuMsewT4jqlZ8+3TCARAXjZGT9jcoSnrfUnRCqnMoF9XEeoWjbzObpqF9dRhHQj0Xb9QdF6/w==",
          "4908:   dependencies:",
          "4917:   dependencies:",
          "4919:     chalk \"^4.0.0\"",
          "4921:     jest-pnp-resolver \"^1.2.2\"",
          "4925:     slash \"^3.0.0\"",
          "4931:   dependencies:",
          "4936:     \"@types/node\" \"*\"",
          "4937:     chalk \"^4.0.0\"",
          "4967:     chalk \"^4.0.0\"",
          "4969:     collect-v8-coverage \"^1.0.0\"",
          "4971:     glob \"^7.1.3\"",
          "4982:     slash \"^3.0.0\"",
          "4983:     strip-bom \"^4.0.0\"",
          "4990:   dependencies:",
          "5003:     chalk \"^4.0.0\"",
          "5012:     natural-compare \"^1.4.0\"",
          "5016: jest-sonar-reporter@^2.0.0:",
          "5017:   version \"2.0.0\"",
          "",
          "[Removed Lines]",
          "4899: jest-regex-util@^26.0.0:",
          "4900:   version \"26.0.0\"",
          "4901:   resolved \"https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-26.0.0.tgz#d25e7184b36e39fd466c3bc41be0971e821fee28\"",
          "4902:   integrity sha512-Gv3ZIs/nA48/Zvjrl34bf+oD76JHiGDUxNOVgUjh3j890sblXryjY4rss71fPtD/njchl6PSE2hIhvyWa1eT0A==",
          "4904: jest-resolve-dependencies@^26.6.3:",
          "4905:   version \"26.6.3\"",
          "4906:   resolved \"https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-26.6.3.tgz#6680859ee5d22ee5dcd961fe4871f59f4c784fb6\"",
          "4907:   integrity sha512-pVwUjJkxbhe4RY8QEWzN3vns2kqyuldKpxlxJlzEYfKSvY6/bMvxoFrYYzUO1Gx28yKWN37qyV7rIoIp2h8fTg==",
          "4909:     \"@jest/types\" \"^26.6.2\"",
          "4910:     jest-regex-util \"^26.0.0\"",
          "4911:     jest-snapshot \"^26.6.2\"",
          "4913: jest-resolve@^26.6.2:",
          "4914:   version \"26.6.2\"",
          "4915:   resolved \"https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-26.6.2.tgz#a3ab1517217f469b504f1b56603c5bb541fbb507\"",
          "4916:   integrity sha512-sOxsZOq25mT1wRsfHcbtkInS+Ek7Q8jCHUB0ZUTP0tc/c41QHriU/NunqMfCUWsL4H3MHpvQD4QR9kSYhS7UvQ==",
          "4918:     \"@jest/types\" \"^26.6.2\"",
          "4920:     graceful-fs \"^4.2.4\"",
          "4922:     jest-util \"^26.6.2\"",
          "4923:     read-pkg-up \"^7.0.1\"",
          "4924:     resolve \"^1.18.1\"",
          "4927: jest-runner@^26.6.3:",
          "4928:   version \"26.6.3\"",
          "4929:   resolved \"https://registry.yarnpkg.com/jest-runner/-/jest-runner-26.6.3.tgz#2d1fed3d46e10f233fd1dbd3bfaa3fe8924be159\"",
          "4930:   integrity sha512-atgKpRHnaA2OvByG/HpGA4g6CSPS/1LK0jK3gATJAoptC1ojltpmVlYC3TYgdmGp+GLuhzpH30Gvs36szSL2JQ==",
          "4932:     \"@jest/console\" \"^26.6.2\"",
          "4933:     \"@jest/environment\" \"^26.6.2\"",
          "4934:     \"@jest/test-result\" \"^26.6.2\"",
          "4935:     \"@jest/types\" \"^26.6.2\"",
          "4938:     emittery \"^0.7.1\"",
          "4939:     exit \"^0.1.2\"",
          "4940:     graceful-fs \"^4.2.4\"",
          "4941:     jest-config \"^26.6.3\"",
          "4942:     jest-docblock \"^26.0.0\"",
          "4943:     jest-haste-map \"^26.6.2\"",
          "4944:     jest-leak-detector \"^26.6.2\"",
          "4945:     jest-message-util \"^26.6.2\"",
          "4946:     jest-resolve \"^26.6.2\"",
          "4947:     jest-runtime \"^26.6.3\"",
          "4948:     jest-util \"^26.6.2\"",
          "4949:     jest-worker \"^26.6.2\"",
          "4950:     source-map-support \"^0.5.6\"",
          "4951:     throat \"^5.0.0\"",
          "4953: jest-runtime@^26.6.3:",
          "4954:   version \"26.6.3\"",
          "4955:   resolved \"https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-26.6.3.tgz#4f64efbcfac398331b74b4b3c82d27d401b8fa2b\"",
          "4956:   integrity sha512-lrzyR3N8sacTAMeonbqpnSka1dHNux2uk0qqDXVkMv2c/A3wYnvQ4EXuI013Y6+gSKSCxdaczvf4HF0mVXHRdw==",
          "4957:   dependencies:",
          "4958:     \"@jest/console\" \"^26.6.2\"",
          "4959:     \"@jest/environment\" \"^26.6.2\"",
          "4960:     \"@jest/fake-timers\" \"^26.6.2\"",
          "4961:     \"@jest/globals\" \"^26.6.2\"",
          "4962:     \"@jest/source-map\" \"^26.6.2\"",
          "4963:     \"@jest/test-result\" \"^26.6.2\"",
          "4964:     \"@jest/transform\" \"^26.6.2\"",
          "4965:     \"@jest/types\" \"^26.6.2\"",
          "4966:     \"@types/yargs\" \"^15.0.0\"",
          "4968:     cjs-module-lexer \"^0.6.0\"",
          "4970:     exit \"^0.1.2\"",
          "4972:     graceful-fs \"^4.2.4\"",
          "4973:     jest-config \"^26.6.3\"",
          "4974:     jest-haste-map \"^26.6.2\"",
          "4975:     jest-message-util \"^26.6.2\"",
          "4976:     jest-mock \"^26.6.2\"",
          "4977:     jest-regex-util \"^26.0.0\"",
          "4978:     jest-resolve \"^26.6.2\"",
          "4979:     jest-snapshot \"^26.6.2\"",
          "4980:     jest-util \"^26.6.2\"",
          "4981:     jest-validate \"^26.6.2\"",
          "4984:     yargs \"^15.4.1\"",
          "4986: jest-serializer@^26.6.2:",
          "4987:   version \"26.6.2\"",
          "4988:   resolved \"https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-26.6.2.tgz#d139aafd46957d3a448f3a6cdabe2919ba0742d1\"",
          "4989:   integrity sha512-S5wqyz0DXnNJPd/xfIzZ5Xnp1HrJWBczg8mMfMpN78OJ5eDxXyf+Ygld9wX1DnUWbIbhM1YDY95NjR4CBXkb2g==",
          "4991:     \"@types/node\" \"*\"",
          "4992:     graceful-fs \"^4.2.4\"",
          "4994: jest-snapshot@^26.6.2:",
          "4995:   version \"26.6.2\"",
          "4996:   resolved \"https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-26.6.2.tgz#f3b0af1acb223316850bd14e1beea9837fb39c84\"",
          "4997:   integrity sha512-OLhxz05EzUtsAmOMzuupt1lHYXCNib0ECyuZ/PZOx9TrZcC8vL0x+DUG3TL+GLX3yHG45e6YGjIm0XwDc3q3og==",
          "4998:   dependencies:",
          "4999:     \"@babel/types\" \"^7.0.0\"",
          "5000:     \"@jest/types\" \"^26.6.2\"",
          "5001:     \"@types/babel__traverse\" \"^7.0.4\"",
          "5002:     \"@types/prettier\" \"^2.0.0\"",
          "5004:     expect \"^26.6.2\"",
          "5005:     graceful-fs \"^4.2.4\"",
          "5006:     jest-diff \"^26.6.2\"",
          "5007:     jest-get-type \"^26.3.0\"",
          "5008:     jest-haste-map \"^26.6.2\"",
          "5009:     jest-matcher-utils \"^26.6.2\"",
          "5010:     jest-message-util \"^26.6.2\"",
          "5011:     jest-resolve \"^26.6.2\"",
          "5013:     pretty-format \"^26.6.2\"",
          "5014:     semver \"^7.3.2\"",
          "",
          "[Added Lines]",
          "4326: jest-regex-util@^28.0.2:",
          "4327:   version \"28.0.2\"",
          "4328:   resolved \"https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-28.0.2.tgz#afdc377a3b25fb6e80825adcf76c854e5bf47ead\"",
          "4329:   integrity sha512-4s0IgyNIy0y9FK+cjoVYoxamT7Zeo7MhzqRGx7YDYmaQn1wucY9rotiGkBzzcMXTtjrCAP/f7f+E0F7+fxPNdw==",
          "4331: jest-resolve-dependencies@^28.1.0:",
          "4332:   version \"28.1.0\"",
          "4333:   resolved \"https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-28.1.0.tgz#167becb8bee6e20b5ef4a3a728ec67aef6b0b79b\"",
          "4334:   integrity sha512-Ue1VYoSZquPwEvng7Uefw8RmZR+me/1kr30H2jMINjGeHgeO/JgrR6wxj2ofkJ7KSAA11W3cOrhNCbj5Dqqd9g==",
          "4336:     jest-regex-util \"^28.0.2\"",
          "4337:     jest-snapshot \"^28.1.0\"",
          "4339: jest-resolve@^28.1.0:",
          "4340:   version \"28.1.0\"",
          "4341:   resolved \"https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-28.1.0.tgz#b1f32748a6cee7d1779c7ef639c0a87078de3d35\"",
          "4342:   integrity sha512-vvfN7+tPNnnhDvISuzD1P+CRVP8cK0FHXRwPAcdDaQv4zgvwvag2n55/h5VjYcM5UJG7L4TwE5tZlzcI0X2Lhw==",
          "4345:     graceful-fs \"^4.2.9\"",
          "4346:     jest-haste-map \"^28.1.0\"",
          "4348:     jest-util \"^28.1.0\"",
          "4349:     jest-validate \"^28.1.0\"",
          "4350:     resolve \"^1.20.0\"",
          "4351:     resolve.exports \"^1.1.0\"",
          "4354: jest-runner@^28.1.0:",
          "4355:   version \"28.1.0\"",
          "4356:   resolved \"https://registry.yarnpkg.com/jest-runner/-/jest-runner-28.1.0.tgz#aefe2a1e618a69baa0b24a50edc54fdd7e728eaa\"",
          "4357:   integrity sha512-FBpmuh1HB2dsLklAlRdOxNTTHKFR6G1Qmd80pVDvwbZXTriqjWqjei5DKFC1UlM732KjYcE6yuCdiF0WUCOS2w==",
          "4359:     \"@jest/console\" \"^28.1.0\"",
          "4360:     \"@jest/environment\" \"^28.1.0\"",
          "4361:     \"@jest/test-result\" \"^28.1.0\"",
          "4362:     \"@jest/transform\" \"^28.1.0\"",
          "4363:     \"@jest/types\" \"^28.1.0\"",
          "4366:     emittery \"^0.10.2\"",
          "4367:     graceful-fs \"^4.2.9\"",
          "4368:     jest-docblock \"^28.0.2\"",
          "4369:     jest-environment-node \"^28.1.0\"",
          "4370:     jest-haste-map \"^28.1.0\"",
          "4371:     jest-leak-detector \"^28.1.0\"",
          "4372:     jest-message-util \"^28.1.0\"",
          "4373:     jest-resolve \"^28.1.0\"",
          "4374:     jest-runtime \"^28.1.0\"",
          "4375:     jest-util \"^28.1.0\"",
          "4376:     jest-watcher \"^28.1.0\"",
          "4377:     jest-worker \"^28.1.0\"",
          "4378:     source-map-support \"0.5.13\"",
          "4379:     throat \"^6.0.1\"",
          "4381: jest-runtime@^28.1.0:",
          "4382:   version \"28.1.0\"",
          "4383:   resolved \"https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-28.1.0.tgz#4847dcb2a4eb4b0f9eaf41306897e51fb1665631\"",
          "4384:   integrity sha512-wNYDiwhdH/TV3agaIyVF0lsJ33MhyujOe+lNTUiolqKt8pchy1Hq4+tDMGbtD5P/oNLA3zYrpx73T9dMTOCAcg==",
          "4385:   dependencies:",
          "4386:     \"@jest/environment\" \"^28.1.0\"",
          "4387:     \"@jest/fake-timers\" \"^28.1.0\"",
          "4388:     \"@jest/globals\" \"^28.1.0\"",
          "4389:     \"@jest/source-map\" \"^28.0.2\"",
          "4390:     \"@jest/test-result\" \"^28.1.0\"",
          "4391:     \"@jest/transform\" \"^28.1.0\"",
          "4392:     \"@jest/types\" \"^28.1.0\"",
          "4394:     cjs-module-lexer \"^1.0.0\"",
          "4396:     execa \"^5.0.0\"",
          "4398:     graceful-fs \"^4.2.9\"",
          "4399:     jest-haste-map \"^28.1.0\"",
          "4400:     jest-message-util \"^28.1.0\"",
          "4401:     jest-mock \"^28.1.0\"",
          "4402:     jest-regex-util \"^28.0.2\"",
          "4403:     jest-resolve \"^28.1.0\"",
          "4404:     jest-snapshot \"^28.1.0\"",
          "4405:     jest-util \"^28.1.0\"",
          "4409: jest-snapshot@^28.1.0:",
          "4410:   version \"28.1.0\"",
          "4411:   resolved \"https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-28.1.0.tgz#4b74fa8816707dd10fe9d551c2c258e5a67b53b6\"",
          "4412:   integrity sha512-ex49M2ZrZsUyQLpLGxQtDbahvgBjlLPgklkqGM0hq/F7W/f8DyqZxVHjdy19QKBm4O93eDp+H5S23EiTbbUmHw==",
          "4414:     \"@babel/core\" \"^7.11.6\"",
          "4415:     \"@babel/generator\" \"^7.7.2\"",
          "4416:     \"@babel/plugin-syntax-typescript\" \"^7.7.2\"",
          "4417:     \"@babel/traverse\" \"^7.7.2\"",
          "4418:     \"@babel/types\" \"^7.3.3\"",
          "4419:     \"@jest/expect-utils\" \"^28.1.0\"",
          "4420:     \"@jest/transform\" \"^28.1.0\"",
          "4421:     \"@jest/types\" \"^28.1.0\"",
          "4422:     \"@types/babel__traverse\" \"^7.0.6\"",
          "4423:     \"@types/prettier\" \"^2.1.5\"",
          "4424:     babel-preset-current-node-syntax \"^1.0.0\"",
          "4426:     expect \"^28.1.0\"",
          "4427:     graceful-fs \"^4.2.9\"",
          "4428:     jest-diff \"^28.1.0\"",
          "4429:     jest-get-type \"^28.0.2\"",
          "4430:     jest-haste-map \"^28.1.0\"",
          "4431:     jest-matcher-utils \"^28.1.0\"",
          "4432:     jest-message-util \"^28.1.0\"",
          "4433:     jest-util \"^28.1.0\"",
          "4435:     pretty-format \"^28.1.0\"",
          "4436:     semver \"^7.3.5\"",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "5020:   dependencies:",
          "5021:     xml \"^1.0.1\"",
          "5027:   dependencies:",
          "5029:     \"@types/node\" \"*\"",
          "5030:     chalk \"^4.0.0\"",
          "5039:   dependencies:",
          "5042:     chalk \"^4.0.0\"",
          "5044:     leven \"^3.1.0\"",
          "5051:   dependencies:",
          "5054:     \"@types/node\" \"*\"",
          "5055:     ansi-escapes \"^4.2.1\"",
          "5056:     chalk \"^4.0.0\"",
          "5058:     string-length \"^4.0.1\"",
          "5064:   dependencies:",
          "5065:     \"@types/node\" \"*\"",
          "5066:     merge-stream \"^2.0.0\"",
          "5073:   dependencies:",
          "5075:     import-local \"^3.0.2\"",
          "5078: js-stringify@^1.0.1:",
          "5079:   version \"1.0.2\"",
          "5080:   resolved \"https://registry.yarnpkg.com/js-stringify/-/js-stringify-1.0.2.tgz#1736fddfd9724f28a3682adc6230ae7e4e9679db\"",
          "5083: \"js-tokens@^3.0.0 || ^4.0.0\", js-tokens@^4.0.0:",
          "5084:   version \"4.0.0\"",
          "",
          "[Removed Lines]",
          "5023: jest-util@^26.6.2:",
          "5024:   version \"26.6.2\"",
          "5025:   resolved \"https://registry.yarnpkg.com/jest-util/-/jest-util-26.6.2.tgz#907535dbe4d5a6cb4c47ac9b926f6af29576cbc1\"",
          "5026:   integrity sha512-MDW0fKfsn0OI7MS7Euz6h8HNDXVQ0gaM9uW6RjfDmd1DAFcaxX9OqIakHIqhbnmF08Cf2DLDG+ulq8YQQ0Lp0Q==",
          "5028:     \"@jest/types\" \"^26.6.2\"",
          "5031:     graceful-fs \"^4.2.4\"",
          "5032:     is-ci \"^2.0.0\"",
          "5033:     micromatch \"^4.0.2\"",
          "5035: jest-validate@^26.6.2:",
          "5036:   version \"26.6.2\"",
          "5037:   resolved \"https://registry.yarnpkg.com/jest-validate/-/jest-validate-26.6.2.tgz#23d380971587150467342911c3d7b4ac57ab20ec\"",
          "5038:   integrity sha512-NEYZ9Aeyj0i5rQqbq+tpIOom0YS1u2MVu6+euBsvpgIme+FOfRmoC4R5p0JiAUpaFvFy24xgrpMknarR/93XjQ==",
          "5040:     \"@jest/types\" \"^26.6.2\"",
          "5041:     camelcase \"^6.0.0\"",
          "5043:     jest-get-type \"^26.3.0\"",
          "5045:     pretty-format \"^26.6.2\"",
          "5047: jest-watcher@^26.6.2:",
          "5048:   version \"26.6.2\"",
          "5049:   resolved \"https://registry.yarnpkg.com/jest-watcher/-/jest-watcher-26.6.2.tgz#a5b683b8f9d68dbcb1d7dae32172d2cca0592975\"",
          "5050:   integrity sha512-WKJob0P/Em2csiVthsI68p6aGKTIcsfjH9Gsx1f0A3Italz43e3ho0geSAVsmj09RWOELP1AZ/DXyJgOgDKxXQ==",
          "5052:     \"@jest/test-result\" \"^26.6.2\"",
          "5053:     \"@jest/types\" \"^26.6.2\"",
          "5057:     jest-util \"^26.6.2\"",
          "5060: jest-worker@^26.6.2:",
          "5061:   version \"26.6.2\"",
          "5062:   resolved \"https://registry.yarnpkg.com/jest-worker/-/jest-worker-26.6.2.tgz#7f72cbc4d643c365e27b9fd775f9d0eaa9c7a8ed\"",
          "5063:   integrity sha512-KWYVV1c4i+jbMpaBC+U++4Va0cp8OisU185o73T1vo99hqi7w8tSJfUXYswwqqrjzwxa6KpRK54WhPvwf5w6PQ==",
          "5067:     supports-color \"^7.0.0\"",
          "5069: jest@^26.6.3:",
          "5070:   version \"26.6.3\"",
          "5071:   resolved \"https://registry.yarnpkg.com/jest/-/jest-26.6.3.tgz#40e8fdbe48f00dfa1f0ce8121ca74b88ac9148ef\"",
          "5072:   integrity sha512-lGS5PXGAzR4RF7V5+XObhqz2KZIDUA1yD0DG6pBVmy10eh0ZIXQImRuzocsI/N2XZ1GrLFwTS27In2i2jlpq1Q==",
          "5074:     \"@jest/core\" \"^26.6.3\"",
          "5076:     jest-cli \"^26.6.3\"",
          "5081:   integrity sha1-Fzb939lyTyijaCrcYjCufk6Weds=",
          "",
          "[Added Lines]",
          "4445: jest-util@^28.1.0:",
          "4446:   version \"28.1.0\"",
          "4447:   resolved \"https://registry.yarnpkg.com/jest-util/-/jest-util-28.1.0.tgz#d54eb83ad77e1dd441408738c5a5043642823be5\"",
          "4448:   integrity sha512-qYdCKD77k4Hwkose2YBEqQk7PzUf/NSE+rutzceduFveQREeH6b+89Dc9+wjX9dAwHcgdx4yedGA3FQlU/qCTA==",
          "4450:     \"@jest/types\" \"^28.1.0\"",
          "4453:     ci-info \"^3.2.0\"",
          "4454:     graceful-fs \"^4.2.9\"",
          "4455:     picomatch \"^2.2.3\"",
          "4457: jest-validate@^28.1.0:",
          "4458:   version \"28.1.0\"",
          "4459:   resolved \"https://registry.yarnpkg.com/jest-validate/-/jest-validate-28.1.0.tgz#8a6821f48432aba9f830c26e28226ad77b9a0e18\"",
          "4460:   integrity sha512-Lly7CJYih3vQBfjLeANGgBSBJ7pEa18cxpQfQEq2go2xyEzehnHfQTjoUia8xUv4x4J80XKFIDwJJThXtRFQXQ==",
          "4462:     \"@jest/types\" \"^28.1.0\"",
          "4463:     camelcase \"^6.2.0\"",
          "4465:     jest-get-type \"^28.0.2\"",
          "4467:     pretty-format \"^28.1.0\"",
          "4469: jest-watcher@^28.1.0:",
          "4470:   version \"28.1.0\"",
          "4471:   resolved \"https://registry.yarnpkg.com/jest-watcher/-/jest-watcher-28.1.0.tgz#aaa7b4164a4e77eeb5f7d7b25ede5e7b4e9c9aaf\"",
          "4472:   integrity sha512-tNHMtfLE8Njcr2IRS+5rXYA4BhU90gAOwI9frTGOqd+jX0P/Au/JfRSNqsf5nUTcWdbVYuLxS1KjnzILSoR5hA==",
          "4474:     \"@jest/test-result\" \"^28.1.0\"",
          "4475:     \"@jest/types\" \"^28.1.0\"",
          "4479:     emittery \"^0.10.2\"",
          "4480:     jest-util \"^28.1.0\"",
          "4483: jest-worker@^28.1.0:",
          "4484:   version \"28.1.0\"",
          "4485:   resolved \"https://registry.yarnpkg.com/jest-worker/-/jest-worker-28.1.0.tgz#ced54757a035e87591e1208253a6e3aac1a855e5\"",
          "4486:   integrity sha512-ZHwM6mNwaWBR52Snff8ZvsCTqQsvhCxP/bT1I6T6DAnb6ygkshsyLQIMxFwHpYxht0HOoqt23JlC01viI7T03A==",
          "4490:     supports-color \"^8.0.0\"",
          "4492: jest@^28.0.0:",
          "4493:   version \"28.1.0\"",
          "4494:   resolved \"https://registry.yarnpkg.com/jest/-/jest-28.1.0.tgz#f420e41c8f2395b9a30445a97189ebb57593d831\"",
          "4495:   integrity sha512-TZR+tHxopPhzw3c3560IJXZWLNHgpcz1Zh0w5A65vynLGNcg/5pZ+VildAd7+XGOu6jd58XMY/HNn0IkZIXVXg==",
          "4497:     \"@jest/core\" \"^28.1.0\"",
          "4499:     jest-cli \"^28.1.0\"",
          "4504:   integrity sha512-rtS5ATOo2Q5k1G+DADISilDA6lv79zIiwFd6CcjuIxGKLFm5C+RLImRscVap9k55i+MOZwgliw+NejvkLuGD5g==",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "5110: jsbn@~0.1.0:",
          "5111:   version \"0.1.1\"",
          "5112:   resolved \"https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513\"",
          "5115: jsdoc@^3.6.6:",
          "5116:   version \"3.6.10\"",
          "",
          "[Removed Lines]",
          "5113:   integrity sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
          "",
          "[Added Lines]",
          "4536:   integrity sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "5133:     taffydb \"2.6.2\"",
          "5134:     underscore \"~1.13.2\"",
          "5169: jsesc@^2.5.1:",
          "5170:   version \"2.5.2\"",
          "5171:   resolved \"https://registry.yarnpkg.com/jsesc/-/jsesc-2.5.2.tgz#80564d2e483dacf6e8ef209650a67df3f0c283a4\"",
          "",
          "[Removed Lines]",
          "5136: jsdom@^16.4.0:",
          "5137:   version \"16.7.0\"",
          "5138:   resolved \"https://registry.yarnpkg.com/jsdom/-/jsdom-16.7.0.tgz#918ae71965424b197c819f8183a754e18977b710\"",
          "5139:   integrity sha512-u9Smc2G1USStM+s/x1ru5Sxrl6mPYCbByG1U/hUmqaVsm4tbNyS7CicOSRyuGQYZhTu0h84qkZZQ/I+dzizSVw==",
          "5140:   dependencies:",
          "5141:     abab \"^2.0.5\"",
          "5142:     acorn \"^8.2.4\"",
          "5143:     acorn-globals \"^6.0.0\"",
          "5144:     cssom \"^0.4.4\"",
          "5145:     cssstyle \"^2.3.0\"",
          "5146:     data-urls \"^2.0.0\"",
          "5147:     decimal.js \"^10.2.1\"",
          "5148:     domexception \"^2.0.1\"",
          "5149:     escodegen \"^2.0.0\"",
          "5150:     form-data \"^3.0.0\"",
          "5151:     html-encoding-sniffer \"^2.0.1\"",
          "5152:     http-proxy-agent \"^4.0.1\"",
          "5153:     https-proxy-agent \"^5.0.0\"",
          "5154:     is-potential-custom-element-name \"^1.0.1\"",
          "5155:     nwsapi \"^2.2.0\"",
          "5156:     parse5 \"6.0.1\"",
          "5157:     saxes \"^5.0.1\"",
          "5158:     symbol-tree \"^3.2.4\"",
          "5159:     tough-cookie \"^4.0.0\"",
          "5160:     w3c-hr-time \"^1.0.2\"",
          "5161:     w3c-xmlserializer \"^2.0.0\"",
          "5162:     webidl-conversions \"^6.1.0\"",
          "5163:     whatwg-encoding \"^1.0.5\"",
          "5164:     whatwg-mimetype \"^2.3.0\"",
          "5165:     whatwg-url \"^8.5.0\"",
          "5166:     ws \"^7.4.6\"",
          "5167:     xml-name-validator \"^3.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "5174: jsesc@~0.5.0:",
          "5175:   version \"0.5.0\"",
          "5176:   resolved \"https://registry.yarnpkg.com/jsesc/-/jsesc-0.5.0.tgz#e7dee66e35d6fc16f710fe91d5cf69f70f08911d\"",
          "5179: json-parse-even-better-errors@^2.3.0:",
          "5180:   version \"2.3.1\"",
          "",
          "[Removed Lines]",
          "5177:   integrity sha1-597mbjXW/Bb3EP6R1c9p9w8IkR0=",
          "",
          "[Added Lines]",
          "4567:   integrity sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "5194: json-stable-stringify-without-jsonify@^1.0.1:",
          "5195:   version \"1.0.1\"",
          "5196:   resolved \"https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651\"",
          "5199: json-stringify-safe@~5.0.1:",
          "5200:   version \"5.0.1\"",
          "5201:   resolved \"https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb\"",
          "5204: json5@^1.0.1:",
          "5205:   version \"1.0.1\"",
          "",
          "[Removed Lines]",
          "5197:   integrity sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
          "5202:   integrity sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
          "",
          "[Added Lines]",
          "4587:   integrity sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
          "4592:   integrity sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "5216: jsonparse@^1.2.0:",
          "5217:   version \"1.3.1\"",
          "5218:   resolved \"https://registry.yarnpkg.com/jsonparse/-/jsonparse-1.3.1.tgz#3f4dae4a91fac315f71062f8521cc239f1366280\"",
          "5221: jsprim@^1.2.2:",
          "5222:   version \"1.4.2\"",
          "",
          "[Removed Lines]",
          "5219:   integrity sha1-P02uSpH6wxX3EGL4UhzCOfE2YoA=",
          "",
          "[Added Lines]",
          "4609:   integrity sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "5231: jstransformer@1.0.0:",
          "5232:   version \"1.0.0\"",
          "5233:   resolved \"https://registry.yarnpkg.com/jstransformer/-/jstransformer-1.0.0.tgz#ed8bf0921e2f3f1ed4d5c1a44f68709ed24722c3\"",
          "5235:   dependencies:",
          "5236:     is-promise \"^2.0.0\"",
          "5237:     promise \"^7.0.1\"",
          "5240:   version \"3.2.2\"",
          "5241:   resolved \"https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64\"",
          "5243:   dependencies:",
          "5244:     is-buffer \"^1.1.5\"",
          "5259:   version \"6.0.3\"",
          "5260:   resolved \"https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.3.tgz#07c05034a6c349fa06e24fa35aa76db4580ce4dd\"",
          "5261:   integrity sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
          "",
          "[Removed Lines]",
          "5234:   integrity sha1-7Yvwkh4vPx7U1cGkT2hwntJHIsM=",
          "5239: kind-of@^3.0.2, kind-of@^3.0.3, kind-of@^3.2.0:",
          "5242:   integrity sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "5246: kind-of@^4.0.0:",
          "5247:   version \"4.0.0\"",
          "5248:   resolved \"https://registry.yarnpkg.com/kind-of/-/kind-of-4.0.0.tgz#20813df3d712928b207378691a45066fae72dd57\"",
          "5249:   integrity sha1-IIE989cSkosgc3hpGkUGb65y3Vc=",
          "5250:   dependencies:",
          "5251:     is-buffer \"^1.1.5\"",
          "5253: kind-of@^5.0.0:",
          "5254:   version \"5.1.0\"",
          "5255:   resolved \"https://registry.yarnpkg.com/kind-of/-/kind-of-5.1.0.tgz#729c91e2d857b7a419a1f9aa65685c4c33f5845d\"",
          "5256:   integrity sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==",
          "5258: kind-of@^6.0.0, kind-of@^6.0.2:",
          "",
          "[Added Lines]",
          "4624:   integrity sha512-C9YK3Rf8q6VAPDCCU9fnqo3mAfOH6vUGnMcP4AQAYIEpWtfGLpwOTmZ+igtdK5y+VvI2n3CyYSzy4Qh34eq24A==",
          "4629: kind-of@^3.0.2:",
          "4632:   integrity sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==",
          "4636: kind-of@^6.0.2:",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "5281: lazy-cache@^1.0.3:",
          "5282:   version \"1.0.4\"",
          "5283:   resolved \"https://registry.yarnpkg.com/lazy-cache/-/lazy-cache-1.0.4.tgz#a1d78fc3a50474cb80845d3b3b6e1da49a446e8e\"",
          "5286: leven@^3.1.0:",
          "5287:   version \"3.1.0\"",
          "",
          "[Removed Lines]",
          "5284:   integrity sha1-odePw6UEdMuAhF07O24dpJpEbo4=",
          "",
          "[Added Lines]",
          "4662:   integrity sha512-RE2g0b5VGZsOCFOCgP7omTRYFqydmZkBwl5oNnQ1lDYC57uyO9KqNnNVxT7COSHTxrRCWVcAVOcbjk+tvh/rgQ==",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "5296:     prelude-ls \"^1.2.1\"",
          "5297:     type-check \"~0.4.0\"",
          "5307: lines-and-columns@^1.1.6:",
          "5308:   version \"1.2.4\"",
          "5309:   resolved \"https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz#eca284f75d2965079309dc0ad9255abb2ebc1632\"",
          "",
          "[Removed Lines]",
          "5299: levn@~0.3.0:",
          "5300:   version \"0.3.0\"",
          "5301:   resolved \"https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee\"",
          "5302:   integrity sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=",
          "5303:   dependencies:",
          "5304:     prelude-ls \"~1.1.2\"",
          "5305:     type-check \"~0.3.2\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "5319: locate-path@^2.0.0:",
          "5320:   version \"2.0.0\"",
          "5321:   resolved \"https://registry.yarnpkg.com/locate-path/-/locate-path-2.0.0.tgz#2b568b265eec944c6d9c0de9c3dbbbca0354cd8e\"",
          "5323:   dependencies:",
          "5324:     p-locate \"^2.0.0\"",
          "5325:     path-exists \"^3.0.0\"",
          "",
          "[Removed Lines]",
          "5322:   integrity sha1-K1aLJl7slExtnA3pw9u7ygNUzY4=",
          "",
          "[Added Lines]",
          "4692:   integrity sha512-NCI2kiDkyR7VeEKm27Kda/iQHyKJe1Bu0FlTbYp3CqJu+9IFe9bLyAjMxf5ZDDbEg+iMPzB5zYyUTSm8wVTKmA==",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "5349: lodash.debounce@^4.0.8:",
          "5350:   version \"4.0.8\"",
          "5351:   resolved \"https://registry.yarnpkg.com/lodash.debounce/-/lodash.debounce-4.0.8.tgz#82d79bff30a67c4005ffd5e2515300ad9ca4d7af\"",
          "5354: lodash.get@^4.4.2:",
          "5355:   version \"4.4.2\"",
          "5356:   resolved \"https://registry.yarnpkg.com/lodash.get/-/lodash.get-4.4.2.tgz#2d177f652fa31e939b4438d5341499dfa3825e99\"",
          "5359: lodash.isequal@^4.5.0:",
          "5360:   version \"4.5.0\"",
          "5361:   resolved \"https://registry.yarnpkg.com/lodash.isequal/-/lodash.isequal-4.5.0.tgz#415c4478f2bcc30120c22ce10ed3226f7d3e18e0\"",
          "5364: lodash.memoize@~3.0.3:",
          "5365:   version \"3.0.4\"",
          "5366:   resolved \"https://registry.yarnpkg.com/lodash.memoize/-/lodash.memoize-3.0.4.tgz#2dcbd2c287cbc0a55cc42328bd0c736150d53e3f\"",
          "5369: lodash.merge@^4.6.2:",
          "5370:   version \"4.6.2\"",
          "5371:   resolved \"https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a\"",
          "5372:   integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
          "5379: lodash@^4.17.14, lodash@^4.17.15, lodash@^4.17.4, lodash@^4.7.0:",
          "5380:   version \"4.17.21\"",
          "5381:   resolved \"https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c\"",
          "",
          "[Removed Lines]",
          "5352:   integrity sha1-gteb/zCmfEAF/9XiUVMArZyk168=",
          "5357:   integrity sha1-LRd/ZS+jHpObRDjVNBSZ36OCXpk=",
          "5362:   integrity sha1-QVxEePK8wwEgwizhDtMib30+GOA=",
          "5367:   integrity sha1-LcvSwofLwKVcxCMovQxzYVDVPj8=",
          "5374: lodash.sortby@^4.7.0:",
          "5375:   version \"4.7.0\"",
          "5376:   resolved \"https://registry.yarnpkg.com/lodash.sortby/-/lodash.sortby-4.7.0.tgz#edd14c824e2cc9c1e0b0a1b42bb5210516a42438\"",
          "5377:   integrity sha1-7dFMgk4sycHgsKG0K7UhBRakJDg=",
          "",
          "[Added Lines]",
          "4722:   integrity sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
          "4727:   integrity sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==",
          "4732:   integrity sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==",
          "4737:   integrity sha512-eDn9kqrAmVUC1wmZvlQ6Uhde44n+tXpqPrN8olQJbttgh0oKclk+SF54P47VEGE9CEiMeRwAP8BaM7UHvBkz2A==",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "5389: longest@^1.0.1:",
          "5390:   version \"1.0.1\"",
          "5391:   resolved \"https://registry.yarnpkg.com/longest/-/longest-1.0.1.tgz#30a0b2da38f73770e8294a0d22e6625ed77d0097\"",
          "5394: loose-envify@^1.4.0:",
          "5395:   version \"1.4.0\"",
          "",
          "[Removed Lines]",
          "5392:   integrity sha1-MKCy2jj3N3DoKUoNIuZiXtd9AJc=",
          "",
          "[Added Lines]",
          "4757:   integrity sha512-k+yt5n3l48JU4k8ftnKG6V7u32wyH2NfKzeMto9F/QRE0amxy/LayxwlvjjkZEIzqR+19IrtFO8p5kB9QaYUFg==",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "5416: lru-queue@^0.1.0:",
          "5417:   version \"0.1.0\"",
          "5418:   resolved \"https://registry.yarnpkg.com/lru-queue/-/lru-queue-0.1.0.tgz#2738bd9f0d3cf4f84490c5736c48699ac632cda3\"",
          "5420:   dependencies:",
          "5421:     es5-ext \"~0.10.2\"",
          "",
          "[Removed Lines]",
          "5419:   integrity sha1-Jzi9nw089PhEkMVzbEhpmsYyzaM=",
          "",
          "[Added Lines]",
          "4784:   integrity sha512-BpdYkt9EvGl8OfWHDQPISVpcl5xZthb+XPsbELj5AQXxIC8IriDZIQYjBJPEm5rS420sjZ0TLEzRcq5KdBhYrQ==",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "5442:   dependencies:",
          "5443:     tmpl \"1.0.5\"",
          "5457: markdown-it-anchor@^8.4.1:",
          "5462: markdown-it@^12.3.2:",
          "5463:   version \"12.3.2\"",
          "",
          "[Removed Lines]",
          "5445: map-cache@^0.2.2:",
          "5446:   version \"0.2.2\"",
          "5447:   resolved \"https://registry.yarnpkg.com/map-cache/-/map-cache-0.2.2.tgz#c32abd0bd6525d9b051645bb4f26ac5dc98a0dbf\"",
          "5448:   integrity sha1-wyq9C9ZSXZsFFkW7TyasXcmKDb8=",
          "5450: map-visit@^1.0.0:",
          "5451:   version \"1.0.0\"",
          "5452:   resolved \"https://registry.yarnpkg.com/map-visit/-/map-visit-1.0.0.tgz#ecdca8f13144e660f1b5bd41f12f3479d98dfb8f\"",
          "5453:   integrity sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=",
          "5454:   dependencies:",
          "5455:     object-visit \"^1.0.0\"",
          "5458:   version \"8.6.2\"",
          "5459:   resolved \"https://registry.yarnpkg.com/markdown-it-anchor/-/markdown-it-anchor-8.6.2.tgz#16d32ba7fb290a0152f588afb4ea83d3c0faa555\"",
          "5460:   integrity sha512-JNaekTlIwwyYGBN3zifZDxgz4bSL8sbEj58fdTZGmPSMMGXBZapFjcZk2I33Jy79c1fvCKHpF7MA/67FOTjvzA==",
          "",
          "[Added Lines]",
          "4811:   version \"8.6.4\"",
          "4812:   resolved \"https://registry.yarnpkg.com/markdown-it-anchor/-/markdown-it-anchor-8.6.4.tgz#affb8aa0910a504c114e9fcad53ac3a5b907b0e6\"",
          "4813:   integrity sha512-Ul4YVYZNxMJYALpKtu+ZRdrryYt/GlQ5CK+4l1bp/gWXOG2QWElt6AqF3Mih/wfUKdZbNAZVXGR73/n6U/8img==",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "5471:     uc.micro \"^1.0.5\"",
          "5473: marked@^4.0.10:",
          "5478: matrix-events-sdk@^0.0.1-beta.7:",
          "5479:   version \"0.0.1-beta.7\"",
          "5480:   resolved \"https://registry.yarnpkg.com/matrix-events-sdk/-/matrix-events-sdk-0.0.1-beta.7.tgz#5ffe45eba1f67cc8d7c2377736c728b322524934\"",
          "5481:   integrity sha512-9jl4wtWanUFSy2sr2lCjErN/oC8KTAtaeaozJtrgot1JiQcEI4Rda9OLgQ7nLKaqb4Z/QUx/fR3XpDzm5Jy1JA==",
          "5487:   dependencies:",
          "5491: md5.js@^1.3.4:",
          "5492:   version \"1.3.5\"",
          "",
          "[Removed Lines]",
          "5474:   version \"4.0.15\"",
          "5475:   resolved \"https://registry.yarnpkg.com/marked/-/marked-4.0.15.tgz#0216b7c9d5fcf6ac5042343c41d81a8b1b5e1b4a\"",
          "5476:   integrity sha512-esX5lPdTfG4p8LDkv+obbRCyOKzB+820ZZyMOXJZygZBHrH9b3xXR64X4kT3sPe9Nx8qQXbmcz6kFSMt4Nfk6Q==",
          "5483: matrix-mock-request@^1.2.3:",
          "5484:   version \"1.2.3\"",
          "5485:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-1.2.3.tgz#56b15d86e2601a9b48a854844396d18caab649c8\"",
          "5486:   integrity sha512-Tr7LDHweTW8Ql4C8XhGQFGMzuh+HmPjOcQqrHH1qfSesq0cwdPWanvdnllNjeHoAMcZ43HpMFMzFZfNW1/6HYg==",
          "5488:     bluebird \"^3.5.0\"",
          "5489:     expect \"^1.20.2\"",
          "",
          "[Added Lines]",
          "4827:   version \"4.0.16\"",
          "4828:   resolved \"https://registry.yarnpkg.com/marked/-/marked-4.0.16.tgz#9ec18fc1a723032eb28666100344d9428cf7a264\"",
          "4829:   integrity sha512-wahonIQ5Jnyatt2fn8KqF/nIqZM8mh3oRu2+l5EANGMhu6RFjiSG52QNE2eWzFMI94HqYSgN184NurgNG6CztA==",
          "4836: matrix-mock-request@^2.0.1:",
          "4837:   version \"2.0.1\"",
          "4838:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.0.1.tgz#1cf7b516f8525de8373f1d9985a4a447db80bb96\"",
          "4839:   integrity sha512-NqCSDRBUTXKY7TS5H6Fqu6oxSsWKGkyh3LTXa/T6mSGABi2zMkeqGa2r2H3rnH6waJRt5N7xn+u7vEmSpg0oBQ==",
          "4841:     expect \"^28.1.0\"",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "5500: mdurl@^1.0.1:",
          "5501:   version \"1.0.1\"",
          "5502:   resolved \"https://registry.yarnpkg.com/mdurl/-/mdurl-1.0.1.tgz#fe85b2ec75a59037f2adfec100fd6c601761152e\"",
          "5505: memoizee@^0.4.15:",
          "5506:   version \"0.4.15\"",
          "",
          "[Removed Lines]",
          "5503:   integrity sha1-/oWy7HWlkDfyrf7BAP1sYBdhFS4=",
          "",
          "[Added Lines]",
          "4855:   integrity sha512-/sKlQJCBYVY9Ers9hqzKou4H6V5UWc/M59TH2dvkt+84itfnq7uFOMLpOiOS4ujvHP4etln18fmIxA5R5fll0g==",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "5526:   resolved \"https://registry.yarnpkg.com/merge2/-/merge2-1.4.1.tgz#4368892f885e907455a6fd7dc55c0c9d404990ae\"",
          "5527:   integrity sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
          "5549:   version \"4.0.5\"",
          "5550:   resolved \"https://registry.yarnpkg.com/micromatch/-/micromatch-4.0.5.tgz#bc8999a7cbbf77cdc89f132f6e467051b49090c6\"",
          "5551:   integrity sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
          "",
          "[Removed Lines]",
          "5529: micromatch@^3.1.4:",
          "5530:   version \"3.1.10\"",
          "5531:   resolved \"https://registry.yarnpkg.com/micromatch/-/micromatch-3.1.10.tgz#70859bc95c9840952f359a068a3fc49f9ecfac23\"",
          "5532:   integrity sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==",
          "5533:   dependencies:",
          "5534:     arr-diff \"^4.0.0\"",
          "5535:     array-unique \"^0.3.2\"",
          "5536:     braces \"^2.3.1\"",
          "5537:     define-property \"^2.0.2\"",
          "5538:     extend-shallow \"^3.0.2\"",
          "5539:     extglob \"^2.0.4\"",
          "5540:     fragment-cache \"^0.2.1\"",
          "5541:     kind-of \"^6.0.2\"",
          "5542:     nanomatch \"^1.2.9\"",
          "5543:     object.pick \"^1.3.0\"",
          "5544:     regex-not \"^1.0.0\"",
          "5545:     snapdragon \"^0.8.1\"",
          "5546:     to-regex \"^3.0.2\"",
          "5548: micromatch@^4.0.2, micromatch@^4.0.4:",
          "",
          "[Added Lines]",
          "4881: micromatch@^4.0.4:",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "5591: minimalistic-crypto-utils@^1.0.1:",
          "5592:   version \"1.0.1\"",
          "5593:   resolved \"https://registry.yarnpkg.com/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz#f6c00c1c0b082246e5c4d99dfb8c7c083b2b582a\"",
          "5597:   version \"3.1.2\"",
          "5598:   resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-3.1.2.tgz#19cd194bfd3e428f049a70817c038d89ab4be35b\"",
          "5599:   integrity sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
          "",
          "[Removed Lines]",
          "5594:   integrity sha1-9sAMHAsIIkblxNmd+4x8CDsrWCo=",
          "5596: minimatch@^3.0.2, minimatch@^3.0.4, minimatch@^3.1.2:",
          "",
          "[Added Lines]",
          "4927:   integrity sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==",
          "4929: minimatch@^3.0.2, minimatch@^3.0.4, minimatch@^3.1.1, minimatch@^3.1.2:",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "5603: minimist@0.0.5:",
          "5604:   version \"0.0.5\"",
          "5605:   resolved \"https://registry.yarnpkg.com/minimist/-/minimist-0.0.5.tgz#d7aa327bcecf518f9106ac6b8f003fa3bcea8566\"",
          "5609:   version \"1.2.6\"",
          "5610:   resolved \"https://registry.yarnpkg.com/minimist/-/minimist-1.2.6.tgz#8637a5b759ea0d6e98702cfb3a9283323c93af44\"",
          "5611:   integrity sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==",
          "5621: mkdirp-classic@^0.5.2:",
          "5622:   version \"0.5.3\"",
          "5623:   resolved \"https://registry.yarnpkg.com/mkdirp-classic/-/mkdirp-classic-0.5.3.tgz#fa10c9115cc6d8865be221ba47ee9bed78601113\"",
          "",
          "[Removed Lines]",
          "5606:   integrity sha1-16oye87PUY+RBqxrjwA/o7zqhWY=",
          "5608: minimist@^1.1.0, minimist@^1.1.1, minimist@^1.2.0, minimist@^1.2.6:",
          "5613: mixin-deep@^1.2.0:",
          "5614:   version \"1.3.2\"",
          "5615:   resolved \"https://registry.yarnpkg.com/mixin-deep/-/mixin-deep-1.3.2.tgz#1120b43dc359a785dce65b55b82e257ccf479566\"",
          "5616:   integrity sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==",
          "5617:   dependencies:",
          "5618:     for-in \"^1.0.2\"",
          "5619:     is-extendable \"^1.0.1\"",
          "",
          "[Added Lines]",
          "4939:   integrity sha512-rSJ0cdmCj3qmKdObcnMcWgPVOyaOWlazLhZAJW0s6G6lx1ZEuFkraWmEH5LTvX90btkfHPclQBjvjU7A/kYRFg==",
          "4941: minimist@^1.1.0, minimist@^1.2.0, minimist@^1.2.6:",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "5659: mold-source-map@~0.4.0:",
          "5660:   version \"0.4.0\"",
          "5661:   resolved \"https://registry.yarnpkg.com/mold-source-map/-/mold-source-map-0.4.0.tgz#cf67e0b31c47ab9badb5c9c25651862127bb8317\"",
          "5663:   dependencies:",
          "5664:     convert-source-map \"^1.1.0\"",
          "5665:     through \"~2.2.7\"",
          "",
          "[Removed Lines]",
          "5662:   integrity sha1-z2fgsxxHq5uttcnCVlGGISe7gxc=",
          "",
          "[Added Lines]",
          "4987:   integrity sha512-Y0uA/sDKVuPgLd7BmaJOai+fqzjrOlR6vZgx5cJIvturI/xOPQPgbf3X7ZbzJd6MvqQ6ucIfK8dSteFyc2Mw2w==",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "5667: ms@2.0.0:",
          "5668:   version \"2.0.0\"",
          "5669:   resolved \"https://registry.yarnpkg.com/ms/-/ms-2.0.0.tgz#5608aeadfc00be6c2901df5f9861788de0d597c8\"",
          "5672: ms@2.1.2:",
          "5673:   version \"2.1.2\"",
          "",
          "[Removed Lines]",
          "5670:   integrity sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=",
          "",
          "[Added Lines]",
          "4995:   integrity sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "5679:   resolved \"https://registry.yarnpkg.com/ms/-/ms-2.1.3.tgz#574c8138ce1d2b5861f0b44579dbadd60c6615b2\"",
          "5680:   integrity sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "5699: natural-compare@^1.4.0:",
          "5700:   version \"1.4.0\"",
          "5701:   resolved \"https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7\"",
          "5704: neo-async@^2.6.1:",
          "5705:   version \"2.6.2\"",
          "",
          "[Removed Lines]",
          "5682: nanomatch@^1.2.9:",
          "5683:   version \"1.2.13\"",
          "5684:   resolved \"https://registry.yarnpkg.com/nanomatch/-/nanomatch-1.2.13.tgz#b87a8aa4fc0de8fe6be88895b38983ff265bd119\"",
          "5685:   integrity sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==",
          "5686:   dependencies:",
          "5687:     arr-diff \"^4.0.0\"",
          "5688:     array-unique \"^0.3.2\"",
          "5689:     define-property \"^2.0.2\"",
          "5690:     extend-shallow \"^3.0.2\"",
          "5691:     fragment-cache \"^0.2.1\"",
          "5692:     is-windows \"^1.0.2\"",
          "5693:     kind-of \"^6.0.2\"",
          "5694:     object.pick \"^1.3.0\"",
          "5695:     regex-not \"^1.0.0\"",
          "5696:     snapdragon \"^0.8.1\"",
          "5697:     to-regex \"^3.0.1\"",
          "5702:   integrity sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
          "",
          "[Added Lines]",
          "5010:   integrity sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "5711:   resolved \"https://registry.yarnpkg.com/next-tick/-/next-tick-1.1.0.tgz#1836ee30ad56d67ef281b22bd199f709449b35eb\"",
          "5712:   integrity sha512-CXdUiJembsNjuToQvxayPZF9Vqht7hewsvy2sOWafLvi2awflj9mOC6bHIg50orX8IJvWKY9wYQ/zB2kogPslQ==",
          "5719: node-dir@^0.1.10:",
          "5720:   version \"0.1.17\"",
          "5721:   resolved \"https://registry.yarnpkg.com/node-dir/-/node-dir-0.1.17.tgz#5f5665d93351335caabef8f1c554516cf5f1e4e5\"",
          "",
          "[Removed Lines]",
          "5714: nice-try@^1.0.4:",
          "5715:   version \"1.0.5\"",
          "5716:   resolved \"https://registry.yarnpkg.com/nice-try/-/nice-try-1.0.5.tgz#a3378a7696ce7d223e88fc9b764bd7ef1089e366\"",
          "5717:   integrity sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "5735:   resolved \"https://registry.yarnpkg.com/node-int64/-/node-int64-0.4.0.tgz#87a9065cdb355d3182d8f94ce11188b825c68a3b\"",
          "5736:   integrity sha1-h6kGXNs1XTGC2PlM4RGIuCXGijs=",
          "5750: node-releases@^2.0.3:",
          "5772: normalize-path@^3.0.0, normalize-path@~3.0.0:",
          "5773:   version \"3.0.0\"",
          "5774:   resolved \"https://registry.yarnpkg.com/normalize-path/-/normalize-path-3.0.0.tgz#0dcd69ff23a1c9b11fd0978316644a0388216a65\"",
          "5785:   version \"4.0.1\"",
          "5786:   resolved \"https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-4.0.1.tgz#b7ecd1e5ed53da8e37a55e1c2269e0b97ed748ea\"",
          "5787:   integrity sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
          "5788:   dependencies:",
          "5789:     path-key \"^3.0.0\"",
          "5796: oauth-sign@~0.9.0:",
          "5797:   version \"0.9.0\"",
          "5798:   resolved \"https://registry.yarnpkg.com/oauth-sign/-/oauth-sign-0.9.0.tgz#47a7b016baa68b5fa0ecf3dee08a85c679ac6455\"",
          "",
          "[Removed Lines]",
          "5738: node-notifier@^8.0.0:",
          "5739:   version \"8.0.2\"",
          "5740:   resolved \"https://registry.yarnpkg.com/node-notifier/-/node-notifier-8.0.2.tgz#f3167a38ef0d2c8a866a83e318c1ba0efeb702c5\"",
          "5741:   integrity sha512-oJP/9NAdd9+x2Q+rfphB2RJCHjod70RcRLjosiPMMu5gjIfwVnOUGq2nbTjTUbmy0DJ/tFIVT30+Qe3nzl4TJg==",
          "5742:   dependencies:",
          "5743:     growly \"^1.3.0\"",
          "5744:     is-wsl \"^2.2.0\"",
          "5745:     semver \"^7.3.2\"",
          "5746:     shellwords \"^0.1.1\"",
          "5747:     uuid \"^8.3.0\"",
          "5748:     which \"^2.0.2\"",
          "5751:   version \"2.0.4\"",
          "5752:   resolved \"https://registry.yarnpkg.com/node-releases/-/node-releases-2.0.4.tgz#f38252370c43854dc48aa431c766c6c398f40476\"",
          "5753:   integrity sha512-gbMzqQtTtDz/00jQzZ21PQzdI9PyLYqUSvD0p3naOhX4odFji0ZxYdnVwPTxmSwkmxhcFImpozceidSG+AgoPQ==",
          "5755: normalize-package-data@^2.5.0:",
          "5756:   version \"2.5.0\"",
          "5757:   resolved \"https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.5.0.tgz#e66db1838b200c1dfc233225d12cb36520e234a8\"",
          "5758:   integrity sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
          "5759:   dependencies:",
          "5760:     hosted-git-info \"^2.1.4\"",
          "5761:     resolve \"^1.10.0\"",
          "5762:     semver \"2 || 3 || 4 || 5\"",
          "5763:     validate-npm-package-license \"^3.0.1\"",
          "5765: normalize-path@^2.1.1:",
          "5766:   version \"2.1.1\"",
          "5767:   resolved \"https://registry.yarnpkg.com/normalize-path/-/normalize-path-2.1.1.tgz#1ab28b556e198363a8c1a6f7e6fa20137fe6aed9\"",
          "5768:   integrity sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=",
          "5769:   dependencies:",
          "5770:     remove-trailing-separator \"^1.0.1\"",
          "5775:   integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
          "5777: npm-run-path@^2.0.0:",
          "5778:   version \"2.0.2\"",
          "5779:   resolved \"https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-2.0.2.tgz#35a9232dfa35d7067b4cb2ddf2357b1871536c5f\"",
          "5780:   integrity sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=",
          "5781:   dependencies:",
          "5782:     path-key \"^2.0.0\"",
          "5784: npm-run-path@^4.0.0:",
          "5791: nwsapi@^2.2.0:",
          "5792:   version \"2.2.0\"",
          "5793:   resolved \"https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.2.0.tgz#204879a9e3d068ff2a55139c2c772780681a38b7\"",
          "5794:   integrity sha512-h2AatdwYH+JHiZpv7pt/gSX1XoRGb7L/qSIeuqA6GwYoF9w1vP1cw42TO0aI2pNyshRK5893hNSl+1//vHK7hQ==",
          "",
          "[Added Lines]",
          "5042:   version \"2.0.5\"",
          "5043:   resolved \"https://registry.yarnpkg.com/node-releases/-/node-releases-2.0.5.tgz#280ed5bc3eba0d96ce44897d8aee478bfb3d9666\"",
          "5044:   integrity sha512-U9h1NLROZTq9uE1SNffn6WuPDg8icmi3ns4rEl/oTfIle4iLjTliCzgTsbaIFMq/Xn078/lfY/BL0GWZ+psK4Q==",
          "5049:   integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
          "5051: npm-run-path@^4.0.1:",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "5803:   resolved \"https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863\"",
          "5804:   integrity sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
          "5821:   version \"1.1.1\"",
          "5822:   resolved \"https://registry.yarnpkg.com/object-keys/-/object-keys-1.1.1.tgz#1c47f272df277f3b1daf061677d9c82e2322c60e\"",
          "5823:   integrity sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
          "5832: object.assign@^4.1.0, object.assign@^4.1.2:",
          "5833:   version \"4.1.2\"",
          "5834:   resolved \"https://registry.yarnpkg.com/object.assign/-/object.assign-4.1.2.tgz#0ed54a342eceb37b38ff76eb831a0e788cb63940\"",
          "",
          "[Removed Lines]",
          "5806: object-copy@^0.1.0:",
          "5807:   version \"0.1.0\"",
          "5808:   resolved \"https://registry.yarnpkg.com/object-copy/-/object-copy-0.1.0.tgz#7e7d858b781bd7c991a41ba975ed3812754e998c\"",
          "5809:   integrity sha1-fn2Fi3gb18mRpBupde04EnVOmYw=",
          "5810:   dependencies:",
          "5811:     copy-descriptor \"^0.1.0\"",
          "5812:     define-property \"^0.2.5\"",
          "5813:     kind-of \"^3.0.3\"",
          "5815: object-inspect@^1.1.0, object-inspect@^1.12.0, object-inspect@^1.9.0:",
          "5816:   version \"1.12.0\"",
          "5817:   resolved \"https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.12.0.tgz#6e2c120e868fd1fd18cb4f18c31741d0d6e776f0\"",
          "5818:   integrity sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g==",
          "5820: object-keys@^1.0.9, object-keys@^1.1.1:",
          "5825: object-visit@^1.0.0:",
          "5826:   version \"1.0.1\"",
          "5827:   resolved \"https://registry.yarnpkg.com/object-visit/-/object-visit-1.0.1.tgz#f79c4493af0c5377b59fe39d395e41042dd045bb\"",
          "5828:   integrity sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=",
          "5829:   dependencies:",
          "5830:     isobject \"^3.0.0\"",
          "",
          "[Added Lines]",
          "5068: object-inspect@^1.12.0, object-inspect@^1.9.0:",
          "5069:   version \"1.12.2\"",
          "5070:   resolved \"https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.12.2.tgz#c0641f26394532f28ab8d796ab954e43c009a8ea\"",
          "5071:   integrity sha512-z+cPxW0QGUp0mcqcsgQyLVRDoXFQbXOwBaqyF7VIgI4TWNQsDHrBpUQslRmIfAoYWdYzs6UlKJtB2XJpTaNSpQ==",
          "5073: object-keys@^1.1.1:",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "5839:     has-symbols \"^1.0.1\"",
          "5840:     object-keys \"^1.1.1\"",
          "5868: object.values@^1.1.5:",
          "5869:   version \"1.1.5\"",
          "5870:   resolved \"https://registry.yarnpkg.com/object.values/-/object.values-1.1.5.tgz#959f63e3ce9ef108720333082131e4a459b716ac\"",
          "",
          "[Removed Lines]",
          "5842: object.entries@^1.1.5:",
          "5843:   version \"1.1.5\"",
          "5844:   resolved \"https://registry.yarnpkg.com/object.entries/-/object.entries-1.1.5.tgz#e1acdd17c4de2cd96d5a08487cfb9db84d881861\"",
          "5845:   integrity sha512-TyxmjUoZggd4OrrU1W66FMDG6CuqJxsFvymeyXI51+vQLN67zYfZseptRge703kKQdo4uccgAKebXFcRCzk4+g==",
          "5846:   dependencies:",
          "5847:     call-bind \"^1.0.2\"",
          "5848:     define-properties \"^1.1.3\"",
          "5849:     es-abstract \"^1.19.1\"",
          "5851: object.getprototypeof@^1.0.3:",
          "5852:   version \"1.0.3\"",
          "5853:   resolved \"https://registry.yarnpkg.com/object.getprototypeof/-/object.getprototypeof-1.0.3.tgz#92e0c2320ffd3990f3378c9c3489929af31a190f\"",
          "5854:   integrity sha512-EP3J0rXZA4OuvSl98wYa0hY5zHUJo2kGrp2eYDro0yCe3yrKm7xtXDgbpT+YPK2RzdtdvJtm0IfaAyXeehQR0w==",
          "5855:   dependencies:",
          "5856:     call-bind \"^1.0.2\"",
          "5857:     define-properties \"^1.1.3\"",
          "5858:     es-abstract \"^1.19.1\"",
          "5859:     reflect.getprototypeof \"^1.0.2\"",
          "5861: object.pick@^1.3.0:",
          "5862:   version \"1.3.0\"",
          "5863:   resolved \"https://registry.yarnpkg.com/object.pick/-/object.pick-1.3.0.tgz#87a10ac4c1694bd2e1cbf53591a66141fb5dd747\"",
          "5864:   integrity sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=",
          "5865:   dependencies:",
          "5866:     isobject \"^3.0.1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "5874:     define-properties \"^1.1.3\"",
          "5875:     es-abstract \"^1.19.1\"",
          "5878:   version \"1.4.0\"",
          "5879:   resolved \"https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1\"",
          "5880:   integrity sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
          "5881:   dependencies:",
          "5882:     wrappy \"1\"",
          "5885:   version \"5.1.2\"",
          "5886:   resolved \"https://registry.yarnpkg.com/onetime/-/onetime-5.1.2.tgz#d0e96ebb56b07476df1dd9c4806e5237985ca45e\"",
          "5887:   integrity sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
          "5888:   dependencies:",
          "5889:     mimic-fn \"^2.1.0\"",
          "5903: optionator@^0.9.1:",
          "5904:   version \"0.9.1\"",
          "5905:   resolved \"https://registry.yarnpkg.com/optionator/-/optionator-0.9.1.tgz#4f236a6373dae0566a6d43e1326674f50c291499\"",
          "",
          "[Removed Lines]",
          "5877: once@^1.3.0, once@^1.3.1, once@^1.4.0:",
          "5884: onetime@^5.1.0:",
          "5891: optionator@^0.8.1:",
          "5892:   version \"0.8.3\"",
          "5893:   resolved \"https://registry.yarnpkg.com/optionator/-/optionator-0.8.3.tgz#84fa1d036fe9d3c7e21d99884b601167ec8fb495\"",
          "5894:   integrity sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
          "5895:   dependencies:",
          "5896:     deep-is \"~0.1.3\"",
          "5897:     fast-levenshtein \"~2.0.6\"",
          "5898:     levn \"~0.3.0\"",
          "5899:     prelude-ls \"~1.1.2\"",
          "5900:     type-check \"~0.3.2\"",
          "5901:     word-wrap \"~1.2.3\"",
          "",
          "[Added Lines]",
          "5097: once@^1.3.0, once@^1.4.0:",
          "5104: onetime@^5.1.2:",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "5917:   resolved \"https://registry.yarnpkg.com/os-browserify/-/os-browserify-0.3.0.tgz#854373c7f5c2315914fc9bfc6bd8238fdda1ec27\"",
          "5918:   integrity sha1-hUNzx/XCMVkU/Jv8a9gjj92h7Cc=",
          "5930: p-limit@^1.1.0:",
          "5931:   version \"1.3.0\"",
          "5932:   resolved \"https://registry.yarnpkg.com/p-limit/-/p-limit-1.3.0.tgz#b86bd5f0c25690911c7590fcbfc2010d54b3ccb8\"",
          "",
          "[Removed Lines]",
          "5920: p-each-series@^2.1.0:",
          "5921:   version \"2.2.0\"",
          "5922:   resolved \"https://registry.yarnpkg.com/p-each-series/-/p-each-series-2.2.0.tgz#105ab0357ce72b202a8a8b94933672657b5e2a9a\"",
          "5923:   integrity sha512-ycIL2+1V32th+8scbpTvyHNaHe02z0sjgh91XXjAk+ZeXoPN4Z46DVUnzdso0aX4KckKw0FNNFHdjZ2UsZvxiA==",
          "5925: p-finally@^1.0.0:",
          "5926:   version \"1.0.0\"",
          "5927:   resolved \"https://registry.yarnpkg.com/p-finally/-/p-finally-1.0.0.tgz#3fbcfb15b899a44123b34b6dcc18b724336a2cae\"",
          "5928:   integrity sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "6031:   dependencies:",
          "6032:     error-ex \"^1.2.0\"",
          "6035:   version \"5.2.0\"",
          "6036:   resolved \"https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd\"",
          "6037:   integrity sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
          "",
          "[Removed Lines]",
          "6034: parse-json@^5.0.0:",
          "",
          "[Added Lines]",
          "5232: parse-json@^5.2.0:",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "6041:     json-parse-even-better-errors \"^2.3.0\"",
          "6042:     lines-and-columns \"^1.1.6\"",
          "6054: path-browserify@^1.0.0:",
          "6055:   version \"1.0.1\"",
          "6056:   resolved \"https://registry.yarnpkg.com/path-browserify/-/path-browserify-1.0.1.tgz#d98454a9c3753d5790860f16f68867b9e46be1fd\"",
          "",
          "[Removed Lines]",
          "6044: parse5@6.0.1:",
          "6045:   version \"6.0.1\"",
          "6046:   resolved \"https://registry.yarnpkg.com/parse5/-/parse5-6.0.1.tgz#e1a1c085c569b3dc08321184f19a39cc27f7c30b\"",
          "6047:   integrity sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==",
          "6049: pascalcase@^0.1.1:",
          "6050:   version \"0.1.1\"",
          "6051:   resolved \"https://registry.yarnpkg.com/pascalcase/-/pascalcase-0.1.1.tgz#b363e55e8006ca6fe21784d2db22bd15d7917f14\"",
          "6052:   integrity sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "6071:   resolved \"https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f\"",
          "6072:   integrity sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
          "6079: path-key@^3.0.0, path-key@^3.1.0:",
          "6080:   version \"3.1.1\"",
          "6081:   resolved \"https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375\"",
          "",
          "[Removed Lines]",
          "6074: path-key@^2.0.0, path-key@^2.0.1:",
          "6075:   version \"2.0.1\"",
          "6076:   resolved \"https://registry.yarnpkg.com/path-key/-/path-key-2.0.1.tgz#411cadb574c5a140d3a4b1910d40d80cc9f40b40\"",
          "6077:   integrity sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "6117:   resolved \"https://registry.yarnpkg.com/picocolors/-/picocolors-1.0.0.tgz#cb5bdc74ff3f51892236eaf79d68bc44564ab81c\"",
          "6118:   integrity sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
          "6121:   version \"2.3.1\"",
          "6122:   resolved \"https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.1.tgz#3ba3833733646d9d3e4995946c1365a67fb07a42\"",
          "6123:   integrity sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
          "",
          "[Removed Lines]",
          "6120: picomatch@^2.0.4, picomatch@^2.2.1, picomatch@^2.3.1:",
          "",
          "[Added Lines]",
          "5303: picomatch@^2.0.4, picomatch@^2.2.1, picomatch@^2.2.3, picomatch@^2.3.1:",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "6127:   resolved \"https://registry.yarnpkg.com/pify/-/pify-4.0.1.tgz#4b2cd25c50d598735c50292224fd8c6df41e3231\"",
          "6128:   integrity sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
          "6131:   version \"4.0.5\"",
          "6132:   resolved \"https://registry.yarnpkg.com/pirates/-/pirates-4.0.5.tgz#feec352ea5c3268fb23a37c702ab1699f35a5f3b\"",
          "6133:   integrity sha512-8V9+HQPupnaXMA23c5hvl69zXvTwTzyAYasnkb0Tts4XvO4CliqONMOnvlq26rkhLC3nWDFBJf73LU1e1VZLaQ==",
          "",
          "[Removed Lines]",
          "6130: pirates@^4.0.1, pirates@^4.0.5:",
          "",
          "[Added Lines]",
          "5313: pirates@^4.0.4, pirates@^4.0.5:",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "6146:   dependencies:",
          "6147:     find-up \"^4.0.0\"",
          "6154: prelude-ls@^1.2.1:",
          "6155:   version \"1.2.1\"",
          "6156:   resolved \"https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.2.1.tgz#debc6489d7a6e6b0e7611888cec880337d316396\"",
          "6157:   integrity sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
          "6168:   dependencies:",
          "6172:     react-is \"^17.0.1\"",
          "6174: private@^0.1.8:",
          "6175:   version \"0.1.8\"",
          "6176:   resolved \"https://registry.yarnpkg.com/private/-/private-0.1.8.tgz#2381edb3689f7a53d653190060fcf822d2f368ff\"",
          "",
          "[Removed Lines]",
          "6149: posix-character-classes@^0.1.0:",
          "6150:   version \"0.1.1\"",
          "6151:   resolved \"https://registry.yarnpkg.com/posix-character-classes/-/posix-character-classes-0.1.1.tgz#01eac0fe3b5af71a2a6c02feabb8c1fef7e00eab\"",
          "6152:   integrity sha1-AerA/jta9xoqbAL+q7jB/vfgDqs=",
          "6159: prelude-ls@~1.1.2:",
          "6160:   version \"1.1.2\"",
          "6161:   resolved \"https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54\"",
          "6162:   integrity sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=",
          "6164: pretty-format@^26.0.0, pretty-format@^26.6.2:",
          "6165:   version \"26.6.2\"",
          "6166:   resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-26.6.2.tgz#e35c2705f14cb7fe2fe94fa078345b444120fc93\"",
          "6167:   integrity sha512-7AeGuCYNGmycyQbCqd/3PWH4eOoX/OiCa0uphp57NVTeAGdJGaAliecxwBDHYQCIvrW7aDBZCYeNTP/WX69mkg==",
          "6169:     \"@jest/types\" \"^26.6.2\"",
          "6170:     ansi-regex \"^5.0.0\"",
          "6171:     ansi-styles \"^4.0.0\"",
          "",
          "[Added Lines]",
          "5337: pretty-format@^27.0.0, pretty-format@^27.5.1:",
          "5338:   version \"27.5.1\"",
          "5339:   resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-27.5.1.tgz#2181879fdea51a7a5851fb39d920faa63f01d88e\"",
          "5340:   integrity sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
          "5342:     ansi-regex \"^5.0.1\"",
          "5343:     ansi-styles \"^5.0.0\"",
          "5346: pretty-format@^28.1.0:",
          "5347:   version \"28.1.0\"",
          "5348:   resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-28.1.0.tgz#8f5836c6a0dfdb834730577ec18029052191af55\"",
          "5349:   integrity sha512-79Z4wWOYCdvQkEoEuSlBhHJqWeZ8D8YRPiPctJFCtvuaClGpiwiQYSCUOE6IEKUbbFukKOTFIUAXE8N4EQTo1Q==",
          "5350:   dependencies:",
          "5351:     \"@jest/schemas\" \"^28.0.2\"",
          "5352:     ansi-regex \"^5.0.1\"",
          "5353:     ansi-styles \"^5.0.0\"",
          "5354:     react-is \"^18.0.0\"",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "6215:   resolved \"https://registry.yarnpkg.com/pseudomap/-/pseudomap-1.0.2.tgz#f052a28da70e618917ef0a8ac34c1ae5a68286b3\"",
          "6216:   integrity sha1-8FKijacOYYkX7wqKw0wa5aaChrM=",
          "6219:   version \"1.8.0\"",
          "6220:   resolved \"https://registry.yarnpkg.com/psl/-/psl-1.8.0.tgz#9326f8bcfb013adcc005fdff056acce020e51c24\"",
          "6221:   integrity sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ==",
          "",
          "[Removed Lines]",
          "6218: psl@^1.1.28, psl@^1.1.33:",
          "",
          "[Added Lines]",
          "5400: psl@^1.1.28:",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "6337:     pug-runtime \"^2.0.5\"",
          "6338:     pug-strip-comments \"^1.0.4\"",
          "6348: punycode@1.3.2:",
          "6349:   version \"1.3.2\"",
          "6350:   resolved \"https://registry.yarnpkg.com/punycode/-/punycode-1.3.2.tgz#9653a036fb7c1ee42342f2325cceefea3926c48d\"",
          "",
          "[Removed Lines]",
          "6340: pump@^3.0.0:",
          "6341:   version \"3.0.0\"",
          "6342:   resolved \"https://registry.yarnpkg.com/pump/-/pump-3.0.0.tgz#b4a2116815bde2f4e1ea602354e8c75565107a64\"",
          "6343:   integrity sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
          "6344:   dependencies:",
          "6345:     end-of-stream \"^1.1.0\"",
          "6346:     once \"^1.3.1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "6414:     prop-types \"^15.7.2\"",
          "6416: react-docgen@^5.4.0:",
          "6420:   dependencies:",
          "6421:     \"@babel/core\" \"^7.7.5\"",
          "6422:     \"@babel/generator\" \"^7.12.11\"",
          "",
          "[Removed Lines]",
          "6417:   version \"5.4.0\"",
          "6418:   resolved \"https://registry.yarnpkg.com/react-docgen/-/react-docgen-5.4.0.tgz#2cd7236720ec2769252ef0421f23250b39a153a1\"",
          "6419:   integrity sha512-JBjVQ9cahmNlfjMGxWUxJg919xBBKAoy3hgDgKERbR+BcF4ANpDuzWAScC7j27hZfd8sJNmMPOLWo9+vB/XJEQ==",
          "",
          "[Added Lines]",
          "5591:   version \"5.4.1\"",
          "5592:   resolved \"https://registry.yarnpkg.com/react-docgen/-/react-docgen-5.4.1.tgz#867168accce39e25095a23a922eaa90722e9d182\"",
          "5593:   integrity sha512-TZqD1aApirw86NV6tHrmDoxUn8wlinkVyutFarzbdwuhEurAzDN0y5sSj64o+BrHLPqjwpH9tunpfwgy+3Uyww==",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "6430:     strip-indent \"^3.0.0\"",
          "6432: react-frame-component@^5.2.1:",
          "6437: react-is@^16.13.1:",
          "6438:   version \"16.13.1\"",
          "",
          "[Removed Lines]",
          "6433:   version \"5.2.1\"",
          "6434:   resolved \"https://registry.yarnpkg.com/react-frame-component/-/react-frame-component-5.2.1.tgz#6bd5ec73ef7d720f57ee8f259546ed926a941267\"",
          "6435:   integrity sha512-nrSh1OZuHlX69eWqJPiUkPT9S6/wxc4PpJV+vOQ4pHQQ8XmIsIT+utWT+nX32ZfANHZuKONA7JsWMUGT36CqaQ==",
          "",
          "[Added Lines]",
          "5607:   version \"5.2.3\"",
          "5608:   resolved \"https://registry.yarnpkg.com/react-frame-component/-/react-frame-component-5.2.3.tgz#2d5d1e29b23d5b915c839b44980d03bb9cafc453\"",
          "5609:   integrity sha512-r+h0o3r/uqOLNT724z4CRVkxQouKJvoi3OPfjqWACD30Y87rtEmeJrNZf1WYPGknn1Y8200HAjx7hY/dPUGgmA==",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "6444:   resolved \"https://registry.yarnpkg.com/react-is/-/react-is-17.0.2.tgz#e691d4a8e9c789365655539ab372762b0efb54f0\"",
          "6445:   integrity sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
          "6447: read-only-stream@^2.0.0:",
          "6448:   version \"2.0.0\"",
          "6449:   resolved \"https://registry.yarnpkg.com/read-only-stream/-/read-only-stream-2.0.0.tgz#2724fd6a8113d73764ac288d4386270c1dbf17f0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5621: react-is@^18.0.0:",
          "5622:   version \"18.1.0\"",
          "5623:   resolved \"https://registry.yarnpkg.com/react-is/-/react-is-18.1.0.tgz#61aaed3096d30eacf2a2127118b5b41387d32a67\"",
          "5624:   integrity sha512-Fl7FuabXsJnV5Q1qIOQwx/sagGF18kogb4gpfcG4gjLBWO0WDiiz1ko/ExayuxE7InyQkBLkxRFG5oxY6Uu3Kg==",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "6451:   dependencies:",
          "6452:     readable-stream \"^2.0.2\"",
          "6473: readable-stream@^2.0.2, readable-stream@^2.2.2, readable-stream@~2.3.6:",
          "6474:   version \"2.3.7\"",
          "6475:   resolved \"https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.7.tgz#1eca1cf711aef814c04f62252a36a62f6cb23b57\"",
          "",
          "[Removed Lines]",
          "6454: read-pkg-up@^7.0.1:",
          "6455:   version \"7.0.1\"",
          "6456:   resolved \"https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-7.0.1.tgz#f3a6135758459733ae2b95638056e1854e7ef507\"",
          "6457:   integrity sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg==",
          "6458:   dependencies:",
          "6459:     find-up \"^4.1.0\"",
          "6460:     read-pkg \"^5.2.0\"",
          "6461:     type-fest \"^0.8.1\"",
          "6463: read-pkg@^5.2.0:",
          "6464:   version \"5.2.0\"",
          "6465:   resolved \"https://registry.yarnpkg.com/read-pkg/-/read-pkg-5.2.0.tgz#7bf295438ca5a33e56cd30e053b34ee7250c93cc\"",
          "6466:   integrity sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==",
          "6467:   dependencies:",
          "6468:     \"@types/normalize-package-data\" \"^2.4.0\"",
          "6469:     normalize-package-data \"^2.5.0\"",
          "6470:     parse-json \"^5.0.0\"",
          "6471:     type-fest \"^0.6.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "6519:     private \"^0.1.8\"",
          "6520:     source-map \"~0.6.1\"",
          "6533: regenerate-unicode-properties@^10.0.1:",
          "6534:   version \"10.0.1\"",
          "6535:   resolved \"https://registry.yarnpkg.com/regenerate-unicode-properties/-/regenerate-unicode-properties-10.0.1.tgz#7f442732aa7934a3740c779bb9b3340dccc1fb56\"",
          "",
          "[Removed Lines]",
          "6522: reflect.getprototypeof@^1.0.2:",
          "6523:   version \"1.0.2\"",
          "6524:   resolved \"https://registry.yarnpkg.com/reflect.getprototypeof/-/reflect.getprototypeof-1.0.2.tgz#dd231808828913fd2198e151eb3e213d9dddf708\"",
          "6525:   integrity sha512-C1+ANgX50UkWlntmOJ8SD1VTuk28+7X1ackBdfXzLQG5+bmriEMHvBaor9YlotCfBHo277q/YWd/JKEOzr5Dxg==",
          "6526:   dependencies:",
          "6527:     call-bind \"^1.0.2\"",
          "6528:     define-properties \"^1.1.3\"",
          "6529:     es-abstract \"^1.19.1\"",
          "6530:     get-intrinsic \"^1.1.1\"",
          "6531:     which-builtin-type \"^1.1.1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "6559:   dependencies:",
          "6560:     \"@babel/runtime\" \"^7.8.4\"",
          "6566:   dependencies:",
          "6570: regexpp@^3.2.0:",
          "6571:   version \"3.2.0\"",
          "",
          "[Removed Lines]",
          "6562: regex-not@^1.0.0, regex-not@^1.0.2:",
          "6563:   version \"1.0.2\"",
          "6564:   resolved \"https://registry.yarnpkg.com/regex-not/-/regex-not-1.0.2.tgz#1f4ece27e00b0b65e0247a6810e6a85d83a5752c\"",
          "6565:   integrity sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==",
          "6567:     extend-shallow \"^3.0.2\"",
          "6568:     safe-regex \"^1.1.0\"",
          "",
          "[Added Lines]",
          "5711: regexp.prototype.flags@^1.4.3:",
          "5712:   version \"1.4.3\"",
          "5713:   resolved \"https://registry.yarnpkg.com/regexp.prototype.flags/-/regexp.prototype.flags-1.4.3.tgz#87cab30f80f66660181a3bb7bf5981a872b367ac\"",
          "5714:   integrity sha512-fjggEOO3slI6Wvgjwflkc4NFRCTZAu5CnNfBd5qOMYhWdn67nJBBu34/TkD++eeFmd8C9r9jfXJ27+nSiRkSUA==",
          "5716:     call-bind \"^1.0.2\"",
          "5717:     define-properties \"^1.1.3\"",
          "5718:     functions-have-names \"^1.2.2\"",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "6596:   dependencies:",
          "6597:     jsesc \"~0.5.0\"",
          "6610:   version \"1.6.1\"",
          "6611:   resolved \"https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637\"",
          "6612:   integrity sha1-jcrkcOHIirwtYA//Sndihtp15jc=",
          "",
          "[Removed Lines]",
          "6599: remove-trailing-separator@^1.0.1:",
          "6600:   version \"1.1.0\"",
          "6601:   resolved \"https://registry.yarnpkg.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz#c24bce2a283adad5bc3f58e0d48249b92379d8ef\"",
          "6602:   integrity sha1-wkvOKig62tW8P1jg1IJJuSN52O8=",
          "6604: repeat-element@^1.1.2:",
          "6605:   version \"1.1.4\"",
          "6606:   resolved \"https://registry.yarnpkg.com/repeat-element/-/repeat-element-1.1.4.tgz#be681520847ab58c7568ac75fbfad28ed42d39e9\"",
          "6607:   integrity sha512-LFiNfRcSu7KK3evMyYOuCzv3L10TW7yC1G2/+StMjK8Y6Vqd2MG7r/Qjw4ghtuCOjFvlnms/iMmLqpvW/ES/WQ==",
          "6609: repeat-string@^1.5.2, repeat-string@^1.6.1:",
          "",
          "[Added Lines]",
          "5749: repeat-string@^1.5.2:",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "6642:   resolved \"https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42\"",
          "6643:   integrity sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
          "6650: requizzle@^0.2.3:",
          "6651:   version \"0.2.3\"",
          "6652:   resolved \"https://registry.yarnpkg.com/requizzle/-/requizzle-0.2.3.tgz#4675c90aacafb2c036bd39ba2daa4a1cb777fded\"",
          "",
          "[Removed Lines]",
          "6645: require-main-filename@^2.0.0:",
          "6646:   version \"2.0.0\"",
          "6647:   resolved \"https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-2.0.0.tgz#d0b329ecc7cc0f61649f62215be69af54aa8989b\"",
          "6648:   integrity sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "6671:   resolved \"https://registry.yarnpkg.com/resolve-from/-/resolve-from-5.0.0.tgz#c35225843df8f776df21c57557bc087e9dfdfc69\"",
          "6672:   integrity sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
          "6680:   version \"1.22.0\"",
          "6681:   resolved \"https://registry.yarnpkg.com/resolve/-/resolve-1.22.0.tgz#5e0b8c67c15df57a89bdbabe603a002f21731198\"",
          "6682:   integrity sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
          "",
          "[Removed Lines]",
          "6674: resolve-url@^0.2.1:",
          "6675:   version \"0.2.1\"",
          "6676:   resolved \"https://registry.yarnpkg.com/resolve-url/-/resolve-url-0.2.1.tgz#2c637fe77c893afd2a663fe21aa9080068e2052a\"",
          "6677:   integrity sha1-LGN/53yJOv0qZj/iGqkIAGjiBSo=",
          "6679: resolve@^1.1.4, resolve@^1.1.6, resolve@^1.10.0, resolve@^1.14.2, resolve@^1.17.0, resolve@^1.18.1, resolve@^1.20.0, resolve@^1.22.0, resolve@^1.4.0:",
          "",
          "[Added Lines]",
          "5809: resolve.exports@^1.1.0:",
          "5810:   version \"1.1.0\"",
          "5811:   resolved \"https://registry.yarnpkg.com/resolve.exports/-/resolve.exports-1.1.0.tgz#5ce842b94b05146c0e03076985d1d0e7e48c90c9\"",
          "5812:   integrity sha512-J1l+Zxxp4XK3LUDZ9m60LRJF/mAe4z6a4xyabPHk7pvK5t35dACV32iIjJDFeWZFfZlO29w6SZ67knR0tHzJtQ==",
          "5814: resolve@^1.1.4, resolve@^1.1.6, resolve@^1.14.2, resolve@^1.17.0, resolve@^1.20.0, resolve@^1.22.0, resolve@^1.4.0:",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "6685:     path-parse \"^1.0.7\"",
          "6686:     supports-preserve-symlinks-flag \"^1.0.0\"",
          "6693: retry@^0.13.1:",
          "6694:   version \"0.13.1\"",
          "6695:   resolved \"https://registry.yarnpkg.com/retry/-/retry-0.13.1.tgz#185b1587acf67919d63b357349e03537b2484658\"",
          "",
          "[Removed Lines]",
          "6688: ret@~0.1.10:",
          "6689:   version \"0.1.15\"",
          "6690:   resolved \"https://registry.yarnpkg.com/ret/-/ret-0.1.15.tgz#b8a4825d5bdb1fc3f6f53c2bc33f81388681c7bc\"",
          "6691:   integrity sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "6722:     hash-base \"^3.0.0\"",
          "6723:     inherits \"^2.0.1\"",
          "6730: run-parallel@^1.1.9:",
          "6731:   version \"1.2.0\"",
          "6732:   resolved \"https://registry.yarnpkg.com/run-parallel/-/run-parallel-1.2.0.tgz#66d1368da7bdf921eb9d95bd1a9229e7f21a43ee\"",
          "",
          "[Removed Lines]",
          "6725: rsvp@^4.8.4:",
          "6726:   version \"4.8.5\"",
          "6727:   resolved \"https://registry.yarnpkg.com/rsvp/-/rsvp-4.8.5.tgz#c8f155311d167f68f21e168df71ec5b083113734\"",
          "6728:   integrity sha512-nfMOlASu9OnRJo1mbEk2cz0D56a1MBNrJ7orjRZQG10XDyuvwksKbuXNp6qa+kbn839HwjwhBzhFmdsaEAfauA==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "6744:   resolved \"https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d\"",
          "6745:   integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
          "6755:   version \"2.1.2\"",
          "6756:   resolved \"https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a\"",
          "6757:   integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
          "6786: semver@7.0.0:",
          "6787:   version \"7.0.0\"",
          "6788:   resolved \"https://registry.yarnpkg.com/semver/-/semver-7.0.0.tgz#5f3ca35761e47e05b206c6daff2cf814f0316b8e\"",
          "6789:   integrity sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
          "6791: semver@^6.0.0, semver@^6.1.0, semver@^6.1.1, semver@^6.1.2, semver@^6.3.0:",
          "6792:   version \"6.3.0\"",
          "6793:   resolved \"https://registry.yarnpkg.com/semver/-/semver-6.3.0.tgz#ee0a64c8af5e8ceea67687b133761e1becbd1d3d\"",
          "6794:   integrity sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
          "6797:   version \"7.3.7\"",
          "6798:   resolved \"https://registry.yarnpkg.com/semver/-/semver-7.3.7.tgz#12c5b649afdbf9049707796e22a4028814ce523f\"",
          "6799:   integrity sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
          "6800:   dependencies:",
          "6801:     lru-cache \"^6.0.0\"",
          "6818: sha.js@^2.4.0, sha.js@^2.4.8:",
          "6819:   version \"2.4.11\"",
          "6820:   resolved \"https://registry.yarnpkg.com/sha.js/-/sha.js-2.4.11.tgz#37a5cf0b81ecbc6943de109ba2960d1b26584ae7\"",
          "",
          "[Removed Lines]",
          "6747: safe-regex@^1.1.0:",
          "6748:   version \"1.1.0\"",
          "6749:   resolved \"https://registry.yarnpkg.com/safe-regex/-/safe-regex-1.1.0.tgz#40a3669f3b077d1e943d44629e157dd48023bf2e\"",
          "6750:   integrity sha1-QKNmnzsHfR6UPURinhV91IAjvy4=",
          "6751:   dependencies:",
          "6752:     ret \"~0.1.10\"",
          "6754: \"safer-buffer@>= 2.1.2 < 3\", safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:",
          "6759: sane@^4.0.3:",
          "6760:   version \"4.1.0\"",
          "6761:   resolved \"https://registry.yarnpkg.com/sane/-/sane-4.1.0.tgz#ed881fd922733a6c461bc189dc2b6c006f3ffded\"",
          "6762:   integrity sha512-hhbzAgTIX8O7SHfp2c8/kREfEn4qO/9q8C9beyY6+tvZ87EpoZ3i1RIEvp27YBswnNbY9mWd6paKVmKbAgLfZA==",
          "6763:   dependencies:",
          "6764:     \"@cnakazawa/watch\" \"^1.0.3\"",
          "6765:     anymatch \"^2.0.0\"",
          "6766:     capture-exit \"^2.0.0\"",
          "6767:     exec-sh \"^0.3.2\"",
          "6768:     execa \"^1.0.0\"",
          "6769:     fb-watchman \"^2.0.0\"",
          "6770:     micromatch \"^3.1.4\"",
          "6771:     minimist \"^1.1.1\"",
          "6772:     walker \"~1.0.5\"",
          "6774: saxes@^5.0.1:",
          "6775:   version \"5.0.1\"",
          "6776:   resolved \"https://registry.yarnpkg.com/saxes/-/saxes-5.0.1.tgz#eebab953fa3b7608dbe94e5dadb15c888fa6696d\"",
          "6777:   integrity sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
          "6778:   dependencies:",
          "6779:     xmlchars \"^2.2.0\"",
          "6781: \"semver@2 || 3 || 4 || 5\", semver@^5.5.0, semver@^5.6.0:",
          "6782:   version \"5.7.1\"",
          "6783:   resolved \"https://registry.yarnpkg.com/semver/-/semver-5.7.1.tgz#a954f931aeba508d307bbf069eff0c01c96116f7\"",
          "6784:   integrity sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
          "6796: semver@^7.3.2, semver@^7.3.5:",
          "6803: set-blocking@^2.0.0:",
          "6804:   version \"2.0.0\"",
          "6805:   resolved \"https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7\"",
          "6806:   integrity sha1-BF+XgtARrppoA93TgrJDkrPYkPc=",
          "6808: set-value@^2.0.0, set-value@^2.0.1:",
          "6809:   version \"2.0.1\"",
          "6810:   resolved \"https://registry.yarnpkg.com/set-value/-/set-value-2.0.1.tgz#a18d40530e6f07de4228c7defe4227af8cad005b\"",
          "6811:   integrity sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==",
          "6812:   dependencies:",
          "6813:     extend-shallow \"^2.0.1\"",
          "6814:     is-extendable \"^0.1.1\"",
          "6815:     is-plain-object \"^2.0.3\"",
          "6816:     split-string \"^3.0.1\"",
          "",
          "[Added Lines]",
          "5872: safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:",
          "5882: semver@^5.6.0:",
          "5883:   version \"5.7.1\"",
          "5884:   resolved \"https://registry.yarnpkg.com/semver/-/semver-5.7.1.tgz#a954f931aeba508d307bbf069eff0c01c96116f7\"",
          "5885:   integrity sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
          "5892: semver@^7.3.5, semver@^7.3.7:",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "6837:   dependencies:",
          "6838:     fast-safe-stringify \"^2.0.7\"",
          "6847: shebang-command@^2.0.0:",
          "6848:   version \"2.0.0\"",
          "6849:   resolved \"https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea\"",
          "",
          "[Removed Lines]",
          "6840: shebang-command@^1.2.0:",
          "6841:   version \"1.2.0\"",
          "6842:   resolved \"https://registry.yarnpkg.com/shebang-command/-/shebang-command-1.2.0.tgz#44aac65b695b03398968c39f363fee5deafdf1ea\"",
          "6843:   integrity sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
          "6844:   dependencies:",
          "6845:     shebang-regex \"^1.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "6851:   dependencies:",
          "6852:     shebang-regex \"^3.0.0\"",
          "6859: shebang-regex@^3.0.0:",
          "6860:   version \"3.0.0\"",
          "6861:   resolved \"https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172\"",
          "",
          "[Removed Lines]",
          "6854: shebang-regex@^1.0.0:",
          "6855:   version \"1.0.0\"",
          "6856:   resolved \"https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-1.0.0.tgz#da42f49740c0b42db2ca9728571cb190c98efea3\"",
          "6857:   integrity sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "6866:   resolved \"https://registry.yarnpkg.com/shell-quote/-/shell-quote-1.7.3.tgz#aa40edac170445b9a431e17bb62c0b881b9c4123\"",
          "6867:   integrity sha512-Vpfqwm4EnqGdlsBFNmHhxhElJYrdfcxPThu+ryKS5J8L/fhAwLazFZtq+S+TWZ9ANj2piSQLGj6NQg+lKPmxrw==",
          "6874: side-channel@^1.0.4:",
          "6875:   version \"1.0.4\"",
          "6876:   resolved \"https://registry.yarnpkg.com/side-channel/-/side-channel-1.0.4.tgz#efce5c8fdc104ee751b25c58d4290011fa5ea2cf\"",
          "",
          "[Removed Lines]",
          "6869: shellwords@^0.1.1:",
          "6870:   version \"0.1.1\"",
          "6871:   resolved \"https://registry.yarnpkg.com/shellwords/-/shellwords-0.1.1.tgz#d6b9181c1a48d397324c84871efbcfc73fc0654b\"",
          "6872:   integrity sha512-vFwSUfQvqybiICwZY5+DAWIPLKsWO31Q91JSKl3UYv+K5c2QRPzn0qzec6QPu1Qc9eHYItiP3NdJqNVqetYAww==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "6880:     get-intrinsic \"^1.0.2\"",
          "6881:     object-inspect \"^1.9.0\"",
          "6884:   version \"3.0.7\"",
          "6885:   resolved \"https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.7.tgz#a9a1767f8af84155114eaabd73f99273c8f59ad9\"",
          "6886:   integrity sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
          "",
          "[Removed Lines]",
          "6883: signal-exit@^3.0.0, signal-exit@^3.0.2:",
          "",
          "[Added Lines]",
          "5947: signal-exit@^3.0.2, signal-exit@^3.0.3, signal-exit@^3.0.7:",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "6905:   resolved \"https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634\"",
          "6906:   integrity sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
          "6942:   dependencies:",
          "6950:   version \"0.5.21\"",
          "6951:   resolved \"https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.21.tgz#04fe7c7f9e1ed2d662233c28cb2b35b9f63f6e4f\"",
          "6952:   integrity sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
          "",
          "[Removed Lines]",
          "6908: snapdragon-node@^2.0.1:",
          "6909:   version \"2.1.1\"",
          "6910:   resolved \"https://registry.yarnpkg.com/snapdragon-node/-/snapdragon-node-2.1.1.tgz#6c175f86ff14bdb0724563e8f3c1b021a286853b\"",
          "6911:   integrity sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==",
          "6912:   dependencies:",
          "6913:     define-property \"^1.0.0\"",
          "6914:     isobject \"^3.0.0\"",
          "6915:     snapdragon-util \"^3.0.1\"",
          "6917: snapdragon-util@^3.0.1:",
          "6918:   version \"3.0.1\"",
          "6919:   resolved \"https://registry.yarnpkg.com/snapdragon-util/-/snapdragon-util-3.0.1.tgz#f956479486f2acd79700693f6f7b805e45ab56e2\"",
          "6920:   integrity sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==",
          "6921:   dependencies:",
          "6922:     kind-of \"^3.2.0\"",
          "6924: snapdragon@^0.8.1:",
          "6925:   version \"0.8.2\"",
          "6926:   resolved \"https://registry.yarnpkg.com/snapdragon/-/snapdragon-0.8.2.tgz#64922e7c565b0e14204ba1aa7d6964278d25182d\"",
          "6927:   integrity sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==",
          "6928:   dependencies:",
          "6929:     base \"^0.11.1\"",
          "6930:     debug \"^2.2.0\"",
          "6931:     define-property \"^0.2.5\"",
          "6932:     extend-shallow \"^2.0.1\"",
          "6933:     map-cache \"^0.2.2\"",
          "6934:     source-map \"^0.5.6\"",
          "6935:     source-map-resolve \"^0.5.0\"",
          "6936:     use \"^3.1.0\"",
          "6938: source-map-resolve@^0.5.0:",
          "6939:   version \"0.5.3\"",
          "6940:   resolved \"https://registry.yarnpkg.com/source-map-resolve/-/source-map-resolve-0.5.3.tgz#190866bece7553e1f8f267a2ee82c606b5509a1a\"",
          "6941:   integrity sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==",
          "6943:     atob \"^2.1.2\"",
          "6944:     decode-uri-component \"^0.2.0\"",
          "6945:     resolve-url \"^0.2.1\"",
          "6946:     source-map-url \"^0.4.0\"",
          "6947:     urix \"^0.1.0\"",
          "6949: source-map-support@^0.5.16, source-map-support@^0.5.6, source-map-support@~0.5.20:",
          "",
          "[Added Lines]",
          "5972: source-map-support@0.5.13:",
          "5973:   version \"0.5.13\"",
          "5974:   resolved \"https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.13.tgz#31b24a9c2e73c2de85066c0feb7d44767ed52932\"",
          "5975:   integrity sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
          "5977:     buffer-from \"^1.0.0\"",
          "5978:     source-map \"^0.6.0\"",
          "5980: source-map-support@^0.5.16, source-map-support@~0.5.20:",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "6954:     buffer-from \"^1.0.0\"",
          "6955:     source-map \"^0.6.0\"",
          "6967: source-map@^0.6.0, source-map@^0.6.1, source-map@~0.6.0, source-map@~0.6.1:",
          "6968:   version \"0.6.1\"",
          "6969:   resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263\"",
          "6970:   integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
          "7017: sprintf-js@~1.0.2:",
          "7018:   version \"1.0.3\"",
          "",
          "[Removed Lines]",
          "6957: source-map-url@^0.4.0:",
          "6958:   version \"0.4.1\"",
          "6959:   resolved \"https://registry.yarnpkg.com/source-map-url/-/source-map-url-0.4.1.tgz#0af66605a745a5a2f91cf1bbf8a7afbc283dec56\"",
          "6960:   integrity sha512-cPiFOTLUKvJFIg4SKVScy4ilPPW6rFgMgfuZJPNoDuMs3nC1HbMUycBoJw77xFIp6z1UJQJOfx6C9GMH80DiTw==",
          "6962: source-map@^0.5.6, source-map@~0.5.1, source-map@~0.5.3:",
          "6963:   version \"0.5.7\"",
          "6964:   resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc\"",
          "6965:   integrity sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=",
          "6972: source-map@^0.7.3:",
          "6973:   version \"0.7.3\"",
          "6974:   resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.7.3.tgz#5302f8169031735226544092e64981f751750383\"",
          "6975:   integrity sha512-CkCj6giN3S+n9qrYiBTX5gystlENnRW5jZeNLHpe6aue+SrHcG5VYwujhW9s4dY31mEGsxBDrHR6oI69fTXsaQ==",
          "6977: source-map@~0.8.0-beta.0:",
          "6978:   version \"0.8.0-beta.0\"",
          "6979:   resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.8.0-beta.0.tgz#d4c1bb42c3f7ee925f005927ba10709e0d1d1f11\"",
          "6980:   integrity sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==",
          "6981:   dependencies:",
          "6982:     whatwg-url \"^7.0.0\"",
          "6984: spdx-correct@^3.0.0:",
          "6985:   version \"3.1.1\"",
          "6986:   resolved \"https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-3.1.1.tgz#dece81ac9c1e6713e5f7d1b6f17d468fa53d89a9\"",
          "6987:   integrity sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
          "6988:   dependencies:",
          "6989:     spdx-expression-parse \"^3.0.0\"",
          "6990:     spdx-license-ids \"^3.0.0\"",
          "6992: spdx-exceptions@^2.1.0:",
          "6993:   version \"2.3.0\"",
          "6994:   resolved \"https://registry.yarnpkg.com/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz#3f28ce1a77a00372683eade4a433183527a2163d\"",
          "6995:   integrity sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
          "6997: spdx-expression-parse@^3.0.0:",
          "6998:   version \"3.0.1\"",
          "6999:   resolved \"https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz#cf70f50482eefdc98e3ce0a6833e4a53ceeba679\"",
          "7000:   integrity sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
          "7001:   dependencies:",
          "7002:     spdx-exceptions \"^2.1.0\"",
          "7003:     spdx-license-ids \"^3.0.0\"",
          "7005: spdx-license-ids@^3.0.0:",
          "7006:   version \"3.0.11\"",
          "7007:   resolved \"https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-3.0.11.tgz#50c0d8c40a14ec1bf449bae69a0ea4685a9d9f95\"",
          "7008:   integrity sha512-Ctl2BrFiM0X3MANYgj3CkygxhRmr9mi6xhejbdO960nF6EDJApTYpn0BQnDKlnNBULKiCN1n3w9EBkHK8ZWg+g==",
          "7010: split-string@^3.0.1, split-string@^3.0.2:",
          "7011:   version \"3.1.0\"",
          "7012:   resolved \"https://registry.yarnpkg.com/split-string/-/split-string-3.1.0.tgz#7cb09dda3a86585705c64b39a6466038682e8fe2\"",
          "7013:   integrity sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==",
          "7014:   dependencies:",
          "7015:     extend-shallow \"^3.0.0\"",
          "",
          "[Added Lines]",
          "5993: source-map@~0.5.1, source-map@~0.5.3:",
          "5994:   version \"0.5.7\"",
          "5995:   resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc\"",
          "5996:   integrity sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "7034:     safer-buffer \"^2.0.2\"",
          "7035:     tweetnacl \"~0.14.0\"",
          "7038:   version \"2.0.5\"",
          "7039:   resolved \"https://registry.yarnpkg.com/stack-utils/-/stack-utils-2.0.5.tgz#d25265fca995154659dbbfba3b49254778d2fdd5\"",
          "7040:   integrity sha512-xrQcmYhOsn/1kX+Vraq+7j4oE2j/6BFscZ0etmYg81xuM8Gq0022Pxb8+IqgOFUIaxHs0KaSb7T1+OegiNrNFA==",
          "7041:   dependencies:",
          "7042:     escape-string-regexp \"^2.0.0\"",
          "7052: stream-browserify@^3.0.0:",
          "7053:   version \"3.0.0\"",
          "7054:   resolved \"https://registry.yarnpkg.com/stream-browserify/-/stream-browserify-3.0.0.tgz#22b0a2850cdf6503e73085da1fc7b7d0c2122f2f\"",
          "",
          "[Removed Lines]",
          "7037: stack-utils@^2.0.2:",
          "7044: static-extend@^0.1.1:",
          "7045:   version \"0.1.2\"",
          "7046:   resolved \"https://registry.yarnpkg.com/static-extend/-/static-extend-0.1.2.tgz#60809c39cbff55337226fd5e0b520f341f1fb5c6\"",
          "7047:   integrity sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=",
          "7048:   dependencies:",
          "7049:     define-property \"^0.2.5\"",
          "7050:     object-copy \"^0.1.0\"",
          "",
          "[Added Lines]",
          "6018: stack-utils@^2.0.3:",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "7100:     is-fullwidth-code-point \"^3.0.0\"",
          "7101:     strip-ansi \"^6.0.1\"",
          "7104:   version \"1.0.5\"",
          "7105:   resolved \"https://registry.yarnpkg.com/string.prototype.trimend/-/string.prototype.trimend-1.0.5.tgz#914a65baaab25fbdd4ee291ca7dde57e869cb8d0\"",
          "7106:   integrity sha512-I7RGvmjV4pJ7O3kdf+LXFpVfdNOxtCW/2C8f6jNiW4+PQchwxkCDzlk1/7p+Wl4bqFIZeF47qAHXLuHHWKAxog==",
          "",
          "[Removed Lines]",
          "7103: string.prototype.trimend@^1.0.4:",
          "",
          "[Added Lines]",
          "6076: string.prototype.trimend@^1.0.5:",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "7109:     define-properties \"^1.1.4\"",
          "7110:     es-abstract \"^1.19.5\"",
          "7113:   version \"1.0.5\"",
          "7114:   resolved \"https://registry.yarnpkg.com/string.prototype.trimstart/-/string.prototype.trimstart-1.0.5.tgz#5466d93ba58cfa2134839f81d7f42437e8c01fef\"",
          "7115:   integrity sha512-THx16TJCGlsN0o6dl2o6ncWUsdgnLRSA23rRE5pyGBw/mLr3Ej/R2LaqCtgP8VNMGZsvMWnf9ooZPyY2bHvUFg==",
          "",
          "[Removed Lines]",
          "7112: string.prototype.trimstart@^1.0.4:",
          "",
          "[Added Lines]",
          "6085: string.prototype.trimstart@^1.0.5:",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "7156:   resolved \"https://registry.yarnpkg.com/strip-bom/-/strip-bom-4.0.0.tgz#9c3505c1db45bcedca3d9cf7a16f5c5aa3901878\"",
          "7157:   integrity sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
          "7164: strip-final-newline@^2.0.0:",
          "7165:   version \"2.0.0\"",
          "7166:   resolved \"https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz#89b852fb2fcbe936f6f4b3187afb0a12c1ab58ad\"",
          "",
          "[Removed Lines]",
          "7159: strip-eof@^1.0.0:",
          "7160:   version \"1.0.0\"",
          "7161:   resolved \"https://registry.yarnpkg.com/strip-eof/-/strip-eof-1.0.0.tgz#bb43ff5598a6eb05d89b59fcd129c983313606bf\"",
          "7162:   integrity sha1-u0P/VZim6wXYm1n80SnJgzE2Br8=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "7204:   dependencies:",
          "7205:     has-flag \"^4.0.0\"",
          "7207: supports-hyperlinks@^2.0.0:",
          "7208:   version \"2.2.0\"",
          "7209:   resolved \"https://registry.yarnpkg.com/supports-hyperlinks/-/supports-hyperlinks-2.2.0.tgz#4f77b42488765891774b70c79babd87f9bd594bb\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6175: supports-color@^8.0.0:",
          "6176:   version \"8.1.1\"",
          "6177:   resolved \"https://registry.yarnpkg.com/supports-color/-/supports-color-8.1.1.tgz#cd6fc17e28500cff56c1b86c0a7fd4a54a73005c\"",
          "6178:   integrity sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
          "6179:   dependencies:",
          "6180:     has-flag \"^4.0.0\"",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "7217:   resolved \"https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09\"",
          "7218:   integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
          "7225: syntax-error@^1.1.1:",
          "7226:   version \"1.4.0\"",
          "7227:   resolved \"https://registry.yarnpkg.com/syntax-error/-/syntax-error-1.4.0.tgz#2d9d4ff5c064acb711594a3e3b95054ad51d907c\"",
          "",
          "[Removed Lines]",
          "7220: symbol-tree@^3.2.4:",
          "7221:   version \"3.2.4\"",
          "7222:   resolved \"https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.4.tgz#430637d248ba77e078883951fb9aa0eed7c63fa2\"",
          "7223:   integrity sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "7243:     supports-hyperlinks \"^2.0.0\"",
          "7245: terser@^5.5.1:",
          "7249:   dependencies:",
          "7250:     acorn \"^8.5.0\"",
          "7251:     commander \"^2.20.0\"",
          "7253:     source-map-support \"~0.5.20\"",
          "7255: test-exclude@^6.0.0:",
          "",
          "[Removed Lines]",
          "7246:   version \"5.13.1\"",
          "7247:   resolved \"https://registry.yarnpkg.com/terser/-/terser-5.13.1.tgz#66332cdc5a01b04a224c9fad449fc1a18eaa1799\"",
          "7248:   integrity sha512-hn4WKOfwnwbYfe48NgrQjqNOH9jzLqRcIfbYytOXCOv46LBfWr9bDS17MQqOi+BWGD0sJK3Sj5NC/gJjiojaoA==",
          "7252:     source-map \"~0.8.0-beta.0\"",
          "",
          "[Added Lines]",
          "6216:   version \"5.14.0\"",
          "6217:   resolved \"https://registry.yarnpkg.com/terser/-/terser-5.14.0.tgz#eefeec9af5153f55798180ee2617f390bdd285e2\"",
          "6218:   integrity sha512-JC6qfIEkPBd9j1SMO3Pfn+A6w2kQV54tv+ABQLgZr7dA3k/DL/OBoYSWxzVpZev3J+bUHXfr55L8Mox7AaNo6g==",
          "6220:     \"@jridgewell/source-map\" \"^0.3.2\"",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "7266:   resolved \"https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4\"",
          "7267:   integrity sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
          "7274: through2@^2.0.0:",
          "7275:   version \"2.0.5\"",
          "",
          "[Removed Lines]",
          "7269: throat@^5.0.0:",
          "7270:   version \"5.0.0\"",
          "7271:   resolved \"https://registry.yarnpkg.com/throat/-/throat-5.0.0.tgz#c5199235803aad18754a667d659b5e72ce16764b\"",
          "7272:   integrity sha512-fcwX4mndzpLQKBS1DVYhGAcYaYt7vsHNIvQV+WXMvnow5cgjPphq5CaayLaGsjRdSCKZFNGt7/GYAuXaNOiYCA==",
          "",
          "[Added Lines]",
          "6239: throat@^6.0.1:",
          "6240:   version \"6.0.1\"",
          "6241:   resolved \"https://registry.yarnpkg.com/throat/-/throat-6.0.1.tgz#d514fedad95740c12c2d7fc70ea863eb51ade375\"",
          "6242:   integrity sha512-8hmiGIJMDlwjg7dlJ4yKGLK8EsYqKgPWbG3b4wjJddKNwc7N7Dpn08Df4szr/sZdMVeOstrdYSsqzX6BYbcB+w==",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "7304:     es5-ext \"~0.10.46\"",
          "7305:     next-tick \"1\"",
          "7312: tmpl@1.0.5:",
          "7313:   version \"1.0.5\"",
          "7314:   resolved \"https://registry.yarnpkg.com/tmpl/-/tmpl-1.0.5.tgz#8683e0b902bb9c20c4f726e3c0b69f36518c07cc\"",
          "",
          "[Removed Lines]",
          "7307: tmatch@^2.0.1:",
          "7308:   version \"2.0.1\"",
          "7309:   resolved \"https://registry.yarnpkg.com/tmatch/-/tmatch-2.0.1.tgz#0c56246f33f30da1b8d3d72895abaf16660f38cf\"",
          "7310:   integrity sha1-DFYkbzPzDaG409colauvFmYPOM8=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "7324:   resolved \"https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz#dc5e698cbd079265bc73e0377681a4e4e83f616e\"",
          "7325:   integrity sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4=",
          "7342: to-regex-range@^5.0.1:",
          "7343:   version \"5.0.1\"",
          "7344:   resolved \"https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4\"",
          "",
          "[Removed Lines]",
          "7327: to-object-path@^0.3.0:",
          "7328:   version \"0.3.0\"",
          "7329:   resolved \"https://registry.yarnpkg.com/to-object-path/-/to-object-path-0.3.0.tgz#297588b7b0e7e0ac08e04e672f85c1f4999e17af\"",
          "7330:   integrity sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=",
          "7331:   dependencies:",
          "7332:     kind-of \"^3.0.2\"",
          "7334: to-regex-range@^2.1.0:",
          "7335:   version \"2.1.1\"",
          "7336:   resolved \"https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-2.1.1.tgz#7c80c17b9dfebe599e27367e0d4dd5590141db38\"",
          "7337:   integrity sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=",
          "7338:   dependencies:",
          "7339:     is-number \"^3.0.0\"",
          "7340:     repeat-string \"^1.6.1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "7346:   dependencies:",
          "7347:     is-number \"^7.0.0\"",
          "7359: token-stream@0.0.1:",
          "7360:   version \"0.0.1\"",
          "7361:   resolved \"https://registry.yarnpkg.com/token-stream/-/token-stream-0.0.1.tgz#ceeefc717a76c4316f126d0b9dbaa55d7e7df01a\"",
          "7362:   integrity sha1-zu78cXp2xDFvEm0LnbqlXX598Bo=",
          "7373: tough-cookie@~2.5.0:",
          "7374:   version \"2.5.0\"",
          "7375:   resolved \"https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.5.0.tgz#cd9fb2a0aa1d5a12b473bd9fb96fa3dcff65ade2\"",
          "",
          "[Removed Lines]",
          "7349: to-regex@^3.0.1, to-regex@^3.0.2:",
          "7350:   version \"3.0.2\"",
          "7351:   resolved \"https://registry.yarnpkg.com/to-regex/-/to-regex-3.0.2.tgz#13cfdd9b336552f30b51f33a8ae1b42a7a7599ce\"",
          "7352:   integrity sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==",
          "7353:   dependencies:",
          "7354:     define-property \"^2.0.2\"",
          "7355:     extend-shallow \"^3.0.2\"",
          "7356:     regex-not \"^1.0.2\"",
          "7357:     safe-regex \"^1.1.0\"",
          "7364: tough-cookie@^4.0.0:",
          "7365:   version \"4.0.0\"",
          "7366:   resolved \"https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-4.0.0.tgz#d822234eeca882f991f0f908824ad2622ddbece4\"",
          "7367:   integrity sha512-tHdtEpQCMrc1YLrMaqXXcj6AxhYi/xgit6mZu1+EDWUn+qhUf8wMQoFIy9NXuq23zAwtcB0t/MjACGR18pcRbg==",
          "7368:   dependencies:",
          "7369:     psl \"^1.1.33\"",
          "7370:     punycode \"^2.1.1\"",
          "7371:     universalify \"^0.1.2\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "7378:     psl \"^1.1.28\"",
          "7379:     punycode \"^2.1.1\"",
          "7388: tr46@^2.1.0:",
          "7389:   version \"2.1.0\"",
          "7390:   resolved \"https://registry.yarnpkg.com/tr46/-/tr46-2.1.0.tgz#fa87aa81ca5d5941da8cbf1f9b749dc969a4e240\"",
          "",
          "[Removed Lines]",
          "7381: tr46@^1.0.1:",
          "7382:   version \"1.0.1\"",
          "7383:   resolved \"https://registry.yarnpkg.com/tr46/-/tr46-1.0.1.tgz#a8b13fd6bfd2489519674ccde55ba3693b706d09\"",
          "7384:   integrity sha1-qLE/1r/SSJUZZ0zN5VujaTtwbQk=",
          "7385:   dependencies:",
          "7386:     punycode \"^2.1.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "7463:   dependencies:",
          "7464:     safe-buffer \"^5.0.1\"",
          "7467:   version \"0.0.6\"",
          "7468:   resolved \"https://registry.yarnpkg.com/tunnel/-/tunnel-0.0.6.tgz#72f1314b34a5b192db012324df2cc587ca47f92c\"",
          "7469:   integrity sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==",
          "",
          "[Removed Lines]",
          "7466: tunnel@0.0.6:",
          "",
          "[Added Lines]",
          "6390: tunnel@^0.0.6:",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "7480:   dependencies:",
          "7481:     prelude-ls \"^1.2.1\"",
          "7490: type-detect@4.0.8:",
          "7491:   version \"4.0.8\"",
          "7492:   resolved \"https://registry.yarnpkg.com/type-detect/-/type-detect-4.0.8.tgz#7646fb5f18871cfbb7749e69bd39a6388eb7450c\"",
          "",
          "[Removed Lines]",
          "7483: type-check@~0.3.2:",
          "7484:   version \"0.3.2\"",
          "7485:   resolved \"https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72\"",
          "7486:   integrity sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=",
          "7487:   dependencies:",
          "7488:     prelude-ls \"~1.1.2\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "7502:   resolved \"https://registry.yarnpkg.com/type-fest/-/type-fest-0.21.3.tgz#d260a24b0198436e133fa26a524a6d65fa3b2e37\"",
          "7503:   integrity sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
          "7515: type@^1.0.1:",
          "7516:   version \"1.2.0\"",
          "7517:   resolved \"https://registry.yarnpkg.com/type/-/type-1.2.0.tgz#848dd7698dafa3e54a6c479e759c4bc3f18847a0\"",
          "",
          "[Removed Lines]",
          "7505: type-fest@^0.6.0:",
          "7506:   version \"0.6.0\"",
          "7507:   resolved \"https://registry.yarnpkg.com/type-fest/-/type-fest-0.6.0.tgz#8d2a2370d3df886eb5c90ada1c5bf6188acf838b\"",
          "7508:   integrity sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
          "7510: type-fest@^0.8.1:",
          "7511:   version \"0.8.1\"",
          "7512:   resolved \"https://registry.yarnpkg.com/type-fest/-/type-fest-0.8.1.tgz#09e249ebde851d3b1e48d27c105444667f17b83d\"",
          "7513:   integrity sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "7522:   resolved \"https://registry.yarnpkg.com/type/-/type-2.6.0.tgz#3ca6099af5981d36ca86b78442973694278a219f\"",
          "7523:   integrity sha512-eiDBDOmkih5pMbo9OqsqPRGMljLodLcwd5XD5JbtNB0o89xZAwynY9EdCDsJU7LtcVCClu9DvM7/0Ep1hYX3EQ==",
          "7532: typedarray@^0.0.6:",
          "7533:   version \"0.0.6\"",
          "7534:   resolved \"https://registry.yarnpkg.com/typedarray/-/typedarray-0.0.6.tgz#867ac74e3864187b1d3d47d996a78ec5c8830777\"",
          "",
          "[Removed Lines]",
          "7525: typedarray-to-buffer@^3.1.5:",
          "7526:   version \"3.1.5\"",
          "7527:   resolved \"https://registry.yarnpkg.com/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz#a97ee7a9ff42691b9f783ff1bc5112fe3fca9080\"",
          "7528:   integrity sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
          "7529:   dependencies:",
          "7530:     is-typedarray \"^1.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "7540:   integrity sha512-w6fIxVE/H1PkLKcCPsFqKE7Kv7QUwhU8qQY2MueZXWx5cPZdwFupLgKK3vntcK98BtNHZtAF4LA/yl2a7k8R6Q==",
          "7542: typescript@^4.5.3, typescript@^4.5.4:",
          "7547: typeson-registry@^1.0.0-alpha.20:",
          "7548:   version \"1.0.0-alpha.39\"",
          "",
          "[Removed Lines]",
          "7543:   version \"4.6.4\"",
          "7544:   resolved \"https://registry.yarnpkg.com/typescript/-/typescript-4.6.4.tgz#caa78bbc3a59e6a5c510d35703f6a09877ce45e9\"",
          "7545:   integrity sha512-9ia/jWHIEbo49HfjrLGfKbZSuWo9iTMwXO+Ca3pRsSpbsMbc7/IU8NKdCZVRRBafVPGnoJeFL76ZOAA84I9fEg==",
          "",
          "[Added Lines]",
          "6443:   version \"4.7.2\"",
          "6444:   resolved \"https://registry.yarnpkg.com/typescript/-/typescript-4.7.2.tgz#1f9aa2ceb9af87cca227813b4310fff0b51593c4\"",
          "6445:   integrity sha512-Mamb1iX2FDUpcTRzltPxgWMKy3fhg0TN378ylbktPGPK/99KbDtMQ4W1hwgsbPAsG3a0xKa1vmw4VKZQbkvz5A==",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "7583:   resolved \"https://registry.yarnpkg.com/umd/-/umd-3.0.3.tgz#aa9fe653c42b9097678489c01000acb69f0b26cf\"",
          "7584:   integrity sha512-4IcGSufhFshvLNcMCV80UnQVlZ5pMOC8mvNPForqwA4+lzYQuetTESLDQkeLmihq8bRcnpbQa48Wb8Lh16/xow==",
          "7587:   version \"1.0.2\"",
          "7588:   resolved \"https://registry.yarnpkg.com/unbox-primitive/-/unbox-primitive-1.0.2.tgz#29032021057d5e6cdbd08c5129c226dff8ed6f9e\"",
          "7589:   integrity sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==",
          "",
          "[Removed Lines]",
          "7586: unbox-primitive@^1.0.1:",
          "",
          "[Added Lines]",
          "6486: unbox-primitive@^1.0.2:",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "7637:   resolved \"https://registry.yarnpkg.com/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.0.0.tgz#0a36cb9a585c4f6abd51ad1deddb285c165297c8\"",
          "7638:   integrity sha512-5Zfuy9q/DFr4tfO7ZPeVXb1aPoeQSdeFMLpYuFebehDAhbuevLs5yxSZmIFN1tP5F9Wl4IpJrYojg85/zgyZHQ==",
          "7650: universal-user-agent@^6.0.0:",
          "7651:   version \"6.0.0\"",
          "7652:   resolved \"https://registry.yarnpkg.com/universal-user-agent/-/universal-user-agent-6.0.0.tgz#3381f8503b251c0d9cd21bc1de939ec9df5480ee\"",
          "7653:   integrity sha512-isyNax3wXoKaulPDZWHQqbmIx1k2tb9fb3GGDBRxCscfYV2Ch7WxPArBsFEG8s/safwXTT7H4QGhaIkTp9447w==",
          "7668: uri-js@^4.2.2:",
          "7669:   version \"4.4.1\"",
          "7670:   resolved \"https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e\"",
          "",
          "[Removed Lines]",
          "7640: union-value@^1.0.0:",
          "7641:   version \"1.0.1\"",
          "7642:   resolved \"https://registry.yarnpkg.com/union-value/-/union-value-1.0.1.tgz#0b6fe7b835aecda61c6ea4d4f02c14221e109847\"",
          "7643:   integrity sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==",
          "7644:   dependencies:",
          "7645:     arr-union \"^3.1.0\"",
          "7646:     get-value \"^2.0.6\"",
          "7647:     is-extendable \"^0.1.1\"",
          "7648:     set-value \"^2.0.1\"",
          "7655: universalify@^0.1.2:",
          "7656:   version \"0.1.2\"",
          "7657:   resolved \"https://registry.yarnpkg.com/universalify/-/universalify-0.1.2.tgz#b646f69be3942dabcecc9d6639c80dc105efaa66\"",
          "7658:   integrity sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
          "7660: unset-value@^1.0.0:",
          "7661:   version \"1.0.0\"",
          "7662:   resolved \"https://registry.yarnpkg.com/unset-value/-/unset-value-1.0.0.tgz#8376873f7d2335179ffb1e6fc3a8ed0dfc8ab559\"",
          "7663:   integrity sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=",
          "7664:   dependencies:",
          "7665:     has-value \"^0.3.1\"",
          "7666:     isobject \"^3.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "7672:   dependencies:",
          "7673:     punycode \"^2.1.0\"",
          "7680: url@~0.11.0:",
          "7681:   version \"0.11.0\"",
          "7682:   resolved \"https://registry.yarnpkg.com/url/-/url-0.11.0.tgz#3838e97cfc60521eb73c525a8e55bfdd9e2e28f1\"",
          "",
          "[Removed Lines]",
          "7675: urix@^0.1.0:",
          "7676:   version \"0.1.0\"",
          "7677:   resolved \"https://registry.yarnpkg.com/urix/-/urix-0.1.0.tgz#da937f7a62e21fec1fd18d49b35c2935067a6c72\"",
          "7678:   integrity sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "7685:     punycode \"1.3.2\"",
          "7686:     querystring \"0.2.0\"",
          "7693: util-deprecate@^1.0.1, util-deprecate@~1.0.1:",
          "7694:   version \"1.0.2\"",
          "7695:   resolved \"https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf\"",
          "",
          "[Removed Lines]",
          "7688: use@^3.1.0:",
          "7689:   version \"3.1.1\"",
          "7690:   resolved \"https://registry.yarnpkg.com/use/-/use-3.1.1.tgz#d50c8cac79a19fbc20f2911f56eb973f4e10070f\"",
          "7691:   integrity sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "7719:   resolved \"https://registry.yarnpkg.com/uuid/-/uuid-3.4.0.tgz#b23e4358afa8a202fe7a100af1f5f883f02007ee\"",
          "7720:   integrity sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
          "7727: v8-compile-cache@^2.0.3:",
          "7728:   version \"2.3.0\"",
          "7729:   resolved \"https://registry.yarnpkg.com/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz#2de19618c66dc247dcfb6f99338035d8245a2cee\"",
          "7730:   integrity sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
          "7741: v8-to-istanbul@^9.0.0:",
          "7742:   version \"9.0.0\"",
          "7743:   resolved \"https://registry.yarnpkg.com/v8-to-istanbul/-/v8-to-istanbul-9.0.0.tgz#be0dae58719fc53cb97e5c7ac1d7e6d4f5b19511\"",
          "",
          "[Removed Lines]",
          "7722: uuid@^8.3.0:",
          "7723:   version \"8.3.2\"",
          "7724:   resolved \"https://registry.yarnpkg.com/uuid/-/uuid-8.3.2.tgz#80d5b5ced271bb9af6c445f21a1a04c606cefbe2\"",
          "7725:   integrity sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
          "7732: v8-to-istanbul@^7.0.0:",
          "7733:   version \"7.1.2\"",
          "7734:   resolved \"https://registry.yarnpkg.com/v8-to-istanbul/-/v8-to-istanbul-7.1.2.tgz#30898d1a7fa0c84d225a2c1434fb958f290883c1\"",
          "7735:   integrity sha512-TxNb7YEUwkLXCQYeudi6lgQ/SZrzNO4kMdlqVxaZPUIUjCv6iSSypUQX70kNBSERpQ8fk48+d61FXk+tgqcWow==",
          "7736:   dependencies:",
          "7737:     \"@types/istanbul-lib-coverage\" \"^2.0.1\"",
          "7738:     convert-source-map \"^1.6.0\"",
          "7739:     source-map \"^0.7.3\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "7747:     \"@types/istanbul-lib-coverage\" \"^2.0.1\"",
          "7748:     convert-source-map \"^1.6.0\"",
          "7758: verror@1.10.0:",
          "7759:   version \"1.10.0\"",
          "7760:   resolved \"https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400\"",
          "",
          "[Removed Lines]",
          "7750: validate-npm-package-license@^3.0.1:",
          "7751:   version \"3.0.4\"",
          "7752:   resolved \"https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz#fc91f6b9c7ba15c857f4cb2c5defeec39d4f410a\"",
          "7753:   integrity sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
          "7754:   dependencies:",
          "7755:     spdx-correct \"^3.0.0\"",
          "7756:     spdx-expression-parse \"^3.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "7805:   dependencies:",
          "7806:     brace \"^0.11.0\"",
          "7823:   version \"1.0.8\"",
          "7824:   resolved \"https://registry.yarnpkg.com/walker/-/walker-1.0.8.tgz#bd498db477afe573dc04185f011d3ab8a8d7653f\"",
          "7825:   integrity sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
          "",
          "[Removed Lines]",
          "7808: w3c-hr-time@^1.0.2:",
          "7809:   version \"1.0.2\"",
          "7810:   resolved \"https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz#0a89cdf5cc15822df9c360543676963e0cc308cd\"",
          "7811:   integrity sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==",
          "7812:   dependencies:",
          "7813:     browser-process-hrtime \"^1.0.0\"",
          "7815: w3c-xmlserializer@^2.0.0:",
          "7816:   version \"2.0.0\"",
          "7817:   resolved \"https://registry.yarnpkg.com/w3c-xmlserializer/-/w3c-xmlserializer-2.0.0.tgz#3e7104a05b75146cc60f564380b7f683acf1020a\"",
          "7818:   integrity sha512-4tzD0mF8iSiMiNs30BiLO3EpfGLZUT2MSX/G+o7ZywDzliWQ3OPtTZ0PTC3B3ca1UAf4cJMHB+2Bf56EriJuRA==",
          "7819:   dependencies:",
          "7820:     xml-name-validator \"^3.0.0\"",
          "7822: walker@^1.0.7, walker@~1.0.5:",
          "",
          "[Added Lines]",
          "6653: walker@^1.0.7:",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "7836:   resolved \"https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-4.0.2.tgz#a855980b1f0b6b359ba1d5d9fb39ae941faa63ad\"",
          "7837:   integrity sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==",
          "7844: webidl-conversions@^6.1.0:",
          "7845:   version \"6.1.0\"",
          "7846:   resolved \"https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-6.1.0.tgz#9111b4d7ea80acd40f5270d666621afa78b69514\"",
          "7847:   integrity sha512-qBIvFLGiBpLjfwmYAaHPXsn+ho5xZnGvyGvsarywGNc8VyQJUMHJ8OBKGGrPER0okBeMDaan4mNBlgBROxuI8w==",
          "7861: whatwg-url@^5.0.0:",
          "7862:   version \"5.0.0\"",
          "7863:   resolved \"https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-5.0.0.tgz#966454e8765462e37644d3626f6742ce8b70965d\"",
          "",
          "[Removed Lines]",
          "7839: webidl-conversions@^5.0.0:",
          "7840:   version \"5.0.0\"",
          "7841:   resolved \"https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-5.0.0.tgz#ae59c8a00b121543a2acc65c0434f57b0fc11aff\"",
          "7842:   integrity sha512-VlZwKPCkYKxQgeSbH5EyngOmRp7Ww7I9rQLERETtf5ofd9pGeswWiOtogpEO850jziPRarreGxn5QIiTqpb2wA==",
          "7849: whatwg-encoding@^1.0.5:",
          "7850:   version \"1.0.5\"",
          "7851:   resolved \"https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz#5abacf777c32166a51d085d6b4f3e7d27113ddb0\"",
          "7852:   integrity sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==",
          "7853:   dependencies:",
          "7854:     iconv-lite \"0.4.24\"",
          "7856: whatwg-mimetype@^2.3.0:",
          "7857:   version \"2.3.0\"",
          "7858:   resolved \"https://registry.yarnpkg.com/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz#3d4b1e0312d2079879f826aff18dbeeca5960fbf\"",
          "7859:   integrity sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "7866:     tr46 \"~0.0.3\"",
          "7867:     webidl-conversions \"^3.0.0\"",
          "7879:   version \"8.7.0\"",
          "7880:   resolved \"https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-8.7.0.tgz#656a78e510ff8f3937bc0bcbe9f5c0ac35941b77\"",
          "7881:   integrity sha512-gAojqb/m9Q8a5IV96E3fHJM70AzCkgt4uXYX2O7EmuyOnLrViCQlsEBmF9UQIu3/aeAIp2U17rtbpZWNntQqdg==",
          "",
          "[Removed Lines]",
          "7869: whatwg-url@^7.0.0:",
          "7870:   version \"7.1.0\"",
          "7871:   resolved \"https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-7.1.0.tgz#c2c492f1eca612988efd3d2266be1b9fc6170d06\"",
          "7872:   integrity sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==",
          "7873:   dependencies:",
          "7874:     lodash.sortby \"^4.7.0\"",
          "7875:     tr46 \"^1.0.1\"",
          "7876:     webidl-conversions \"^4.0.2\"",
          "7878: whatwg-url@^8.0.0, whatwg-url@^8.4.0, whatwg-url@^8.5.0:",
          "",
          "[Added Lines]",
          "6683: whatwg-url@^8.4.0:",
          "",
          "---------------",
          "--- Hunk 226 ---",
          "[Context before]",
          "7895:     is-string \"^1.0.5\"",
          "7896:     is-symbol \"^1.0.3\"",
          "7935:   dependencies:",
          "7936:     available-typed-arrays \"^1.0.5\"",
          "7937:     call-bind \"^1.0.2\"",
          "7940:     has-tostringtag \"^1.0.0\"",
          "7951:   version \"2.0.2\"",
          "7952:   resolved \"https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1\"",
          "7953:   integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
          "",
          "[Removed Lines]",
          "7898: which-builtin-type@^1.1.1:",
          "7899:   version \"1.1.2\"",
          "7900:   resolved \"https://registry.yarnpkg.com/which-builtin-type/-/which-builtin-type-1.1.2.tgz#254a34f6cd2a546e04d51d9a4ac2c65e9ed31bf4\"",
          "7901:   integrity sha512-2/+MF0XNPySHrIPlIAUB1dmQuWOPfQDR+TvwZs2tayroIA61MvZDJtkvwjv2iDg7h668jocdWsPOQwwAz5QUSg==",
          "7902:   dependencies:",
          "7903:     function.prototype.name \"^1.1.5\"",
          "7904:     has-tostringtag \"^1.0.0\"",
          "7905:     is-async-function \"^2.0.0\"",
          "7906:     is-date-object \"^1.0.5\"",
          "7907:     is-finalizationregistry \"^1.0.2\"",
          "7908:     is-generator-function \"^1.0.10\"",
          "7909:     is-regex \"^1.1.4\"",
          "7910:     is-weakref \"^1.0.2\"",
          "7911:     isarray \"^2.0.5\"",
          "7912:     which-boxed-primitive \"^1.0.2\"",
          "7913:     which-collection \"^1.0.1\"",
          "7914:     which-typed-array \"^1.1.7\"",
          "7916: which-collection@^1.0.1:",
          "7917:   version \"1.0.1\"",
          "7918:   resolved \"https://registry.yarnpkg.com/which-collection/-/which-collection-1.0.1.tgz#70eab71ebbbd2aefaf32f917082fc62cdcb70906\"",
          "7919:   integrity sha512-W8xeTUwaln8i3K/cY1nGXzdnVZlidBcagyNFtBdD5kxnb4TvGKR7FfSIS3mYpwWS1QUCutfKz8IY8RjftB0+1A==",
          "7920:   dependencies:",
          "7921:     is-map \"^2.0.1\"",
          "7922:     is-set \"^2.0.1\"",
          "7923:     is-weakmap \"^2.0.1\"",
          "7924:     is-weakset \"^2.0.1\"",
          "7926: which-module@^2.0.0:",
          "7927:   version \"2.0.0\"",
          "7928:   resolved \"https://registry.yarnpkg.com/which-module/-/which-module-2.0.0.tgz#d9ef07dce77b9902b8a3a8fa4b31c3e3f7e6e87a\"",
          "7929:   integrity sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=",
          "7931: which-typed-array@^1.1.2, which-typed-array@^1.1.7:",
          "7932:   version \"1.1.7\"",
          "7933:   resolved \"https://registry.yarnpkg.com/which-typed-array/-/which-typed-array-1.1.7.tgz#2761799b9a22d4b8660b3c1b40abaa7739691793\"",
          "7934:   integrity sha512-vjxaB4nfDqwKI0ws7wZpxIlde1XrLX5uB0ZjpfshgmapJMD7jJWhZI+yToJTqaFByF0eNBcYxbjmCzoRP7CfEw==",
          "7938:     es-abstract \"^1.18.5\"",
          "7939:     foreach \"^2.0.5\"",
          "7941:     is-typed-array \"^1.1.7\"",
          "7943: which@^1.2.9:",
          "7944:   version \"1.3.1\"",
          "7945:   resolved \"https://registry.yarnpkg.com/which/-/which-1.3.1.tgz#a45043d54f5805316da8d62f9f50918d3da70b0a\"",
          "7946:   integrity sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
          "7947:   dependencies:",
          "7948:     isexe \"^2.0.0\"",
          "7950: which@^2.0.1, which@^2.0.2:",
          "",
          "[Added Lines]",
          "6703: which-typed-array@^1.1.2:",
          "6704:   version \"1.1.8\"",
          "6705:   resolved \"https://registry.yarnpkg.com/which-typed-array/-/which-typed-array-1.1.8.tgz#0cfd53401a6f334d90ed1125754a42ed663eb01f\"",
          "6706:   integrity sha512-Jn4e5PItbcAHyLoRDwvPj1ypu27DJbtdYXUa5zsinrUx77Uvfb0cXwwnGMTn7cjUfhhqgVQnVJCwF+7cgU7tpw==",
          "6710:     es-abstract \"^1.20.0\"",
          "6711:     for-each \"^0.3.3\"",
          "6713:     is-typed-array \"^1.1.9\"",
          "6715: which@^2.0.1:",
          "",
          "---------------",
          "--- Hunk 227 ---",
          "[Context before]",
          "7967:     acorn \"^3.1.0\"",
          "7968:     acorn-globals \"^3.0.0\"",
          "7971:   version \"1.2.3\"",
          "7972:   resolved \"https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.3.tgz#610636f6b1f703891bd34771ccb17fb93b47079c\"",
          "7973:   integrity sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
          "",
          "[Removed Lines]",
          "7970: word-wrap@^1.2.3, word-wrap@~1.2.3:",
          "",
          "[Added Lines]",
          "6735: word-wrap@^1.2.3:",
          "",
          "---------------",
          "--- Hunk 228 ---",
          "[Context before]",
          "7977:   resolved \"https://registry.yarnpkg.com/wordwrap/-/wordwrap-0.0.2.tgz#b79669bb42ecb409f83d583cad52ca17eaa1643f\"",
          "7978:   integrity sha1-t5Zpu0LstAn4PVg8rVLKF+qhZD8=",
          "7989: wrap-ansi@^7.0.0:",
          "7990:   version \"7.0.0\"",
          "7991:   resolved \"https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43\"",
          "",
          "[Removed Lines]",
          "7980: wrap-ansi@^6.2.0:",
          "7981:   version \"6.2.0\"",
          "7982:   resolved \"https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-6.2.0.tgz#e9393ba07102e6c91a3b221478f0257cd2856e53\"",
          "7983:   integrity sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
          "7984:   dependencies:",
          "7985:     ansi-styles \"^4.0.0\"",
          "7986:     string-width \"^4.1.0\"",
          "7987:     strip-ansi \"^6.0.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 229 ---",
          "[Context before]",
          "8000:   resolved \"https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f\"",
          "8001:   integrity sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
          "8007:   dependencies:",
          "8008:     imurmurhash \"^0.1.4\"",
          "8023: xml@^1.0.1:",
          "8024:   version \"1.0.1\"",
          "8025:   resolved \"https://registry.yarnpkg.com/xml/-/xml-1.0.1.tgz#78ba72020029c5bc87b8a81a3cfcd74b4a2fc1e5\"",
          "8026:   integrity sha1-eLpyAgApxbyHuKgaPPzXS0ovweU=",
          "8033: xmlcreate@^2.0.4:",
          "8034:   version \"2.0.4\"",
          "8035:   resolved \"https://registry.yarnpkg.com/xmlcreate/-/xmlcreate-2.0.4.tgz#0c5ab0f99cdd02a81065fa9cd8f8ae87624889be\"",
          "",
          "[Removed Lines]",
          "8003: write-file-atomic@^3.0.0:",
          "8004:   version \"3.0.3\"",
          "8005:   resolved \"https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-3.0.3.tgz#56bd5c5a5c70481cd19c571bd39ab965a5de56e8\"",
          "8006:   integrity sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
          "8009:     is-typedarray \"^1.0.0\"",
          "8010:     signal-exit \"^3.0.2\"",
          "8011:     typedarray-to-buffer \"^3.1.5\"",
          "8013: ws@^7.4.6:",
          "8014:   version \"7.5.7\"",
          "8015:   resolved \"https://registry.yarnpkg.com/ws/-/ws-7.5.7.tgz#9e0ac77ee50af70d58326ecff7e85eb3fa375e67\"",
          "8016:   integrity sha512-KMvVuFzpKBuiIXW3E4u3mySRO2/mCHSyZDJQM5NQ9Q9KHWHWh0NHgfbRMLLrceUK5qAL4ytALJbpRMjixFZh8A==",
          "8018: xml-name-validator@^3.0.0:",
          "8019:   version \"3.0.0\"",
          "8020:   resolved \"https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-3.0.0.tgz#6ae73e06de4d8c6e47f9fb181f78d648ad457c6a\"",
          "8021:   integrity sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==",
          "8028: xmlchars@^2.2.0:",
          "8029:   version \"2.2.0\"",
          "8030:   resolved \"https://registry.yarnpkg.com/xmlchars/-/xmlchars-2.2.0.tgz#060fe1bcb7f9c76fe2a17db86a9bc3ab894210cb\"",
          "8031:   integrity sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
          "",
          "[Added Lines]",
          "6759: write-file-atomic@^4.0.1:",
          "6760:   version \"4.0.1\"",
          "6761:   resolved \"https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-4.0.1.tgz#9faa33a964c1c85ff6f849b80b42a88c2c537c8f\"",
          "6762:   integrity sha512-nSKUxgAbyioruk6hU87QzVbY279oYT6uiwgDoujth2ju4mJ+TZau7SQBhtbTmUyuNYTuXnSyRn66FV0+eCgcrQ==",
          "6765:     signal-exit \"^3.0.7\"",
          "",
          "---------------",
          "--- Hunk 230 ---",
          "[Context before]",
          "8040:   resolved \"https://registry.yarnpkg.com/xtend/-/xtend-4.0.2.tgz#bb72779f5fa465186b1f438f674fa347fdb5db54\"",
          "8041:   integrity sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
          "8048: y18n@^5.0.5:",
          "8049:   version \"5.0.8\"",
          "8050:   resolved \"https://registry.yarnpkg.com/y18n/-/y18n-5.0.8.tgz#7f4934d0f7ca8c56f95314939ddcd2dd91ce1d55\"",
          "",
          "[Removed Lines]",
          "8043: y18n@^4.0.0:",
          "8044:   version \"4.0.3\"",
          "8045:   resolved \"https://registry.yarnpkg.com/y18n/-/y18n-4.0.3.tgz#b5f259c82cd6e336921efd7bfd8bf560de9eeedf\"",
          "8046:   integrity sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 231 ---",
          "[Context before]",
          "8060:   resolved \"https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72\"",
          "8061:   integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
          "8071: yargs-parser@^20.2.2, yargs-parser@^20.2.9:",
          "8072:   version \"20.2.9\"",
          "8073:   resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-20.2.9.tgz#2eb7dc3b0289718fc295f362753845c41a0c94ee\"",
          "",
          "[Removed Lines]",
          "8063: yargs-parser@^18.1.2:",
          "8064:   version \"18.1.3\"",
          "8065:   resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-18.1.3.tgz#be68c4975c6b2abf469236b0c870362fab09a7b0\"",
          "8066:   integrity sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
          "8067:   dependencies:",
          "8068:     camelcase \"^5.0.0\"",
          "8069:     decamelize \"^1.2.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 232 ---",
          "[Context before]",
          "8078:   resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-21.0.1.tgz#0267f286c877a4f0f728fceb6f8a3e4cb95c6e35\"",
          "8079:   integrity sha512-9BK1jFpLzJROCI5TzwZL/TU4gqjK5xiHV/RfWLOahrjAko/e4DJkRDZQXfvqAsiZzzYhgAzbgz6lg48jcm4GLg==",
          "8098: yargs@^16.2.0:",
          "8099:   version \"16.2.0\"",
          "8100:   resolved \"https://registry.yarnpkg.com/yargs/-/yargs-16.2.0.tgz#1c82bf0f6b6a66eafce7ef30e376f49a12477f66\"",
          "",
          "[Removed Lines]",
          "8081: yargs@^15.4.1:",
          "8082:   version \"15.4.1\"",
          "8083:   resolved \"https://registry.yarnpkg.com/yargs/-/yargs-15.4.1.tgz#0d87a16de01aee9d8bec2bfbf74f67851730f4f8\"",
          "8084:   integrity sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
          "8085:   dependencies:",
          "8086:     cliui \"^6.0.0\"",
          "8087:     decamelize \"^1.2.0\"",
          "8088:     find-up \"^4.1.0\"",
          "8089:     get-caller-file \"^2.0.1\"",
          "8090:     require-directory \"^2.1.1\"",
          "8091:     require-main-filename \"^2.0.0\"",
          "8092:     set-blocking \"^2.0.0\"",
          "8093:     string-width \"^4.2.0\"",
          "8094:     which-module \"^2.0.0\"",
          "8095:     y18n \"^4.0.0\"",
          "8096:     yargs-parser \"^18.1.2\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 233 ---",
          "[Context before]",
          "8108:     y18n \"^5.0.5\"",
          "8109:     yargs-parser \"^20.2.2\"",
          "8115:   dependencies:",
          "8116:     cliui \"^7.0.2\"",
          "8117:     escalade \"^3.1.1\"",
          "",
          "[Removed Lines]",
          "8111: yargs@^17.0.1:",
          "8112:   version \"17.4.1\"",
          "8113:   resolved \"https://registry.yarnpkg.com/yargs/-/yargs-17.4.1.tgz#ebe23284207bb75cee7c408c33e722bfb27b5284\"",
          "8114:   integrity sha512-WSZD9jgobAg3ZKuCQZSa3g9QOJeCCqLoLAykiWgmXnDo9EPnn4RPf5qVTtzgOx66o6/oqhcA5tHtJXpG8pMt3g==",
          "",
          "[Added Lines]",
          "6820: yargs@^17.0.1, yargs@^17.3.1:",
          "6821:   version \"17.5.1\"",
          "6822:   resolved \"https://registry.yarnpkg.com/yargs/-/yargs-17.5.1.tgz#e109900cab6fcb7fd44b1d8249166feb0b36e58e\"",
          "6823:   integrity sha512-t6YAJcxDkNX7NFYiVtKvWUz8l+PaKTLiL63mJYWR2GnHq2gjEWISzsLp9wg3aY36dY1j+gfIEL3pIF+XlJJfbA==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f46355e7c0415b538bb9a908189fe4de91f669eb",
      "candidate_info": {
        "commit_hash": "f46355e7c0415b538bb9a908189fe4de91f669eb",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/f46355e7c0415b538bb9a908189fe4de91f669eb",
        "files": [
          "src/crypto/algorithms/megolm.ts"
        ],
        "message": "don't choke on missing promise",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         userDeviceMap: IOlmDevice[],",
          "585:         payload: IPayload,",
          "586:     ): Promise<void> {",
          "588:             userDeviceMap,",
          "589:             payload,",
          "591:             const { contentMap, deviceInfoByDeviceId } = result;",
          "593:             for (const userId of Object.keys(contentMap)) {",
          "",
          "[Removed Lines]",
          "587:         return this.crypto.encryptAndSendToDevices(",
          "590:         ).then((result) => {",
          "",
          "[Added Lines]",
          "587:         const p = this.crypto.encryptAndSendToDevices(",
          "590:         );",
          "591:         if (!p) return;",
          "592:         return p.then((result) => {",
          "593:             if (!result) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f2b7cb357fc8da9c070fc459f0057ca5561b7f7",
      "candidate_info": {
        "commit_hash": "7f2b7cb357fc8da9c070fc459f0057ca5561b7f7",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/7f2b7cb357fc8da9c070fc459f0057ca5561b7f7",
        "files": [
          "CHANGELOG.md",
          "package.json",
          "spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/queueToDevice.spec.ts",
          "src/ToDeviceMessageQueue.ts",
          "src/client.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts",
          "src/models/ToDeviceMessage.ts",
          "src/models/room.ts",
          "src/scheduler.ts",
          "src/sliding-sync.ts",
          "src/store/index.ts",
          "src/store/indexeddb-backend.ts",
          "src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-remote-backend.ts",
          "src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts",
          "src/store/memory.ts",
          "src/store/stub.ts",
          "src/webrtc/call.ts",
          "yarn.lock"
        ],
        "message": "Merge to-device retries onto group call branch",
        "before_after_code_files": [
          "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/queueToDevice.spec.ts||spec/unit/queueToDevice.spec.ts",
          "src/ToDeviceMessageQueue.ts||src/ToDeviceMessageQueue.ts",
          "src/client.ts||src/client.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts",
          "src/models/ToDeviceMessage.ts||src/models/ToDeviceMessage.ts",
          "src/models/room.ts||src/models/room.ts",
          "src/scheduler.ts||src/scheduler.ts",
          "src/sliding-sync.ts||src/sliding-sync.ts",
          "src/store/index.ts||src/store/index.ts",
          "src/store/indexeddb-backend.ts||src/store/indexeddb-backend.ts",
          "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-remote-backend.ts||src/store/indexeddb-remote-backend.ts",
          "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts||src/store/indexeddb.ts",
          "src/store/memory.ts||src/store/memory.ts",
          "src/store/stub.ts||src/store/stub.ts",
          "src/webrtc/call.ts||src/webrtc/call.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts": [
          "File: spec/unit/crypto/algorithms/megolm.spec.ts -> spec/unit/crypto/algorithms/megolm.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         mockBaseApis = {",
          "60:             claimOneTimeKeys: jest.fn(),",
          "61:             sendToDevice: jest.fn(),",
          "62:         } as unknown as MockedObject<MatrixClient>;",
          "64:         const cryptoStore = new MemoryCryptoStore();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:             queueToDevice: jest.fn(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:                 });",
          "181:                 mockBaseApis.sendToDevice.mockReset();",
          "184:                 megolmDecryption.shareKeysWithDevice(keyRequest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:                 mockBaseApis.queueToDevice.mockReset();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:                     },",
          "325:                 });",
          "326:                 mockBaseApis.sendToDevice.mockResolvedValue(undefined);",
          "328:                 aliceDeviceInfo = {",
          "329:                     deviceId: 'aliceDevice',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:                 mockBaseApis.queueToDevice.mockResolvedValue(undefined);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:                 expect(mockCrypto.downloadKeys).toHaveBeenCalledWith(",
          "414:                     ['@alice:home.server'], false,",
          "415:                 );",
          "417:                 expect(mockBaseApis.claimOneTimeKeys).toHaveBeenCalledWith(",
          "418:                     [['@alice:home.server', 'aliceDevice']], 'signed_curve25519', 2000,",
          "419:                 );",
          "",
          "[Removed Lines]",
          "416:                 expect(mockBaseApis.sendToDevice).toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "419:                 expect(mockBaseApis.queueToDevice).toHaveBeenCalled();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:                     'YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWI',",
          "457:                 );",
          "460:                 await megolmEncryption.reshareKeyWithDevice(",
          "461:                     olmDevice.deviceCurve25519Key,",
          "462:                     ct1.session_id,",
          "",
          "[Removed Lines]",
          "459:                 mockBaseApis.sendToDevice.mockClear();",
          "",
          "[Added Lines]",
          "462:                 mockBaseApis.queueToDevice.mockClear();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "464:                     aliceDeviceInfo,",
          "465:                 );",
          "468:             });",
          "469:         });",
          "470:     });",
          "",
          "[Removed Lines]",
          "467:                 expect(mockBaseApis.sendToDevice).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "470:                 expect(mockBaseApis.queueToDevice).not.toHaveBeenCalled();",
          "",
          "---------------"
        ],
        "spec/unit/queueToDevice.spec.ts||spec/unit/queueToDevice.spec.ts": [
          "File: spec/unit/queueToDevice.spec.ts -> spec/unit/queueToDevice.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import MockHttpBackend from 'matrix-mock-request';",
          "18: import { indexedDB as fakeIndexedDB } from 'fake-indexeddb';",
          "20: import { IHttpOpts, IndexedDBStore, MatrixEvent, MemoryStore, Room } from \"../../src\";",
          "21: import { MatrixClient } from \"../../src/client\";",
          "22: import { ToDeviceBatch } from '../../src/models/ToDeviceMessage';",
          "23: import { logger } from '../../src/logger';",
          "24: import { IStore } from '../../src/store';",
          "26: const FAKE_USER = \"@alice:example.org\";",
          "27: const FAKE_DEVICE_ID = \"AAAAAAAA\";",
          "28: const FAKE_PAYLOAD = {",
          "29:     \"foo\": 42,",
          "30: };",
          "31: const EXPECTED_BODY = {",
          "32:     messages: {",
          "33:         [FAKE_USER]: {",
          "34:             [FAKE_DEVICE_ID]: FAKE_PAYLOAD,",
          "35:         },",
          "36:     },",
          "37: };",
          "39: const FAKE_MSG = {",
          "40:     userId: FAKE_USER,",
          "41:     deviceId: FAKE_DEVICE_ID,",
          "42:     payload: FAKE_PAYLOAD,",
          "43: };",
          "45: enum StoreType {",
          "46:     Memory = 'Memory',",
          "47:     IndexedDB = 'IndexedDB',",
          "48: }",
          "56: const realSetTimeout = setTimeout;",
          "57: function flushPromises() {",
          "58:     return new Promise(r => {",
          "59:         realSetTimeout(r, 1);",
          "60:     });",
          "61: }",
          "63: async function flushAndRunTimersUntil(cond: () => boolean) {",
          "64:     while (!cond()) {",
          "65:         await flushPromises();",
          "66:         if (cond()) break;",
          "67:         jest.advanceTimersToNextTimer();",
          "68:     }",
          "69: }",
          "71: describe.each([",
          "72:     [StoreType.Memory], [StoreType.IndexedDB],",
          "73: ])(\"queueToDevice (%s store)\", function(storeType) {",
          "74:     let httpBackend: MockHttpBackend;",
          "75:     let client: MatrixClient;",
          "77:     beforeEach(async function() {",
          "78:         httpBackend = new MockHttpBackend();",
          "80:         let store: IStore;",
          "81:         if (storeType === StoreType.IndexedDB) {",
          "82:             const idbStore = new IndexedDBStore({ indexedDB: fakeIndexedDB });",
          "83:             await idbStore.startup();",
          "84:             store = idbStore;",
          "85:         } else {",
          "86:             store = new MemoryStore();",
          "87:         }",
          "89:         client = new MatrixClient({",
          "90:             baseUrl: \"https://my.home.server\",",
          "91:             accessToken: \"my.access.token\",",
          "92:             request: httpBackend.requestFn as IHttpOpts[\"request\"],",
          "93:             store,",
          "94:         });",
          "95:     });",
          "97:     afterEach(function() {",
          "98:         jest.useRealTimers();",
          "99:         client.stopClient();",
          "100:     });",
          "102:     it(\"sends a to-device message\", async function() {",
          "103:         httpBackend.when(",
          "104:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "105:         ).check((request) => {",
          "106:             expect(request.data).toEqual(EXPECTED_BODY);",
          "107:         }).respond(200, {});",
          "109:         await client.queueToDevice({",
          "110:             eventType: \"org.example.foo\",",
          "111:             batch: [",
          "112:                 FAKE_MSG,",
          "113:             ],",
          "114:         });",
          "116:         await httpBackend.flushAllExpected();",
          "117:     });",
          "119:     it(\"retries on error\", async function() {",
          "120:         jest.useFakeTimers();",
          "122:         httpBackend.when(",
          "123:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "124:         ).respond(500);",
          "126:         httpBackend.when(",
          "127:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "128:         ).check((request) => {",
          "129:             expect(request.data).toEqual(EXPECTED_BODY);",
          "130:         }).respond(200, {});",
          "132:         await client.queueToDevice({",
          "133:             eventType: \"org.example.foo\",",
          "134:             batch: [",
          "135:                 FAKE_MSG,",
          "136:             ],",
          "137:         });",
          "138:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "139:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "141:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "143:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "144:     });",
          "146:     it(\"stops retrying on 4xx errors\", async function() {",
          "147:         jest.useFakeTimers();",
          "149:         httpBackend.when(",
          "150:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "151:         ).respond(400);",
          "153:         await client.queueToDevice({",
          "154:             eventType: \"org.example.foo\",",
          "155:             batch: [",
          "156:                 FAKE_MSG,",
          "157:             ],",
          "158:         });",
          "159:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "160:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "165:         let tries = 0;",
          "166:         await flushAndRunTimersUntil(() => ++tries === 10);",
          "168:         expect(httpBackend.requests.length).toEqual(0);",
          "169:     });",
          "171:     it(\"honours ratelimiting\", async function() {",
          "172:         jest.useFakeTimers();",
          "176:         const retryDelay = 279 * 1000;",
          "178:         httpBackend.when(",
          "179:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "180:         ).respond(429, {",
          "181:             errcode: \"M_LIMIT_EXCEEDED\",",
          "182:             retry_after_ms: retryDelay,",
          "183:         });",
          "185:         httpBackend.when(",
          "186:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "187:         ).respond(200, {});",
          "189:         await client.queueToDevice({",
          "190:             eventType: \"org.example.foo\",",
          "191:             batch: [",
          "192:                 FAKE_MSG,",
          "193:             ],",
          "194:         });",
          "195:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "196:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "197:         await flushPromises();",
          "199:         logger.info(\"Advancing clock to just before expected retry time...\");",
          "201:         jest.advanceTimersByTime(retryDelay - 1000);",
          "202:         await flushPromises();",
          "204:         expect(httpBackend.requests.length).toEqual(0);",
          "206:         logger.info(\"Advancing clock past expected retry time...\");",
          "208:         jest.advanceTimersByTime(2000);",
          "209:         await flushPromises();",
          "211:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "212:     });",
          "214:     it(\"retries on retryImmediately()\", async function() {",
          "215:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "216:             versions: [\"r0.0.1\"],",
          "217:         });",
          "219:         await Promise.all([client.startClient(), httpBackend.flush(null, 1, 20)]);",
          "221:         httpBackend.when(",
          "222:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "223:         ).respond(500);",
          "225:         httpBackend.when(",
          "226:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "227:         ).respond(200, {});",
          "229:         await client.queueToDevice({",
          "230:             eventType: \"org.example.foo\",",
          "231:             batch: [",
          "232:                 FAKE_MSG,",
          "233:             ],",
          "234:         });",
          "235:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "236:         await flushPromises();",
          "238:         client.retryImmediately();",
          "240:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "241:     });",
          "243:     it(\"retries on when client is started\", async function() {",
          "244:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "245:             versions: [\"r0.0.1\"],",
          "246:         });",
          "248:         await Promise.all([client.startClient(), httpBackend.flush(\"/_matrix/client/versions\", 1, 20)]);",
          "250:         httpBackend.when(",
          "251:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "252:         ).respond(500);",
          "254:         httpBackend.when(",
          "255:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "256:         ).respond(200, {});",
          "258:         await client.queueToDevice({",
          "259:             eventType: \"org.example.foo\",",
          "260:             batch: [",
          "261:                 FAKE_MSG,",
          "262:             ],",
          "263:         });",
          "264:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "265:         await flushPromises();",
          "267:         client.stopClient();",
          "268:         await Promise.all([client.startClient(), httpBackend.flush(\"/_matrix/client/versions\", 1, 20)]);",
          "270:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "271:     });",
          "273:     it(\"retries when a message is retried\", async function() {",
          "274:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "275:             versions: [\"r0.0.1\"],",
          "276:         });",
          "278:         await Promise.all([client.startClient(), httpBackend.flush(null, 1, 20)]);",
          "280:         httpBackend.when(",
          "281:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "282:         ).respond(500);",
          "284:         httpBackend.when(",
          "285:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "286:         ).respond(200, {});",
          "288:         await client.queueToDevice({",
          "289:             eventType: \"org.example.foo\",",
          "290:             batch: [",
          "291:                 FAKE_MSG,",
          "292:             ],",
          "293:         });",
          "295:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "296:         await flushPromises();",
          "298:         const dummyEvent = new MatrixEvent({",
          "299:             event_id: \"!fake:example.org\",",
          "300:         });",
          "301:         const mockRoom = {",
          "302:             updatePendingEvent: jest.fn(),",
          "303:         } as unknown as Room;",
          "304:         client.resendEvent(dummyEvent, mockRoom);",
          "306:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "307:     });",
          "309:     it(\"splits many messages into multiple HTTP requests\", async function() {",
          "310:         const batch: ToDeviceBatch = {",
          "311:             eventType: \"org.example.foo\",",
          "312:             batch: [],",
          "313:         };",
          "315:         for (let i = 0; i <= 20; ++i) {",
          "316:             batch.batch.push({",
          "317:                 userId: `@user${i}:example.org`,",
          "318:                 deviceId: FAKE_DEVICE_ID,",
          "319:                 payload: FAKE_PAYLOAD,",
          "320:             });",
          "321:         }",
          "323:         httpBackend.when(",
          "324:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "325:         ).check((request) => {",
          "326:             expect(Object.keys(request.data.messages).length).toEqual(20);",
          "327:         }).respond(200, {});",
          "329:         httpBackend.when(",
          "330:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "331:         ).check((request) => {",
          "332:             expect(Object.keys(request.data.messages).length).toEqual(1);",
          "333:         }).respond(200, {});",
          "335:         await client.queueToDevice(batch);",
          "336:         await httpBackend.flushAllExpected();",
          "337:     });",
          "338: });",
          "",
          "---------------"
        ],
        "src/ToDeviceMessageQueue.ts||src/ToDeviceMessageQueue.ts": [
          "File: src/ToDeviceMessageQueue.ts -> src/ToDeviceMessageQueue.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { logger } from \"./logger\";",
          "18: import { MatrixClient } from \"./matrix\";",
          "19: import { IndexedToDeviceBatch, ToDeviceBatch, ToDeviceBatchWithTxnId, ToDevicePayload } from \"./models/ToDeviceMessage\";",
          "20: import { MatrixScheduler } from \"./scheduler\";",
          "22: const MAX_BATCH_SIZE = 20;",
          "28: export class ToDeviceMessageQueue {",
          "29:     private sending = false;",
          "30:     private running = true;",
          "31:     private retryTimeout: number = null;",
          "32:     private retryAttempts = 0;",
          "34:     constructor(private client: MatrixClient) {",
          "35:     }",
          "37:     public start(): void {",
          "38:         this.running = true;",
          "39:         this.sendQueue();",
          "40:     }",
          "42:     public stop(): void {",
          "43:         this.running = false;",
          "44:         if (this.retryTimeout !== null) clearTimeout(this.retryTimeout);",
          "45:         this.retryTimeout = null;",
          "46:     }",
          "48:     public async queueBatch(batch: ToDeviceBatch): Promise<void> {",
          "49:         const batches: ToDeviceBatchWithTxnId[] = [];",
          "50:         for (let i = 0; i < batch.batch.length; i += MAX_BATCH_SIZE) {",
          "51:             batches.push({",
          "52:                 eventType: batch.eventType,",
          "53:                 batch: batch.batch.slice(i, i + MAX_BATCH_SIZE),",
          "54:                 txnId: this.client.makeTxnId(),",
          "55:             });",
          "56:         }",
          "58:         await this.client.store.saveToDeviceBatches(batches);",
          "59:         this.sendQueue();",
          "60:     }",
          "62:     public sendQueue = async (): Promise<void> => {",
          "63:         if (this.retryTimeout !== null) clearTimeout(this.retryTimeout);",
          "64:         this.retryTimeout = null;",
          "66:         if (this.sending || !this.running) return;",
          "68:         logger.debug(\"Attempting to send queued to-device messages\");",
          "70:         this.sending = true;",
          "71:         let headBatch;",
          "72:         try {",
          "73:             while (this.running) {",
          "74:                 headBatch = await this.client.store.getOldestToDeviceBatch();",
          "75:                 if (headBatch === null) break;",
          "76:                 await this.sendBatch(headBatch);",
          "77:                 await this.client.store.removeToDeviceBatch(headBatch.id);",
          "78:                 this.retryAttempts = 0;",
          "79:             }",
          "82:             if (!this.running) return;",
          "84:             logger.debug(\"All queued to-device messages sent\");",
          "85:         } catch (e) {",
          "86:             ++this.retryAttempts;",
          "89:             const retryDelay = MatrixScheduler.RETRY_BACKOFF_RATELIMIT(null, this.retryAttempts, e);",
          "90:             if (retryDelay === -1) {",
          "93:                 if (Math.floor(e.httpStatus / 100) === 4) {",
          "94:                     logger.error(\"Fatal error when sending to-device message - dropping to-device batch!\", e);",
          "95:                     await this.client.store.removeToDeviceBatch(headBatch.id);",
          "96:                 } else {",
          "97:                     logger.info(\"Automatic retry limit reached for to-device messages.\");",
          "98:                 }",
          "99:                 return;",
          "100:             }",
          "102:             logger.info(`Failed to send batch of to-device messages. Will retry in ${retryDelay}ms`, e);",
          "103:             this.retryTimeout = setTimeout(this.sendQueue, retryDelay);",
          "104:         } finally {",
          "105:             this.sending = false;",
          "106:         }",
          "107:     };",
          "112:     private async sendBatch(batch: IndexedToDeviceBatch): Promise<void> {",
          "113:         const contentMap: Record<string, Record<string, ToDevicePayload>> = {};",
          "114:         for (const item of batch.batch) {",
          "115:             if (!contentMap[item.userId]) {",
          "116:                 contentMap[item.userId] = {};",
          "117:             }",
          "118:             contentMap[item.userId][item.deviceId] = item.payload;",
          "119:         }",
          "121:         logger.info(`Sending batch of ${batch.batch.length} to-device messages with ID ${batch.id}`);",
          "123:         await this.client.sendToDevice(batch.eventType, contentMap, batch.txnId);",
          "124:     }",
          "125: }",
          "",
          "---------------"
        ],
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: import { SlidingSyncSdk } from \"./sliding-sync-sdk\";",
          "203: import { Thread, THREAD_RELATION_TYPE } from \"./models/thread\";",
          "204: import { MBeaconInfoEventContent, M_BEACON_INFO } from \"./@types/beacon\";",
          "206: export type Store = IStore;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: import { ToDeviceMessageQueue } from \"./ToDeviceMessageQueue\";",
          "206: import { ToDeviceBatch } from \"./models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "962:     protected pendingEventEncryption = new Map<string, Promise<void>>();",
          "964:     private useE2eForGroupCall = true;",
          "966:     constructor(opts: IMatrixClientCreateOpts) {",
          "967:         super();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "967:     private toDeviceMessageQueue: ToDeviceMessageQueue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1062:         this.roomList = new RoomList(this.cryptoStore);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1067:         this.toDeviceMessageQueue = new ToDeviceMessageQueue(this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1224:             }, 1000 * this.clientOpts.clientWellKnownPollPeriod);",
          "1225:             this.fetchClientWellKnown();",
          "1226:         }",
          "1227:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1233:         this.toDeviceMessageQueue.start();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1251:         if (this.clientWellKnownIntervalID !== undefined) {",
          "1252:             global.clearInterval(this.clientWellKnownIntervalID);",
          "1253:         }",
          "1254:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1262:         this.toDeviceMessageQueue.stop();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1657:     public retryImmediately(): boolean {",
          "1658:         return this.syncApi.retryImmediately();",
          "1659:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670:         this.toDeviceMessageQueue.sendQueue();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3601:     public resendEvent(event: MatrixEvent, room: Room): Promise<ISendEventResponse> {",
          "3602:         this.updatePendingEventStatus(room, event, EventStatus.SENDING);",
          "3603:         return this.encryptAndSendEvent(room, event);",
          "3604:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3616:         this.toDeviceMessageQueue.sendQueue();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8818:         return this.http.authedRequest(undefined, Method.Put, path, undefined, body);",
          "8819:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8847:     public queueToDevice(batch: ToDeviceBatch): Promise<void> {",
          "8848:         return this.toDeviceMessageQueue.queueBatch(batch);",
          "8849:     }",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:     private encryptAndSendKeysToDevices(",
          "601:         session: OutboundSessionInfo,",
          "602:         chainIndex: number,",
          "604:         payload: IPayload,",
          "605:     ): Promise<void> {",
          "606:         return this.crypto.encryptAndSendToDevices(",
          "608:             payload,",
          "620:             }",
          "621:         }).catch((error) => {",
          "622:             logger.error(\"failed to encryptAndSendToDevices\", error);",
          "",
          "[Removed Lines]",
          "603:         userDeviceMap: IOlmDevice[],",
          "607:             userDeviceMap,",
          "609:         ).then(({ contentMap, deviceInfoByUserIdAndDeviceId }) => {",
          "611:             for (const userId of Object.keys(contentMap)) {",
          "612:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "613:                     session.markSharedWithDevice(",
          "614:                         userId,",
          "615:                         deviceId,",
          "616:                         deviceInfoByUserIdAndDeviceId.get(userId).get(deviceId).getIdentityKey(),",
          "617:                         chainIndex,",
          "618:                     );",
          "619:                 }",
          "",
          "[Added Lines]",
          "602:         devices: IOlmDevice[],",
          "606:             devices,",
          "608:         ).then(() => {",
          "610:             for (const device of devices) {",
          "611:                 session.markSharedWithDevice(",
          "612:                     device.userId,",
          "613:                     device.deviceInfo.deviceId,",
          "614:                     device.deviceInfo.getIdentityKey(),",
          "615:                     chainIndex,",
          "616:                 );",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: import { CryptoStore } from \"./store/base\";",
          "84: import { IVerificationChannel } from \"./verification/request/Channel\";",
          "85: import { TypedEventEmitter } from \"../models/typed-event-emitter\";",
          "87: const DeviceVerification = DeviceInfo.DeviceVerification;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: import { ToDeviceBatch, ToDeviceMessage } from \"../models/ToDeviceMessage\";",
          "87: import { EventType } from \"../matrix\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: }",
          "218: export enum CryptoEvent {",
          "219:     DeviceVerificationChanged = \"deviceVerificationChanged\",",
          "220:     UserTrustStatusChanged = \"userTrustStatusChanged\",",
          "",
          "[Removed Lines]",
          "213: interface IEncryptAndSendToDevicesResult {",
          "214:     contentMap: Record<string, Record<string, IEncryptedContent>>;",
          "215:     deviceInfoByUserIdAndDeviceId: Map<string, Map<string, DeviceInfo>>;",
          "216: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3132:     public encryptAndSendToDevices(",
          "3134:         payload: object,",
          "3142:             const encryptedContent: IEncryptedContent = {",
          "3143:                 algorithm: olmlib.OLM_ALGORITHM,",
          "3144:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "3145:                 ciphertext: {},",
          "3146:             };",
          "3164:             promises.push(",
          "3165:                 olmlib.ensureOlmSessionsForDevices(",
          "3166:                     this.olmDevice,",
          "3167:                     this.baseApis,",
          "3169:                 ).then(() =>",
          "3170:                     olmlib.encryptMessageForDevice(",
          "3171:                         encryptedContent.ciphertext,",
          "3172:                         this.userId,",
          "3173:                         this.deviceId,",
          "3174:                         this.olmDevice,",
          "3177:                         payload,",
          "3178:                     ),",
          "3179:                 ),",
          "",
          "[Removed Lines]",
          "3133:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "3135:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "3136:         const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "3137:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "3139:         const promises: Promise<unknown>[] = [];",
          "3140:         for (const { userId, deviceInfo } of userDeviceInfoArr) {",
          "3141:             const deviceId = deviceInfo.deviceId;",
          "3149:             let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "3151:             if (userIdDeviceInfo === undefined) {",
          "3152:                 userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "3153:                 deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "3154:             }",
          "3157:             userIdDeviceInfo.set(deviceId, deviceInfo);",
          "3159:             if (!contentMap[userId]) {",
          "3160:                 contentMap[userId] = {};",
          "3161:             }",
          "3162:             contentMap[userId][deviceId] = encryptedContent;",
          "3168:                     { [userId]: [deviceInfo] },",
          "3175:                         userId,",
          "3176:                         deviceInfo,",
          "",
          "[Added Lines]",
          "3129:         devices: IOlmDevice<DeviceInfo>[],",
          "3131:     ): Promise<void> {",
          "3132:         const toDeviceBatch: ToDeviceBatch = {",
          "3133:             eventType: EventType.RoomMessageEncrypted,",
          "3134:             batch: [],",
          "3135:         };",
          "3137:         const promises: Promise<void>[] = [];",
          "3138:         for (const device of devices) {",
          "3145:             toDeviceBatch.batch.push({",
          "3146:                 userId: device.userId,",
          "3147:                 deviceId: device.deviceInfo.deviceId,",
          "3148:                 payload: encryptedContent,",
          "3149:             });",
          "3155:                     { [device.userId]: [device.deviceInfo] },",
          "3162:                         device.userId,",
          "3163:                         device.deviceInfo,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3199:                 }",
          "3200:             }",
          "3211:                 logger.error(\"sendToDevice failed\", error);",
          "3212:                 throw error;",
          "3213:             });",
          "",
          "[Removed Lines]",
          "3188:             for (const userId of Object.keys(contentMap)) {",
          "3189:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "3190:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "3191:                         logger.log(`No ciphertext for device ${userId}:${deviceId}: pruning`);",
          "3192:                         delete contentMap[userId][deviceId];",
          "3193:                     }",
          "3194:                 }",
          "3196:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "3197:                     logger.log(`Pruned all devices for user ${userId}`);",
          "3198:                     delete contentMap[userId];",
          "3203:             if (Object.keys(contentMap).length === 0) {",
          "3204:                 logger.log(\"No users left to send to: aborting\");",
          "3205:                 return;",
          "3206:             }",
          "3208:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3209:                 (response) => ({ contentMap, deviceInfoByUserIdAndDeviceId }),",
          "3210:             ).catch(error => {",
          "",
          "[Added Lines]",
          "3175:             const prunedBatch: ToDeviceMessage[] = [];",
          "3176:             for (const msg of toDeviceBatch.batch) {",
          "3177:                 if (Object.keys(msg.payload.ciphertext).length > 0) {",
          "3178:                     prunedBatch.push(msg);",
          "3179:                 } else {",
          "3180:                     logger.log(",
          "3181:                         \"No ciphertext for device \" +",
          "3182:                         msg.userId + \":\" + msg.deviceId + \": pruning\",",
          "3183:                     );",
          "3187:             toDeviceBatch.batch = prunedBatch;",
          "3189:             return this.baseApis.queueToDevice(toDeviceBatch).catch(error => {",
          "",
          "---------------"
        ],
        "src/models/ToDeviceMessage.ts||src/models/ToDeviceMessage.ts": [
          "File: src/models/ToDeviceMessage.ts -> src/models/ToDeviceMessage.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: export type ToDevicePayload = Record<string, any>;",
          "19: export interface ToDeviceMessage {",
          "20:     userId: string;",
          "21:     deviceId: string;",
          "22:     payload: ToDevicePayload;",
          "23: }",
          "25: export interface ToDeviceBatch {",
          "26:     eventType: string;",
          "27:     batch: ToDeviceMessage[];",
          "28: }",
          "31: export interface ToDeviceBatchWithTxnId extends ToDeviceBatch {",
          "32:     txnId: string;",
          "33: }",
          "36: export interface IndexedToDeviceBatch extends ToDeviceBatchWithTxnId {",
          "37:     id: number;",
          "38: }",
          "",
          "---------------"
        ],
        "src/models/room.ts||src/models/room.ts": [
          "File: src/models/room.ts -> src/models/room.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:                 },",
          "73:             },",
          "74:         },",
          "76:         room_id: event.getRoomId(),",
          "77:     });",
          "78: }",
          "",
          "[Removed Lines]",
          "75:         type: \"m.receipt\",",
          "",
          "[Added Lines]",
          "75:         type: EventType.Receipt,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424:     public addEphemeralEvents(events: MatrixEvent[]): void {",
          "2425:         for (const event of events) {",
          "2427:                 this.currentState.setTypingEvent(event);",
          "2429:                 this.addReceipt(event);",
          "2430:             } // else ignore - life is too short for us to care about these events",
          "2431:         }",
          "",
          "[Removed Lines]",
          "2426:             if (event.getType() === 'm.typing') {",
          "2428:             } else if (event.getType() === 'm.receipt') {",
          "",
          "[Added Lines]",
          "2426:             if (event.getType() === EventType.Typing) {",
          "2428:             } else if (event.getType() === EventType.Receipt) {",
          "",
          "---------------"
        ],
        "src/scheduler.ts||src/scheduler.ts": [
          "File: src/scheduler.ts -> src/scheduler.ts"
        ],
        "src/sliding-sync.ts||src/sliding-sync.ts": [
          "File: src/sliding-sync.ts -> src/sliding-sync.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     is_invite?: boolean;",
          "45:     is_tombstoned?: boolean;",
          "46:     room_name_like?: string;",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     room_types?: string[];",
          "48:     not_room_types?: string[];",
          "49:     spaces?: string[];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:                         listIndex,",
          "603:                         op.range[0],",
          "604:                         op.range[1],",
          "606:                         \";\",",
          "607:                     );",
          "608:                     break;",
          "",
          "[Removed Lines]",
          "605:                         op.room_ids.join(\" \"),",
          "",
          "[Added Lines]",
          "608:                         (op.room_ids || []).join(\" \"),",
          "",
          "---------------"
        ],
        "src/store/index.ts||src/store/index.ts": [
          "File: src/store/index.ts -> src/store/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { IMinimalEvent, IRooms, ISyncResponse } from \"../sync-accumulator\";",
          "24: import { IStartClientOpts } from \"../client\";",
          "25: import { IStateEventWithRoomId } from \"../@types/search\";",
          "27: export interface ISavedSync {",
          "28:     nextBatch: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:     getPendingEvents(roomId: string): Promise<Partial<IEvent>[]>;",
          "224:     setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void>;",
          "225: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:      saveToDeviceBatches(batch: ToDeviceBatchWithTxnId[]): Promise<void>;",
          "250:      getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch>;",
          "255:      removeToDeviceBatch(id: number): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-backend.ts||src/store/indexeddb-backend.ts": [
          "File: src/store/indexeddb-backend.ts -> src/store/indexeddb-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { ISavedSync } from \"./index\";",
          "18: import { IEvent, IStartClientOpts, IStateEventWithRoomId, ISyncResponse } from \"..\";",
          "20: export interface IIndexedDBBackend {",
          "21:     connect(): Promise<void>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     getUserPresenceEvents(): Promise<UserTuple[]>;",
          "32:     getClientOptions(): Promise<IStartClientOpts>;",
          "33:     storeClientOptions(options: IStartClientOpts): Promise<void>;",
          "34: }",
          "36: export type UserTuple = [userId: string, presenceEvent: Partial<IEvent>];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void>;",
          "36:     getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch>;",
          "37:     removeToDeviceBatch(id: number): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts": [
          "File: src/store/indexeddb-local-backend.ts -> src/store/indexeddb-local-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { IStartClientOpts, IStateEventWithRoomId } from \"..\";",
          "22: import { ISavedSync } from \"./index\";",
          "23: import { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";",
          "27: function createDatabase(db: IDBDatabase): void {",
          "",
          "[Removed Lines]",
          "25: const VERSION = 3;",
          "",
          "[Added Lines]",
          "24: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "26: const VERSION = 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         { keyPath: [\"clobber\"] });",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: function upgradeSchemaV4(db: IDBDatabase): void {",
          "54:     db.createObjectStore(\"to_device_queue\", { autoIncrement: true });",
          "55: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     });",
          "113: }",
          "116:     return reqAsEventPromise(req).then((event) => req.result);",
          "117: }",
          "",
          "[Removed Lines]",
          "115: function reqAsCursorPromise(req: IDBRequest<IDBCursor | null>): Promise<IDBCursor> {",
          "",
          "[Added Lines]",
          "120: function reqAsCursorPromise<T>(req: IDBRequest<T>): Promise<T> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:             if (oldVersion < 3) {",
          "178:                 upgradeSchemaV3(db);",
          "179:             }",
          "181:         };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:             if (oldVersion < 4) {",
          "186:                 upgradeSchemaV4(db);",
          "187:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:         }); // put == UPSERT",
          "562:         await txnAsPromise(txn);",
          "563:     }",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:     public async saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "574:         const txn = this.db.transaction([\"to_device_queue\"], \"readwrite\");",
          "575:         const store = txn.objectStore(\"to_device_queue\");",
          "576:         for (const batch of batches) {",
          "577:             store.add(batch);",
          "578:         }",
          "579:         await txnAsPromise(txn);",
          "580:     }",
          "582:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "583:         const txn = this.db.transaction([\"to_device_queue\"], \"readonly\");",
          "584:         const store = txn.objectStore(\"to_device_queue\");",
          "585:         const cursor = await reqAsCursorPromise(store.openCursor());",
          "586:         if (!cursor) return null;",
          "588:         const resultBatch = cursor.value as ToDeviceBatchWithTxnId;",
          "590:         return {",
          "591:             id: cursor.key as number,",
          "592:             txnId: resultBatch.txnId,",
          "593:             eventType: resultBatch.eventType,",
          "594:             batch: resultBatch.batch,",
          "595:         };",
          "596:     }",
          "598:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "599:         const txn = this.db.transaction([\"to_device_queue\"], \"readwrite\");",
          "600:         const store = txn.objectStore(\"to_device_queue\");",
          "601:         store.delete(id);",
          "602:         await txnAsPromise(txn);",
          "603:     }",
          "",
          "---------------"
        ],
        "src/store/indexeddb-remote-backend.ts||src/store/indexeddb-remote-backend.ts": [
          "File: src/store/indexeddb-remote-backend.ts -> src/store/indexeddb-remote-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import { IStartClientOpts } from \"../client\";",
          "21: import { IStateEventWithRoomId, ISyncResponse } from \"..\";",
          "22: import { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";",
          "24: export class RemoteIndexedDBStoreBackend implements IIndexedDBBackend {",
          "25:     private worker: Worker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         return this.doCmd('getUserPresenceEvents');",
          "134:     }",
          "136:     private ensureStarted(): Promise<void> {",
          "137:         if (this.startPromise === null) {",
          "138:             this.worker = this.workerFactory();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     public async saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "138:         return this.doCmd('saveToDeviceBatches', [batches]);",
          "139:     }",
          "141:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch> {",
          "142:         return this.doCmd('getOldestToDeviceBatch');",
          "143:     }",
          "145:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "146:         return this.doCmd('removeToDeviceBatch', [id]);",
          "147:     }",
          "",
          "---------------"
        ],
        "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts": [
          "File: src/store/indexeddb-store-worker.ts -> src/store/indexeddb-store-worker.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:             case 'storeClientOptions':",
          "104:                 prom = this.backend.storeClientOptions(msg.args[0]);",
          "105:                 break;",
          "106:         }",
          "108:         if (prom === undefined) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:             case 'saveToDeviceBatches':",
          "107:                 prom = this.backend.saveToDeviceBatches(msg.args[0]);",
          "108:                 break;",
          "109:             case 'getOldestToDeviceBatch':",
          "110:                 prom = this.backend.getOldestToDeviceBatch();",
          "111:                 break;",
          "112:             case 'removeToDeviceBatch':",
          "113:                 prom = this.backend.removeToDeviceBatch(msg.args[0]);",
          "114:                 break;",
          "",
          "---------------"
        ],
        "src/store/indexeddb.ts||src/store/indexeddb.ts": [
          "File: src/store/indexeddb.ts -> src/store/indexeddb.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { ISyncResponse } from \"../sync-accumulator\";",
          "28: import { TypedEventEmitter } from \"../models/typed-event-emitter\";",
          "29: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:             this.localStorage.removeItem(pendingEventsKey(roomId));",
          "352:         }",
          "353:     }",
          "354: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:     public saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "357:         return this.backend.saveToDeviceBatches(batches);",
          "358:     }",
          "360:     public getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch> {",
          "361:         return this.backend.getOldestToDeviceBatch();",
          "362:     }",
          "364:     public removeToDeviceBatch(id: number): Promise<void> {",
          "365:         return this.backend.removeToDeviceBatch(id);",
          "366:     }",
          "",
          "---------------"
        ],
        "src/store/memory.ts||src/store/memory.ts": [
          "File: src/store/memory.ts -> src/store/memory.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import { RoomSummary } from \"../models/room-summary\";",
          "31: import { ISyncResponse } from \"../sync-accumulator\";",
          "32: import { IStateEventWithRoomId } from \"../@types/search\";",
          "34: function isValidFilterId(filterId: string): boolean {",
          "35:     const isValidStr = typeof filterId === \"string\" &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     private oobMembers: Record<string, IStateEventWithRoomId[]> = {}; // roomId: [member events]",
          "65:     private pendingEvents: { [roomId: string]: Partial<IEvent>[] } = {};",
          "66:     private clientOptions = {};",
          "68:     constructor(opts: IOpts = {}) {",
          "69:         this.localStorage = opts.localStorage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     private pendingToDeviceBatches: IndexedToDeviceBatch[] = [];",
          "69:     private nextToDeviceBatchId = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:     public async setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "430:         this.pendingEvents[roomId] = events;",
          "431:     }",
          "432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:     public saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "437:         for (const batch of batches) {",
          "438:             this.pendingToDeviceBatches.push({",
          "439:                 id: this.nextToDeviceBatchId++,",
          "440:                 eventType: batch.eventType,",
          "441:                 txnId: batch.txnId,",
          "442:                 batch: batch.batch,",
          "443:             });",
          "444:         }",
          "445:         return Promise.resolve();",
          "446:     }",
          "448:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "449:         if (this.pendingToDeviceBatches.length === 0) return null;",
          "450:         return this.pendingToDeviceBatches[0];",
          "451:     }",
          "453:     public removeToDeviceBatch(id: number): Promise<void> {",
          "454:         this.pendingToDeviceBatches = this.pendingToDeviceBatches.filter(batch => batch.id !== id);",
          "455:         return Promise.resolve();",
          "456:     }",
          "",
          "---------------"
        ],
        "src/store/stub.ts||src/store/stub.ts": [
          "File: src/store/stub.ts -> src/store/stub.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import { RoomSummary } from \"../models/room-summary\";",
          "29: import { ISyncResponse } from \"../sync-accumulator\";",
          "30: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import { IndexedToDeviceBatch, ToDeviceBatch } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:     public setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "271:         return Promise.resolve();",
          "272:     }",
          "273: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     public async saveToDeviceBatches(batch: ToDeviceBatch[]): Promise<void> {",
          "276:         return Promise.resolve();",
          "277:     }",
          "279:     public getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "280:         return Promise.resolve(null);",
          "281:     }",
          "283:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "284:         return Promise.resolve();",
          "285:     }",
          "",
          "---------------"
        ],
        "src/webrtc/call.ts||src/webrtc/call.ts": [
          "File: src/webrtc/call.ts -> src/webrtc/call.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: } from './callEventTypes';",
          "48: import { CallFeed } from './callFeed';",
          "49: import { MatrixClient } from \"../client\";",
          "51: import { EventEmitterEvents, TypedEventEmitter } from \"../models/typed-event-emitter\";",
          "52: import { DeviceInfo } from '../crypto/deviceinfo';",
          "53: import { GroupCallUnknownDeviceError } from './groupCall';",
          "",
          "[Removed Lines]",
          "50: import { ISendEventResponse } from \"../@types/requests\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2189:         const realContent = Object.assign({}, content, {",
          "2190:             version: VOIP_PROTO_VERSION,",
          "2191:             call_id: this.callId,",
          "",
          "[Removed Lines]",
          "2188:     private async sendVoipEvent(eventType: string, content: object): Promise<ISendEventResponse | {}> {",
          "",
          "[Added Lines]",
          "2187:     private async sendVoipEvent(eventType: string, content: object): Promise<void> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2228:                     content,",
          "2229:                 });",
          "2230:             } else {",
          "2235:                 });",
          "2236:             }",
          "2237:         } else {",
          "",
          "[Removed Lines]",
          "2231:                 return this.client.sendToDevice(eventType, {",
          "2232:                     [userId]: {",
          "2233:                         [this.opponentDeviceId]: content,",
          "2234:                     },",
          "",
          "[Added Lines]",
          "2230:                 return this.client.queueToDevice({",
          "2231:                     eventType,",
          "2232:                     batch: [",
          "2233:                         {",
          "2234:                             userId,",
          "2235:                             deviceId: this.opponentDeviceId,",
          "2236:                             payload: content,",
          "2237:                         },",
          "2238:                     ],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2243:                 userId: this.invitee || this.getOpponentMember().userId,",
          "2244:             });",
          "2247:         }",
          "2248:     }",
          "",
          "[Removed Lines]",
          "2246:             return this.client.sendEvent(this.roomId, eventType, realContent);",
          "",
          "[Added Lines]",
          "2250:             await this.client.sendEvent(this.roomId, eventType, realContent);",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "4802:   resolved \"https://registry.yarnpkg.com/matrix-events-sdk/-/matrix-events-sdk-0.0.1-beta.7.tgz#5ffe45eba1f67cc8d7c2377736c728b322524934\"",
          "4803:   integrity sha512-9jl4wtWanUFSy2sr2lCjErN/oC8KTAtaeaozJtrgot1JiQcEI4Rda9OLgQ7nLKaqb4Z/QUx/fR3XpDzm5Jy1JA==",
          "4809:   dependencies:",
          "4810:     expect \"^28.1.0\"",
          "",
          "[Removed Lines]",
          "4805: matrix-mock-request@^2.1.0:",
          "4806:   version \"2.1.0\"",
          "4807:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.0.tgz#86f5b0ef846865d0767d3a8e64f5bcd6ca94c178\"",
          "4808:   integrity sha512-Cjpl3yP6h0yu5GKG89m1XZXZlm69Kg/qHV41N/t6SrQsgcfM3Bfavqx9YrtG0UnuXGy4bBSZIe1QiWVeFPZw1A==",
          "",
          "[Added Lines]",
          "4805: matrix-mock-request@^2.1.1:",
          "4806:   version \"2.1.1\"",
          "4807:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.1.tgz#a8fc03a2816464bb95445df4cc8885ac36786b23\"",
          "4808:   integrity sha512-CxdaUPRVB4o8JxTBMASstS2loRe+hlqeJu0Q7yyS1r36LkSSo/KAP4AuomsqxuKqaqYYnEJFJzkG0gOhxV7aqA==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c68ef624e96b606924c8283c308756961a6f1298",
      "candidate_info": {
        "commit_hash": "c68ef624e96b606924c8283c308756961a6f1298",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/c68ef624e96b606924c8283c308756961a6f1298",
        "files": [
          "src/crypto/algorithms/megolm.ts"
        ],
        "message": "don't choke on missing promise",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:         userDeviceMap: IOlmDevice[],",
          "579:         payload: IPayload,",
          "580:     ): Promise<void> {",
          "582:             userDeviceMap,",
          "583:             payload,",
          "585:             const { contentMap, deviceInfoByDeviceId } = result;",
          "587:             for (const userId of Object.keys(contentMap)) {",
          "",
          "[Removed Lines]",
          "581:         return this.crypto.encryptAndSendToDevices(",
          "584:         ).then((result) => {",
          "",
          "[Added Lines]",
          "581:         const p = this.crypto.encryptAndSendToDevices(",
          "584:         );",
          "585:         if (!p) return;",
          "586:         return p.then((result) => {",
          "587:             if (!result) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "841e6e999df5c66c5d6703800a6560e2080672f6",
      "candidate_info": {
        "commit_hash": "841e6e999df5c66c5d6703800a6560e2080672f6",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/841e6e999df5c66c5d6703800a6560e2080672f6",
        "files": [
          "src/crypto/algorithms/megolm.ts"
        ],
        "message": "handle promises normally now tests are fixed",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         userDeviceMap: IOlmDevice[],",
          "585:         payload: IPayload,",
          "586:     ): Promise<void> {",
          "588:             userDeviceMap,",
          "589:             payload,",
          "594:             const { contentMap, deviceInfoByDeviceId } = result;",
          "596:             for (const userId of Object.keys(contentMap)) {",
          "",
          "[Removed Lines]",
          "587:         const p = this.crypto.encryptAndSendToDevices(",
          "590:         );",
          "591:         if (!p) return;",
          "592:         return p.then((result) => {",
          "593:             if (!result) return;",
          "",
          "[Added Lines]",
          "587:         return this.crypto.encryptAndSendToDevices(",
          "590:         ).then((result) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "603:                     );",
          "604:                 }",
          "605:             }",
          "606:         });",
          "607:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:         }).catch((error) => {",
          "604:             console.error(\"failed to encryptAndSendToDevices\", error);",
          "605:             throw error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53397ee0d17e76d04586bf9c9d00f636f458c733",
      "candidate_info": {
        "commit_hash": "53397ee0d17e76d04586bf9c9d00f636f458c733",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/53397ee0d17e76d04586bf9c9d00f636f458c733",
        "files": [
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "lint",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:     ): Promise<void> {",
          "587:         return this.crypto.encryptAndSendToDevices(",
          "588:             userDeviceMap,",
          "590:         ).then((result) => {",
          "593:             for (const userId of Object.keys(contentMap)) {",
          "594:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "",
          "[Removed Lines]",
          "589:             payload",
          "591:             const {contentMap, deviceInfoByDeviceId} = result;",
          "",
          "[Added Lines]",
          "589:             payload,",
          "591:             const { contentMap, deviceInfoByDeviceId } = result;",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3050:         userDeviceMap: IOlmDevice<DeviceInfo>[],",
          "3051:         payload: object,",
          "3052:     ): Promise<{contentMap, deviceInfoByDeviceId}> {",
          "",
          "[Removed Lines]",
          "3049:     encryptAndSendToDevices(",
          "",
          "[Added Lines]",
          "3049:     public encryptAndSendToDevices(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3121:             }",
          "3123:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3125:             );",
          "3126:         });",
          "3127:     }",
          "",
          "[Removed Lines]",
          "3124:                 (response)=>({ contentMap, deviceInfoByDeviceId })",
          "",
          "[Added Lines]",
          "3124:                 (response)=>({ contentMap, deviceInfoByDeviceId }),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cc51e0db76aad7af378bc92fadd729d06c394c7",
      "candidate_info": {
        "commit_hash": "2cc51e0db76aad7af378bc92fadd729d06c394c7",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/2cc51e0db76aad7af378bc92fadd729d06c394c7",
        "files": [
          "CHANGELOG.md",
          "package.json",
          "spec/unit/crypto.spec.ts",
          "spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/matrix-client.spec.ts",
          "spec/unit/queueToDevice.spec.ts",
          "spec/unit/webrtc/call.spec.ts",
          "spec/unit/webrtc/callFeed.spec.ts",
          "src/ToDeviceMessageQueue.ts",
          "src/client.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts",
          "src/models/ToDeviceMessage.ts",
          "src/models/room.ts",
          "src/scheduler.ts",
          "src/sliding-sync.ts",
          "src/store/index.ts",
          "src/store/indexeddb-backend.ts",
          "src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-remote-backend.ts",
          "src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts",
          "src/store/memory.ts",
          "src/store/stub.ts",
          "src/webrtc/call.ts",
          "src/webrtc/callFeed.ts",
          "yarn.lock"
        ],
        "message": "Merge changes from develop (#2563)\n\n* Prepare changelog for v19.2.0-rc.1\n\n* v19.2.0-rc.1\n\n* Sliding sync: add missing filters from latest MSC\n\n* Gracefully handle missing room_ids\n\n* Prepare changelog for v19.2.0\n\n* v19.2.0\n\n* Resetting package fields for development\n\n* Use EventType enum values instead of hardcoded strings (#2557)\n\n* Retry to-device messages (#2549)\n\n* Retry to-device messages\n\nThis adds a queueToDevice API alongside sendToDevice which is a\nmuch higher-level API that adds the messages to a queue, stored in\npersistent storage, and retries them periodically. Also converts\nsending of megolm keys to use the new API.\n\nOther uses of sendToDevice are nopt converted in this PR, but could\nbe later.\n\nRequires https://github.com/matrix-org/matrix-mock-request/pull/17\n\n* Bump matrix-mock-request\n\n* Add more waits to make indexeddb tests pass\n\n* Switch some test expectations to queueToDevice\n\n* Stop straight away if the client has been stopped\n\nHopefully will fix tests being flakey and logging after tests have\nfinished.\n\n* Add return types & fix constant usage\n\n* Fix return type\n\nCo-authored-by: Germain <germains@element.io>\n\n* Fix return type\n\nCo-authored-by: Germain <germains@element.io>\n\n* Fix return type\n\nCo-authored-by: Germain <germains@element.io>\n\n* Stop the client in all test cases\n\nCo-authored-by: Germain <germains@element.io>\n\n* Add support for sending user-defined encrypted to-device messages (#2528)\n\n* Add support for sending user-defined encrypted to-device messages\n\nThis is a port of the same change from the robertlong/group-call branch.\n\n* Fix tests\n\n* Expose the method in MatrixClient\n\n* Fix a code smell\n\n* Fix types\n\n* Test the MatrixClient method\n\n* Fix some types in Crypto test suite\n\n* Test the Crypto method\n\n* Fix tests\n\n* Upgrade matrix-mock-request\n\n* Move useRealTimers to afterEach\n\n* Remove stream-replacement (#2551)\n\n* Reintroduce setNewStream method, fix test, update yarn.lock\n\nCo-authored-by: RiotRobot <releases@riot.im>\nCo-authored-by: Kegan Dougal <kegan@matrix.org>\nCo-authored-by: Germain <germains@element.io>\nCo-authored-by: Robin <robin@robin.town>\nCo-authored-by: \u0160imon Brandner <simon.bra.ag@gmail.com>",
        "before_after_code_files": [
          "spec/unit/crypto.spec.ts||spec/unit/crypto.spec.ts",
          "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/matrix-client.spec.ts||spec/unit/matrix-client.spec.ts",
          "spec/unit/queueToDevice.spec.ts||spec/unit/queueToDevice.spec.ts",
          "spec/unit/webrtc/call.spec.ts||spec/unit/webrtc/call.spec.ts",
          "spec/unit/webrtc/callFeed.spec.ts||spec/unit/webrtc/callFeed.spec.ts",
          "src/ToDeviceMessageQueue.ts||src/ToDeviceMessageQueue.ts",
          "src/client.ts||src/client.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts",
          "src/models/ToDeviceMessage.ts||src/models/ToDeviceMessage.ts",
          "src/models/room.ts||src/models/room.ts",
          "src/scheduler.ts||src/scheduler.ts",
          "src/sliding-sync.ts||src/sliding-sync.ts",
          "src/store/index.ts||src/store/index.ts",
          "src/store/indexeddb-backend.ts||src/store/indexeddb-backend.ts",
          "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-remote-backend.ts||src/store/indexeddb-remote-backend.ts",
          "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts||src/store/indexeddb.ts",
          "src/store/memory.ts||src/store/memory.ts",
          "src/store/stub.ts||src/store/stub.ts",
          "src/webrtc/call.ts||src/webrtc/call.ts",
          "src/webrtc/callFeed.ts||src/webrtc/callFeed.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "spec/unit/crypto.spec.ts||spec/unit/crypto.spec.ts": [
          "File: spec/unit/crypto.spec.ts -> spec/unit/crypto.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { EventEmitter } from \"events\";",
          "5: import { Crypto } from \"../../src/crypto\";",
          "6: import { MemoryCryptoStore } from \"../../src/crypto/store/memory-crypto-store\";",
          "7: import { MockStorageApi } from \"../MockStorageApi\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import { MatrixClient } from \"../../src/client\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         return Olm.init();",
          "65:     });",
          "67:     it(\"Crypto exposes the correct olm library version\", function() {",
          "68:         expect(Crypto.getOlmVersion()[0]).toEqual(3);",
          "69:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     afterEach(() => {",
          "69:         jest.useRealTimers();",
          "70:     });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:     });",
          "227:     describe('Key requests', function() {",
          "231:         beforeEach(async function() {",
          "232:             aliceClient = (new TestClient(",
          "",
          "[Removed Lines]",
          "228:         let aliceClient;",
          "229:         let bobClient;",
          "",
          "[Added Lines]",
          "233:         let aliceClient: MatrixClient;",
          "234:         let bobClient: MatrixClient;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:             expect(events[0].getContent().msgtype).toBe(\"m.bad.encrypted\");",
          "314:             expect(events[1].getContent().msgtype).not.toBe(\"m.bad.encrypted\");",
          "317:             const eventContent = events[0].getWireContent();",
          "318:             const senderKey = eventContent.sender_key;",
          "319:             const sessionId = eventContent.session_id;",
          "",
          "[Removed Lines]",
          "316:             const cryptoStore = bobClient.cryptoStore;",
          "",
          "[Added Lines]",
          "321:             const cryptoStore = bobClient.crypto.cryptoStore;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:             const ksEvent = await keyshareEventForEvent(aliceClient, event, 1);",
          "385:             ksEvent.getContent().sender_key = undefined; // test",
          "387:             await bobDecryptor.onRoomKeyEvent(ksEvent);",
          "389:         });",
          "391:         it(\"creates a new keyshare request if we request a keyshare\", async function() {",
          "",
          "[Removed Lines]",
          "386:             bobClient.crypto.addInboundGroupSession = jest.fn();",
          "388:             expect(bobClient.crypto.addInboundGroupSession).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "391:             bobClient.crypto.olmDevice.addInboundGroupSession = jest.fn();",
          "393:             expect(bobClient.crypto.olmDevice.addInboundGroupSession).not.toHaveBeenCalled();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "401:                 },",
          "402:             });",
          "403:             await aliceClient.cancelAndResendEventRoomKeyRequest(event);",
          "405:             const roomKeyRequestBody = {",
          "406:                 algorithm: olmlib.MEGOLM_ALGORITHM,",
          "407:                 room_id: \"!someroom\",",
          "",
          "[Removed Lines]",
          "404:             const cryptoStore = aliceClient.cryptoStore;",
          "",
          "[Added Lines]",
          "409:             const cryptoStore = aliceClient.crypto.cryptoStore;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "425:                 },",
          "426:             });",
          "429:             aliceClient.startClient();",
          "",
          "[Removed Lines]",
          "428:             aliceClient.sendToDevice = jest.fn().mockResolvedValue(undefined);",
          "",
          "[Added Lines]",
          "433:             const aliceSendToDevice = jest.fn().mockResolvedValue(undefined);",
          "434:             aliceClient.sendToDevice = aliceSendToDevice;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "437:             aliceClient.crypto.outgoingRoomKeyRequestManager.sendQueuedRequests();",
          "438:             jest.runAllTimers();",
          "439:             await Promise.resolve();",
          "",
          "[Removed Lines]",
          "440:             expect(aliceClient.sendToDevice).toBeCalledTimes(1);",
          "441:             const txnId = aliceClient.sendToDevice.mock.calls[0][2];",
          "",
          "[Added Lines]",
          "447:             expect(aliceSendToDevice).toBeCalledTimes(1);",
          "448:             const txnId = aliceSendToDevice.mock.calls[0][2];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "456:         });",
          "457:     });",
          "",
          "[Removed Lines]",
          "454:             expect(aliceClient.sendToDevice).toBeCalledTimes(3);",
          "455:             expect(aliceClient.sendToDevice.mock.calls[2][2]).not.toBe(txnId);",
          "",
          "[Added Lines]",
          "461:             expect(aliceSendToDevice).toBeCalledTimes(3);",
          "462:             expect(aliceSendToDevice.mock.calls[2][2]).not.toBe(txnId);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "480:             client.stopClient();",
          "481:         });",
          "482:     });",
          "483: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     describe(\"encryptAndSendToDevices\", () => {",
          "492:         let client: TestClient;",
          "493:         let ensureOlmSessionsForDevices: jest.SpiedFunction<typeof olmlib.ensureOlmSessionsForDevices>;",
          "494:         let encryptMessageForDevice: jest.SpiedFunction<typeof olmlib.encryptMessageForDevice>;",
          "495:         const payload = { hello: \"world\" };",
          "496:         let encryptedPayload: object;",
          "498:         beforeEach(async () => {",
          "499:             ensureOlmSessionsForDevices = jest.spyOn(olmlib, \"ensureOlmSessionsForDevices\");",
          "500:             ensureOlmSessionsForDevices.mockResolvedValue({});",
          "501:             encryptMessageForDevice = jest.spyOn(olmlib, \"encryptMessageForDevice\");",
          "502:             encryptMessageForDevice.mockImplementation(async (...[result,,,,,, payload]) => {",
          "503:                 result.plaintext = JSON.stringify(payload);",
          "504:             });",
          "506:             client = new TestClient(\"@alice:example.org\", \"aliceweb\");",
          "507:             await client.client.initCrypto();",
          "509:             encryptedPayload = {",
          "510:                 algorithm: \"m.olm.v1.curve25519-aes-sha2\",",
          "511:                 sender_key: client.client.crypto.olmDevice.deviceCurve25519Key,",
          "512:                 ciphertext: { plaintext: JSON.stringify(payload) },",
          "513:             };",
          "514:         });",
          "516:         afterEach(async () => {",
          "517:             ensureOlmSessionsForDevices.mockRestore();",
          "518:             encryptMessageForDevice.mockRestore();",
          "519:             await client.stop();",
          "520:         });",
          "522:         it(\"encrypts and sends to devices\", async () => {",
          "523:             client.httpBackend",
          "524:                 .when(\"PUT\", \"/sendToDevice/m.room.encrypted\", {",
          "525:                     messages: {",
          "526:                         \"@bob:example.org\": {",
          "527:                             bobweb: encryptedPayload,",
          "528:                             bobmobile: encryptedPayload,",
          "529:                         },",
          "530:                         \"@carol:example.org\": {",
          "531:                             caroldesktop: encryptedPayload,",
          "532:                         },",
          "533:                     },",
          "534:                 })",
          "535:                 .respond(200, {});",
          "537:             await Promise.all([",
          "538:                 client.client.encryptAndSendToDevices(",
          "539:                     [",
          "540:                         { userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobweb\") },",
          "541:                         { userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobmobile\") },",
          "542:                         { userId: \"@carol:example.org\", deviceInfo: new DeviceInfo(\"caroldesktop\") },",
          "543:                     ],",
          "544:                     payload,",
          "545:                 ),",
          "546:                 client.httpBackend.flushAllExpected(),",
          "547:             ]);",
          "548:         });",
          "550:         it(\"sends nothing to devices that couldn't be encrypted to\", async () => {",
          "551:             encryptMessageForDevice.mockImplementation(async (...[result,,,, userId, device, payload]) => {",
          "553:                 if (userId === \"@carol:example.org\" && device.deviceId === \"caroldesktop\") return;",
          "554:                 result.plaintext = JSON.stringify(payload);",
          "555:             });",
          "557:             client.httpBackend",
          "558:                 .when(\"PUT\", \"/sendToDevice/m.room.encrypted\", {",
          "560:                     messages: { \"@bob:example.org\": { bobweb: encryptedPayload } },",
          "561:                 })",
          "562:                 .respond(200, {});",
          "564:             await Promise.all([",
          "565:                 client.client.encryptAndSendToDevices(",
          "566:                     [",
          "567:                         { userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobweb\") },",
          "568:                         { userId: \"@carol:example.org\", deviceInfo: new DeviceInfo(\"caroldesktop\") },",
          "569:                     ],",
          "570:                     payload,",
          "571:                 ),",
          "572:                 client.httpBackend.flushAllExpected(),",
          "573:             ]);",
          "574:         });",
          "576:         it(\"no-ops if no devices can be encrypted to\", async () => {",
          "578:             encryptMessageForDevice.mockResolvedValue(undefined);",
          "581:             client.httpBackend.when(\"GET\", \"/room_keys/version\").respond(404, {});",
          "582:             await client.httpBackend.flush(\"/room_keys/version\", 1);",
          "584:             await client.client.encryptAndSendToDevices(",
          "585:                 [{ userId: \"@bob:example.org\", deviceInfo: new DeviceInfo(\"bobweb\") }],",
          "586:                 payload,",
          "587:             );",
          "588:             client.httpBackend.verifyNoOutstandingRequests();",
          "589:         });",
          "590:     });",
          "",
          "---------------"
        ],
        "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts": [
          "File: spec/unit/crypto/algorithms/megolm.spec.ts -> spec/unit/crypto/algorithms/megolm.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         mockBaseApis = {",
          "60:             claimOneTimeKeys: jest.fn(),",
          "61:             sendToDevice: jest.fn(),",
          "62:         } as unknown as MockedObject<MatrixClient>;",
          "64:         const cryptoStore = new MemoryCryptoStore();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:             queueToDevice: jest.fn(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:                 });",
          "181:                 mockBaseApis.sendToDevice.mockReset();",
          "184:                 megolmDecryption.shareKeysWithDevice(keyRequest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:                 mockBaseApis.queueToDevice.mockReset();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:                     },",
          "325:                 });",
          "326:                 mockBaseApis.sendToDevice.mockResolvedValue(undefined);",
          "328:                 aliceDeviceInfo = {",
          "329:                     deviceId: 'aliceDevice',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:                 mockBaseApis.queueToDevice.mockResolvedValue(undefined);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:                 expect(mockCrypto.downloadKeys).toHaveBeenCalledWith(",
          "414:                     ['@alice:home.server'], false,",
          "415:                 );",
          "417:                 expect(mockBaseApis.claimOneTimeKeys).toHaveBeenCalledWith(",
          "418:                     [['@alice:home.server', 'aliceDevice']], 'signed_curve25519', 2000,",
          "419:                 );",
          "",
          "[Removed Lines]",
          "416:                 expect(mockBaseApis.sendToDevice).toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "419:                 expect(mockBaseApis.queueToDevice).toHaveBeenCalled();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:                     'YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWI',",
          "457:                 );",
          "460:                 await megolmEncryption.reshareKeyWithDevice(",
          "461:                     olmDevice.deviceCurve25519Key,",
          "462:                     ct1.session_id,",
          "",
          "[Removed Lines]",
          "459:                 mockBaseApis.sendToDevice.mockClear();",
          "",
          "[Added Lines]",
          "462:                 mockBaseApis.queueToDevice.mockClear();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "464:                     aliceDeviceInfo,",
          "465:                 );",
          "468:             });",
          "469:         });",
          "470:     });",
          "",
          "[Removed Lines]",
          "467:                 expect(mockBaseApis.sendToDevice).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "470:                 expect(mockBaseApis.queueToDevice).not.toHaveBeenCalled();",
          "",
          "---------------"
        ],
        "spec/unit/matrix-client.spec.ts||spec/unit/matrix-client.spec.ts": [
          "File: spec/unit/matrix-client.spec.ts -> spec/unit/matrix-client.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     UNSTABLE_MSC3089_TREE_SUBTYPE,",
          "28: } from \"../../src/@types/event\";",
          "29: import { MEGOLM_ALGORITHM } from \"../../src/crypto/olmlib\";",
          "30: import { EventStatus, MatrixEvent } from \"../../src/models/event\";",
          "31: import { Preset } from \"../../src/@types/partials\";",
          "32: import { ReceiptType } from \"../../src/@types/read_receipts\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { Crypto } from \"../../src/crypto\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1297:             expect(result!.aliases).toEqual(response.aliases);",
          "1298:         });",
          "1299:     });",
          "1300: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:     describe(\"encryptAndSendToDevices\", () => {",
          "1303:         it(\"throws an error if crypto is unavailable\", () => {",
          "1304:             client.crypto = undefined;",
          "1305:             expect(() => client.encryptAndSendToDevices([], {})).toThrow();",
          "1306:         });",
          "1308:         it(\"is an alias for the crypto method\", async () => {",
          "1309:             client.crypto = testUtils.mock(Crypto, \"Crypto\");",
          "1310:             const deviceInfos = [];",
          "1311:             const payload = {};",
          "1312:             await client.encryptAndSendToDevices(deviceInfos, payload);",
          "1313:             expect(client.crypto.encryptAndSendToDevices).toHaveBeenLastCalledWith(deviceInfos, payload);",
          "1314:         });",
          "1315:     });",
          "",
          "---------------"
        ],
        "spec/unit/queueToDevice.spec.ts||spec/unit/queueToDevice.spec.ts": [
          "File: spec/unit/queueToDevice.spec.ts -> spec/unit/queueToDevice.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import MockHttpBackend from 'matrix-mock-request';",
          "18: import { indexedDB as fakeIndexedDB } from 'fake-indexeddb';",
          "20: import { IHttpOpts, IndexedDBStore, MatrixEvent, MemoryStore, Room } from \"../../src\";",
          "21: import { MatrixClient } from \"../../src/client\";",
          "22: import { ToDeviceBatch } from '../../src/models/ToDeviceMessage';",
          "23: import { logger } from '../../src/logger';",
          "24: import { IStore } from '../../src/store';",
          "26: const FAKE_USER = \"@alice:example.org\";",
          "27: const FAKE_DEVICE_ID = \"AAAAAAAA\";",
          "28: const FAKE_PAYLOAD = {",
          "29:     \"foo\": 42,",
          "30: };",
          "31: const EXPECTED_BODY = {",
          "32:     messages: {",
          "33:         [FAKE_USER]: {",
          "34:             [FAKE_DEVICE_ID]: FAKE_PAYLOAD,",
          "35:         },",
          "36:     },",
          "37: };",
          "39: const FAKE_MSG = {",
          "40:     userId: FAKE_USER,",
          "41:     deviceId: FAKE_DEVICE_ID,",
          "42:     payload: FAKE_PAYLOAD,",
          "43: };",
          "45: enum StoreType {",
          "46:     Memory = 'Memory',",
          "47:     IndexedDB = 'IndexedDB',",
          "48: }",
          "56: const realSetTimeout = setTimeout;",
          "57: function flushPromises() {",
          "58:     return new Promise(r => {",
          "59:         realSetTimeout(r, 1);",
          "60:     });",
          "61: }",
          "63: async function flushAndRunTimersUntil(cond: () => boolean) {",
          "64:     while (!cond()) {",
          "65:         await flushPromises();",
          "66:         if (cond()) break;",
          "67:         jest.advanceTimersToNextTimer();",
          "68:     }",
          "69: }",
          "71: describe.each([",
          "72:     [StoreType.Memory], [StoreType.IndexedDB],",
          "73: ])(\"queueToDevice (%s store)\", function(storeType) {",
          "74:     let httpBackend: MockHttpBackend;",
          "75:     let client: MatrixClient;",
          "77:     beforeEach(async function() {",
          "78:         httpBackend = new MockHttpBackend();",
          "80:         let store: IStore;",
          "81:         if (storeType === StoreType.IndexedDB) {",
          "82:             const idbStore = new IndexedDBStore({ indexedDB: fakeIndexedDB });",
          "83:             await idbStore.startup();",
          "84:             store = idbStore;",
          "85:         } else {",
          "86:             store = new MemoryStore();",
          "87:         }",
          "89:         client = new MatrixClient({",
          "90:             baseUrl: \"https://my.home.server\",",
          "91:             accessToken: \"my.access.token\",",
          "92:             request: httpBackend.requestFn as IHttpOpts[\"request\"],",
          "93:             store,",
          "94:         });",
          "95:     });",
          "97:     afterEach(function() {",
          "98:         jest.useRealTimers();",
          "99:         client.stopClient();",
          "100:     });",
          "102:     it(\"sends a to-device message\", async function() {",
          "103:         httpBackend.when(",
          "104:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "105:         ).check((request) => {",
          "106:             expect(request.data).toEqual(EXPECTED_BODY);",
          "107:         }).respond(200, {});",
          "109:         await client.queueToDevice({",
          "110:             eventType: \"org.example.foo\",",
          "111:             batch: [",
          "112:                 FAKE_MSG,",
          "113:             ],",
          "114:         });",
          "116:         await httpBackend.flushAllExpected();",
          "117:     });",
          "119:     it(\"retries on error\", async function() {",
          "120:         jest.useFakeTimers();",
          "122:         httpBackend.when(",
          "123:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "124:         ).respond(500);",
          "126:         httpBackend.when(",
          "127:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "128:         ).check((request) => {",
          "129:             expect(request.data).toEqual(EXPECTED_BODY);",
          "130:         }).respond(200, {});",
          "132:         await client.queueToDevice({",
          "133:             eventType: \"org.example.foo\",",
          "134:             batch: [",
          "135:                 FAKE_MSG,",
          "136:             ],",
          "137:         });",
          "138:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "139:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "141:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "143:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "144:     });",
          "146:     it(\"stops retrying on 4xx errors\", async function() {",
          "147:         jest.useFakeTimers();",
          "149:         httpBackend.when(",
          "150:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "151:         ).respond(400);",
          "153:         await client.queueToDevice({",
          "154:             eventType: \"org.example.foo\",",
          "155:             batch: [",
          "156:                 FAKE_MSG,",
          "157:             ],",
          "158:         });",
          "159:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "160:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "165:         let tries = 0;",
          "166:         await flushAndRunTimersUntil(() => ++tries === 10);",
          "168:         expect(httpBackend.requests.length).toEqual(0);",
          "169:     });",
          "171:     it(\"honours ratelimiting\", async function() {",
          "172:         jest.useFakeTimers();",
          "176:         const retryDelay = 279 * 1000;",
          "178:         httpBackend.when(",
          "179:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "180:         ).respond(429, {",
          "181:             errcode: \"M_LIMIT_EXCEEDED\",",
          "182:             retry_after_ms: retryDelay,",
          "183:         });",
          "185:         httpBackend.when(",
          "186:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "187:         ).respond(200, {});",
          "189:         await client.queueToDevice({",
          "190:             eventType: \"org.example.foo\",",
          "191:             batch: [",
          "192:                 FAKE_MSG,",
          "193:             ],",
          "194:         });",
          "195:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "196:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "197:         await flushPromises();",
          "199:         logger.info(\"Advancing clock to just before expected retry time...\");",
          "201:         jest.advanceTimersByTime(retryDelay - 1000);",
          "202:         await flushPromises();",
          "204:         expect(httpBackend.requests.length).toEqual(0);",
          "206:         logger.info(\"Advancing clock past expected retry time...\");",
          "208:         jest.advanceTimersByTime(2000);",
          "209:         await flushPromises();",
          "211:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "212:     });",
          "214:     it(\"retries on retryImmediately()\", async function() {",
          "215:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "216:             versions: [\"r0.0.1\"],",
          "217:         });",
          "219:         await Promise.all([client.startClient(), httpBackend.flush(null, 1, 20)]);",
          "221:         httpBackend.when(",
          "222:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "223:         ).respond(500);",
          "225:         httpBackend.when(",
          "226:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "227:         ).respond(200, {});",
          "229:         await client.queueToDevice({",
          "230:             eventType: \"org.example.foo\",",
          "231:             batch: [",
          "232:                 FAKE_MSG,",
          "233:             ],",
          "234:         });",
          "235:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "236:         await flushPromises();",
          "238:         client.retryImmediately();",
          "240:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "241:     });",
          "243:     it(\"retries on when client is started\", async function() {",
          "244:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "245:             versions: [\"r0.0.1\"],",
          "246:         });",
          "248:         await Promise.all([client.startClient(), httpBackend.flush(\"/_matrix/client/versions\", 1, 20)]);",
          "250:         httpBackend.when(",
          "251:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "252:         ).respond(500);",
          "254:         httpBackend.when(",
          "255:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "256:         ).respond(200, {});",
          "258:         await client.queueToDevice({",
          "259:             eventType: \"org.example.foo\",",
          "260:             batch: [",
          "261:                 FAKE_MSG,",
          "262:             ],",
          "263:         });",
          "264:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "265:         await flushPromises();",
          "267:         client.stopClient();",
          "268:         await Promise.all([client.startClient(), httpBackend.flush(\"/_matrix/client/versions\", 1, 20)]);",
          "270:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "271:     });",
          "273:     it(\"retries when a message is retried\", async function() {",
          "274:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "275:             versions: [\"r0.0.1\"],",
          "276:         });",
          "278:         await Promise.all([client.startClient(), httpBackend.flush(null, 1, 20)]);",
          "280:         httpBackend.when(",
          "281:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "282:         ).respond(500);",
          "284:         httpBackend.when(",
          "285:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "286:         ).respond(200, {});",
          "288:         await client.queueToDevice({",
          "289:             eventType: \"org.example.foo\",",
          "290:             batch: [",
          "291:                 FAKE_MSG,",
          "292:             ],",
          "293:         });",
          "295:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "296:         await flushPromises();",
          "298:         const dummyEvent = new MatrixEvent({",
          "299:             event_id: \"!fake:example.org\",",
          "300:         });",
          "301:         const mockRoom = {",
          "302:             updatePendingEvent: jest.fn(),",
          "303:         } as unknown as Room;",
          "304:         client.resendEvent(dummyEvent, mockRoom);",
          "306:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "307:     });",
          "309:     it(\"splits many messages into multiple HTTP requests\", async function() {",
          "310:         const batch: ToDeviceBatch = {",
          "311:             eventType: \"org.example.foo\",",
          "312:             batch: [],",
          "313:         };",
          "315:         for (let i = 0; i <= 20; ++i) {",
          "316:             batch.batch.push({",
          "317:                 userId: `@user${i}:example.org`,",
          "318:                 deviceId: FAKE_DEVICE_ID,",
          "319:                 payload: FAKE_PAYLOAD,",
          "320:             });",
          "321:         }",
          "323:         httpBackend.when(",
          "324:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "325:         ).check((request) => {",
          "326:             expect(Object.keys(request.data.messages).length).toEqual(20);",
          "327:         }).respond(200, {});",
          "329:         httpBackend.when(",
          "330:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "331:         ).check((request) => {",
          "332:             expect(Object.keys(request.data.messages).length).toEqual(1);",
          "333:         }).respond(200, {});",
          "335:         await client.queueToDevice(batch);",
          "336:         await httpBackend.flushAllExpected();",
          "337:     });",
          "338: });",
          "",
          "---------------"
        ],
        "spec/unit/webrtc/call.spec.ts||spec/unit/webrtc/call.spec.ts": [
          "File: spec/unit/webrtc/call.spec.ts -> spec/unit/webrtc/call.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:         }).track.id).toBe(\"video_track\");",
          "416:     });",
          "483:     it(\"should handle SDPStreamMetadata changes\", async () => {",
          "484:         await startVoiceCall(client, call);",
          "",
          "[Removed Lines]",
          "418:     describe(\"should handle stream replacement\", () => {",
          "419:         it(\"with both purpose and id\", async () => {",
          "420:             await startVoiceCall(client, call);",
          "422:             call.updateRemoteSDPStreamMetadata({",
          "423:                 \"remote_stream1\": {",
          "424:                     purpose: SDPStreamMetadataPurpose.Usermedia,",
          "425:                 },",
          "426:             });",
          "427:             call.pushRemoteFeed(new MockMediaStream(\"remote_stream1\", []));",
          "428:             const feed = call.getFeeds().find((feed) => feed.stream.id === \"remote_stream1\");",
          "430:             call.updateRemoteSDPStreamMetadata({",
          "431:                 \"remote_stream2\": {",
          "432:                     purpose: SDPStreamMetadataPurpose.Usermedia,",
          "433:                 },",
          "434:             });",
          "435:             call.pushRemoteFeed(new MockMediaStream(\"remote_stream2\", []));",
          "437:             expect(feed?.stream?.id).toBe(\"remote_stream2\");",
          "438:         });",
          "440:         it(\"with just purpose\", async () => {",
          "441:             await startVoiceCall(client, call);",
          "443:             call.updateRemoteSDPStreamMetadata({",
          "444:                 \"remote_stream1\": {",
          "445:                     purpose: SDPStreamMetadataPurpose.Usermedia,",
          "446:                 },",
          "447:             });",
          "448:             call.pushRemoteFeed(new MockMediaStream(\"remote_stream1\", []));",
          "449:             const feed = call.getFeeds().find((feed) => feed.stream.id === \"remote_stream1\");",
          "451:             call.updateRemoteSDPStreamMetadata({",
          "452:                 \"remote_stream2\": {",
          "453:                     purpose: SDPStreamMetadataPurpose.Usermedia,",
          "454:                 },",
          "455:             });",
          "456:             call.pushRemoteFeed(new MockMediaStream(\"remote_stream2\", []));",
          "458:             expect(feed?.stream?.id).toBe(\"remote_stream2\");",
          "459:         });",
          "461:         it(\"should not replace purpose is different\", async () => {",
          "462:             await startVoiceCall(client, call);",
          "464:             call.updateRemoteSDPStreamMetadata({",
          "465:                 \"remote_stream1\": {",
          "466:                     purpose: SDPStreamMetadataPurpose.Usermedia,",
          "467:                 },",
          "468:             });",
          "469:             call.pushRemoteFeed(new MockMediaStream(\"remote_stream1\", []));",
          "470:             const feed = call.getFeeds().find((feed) => feed.stream.id === \"remote_stream1\");",
          "472:             call.updateRemoteSDPStreamMetadata({",
          "473:                 \"remote_stream2\": {",
          "474:                     purpose: SDPStreamMetadataPurpose.Screenshare,",
          "475:                 },",
          "476:             });",
          "477:             call.pushRemoteFeed(new MockMediaStream(\"remote_stream2\", []));",
          "479:             expect(feed?.stream?.id).toBe(\"remote_stream1\");",
          "480:         });",
          "481:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "794:             expect(supportsMatrixCall()).toBe(false);",
          "795:         });",
          "796:     });",
          "797: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:     describe(\"ignoring streams with ids for which we already have a feed\", () => {",
          "734:         const STREAM_ID = \"stream_id\";",
          "735:         const FEEDS_CHANGED_CALLBACK = jest.fn();",
          "737:         beforeEach(async () => {",
          "738:             await startVoiceCall(client, call);",
          "739:             call.on(CallEvent.FeedsChanged, FEEDS_CHANGED_CALLBACK);",
          "740:             jest.spyOn(call, \"pushLocalFeed\");",
          "741:         });",
          "743:         afterEach(() => {",
          "744:             FEEDS_CHANGED_CALLBACK.mockReset();",
          "745:         });",
          "747:         it(\"should ignore stream passed to pushRemoteFeed()\", async () => {",
          "748:             await call.onAnswerReceived({",
          "749:                 getContent: () => {",
          "750:                     return {",
          "751:                         version: 1,",
          "752:                         call_id: call.callId,",
          "753:                         party_id: 'party_id',",
          "754:                         answer: {",
          "755:                             sdp: DUMMY_SDP,",
          "756:                         },",
          "757:                         [SDPStreamMetadataKey]: {",
          "758:                             [STREAM_ID]: {",
          "759:                                 purpose: SDPStreamMetadataPurpose.Usermedia,",
          "760:                             },",
          "761:                         },",
          "762:                     };",
          "763:                 },",
          "764:                 getSender: () => \"@test:foo\",",
          "765:             });",
          "767:             call.pushRemoteFeed(new MockMediaStream(STREAM_ID));",
          "768:             call.pushRemoteFeed(new MockMediaStream(STREAM_ID));",
          "770:             expect(call.getRemoteFeeds().length).toBe(1);",
          "771:             expect(FEEDS_CHANGED_CALLBACK).toHaveBeenCalledTimes(1);",
          "772:         });",
          "774:         it(\"should ignore stream passed to pushRemoteFeedWithoutMetadata()\", async () => {",
          "775:             call.pushRemoteFeedWithoutMetadata(new MockMediaStream(STREAM_ID));",
          "776:             call.pushRemoteFeedWithoutMetadata(new MockMediaStream(STREAM_ID));",
          "778:             expect(call.getRemoteFeeds().length).toBe(1);",
          "779:             expect(FEEDS_CHANGED_CALLBACK).toHaveBeenCalledTimes(1);",
          "780:         });",
          "782:         it(\"should ignore stream passed to pushNewLocalFeed()\", async () => {",
          "783:             call.pushNewLocalFeed(new MockMediaStream(STREAM_ID), SDPStreamMetadataPurpose.Screenshare);",
          "784:             call.pushNewLocalFeed(new MockMediaStream(STREAM_ID), SDPStreamMetadataPurpose.Screenshare);",
          "787:             expect(call.getLocalFeeds().length).toBe(2);",
          "788:             expect(FEEDS_CHANGED_CALLBACK).toHaveBeenCalledTimes(1);",
          "789:             expect(call.pushLocalFeed).toHaveBeenCalled();",
          "790:         });",
          "791:     });",
          "",
          "---------------"
        ],
        "spec/unit/webrtc/callFeed.spec.ts||spec/unit/webrtc/callFeed.spec.ts": [
          "File: spec/unit/webrtc/callFeed.spec.ts -> spec/unit/webrtc/callFeed.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { SDPStreamMetadataPurpose } from \"../../../src/webrtc/callEventTypes\";",
          "20: import { TestClient } from \"../../TestClient\";",
          "22: describe(\"CallFeed\", () => {",
          "25:     let client;",
          "27:     beforeEach(() => {",
          "",
          "[Removed Lines]",
          "18: import { CallFeed, CallFeedEvent } from \"../../../src/webrtc/callFeed\";",
          "19: import { MockMediaStream, MockMediaStreamTrack } from \"../../test-utils/webrtc\";",
          "23:     const roomId = \"room_id\";",
          "",
          "[Added Lines]",
          "18: import { CallFeed } from \"../../../src/webrtc/callFeed\";",
          "20: import { MockMediaStream, MockMediaStreamTrack } from \"../../test-utils/webrtc\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         client.stop();",
          "33:     });",
          "47:         });",
          "60:     });",
          "61: });",
          "",
          "[Removed Lines]",
          "35:     it(\"should handle stream replacement\", () => {",
          "36:         const feedNewStreamCallback = jest.fn();",
          "37:         const feed = new CallFeed({",
          "38:             client,",
          "39:             roomId,",
          "40:             userId: \"user1\",",
          "42:             stream: new MockMediaStream(\"stream1\"),",
          "43:             id: \"id\",",
          "44:             purpose: SDPStreamMetadataPurpose.Usermedia,",
          "45:             audioMuted: false,",
          "46:             videoMuted: false,",
          "48:         feed.on(CallFeedEvent.NewStream, feedNewStreamCallback);",
          "50:         const replacementStream = new MockMediaStream(\"stream2\");",
          "52:         feed.setNewStream(replacementStream);",
          "53:         expect(feedNewStreamCallback).toHaveBeenCalledWith(replacementStream);",
          "54:         expect(feed.stream).toBe(replacementStream);",
          "56:         feedNewStreamCallback.mockReset();",
          "58:         replacementStream.addTrack(new MockMediaStreamTrack(\"track_id\", \"audio\"));",
          "59:         expect(feedNewStreamCallback).toHaveBeenCalledWith(replacementStream);",
          "",
          "[Added Lines]",
          "33:     describe(\"muting\", () => {",
          "34:         let feed: CallFeed;",
          "36:         beforeEach(() => {",
          "37:             feed = new CallFeed({",
          "38:                 client,",
          "39:                 roomId: \"room1\",",
          "40:                 userId: \"user1\",",
          "42:                 stream: new MockMediaStream(\"stream1\"),",
          "43:                 purpose: SDPStreamMetadataPurpose.Usermedia,",
          "44:                 audioMuted: false,",
          "45:                 videoMuted: false,",
          "46:             });",
          "47:         });",
          "49:         describe(\"muting by default\", () => {",
          "50:             it(\"should mute audio by default\", () => {",
          "51:                 expect(feed.isAudioMuted()).toBeTruthy();",
          "52:             });",
          "54:             it(\"should mute video by default\", () => {",
          "55:                 expect(feed.isVideoMuted()).toBeTruthy();",
          "56:             });",
          "59:         describe(\"muting after adding a track\", () => {",
          "60:             it(\"should un-mute audio\", () => {",
          "62:                 feed.stream.addTrack(new MockMediaStreamTrack(\"track\", \"audio\", true));",
          "63:                 expect(feed.isAudioMuted()).toBeFalsy();",
          "64:             });",
          "66:             it(\"should un-mute video\", () => {",
          "68:                 feed.stream.addTrack(new MockMediaStreamTrack(\"track\", \"video\", true));",
          "69:                 expect(feed.isVideoMuted()).toBeFalsy();",
          "70:             });",
          "71:         });",
          "73:         describe(\"muting after calling setAudioVideoMuted()\", () => {",
          "74:             it(\"should mute audio by default \", () => {",
          "76:                 feed.stream.addTrack(new MockMediaStreamTrack(\"track\", \"audio\", true));",
          "77:                 feed.setAudioVideoMuted(true, false);",
          "78:                 expect(feed.isAudioMuted()).toBeTruthy();",
          "79:             });",
          "81:             it(\"should mute video by default\", () => {",
          "83:                 feed.stream.addTrack(new MockMediaStreamTrack(\"track\", \"video\", true));",
          "84:                 feed.setAudioVideoMuted(false, true);",
          "85:                 expect(feed.isVideoMuted()).toBeTruthy();",
          "86:             });",
          "87:         });",
          "",
          "---------------"
        ],
        "src/ToDeviceMessageQueue.ts||src/ToDeviceMessageQueue.ts": [
          "File: src/ToDeviceMessageQueue.ts -> src/ToDeviceMessageQueue.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { logger } from \"./logger\";",
          "18: import { MatrixClient } from \"./matrix\";",
          "19: import { IndexedToDeviceBatch, ToDeviceBatch, ToDeviceBatchWithTxnId, ToDevicePayload } from \"./models/ToDeviceMessage\";",
          "20: import { MatrixScheduler } from \"./scheduler\";",
          "22: const MAX_BATCH_SIZE = 20;",
          "28: export class ToDeviceMessageQueue {",
          "29:     private sending = false;",
          "30:     private running = true;",
          "31:     private retryTimeout: number = null;",
          "32:     private retryAttempts = 0;",
          "34:     constructor(private client: MatrixClient) {",
          "35:     }",
          "37:     public start(): void {",
          "38:         this.running = true;",
          "39:         this.sendQueue();",
          "40:     }",
          "42:     public stop(): void {",
          "43:         this.running = false;",
          "44:         if (this.retryTimeout !== null) clearTimeout(this.retryTimeout);",
          "45:         this.retryTimeout = null;",
          "46:     }",
          "48:     public async queueBatch(batch: ToDeviceBatch): Promise<void> {",
          "49:         const batches: ToDeviceBatchWithTxnId[] = [];",
          "50:         for (let i = 0; i < batch.batch.length; i += MAX_BATCH_SIZE) {",
          "51:             batches.push({",
          "52:                 eventType: batch.eventType,",
          "53:                 batch: batch.batch.slice(i, i + MAX_BATCH_SIZE),",
          "54:                 txnId: this.client.makeTxnId(),",
          "55:             });",
          "56:         }",
          "58:         await this.client.store.saveToDeviceBatches(batches);",
          "59:         this.sendQueue();",
          "60:     }",
          "62:     public sendQueue = async (): Promise<void> => {",
          "63:         if (this.retryTimeout !== null) clearTimeout(this.retryTimeout);",
          "64:         this.retryTimeout = null;",
          "66:         if (this.sending || !this.running) return;",
          "68:         logger.debug(\"Attempting to send queued to-device messages\");",
          "70:         this.sending = true;",
          "71:         let headBatch;",
          "72:         try {",
          "73:             while (this.running) {",
          "74:                 headBatch = await this.client.store.getOldestToDeviceBatch();",
          "75:                 if (headBatch === null) break;",
          "76:                 await this.sendBatch(headBatch);",
          "77:                 await this.client.store.removeToDeviceBatch(headBatch.id);",
          "78:                 this.retryAttempts = 0;",
          "79:             }",
          "82:             if (!this.running) return;",
          "84:             logger.debug(\"All queued to-device messages sent\");",
          "85:         } catch (e) {",
          "86:             ++this.retryAttempts;",
          "89:             const retryDelay = MatrixScheduler.RETRY_BACKOFF_RATELIMIT(null, this.retryAttempts, e);",
          "90:             if (retryDelay === -1) {",
          "93:                 if (Math.floor(e.httpStatus / 100) === 4) {",
          "94:                     logger.error(\"Fatal error when sending to-device message - dropping to-device batch!\", e);",
          "95:                     await this.client.store.removeToDeviceBatch(headBatch.id);",
          "96:                 } else {",
          "97:                     logger.info(\"Automatic retry limit reached for to-device messages.\");",
          "98:                 }",
          "99:                 return;",
          "100:             }",
          "102:             logger.info(`Failed to send batch of to-device messages. Will retry in ${retryDelay}ms`, e);",
          "103:             this.retryTimeout = setTimeout(this.sendQueue, retryDelay);",
          "104:         } finally {",
          "105:             this.sending = false;",
          "106:         }",
          "107:     };",
          "112:     private async sendBatch(batch: IndexedToDeviceBatch): Promise<void> {",
          "113:         const contentMap: Record<string, Record<string, ToDevicePayload>> = {};",
          "114:         for (const item of batch.batch) {",
          "115:             if (!contentMap[item.userId]) {",
          "116:                 contentMap[item.userId] = {};",
          "117:             }",
          "118:             contentMap[item.userId][item.deviceId] = item.payload;",
          "119:         }",
          "121:         logger.info(`Sending batch of ${batch.batch.length} to-device messages with ID ${batch.id}`);",
          "123:         await this.client.sendToDevice(batch.eventType, contentMap, batch.txnId);",
          "124:     }",
          "125: }",
          "",
          "---------------"
        ],
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import { Direction, EventTimeline } from \"./models/event-timeline\";",
          "42: import { IActionsObject, PushProcessor } from \"./pushprocessor\";",
          "43: import { AutoDiscovery, AutoDiscoveryAction } from \"./autodiscovery\";",
          "44: import * as olmlib from \"./crypto/olmlib\";",
          "45: import { decodeBase64, encodeBase64 } from \"./crypto/olmlib\";",
          "47: import { TypedReEmitter } from './ReEmitter';",
          "48: import { IRoomEncryption, RoomList } from './crypto/RoomList';",
          "49: import { logger } from './logger';",
          "",
          "[Removed Lines]",
          "46: import { IExportedDevice as IOlmDevice } from \"./crypto/OlmDevice\";",
          "",
          "[Added Lines]",
          "44: import { IEncryptAndSendToDevicesResult } from \"./crypto\";",
          "47: import { IExportedDevice as IExportedOlmDevice } from \"./crypto/OlmDevice\";",
          "48: import { IOlmDevice } from \"./crypto/algorithms/megolm\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: import { SlidingSyncSdk } from \"./sliding-sync-sdk\";",
          "203: import { Thread, THREAD_RELATION_TYPE } from \"./models/thread\";",
          "204: import { MBeaconInfoEventContent, M_BEACON_INFO } from \"./@types/beacon\";",
          "206: export type Store = IStore;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: import { ToDeviceMessageQueue } from \"./ToDeviceMessageQueue\";",
          "208: import { ToDeviceBatch } from \"./models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214: const TURN_CHECK_INTERVAL = 10 * 60 * 1000; // poll for turn credentials every 10 minutes",
          "216: interface IExportedDevice {",
          "218:     userId: string;",
          "219:     deviceId: string;",
          "220: }",
          "",
          "[Removed Lines]",
          "217:     olmDevice: IOlmDevice;",
          "",
          "[Added Lines]",
          "221:     olmDevice: IExportedOlmDevice;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "955:     protected turnServers: ITurnServer[] = [];",
          "956:     protected turnServersExpiry = 0;",
          "957:     protected checkTurnServersIntervalID: ReturnType<typeof setInterval>;",
          "959:     protected txnCtr = 0;",
          "960:     protected mediaHandler = new MediaHandler(this);",
          "961:     protected sessionId: string;",
          "962:     protected pendingEventEncryption = new Map<string, Promise<void>>();",
          "964:     private useE2eForGroupCall = true;",
          "966:     constructor(opts: IMatrixClientCreateOpts) {",
          "967:         super();",
          "",
          "[Removed Lines]",
          "958:     protected exportedOlmDeviceToImport: IOlmDevice;",
          "",
          "[Added Lines]",
          "962:     protected exportedOlmDeviceToImport: IExportedOlmDevice;",
          "969:     private toDeviceMessageQueue: ToDeviceMessageQueue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1062:         this.roomList = new RoomList(this.cryptoStore);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1069:         this.toDeviceMessageQueue = new ToDeviceMessageQueue(this);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1224:             }, 1000 * this.clientOpts.clientWellKnownPollPeriod);",
          "1225:             this.fetchClientWellKnown();",
          "1226:         }",
          "1227:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1235:         this.toDeviceMessageQueue.start();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1251:         if (this.clientWellKnownIntervalID !== undefined) {",
          "1252:             global.clearInterval(this.clientWellKnownIntervalID);",
          "1253:         }",
          "1254:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1264:         this.toDeviceMessageQueue.stop();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1657:     public retryImmediately(): boolean {",
          "1658:         return this.syncApi.retryImmediately();",
          "1659:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:         this.toDeviceMessageQueue.sendQueue();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2635:         return this.roomList.isRoomEncrypted(roomId);",
          "2636:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2667:     public encryptAndSendToDevices(",
          "2668:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "2669:         payload: object,",
          "2670:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "2671:         if (!this.crypto) {",
          "2672:             throw new Error(\"End-to-End encryption disabled\");",
          "2673:         }",
          "2674:         return this.crypto.encryptAndSendToDevices(userDeviceInfoArr, payload);",
          "2675:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3601:     public resendEvent(event: MatrixEvent, room: Room): Promise<ISendEventResponse> {",
          "3602:         this.updatePendingEventStatus(room, event, EventStatus.SENDING);",
          "3603:         return this.encryptAndSendEvent(room, event);",
          "3604:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3642:         this.toDeviceMessageQueue.sendQueue();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8818:         return this.http.authedRequest(undefined, Method.Put, path, undefined, body);",
          "8819:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8873:     public queueToDevice(batch: ToDeviceBatch): Promise<void> {",
          "8874:         return this.toDeviceMessageQueue.queueBatch(batch);",
          "8875:     }",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:         return this.crypto.encryptAndSendToDevices(",
          "607:             userDeviceMap,",
          "608:             payload,",
          "620:             }",
          "621:         }).catch((error) => {",
          "622:             logger.error(\"failed to encryptAndSendToDevices\", error);",
          "",
          "[Removed Lines]",
          "609:         ).then(({ contentMap, deviceInfoByUserIdAndDeviceId }) => {",
          "611:             for (const userId of Object.keys(contentMap)) {",
          "612:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "613:                     session.markSharedWithDevice(",
          "614:                         userId,",
          "615:                         deviceId,",
          "616:                         deviceInfoByUserIdAndDeviceId.get(userId).get(deviceId).getIdentityKey(),",
          "617:                         chainIndex,",
          "618:                     );",
          "619:                 }",
          "",
          "[Added Lines]",
          "609:         ).then(({ toDeviceBatch, deviceInfoByUserIdAndDeviceId }) => {",
          "611:             for (const msg of toDeviceBatch.batch) {",
          "612:                 session.markSharedWithDevice(",
          "613:                     msg.userId,",
          "614:                     msg.deviceId,",
          "615:                     deviceInfoByUserIdAndDeviceId.get(msg.userId).get(msg.deviceId).getIdentityKey(),",
          "616:                     chainIndex,",
          "617:                 );",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import anotherjson from \"another-json\";",
          "26: import { TypedReEmitter } from '../ReEmitter';",
          "27: import { logger } from '../logger';",
          "28: import { IExportedDevice, OlmDevice } from \"./OlmDevice\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import { EventType } from \"../@types/event\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: import { Room, RoomEvent } from \"../models/room\";",
          "70: import { RoomMember, RoomMemberEvent } from \"../models/room-member\";",
          "71: import { EventStatus, IClearEvent, IEvent, MatrixEvent, MatrixEventEvent } from \"../models/event\";",
          "72: import {",
          "73:     ClientEvent,",
          "74:     ICrossSigningKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: import { ToDeviceBatch } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: }",
          "215:     deviceInfoByUserIdAndDeviceId: Map<string, Map<string, DeviceInfo>>;",
          "216: }",
          "",
          "[Removed Lines]",
          "213: interface IEncryptAndSendToDevicesResult {",
          "214:     contentMap: Record<string, Record<string, IEncryptedContent>>;",
          "",
          "[Added Lines]",
          "215: export interface IEncryptAndSendToDevicesResult {",
          "216:     toDeviceBatch: ToDeviceBatch;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3115:     }",
          "3133:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "3134:         payload: object,",
          "3135:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "3137:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "3166:                     this.olmDevice,",
          "3167:                     this.baseApis,",
          "3168:                     { [userId]: [deviceInfo] },",
          "3199:                 }",
          "3206:             }",
          "3218:     }",
          "3220:     private onMembership = (event: MatrixEvent, member: RoomMember, oldMembership?: string) => {",
          "",
          "[Removed Lines]",
          "3132:     public encryptAndSendToDevices(",
          "3136:         const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "3139:         const promises: Promise<unknown>[] = [];",
          "3140:         for (const { userId, deviceInfo } of userDeviceInfoArr) {",
          "3141:             const deviceId = deviceInfo.deviceId;",
          "3142:             const encryptedContent: IEncryptedContent = {",
          "3143:                 algorithm: olmlib.OLM_ALGORITHM,",
          "3144:                 sender_key: this.olmDevice.deviceCurve25519Key,",
          "3145:                 ciphertext: {},",
          "3146:             };",
          "3149:             let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "3151:             if (userIdDeviceInfo === undefined) {",
          "3152:                 userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "3153:                 deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "3154:             }",
          "3157:             userIdDeviceInfo.set(deviceId, deviceInfo);",
          "3159:             if (!contentMap[userId]) {",
          "3160:                 contentMap[userId] = {};",
          "3161:             }",
          "3162:             contentMap[userId][deviceId] = encryptedContent;",
          "3164:             promises.push(",
          "3165:                 olmlib.ensureOlmSessionsForDevices(",
          "3169:                 ).then(() =>",
          "3170:                     olmlib.encryptMessageForDevice(",
          "3171:                         encryptedContent.ciphertext,",
          "3172:                         this.userId,",
          "3173:                         this.deviceId,",
          "3174:                         this.olmDevice,",
          "3175:                         userId,",
          "3176:                         deviceInfo,",
          "3177:                         payload,",
          "3178:                     ),",
          "3179:                 ),",
          "3180:             );",
          "3181:         }",
          "3183:         return Promise.all(promises).then(() => {",
          "3188:             for (const userId of Object.keys(contentMap)) {",
          "3189:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "3190:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "3191:                         logger.log(`No ciphertext for device ${userId}:${deviceId}: pruning`);",
          "3192:                         delete contentMap[userId][deviceId];",
          "3193:                     }",
          "3194:                 }",
          "3196:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "3197:                     logger.log(`Pruned all devices for user ${userId}`);",
          "3198:                     delete contentMap[userId];",
          "3200:             }",
          "3203:             if (Object.keys(contentMap).length === 0) {",
          "3204:                 logger.log(\"No users left to send to: aborting\");",
          "3205:                 return;",
          "3208:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(",
          "3209:                 (response) => ({ contentMap, deviceInfoByUserIdAndDeviceId }),",
          "3210:             ).catch(error => {",
          "3211:                 logger.error(\"sendToDevice failed\", error);",
          "3212:                 throw error;",
          "3213:             });",
          "3214:         }).catch(error => {",
          "3215:             logger.error(\"encryptAndSendToDevices promises failed\", error);",
          "3216:             throw error;",
          "3217:         });",
          "",
          "[Added Lines]",
          "3129:     public async encryptAndSendToDevices(",
          "3133:         const toDeviceBatch: ToDeviceBatch = {",
          "3134:             eventType: EventType.RoomMessageEncrypted,",
          "3135:             batch: [],",
          "3136:         };",
          "3139:         try {",
          "3140:             await Promise.all(userDeviceInfoArr.map(async ({ userId, deviceInfo }) => {",
          "3141:                 const deviceId = deviceInfo.deviceId;",
          "3142:                 const encryptedContent: IEncryptedContent = {",
          "3143:                     algorithm: olmlib.OLM_ALGORITHM,",
          "3144:                     sender_key: this.olmDevice.deviceCurve25519Key,",
          "3145:                     ciphertext: {},",
          "3146:                 };",
          "3149:                 let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "3151:                 if (userIdDeviceInfo === undefined) {",
          "3152:                     userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "3153:                     deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "3154:                 }",
          "3157:                 userIdDeviceInfo.set(deviceId, deviceInfo);",
          "3159:                 toDeviceBatch.batch.push({",
          "3160:                     userId,",
          "3161:                     deviceId,",
          "3162:                     payload: encryptedContent,",
          "3163:                 });",
          "3165:                 await olmlib.ensureOlmSessionsForDevices(",
          "3169:                 );",
          "3170:                 await olmlib.encryptMessageForDevice(",
          "3171:                     encryptedContent.ciphertext,",
          "3172:                     this.userId,",
          "3173:                     this.deviceId,",
          "3174:                     this.olmDevice,",
          "3175:                     userId,",
          "3176:                     deviceInfo,",
          "3177:                     payload,",
          "3178:                 );",
          "3179:             }));",
          "3185:             toDeviceBatch.batch = toDeviceBatch.batch.filter(msg => {",
          "3186:                 if (Object.keys(msg.payload.ciphertext).length > 0) {",
          "3187:                     return true;",
          "3188:                 } else {",
          "3189:                     logger.log(`No ciphertext for device ${msg.userId}:${msg.deviceId}: pruning`);",
          "3190:                     return false;",
          "3192:             });",
          "3194:             try {",
          "3195:                 await this.baseApis.queueToDevice(toDeviceBatch);",
          "3196:                 return { toDeviceBatch, deviceInfoByUserIdAndDeviceId };",
          "3197:             } catch (e) {",
          "3198:                 logger.error(\"sendToDevice failed\", e);",
          "3199:                 throw e;",
          "3201:         } catch (e) {",
          "3202:             logger.error(\"encryptAndSendToDevices promises failed\", e);",
          "3203:             throw e;",
          "3204:         }",
          "",
          "---------------"
        ],
        "src/models/ToDeviceMessage.ts||src/models/ToDeviceMessage.ts": [
          "File: src/models/ToDeviceMessage.ts -> src/models/ToDeviceMessage.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: export type ToDevicePayload = Record<string, any>;",
          "19: export interface ToDeviceMessage {",
          "20:     userId: string;",
          "21:     deviceId: string;",
          "22:     payload: ToDevicePayload;",
          "23: }",
          "25: export interface ToDeviceBatch {",
          "26:     eventType: string;",
          "27:     batch: ToDeviceMessage[];",
          "28: }",
          "31: export interface ToDeviceBatchWithTxnId extends ToDeviceBatch {",
          "32:     txnId: string;",
          "33: }",
          "36: export interface IndexedToDeviceBatch extends ToDeviceBatchWithTxnId {",
          "37:     id: number;",
          "38: }",
          "",
          "---------------"
        ],
        "src/models/room.ts||src/models/room.ts": [
          "File: src/models/room.ts -> src/models/room.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:                 },",
          "73:             },",
          "74:         },",
          "76:         room_id: event.getRoomId(),",
          "77:     });",
          "78: }",
          "",
          "[Removed Lines]",
          "75:         type: \"m.receipt\",",
          "",
          "[Added Lines]",
          "75:         type: EventType.Receipt,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424:     public addEphemeralEvents(events: MatrixEvent[]): void {",
          "2425:         for (const event of events) {",
          "2427:                 this.currentState.setTypingEvent(event);",
          "2429:                 this.addReceipt(event);",
          "2430:             } // else ignore - life is too short for us to care about these events",
          "2431:         }",
          "",
          "[Removed Lines]",
          "2426:             if (event.getType() === 'm.typing') {",
          "2428:             } else if (event.getType() === 'm.receipt') {",
          "",
          "[Added Lines]",
          "2426:             if (event.getType() === EventType.Typing) {",
          "2428:             } else if (event.getType() === EventType.Receipt) {",
          "",
          "---------------"
        ],
        "src/scheduler.ts||src/scheduler.ts": [
          "File: src/scheduler.ts -> src/scheduler.ts"
        ],
        "src/sliding-sync.ts||src/sliding-sync.ts": [
          "File: src/sliding-sync.ts -> src/sliding-sync.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     is_invite?: boolean;",
          "45:     is_tombstoned?: boolean;",
          "46:     room_name_like?: string;",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     room_types?: string[];",
          "48:     not_room_types?: string[];",
          "49:     spaces?: string[];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:                         listIndex,",
          "603:                         op.range[0],",
          "604:                         op.range[1],",
          "606:                         \";\",",
          "607:                     );",
          "608:                     break;",
          "",
          "[Removed Lines]",
          "605:                         op.room_ids.join(\" \"),",
          "",
          "[Added Lines]",
          "608:                         (op.room_ids || []).join(\" \"),",
          "",
          "---------------"
        ],
        "src/store/index.ts||src/store/index.ts": [
          "File: src/store/index.ts -> src/store/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { IMinimalEvent, IRooms, ISyncResponse } from \"../sync-accumulator\";",
          "24: import { IStartClientOpts } from \"../client\";",
          "25: import { IStateEventWithRoomId } from \"../@types/search\";",
          "27: export interface ISavedSync {",
          "28:     nextBatch: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:     getPendingEvents(roomId: string): Promise<Partial<IEvent>[]>;",
          "224:     setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void>;",
          "225: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:      saveToDeviceBatches(batch: ToDeviceBatchWithTxnId[]): Promise<void>;",
          "250:      getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch>;",
          "255:      removeToDeviceBatch(id: number): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-backend.ts||src/store/indexeddb-backend.ts": [
          "File: src/store/indexeddb-backend.ts -> src/store/indexeddb-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { ISavedSync } from \"./index\";",
          "18: import { IEvent, IStartClientOpts, IStateEventWithRoomId, ISyncResponse } from \"..\";",
          "20: export interface IIndexedDBBackend {",
          "21:     connect(): Promise<void>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     getUserPresenceEvents(): Promise<UserTuple[]>;",
          "32:     getClientOptions(): Promise<IStartClientOpts>;",
          "33:     storeClientOptions(options: IStartClientOpts): Promise<void>;",
          "34: }",
          "36: export type UserTuple = [userId: string, presenceEvent: Partial<IEvent>];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void>;",
          "36:     getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch>;",
          "37:     removeToDeviceBatch(id: number): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts": [
          "File: src/store/indexeddb-local-backend.ts -> src/store/indexeddb-local-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { IStartClientOpts, IStateEventWithRoomId } from \"..\";",
          "22: import { ISavedSync } from \"./index\";",
          "23: import { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";",
          "27: function createDatabase(db: IDBDatabase): void {",
          "",
          "[Removed Lines]",
          "25: const VERSION = 3;",
          "",
          "[Added Lines]",
          "24: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "26: const VERSION = 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         { keyPath: [\"clobber\"] });",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: function upgradeSchemaV4(db: IDBDatabase): void {",
          "54:     db.createObjectStore(\"to_device_queue\", { autoIncrement: true });",
          "55: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     });",
          "113: }",
          "116:     return reqAsEventPromise(req).then((event) => req.result);",
          "117: }",
          "",
          "[Removed Lines]",
          "115: function reqAsCursorPromise(req: IDBRequest<IDBCursor | null>): Promise<IDBCursor> {",
          "",
          "[Added Lines]",
          "120: function reqAsCursorPromise<T>(req: IDBRequest<T>): Promise<T> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:             if (oldVersion < 3) {",
          "178:                 upgradeSchemaV3(db);",
          "179:             }",
          "181:         };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:             if (oldVersion < 4) {",
          "186:                 upgradeSchemaV4(db);",
          "187:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:         }); // put == UPSERT",
          "562:         await txnAsPromise(txn);",
          "563:     }",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:     public async saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "574:         const txn = this.db.transaction([\"to_device_queue\"], \"readwrite\");",
          "575:         const store = txn.objectStore(\"to_device_queue\");",
          "576:         for (const batch of batches) {",
          "577:             store.add(batch);",
          "578:         }",
          "579:         await txnAsPromise(txn);",
          "580:     }",
          "582:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "583:         const txn = this.db.transaction([\"to_device_queue\"], \"readonly\");",
          "584:         const store = txn.objectStore(\"to_device_queue\");",
          "585:         const cursor = await reqAsCursorPromise(store.openCursor());",
          "586:         if (!cursor) return null;",
          "588:         const resultBatch = cursor.value as ToDeviceBatchWithTxnId;",
          "590:         return {",
          "591:             id: cursor.key as number,",
          "592:             txnId: resultBatch.txnId,",
          "593:             eventType: resultBatch.eventType,",
          "594:             batch: resultBatch.batch,",
          "595:         };",
          "596:     }",
          "598:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "599:         const txn = this.db.transaction([\"to_device_queue\"], \"readwrite\");",
          "600:         const store = txn.objectStore(\"to_device_queue\");",
          "601:         store.delete(id);",
          "602:         await txnAsPromise(txn);",
          "603:     }",
          "",
          "---------------"
        ],
        "src/store/indexeddb-remote-backend.ts||src/store/indexeddb-remote-backend.ts": [
          "File: src/store/indexeddb-remote-backend.ts -> src/store/indexeddb-remote-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import { IStartClientOpts } from \"../client\";",
          "21: import { IStateEventWithRoomId, ISyncResponse } from \"..\";",
          "22: import { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";",
          "24: export class RemoteIndexedDBStoreBackend implements IIndexedDBBackend {",
          "25:     private worker: Worker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         return this.doCmd('getUserPresenceEvents');",
          "134:     }",
          "136:     private ensureStarted(): Promise<void> {",
          "137:         if (this.startPromise === null) {",
          "138:             this.worker = this.workerFactory();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     public async saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "138:         return this.doCmd('saveToDeviceBatches', [batches]);",
          "139:     }",
          "141:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch> {",
          "142:         return this.doCmd('getOldestToDeviceBatch');",
          "143:     }",
          "145:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "146:         return this.doCmd('removeToDeviceBatch', [id]);",
          "147:     }",
          "",
          "---------------"
        ],
        "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts": [
          "File: src/store/indexeddb-store-worker.ts -> src/store/indexeddb-store-worker.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:             case 'storeClientOptions':",
          "104:                 prom = this.backend.storeClientOptions(msg.args[0]);",
          "105:                 break;",
          "106:         }",
          "108:         if (prom === undefined) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:             case 'saveToDeviceBatches':",
          "107:                 prom = this.backend.saveToDeviceBatches(msg.args[0]);",
          "108:                 break;",
          "109:             case 'getOldestToDeviceBatch':",
          "110:                 prom = this.backend.getOldestToDeviceBatch();",
          "111:                 break;",
          "112:             case 'removeToDeviceBatch':",
          "113:                 prom = this.backend.removeToDeviceBatch(msg.args[0]);",
          "114:                 break;",
          "",
          "---------------"
        ],
        "src/store/indexeddb.ts||src/store/indexeddb.ts": [
          "File: src/store/indexeddb.ts -> src/store/indexeddb.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { ISyncResponse } from \"../sync-accumulator\";",
          "28: import { TypedEventEmitter } from \"../models/typed-event-emitter\";",
          "29: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:             this.localStorage.removeItem(pendingEventsKey(roomId));",
          "352:         }",
          "353:     }",
          "354: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:     public saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "357:         return this.backend.saveToDeviceBatches(batches);",
          "358:     }",
          "360:     public getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch> {",
          "361:         return this.backend.getOldestToDeviceBatch();",
          "362:     }",
          "364:     public removeToDeviceBatch(id: number): Promise<void> {",
          "365:         return this.backend.removeToDeviceBatch(id);",
          "366:     }",
          "",
          "---------------"
        ],
        "src/store/memory.ts||src/store/memory.ts": [
          "File: src/store/memory.ts -> src/store/memory.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import { RoomSummary } from \"../models/room-summary\";",
          "31: import { ISyncResponse } from \"../sync-accumulator\";",
          "32: import { IStateEventWithRoomId } from \"../@types/search\";",
          "34: function isValidFilterId(filterId: string): boolean {",
          "35:     const isValidStr = typeof filterId === \"string\" &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     private oobMembers: Record<string, IStateEventWithRoomId[]> = {}; // roomId: [member events]",
          "65:     private pendingEvents: { [roomId: string]: Partial<IEvent>[] } = {};",
          "66:     private clientOptions = {};",
          "68:     constructor(opts: IOpts = {}) {",
          "69:         this.localStorage = opts.localStorage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     private pendingToDeviceBatches: IndexedToDeviceBatch[] = [];",
          "69:     private nextToDeviceBatchId = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:     public async setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "430:         this.pendingEvents[roomId] = events;",
          "431:     }",
          "432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:     public saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "437:         for (const batch of batches) {",
          "438:             this.pendingToDeviceBatches.push({",
          "439:                 id: this.nextToDeviceBatchId++,",
          "440:                 eventType: batch.eventType,",
          "441:                 txnId: batch.txnId,",
          "442:                 batch: batch.batch,",
          "443:             });",
          "444:         }",
          "445:         return Promise.resolve();",
          "446:     }",
          "448:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "449:         if (this.pendingToDeviceBatches.length === 0) return null;",
          "450:         return this.pendingToDeviceBatches[0];",
          "451:     }",
          "453:     public removeToDeviceBatch(id: number): Promise<void> {",
          "454:         this.pendingToDeviceBatches = this.pendingToDeviceBatches.filter(batch => batch.id !== id);",
          "455:         return Promise.resolve();",
          "456:     }",
          "",
          "---------------"
        ],
        "src/store/stub.ts||src/store/stub.ts": [
          "File: src/store/stub.ts -> src/store/stub.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import { RoomSummary } from \"../models/room-summary\";",
          "29: import { ISyncResponse } from \"../sync-accumulator\";",
          "30: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import { IndexedToDeviceBatch, ToDeviceBatch } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:     public setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "271:         return Promise.resolve();",
          "272:     }",
          "273: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     public async saveToDeviceBatches(batch: ToDeviceBatch[]): Promise<void> {",
          "276:         return Promise.resolve();",
          "277:     }",
          "279:     public getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "280:         return Promise.resolve(null);",
          "281:     }",
          "283:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "284:         return Promise.resolve();",
          "285:     }",
          "",
          "---------------"
        ],
        "src/webrtc/call.ts||src/webrtc/call.ts": [
          "File: src/webrtc/call.ts -> src/webrtc/call.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:             return;",
          "615:         }",
          "633:         }",
          "637:     }",
          "",
          "[Removed Lines]",
          "619:         const existingFeed = this.getRemoteFeeds().find((feed) => feed.purpose === purpose);",
          "620:         if (existingFeed) {",
          "621:             existingFeed.setNewStream(stream);",
          "622:         } else {",
          "623:             this.feeds.push(new CallFeed({",
          "624:                 client: this.client,",
          "625:                 roomId: this.roomId,",
          "626:                 userId,",
          "627:                 stream,",
          "628:                 purpose,",
          "629:                 audioMuted,",
          "630:                 videoMuted,",
          "631:             }));",
          "632:             this.emit(CallEvent.FeedsChanged, this.feeds);",
          "635:         logger.info(`Call ${this.callId} Pushed remote stream (id=\"${",
          "636:             stream.id}\", active=\"${stream.active}\", purpose=${purpose})`);",
          "",
          "[Added Lines]",
          "617:         if (this.getFeedByStreamId(stream.id)) {",
          "618:             logger.warn(`Ignoring stream with id ${stream.id} because we already have a feed for it`);",
          "619:             return;",
          "622:         this.feeds.push(new CallFeed({",
          "623:             client: this.client,",
          "624:             roomId: this.roomId,",
          "625:             userId,",
          "626:             stream,",
          "627:             purpose,",
          "628:             audioMuted,",
          "629:             videoMuted,",
          "630:         }));",
          "631:         this.emit(CallEvent.FeedsChanged, this.feeds);",
          "633:         logger.info(",
          "634:             `Call ${this.callId} pushed remote stream (id=\"${stream.id}\", ` +",
          "635:             `active=\"${stream.active}\", purpose=${purpose})`,",
          "636:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:             return;",
          "656:         }",
          "674:         }",
          "677:     }",
          "679:     private pushNewLocalFeed(stream: MediaStream, purpose: SDPStreamMetadataPurpose, addToPeerConnection = true): void {",
          "",
          "[Removed Lines]",
          "660:         const feed = this.getFeedByStreamId(stream.id);",
          "661:         if (feed) {",
          "662:             feed.setNewStream(stream);",
          "663:         } else {",
          "664:             this.feeds.push(new CallFeed({",
          "665:                 client: this.client,",
          "666:                 roomId: this.roomId,",
          "667:                 audioMuted: false,",
          "668:                 videoMuted: false,",
          "669:                 userId,",
          "670:                 stream,",
          "671:                 purpose,",
          "672:             }));",
          "673:             this.emit(CallEvent.FeedsChanged, this.feeds);",
          "676:         logger.info(`Call ${this.callId} Pushed remote stream (id=\"${stream.id}\", active=\"${stream.active}\")`);",
          "",
          "[Added Lines]",
          "658:         if (this.getFeedByStreamId(stream.id)) {",
          "659:             logger.warn(`Ignoring stream with id ${stream.id} because we already have a feed for it`);",
          "660:             return;",
          "663:         this.feeds.push(new CallFeed({",
          "664:             client: this.client,",
          "665:             roomId: this.roomId,",
          "666:             audioMuted: false,",
          "667:             videoMuted: false,",
          "668:             userId,",
          "669:             stream,",
          "670:             purpose,",
          "671:         }));",
          "672:         this.emit(CallEvent.FeedsChanged, this.feeds);",
          "674:         logger.info(`Call ${this.callId} pushed remote stream (id=\"${stream.id}\", active=\"${stream.active}\")`);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "685:         setTracksEnabled(stream.getAudioTracks(), true);",
          "686:         setTracksEnabled(stream.getVideoTracks(), true);",
          "706:         }",
          "707:     }",
          "",
          "[Removed Lines]",
          "689:         const existingFeed = this.getLocalFeeds().find((feed) => feed.purpose === purpose);",
          "690:         if (existingFeed) {",
          "691:             existingFeed.setNewStream(stream);",
          "692:         } else {",
          "693:             this.pushLocalFeed(",
          "694:                 new CallFeed({",
          "695:                     client: this.client,",
          "696:                     roomId: this.roomId,",
          "697:                     audioMuted: false,",
          "698:                     videoMuted: false,",
          "699:                     userId,",
          "700:                     stream,",
          "701:                     purpose,",
          "702:                 }),",
          "703:                 addToPeerConnection,",
          "704:             );",
          "705:             this.emit(CallEvent.FeedsChanged, this.feeds);",
          "",
          "[Added Lines]",
          "686:         if (this.getFeedByStreamId(stream.id)) {",
          "687:             logger.warn(`Ignoring stream with id ${stream.id} because we already have a feed for it`);",
          "688:             return;",
          "691:         this.pushLocalFeed(",
          "692:             new CallFeed({",
          "693:                 client: this.client,",
          "694:                 roomId: this.roomId,",
          "695:                 audioMuted: false,",
          "696:                 videoMuted: false,",
          "697:                 userId,",
          "698:                 stream,",
          "699:                 purpose,",
          "700:             }),",
          "701:             addToPeerConnection,",
          "702:         );",
          "",
          "---------------"
        ],
        "src/webrtc/callFeed.ts||src/webrtc/callFeed.ts": [
          "File: src/webrtc/callFeed.ts -> src/webrtc/callFeed.ts"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308: \"@matrix-org/olm@https://gitlab.matrix.org/api/v4/projects/27/packages/npm/@matrix-org/olm/-/@matrix-org/olm-3.2.12.tgz\":",
          "1309:   version \"3.2.12\"",
          "1311:   resolved \"https://gitlab.matrix.org/api/v4/projects/27/packages/npm/@matrix-org/olm/-/@matrix-org/olm-3.2.12.tgz#0bce3c86f9d36a4984d3c3e07df1c3fb4c679bd9\"",
          "1313: \"@nicolo-ribaudo/chokidar-2@2.1.8-no-fsevents.3\":",
          "",
          "[Removed Lines]",
          "1310:   uid \"0bce3c86f9d36a4984d3c3e07df1c3fb4c679bd9\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1438:     \"@octokit/openapi-types\" \"^12.10.0\"",
          "1440: \"@sinclair/typebox@^0.24.1\":",
          "1445: \"@sinonjs/commons@^1.7.0\":",
          "1446:   version \"1.8.3\"",
          "",
          "[Removed Lines]",
          "1441:   version \"0.24.20\"",
          "1442:   resolved \"https://registry.yarnpkg.com/@sinclair/typebox/-/typebox-0.24.20.tgz#11a657875de6008622d53f56e063a6347c51a6dd\"",
          "1443:   integrity sha512-kVaO5aEFZb33nPMTZBxiPEkY+slxiPtqC7QX8f9B3eGOMBvEfuMfxp9DSTTCsRJPumPKjrge4yagyssO4q6qzQ==",
          "",
          "[Added Lines]",
          "1440:   version \"0.24.26\"",
          "1441:   resolved \"https://registry.yarnpkg.com/@sinclair/typebox/-/typebox-0.24.26.tgz#84f9e8c1d93154e734a7947609a1dc7c7a81cc22\"",
          "1442:   integrity sha512-1ZVIyyS1NXDRVT8GjWD5jULjhDyM3IsIHef2VGUMdnWOlX2tkPjyEX/7K0TGSH2S8EaPhp1ylFdjSjUGQ+gecg==",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1581:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
          "1583: \"@types/node@*\":",
          "1588: \"@types/node@16\":",
          "1589:   version \"16.11.45\"",
          "",
          "[Removed Lines]",
          "1584:   version \"18.6.1\"",
          "1585:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-18.6.1.tgz#828e4785ccca13f44e2fb6852ae0ef11e3e20ba5\"",
          "1586:   integrity sha512-z+2vB6yDt1fNwKOeGbckpmirO+VBDuQqecXkgeIqDlaOtmKn6hPR/viQ8cxCfqLU4fTlvM3+YjM367TukWdxpg==",
          "",
          "[Added Lines]",
          "1583:   version \"18.6.3\"",
          "1584:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-18.6.3.tgz#4e4a95b6fe44014563ceb514b2598b3e623d1c98\"",
          "1585:   integrity sha512-6qKpDtoaYLM+5+AFChLhHermMQxc3TOEFIDzrZLPRGHPrLEwqFkkT5Kx3ju05g6X7uDPazz3jHbKPX0KzCjntg==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1610:   resolved \"https://registry.yarnpkg.com/@types/retry/-/retry-0.12.0.tgz#2b35eccfcee7d38cd72ad99232fbd58bffb3c84d\"",
          "1611:   integrity sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==",
          "1613: \"@types/stack-utils@^2.0.0\":",
          "1614:   version \"2.0.1\"",
          "1615:   resolved \"https://registry.yarnpkg.com/@types/stack-utils/-/stack-utils-2.0.1.tgz#20f18294f797f2209b5f65c8e3b5c8e8261d127c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1612: \"@types/sdp-transform@^2.4.5\":",
          "1613:   version \"2.4.5\"",
          "1614:   resolved \"https://registry.yarnpkg.com/@types/sdp-transform/-/sdp-transform-2.4.5.tgz#3167961e0a1a5265545e278627aa37c606003f53\"",
          "1615:   integrity sha512-GVO0gnmbyO3Oxm2HdPsYUNcyihZE3GyCY8ysMYHuQGfLhGZq89Nm4lSzULWTzZoyHtg+VO/IdrnxZHPnPSGnAg==",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4802:   resolved \"https://registry.yarnpkg.com/matrix-events-sdk/-/matrix-events-sdk-0.0.1-beta.7.tgz#5ffe45eba1f67cc8d7c2377736c728b322524934\"",
          "4803:   integrity sha512-9jl4wtWanUFSy2sr2lCjErN/oC8KTAtaeaozJtrgot1JiQcEI4Rda9OLgQ7nLKaqb4Z/QUx/fR3XpDzm5Jy1JA==",
          "4809:   dependencies:",
          "4810:     expect \"^28.1.0\"",
          "",
          "[Removed Lines]",
          "4805: matrix-mock-request@^2.1.0:",
          "4806:   version \"2.1.0\"",
          "4807:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.0.tgz#86f5b0ef846865d0767d3a8e64f5bcd6ca94c178\"",
          "4808:   integrity sha512-Cjpl3yP6h0yu5GKG89m1XZXZlm69Kg/qHV41N/t6SrQsgcfM3Bfavqx9YrtG0UnuXGy4bBSZIe1QiWVeFPZw1A==",
          "",
          "[Added Lines]",
          "4809: matrix-mock-request@^2.1.2:",
          "4810:   version \"2.1.2\"",
          "4811:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.2.tgz#11e38ed1233dced88a6f2bfba1684d5c5b3aa2c2\"",
          "4812:   integrity sha512-/OXCIzDGSLPJ3fs+uzDrtaOHI/Sqp4iEuniRn31U8S06mPXbvAnXknHqJ4c6A/KVwJj/nPFbGXpK4wPM038I6A==",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5816:   resolved \"https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a\"",
          "5817:   integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
          "5819: semver@7.0.0:",
          "5820:   version \"7.0.0\"",
          "5821:   resolved \"https://registry.yarnpkg.com/semver/-/semver-7.0.0.tgz#5f3ca35761e47e05b206c6daff2cf814f0316b8e\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5823: sdp-transform@^2.14.1:",
          "5824:   version \"2.14.1\"",
          "5825:   resolved \"https://registry.yarnpkg.com/sdp-transform/-/sdp-transform-2.14.1.tgz#2bb443583d478dee217df4caa284c46b870d5827\"",
          "5826:   integrity sha512-RjZyX3nVwJyCuTo5tGPx+PZWkDMCg7oOLpSlhjDdZfwUoNqG1mM8nyj31IGHyaPWXhjbP7cdK3qZ2bmkJ1GzRw==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "575b41685611c7d145fd63b497b3e1091d9df8b4",
      "candidate_info": {
        "commit_hash": "575b41685611c7d145fd63b497b3e1091d9df8b4",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/575b41685611c7d145fd63b497b3e1091d9df8b4",
        "files": [
          "src/client.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts"
        ],
        "message": "Simplify encryptAndSendToDevices (#2566)\n\nIt went to quite a lot of effort to gather a bunch of information to\nreturn, but the only thing using it already had all that info anyway.",
        "before_after_code_files": [
          "src/client.ts||src/client.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/crypto/index.ts||src/crypto/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import { Direction, EventTimeline } from \"./models/event-timeline\";",
          "41: import { IActionsObject, PushProcessor } from \"./pushprocessor\";",
          "42: import { AutoDiscovery, AutoDiscoveryAction } from \"./autodiscovery\";",
          "44: import * as olmlib from \"./crypto/olmlib\";",
          "45: import { decodeBase64, encodeBase64 } from \"./crypto/olmlib\";",
          "46: import { IExportedDevice as IExportedOlmDevice } from \"./crypto/OlmDevice\";",
          "",
          "[Removed Lines]",
          "43: import { IEncryptAndSendToDevicesResult } from \"./crypto\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2583:     public encryptAndSendToDevices(",
          "2584:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "2585:         payload: object,",
          "2587:         if (!this.crypto) {",
          "2588:             throw new Error(\"End-to-End encryption disabled\");",
          "2589:         }",
          "",
          "[Removed Lines]",
          "2586:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "",
          "[Added Lines]",
          "2585:     ): Promise<void> {",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:     private encryptAndSendKeysToDevices(",
          "607:         session: OutboundSessionInfo,",
          "608:         chainIndex: number,",
          "610:         payload: IPayload,",
          "611:     ): Promise<void> {",
          "612:         return this.crypto.encryptAndSendToDevices(",
          "614:             payload,",
          "618:                 session.markSharedWithDevice(",
          "622:                     chainIndex,",
          "623:                 );",
          "624:             }",
          "",
          "[Removed Lines]",
          "609:         userDeviceMap: IOlmDevice[],",
          "613:             userDeviceMap,",
          "615:         ).then(({ toDeviceBatch, deviceInfoByUserIdAndDeviceId }) => {",
          "617:             for (const msg of toDeviceBatch.batch) {",
          "619:                     msg.userId,",
          "620:                     msg.deviceId,",
          "621:                     deviceInfoByUserIdAndDeviceId.get(msg.userId).get(msg.deviceId).getIdentityKey(),",
          "",
          "[Added Lines]",
          "609:         devices: IOlmDevice[],",
          "613:             devices,",
          "615:         ).then(() => {",
          "617:             for (const device of devices) {",
          "619:                     device.userId,",
          "620:                     device.deviceInfo.deviceId,",
          "621:                     device.deviceInfo.getIdentityKey(),",
          "",
          "---------------"
        ],
        "src/crypto/index.ts||src/crypto/index.ts": [
          "File: src/crypto/index.ts -> src/crypto/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: }",
          "220: export enum CryptoEvent {",
          "221:     DeviceVerificationChanged = \"deviceVerificationChanged\",",
          "222:     UserTrustStatusChanged = \"userTrustStatusChanged\",",
          "",
          "[Removed Lines]",
          "215: export interface IEncryptAndSendToDevicesResult {",
          "216:     toDeviceBatch: ToDeviceBatch;",
          "217:     deviceInfoByUserIdAndDeviceId: Map<string, Map<string, DeviceInfo>>;",
          "218: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3129:     public async encryptAndSendToDevices(",
          "3130:         userDeviceInfoArr: IOlmDevice<DeviceInfo>[],",
          "3131:         payload: object,",
          "3133:         const toDeviceBatch: ToDeviceBatch = {",
          "3134:             eventType: EventType.RoomMessageEncrypted,",
          "3135:             batch: [],",
          "3136:         };",
          "3139:         try {",
          "3140:             await Promise.all(userDeviceInfoArr.map(async ({ userId, deviceInfo }) => {",
          "",
          "[Removed Lines]",
          "3132:     ): Promise<IEncryptAndSendToDevicesResult> {",
          "3137:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "",
          "[Added Lines]",
          "3127:     ): Promise<void> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3145:                     ciphertext: {},",
          "3146:                 };",
          "3159:                 toDeviceBatch.batch.push({",
          "3160:                     userId,",
          "3161:                     deviceId,",
          "",
          "[Removed Lines]",
          "3149:                 let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "3151:                 if (userIdDeviceInfo === undefined) {",
          "3152:                     userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "3153:                     deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "3154:                 }",
          "3157:                 userIdDeviceInfo.set(deviceId, deviceInfo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3194:             try {",
          "3195:                 await this.baseApis.queueToDevice(toDeviceBatch);",
          "3197:             } catch (e) {",
          "3198:                 logger.error(\"sendToDevice failed\", e);",
          "3199:                 throw e;",
          "",
          "[Removed Lines]",
          "3196:                 return { toDeviceBatch, deviceInfoByUserIdAndDeviceId };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa94d5d95c732b7a08287eafbd220424771a6486",
      "candidate_info": {
        "commit_hash": "aa94d5d95c732b7a08287eafbd220424771a6486",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/aa94d5d95c732b7a08287eafbd220424771a6486",
        "files": [
          "src/crypto/algorithms/megolm.ts"
        ],
        "message": "Assume per-user deviceID uniqueness in encryptAndSendKeysToDevices (#2136)\n\n* Segment recorded device info by user ID when tracking key shares.\n\nFixes #2135.\n\n* address review feedback\n\n* fix userIdDeviceInfo\n\nCo-authored-by: Denis Kasak <dkasak@termina.org.uk>\nCo-authored-by: Michael Telatynski <7t3chguy@gmail.com>",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:         payload: IPayload,",
          "593:     ): Promise<void> {",
          "594:         const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "597:         const promises: Promise<unknown>[] = [];",
          "598:         for (let i = 0; i < userDeviceMap.length; i++) {",
          "",
          "[Removed Lines]",
          "595:         const deviceInfoByDeviceId = new Map<string, DeviceInfo>();",
          "",
          "[Added Lines]",
          "596:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605:             const userId = val.userId;",
          "606:             const deviceInfo = val.deviceInfo;",
          "607:             const deviceId = deviceInfo.deviceId;",
          "610:             if (!contentMap[userId]) {",
          "611:                 contentMap[userId] = {};",
          "",
          "[Removed Lines]",
          "608:             deviceInfoByDeviceId.set(deviceId, deviceInfo);",
          "",
          "[Added Lines]",
          "611:             let userIdDeviceInfo = deviceInfoByUserIdAndDeviceId.get(userId);",
          "613:             if (userIdDeviceInfo === undefined) {",
          "614:                 userIdDeviceInfo = new Map<string, DeviceInfo>();",
          "616:                 deviceInfoByUserIdAndDeviceId.set(userId, userIdDeviceInfo);",
          "617:             }",
          "620:             userIdDeviceInfo.set(deviceId, deviceInfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:                         session.markSharedWithDevice(",
          "661:                             userId,",
          "662:                             deviceId,",
          "664:                             chainIndex,",
          "665:                         );",
          "666:                     }",
          "",
          "[Removed Lines]",
          "663:                             deviceInfoByDeviceId.get(deviceId).getIdentityKey(),",
          "",
          "[Added Lines]",
          "675:                             deviceInfoByUserIdAndDeviceId.get(userId).get(deviceId).getIdentityKey(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbede36085d38186163138a55d29936e53f588d4",
      "candidate_info": {
        "commit_hash": "dbede36085d38186163138a55d29936e53f588d4",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/dbede36085d38186163138a55d29936e53f588d4",
        "files": [
          "src/crypto/algorithms/megolm.ts"
        ],
        "message": "handle promises normally now tests are fixed",
        "before_after_code_files": [
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:         userDeviceMap: IOlmDevice[],",
          "579:         payload: IPayload,",
          "580:     ): Promise<void> {",
          "582:             userDeviceMap,",
          "583:             payload,",
          "588:             const { contentMap, deviceInfoByDeviceId } = result;",
          "590:             for (const userId of Object.keys(contentMap)) {",
          "",
          "[Removed Lines]",
          "581:         const p = this.crypto.encryptAndSendToDevices(",
          "584:         );",
          "585:         if (!p) return;",
          "586:         return p.then((result) => {",
          "587:             if (!result) return;",
          "",
          "[Added Lines]",
          "581:         return this.crypto.encryptAndSendToDevices(",
          "584:         ).then((result) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:                     );",
          "598:                 }",
          "599:             }",
          "600:         });",
          "601:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:         }).catch((error) => {",
          "598:             console.error(\"failed to encryptAndSendToDevices\", error);",
          "599:             throw error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e784da00a6dc3fa28afd3d61d33d32ab507a882",
      "candidate_info": {
        "commit_hash": "7e784da00a6dc3fa28afd3d61d33d32ab507a882",
        "repo": "matrix-org/matrix-js-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-js-sdk/commit/7e784da00a6dc3fa28afd3d61d33d32ab507a882",
        "files": [
          "package.json",
          "spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/queueToDevice.spec.ts",
          "src/ToDeviceMessageQueue.ts",
          "src/client.ts",
          "src/crypto/algorithms/megolm.ts",
          "src/models/ToDeviceMessage.ts",
          "src/scheduler.ts",
          "src/store/index.ts",
          "src/store/indexeddb-backend.ts",
          "src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-remote-backend.ts",
          "src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts",
          "src/store/memory.ts",
          "src/store/stub.ts",
          "yarn.lock"
        ],
        "message": "Retry to-device messages (#2549)\n\n* Retry to-device messages\n\nThis adds a queueToDevice API alongside sendToDevice which is a\nmuch higher-level API that adds the messages to a queue, stored in\npersistent storage, and retries them periodically. Also converts\nsending of megolm keys to use the new API.\n\nOther uses of sendToDevice are nopt converted in this PR, but could\nbe later.\n\nRequires https://github.com/matrix-org/matrix-mock-request/pull/17\n\n* Bump matrix-mock-request\n\n* Add more waits to make indexeddb tests pass\n\n* Switch some test expectations to queueToDevice\n\n* Stop straight away if the client has been stopped\n\nHopefully will fix tests being flakey and logging after tests have\nfinished.\n\n* Add return types & fix constant usage\n\n* Fix return type\n\nCo-authored-by: Germain <germains@element.io>\n\n* Fix return type\n\nCo-authored-by: Germain <germains@element.io>\n\n* Fix return type\n\nCo-authored-by: Germain <germains@element.io>\n\n* Stop the client in all test cases\n\nCo-authored-by: Germain <germains@element.io>",
        "before_after_code_files": [
          "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts",
          "spec/unit/queueToDevice.spec.ts||spec/unit/queueToDevice.spec.ts",
          "src/ToDeviceMessageQueue.ts||src/ToDeviceMessageQueue.ts",
          "src/client.ts||src/client.ts",
          "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts",
          "src/models/ToDeviceMessage.ts||src/models/ToDeviceMessage.ts",
          "src/scheduler.ts||src/scheduler.ts",
          "src/store/index.ts||src/store/index.ts",
          "src/store/indexeddb-backend.ts||src/store/indexeddb-backend.ts",
          "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts",
          "src/store/indexeddb-remote-backend.ts||src/store/indexeddb-remote-backend.ts",
          "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts",
          "src/store/indexeddb.ts||src/store/indexeddb.ts",
          "src/store/memory.ts||src/store/memory.ts",
          "src/store/stub.ts||src/store/stub.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ],
          "candidate": [
            "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts"
          ]
        }
      },
      "candidate_diff": {
        "spec/unit/crypto/algorithms/megolm.spec.ts||spec/unit/crypto/algorithms/megolm.spec.ts": [
          "File: spec/unit/crypto/algorithms/megolm.spec.ts -> spec/unit/crypto/algorithms/megolm.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         mockBaseApis = {",
          "60:             claimOneTimeKeys: jest.fn(),",
          "61:             sendToDevice: jest.fn(),",
          "62:         } as unknown as MockedObject<MatrixClient>;",
          "64:         const cryptoStore = new MemoryCryptoStore();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:             queueToDevice: jest.fn(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:                 });",
          "181:                 mockBaseApis.sendToDevice.mockReset();",
          "184:                 megolmDecryption.shareKeysWithDevice(keyRequest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:                 mockBaseApis.queueToDevice.mockReset();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:                     },",
          "325:                 });",
          "326:                 mockBaseApis.sendToDevice.mockResolvedValue(undefined);",
          "328:                 aliceDeviceInfo = {",
          "329:                     deviceId: 'aliceDevice',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:                 mockBaseApis.queueToDevice.mockResolvedValue(undefined);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "403:                 expect(mockCrypto.downloadKeys).toHaveBeenCalledWith(",
          "404:                     ['@alice:home.server'], false,",
          "405:                 );",
          "407:                 expect(mockBaseApis.claimOneTimeKeys).toHaveBeenCalledWith(",
          "408:                     [['@alice:home.server', 'aliceDevice']], 'signed_curve25519', 2000,",
          "409:                 );",
          "",
          "[Removed Lines]",
          "406:                 expect(mockBaseApis.sendToDevice).toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "409:                 expect(mockBaseApis.queueToDevice).toHaveBeenCalled();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "446:                     'YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWI',",
          "447:                 );",
          "450:                 await megolmEncryption.reshareKeyWithDevice(",
          "451:                     olmDevice.deviceCurve25519Key,",
          "452:                     ct1.session_id,",
          "",
          "[Removed Lines]",
          "449:                 mockBaseApis.sendToDevice.mockClear();",
          "",
          "[Added Lines]",
          "452:                 mockBaseApis.queueToDevice.mockClear();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454:                     aliceDeviceInfo,",
          "455:                 );",
          "458:             });",
          "459:         });",
          "460:     });",
          "",
          "[Removed Lines]",
          "457:                 expect(mockBaseApis.sendToDevice).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "460:                 expect(mockBaseApis.queueToDevice).not.toHaveBeenCalled();",
          "",
          "---------------"
        ],
        "spec/unit/queueToDevice.spec.ts||spec/unit/queueToDevice.spec.ts": [
          "File: spec/unit/queueToDevice.spec.ts -> spec/unit/queueToDevice.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import MockHttpBackend from 'matrix-mock-request';",
          "18: import { indexedDB as fakeIndexedDB } from 'fake-indexeddb';",
          "20: import { IHttpOpts, IndexedDBStore, MatrixEvent, MemoryStore, Room } from \"../../src\";",
          "21: import { MatrixClient } from \"../../src/client\";",
          "22: import { ToDeviceBatch } from '../../src/models/ToDeviceMessage';",
          "23: import { logger } from '../../src/logger';",
          "24: import { IStore } from '../../src/store';",
          "26: const FAKE_USER = \"@alice:example.org\";",
          "27: const FAKE_DEVICE_ID = \"AAAAAAAA\";",
          "28: const FAKE_PAYLOAD = {",
          "29:     \"foo\": 42,",
          "30: };",
          "31: const EXPECTED_BODY = {",
          "32:     messages: {",
          "33:         [FAKE_USER]: {",
          "34:             [FAKE_DEVICE_ID]: FAKE_PAYLOAD,",
          "35:         },",
          "36:     },",
          "37: };",
          "39: const FAKE_MSG = {",
          "40:     userId: FAKE_USER,",
          "41:     deviceId: FAKE_DEVICE_ID,",
          "42:     payload: FAKE_PAYLOAD,",
          "43: };",
          "45: enum StoreType {",
          "46:     Memory = 'Memory',",
          "47:     IndexedDB = 'IndexedDB',",
          "48: }",
          "56: const realSetTimeout = setTimeout;",
          "57: function flushPromises() {",
          "58:     return new Promise(r => {",
          "59:         realSetTimeout(r, 1);",
          "60:     });",
          "61: }",
          "63: async function flushAndRunTimersUntil(cond: () => boolean) {",
          "64:     while (!cond()) {",
          "65:         await flushPromises();",
          "66:         if (cond()) break;",
          "67:         jest.advanceTimersToNextTimer();",
          "68:     }",
          "69: }",
          "71: describe.each([",
          "72:     [StoreType.Memory], [StoreType.IndexedDB],",
          "73: ])(\"queueToDevice (%s store)\", function(storeType) {",
          "74:     let httpBackend: MockHttpBackend;",
          "75:     let client: MatrixClient;",
          "77:     beforeEach(async function() {",
          "78:         httpBackend = new MockHttpBackend();",
          "80:         let store: IStore;",
          "81:         if (storeType === StoreType.IndexedDB) {",
          "82:             const idbStore = new IndexedDBStore({ indexedDB: fakeIndexedDB });",
          "83:             await idbStore.startup();",
          "84:             store = idbStore;",
          "85:         } else {",
          "86:             store = new MemoryStore();",
          "87:         }",
          "89:         client = new MatrixClient({",
          "90:             baseUrl: \"https://my.home.server\",",
          "91:             accessToken: \"my.access.token\",",
          "92:             request: httpBackend.requestFn as IHttpOpts[\"request\"],",
          "93:             store,",
          "94:         });",
          "95:     });",
          "97:     afterEach(function() {",
          "98:         jest.useRealTimers();",
          "99:         client.stopClient();",
          "100:     });",
          "102:     it(\"sends a to-device message\", async function() {",
          "103:         httpBackend.when(",
          "104:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "105:         ).check((request) => {",
          "106:             expect(request.data).toEqual(EXPECTED_BODY);",
          "107:         }).respond(200, {});",
          "109:         await client.queueToDevice({",
          "110:             eventType: \"org.example.foo\",",
          "111:             batch: [",
          "112:                 FAKE_MSG,",
          "113:             ],",
          "114:         });",
          "116:         await httpBackend.flushAllExpected();",
          "117:     });",
          "119:     it(\"retries on error\", async function() {",
          "120:         jest.useFakeTimers();",
          "122:         httpBackend.when(",
          "123:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "124:         ).respond(500);",
          "126:         httpBackend.when(",
          "127:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "128:         ).check((request) => {",
          "129:             expect(request.data).toEqual(EXPECTED_BODY);",
          "130:         }).respond(200, {});",
          "132:         await client.queueToDevice({",
          "133:             eventType: \"org.example.foo\",",
          "134:             batch: [",
          "135:                 FAKE_MSG,",
          "136:             ],",
          "137:         });",
          "138:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "139:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "141:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "143:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "144:     });",
          "146:     it(\"stops retrying on 4xx errors\", async function() {",
          "147:         jest.useFakeTimers();",
          "149:         httpBackend.when(",
          "150:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "151:         ).respond(400);",
          "153:         await client.queueToDevice({",
          "154:             eventType: \"org.example.foo\",",
          "155:             batch: [",
          "156:                 FAKE_MSG,",
          "157:             ],",
          "158:         });",
          "159:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "160:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "165:         let tries = 0;",
          "166:         await flushAndRunTimersUntil(() => ++tries === 10);",
          "168:         expect(httpBackend.requests.length).toEqual(0);",
          "169:     });",
          "171:     it(\"honours ratelimiting\", async function() {",
          "172:         jest.useFakeTimers();",
          "176:         const retryDelay = 279 * 1000;",
          "178:         httpBackend.when(",
          "179:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "180:         ).respond(429, {",
          "181:             errcode: \"M_LIMIT_EXCEEDED\",",
          "182:             retry_after_ms: retryDelay,",
          "183:         });",
          "185:         httpBackend.when(",
          "186:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "187:         ).respond(200, {});",
          "189:         await client.queueToDevice({",
          "190:             eventType: \"org.example.foo\",",
          "191:             batch: [",
          "192:                 FAKE_MSG,",
          "193:             ],",
          "194:         });",
          "195:         await flushAndRunTimersUntil(() => httpBackend.requests.length > 0);",
          "196:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "197:         await flushPromises();",
          "199:         logger.info(\"Advancing clock to just before expected retry time...\");",
          "201:         jest.advanceTimersByTime(retryDelay - 1000);",
          "202:         await flushPromises();",
          "204:         expect(httpBackend.requests.length).toEqual(0);",
          "206:         logger.info(\"Advancing clock past expected retry time...\");",
          "208:         jest.advanceTimersByTime(2000);",
          "209:         await flushPromises();",
          "211:         expect(httpBackend.flushSync(null, 1)).toEqual(1);",
          "212:     });",
          "214:     it(\"retries on retryImmediately()\", async function() {",
          "215:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "216:             versions: [\"r0.0.1\"],",
          "217:         });",
          "219:         await Promise.all([client.startClient(), httpBackend.flush(null, 1, 20)]);",
          "221:         httpBackend.when(",
          "222:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "223:         ).respond(500);",
          "225:         httpBackend.when(",
          "226:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "227:         ).respond(200, {});",
          "229:         await client.queueToDevice({",
          "230:             eventType: \"org.example.foo\",",
          "231:             batch: [",
          "232:                 FAKE_MSG,",
          "233:             ],",
          "234:         });",
          "235:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "236:         await flushPromises();",
          "238:         client.retryImmediately();",
          "240:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "241:     });",
          "243:     it(\"retries on when client is started\", async function() {",
          "244:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "245:             versions: [\"r0.0.1\"],",
          "246:         });",
          "248:         await Promise.all([client.startClient(), httpBackend.flush(\"/_matrix/client/versions\", 1, 20)]);",
          "250:         httpBackend.when(",
          "251:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "252:         ).respond(500);",
          "254:         httpBackend.when(",
          "255:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "256:         ).respond(200, {});",
          "258:         await client.queueToDevice({",
          "259:             eventType: \"org.example.foo\",",
          "260:             batch: [",
          "261:                 FAKE_MSG,",
          "262:             ],",
          "263:         });",
          "264:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "265:         await flushPromises();",
          "267:         client.stopClient();",
          "268:         await Promise.all([client.startClient(), httpBackend.flush(\"/_matrix/client/versions\", 1, 20)]);",
          "270:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "271:     });",
          "273:     it(\"retries when a message is retried\", async function() {",
          "274:         httpBackend.when(\"GET\", \"/_matrix/client/versions\").respond(200, {",
          "275:             versions: [\"r0.0.1\"],",
          "276:         });",
          "278:         await Promise.all([client.startClient(), httpBackend.flush(null, 1, 20)]);",
          "280:         httpBackend.when(",
          "281:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "282:         ).respond(500);",
          "284:         httpBackend.when(",
          "285:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "286:         ).respond(200, {});",
          "288:         await client.queueToDevice({",
          "289:             eventType: \"org.example.foo\",",
          "290:             batch: [",
          "291:                 FAKE_MSG,",
          "292:             ],",
          "293:         });",
          "295:         expect(await httpBackend.flush(null, 1, 1)).toEqual(1);",
          "296:         await flushPromises();",
          "298:         const dummyEvent = new MatrixEvent({",
          "299:             event_id: \"!fake:example.org\",",
          "300:         });",
          "301:         const mockRoom = {",
          "302:             updatePendingEvent: jest.fn(),",
          "303:         } as unknown as Room;",
          "304:         client.resendEvent(dummyEvent, mockRoom);",
          "306:         expect(await httpBackend.flush(null, 1, 20)).toEqual(1);",
          "307:     });",
          "309:     it(\"splits many messages into multiple HTTP requests\", async function() {",
          "310:         const batch: ToDeviceBatch = {",
          "311:             eventType: \"org.example.foo\",",
          "312:             batch: [],",
          "313:         };",
          "315:         for (let i = 0; i <= 20; ++i) {",
          "316:             batch.batch.push({",
          "317:                 userId: `@user${i}:example.org`,",
          "318:                 deviceId: FAKE_DEVICE_ID,",
          "319:                 payload: FAKE_PAYLOAD,",
          "320:             });",
          "321:         }",
          "323:         httpBackend.when(",
          "324:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "325:         ).check((request) => {",
          "326:             expect(Object.keys(request.data.messages).length).toEqual(20);",
          "327:         }).respond(200, {});",
          "329:         httpBackend.when(",
          "330:             \"PUT\", \"/sendToDevice/org.example.foo/\",",
          "331:         ).check((request) => {",
          "332:             expect(Object.keys(request.data.messages).length).toEqual(1);",
          "333:         }).respond(200, {});",
          "335:         await client.queueToDevice(batch);",
          "336:         await httpBackend.flushAllExpected();",
          "337:     });",
          "338: });",
          "",
          "---------------"
        ],
        "src/ToDeviceMessageQueue.ts||src/ToDeviceMessageQueue.ts": [
          "File: src/ToDeviceMessageQueue.ts -> src/ToDeviceMessageQueue.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: import { logger } from \"./logger\";",
          "18: import { MatrixClient } from \"./matrix\";",
          "19: import { IndexedToDeviceBatch, ToDeviceBatch, ToDeviceBatchWithTxnId, ToDevicePayload } from \"./models/ToDeviceMessage\";",
          "20: import { MatrixScheduler } from \"./scheduler\";",
          "22: const MAX_BATCH_SIZE = 20;",
          "28: export class ToDeviceMessageQueue {",
          "29:     private sending = false;",
          "30:     private running = true;",
          "31:     private retryTimeout: number = null;",
          "32:     private retryAttempts = 0;",
          "34:     constructor(private client: MatrixClient) {",
          "35:     }",
          "37:     public start(): void {",
          "38:         this.running = true;",
          "39:         this.sendQueue();",
          "40:     }",
          "42:     public stop(): void {",
          "43:         this.running = false;",
          "44:         if (this.retryTimeout !== null) clearTimeout(this.retryTimeout);",
          "45:         this.retryTimeout = null;",
          "46:     }",
          "48:     public async queueBatch(batch: ToDeviceBatch): Promise<void> {",
          "49:         const batches: ToDeviceBatchWithTxnId[] = [];",
          "50:         for (let i = 0; i < batch.batch.length; i += MAX_BATCH_SIZE) {",
          "51:             batches.push({",
          "52:                 eventType: batch.eventType,",
          "53:                 batch: batch.batch.slice(i, i + MAX_BATCH_SIZE),",
          "54:                 txnId: this.client.makeTxnId(),",
          "55:             });",
          "56:         }",
          "58:         await this.client.store.saveToDeviceBatches(batches);",
          "59:         this.sendQueue();",
          "60:     }",
          "62:     public sendQueue = async (): Promise<void> => {",
          "63:         if (this.retryTimeout !== null) clearTimeout(this.retryTimeout);",
          "64:         this.retryTimeout = null;",
          "66:         if (this.sending || !this.running) return;",
          "68:         logger.debug(\"Attempting to send queued to-device messages\");",
          "70:         this.sending = true;",
          "71:         let headBatch;",
          "72:         try {",
          "73:             while (this.running) {",
          "74:                 headBatch = await this.client.store.getOldestToDeviceBatch();",
          "75:                 if (headBatch === null) break;",
          "76:                 await this.sendBatch(headBatch);",
          "77:                 await this.client.store.removeToDeviceBatch(headBatch.id);",
          "78:                 this.retryAttempts = 0;",
          "79:             }",
          "82:             if (!this.running) return;",
          "84:             logger.debug(\"All queued to-device messages sent\");",
          "85:         } catch (e) {",
          "86:             ++this.retryAttempts;",
          "89:             const retryDelay = MatrixScheduler.RETRY_BACKOFF_RATELIMIT(null, this.retryAttempts, e);",
          "90:             if (retryDelay === -1) {",
          "93:                 if (Math.floor(e.httpStatus / 100) === 4) {",
          "94:                     logger.error(\"Fatal error when sending to-device message - dropping to-device batch!\", e);",
          "95:                     await this.client.store.removeToDeviceBatch(headBatch.id);",
          "96:                 } else {",
          "97:                     logger.info(\"Automatic retry limit reached for to-device messages.\");",
          "98:                 }",
          "99:                 return;",
          "100:             }",
          "102:             logger.info(`Failed to send batch of to-device messages. Will retry in ${retryDelay}ms`, e);",
          "103:             this.retryTimeout = setTimeout(this.sendQueue, retryDelay);",
          "104:         } finally {",
          "105:             this.sending = false;",
          "106:         }",
          "107:     };",
          "112:     private async sendBatch(batch: IndexedToDeviceBatch): Promise<void> {",
          "113:         const contentMap: Record<string, Record<string, ToDevicePayload>> = {};",
          "114:         for (const item of batch.batch) {",
          "115:             if (!contentMap[item.userId]) {",
          "116:                 contentMap[item.userId] = {};",
          "117:             }",
          "118:             contentMap[item.userId][item.deviceId] = item.payload;",
          "119:         }",
          "121:         logger.info(`Sending batch of ${batch.batch.length} to-device messages with ID ${batch.id}`);",
          "123:         await this.client.sendToDevice(batch.eventType, contentMap, batch.txnId);",
          "124:     }",
          "125: }",
          "",
          "---------------"
        ],
        "src/client.ts||src/client.ts": [
          "File: src/client.ts -> src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: import { SlidingSyncSdk } from \"./sliding-sync-sdk\";",
          "195: import { Thread, THREAD_RELATION_TYPE } from \"./models/thread\";",
          "196: import { MBeaconInfoEventContent, M_BEACON_INFO } from \"./@types/beacon\";",
          "198: export type Store = IStore;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: import { ToDeviceMessageQueue } from \"./ToDeviceMessageQueue\";",
          "198: import { ToDeviceBatch } from \"./models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "939:     protected mediaHandler = new MediaHandler(this);",
          "940:     protected pendingEventEncryption = new Map<string, Promise<void>>();",
          "942:     constructor(opts: IMatrixClientCreateOpts) {",
          "943:         super();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "944:     private toDeviceMessageQueue: ToDeviceMessageQueue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1034:         this.roomList = new RoomList(this.cryptoStore);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1040:         this.toDeviceMessageQueue = new ToDeviceMessageQueue(this);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1196:             }, 1000 * this.clientOpts.clientWellKnownPollPeriod);",
          "1197:             this.fetchClientWellKnown();",
          "1198:         }",
          "1199:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1206:         this.toDeviceMessageQueue.start();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1223:         if (this.clientWellKnownIntervalID !== undefined) {",
          "1224:             global.clearInterval(this.clientWellKnownIntervalID);",
          "1225:         }",
          "1226:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1235:         this.toDeviceMessageQueue.stop();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1566:     public retryImmediately(): boolean {",
          "1567:         return this.syncApi.retryImmediately();",
          "1568:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580:         this.toDeviceMessageQueue.sendQueue();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3510:     public resendEvent(event: MatrixEvent, room: Room): Promise<ISendEventResponse> {",
          "3511:         this.updatePendingEventStatus(room, event, EventStatus.SENDING);",
          "3512:         return this.encryptAndSendEvent(room, event);",
          "3513:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3526:         this.toDeviceMessageQueue.sendQueue();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8726:         return this.http.authedRequest(undefined, Method.Put, path, undefined, body);",
          "8727:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8756:     public queueToDevice(batch: ToDeviceBatch): Promise<void> {",
          "8757:         return this.toDeviceMessageQueue.queueBatch(batch);",
          "8758:     }",
          "",
          "---------------"
        ],
        "src/crypto/algorithms/megolm.ts||src/crypto/algorithms/megolm.ts": [
          "File: src/crypto/algorithms/megolm.ts -> src/crypto/algorithms/megolm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { logger } from '../../logger';",
          "24: import * as olmlib from \"../olmlib\";",
          "25: import {",
          "26:     DecryptionAlgorithm,",
          "27:     DecryptionError,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import { EventType } from '../../@types/event';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import { DeviceInfoMap } from \"../DeviceList\";",
          "38: import { MatrixEvent } from \"../..\";",
          "39: import { IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"../index\";",
          "42: export function isRoomSharedHistory(room: Room): boolean {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import { ToDeviceBatch, ToDeviceMessage } from '../../models/ToDeviceMessage';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609:         userDeviceMap: IOlmDevice[],",
          "610:         payload: IPayload,",
          "611:     ): Promise<void> {",
          "614:         const deviceInfoByUserIdAndDeviceId = new Map<string, Map<string, DeviceInfo>>();",
          "",
          "[Removed Lines]",
          "612:         const contentMap: Record<string, Record<string, IEncryptedContent>> = {};",
          "",
          "[Added Lines]",
          "614:         const toDeviceBatch: ToDeviceBatch = {",
          "615:             eventType: EventType.RoomMessageEncrypted,",
          "616:             batch: [],",
          "617:         };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "638:             userIdDeviceInfo.set(deviceId, deviceInfo);",
          "645:             promises.push(",
          "646:                 olmlib.encryptMessageForDevice(",
          "",
          "[Removed Lines]",
          "640:             if (!contentMap[userId]) {",
          "641:                 contentMap[userId] = {};",
          "642:             }",
          "643:             contentMap[userId][deviceId] = encryptedContent;",
          "",
          "[Added Lines]",
          "646:             toDeviceBatch.batch.push({",
          "647:                 userId,",
          "648:                 deviceId,",
          "649:                 payload: encryptedContent,",
          "650:             });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "677:                 }",
          "678:             }",
          "697:                 }",
          "698:             });",
          "699:         });",
          "",
          "[Removed Lines]",
          "663:             for (const userId of Object.keys(contentMap)) {",
          "664:                 for (const deviceId of Object.keys(contentMap[userId])) {",
          "665:                     if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {",
          "666:                         logger.log(",
          "667:                             \"No ciphertext for device \" +",
          "668:                             userId + \":\" + deviceId + \": pruning\",",
          "669:                         );",
          "670:                         delete contentMap[userId][deviceId];",
          "671:                     }",
          "672:                 }",
          "674:                 if (Object.keys(contentMap[userId]).length === 0) {",
          "675:                     logger.log(\"Pruned all devices for user \" + userId);",
          "676:                     delete contentMap[userId];",
          "681:             if (Object.keys(contentMap).length === 0) {",
          "682:                 logger.log(\"No users left to send to: aborting\");",
          "683:                 return;",
          "684:             }",
          "686:             return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(() => {",
          "688:                 for (const userId of Object.keys(contentMap)) {",
          "689:                     for (const deviceId of Object.keys(contentMap[userId])) {",
          "690:                         session.markSharedWithDevice(",
          "691:                             userId,",
          "692:                             deviceId,",
          "693:                             deviceInfoByUserIdAndDeviceId.get(userId).get(deviceId).getIdentityKey(),",
          "694:                             chainIndex,",
          "695:                         );",
          "696:                     }",
          "",
          "[Added Lines]",
          "670:             const prunedBatch: ToDeviceMessage[] = [];",
          "671:             for (const msg of toDeviceBatch.batch) {",
          "672:                 if (Object.keys(msg.payload.ciphertext).length > 0) {",
          "673:                     prunedBatch.push(msg);",
          "674:                 } else {",
          "675:                     logger.log(",
          "676:                         \"No ciphertext for device \" +",
          "677:                         msg.userId + \":\" + msg.deviceId + \": pruning\",",
          "678:                     );",
          "682:             toDeviceBatch.batch = prunedBatch;",
          "684:             return this.baseApis.queueToDevice(toDeviceBatch).then(() => {",
          "686:                 for (const msg of toDeviceBatch.batch) {",
          "687:                     session.markSharedWithDevice(",
          "688:                         msg.userId,",
          "689:                         msg.deviceId,",
          "690:                         deviceInfoByUserIdAndDeviceId.get(msg.userId).get(msg.deviceId).getIdentityKey(),",
          "691:                         chainIndex,",
          "692:                     );",
          "",
          "---------------"
        ],
        "src/models/ToDeviceMessage.ts||src/models/ToDeviceMessage.ts": [
          "File: src/models/ToDeviceMessage.ts -> src/models/ToDeviceMessage.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2022 The Matrix.org Foundation C.I.C.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: export type ToDevicePayload = Record<string, any>;",
          "19: export interface ToDeviceMessage {",
          "20:     userId: string;",
          "21:     deviceId: string;",
          "22:     payload: ToDevicePayload;",
          "23: }",
          "25: export interface ToDeviceBatch {",
          "26:     eventType: string;",
          "27:     batch: ToDeviceMessage[];",
          "28: }",
          "31: export interface ToDeviceBatchWithTxnId extends ToDeviceBatch {",
          "32:     txnId: string;",
          "33: }",
          "36: export interface IndexedToDeviceBatch extends ToDeviceBatchWithTxnId {",
          "37:     id: number;",
          "38: }",
          "",
          "---------------"
        ],
        "src/scheduler.ts||src/scheduler.ts": [
          "File: src/scheduler.ts -> src/scheduler.ts"
        ],
        "src/store/index.ts||src/store/index.ts": [
          "File: src/store/index.ts -> src/store/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { IMinimalEvent, IRooms, ISyncResponse } from \"../sync-accumulator\";",
          "24: import { IStartClientOpts } from \"../client\";",
          "25: import { IStateEventWithRoomId } from \"../@types/search\";",
          "27: export interface ISavedSync {",
          "28:     nextBatch: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:     getPendingEvents(roomId: string): Promise<Partial<IEvent>[]>;",
          "224:     setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void>;",
          "225: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:      saveToDeviceBatches(batch: ToDeviceBatchWithTxnId[]): Promise<void>;",
          "250:      getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch>;",
          "255:      removeToDeviceBatch(id: number): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-backend.ts||src/store/indexeddb-backend.ts": [
          "File: src/store/indexeddb-backend.ts -> src/store/indexeddb-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { ISavedSync } from \"./index\";",
          "18: import { IEvent, IStartClientOpts, IStateEventWithRoomId, ISyncResponse } from \"..\";",
          "20: export interface IIndexedDBBackend {",
          "21:     connect(): Promise<void>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     getUserPresenceEvents(): Promise<UserTuple[]>;",
          "32:     getClientOptions(): Promise<IStartClientOpts>;",
          "33:     storeClientOptions(options: IStartClientOpts): Promise<void>;",
          "34: }",
          "36: export type UserTuple = [userId: string, presenceEvent: Partial<IEvent>];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void>;",
          "36:     getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch>;",
          "37:     removeToDeviceBatch(id: number): Promise<void>;",
          "",
          "---------------"
        ],
        "src/store/indexeddb-local-backend.ts||src/store/indexeddb-local-backend.ts": [
          "File: src/store/indexeddb-local-backend.ts -> src/store/indexeddb-local-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { IStartClientOpts, IStateEventWithRoomId } from \"..\";",
          "22: import { ISavedSync } from \"./index\";",
          "23: import { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";",
          "27: function createDatabase(db: IDBDatabase): void {",
          "",
          "[Removed Lines]",
          "25: const VERSION = 3;",
          "",
          "[Added Lines]",
          "24: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "26: const VERSION = 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         { keyPath: [\"clobber\"] });",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: function upgradeSchemaV4(db: IDBDatabase): void {",
          "54:     db.createObjectStore(\"to_device_queue\", { autoIncrement: true });",
          "55: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     });",
          "113: }",
          "116:     return reqAsEventPromise(req).then((event) => req.result);",
          "117: }",
          "",
          "[Removed Lines]",
          "115: function reqAsCursorPromise(req: IDBRequest<IDBCursor | null>): Promise<IDBCursor> {",
          "",
          "[Added Lines]",
          "120: function reqAsCursorPromise<T>(req: IDBRequest<T>): Promise<T> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:             if (oldVersion < 3) {",
          "178:                 upgradeSchemaV3(db);",
          "179:             }",
          "181:         };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:             if (oldVersion < 4) {",
          "186:                 upgradeSchemaV4(db);",
          "187:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:         }); // put == UPSERT",
          "562:         await txnAsPromise(txn);",
          "563:     }",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:     public async saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "574:         const txn = this.db.transaction([\"to_device_queue\"], \"readwrite\");",
          "575:         const store = txn.objectStore(\"to_device_queue\");",
          "576:         for (const batch of batches) {",
          "577:             store.add(batch);",
          "578:         }",
          "579:         await txnAsPromise(txn);",
          "580:     }",
          "582:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "583:         const txn = this.db.transaction([\"to_device_queue\"], \"readonly\");",
          "584:         const store = txn.objectStore(\"to_device_queue\");",
          "585:         const cursor = await reqAsCursorPromise(store.openCursor());",
          "586:         if (!cursor) return null;",
          "588:         const resultBatch = cursor.value as ToDeviceBatchWithTxnId;",
          "590:         return {",
          "591:             id: cursor.key as number,",
          "592:             txnId: resultBatch.txnId,",
          "593:             eventType: resultBatch.eventType,",
          "594:             batch: resultBatch.batch,",
          "595:         };",
          "596:     }",
          "598:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "599:         const txn = this.db.transaction([\"to_device_queue\"], \"readwrite\");",
          "600:         const store = txn.objectStore(\"to_device_queue\");",
          "601:         store.delete(id);",
          "602:         await txnAsPromise(txn);",
          "603:     }",
          "",
          "---------------"
        ],
        "src/store/indexeddb-remote-backend.ts||src/store/indexeddb-remote-backend.ts": [
          "File: src/store/indexeddb-remote-backend.ts -> src/store/indexeddb-remote-backend.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import { IStartClientOpts } from \"../client\";",
          "21: import { IStateEventWithRoomId, ISyncResponse } from \"..\";",
          "22: import { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";",
          "24: export class RemoteIndexedDBStoreBackend implements IIndexedDBBackend {",
          "25:     private worker: Worker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         return this.doCmd('getUserPresenceEvents');",
          "134:     }",
          "136:     private ensureStarted(): Promise<void> {",
          "137:         if (this.startPromise === null) {",
          "138:             this.worker = this.workerFactory();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     public async saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "138:         return this.doCmd('saveToDeviceBatches', [batches]);",
          "139:     }",
          "141:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch> {",
          "142:         return this.doCmd('getOldestToDeviceBatch');",
          "143:     }",
          "145:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "146:         return this.doCmd('removeToDeviceBatch', [id]);",
          "147:     }",
          "",
          "---------------"
        ],
        "src/store/indexeddb-store-worker.ts||src/store/indexeddb-store-worker.ts": [
          "File: src/store/indexeddb-store-worker.ts -> src/store/indexeddb-store-worker.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:             case 'storeClientOptions':",
          "104:                 prom = this.backend.storeClientOptions(msg.args[0]);",
          "105:                 break;",
          "106:         }",
          "108:         if (prom === undefined) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:             case 'saveToDeviceBatches':",
          "107:                 prom = this.backend.saveToDeviceBatches(msg.args[0]);",
          "108:                 break;",
          "109:             case 'getOldestToDeviceBatch':",
          "110:                 prom = this.backend.getOldestToDeviceBatch();",
          "111:                 break;",
          "112:             case 'removeToDeviceBatch':",
          "113:                 prom = this.backend.removeToDeviceBatch(msg.args[0]);",
          "114:                 break;",
          "",
          "---------------"
        ],
        "src/store/indexeddb.ts||src/store/indexeddb.ts": [
          "File: src/store/indexeddb.ts -> src/store/indexeddb.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { ISyncResponse } from \"../sync-accumulator\";",
          "28: import { TypedEventEmitter } from \"../models/typed-event-emitter\";",
          "29: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351:             this.localStorage.removeItem(pendingEventsKey(roomId));",
          "352:         }",
          "353:     }",
          "354: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:     public saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "357:         return this.backend.saveToDeviceBatches(batches);",
          "358:     }",
          "360:     public getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch> {",
          "361:         return this.backend.getOldestToDeviceBatch();",
          "362:     }",
          "364:     public removeToDeviceBatch(id: number): Promise<void> {",
          "365:         return this.backend.removeToDeviceBatch(id);",
          "366:     }",
          "",
          "---------------"
        ],
        "src/store/memory.ts||src/store/memory.ts": [
          "File: src/store/memory.ts -> src/store/memory.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import { RoomSummary } from \"../models/room-summary\";",
          "31: import { ISyncResponse } from \"../sync-accumulator\";",
          "32: import { IStateEventWithRoomId } from \"../@types/search\";",
          "34: function isValidFilterId(filterId: string): boolean {",
          "35:     const isValidStr = typeof filterId === \"string\" &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import { IndexedToDeviceBatch, ToDeviceBatchWithTxnId } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     private oobMembers: Record<string, IStateEventWithRoomId[]> = {}; // roomId: [member events]",
          "65:     private pendingEvents: { [roomId: string]: Partial<IEvent>[] } = {};",
          "66:     private clientOptions = {};",
          "68:     constructor(opts: IOpts = {}) {",
          "69:         this.localStorage = opts.localStorage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     private pendingToDeviceBatches: IndexedToDeviceBatch[] = [];",
          "69:     private nextToDeviceBatchId = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:     public async setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "430:         this.pendingEvents[roomId] = events;",
          "431:     }",
          "432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:     public saveToDeviceBatches(batches: ToDeviceBatchWithTxnId[]): Promise<void> {",
          "437:         for (const batch of batches) {",
          "438:             this.pendingToDeviceBatches.push({",
          "439:                 id: this.nextToDeviceBatchId++,",
          "440:                 eventType: batch.eventType,",
          "441:                 txnId: batch.txnId,",
          "442:                 batch: batch.batch,",
          "443:             });",
          "444:         }",
          "445:         return Promise.resolve();",
          "446:     }",
          "448:     public async getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "449:         if (this.pendingToDeviceBatches.length === 0) return null;",
          "450:         return this.pendingToDeviceBatches[0];",
          "451:     }",
          "453:     public removeToDeviceBatch(id: number): Promise<void> {",
          "454:         this.pendingToDeviceBatches = this.pendingToDeviceBatches.filter(batch => batch.id !== id);",
          "455:         return Promise.resolve();",
          "456:     }",
          "",
          "---------------"
        ],
        "src/store/stub.ts||src/store/stub.ts": [
          "File: src/store/stub.ts -> src/store/stub.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import { RoomSummary } from \"../models/room-summary\";",
          "29: import { ISyncResponse } from \"../sync-accumulator\";",
          "30: import { IStateEventWithRoomId } from \"../@types/search\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import { IndexedToDeviceBatch, ToDeviceBatch } from \"../models/ToDeviceMessage\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:     public setPendingEvents(roomId: string, events: Partial<IEvent>[]): Promise<void> {",
          "271:         return Promise.resolve();",
          "272:     }",
          "273: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     public async saveToDeviceBatches(batch: ToDeviceBatch[]): Promise<void> {",
          "276:         return Promise.resolve();",
          "277:     }",
          "279:     public getOldestToDeviceBatch(): Promise<IndexedToDeviceBatch | null> {",
          "280:         return Promise.resolve(null);",
          "281:     }",
          "283:     public async removeToDeviceBatch(id: number): Promise<void> {",
          "284:         return Promise.resolve();",
          "285:     }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "4802:   resolved \"https://registry.yarnpkg.com/matrix-events-sdk/-/matrix-events-sdk-0.0.1-beta.7.tgz#5ffe45eba1f67cc8d7c2377736c728b322524934\"",
          "4803:   integrity sha512-9jl4wtWanUFSy2sr2lCjErN/oC8KTAtaeaozJtrgot1JiQcEI4Rda9OLgQ7nLKaqb4Z/QUx/fR3XpDzm5Jy1JA==",
          "4809:   dependencies:",
          "4810:     expect \"^28.1.0\"",
          "",
          "[Removed Lines]",
          "4805: matrix-mock-request@^2.1.0:",
          "4806:   version \"2.1.0\"",
          "4807:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.0.tgz#86f5b0ef846865d0767d3a8e64f5bcd6ca94c178\"",
          "4808:   integrity sha512-Cjpl3yP6h0yu5GKG89m1XZXZlm69Kg/qHV41N/t6SrQsgcfM3Bfavqx9YrtG0UnuXGy4bBSZIe1QiWVeFPZw1A==",
          "",
          "[Added Lines]",
          "4805: matrix-mock-request@^2.1.1:",
          "4806:   version \"2.1.1\"",
          "4807:   resolved \"https://registry.yarnpkg.com/matrix-mock-request/-/matrix-mock-request-2.1.1.tgz#a8fc03a2816464bb95445df4cc8885ac36786b23\"",
          "4808:   integrity sha512-CxdaUPRVB4o8JxTBMASstS2loRe+hlqeJu0Q7yyS1r36LkSSo/KAP4AuomsqxuKqaqYYnEJFJzkG0gOhxV7aqA==",
          "",
          "---------------"
        ]
      }
    }
  ]
}