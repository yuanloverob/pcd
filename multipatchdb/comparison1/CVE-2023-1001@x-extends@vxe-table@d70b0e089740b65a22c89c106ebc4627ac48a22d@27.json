{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "896c4f4cb4c55d6e9594c5144733df2ad127ae00",
      "candidate_info": {
        "commit_hash": "896c4f4cb4c55d6e9594c5144733df2ad127ae00",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/896c4f4cb4c55d6e9594c5144733df2ad127ae00",
        "files": [
          "examples/views/tooltip/Tooltip.vue",
          "package.json",
          "packages/custom/src/mixin.js",
          "packages/custom/src/panel.js",
          "packages/edit/src/mixin.js",
          "packages/keyboard/src/mixin.js",
          "packages/table/src/body.js",
          "packages/table/src/cell.js",
          "packages/table/src/methods.js",
          "packages/textarea/src/textarea.js",
          "packages/tooltip/src/tooltip.js",
          "packages/v-x-e-table/index.js",
          "packages/validator/src/mixin.js",
          "styles/table.scss",
          "styles/textarea.scss",
          "types/column.d.ts"
        ],
        "message": "releases 3.8.24",
        "before_after_code_files": [
          "examples/views/tooltip/Tooltip.vue||examples/views/tooltip/Tooltip.vue",
          "packages/custom/src/mixin.js||packages/custom/src/mixin.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js",
          "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js",
          "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js",
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js",
          "styles/table.scss||styles/table.scss",
          "styles/textarea.scss||styles/textarea.scss",
          "types/column.d.ts||types/column.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js",
            "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js",
            "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
          ]
        }
      },
      "candidate_diff": {
        "examples/views/tooltip/Tooltip.vue||examples/views/tooltip/Tooltip.vue": [
          "File: examples/views/tooltip/Tooltip.vue -> examples/views/tooltip/Tooltip.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     <p>",
          "25:       <vxe-tooltip v-model=\"value1\" content=\"\u81ea\u5b9a\u4e49\u63d0\u793a\u5185\u5bb9\" trigger=\"manual\">",
          "27:       </vxe-tooltip>",
          "28:     </p>",
          "",
          "[Removed Lines]",
          "26:         <vxe-button @mouseenter=\"value1 = true\" @mouseleave=\"value1 = false\">\u624b\u52a8\u6a21\u5f0f</vxe-button>",
          "",
          "[Added Lines]",
          "26:         <button @mouseenter=\"value1 = true\" @mouseleave=\"value1 = false\">\u624b\u52a8\u6a21\u5f0f</button>",
          "",
          "---------------"
        ],
        "packages/custom/src/mixin.js||packages/custom/src/mixin.js": [
          "File: packages/custom/src/mixin.js -> packages/custom/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       let tableHeight = 0",
          "43:       if ($el) {",
          "45:       }",
          "46:       customStore.maxHeight = Math.max(4, tableHeight)",
          "47:     },",
          "",
          "[Removed Lines]",
          "44:         tableHeight = $el.clientHeight - 30",
          "",
          "[Added Lines]",
          "44:         tableHeight = $el.clientHeight - 28",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:       const { customOpts, customColumnList } = $xetable",
          "639:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "640:       XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "642:           if (allowSort) {",
          "643:             const sortIndex = index + 1",
          "644:             column.renderSortNumber = sortIndex",
          "",
          "[Removed Lines]",
          "641:         if (!parent) {",
          "",
          "[Added Lines]",
          "641:         if (parent) {",
          "643:           column.fixed = parent.fixed",
          "644:         } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:       const { isMaxFixedColumn, customOpts } = $xetable",
          "771:       if (customOpts.immediate) {",
          "772:         if (column.renderFixed === colFixed) {",
          "775:         } else {",
          "776:           if (!isMaxFixedColumn || column.renderFixed) {",
          "779:           }",
          "780:         }",
          "781:         $xetable.handleCustom()",
          "782:         $xetable.saveCustomStore('update:fixed')",
          "783:       } else {",
          "784:         if (column.renderFixed === colFixed) {",
          "786:         } else {",
          "787:           if (!isMaxFixedColumn || column.renderFixed) {",
          "789:           }",
          "790:         }",
          "791:       }",
          "",
          "[Removed Lines]",
          "773:           column.fixed = ''",
          "774:           column.renderFixed = ''",
          "777:             column.fixed = colFixed",
          "778:             column.renderFixed = colFixed",
          "785:           column.renderFixed = ''",
          "788:             column.renderFixed = colFixed",
          "",
          "[Added Lines]",
          "776:           XEUtils.eachTree([column], col => {",
          "777:             col.fixed = ''",
          "778:             col.renderFixed = ''",
          "779:           })",
          "782:             XEUtils.eachTree([column], col => {",
          "783:               col.fixed = colFixed",
          "784:               col.renderFixed = colFixed",
          "785:             })",
          "792:           XEUtils.eachTree([column], col => {",
          "793:             col.renderFixed = ''",
          "794:           })",
          "797:             XEUtils.eachTree([column], col => {",
          "798:               col.renderFixed = colFixed",
          "799:             })",
          "",
          "---------------"
        ],
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:       const { editStore, editOpts, tableColumn, editConfig, mouseConfig } = this",
          "431:       const { mode } = editOpts",
          "432:       const { actived, focused } = editStore",
          "",
          "[Removed Lines]",
          "429:     handleActived (params, evnt) {",
          "",
          "[Added Lines]",
          "429:     handleEdit (params, evnt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516:       }",
          "517:       return this.$nextTick()",
          "518:     },",
          "519:     _getColumnModel (row, column) {",
          "520:       const { model, editRender } = column",
          "521:       if (editRender) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:     handleActived (params, evnt) {",
          "523:       return this.handleEdit(params, evnt)",
          "524:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "688:         return this.scrollToRow(row, true).then(() => {",
          "689:           const cell = this.getCellElement(row, column)",
          "690:           if (cell) {",
          "692:             this.lastCallTime = Date.now()",
          "693:           }",
          "694:         })",
          "",
          "[Removed Lines]",
          "691:             this.handleActived({ row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column), cell, $table: this })",
          "",
          "[Added Lines]",
          "697:             this.handleEdit({ row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column), cell, $table: this })",
          "",
          "---------------"
        ],
        "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js": [
          "File: packages/keyboard/src/mixin.js -> packages/keyboard/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:         if (editConfig) {",
          "98:           if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {",
          "99:             if (editOpts.mode === 'row') {",
          "101:             } else {",
          "102:               this.scrollToRow(params.row, params.column)",
          "103:                 .then(() => this.handleSelected(params, evnt))",
          "",
          "[Removed Lines]",
          "100:               this.handleActived(params, evnt)",
          "",
          "[Added Lines]",
          "100:               this.handleEdit(params, evnt)",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   const bindMouseenter = tableListeners['cell-mouseenter']",
          "116:   const bindMouseleave = tableListeners['cell-mouseleave']",
          "117:   const triggerDblclick = (editRender && editConfig && editOpts.trigger === 'dblclick')",
          "120:   if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {",
          "121:     showEllipsis = hasEllipsis = true",
          "",
          "[Removed Lines]",
          "118:   const params = { $table: $xetable, $grid: $xetable.$xegrid, seq, rowid, row, rowIndex, $rowIndex, _rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, level: rowLevel, visibleData: afterFullData, data: tableData, items }",
          "",
          "[Added Lines]",
          "118:   const params = { $table: $xetable, $grid: $xetable.$xegrid, isEdit: false, seq, rowid, row, rowIndex, $rowIndex, _rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, level: rowLevel, visibleData: afterFullData, data: tableData, items }",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:     const { slots, editRender, formatter } = column",
          "817:     const compConf = VXETable.renderer.get(editRender.name)",
          "818:     const rtEdit = compConf ? (compConf.renderTableEdit || compConf.renderEdit) : null",
          "819:     if (isEdit) {",
          "820:       if (slots && slots.edit) {",
          "822:       }",
          "823:       if (rtEdit) {",
          "825:       }",
          "826:       return []",
          "827:     }",
          "828:     if (slots && slots.default) {",
          "830:     }",
          "831:     if (formatter) {",
          "832:       return [",
          "833:         h('span', {",
          "834:           class: 'vxe-cell--label'",
          "836:       ]",
          "837:     }",
          "839:   }",
          "840: }",
          "",
          "[Removed Lines]",
          "821:         return $table.callSlot(slots.edit, params, h)",
          "824:         return getSlotVNs(rtEdit.call($table, h, editRender, Object.assign({ $type: 'edit' }, params)))",
          "829:       return $table.callSlot(slots.default, params, h)",
          "835:         }, [getDefaultCellLabel(params)])",
          "838:     return Cell.renderDefaultCell.call(_vm, h, params)",
          "",
          "[Added Lines]",
          "819:     const cellParams = Object.assign({ $type: '', isEdit }, params)",
          "822:         return $table.callSlot(slots.edit, cellParams, h)",
          "825:         return getSlotVNs(rtEdit.call($table, h, editRender, cellParams))",
          "830:       return $table.callSlot(slots.default, cellParams, h)",
          "836:         }, [getDefaultCellLabel(cellParams)])",
          "839:     return Cell.renderDefaultCell.call(_vm, h, cellParams)",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1887:       const columnList = XEUtils.orderBy(this.collectColumn, 'renderSortNumber')",
          "1888:       this.collectColumn = columnList",
          "1889:       const tableFullColumn = getColumnList(columnList)",
          "",
          "[Removed Lines]",
          "1885:   refreshColumn (resiveOrder) {",
          "1886:     if (resiveOrder) {",
          "",
          "[Added Lines]",
          "1885:   refreshColumn (initOrder) {",
          "1886:     if (initOrder) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2803:             if (selected.row && selected.column) {",
          "2804:               evnt.stopPropagation()",
          "2805:               evnt.preventDefault()",
          "2807:             }",
          "2808:           }",
          "2809:         } else if (isContextMenu) {",
          "",
          "[Removed Lines]",
          "2806:               this.handleActived(selected.args, evnt)",
          "",
          "[Added Lines]",
          "2806:               this.handleEdit(selected.args, evnt)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2915:                   backMethod(params)",
          "2916:                 } else {",
          "2917:                   setCellValue(selected.row, selected.column, null)",
          "2919:                 }",
          "2920:                 this.emitEvent('cell-backspace-value', params, evnt)",
          "2921:               }",
          "",
          "[Removed Lines]",
          "2918:                   this.handleActived(selected.args, evnt)",
          "",
          "[Added Lines]",
          "2918:                   this.handleEdit(selected.args, evnt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2959:                 editMethod(params)",
          "2960:               } else {",
          "2961:                 setCellValue(selected.row, selected.column, null)",
          "2963:               }",
          "2964:               const afterEditMethod = editOpts.afterEditMethod",
          "2965:               if (afterEditMethod) {",
          "",
          "[Removed Lines]",
          "2962:                 this.handleActived(selected.args, evnt)",
          "",
          "[Added Lines]",
          "2962:                 this.handleEdit(selected.args, evnt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4082:     this.checkValidate('blur')",
          "4083:       .catch(e => e)",
          "4084:       .then(() => {",
          "4086:           .then(() => this.checkValidate('change'))",
          "4087:           .catch(e => e)",
          "4088:       })",
          "",
          "[Removed Lines]",
          "4085:         this.handleActived(params, evnt)",
          "",
          "[Added Lines]",
          "4085:         this.handleEdit(params, evnt)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4173:           this.checkValidate('blur')",
          "4174:             .catch(e => e)",
          "4175:             .then(() => {",
          "4177:                 .then(() => this.checkValidate('change'))",
          "4178:                 .catch(e => e)",
          "4179:             })",
          "4180:         } else if (editOpts.mode === 'cell') {",
          "4182:             .then(() => this.checkValidate('change'))",
          "4183:             .catch(e => e)",
          "4184:         }",
          "",
          "[Removed Lines]",
          "4176:               this.handleActived(params, evnt)",
          "4181:           this.handleActived(params, evnt)",
          "",
          "[Added Lines]",
          "4176:               this.handleEdit(params, evnt)",
          "4181:           this.handleEdit(params, evnt)",
          "",
          "---------------"
        ],
        "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
          "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:       default: () => XEUtils.eqNull(GlobalConfig.textarea.placeholder) ? GlobalConfig.i18n('vxe.base.pleaseInput') : GlobalConfig.textarea.placeholder",
          "24:     },",
          "25:     maxlength: [String, Number],",
          "27:     cols: { type: [String, Number], default: null },",
          "28:     showWordCount: Boolean,",
          "29:     countMethod: Function,",
          "",
          "[Removed Lines]",
          "26:     rows: { type: [String, Number], default: 2 },",
          "",
          "[Added Lines]",
          "26:     rows: { type: [String, Number], default: null },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         [`size--${vSize}`]: vSize,",
          "103:         'is--autosize': autosize,",
          "104:         'is--disabled': disabled,",
          "107:       }],",
          "108:       attrs: {",
          "109:         spellcheck: false",
          "",
          "[Removed Lines]",
          "105:         'def--rows': !XEUtils.eqNull(rows),",
          "106:         'def--cols': !XEUtils.eqNull(cols)",
          "",
          "[Added Lines]",
          "105:         'is--rows': !XEUtils.eqNull(rows),",
          "106:         'is--cols': !XEUtils.eqNull(cols)",
          "",
          "---------------"
        ],
        "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js": [
          "File: packages/tooltip/src/tooltip.js -> packages/tooltip/src/tooltip.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: function renderContent (h, _vm) {",
          "45:   const { $scopedSlots, useHTML, tipContent } = _vm",
          "47:     return h('div', {",
          "48:       key: 1,",
          "49:       class: 'vxe-table--tooltip-content'",
          "51:   }",
          "52:   if (useHTML) {",
          "53:     return h('div', {",
          "",
          "[Removed Lines]",
          "46:   if ($scopedSlots.content) {",
          "50:     }, $scopedSlots.content.call(this, {}))",
          "",
          "[Added Lines]",
          "46:   const contentSlot = $scopedSlots.content",
          "47:   if (contentSlot) {",
          "51:     }, contentSlot.call(this, {}))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     },",
          "103:     value (value) {",
          "104:       if (!this.isUpdate) {",
          "106:       }",
          "107:       this.isUpdate = false",
          "108:     }",
          "",
          "[Removed Lines]",
          "105:         this[value ? 'open' : 'close']()",
          "",
          "[Added Lines]",
          "106:         if (value) {",
          "107:           this.handleVisible(this.target, this.content)",
          "108:         } else {",
          "109:           this.close()",
          "110:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         }",
          "141:       }",
          "142:       if (value) {",
          "144:       }",
          "145:     }",
          "146:   },",
          "",
          "[Removed Lines]",
          "143:         this.open()",
          "",
          "[Added Lines]",
          "148:         this.handleVisible(target, content)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:   },",
          "191:   methods: {",
          "192:     open (target, content) {",
          "194:     },",
          "195:     close () {",
          "196:       this.tipTarget = null",
          "",
          "[Removed Lines]",
          "193:       return this.toVisible(target || this.target, content)",
          "",
          "[Added Lines]",
          "198:       return this.handleVisible(target || this.target, content)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:       }",
          "219:     },",
          "220:     toVisible (target, content) {",
          "221:       if (target) {",
          "222:         const { trigger, enterDelay } = this",
          "223:         this.tipActive = true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:       return this.handleVisible(target, content)",
          "227:     },",
          "228:     handleVisible (target, content) {",
          "229:       const contentSlot = this.$scopedSlots.default",
          "230:       if (!contentSlot && (content === '' || XEUtils.eqNull(content))) {",
          "231:         return this.$nextTick()",
          "232:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "249:       this.tipActive = !!actived",
          "250:     },",
          "251:     clickEvent () {",
          "253:     },",
          "254:     targetMouseenterEvent () {",
          "256:     },",
          "257:     targetMouseleaveEvent () {",
          "258:       const { trigger, enterable, leaveDelay } = this",
          "",
          "[Removed Lines]",
          "252:       this[this.visible ? 'close' : 'open']()",
          "255:       this.open()",
          "",
          "[Added Lines]",
          "264:       if (this.visible) {",
          "265:         this.close()",
          "266:       } else {",
          "267:         this.handleVisible(this.target, this.content)",
          "268:       }",
          "271:       this.handleVisible(this.target, this.content)",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js": [
          "File: packages/v-x-e-table/index.js -> packages/v-x-e-table/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   return VxeUI",
          "65: }",
          "67: class VXETableConfig {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: export function getConfig (key, defaultValue) {",
          "68:   return arguments.length ? XEUtils.get(GlobalConfig, key, defaultValue) : GlobalConfig",
          "69: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   reg,",
          "161:   use,",
          "162:   setConfig,",
          "163:   setIcon,",
          "164:   globalStore,",
          "165:   interceptor,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   getConfig,",
          "",
          "---------------"
        ],
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:           this.emitEvent('valid-error', params)",
          "95:           resolve()",
          "96:         } else {",
          "98:             setTimeout(() => {",
          "99:               resolve(this.showValidTooltip(params))",
          "100:             }, 10)",
          "",
          "[Removed Lines]",
          "97:           this.handleActived(params, { type: 'valid-error', trigger: 'call' }).then(() => {",
          "",
          "[Added Lines]",
          "97:           this.handleEdit(params, { type: 'valid-error', trigger: 'call' }).then(() => {",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:   .vxe-table--empty-placeholder,",
          "1204:   .vxe-table--empty-block {",
          "1205:     min-height: $vxe-table-row-height-default;",
          "1206:     justify-content: center;",
          "1207:     align-items: center;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1205:     color: $vxe-input-placeholder-color;",
          "",
          "---------------"
        ],
        "styles/textarea.scss||styles/textarea.scss": [
          "File: styles/textarea.scss -> styles/textarea.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: .vxe-textarea {",
          "4:   position: relative;",
          "7:     width: 100%;",
          "8:     .vxe-textarea--inner {",
          "9:       width: 100%;",
          "",
          "[Removed Lines]",
          "5:   display: inline-block;",
          "6:   &:not(.def--cols) {",
          "",
          "[Added Lines]",
          "5:   display: inline-flex;",
          "6:   flex-direction: row;",
          "7:   &:not(.is--cols) {",
          "",
          "---------------"
        ],
        "types/column.d.ts||types/column.d.ts": [
          "File: types/column.d.ts -> types/column.d.ts"
        ]
      }
    },
    {
      "candidate_hash": "d6185d290666ce46dd4c0a4c2a64a3be323deb95",
      "candidate_info": {
        "commit_hash": "d6185d290666ce46dd4c0a4c2a64a3be323deb95",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/d6185d290666ce46dd4c0a4c2a64a3be323deb95",
        "files": [
          "package.json",
          "packages/table/module/custom/panel.ts",
          "packages/table/src/cell.ts",
          "packages/table/src/header.ts",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.10.8",
        "before_after_code_files": [
          "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts",
          "packages/table/src/cell.ts||packages/table/src/cell.ts",
          "packages/table/src/header.ts||packages/table/src/header.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts": [
          "File: packages/table/module/custom/panel.ts -> packages/table/module/custom/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   const $xeTable = _vm.$xeTable",
          "327:   const { _e, customStore } = _vm",
          "329:   const { modalOptions, allowVisible, allowSort, allowFixed, allowResizable, checkMethod, visibleMethod } = customOpts",
          "330:   const { maxFixedSize } = columnOpts",
          "331:   const resizableOpts = $xeTable.computeResizableOpts",
          "",
          "[Removed Lines]",
          "328:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xeTable",
          "",
          "[Added Lines]",
          "328:   const { resizable: allResizable, customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xeTable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:             ? h('td', {",
          "467:               class: 'vxe-table-custom-popup--column-item col--resizable'",
          "468:             }, [",
          "470:                 ? h('span', '-')",
          "471:                 : (VxeUINumberInputComponent",
          "472:                     ? h(VxeUINumberInputComponent, {",
          "",
          "[Removed Lines]",
          "469:               column.children && column.children.length",
          "",
          "[Added Lines]",
          "469:               (",
          "470:                 (column.children && column.children.length) ||",
          "471:                 !(XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable))",
          "472:               )",
          "",
          "---------------"
        ],
        "packages/table/src/cell.ts||packages/table/src/cell.ts": [
          "File: packages/table/src/cell.ts -> packages/table/src/cell.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: }",
          "76: function renderCellBaseVNs (h: CreateElement, params: any, content: any) {",
          "78:   const { dragSort } = column",
          "80:   const rowOpts = $table.computeRowOpts",
          "81:   const dragOpts = $table.computeDragOpts",
          "82:   const { showRowIcon, rowVisibleMethod } = dragOpts",
          "83:   if (dragSort && rowOpts.drag && (showRowIcon && (!rowVisibleMethod || rowVisibleMethod({ row, column })))) {",
          "87:   }",
          "88:   return vns",
          "89: }",
          "",
          "[Removed Lines]",
          "77:   const { $table, column, row } = params",
          "79:   const vns: any[] = XEUtils.isArray(content) ? content : [content]",
          "84:     vns.unshift(",
          "85:       renderCellDragIcon(h, params)",
          "86:     )",
          "",
          "[Added Lines]",
          "77:   const { $table, column, row, level } = params",
          "79:   const tableProps = $table",
          "80:   const { treeConfig } = tableProps",
          "84:   const vns: any[] = XEUtils.isArray(content) ? content : [content]",
          "86:     if (!treeConfig || !level) {",
          "87:       vns.unshift(",
          "88:         renderCellDragIcon(h, params)",
          "89:       )",
          "90:     }",
          "",
          "---------------"
        ],
        "packages/table/src/header.ts||packages/table/src/header.ts": [
          "File: packages/table/src/header.ts -> packages/table/src/header.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   },",
          "57:   render (h: CreateElement) {",
          "58:     const { _e, $parent: $xetable, fixedType, headerColumn, tableColumn, fixedColumn } = this",
          "60:     let headerGroups = headerColumn",
          "61:     let renderColumnList = tableColumn",
          "62:     if (isGroup) {",
          "",
          "[Removed Lines]",
          "59:     const { $listeners: tableListeners, tId, isGroup, visibleColumn, resizable, border, columnKey, headerRowClassName, headerCellClassName, headerRowStyle, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, highlightCurrentColumn, currentColumn, scrollXLoad, overflowX, scrollbarWidth, sortOpts, mouseConfig, columnOpts } = $xetable",
          "",
          "[Added Lines]",
          "59:     const { $listeners: tableListeners, tId, isGroup, visibleColumn, resizable: allResizable, border, columnKey, headerRowClassName, headerCellClassName, headerRowStyle, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, highlightCurrentColumn, currentColumn, scrollXLoad, overflowX, scrollbarWidth, sortOpts, mouseConfig, columnOpts } = $xetable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                 ? h('div', {",
          "193:                   class: ['vxe-resizable', {",
          "194:                     'is--line': !border || border === 'none'",
          "",
          "[Removed Lines]",
          "191:               !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || resizable))",
          "",
          "[Added Lines]",
          "191:               !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable))",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   }",
          "340: }",
          "342: function clearRowDropTarget ($xeTable: any) {",
          "343:   const el = $xeTable.$el",
          "344:   if (el) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: function updateRowDropOrigin ($xeTable: any, row: any) {",
          "343:   const el = $xeTable.$el",
          "344:   if (el) {",
          "345:     const clss = 'row--drag-origin'",
          "346:     const rowid = getRowid($xeTable, row)",
          "347:     XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${rowid}\"]`), (elem) => {",
          "348:       addClass(elem, clss)",
          "349:     })",
          "350:   }",
          "351: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:   }",
          "350: }",
          "352: function showRowDropTip (evnt: DragEvent | MouseEvent, $xeTable: any) {",
          "353:   const rdTipEl = $xeTable.$refs.refRowDragTipElem as HTMLDivElement",
          "354:   if (!rdTipEl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363: function updateRowDropTarget ($xeTable: any, row: any, dragPos: string) {",
          "364:   const el = $xeTable.$el",
          "365:   if (el) {",
          "366:     const clss = 'row--drag-active-target'",
          "367:     const rowid = getRowid($xeTable, row)",
          "368:     XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${rowid}\"]`), (elem: any) => {",
          "369:       addClass(elem, clss)",
          "370:       elem.setAttribute('drag-pos', dragPos)",
          "371:     })",
          "372:   }",
          "373: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4588:     const treeOpts = $xeTable.computeTreeOpts",
          "4589:     const { transform } = treeOpts",
          "4590:     const { dragRow } = reactData",
          "4592:     if (prevDragRow && dragRow) {",
          "4594:       if (prevDragRow !== dragRow) {",
          "",
          "[Removed Lines]",
          "4591:     const { afterFullData, tableFullData, prevDragRow, prevDragPos } = internalData",
          "",
          "[Added Lines]",
          "4614:     const { afterFullData, afterTreeFullData, tableFullData, tableFullTreeData, prevDragRow, prevDragPos } = internalData",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4605:           }",
          "4606:           const dragOffsetIndex = prevDragPos === 'bottom' ? 1 : 0",
          "4621:           reactData.isDragRowMove = true",
          "4622:           $xeTable.cacheRowMap()",
          "",
          "[Removed Lines]",
          "4609:           const oafIndex = $xeTable.findRowIndexOf(afterFullData, dragRow)",
          "4610:           const otfIndex = $xeTable.findRowIndexOf(tableFullData, dragRow)",
          "4611:           afterFullData.splice(oafIndex, 1)",
          "4612:           tableFullData.splice(otfIndex, 1)",
          "4614:           const pafIndex = $xeTable.findRowIndexOf(afterFullData, prevDragRow)",
          "4615:           const ptfIndex = $xeTable.findRowIndexOf(tableFullData, prevDragRow)",
          "4616:           const nafIndex = pafIndex + dragOffsetIndex",
          "4617:           const ntfIndex = ptfIndex + dragOffsetIndex",
          "4618:           afterFullData.splice(nafIndex, 0, dragRow)",
          "4619:           tableFullData.splice(ntfIndex, 0, dragRow)",
          "",
          "[Added Lines]",
          "4631:           let oafIndex = -1",
          "4632:           let nafIndex = -1",
          "4633:           if (treeConfig) {",
          "4635:             oafIndex = $xeTable.findRowIndexOf(afterTreeFullData, dragRow)",
          "4636:             const otfIndex = $xeTable.findRowIndexOf(tableFullTreeData, dragRow)",
          "4637:             afterTreeFullData.splice(oafIndex, 1)",
          "4638:             tableFullTreeData.splice(otfIndex, 1)",
          "4641:             const pafIndex = $xeTable.findRowIndexOf(afterTreeFullData, prevDragRow)",
          "4642:             const ptfIndex = $xeTable.findRowIndexOf(tableFullTreeData, prevDragRow)",
          "4643:             nafIndex = pafIndex + dragOffsetIndex",
          "4644:             const ntfIndex = ptfIndex + dragOffsetIndex",
          "4645:             afterTreeFullData.splice(nafIndex, 0, dragRow)",
          "4646:             tableFullTreeData.splice(ntfIndex, 0, dragRow)",
          "4647:           } else {",
          "4649:             oafIndex = $xeTable.findRowIndexOf(afterFullData, dragRow)",
          "4650:             const otfIndex = $xeTable.findRowIndexOf(tableFullData, dragRow)",
          "4651:             afterFullData.splice(oafIndex, 1)",
          "4652:             tableFullData.splice(otfIndex, 1)",
          "4654:             const pafIndex = $xeTable.findRowIndexOf(afterFullData, prevDragRow)",
          "4655:             const ptfIndex = $xeTable.findRowIndexOf(tableFullData, prevDragRow)",
          "4656:             nafIndex = pafIndex + dragOffsetIndex",
          "4657:             const ntfIndex = ptfIndex + dragOffsetIndex",
          "4658:             afterFullData.splice(nafIndex, 0, dragRow)",
          "4659:             tableFullData.splice(ntfIndex, 0, dragRow)",
          "4660:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4670:       const { dragRow } = reactData",
          "4671:       const offsetY = evnt.clientY - trEl.getBoundingClientRect().y",
          "4672:       const dragPos = offsetY < trEl.clientHeight / 2 ? 'top' : 'bottom'",
          "4675:       internalData.prevDragRow = row",
          "4676:       internalData.prevDragPos = dragPos",
          "4677:       $xeTable.dispatchEvent('row-dragover', {",
          "",
          "[Removed Lines]",
          "4673:       addClass(trEl, 'row--drag-active-target')",
          "4674:       trEl.setAttribute('drag-pos', dragPos)",
          "",
          "[Added Lines]",
          "4714:       updateRowDropTarget($xeTable, row, dragPos)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4703:     }",
          "4704:     reactData.dragRow = row",
          "4705:     trEl.draggable = true",
          "4707:     showRowDropTip(evnt, $xeTable)",
          "4708:     updateRowDropTipContent($xeTable, tdEl)",
          "4709:     $xeTable.dispatchEvent('row-dragstart', params, evnt)",
          "",
          "[Removed Lines]",
          "4706:     addClass(trEl, 'row--drag-origin')",
          "",
          "[Added Lines]",
          "4746:     updateRowDropOrigin($xeTable, row)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eba99e7dcaa46e492e8e90f7c40da89621b8faa8",
      "candidate_info": {
        "commit_hash": "eba99e7dcaa46e492e8e90f7c40da89621b8faa8",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/eba99e7dcaa46e492e8e90f7c40da89621b8faa8",
        "files": [
          "packages/filter/src/mixin.js",
          "packages/table/src/methods.js"
        ],
        "message": "\u589e\u52a0\u65b9\u6cd5 updateFilterOptionStatus",
        "before_after_code_files": [
          "packages/filter/src/mixin.js||packages/filter/src/mixin.js",
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/filter/src/mixin.js||packages/filter/src/mixin.js": [
          "File: packages/filter/src/mixin.js -> packages/filter/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:         })",
          "262:       }",
          "263:       return this.updateData()",
          "264:     }",
          "265:   }",
          "266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     },",
          "265:     _updateFilterOptionStatus (item, checked) {",
          "266:       item._checked = checked",
          "267:       item.checked = checked",
          "268:       return this.$nextTick()",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5478: }",
          "5483: funcs.forEach(name => {",
          "5484:   Methods[name] = function (...args) {",
          "",
          "[Removed Lines]",
          "5481: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,getPrintHtml,exportData,openImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom'.split(',')",
          "",
          "[Added Lines]",
          "5481: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,getPrintHtml,exportData,openImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom'.split(',')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bb7759d96cc2ae43e6959af331df0d87a601997",
      "candidate_info": {
        "commit_hash": "0bb7759d96cc2ae43e6959af331df0d87a601997",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/0bb7759d96cc2ae43e6959af331df0d87a601997",
        "files": [
          "package.json",
          "packages/locale/lang/zh-CHT.ts",
          "packages/table/src/methods.ts",
          "styles/components/table.scss"
        ],
        "message": "releases 3.11.17",
        "before_after_code_files": [
          "packages/locale/lang/zh-CHT.ts||packages/locale/lang/zh-CHT.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/locale/lang/zh-CHT.ts||packages/locale/lang/zh-CHT.ts": [
          "File: packages/locale/lang/zh-CHT.ts -> packages/locale/lang/zh-CHT.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:       notExp: '\u8a72\u700f\u89bd\u5668\u4e0d\u652f\u63f4\u532f\u5165/\u532f\u51fa\u529f\u80fd',",
          "48:       impFields: '\u532f\u5165\u5931\u6557\uff0c\u8acb\u6aa2\u67e5\u6b04\u4f4d\u540d\u7a31\u548c\u8cc7\u6599\u683c\u5f0f\u662f\u5426\u6b63\u78ba',",
          "49:       treeNotImp: '\u6a39\u8868\u683c\u4e0d\u652f\u63f4\u5c0e\u5165',",
          "51:     },",
          "52:     table: {",
          "53:       emptyText: '\u66ab\u7121\u6578\u64da',",
          "",
          "[Removed Lines]",
          "50:       reqPlugin: '\u53ef\u9009\u6269\u5c55\u63d2\u4ef6 \"{1}\" https://vxeui.com/other{0}/#/{1}/install'",
          "",
          "[Added Lines]",
          "50:       reqPlugin: '\u53ef\u9078\u64f4\u5c55\u63d2\u4ef6 \"{1}\" https://vxeui.com/other{0}/#/{1}/install'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       customCancel: '\u53d6\u6d88',",
          "74:       customRestore: '\u6062\u5fa9\u9810\u8a2d',",
          "75:       maxFixedCol: '\u6700\u5927\u51cd\u7d50\u5217\u7684\u6578\u91cf\u4e0d\u80fd\u8d85\u904e {0} \u500b',",
          "77:     },",
          "78:     grid: {",
          "79:       selectOneRecord: '\u8acb\u81f3\u5c11\u9078\u64c7\u4e00\u7b46\u8a18\u9304\uff01',",
          "",
          "[Removed Lines]",
          "76:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "[Added Lines]",
          "76:       dragTip: '\u79fb\u52d5\uff1a{0}'",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "400: const updateColDropOrigin = ($xeTable: any, column: VxeTableDefines.ColumnInfo) => {",
          "401:   const el = $xeTable.$el as HTMLElement",
          "402:   if (el) {",
          "403:     const clss = 'col--drag-origin'",
          "405:       addClass(elem, clss)",
          "406:     })",
          "407:   }",
          "",
          "[Removed Lines]",
          "404:     XEUtils.arrayEach(el.querySelectorAll(`[colid=\"${column.id}\"]`), (elem) => {",
          "",
          "[Added Lines]",
          "403:     const colQuerys: string[] = []",
          "404:     XEUtils.eachTree([column], item => {",
          "405:       colQuerys.push(`[colid=\"${item.id}\"]`)",
          "406:     })",
          "408:     XEUtils.arrayEach(el.querySelectorAll(colQuerys.join(',')), (elem) => {",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1281:     width: 1px;",
          "1282:     background-color: var(--vxe-ui-font-primary-color);",
          "1283:   }",
          "1285:     &.col--drag-origin {",
          "1286:       & > .vxe-cell {",
          "1287:         opacity: 0.5;",
          "",
          "[Removed Lines]",
          "1284:   .vxe-header--column {",
          "",
          "[Added Lines]",
          "1284:   .vxe-header--column,",
          "1285:   .vxe-body--column,",
          "1286:   .vxe-footer--column {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43dc20e6dcc0aa72d96f56c836d78a3b3f3db646",
      "candidate_info": {
        "commit_hash": "43dc20e6dcc0aa72d96f56c836d78a3b3f3db646",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/43dc20e6dcc0aa72d96f56c836d78a3b3f3db646",
        "files": [
          "package.json",
          "packages/table/src/methods.ts",
          "packages/table/src/util.ts"
        ],
        "message": "releases 3.11.2",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/util.ts||packages/table/src/util.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   }",
          "466: }",
          "468: const Methods = {",
          "469:   callSlot (slotFunc: any, params: any, h: any, vNodes: any) {",
          "470:     if (slotFunc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: const handleScrollToRowColumn = ($xeTable: any, fieldOrColumn: string | VxeTableDefines.ColumnInfo | null, row?: any) => {",
          "469:   const internalData = $xeTable",
          "471:   const { fullColumnIdData } = internalData",
          "472:   const column = handleFieldOrColumn($xeTable, fieldOrColumn)",
          "473:   if (column && fullColumnIdData[column.id]) {",
          "474:     return colToVisible($xeTable, column, row)",
          "475:   }",
          "476:   return $xeTable.$nextTick()",
          "477: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6311:   scrollToRow (row: any, fieldOrColumn: any) {",
          "6312:     const rest = []",
          "6313:     if (row) {",
          "6314:       if (this.treeConfig) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6323:     const $xeTable = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6318:       }",
          "6319:     }",
          "6320:     if (fieldOrColumn) {",
          "6322:     }",
          "6323:     return Promise.all(rest)",
          "6324:   },",
          "",
          "[Removed Lines]",
          "6321:       rest.push(this.scrollToColumn(fieldOrColumn))",
          "",
          "[Added Lines]",
          "6334:       rest.push(handleScrollToRowColumn($xeTable, fieldOrColumn, row))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6329:   scrollToColumn (fieldOrColumn: any) {",
          "6335:   },",
          "",
          "[Removed Lines]",
          "6330:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "6331:     if (column && this.fullColumnMap.has(column)) {",
          "6332:       return colToVisible(this, column)",
          "6333:     }",
          "6334:     return this.$nextTick()",
          "",
          "[Added Lines]",
          "6343:     const $xeTable = this",
          "6345:     return handleScrollToRowColumn($xeTable, fieldOrColumn)",
          "",
          "---------------"
        ],
        "packages/table/src/util.ts||packages/table/src/util.ts": [
          "File: packages/table/src/util.ts -> packages/table/src/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   return Promise.resolve()",
          "396: }",
          "399:   const { columnStore, scrollXLoad, visibleColumn } = $xeTable",
          "400:   const tableBody: any = $xeTable.$refs.tableBody",
          "401:   const { leftList, rightList } = columnStore",
          "",
          "[Removed Lines]",
          "398: export function colToVisible ($xeTable: any, column: any) {",
          "",
          "[Added Lines]",
          "398: export function colToVisible ($xeTable: any, column: any, row?: any) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:   if (bodyElem) {",
          "415:     const bodyWidth = bodyElem.clientWidth",
          "416:     const bodyScrollLeft = bodyElem.scrollLeft",
          "418:     if (tdElem) {",
          "420:       const cellWidth = tdElem.clientWidth",
          "422:       if (tdOffsetLeft < (bodyScrollLeft + offsetFixedLeft)) {",
          "",
          "[Removed Lines]",
          "417:     const tdElem = bodyElem.querySelector(`.${column.id}`)",
          "419:       const tdOffsetLeft = tdElem.offsetLeft + (tdElem.offsetParent ? tdElem.offsetParent.offsetLeft : 0)",
          "",
          "[Added Lines]",
          "417:     let tdElem: HTMLTableCellElement | null = null",
          "418:     if (row) {",
          "419:       const rowid = getRowid($xeTable, row)",
          "420:       tdElem = bodyElem.querySelector(`[rowid=\"${rowid}\"] .${column.id}`)",
          "421:     }",
          "422:     if (!tdElem) {",
          "423:       tdElem = bodyElem.querySelector(`.${column.id}`)",
          "424:     }",
          "426:       const tdOffsetParent = tdElem.offsetParent as HTMLElement",
          "427:       const tdOffsetLeft = tdElem.offsetLeft + (tdOffsetParent ? tdOffsetParent.offsetLeft : 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}