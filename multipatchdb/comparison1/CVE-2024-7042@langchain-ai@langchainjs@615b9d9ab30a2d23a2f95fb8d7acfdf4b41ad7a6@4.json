{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f67f0c8cb6dc350ebae3c5a1b7587fbfbb7fc937",
      "candidate_info": {
        "commit_hash": "f67f0c8cb6dc350ebae3c5a1b7587fbfbb7fc937",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/f67f0c8cb6dc350ebae3c5a1b7587fbfbb7fc937",
        "files": [
          "dependency_range_tests/docker-compose.yml",
          "dependency_range_tests/scripts/with_standard_tests/anthropic/node/package.json",
          "dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/cohere/node/package.json",
          "dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/community/node/package.json",
          "dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/google-vertexai/node/package.json",
          "dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/node/package.json",
          "dependency_range_tests/scripts/with_standard_tests/openai/node/package.json",
          "dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh",
          "examples/package.json",
          "langchain-core/package.json",
          "langchain-core/src/singletons/tracer.ts",
          "langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "langchain-core/src/tracers/tracer_langchain.ts",
          "langchain/package.json",
          "libs/langchain-community/package.json",
          "yarn.lock"
        ],
        "message": "fix(core): Improve interoperability between different langsmith versions (#7297)",
        "before_after_code_files": [
          "dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh",
          "dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh",
          "langchain-core/src/singletons/tracer.ts||langchain-core/src/singletons/tracer.ts",
          "langchain-core/src/tracers/tests/langsmith_interop.test.ts||langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "langchain-core/src/tracers/tracer_langchain.ts||langchain-core/src/tracers/tracer_langchain.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-latest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: # Navigate back to monorepo root and install dependencies",
          "29: cd \"$monorepo_dir\"",
          "30: yarn",
          "32: # Navigate into `@langchain/anthropic` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/anthropic/test-with-lowest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # Navigate back to monorepo root and install dependencies",
          "27: cd \"$monorepo_dir\"",
          "28: yarn",
          "30: # Navigate into `@langchain/anthropic` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/cohere/test-with-latest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/cohere` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/cohere/test-with-lowest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/cohere` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/community/test-with-latest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/community` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/community/test-with-lowest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/package` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-latest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/google-vertexai` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "30: cat ./package.json",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/google-vertexai/test-with-lowest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/package` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh||dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/openai/test-with-latest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/openai` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh||dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh -> dependency_range_tests/scripts/with_standard_tests/openai/test-with-lowest-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: # Navigate back to monorepo root and install dependencies",
          "28: cd \"$monorepo_dir\"",
          "29: yarn",
          "31: # Navigate into `@langchain/package` to build and run tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: touch yarn.lock",
          "",
          "---------------"
        ],
        "langchain-core/src/singletons/tracer.ts||langchain-core/src/singletons/tracer.ts": [
          "File: langchain-core/src/singletons/tracer.ts -> langchain-core/src/singletons/tracer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   }",
          "17:   return client;",
          "18: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: export const setDefaultLangChainClientSingleton = (newClient: Client) => {",
          "21:   client = newClient;",
          "22: };",
          "",
          "---------------"
        ],
        "langchain-core/src/tracers/tests/langsmith_interop.test.ts||langchain-core/src/tracers/tests/langsmith_interop.test.ts": [
          "File: langchain-core/src/tracers/tests/langsmith_interop.test.ts -> langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   expect,",
          "12: } from \"@jest/globals\";",
          "13: import { traceable } from \"langsmith/traceable\";",
          "15: import { RunnableLambda } from \"../../runnables/base.js\";",
          "16: import { BaseMessage, HumanMessage } from \"../../messages/index.js\";",
          "18: let fetchMock: any;",
          "20: const originalTracingEnvValue = process.env.LANGCHAIN_TRACING_V2;",
          "22: beforeEach(() => {",
          "23:   fetchMock = jest.spyOn(global, \"fetch\").mockImplementation(() =>",
          "24:     Promise.resolve({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import { Client } from \"langsmith\";",
          "18: import { setDefaultLangChainClientSingleton } from \"../../singletons/tracer.js\";",
          "24: const client = new Client({",
          "25:   autoBatchTracing: false,",
          "26: });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:       },",
          "30:     } as any)",
          "31:   );",
          "32:   process.env.LANGCHAIN_TRACING_V2 = \"true\";",
          "33: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   setDefaultLangChainClientSingleton(client);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:         await new Promise((resolve) => setTimeout(resolve, 300));",
          "51:         return msg.content + name;",
          "52:       },",
          "54:     );",
          "56:     const root = RunnableLambda.from(async (messages: BaseMessage[]) => {",
          "",
          "[Removed Lines]",
          "53:       { name: \"aiGreet\", tracingEnabled: true }",
          "",
          "[Added Lines]",
          "60:       { name: \"aiGreet\", tracingEnabled: true, client }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:         expect(getContextVariable(\"foo\")).toEqual(\"baz\");",
          "198:         return msg.content + name;",
          "199:       },",
          "201:     );",
          "203:     const root = RunnableLambda.from(async (messages: BaseMessage[]) => {",
          "",
          "[Removed Lines]",
          "200:       { name: \"aiGreet\", tracingEnabled: true }",
          "",
          "[Added Lines]",
          "207:       { name: \"aiGreet\", tracingEnabled: true, client }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:         const contents = await nested.invoke([msg]);",
          "486:         return contents[0] + name;",
          "487:       },",
          "489:     );",
          "491:     await aiGreet(new HumanMessage({ content: \"Hello!\" }), \"mitochondria\");",
          "",
          "[Removed Lines]",
          "488:       { name: \"aiGreet\", tracingEnabled: true }",
          "",
          "[Added Lines]",
          "495:       { name: \"aiGreet\", tracingEnabled: true, client }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "632:         expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "633:         return contents[0] + name;",
          "634:       },",
          "636:     );",
          "638:     await aiGreet(new HumanMessage({ content: \"Hello!\" }), \"mitochondria\");",
          "",
          "[Removed Lines]",
          "635:       { name: \"aiGreet\", tracingEnabled: true }",
          "",
          "[Added Lines]",
          "642:       { name: \"aiGreet\", tracingEnabled: true, client }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "781:           yield letter;",
          "782:         }",
          "783:       },",
          "785:     );",
          "787:     for await (const _ of aiGreet(",
          "",
          "[Removed Lines]",
          "784:       { name: \"aiGreet\", tracingEnabled: true }",
          "",
          "[Added Lines]",
          "791:       { name: \"aiGreet\", tracingEnabled: true, client }",
          "",
          "---------------"
        ],
        "langchain-core/src/tracers/tracer_langchain.ts||langchain-core/src/tracers/tracer_langchain.ts": [
          "File: langchain-core/src/tracers/tracer_langchain.ts -> langchain-core/src/tracers/tracer_langchain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { RunTree } from \"langsmith/run_trees\";",
          "3: import { getCurrentRunTree } from \"langsmith/singletons/traceable\";",
          "",
          "[Removed Lines]",
          "1: import { Client } from \"langsmith\";",
          "",
          "[Added Lines]",
          "1: import type { Client, LangSmithTracingClientInterface } from \"langsmith\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: export interface LangChainTracerFields extends BaseCallbackHandlerInput {",
          "37:   exampleId?: string;",
          "38:   projectName?: string;",
          "40: }",
          "42: export class LangChainTracer",
          "",
          "[Removed Lines]",
          "39:   client?: Client;",
          "",
          "[Added Lines]",
          "39:   client?: LangSmithTracingClientInterface;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:   exampleId?: string;",
          "54:   constructor(fields: LangChainTracerFields = {}) {",
          "55:     super(fields);",
          "",
          "[Removed Lines]",
          "52:   client: Client;",
          "",
          "[Added Lines]",
          "52:   client: LangSmithTracingClientInterface;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:         parent_run: undefined,",
          "160:         project_name: this.projectName,",
          "161:         reference_example_id: this.exampleId,",
          "162:         tracingEnabled: true,",
          "",
          "[Removed Lines]",
          "159:         client: this.client,",
          "",
          "[Added Lines]",
          "159:         client: this.client as Client,",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11829:     jsdom: ^22.1.0",
          "11830:     jsonwebtoken: ^9.0.2",
          "11831:     langchain: \">=0.2.3 <0.3.0 || >=0.3.4 <0.4.0\"",
          "11833:     llmonitor: ^0.5.9",
          "11834:     lodash: ^4.17.21",
          "11835:     lunary: ^0.7.10",
          "",
          "[Removed Lines]",
          "11832:     langsmith: ^0.2.0",
          "",
          "[Added Lines]",
          "11832:     langsmith: ^0.2.8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12263:     jest: ^29.5.0",
          "12264:     jest-environment-node: ^29.6.4",
          "12265:     js-tiktoken: ^1.0.12",
          "12267:     ml-matrix: ^6.10.4",
          "12268:     mustache: ^4.2.0",
          "12269:     p-queue: ^6.6.2",
          "",
          "[Removed Lines]",
          "12266:     langsmith: ^0.2.0",
          "",
          "[Added Lines]",
          "12266:     langsmith: ^0.2.8",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27675:     ioredis: ^5.3.2",
          "27676:     js-yaml: ^4.1.0",
          "27677:     langchain: \"workspace:*\"",
          "27679:     mongodb: ^6.3.0",
          "27680:     pg: ^8.11.0",
          "27681:     pickleparser: ^0.2.1",
          "",
          "[Removed Lines]",
          "27678:     langsmith: ^0.2.0",
          "",
          "[Added Lines]",
          "27678:     langsmith: ^0.2.8",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "33329:     js-tiktoken: ^1.0.12",
          "33330:     js-yaml: ^4.1.0",
          "33331:     jsonpointer: ^5.0.1",
          "33333:     openai: ^4.41.1",
          "33334:     openapi-types: ^12.1.3",
          "33335:     p-retry: 4",
          "",
          "[Removed Lines]",
          "33332:     langsmith: ^0.2.0",
          "",
          "[Added Lines]",
          "33332:     langsmith: ^0.2.8",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "33408:   languageName: unknown",
          "33409:   linkType: soft",
          "33414:   dependencies:",
          "33415:     \"@types/uuid\": ^10.0.0",
          "33416:     commander: ^10.0.1",
          "",
          "[Removed Lines]",
          "33411: \"langsmith@npm:^0.2.0\":",
          "33412:   version: 0.2.0",
          "33413:   resolution: \"langsmith@npm:0.2.0\"",
          "",
          "[Added Lines]",
          "33411: \"langsmith@npm:^0.2.8\":",
          "33412:   version: 0.2.8",
          "33413:   resolution: \"langsmith@npm:0.2.8\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "33423:   peerDependenciesMeta:",
          "33424:     openai:",
          "33425:       optional: true",
          "33427:   languageName: node",
          "33428:   linkType: hard",
          "",
          "[Removed Lines]",
          "33426:   checksum: 0cd92d0e31526d309af197a3502c93a00ac8c09f6b2864161a18a5c1e8b95b0e8203bad2dfe3b4beb26055fc815a8d70730592a58c9af7e202917b13d01f695c",
          "",
          "[Added Lines]",
          "33426:   checksum: 8695df08a09b9885b0308c66fbf9802edbe20e286fec3db8faa75ed1893a7aafae014441e311677bb60abb33af49da7f7d8404f55fffbdad5aec61cf65215fc8",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a08a039bd6fc896bc9dce8bdfc6fb3781c00424",
      "candidate_info": {
        "commit_hash": "2a08a039bd6fc896bc9dce8bdfc6fb3781c00424",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/2a08a039bd6fc896bc9dce8bdfc6fb3781c00424",
        "files": [
          "docs/core_docs/docs/integrations/chat/openai.ipynb",
          "libs/langchain-openai/package.json",
          "libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "libs/langchain-openai/src/types.ts",
          "yarn.lock"
        ],
        "message": "feat(openai): Support audio output (#7012)",
        "before_after_code_files": [
          "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/chat_models.int.test.ts||libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "libs/langchain-openai/src/types.ts||libs/langchain-openai/src/types.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts": [
          "File: libs/langchain-openai/src/chat_models.ts -> libs/langchain-openai/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   isAIMessage,",
          "17:   convertToChunk,",
          "18:   UsageMetadata,",
          "19: } from \"@langchain/core/messages\";",
          "20: import {",
          "21:   type ChatGeneration,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   MessageContent,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:           system_fingerprint: rawResponse.system_fingerprint,",
          "175:         };",
          "176:       }",
          "177:       return new AIMessage({",
          "179:         tool_calls: toolCalls,",
          "180:         invalid_tool_calls: invalidToolCalls,",
          "181:         additional_kwargs,",
          "",
          "[Removed Lines]",
          "178:         content: message.content || \"\",",
          "",
          "[Added Lines]",
          "178:       const content = message.audio ? [message.audio] : message.content;",
          "181:         content: content || \"\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:   includeRawResponse?: boolean",
          "197: ) {",
          "198:   const role = delta.role ?? defaultRole;",
          "200:   let additional_kwargs: Record<string, unknown>;",
          "201:   if (delta.function_call) {",
          "202:     additional_kwargs = {",
          "",
          "[Removed Lines]",
          "199:   const content = delta.content ?? \"\";",
          "",
          "[Added Lines]",
          "202:   let content: MessageContent;",
          "203:   if (delta.audio) {",
          "204:     content = [",
          "205:       {",
          "206:         ...delta.audio,",
          "207:         index: rawResponse.choices[0].index,",
          "208:       },",
          "209:     ];",
          "210:   } else {",
          "211:     content = delta.content ?? \"\";",
          "212:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:   strict?: boolean;",
          "375: }",
          "377: export interface ChatOpenAIFields",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:   modalities?: Array<OpenAIClient.Chat.ChatCompletionModality>;",
          "407:   audio?: OpenAIClient.Chat.ChatCompletionAudioParam;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "959:   supportsStrictToolCalling?: boolean;",
          "961:   constructor(",
          "962:     fields?: ChatOpenAIFields,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1031:   audio?: OpenAIClient.Chat.ChatCompletionAudioParam;",
          "1033:   modalities?: Array<OpenAIClient.Chat.ChatCompletionModality>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1026:     this.stopSequences = this?.stop;",
          "1027:     this.user = fields?.user;",
          "1028:     this.__includeRawResponse = fields?.__includeRawResponse;",
          "1030:     if (this.azureOpenAIApiKey || this.azureADTokenProvider) {",
          "1031:       if (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1103:     this.audio = fields?.audio;",
          "1104:     this.modalities = fields?.modalities;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1190:       seed: options?.seed,",
          "1191:       ...streamOptionsConfig,",
          "1192:       parallel_tool_calls: options?.parallel_tool_calls,",
          "1193:       ...this.modelKwargs,",
          "1194:     };",
          "1195:     return params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:       ...(this.audio || options?.audio",
          "1270:         ? { audio: this.audio || options?.audio }",
          "1271:         : {}),",
          "1272:       ...(this.modalities || options?.modalities",
          "1273:         ? { modalities: this.modalities || options?.modalities }",
          "1274:         : {}),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1241:     const streamIterable = await this.completionWithRetry(params, options);",
          "1242:     let usage: OpenAIClient.Completions.CompletionUsage | undefined;",
          "1243:     for await (const data of streamIterable) {",
          "1245:       if (data.usage) {",
          "1246:         usage = data.usage;",
          "1247:       }",
          "",
          "[Removed Lines]",
          "1244:       const choice = data?.choices[0];",
          "",
          "[Added Lines]",
          "1326:       const choice = data?.choices?.[0];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1264:         prompt: options.promptIndex ?? 0,",
          "1265:         completion: choice.index ?? 0,",
          "1266:       };",
          "1274:       const generationInfo: Record<string, any> = { ...newTokenIndices };",
          "1275:       if (choice.finish_reason != null) {",
          "",
          "[Removed Lines]",
          "1267:       if (typeof chunk.content !== \"string\") {",
          "1268:         console.log(",
          "1269:           \"[WARNING]: Received non-string content from OpenAI. This is currently not supported.\"",
          "1270:         );",
          "1271:         continue;",
          "1272:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1283:       }",
          "1284:       const generationChunk = new ChatGenerationChunk({",
          "1285:         message: chunk,",
          "1287:         generationInfo,",
          "1288:       });",
          "1289:       yield generationChunk;",
          "",
          "[Removed Lines]",
          "1286:         text: chunk.content,",
          "",
          "[Added Lines]",
          "1362:         text: typeof chunk.content === \"string\" ? chunk.content : \"\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1491:       const generations: ChatGeneration[] = [];",
          "1492:       for (const part of data?.choices ?? []) {",
          "1494:         const generation: ChatGeneration = {",
          "1496:           message: openAIResponseToChatMessage(",
          "1497:             part.message ?? { role: \"assistant\" },",
          "1498:             data,",
          "",
          "[Removed Lines]",
          "1493:         const text = part.message?.content ?? \"\";",
          "1495:           text,",
          "",
          "[Added Lines]",
          "1570:           text: part.message?.content ?? \"\",",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/tests/chat_models.int.test.ts||libs/langchain-openai/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-openai/src/tests/chat_models.int.test.ts -> libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { CallbackManager } from \"@langchain/core/callbacks/manager\";",
          "20: import { NewTokenIndices } from \"@langchain/core/callbacks/base\";",
          "21: import { InMemoryCache } from \"@langchain/core/caches\";",
          "22: import { ChatOpenAI } from \"../chat_models.js\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import { concat } from \"@langchain/core/utils/stream\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "986:   }",
          "987:   expect(chunks.length).toEqual(1);",
          "988: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991: describe(\"Audio output\", () => {",
          "992:   test(\"Audio output\", async () => {",
          "993:     const model = new ChatOpenAI({",
          "994:       model: \"gpt-4o-audio-preview\",",
          "995:       temperature: 0,",
          "996:       modalities: [\"text\", \"audio\"],",
          "997:       audio: {",
          "998:         voice: \"alloy\",",
          "999:         format: \"wav\",",
          "1000:       },",
          "1001:     });",
          "1003:     const response = await model.invoke(\"Make me an audio clip of you yelling\");",
          "1004:     expect(Array.isArray(response.content)).toBeTruthy();",
          "1005:     expect(Object.keys(response.content[0]).sort()).toEqual([",
          "1006:       \"data\",",
          "1007:       \"expires_at\",",
          "1008:       \"id\",",
          "1009:       \"transcript\",",
          "1010:     ]);",
          "1011:   });",
          "1013:   test(\"Audio output can stream\", async () => {",
          "1014:     const model = new ChatOpenAI({",
          "1015:       model: \"gpt-4o-audio-preview\",",
          "1016:       temperature: 0,",
          "1017:       modalities: [\"text\", \"audio\"],",
          "1018:       audio: {",
          "1019:         voice: \"alloy\",",
          "1020:         format: \"pcm16\",",
          "1021:       },",
          "1022:     });",
          "1024:     const stream = await model.stream(\"Make me an audio clip of you yelling\");",
          "1025:     let finalMsg: AIMessageChunk | undefined;",
          "1026:     for await (const chunk of stream) {",
          "1027:       finalMsg = finalMsg ? concat(finalMsg, chunk) : chunk;",
          "1028:     }",
          "1029:     if (!finalMsg) {",
          "1030:       throw new Error(\"No final message found\");",
          "1031:     }",
          "1032:     console.dir(finalMsg, { depth: null });",
          "1033:     expect(Array.isArray(finalMsg.content)).toBeTruthy();",
          "1034:     expect(Object.keys(finalMsg.content[1]).sort()).toEqual([",
          "1035:       \"data\",",
          "1036:       \"expires_at\",",
          "1037:       \"id\",",
          "1038:       \"index\",",
          "1039:       \"transcript\",",
          "1040:     ]);",
          "1041:   });",
          "1043:   test(\"Can bind audio output args\", async () => {",
          "1044:     const model = new ChatOpenAI({",
          "1045:       model: \"gpt-4o-audio-preview\",",
          "1046:       temperature: 0,",
          "1047:     }).bind({",
          "1048:       modalities: [\"text\", \"audio\"],",
          "1049:       audio: {",
          "1050:         voice: \"alloy\",",
          "1051:         format: \"wav\",",
          "1052:       },",
          "1053:     });",
          "1055:     const response = await model.invoke(\"Make me an audio clip of you yelling\");",
          "1056:     expect(Array.isArray(response.content)).toBeTruthy();",
          "1057:     expect(Object.keys(response.content[0]).sort()).toEqual([",
          "1058:       \"data\",",
          "1059:       \"expires_at\",",
          "1060:       \"id\",",
          "1061:       \"transcript\",",
          "1062:     ]);",
          "1063:   });",
          "1064: });",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/types.ts||libs/langchain-openai/src/types.ts": [
          "File: libs/langchain-openai/src/types.ts -> libs/langchain-openai/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   supportsStrictToolCalling?: boolean;",
          "170: }",
          "172: export declare interface AzureOpenAIInput {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:   modalities?: Array<OpenAIClient.Chat.ChatCompletionModality>;",
          "190:   audio?: OpenAIClient.Chat.ChatCompletionAudioParam;",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12530:     jest: ^29.5.0",
          "12531:     jest-environment-node: ^29.6.4",
          "12532:     js-tiktoken: ^1.0.12",
          "12534:     prettier: ^2.8.3",
          "12535:     release-it: ^17.6.0",
          "12536:     rimraf: ^5.0.1",
          "",
          "[Removed Lines]",
          "12533:     openai: ^4.67.2",
          "",
          "[Added Lines]",
          "12533:     openai: ^4.68.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35510:   languageName: node",
          "35511:   linkType: hard",
          "35516:   dependencies:",
          "35517:     \"@types/node\": ^18.11.18",
          "35518:     \"@types/node-fetch\": ^2.6.4",
          "",
          "[Removed Lines]",
          "35513: \"openai@npm:^4.67.2\":",
          "35514:   version: 4.67.2",
          "35515:   resolution: \"openai@npm:4.67.2\"",
          "",
          "[Added Lines]",
          "35513: \"openai@npm:^4.68.0\":",
          "35514:   version: 4.68.0",
          "35515:   resolution: \"openai@npm:4.68.0\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35528:       optional: true",
          "35529:   bin:",
          "35530:     openai: bin/cli",
          "35532:   languageName: node",
          "35533:   linkType: hard",
          "",
          "[Removed Lines]",
          "35531:   checksum: 8c83e2632f2c51fea0f9b059026239a46ad171feaedd1456019481136defd468e828b0b091c53da3ebb65da37c4bb76455142c64ea9bc664124c1a341f7f2b78",
          "",
          "[Added Lines]",
          "35531:   checksum: 2866e54ac1b34e074055dde7cc809bcc33d1172f0ab289dacd54ced04a62ab3c2b9f584fdb84ece981edc5c30939497af4e91fe33646f71d5c6ced5d7106a797",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10e4cca5aa990cf7171e3c3accb0c7336328e7f1",
      "candidate_info": {
        "commit_hash": "10e4cca5aa990cf7171e3c3accb0c7336328e7f1",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/10e4cca5aa990cf7171e3c3accb0c7336328e7f1",
        "files": [
          "libs/langchain-google-vertexai-web/package.json",
          "libs/langchain-google-vertexai/package.json",
          "yarn.lock"
        ],
        "message": "fix(google-vertexai/web): Bump Google auth deps (#7269)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12349:   languageName: unknown",
          "12350:   linkType: soft",
          "12353:   version: 0.0.0-use.local",
          "12354:   resolution: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth\"",
          "12355:   dependencies:",
          "",
          "[Removed Lines]",
          "12352: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.2\":",
          "",
          "[Added Lines]",
          "12352: \"@langchain/google-gauth@npm:~0.1.3\":",
          "12353:   version: 0.1.3",
          "12354:   resolution: \"@langchain/google-gauth@npm:0.1.3\"",
          "12355:   dependencies:",
          "12356:     \"@langchain/google-common\": ~0.1.3",
          "12357:     google-auth-library: ^8.9.0",
          "12358:   peerDependencies:",
          "12359:     \"@langchain/core\": \">=0.2.21 <0.4.0\"",
          "12360:   checksum: ac83e180af492068de82284a396842eb9bb1e5eaa428b5270a192499da737bf192ad48a1c90eeca462e31238e37bd5698c8d071eb1d780a4f4c759270f8ab706",
          "12361:   languageName: node",
          "12362:   linkType: hard",
          "12364: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12428:     \"@jest/globals\": ^29.5.0",
          "12429:     \"@langchain/core\": \"workspace:*\"",
          "12430:     \"@langchain/google-common\": ^0.1.0",
          "12432:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12433:     \"@langchain/standard-tests\": 0.0.0",
          "12434:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12431:     \"@langchain/google-webauth\": ~0.1.2",
          "",
          "[Added Lines]",
          "12443:     \"@langchain/google-webauth\": ~0.1.3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12464:     \"@jest/globals\": ^29.5.0",
          "12465:     \"@langchain/core\": \"workspace:*\"",
          "12466:     \"@langchain/google-common\": ^0.1.0",
          "12468:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12469:     \"@langchain/standard-tests\": 0.0.0",
          "12470:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12467:     \"@langchain/google-gauth\": ~0.1.2",
          "",
          "[Added Lines]",
          "12479:     \"@langchain/google-gauth\": ~0.1.3",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12493:   languageName: unknown",
          "12494:   linkType: soft",
          "12497:   version: 0.0.0-use.local",
          "12498:   resolution: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth\"",
          "12499:   dependencies:",
          "",
          "[Removed Lines]",
          "12496: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.2\":",
          "",
          "[Added Lines]",
          "12508: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.3\":",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ce51c62937bec4754601877abb02c42658294de",
      "candidate_info": {
        "commit_hash": "1ce51c62937bec4754601877abb02c42658294de",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/1ce51c62937bec4754601877abb02c42658294de",
        "files": [
          "langchain-core/src/messages/ai.ts",
          "libs/langchain-openai/package.json",
          "libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/chat_models.standard.int.test.ts",
          "libs/langchain-standard-tests/src/integration_tests/chat_models.ts",
          "yarn.lock"
        ],
        "message": "core[patch], openai[patch]: add UsageMetadata details (#6950)\n\nCo-authored-by: bracesproul <braceasproul@gmail.com>",
        "before_after_code_files": [
          "langchain-core/src/messages/ai.ts||langchain-core/src/messages/ai.ts",
          "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/chat_models.standard.int.test.ts||libs/langchain-openai/src/tests/chat_models.standard.int.test.ts",
          "libs/langchain-standard-tests/src/integration_tests/chat_models.ts||libs/langchain-standard-tests/src/integration_tests/chat_models.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain-core/src/messages/ai.ts||langchain-core/src/messages/ai.ts": [
          "File: langchain-core/src/messages/ai.ts -> langchain-core/src/messages/ai.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   usage_metadata?: UsageMetadata;",
          "22: };",
          "27: export type UsageMetadata = {",
          "31:   input_tokens: number;",
          "35:   output_tokens: number;",
          "39:   total_tokens: number;",
          "40: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: export type InputTokenDetails = {",
          "33:   audio?: number;",
          "41:   cache_read?: number;",
          "48:   cache_creation?: number;",
          "49: };",
          "56: export type OutputTokenDetails = {",
          "60:   audio?: number;",
          "68:   reasoning?: number;",
          "69: };",
          "93:   input_token_details?: InputTokenDetails;",
          "100:   output_token_details?: OutputTokenDetails;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:       this.usage_metadata !== undefined ||",
          "300:       chunk.usage_metadata !== undefined",
          "301:     ) {",
          "302:       const left: UsageMetadata = this.usage_metadata ?? {",
          "303:         input_tokens: 0,",
          "304:         output_tokens: 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:       const inputTokenDetails: InputTokenDetails = {",
          "364:         ...((this.usage_metadata?.input_token_details?.audio !== undefined ||",
          "365:           chunk.usage_metadata?.input_token_details?.audio !== undefined) && {",
          "366:           audio:",
          "367:             (this.usage_metadata?.input_token_details?.audio ?? 0) +",
          "368:             (chunk.usage_metadata?.input_token_details?.audio ?? 0),",
          "369:         }),",
          "370:         ...((this.usage_metadata?.input_token_details?.cache_read !==",
          "371:           undefined ||",
          "372:           chunk.usage_metadata?.input_token_details?.cache_read !==",
          "373:             undefined) && {",
          "374:           cache_read:",
          "375:             (this.usage_metadata?.input_token_details?.cache_read ?? 0) +",
          "376:             (chunk.usage_metadata?.input_token_details?.cache_read ?? 0),",
          "377:         }),",
          "378:         ...((this.usage_metadata?.input_token_details?.cache_creation !==",
          "379:           undefined ||",
          "380:           chunk.usage_metadata?.input_token_details?.cache_creation !==",
          "381:             undefined) && {",
          "382:           cache_creation:",
          "383:             (this.usage_metadata?.input_token_details?.cache_creation ?? 0) +",
          "384:             (chunk.usage_metadata?.input_token_details?.cache_creation ?? 0),",
          "385:         }),",
          "386:       };",
          "388:       const outputTokenDetails: OutputTokenDetails = {",
          "389:         ...((this.usage_metadata?.output_token_details?.audio !== undefined ||",
          "390:           chunk.usage_metadata?.output_token_details?.audio !== undefined) && {",
          "391:           audio:",
          "392:             (this.usage_metadata?.output_token_details?.audio ?? 0) +",
          "393:             (chunk.usage_metadata?.output_token_details?.audio ?? 0),",
          "394:         }),",
          "395:         ...((this.usage_metadata?.output_token_details?.reasoning !==",
          "396:           undefined ||",
          "397:           chunk.usage_metadata?.output_token_details?.reasoning !==",
          "398:             undefined) && {",
          "399:           reasoning:",
          "400:             (this.usage_metadata?.output_token_details?.reasoning ?? 0) +",
          "401:             (chunk.usage_metadata?.output_token_details?.reasoning ?? 0),",
          "402:         }),",
          "403:       };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:         input_tokens: left.input_tokens + right.input_tokens,",
          "314:         output_tokens: left.output_tokens + right.output_tokens,",
          "315:         total_tokens: left.total_tokens + right.total_tokens,",
          "316:       };",
          "317:       combinedFields.usage_metadata = usage_metadata;",
          "318:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:         ...(Object.keys(inputTokenDetails).length > 0 && {",
          "422:           input_token_details: inputTokenDetails,",
          "423:         }),",
          "424:         ...(Object.keys(outputTokenDetails).length > 0 && {",
          "425:           output_token_details: outputTokenDetails,",
          "426:         }),",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts": [
          "File: libs/langchain-openai/src/chat_models.ts -> libs/langchain-openai/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   OpenAIToolCall,",
          "16:   isAIMessage,",
          "17:   convertToChunk,",
          "18: } from \"@langchain/core/messages\";",
          "19: import {",
          "20:   type ChatGeneration,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   UsageMetadata,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:       );",
          "1297:     }",
          "1298:     if (usage) {",
          "1299:       const generationChunk = new ChatGenerationChunk({",
          "1300:         message: new AIMessageChunk({",
          "1301:           content: \"\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300:       const inputTokenDetails = {",
          "1301:         ...(usage.prompt_tokens_details?.audio_tokens !== null && {",
          "1302:           audio: usage.prompt_tokens_details?.audio_tokens,",
          "1303:         }),",
          "1304:         ...(usage.prompt_tokens_details?.cached_tokens !== null && {",
          "1305:           cache_read: usage.prompt_tokens_details?.cached_tokens,",
          "1306:         }),",
          "1307:       };",
          "1308:       const outputTokenDetails = {",
          "1309:         ...(usage.completion_tokens_details?.audio_tokens !== null && {",
          "1310:           audio: usage.completion_tokens_details?.audio_tokens,",
          "1311:         }),",
          "1312:         ...(usage.completion_tokens_details?.reasoning_tokens !== null && {",
          "1313:           reasoning: usage.completion_tokens_details?.reasoning_tokens,",
          "1314:         }),",
          "1315:       };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1306:             input_tokens: usage.prompt_tokens,",
          "1307:             output_tokens: usage.completion_tokens,",
          "1308:             total_tokens: usage.total_tokens,",
          "1309:           },",
          "1310:         }),",
          "1311:         text: \"\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1326:             ...(Object.keys(inputTokenDetails).length > 0 && {",
          "1327:               input_token_details: inputTokenDetails,",
          "1328:             }),",
          "1329:             ...(Object.keys(outputTokenDetails).length > 0 && {",
          "1330:               output_token_details: outputTokenDetails,",
          "1331:             }),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1331:     options: this[\"ParsedCallOptions\"],",
          "1332:     runManager?: CallbackManagerForLLMRun",
          "1333:   ): Promise<ChatResult> {",
          "1335:     const params = this.invocationParams(options);",
          "1336:     const messagesMapped: OpenAICompletionParam[] =",
          "1337:       _convertMessagesToOpenAIParams(messages);",
          "",
          "[Removed Lines]",
          "1334:     const tokenUsage: TokenUsage = {};",
          "",
          "[Added Lines]",
          "1357:     const usageMetadata = {} as UsageMetadata;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1370:         generations",
          "1371:       );",
          "1377:     } else {",
          "1378:       let data;",
          "1379:       if (",
          "",
          "[Removed Lines]",
          "1373:       tokenUsage.promptTokens = promptTokenUsage;",
          "1374:       tokenUsage.completionTokens = completionTokenUsage;",
          "1375:       tokenUsage.totalTokens = promptTokenUsage + completionTokenUsage;",
          "1376:       return { generations, llmOutput: { estimatedTokenUsage: tokenUsage } };",
          "",
          "[Added Lines]",
          "1396:       usageMetadata.input_tokens = promptTokenUsage;",
          "1397:       usageMetadata.output_tokens = completionTokenUsage;",
          "1398:       usageMetadata.total_tokens = promptTokenUsage + completionTokenUsage;",
          "1399:       return {",
          "1400:         generations,",
          "1401:         llmOutput: {",
          "1402:           estimatedTokenUsage: {",
          "1403:             promptTokens: usageMetadata.input_tokens,",
          "1404:             completionTokens: usageMetadata.output_tokens,",
          "1405:             totalTokens: usageMetadata.total_tokens,",
          "1406:           },",
          "1407:         },",
          "1408:       };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1409:         completion_tokens: completionTokens,",
          "1410:         prompt_tokens: promptTokens,",
          "1411:         total_tokens: totalTokens,",
          "1412:       } = data?.usage ?? {};",
          "1414:       if (completionTokens) {",
          "1417:       }",
          "1419:       if (promptTokens) {",
          "1421:       }",
          "1423:       if (totalTokens) {",
          "1425:       }",
          "1427:       const generations: ChatGeneration[] = [];",
          "",
          "[Removed Lines]",
          "1415:         tokenUsage.completionTokens =",
          "1416:           (tokenUsage.completionTokens ?? 0) + completionTokens;",
          "1420:         tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;",
          "1424:         tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;",
          "",
          "[Added Lines]",
          "1444:         prompt_tokens_details: promptTokensDetails,",
          "1445:         completion_tokens_details: completionTokensDetails,",
          "1449:         usageMetadata.output_tokens =",
          "1450:           (usageMetadata.output_tokens ?? 0) + completionTokens;",
          "1454:         usageMetadata.input_tokens =",
          "1455:           (usageMetadata.input_tokens ?? 0) + promptTokens;",
          "1459:         usageMetadata.total_tokens =",
          "1460:           (usageMetadata.total_tokens ?? 0) + totalTokens;",
          "1461:       }",
          "1463:       if (",
          "1464:         promptTokensDetails?.audio_tokens !== null ||",
          "1465:         promptTokensDetails?.cached_tokens !== null",
          "1466:       ) {",
          "1467:         usageMetadata.input_token_details = {",
          "1468:           ...(promptTokensDetails?.audio_tokens !== null && {",
          "1469:             audio: promptTokensDetails?.audio_tokens,",
          "1470:           }),",
          "1471:           ...(promptTokensDetails?.cached_tokens !== null && {",
          "1472:             cache_read: promptTokensDetails?.cached_tokens,",
          "1473:           }),",
          "1474:         };",
          "1475:       }",
          "1477:       if (",
          "1478:         completionTokensDetails?.audio_tokens !== null ||",
          "1479:         completionTokensDetails?.reasoning_tokens !== null",
          "1480:       ) {",
          "1481:         usageMetadata.output_token_details = {",
          "1482:           ...(completionTokensDetails?.audio_tokens !== null && {",
          "1483:             audio: completionTokensDetails?.audio_tokens,",
          "1484:           }),",
          "1485:           ...(completionTokensDetails?.reasoning_tokens !== null && {",
          "1486:             reasoning: completionTokensDetails?.reasoning_tokens,",
          "1487:           }),",
          "1488:         };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1440:           ...(part.logprobs ? { logprobs: part.logprobs } : {}),",
          "1441:         };",
          "1442:         if (isAIMessage(generation.message)) {",
          "1448:         }",
          "1449:         generations.push(generation);",
          "1450:       }",
          "1451:       return {",
          "1452:         generations,",
          "1454:       };",
          "1455:     }",
          "1456:   }",
          "",
          "[Removed Lines]",
          "1443:           generation.message.usage_metadata = {",
          "1444:             input_tokens: tokenUsage.promptTokens ?? 0,",
          "1445:             output_tokens: tokenUsage.completionTokens ?? 0,",
          "1446:             total_tokens: tokenUsage.totalTokens ?? 0,",
          "1447:           };",
          "1453:         llmOutput: { tokenUsage },",
          "",
          "[Added Lines]",
          "1507:           generation.message.usage_metadata = usageMetadata;",
          "1513:         llmOutput: {",
          "1514:           tokenUsage: {",
          "1515:             promptTokens: usageMetadata.input_tokens,",
          "1516:             completionTokens: usageMetadata.output_tokens,",
          "1517:             totalTokens: usageMetadata.total_tokens,",
          "1518:           },",
          "1519:         },",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/tests/chat_models.standard.int.test.ts||libs/langchain-openai/src/tests/chat_models.standard.int.test.ts": [
          "File: libs/langchain-openai/src/tests/chat_models.standard.int.test.ts -> libs/langchain-openai/src/tests/chat_models.standard.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { ChatModelIntegrationTests } from \"@langchain/standard-tests\";",
          "5: import { ChatOpenAI, ChatOpenAICallOptions } from \"../chat_models.js\";",
          "7: class ChatOpenAIStandardIntegrationTests extends ChatModelIntegrationTests<",
          "8:   ChatOpenAICallOptions,",
          "9:   AIMessageChunk",
          "",
          "[Removed Lines]",
          "2: import { test, expect } from \"@jest/globals\";",
          "4: import { AIMessageChunk } from \"@langchain/core/messages\";",
          "",
          "[Added Lines]",
          "2: import { test } from \"@jest/globals\";",
          "4: import { AIMessage, AIMessageChunk } from \"@langchain/core/messages\";",
          "5: import { readFileSync } from \"fs\";",
          "6: import { join } from \"path\";",
          "7: import { concat } from \"@langchain/core/utils/stream\";",
          "8: import { BaseLanguageModelInput } from \"@langchain/core/language_models/base\";",
          "11: const REPO_ROOT_DIR = process.cwd();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     });",
          "26:   }",
          "28:   async testUsageMetadataStreaming() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   supportedUsageMetadataDetails: {",
          "35:     invoke: Array<",
          "36:       | \"audio_input\"",
          "37:       | \"audio_output\"",
          "38:       | \"reasoning_output\"",
          "39:       | \"cache_read_input\"",
          "40:       | \"cache_creation_input\"",
          "41:     >;",
          "42:     stream: Array<",
          "43:       | \"audio_input\"",
          "44:       | \"audio_output\"",
          "45:       | \"reasoning_output\"",
          "46:       | \"cache_read_input\"",
          "47:       | \"cache_creation_input\"",
          "48:     >;",
          "49:   } = { invoke: [\"cache_read_input\", \"reasoning_output\"], stream: [] };",
          "51:   async invokeWithReasoningOutput(stream: boolean) {",
          "52:     const chatModel = new ChatOpenAI({",
          "53:       model: \"o1-mini\",",
          "54:       streamUsage: true,",
          "55:       temperature: 1,",
          "56:     });",
          "57:     const input =",
          "58:       \"explain the relationship between the 2008/9 economic crisis and the startup ecosystem in the early 2010s\";",
          "60:     return invoke(chatModel, input, stream);",
          "61:   }",
          "63:   async invokeWithCacheReadInput(stream: boolean = false): Promise<AIMessage> {",
          "64:     const readme = readFileSync(join(REPO_ROOT_DIR, \"README.md\"), \"utf-8\");",
          "66:     const input = `What's langchain? Here's the langchain README:",
          "68:     ${readme}",
          "69:     `;",
          "70:     const llm = new ChatOpenAI({ modelName: \"gpt-4o-mini\", streamUsage: true });",
          "71:     await invoke(llm, input, stream);",
          "73:     return invoke(llm, input, stream);",
          "74:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   const testResults = await testClass.runTests();",
          "66:   expect(testResults).toBe(true);",
          "67: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: async function invoke(",
          "118:   chatModel: ChatOpenAI,",
          "119:   input: BaseLanguageModelInput,",
          "120:   stream: boolean",
          "121: ): Promise<AIMessage> {",
          "122:   if (stream) {",
          "123:     let finalChunks: AIMessageChunk | undefined;",
          "126:     for await (const chunk of await chatModel.stream(input)) {",
          "128:       finalChunks = finalChunks ? concat(finalChunks, chunk) : chunk;",
          "129:     }",
          "130:     return finalChunks as AIMessage;",
          "131:   } else {",
          "132:     return chatModel.invoke(input);",
          "133:   }",
          "134: }",
          "",
          "---------------"
        ],
        "libs/langchain-standard-tests/src/integration_tests/chat_models.ts||libs/langchain-standard-tests/src/integration_tests/chat_models.ts": [
          "File: libs/langchain-standard-tests/src/integration_tests/chat_models.ts -> libs/langchain-standard-tests/src/integration_tests/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   supportsParallelToolCalls = false;",
          "98:   constructor(",
          "99:     fields: ChatModelIntegrationTestsFields<",
          "100:       CallOptions,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   supportedUsageMetadataDetails: {",
          "100:     invoke: Array<",
          "101:       | \"audio_input\"",
          "102:       | \"audio_output\"",
          "103:       | \"reasoning_output\"",
          "104:       | \"cache_read_input\"",
          "105:       | \"cache_creation_input\"",
          "106:     >;",
          "107:     stream: Array<",
          "108:       | \"audio_input\"",
          "109:       | \"audio_output\"",
          "110:       | \"reasoning_output\"",
          "111:       | \"cache_read_input\"",
          "112:       | \"cache_creation_input\"",
          "113:     >;",
          "114:   } = { invoke: [], stream: [] };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     expect(typeof usageMetadata.total_tokens).toBe(\"number\");",
          "377:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:     if (this.supportedUsageMetadataDetails.invoke.includes(\"audio_input\")) {",
          "398:       const msgWithAudioInput = await this.invokeWithAudioInput(false);",
          "399:       this.assertAudioInputMetadata(msgWithAudioInput);",
          "400:     }",
          "402:     if (this.supportedUsageMetadataDetails.invoke.includes(\"audio_output\")) {",
          "403:       const msgWithAudioOutput = await this.invokeWithAudioOutput(false);",
          "404:       this.assertAudioOutputMetadata(msgWithAudioOutput);",
          "405:     }",
          "407:     if (",
          "408:       this.supportedUsageMetadataDetails.invoke.includes(\"reasoning_output\")",
          "409:     ) {",
          "410:       const msgWithReasoningOutput = await this.invokeWithReasoningOutput(",
          "411:         false",
          "412:       );",
          "413:       this.assertReasoningOutputMetadata(msgWithReasoningOutput);",
          "414:     }",
          "416:     if (",
          "417:       this.supportedUsageMetadataDetails.invoke.includes(\"cache_read_input\")",
          "418:     ) {",
          "419:       const msgWithCacheReadInput = await this.invokeWithCacheReadInput(false);",
          "420:       this.assertCacheReadInputMetadata(msgWithCacheReadInput);",
          "421:     }",
          "423:     if (",
          "424:       this.supportedUsageMetadataDetails.invoke.includes(\"cache_creation_input\")",
          "425:     ) {",
          "426:       const msgWithCacheCreationInput = await this.invokeWithCacheCreationInput(",
          "427:         false",
          "428:       );",
          "429:       this.assertCacheCreationInputMetadata(msgWithCacheCreationInput);",
          "430:     }",
          "431:   }",
          "433:   async invokeWithAudioInput(_stream: boolean): Promise<AIMessage> {",
          "436:     const chatModel = new this.Cls(this.constructorArgs);",
          "437:     throw new Error(",
          "438:       `invokeWithAudioInput is not implemented on ${chatModel.getName()}` +",
          "439:         \"standard integration tests.\"",
          "440:     );",
          "441:   }",
          "443:   async invokeWithAudioOutput(_stream: boolean): Promise<AIMessage> {",
          "446:     const chatModel = new this.Cls(this.constructorArgs);",
          "447:     throw new Error(",
          "448:       `invokeWithAudioOutput is not implemented on ${chatModel.getName()}` +",
          "449:         \"standard integration tests.\"",
          "450:     );",
          "451:   }",
          "453:   async invokeWithReasoningOutput(_stream: boolean): Promise<AIMessage> {",
          "456:     const chatModel = new this.Cls(this.constructorArgs);",
          "457:     throw new Error(",
          "458:       `invokeWithReasoningOutput is not implemented on ${chatModel.getName()}` +",
          "459:         \"standard integration tests.\"",
          "460:     );",
          "461:   }",
          "463:   async invokeWithCacheReadInput(_stream: boolean): Promise<AIMessage> {",
          "466:     const chatModel = new this.Cls(this.constructorArgs);",
          "467:     throw new Error(",
          "468:       `invokeWithCacheReadInput is not implemented on ${chatModel.getName()}` +",
          "469:         \"standard integration tests.\"",
          "470:     );",
          "471:   }",
          "473:   async invokeWithCacheCreationInput(_stream: boolean): Promise<AIMessage> {",
          "476:     const chatModel = new this.Cls(this.constructorArgs);",
          "477:     throw new Error(",
          "478:       `invokeWithCacheCreationInput is not implemented on ${chatModel.getName()}` +",
          "479:         \"standard integration tests.\"",
          "480:     );",
          "481:   }",
          "483:   private assertAudioInputMetadata(msg: AIMessage) {",
          "484:     expect(msg.usage_metadata).toBeDefined();",
          "485:     expect(msg.usage_metadata?.input_token_details).toBeDefined();",
          "486:     expect(typeof msg.usage_metadata?.input_token_details?.audio).toBe(",
          "487:       \"number\"",
          "488:     );",
          "489:     expect(msg.usage_metadata?.input_tokens).toBeGreaterThanOrEqual(",
          "490:       Object.values(msg.usage_metadata?.input_token_details ?? {}).reduce(",
          "491:         (a, b) => (a ?? 0) + (b ?? 0),",
          "492:         0",
          "493:       )",
          "494:     );",
          "495:   }",
          "497:   private assertAudioOutputMetadata(msg: AIMessage) {",
          "498:     expect(msg.usage_metadata).toBeDefined();",
          "499:     expect(msg.usage_metadata?.output_token_details).toBeDefined();",
          "500:     expect(typeof msg.usage_metadata?.output_token_details?.audio).toBe(",
          "501:       \"number\"",
          "502:     );",
          "503:     expect(msg.usage_metadata?.output_tokens).toBeGreaterThanOrEqual(",
          "504:       Object.values(msg.usage_metadata?.output_token_details ?? {}).reduce(",
          "505:         (a, b) => (a ?? 0) + (b ?? 0),",
          "506:         0",
          "507:       )",
          "508:     );",
          "509:   }",
          "511:   private assertReasoningOutputMetadata(msg: AIMessage) {",
          "512:     expect(msg.usage_metadata).toBeDefined();",
          "513:     expect(msg.usage_metadata?.output_token_details).toBeDefined();",
          "514:     expect(typeof msg.usage_metadata?.output_token_details?.reasoning).toBe(",
          "515:       \"number\"",
          "516:     );",
          "517:     expect(msg.usage_metadata?.output_tokens).toBeGreaterThanOrEqual(",
          "518:       Object.values(msg.usage_metadata?.output_token_details ?? {}).reduce(",
          "519:         (a, b) => (a ?? 0) + (b ?? 0),",
          "520:         0",
          "521:       )",
          "522:     );",
          "523:   }",
          "525:   private assertCacheReadInputMetadata(msg: AIMessage) {",
          "526:     expect(msg.usage_metadata).toBeDefined();",
          "527:     expect(msg.usage_metadata?.input_token_details).toBeDefined();",
          "528:     expect(typeof msg.usage_metadata?.input_token_details?.cache_read).toBe(",
          "529:       \"number\"",
          "530:     );",
          "531:     expect(msg.usage_metadata?.input_tokens).toBeGreaterThanOrEqual(",
          "532:       Object.values(msg.usage_metadata?.input_token_details ?? {}).reduce(",
          "533:         (a, b) => (a ?? 0) + (b ?? 0),",
          "534:         0",
          "535:       )",
          "536:     );",
          "537:   }",
          "539:   private assertCacheCreationInputMetadata(msg: AIMessage) {",
          "540:     expect(msg.usage_metadata).toBeDefined();",
          "541:     expect(msg.usage_metadata?.input_token_details).toBeDefined();",
          "542:     expect(typeof msg.usage_metadata?.input_token_details?.cache_creation).toBe(",
          "543:       \"number\"",
          "544:     );",
          "545:     expect(msg.usage_metadata?.input_tokens).toBeGreaterThanOrEqual(",
          "546:       Object.values(msg.usage_metadata?.input_token_details ?? {}).reduce(",
          "547:         (a, b) => (a ?? 0) + (b ?? 0),",
          "548:         0",
          "549:       )",
          "550:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:     expect(typeof usageMetadata.input_tokens).toBe(\"number\");",
          "427:     expect(typeof usageMetadata.output_tokens).toBe(\"number\");",
          "428:     expect(typeof usageMetadata.total_tokens).toBe(\"number\");",
          "429:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:     if (this.supportedUsageMetadataDetails.invoke.includes(\"audio_input\")) {",
          "606:       const msgWithAudioInput = await this.invokeWithAudioInput(true);",
          "607:       this.assertAudioInputMetadata(msgWithAudioInput);",
          "608:     }",
          "610:     if (this.supportedUsageMetadataDetails.invoke.includes(\"audio_output\")) {",
          "611:       const msgWithAudioOutput = await this.invokeWithAudioOutput(true);",
          "612:       this.assertAudioOutputMetadata(msgWithAudioOutput);",
          "613:     }",
          "615:     if (",
          "616:       this.supportedUsageMetadataDetails.invoke.includes(\"reasoning_output\")",
          "617:     ) {",
          "618:       const msgWithReasoningOutput = await this.invokeWithReasoningOutput(true);",
          "619:       this.assertReasoningOutputMetadata(msgWithReasoningOutput);",
          "620:     }",
          "622:     if (",
          "623:       this.supportedUsageMetadataDetails.invoke.includes(\"cache_read_input\")",
          "624:     ) {",
          "625:       const msgWithCacheReadInput = await this.invokeWithCacheReadInput(true);",
          "626:       this.assertCacheReadInputMetadata(msgWithCacheReadInput);",
          "627:     }",
          "629:     if (",
          "630:       this.supportedUsageMetadataDetails.invoke.includes(\"cache_creation_input\")",
          "631:     ) {",
          "632:       const msgWithCacheCreationInput = await this.invokeWithCacheCreationInput(",
          "633:         true",
          "634:       );",
          "635:       this.assertCacheCreationInputMetadata(msgWithCacheCreationInput);",
          "636:     }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12530:     jest: ^29.5.0",
          "12531:     jest-environment-node: ^29.6.4",
          "12532:     js-tiktoken: ^1.0.12",
          "12534:     prettier: ^2.8.3",
          "12535:     release-it: ^17.6.0",
          "12536:     rimraf: ^5.0.1",
          "",
          "[Removed Lines]",
          "12533:     openai: ^4.57.3",
          "",
          "[Added Lines]",
          "12533:     openai: ^4.67.2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19342:   languageName: node",
          "19343:   linkType: hard",
          "19352: \"@types/range-parser@npm:*\":",
          "19353:   version: 1.2.4",
          "19354:   resolution: \"@types/range-parser@npm:1.2.4\"",
          "",
          "[Removed Lines]",
          "19345: \"@types/qs@npm:^6.9.15\":",
          "19346:   version: 6.9.15",
          "19347:   resolution: \"@types/qs@npm:6.9.15\"",
          "19348:   checksum: 97d8208c2b82013b618e7a9fc14df6bd40a73e1385ac479b6896bafc7949a46201c15f42afd06e86a05e914f146f495f606b6fb65610cc60cf2e0ff743ec38a2",
          "19349:   languageName: node",
          "19350:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35498:   languageName: node",
          "35499:   linkType: hard",
          "35504:   dependencies:",
          "35505:     \"@types/node\": ^18.11.18",
          "35506:     \"@types/node-fetch\": ^2.6.4",
          "35508:     abort-controller: ^3.0.0",
          "35509:     agentkeepalive: ^4.2.1",
          "35510:     form-data-encoder: 1.7.2",
          "35511:     formdata-node: ^4.3.2",
          "35512:     node-fetch: ^2.6.7",
          "35514:   peerDependencies:",
          "35515:     zod: ^3.23.8",
          "35516:   peerDependenciesMeta:",
          "",
          "[Removed Lines]",
          "35501: \"openai@npm:^4.57.3\":",
          "35502:   version: 4.57.3",
          "35503:   resolution: \"openai@npm:4.57.3\"",
          "35507:     \"@types/qs\": ^6.9.15",
          "35513:     qs: ^6.10.3",
          "",
          "[Added Lines]",
          "35494: \"openai@npm:^4.67.2\":",
          "35495:   version: 4.67.2",
          "35496:   resolution: \"openai@npm:4.67.2\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "35518:       optional: true",
          "35519:   bin:",
          "35520:     openai: bin/cli",
          "35522:   languageName: node",
          "35523:   linkType: hard",
          "",
          "[Removed Lines]",
          "35521:   checksum: 6e8cef99975af5fd8e9a06685f05396a6fabecda38bd77fa62db4b7ea9bdfa0b4c762c5f74e99e42212af81f74f50748c5034bf78c9abcf74cc6eb984f3dcffa",
          "",
          "[Added Lines]",
          "35512:   checksum: 8c83e2632f2c51fea0f9b059026239a46ad171feaedd1456019481136defd468e828b0b091c53da3ebb65da37c4bb76455142c64ea9bc664124c1a341f7f2b78",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "37658:   languageName: node",
          "37659:   linkType: hard",
          "37670: \"querystringify@npm:^2.1.1\":",
          "37671:   version: 2.2.0",
          "37672:   resolution: \"querystringify@npm:2.2.0\"",
          "",
          "[Removed Lines]",
          "37661: \"qs@npm:^6.10.3\":",
          "37662:   version: 6.13.0",
          "37663:   resolution: \"qs@npm:6.13.0\"",
          "37664:   dependencies:",
          "37665:     side-channel: ^1.0.6",
          "37666:   checksum: e9404dc0fc2849245107108ce9ec2766cde3be1b271de0bf1021d049dc5b98d1a2901e67b431ac5509f865420a7ed80b7acb3980099fe1c118a1c5d2e1432ad8",
          "37667:   languageName: node",
          "37668:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90066cd7106738d2a76baad4e162c3823f5766cb",
      "candidate_info": {
        "commit_hash": "90066cd7106738d2a76baad4e162c3823f5766cb",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/90066cd7106738d2a76baad4e162c3823f5766cb",
        "files": [
          "dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js",
          "dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh",
          "docs/core_docs/docs/integrations/llms/raycast.mdx",
          "docs/core_docs/docs/integrations/vectorstores/couchbase.mdx",
          "examples/package.json",
          "examples/src/indexes/vector_stores/couchbase/similaritySearch.ts",
          "examples/src/models/llm/raycast.ts",
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/chat_models/llama_cpp.ts",
          "libs/langchain-community/src/document_loaders/web/couchbase.ts",
          "libs/langchain-community/src/embeddings/llama_cpp.ts",
          "libs/langchain-community/src/llms/llama_cpp.ts",
          "libs/langchain-community/src/llms/raycast.ts",
          "libs/langchain-community/src/utils/llama_cpp.ts",
          "libs/langchain-community/src/vectorstores/couchbase.ts",
          "yarn.lock"
        ],
        "message": "fix(ci): Fix npm community install test (#6900)",
        "before_after_code_files": [
          "dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js||dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js",
          "dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh||dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh",
          "examples/src/indexes/vector_stores/couchbase/similaritySearch.ts||examples/src/indexes/vector_stores/couchbase/similaritySearch.ts",
          "examples/src/models/llm/raycast.ts||examples/src/models/llm/raycast.ts",
          "libs/langchain-community/src/chat_models/llama_cpp.ts||libs/langchain-community/src/chat_models/llama_cpp.ts",
          "libs/langchain-community/src/document_loaders/web/couchbase.ts||libs/langchain-community/src/document_loaders/web/couchbase.ts",
          "libs/langchain-community/src/embeddings/llama_cpp.ts||libs/langchain-community/src/embeddings/llama_cpp.ts",
          "libs/langchain-community/src/llms/llama_cpp.ts||libs/langchain-community/src/llms/llama_cpp.ts",
          "libs/langchain-community/src/llms/raycast.ts||libs/langchain-community/src/llms/raycast.ts",
          "libs/langchain-community/src/utils/llama_cpp.ts||libs/langchain-community/src/utils/llama_cpp.ts",
          "libs/langchain-community/src/vectorstores/couchbase.ts||libs/langchain-community/src/vectorstores/couchbase.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js||dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js": [
          "File: dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js -> dependency_range_tests/scripts/with_standard_tests/community/node/update_resolutions_npm.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const communityPackageJsonPath = \"/app/monorepo/libs/langchain-community/package.json\";",
          "4: const currentPackageJson = JSON.parse(fs.readFileSync(communityPackageJsonPath));",
          "8: }",
          "10: fs.writeFileSync(communityPackageJsonPath, JSON.stringify(currentPackageJson, null, 2));",
          "",
          "[Removed Lines]",
          "6: if (currentPackageJson.devDependencies[\"@langchain/core\"]) {",
          "7:   delete currentPackageJson.devDependencies[\"@langchain/core\"];",
          "",
          "[Added Lines]",
          "6: if (currentPackageJson.devDependencies) {",
          "7:   delete currentPackageJson.devDependencies;",
          "",
          "---------------"
        ],
        "dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh||dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh": [
          "File: dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh -> dependency_range_tests/scripts/with_standard_tests/community/npm-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # Navigate back to monorepo root and install dependencies",
          "27: cd \"$monorepo_dir\"",
          "",
          "[Removed Lines]",
          "28: npm install @langchain/core",
          "29: npm install",
          "",
          "[Added Lines]",
          "28: npm install @langchain/core --production",
          "29: npm install --production",
          "",
          "---------------"
        ],
        "examples/src/indexes/vector_stores/couchbase/similaritySearch.ts||examples/src/indexes/vector_stores/couchbase/similaritySearch.ts": [
          "File: examples/src/indexes/vector_stores/couchbase/similaritySearch.ts -> examples/src/indexes/vector_stores/couchbase/similaritySearch.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/src/models/llm/raycast.ts||examples/src/models/llm/raycast.ts": [
          "File: examples/src/models/llm/raycast.ts -> examples/src/models/llm/raycast.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/chat_models/llama_cpp.ts||libs/langchain-community/src/chat_models/llama_cpp.ts": [
          "File: libs/langchain-community/src/chat_models/llama_cpp.ts -> libs/langchain-community/src/chat_models/llama_cpp.ts"
        ],
        "libs/langchain-community/src/document_loaders/web/couchbase.ts||libs/langchain-community/src/document_loaders/web/couchbase.ts": [
          "File: libs/langchain-community/src/document_loaders/web/couchbase.ts -> libs/langchain-community/src/document_loaders/web/couchbase.ts"
        ],
        "libs/langchain-community/src/embeddings/llama_cpp.ts||libs/langchain-community/src/embeddings/llama_cpp.ts": [
          "File: libs/langchain-community/src/embeddings/llama_cpp.ts -> libs/langchain-community/src/embeddings/llama_cpp.ts"
        ],
        "libs/langchain-community/src/llms/llama_cpp.ts||libs/langchain-community/src/llms/llama_cpp.ts": [
          "File: libs/langchain-community/src/llms/llama_cpp.ts -> libs/langchain-community/src/llms/llama_cpp.ts"
        ],
        "libs/langchain-community/src/llms/raycast.ts||libs/langchain-community/src/llms/raycast.ts": [
          "File: libs/langchain-community/src/llms/raycast.ts -> libs/langchain-community/src/llms/raycast.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:       throw new Error(\"Raycast AI environment is not accessible.\");",
          "54:     }",
          "57:     this.creativity = fields.creativity ?? 0.5;",
          "58:     this.rateLimitPerMinute = fields.rateLimitPerMinute ?? 10;",
          "59:   }",
          "",
          "[Removed Lines]",
          "56:     this.model = fields.model ?? \"text-davinci-003\";",
          "",
          "[Added Lines]",
          "56:     if (fields.model === undefined) {",
          "57:       throw new Error(`You must provide a \"model\" field in your params.`);",
          "58:     }",
          "60:     this.model = fields.model;",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/utils/llama_cpp.ts||libs/langchain-community/src/utils/llama_cpp.ts": [
          "File: libs/langchain-community/src/utils/llama_cpp.ts -> libs/langchain-community/src/utils/llama_cpp.ts"
        ],
        "libs/langchain-community/src/vectorstores/couchbase.ts||libs/langchain-community/src/vectorstores/couchbase.ts": [
          "File: libs/langchain-community/src/vectorstores/couchbase.ts -> libs/langchain-community/src/vectorstores/couchbase.ts"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "8627:   languageName: node",
          "8628:   linkType: hard",
          "8633:   conditions: os=darwin & cpu=arm64",
          "8634:   languageName: node",
          "8635:   linkType: hard",
          "8640:   conditions: os=darwin & cpu=x64",
          "8641:   languageName: node",
          "8642:   linkType: hard",
          "8647:   conditions: os=linux & cpu=arm64",
          "8648:   languageName: node",
          "8649:   linkType: hard",
          "8654:   conditions: os=linux & cpu=x64",
          "8655:   languageName: node",
          "8656:   linkType: hard",
          "8661:   conditions: os=linux & cpu=x64",
          "8662:   languageName: node",
          "8663:   linkType: hard",
          "8668:   conditions: os=win32 & cpu=x64",
          "8669:   languageName: node",
          "8670:   linkType: hard",
          "",
          "[Removed Lines]",
          "8630: \"@couchbase/couchbase-darwin-arm64-napi@npm:4.3.0\":",
          "8631:   version: 4.3.0",
          "8632:   resolution: \"@couchbase/couchbase-darwin-arm64-napi@npm:4.3.0\"",
          "8637: \"@couchbase/couchbase-darwin-x64-napi@npm:4.3.0\":",
          "8638:   version: 4.3.0",
          "8639:   resolution: \"@couchbase/couchbase-darwin-x64-napi@npm:4.3.0\"",
          "8644: \"@couchbase/couchbase-linux-arm64-napi@npm:4.3.0\":",
          "8645:   version: 4.3.0",
          "8646:   resolution: \"@couchbase/couchbase-linux-arm64-napi@npm:4.3.0\"",
          "8651: \"@couchbase/couchbase-linux-x64-napi@npm:4.3.0\":",
          "8652:   version: 4.3.0",
          "8653:   resolution: \"@couchbase/couchbase-linux-x64-napi@npm:4.3.0\"",
          "8658: \"@couchbase/couchbase-linuxmusl-x64-napi@npm:4.3.0\":",
          "8659:   version: 4.3.0",
          "8660:   resolution: \"@couchbase/couchbase-linuxmusl-x64-napi@npm:4.3.0\"",
          "8665: \"@couchbase/couchbase-win32-x64-napi@npm:4.3.0\":",
          "8666:   version: 4.3.0",
          "8667:   resolution: \"@couchbase/couchbase-win32-x64-napi@npm:4.3.0\"",
          "",
          "[Added Lines]",
          "8630: \"@couchbase/couchbase-darwin-arm64-napi@npm:4.4.2\":",
          "8631:   version: 4.4.2",
          "8632:   resolution: \"@couchbase/couchbase-darwin-arm64-napi@npm:4.4.2\"",
          "8637: \"@couchbase/couchbase-darwin-x64-napi@npm:4.4.2\":",
          "8638:   version: 4.4.2",
          "8639:   resolution: \"@couchbase/couchbase-darwin-x64-napi@npm:4.4.2\"",
          "8644: \"@couchbase/couchbase-linux-arm64-napi@npm:4.4.2\":",
          "8645:   version: 4.4.2",
          "8646:   resolution: \"@couchbase/couchbase-linux-arm64-napi@npm:4.4.2\"",
          "8651: \"@couchbase/couchbase-linux-x64-napi@npm:4.4.2\":",
          "8652:   version: 4.4.2",
          "8653:   resolution: \"@couchbase/couchbase-linux-x64-napi@npm:4.4.2\"",
          "8658: \"@couchbase/couchbase-linuxmusl-arm64-napi@npm:4.4.2\":",
          "8659:   version: 4.4.2",
          "8660:   resolution: \"@couchbase/couchbase-linuxmusl-arm64-napi@npm:4.4.2\"",
          "8661:   conditions: os=linux & cpu=arm64",
          "8662:   languageName: node",
          "8663:   linkType: hard",
          "8665: \"@couchbase/couchbase-linuxmusl-x64-napi@npm:4.4.2\":",
          "8666:   version: 4.4.2",
          "8667:   resolution: \"@couchbase/couchbase-linuxmusl-x64-napi@npm:4.4.2\"",
          "8672: \"@couchbase/couchbase-win32-x64-napi@npm:4.4.2\":",
          "8673:   version: 4.4.2",
          "8674:   resolution: \"@couchbase/couchbase-win32-x64-napi@npm:4.4.2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11472:     \"@planetscale/database\": ^1.8.0",
          "11473:     \"@premai/prem-sdk\": ^0.3.25",
          "11474:     \"@qdrant/js-client-rest\": ^1.8.2",
          "11476:     \"@rockset/client\": ^0.9.1",
          "11477:     \"@smithy/eventstream-codec\": ^2.0.5",
          "11478:     \"@smithy/protocol-http\": ^3.0.6",
          "",
          "[Removed Lines]",
          "11475:     \"@raycast/api\": ^1.55.2",
          "",
          "[Added Lines]",
          "11482:     \"@raycast/api\": ^1.83.1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11570:     mongodb: ^5.2.0",
          "11571:     mysql2: ^3.9.8",
          "11572:     neo4j-driver: ^5.17.0",
          "11574:     notion-to-md: ^3.1.0",
          "11575:     officeparser: ^4.0.4",
          "11576:     pdf-parse: 1.1.1",
          "",
          "[Removed Lines]",
          "11573:     node-llama-cpp: 2.7.3",
          "",
          "[Added Lines]",
          "11580:     node-llama-cpp: ^2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "11674:     closevector-web: 0.1.6",
          "11675:     cohere-ai: \"*\"",
          "11676:     convex: ^1.3.1",
          "11678:     crypto-js: ^4.2.0",
          "11679:     d3-dsv: ^2.0.0",
          "11680:     discord.js: ^14.14.1",
          "",
          "[Removed Lines]",
          "11677:     couchbase: ^4.3.0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "11700:     mongodb: \">=5.2.0\"",
          "11701:     mysql2: ^3.9.8",
          "11702:     neo4j-driver: \"*\"",
          "11704:     notion-to-md: ^3.1.0",
          "11705:     officeparser: ^4.0.4",
          "11706:     pdf-parse: 1.1.1",
          "",
          "[Removed Lines]",
          "11703:     node-llama-cpp: \"*\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "11866:       optional: true",
          "11867:     convex:",
          "11868:       optional: true",
          "11871:     crypto-js:",
          "11872:       optional: true",
          "11873:     d3-dsv:",
          "",
          "[Removed Lines]",
          "11869:     couchbase:",
          "11870:       optional: true",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "11918:       optional: true",
          "11919:     neo4j-driver:",
          "11920:       optional: true",
          "11923:     notion-to-md:",
          "11924:       optional: true",
          "11925:     officeparser:",
          "",
          "[Removed Lines]",
          "11921:     node-llama-cpp:",
          "11922:       optional: true",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "14158:   languageName: node",
          "14159:   linkType: hard",
          "14164:   dependencies:",
          "14169:   peerDependencies:",
          "14172:   peerDependenciesMeta:",
          "14173:     \"@types/node\":",
          "14174:       optional: true",
          "14175:     \"@types/react\":",
          "14176:       optional: true",
          "14177:   bin:",
          "14178:     ray: bin/ray",
          "14180:   languageName: node",
          "14181:   linkType: hard",
          "",
          "[Removed Lines]",
          "14161: \"@raycast/api@npm:^1.55.2\":",
          "14162:   version: 1.55.2",
          "14163:   resolution: \"@raycast/api@npm:1.55.2\"",
          "14165:     \"@types/node\": 18.8.3",
          "14166:     \"@types/react\": 18.0.9",
          "14167:     react: 18.1.0",
          "14168:     react-reconciler: 0.28.0",
          "14170:     \"@types/node\": 18.8.3",
          "14171:     \"@types/react\": 18.0.9",
          "14179:   checksum: 1154dc3d02d3ca1a9ee11d638682058464e2c01fb30df43b1f2ef0e6205744f34fcef10a413e16bfc93a08d19d6e569bbe7151660587a0d50c8df074f21c663d",
          "",
          "[Added Lines]",
          "14162: \"@raycast/api@npm:^1.83.1\":",
          "14163:   version: 1.83.1",
          "14164:   resolution: \"@raycast/api@npm:1.83.1\"",
          "14166:     \"@types/node\": ^20.8.10",
          "14167:     \"@types/react\": ^18.3.3",
          "14168:     react: 18.3.1",
          "14170:     \"@types/node\": 20.8.10",
          "14171:     \"@types/react\": 18.3.3",
          "14172:     react-devtools: 5.2.0",
          "14178:     react-devtools:",
          "14179:       optional: true",
          "14182:   checksum: 166ee04610ea90c327da9ea898fec474cd14b9b83e2205447b979edd4d6e36682e6b0121c238a8380439a932e5d6654b63e2afb17ea408c85fe8066f1a8e3070",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "19034:   languageName: node",
          "19035:   linkType: hard",
          "19044: \"@types/node@npm:>=12.12.47, @types/node@npm:>=13.7.0\":",
          "19045:   version: 18.15.11",
          "19046:   resolution: \"@types/node@npm:18.15.11\"",
          "",
          "[Removed Lines]",
          "19037: \"@types/node@npm:18.8.3\":",
          "19038:   version: 18.8.3",
          "19039:   resolution: \"@types/node@npm:18.8.3\"",
          "19040:   checksum: 9201adc6dc389644c9f478f950ef8926a93e5827865dcd80d7d12fefacab665c96879c87cd6ec74d5eccdd998c4603d02e1e07a35d71a63fe4c20670a381f6ef",
          "19041:   languageName: node",
          "19042:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "19103:   languageName: node",
          "19104:   linkType: hard",
          "19106: \"@types/offscreencanvas@npm:~2019.3.0\":",
          "19107:   version: 2019.3.0",
          "19108:   resolution: \"@types/offscreencanvas@npm:2019.3.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19102: \"@types/node@npm:^20.8.10\":",
          "19103:   version: 20.16.10",
          "19104:   resolution: \"@types/node@npm:20.16.10\"",
          "19105:   dependencies:",
          "19106:     undici-types: ~6.19.2",
          "19107:   checksum: 8b4d5a0af828871627e80da095df50ef8ae7ca458f39ccde1d060e3bf97b0bc76af9547bd5d75ce4ccb1dd80466804b2fe4f12553c11cb8691c6667effd9a9d7",
          "19108:   languageName: node",
          "19109:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "19292:   languageName: node",
          "19293:   linkType: hard",
          "19298:   dependencies:",
          "19299:     \"@types/prop-types\": \"*\"",
          "19300:     \"@types/scheduler\": \"*\"",
          "19301:     csstype: ^3.0.2",
          "19303:   languageName: node",
          "19304:   linkType: hard",
          "19309:   dependencies:",
          "19310:     \"@types/prop-types\": \"*\"",
          "19312:     csstype: ^3.0.2",
          "19314:   languageName: node",
          "19315:   linkType: hard",
          "",
          "[Removed Lines]",
          "19295: \"@types/react@npm:18.0.9\":",
          "19296:   version: 18.0.9",
          "19297:   resolution: \"@types/react@npm:18.0.9\"",
          "19302:   checksum: 162364dad716d9017ee34aabf2ea37499709ebbdef70392ae1b39225985971e1a46f121efb9c5c7da92144ee1d96d4525df806a7c1c03a5db7fd31dd034ddc7a",
          "19306: \"@types/react@npm:^18\":",
          "19307:   version: 18.2.35",
          "19308:   resolution: \"@types/react@npm:18.2.35\"",
          "19311:     \"@types/scheduler\": \"*\"",
          "19313:   checksum: d3f1c39116c82e3a504f3332b9198f94f34a33d8535604434b1e387ecabd41ec995961775e2e1c08feefdde878a5b86220879350900137980d681ae3983db462",
          "",
          "[Added Lines]",
          "19300: \"@types/react@npm:^18\":",
          "19301:   version: 18.2.35",
          "19302:   resolution: \"@types/react@npm:18.2.35\"",
          "19307:   checksum: d3f1c39116c82e3a504f3332b9198f94f34a33d8535604434b1e387ecabd41ec995961775e2e1c08feefdde878a5b86220879350900137980d681ae3983db462",
          "19311: \"@types/react@npm:^18.3.3\":",
          "19312:   version: 18.3.10",
          "19313:   resolution: \"@types/react@npm:18.3.10\"",
          "19317:   checksum: 04261654b5f4bc9584e9d882c7dfd5b36dc58963f958f8c3efd24cb68c9d205bc2d57558a1479b86d7827f0e5116d5bd111791d1253583d1e1c165f0aeb48c48",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "22960:   languageName: node",
          "22961:   linkType: hard",
          "22963: \"cmd-shim@npm:^6.0.0\":",
          "22964:   version: 6.0.2",
          "22965:   resolution: \"cmd-shim@npm:6.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22967: \"cmake-js@npm:^7.3.0\":",
          "22968:   version: 7.3.0",
          "22969:   resolution: \"cmake-js@npm:7.3.0\"",
          "22970:   dependencies:",
          "22971:     axios: ^1.6.5",
          "22972:     debug: ^4",
          "22973:     fs-extra: ^11.2.0",
          "22974:     lodash.isplainobject: ^4.0.6",
          "22975:     memory-stream: ^1.0.0",
          "22976:     node-api-headers: ^1.1.0",
          "22977:     npmlog: ^6.0.2",
          "22978:     rc: ^1.2.7",
          "22979:     semver: ^7.5.4",
          "22980:     tar: ^6.2.0",
          "22981:     url-join: ^4.0.1",
          "22982:     which: ^2.0.2",
          "22983:     yargs: ^17.7.2",
          "22984:   bin:",
          "22985:     cmake-js: bin/cmake-js",
          "22986:   checksum: 9a0da5bde0e4c03879f5835a6bf9e9e28113831a6ce9663917e4463e3056a98470bce4336416f3a0136360b68771031b53cbaf4ae17bd920352d2f2b1a8774c8",
          "22987:   languageName: node",
          "22988:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "23636:   linkType: hard",
          "23638: \"couchbase@npm:^4.3.0\":",
          "23650:   dependenciesMeta:",
          "23651:     \"@couchbase/couchbase-darwin-arm64-napi\":",
          "23652:       optional: true",
          "",
          "[Removed Lines]",
          "23639:   version: 4.3.0",
          "23640:   resolution: \"couchbase@npm:4.3.0\"",
          "23641:   dependencies:",
          "23642:     \"@couchbase/couchbase-darwin-arm64-napi\": 4.3.0",
          "23643:     \"@couchbase/couchbase-darwin-x64-napi\": 4.3.0",
          "23644:     \"@couchbase/couchbase-linux-arm64-napi\": 4.3.0",
          "23645:     \"@couchbase/couchbase-linux-x64-napi\": 4.3.0",
          "23646:     \"@couchbase/couchbase-linuxmusl-x64-napi\": 4.3.0",
          "23647:     \"@couchbase/couchbase-win32-x64-napi\": 4.3.0",
          "23648:     cmake-js: ^7.2.1",
          "23649:     node-addon-api: ^7.0.0",
          "",
          "[Added Lines]",
          "23666:   version: 4.4.2",
          "23667:   resolution: \"couchbase@npm:4.4.2\"",
          "23668:   dependencies:",
          "23669:     \"@couchbase/couchbase-darwin-arm64-napi\": 4.4.2",
          "23670:     \"@couchbase/couchbase-darwin-x64-napi\": 4.4.2",
          "23671:     \"@couchbase/couchbase-linux-arm64-napi\": 4.4.2",
          "23672:     \"@couchbase/couchbase-linux-x64-napi\": 4.4.2",
          "23673:     \"@couchbase/couchbase-linuxmusl-arm64-napi\": 4.4.2",
          "23674:     \"@couchbase/couchbase-linuxmusl-x64-napi\": 4.4.2",
          "23675:     \"@couchbase/couchbase-win32-x64-napi\": 4.4.2",
          "23676:     cmake-js: ^7.3.0",
          "23677:     node-addon-api: ^8.0.0",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "23656:       optional: true",
          "23657:     \"@couchbase/couchbase-linux-x64-napi\":",
          "23658:       optional: true",
          "23659:     \"@couchbase/couchbase-linuxmusl-x64-napi\":",
          "23660:       optional: true",
          "23661:     \"@couchbase/couchbase-win32-x64-napi\":",
          "23662:       optional: true",
          "23664:   languageName: node",
          "23665:   linkType: hard",
          "",
          "[Removed Lines]",
          "23663:   checksum: 99c24663cd7ab524668f26f151f92a78ecf850ddeca919b71f26eebe1134c492218639f9f491ff95e749628bd108164f78f13884e85a1de27959152247f8ecab",
          "",
          "[Added Lines]",
          "23687:     \"@couchbase/couchbase-linuxmusl-arm64-napi\":",
          "23688:       optional: true",
          "23693:   checksum: 452dcdc01f9277fc6e15668eb4ab67b6afff0945a8832a598b1009068fe82edcb76d4fbf0704d9351deba74348ee25759ddba5efbfed14dae23fca13cf4714a5",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "27088:     \"@planetscale/database\": ^1.8.0",
          "27089:     \"@prisma/client\": ^4.11.0",
          "27090:     \"@qdrant/js-client-rest\": ^1.9.0",
          "27092:     \"@rockset/client\": ^0.9.1",
          "27093:     \"@supabase/supabase-js\": ^2.45.0",
          "27094:     \"@tensorflow/tfjs-backend-cpu\": ^4.4.0",
          "",
          "[Removed Lines]",
          "27091:     \"@raycast/api\": ^1.55.2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "27105:     axios: ^0.26.0",
          "27106:     chromadb: ^1.5.3",
          "27107:     convex: ^1.3.1",
          "27109:     date-fns: ^3.3.1",
          "27110:     dotenv: ^16.0.3",
          "27111:     duck-duck-scrape: ^2.2.5",
          "",
          "[Removed Lines]",
          "27108:     couchbase: ^4.3.0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "34578:   languageName: node",
          "34579:   linkType: hard",
          "34581: \"node-domexception@npm:1.0.0, node-domexception@npm:^1.0.0\":",
          "34582:   version: 1.0.0",
          "34583:   resolution: \"node-domexception@npm:1.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34609: \"node-api-headers@npm:^1.1.0\":",
          "34610:   version: 1.3.0",
          "34611:   resolution: \"node-api-headers@npm:1.3.0\"",
          "34612:   checksum: 4da6c55dd3f39487e24eb5c0862a28899c0b8c4c03041bb452a7b8940efc9ffe781dafdc6e2fbe381d3d0495e08aaee4e2cc873d7a35a0b33b39248c376e873b",
          "34613:   languageName: node",
          "34614:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "34744:   languageName: node",
          "34745:   linkType: hard",
          "34750:   dependencies:",
          "34751:     chalk: ^5.3.0",
          "34752:     chmodrp: ^1.0.2",
          "",
          "[Removed Lines]",
          "34747: \"node-llama-cpp@npm:2.7.3\":",
          "34748:   version: 2.7.3",
          "34749:   resolution: \"node-llama-cpp@npm:2.7.3\"",
          "",
          "[Added Lines]",
          "34782: \"node-llama-cpp@npm:^2\":",
          "34783:   version: 2.8.16",
          "34784:   resolution: \"node-llama-cpp@npm:2.8.16\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "34764:     uuid: ^9.0.0",
          "34765:     which: ^4.0.0",
          "34766:     yargs: ^17.7.2",
          "34767:   bin:",
          "34768:     node-llama-cpp: dist/cli/cli.js",
          "34770:   languageName: node",
          "34771:   linkType: hard",
          "",
          "[Removed Lines]",
          "34769:   checksum: 5be984ab4711d3e6f3f29e6246e5d3b437b0e48631376f361c832a969530ffa4da5cdc78e8cf8e003a86411ced42c7cf022ad6d5b50c24f276cd841dbb077e0b",
          "",
          "[Added Lines]",
          "34802:   peerDependencies:",
          "34803:     typescript: \">=5.0.0\"",
          "34804:   peerDependenciesMeta:",
          "34805:     typescript:",
          "34806:       optional: true",
          "34809:   checksum: 51607ec21f02a702a440fae6a8c06b00b039cbfcb09a7d92eaa16e97972ff71874285d9d2561429bae03b52da81e0d12d2d22356dd162f30ce92d37c928014c4",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "37712:   languageName: node",
          "37713:   linkType: hard",
          "37727: \"react-router-config@npm:^5.1.1\":",
          "37728:   version: 5.1.1",
          "37729:   resolution: \"react-router-config@npm:5.1.1\"",
          "",
          "[Removed Lines]",
          "37715: \"react-reconciler@npm:0.28.0\":",
          "37716:   version: 0.28.0",
          "37717:   resolution: \"react-reconciler@npm:0.28.0\"",
          "37718:   dependencies:",
          "37719:     loose-envify: ^1.1.0",
          "37720:     scheduler: ^0.22.0",
          "37721:   peerDependencies:",
          "37722:     react: ^18.1.0",
          "37723:   checksum: 6421f9500827219556ead3d86cbdf0553c47d633ecda2144720bf235d404f5e4e1e585336c4dfa80e26a04f1a6117c455a60964917d5600c73a91d8374f0232f",
          "37724:   languageName: node",
          "37725:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "37785:   languageName: node",
          "37786:   linkType: hard",
          "37791:   dependencies:",
          "37792:     loose-envify: ^1.1.0",
          "37794:   languageName: node",
          "37795:   linkType: hard",
          "",
          "[Removed Lines]",
          "37788: \"react@npm:18.1.0\":",
          "37789:   version: 18.1.0",
          "37790:   resolution: \"react@npm:18.1.0\"",
          "37793:   checksum: 5bb296b561b43ef2220395da4faac86c14a087c8c80e1a7598a5740f01ee605c11eaf249985c1e2000971c4cd32ccb46d40f00479bbd9fb6b1c7cf857393b7d4",
          "",
          "[Added Lines]",
          "37816: \"react@npm:18.3.1\":",
          "37817:   version: 18.3.1",
          "37818:   resolution: \"react@npm:18.3.1\"",
          "37821:   checksum: a27bcfa8ff7c15a1e50244ad0d0c1cb2ad4375eeffefd266a64889beea6f6b64c4966c9b37d14ee32d6c9fcd5aa6ba183b6988167ab4d127d13e7cb5b386a376",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "38903:   languageName: node",
          "38904:   linkType: hard",
          "38915: \"scheduler@npm:^0.23.0\":",
          "38916:   version: 0.23.0",
          "38917:   resolution: \"scheduler@npm:0.23.0\"",
          "",
          "[Removed Lines]",
          "38906: \"scheduler@npm:^0.22.0\":",
          "38907:   version: 0.22.0",
          "38908:   resolution: \"scheduler@npm:0.22.0\"",
          "38909:   dependencies:",
          "38910:     loose-envify: ^1.1.0",
          "38911:   checksum: a8ef5cab769c020cd6382ad9ecc3f72dbde56a50a36639b3a42ad9c11f7724f03700bcad373044059b8067d4a6365154dc7c0ca8027ef20ff4900cf58a0fc2c5",
          "38912:   languageName: node",
          "38913:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "40562:   languageName: node",
          "40563:   linkType: hard",
          "40565: \"teeny-request@npm:^9.0.0\":",
          "40566:   version: 9.0.0",
          "40567:   resolution: \"teeny-request@npm:9.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40584: \"tar@npm:^6.2.0\":",
          "40585:   version: 6.2.1",
          "40586:   resolution: \"tar@npm:6.2.1\"",
          "40587:   dependencies:",
          "40588:     chownr: ^2.0.0",
          "40589:     fs-minipass: ^2.0.0",
          "40590:     minipass: ^5.0.0",
          "40591:     minizlib: ^2.1.1",
          "40592:     mkdirp: ^1.0.3",
          "40593:     yallist: ^4.0.0",
          "40594:   checksum: f1322768c9741a25356c11373bce918483f40fa9a25c69c59410c8a1247632487edef5fe76c5f12ac51a6356d2f1829e96d2bc34098668a2fc34d76050ac2b6c",
          "40595:   languageName: node",
          "40596:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "41763:   languageName: node",
          "41764:   linkType: hard",
          "41766: \"undici@npm:5.27.2\":",
          "41767:   version: 5.27.2",
          "41768:   resolution: \"undici@npm:5.27.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41799: \"undici-types@npm:~6.19.2\":",
          "41800:   version: 6.19.8",
          "41801:   resolution: \"undici-types@npm:6.19.8\"",
          "41802:   checksum: de51f1b447d22571cf155dfe14ff6d12c5bdaec237c765085b439c38ca8518fc360e88c70f99469162bf2e14188a7b0bcb06e1ed2dc031042b984b0bb9544017",
          "41803:   languageName: node",
          "41804:   linkType: hard",
          "",
          "---------------"
        ]
      }
    }
  ]
}