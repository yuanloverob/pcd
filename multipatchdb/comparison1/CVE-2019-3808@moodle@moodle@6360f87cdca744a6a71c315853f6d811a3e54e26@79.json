{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e222b1ed8db2a8ef5a847128226f65d46ff4eed8",
      "candidate_info": {
        "commit_hash": "e222b1ed8db2a8ef5a847128226f65d46ff4eed8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e222b1ed8db2a8ef5a847128226f65d46ff4eed8",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.1+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052001.01;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.1+ (Build: 20190712)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052001.02;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.1+ (Build: 20190718)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26f39c88618cecca0107235b27bb74d38bc3fe10",
      "candidate_info": {
        "commit_hash": "26f39c88618cecca0107235b27bb74d38bc3fe10",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/26f39c88618cecca0107235b27bb74d38bc3fe10",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-63547 core_message: added delete_conversation_by_id web service",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:         'ajax' => true,",
          "925:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "926:     ),",
          "927:     'core_message_delete_message' => array(",
          "928:         'classname' => 'core_message_external',",
          "929:         'methodname' => 'delete_message',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:     'core_message_delete_conversation_by_id' => array(",
          "928:         'classname' => 'core_message_external',",
          "929:         'methodname' => 'delete_conversation_by_id',",
          "930:         'classpath' => 'message/externallib.php',",
          "931:         'description' => 'Deletes a conversation.',",
          "932:         'type' => 'write',",
          "933:         'capabilities' => 'moodle/site:deleteownmessage',",
          "934:         'ajax' => true,",
          "935:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "936:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2633:         return true;",
          "2634:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2642:     public static function delete_conversation_by_id_parameters() {",
          "2643:         return new external_function_parameters(",
          "2644:             array(",
          "2645:                 'userid' => new external_value(PARAM_INT, 'The user id of who we want to delete the conversation for'),",
          "2646:                 'conversationid' => new external_value(PARAM_INT, 'The id of the conversation'),",
          "2647:             )",
          "2648:         );",
          "2649:     }",
          "2660:     public static function delete_conversation_by_id($userid, $conversationid) {",
          "2661:         global $CFG;",
          "2664:         if (empty($CFG->messaging)) {",
          "2665:             throw new moodle_exception('disabled', 'message');",
          "2666:         }",
          "2669:         $params = [",
          "2670:             'userid' => $userid,",
          "2671:             'conversationid' => $conversationid,",
          "2672:         ];",
          "2673:         $params = self::validate_parameters(self::delete_conversation_by_id_parameters(), $params);",
          "2676:         $context = context_system::instance();",
          "2677:         self::validate_context($context);",
          "2679:         $user = core_user::get_user($params['userid'], '*', MUST_EXIST);",
          "2680:         core_user::require_active_user($user);",
          "2682:         if (\\core_message\\api::can_delete_conversation($user->id, $conversationid)) {",
          "2683:             \\core_message\\api::delete_conversation_by_id($user->id, $conversationid);",
          "2684:         } else {",
          "2685:             throw new moodle_exception(\"You do not have permission to delete the conversation '$conversationid'\");",
          "2686:         }",
          "2688:         return [];",
          "2689:     }",
          "2697:     public static function delete_conversation_by_id_returns() {",
          "2698:         return new external_warnings();",
          "2699:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3483:         core_message_external::delete_conversation($user1->id, $user2->id);",
          "3484:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3489:     public function test_delete_conversation_by_id() {",
          "3490:         global $DB;",
          "3492:         $this->resetAfterTest(true);",
          "3495:         $user1 = self::getDataGenerator()->create_user();",
          "3496:         $user2 = self::getDataGenerator()->create_user();",
          "3499:         $this->setUser($user1);",
          "3502:         $time = time();",
          "3503:         $m1id = $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3504:         $m2id = $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3505:         $m3id = $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3506:         $m4id = $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3508:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3511:         core_message_external::delete_conversation_by_id($user1->id, $conversationid);",
          "3513:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "3514:         $this->assertCount(4, $muas);",
          "3516:         ksort($muas);",
          "3518:         $mua1 = array_shift($muas);",
          "3519:         $mua2 = array_shift($muas);",
          "3520:         $mua3 = array_shift($muas);",
          "3521:         $mua4 = array_shift($muas);",
          "3523:         $this->assertEquals($user1->id, $mua1->userid);",
          "3524:         $this->assertEquals($m1id, $mua1->messageid);",
          "3525:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua1->action);",
          "3527:         $this->assertEquals($user1->id, $mua2->userid);",
          "3528:         $this->assertEquals($m2id, $mua2->messageid);",
          "3529:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua2->action);",
          "3531:         $this->assertEquals($user1->id, $mua3->userid);",
          "3532:         $this->assertEquals($m3id, $mua3->messageid);",
          "3533:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua3->action);",
          "3535:         $this->assertEquals($user1->id, $mua4->userid);",
          "3536:         $this->assertEquals($m4id, $mua4->messageid);",
          "3537:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "3538:     }",
          "3543:     public function test_delete_conversation_by_id_as_other_user() {",
          "3544:         global $DB;",
          "3546:         $this->resetAfterTest(true);",
          "3548:         $this->setAdminUser();",
          "3551:         $user1 = self::getDataGenerator()->create_user();",
          "3552:         $user2 = self::getDataGenerator()->create_user();",
          "3555:         $time = time();",
          "3556:         $m1id = $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3557:         $m2id = $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3558:         $m3id = $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3559:         $m4id = $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3561:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3564:         core_message_external::delete_conversation_by_id($user1->id, $conversationid);",
          "3566:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "3567:         $this->assertCount(4, $muas);",
          "3569:         ksort($muas);",
          "3571:         $mua1 = array_shift($muas);",
          "3572:         $mua2 = array_shift($muas);",
          "3573:         $mua3 = array_shift($muas);",
          "3574:         $mua4 = array_shift($muas);",
          "3576:         $this->assertEquals($user1->id, $mua1->userid);",
          "3577:         $this->assertEquals($m1id, $mua1->messageid);",
          "3578:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua1->action);",
          "3580:         $this->assertEquals($user1->id, $mua2->userid);",
          "3581:         $this->assertEquals($m2id, $mua2->messageid);",
          "3582:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua2->action);",
          "3584:         $this->assertEquals($user1->id, $mua3->userid);",
          "3585:         $this->assertEquals($m3id, $mua3->messageid);",
          "3586:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua3->action);",
          "3588:         $this->assertEquals($user1->id, $mua4->userid);",
          "3589:         $this->assertEquals($m4id, $mua4->messageid);",
          "3590:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "3591:     }",
          "3596:     public function test_delete_conversation_by_id_as_other_user_without_cap() {",
          "3597:         $this->resetAfterTest(true);",
          "3600:         $user1 = self::getDataGenerator()->create_user();",
          "3601:         $user2 = self::getDataGenerator()->create_user();",
          "3602:         $user3 = self::getDataGenerator()->create_user();",
          "3605:         $time = time();",
          "3606:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3607:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3608:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3609:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3611:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3614:         $this->setUser($user3);",
          "3617:         $this->expectException('moodle_exception');",
          "3618:         core_message_external::delete_conversation_by_id($user1->id, $conversationid);",
          "3619:     }",
          "3624:     public function test_delete_conversation_by_id_messaging_disabled() {",
          "3625:         global $CFG;",
          "3627:         $this->resetAfterTest(true);",
          "3630:         $user1 = self::getDataGenerator()->create_user();",
          "3631:         $user2 = self::getDataGenerator()->create_user();",
          "3634:         $time = time();",
          "3635:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3636:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3637:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3638:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3640:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3643:         $this->setUser($user1);",
          "3646:         $CFG->messaging = 0;",
          "3649:         $this->expectException('moodle_exception');",
          "3650:         core_message_external::delete_conversation_by_id($user1->id, $conversationid);",
          "3651:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6153be6850869cdc3a6ae925dcf6e688ac481333",
      "candidate_info": {
        "commit_hash": "6153be6850869cdc3a6ae925dcf6e688ac481333",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6153be6850869cdc3a6ae925dcf6e688ac481333",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.6dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018061400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20180614)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018062100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20180621)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdb22af959f1b7d5f4659802b04c213e6e32e6ff",
      "candidate_info": {
        "commit_hash": "bdb22af959f1b7d5f4659802b04c213e6e32e6ff",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bdb22af959f1b7d5f4659802b04c213e6e32e6ff",
        "files": [
          "admin/settings/plugins.php",
          "lib/classes/plugin_manager.php",
          "lib/db/upgrade.php",
          "lib/dml/mariadb_native_moodle_database.php",
          "lib/dml/moodle_database.php",
          "lib/dml/mysqli_native_moodle_database.php",
          "lib/dml/pgsql_native_moodle_database.php",
          "lib/dml/sqlsrv_native_moodle_database.php",
          "lib/upgrade.txt",
          "search/engine/simpledb/classes/engine.php",
          "search/engine/simpledb/db/install.php",
          "search/engine/simpledb/db/install.xml",
          "search/engine/simpledb/db/uninstall.php",
          "search/engine/simpledb/lang/en/search_simpledb.php",
          "search/engine/simpledb/tests/engine_test.php",
          "search/engine/simpledb/version.php",
          "search/engine/solr/lang/en/search_solr.php",
          "search/engine/solr/tests/engine_test.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-53226-master' of git://github.com/andrewnicols/moodle",
        "before_after_code_files": [
          "admin/settings/plugins.php||admin/settings/plugins.php",
          "lib/classes/plugin_manager.php||lib/classes/plugin_manager.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/dml/mariadb_native_moodle_database.php||lib/dml/mariadb_native_moodle_database.php",
          "lib/dml/moodle_database.php||lib/dml/moodle_database.php",
          "lib/dml/mysqli_native_moodle_database.php||lib/dml/mysqli_native_moodle_database.php",
          "lib/dml/pgsql_native_moodle_database.php||lib/dml/pgsql_native_moodle_database.php",
          "lib/dml/sqlsrv_native_moodle_database.php||lib/dml/sqlsrv_native_moodle_database.php",
          "search/engine/simpledb/classes/engine.php||search/engine/simpledb/classes/engine.php",
          "search/engine/simpledb/db/install.php||search/engine/simpledb/db/install.php",
          "search/engine/simpledb/db/uninstall.php||search/engine/simpledb/db/uninstall.php",
          "search/engine/simpledb/lang/en/search_simpledb.php||search/engine/simpledb/lang/en/search_simpledb.php",
          "search/engine/simpledb/tests/engine_test.php||search/engine/simpledb/tests/engine_test.php",
          "search/engine/simpledb/version.php||search/engine/simpledb/version.php",
          "search/engine/solr/lang/en/search_solr.php||search/engine/solr/lang/en/search_solr.php",
          "search/engine/solr/tests/engine_test.php||search/engine/solr/tests/engine_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/plugins.php||admin/settings/plugins.php": [
          "File: admin/settings/plugins.php -> admin/settings/plugins.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:     $temp->add(new admin_setting_heading('searchengineheading', new lang_string('searchengine', 'admin'), ''));",
          "558:     $temp->add(new admin_setting_configselect('searchengine',",
          "560:     $temp->add(new admin_setting_heading('searchoptionsheading', new lang_string('searchoptions', 'admin'), ''));",
          "561:     $temp->add(new admin_setting_configcheckbox('searchindexwhendisabled',",
          "562:             new lang_string('searchindexwhendisabled', 'admin'), new lang_string('searchindexwhendisabled_desc', 'admin'),",
          "",
          "[Removed Lines]",
          "559:                                 new lang_string('selectsearchengine', 'admin'), '', 'solr', $engines));",
          "",
          "[Added Lines]",
          "559:                                 new lang_string('selectsearchengine', 'admin'), '', 'simpledb', $engines));",
          "",
          "---------------"
        ],
        "lib/classes/plugin_manager.php||lib/classes/plugin_manager.php": [
          "File: lib/classes/plugin_manager.php -> lib/classes/plugin_manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1884:             ),",
          "1886:             'search' => array(",
          "1888:             ),",
          "1890:             'scormreport' => array(",
          "",
          "[Removed Lines]",
          "1887:                 'solr'",
          "",
          "[Added Lines]",
          "1887:                 'simpledb', 'solr'",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2190:         upgrade_main_savepoint(true, 2018032200.07);",
          "2191:     }",
          "2193:     return true;",
          "2194: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2193:     if ($oldversion < 2018032700.00) {",
          "2196:         if (empty($CFG->enableglobalsearch) && empty(get_config('search_solr', 'indexname'))) {",
          "2197:             set_config('searchengine', 'simpledb');",
          "2198:         }",
          "2199:         upgrade_main_savepoint(true, 2018032700.00);",
          "2200:     }",
          "",
          "---------------"
        ],
        "lib/dml/mariadb_native_moodle_database.php||lib/dml/mariadb_native_moodle_database.php": [
          "File: lib/dml/mariadb_native_moodle_database.php -> lib/dml/mariadb_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         }",
          "108:         return true;",
          "109:     }",
          "110: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     public function is_fulltext_search_supported() {",
          "117:         $info = $this->get_server_info();",
          "119:         if (version_compare($info['version'], '10.0.5', '>=')) {",
          "120:             return true;",
          "121:         }",
          "122:         return false;",
          "123:     }",
          "",
          "---------------"
        ],
        "lib/dml/moodle_database.php||lib/dml/moodle_database.php": [
          "File: lib/dml/moodle_database.php -> lib/dml/moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2687:     public function perf_get_queries_time() {",
          "2688:         return $this->queriestime;",
          "2689:     }",
          "2690: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2696:     public function is_fulltext_search_supported() {",
          "2698:         return false;",
          "2699:     }",
          "",
          "---------------"
        ],
        "lib/dml/mysqli_native_moodle_database.php||lib/dml/mysqli_native_moodle_database.php": [
          "File: lib/dml/mysqli_native_moodle_database.php -> lib/dml/mysqli_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1989:             $this->change_database_structure(\"ALTER TABLE {$prefix}$tablename $rowformat\");",
          "1990:         }",
          "1991:     }",
          "1992: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1998:     public function is_fulltext_search_supported() {",
          "1999:         $info = $this->get_server_info();",
          "2001:         if (version_compare($info['version'], '5.6.4', '>=')) {",
          "2002:             return true;",
          "2003:         }",
          "2004:         return false;",
          "2005:     }",
          "",
          "---------------"
        ],
        "lib/dml/pgsql_native_moodle_database.php||lib/dml/pgsql_native_moodle_database.php": [
          "File: lib/dml/pgsql_native_moodle_database.php -> lib/dml/pgsql_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1497:     private function trim_quotes($str) {",
          "1498:         return trim(trim($str), \"'\\\"\");",
          "1499:     }",
          "1500: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1506:     public function is_fulltext_search_supported() {",
          "1507:         return true;",
          "1508:     }",
          "",
          "---------------"
        ],
        "lib/dml/sqlsrv_native_moodle_database.php||lib/dml/sqlsrv_native_moodle_database.php": [
          "File: lib/dml/sqlsrv_native_moodle_database.php -> lib/dml/sqlsrv_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:         $result = sqlsrv_rollback($this->sqlsrv);",
          "1587:         $this->query_end($result);",
          "1588:     }",
          "1589: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:     public function is_fulltext_search_supported() {",
          "1596:         global $CFG;",
          "1598:         $sql = \"SELECT FULLTEXTSERVICEPROPERTY('IsFullTextInstalled')\";",
          "1599:         $this->query_start($sql, null, SQL_QUERY_AUX);",
          "1600:         $result = sqlsrv_query($this->sqlsrv, $sql);",
          "1601:         $this->query_end($result);",
          "1602:         if ($result) {",
          "1603:             if ($row = sqlsrv_fetch_array($result)) {",
          "1604:                 $property = (bool)reset($row);",
          "1605:             }",
          "1606:         }",
          "1607:         $this->free_result($result);",
          "1609:         return !empty($property);",
          "1610:     }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/classes/engine.php||search/engine/simpledb/classes/engine.php": [
          "File: search/engine/simpledb/classes/engine.php -> search/engine/simpledb/classes/engine.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace search_simpledb;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class engine extends \\core_search\\engine {",
          "43:     protected $totalresults = null;",
          "54:     public function execute_query($filters, $usercontexts, $limit = 0) {",
          "55:         global $DB, $USER;",
          "57:         $serverstatus = $this->is_server_ready();",
          "58:         if ($serverstatus !== true) {",
          "59:             throw new \\core_search\\engine_exception('engineserverstatus', 'search');",
          "60:         }",
          "62:         if (empty($limit)) {",
          "63:             $limit = \\core_search\\manager::MAX_RESULTS;",
          "64:         }",
          "66:         $params = array();",
          "69:         $ands = array();",
          "72:         $ands[] = '(owneruserid = ? OR owneruserid = ?)';",
          "73:         $params = array_merge($params, array(\\core_search\\manager::NO_OWNER_ID, $USER->id));",
          "78:         if ($usercontexts && is_array($usercontexts)) {",
          "80:             $allcontexts = array();",
          "81:             foreach ($usercontexts as $areaid => $areacontexts) {",
          "82:                 if (!empty($filters->areaids) && !in_array($areaid, $filters->areaids)) {",
          "84:                     continue;",
          "85:                 }",
          "86:                 foreach ($areacontexts as $contextid) {",
          "88:                     $allcontexts[$contextid] = $contextid;",
          "89:                 }",
          "90:             }",
          "91:             if (empty($allcontexts)) {",
          "93:                 return array();",
          "94:             }",
          "96:             list($contextsql, $contextparams) = $DB->get_in_or_equal($allcontexts);",
          "97:             $ands[] = 'contextid ' . $contextsql;",
          "98:             $params = array_merge($params, $contextparams);",
          "99:         }",
          "102:         if (!empty($filters->courseids)) {",
          "103:             list($conditionsql, $conditionparams) = $DB->get_in_or_equal($filters->courseids);",
          "104:             $ands[] = 'courseid ' . $conditionsql;",
          "105:             $params = array_merge($params, $conditionparams);",
          "106:         }",
          "109:         if (!empty($filters->areaids)) {",
          "110:             list($conditionsql, $conditionparams) = $DB->get_in_or_equal($filters->areaids);",
          "111:             $ands[] = 'areaid ' . $conditionsql;",
          "112:             $params = array_merge($params, $conditionparams);",
          "113:         }",
          "115:         if (!empty($filters->title)) {",
          "116:             $ands[] = $DB->sql_like('title', '?', false, false);",
          "117:             $params[] = $filters->title;",
          "118:         }",
          "120:         if (!empty($filters->timestart)) {",
          "121:             $ands[] = 'modified >= ?';",
          "122:             $params[] = $filters->timestart;",
          "123:         }",
          "124:         if (!empty($filters->timeend)) {",
          "125:             $ands[] = 'modified <= ?';",
          "126:             $params[] = $filters->timeend;",
          "127:         }",
          "130:         if (!empty($filters->q)) {",
          "131:             switch ($DB->get_dbfamily()) {",
          "132:                 case 'postgres':",
          "133:                     $ands[] = \"(\" .",
          "134:                         \"to_tsvector('simple', title) @@ plainto_tsquery('simple', ?) OR \".",
          "135:                         \"to_tsvector('simple', content) @@ plainto_tsquery('simple', ?) OR \".",
          "136:                         \"to_tsvector('simple', description1) @@ plainto_tsquery('simple', ?) OR \".",
          "137:                         \"to_tsvector('simple', description2) @@ plainto_tsquery('simple', ?)\".",
          "138:                         \")\";",
          "139:                     $params[] = $filters->q;",
          "140:                     $params[] = $filters->q;",
          "141:                     $params[] = $filters->q;",
          "142:                     $params[] = $filters->q;",
          "143:                     break;",
          "144:                 case 'mysql':",
          "145:                     if ($DB->is_fulltext_search_supported()) {",
          "146:                         $ands[] = \"MATCH (title, content, description1, description2) AGAINST (?)\";",
          "147:                         $params[] = $filters->q;",
          "151:                         if ($filters->q === '*') {",
          "152:                             return array();",
          "153:                         }",
          "154:                     } else {",
          "156:                         list($queryand, $queryparams) = $this->get_simple_query($filters->q);",
          "157:                         $ands[] = $queryand;",
          "158:                         $params = array_merge($params, $queryparams);",
          "159:                     }",
          "160:                     break;",
          "161:                 case 'mssql':",
          "162:                     if ($DB->is_fulltext_search_supported()) {",
          "163:                         $ands[] = \"CONTAINS ((title, content, description1, description2), ?)\";",
          "167:                         $params[] = '\"' . str_replace('\"', '', $filters->q) . '\"';",
          "168:                     } else {",
          "170:                         list($queryand, $queryparams) = $this->get_simple_query($filters->q);",
          "171:                         $ands[] = $queryand;",
          "172:                         $params = array_merge($params, $queryparams);",
          "173:                     }",
          "174:                     break;",
          "175:                 default:",
          "176:                     list($queryand, $queryparams) = $this->get_simple_query($filters->q);",
          "177:                     $ands[] = $queryand;",
          "178:                     $params = array_merge($params, $queryparams);",
          "179:                     break;",
          "180:             }",
          "181:         }",
          "184:         $documents = $DB->get_records_select('search_simpledb_index', implode(' AND ', $ands), $params, '', '*', 0, $limit);",
          "187:         $this->totalresults = $DB->count_records_select('search_simpledb_index', implode(' AND ', $ands), $params);",
          "189:         $numgranted = 0;",
          "192:         $docs = array();",
          "193:         foreach ($documents as $docdata) {",
          "194:             if ($docdata->owneruserid != \\core_search\\manager::NO_OWNER_ID && $docdata->owneruserid != $USER->id) {",
          "196:                 continue;",
          "197:             }",
          "199:             if (!$searcharea = $this->get_search_area($docdata->areaid)) {",
          "200:                 $this->totalresults--;",
          "201:                 continue;",
          "202:             }",
          "205:             $docdata->id = $docdata->docid;",
          "206:             unset($docdata->docid);",
          "208:             $access = $searcharea->check_access($docdata->itemid);",
          "209:             switch ($access) {",
          "210:                 case \\core_search\\manager::ACCESS_DELETED:",
          "211:                     $this->delete_by_id($docdata->id);",
          "212:                     $this->totalresults--;",
          "213:                     break;",
          "214:                 case \\core_search\\manager::ACCESS_DENIED:",
          "215:                     $this->totalresults--;",
          "216:                     break;",
          "217:                 case \\core_search\\manager::ACCESS_GRANTED:",
          "218:                     $numgranted++;",
          "219:                     $docs[] = $this->to_document($searcharea, (array)$docdata);",
          "220:                     break;",
          "221:             }",
          "224:             if ($numgranted >= $limit) {",
          "225:                 $docs = array_slice($docs, 0, $limit, true);",
          "226:                 break;",
          "227:             }",
          "228:         }",
          "230:         return $docs;",
          "231:     }",
          "242:     public function add_document($document, $fileindexing = false) {",
          "243:         global $DB;",
          "245:         $doc = (object)$document->export_for_engine();",
          "248:         $doc->docid = $doc->id;",
          "249:         unset($doc->id);",
          "251:         $id = $DB->get_field('search_simpledb_index', 'id', array('docid' => $doc->docid));",
          "252:         try {",
          "253:             if ($id) {",
          "254:                 $doc->id = $id;",
          "255:                 $DB->update_record('search_simpledb_index', $doc);",
          "256:             } else {",
          "257:                 $DB->insert_record('search_simpledb_index', $doc);",
          "258:             }",
          "260:         } catch (\\dml_exception $ex) {",
          "261:             debugging('dml error while trying to insert document with id ' . $doc->docid . ': ' . $ex->getMessage(),",
          "262:                 DEBUG_DEVELOPER);",
          "263:             return false;",
          "264:         }",
          "266:         return true;",
          "267:     }",
          "275:     public function delete_by_id($id) {",
          "276:         global $DB;",
          "277:         $DB->delete_records('search_simpledb_index', array('docid' => $id));",
          "278:     }",
          "286:     public function delete($areaid = null) {",
          "287:         global $DB;",
          "288:         if ($areaid) {",
          "289:             $DB->delete_records('search_simpledb_index', array('areaid' => $areaid));",
          "290:         } else {",
          "291:             $DB->delete_records('search_simpledb_index');",
          "292:         }",
          "293:     }",
          "300:     public function is_server_ready() {",
          "301:         global $DB;",
          "302:         if (!$DB->get_manager()->table_exists('search_simpledb_index')) {",
          "303:             return 'search_simpledb_index table does not exist';",
          "304:         }",
          "306:         return true;",
          "307:     }",
          "314:     public function is_installed() {",
          "315:         return true;",
          "316:     }",
          "325:     public function get_query_total_count() {",
          "326:         if (!is_null($this->totalresults)) {",
          "328:             return \\core_search\\manager::MAX_RESULTS;",
          "329:         }",
          "331:         return $this->totalresults;",
          "332:     }",
          "340:     protected function get_simple_query($q) {",
          "341:         global $DB;",
          "343:         $sql = '(' .",
          "344:             $DB->sql_like('title', '?', false, false) . ' OR ' .",
          "345:             $DB->sql_like('content', '?', false, false) . ' OR ' .",
          "346:             $DB->sql_like('description1', '?', false, false) . ' OR ' .",
          "347:             $DB->sql_like('description2', '?', false, false) .",
          "348:             ')';",
          "349:         $params = array(",
          "350:             '%' . $q . '%',",
          "351:             '%' . $q . '%',",
          "352:             '%' . $q . '%',",
          "353:             '%' . $q . '%'",
          "354:         );",
          "355:         return array($sql, $params);",
          "356:     }",
          "357: }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/db/install.php||search/engine/simpledb/db/install.php": [
          "File: search/engine/simpledb/db/install.php -> search/engine/simpledb/db/install.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die;",
          "34: function xmldb_search_simpledb_install() {",
          "35:     global $DB;",
          "37:     switch ($DB->get_dbfamily()) {",
          "38:         case 'postgres':",
          "40:             $DB->execute(\"CREATE INDEX {search_simpledb_title} ON {search_simpledb_index} \" .",
          "41:                 \"USING gin(to_tsvector('simple', title))\");",
          "42:             $DB->execute(\"CREATE INDEX {search_simpledb_content} ON {search_simpledb_index} \" .",
          "43:                 \"USING gin(to_tsvector('simple', content))\");",
          "44:             $DB->execute(\"CREATE INDEX {search_simpledb_description1} ON {search_simpledb_index} \" .",
          "45:                 \"USING gin(to_tsvector('simple', description1))\");",
          "46:             $DB->execute(\"CREATE INDEX {search_simpledb_description2} ON {search_simpledb_index} \" .",
          "47:                 \"USING gin(to_tsvector('simple', description2))\");",
          "48:             break;",
          "49:         case 'mysql':",
          "50:             if ($DB->is_fulltext_search_supported()) {",
          "51:                 $DB->execute(\"CREATE FULLTEXT INDEX {search_simpledb_index_index}",
          "52:                               ON {search_simpledb_index} (title, content, description1, description2)\");",
          "53:             }",
          "54:             break;",
          "55:         case 'mssql':",
          "56:             if ($DB->is_fulltext_search_supported()) {",
          "58:                 $catalogname = $DB->get_prefix() . 'search_simpledb_catalog';",
          "59:                 if (!$DB->record_exists_sql('SELECT * FROM sys.fulltext_catalogs WHERE name = ?', array($catalogname))) {",
          "60:                     $DB->execute(\"CREATE FULLTEXT CATALOG {search_simpledb_catalog} WITH ACCENT_SENSITIVITY=OFF\");",
          "61:                 }",
          "63:                 if (defined('PHPUNIT_UTIL') and PHPUNIT_UTIL) {",
          "65:                     $changetracking = 'MANUAL';",
          "66:                 } else {",
          "67:                     $changetracking = 'AUTO';",
          "68:                 }",
          "69:                 $DB->execute(\"CREATE FULLTEXT INDEX ON {search_simpledb_index} (title, content, description1, description2)",
          "70:                               KEY INDEX {searsimpinde_id_pk} ON {search_simpledb_catalog} WITH CHANGE_TRACKING $changetracking\");",
          "71:             }",
          "72:             break;",
          "73:     }",
          "74: }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/db/uninstall.php||search/engine/simpledb/db/uninstall.php": [
          "File: search/engine/simpledb/db/uninstall.php -> search/engine/simpledb/db/uninstall.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die;",
          "34: function xmldb_search_simpledb_uninstall() {",
          "35:     global $DB;",
          "37:     switch ($DB->get_dbfamily()) {",
          "38:         case 'postgres':",
          "39:             $DB->execute(\"DROP INDEX {search_simpledb_title}\");",
          "40:             $DB->execute(\"DROP INDEX {search_simpledb_content}\");",
          "41:             $DB->execute(\"DROP INDEX {search_simpledb_description1}\");",
          "42:             $DB->execute(\"DROP INDEX {search_simpledb_description2}\");",
          "43:             break;",
          "44:         case 'mysql':",
          "45:             if ($DB->is_fulltext_search_supported()) {",
          "46:                 $DB->execute(\"ALTER TABLE {search_simpledb_index} DROP INDEX {search_simpledb_index_index}\");",
          "47:             }",
          "48:             break;",
          "49:         case 'mssql':",
          "50:             if ($DB->is_fulltext_search_supported()) {",
          "51:                 $DB->execute(\"DROP FULLTEXT CATALOG {search_simpledb_catalog}\");",
          "52:             }",
          "53:             break;",
          "54:     }",
          "55: }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/lang/en/search_simpledb.php||search/engine/simpledb/lang/en/search_simpledb.php": [
          "File: search/engine/simpledb/lang/en/search_simpledb.php -> search/engine/simpledb/lang/en/search_simpledb.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: $string['pluginname'] = 'Simple search';",
          "26: $string['searchinfo'] = 'Search queries';",
          "27: $string['searchinfo_help'] = 'Enter the search query.';",
          "",
          "---------------"
        ],
        "search/engine/simpledb/tests/engine_test.php||search/engine/simpledb/tests/engine_test.php": [
          "File: search/engine/simpledb/tests/engine_test.php -> search/engine/simpledb/tests/engine_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: global $CFG;",
          "29: require_once($CFG->dirroot . '/search/tests/fixtures/testable_core_search.php');",
          "30: require_once($CFG->dirroot . '/search/tests/fixtures/mock_search_area.php');",
          "40: class search_simpledb_engine_testcase extends advanced_testcase {",
          "45:     protected $search = null;",
          "50:     protected $engine = null;",
          "55:     protected $generator = null;",
          "62:     public function setUp() {",
          "63:         $this->resetAfterTest();",
          "65:         if ($this->requires_manual_index_update()) {",
          "67:             $this->preventResetByRollback();",
          "68:         }",
          "70:         set_config('enableglobalsearch', true);",
          "75:         $this->engine = new \\search_simpledb\\engine();",
          "76:         $this->search = testable_core_search::instance($this->engine);",
          "77:         $areaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "78:         $this->search->add_search_area($areaid, new core_mocksearch\\search\\mock_search_area());",
          "80:         $this->generator = self::getDataGenerator()->get_plugin_generator('core_search');",
          "81:         $this->generator->setup();",
          "83:         $this->setAdminUser();",
          "84:     }",
          "91:     public function tearDown() {",
          "93:         if ($this->generator) {",
          "95:             $this->generator->teardown();",
          "96:             $this->generator = null;",
          "97:         }",
          "98:     }",
          "105:     public function test_index() {",
          "106:         global $DB;",
          "108:         $record = new \\stdClass();",
          "109:         $record->timemodified = time() - 1;",
          "110:         $this->generator->create_record($record);",
          "113:         $this->assertTrue($this->search->index());",
          "116:         sleep(1);",
          "117:         $this->assertFalse($this->search->index());",
          "119:         $this->generator->create_record();",
          "122:         $this->assertTrue($this->search->index());",
          "123:     }",
          "130:     public function test_search() {",
          "131:         global $USER, $DB;",
          "133:         $this->generator->create_record();",
          "134:         $record = new \\stdClass();",
          "135:         $record->title = \"Special title\";",
          "136:         $this->generator->create_record($record);",
          "138:         $this->search->index();",
          "139:         $this->update_index();",
          "141:         $querydata = new stdClass();",
          "142:         $querydata->q = 'message';",
          "143:         $results = $this->search->search($querydata);",
          "144:         $this->assertCount(2, $results);",
          "147:         $this->assertEquals($USER->id, $results[0]->get('userid'));",
          "148:         $this->assertEquals(\\context_course::instance(SITEID)->id, $results[0]->get('contextid'));",
          "151:         $querydata->q = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "152:         $this->assertCount(0, $this->search->search($querydata));",
          "153:         $querydata->q = 'message';",
          "155:         sleep(1);",
          "156:         $beforeadding = time();",
          "157:         sleep(1);",
          "158:         $this->generator->create_record();",
          "159:         $this->search->index();",
          "160:         $this->update_index();",
          "163:         $querydata->timestart = $beforeadding;",
          "164:         $this->assertCount(1, $this->search->search($querydata));",
          "167:         unset($querydata->timestart);",
          "168:         $querydata->timeend = $beforeadding;",
          "169:         $this->assertCount(2, $this->search->search($querydata));",
          "172:         unset($querydata->timeend);",
          "173:         $querydata->title = 'Special title';",
          "174:         $this->assertCount(1, $this->search->search($querydata));",
          "177:         unset($querydata->title);",
          "178:         $querydata->courseids = array(SITEID + 1);",
          "179:         $this->assertCount(0, $this->search->search($querydata));",
          "181:         $querydata->courseids = array(SITEID);",
          "182:         $this->assertCount(3, $this->search->search($querydata));",
          "185:         unset($querydata->courseids);",
          "186:         $forumpostareaid = \\core_search\\manager::generate_areaid('mod_forum', 'post');",
          "187:         $mockareaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "189:         $querydata->areaids = array($forumpostareaid);",
          "190:         $this->assertCount(0, $this->search->search($querydata));",
          "192:         $querydata->areaids = array($forumpostareaid, $mockareaid);",
          "193:         $this->assertCount(3, $this->search->search($querydata));",
          "195:         $querydata->areaids = array($mockareaid);",
          "196:         $this->assertCount(3, $this->search->search($querydata));",
          "198:         $querydata->areaids = array();",
          "199:         $this->assertCount(3, $this->search->search($querydata));",
          "202:         $this->generator->delete_all();",
          "203:         $this->search->index(true);",
          "204:         $this->update_index();",
          "205:         unset($querydata->title);",
          "206:         $querydata->q = '';",
          "207:         $this->assertCount(0, $this->search->search($querydata));",
          "208:     }",
          "215:     public function test_delete() {",
          "217:         $this->generator->create_record();",
          "218:         $this->generator->create_record();",
          "219:         $this->search->index();",
          "220:         $this->update_index();",
          "222:         $querydata = new stdClass();",
          "223:         $querydata->q = 'message';",
          "225:         $this->assertCount(2, $this->search->search($querydata));",
          "227:         $areaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "228:         $this->search->delete_index($areaid);",
          "229:         $this->update_index();",
          "230:         $this->assertCount(0, $this->search->search($querydata));",
          "231:     }",
          "238:     public function test_alloweduserid() {",
          "240:         $area = new core_mocksearch\\search\\mock_search_area();",
          "242:         $record = $this->generator->create_record();",
          "245:         $doc = $area->get_document($record);",
          "246:         $this->engine->add_document($doc);",
          "248:         $users = array();",
          "249:         $users[] = $this->getDataGenerator()->create_user();",
          "250:         $users[] = $this->getDataGenerator()->create_user();",
          "251:         $users[] = $this->getDataGenerator()->create_user();",
          "254:         $originalid = $doc->get('id');",
          "257:         foreach ($users as $user) {",
          "258:             $doc = $area->get_document($record);",
          "259:             $doc->set('id', $originalid.'-'.$user->id);",
          "260:             $doc->set('owneruserid', $user->id);",
          "261:             $this->engine->add_document($doc);",
          "262:         }",
          "263:         $this->update_index();",
          "265:         $this->engine->area_index_complete($area->get_area_id());",
          "267:         $querydata = new stdClass();",
          "268:         $querydata->q = 'message';",
          "269:         $querydata->title = $doc->get('title');",
          "272:         foreach ($users as $user) {",
          "273:             $this->setUser($user);",
          "275:             $results = $this->search->search($querydata);",
          "276:             $this->assertCount(2, $results);",
          "278:             $owned = 0;",
          "279:             $notowned = 0;",
          "282:             foreach ($results as $result) {",
          "283:                 $owneruserid = $result->get('owneruserid');",
          "284:                 if (empty($owneruserid)) {",
          "285:                     $notowned++;",
          "286:                     $this->assertEquals(0, $owneruserid);",
          "287:                     $this->assertEquals($originalid, $result->get('id'));",
          "288:                 } else {",
          "289:                     $owned++;",
          "290:                     $this->assertEquals($user->id, $owneruserid);",
          "291:                     $this->assertEquals($originalid.'-'.$user->id, $result->get('id'));",
          "292:                 }",
          "293:             }",
          "295:             $this->assertEquals(1, $owned);",
          "296:             $this->assertEquals(1, $notowned);",
          "297:         }",
          "300:         $otheruser = $this->getDataGenerator()->create_user();",
          "301:         $this->setUser($otheruser);",
          "303:         $results = $this->search->search($querydata);",
          "304:         $this->assertCount(1, $results);",
          "306:         $this->assertEquals(0, $results[0]->get('owneruserid'));",
          "307:         $this->assertEquals($originalid, $results[0]->get('id'));",
          "308:     }",
          "310:     public function test_delete_by_id() {",
          "312:         $this->generator->create_record();",
          "313:         $this->generator->create_record();",
          "314:         $this->search->index();",
          "315:         $this->update_index();",
          "317:         $querydata = new stdClass();",
          "320:         $querydata->q = 'message';",
          "321:         $results = $this->search->search($querydata);",
          "322:         $this->assertCount(2, $results);",
          "324:         $first = reset($results);",
          "325:         $deleteid = $first->get('id');",
          "327:         $this->engine->delete_by_id($deleteid);",
          "328:         $this->update_index();",
          "331:         $results = $this->search->search($querydata);",
          "332:         $this->assertCount(1, $results);",
          "333:         $result = reset($results);",
          "334:         $this->assertNotEquals($deleteid, $result->get('id'));",
          "335:     }",
          "342:     private function update_index() {",
          "343:         global $DB;",
          "345:         if (!$this->requires_manual_index_update()) {",
          "346:             return;",
          "347:         }",
          "349:         $DB->execute(\"ALTER FULLTEXT INDEX ON t_search_simpledb_index START UPDATE POPULATION\");",
          "351:         $catalogname = $DB->get_prefix() . 'search_simpledb_catalog';",
          "352:         $retries = 0;",
          "353:         do {",
          "355:             usleep(200000);",
          "357:             $record = $DB->get_record_sql(\"SELECT FULLTEXTCATALOGPROPERTY(cat.name, 'PopulateStatus') AS [PopulateStatus]",
          "358:                                              FROM sys.fulltext_catalogs AS cat",
          "359:                                             WHERE cat.name = ?\", array($catalogname));",
          "360:             $retries++;",
          "362:         } while ($retries < 100 && $record->populatestatus != '0');",
          "364:         if ($retries === 100) {",
          "366:             $this->fail('Sorry, your SQL server fulltext search index is too slow.');",
          "367:         }",
          "368:     }",
          "375:     private function requires_manual_index_update() {",
          "376:         global $DB;",
          "377:         return ($DB->get_dbfamily() === 'mssql' && $DB->is_fulltext_search_supported());",
          "378:     }",
          "379: }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/version.php||search/engine/simpledb/version.php": [
          "File: search/engine/simpledb/version.php -> search/engine/simpledb/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $plugin->version = 2017072700;",
          "28: $plugin->requires = 2017072700;",
          "29: $plugin->component = 'search_simpledb';",
          "",
          "---------------"
        ],
        "search/engine/solr/lang/en/search_solr.php||search/engine/solr/lang/en/search_solr.php": [
          "File: search/engine/solr/lang/en/search_solr.php -> search/engine/solr/lang/en/search_solr.php"
        ],
        "search/engine/solr/tests/engine_test.php||search/engine/solr/tests/engine_test.php": [
          "File: search/engine/solr/tests/engine_test.php -> search/engine/solr/tests/engine_test.php"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018032200.07;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018032700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "333d11c9fce0918bc42088bf55f4001071b93d9b",
      "candidate_info": {
        "commit_hash": "333d11c9fce0918bc42088bf55f4001071b93d9b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/333d11c9fce0918bc42088bf55f4001071b93d9b",
        "files": [
          "lib/classes/message/message.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/messagelib.php",
          "lib/tests/messagelib_test.php",
          "message/externallib.php",
          "message/output/popup/classes/api.php",
          "message/output/popup/externallib.php",
          "message/output/popup/tests/base.php",
          "message/output/popup/tests/externallib_test.php",
          "message/tests/externallib_test.php",
          "message/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-60680 notifications: New customdata field\n\nNew field to store custom data for message processors.",
        "before_after_code_files": [
          "lib/classes/message/message.php||lib/classes/message/message.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/messagelib.php||lib/messagelib.php",
          "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php",
          "message/externallib.php||message/externallib.php",
          "message/output/popup/classes/api.php||message/output/popup/classes/api.php",
          "message/output/popup/externallib.php||message/output/popup/externallib.php",
          "message/output/popup/tests/base.php||message/output/popup/tests/base.php",
          "message/output/popup/tests/externallib_test.php||message/output/popup/tests/externallib_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/classes/message/message.php||lib/classes/message/message.php": [
          "File: lib/classes/message/message.php -> lib/classes/message/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     private $timecreated;",
          "126:     private $fullmessagetrust;",
          "129:     private $properties = array(",
          "130:         'courseid',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     private $customdata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         'attachment',",
          "149:         'attachname',",
          "150:         'timecreated',",
          "155:     private $additionalcontent = array();",
          "",
          "[Removed Lines]",
          "151:         'fullmessagetrust'",
          "152:         );",
          "",
          "[Added Lines]",
          "155:         'fullmessagetrust',",
          "156:         'customdata',",
          "157:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:         }",
          "200:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     protected function set_customdata($customdata) {",
          "214:         if (!empty($this->courseid) && (is_object($customdata) || is_array($customdata))) {",
          "215:             $customdata = (array) $customdata;",
          "216:             $customdata['courseid'] = $this->courseid;",
          "217:         }",
          "218:         $this->customdata = json_encode($customdata);",
          "219:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:     public function __set($prop, $value) {",
          "254:         if (in_array($prop, $this->properties)) {",
          "255:             return $this->$prop = $value;",
          "256:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:         if ($prop == 'customdata') {",
          "276:             return $this->set_customdata($value);",
          "277:         }",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3000:         upgrade_main_savepoint(true, 2019041300.01);",
          "3001:     }",
          "3003:     return true;",
          "3004: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3003:     if ($oldversion < 2019041800.01) {",
          "3005:         $table = new xmldb_table('message');",
          "3006:         $field = new xmldb_field('customdata', XMLDB_TYPE_TEXT, null, null, null, null, null, 'eventtype');",
          "3009:         if (!$dbman->field_exists($table, $field)) {",
          "3010:             $dbman->add_field($table, $field);",
          "3011:         }",
          "3014:         $table = new xmldb_table('notifications');",
          "3015:         $field = new xmldb_field('customdata', XMLDB_TYPE_TEXT, null, null, null, null, null, 'timecreated');",
          "3018:         if (!$dbman->field_exists($table, $field)) {",
          "3019:             $dbman->add_field($table, $field);",
          "3020:         }",
          "3022:         $table = new xmldb_table('messages');",
          "3024:         if (!$dbman->field_exists($table, $field)) {",
          "3025:             $dbman->add_field($table, $field);",
          "3026:         }",
          "3029:         upgrade_main_savepoint(true, 2019041800.01);",
          "3030:     }",
          "",
          "---------------"
        ],
        "lib/messagelib.php||lib/messagelib.php": [
          "File: lib/messagelib.php -> lib/messagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:         $tabledata->fullmessagehtml = $eventdata->fullmessagehtml;",
          "154:         $tabledata->smallmessage = $eventdata->smallmessage;",
          "155:         $tabledata->timecreated = time();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:         $tabledata->customdata = $eventdata->customdata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     $tabledata->eventtype = $eventdata->name;",
          "256:     $tabledata->component = $eventdata->component;",
          "257:     $tabledata->timecreated = time();",
          "258:     if (!empty($eventdata->contexturl)) {",
          "259:         $tabledata->contexturl = (string)$eventdata->contexturl;",
          "260:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:     $tabledata->customdata = $eventdata->customdata;",
          "",
          "---------------"
        ],
        "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php": [
          "File: lib/tests/messagelib_test.php -> lib/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:         $message->fullmessagehtml = '<p>message body</p>';",
          "203:         $message->smallmessage = 'small message';",
          "204:         $message->notification = '0';",
          "206:         $sink = $this->redirectMessages();",
          "207:         $this->setCurrentTimeStart();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:         $message->customdata = ['datakey' => 'data'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:         $this->assertEquals($message->smallmessage, $savedmessage->smallmessage);",
          "219:         $this->assertEquals($message->smallmessage, $savedmessage->smallmessage);",
          "220:         $this->assertEquals($message->notification, $savedmessage->notification);",
          "221:         $this->assertTimeCurrent($savedmessage->timecreated);",
          "222:         $record = $DB->get_record('messages', array('id' => $savedmessage->id), '*', MUST_EXIST);",
          "223:         unset($savedmessage->useridto);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:         $this->assertEquals($message->customdata, $savedmessage->customdata);",
          "223:         $this->assertContains('datakey', $savedmessage->customdata);",
          "225:         $customdata = json_decode($savedmessage->customdata);",
          "226:         $this->assertEquals('data', $customdata->datakey);",
          "227:         $this->assertEquals(1, $customdata->courseid);",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3116:                             'timecreated' => new external_value(PARAM_INT, 'Time created'),",
          "3117:                             'timeread' => new external_value(PARAM_INT, 'Time read'),",
          "3118:                             'usertofullname' => new external_value(PARAM_TEXT, 'User to full name'),",
          "3120:                         ), 'message'",
          "3121:                     )",
          "3122:                 ),",
          "",
          "[Removed Lines]",
          "3119:                             'userfromfullname' => new external_value(PARAM_TEXT, 'User from full name')",
          "",
          "[Added Lines]",
          "3119:                             'userfromfullname' => new external_value(PARAM_TEXT, 'User from full name'),",
          "3120:                             'component' => new external_value(PARAM_TEXT, 'The component that generated the notification',",
          "3121:                                 VALUE_OPTIONAL),",
          "3122:                             'eventtype' => new external_value(PARAM_TEXT, 'The type of notification', VALUE_OPTIONAL),",
          "3123:                             'customdata' => new external_value(PARAM_RAW, 'Custom data to be passed to the message processor.",
          "3124:                                 The data here is serialised using json_encode().', VALUE_OPTIONAL),",
          "",
          "---------------"
        ],
        "message/output/popup/classes/api.php||message/output/popup/classes/api.php": [
          "File: message/output/popup/classes/api.php -> message/output/popup/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:                        n.subject, n.fullmessage, n.fullmessageformat,",
          "73:                        n.fullmessagehtml, n.smallmessage, n.contexturl,",
          "74:                        n.contexturlname, n.timecreated, n.component,",
          "76:                   FROM {notifications} n",
          "77:                  WHERE n.id IN (SELECT notificationid FROM {message_popup_notifications})",
          "78:                    AND n.useridto = ?",
          "",
          "[Removed Lines]",
          "75:                        n.eventtype, n.timeread",
          "",
          "[Added Lines]",
          "75:                        n.eventtype, n.timeread, n.customdata",
          "",
          "---------------"
        ],
        "message/output/popup/externallib.php||message/output/popup/externallib.php": [
          "File: message/output/popup/externallib.php -> message/output/popup/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:                             'component' => new external_value(PARAM_TEXT, 'The component that generated the notification',",
          "166:                                 VALUE_OPTIONAL),",
          "167:                             'eventtype' => new external_value(PARAM_TEXT, 'The type of notification', VALUE_OPTIONAL),",
          "168:                         ), 'message'",
          "169:                     )",
          "170:                 ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:                             'customdata' => new external_value(PARAM_RAW, 'Custom data to be passed to the message processor.",
          "169:                                 The data here is serialised using json_encode().', VALUE_OPTIONAL),",
          "",
          "---------------"
        ],
        "message/output/popup/tests/base.php||message/output/popup/tests/base.php": [
          "File: message/output/popup/tests/base.php -> message/output/popup/tests/base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:         $record->fullmessage = $message;",
          "50:         $record->smallmessage = $message;",
          "51:         $record->timecreated = $timecreated ? $timecreated : time();",
          "53:         $id = $DB->insert_record('notifications', $record);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         $record->customdata  = json_encode(['datakey' => 'data']);",
          "",
          "---------------"
        ],
        "message/output/popup/tests/externallib_test.php||message/output/popup/tests/externallib_test.php": [
          "File: message/output/popup/tests/externallib_test.php -> message/output/popup/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:         $this->setAdminUser();",
          "97:         $result = message_popup_external::get_popup_notifications($recipient->id, false, 0, 0);",
          "98:         $this->assertCount(4, $result['notifications']);",
          "100:         $this->setUser($recipient);",
          "101:         $result = message_popup_external::get_popup_notifications($recipient->id, false, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         $this->assertObjectHasAttribute('datakey', json_decode($result['notifications'][0]->customdata));",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:         $eventdata->fullmessageformat = FORMAT_PLAIN;",
          "1613:         $eventdata->fullmessagehtml  = '<strong>Feedback submitted</strong>';",
          "1614:         $eventdata->smallmessage     = '';",
          "1615:         message_send($eventdata);",
          "1617:         $this->setUser($user1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615:         $eventdata->customdata         = ['datakey' => 'data'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644:         $messages = core_message_external::get_messages(0, $user1->id, 'notifications', true, true, 0, 0);",
          "1645:         $messages = external_api::clean_returnvalue(core_message_external::get_messages_returns(), $messages);",
          "1646:         $this->assertCount(1, $messages['messages']);",
          "1649:         $CFG->messaging = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1649:         $this->assertObjectHasAttribute('datakey', json_decode($messages['messages'][0]['customdata']));",
          "1650:         $this->assertEquals('mod_feedback', $messages['messages'][0]['component']);",
          "1651:         $this->assertEquals('submission', $messages['messages'][0]['eventtype']);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019041800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}