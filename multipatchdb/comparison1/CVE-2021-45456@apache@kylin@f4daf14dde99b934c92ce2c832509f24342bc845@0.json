{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6621a2aaa750540054fe6951dcfacf5fbaabb166",
      "candidate_info": {
        "commit_hash": "6621a2aaa750540054fe6951dcfacf5fbaabb166",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/6621a2aaa750540054fe6951dcfacf5fbaabb166",
        "files": [
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java",
          "core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java",
          "core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java",
          "core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java"
        ],
        "message": "KYLIN-4995 fix query exception when the query statement contains a single left parenthesis\n\n(cherry picked from commit 4e63c34b11496a1b79cb7ad4a1ce7b29c99a492d)",
        "before_after_code_files": [
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java",
          "core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java||core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java",
          "core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java||core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java",
          "core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java||core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     private static Pair<Integer, Integer> getPosWithBracketsCompletion(String inputSql, int left, int right) {",
          "161:         int leftBracketNum = 0;",
          "162:         int rightBracketNum = 0;",
          "163:         String substring = inputSql.substring(left, right);",
          "164:         for (int i = 0; i < substring.length(); i++) {",
          "165:             char temp = substring.charAt(i);",
          "166:             if (temp == '(') {",
          "167:                 leftBracketNum++;",
          "168:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:         boolean constantFlag = false;",
          "167:             if (temp == '\\'') {",
          "168:                 constantFlag = !constantFlag;",
          "169:             }",
          "170:             if (constantFlag) {",
          "171:                 continue;",
          "172:             }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java||core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java -> core-metadata/src/main/java/org/apache/kylin/source/adhocquery/HivePushDownConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:         if (sql.length() > 1) {",
          "229:             Stack<Integer> lStack = new Stack<>();",
          "230:             boolean inStrVal = false;",
          "231:             for (int i = 0; i < sql.length(); i++) {",
          "232:                 switch (sql.charAt(i)) {",
          "233:                 case '(':",
          "235:                         lStack.push(i);",
          "236:                     }",
          "237:                     break;",
          "238:                 case ')':",
          "240:                         result.put(lStack.pop(), i);",
          "241:                     }",
          "242:                     break;",
          "",
          "[Removed Lines]",
          "234:                     if (!inStrVal) {",
          "239:                     if (!inStrVal && !lStack.empty()) {",
          "",
          "[Added Lines]",
          "231:             boolean constantFlag = false;",
          "234:                 case '\\'':",
          "235:                     constantFlag = !constantFlag;",
          "236:                     break;",
          "238:                     if (!inStrVal && !constantFlag) {",
          "243:                     if (!inStrVal && !lStack.empty() && !constantFlag) {",
          "",
          "---------------"
        ],
        "core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java||core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java": [
          "File: core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java -> core-metadata/src/test/java/org/apache/kylin/model/tool/CalciteParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.model.tool;",
          "21: import com.google.common.base.Preconditions;",
          "22: import org.apache.calcite.sql.SqlNode;",
          "23: import org.apache.calcite.sql.SqlSelect;",
          "24: import org.apache.calcite.sql.parser.SqlParseException;",
          "25: import org.apache.kylin.common.util.Pair;",
          "26: import org.apache.kylin.metadata.model.tool.CalciteParser;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "29: import org.junit.rules.ExpectedException;",
          "31: import static org.junit.Assert.assertEquals;",
          "32: import static org.junit.Assert.fail;",
          "34: public class CalciteParserTest {",
          "36:     @Rule",
          "37:     public final ExpectedException exception = ExpectedException.none();",
          "39:     @Test",
          "40:     public void testNoTableNameExists() throws SqlParseException {",
          "41:         String expr1 = \"a + b\";",
          "42:         assertEquals(\"x.a + x.b\", CalciteParser.insertAliasInExpr(expr1, \"x\"));",
          "44:         String expr2 = \"a + year(b)\";",
          "45:         assertEquals(\"x.a + year(x.b)\", CalciteParser.insertAliasInExpr(expr2, \"x\"));",
          "47:         String expr3 = \"a + hiveudf(b)\";",
          "48:         assertEquals(\"x.a + hiveudf(x.b)\", CalciteParser.insertAliasInExpr(expr3, \"x\"));",
          "49:     }",
          "51:     @Test",
          "52:     public void testTableNameExists1() throws SqlParseException {",
          "53:         String expr1 = \"a + x.b\";",
          "55:         exception.expect(IllegalArgumentException.class);",
          "56:         exception.expectMessage(\"SqlIdentifier X.B contains DB/Table name\");",
          "57:         CalciteParser.insertAliasInExpr(expr1, \"x\");",
          "58:     }",
          "60:     @Test",
          "61:     public void testTableNameExists2() throws SqlParseException {",
          "62:         String expr1 = \"a + year(x.b)\";",
          "64:         exception.expect(IllegalArgumentException.class);",
          "65:         exception.expectMessage(\"SqlIdentifier X.B contains DB/Table name\");",
          "66:         CalciteParser.insertAliasInExpr(expr1, \"x\");",
          "67:     }",
          "69:     @Test",
          "70:     public void testTableNameExists3() throws SqlParseException {",
          "71:         String expr1 = \"a + hiveudf(x.b)\";",
          "73:         exception.expect(IllegalArgumentException.class);",
          "74:         exception.expectMessage(\"SqlIdentifier X.B contains DB/Table name\");",
          "75:         CalciteParser.insertAliasInExpr(expr1, \"x\");",
          "76:     }",
          "78:     @Test",
          "79:     public void testCaseWhen() {",
          "80:         String expr = \"(CASE LSTG_FORMAT_NAME  WHEN 'Auction' THEN 'x'  WHEN 'y' THEN '222' ELSE 'z' END)\";",
          "81:         String alias = \"TEST_KYLIN_FACT\";",
          "82:         String s = CalciteParser.insertAliasInExpr(expr, alias);",
          "83:         System.out.println(s);",
          "84:         assertEquals(",
          "85:                 \"(CASE TEST_KYLIN_FACT.LSTG_FORMAT_NAME  WHEN 'Auction' THEN 'x'  WHEN 'y' THEN '222' ELSE 'z' END)\",",
          "86:                 s);",
          "87:     }",
          "89:     @Test",
          "90:     public void testPos() throws SqlParseException {",
          "91:         String[] sqls = new String[]{\"select \\n a \\n + \\n b \\n from t\", //",
          "92:                 \"select\\na\\n+\\nb\\nfrom t\", //",
          "93:                 \"select \\r\\n a \\r\\n + \\r\\n b \\r\\n from t\", //",
          "94:                 \"select\\r\\na\\r\\n+\\r\\nb\\r\\nfrom t\"};",
          "96:         for (String sql : sqls) {",
          "97:             SqlNode parse = ((SqlSelect) CalciteParser.parse(sql)).getSelectList().get(0);",
          "98:             Pair<Integer, Integer> replacePos = CalciteParser.getReplacePos(parse, sql);",
          "99:             String substring = sql.substring(replacePos.getFirst(), replacePos.getSecond());",
          "100:             Preconditions.checkArgument(substring.startsWith(\"a\"));",
          "101:             Preconditions.checkArgument(substring.endsWith(\"b\"));",
          "102:         }",
          "104:     }",
          "106:     @Test",
          "107:     public void testPosWithBracketsInConstant() throws SqlParseException {",
          "108:         String[] sqls = new String[]{\"select '(   a + b) * (c+ d     ' from t\", };",
          "109:         for (String sql : sqls) {",
          "110:             SqlNode parse = ((SqlSelect) CalciteParser.parse(sql)).getSelectList().get(0);",
          "111:             Pair<Integer, Integer> replacePos = CalciteParser.getReplacePos(parse, sql);",
          "112:             String substring = sql.substring(replacePos.getFirst(), replacePos.getSecond());",
          "113:             Preconditions.checkArgument(substring.startsWith(\"'\"));",
          "114:         }",
          "115:     }",
          "117:     @Test",
          "118:     public void testRowExpression() {",
          "119:         String sql = \"SELECT 'LO_LINENUMBER', 'LO_SUPPKEY' FROM \\\"SSB\\\".\\\"P_LINEORDER\\\" WHERE ROW('LO_ORDERKEY', 'LO_CUSTKEY') IN (ROW(123, 234), ROW(321, 432)) GROUP BY 'LO_LINENUMBER', 'LO_SUPPKEY'\";",
          "120:         try {",
          "121:             CalciteParser.parse(sql);",
          "122:         } catch (SqlParseException e) {",
          "123:             fail(\"can't parse row construction\");",
          "124:         }",
          "125:     }",
          "126: }",
          "",
          "---------------"
        ],
        "core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java||core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java": [
          "File: core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java -> core-metadata/src/test/java/org/apache/kylin/source/adhocquery/HivePushDownConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:         assertEquals(\"select count(*) as cnt from test_kylin_fact where length(lstg_format_name) < 10\", replacedString);",
          "31:     }",
          "33:     @Test",
          "34:     public void testExtractReplace() {",
          "35:         String originString = \"ignore EXTRACT(YEAR FROM KYLIN_CAL_DT.CAL_DT) ignore\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     @Test",
          "34:     public void testStringReplace1() {",
          "35:         String originString = \"select * from (select '(aaaa' from P_LINEORDER) \";",
          "36:         String replacedString = HivePushDownConverter.subqueryReplace(originString);",
          "37:         assertEquals(\"select * from (select '(aaaa' from P_LINEORDER) \", replacedString);",
          "38:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a21389f685dfbbcd9c9254e578d7e8dcf70f078",
      "candidate_info": {
        "commit_hash": "8a21389f685dfbbcd9c9254e578d7e8dcf70f078",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/8a21389f685dfbbcd9c9254e578d7e8dcf70f078",
        "files": [
          "core-common/pom.xml",
          "core-common/src/main/java/org/apache/kylin/common/KConstants.java",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/ServerMode.java",
          "core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java",
          "core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java",
          "core-common/src/test/java/org/apache/kylin/common/zookeeper/ExampleServer.java",
          "core-common/src/test/java/org/apache/kylin/common/zookeeper/KylinServerDiscoveryTest.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java",
          "server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"
        ],
        "message": "KYLIN-4906 Support query/job server dynamic register and discovery in kylin4\n\n(cherry picked from commit fa37255b15bdf69e347ec747baf0731ce6634b39)\n(cherry picked from commit fa37255b15bdf69e347ec747baf0731ce6634b39)\n(cherry picked from commit fa37255b15bdf69e347ec747baf0731ce6634b39)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KConstants.java||core-common/src/main/java/org/apache/kylin/common/KConstants.java",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfig.java||core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/ServerMode.java||core-common/src/main/java/org/apache/kylin/common/ServerMode.java",
          "core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java||core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java",
          "core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java||core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java",
          "core-job/src/test/java/org/apache/kylin/job/impl/curator/ExampleServer.java||core-common/src/test/java/org/apache/kylin/common/zookeeper/ExampleServer.java",
          "core-job/src/test/java/org/apache/kylin/job/impl/curator/CuratorSchedulerTest.java||core-common/src/test/java/org/apache/kylin/common/zookeeper/KylinServerDiscoveryTest.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java||core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java||core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java||core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java",
          "server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java||server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java||server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KConstants.java||core-common/src/main/java/org/apache/kylin/common/KConstants.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KConstants.java -> core-common/src/main/java/org/apache/kylin/common/KConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.common;",
          "21: public class KConstants {",
          "22:     public static final int DEFAULT_SERVICE_PORT = 7070;",
          "23: }",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/KylinConfig.java||core-common/src/main/java/org/apache/kylin/common/KylinConfig.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfig.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.common;",
          "22: import org.apache.commons.io.IOUtils;",
          "23: import org.apache.commons.lang.StringUtils;",
          "24: import org.apache.kylin.common.restclient.RestClient;",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.shaded.com.google.common.base.Preconditions;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import java.util.Properties;",
          "49: import java.util.concurrent.ConcurrentHashMap;",
          "53: public class KylinConfig extends KylinConfigBase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import org.apache.kylin.shaded.com.google.common.base.Strings;",
          "51: import org.apache.kylin.shaded.com.google.common.base.Preconditions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:             String value = entry.getValue().toString();",
          "532:             orderedProperties.setProperty(key, value);",
          "533:         }",
          "535:         final StringBuilder sb = new StringBuilder();",
          "536:         for (Map.Entry<String, String> entry : orderedProperties.entrySet()) {",
          "537:             sb.append(entry.getKey() + \"=\" + entry.getValue()).append('\\n');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:         String[] systemProps = { \"kylin.server.cluster-servers\", \"kylin.server.cluster-servers-with-mode\" };",
          "538:         for (String sysProp : systemProps) {",
          "539:             String sysPropValue = System.getProperty(sysProp);",
          "540:             if (!Strings.isNullOrEmpty(sysPropValue)) {",
          "541:                 orderedProperties.setProperty(sysProp, sysPropValue);",
          "542:             }",
          "543:         }",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2163:         return getOptional(\"kylin.server.host-address\", \"localhost:7070\");",
          "2164:     }",
          "2166:     public String getClusterName() {",
          "2167:         String key = \"kylin.server.cluster-name\";",
          "2168:         String clusterName = this.getOptional(key, getMetadataUrlPrefix());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2166:     public boolean getServerSelfDiscoveryEnabled() {",
          "2167:         return Boolean.parseBoolean(getOptional(\"kylin.server.self-discovery-enabled\", FALSE));",
          "2168:     }",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/ServerMode.java||core-common/src/main/java/org/apache/kylin/common/ServerMode.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/ServerMode.java -> core-common/src/main/java/org/apache/kylin/common/ServerMode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java||core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java -> core-common/src/main/java/org/apache/kylin/common/util/ServerMode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     public static ServerMode SERVER_MODE = getServerMode();",
          "64:     private static ServerMode getServerMode() {",
          "66:         String serverModeStr = kylinConfig.getServerMode();",
          "67:         List<String> serverModes = Lists.newArrayList();",
          "68:         String[] serverModeArray = serverModeStr.split(\"\\\\s*,\\\\s*\");",
          "",
          "[Removed Lines]",
          "65:         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "",
          "[Added Lines]",
          "65:         return getServerMode(KylinConfig.getInstanceFromEnv());",
          "66:     }",
          "68:     public static ServerMode getServerMode(KylinConfig kylinConfig) {",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java||core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java -> core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.common.zookeeper;",
          "21: import java.io.ByteArrayOutputStream;",
          "22: import java.io.Closeable;",
          "23: import java.io.IOException;",
          "24: import java.util.LinkedHashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "27: import java.util.concurrent.atomic.AtomicBoolean;",
          "28: import java.util.stream.Collectors;",
          "30: import org.apache.commons.io.IOUtils;",
          "31: import org.apache.curator.framework.CuratorFramework;",
          "32: import org.apache.curator.framework.state.ConnectionState;",
          "33: import org.apache.curator.x.discovery.ServiceCache;",
          "34: import org.apache.curator.x.discovery.ServiceDiscovery;",
          "35: import org.apache.curator.x.discovery.ServiceDiscoveryBuilder;",
          "36: import org.apache.curator.x.discovery.ServiceInstance;",
          "37: import org.apache.curator.x.discovery.details.InstanceSerializer;",
          "38: import org.apache.curator.x.discovery.details.ServiceCacheListener;",
          "39: import org.apache.kylin.common.KylinConfig;",
          "40: import org.apache.kylin.common.util.StringUtil;",
          "41: import org.apache.kylin.common.util.ZKUtil;",
          "42: import org.slf4j.Logger;",
          "43: import org.slf4j.LoggerFactory;",
          "45: import com.fasterxml.jackson.databind.DeserializationFeature;",
          "46: import com.fasterxml.jackson.databind.JavaType;",
          "47: import com.fasterxml.jackson.databind.ObjectMapper;",
          "48: import com.google.common.annotations.VisibleForTesting;",
          "49: import com.google.common.collect.Maps;",
          "50: import com.google.common.util.concurrent.ThreadFactoryBuilder;",
          "52: public class KylinServerDiscovery implements Closeable {",
          "54:     private static final Logger logger = LoggerFactory.getLogger(KylinServerDiscovery.class);",
          "56:     public static final String SERVICE_PATH = \"/service\";",
          "57:     public static final String SERVICE_NAME = \"cluster_servers\";",
          "58:     public static final String SERVICE_PAYLOAD_DESCRIPTION = \"description\";",
          "60:     private static class SingletonHolder {",
          "61:         private static final KylinServerDiscovery INSTANCE = new KylinServerDiscovery();",
          "62:     }",
          "64:     public static KylinServerDiscovery getInstance() {",
          "65:         return SingletonHolder.INSTANCE;",
          "66:     }",
          "68:     private final KylinConfig kylinConfig;",
          "69:     private final CuratorFramework curator;",
          "70:     private final ServiceDiscovery<LinkedHashMap> serviceDiscovery;",
          "71:     private final ServiceCache<LinkedHashMap> serviceCache;",
          "73:     private KylinServerDiscovery() {",
          "74:         this(KylinConfig.getInstanceFromEnv());",
          "75:     }",
          "77:     @VisibleForTesting",
          "78:     protected KylinServerDiscovery(KylinConfig kylinConfig) {",
          "79:         this.kylinConfig = kylinConfig;",
          "80:         this.curator = ZKUtil.getZookeeperClient(kylinConfig);",
          "81:         try {",
          "82:             final JsonInstanceSerializer<LinkedHashMap> serializer = new JsonInstanceSerializer<>(LinkedHashMap.class);",
          "83:             serviceDiscovery = ServiceDiscoveryBuilder.builder(LinkedHashMap.class).client(curator)",
          "84:                     .basePath(SERVICE_PATH).serializer(serializer).build();",
          "85:             serviceDiscovery.start();",
          "87:             serviceCache = serviceDiscovery.serviceCacheBuilder().name(SERVICE_NAME)",
          "88:                     .threadFactory(",
          "89:                             new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"KylinServerTracker-%d\").build())",
          "90:                     .build();",
          "92:             final AtomicBoolean isFinishInit = new AtomicBoolean(false);",
          "93:             serviceCache.addListener(new ServiceCacheListener() {",
          "94:                 @Override",
          "95:                 public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {",
          "96:                 }",
          "98:                 @Override",
          "99:                 public void cacheChanged() {",
          "100:                     logger.info(\"Service discovery get cacheChanged notification\");",
          "101:                     final List<ServiceInstance<LinkedHashMap>> instances = serviceCache.getInstances();",
          "102:                     Map<String, String> instanceNodes = Maps.newHashMapWithExpectedSize(instances.size());",
          "103:                     for (ServiceInstance<LinkedHashMap> entry : instances) {",
          "104:                         instanceNodes.put(entry.getAddress() + \":\" + entry.getPort(),",
          "105:                                 (String) entry.getPayload().get(SERVICE_PAYLOAD_DESCRIPTION));",
          "106:                     }",
          "108:                     logger.info(\"kylin.server.cluster-servers update to \" + instanceNodes);",
          "110:                     System.setProperty(\"kylin.server.cluster-servers\", StringUtil.join(instanceNodes.keySet(), \",\"));",
          "113:                     final String restServersInClusterWithMode = StringUtil.join(instanceNodes.entrySet().stream()",
          "114:                             .map(input -> input.getKey() + \":\" + input.getValue()).collect(Collectors.toList()), \",\");",
          "115:                     logger.info(\"kylin.server.cluster-servers-with-mode update to \" + restServersInClusterWithMode);",
          "116:                     System.setProperty(\"kylin.server.cluster-servers-with-mode\", restServersInClusterWithMode);",
          "117:                     isFinishInit.set(true);",
          "118:                 }",
          "119:             });",
          "120:             serviceCache.start();",
          "122:             registerSelf();",
          "123:             while (!isFinishInit.get()) {",
          "124:                 logger.info(\"Haven't registered, waiting ...\");",
          "125:                 Thread.sleep(100L);",
          "126:             }",
          "127:         } catch (Exception e) {",
          "128:             throw new RuntimeException(\"Fail to initialize due to \", e);",
          "129:         }",
          "130:     }",
          "132:     private void registerSelf() throws Exception {",
          "133:         String hostAddr = kylinConfig.getServerRestAddress();",
          "134:         String[] hostAddrInfo = hostAddr.split(\":\");",
          "135:         if (hostAddrInfo.length < 2) {",
          "136:             logger.error(\"kylin.server.host-address {} is not qualified \", hostAddr);",
          "137:             throw new RuntimeException(\"kylin.server.host-address \" + hostAddr + \" is not qualified\");",
          "138:         }",
          "139:         String host = hostAddrInfo[0];",
          "140:         int port = Integer.parseInt(hostAddrInfo[1]);",
          "142:         String serverMode = kylinConfig.getServerMode();",
          "143:         registerServer(host, port, serverMode);",
          "144:     }",
          "146:     private void registerServer(String host, int port, String mode) throws Exception {",
          "147:         final LinkedHashMap<String, String> instanceDetail = new LinkedHashMap<>();",
          "148:         instanceDetail.put(SERVICE_PAYLOAD_DESCRIPTION, mode);",
          "150:         ServiceInstance<LinkedHashMap> thisInstance = ServiceInstance.<LinkedHashMap> builder().name(SERVICE_NAME)",
          "151:                 .payload(instanceDetail).port(port).address(host).build();",
          "153:         for (ServiceInstance<LinkedHashMap> instance : serviceCache.getInstances()) {",
          "155:             if (instance.getAddress().equals(thisInstance.getAddress())",
          "156:                     && instance.getPort().equals(thisInstance.getPort())) {",
          "157:                 serviceDiscovery.unregisterService(instance);",
          "158:             }",
          "159:         }",
          "160:         serviceDiscovery.registerService(thisInstance);",
          "161:     }",
          "163:     @Override",
          "164:     public void close() throws IOException {",
          "165:         IOUtils.closeQuietly(serviceCache);",
          "166:         IOUtils.closeQuietly(serviceDiscovery);",
          "167:     }",
          "169:     static class JsonInstanceSerializer<T> implements InstanceSerializer<T> {",
          "170:         private final ObjectMapper mapper;",
          "171:         private final Class<T> payloadClass;",
          "172:         private final JavaType type;",
          "174:         JsonInstanceSerializer(Class<T> payloadClass) {",
          "175:             this.payloadClass = payloadClass;",
          "176:             this.mapper = new ObjectMapper();",
          "179:             mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
          "181:             this.type = this.mapper.getTypeFactory().constructType(ServiceInstance.class);",
          "182:         }",
          "184:         public ServiceInstance<T> deserialize(byte[] bytes) throws Exception {",
          "185:             ServiceInstance rawServiceInstance = this.mapper.readValue(bytes, this.type);",
          "186:             this.payloadClass.cast(rawServiceInstance.getPayload());",
          "187:             return rawServiceInstance;",
          "188:         }",
          "190:         public byte[] serialize(ServiceInstance<T> instance) throws Exception {",
          "191:             ByteArrayOutputStream out = new ByteArrayOutputStream();",
          "192:             mapper.convertValue(instance.getPayload(), payloadClass);",
          "193:             this.mapper.writeValue(out, instance);",
          "194:             return out.toByteArray();",
          "195:         }",
          "196:     }",
          "197: }",
          "",
          "---------------"
        ],
        "core-job/src/test/java/org/apache/kylin/job/impl/curator/ExampleServer.java||core-common/src/test/java/org/apache/kylin/common/zookeeper/ExampleServer.java": [
          "File: core-job/src/test/java/org/apache/kylin/job/impl/curator/ExampleServer.java -> core-common/src/test/java/org/apache/kylin/common/zookeeper/ExampleServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.Closeable;",
          "22: import java.io.IOException;",
          "25: import org.apache.kylin.common.KylinConfig;",
          "33: public class ExampleServer implements Closeable {",
          "35:     private String address;",
          "39:         this.address = address;",
          "41:         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "42:         KylinConfig kylinConfig1 = KylinConfig.createKylinConfig(kylinConfig);",
          "43:         kylinConfig1.setProperty(\"kylin.server.host-address\", address);",
          "51:     }",
          "53:     public String getAddress() {",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.job.impl.curator;",
          "24: import org.apache.curator.framework.CuratorFramework;",
          "26: import org.apache.kylin.common.util.ZKUtil;",
          "27: import org.apache.kylin.job.engine.JobEngineConfig;",
          "28: import org.apache.kylin.job.exception.SchedulerException;",
          "29: import org.apache.kylin.job.lock.MockJobLock;",
          "36:     private CuratorScheduler scheduler;",
          "38:     public ExampleServer(String address) throws Exception {",
          "45:         CuratorFramework client = ZKUtil.newZookeeperClient(kylinConfig1);",
          "46:         scheduler = new CuratorScheduler(client);",
          "47:         scheduler.init(new JobEngineConfig(kylinConfig1), new MockJobLock());",
          "48:         if (!scheduler.hasStarted()) {",
          "49:             throw new RuntimeException(\"scheduler has not been started\");",
          "50:         }",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.common.zookeeper;",
          "31:     private KylinServerDiscovery discovery;",
          "33:     public ExampleServer(String address) {",
          "40:         discovery = new KylinServerDiscovery(kylinConfig1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     @Override",
          "58:     public void close() throws IOException {",
          "66:     }",
          "68: }",
          "",
          "[Removed Lines]",
          "60:         if (scheduler!= null)",
          "61:             try {",
          "62:                 scheduler.shutdown();",
          "63:             } catch (SchedulerException e) {",
          "65:             }",
          "",
          "[Added Lines]",
          "49:         discovery.close();",
          "",
          "---------------"
        ],
        "core-job/src/test/java/org/apache/kylin/job/impl/curator/CuratorSchedulerTest.java||core-common/src/test/java/org/apache/kylin/common/zookeeper/KylinServerDiscoveryTest.java": [
          "File: core-job/src/test/java/org/apache/kylin/job/impl/curator/CuratorSchedulerTest.java -> core-common/src/test/java/org/apache/kylin/common/zookeeper/KylinServerDiscoveryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.Collection;",
          "21: import java.util.LinkedHashMap;",
          "22: import java.util.List;",
          "26: import org.apache.curator.framework.CuratorFramework;",
          "27: import org.apache.curator.retry.ExponentialBackoffRetry;",
          "",
          "[Removed Lines]",
          "18: package org.apache.kylin.job.impl.curator;",
          "24: import javax.annotation.Nullable;",
          "",
          "[Added Lines]",
          "18: package org.apache.kylin.common.zookeeper;",
          "23: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.apache.curator.x.discovery.ServiceInstance;",
          "33: import org.apache.kylin.common.util.LocalFileMetadataTestCase;",
          "34: import org.apache.kylin.common.util.ZKUtil;",
          "36: import org.junit.After;",
          "37: import org.junit.Assert;",
          "38: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.job.execution.ExecutableManager;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: import org.slf4j.Logger;",
          "41: import org.slf4j.LoggerFactory;",
          "44: import org.apache.kylin.shaded.com.google.common.collect.Lists;",
          "52:     private TestingServer zkTestServer;",
          "56:     @Before",
          "57:     public void setup() throws Exception {",
          "58:         zkTestServer = new TestingServer();",
          "",
          "[Removed Lines]",
          "43: import org.apache.kylin.shaded.com.google.common.base.Function;",
          "48: public class CuratorSchedulerTest extends LocalFileMetadataTestCase {",
          "50:     private static final Logger logger = LoggerFactory.getLogger(CuratorSchedulerTest.class);",
          "54:     protected ExecutableManager jobService;",
          "",
          "[Added Lines]",
          "45: public class KylinServerDiscoveryTest extends LocalFileMetadataTestCase {",
          "47:     private static final Logger logger = LoggerFactory.getLogger(KylinServerDiscoveryTest.class);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         ServiceDiscovery<LinkedHashMap> serviceDiscovery = null;",
          "81:         CuratorFramework curatorClient = null;",
          "82:         try {",
          "87:             curatorClient = ZKUtil.newZookeeperClient(zkString, new ExponentialBackoffRetry(3000, 3));",
          "88:             serviceDiscovery = ServiceDiscoveryBuilder.builder(LinkedHashMap.class).client(curatorClient)",
          "89:                     .basePath(servicePath).serializer(serializer).build();",
          "",
          "[Removed Lines]",
          "84:             final CuratorScheduler.JsonInstanceSerializer<LinkedHashMap> serializer = new CuratorScheduler.JsonInstanceSerializer<>(",
          "85:                     LinkedHashMap.class);",
          "86:             String servicePath = CuratorScheduler.KYLIN_SERVICE_PATH;",
          "",
          "[Added Lines]",
          "78:             String servicePath = KylinServerDiscovery.SERVICE_PATH;",
          "79:             final KylinServerDiscovery.JsonInstanceSerializer<LinkedHashMap> serializer =",
          "80:                     new KylinServerDiscovery.JsonInstanceSerializer<>(LinkedHashMap.class);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:             Collection<String> serviceNames = serviceDiscovery.queryForNames();",
          "96:             Assert.assertTrue(serviceNames.size() == 1);",
          "98:             Collection<ServiceInstance<LinkedHashMap>> instances = serviceDiscovery",
          "100:             Assert.assertTrue(instances.size() == 2);",
          "101:             List<ServiceInstance<LinkedHashMap>> instancesList = Lists.newArrayList(instances);",
          "114:             Assert.assertTrue(instanceNodes.contains(server1.getAddress() + \":query\"));",
          "115:             Assert.assertTrue(instanceNodes.contains(server2.getAddress() + \":query\"));",
          "118:             server1.close();",
          "120:             Assert.assertTrue(instances.size() == 1);",
          "121:             Assert.assertEquals(server2.getAddress() + \":query\",",
          "125:             server2.close();",
          "127:             Assert.assertTrue(instances.size() == 0);",
          "129:         } finally {",
          "",
          "[Removed Lines]",
          "97:             Assert.assertTrue(CuratorScheduler.SERVICE_NAME.equals(serviceNames.iterator().next()));",
          "99:                     .queryForInstances(CuratorScheduler.SERVICE_NAME);",
          "103:             final List<String> instanceNodes = Lists.transform(instancesList,",
          "104:                     new Function<ServiceInstance<LinkedHashMap>, String>() {",
          "106:                         @Nullable",
          "107:                         @Override",
          "108:                         public String apply(@Nullable ServiceInstance<LinkedHashMap> stringServiceInstance) {",
          "109:                             return (String) stringServiceInstance.getPayload()",
          "110:                                     .get(CuratorScheduler.SERVICE_PAYLOAD_DESCRIPTION);",
          "111:                         }",
          "112:                     });",
          "119:             instances = serviceDiscovery.queryForInstances(CuratorScheduler.SERVICE_NAME);",
          "122:                     instances.iterator().next().getPayload().get(CuratorScheduler.SERVICE_PAYLOAD_DESCRIPTION));",
          "126:             instances = serviceDiscovery.queryForInstances(CuratorScheduler.SERVICE_NAME);",
          "",
          "[Added Lines]",
          "91:             Assert.assertTrue(KylinServerDiscovery.SERVICE_NAME.equals(serviceNames.iterator().next()));",
          "93:                     .queryForInstances(KylinServerDiscovery.SERVICE_NAME);",
          "97:             final List<String> instanceNodes = instancesList.stream()",
          "98:                     .map(input -> input.getAddress() + \":\" + input.getPort() + \":\"",
          "99:                             + input.getPayload().get(KylinServerDiscovery.SERVICE_PAYLOAD_DESCRIPTION))",
          "100:                     .collect(Collectors.toList());",
          "107:             instances = serviceDiscovery.queryForInstances(KylinServerDiscovery.SERVICE_NAME);",
          "108:             ServiceInstance<LinkedHashMap> existingInstance = instances.iterator().next();",
          "111:                     existingInstance.getAddress() + \":\" + existingInstance.getPort() + \":\"",
          "112:                             + existingInstance.getPayload().get(KylinServerDiscovery.SERVICE_PAYLOAD_DESCRIPTION));",
          "116:             instances = serviceDiscovery.queryForInstances(KylinServerDiscovery.SERVICE_NAME);",
          "",
          "---------------"
        ],
        "core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java||core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java -> core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.job.impl.curator;",
          "22: import java.io.IOException;",
          "23: import java.net.InetAddress;",
          "26: import java.util.concurrent.Executors;",
          "27: import java.util.concurrent.TimeUnit;",
          "28: import java.util.concurrent.atomic.AtomicInteger;",
          "33: import org.apache.commons.io.IOUtils;",
          "34: import org.apache.curator.framework.CuratorFramework;",
          "42: import org.apache.kylin.common.KylinConfig;",
          "45: import org.apache.kylin.common.util.ZKUtil;",
          "46: import org.apache.kylin.job.Scheduler;",
          "47: import org.apache.kylin.job.engine.JobEngineConfig;",
          "",
          "[Removed Lines]",
          "21: import java.io.ByteArrayOutputStream;",
          "24: import java.util.LinkedHashMap;",
          "25: import java.util.List;",
          "29: import java.util.stream.Collectors;",
          "31: import javax.annotation.Nullable;",
          "35: import org.apache.curator.framework.state.ConnectionState;",
          "36: import org.apache.curator.x.discovery.ServiceCache;",
          "37: import org.apache.curator.x.discovery.ServiceDiscovery;",
          "38: import org.apache.curator.x.discovery.ServiceDiscoveryBuilder;",
          "39: import org.apache.curator.x.discovery.ServiceInstance;",
          "40: import org.apache.curator.x.discovery.details.InstanceSerializer;",
          "41: import org.apache.curator.x.discovery.details.ServiceCacheListener;",
          "43: import org.apache.kylin.common.ServerMode;",
          "44: import org.apache.kylin.common.util.StringUtil;",
          "",
          "[Added Lines]",
          "30: import org.apache.kylin.common.util.ServerMode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: import org.slf4j.Logger;",
          "52: import org.slf4j.LoggerFactory;",
          "61: public class CuratorScheduler implements Scheduler<AbstractExecutable> {",
          "",
          "[Removed Lines]",
          "54: import com.fasterxml.jackson.databind.DeserializationFeature;",
          "55: import com.fasterxml.jackson.databind.JavaType;",
          "56: import com.fasterxml.jackson.databind.ObjectMapper;",
          "57: import org.apache.kylin.shaded.com.google.common.annotations.VisibleForTesting;",
          "58: import org.apache.kylin.shaded.com.google.common.base.Function;",
          "59: import org.apache.kylin.shaded.com.google.common.collect.Lists;",
          "",
          "[Added Lines]",
          "40: import com.google.common.annotations.VisibleForTesting;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     private boolean started = false;",
          "65:     private CuratorFramework curatorClient = null;",
          "66:     private static CuratorLeaderSelector jobClient = null;",
          "69:     private KylinConfig kylinConfig;",
          "70:     private AtomicInteger count = new AtomicInteger();",
          "72:     static final String JOB_ENGINE_LEADER_PATH = \"/job_engine/leader\";",
          "78:     public CuratorScheduler() {",
          "",
          "[Removed Lines]",
          "67:     private ServiceDiscovery<LinkedHashMap> serviceDiscovery = null;",
          "68:     private ServiceCache<LinkedHashMap> serviceCache = null;",
          "73:     static final String KYLIN_SERVICE_PATH = \"/service\";",
          "74:     static final String SERVICE_NAME = \"kylin\";",
          "75:     static final String SERVICE_PAYLOAD_DESCRIPTION = \"description\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:                 curatorClient = ZKUtil.getZookeeperClient(kylinConfig);",
          "101:             }",
          "111:             String jobEnginePath = JOB_ENGINE_LEADER_PATH;",
          "114:                 jobClient = new CuratorLeaderSelector(curatorClient, jobEnginePath, restAddress, jobEngineConfig);",
          "115:                 try {",
          "116:                     logger.info(\"start Job Engine, lock path is: \" + jobEnginePath);",
          "",
          "[Removed Lines]",
          "103:             final String serverMode = jobEngineConfig.getConfig().getServerMode();",
          "104:             final String restAddress = kylinConfig.getServerRestAddress();",
          "105:             try {",
          "106:                 registerInstance(restAddress, serverMode);",
          "107:             } catch (Exception e) {",
          "108:                 throw new SchedulerException(e);",
          "109:             }",
          "113:             if (ServerMode.isJob(jobEngineConfig.getConfig())) {",
          "",
          "[Added Lines]",
          "79:             String restAddress = kylinConfig.getServerRestAddress();",
          "83:             if (ServerMode.getServerMode(kylinConfig).canServeJobBuild()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:                     throw new SchedulerException(e);",
          "121:                 }",
          "122:             } else {",
          "124:             }",
          "125:             started = true;",
          "126:         }",
          "127:     }",
          "196:     private void monitorJobEngine() {",
          "197:         logger.info(\"Start collect monitor ZK Participants\");",
          "198:         Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {",
          "",
          "[Removed Lines]",
          "123:                 logger.info(\"server mode: \" + jobEngineConfig.getConfig().getServerMode() + \", no need to run job scheduler\");",
          "129:     private void registerInstance(String restAddress, String mode) throws Exception {",
          "130:         final String host = restAddress.substring(0, restAddress.indexOf(\":\"));",
          "131:         final String port = restAddress.substring(restAddress.indexOf(\":\") + 1);",
          "133:         final JsonInstanceSerializer<LinkedHashMap> serializer = new JsonInstanceSerializer<>(LinkedHashMap.class);",
          "134:         final String servicePath = KYLIN_SERVICE_PATH;",
          "135:         serviceDiscovery = ServiceDiscoveryBuilder.builder(LinkedHashMap.class).client(curatorClient)",
          "136:                 .basePath(servicePath).serializer(serializer).build();",
          "137:         serviceDiscovery.start();",
          "139:         serviceCache = serviceDiscovery.serviceCacheBuilder().name(SERVICE_NAME)",
          "140:                 .threadFactory(Executors.defaultThreadFactory()).build();",
          "142:         serviceCache.addListener(new ServiceCacheListener() {",
          "143:             @Override",
          "144:             public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {",
          "145:             }",
          "147:             @Override",
          "148:             public void cacheChanged() {",
          "149:                 logger.info(\"Service discovery get cacheChanged notification\");",
          "150:                 final List<ServiceInstance<LinkedHashMap>> instances = serviceCache.getInstances();",
          "151:                 final List<String> instanceNodes = Lists.transform(instances,",
          "152:                         new Function<ServiceInstance<LinkedHashMap>, String>() {",
          "154:                             @Nullable",
          "155:                             @Override",
          "156:                             public String apply(@Nullable ServiceInstance<LinkedHashMap> stringServiceInstance) {",
          "157:                                 return (String) stringServiceInstance.getPayload().get(SERVICE_PAYLOAD_DESCRIPTION);",
          "158:                             }",
          "159:                         });",
          "161:                 final String restServersInCluster = //",
          "162:                         StringUtil.join(instanceNodes.stream().map(input -> { //",
          "163:                             String[] split = input.split(\":\"); //",
          "164:                             return split[0] + \":\" + split[1]; //",
          "165:                         }).collect(Collectors.toList()), \",\"); //",
          "168:                 logger.info(\"kylin.server.cluster-servers update to \" + restServersInCluster);",
          "170:                 System.setProperty(\"kylin.server.cluster-servers\", restServersInCluster);",
          "173:                 final String restServersInClusterWithMode = StringUtil.join(instanceNodes, \",\");",
          "174:                 logger.info(\"kylin.server.cluster-servers-with-mode update to \" + restServersInClusterWithMode);",
          "175:                 System.setProperty(\"kylin.server.cluster-servers-with-mode\", restServersInClusterWithMode);",
          "176:             }",
          "177:         });",
          "178:         serviceCache.start();",
          "180:         final LinkedHashMap<String, String> instanceDetail = new LinkedHashMap<>();",
          "182:         instanceDetail.put(SERVICE_PAYLOAD_DESCRIPTION, restAddress + \":\" + mode);",
          "183:         ServiceInstance<LinkedHashMap> thisInstance = ServiceInstance.<LinkedHashMap> builder().name(SERVICE_NAME)",
          "184:                 .payload(instanceDetail).port(Integer.valueOf(port)).address(host).build();",
          "186:         for (ServiceInstance<LinkedHashMap> instance : serviceCache.getInstances()) {",
          "188:             if (instance.getAddress().equals(thisInstance.getAddress())",
          "189:                     && instance.getPort().equals(thisInstance.getPort())) {",
          "190:                 serviceDiscovery.unregisterService(instance);",
          "191:             }",
          "192:         }",
          "193:         serviceDiscovery.registerService(thisInstance);",
          "194:     }",
          "",
          "[Added Lines]",
          "93:                 logger.info(\"server mode: \" + jobEngineConfig.getConfig().getServerMode()",
          "94:                         + \", no need to run job scheduler\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:     @Override",
          "222:     public void shutdown() throws SchedulerException {",
          "225:         IOUtils.closeQuietly(curatorClient);",
          "226:         IOUtils.closeQuietly(jobClient);",
          "227:         started = false;",
          "",
          "[Removed Lines]",
          "223:         IOUtils.closeQuietly(serviceCache);",
          "224:         IOUtils.closeQuietly(serviceDiscovery);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "248:         return jobClient;",
          "249:     }",
          "280: }",
          "",
          "[Removed Lines]",
          "251:     static class JsonInstanceSerializer<T> implements InstanceSerializer<T> {",
          "252:         private final ObjectMapper mapper;",
          "253:         private final Class<T> payloadClass;",
          "254:         private final JavaType type;",
          "256:         JsonInstanceSerializer(Class<T> payloadClass) {",
          "257:             this.payloadClass = payloadClass;",
          "258:             this.mapper = new ObjectMapper();",
          "261:             mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
          "263:             this.type = this.mapper.getTypeFactory().constructType(ServiceInstance.class);",
          "264:         }",
          "266:         public ServiceInstance<T> deserialize(byte[] bytes) throws Exception {",
          "267:             ServiceInstance rawServiceInstance = this.mapper.readValue(bytes, this.type);",
          "268:             this.payloadClass.cast(rawServiceInstance.getPayload());",
          "269:             return rawServiceInstance;",
          "270:         }",
          "272:         public byte[] serialize(ServiceInstance<T> instance) throws Exception {",
          "273:             ByteArrayOutputStream out = new ByteArrayOutputStream();",
          "274:             mapper.convertValue(instance.getPayload(), payloadClass);",
          "275:             this.mapper.writeValue(out, instance);",
          "276:             return out.toByteArray();",
          "277:         }",
          "278:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java||core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java -> core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DefaultScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.job.impl.threadpool;",
          "22: import java.util.concurrent.ExecutorService;",
          "23: import java.util.concurrent.Executors;",
          "24: import java.util.concurrent.ScheduledExecutorService;",
          "",
          "[Removed Lines]",
          "21: import java.util.Locale;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import java.util.concurrent.ThreadPoolExecutor;",
          "27: import java.util.concurrent.TimeUnit;",
          "29: import org.apache.kylin.common.util.SetThreadName;",
          "30: import org.apache.kylin.job.Scheduler;",
          "31: import org.apache.kylin.job.engine.JobEngineConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.common.util.ServerMode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: import org.apache.kylin.job.execution.Executable;",
          "36: import org.apache.kylin.job.execution.ExecutableManager;",
          "37: import org.apache.kylin.job.lock.JobLock;",
          "38: import org.slf4j.Logger;",
          "39: import org.slf4j.LoggerFactory;",
          "45: public class DefaultScheduler implements Scheduler<AbstractExecutable> {",
          "",
          "[Removed Lines]",
          "41: import org.apache.kylin.shaded.com.google.common.collect.Maps;",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.shaded.com.google.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:     public synchronized void init(JobEngineConfig jobEngineConfig, JobLock lock) throws SchedulerException {",
          "135:         jobLock = lock;",
          "140:             return;",
          "141:         }",
          "142:         logger.info(\"Initializing Job Engine ....\");",
          "",
          "[Removed Lines]",
          "137:         String serverMode = jobEngineConfig.getConfig().getServerMode();",
          "138:         if (!(\"job\".equals(serverMode.toLowerCase(Locale.ROOT)) || \"all\".equals(serverMode.toLowerCase(Locale.ROOT)))) {",
          "139:             logger.info(\"server mode: \" + serverMode + \", no need to run job scheduler\");",
          "",
          "[Added Lines]",
          "136:         if (!ServerMode.SERVER_MODE.canServeJobBuild()) {",
          "137:             logger.info(",
          "138:                     \"server mode: \" + jobEngineConfig.getConfig().getServerMode() + \", no need to run job scheduler\");",
          "",
          "---------------"
        ],
        "core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java||core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java -> core-job/src/main/java/org/apache/kylin/job/impl/threadpool/DistributedScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.Closeable;",
          "22: import java.io.IOException;",
          "24: import java.util.Set;",
          "25: import java.util.concurrent.CopyOnWriteArraySet;",
          "26: import java.util.concurrent.ExecutorService;",
          "",
          "[Removed Lines]",
          "23: import java.util.Locale;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.commons.lang.StringUtils;",
          "34: import org.apache.kylin.common.KylinConfig;",
          "35: import org.apache.kylin.common.lock.DistributedLock;",
          "36: import org.apache.kylin.common.util.SetThreadName;",
          "37: import org.apache.kylin.common.util.StringUtil;",
          "38: import org.apache.kylin.common.util.ToolUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.kylin.common.util.ServerMode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48: import org.apache.kylin.job.execution.ExecutableState;",
          "49: import org.apache.kylin.job.execution.Output;",
          "50: import org.apache.kylin.job.lock.JobLock;",
          "51: import org.slf4j.Logger;",
          "52: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "54: import org.apache.kylin.shaded.com.google.common.collect.Maps;",
          "",
          "[Added Lines]",
          "51: import org.apache.kylin.shaded.com.google.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     @Override",
          "109:     public synchronized void init(JobEngineConfig jobEngineConfig, JobLock jobLock) throws SchedulerException {",
          "113:             return;",
          "114:         }",
          "115:         logger.info(\"Initializing Job Engine ....\");",
          "",
          "[Removed Lines]",
          "110:         String serverMode = jobEngineConfig.getConfig().getServerMode();",
          "111:         if (!(\"job\".equals(serverMode.toLowerCase(Locale.ROOT)) || \"all\".equals(serverMode.toLowerCase(Locale.ROOT)))) {",
          "112:             logger.info(\"server mode: \" + serverMode + \", no need to run job scheduler\");",
          "",
          "[Added Lines]",
          "109:         if (!ServerMode.SERVER_MODE.canServeJobBuild()) {",
          "110:             logger.info(",
          "111:                     \"server mode: \" + jobEngineConfig.getConfig().getServerMode() + \", no need to run job scheduler\");",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java||server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java -> server-base/src/main/java/org/apache/kylin/rest/init/InitialSparderContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.init;",
          "21: import org.apache.kylin.common.KylinConfig;",
          "23: import org.apache.spark.sql.SparderContext;",
          "24: import org.slf4j.Logger;",
          "25: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "22: import org.apache.kylin.common.ServerMode;",
          "",
          "[Added Lines]",
          "22: import org.apache.kylin.common.util.ServerMode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     private void runInitialSparder() {",
          "38:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "40:             logger.info(\"Maybe this is job node, or switch is off, do not need to start Spark, {}\", config.isAutoStartSparder());",
          "41:             return;",
          "42:         }",
          "",
          "[Removed Lines]",
          "39:         if (ServerMode.isJobOnly(config) || !config.isAutoStartSparder()) {",
          "",
          "[Added Lines]",
          "39:         if (!ServerMode.SERVER_MODE.canServeQuery() || !config.isAutoStartSparder()) {",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java||server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java -> server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.kylin.common.persistence.ResourceStore;",
          "40: import org.apache.kylin.common.persistence.StringEntity;",
          "41: import org.apache.kylin.common.util.Bytes;",
          "42: import org.apache.kylin.rest.security.AclConstant;",
          "43: import org.apache.kylin.rest.security.ManagedUser;",
          "44: import org.apache.kylin.rest.security.springacl.AclRecord;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.apache.kylin.common.util.ServerMode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:             logger.info(\"Do not need to migrate acl table data\");",
          "76:             return;",
          "77:         } else {",
          "79:                 throw new IllegalStateException(",
          "80:                         \"Please make sure that you have config kylin.server.mode=all before migrating data\");",
          "81:             }",
          "",
          "[Removed Lines]",
          "78:             if (!kylinConfig.getServerMode().equals(\"all\")) {",
          "",
          "[Added Lines]",
          "79:             if (!ServerMode.SERVER_MODE.canServeAll()) {",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/JobService.java -> server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.kylin.common.KylinConfig;",
          "39: import org.apache.kylin.common.lock.DistributedLock;",
          "40: import org.apache.kylin.common.util.Pair;",
          "41: import org.apache.kylin.cube.CubeInstance;",
          "42: import org.apache.kylin.cube.CubeManager;",
          "43: import org.apache.kylin.cube.CubeSegment;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import org.apache.kylin.common.zookeeper.KylinServerDiscovery;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:         final Scheduler<AbstractExecutable> scheduler = (Scheduler<AbstractExecutable>) SchedulerFactory",
          "135:                 .scheduler(kylinConfig.getSchedulerType());",
          "137:         scheduler.init(new JobEngineConfig(kylinConfig), new ZookeeperJobLock());",
          "139:         Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:         if (kylinConfig.getServerSelfDiscoveryEnabled()) {",
          "139:             KylinServerDiscovery.getInstance();",
          "140:         }",
          "141:         logger.info(\"Cluster servers: {}\", Lists.newArrayList(kylinConfig.getRestServers()));",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java -> server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: import org.apache.kylin.common.util.DBUtils;",
          "78: import org.apache.kylin.common.util.JsonUtil;",
          "79: import org.apache.kylin.common.util.Pair;",
          "80: import org.apache.kylin.common.util.SetThreadName;",
          "81: import org.apache.kylin.common.util.StringUtil;",
          "82: import org.apache.kylin.cube.CubeInstance;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: import org.apache.kylin.common.util.ServerMode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:         sqlRequest.setUsername(getUserName());",
          "410:         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "415:         }",
          "416:         if (StringUtils.isBlank(sqlRequest.getProject())) {",
          "417:             throw new BadRequestException(msg.getEMPTY_PROJECT_NAME());",
          "",
          "[Removed Lines]",
          "411:         String serverMode = kylinConfig.getServerMode();",
          "412:         if (!(Constant.SERVER_MODE_QUERY.equals(serverMode.toLowerCase(Locale.ROOT))",
          "413:                 || Constant.SERVER_MODE_ALL.equals(serverMode.toLowerCase(Locale.ROOT)))) {",
          "414:             throw new BadRequestException(String.format(Locale.ROOT, msg.getQUERY_NOT_ALLOWED(), serverMode));",
          "",
          "[Added Lines]",
          "412:         if (!ServerMode.SERVER_MODE.canServeQuery()) {",
          "413:             throw new BadRequestException(",
          "414:                     String.format(Locale.ROOT, msg.getQUERY_NOT_ALLOWED(), kylinConfig.getServerMode()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0db286ec3e5ae59d7b0311701d94bd0878a7668c",
      "candidate_info": {
        "commit_hash": "0db286ec3e5ae59d7b0311701d94bd0878a7668c",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/0db286ec3e5ae59d7b0311701d94bd0878a7668c",
        "files": [
          "build/bin/kylin.sh"
        ],
        "message": "KYLIN-5069 Fix wrong file name (#1775)",
        "before_after_code_files": [
          "build/bin/kylin.sh||build/bin/kylin.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build/bin/kylin.sh||build/bin/kylin.sh": [
          "File: build/bin/kylin.sh -> build/bin/kylin.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         verbose \"hdp_version is ${hdp_version}\"",
          "62:     fi",
          "66:     tomcat_root=${dir}/../tomcat",
          "67:     export tomcat_root",
          "",
          "[Removed Lines]",
          "64:     source ${KYLIN_HOME}/bin/prepare_hadoop_dependency.sh",
          "",
          "[Added Lines]",
          "64:     source ${KYLIN_HOME}/bin/prepare-hadoop-dependency.sh",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc6508ff3b44410661c1824c73fc248954d7073b",
      "candidate_info": {
        "commit_hash": "fc6508ff3b44410661c1824c73fc248954d7073b",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/fc6508ff3b44410661c1824c73fc248954d7073b",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java"
        ],
        "message": "KYLIN-4499 Refine waiting time for initialization\n\nyanghong's PR #1268\n\n(cherry picked from commit 121f8d23e3a918a6d93da716fe740bbcdaef56fc)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java||core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java||core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java -> core-common/src/main/java/org/apache/kylin/common/zookeeper/KylinServerDiscovery.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:             serviceCache.start();",
          "122:             registerSelf();",
          "123:             while (!isFinishInit.get()) {",
          "124:                 logger.info(\"Haven't registered, waiting ...\");",
          "126:             }",
          "127:         } catch (Exception e) {",
          "128:             throw new RuntimeException(\"Fail to initialize due to \", e);",
          "",
          "[Removed Lines]",
          "125:                 Thread.sleep(100L);",
          "",
          "[Added Lines]",
          "123:             int i = 1;",
          "124:             long maxWaitingTime = 60 * 1000L; // 1 min",
          "127:                 long waitingTime = 100L * i * i;",
          "128:                 if (waitingTime > maxWaitingTime) {",
          "129:                     waitingTime = maxWaitingTime;",
          "130:                 } else {",
          "131:                     i++;",
          "132:                 }",
          "133:                 Thread.sleep(waitingTime);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fed858c976bb0477878d702cc495f9ca028da5d7",
      "candidate_info": {
        "commit_hash": "fed858c976bb0477878d702cc495f9ca028da5d7",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/fed858c976bb0477878d702cc495f9ca028da5d7",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java"
        ],
        "message": "KYLIN-4432 duplicated queries with sytax error take unexpect long time when lazy query enabled (#1167)\n\n* KYLIN-4432 duplicated queries with sytax error take unexpect long time when lazy query enabled\n\n(cherry picked from commit 6342bc5f191f88b9856f15c23b15d29548e0ecba)",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java||server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java -> server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:         Message msg = MsgPicker.getMsg();",
          "500:         final QueryContext queryContext = QueryContextFacade.current();",
          "503:         SQLResponse sqlResponse = null;",
          "504:         try {",
          "507:                 SQLResponse dummyResponse = new SQLResponse();",
          "508:                 dummyResponse.setLazyQueryStartTime(System.currentTimeMillis());",
          "509:                 cacheManager.getCache(QUERY_CACHE).put(sqlRequest.getCacheKey(), dummyResponse);",
          "",
          "[Removed Lines]",
          "502:         boolean isDummpyResponseEnabled = queryCacheEnabled && kylinConfig.isLazyQueryEnabled();",
          "506:             if (isDummpyResponseEnabled) {",
          "",
          "[Added Lines]",
          "502:         boolean isDummyResponseEnabled = queryCacheEnabled && kylinConfig.isLazyQueryEnabled();",
          "506:             if (isDummyResponseEnabled) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "566:                 if (!realtimeQuery) {",
          "567:                     cacheManager.getCache(QUERY_CACHE).put(sqlRequest.getCacheKey(), sqlResponse);",
          "568:                 }",
          "570:                 cacheManager.getCache(QUERY_CACHE).evict(sqlRequest.getCacheKey());",
          "571:             }",
          "",
          "[Removed Lines]",
          "569:             } else if (isDummpyResponseEnabled) {",
          "",
          "[Added Lines]",
          "569:             } else if (isDummyResponseEnabled) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "583:                     && ExceptionUtils.getRootCause(e) instanceof ResourceLimitExceededException) {",
          "584:                 Cache exceptionCache = cacheManager.getCache(QUERY_CACHE);",
          "585:                 exceptionCache.put(sqlRequest.getCacheKey(), sqlResponse);",
          "586:             }",
          "587:         }",
          "588:         return sqlResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:             } else if (isDummyResponseEnabled) {",
          "588:                 Cache exceptionCache = cacheManager.getCache(QUERY_CACHE);",
          "589:                 exceptionCache.evict(sqlRequest.getCacheKey());",
          "",
          "---------------"
        ],
        "server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java||server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java": [
          "File: server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java -> server/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.junit.Test;",
          "35: import org.springframework.beans.factory.annotation.Autowired;",
          "36: import org.springframework.beans.factory.annotation.Qualifier;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.springframework.cache.Cache;",
          "38: import org.springframework.cache.CacheManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     QueryService queryService;",
          "47:     @Autowired",
          "51:     @Test",
          "52:     public void testBasics() throws JobException, IOException, SQLException {",
          "",
          "[Removed Lines]",
          "48:     @Qualifier(\"cacheService\")",
          "49:     private CacheService cacheService;",
          "",
          "[Added Lines]",
          "50:     CacheManager cacheManager;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:                     response.getExceptionMessage());",
          "99:         }",
          "100:     }",
          "101: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     @Test",
          "104:     public void testSyntaxError() {",
          "105:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "106:         config.setProperty(\"kylin.query.cache-enabled\", \"true\");",
          "107:         config.setProperty(\"kylin.query.lazy-query-enabled\", \"true\");",
          "109:         String badSql = \"select with syntax error\";",
          "111:         SQLRequest request = new SQLRequest();",
          "112:         request.setProject(\"default\");",
          "113:         request.setSql(badSql);",
          "115:         try (SetAndUnsetThreadLocalConfig autoUnset = KylinConfig.setAndUnsetThreadLocalConfig(config)) {",
          "116:             queryService.doQueryWithCache(request, false);",
          "117:         } catch (Exception e) {",
          "119:             Cache.ValueWrapper wrapper = cacheManager.getCache(QueryService.QUERY_CACHE).get(request.getCacheKey());",
          "120:             Assert.assertTrue(wrapper == null || wrapper.get() == null);",
          "121:         }",
          "122:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}