{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
  "patch_info": {
    "commit_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "files": [
      "tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py"
    ],
    "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
    "before_after_code_files": [
      "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
    ]
  },
  "patch_diff": {
    "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py": [
      "File: tests/integration/ssh/test_pre_flight.py -> tests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
      "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: Test for ssh_pre_flight roster option",
      "3: \"\"\"",
      "5: import grp",
      "6: import os",
      "7: import pathlib",
      "8: import pwd",
      "9: import shutil",
      "10: import subprocess",
      "12: import pytest",
      "13: import yaml",
      "14: from saltfactories.utils import random_string",
      "16: import salt.utils.files",
      "19: def _custom_roster(roster_file, roster_data):",
      "20:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
      "21:         data = salt.utils.yaml.safe_load(fp)",
      "22:     for key, item in roster_data.items():",
      "23:         data[\"localhost\"][key] = item",
      "24:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
      "25:         yaml.safe_dump(data, fp)",
      "28: @pytest.fixture",
      "29: def _create_roster(salt_ssh_roster_file, tmp_path):",
      "30:     ret = {}",
      "31:     ret[\"roster\"] = salt_ssh_roster_file",
      "32:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
      "33:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
      "34:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
      "36:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
      "37:         data = salt.utils.yaml.safe_load(fp)",
      "38:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
      "39:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
      "40:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
      "41:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
      "42:         yaml.safe_dump(data, fp)",
      "44:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
      "45:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
      "47:     yield ret",
      "48:     if ret[\"thin_dir\"].exists():",
      "49:         shutil.rmtree(ret[\"thin_dir\"])",
      "52: @pytest.mark.slow_test",
      "53: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
      "54:     \"\"\"",
      "55:     test ssh when ssh_pre_flight is set",
      "56:     ensure the script runs successfully",
      "57:     \"\"\"",
      "58:     ret = salt_ssh_cli.run(\"test.ping\")",
      "59:     assert ret.returncode == 0",
      "61:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "64: @pytest.mark.slow_test",
      "65: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
      "66:     \"\"\"",
      "67:     test ssh when --pre-flight is passed to salt-ssh",
      "68:     to ensure the script runs successfully",
      "69:     \"\"\"",
      "70:     # make sure we previously ran a command so the thin dir exists",
      "71:     ret = salt_ssh_cli.run(\"test.ping\")",
      "72:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "74:     # Now remeove the script to ensure pre_flight doesn't run",
      "75:     # without --pre-flight",
      "76:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
      "78:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
      "79:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "81:     # Now ensure",
      "82:     ret = salt_ssh_cli.run(",
      "83:         \"test.ping\",",
      "84:         \"--pre-flight\",",
      "85:     )",
      "86:     assert ret.returncode == 0",
      "87:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "90: @pytest.mark.slow_test",
      "91: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
      "92:     \"\"\"",
      "93:     test ssh when --pre-flight is passed to salt-ssh",
      "94:     to ensure the script runs successfully passing some args",
      "95:     \"\"\"",
      "96:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
      "97:     # Create pre_flight script that accepts args",
      "98:     test_script = _create_roster[\"test_script\"]",
      "99:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
      "100:     test_script_2 = pathlib.Path(test_script + \"-test\")",
      "101:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "102:         fp.write(",
      "103:             f\"\"\"",
      "104:         touch {str(test_script)}-$1",
      "105:         touch {str(test_script)}-$2",
      "106:         \"\"\"",
      "107:         )",
      "108:     ret = salt_ssh_cli.run(\"test.ping\")",
      "109:     assert ret.returncode == 0",
      "110:     assert test_script_1.exists()",
      "111:     assert test_script_2.exists()",
      "112:     pathlib.Path(test_script_1).unlink()",
      "113:     pathlib.Path(test_script_2).unlink()",
      "115:     ret = salt_ssh_cli.run(\"test.ping\")",
      "116:     assert ret.returncode == 0",
      "117:     assert not test_script_1.exists()",
      "118:     assert not test_script_2.exists()",
      "120:     ret = salt_ssh_cli.run(",
      "121:         \"test.ping\",",
      "122:         \"--pre-flight\",",
      "123:     )",
      "124:     assert ret.returncode == 0",
      "125:     assert test_script_1.exists()",
      "126:     assert test_script_2.exists()",
      "129: @pytest.mark.slow_test",
      "130: def test_ssh_run_pre_flight_args_prevent_injection(",
      "131:     salt_ssh_cli, _create_roster, tmp_path",
      "132: ):",
      "133:     \"\"\"",
      "134:     test ssh when --pre-flight is passed to salt-ssh",
      "135:     and evil arguments are used in order to produce shell injection",
      "136:     \"\"\"",
      "137:     injected_file = tmp_path / \"injection\"",
      "138:     _custom_roster(",
      "139:         salt_ssh_cli.roster_file,",
      "140:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
      "141:     )",
      "142:     # Create pre_flight script that accepts args",
      "143:     test_script = _create_roster[\"test_script\"]",
      "144:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
      "145:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
      "146:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "147:         fp.write(",
      "148:             f\"\"\"",
      "149:         touch {str(test_script)}-$1",
      "150:         touch {str(test_script)}-$2",
      "151:         \"\"\"",
      "152:         )",
      "154:     # make sure we previously ran a command so the thin dir exists",
      "155:     ret = salt_ssh_cli.run(\"test.ping\")",
      "156:     assert ret.returncode == 0",
      "157:     assert test_script_1.exists()",
      "158:     assert test_script_2.exists()",
      "159:     test_script_1.unlink()",
      "160:     test_script_2.unlink()",
      "161:     assert not injected_file.is_file()",
      "163:     ret = salt_ssh_cli.run(",
      "164:         \"test.ping\",",
      "165:         \"--pre-flight\",",
      "166:     )",
      "167:     assert ret.returncode == 0",
      "169:     assert test_script_1.exists()",
      "170:     assert test_script_2.exists()",
      "171:     assert not pathlib.Path(",
      "172:         injected_file",
      "173:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
      "176: @pytest.mark.flaky(max_runs=4)",
      "177: @pytest.mark.slow_test",
      "178: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
      "179:     \"\"\"",
      "180:     test ssh_pre_flight when there is a failure",
      "181:     in the script.",
      "182:     \"\"\"",
      "183:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "184:         fp_.write(\"exit 2\")",
      "186:     ret = salt_ssh_cli.run(",
      "187:         \"test.ping\",",
      "188:         \"--pre-flight\",",
      "189:     )",
      "190:     assert ret.data[\"retcode\"] == 2",
      "193: @pytest.fixture",
      "194: def account():",
      "195:     username = random_string(\"test-account-\", uppercase=False)",
      "196:     with pytest.helpers.create_account(username=username) as account:",
      "197:         yield account",
      "200: @pytest.mark.slow_test",
      "201: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
      "202:     \"\"\"",
      "203:     Test to ensure user cannot create and run a script",
      "204:     with the expected pre_flight script path on target.",
      "205:     \"\"\"",
      "206:     try:",
      "207:         script = pathlib.Path.home() / \"hacked\"",
      "208:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
      "209:         tmp_preflight.write_text(f\"touch {script}\")",
      "210:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
      "211:         ret = salt_ssh_cli.run(\"test.ping\")",
      "212:         assert not script.is_file()",
      "213:         assert ret.returncode == 0",
      "214:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
      "215:     finally:",
      "216:         for _file in [script, tmp_preflight]:",
      "217:             if _file.is_file():",
      "218:                 _file.unlink()",
      "221: def demote(user_uid, user_gid):",
      "222:     def result():",
      "223:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
      "224:         os.setgroups([])",
      "225:         os.setgid(user_gid)",
      "226:         os.setuid(user_uid)",
      "228:     return result",
      "231: @pytest.mark.slow_test",
      "232: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
      "233:     \"\"\"",
      "234:     Test to ensure standard user cannot run pre flight script",
      "235:     on target when user sets wrong permissions (777) on",
      "236:     ssh_pre_flight script.",
      "237:     \"\"\"",
      "238:     try:",
      "239:         script = pathlib.Path(\"/tmp\", \"itworked\")",
      "240:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
      "241:         preflight.write_text(f\"touch {str(script)}\")",
      "242:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
      "244:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
      "245:         preflight.chmod(0o0777)",
      "246:         run_script = pathlib.Path(\"/run_script\")",
      "247:         run_script.write_text(",
      "248:             f\"\"\"",
      "249:         x=1",
      "250:         while [ $x -le 200000 ]; do",
      "251:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
      "252:             if [ ${{SCRIPT}} == 0 ]; then",
      "253:                 break",
      "254:             fi",
      "255:             x=$(( $x + 1 ))",
      "256:         done",
      "257:         \"\"\"",
      "258:         )",
      "259:         run_script.chmod(0o0777)",
      "260:         # pylint: disable=W1509",
      "261:         ret = subprocess.Popen(",
      "262:             [\"sh\", f\"{run_script}\"],",
      "263:             preexec_fn=demote(account.info.uid, account.info.gid),",
      "264:             stdout=None,",
      "265:             stderr=None,",
      "266:             stdin=None,",
      "267:             universal_newlines=True,",
      "268:         )",
      "269:         # pylint: enable=W1509",
      "270:         ret = salt_ssh_cli.run(\"test.ping\")",
      "271:         assert ret.returncode == 0",
      "273:         # Lets make sure a different user other than root",
      "274:         # Didn't run the script",
      "275:         assert os.stat(script).st_uid != account.info.uid",
      "276:         assert script.is_file()",
      "277:     finally:",
      "278:         for _file in [script, preflight, tmp_preflight, run_script]:",
      "279:             if _file.is_file():",
      "280:                 _file.unlink()",
      "283: @pytest.mark.slow_test",
      "284: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
      "285:     \"\"\"",
      "286:     test ssh_pre_flight to ensure the target pre flight script",
      "287:     has the correct perms",
      "288:     \"\"\"",
      "289:     perms_file = tmp_path / \"perms\"",
      "290:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "291:         fp_.write(",
      "292:             f\"\"\"",
      "293:         SCRIPT_NAME=$0",
      "294:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
      "295:         \"\"\"",
      "296:         )",
      "298:     ret = salt_ssh_cli.run(",
      "299:         \"test.ping\",",
      "300:         \"--pre-flight\",",
      "301:     )",
      "302:     assert ret.returncode == 0",
      "303:     with salt.utils.files.fopen(perms_file) as fp:",
      "304:         data = fp.read()",
      "305:     assert data.split()[0] == \"600\"",
      "306:     uid = os.getuid()",
      "307:     gid = os.getgid()",
      "308:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
      "309:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a05bd144db17bf50bb4e9ac1e97bb10733aae235",
      "candidate_info": {
        "commit_hash": "a05bd144db17bf50bb4e9ac1e97bb10733aae235",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a05bd144db17bf50bb4e9ac1e97bb10733aae235",
        "files": [
          "tests/pytests/integration/ssh/test_pre_flight.py"
        ],
        "message": "Do not run ssh integration tests on windows",
        "before_after_code_files": [
          "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ],
          "candidate": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
          "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Test for ssh_pre_flight roster option",
          "3: \"\"\"",
          "6: import os",
          "7: import pathlib",
          "9: import shutil",
          "10: import subprocess",
          "",
          "[Removed Lines]",
          "5: import grp",
          "8: import pwd",
          "",
          "[Added Lines]",
          "5: try:",
          "6:     import grp",
          "7:     import pwd",
          "8: except ImportError:",
          "9:     # windows stacktraces on import of these modules",
          "10:     pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: import yaml",
          "15: from saltfactories.utils import random_string",
          "18: def _custom_roster(roster_file, roster_data):",
          "19:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: pytestmark = pytest.mark.skip_on_windows(reason=\"Salt-ssh not available on Windows\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0558d6967d6e28bd366dbb47b299e82e18334b4",
      "candidate_info": {
        "commit_hash": "a0558d6967d6e28bd366dbb47b299e82e18334b4",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a0558d6967d6e28bd366dbb47b299e82e18334b4",
        "files": [
          "tools/vm.py"
        ],
        "message": "Fix the security groups selection for developer created VMs\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/vm.py||tools/vm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/vm.py||tools/vm.py": [
          "File: tools/vm.py -> tools/vm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "950:         else:",
          "951:             # This is a developer running",
          "952:             log.info(\"Starting Developer configured VM\")",
          "954:             security_group_filters = [",
          "955:                 {",
          "956:                     \"Name\": \"vpc-id\",",
          "",
          "[Removed Lines]",
          "953:             # Get the develpers security group",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960:                     \"Name\": \"tag:spb:project\",",
          "961:                     \"Values\": [\"salt-project\"],",
          "962:                 },",
          "967:             ]",
          "968:             response = client.describe_security_groups(Filters=security_group_filters)",
          "969:             if not response.get(\"SecurityGroups\"):",
          "",
          "[Removed Lines]",
          "963:                 {",
          "964:                     \"Name\": \"tag:spb:developer\",",
          "965:                     \"Values\": [\"true\"],",
          "966:                 },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "974:                 self.ctx.exit(1)",
          "975:             # Override the launch template network interfaces config",
          "976:             security_group_ids = [sg[\"GroupId\"] for sg in response[\"SecurityGroups\"]]",
          "978:         progress = create_progress_bar()",
          "979:         create_task = progress.add_task(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972:             security_group_filters = [",
          "973:                 {",
          "974:                     \"Name\": \"vpc-id\",",
          "975:                     \"Values\": [vpc.id],",
          "976:                 },",
          "977:                 {",
          "978:                     \"Name\": \"tag:Name\",",
          "979:                     \"Values\": [f\"saltproject-{environment}-client-vpn-remote-access\"],",
          "980:                 },",
          "981:             ]",
          "982:             response = client.describe_security_groups(Filters=security_group_filters)",
          "983:             if not response.get(\"SecurityGroups\"):",
          "984:                 self.ctx.error(",
          "985:                     \"Could not find the right VPN access security group. \"",
          "986:                     f\"Filters:\\n{pprint.pformat(security_group_filters)}\"",
          "987:                 )",
          "988:                 self.ctx.exit(1)",
          "989:             security_group_ids.extend(",
          "990:                 [sg[\"GroupId\"] for sg in response[\"SecurityGroups\"]]",
          "991:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71589535e87e3e326577560fdcb7bd878c47442c",
      "candidate_info": {
        "commit_hash": "71589535e87e3e326577560fdcb7bd878c47442c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/71589535e87e3e326577560fdcb7bd878c47442c",
        "files": [
          "salt/client/ssh/__init__.py"
        ],
        "message": "Remove filename from logs",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025:             except OSError as err:",
          "1026:                 return (",
          "1027:                     \"\",",
          "1029:                     1,",
          "1030:                 )",
          "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
          "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
          "1034:             if retcode != 0:",
          "1035:                 # We could not copy the script to the target",
          "1039:                 return stdout, stderr, retcode",
          "1042:             return self.execute_script(",
          "1043:                 target_script, script_args=self.ssh_pre_flight_args",
          "1044:             )",
          "",
          "[Removed Lines]",
          "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
          "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
          "1036:                 log.error(",
          "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
          "1038:                 )",
          "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
          "",
          "[Added Lines]",
          "1028:                     \"Could not copy pre flight script to temporary path\",",
          "1032:             log.trace(\"Copying the pre flight script to target\")",
          "1036:                 log.error(\"Could not copy the pre flight script to target\")",
          "1039:             log.trace(\"Executing the pre flight script on target\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1423:             shim_tmp_file.name, target_shim_file, makedirs=True",
          "1424:         )",
          "1425:         if retcode != 0:",
          "1427:             return stdout, stderr, retcode",
          "1429:         # Remove our shim file",
          "",
          "[Removed Lines]",
          "1426:             log.error(f\"Could not copy the shim script to target\")",
          "",
          "[Added Lines]",
          "1424:             log.error(\"Could not copy the shim script to target\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1175529e25e3369ab177c82cc25feb83dd59d428",
      "candidate_info": {
        "commit_hash": "1175529e25e3369ab177c82cc25feb83dd59d428",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/1175529e25e3369ab177c82cc25feb83dd59d428",
        "files": [
          ".github/workflows/test-action-macos.yml",
          ".github/workflows/test-action.yml",
          "tools/ci.py"
        ],
        "message": "Write directly to `$GITHUB_OUTPUT`\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/ci.py||tools/ci.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/ci.py||tools/ci.py": [
          "File: tools/ci.py -> tools/ci.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:             if \"macos\" in distro_slug and chunk == \"scenarios\":",
          "634:                 continue",
          "635:             _matrix.append({\"transport\": transport, \"tests-chunk\": chunk})",
          "637:     ctx.exit(0)",
          "",
          "[Removed Lines]",
          "636:     print(json.dumps(_matrix))",
          "",
          "[Added Lines]",
          "637:     ctx.info(\"Generated matrix:\")",
          "638:     ctx.print(_matrix, soft_wrap=True)",
          "640:     github_output = os.environ.get(\"GITHUB_OUTPUT\")",
          "641:     if github_output is not None:",
          "642:         with open(github_output, \"a\", encoding=\"utf-8\") as wfh:",
          "643:             wfh.write(f\"matrix={json.dumps(_matrix)}\\n\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:         ctx.warn(\"The 'GITHUB_OUTPUT' variable is not set.\")",
          "695:     if TYPE_CHECKING:",
          "696:         assert testing_releases",
          "698:     sessions = [",
          "699:         \"install\",",
          "700:     ]",
          "",
          "[Removed Lines]",
          "697:     matrix = []",
          "",
          "[Added Lines]",
          "704:     _matrix = []",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:                 if version < tools.utils.Version(\"3006.0\")",
          "742:             ]",
          "743:         for version in versions:",
          "745:                 {",
          "746:                     \"test-chunk\": session,",
          "747:                     \"version\": version,",
          "748:                 }",
          "749:             )",
          "750:     ctx.info(\"Generated matrix:\")",
          "753:     if github_output is not None:",
          "754:         with open(github_output, \"a\", encoding=\"utf-8\") as wfh:",
          "756:     ctx.exit(0)",
          "",
          "[Removed Lines]",
          "744:             matrix.append(",
          "751:     ctx.print(matrix, soft_wrap=True)",
          "755:             wfh.write(f\"matrix={json.dumps(matrix)}\\n\")",
          "",
          "[Added Lines]",
          "751:             _matrix.append(",
          "757:             if distro_slug.startswith(\"windows\"):",
          "758:                 _matrix[-1][\"pkg-type\"] = pkg_type.upper()",
          "760:     ctx.print(_matrix, soft_wrap=True)",
          "764:             wfh.write(f\"matrix={json.dumps(_matrix)}\\n\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0823ea818ea7b7fbec0f8fdd322ef2ea0706c4b3",
      "candidate_info": {
        "commit_hash": "0823ea818ea7b7fbec0f8fdd322ef2ea0706c4b3",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/0823ea818ea7b7fbec0f8fdd322ef2ea0706c4b3",
        "files": [
          "tests/pytests/unit/fileclient/test_fileclient.py"
        ],
        "message": "Properly mock async method\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py": [
          "File: tests/pytests/unit/fileclient/test_fileclient.py -> tests/pytests/unit/fileclient/test_fileclient.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import salt.utils.files",
          "13: from salt import fileclient",
          "16: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "14: from tests.support.mock import MagicMock, Mock, patch",
          "",
          "[Added Lines]",
          "12: from tests.support.mock import AsyncMock, MagicMock, Mock, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         master_ip=\"localhost\", master_port=minion_opts[\"master_port\"]",
          "126:     )",
          "131:     def mock_dumps(*args):",
          "132:         return b\"meh\"",
          "134:     with fileclient.get_file_client(minion_opts) as client:",
          "135:         # Authenticate must return true",
          "144: def test_cache_skips_makedirs_on_race_condition(client_opts):",
          "",
          "[Removed Lines]",
          "128:     async def mock_auth():",
          "129:         return True",
          "136:         client.auth.authenticate = mock_auth",
          "137:         # Crypticle must return bytes to pass to transport.RequestClient.send",
          "138:         client.auth._crypticle = Mock()",
          "139:         client.auth._crypticle.dumps = mock_dumps",
          "140:         with pytest.raises(salt.exceptions.SaltClientError):",
          "141:             client.file_list()",
          "",
          "[Added Lines]",
          "131:         with patch.object(client.auth, \"authenticate\", AsyncMock(return_value=True)):",
          "132:             # Crypticle must return bytes to pass to transport.RequestClient.send",
          "133:             client.auth._crypticle = Mock()",
          "134:             client.auth._crypticle.dumps = mock_dumps",
          "135:             with pytest.raises(salt.exceptions.SaltClientError):",
          "136:                 client.file_list()",
          "",
          "---------------"
        ]
      }
    }
  ]
}