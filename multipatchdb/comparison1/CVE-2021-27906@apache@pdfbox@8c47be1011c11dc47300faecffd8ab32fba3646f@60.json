{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0bcc860c58ec4e6ddaa7e64488ed3902f78adff7",
      "candidate_info": {
        "commit_hash": "0bcc860c58ec4e6ddaa7e64488ed3902f78adff7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/0bcc860c58ec4e6ddaa7e64488ed3902f78adff7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java"
        ],
        "message": "PDFBOX-4892: add warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889548 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         float xStep = pattern.getXStep();",
          "206:         if (xStep == 0)",
          "207:         {",
          "208:             xStep = pattern.getBBox().getWidth();",
          "209:         }",
          "211:         float yStep = pattern.getYStep();",
          "212:         if (yStep == 0)",
          "213:         {",
          "214:             yStep = pattern.getBBox().getHeight();",
          "215:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:             LOG.warn(\"/XStep is 0, using pattern /BBox width\");",
          "215:             LOG.warn(\"/YStep is 0, using pattern /BBox height\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6443823d1d610113be5ad179933194812d12bc9",
      "candidate_info": {
        "commit_hash": "d6443823d1d610113be5ad179933194812d12bc9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d6443823d1d610113be5ad179933194812d12bc9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java"
        ],
        "message": "PDFBOX-4847: merge \"if\" statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881295 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     public BufferedImage toRawImage(WritableRaster raster)",
          "217:     {",
          "220:         {",
          "222:             {",
          "234:             }",
          "235:         }",
          "",
          "[Removed Lines]",
          "219:         if (baseColorSpace instanceof PDICCBased)",
          "221:             if (((PDICCBased) baseColorSpace).isSRGB())",
          "223:                 byte[] r = new byte[colorTable.length];",
          "224:                 byte[] g = new byte[colorTable.length];",
          "225:                 byte[] b = new byte[colorTable.length];",
          "226:                 for (int i = 0; i < colorTable.length; i++)",
          "227:                 {",
          "228:                     r[i] = (byte) ((int) (colorTable[i][0] * 255) & 0xFF);",
          "229:                     g[i] = (byte) ((int) (colorTable[i][1] * 255) & 0xFF);",
          "230:                     b[i] = (byte) ((int) (colorTable[i][2] * 255) & 0xFF);",
          "231:                 }",
          "232:                 ColorModel colorModel = new IndexColorModel(8, colorTable.length, r, g, b);",
          "233:                 return new BufferedImage(colorModel, raster, false, null);",
          "",
          "[Added Lines]",
          "219:         if (baseColorSpace instanceof PDICCBased && ((PDICCBased) baseColorSpace).isSRGB())",
          "221:             byte[] r = new byte[colorTable.length];",
          "222:             byte[] g = new byte[colorTable.length];",
          "223:             byte[] b = new byte[colorTable.length];",
          "224:             for (int i = 0; i < colorTable.length; i++)",
          "226:                 r[i] = (byte) ((int) (colorTable[i][0] * 255) & 0xFF);",
          "227:                 g[i] = (byte) ((int) (colorTable[i][1] * 255) & 0xFF);",
          "228:                 b[i] = (byte) ((int) (colorTable[i][2] * 255) & 0xFF);",
          "230:             ColorModel colorModel = new IndexColorModel(8, colorTable.length, r, g, b);",
          "231:             return new BufferedImage(colorModel, raster, false, null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6912a9c1b33cbe2c90fdaf92540e46bbb5625d71",
      "candidate_info": {
        "commit_hash": "6912a9c1b33cbe2c90fdaf92540e46bbb5625d71",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6912a9c1b33cbe2c90fdaf92540e46bbb5625d71",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java"
        ],
        "message": "PDFBOX-4892: remove unused parameter, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889640 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/CoonsPatch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected CoonsPatch(Point2D[] points, float[][] color)",
          "36:     {",
          "38:         controlPoints = reshapeControlPoints(points);",
          "39:         level = calcLevel();",
          "40:         listOfTriangles = getTriangles();",
          "",
          "[Removed Lines]",
          "37:         super(points, color);",
          "",
          "[Added Lines]",
          "37:         super(color);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Patch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     {",
          "50:         cornerColor = color.clone();",
          "51:     }",
          "",
          "[Removed Lines]",
          "48:     Patch(Point2D[] ctl, float[][] color)",
          "",
          "[Added Lines]",
          "46:     Patch(float[][] color)",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TensorPatch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected TensorPatch(Point2D[] tcp, float[][] color)",
          "36:     {",
          "38:         controlPoints = reshapeControlPoints(tcp);",
          "39:         level = calcLevel();",
          "40:         listOfTriangles = getTriangles();",
          "",
          "[Removed Lines]",
          "37:         super(tcp, color);",
          "",
          "[Added Lines]",
          "37:         super(color);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f949076a3918fb7c8d80c8fe2aa178ffe65e3ba4",
      "candidate_info": {
        "commit_hash": "f949076a3918fb7c8d80c8fe2aa178ffe65e3ba4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f949076a3918fb7c8d80c8fe2aa178ffe65e3ba4",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java"
        ],
        "message": "PDFBOX-4939: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881031 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java||examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java||examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java -> examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics = widget.getAppearanceCharacteristics();",
          "91:         PDColor borderColour = appearanceCharacteristics.getBorderColour();",
          "92:         PDColor backgroundColour = appearanceCharacteristics.getBackground();",
          "95:         Assert.assertArrayEquals(new float[]{0,1,0}, borderColour.getComponents(), 0);",
          "96:         Assert.assertArrayEquals(new float[]{1,1,0}, backgroundColour.getComponents(), 0);",
          "97:         doc.close();",
          "",
          "[Removed Lines]",
          "93:         Assert.assertEquals(borderColour.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "94:         Assert.assertEquals(backgroundColour.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "",
          "[Added Lines]",
          "93:         Assert.assertEquals(PDDeviceRGB.INSTANCE, borderColour.getColorSpace());",
          "94:         Assert.assertEquals(PDDeviceRGB.INSTANCE, backgroundColour.getColorSpace());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         PDAnnotationWidget widget2 = textBox2.getWidgets().get(0);",
          "106:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics2 = widget2.getAppearanceCharacteristics();",
          "107:         PDColor borderColour2 = appearanceCharacteristics2.getBorderColour();",
          "109:         Assert.assertArrayEquals(new float[]{1,0,0}, borderColour2.getComponents(), 0);",
          "111:         doc2.close();",
          "",
          "[Removed Lines]",
          "108:         Assert.assertEquals(borderColour2.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "",
          "[Added Lines]",
          "108:         Assert.assertEquals(PDDeviceRGB.INSTANCE, borderColour2.getColorSpace());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:         PDAnnotationWidget w2 = widgets.get(1);",
          "155:         PDPage page1 = w1.getPage();",
          "156:         PDPage page2 = w2.getPage();",
          "158:         Assert.assertEquals(page1, doc.getPage(0));",
          "159:         Assert.assertEquals(page2, doc.getPage(1));",
          "160:         Assert.assertEquals(page1.getAnnotations().get(0), w1);",
          "161:         Assert.assertEquals(page2.getAnnotations().get(0), w2);",
          "163:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics1 = w1.getAppearanceCharacteristics();",
          "164:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics2 = w2.getAppearanceCharacteristics();",
          "165:         PDColor backgroundColor1 = appearanceCharacteristics1.getBackground();",
          "166:         PDColor backgroundColor2 = appearanceCharacteristics2.getBackground();",
          "167:         PDColor borderColour1 = appearanceCharacteristics1.getBorderColour();",
          "168:         PDColor borderColour2 = appearanceCharacteristics2.getBorderColour();",
          "173:         Assert.assertArrayEquals(new float[]{1,1,0}, backgroundColor1.getComponents(), 0);",
          "174:         Assert.assertArrayEquals(new float[]{0,1,0}, backgroundColor2.getComponents(), 0);",
          "175:         Assert.assertArrayEquals(new float[]{0,1,0}, borderColour1.getComponents(), 0);",
          "",
          "[Removed Lines]",
          "157:         Assert.assertFalse(page1.getCOSObject().equals(page2.getCOSObject()));",
          "162:         Assert.assertFalse(w1.equals(w2));",
          "169:         Assert.assertEquals(backgroundColor1.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "170:         Assert.assertEquals(backgroundColor2.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "171:         Assert.assertEquals(borderColour1.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "172:         Assert.assertEquals(borderColour2.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "",
          "[Added Lines]",
          "157:         Assert.assertNotEquals(page1.getCOSObject(), page2.getCOSObject());",
          "162:         Assert.assertNotEquals(w1, w2);",
          "169:         Assert.assertEquals(PDDeviceRGB.INSTANCE, backgroundColor1.getColorSpace());",
          "170:         Assert.assertEquals(PDDeviceRGB.INSTANCE, backgroundColor2.getColorSpace());",
          "171:         Assert.assertEquals(PDDeviceRGB.INSTANCE, borderColour1.getColorSpace());",
          "172:         Assert.assertEquals(PDDeviceRGB.INSTANCE, borderColour2.getColorSpace());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd2f25f7cda2571a25f158f7a640decf61c507b1",
      "candidate_info": {
        "commit_hash": "dd2f25f7cda2571a25f158f7a640decf61c507b1",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/dd2f25f7cda2571a25f158f7a640decf61c507b1",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java"
        ],
        "message": "PDFBOX-4892: keep pageTree ref locally to speed up page access + simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891795 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.pdfbox.cos.COSName;",
          "33: import org.apache.pdfbox.pdmodel.PDDocument;",
          "34: import org.apache.pdfbox.pdmodel.PDPage;",
          "35: import org.apache.pdfbox.pdmodel.PDResources;",
          "36: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "37: import org.apache.pdfbox.pdmodel.graphics.blend.BlendMode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.pdfbox.pdmodel.PDPageTree;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     private float imageDownscalingOptimizationThreshold = 0.5f;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     private final PDPageTree pageTree;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     public PDFRenderer(PDDocument document)",
          "86:     {",
          "87:         this.document = document;",
          "89:         if (!kcmsLogged)",
          "90:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         this.pageTree = document.getPages();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:     public BufferedImage renderImage(int pageIndex, float scale, ImageType imageType, RenderDestination destination)",
          "282:             throws IOException",
          "283:     {",
          "286:         PDRectangle cropbBox = page.getCropBox();",
          "287:         float widthPt = cropbBox.getWidth();",
          "",
          "[Removed Lines]",
          "284:         PDPage page = document.getPage(pageIndex);",
          "",
          "[Added Lines]",
          "288:         PDPage page = pageTree.get(pageIndex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:         int rotationAngle = page.getRotation();",
          "304:         if (imageType != ImageType.ARGB && hasBlendMode(page))",
          "305:         {",
          "",
          "[Removed Lines]",
          "303:         int bimType = imageType.toBufferedImageType();",
          "",
          "[Added Lines]",
          "307:         int bimType;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310:             bimType = BufferedImage.TYPE_INT_ARGB;",
          "311:         }",
          "314:         BufferedImage image;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:         else",
          "317:         {",
          "318:             bimType = imageType.toBufferedImageType();",
          "319:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "440:     public void renderPageToGraphics(int pageIndex, Graphics2D graphics, float scaleX, float scaleY, RenderDestination destination)",
          "441:             throws IOException",
          "442:     {",
          "446:         transform(graphics, page, scaleX, scaleY);",
          "",
          "[Removed Lines]",
          "443:         PDPage page = document.getPage(pageIndex);",
          "",
          "[Added Lines]",
          "451:         PDPage page = pageTree.get(pageIndex);",
          "",
          "---------------"
        ]
      }
    }
  ]
}