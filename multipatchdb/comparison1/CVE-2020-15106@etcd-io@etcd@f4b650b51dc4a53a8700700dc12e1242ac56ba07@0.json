{
  "cve_id": "CVE-2020-15106",
  "cve_desc": "In etcd before versions 3.3.23 and 3.4.10, a large slice causes panic in decodeRecord method. The size of a record is stored in the length field of a WAL file and no additional validation is done on this data. Therefore, it is possible to forge an extremely large frame size that can unintentionally panic at the expense of any RAFT participant trying to decode the WAL.",
  "repo": "etcd-io/etcd",
  "patch_hash": "f4b650b51dc4a53a8700700dc12e1242ac56ba07",
  "patch_info": {
    "commit_hash": "f4b650b51dc4a53a8700700dc12e1242ac56ba07",
    "repo": "etcd-io/etcd",
    "commit_url": "https://github.com/etcd-io/etcd/commit/f4b650b51dc4a53a8700700dc12e1242ac56ba07",
    "files": [
      "CHANGELOG-3.5.md",
      "wal/decoder.go",
      "wal/wal.go",
      "wal/wal_test.go"
    ],
    "message": "Merge pull request #11793 from gyuho/fix\n\nwal: check out of range slice in \"ReadAll\", entry limits in \"decodeRecord\"",
    "before_after_code_files": [
      "wal/decoder.go||wal/decoder.go",
      "wal/wal.go||wal/wal.go",
      "wal/wal_test.go||wal/wal_test.go"
    ]
  },
  "patch_diff": {
    "wal/decoder.go||wal/decoder.go": [
      "File: wal/decoder.go -> wal/decoder.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:  return d.decodeRecord(rec)",
      "60: }",
      "62: func (d *decoder) decodeRecord(rec *walpb.Record) error {",
      "63:  if len(d.brs) == 0 {",
      "64:   return io.EOF",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: const maxWALEntrySizeLimit = int64(10 * 1024 * 1024)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:  }",
      "81:  recBytes, padBytes := decodeFrameSize(l)",
      "83:  data := make([]byte, recBytes+padBytes)",
      "84:  if _, err = io.ReadFull(d.brs[0], data); err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:  if recBytes >= maxWALEntrySizeLimit-padBytes {",
      "88:   return ErrMaxWALEntrySizeLimitExceeded",
      "89:  }",
      "",
      "---------------"
    ],
    "wal/wal.go||wal/wal.go": [
      "File: wal/wal.go -> wal/wal.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:  SegmentSizeBytes int64 = 64 * 1000 * 1000 // 64MB",
      "62: )",
      "",
      "[Removed Lines]",
      "56:  ErrMetadataConflict = errors.New(\"wal: conflicting metadata found\")",
      "57:  ErrFileNotFound     = errors.New(\"wal: file not found\")",
      "58:  ErrCRCMismatch      = errors.New(\"wal: crc mismatch\")",
      "59:  ErrSnapshotMismatch = errors.New(\"wal: snapshot mismatch\")",
      "60:  ErrSnapshotNotFound = errors.New(\"wal: snapshot not found\")",
      "61:  crcTable            = crc32.MakeTable(crc32.Castagnoli)",
      "",
      "[Added Lines]",
      "56:  ErrMetadataConflict             = errors.New(\"wal: conflicting metadata found\")",
      "57:  ErrFileNotFound                 = errors.New(\"wal: file not found\")",
      "58:  ErrCRCMismatch                  = errors.New(\"wal: crc mismatch\")",
      "59:  ErrSnapshotMismatch             = errors.New(\"wal: snapshot mismatch\")",
      "60:  ErrSnapshotNotFound             = errors.New(\"wal: snapshot not found\")",
      "61:  ErrSliceOutOfRange              = errors.New(\"wal: slice bounds out of range\")",
      "62:  ErrMaxWALEntrySizeLimitExceeded = errors.New(\"wal: max entry size limit exceeded\")",
      "63:  crcTable                        = crc32.MakeTable(crc32.Castagnoli)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "411:   switch rec.Type {",
      "412:   case entryType:",
      "413:    e := mustUnmarshalEntry(rec.Data)",
      "414:    if e.Index > w.start.Index {",
      "416:    }",
      "417:    w.enti = e.Index",
      "",
      "[Removed Lines]",
      "415:     ents = append(ents[:e.Index-w.start.Index-1], e)",
      "",
      "[Added Lines]",
      "419:     up := e.Index - w.start.Index - 1",
      "420:     if up > uint64(len(ents)) {",
      "422:      return nil, state, nil, ErrSliceOutOfRange",
      "423:     }",
      "424:     ents = append(ents[:up], e)",
      "",
      "---------------"
    ],
    "wal/wal_test.go||wal/wal_test.go": [
      "File: wal/wal_test.go -> wal/wal_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "645:  }",
      "646: }",
      "648: func TestSaveEmpty(t *testing.T) {",
      "649:  var buf bytes.Buffer",
      "650:  var est raftpb.HardState",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "648: func TestOpenWithMaxIndex(t *testing.T) {",
      "649:  p, err := ioutil.TempDir(os.TempDir(), \"waltest\")",
      "650:  if err != nil {",
      "651:   t.Fatal(err)",
      "652:  }",
      "653:  defer os.RemoveAll(p)",
      "655:  w, err := Create(zap.NewExample(), p, nil)",
      "656:  if err != nil {",
      "657:   t.Fatal(err)",
      "658:  }",
      "659:  defer w.Close()",
      "661:  es := []raftpb.Entry{{Index: uint64(math.MaxInt64)}}",
      "662:  if err = w.Save(raftpb.HardState{}, es); err != nil {",
      "663:   t.Fatal(err)",
      "664:  }",
      "665:  w.Close()",
      "667:  w, err = Open(zap.NewExample(), p, walpb.Snapshot{})",
      "668:  if err != nil {",
      "669:   t.Fatal(err)",
      "670:  }",
      "671:  _, _, _, err = w.ReadAll()",
      "672:  if err == nil || err != ErrSliceOutOfRange {",
      "673:   t.Fatalf(\"err = %v, want ErrSliceOutOfRange\", err)",
      "674:  }",
      "675: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c716d764d0edd47e898fc58607afa91164687574",
      "candidate_info": {
        "commit_hash": "c716d764d0edd47e898fc58607afa91164687574",
        "repo": "etcd-io/etcd",
        "commit_url": "https://github.com/etcd-io/etcd/commit/c716d764d0edd47e898fc58607afa91164687574",
        "files": [
          "CHANGELOG-3.5.md",
          "wal/decoder.go",
          "wal/wal.go",
          "wal/wal_test.go"
        ],
        "message": "wal: check out of range slice in \"ReadAll\", \"decoder\"\n\nwal: add slice bound checks in decoder\n\nCHANGELOG-3.5: add wal slice bound check\nCHANGELOG-3.5: add \"decodeRecord\"\n\nSigned-off-by: Gyuho Lee <leegyuho@amazon.com>",
        "before_after_code_files": [
          "wal/decoder.go||wal/decoder.go",
          "wal/wal.go||wal/wal.go",
          "wal/wal_test.go||wal/wal_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/etcd-io/etcd/pull/11793"
        ],
        "olp_code_files": {
          "patch": [
            "wal/decoder.go||wal/decoder.go",
            "wal/wal.go||wal/wal.go",
            "wal/wal_test.go||wal/wal_test.go"
          ],
          "candidate": [
            "wal/decoder.go||wal/decoder.go",
            "wal/wal.go||wal/wal.go",
            "wal/wal_test.go||wal/wal_test.go"
          ]
        }
      },
      "candidate_diff": {
        "wal/decoder.go||wal/decoder.go": [
          "File: wal/decoder.go -> wal/decoder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  return d.decodeRecord(rec)",
          "60: }",
          "62: func (d *decoder) decodeRecord(rec *walpb.Record) error {",
          "63:  if len(d.brs) == 0 {",
          "64:   return io.EOF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: const maxWALEntrySizeLimit = int64(10 * 1024 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  }",
          "81:  recBytes, padBytes := decodeFrameSize(l)",
          "83:  data := make([]byte, recBytes+padBytes)",
          "84:  if _, err = io.ReadFull(d.brs[0], data); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:  if recBytes >= maxWALEntrySizeLimit-padBytes {",
          "88:   return ErrMaxWALEntrySizeLimitExceeded",
          "89:  }",
          "",
          "---------------"
        ],
        "wal/wal.go||wal/wal.go": [
          "File: wal/wal.go -> wal/wal.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  SegmentSizeBytes int64 = 64 * 1000 * 1000 // 64MB",
          "62: )",
          "",
          "[Removed Lines]",
          "56:  ErrMetadataConflict = errors.New(\"wal: conflicting metadata found\")",
          "57:  ErrFileNotFound     = errors.New(\"wal: file not found\")",
          "58:  ErrCRCMismatch      = errors.New(\"wal: crc mismatch\")",
          "59:  ErrSnapshotMismatch = errors.New(\"wal: snapshot mismatch\")",
          "60:  ErrSnapshotNotFound = errors.New(\"wal: snapshot not found\")",
          "61:  crcTable            = crc32.MakeTable(crc32.Castagnoli)",
          "",
          "[Added Lines]",
          "56:  ErrMetadataConflict             = errors.New(\"wal: conflicting metadata found\")",
          "57:  ErrFileNotFound                 = errors.New(\"wal: file not found\")",
          "58:  ErrCRCMismatch                  = errors.New(\"wal: crc mismatch\")",
          "59:  ErrSnapshotMismatch             = errors.New(\"wal: snapshot mismatch\")",
          "60:  ErrSnapshotNotFound             = errors.New(\"wal: snapshot not found\")",
          "61:  ErrSliceOutOfRange              = errors.New(\"wal: slice bounds out of range\")",
          "62:  ErrMaxWALEntrySizeLimitExceeded = errors.New(\"wal: max entry size limit exceeded\")",
          "63:  crcTable                        = crc32.MakeTable(crc32.Castagnoli)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:   switch rec.Type {",
          "412:   case entryType:",
          "413:    e := mustUnmarshalEntry(rec.Data)",
          "414:    if e.Index > w.start.Index {",
          "416:    }",
          "417:    w.enti = e.Index",
          "",
          "[Removed Lines]",
          "415:     ents = append(ents[:e.Index-w.start.Index-1], e)",
          "",
          "[Added Lines]",
          "419:     up := e.Index - w.start.Index - 1",
          "420:     if up > uint64(len(ents)) {",
          "422:      return nil, state, nil, ErrSliceOutOfRange",
          "423:     }",
          "424:     ents = append(ents[:up], e)",
          "",
          "---------------"
        ],
        "wal/wal_test.go||wal/wal_test.go": [
          "File: wal/wal_test.go -> wal/wal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:  }",
          "646: }",
          "648: func TestSaveEmpty(t *testing.T) {",
          "649:  var buf bytes.Buffer",
          "650:  var est raftpb.HardState",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648: func TestOpenWithMaxIndex(t *testing.T) {",
          "649:  p, err := ioutil.TempDir(os.TempDir(), \"waltest\")",
          "650:  if err != nil {",
          "651:   t.Fatal(err)",
          "652:  }",
          "653:  defer os.RemoveAll(p)",
          "655:  w, err := Create(zap.NewExample(), p, nil)",
          "656:  if err != nil {",
          "657:   t.Fatal(err)",
          "658:  }",
          "659:  defer w.Close()",
          "661:  es := []raftpb.Entry{{Index: uint64(math.MaxInt64)}}",
          "662:  if err = w.Save(raftpb.HardState{}, es); err != nil {",
          "663:   t.Fatal(err)",
          "664:  }",
          "665:  w.Close()",
          "667:  w, err = Open(zap.NewExample(), p, walpb.Snapshot{})",
          "668:  if err != nil {",
          "669:   t.Fatal(err)",
          "670:  }",
          "671:  _, _, _, err = w.ReadAll()",
          "672:  if err == nil || err != ErrSliceOutOfRange {",
          "673:   t.Fatalf(\"err = %v, want ErrSliceOutOfRange\", err)",
          "674:  }",
          "675: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bccb40b7d9a75a5f4c7faf434b4d425442779040",
      "candidate_info": {
        "commit_hash": "bccb40b7d9a75a5f4c7faf434b4d425442779040",
        "repo": "etcd-io/etcd",
        "commit_url": "https://github.com/etcd-io/etcd/commit/bccb40b7d9a75a5f4c7faf434b4d425442779040",
        "files": [
          "wal/decoder.go",
          "wal/wal.go",
          "wal/wal_test.go"
        ],
        "message": "wal: check out of range slice in \"ReadAll\", \"decoder\"\n\nwal: add slice bound checks in decoder\n\nCHANGELOG-3.5: add wal slice bound check\nCHANGELOG-3.5: add \"decodeRecord\"\n\nSigned-off-by: Gyuho Lee <leegyuho@amazon.com>",
        "before_after_code_files": [
          "wal/decoder.go||wal/decoder.go",
          "wal/wal.go||wal/wal.go",
          "wal/wal_test.go||wal/wal_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "wal/decoder.go||wal/decoder.go",
            "wal/wal.go||wal/wal.go",
            "wal/wal_test.go||wal/wal_test.go"
          ],
          "candidate": [
            "wal/decoder.go||wal/decoder.go",
            "wal/wal.go||wal/wal.go",
            "wal/wal_test.go||wal/wal_test.go"
          ]
        }
      },
      "candidate_diff": {
        "wal/decoder.go||wal/decoder.go": [
          "File: wal/decoder.go -> wal/decoder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  return d.decodeRecord(rec)",
          "60: }",
          "62: func (d *decoder) decodeRecord(rec *walpb.Record) error {",
          "63:  if len(d.brs) == 0 {",
          "64:   return io.EOF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: const maxWALEntrySizeLimit = int64(10 * 1024 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  }",
          "81:  recBytes, padBytes := decodeFrameSize(l)",
          "83:  data := make([]byte, recBytes+padBytes)",
          "84:  if _, err = io.ReadFull(d.brs[0], data); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:  if recBytes >= maxWALEntrySizeLimit-padBytes {",
          "88:   return ErrMaxWALEntrySizeLimitExceeded",
          "89:  }",
          "",
          "---------------"
        ],
        "wal/wal.go||wal/wal.go": [
          "File: wal/wal.go -> wal/wal.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  plog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"wal\")",
          "64: )",
          "",
          "[Removed Lines]",
          "58:  ErrMetadataConflict = errors.New(\"wal: conflicting metadata found\")",
          "59:  ErrFileNotFound     = errors.New(\"wal: file not found\")",
          "60:  ErrCRCMismatch      = errors.New(\"wal: crc mismatch\")",
          "61:  ErrSnapshotMismatch = errors.New(\"wal: snapshot mismatch\")",
          "62:  ErrSnapshotNotFound = errors.New(\"wal: snapshot not found\")",
          "63:  crcTable            = crc32.MakeTable(crc32.Castagnoli)",
          "",
          "[Added Lines]",
          "58:  ErrMetadataConflict             = errors.New(\"wal: conflicting metadata found\")",
          "59:  ErrFileNotFound                 = errors.New(\"wal: file not found\")",
          "60:  ErrCRCMismatch                  = errors.New(\"wal: crc mismatch\")",
          "61:  ErrSnapshotMismatch             = errors.New(\"wal: snapshot mismatch\")",
          "62:  ErrSnapshotNotFound             = errors.New(\"wal: snapshot not found\")",
          "63:  ErrSliceOutOfRange              = errors.New(\"wal: slice bounds out of range\")",
          "64:  ErrMaxWALEntrySizeLimitExceeded = errors.New(\"wal: max entry size limit exceeded\")",
          "65:  crcTable                        = crc32.MakeTable(crc32.Castagnoli)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:   switch rec.Type {",
          "329:   case entryType:",
          "330:    e := mustUnmarshalEntry(rec.Data)",
          "331:    if e.Index > w.start.Index {",
          "333:    }",
          "334:    w.enti = e.Index",
          "335:   case stateType:",
          "",
          "[Removed Lines]",
          "332:     ents = append(ents[:e.Index-w.start.Index-1], e)",
          "",
          "[Added Lines]",
          "336:     up := e.Index - w.start.Index - 1",
          "337:     if up > uint64(len(ents)) {",
          "339:      return nil, state, nil, ErrSliceOutOfRange",
          "340:     }",
          "341:     ents = append(ents[:up], e)",
          "",
          "---------------"
        ],
        "wal/wal_test.go||wal/wal_test.go": [
          "File: wal/wal_test.go -> wal/wal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:  }",
          "577: }",
          "579: func TestSaveEmpty(t *testing.T) {",
          "580:  var buf bytes.Buffer",
          "581:  var est raftpb.HardState",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579: func TestOpenWithMaxIndex(t *testing.T) {",
          "580:  p, err := ioutil.TempDir(os.TempDir(), \"waltest\")",
          "581:  if err != nil {",
          "582:   t.Fatal(err)",
          "583:  }",
          "584:  defer os.RemoveAll(p)",
          "586:  w, err := Create(zap.NewExample(), p, nil)",
          "587:  if err != nil {",
          "588:   t.Fatal(err)",
          "589:  }",
          "590:  defer w.Close()",
          "592:  es := []raftpb.Entry{{Index: uint64(math.MaxInt64)}}",
          "593:  if err = w.Save(raftpb.HardState{}, es); err != nil {",
          "594:   t.Fatal(err)",
          "595:  }",
          "596:  w.Close()",
          "598:  w, err = Open(zap.NewExample(), p, walpb.Snapshot{})",
          "599:  if err != nil {",
          "600:   t.Fatal(err)",
          "601:  }",
          "602:  _, _, _, err = w.ReadAll()",
          "603:  if err == nil || err != ErrSliceOutOfRange {",
          "604:   t.Fatalf(\"err = %v, want ErrSliceOutOfRange\", err)",
          "605:  }",
          "606: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b14255c0b4d1a27221d1857ae0e72bcac7f2b146",
      "candidate_info": {
        "commit_hash": "b14255c0b4d1a27221d1857ae0e72bcac7f2b146",
        "repo": "etcd-io/etcd",
        "commit_url": "https://github.com/etcd-io/etcd/commit/b14255c0b4d1a27221d1857ae0e72bcac7f2b146",
        "files": [
          "wal/decoder.go",
          "wal/wal.go",
          "wal/wal_test.go"
        ],
        "message": "wal: check out of range slice in \"ReadAll\", \"decoder\"\n\nwal: add slice bound checks in decoder\n\nCHANGELOG-3.5: add wal slice bound check\nCHANGELOG-3.5: add \"decodeRecord\"\n\nSigned-off-by: Gyuho Lee <leegyuho@amazon.com>",
        "before_after_code_files": [
          "wal/decoder.go||wal/decoder.go",
          "wal/wal.go||wal/wal.go",
          "wal/wal_test.go||wal/wal_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "wal/decoder.go||wal/decoder.go",
            "wal/wal.go||wal/wal.go",
            "wal/wal_test.go||wal/wal_test.go"
          ],
          "candidate": [
            "wal/decoder.go||wal/decoder.go",
            "wal/wal.go||wal/wal.go",
            "wal/wal_test.go||wal/wal_test.go"
          ]
        }
      },
      "candidate_diff": {
        "wal/decoder.go||wal/decoder.go": [
          "File: wal/decoder.go -> wal/decoder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  return d.decodeRecord(rec)",
          "57: }",
          "59: func (d *decoder) decodeRecord(rec *walpb.Record) error {",
          "60:  if len(d.brs) == 0 {",
          "61:   return io.EOF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: const maxWALEntrySizeLimit = int64(10 * 1024 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:  }",
          "78:  recBytes, padBytes := decodeFrameSize(l)",
          "80:  data := make([]byte, recBytes+padBytes)",
          "81:  if _, err = io.ReadFull(d.brs[0], data); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:  if recBytes >= maxWALEntrySizeLimit-padBytes {",
          "85:   return ErrMaxWALEntrySizeLimitExceeded",
          "86:  }",
          "",
          "---------------"
        ],
        "wal/wal.go||wal/wal.go": [
          "File: wal/wal.go -> wal/wal.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  SegmentSizeBytes int64 = 64 * 1000 * 1000 // 64MB",
          "56:  plog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"wal\")",
          "64: )",
          "",
          "[Removed Lines]",
          "58:  ErrMetadataConflict = errors.New(\"wal: conflicting metadata found\")",
          "59:  ErrFileNotFound     = errors.New(\"wal: file not found\")",
          "60:  ErrCRCMismatch      = errors.New(\"wal: crc mismatch\")",
          "61:  ErrSnapshotMismatch = errors.New(\"wal: snapshot mismatch\")",
          "62:  ErrSnapshotNotFound = errors.New(\"wal: snapshot not found\")",
          "63:  crcTable            = crc32.MakeTable(crc32.Castagnoli)",
          "",
          "[Added Lines]",
          "57:  ErrMetadataConflict             = errors.New(\"wal: conflicting metadata found\")",
          "58:  ErrFileNotFound                 = errors.New(\"wal: file not found\")",
          "59:  ErrCRCMismatch                  = errors.New(\"wal: crc mismatch\")",
          "60:  ErrSnapshotMismatch             = errors.New(\"wal: snapshot mismatch\")",
          "61:  ErrSnapshotNotFound             = errors.New(\"wal: snapshot not found\")",
          "62:  ErrSliceOutOfRange              = errors.New(\"wal: slice bounds out of range\")",
          "63:  ErrMaxWALEntrySizeLimitExceeded = errors.New(\"wal: max entry size limit exceeded\")",
          "64:  crcTable                        = crc32.MakeTable(crc32.Castagnoli)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:   switch rec.Type {",
          "269:   case entryType:",
          "270:    e := mustUnmarshalEntry(rec.Data)",
          "271:    if e.Index > w.start.Index {",
          "273:    }",
          "274:    w.enti = e.Index",
          "275:   case stateType:",
          "",
          "[Removed Lines]",
          "272:     ents = append(ents[:e.Index-w.start.Index-1], e)",
          "",
          "[Added Lines]",
          "275:     up := e.Index - w.start.Index - 1",
          "276:     if up > uint64(len(ents)) {",
          "278:      return nil, state, nil, ErrSliceOutOfRange",
          "279:     }",
          "280:     ents = append(ents[:up], e)",
          "",
          "---------------"
        ],
        "wal/wal_test.go||wal/wal_test.go": [
          "File: wal/wal_test.go -> wal/wal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"bytes\"",
          "19:  \"io\"",
          "20:  \"io/ioutil\"",
          "21:  \"os\"",
          "22:  \"path/filepath\"",
          "23:  \"reflect\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"math\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:  }",
          "525: }",
          "527: func TestSaveEmpty(t *testing.T) {",
          "528:  var buf bytes.Buffer",
          "529:  var est raftpb.HardState",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528: func TestOpenWithMaxIndex(t *testing.T) {",
          "529:  p, err := ioutil.TempDir(os.TempDir(), \"waltest\")",
          "530:  if err != nil {",
          "531:   t.Fatal(err)",
          "532:  }",
          "533:  defer os.RemoveAll(p)",
          "535:  w, err := Create(p, nil)",
          "536:  if err != nil {",
          "537:   t.Fatal(err)",
          "538:  }",
          "539:  defer w.Close()",
          "541:  es := []raftpb.Entry{{Index: uint64(math.MaxInt64)}}",
          "542:  if err = w.Save(raftpb.HardState{}, es); err != nil {",
          "543:   t.Fatal(err)",
          "544:  }",
          "545:  w.Close()",
          "547:  w, err = Open(p, walpb.Snapshot{})",
          "548:  if err != nil {",
          "549:   t.Fatal(err)",
          "550:  }",
          "551:  _, _, _, err = w.ReadAll()",
          "552:  if err == nil || err != ErrSliceOutOfRange {",
          "553:   t.Fatalf(\"err = %v, want ErrSliceOutOfRange\", err)",
          "554:  }",
          "555: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}