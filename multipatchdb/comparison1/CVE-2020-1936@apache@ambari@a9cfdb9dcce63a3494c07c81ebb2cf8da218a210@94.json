{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6885de49d69ba1cb6e9f85b5c75019db645d8d9c",
      "candidate_info": {
        "commit_hash": "6885de49d69ba1cb6e9f85b5c75019db645d8d9c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6885de49d69ba1cb6e9f85b5c75019db645d8d9c",
        "files": [
          "ambari-web/app/controllers/main/host/bulk_operations_controller.js",
          "ambari-web/app/messages.js",
          "ambari-web/app/views/main/host/hosts_table_menu_view.js"
        ],
        "message": "AMBARI-25209 : Bulk Operation Refresh Configs for selected hosts (#2901)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/bulk_operations_controller.js||ambari-web/app/controllers/main/host/bulk_operations_controller.js",
          "ambari-web/app/messages.js||ambari-web/app/messages.js",
          "ambari-web/app/views/main/host/hosts_table_menu_view.js||ambari-web/app/views/main/host/hosts_table_menu_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/bulk_operations_controller.js||ambari-web/app/controllers/main/host/bulk_operations_controller.js": [
          "File: ambari-web/app/controllers/main/host/bulk_operations_controller.js -> ambari-web/app/controllers/main/host/bulk_operations_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         else if (operationData.action === 'DELETE'){",
          "68:           this._bulkOperationForHostsDelete(hosts);",
          "69:         }",
          "70:         else {",
          "71:           if (operationData.action === 'PASSIVE_STATE') {",
          "72:             this.bulkOperationForHostsPassiveState(operationData, hosts);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         else if (operationData.action === 'CONFIGURE') {",
          "71:           this.bulkOperationForHostsRefreshConfig(operationData, hosts);",
          "72:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:     });",
          "318:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:   bulkOperationForHostsRefreshConfig: function (operationData, hosts) {",
          "329:     return batchUtils.getComponentsFromServer({",
          "330:       passiveState: 'OFF',",
          "331:       hosts: hosts.mapProperty('hostName'),",
          "332:       displayParams: ['host_components/HostRoles/component_name']",
          "333:     }, this._getComponentsFromServerForRefreshConfigsCallback);",
          "334:   },",
          "342:   _getComponentsFromServerForRefreshConfigsCallback: function (data) {",
          "343:     var hostComponents = [];",
          "344:     var clients = App.components.get('clients');",
          "345:     data.items.forEach(function (host) {",
          "346:       host.host_components.forEach(function (hostComponent) {",
          "347:         if (clients.contains((hostComponent.HostRoles.component_name))) {",
          "348:           hostComponents.push(O.create({",
          "349:             componentName: hostComponent.HostRoles.component_name,",
          "350:             hostName: host.Hosts.host_name",
          "351:           }));",
          "352:         }",
          "353:       })",
          "354:     });",
          "355:     batchUtils.restartHostComponents(hostComponents, Em.I18n.t('rollingrestart.context.configs.allOnSelectedHosts'), \"HOST\");",
          "356:   },",
          "",
          "---------------"
        ],
        "ambari-web/app/messages.js||ambari-web/app/messages.js": [
          "File: ambari-web/app/messages.js -> ambari-web/app/messages.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2701:   'hosts.table.menu.l2.allComponents':'All Components',",
          "2702:   'hosts.table.menu.l2.restartAllComponents':'Restart All Components',",
          "2703:   'hosts.table.menu.l2.reinstallFailedComponents':'Reinstall Failed Components',",
          "2705:   'hosts.bulkOperation.confirmation.header':'Confirm Bulk Operation',",
          "2706:   'hosts.bulkOperation.confirmation.hosts':'Are you sure you want to <strong>{0}</strong> on the following {1} hosts?',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2704:   'hosts.table.menu.l2.refreshConfigsClientComponents':'Refresh All Configs',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3267:   'rollingrestart.dialog.msg.staleConfigsOnly': 'Only restart {0} with stale configs',",
          "3268:   'rollingrestart.rest.context': 'Rolling Restart of {0}s - batch {1} of {2}',",
          "3269:   'rollingrestart.context.allOnSelectedHosts':'Restart all components on the selected hosts',",
          "3270:   'rollingrestart.context.allForSelectedService':'Restart all components for {0}',",
          "3271:   'rollingrestart.context.allWithStaleConfigsForSelectedService':'Restart all components with Stale Configs for {0}',",
          "3272:   'rollingrestart.context.ClientOnSelectedHost':'Restart {0} on {1}',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3271:   'rollingrestart.context.configs.allOnSelectedHosts':'Refresh all configs on the selected hosts',",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/host/hosts_table_menu_view.js||ambari-web/app/views/main/host/hosts_table_menu_view.js": [
          "File: ambari-web/app/views/main/host/hosts_table_menu_view.js -> ambari-web/app/views/main/host/hosts_table_menu_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:               action: 'REINSTALL',",
          "289:               message: Em.I18n.t('hosts.table.menu.l2.reinstallFailedComponents')",
          "290:             })",
          "291:           })",
          "292:         ]);",
          "293:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:           }),",
          "292:           O.create({",
          "293:             label: Em.I18n.t('hosts.table.menu.l2.refreshConfigsClientComponents'),",
          "294:             operationData: O.create({",
          "295:               action: 'CONFIGURE',",
          "296:               message: Em.I18n.t('hosts.table.menu.l2.refreshConfigsClientComponents')",
          "297:             })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb515fa4f85a56c7f0d1f2a16a9fcd0cd5e2ed7f",
      "candidate_info": {
        "commit_hash": "eb515fa4f85a56c7f0d1f2a16a9fcd0cd5e2ed7f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/eb515fa4f85a56c7f0d1f2a16a9fcd0cd5e2ed7f",
        "files": [
          "ambari-server/src/main/resources/stacks/PERF/check_host.sed",
          "contrib/utils/perf/deploy-gce-perf-cluster.py"
        ],
        "message": "AMBARI-24647. [PERF] Host checks taking longer time than previous releases (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/stacks/PERF/check_host.sed||ambari-server/src/main/resources/stacks/PERF/check_host.sed",
          "contrib/utils/perf/deploy-gce-perf-cluster.py||contrib/utils/perf/deploy-gce-perf-cluster.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/stacks/PERF/check_host.sed||ambari-server/src/main/resources/stacks/PERF/check_host.sed": [
          "File: ambari-server/src/main/resources/stacks/PERF/check_host.sed -> ambari-server/src/main/resources/stacks/PERF/check_host.sed",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one or more",
          "2: # contributor license agreements.  See the NOTICE file distributed with",
          "3: # this work for additional information regarding copyright ownership.",
          "4: # The ASF licenses this file to You under the Apache License, Version 2.0",
          "5: # (the \"License\"); you may not use this file except in compliance with",
          "6: # the License.  You may obtain a copy of the License at",
          "7: #",
          "8: #     http://www.apache.org/licenses/LICENSE-2.0",
          "9: #",
          "10: # Unless required by applicable law or agreed to in writing, software",
          "11: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License.",
          "15: /    Logger.info(\"Check execute list: \" + str(check_execute_list))/{i\\",
          "16:     if CHECK_INSTALLED_PACKAGES in check_execute_list: check_execute_list.remove(CHECK_INSTALLED_PACKAGES)\\",
          "17:     if CHECK_INSTALLED_PACKAGES in check_execute_list: check_execute_list.remove(CHECK_EXISTING_REPOS)\\",
          "18:     Logger.info(\"Check execute list: \" + str(check_execute_list))",
          "19: d",
          "20: }",
          "",
          "---------------"
        ],
        "contrib/utils/perf/deploy-gce-perf-cluster.py||contrib/utils/perf/deploy-gce-perf-cluster.py": [
          "File: contrib/utils/perf/deploy-gce-perf-cluster.py -> contrib/utils/perf/deploy-gce-perf-cluster.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import socket",
          "30: cluster_prefix = \"perf\"",
          "33: public_hostname_script = \"foo\"",
          "34: hostname_script = \"foo\"",
          "",
          "[Removed Lines]",
          "31: ambari_repo_file_url = \"http://s3.amazonaws.com/dev.hortonworks.com/ambari/centos7/2.x/updates/2.6.2.0/ambaribn.repo\"",
          "",
          "[Added Lines]",
          "31: ambari_repo_file_url = \"http://s3.amazonaws.com/dev.hortonworks.com/ambari/centos7/2.x/updates/2.7.1.0/ambaribn.repo\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   :param number_of_nodes: Number of VMs to request.",
          "281:   \"\"\"",
          "282:   print \"Creating server VM {0}-server-{1} with xxlarge nodes on centos7...\".format(cluster_prefix, args.cluster_suffix)",
          "284:                   \"Failed to create server, probably not enough resources!\", \"-tt\")",
          "285:   time.sleep(10)",
          "",
          "[Removed Lines]",
          "283:   execute_command(args, args.controller, \"/opt/gce-utils/gce up {0}-server-{1} 1 --centos7 --xlarge --ex --disk-xxlarge --ssd\".format(cluster_prefix, args.cluster_suffix),",
          "",
          "[Added Lines]",
          "283:   execute_command(args, args.controller, \"/opt/gce-utils/gce up {0}-server-{1} 1 --centos7 --xxlarge --ex --disk-xxlarge --ssd\".format(cluster_prefix, args.cluster_suffix),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405:   \"yum clean all; yum install krb5-workstation git ambari-agent -y\\n\" + \\",
          "406:   \"mkdir /home ; cd /home; git clone https://github.com/apache/ambari.git ; cd ambari ; git checkout branch-2.5\\n\" + \\",
          "407:   \"cp -r /home/ambari/ambari-server/src/main/resources/stacks/PERF /var/lib/ambari-agent/cache/stacks/PERF\\n\" + \\",
          "409:   \"sed -i -e 's/hostname=localhost/hostname={0}/g' /etc/ambari-agent/conf/ambari-agent.ini\\n\".format(server_host_name) + \\",
          "410:   \"sed -i -e 's/agent]/agent]\\\\nhostname_script={0}\\\\npublic_hostname_script={1}\\\\n/1' /etc/ambari-agent/conf/ambari-agent.ini\\n\".format(hostname_script, public_hostname_script) + \\",
          "411:   \"python /home/ambari/ambari-agent/conf/unix/agent-multiplier.py start\\n\" + \\",
          "",
          "[Removed Lines]",
          "408:   \"sed -i -f /var/lib/ambari-agent/cache/stacks/PERF/PythonExecutor.sed /usr/lib/python2.6/site-packages/ambari_agent/PythonExecutor.py\\n\" + \\",
          "",
          "[Added Lines]",
          "408:   \"sed -i -f /var/lib/ambari-agent/cache/stacks/PERF/PythonExecutor.sed /usr/lib/ambari-agent/lib/ambari_agent/PythonExecutor.py\\n\" + \\",
          "409:   \"sed -i -f /var/lib/ambari-agent/cache/stacks/PERF/check_host.sed /var/lib/ambari-agent/cache/custom_actions/scripts/check_host.py\\n\" + \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50d771e30216e3a4b48cf9081bc79c8c86de7e69",
      "candidate_info": {
        "commit_hash": "50d771e30216e3a4b48cf9081bc79c8c86de7e69",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/50d771e30216e3a4b48cf9081bc79c8c86de7e69",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java"
        ],
        "message": "[AMBARI-24522] Cannot connect to MIT KDC admin server when port is specified in kerberos-env/admin_server_host",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     }",
          "281:     String[] createKeytabFileCommand = (StringUtils.isEmpty(encryptionTypeSpec))",
          "285:     ShellCommandUtil.Result result = executeCommand(createKeytabFileCommand);",
          "286:     if (!result.isSuccessful()) {",
          "",
          "[Removed Lines]",
          "282:         ? new String[]{executableIpaGetKeytab, \"-s\", getAdminServerHost(), \"-p\", principal, \"-k\", keytabFileDestinationPath}",
          "283:         : new String[]{executableIpaGetKeytab, \"-s\", getAdminServerHost(), \"-e\", encryptionTypeSpec, \"-p\", principal, \"-k\", keytabFileDestinationPath};",
          "",
          "[Added Lines]",
          "282:         ? new String[]{executableIpaGetKeytab, \"-s\", getAdminServerHost(true), \"-p\", principal, \"-k\", keytabFileDestinationPath}",
          "283:         : new String[]{executableIpaGetKeytab, \"-s\", getAdminServerHost(true), \"-e\", encryptionTypeSpec, \"-p\", principal, \"-k\", keytabFileDestinationPath};",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.ambari.server.AmbariException;",
          "30: import org.apache.ambari.server.security.credential.PrincipalKeyCredential;",
          "31: import org.apache.ambari.server.utils.ShellCommandUtil;",
          "32: import org.apache.commons.collections.MapUtils;",
          "33: import org.apache.directory.server.kerberos.shared.keytab.Keytab;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.apache.ambari.server.utils.HTTPUtils;",
          "32: import org.apache.ambari.server.utils.HostAndPort;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   private String adminServerHost = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   private String adminServerHostAndPort = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     super.open(administratorCredentials, realm, kerberosConfiguration);",
          "85:     if (kerberosConfiguration != null) {",
          "87:     }",
          "",
          "[Removed Lines]",
          "86:       adminServerHost = kerberosConfiguration.get(KERBEROS_ENV_ADMIN_SERVER_HOST);",
          "",
          "[Added Lines]",
          "94:       String value = kerberosConfiguration.get(KERBEROS_ENV_ADMIN_SERVER_HOST);",
          "95:       HostAndPort hostAndPort = HTTPUtils.getHostAndPortFromProperty(value);",
          "98:       if (hostAndPort == null) {",
          "101:         adminServerHost = value;",
          "102:         adminServerHostAndPort = value;",
          "103:       } else {",
          "106:         adminServerHost = hostAndPort.host;",
          "107:         adminServerHostAndPort = value;",
          "108:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     executableKinit = null;",
          "107:     cachedKeytabs = null;",
          "108:     adminServerHost = null;",
          "110:     super.close();",
          "111:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     adminServerHostAndPort = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:     return super.executeCommand(command, _envp, interactiveHandler);",
          "226:   }",
          "230:   }",
          "232:   String getCredentialCacheFilePath() {",
          "",
          "[Removed Lines]",
          "228:   String getAdminServerHost() {",
          "229:     return adminServerHost;",
          "",
          "[Added Lines]",
          "257:   String getAdminServerHost(boolean includePort) {",
          "258:     return (includePort) ? adminServerHostAndPort : adminServerHost;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     }",
          "245:     if (!StringUtils.isEmpty(adminSeverHost)) {",
          "246:       command.add(\"-s\");",
          "247:       command.add(adminSeverHost);",
          "",
          "[Removed Lines]",
          "244:     String adminSeverHost = getAdminServerHost();",
          "",
          "[Added Lines]",
          "244:     String adminSeverHost = getAdminServerHost(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:         \"-c\",",
          "341:         credentialsCache,",
          "342:         \"-S\",",
          "344:         credentials.getPrincipal()",
          "345:     };",
          "346:   }",
          "",
          "[Removed Lines]",
          "343:         String.format(\"kadmin/%s\", getAdminServerHost()),",
          "",
          "[Added Lines]",
          "343:         String.format(\"kadmin/%s\", getAdminServerHost(false)),",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.serveraction.kerberos;",
          "21: import static org.easymock.EasyMock.anyObject;",
          "22: import static org.easymock.EasyMock.expect;",
          "23: import static org.easymock.EasyMock.replay;",
          "25: import java.lang.reflect.Method;",
          "26: import java.util.Collections;",
          "27: import java.util.HashMap;",
          "28: import java.util.Map;",
          "30: import org.apache.ambari.server.configuration.Configuration;",
          "31: import org.apache.ambari.server.state.Clusters;",
          "32: import org.apache.ambari.server.state.stack.OsFamily;",
          "33: import org.apache.ambari.server.utils.ShellCommandUtil;",
          "34: import org.easymock.EasyMock;",
          "35: import org.junit.BeforeClass;",
          "37: import com.google.inject.AbstractModule;",
          "38: import com.google.inject.Guice;",
          "39: import com.google.inject.Injector;",
          "41: public class IPAKerberosOperationHandlerTest extends KDCKerberosOperationHandlerTest {",
          "43:   private static Injector injector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import static org.easymock.EasyMock.capture;",
          "24: import static org.easymock.EasyMock.newCapture;",
          "30: import java.util.List;",
          "37: import org.easymock.Capture;",
          "38: import org.easymock.CaptureType;",
          "41: import org.junit.Test;",
          "47: import junit.framework.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     });",
          "68:   }",
          "70:   @Override",
          "71:   protected IPAKerberosOperationHandler createMockedHandler(Method... mockedMethods) {",
          "72:     IPAKerberosOperationHandler handler = createMockBuilder(IPAKerberosOperationHandler.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   @Test",
          "79:   public void testGetAdminServerHost() throws KerberosOperationException {",
          "80:     ShellCommandUtil.Result kinitResult = createMock(ShellCommandUtil.Result.class);",
          "81:     expect(kinitResult.isSuccessful()).andReturn(true).anyTimes();",
          "83:     Capture<String[]> capturedKinitCommand = newCapture(CaptureType.ALL);",
          "85:     IPAKerberosOperationHandler handler = createMockedHandler(methodExecuteCommand);",
          "86:     expect(handler.executeCommand(capture(capturedKinitCommand), anyObject(Map.class), anyObject(KDCKerberosOperationHandler.InteractivePasswordHandler.class)))",
          "87:         .andReturn(kinitResult)",
          "88:         .anyTimes();",
          "91:     Map<String,String> config = new HashMap<>();",
          "92:     config.put(\"encryption_types\", \"aes des3-cbc-sha1 rc4 des-cbc-md5\");",
          "94:     replayAll();",
          "96:     config.put(\"admin_server_host\", \"kdc.example.com\");",
          "97:     handler.open(getAdminCredentials(), DEFAULT_REALM, config);",
          "98:     Assert.assertEquals(\"kdc.example.com\", handler.getAdminServerHost(false));",
          "99:     Assert.assertEquals(\"kdc.example.com\", handler.getAdminServerHost(true));",
          "100:     handler.close();",
          "102:     config.put(\"admin_server_host\", \"kdc.example.com:749\");",
          "103:     handler.open(getAdminCredentials(), DEFAULT_REALM, config);",
          "104:     Assert.assertEquals(\"kdc.example.com\", handler.getAdminServerHost(false));",
          "105:     Assert.assertEquals(\"kdc.example.com:749\", handler.getAdminServerHost(true));",
          "106:     handler.close();",
          "108:     verifyAll();",
          "110:     Assert.assertTrue(capturedKinitCommand.hasCaptured());",
          "111:     List<String[]> capturedValues = capturedKinitCommand.getValues();",
          "112:     Assert.assertEquals(2, capturedValues.size());",
          "113:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.lang.reflect.Method;",
          "27: import java.util.Collections;",
          "28: import java.util.HashMap;",
          "29: import java.util.Map;",
          "31: import org.apache.ambari.server.configuration.Configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.apache.ambari.server.state.stack.OsFamily;",
          "35: import org.apache.ambari.server.utils.ShellCommandUtil;",
          "36: import org.easymock.Capture;",
          "37: import org.junit.Before;",
          "38: import org.junit.BeforeClass;",
          "39: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.easymock.CaptureType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     verifyAll();",
          "249:   }",
          "251:   @Override",
          "252:   protected MITKerberosOperationHandler createMockedHandler(Method... mockedMethods) {",
          "253:     MITKerberosOperationHandler handler = createMockBuilder(MITKerberosOperationHandler.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   @Test",
          "254:   public void testGetAdminServerHost() throws KerberosOperationException {",
          "255:     ShellCommandUtil.Result kinitResult = createMock(ShellCommandUtil.Result.class);",
          "256:     expect(kinitResult.isSuccessful()).andReturn(true).anyTimes();",
          "258:     Capture<String[]> capturedKinitCommand = newCapture(CaptureType.ALL);",
          "260:     MITKerberosOperationHandler handler = createMockedHandler(methodExecuteCommand);",
          "261:     expect(handler.executeCommand(capture(capturedKinitCommand), anyObject(Map.class), anyObject(KDCKerberosOperationHandler.InteractivePasswordHandler.class)))",
          "262:         .andReturn(kinitResult)",
          "263:         .anyTimes();",
          "266:     Map<String,String> config = new HashMap<>();",
          "267:     config.put(\"encryption_types\", \"aes des3-cbc-sha1 rc4 des-cbc-md5\");",
          "269:     replayAll();",
          "271:     config.put(\"admin_server_host\", \"kdc.example.com\");",
          "272:     handler.open(getAdminCredentials(), DEFAULT_REALM, config);",
          "273:     Assert.assertEquals(\"kdc.example.com\", handler.getAdminServerHost(false));",
          "274:     Assert.assertEquals(\"kdc.example.com\", handler.getAdminServerHost(true));",
          "275:     handler.close();",
          "277:     config.put(\"admin_server_host\", \"kdc.example.com:749\");",
          "278:     handler.open(getAdminCredentials(), DEFAULT_REALM, config);",
          "279:     Assert.assertEquals(\"kdc.example.com\", handler.getAdminServerHost(false));",
          "280:     Assert.assertEquals(\"kdc.example.com:749\", handler.getAdminServerHost(true));",
          "281:     handler.close();",
          "283:     verifyAll();",
          "285:     Assert.assertTrue(capturedKinitCommand.hasCaptured());",
          "286:     List<String[]> capturedValues = capturedKinitCommand.getValues();",
          "287:     Assert.assertEquals(2, capturedValues.size());",
          "293:     Assert.assertEquals(\"kadmin/kdc.example.com\", capturedValues.get(0)[4]);",
          "294:     Assert.assertEquals(\"kadmin/kdc.example.com\", capturedValues.get(1)[4]);",
          "295:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d379f01cb7ce9de39f67ad1689ed1e3bf0a14be",
      "candidate_info": {
        "commit_hash": "3d379f01cb7ce9de39f67ad1689ed1e3bf0a14be",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3d379f01cb7ce9de39f67ad1689ed1e3bf0a14be",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java"
        ],
        "message": "AMBARI-25433. Adding VDF fails with paywalled repos/urls (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.io.InputStream;",
          "21: import java.io.UnsupportedEncodingException;",
          "23: import java.net.URI;",
          "24: import java.net.URISyntaxException;",
          "26: import java.util.ArrayList;",
          "27: import java.util.Collection;",
          "28: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "22: import java.net.MalformedURLException;",
          "25: import java.net.URL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import java.util.Map;",
          "33: import java.util.Map.Entry;",
          "34: import java.util.Set;",
          "38: import org.apache.ambari.annotations.Experimental;",
          "39: import org.apache.ambari.annotations.ExperimentalFeature;",
          "",
          "[Removed Lines]",
          "35: import java.util.regex.Matcher;",
          "36: import java.util.regex.Pattern;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java -> ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import javax.xml.bind.annotation.XmlRootElement;",
          "33: import javax.xml.bind.annotation.XmlTransient;",
          "36: import org.apache.ambari.server.stack.Validable;",
          "37: import org.apache.ambari.server.state.RepositoryInfo;",
          "",
          "[Removed Lines]",
          "35: import com.google.common.base.Strings;",
          "",
          "[Added Lines]",
          "39: import com.google.common.base.Strings;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b6320d5ca07200e98e1497aced92dc8029766eb",
      "candidate_info": {
        "commit_hash": "0b6320d5ca07200e98e1497aced92dc8029766eb",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0b6320d5ca07200e98e1497aced92dc8029766eb",
        "files": [
          "ambari-server/sbin/ambari-server",
          "ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/serverUtils.py",
          "ambari-server/src/main/python/ambari_server/setupActions.py",
          "ambari-server/src/main/python/ambari_server/setupSso.py",
          "ambari-server/src/main/python/ambari_server/setupTrustedProxy.py",
          "ambari-server/src/test/python/TestSetupTrustedProxy.py"
        ],
        "message": "AMBARI-24986. Using Ambari server's CLI to enable/disable Trusted Proxy support (#2798)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/serverUtils.py||ambari-server/src/main/python/ambari_server/serverUtils.py",
          "ambari-server/src/main/python/ambari_server/setupActions.py||ambari-server/src/main/python/ambari_server/setupActions.py",
          "ambari-server/src/main/python/ambari_server/setupSso.py||ambari-server/src/main/python/ambari_server/setupSso.py",
          "ambari-server/src/main/python/ambari_server/setupTrustedProxy.py||ambari-server/src/main/python/ambari_server/setupTrustedProxy.py",
          "ambari-server/src/test/python/TestSetupTrustedProxy.py||ambari-server/src/test/python/TestSetupTrustedProxy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py": [
          "File: ambari-server/src/main/python/ambari-server.py -> ambari-server/src/main/python/ambari-server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   SETUP_ACTION, SETUP_SECURITY_ACTION, RESTART_ACTION, START_ACTION, STATUS_ACTION, STOP_ACTION, UPGRADE_ACTION, \\",
          "50:   SETUP_JCE_ACTION, SET_CURRENT_ACTION, ENABLE_STACK_ACTION, SETUP_SSO_ACTION, \\",
          "51:   DB_PURGE_ACTION, INSTALL_MPACK_ACTION, UNINSTALL_MPACK_ACTION, UPGRADE_MPACK_ACTION, PAM_SETUP_ACTION, \\",
          "53: from ambari_server.setupHttps import setup_https, setup_truststore",
          "54: from ambari_server.setupMpacks import install_mpack, uninstall_mpack, upgrade_mpack, STACK_DEFINITIONS_RESOURCE_NAME, \\",
          "55:   SERVICE_DEFINITIONS_RESOURCE_NAME, MPACKS_RESOURCE_NAME",
          "56: from ambari_server.setupSecurity import setup_ldap, sync_ldap, setup_master_key, setup_ambari_krb5_jaas, setup_pam, \\",
          "57:   migrate_ldap_pam, LDAP_TYPES",
          "58: from ambari_server.setupSso import setup_sso",
          "59: from ambari_server.userInput import get_validated_string_input",
          "60: from ambari_server_main import server_process_main",
          "",
          "[Removed Lines]",
          "52:   MIGRATE_LDAP_PAM_ACTION, KERBEROS_SETUP_ACTION",
          "",
          "[Added Lines]",
          "52:   MIGRATE_LDAP_PAM_ACTION, KERBEROS_SETUP_ACTION, SETUP_TPROXY_ACTION",
          "59: from ambari_server.setupTrustedProxy import setup_trusted_proxy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:   parser.add_option('--ambari-admin-username', default=None, help=\"Ambari administrator username for accessing Ambari's REST API\", dest=\"ambari_admin_username\")",
          "589:   parser.add_option('--ambari-admin-password', default=None, help=\"Ambari administrator password for accessing Ambari's REST API\", dest=\"ambari_admin_password\")",
          "591: @OsFamilyFuncImpl(OsFamilyImpl.DEFAULT)",
          "592: def init_pam_setup_parser_options(parser):",
          "593:   parser.add_option('--pam-config-file', default=None, help=\"Path to the PAM configuration file\", dest=\"pam_config_file\")",
          "594:   parser.add_option('--pam-auto-create-groups', default=None, help=\"Automatically create groups for authenticated users [true/false]\", dest=\"pam_auto_create_groups\")",
          "596: @OsFamilyFuncImpl(OsFamilyImpl.DEFAULT)",
          "597: def init_set_current_parser_options(parser):",
          "598:   parser.add_option('--cluster-name', default=None, help=\"Cluster name\", dest=\"cluster_name\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "599: @OsFamilyFuncImpl(OsFamilyImpl.DEFAULT)",
          "600: def init_tproxy_setup_parser_options(parser):",
          "601:   parser.add_option('--ambari-admin-username', default=None, help=\"Ambari administrator username for accessing Ambari's REST API\", dest=\"ambari_admin_username\")",
          "602:   parser.add_option('--ambari-admin-password', default=None, help=\"Ambari administrator password for accessing Ambari's REST API\", dest=\"ambari_admin_password\")",
          "603:   parser.add_option('--tproxy-enabled', default=None, help=\"Indicates whether to enable/disable Trusted Proxy Support\", dest=\"tproxy_enabled\")",
          "604:   parser.add_option('--tproxy-configuration-file-path', default=None,",
          "605:                     help=\"The path where the Trusted Proxy configuration is located. The content is expected to be in JSON format.\" \\",
          "606:                     \"Sample configuration:[{\\\"proxyuser\\\": \\\"knox\\\", \\\"hosts\\\": \\\"host1\\\", \\\"users\\\": \\\"user1, user2\\\", \\\"groups\\\": \\\"group1\\\"}]\",",
          "607:                     dest=\"tproxy_configuration_file_path\"",
          "608:                     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "806:     SETUP_SSO_ACTION: UserActionRestart(setup_sso, options),",
          "807:     INSTALL_MPACK_ACTION: UserAction(install_mpack, options),",
          "808:     UNINSTALL_MPACK_ACTION: UserAction(uninstall_mpack, options),",
          "810:   }",
          "811:   return action_map",
          "",
          "[Removed Lines]",
          "809:     UPGRADE_MPACK_ACTION: UserAction(upgrade_mpack, options)",
          "",
          "[Added Lines]",
          "824:     UPGRADE_MPACK_ACTION: UserAction(upgrade_mpack, options),",
          "825:     SETUP_TPROXY_ACTION: UserAction(setup_trusted_proxy, options)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "838:         UPGRADE_MPACK_ACTION: UserAction(upgrade_mpack, options),",
          "839:         PAM_SETUP_ACTION: UserAction(setup_pam, options),",
          "840:         MIGRATE_LDAP_PAM_ACTION: UserAction(migrate_ldap_pam, options),",
          "842:       }",
          "843:   return action_map",
          "",
          "[Removed Lines]",
          "841:         KERBEROS_SETUP_ACTION: UserAction(setup_kerberos, options)",
          "",
          "[Added Lines]",
          "857:         KERBEROS_SETUP_ACTION: UserAction(setup_kerberos, options),",
          "858:         SETUP_TPROXY_ACTION: UserAction(setup_trusted_proxy, options)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "870:     UPGRADE_MPACK_ACTION: init_upgrade_mpack_parser_options,",
          "871:     PAM_SETUP_ACTION: init_pam_setup_parser_options,",
          "872:     KERBEROS_SETUP_ACTION: init_kerberos_setup_parser_options,",
          "873:   }",
          "874:   parser.add_option(\"-v\", \"--verbose\",",
          "875:                     action=\"store_true\", dest=\"verbose\", default=False,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890:     SETUP_TPROXY_ACTION: init_tproxy_setup_parser_options",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/serverUtils.py||ambari-server/src/main/python/ambari_server/serverUtils.py": [
          "File: ambari-server/src/main/python/ambari_server/serverUtils.py -> ambari-server/src/main/python/ambari_server/serverUtils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   if api_ssl_prop is not None:",
          "295:     ssl_enabled = api_ssl_prop.lower() == \"true\"",
          "",
          "[Removed Lines]",
          "297:   return ssl_enabled",
          "",
          "[Added Lines]",
          "300: def get_value_from_dictionary(properties, key, default_value=None):",
          "301:   return properties[key] if properties and key in properties else default_value",
          "304: def get_boolean_from_dictionary(properties, key, default_value=False):",
          "305:   value = get_value_from_dictionary(properties, key, None)",
          "306:   return 'true' == value.lower() if value else default_value",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/setupActions.py||ambari-server/src/main/python/ambari_server/setupActions.py": [
          "File: ambari-server/src/main/python/ambari_server/setupActions.py -> ambari-server/src/main/python/ambari_server/setupActions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: PAM_SETUP_ACTION = \"setup-pam\"",
          "50: MIGRATE_LDAP_PAM_ACTION = \"migrate-ldap-pam\"",
          "51: KERBEROS_SETUP_ACTION = \"setup-kerberos\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: SETUP_TPROXY_ACTION = \"setup-trusted-proxy\"",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/setupSso.py||ambari-server/src/main/python/ambari_server/setupSso.py": [
          "File: ambari-server/src/main/python/ambari_server/setupSso.py -> ambari-server/src/main/python/ambari_server/setupSso.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from ambari_server.serverConfiguration import get_ambari_properties",
          "28: from ambari_server.serverUtils import is_server_runing, get_ambari_admin_username_password_pair, \\",
          "30: from ambari_server.setupSecurity import REGEX_TRUE_FALSE",
          "31: from ambari_server.userInput import get_validated_string_input, get_YN_input, get_multi_line_input",
          "",
          "[Removed Lines]",
          "29:   get_cluster_name, perform_changes_via_rest_api, get_json_via_rest_api",
          "",
          "[Added Lines]",
          "29:   get_cluster_name, perform_changes_via_rest_api, get_json_via_rest_api, \\",
          "30:   get_value_from_dictionary, get_boolean_from_dictionary",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   return cert_string",
          "",
          "[Removed Lines]",
          "322: def get_value_from_dictionary(properties, key, default_value=None):",
          "323:   return properties[key] if properties and key in properties else default_value",
          "325: def get_boolean_from_dictionary(properties, key, default_value=False):",
          "326:   value = get_value_from_dictionary(properties, key, None)",
          "327:   return 'true' == value.lower() if value else default_value",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/setupTrustedProxy.py||ambari-server/src/main/python/ambari_server/setupTrustedProxy.py": [
          "File: ambari-server/src/main/python/ambari_server/setupTrustedProxy.py -> ambari-server/src/main/python/ambari_server/setupTrustedProxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "3: '''",
          "4: Licensed to the Apache Software Foundation (ASF) under one",
          "5: or more contributor license agreements.  See the NOTICE file",
          "6: distributed with this work for additional information",
          "7: regarding copyright ownership.  The ASF licenses this file",
          "8: to you under the Apache License, Version 2.0 (the",
          "9: \"License\"); you may not use this file except in compliance",
          "10: with the License.  You may obtain a copy of the License at",
          "12:     http://www.apache.org/licenses/LICENSE-2.0",
          "14: Unless required by applicable law or agreed to in writing, software",
          "15: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "16: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "19: '''",
          "21: import ambari_simplejson as json",
          "22: import httplib",
          "23: import os",
          "24: import re",
          "25: import urllib2",
          "27: from ambari_commons.exceptions import FatalException, NonFatalException",
          "28: from ambari_commons.logging_utils import get_silent, print_info_msg",
          "29: from ambari_server.serverConfiguration import get_ambari_properties",
          "30: from ambari_server.serverUtils import is_server_runing, get_ambari_admin_username_password_pair, \\",
          "31:   get_cluster_name, perform_changes_via_rest_api, get_json_via_rest_api, get_value_from_dictionary",
          "32: from ambari_server.setupSecurity import REGEX_TRUE_FALSE",
          "33: from ambari_server.userInput import get_validated_string_input, get_YN_input",
          "36: TPROXY_SUPPORT_ENABLED = \"ambari.tproxy.authentication.enabled\"",
          "37: PROXYUSER_HOSTS = \"ambari.tproxy.proxyuser.{}.hosts\"",
          "38: PROXYUSER_USERS = \"ambari.tproxy.proxyuser.{}.users\"",
          "39: PROXYUSER_GROUPS = \"ambari.tproxy.proxyuser.{}.groups\"",
          "41: TPROXY_CONFIG_API_ENTRYPOINT = 'services/AMBARI/components/AMBARI_SERVER/configurations/tproxy-configuration'",
          "43: REGEX_ANYTHING = \".*\"",
          "44: WILDCARD_FOR_ALL = \"*\"",
          "47: def get_trusted_proxy_properties(ambari_properties, admin_login, admin_password):",
          "48:   print_info_msg(\"Fetching Trusted Proxy configuration from DB\")",
          "50:   try:",
          "51:     response_code, json_data = get_json_via_rest_api(ambari_properties, admin_login, admin_password, TPROXY_CONFIG_API_ENTRYPOINT)",
          "52:   except urllib2.HTTPError as http_error:",
          "53:     if http_error.code == httplib.NOT_FOUND:",
          "54:       # This means that there is no Trusted Proxy configuration in the database yet -> we can not fetch the properties; but this is NOT an error",
          "55:       json_data = None",
          "56:     else:",
          "57:       raise http_error",
          "59:   return json_data.get('Configuration', {}).get('properties', {}) if json_data else {}",
          "62: def populate_tproxy_configuration_property(properties, tproxy_user_name, property_name, question_text_qualifier):",
          "63:   resolved_property_name = property_name.format(tproxy_user_name)",
          "64:   resolved_property_value = get_value_from_dictionary(properties, resolved_property_name, WILDCARD_FOR_ALL)",
          "65:   resolved_property_value = get_validated_string_input(\"Allowed {0} for {1} ({2})? \".format(question_text_qualifier, tproxy_user_name, resolved_property_value), resolved_property_value, REGEX_ANYTHING, \"Invalid input\", False)",
          "66:   properties[resolved_property_name] = resolved_property_value",
          "69: def add_new_trusted_proxy_config(properties):",
          "70:   tproxy_user_name = get_validated_string_input(\"The proxy user's (local) username? \", None, REGEX_ANYTHING, \"Invalid Trusted Proxy User Name\", False, allowEmpty=False)",
          "71:   populate_tproxy_configuration_property(properties, tproxy_user_name, PROXYUSER_HOSTS, \"hosts\")",
          "72:   populate_tproxy_configuration_property(properties, tproxy_user_name, PROXYUSER_USERS, \"users\")",
          "73:   populate_tproxy_configuration_property(properties, tproxy_user_name, PROXYUSER_GROUPS, \"groups\")",
          "74:   return get_YN_input(\"Add another proxy user [y/n] (n)? \", False)",
          "77: def parse_trusted_configuration_file(tproxy_configuration_file_path, properties):",
          "78:   with open(tproxy_configuration_file_path) as tproxy_configuration_file:",
          "79:     tproxy_configurations = json.loads(tproxy_configuration_file.read())",
          "81:   if tproxy_configurations:",
          "82:     for tproxy_configuration in tproxy_configurations:",
          "83:       tproxy_user_name = tproxy_configuration['proxyuser']",
          "84:       properties[PROXYUSER_HOSTS.format(tproxy_user_name)] = tproxy_configuration['hosts']",
          "85:       properties[PROXYUSER_USERS.format(tproxy_user_name)] = tproxy_configuration['users']",
          "86:       properties[PROXYUSER_GROUPS.format(tproxy_user_name)] = tproxy_configuration['groups']",
          "89: def update_tproxy_conf(ambari_properties, tproxy_configuration_properties, admin_login, admin_password):",
          "90:   request_data = {",
          "91:     \"Configuration\": {",
          "92:       \"category\": \"tproxy-configuration\",",
          "93:       \"properties\": {",
          "94:       }",
          "95:     }",
          "96:   }",
          "97:   request_data['Configuration']['properties'] = tproxy_configuration_properties",
          "98:   perform_changes_via_rest_api(ambari_properties, admin_login, admin_password, TPROXY_CONFIG_API_ENTRYPOINT, 'PUT', request_data)",
          "101: def remove_tproxy_conf(ambari_properties, admin_login, admin_password):",
          "102:   perform_changes_via_rest_api(ambari_properties, admin_login, admin_password, TPROXY_CONFIG_API_ENTRYPOINT, 'DELETE')",
          "105: def validate_options(options):",
          "106:   errors = []",
          "107:   if options.tproxy_enabled and not re.match(REGEX_TRUE_FALSE, options.tproxy_enabled):",
          "108:     errors.append(\"--tproxy-enabled should be to either 'true' or 'false'\")",
          "110:   if options.tproxy_configuration_file_path and options.tproxy_configuration_file_path is not None:",
          "111:     if not os.path.isfile(options.tproxy_configuration_file_path):",
          "112:       errors.append(\"--tproxy-configuration-file-path is set to a non-existing file: {}\".format(options.tproxy_configuration_file_path))",
          "114:   if len(errors) > 0:",
          "115:     error_msg = \"The following errors occurred while processing your request: {0}\"",
          "116:     raise FatalException(1, error_msg.format(str(errors)))",
          "119: def setup_trusted_proxy(options):",
          "120:   print_info_msg(\"Setup Trusted Proxy\")",
          "122:   server_status, pid = is_server_runing()",
          "123:   if not server_status:",
          "124:     err = 'Ambari Server is not running.'",
          "125:     raise FatalException(1, err)",
          "127:   if not get_silent():",
          "128:     validate_options(options)",
          "130:     ambari_properties = get_ambari_properties()",
          "132:     admin_login, admin_password = get_ambari_admin_username_password_pair(options)",
          "133:     properties = get_trusted_proxy_properties(ambari_properties, admin_login, admin_password)",
          "135:     if not options.tproxy_enabled:",
          "136:       tproxy_support_enabled = get_value_from_dictionary(properties, TPROXY_SUPPORT_ENABLED)",
          "138:       if tproxy_support_enabled:",
          "139:         if 'true' == tproxy_support_enabled:",
          "140:           tproxy_status = \"enabled\"",
          "141:         else:",
          "142:           tproxy_status = \"disabled\"",
          "143:       else:",
          "144:         tproxy_status = \"not configured\"",
          "145:       print_info_msg(\"\\nTrusted Proxy support is currently %s\\n\" % tproxy_status)",
          "147:       if tproxy_status == \"enabled\":",
          "148:         enable_tproxy = not get_YN_input(\"Do you want to disable Trusted Proxy support [y/n] (n)? \", False)",
          "149:       elif get_YN_input(\"Do you want to configure Trusted Proxy Support [y/n] (y)? \", True):",
          "150:         enable_tproxy = True",
          "151:       else:",
          "152:         return False",
          "153:     else:",
          "154:       enable_tproxy = options.tproxy_enabled == 'true'",
          "156:     if enable_tproxy:",
          "157:       properties[TPROXY_SUPPORT_ENABLED] = \"true\"",
          "158:       if not options.tproxy_configuration_file_path:",
          "159:         add_new_trusted_proxy = add_new_trusted_proxy_config(properties)",
          "160:         while add_new_trusted_proxy:",
          "161:           add_new_trusted_proxy = add_new_trusted_proxy_config(properties)",
          "162:       else:",
          "163:         parse_trusted_configuration_file(options.tproxy_configuration_file_path, properties)",
          "165:       update_tproxy_conf(ambari_properties, properties, admin_login, admin_password)",
          "166:     else:",
          "167:       remove_tproxy_conf(ambari_properties, admin_login, admin_password)",
          "169:   else:",
          "170:     warning = \"setup-trusted-proxy is not enabled in silent mode.\"",
          "171:     raise NonFatalException(warning)",
          "172:   pass",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestSetupTrustedProxy.py||ambari-server/src/test/python/TestSetupTrustedProxy.py": [
          "File: ambari-server/src/test/python/TestSetupTrustedProxy.py -> ambari-server/src/test/python/TestSetupTrustedProxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: '''",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: '''",
          "19: import os",
          "20: import platform",
          "21: import sys",
          "22: import unittest",
          "23: import StringIO",
          "25: from mock.mock import patch, MagicMock",
          "27: from only_for_platform import os_distro_value",
          "28: from ambari_commons import os_utils",
          "29: from urllib2 import HTTPError",
          "31: import shutil",
          "33: # Mock classes for reading from a file",
          "34: class MagicFile(object):",
          "35:   def __init__(self, data):",
          "36:     self.data = data",
          "38:   def read(self):",
          "39:     return self.data",
          "41:   def __exit__(self, exc_type, exc_val, exc_tb):",
          "42:     pass",
          "44:   def __enter__(self):",
          "45:     return self",
          "46: pass",
          "48: project_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)),os.path.normpath(\"../../../../\"))",
          "49: shutil.copyfile(project_dir+\"/ambari-server/conf/unix/ambari.properties\", \"/tmp/ambari.properties\")",
          "51: # We have to use this import HACK because the filename contains a dash",
          "52: _search_file = os_utils.search_file",
          "54: def search_file_proxy(filename, searchpatch, pathsep=os.pathsep):",
          "55:   global _search_file",
          "56:   if \"ambari.properties\" in filename:",
          "57:     return \"/tmp/ambari.properties\"",
          "58:   return _search_file(filename, searchpatch, pathsep)",
          "60: os_utils.search_file = search_file_proxy",
          "62: with patch.object(platform, \"linux_distribution\", return_value = MagicMock(return_value=('Redhat', '7.4', 'Final'))):",
          "63:   with patch(\"os.path.isdir\", return_value = MagicMock(return_value=True)):",
          "64:     with patch(\"os.access\", return_value = MagicMock(return_value=True)):",
          "65:       with patch.object(os_utils, \"parse_log4j_file\", return_value={'ambari.log.dir': '/var/log/ambari-server'}):",
          "66:         with patch(\"platform.linux_distribution\", return_value = os_distro_value):",
          "67:           with patch(\"os.symlink\"):",
          "68:             with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "69:               _ambari_server_ = __import__('ambari-server')",
          "70:               with patch(\"__builtin__.open\"):",
          "71:                 from ambari_commons.exceptions import FatalException, NonFatalException",
          "72:                 from ambari_server.properties import Properties",
          "73:                 from ambari_server.setupTrustedProxy import setup_trusted_proxy, TPROXY_SUPPORT_ENABLED, PROXYUSER_HOSTS, PROXYUSER_USERS, PROXYUSER_GROUPS",
          "75: class TestSetupTrustedProxy(unittest.TestCase):",
          "77:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "78:   def test_tproxy_setup_should_fail_if_server_is_not_running(self, is_server_runing_mock):",
          "79:     out = StringIO.StringIO()",
          "80:     sys.stdout = out",
          "82:     is_server_runing_mock.return_value = (False, 0)",
          "83:     options = self._create_empty_options_mock()",
          "85:     try:",
          "86:       setup_trusted_proxy(options)",
          "87:       self.fail(\"Should fail with non-fatal exception\")",
          "88:     except FatalException as e:",
          "89:       self.assertTrue(\"Ambari Server is not running\" in e.reason)",
          "90:       pass",
          "92:     sys.stdout = sys.__stdout__",
          "93:     pass",
          "96:   @patch(\"ambari_server.setupTrustedProxy.get_silent\")",
          "97:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "98:   def test_silent_mode_is_not_allowed(self, is_server_runing_mock, get_silent_mock):",
          "99:     out = StringIO.StringIO()",
          "100:     sys.stdout = out",
          "102:     is_server_runing_mock.return_value = (True, 0)",
          "103:     get_silent_mock.return_value = True",
          "104:     options = self._create_empty_options_mock()",
          "106:     try:",
          "107:       setup_trusted_proxy(options)",
          "108:       self.fail(\"Should fail with fatal exception\")",
          "109:     except NonFatalException as e:",
          "110:       self.assertTrue(\"setup-trusted-proxy is not enabled in silent mode.\" in e.reason)",
          "111:       pass",
          "113:     sys.stdout = sys.__stdout__",
          "114:     pass",
          "117:   @patch(\"ambari_server.setupTrustedProxy.get_silent\")",
          "118:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "119:   def test_invalid_tproxy_enabled_cli_option_should_result_in_error(self, is_server_runing_mock, get_silent_mock):",
          "120:     out = StringIO.StringIO()",
          "121:     sys.stdout = out",
          "123:     is_server_runing_mock.return_value = (True, 0)",
          "124:     get_silent_mock.return_value = False",
          "125:     options = self._create_empty_options_mock()",
          "126:     options.tproxy_enabled = 'not_true_or_false'",
          "128:     try:",
          "129:       setup_trusted_proxy(options)",
          "130:       self.fail(\"Should fail with fatal exception\")",
          "131:     except FatalException as e:",
          "132:       self.assertTrue(\"--tproxy-enabled should be to either 'true' or 'false'\" in e.reason)",
          "133:       pass",
          "135:     sys.stdout = sys.__stdout__",
          "136:     pass",
          "139:   @patch(\"ambari_server.setupTrustedProxy.perform_changes_via_rest_api\")",
          "140:   @patch(\"ambari_server.setupTrustedProxy.get_YN_input\")",
          "141:   @patch(\"ambari_server.setupTrustedProxy.get_validated_string_input\")",
          "142:   @patch(\"ambari_server.setupTrustedProxy.get_ambari_properties\")",
          "143:   @patch(\"ambari_server.setupTrustedProxy.get_silent\")",
          "144:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "145:   @patch(\"ambari_server.setupTrustedProxy.get_json_via_rest_api\")",
          "146:   def test_tproxy_is_enabled_for_two_proxy_users(self, get_json_via_rest_api_mock, is_server_runing_mock, get_silent_mock,",
          "147:                                                 get_ambari_properties_mock, get_validated_string_input_mock, get_YN_input_mock, perform_changes_via_rest_api_mock):",
          "148:     out = StringIO.StringIO()",
          "149:     sys.stdout = out",
          "151:     get_json_via_rest_api_mock.return_value = (200, {})",
          "153:     is_server_runing_mock.return_value = (True, 0)",
          "154:     get_silent_mock.return_value = False",
          "155:     get_ambari_properties_mock.return_value = Properties()",
          "157:     user_name1 = 'knox'",
          "158:     hosts1 = 'knox_hosts'",
          "159:     users1 = 'knox_users'",
          "160:     groups1 = 'knox_groups'",
          "162:     user_name2 = 'admin'",
          "163:     hosts2 = 'admin_hosts'",
          "164:     users2 = 'admin_users'",
          "165:     groups2 = 'admin_groups'",
          "166:     get_validated_string_input_mock.side_effect = [user_name1, hosts1, users1, groups1, user_name2, hosts2, users2, groups2]",
          "168:     get_YN_input_mock.side_effect = [True, False] #answer 'True' for the first time when asking for a new proxy user addition and then 'False' (indicating we do not want to add more proxy users)",
          "170:     options = self._create_empty_options_mock()",
          "171:     options.tproxy_enabled = 'true'",
          "173:     setup_trusted_proxy(options)",
          "175:     self.assertTrue(perform_changes_via_rest_api_mock.called)",
          "176:     requestCall = perform_changes_via_rest_api_mock.call_args_list[0]",
          "177:     args, kwargs = requestCall",
          "178:     requestData = args[5]",
          "179:     self.assertTrue(isinstance(requestData, dict))",
          "180:     tproxyProperties = requestData['Configuration']['properties']",
          "181:     self.assertEqual(tproxyProperties[TPROXY_SUPPORT_ENABLED], 'true')",
          "183:     self.assertEqual(tproxyProperties[PROXYUSER_HOSTS.format(user_name1)], hosts1)",
          "184:     self.assertEqual(tproxyProperties[PROXYUSER_USERS.format(user_name1)], users1)",
          "185:     self.assertEqual(tproxyProperties[PROXYUSER_GROUPS.format(user_name1)], groups1)",
          "187:     self.assertEqual(tproxyProperties[PROXYUSER_HOSTS.format(user_name2)], hosts2)",
          "188:     self.assertEqual(tproxyProperties[PROXYUSER_USERS.format(user_name2)], users2)",
          "189:     self.assertEqual(tproxyProperties[PROXYUSER_GROUPS.format(user_name2)], groups2)",
          "191:     sys.stdout = sys.__stdout__",
          "192:     pass",
          "195:   @patch(\"ambari_server.setupTrustedProxy.perform_changes_via_rest_api\")",
          "196:   @patch(\"ambari_server.setupTrustedProxy.get_ambari_properties\")",
          "197:   @patch(\"ambari_server.setupTrustedProxy.get_silent\")",
          "198:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "199:   @patch(\"ambari_server.setupTrustedProxy.get_json_via_rest_api\")",
          "200:   def test_disabling_tproxy_support(self, get_json_via_rest_api_mock, is_server_runing_mock, get_silent_mock, get_ambari_properties_mock, perform_changes_via_rest_api_mock):",
          "201:     out = StringIO.StringIO()",
          "202:     sys.stdout = out",
          "204:     get_json_via_rest_api_mock.return_value = (200, {})",
          "206:     is_server_runing_mock.return_value = (True, 0)",
          "207:     get_silent_mock.return_value = False",
          "209:     properties = Properties()",
          "210:     get_ambari_properties_mock.return_value = properties",
          "212:     options = self._create_empty_options_mock()",
          "213:     options.tproxy_enabled = 'false'",
          "215:     setup_trusted_proxy(options)",
          "217:     self.assertTrue(perform_changes_via_rest_api_mock.called)",
          "218:     requestCall = perform_changes_via_rest_api_mock.call_args_list[0]",
          "219:     args, kwargs = requestCall",
          "220:     requestMethod = args[4]",
          "221:     self.assertTrue(isinstance(requestMethod, str))",
          "222:     self.assertEqual(requestMethod, \"DELETE\")",
          "224:     sys.stdout = sys.__stdout__",
          "225:     pass",
          "227:   @patch(\"ambari_server.setupTrustedProxy.get_silent\")",
          "228:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "229:   @patch(\"os.path.isfile\")",
          "230:   def test_enable_tproxy_support_using_configuration_file_path_from_command_line_should_fail_if_file_does_not_exist(self, isfile_mock, is_server_runing_mock, get_silent_mock):",
          "231:     out = StringIO.StringIO()",
          "232:     sys.stdout = out",
          "234:     is_server_runing_mock.return_value = (True, 0)",
          "235:     get_silent_mock.return_value = False",
          "236:     isfile_mock.return_value = False",
          "238:     options = self._create_empty_options_mock()",
          "239:     options.tproxy_enabled = 'true'",
          "240:     options.tproxy_configuration_file_path = 'samplePath'",
          "242:     try:",
          "243:       setup_trusted_proxy(options)",
          "244:       self.fail(\"Should fail with fatal exception\")",
          "245:     except FatalException as e:",
          "246:       self.assertTrue(\"--tproxy-configuration-file-path is set to a non-existing file\" in e.reason)",
          "247:       pass",
          "249:     sys.stdout = sys.__stdout__",
          "250:     pass",
          "253:   @patch(\"ambari_server.setupTrustedProxy.perform_changes_via_rest_api\")",
          "254:   @patch(\"ambari_server.setupTrustedProxy.get_ambari_properties\")",
          "255:   @patch(\"ambari_server.setupTrustedProxy.get_silent\")",
          "256:   @patch(\"ambari_server.setupTrustedProxy.is_server_runing\")",
          "257:   @patch(\"ambari_server.setupTrustedProxy.get_json_via_rest_api\")",
          "258:   @patch(\"os.path.isfile\")",
          "259:   @patch('__builtin__.open')",
          "260:   def test_enable_tproxy_support_using_configuration_file_path_from_command_line(self, open_mock, isfile_mock, get_json_via_rest_api_mock, is_server_runing_mock, get_silent_mock, get_ambari_properties_mock, perform_changes_via_rest_api_mock):",
          "261:     out = StringIO.StringIO()",
          "262:     sys.stdout = out",
          "264:     get_json_via_rest_api_mock.return_value = (200, {})",
          "266:     is_server_runing_mock.return_value = (True, 0)",
          "267:     get_silent_mock.return_value = False",
          "269:     properties = Properties()",
          "270:     get_ambari_properties_mock.return_value = properties",
          "272:     isfile_mock.return_value = True",
          "274:     tproxy_configurations = \"[\"\\",
          "275:                             \"  {\"\\",
          "276:                             \"    \\\"proxyuser\\\" : \\\"knox\\\",\" \\",
          "277:                             \"    \\\"hosts\\\"     : \\\"host1\\\",\" \\",
          "278:                             \"    \\\"users\\\"     : \\\"user1\\\",\" \\",
          "279:                             \"    \\\"groups\\\"    : \\\"group1\\\"\" \\",
          "280:                             \"  },\" \\",
          "281:                             \"  {\"\\",
          "282:                             \"    \\\"proxyuser\\\": \\\"admin\\\",\" \\",
          "283:                             \"    \\\"hosts\\\"    : \\\"host2\\\",\" \\",
          "284:                             \"    \\\"users\\\"    : \\\"user2\\\",\" \\",
          "285:                             \"    \\\"groups\\\"   : \\\"group2\\\"\" \\",
          "286:                             \"  }\" \\",
          "287:                             \"]\"",
          "288:     mock_file = MagicFile(tproxy_configurations)",
          "289:     open_mock.side_effect = [mock_file]",
          "291:     options = self._create_empty_options_mock()",
          "292:     options.tproxy_enabled = 'true'",
          "293:     options.tproxy_configuration_file_path = 'samplePath'",
          "295:     setup_trusted_proxy(options)",
          "297:     self.assertTrue(perform_changes_via_rest_api_mock.called)",
          "298:     requestCall = perform_changes_via_rest_api_mock.call_args_list[0]",
          "299:     args, kwargs = requestCall",
          "300:     requestData = args[5]",
          "301:     self.assertTrue(isinstance(requestData, dict))",
          "302:     tproxyProperties = requestData['Configuration']['properties']",
          "303:     self.assertEqual(tproxyProperties[TPROXY_SUPPORT_ENABLED], 'true')",
          "305:     user_name1=\"knox\"",
          "306:     self.assertEqual(tproxyProperties[PROXYUSER_HOSTS.format(user_name1)], \"host1\")",
          "307:     self.assertEqual(tproxyProperties[PROXYUSER_USERS.format(user_name1)], \"user1\")",
          "308:     self.assertEqual(tproxyProperties[PROXYUSER_GROUPS.format(user_name1)], \"group1\")",
          "310:     user_name2=\"admin\"",
          "311:     self.assertEqual(tproxyProperties[PROXYUSER_HOSTS.format(user_name2)], \"host2\")",
          "312:     self.assertEqual(tproxyProperties[PROXYUSER_USERS.format(user_name2)], \"user2\")",
          "313:     self.assertEqual(tproxyProperties[PROXYUSER_GROUPS.format(user_name2)], \"group2\")",
          "315:     sys.stdout = sys.__stdout__",
          "316:     pass",
          "319:   def _create_empty_options_mock(self):",
          "320:     options = MagicMock()",
          "321:     options.tproxy_enabled = None",
          "322:     options.tproxy_configuration_file_path = None",
          "323:     return options",
          "",
          "---------------"
        ]
      }
    }
  ]
}