{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a659ade9a0ec831137d1ba415a76cc467c6e0f01",
      "candidate_info": {
        "commit_hash": "a659ade9a0ec831137d1ba415a76cc467c6e0f01",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a659ade9a0ec831137d1ba415a76cc467c6e0f01",
        "files": [
          "maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java"
        ],
        "message": "[MNG-6827] Replace deprecated StringUtils#defaultString() from Plexus Utils\n\nThis closes #302",
        "before_after_code_files": [
          "maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java||maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java||maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java||maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java": [
          "File: maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java -> maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import java.util.Iterator;",
          "45: import java.util.List;",
          "49: import org.codehaus.plexus.util.FileUtils;",
          "51: public class TestFileManager",
          "52: {",
          "",
          "[Removed Lines]",
          "47: import junit.framework.Assert;",
          "",
          "[Added Lines]",
          "48: import org.junit.Assert;",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.LinkedHashMap;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.maven.RepositoryUtils;",
          "28: import org.apache.maven.model.Dependency;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:                 {",
          "259:                     final String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );",
          "260:                     buffer.append( \" (scope managed from \" );",
          "262:                     buffer.append( ')' );",
          "263:                 }",
          "",
          "[Removed Lines]",
          "261:                     buffer.append( StringUtils.defaultString( premanagedScope, \"default\" ) );",
          "",
          "[Added Lines]",
          "262:                     buffer.append( Objects.toString( premanagedScope, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:                 {",
          "267:                     final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );",
          "268:                     buffer.append( \" (version managed from \" );",
          "270:                     buffer.append( ')' );",
          "271:                 }",
          "",
          "[Removed Lines]",
          "269:                     buffer.append( StringUtils.defaultString( premanagedVersion, \"default\" ) );",
          "",
          "[Added Lines]",
          "270:                     buffer.append( Objects.toString( premanagedVersion, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:                 {",
          "275:                     final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );",
          "276:                     buffer.append( \" (optionality managed from \" );",
          "278:                     buffer.append( ')' );",
          "279:                 }",
          "",
          "[Removed Lines]",
          "277:                     buffer.append( StringUtils.defaultString( premanagedOptional, \"default\" ) );",
          "",
          "[Added Lines]",
          "278:                     buffer.append( Objects.toString( premanagedOptional, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285:                         DependencyManagerUtils.getPremanagedExclusions( node );",
          "287:                     buffer.append( \" (exclusions managed from \" );",
          "289:                     buffer.append( ')' );",
          "290:                 }",
          "",
          "[Removed Lines]",
          "288:                     buffer.append( StringUtils.defaultString( premanagedExclusions, \"default\" ) );",
          "",
          "[Added Lines]",
          "289:                     buffer.append( Objects.toString( premanagedExclusions, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296:                         DependencyManagerUtils.getPremanagedProperties( node );",
          "298:                     buffer.append( \" (properties managed from \" );",
          "300:                     buffer.append( ')' );",
          "301:                 }",
          "302:             }",
          "",
          "[Removed Lines]",
          "299:                     buffer.append( StringUtils.defaultString( premanagedProperties, \"default\" ) );",
          "",
          "[Added Lines]",
          "300:                     buffer.append( Objects.toString( premanagedProperties, \"default\" ) );",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.HashMap;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.maven.RepositoryUtils;",
          "28: import org.apache.maven.artifact.Artifact;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:                 {",
          "270:                     final String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );",
          "271:                     buffer.append( \" (scope managed from \" );",
          "273:                     buffer.append( ')' );",
          "274:                 }",
          "",
          "[Removed Lines]",
          "272:                     buffer.append( StringUtils.defaultString( premanagedScope, \"default\" ) );",
          "",
          "[Added Lines]",
          "273:                     buffer.append( Objects.toString( premanagedScope, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:                 {",
          "278:                     final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );",
          "279:                     buffer.append( \" (version managed from \" );",
          "281:                     buffer.append( ')' );",
          "282:                 }",
          "",
          "[Removed Lines]",
          "280:                     buffer.append( StringUtils.defaultString( premanagedVersion, \"default\" ) );",
          "",
          "[Added Lines]",
          "281:                     buffer.append( Objects.toString( premanagedVersion, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:                 {",
          "286:                     final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );",
          "287:                     buffer.append( \" (optionality managed from \" );",
          "289:                     buffer.append( ')' );",
          "290:                 }",
          "",
          "[Removed Lines]",
          "288:                     buffer.append( StringUtils.defaultString( premanagedOptional, \"default\" ) );",
          "",
          "[Added Lines]",
          "289:                     buffer.append( Objects.toString( premanagedOptional, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:                         DependencyManagerUtils.getPremanagedExclusions( node );",
          "298:                     buffer.append( \" (exclusions managed from \" );",
          "300:                     buffer.append( ')' );",
          "301:                 }",
          "",
          "[Removed Lines]",
          "299:                     buffer.append( StringUtils.defaultString( premanagedExclusions, \"default\" ) );",
          "",
          "[Added Lines]",
          "300:                     buffer.append( Objects.toString( premanagedExclusions, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307:                         DependencyManagerUtils.getPremanagedProperties( node );",
          "309:                     buffer.append( \" (properties managed from \" );",
          "311:                     buffer.append( ')' );",
          "312:                 }",
          "313:             }",
          "",
          "[Removed Lines]",
          "310:                     buffer.append( StringUtils.defaultString( premanagedProperties, \"default\" ) );",
          "",
          "[Added Lines]",
          "311:                     buffer.append( Objects.toString( premanagedProperties, \"default\" ) );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java||maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java -> maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import java.util.HashSet;",
          "54: import java.util.List;",
          "55: import java.util.Map;",
          "56: import java.util.Set;",
          "57: import java.util.regex.Matcher;",
          "58: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:                 if ( equals( existing.getVersion(), dependency.getVersion() ) )",
          "528:                 {",
          "529:                     msg = \"duplicate declaration of version \"",
          "531:                 }",
          "532:                 else",
          "533:                 {",
          "536:                 }",
          "538:                 addViolation( problems, errOn31, Version.V20, prefix + prefix2 + \"(groupId:artifactId:type:classifier)\",",
          "",
          "[Removed Lines]",
          "530:                         + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );",
          "534:                     msg = \"version \" + StringUtils.defaultString( existing.getVersion(), \"(?)\" ) + \" vs \"",
          "535:                         + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );",
          "",
          "[Added Lines]",
          "531:                         + Objects.toString( dependency.getVersion(), \"(?)\" );",
          "535:                     msg = \"version \" + Objects.toString( existing.getVersion(), \"(?)\" ) + \" vs \"",
          "536:                         + Objects.toString( dependency.getVersion(), \"(?)\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a6bbb8301717d386e6588a7ea32e3e2451c7060",
      "candidate_info": {
        "commit_hash": "0a6bbb8301717d386e6588a7ea32e3e2451c7060",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0a6bbb8301717d386e6588a7ea32e3e2451c7060",
        "files": [
          "maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java"
        ],
        "message": "[MNG-7235] Speed improvements when calculating the sorted project graph\n\nThis closes #530",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java||maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java||maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java": [
          "File: maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java -> maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.HashSet;",
          "26: import java.util.List;",
          "27: import java.util.Objects;",
          "28: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Comparator;",
          "26: import java.util.HashMap;",
          "29: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     implements ProjectDependencyGraph",
          "43: {",
          "",
          "[Removed Lines]",
          "45:     private ProjectSorter sorter;",
          "47:     private List<MavenProject> allProjects;",
          "",
          "[Added Lines]",
          "48:     private final ProjectSorter sorter;",
          "50:     private final List<MavenProject> allProjects;",
          "52:     private final Map<MavenProject, Integer> order;",
          "54:     private final Map<String, MavenProject> projects;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         super();",
          "60:         this.allProjects = Collections.unmodifiableList( new ArrayList<>( projects ) );",
          "61:         this.sorter = new ProjectSorter( projects );",
          "62:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:         List<MavenProject> sorted = this.sorter.getSortedProjects();",
          "70:         this.order = new HashMap<>( sorted.size() );",
          "71:         this.projects = new HashMap<>( sorted.size() );",
          "72:         int index = 0;",
          "73:         for ( MavenProject project : sorted )",
          "74:         {",
          "75:             String id = ProjectSorter.getId( project );",
          "76:             this.projects.put( id, project );",
          "77:             this.order.put( project, index++ );",
          "78:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:         super();",
          "79:         this.allProjects = Collections.unmodifiableList( new ArrayList<>( allProjects ) );",
          "80:         this.sorter = new ProjectSorter( projects );",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:         List<MavenProject> sorted = this.sorter.getSortedProjects();",
          "99:         this.order = new HashMap<>( sorted.size() );",
          "100:         this.projects = new HashMap<>( sorted.size() );",
          "101:         int index = 0;",
          "102:         for ( MavenProject project : sorted )",
          "103:         {",
          "104:             String id = ProjectSorter.getId( project );",
          "105:             this.projects.put( id, project );",
          "106:             this.order.put( project, index++ );",
          "107:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:     private List<MavenProject> getSortedProjects( Set<String> projectIds )",
          "141:     {",
          "142:         List<MavenProject> result = new ArrayList<>( projectIds.size() );",
          "145:         {",
          "150:         }",
          "152:         return result;",
          "153:     }",
          "",
          "[Removed Lines]",
          "144:         for ( MavenProject mavenProject : sorter.getSortedProjects() )",
          "146:             if ( projectIds.contains( ProjectSorter.getId( mavenProject ) ) )",
          "147:             {",
          "148:                 result.add( mavenProject );",
          "149:             }",
          "",
          "[Added Lines]",
          "170:         for ( String projectId : projectIds )",
          "172:             result.add( projects.get( projectId ) );",
          "175:         Collections.sort( result, new MavenProjectComparator() );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:         return sorter.getSortedProjects().toString();",
          "159:     }",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     private class MavenProjectComparator implements Comparator<MavenProject>",
          "187:     {",
          "188:         @Override",
          "189:         public int compare( MavenProject o1, MavenProject o2 )",
          "190:         {",
          "191:             return order.get( o1 ) - order.get( o2 );",
          "192:         }",
          "193:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66a43813770cd7dee9eb1ed0372e3f784ba0c541",
      "candidate_info": {
        "commit_hash": "66a43813770cd7dee9eb1ed0372e3f784ba0c541",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/66a43813770cd7dee9eb1ed0372e3f784ba0c541",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java"
        ],
        "message": "[MNG-5868] No duplicate artifacts in attached artifacts if attached artifacts already contains the artifact remove it and add the new one\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java||maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: import org.codehaus.plexus.util.xml.Xpp3Dom;",
          "73: import org.eclipse.aether.graph.DependencyFilter;",
          "74: import org.eclipse.aether.repository.RemoteRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: import org.slf4j.Logger;",
          "76: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: public class MavenProject",
          "91:     implements Cloneable",
          "92: {",
          "93:     public static final String EMPTY_PROJECT_GROUP_ID = \"unknown\";",
          "95:     public static final String EMPTY_PROJECT_ARTIFACT_ID = \"empty-project\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     private static final Logger LOGGER = LoggerFactory.getLogger( MavenProject.class );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     private List<RemoteRepository> remotePluginRepositories;",
          "127:     private MavenProject executionProject;",
          "",
          "[Removed Lines]",
          "125:     private List<Artifact> attachedArtifacts;",
          "",
          "[Added Lines]",
          "130:     private List<Artifact> attachedArtifacts = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "926:     public void addAttachedArtifact( Artifact artifact )",
          "927:         throws DuplicateArtifactAttachmentException",
          "928:     {",
          "930:     }",
          "932:     public List<Artifact> getAttachedArtifacts()",
          "",
          "[Removed Lines]",
          "929:         getAttachedArtifacts().add( artifact );",
          "",
          "[Added Lines]",
          "936:         int index = attachedArtifacts.indexOf( artifact );",
          "937:         if ( index >= 0 )",
          "938:         {",
          "939:             LOGGER.warn( \"artifact {} already attached, replace previous instance\", artifact );",
          "940:             attachedArtifacts.set( index, artifact );",
          "941:         }",
          "942:         else",
          "943:         {",
          "944:             attachedArtifacts.add( artifact );",
          "945:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "935:         {",
          "936:             attachedArtifacts = new ArrayList<>();",
          "937:         }",
          "939:     }",
          "941:     public Xpp3Dom getGoalConfiguration( String pluginGroupId, String pluginArtifactId, String executionId,",
          "",
          "[Removed Lines]",
          "938:         return attachedArtifacts;",
          "",
          "[Added Lines]",
          "954:         return Collections.unmodifiableList( attachedArtifacts );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java||maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java -> maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.apache.maven;",
          "3: import org.apache.maven.execution.MavenExecutionRequest;",
          "4: import org.apache.maven.execution.MavenExecutionResult;",
          "6: import static java.util.Arrays.asList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.apache.maven.artifact.Artifact;",
          "4: import org.apache.maven.artifact.DefaultArtifact;",
          "7: import org.apache.maven.project.MavenProject;",
          "8: import org.apache.maven.project.MavenProjectHelper;",
          "10: import java.io.File;",
          "11: import java.nio.file.Files;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     public void testThatErrorDuringProjectDependencyGraphCreationAreStored()",
          "29:             throws Exception",
          "",
          "[Removed Lines]",
          "26: public class DefaultMavenTest extends AbstractCoreMavenComponentTestCase{",
          "",
          "[Added Lines]",
          "33: public class DefaultMavenTest",
          "34:     extends AbstractCoreMavenComponentTestCase",
          "35: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         return \"src/test/projects/default-maven\";",
          "43:     }",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     public void testMavenProjectNoDuplicateArtifacts()",
          "56:         throws Exception",
          "57:     {",
          "58:         MavenProjectHelper mavenProjectHelper = lookup( MavenProjectHelper.class );",
          "59:         MavenProject mavenProject = new MavenProject();",
          "60:         mavenProject.setArtifact( new DefaultArtifact( \"g\", \"a\", \"1.0\", Artifact.SCOPE_TEST, \"jar\", \"\", null ) );",
          "61:         File artifactFile = Files.createTempFile( \"foo\", \"tmp\").toFile();",
          "62:         try",
          "63:         {",
          "64:             mavenProjectHelper.attachArtifact( mavenProject, \"sources\", artifactFile );",
          "65:             assertEquals( 1, mavenProject.getAttachedArtifacts().size() );",
          "66:             mavenProjectHelper.attachArtifact( mavenProject, \"sources\", artifactFile );",
          "67:             assertEquals( 1, mavenProject.getAttachedArtifacts().size() );",
          "68:         } finally",
          "69:         {",
          "70:             Files.deleteIfExists( artifactFile.toPath() );",
          "71:         }",
          "72:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d79485ff23c9017d47424ff24da1d6dd3c414a60",
      "candidate_info": {
        "commit_hash": "d79485ff23c9017d47424ff24da1d6dd3c414a60",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d79485ff23c9017d47424ff24da1d6dd3c414a60",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-pom-parent-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-pom-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-project-parent-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-project-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-revision-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-parent-version-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-parent-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-version-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-revision-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-revision-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-version-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-version-expression/pom.xml",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "[MNG-6727] Using version range in parent and CI Friendly Version fails",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     {",
          "303:         File f1 =",
          "304:             getTestFile(",
          "307:         try",
          "308:         {",
          "",
          "[Removed Lines]",
          "301:     public void testBuildParentVersionRangeLocallyWithChildVersionExpression() throws Exception",
          "305:                 \"src/test/resources/projects/parent-version-range-local-child-version-expression/child/pom.xml\" );",
          "",
          "[Added Lines]",
          "301:     public void testBuildParentVersionRangeLocallyWithChildProjectVersionExpression() throws Exception",
          "305:                 \"src/test/resources/projects/parent-version-range-local-child-project-version-expression/child/pom.xml\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "316:         }",
          "317:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:     public void testBuildParentVersionRangeLocallyWithChildProjectParentVersionExpression() throws Exception",
          "325:     {",
          "326:         File f1 =",
          "327:             getTestFile(",
          "328:                 \"src/test/resources/projects/parent-version-range-local-child-project-parent-version-expression/child/pom.xml\" );",
          "330:         try",
          "331:         {",
          "332:             getProject( f1 );",
          "333:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "334:         }",
          "335:         catch ( final ProjectBuildingException e )",
          "336:         {",
          "337:             assertNotNull( e.getMessage() );",
          "338:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "339:         }",
          "340:     }",
          "347:     public void testBuildParentVersionRangeLocallyWithChildRevisionExpression() throws Exception",
          "348:     {",
          "349:         File f1 =",
          "350:             getTestFile(",
          "351:                 \"src/test/resources/projects/parent-version-range-local-child-revision-expression/child/pom.xml\" );",
          "353:         MavenProject mp =  this.getProjectFromRemoteRepository( f1 );",
          "355:         assertEquals(\"1.0-SNAPSHOT\", mp.getVersion());",
          "357:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:     {",
          "368:         File f1 =",
          "369:             getTestFile(",
          "372:         try",
          "373:         {",
          "",
          "[Removed Lines]",
          "366:     public void testBuildParentVersionRangeExternallyWithChildVersionExpression() throws Exception",
          "370:                 \"src/test/resources/projects/parent-version-range-external-child-version-expression/pom.xml\" );",
          "",
          "[Added Lines]",
          "406:     public void testBuildParentVersionRangeExternallyWithChildProjectVersionExpression() throws Exception",
          "410:                 \"src/test/resources/projects/parent-version-range-external-child-project-version-expression/pom.xml\" );",
          "412:         try",
          "413:         {",
          "414:             this.getProjectFromRemoteRepository( f1 );",
          "415:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "416:         }",
          "417:         catch ( final ProjectBuildingException e )",
          "418:         {",
          "419:             assertNotNull( e.getMessage() );",
          "420:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "421:         }",
          "422:     }",
          "429:     public void testBuildParentVersionRangeExternallyWithChildPomVersionExpression() throws Exception",
          "430:     {",
          "431:         File f1 =",
          "432:                 getTestFile(",
          "433:                         \"src/test/resources/projects/parent-version-range-external-child-pom-version-expression/pom.xml\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "381:         }",
          "382:     }",
          "384: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     public void testBuildParentVersionRangeExternallyWithChildPomParentVersionExpression() throws Exception",
          "453:     {",
          "454:         File f1 =",
          "455:                 getTestFile(",
          "456:                         \"src/test/resources/projects/parent-version-range-external-child-pom-parent-version-expression/pom.xml\" );",
          "458:         try",
          "459:         {",
          "460:             this.getProjectFromRemoteRepository( f1 );",
          "461:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "462:         }",
          "463:         catch ( final ProjectBuildingException e )",
          "464:         {",
          "465:             assertNotNull( e.getMessage() );",
          "466:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "467:         }",
          "468:     }",
          "475:     public void testBuildParentVersionRangeExternallyWithChildProjectParentVersionExpression() throws Exception",
          "476:     {",
          "477:         File f1 =",
          "478:             getTestFile(",
          "479:                 \"src/test/resources/projects/parent-version-range-external-child-project-parent-version-expression/pom.xml\" );",
          "481:         try",
          "482:         {",
          "483:             this.getProjectFromRemoteRepository( f1 );",
          "484:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "485:         }",
          "486:         catch ( final ProjectBuildingException e )",
          "487:         {",
          "488:             assertNotNull( e.getMessage() );",
          "489:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "490:         }",
          "491:     }",
          "498:     public void testBuildParentVersionRangeExternallyWithChildRevisionExpression() throws Exception",
          "499:     {",
          "500:         File f1 =",
          "501:             getTestFile(",
          "502:                 \"src/test/resources/projects/parent-version-range-external-child-revision-expression/pom.xml\" );",
          "505:         MavenProject mp =  this.getProjectFromRemoteRepository( f1 );",
          "507:         assertEquals(\"1.0-SNAPSHOT\", mp.getVersion());",
          "510:     }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1057:                 }",
          "1061:                 {",
          "1063:                     problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1060:                 if ( childModel.getVersion() == null )",
          "",
          "[Added Lines]",
          "1060:                 String rawChildModelVersion = childModel.getVersion();",
          "1062:                 if ( rawChildModelVersion == null )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:                 }",
          "1067:                 else",
          "1068:                 {",
          "1070:                     {",
          "1072:                         problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1069:                     if ( childModel.getVersion().contains( \"${\" ) )",
          "",
          "[Added Lines]",
          "1071:                     if ( rawChildVersionReferencesParent( rawChildModelVersion ) )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1099:         return parentData;",
          "1100:     }",
          "1102:     private ModelSource getParentPomFile( Model childModel, ModelSource source )",
          "1103:     {",
          "1104:         if ( !( source instanceof ModelSource2 ) )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:     private boolean rawChildVersionReferencesParent( String rawChildModelVersion )",
          "1105:     {",
          "1106:         return rawChildModelVersion.equals( \"${pom.version}\" )",
          "1107:                 || rawChildModelVersion.equals( \"${project.version}\" )",
          "1108:                 || rawChildModelVersion.equals( \"${pom.parent.version}\" )",
          "1109:                 || rawChildModelVersion.equals( \"${project.parent.version}\" );",
          "1110:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1188:         if ( !parent.getVersion().equals( version ) )",
          "1189:         {",
          "1191:             {",
          "1193:                 problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1190:             if ( childModel.getVersion() == null )",
          "",
          "[Added Lines]",
          "1200:             String rawChildModelVersion = childModel.getVersion();",
          "1202:             if ( rawChildModelVersion == null )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1196:             }",
          "1197:             else",
          "1198:             {",
          "1200:                 {",
          "1202:                     problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1199:                 if ( childModel.getVersion().contains( \"${\" ) )",
          "",
          "[Added Lines]",
          "1211:                 if ( rawChildVersionReferencesParent( rawChildModelVersion )  )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5acd3ec6095ea2ff50191576c33685c1d038c1f",
      "candidate_info": {
        "commit_hash": "a5acd3ec6095ea2ff50191576c33685c1d038c1f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a5acd3ec6095ea2ff50191576c33685c1d038c1f",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java"
        ],
        "message": "[MNG-7395] Support interpolation in extensions.xml\n\nThis adds support for property interpolation in extensions.xml to allow\nadvanced use cases where one wants to contribute certain things via the\ncommandline.\n\nThis closes #673",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import org.codehaus.plexus.PlexusContainer;",
          "41: import org.codehaus.plexus.classworlds.ClassWorld;",
          "42: import org.codehaus.plexus.classworlds.realm.ClassRealm;",
          "43: import org.codehaus.plexus.logging.Logger;",
          "44: import org.eclipse.aether.RepositorySystemSession;",
          "45: import org.eclipse.aether.artifact.Artifact;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.codehaus.plexus.interpolation.InterpolationException;",
          "44: import org.codehaus.plexus.interpolation.Interpolator;",
          "45: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "46: import org.codehaus.plexus.interpolation.StringSearchInterpolator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     {",
          "84:         RepositorySystemSession repoSession = repositorySystemSessionFactory.newRepositorySession( request );",
          "85:         List<RemoteRepository> repositories = RepositoryUtils.toRepos( request.getPluginArtifactRepositories() );",
          "88:     }",
          "90:     private List<CoreExtensionEntry> resolveCoreExtensions( RepositorySystemSession repoSession,",
          "91:                                                             List<RemoteRepository> repositories,",
          "92:                                                             Set<String> providedArtifacts,",
          "94:         throws Exception",
          "95:     {",
          "96:         List<CoreExtensionEntry> extensions = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "87:         return resolveCoreExtensions( repoSession, repositories, providedArtifacts, extensions );",
          "93:                                                             List<CoreExtension> configuration )",
          "",
          "[Added Lines]",
          "90:         Interpolator interpolator = createInterpolator( request );",
          "92:         return resolveCoreExtensions( repoSession, repositories, providedArtifacts, extensions, interpolator );",
          "98:                                                             List<CoreExtension> configuration,",
          "99:                                                             Interpolator interpolator )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         for ( CoreExtension extension : configuration )",
          "101:         {",
          "103:             if ( !artifacts.isEmpty() )",
          "104:             {",
          "105:                 extensions.add( createExtension( extension, artifacts ) );",
          "",
          "[Removed Lines]",
          "102:             List<Artifact> artifacts = resolveExtension( extension, repoSession, repositories, dependencyFilter );",
          "",
          "[Added Lines]",
          "108:             List<Artifact> artifacts = resolveExtension( extension, repoSession, repositories,",
          "109:                                                          dependencyFilter, interpolator );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:     }",
          "129:     private List<Artifact> resolveExtension( CoreExtension extension, RepositorySystemSession repoSession,",
          "131:         throws ExtensionResolutionException",
          "132:     {",
          "133:         try",
          "134:         {",
          "138:             Plugin plugin = new Plugin();",
          "143:             DependencyNode root = pluginDependenciesResolver",
          "144:                     .resolveCoreExtension( plugin, dependencyFilter, repositories, repoSession );",
          "",
          "[Removed Lines]",
          "130:                                              List<RemoteRepository> repositories, DependencyFilter dependencyFilter )",
          "139:             plugin.setGroupId( extension.getGroupId() );",
          "140:             plugin.setArtifactId( extension.getArtifactId() );",
          "141:             plugin.setVersion( extension.getVersion() );",
          "",
          "[Added Lines]",
          "137:                                              List<RemoteRepository> repositories, DependencyFilter dependencyFilter,",
          "138:                                              Interpolator interpolator )",
          "148:             plugin.setGroupId( interpolator.interpolate( extension.getGroupId() ) );",
          "149:             plugin.setArtifactId( interpolator.interpolate( extension.getArtifactId() ) );",
          "150:             plugin.setVersion( interpolator.interpolate( extension.getVersion() ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:         {",
          "153:             throw new ExtensionResolutionException( extension, e.getCause() );",
          "154:         }",
          "155:     }",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:         catch ( InterpolationException e )",
          "165:         {",
          "166:             throw new ExtensionResolutionException( extension, e );",
          "167:         }",
          "168:     }",
          "170:     private static Interpolator createInterpolator( MavenExecutionRequest request )",
          "171:     {",
          "172:         StringSearchInterpolator interpolator = new StringSearchInterpolator();",
          "173:         interpolator.addValueSource( new MapBasedValueSource( request.getUserProperties() ) );",
          "174:         interpolator.addValueSource( new MapBasedValueSource( request.getSystemProperties() ) );",
          "175:         return interpolator;",
          "",
          "---------------"
        ]
      }
    }
  ]
}