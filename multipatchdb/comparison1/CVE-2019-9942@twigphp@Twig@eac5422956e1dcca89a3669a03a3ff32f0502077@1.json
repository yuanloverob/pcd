{
  "cve_id": "CVE-2019-9942",
  "cve_desc": "A sandbox information disclosure exists in Twig before 1.38.0 and 2.x before 2.7.0 because, under some circumstances, it is possible to call the __toString() method on an object even if not allowed by the security policy in place.",
  "repo": "twigphp/Twig",
  "patch_hash": "eac5422956e1dcca89a3669a03a3ff32f0502077",
  "patch_info": {
    "commit_hash": "eac5422956e1dcca89a3669a03a3ff32f0502077",
    "repo": "twigphp/Twig",
    "commit_url": "https://github.com/twigphp/Twig/commit/eac5422956e1dcca89a3669a03a3ff32f0502077",
    "files": [
      "CHANGELOG",
      "src/Node/CheckToStringNode.php",
      "src/Node/SandboxedPrintNode.php",
      "src/NodeVisitor/SandboxNodeVisitor.php",
      "test/Twig/Tests/Extension/SandboxTest.php",
      "test/Twig/Tests/Node/SandboxedPrintTest.php"
    ],
    "message": "fixed security issue in the sandbox",
    "before_after_code_files": [
      "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
      "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php",
      "src/NodeVisitor/SandboxNodeVisitor.php||src/NodeVisitor/SandboxNodeVisitor.php",
      "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php",
      "test/Twig/Tests/Node/SandboxedPrintTest.php||test/Twig/Tests/Node/SandboxedPrintTest.php"
    ]
  },
  "patch_diff": {
    "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php": [
      "File: src/Node/CheckToStringNode.php -> src/Node/CheckToStringNode.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "12: namespace Twig\\Node;",
      "14: use Twig\\Compiler;",
      "15: use Twig\\Node\\Expression\\AbstractExpression;",
      "27: class CheckToStringNode extends Node",
      "28: {",
      "29:     public function __construct(AbstractExpression $expr)",
      "30:     {",
      "31:         parent::__construct(['expr' => $expr], [], $expr->getTemplateLine(), $expr->getNodeTag());",
      "32:     }",
      "34:     public function compile(Compiler $compiler)",
      "35:     {",
      "36:         $compiler",
      "37:             ->raw('$this->sandbox->ensureToStringAllowed(')",
      "38:             ->subcompile($this->getNode('expr'))",
      "39:             ->raw(')')",
      "40:         ;",
      "41:     }",
      "42: }",
      "",
      "---------------"
    ],
    "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php": [
      "File: src/Node/SandboxedPrintNode.php -> src/Node/SandboxedPrintNode.php"
    ],
    "src/NodeVisitor/SandboxNodeVisitor.php||src/NodeVisitor/SandboxNodeVisitor.php": [
      "File: src/NodeVisitor/SandboxNodeVisitor.php -> src/NodeVisitor/SandboxNodeVisitor.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: use Twig\\Environment;",
      "15: use Twig\\Node\\CheckSecurityNode;",
      "16: use Twig\\Node\\Expression\\Binary\\RangeBinary;",
      "17: use Twig\\Node\\Expression\\FilterExpression;",
      "18: use Twig\\Node\\Expression\\FunctionExpression;",
      "19: use Twig\\Node\\ModuleNode;",
      "20: use Twig\\Node\\Node;",
      "21: use Twig\\Node\\PrintNode;",
      "",
      "[Removed Lines]",
      "22: use Twig\\Node\\SandboxedPrintNode;",
      "",
      "[Added Lines]",
      "16: use Twig\\Node\\CheckToStringNode;",
      "17: use Twig\\Node\\Expression\\Binary\\ConcatBinary;",
      "21: use Twig\\Node\\Expression\\GetAttrExpression;",
      "22: use Twig\\Node\\Expression\\NameExpression;",
      "26: use Twig\\Node\\SetNode;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:     protected $filters;",
      "34:     protected $functions;",
      "36:     protected function doEnterNode(Node $node, Environment $env)",
      "37:     {",
      "38:         if ($node instanceof ModuleNode) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:     private $needsToStringWrap = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:                 $this->functions['range'] = $node;",
      "64:             }",
      "67:             if ($node instanceof PrintNode) {",
      "69:             }",
      "70:         }",
      "",
      "[Removed Lines]",
      "68:                 return new SandboxedPrintNode($node->getNode('expr'), $node->getTemplateLine(), $node->getNodeTag());",
      "",
      "[Added Lines]",
      "73:                 $this->needsToStringWrap = true;",
      "74:                 $this->wrapNode($node, 'expr');",
      "75:             }",
      "77:             if ($node instanceof SetNode && !$node->getAttribute('capture')) {",
      "78:                 $this->needsToStringWrap = true;",
      "79:             }",
      "82:             if ($this->needsToStringWrap) {",
      "83:                 if ($node instanceof ConcatBinary) {",
      "84:                     $this->wrapNode($node, 'left');",
      "85:                     $this->wrapNode($node, 'right');",
      "86:                 }",
      "87:                 if ($node instanceof FilterExpression) {",
      "88:                     $this->wrapNode($node, 'node');",
      "89:                     $this->wrapArrayNode($node, 'arguments');",
      "90:                 }",
      "91:                 if ($node instanceof FunctionExpression) {",
      "92:                     $this->wrapArrayNode($node, 'arguments');",
      "93:                 }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "78:             $this->inAModule = false;",
      "80:             $node->setNode('constructor_end', new Node([new CheckSecurityNode($this->filters, $this->tags, $this->functions), $node->getNode('display_start')]));",
      "81:         }",
      "83:         return $node;",
      "84:     }",
      "86:     public function getPriority()",
      "87:     {",
      "88:         return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:         } elseif ($this->inAModule) {",
      "107:             if ($node instanceof PrintNode || $node instanceof SetNode) {",
      "108:                 $this->needsToStringWrap = false;",
      "109:             }",
      "115:     private function wrapNode(Node $node, $name)",
      "116:     {",
      "117:         $expr = $node->getNode($name);",
      "118:         if ($expr instanceof NameExpression || $expr instanceof GetAttrExpression) {",
      "119:             $node->setNode($name, new CheckToStringNode($expr));",
      "120:         }",
      "121:     }",
      "123:     private function wrapArrayNode(Node $node, $name)",
      "124:     {",
      "125:         $args = $node->getNode($name);",
      "126:         foreach ($args as $name => $_) {",
      "127:             $this->wrapNode($args, $name);",
      "128:         }",
      "129:     }",
      "",
      "---------------"
    ],
    "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php": [
      "File: test/Twig/Tests/Extension/SandboxTest.php -> test/Twig/Tests/Extension/SandboxTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:             '1_basic3' => '{% if name %}foo{% endif %}',",
      "35:             '1_basic4' => '{{ obj.bar }}',",
      "36:             '1_basic5' => '{{ obj }}',",
      "38:             '1_basic7' => '{{ cycle([\"foo\",\"bar\"], 1) }}',",
      "39:             '1_basic8' => '{{ obj.getfoobar }}{{ obj.getFooBar }}',",
      "40:             '1_basic9' => '{{ obj.foobar }}{{ obj.fooBar }}',",
      "",
      "[Removed Lines]",
      "37:             '1_basic6' => '{{ arr.obj }}',",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:         }",
      "113:     }",
      "116:     {",
      "118:         try {",
      "120:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
      "121:         } catch (SecurityError $e) {",
      "122:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
      "",
      "[Removed Lines]",
      "115:     public function testSandboxUnallowedToString()",
      "117:         $twig = $this->getEnvironment(true, [], self::$templates);",
      "119:             $twig->load('1_basic5')->render(self::$params);",
      "",
      "[Added Lines]",
      "117:     public function testSandboxUnallowedToString($template)",
      "119:         $twig = $this->getEnvironment(true, [], ['index' => $template], [], ['upper'], ['FooObject' => 'getAnotherFooObject'], [], ['random']);",
      "121:             $twig->loadTemplate('index')->render(self::$params);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "125:         }",
      "126:     }",
      "129:     {",
      "139:     }",
      "141:     public function testSandboxUnallowedFunction()",
      "",
      "[Removed Lines]",
      "128:     public function testSandboxUnallowedToStringArray()",
      "130:         $twig = $this->getEnvironment(true, [], self::$templates);",
      "131:         try {",
      "132:             $twig->load('1_basic6')->render(self::$params);",
      "133:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
      "134:         } catch (SecurityError $e) {",
      "135:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
      "136:             $this->assertEquals('FooObject', $e->getClassName(), 'Exception should be raised on the \"FooObject\" class');",
      "137:             $this->assertEquals('__tostring', $e->getMethodName(), 'Exception should be raised on the \"__toString\" method');",
      "138:         }",
      "",
      "[Added Lines]",
      "130:     public function getSandboxUnallowedToStringTests()",
      "132:         return [",
      "133:             'simple' => ['{{ obj }}'],",
      "134:             'object_from_array' => ['{{ arr.obj }}'],",
      "135:             'object_chain' => ['{{ obj.anotherFooObject }}'],",
      "136:             'filter' => ['{{ obj|upper }}'],",
      "137:             'filter_from_array' => ['{{ arr.obj|upper }}'],",
      "138:             'function' => ['{{ random(obj) }}'],",
      "139:             'function_from_array' => ['{{ random(arr.obj) }}'],",
      "140:             'function_and_filter' => ['{{ random(obj|upper) }}'],",
      "141:             'function_and_filter_from_array' => ['{{ random(arr.obj|upper) }}'],",
      "142:             'object_chain_and_filter' => ['{{ obj.anotherFooObject|upper }}'],",
      "143:             'object_chain_and_function' => ['{{ random(obj.anotherFooObject) }}'],",
      "144:             'concat' => ['{{ obj ~ \"\" }}'],",
      "145:             'concat_again' => ['{{ \"\" ~ obj }}'],",
      "146:         ];",
      "147:     }",
      "152:     public function testSandboxAllowedToString($template, $output)",
      "153:     {",
      "154:         $twig = $this->getEnvironment(true, [], ['index' => $template], ['set'], [], ['FooObject' => ['foo', 'getAnotherFooObject']]);",
      "155:         $this->assertEquals($output, $twig->load('index')->render(self::$params));",
      "156:     }",
      "158:     public function getSandboxAllowedToStringTests()",
      "159:     {",
      "160:         return [",
      "161:             'constant_test' => ['{{ obj is constant(\"PHP_INT_MAX\") }}', ''],",
      "162:             'set_object' => ['{% set a = obj.anotherFooObject %}{{ a.foo }}', 'foo'],",
      "163:             'is_defined' => ['{{ obj.anotherFooObject is defined }}', '1'],",
      "164:             'is_null' => ['{{ obj is null }}', ''],",
      "165:             'is_sameas' => ['{{ obj is same as(obj) }}', '1'],",
      "166:             'is_sameas_from_array' => ['{{ arr.obj is same as(arr.obj) }}', '1'],",
      "167:             'is_sameas_from_another_method' => ['{{ obj.anotherFooObject is same as(obj.anotherFooObject) }}', ''],",
      "168:         ];",
      "169:     }",
      "171:     public function testSandboxAllowMethodToString()",
      "172:     {",
      "173:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);",
      "174:         FooObject::reset();",
      "175:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');",
      "176:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "177:     }",
      "179:     public function testSandboxAllowMethodToStringDisabled()",
      "180:     {",
      "181:         $twig = $this->getEnvironment(false, [], self::$templates);",
      "182:         FooObject::reset();",
      "183:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');",
      "184:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "170:         $this->assertEquals(1, FooObject::$called['foo'], 'Sandbox only calls method once');",
      "171:     }",
      "189:     public function testSandboxAllowFilter()",
      "190:     {",
      "191:         $twig = $this->getEnvironment(true, [], self::$templates, [], ['upper']);",
      "",
      "[Removed Lines]",
      "173:     public function testSandboxAllowMethodToString()",
      "174:     {",
      "175:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);",
      "176:         FooObject::reset();",
      "177:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');",
      "178:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "179:     }",
      "181:     public function testSandboxAllowMethodToStringDisabled()",
      "182:     {",
      "183:         $twig = $this->getEnvironment(false, [], self::$templates);",
      "184:         FooObject::reset();",
      "185:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');",
      "186:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "187:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "327:         return 'foobar';",
      "328:     }",
      "329: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "360:     public function getAnotherFooObject()",
      "361:     {",
      "362:         return new self();",
      "363:     }",
      "",
      "---------------"
    ],
    "test/Twig/Tests/Node/SandboxedPrintTest.php||test/Twig/Tests/Node/SandboxedPrintTest.php": [
      "File: test/Twig/Tests/Node/SandboxedPrintTest.php -> test/Twig/Tests/Node/SandboxedPrintTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a165ce67d435880f3d66077a3b069d7994e46b95",
      "candidate_info": {
        "commit_hash": "a165ce67d435880f3d66077a3b069d7994e46b95",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/a165ce67d435880f3d66077a3b069d7994e46b95",
        "files": [
          "src/Extension/CoreExtension.php",
          "src/Extension/SandboxExtension.php",
          "src/Node/CheckToStringNode.php",
          "src/Node/SandboxedPrintNode.php",
          "src/Sandbox/SecurityPolicyInterface.php"
        ],
        "message": "added the source for all sandbox security exceptions",
        "before_after_code_files": [
          "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php",
          "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php",
          "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
          "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php",
          "src/Sandbox/SecurityPolicyInterface.php||src/Sandbox/SecurityPolicyInterface.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
            "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
          ],
          "candidate": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
            "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php": [
          "File: src/Extension/CoreExtension.php -> src/Extension/CoreExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1601:             }",
          "1603:             if ($sandboxed) {",
          "1605:             }",
          "1607:             return $object->$item;",
          "",
          "[Removed Lines]",
          "1604:                 $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item);",
          "",
          "[Added Lines]",
          "1604:                 $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $source);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1678:     }",
          "1680:     if ($sandboxed) {",
          "1682:     }",
          "",
          "[Removed Lines]",
          "1681:         $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method);",
          "",
          "[Added Lines]",
          "1681:         $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $source);",
          "",
          "---------------"
        ],
        "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php": [
          "File: src/Extension/SandboxExtension.php -> src/Extension/SandboxExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Twig\\Extension;",
          "14: use Twig\\NodeVisitor\\SandboxNodeVisitor;",
          "15: use Twig\\Sandbox\\SecurityPolicyInterface;",
          "16: use Twig\\TokenParser\\SandboxTokenParser;",
          "18: final class SandboxExtension extends AbstractExtension",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Twig\\Sandbox\\SecurityNotAllowedMethodError;",
          "16: use Twig\\Sandbox\\SecurityNotAllowedPropertyError;",
          "18: use Twig\\Source;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         }",
          "75:     }",
          "78:     {",
          "79:         if ($this->isSandboxed()) {",
          "81:         }",
          "82:     }",
          "85:     {",
          "86:         if ($this->isSandboxed()) {",
          "88:         }",
          "89:     }",
          "92:     {",
          "93:         if ($this->isSandboxed() && \\is_object($obj) && method_exists($obj, '__toString')) {",
          "95:         }",
          "97:         return $obj;",
          "",
          "[Removed Lines]",
          "77:     public function checkMethodAllowed($obj, $method)",
          "80:             $this->policy->checkMethodAllowed($obj, $method);",
          "84:     public function checkPropertyAllowed($obj, $method)",
          "87:             $this->policy->checkPropertyAllowed($obj, $method);",
          "91:     public function ensureToStringAllowed($obj)",
          "94:             $this->policy->checkMethodAllowed($obj, '__toString');",
          "",
          "[Added Lines]",
          "80:     public function checkMethodAllowed($obj, $method, Source $source = null)",
          "83:             try {",
          "84:                 $this->policy->checkMethodAllowed($obj, $method);",
          "85:             } catch (SecurityNotAllowedMethodError $e) {",
          "86:                 $e->setSourceContext($source);",
          "88:                 throw $e;",
          "89:             }",
          "93:     public function checkPropertyAllowed($obj, $method, Source $source = null)",
          "96:             try {",
          "97:                 $this->policy->checkPropertyAllowed($obj, $method);",
          "98:             } catch (SecurityNotAllowedPropertyError $e) {",
          "99:                 $e->setSourceContext($source);",
          "101:                 throw $e;",
          "102:             }",
          "106:     public function ensureToStringAllowed($obj, Source $source = null)",
          "109:             try {",
          "110:                 $this->policy->checkMethodAllowed($obj, '__toString');",
          "111:             } catch (SecurityNotAllowedMethodError $e) {",
          "112:                 $e->setSourceContext($source);",
          "114:                 throw $e;",
          "115:             }",
          "",
          "---------------"
        ],
        "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php": [
          "File: src/Node/CheckToStringNode.php -> src/Node/CheckToStringNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         $compiler",
          "37:             ->raw('$this->sandbox->ensureToStringAllowed(')",
          "38:             ->subcompile($this->getNode('expr'))",
          "40:         ;",
          "41:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "39:             ->raw(')')",
          "",
          "[Added Lines]",
          "39:             ->raw(', $this->source)')",
          "",
          "---------------"
        ],
        "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php": [
          "File: src/Node/SandboxedPrintNode.php -> src/Node/SandboxedPrintNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             $compiler",
          "44:                 ->write('$this->extensions[SandboxExtension::class]->ensureToStringAllowed(')",
          "45:                 ->subcompile($expr)",
          "47:             ;",
          "48:         }",
          "49:     }",
          "",
          "[Removed Lines]",
          "46:                 ->raw(\");\\n\")",
          "",
          "[Added Lines]",
          "46:                 ->raw(\", \\$this->source);\\n\")",
          "",
          "---------------"
        ],
        "src/Sandbox/SecurityPolicyInterface.php||src/Sandbox/SecurityPolicyInterface.php": [
          "File: src/Sandbox/SecurityPolicyInterface.php -> src/Sandbox/SecurityPolicyInterface.php"
        ]
      }
    }
  ]
}