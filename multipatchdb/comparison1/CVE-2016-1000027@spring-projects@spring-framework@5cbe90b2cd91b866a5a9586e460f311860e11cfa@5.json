{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d3c0e75b95b9acaf555b673732f16f083fcaf9b0",
      "candidate_info": {
        "commit_hash": "d3c0e75b95b9acaf555b673732f16f083fcaf9b0",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/d3c0e75b95b9acaf555b673732f16f083fcaf9b0",
        "files": [
          "spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java",
          "spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java",
          "spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java",
          "spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java",
          "spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java",
          "spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java",
          "spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java",
          "spring-core/src/main/java/org/springframework/util/StopWatch.java",
          "spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java",
          "spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
          "spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java",
          "spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java"
        ],
        "message": "Polishing",
        "before_after_code_files": [
          "spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java||spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java",
          "spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java||spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java",
          "spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java||spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java||spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java||spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java||spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java",
          "spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java||spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java",
          "spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java||spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java",
          "spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java||spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java",
          "spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java||spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java",
          "spring-core/src/main/java/org/springframework/util/StopWatch.java||spring-core/src/main/java/org/springframework/util/StopWatch.java",
          "spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java||spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java",
          "spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java||spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
          "spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java||spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java",
          "spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java||spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java||spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java -> spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  @Override",
          "109:   return null;",
          "110:  }",
          "",
          "[Removed Lines]",
          "108:  public Class getPropertyType(String propertyPath) {",
          "",
          "[Added Lines]",
          "108:  public Class<?> getPropertyType(String propertyPath) {",
          "",
          "---------------"
        ],
        "spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java||spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java -> spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "89:  Class getPropertyType(String propertyName) throws BeansException;",
          "",
          "[Added Lines]",
          "89:  Class<?> getPropertyType(String propertyName) throws BeansException;",
          "",
          "---------------"
        ],
        "spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java||spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java -> spring-beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  }",
          "132:  @Override",
          "134:   if (exType == null) {",
          "135:    return false;",
          "136:   }",
          "",
          "[Removed Lines]",
          "133:  public boolean contains(Class exType) {",
          "",
          "[Added Lines]",
          "133:  public boolean contains(Class<?> exType) {",
          "",
          "---------------"
        ],
        "spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java||spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java -> spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:  }",
          "187:  @Override",
          "189:   if (super.contains(exClass)) {",
          "190:    return true;",
          "191:   }",
          "",
          "[Removed Lines]",
          "188:  public boolean contains(Class exClass) {",
          "",
          "[Added Lines]",
          "188:  public boolean contains(Class<?> exClass) {",
          "",
          "---------------"
        ],
        "spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java||spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java -> spring-beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:  @SuppressWarnings(\"unchecked\")",
          "155:  private T getEarlySingletonInstance() throws Exception {",
          "157:   if (ifcs == null) {",
          "158:    throw new FactoryBeanNotInitializedException(",
          "159:      getClass().getName() + \" does not support circular references\");",
          "",
          "[Removed Lines]",
          "156:   Class[] ifcs = getEarlySingletonInterfaces();",
          "",
          "[Added Lines]",
          "156:   Class<?>[] ifcs = getEarlySingletonInterfaces();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:  }",
          "",
          "[Removed Lines]",
          "221:  protected Class[] getEarlySingletonInterfaces() {",
          "222:   Class type = getObjectType();",
          "223:   return (type != null && type.isInterface() ? new Class[] {type} : null);",
          "",
          "[Added Lines]",
          "221:  protected Class<?>[] getEarlySingletonInterfaces() {",
          "222:   Class<?> type = getObjectType();",
          "223:   return (type != null && type.isInterface() ? new Class<?>[] {type} : null);",
          "",
          "---------------"
        ],
        "spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java||spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java -> spring-beans/src/main/java/org/springframework/beans/factory/config/PropertiesFactoryBean.java"
        ],
        "spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java||spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java": [
          "File: spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java -> spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:    logger.warn(String.format(\"%s was imported but no annotations were found \" +",
          "79:      \"having both 'mode' and 'proxyTargetClass' attributes of type \" +",
          "80:      \"AdviceMode and boolean respectively. This means that auto proxy \" +",
          "82:      \"intended, and components may not be proxied as expected. Check to \" +",
          "83:      \"ensure that %s has been @Import'ed on the same class where these \" +",
          "84:      \"annotations are declared; otherwise remove the import of %s \" +",
          "",
          "[Removed Lines]",
          "81:      \"creator registration and configuration may not have occured as \" +",
          "",
          "[Added Lines]",
          "81:      \"creator registration and configuration may not have occurred as \" +",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java||spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java": [
          "File: spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java -> spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java"
        ],
        "spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java||spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java": [
          "File: spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java -> spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   if (exType == null) {",
          "115:    return false;",
          "116:   }",
          "",
          "[Removed Lines]",
          "113:  public boolean contains(Class exType) {",
          "",
          "[Added Lines]",
          "113:  public boolean contains(Class<?> exType) {",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java||spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java": [
          "File: spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java -> spring-core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java"
        ],
        "spring-core/src/main/java/org/springframework/util/StopWatch.java||spring-core/src/main/java/org/springframework/util/StopWatch.java": [
          "File: spring-core/src/main/java/org/springframework/util/StopWatch.java -> spring-core/src/main/java/org/springframework/util/StopWatch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   if (this.running) {",
          "117:    throw new IllegalStateException(\"Can't start StopWatch: it's already running\");",
          "118:   }",
          "120:   this.running = true;",
          "121:   this.currentTaskName = taskName;",
          "122:  }",
          "130:  public void stop() throws IllegalStateException {",
          "",
          "[Removed Lines]",
          "119:   this.startTimeMillis = System.currentTimeMillis();",
          "",
          "[Added Lines]",
          "121:   this.startTimeMillis = System.currentTimeMillis();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:   public double getTimeSeconds() {",
          "306:   }",
          "307:  }",
          "",
          "[Removed Lines]",
          "305:    return this.timeMillis / 1000.0;",
          "",
          "[Added Lines]",
          "305:    return (this.timeMillis / 1000.0);",
          "",
          "---------------"
        ],
        "spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java||spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java": [
          "File: spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java -> spring-jms/src/main/java/org/springframework/jms/UncategorizedJmsException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  public UncategorizedJmsException(Throwable cause) {",
          "55:  }",
          "57: }",
          "",
          "[Removed Lines]",
          "54:   super(\"Uncategorized exception occured during JMS processing\", cause);",
          "",
          "[Added Lines]",
          "54:   super(\"Uncategorized exception occurred during JMS processing\", cause);",
          "",
          "---------------"
        ],
        "spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java||spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java": [
          "File: spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java -> spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:  private boolean isPrimitiveWrapper(Class<?> clazz) {",
          "632:     Byte.class.equals(clazz) ||",
          "633:     Short.class.equals(clazz) ||",
          "634:     Integer.class.equals(clazz) ||",
          "635:     Long.class.equals(clazz) ||",
          "636:     Float.class.equals(clazz) ||",
          "638:  }",
          "",
          "[Removed Lines]",
          "631:   return Boolean.class.equals(clazz) ||",
          "637:     Double.class.equals(clazz);",
          "",
          "[Added Lines]",
          "631:   return (Boolean.class.equals(clazz) ||",
          "637:     Double.class.equals(clazz));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "644:  private boolean isStandardClass(Class<?> clazz) {",
          "646:     BigInteger.class.isAssignableFrom(clazz) ||",
          "647:     BigDecimal.class.isAssignableFrom(clazz) ||",
          "648:     Calendar.class.isAssignableFrom(clazz) ||",
          "",
          "[Removed Lines]",
          "645:   return String.class.equals(clazz) ||",
          "",
          "[Added Lines]",
          "645:   return (String.class.equals(clazz) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:     DataHandler.class.equals(clazz) ||",
          "660:  }",
          "",
          "[Removed Lines]",
          "658:     UUID.class.equals(clazz);",
          "",
          "[Added Lines]",
          "658:     UUID.class.equals(clazz));",
          "",
          "---------------"
        ],
        "spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java||spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java": [
          "File: spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java -> spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java"
        ],
        "spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java||spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java": [
          "File: spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java -> spring-tx/src/main/java/org/springframework/transaction/TransactionSystemException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  }",
          "85:  @Override",
          "87:   return super.contains(exType) || (exType != null && exType.isInstance(this.applicationException));",
          "88:  }",
          "",
          "[Removed Lines]",
          "86:  public boolean contains(Class exType) {",
          "",
          "[Added Lines]",
          "86:  public boolean contains(Class<?> exType) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3185f67b43d3749fcfbcae5b3a0ed48c1df602d5",
      "candidate_info": {
        "commit_hash": "3185f67b43d3749fcfbcae5b3a0ed48c1df602d5",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/3185f67b43d3749fcfbcae5b3a0ed48c1df602d5",
        "files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java"
        ],
        "message": "Avoid stack overflow in case of chained factory-bean references to FactoryBean class\n\nIssue: SPR-14551",
        "before_after_code_files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java||spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java",
          "spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java -> spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java"
        ],
        "spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java||spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java -> spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java"
        ],
        "spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java -> spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java"
        ],
        "spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java -> spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  @Override",
          "431:   if (logger.isDebugEnabled()) {",
          "432:    logger.debug(\"Creating instance of bean '\" + beanName + \"'\");",
          "433:   }",
          "",
          "[Removed Lines]",
          "428:  protected Object createBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)",
          "429:    throws BeanCreationException {",
          "",
          "[Added Lines]",
          "428:  protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:    if (objectType.value != null) {",
          "746:     return objectType.value;",
          "747:    }",
          "748:   }",
          "752:  }",
          "",
          "[Removed Lines]",
          "751:   return super.getTypeForFactoryBean(beanName, mbd);",
          "",
          "[Added Lines]",
          "746:    else {",
          "749:     return super.getTypeForFactoryBean(beanName, mbd);",
          "750:    }",
          "753:   return null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "767:      SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;",
          "768:      exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);",
          "769:      if (exposedObject == null) {",
          "771:      }",
          "772:     }",
          "773:    }",
          "",
          "[Removed Lines]",
          "770:       return exposedObject;",
          "",
          "[Added Lines]",
          "772:       return null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e3bb1e26f73893efb0af4d5acaa4489a716127c",
      "candidate_info": {
        "commit_hash": "9e3bb1e26f73893efb0af4d5acaa4489a716127c",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/9e3bb1e26f73893efb0af4d5acaa4489a716127c",
        "files": [
          "spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java",
          "spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java"
        ],
        "message": "Ensure RedirectModel is initialized\n\nThis commit fixes an old bug in ModelAndViewContainer where getModel\nreturns a new ModelMap instance that isn't saved and re-used.\n\nIssue: SPR-14045\n(cherry picked from commit d7062f6)",
        "before_after_code_files": [
          "spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java||spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java",
          "spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java||spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java||spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java": [
          "File: spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java -> spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: public class ModelAndViewContainer {",
          "51:  private final ModelMap defaultModel = new BindingAwareModelMap();",
          "",
          "[Removed Lines]",
          "47:  private Object view;",
          "49:  private boolean requestHandled = false;",
          "",
          "[Added Lines]",
          "47:  private boolean ignoreDefaultModelOnRedirect = false;",
          "49:  private Object view;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:  private boolean redirectModelScenario = false;",
          "59:  private final SessionStatus sessionStatus = new SimpleSessionStatus();",
          "65:  }",
          "",
          "[Removed Lines]",
          "57:  private boolean ignoreDefaultModelOnRedirect = false;",
          "64:  public ModelAndViewContainer() {",
          "",
          "[Added Lines]",
          "59:  private boolean requestHandled = false;",
          "74:  public void setIgnoreDefaultModelOnRedirect(boolean ignoreDefaultModelOnRedirect) {",
          "75:   this.ignoreDefaultModelOnRedirect = ignoreDefaultModelOnRedirect;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:  }",
          "135:  public ModelMap getModel() {",
          "136:   if (useDefaultModel()) {",
          "137:    return this.defaultModel;",
          "138:   }",
          "139:   else {",
          "141:   }",
          "142:  }",
          "",
          "[Removed Lines]",
          "118:  public void setRequestHandled(boolean requestHandled) {",
          "119:   this.requestHandled = requestHandled;",
          "120:  }",
          "125:  public boolean isRequestHandled() {",
          "126:   return this.requestHandled;",
          "127:  }",
          "140:    return (this.redirectModel != null) ? this.redirectModel : new ModelMap();",
          "",
          "[Added Lines]",
          "129:    if (this.redirectModel == null) {",
          "130:     this.redirectModel = new ModelMap();",
          "131:    }",
          "132:    return this.redirectModel;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:  private boolean useDefaultModel() {",
          "149:  }",
          "",
          "[Removed Lines]",
          "148:   return !this.redirectModelScenario || ((this.redirectModel == null) && !this.ignoreDefaultModelOnRedirect);",
          "",
          "[Added Lines]",
          "140:   return (!this.redirectModelScenario || (this.redirectModel == null && !this.ignoreDefaultModelOnRedirect));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:  }",
          "165:  public void setRedirectModelScenario(boolean redirectModelScenario) {",
          "166:   this.redirectModelScenario = redirectModelScenario;",
          "167:  }",
          "179:  }",
          "187:  }",
          "",
          "[Removed Lines]",
          "177:  public void setIgnoreDefaultModelOnRedirect(boolean ignoreDefaultModelOnRedirect) {",
          "178:   this.ignoreDefaultModelOnRedirect = ignoreDefaultModelOnRedirect;",
          "185:  public SessionStatus getSessionStatus() {",
          "186:   return sessionStatus;",
          "",
          "[Added Lines]",
          "165:  public SessionStatus getSessionStatus() {",
          "166:   return this.sessionStatus;",
          "176:  public void setRequestHandled(boolean requestHandled) {",
          "177:   this.requestHandled = requestHandled;",
          "178:  }",
          "183:  public boolean isRequestHandled() {",
          "184:   return this.requestHandled;",
          "",
          "---------------"
        ],
        "spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java||spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java": [
          "File: spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java -> spring-web/src/test/java/org/springframework/web/method/support/ModelAndViewContainerTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.web.method.support;",
          "21: import org.junit.Before;",
          "22: import org.junit.Test;",
          "23: import org.springframework.ui.ModelMap;",
          "",
          "[Removed Lines]",
          "19: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "24: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  private ModelAndViewContainer mavContainer;",
          "35:  @Before",
          "36:  public void setup() {",
          "37:   this.mavContainer = new ModelAndViewContainer();",
          "38:  }",
          "40:  @Test",
          "41:  public void getModel() {",
          "42:   this.mavContainer.addAttribute(\"name\", \"value\");",
          "43:   assertEquals(1, this.mavContainer.getModel().size());",
          "44:  }",
          "46:  @Test",
          "55:   this.mavContainer.setRedirectModelScenario(true);",
          "59:  }",
          "61:  @Test",
          "63:   this.mavContainer.addAttribute(\"name\", \"value\");",
          "64:   this.mavContainer.setRedirectModelScenario(true);",
          "69:   this.mavContainer.setIgnoreDefaultModelOnRedirect(true);",
          "73:  }",
          "75: }",
          "",
          "[Removed Lines]",
          "47:  public void getModelRedirectModel() {",
          "48:   ModelMap redirectModel = new ModelMap(\"name\", \"redirectValue\");",
          "49:   this.mavContainer.setRedirectModel(redirectModel);",
          "50:   this.mavContainer.addAttribute(\"name\", \"value\");",
          "52:   assertEquals(\"Default model should be used if not in redirect scenario\",",
          "53:     \"value\", this.mavContainer.getModel().get(\"name\"));",
          "57:   assertEquals(\"Redirect model should be used in redirect scenario\",",
          "58:     \"redirectValue\", this.mavContainer.getModel().get(\"name\"));",
          "62:  public void getModelIgnoreDefaultModelOnRedirect() {",
          "66:   assertEquals(\"Default model should be used since no redirect model was provided\",",
          "67:     1, this.mavContainer.getModel().size());",
          "71:   assertEquals(\"Empty model should be returned if no redirect model is available\",",
          "72:     0, this.mavContainer.getModel().size());",
          "",
          "[Added Lines]",
          "47:   assertEquals(\"value\", this.mavContainer.getModel().get(\"name\"));",
          "51:  public void redirectScenarioWithRedirectModel() {",
          "52:   this.mavContainer.addAttribute(\"name1\", \"value1\");",
          "53:   this.mavContainer.setRedirectModel(new ModelMap(\"name2\", \"value2\"));",
          "54:   this.mavContainer.setRedirectModelScenario(true);",
          "56:   assertEquals(1, this.mavContainer.getModel().size());",
          "57:   assertEquals(\"value2\", this.mavContainer.getModel().get(\"name2\"));",
          "58:  }",
          "60:  @Test",
          "61:  public void redirectScenarioWithoutRedirectModel() {",
          "62:   this.mavContainer.addAttribute(\"name\", \"value\");",
          "65:   assertEquals(1, this.mavContainer.getModel().size());",
          "66:   assertEquals(\"value\", this.mavContainer.getModel().get(\"name\"));",
          "70:  public void ignoreDefaultModel() {",
          "71:   this.mavContainer.setIgnoreDefaultModelOnRedirect(true);",
          "75:   assertTrue(this.mavContainer.getModel().isEmpty());",
          "76:  }",
          "78:  @Test  // SPR-14045",
          "79:  public void ignoreDefaultModelAndWithoutRedirectModel() {",
          "81:   this.mavContainer.setRedirectModelScenario(true);",
          "82:   this.mavContainer.addAttribute(\"name\", \"value\");",
          "84:   assertEquals(1, this.mavContainer.getModel().size());",
          "85:   assertEquals(\"value\", this.mavContainer.getModel().get(\"name\"));",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.web.servlet.mvc.method.annotation;",
          "25: import java.lang.reflect.Method;",
          "27: import org.junit.Before;",
          "28: import org.junit.Test;",
          "29: import org.springframework.core.MethodParameter;",
          "30: import org.springframework.mock.web.test.MockHttpServletRequest;",
          "31: import org.springframework.ui.ModelMap;",
          "",
          "[Removed Lines]",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertFalse;",
          "21: import static org.junit.Assert.assertNotSame;",
          "22: import static org.junit.Assert.assertSame;",
          "23: import static org.junit.Assert.assertTrue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;",
          "36: import org.springframework.web.servlet.view.RedirectView;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   assertNotSame(\"RedirectAttributes should not be used if controller doesn't redirect\", redirectAttributes, model);",
          "132:  }",
          "135:  private MethodParameter getReturnValueParam(String methodName) throws Exception {",
          "136:   Method method = getClass().getDeclaredMethod(methodName);",
          "137:   return new MethodParameter(method, -1);",
          "138:  }",
          "140:  ModelAndView modelAndView() {",
          "141:   return null;",
          "142:  }",
          "144:  String viewName() {",
          "145:   return null;",
          "146:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:  @Test  // SPR-14045",
          "134:  public void handleRedirectWithIgnoreDefaultModel() throws Exception {",
          "135:   mavContainer.setIgnoreDefaultModelOnRedirect(true);",
          "137:   RedirectView redirectView = new RedirectView();",
          "138:   ModelAndView mav = new ModelAndView(redirectView, \"name\", \"value\");",
          "139:   handler.handleReturnValue(mav, returnParamModelAndView, mavContainer, webRequest);",
          "141:   ModelMap model = mavContainer.getModel();",
          "142:   assertSame(redirectView, mavContainer.getView());",
          "143:   assertEquals(1, model.size());",
          "144:   assertEquals(\"value\", model.get(\"name\"));",
          "145:  }",
          "154:  @SuppressWarnings(\"unused\")",
          "159:  @SuppressWarnings(\"unused\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "703b3b152417c218feb507eeae582241a2c43fed",
      "candidate_info": {
        "commit_hash": "703b3b152417c218feb507eeae582241a2c43fed",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/703b3b152417c218feb507eeae582241a2c43fed",
        "files": [
          "spring-core/src/main/java/org/springframework/util/StringUtils.java",
          "spring-core/src/test/java/org/springframework/util/StringUtilsTests.java"
        ],
        "message": "StringUtils.parseLocaleString accepts Java 7 variants\n\nIssue: SPR-14718\n(cherry picked from commit 818c72a)",
        "before_after_code_files": [
          "spring-core/src/main/java/org/springframework/util/StringUtils.java||spring-core/src/main/java/org/springframework/util/StringUtils.java",
          "spring-core/src/test/java/org/springframework/util/StringUtilsTests.java||spring-core/src/test/java/org/springframework/util/StringUtilsTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-core/src/main/java/org/springframework/util/StringUtils.java||spring-core/src/main/java/org/springframework/util/StringUtils.java": [
          "File: spring-core/src/main/java/org/springframework/util/StringUtils.java -> spring-core/src/main/java/org/springframework/util/StringUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:  private static void validateLocalePart(String localePart) {",
          "708:   for (int i = 0; i < localePart.length(); i++) {",
          "709:    char ch = localePart.charAt(i);",
          "711:     throw new IllegalArgumentException(",
          "712:       \"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");",
          "713:    }",
          "",
          "[Removed Lines]",
          "710:    if (ch != '_' && ch != ' ' && !Character.isLetterOrDigit(ch)) {",
          "",
          "[Added Lines]",
          "710:    if (ch != ' ' && ch != '_' && ch != '#' && !Character.isLetterOrDigit(ch)) {",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/util/StringUtilsTests.java||spring-core/src/test/java/org/springframework/util/StringUtilsTests.java": [
          "File: spring-core/src/test/java/org/springframework/util/StringUtilsTests.java -> spring-core/src/test/java/org/springframework/util/StringUtilsTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   assertNull(\"When given an empty Locale string, must return null.\", locale);",
          "619:  }",
          "623:  public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception {",
          "626:   Locale locale = StringUtils.parseLocaleString(localeString);",
          "627:   assertEquals(\"Multi-valued variant portion of the Locale not extracted correctly.\", variant, locale.getVariant());",
          "628:  }",
          "632:  public void testParseLocaleWithMultiValuedVariant() throws Exception {",
          "635:   Locale locale = StringUtils.parseLocaleString(localeString);",
          "636:   assertEquals(\"Multi-valued variant portion of the Locale not extracted correctly.\", variant, locale.getVariant());",
          "637:  }",
          "641:  public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception {",
          "644:   Locale locale = StringUtils.parseLocaleString(localeString);",
          "645:   assertEquals(\"Multi-valued variant portion of the Locale not extracted correctly.\", variant, locale.getVariant());",
          "646:  }",
          "650:  public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception {",
          "653:   Locale locale = StringUtils.parseLocaleString(localeString);",
          "654:   assertEquals(\"Multi-valued variant portion of the Locale not extracted correctly.\", variant, locale.getVariant());",
          "655:  }",
          "659:  public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {",
          "662:   Locale locale = StringUtils.parseLocaleString(localeString);",
          "663:   assertEquals(\"Multi-valued variant portion of the Locale not extracted correctly.\", variant, locale.getVariant());",
          "664:  }",
          "668:  public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {",
          "671:   Locale locale = StringUtils.parseLocaleString(localeString);",
          "672:   assertEquals(\"Multi-valued variant portion of the Locale not extracted correctly.\", variant, locale.getVariant());",
          "673:  }",
          "677:  public void testParseLocaleWithInvalidCharacters() {",
          "678:   try {",
          "679:    StringUtils.parseLocaleString(\"%0D%0AContent-length:30%0D%0A%0D%0A%3Cscript%3Ealert%28123%29%3C/script%3E\");",
          "",
          "[Removed Lines]",
          "622:  @Test",
          "624:   final String variant = \"proper-northern\";",
          "625:   final String localeString = \"en_GB_\" + variant;",
          "631:  @Test",
          "633:   final String variant = \"proper_northern\";",
          "634:   final String localeString = \"en_GB_\" + variant;",
          "640:  @Test",
          "642:   final String variant = \"proper northern\";",
          "643:   final String localeString = \"en GB \" + variant;",
          "649:  @Test",
          "651:   final String variant = \"proper northern\";",
          "652:   final String localeString = \"en_GB_\" + variant;",
          "658:  @Test",
          "660:   final String variant = \"proper northern\";",
          "661:   final String localeString = \"en GB            \" + variant; // lots of whitespace",
          "667:  @Test",
          "669:   final String variant = \"proper_northern\";",
          "670:   final String localeString = \"en_GB_____\" + variant; // lots of underscores",
          "676:  @Test",
          "",
          "[Added Lines]",
          "621:  @Test  // SPR-8637",
          "623:   String variant = \"proper-northern\";",
          "624:   String localeString = \"en_GB_\" + variant;",
          "629:  @Test  // SPR-3671",
          "631:   String variant = \"proper_northern\";",
          "632:   String localeString = \"en_GB_\" + variant;",
          "637:  @Test  // SPR-3671",
          "639:   String variant = \"proper northern\";",
          "640:   String localeString = \"en GB \" + variant;",
          "645:  @Test  // SPR-3671",
          "647:   String variant = \"proper northern\";",
          "648:   String localeString = \"en_GB_\" + variant;",
          "653:  @Test  // SPR-3671",
          "655:   String variant = \"proper northern\";",
          "656:   String localeString = \"en GB            \" + variant;  // lots of whitespace",
          "661:  @Test  // SPR-3671",
          "663:   String variant = \"proper_northern\";",
          "664:   String localeString = \"en_GB_____\" + variant;  // lots of underscores",
          "669:  @Test  // SPR-7779",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "684:   }",
          "685:  }",
          "689:  public void testParseLocaleWithSameLowercaseTokenForLanguageAndCountry() {",
          "690:   assertEquals(\"tr_TR\", StringUtils.parseLocaleString(\"tr_tr\").toString());",
          "691:   assertEquals(\"bg_BG_vnt\", StringUtils.parseLocaleString(\"bg_bg_vnt\").toString());",
          "692:  }",
          "696:  public void testParseLocaleWithVariantContainingCountryCode() {",
          "697:   String variant = \"GBtest\";",
          "698:   String localeString = \"en_GB_\" + variant;",
          "",
          "[Removed Lines]",
          "688:  @Test",
          "695:  @Test",
          "",
          "[Added Lines]",
          "680:  @Test  // SPR-9420",
          "686:  @Test  // SPR-11806",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "700:   assertEquals(\"Variant containing country code not extracted correctly\", variant, locale.getVariant());",
          "701:  }",
          "703: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:  @Test  // SPR-14718",
          "695:  public void testParseJava7Variant() {",
          "696:   assertEquals(\"sr_#LATN\", StringUtils.parseLocaleString(\"sr_#LATN\").toString());",
          "697:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9be54047e996b502d7cdce4057de1c9d46e4239a",
      "candidate_info": {
        "commit_hash": "9be54047e996b502d7cdce4057de1c9d46e4239a",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/9be54047e996b502d7cdce4057de1c9d46e4239a",
        "files": [
          "spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
          "spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java"
        ],
        "message": "CronSequenceGenerator prevents stack overflow in case of inverted range\n\nIssue: SPR-14462\n(cherry picked from commit 44152ce)",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java||spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
          "spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java||spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java||spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java": [
          "File: spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java -> spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:    throw new IllegalArgumentException(\"Range less than minimum (\" + min + \"): '\" +",
          "380:      field + \"' in expression \\\"\" + this.expression + \"\\\"\");",
          "381:   }",
          "382:   return result;",
          "383:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:   if (result[0] > result[1]) {",
          "383:    throw new IllegalArgumentException(\"Invalid inverted range: '\" + field +",
          "384:      \"' in expression \\\"\" + this.expression + \"\\\"\");",
          "385:   }",
          "",
          "---------------"
        ],
        "spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java||spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java": [
          "File: spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java -> spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: public class CronSequenceGeneratorTests {",
          "30:  @Test",
          "32:   assertEquals(new Date(2012, 6, 2, 1, 0),",
          "33:     new CronSequenceGenerator(\"*/15 * 1-4 * * *\").next(new Date(2012, 6, 1, 9, 53, 50)));",
          "34:  }",
          "36:  @Test",
          "38:   assertEquals(new Date(2012, 6, 2, 1, 0),",
          "39:     new CronSequenceGenerator(\"*/15 * 1-4 * * *\").next(new Date(2012, 6, 1, 9, 53)));",
          "40:  }",
          "42:  @Test",
          "44:   assertEquals(new Date(2012, 6, 2, 1, 0),",
          "45:     new CronSequenceGenerator(\"0 */2 1-4 * * *\").next(new Date(2012, 6, 1, 9, 0)));",
          "46:  }",
          "48:  @Test(expected = IllegalArgumentException.class)",
          "50:   new CronSequenceGenerator(\"*/0 * * * * *\").next(new Date(2012, 6, 1, 9, 0));",
          "51:  }",
          "53:  @Test(expected = IllegalArgumentException.class)",
          "55:   new CronSequenceGenerator(\"*/-1 * * * * *\").next(new Date(2012, 6, 1, 9, 0));",
          "56:  }",
          "58: }",
          "",
          "[Removed Lines]",
          "31:  public void testAt50Seconds() {",
          "37:  public void testAt0Seconds() {",
          "43:  public void testAt0Minutes() {",
          "49:  public void testWith0Increment() {",
          "54:  public void testWithNegativeIncrement() {",
          "",
          "[Added Lines]",
          "28: @SuppressWarnings(\"deprecation\")",
          "32:  public void at50Seconds() {",
          "38:  public void at0Seconds() {",
          "44:  public void at0Minutes() {",
          "50:  public void with0Increment() {",
          "55:  public void withNegativeIncrement() {",
          "59:  @Test(expected = IllegalArgumentException.class)",
          "60:  public void withInvertedMinuteRange() {",
          "61:   new CronSequenceGenerator(\"* 6-5 * * * *\").next(new Date(2012, 6, 1, 9, 0));",
          "62:  }",
          "64:  @Test(expected = IllegalArgumentException.class)",
          "65:  public void withInvertedHourRange() {",
          "66:   new CronSequenceGenerator(\"* * 6-5 * * *\").next(new Date(2012, 6, 1, 9, 0));",
          "67:  }",
          "69:  @Test",
          "70:  public void withSameMinuteRange() {",
          "71:   new CronSequenceGenerator(\"* 6-6 * * * *\").next(new Date(2012, 6, 1, 9, 0));",
          "72:  }",
          "74:  @Test",
          "75:  public void withSameHourRange() {",
          "76:   new CronSequenceGenerator(\"* * 6-6 * * *\").next(new Date(2012, 6, 1, 9, 0));",
          "77:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}