{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d23555d757e39d75b1087cace8f1566c514c6208",
      "candidate_info": {
        "commit_hash": "d23555d757e39d75b1087cace8f1566c514c6208",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/d23555d757e39d75b1087cace8f1566c514c6208",
        "files": [
          "GNUmakefile",
          "jobspec2/hcl_conversions.go",
          "jobspec2/helper_test.go",
          "jobspec2/parse_job.go",
          "jobspec2/parse_test.go",
          "jobspec2/util.go"
        ],
        "message": "jobspec2: isolate package from Nomad core and BUSL (#25034)\n\nbackport of commit b394a76b893b2bd7ba574eaf39a271fc9cc86aa2\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "jobspec2/hcl_conversions.go||jobspec2/hcl_conversions.go",
          "jobspec2/helper_test.go||jobspec2/helper_test.go",
          "jobspec2/parse_job.go||jobspec2/parse_job.go",
          "jobspec2/parse_test.go||jobspec2/parse_test.go",
          "jobspec2/util.go||jobspec2/util.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "jobspec2/hcl_conversions.go||jobspec2/hcl_conversions.go": [
          "File: jobspec2/hcl_conversions.go -> jobspec2/hcl_conversions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"github.com/hashicorp/hcl/v2/gohcl\"",
          "14:  \"github.com/hashicorp/hcl/v2/hcldec\"",
          "15:  \"github.com/hashicorp/nomad/api\"",
          "17:  \"github.com/zclconf/go-cty/cty\"",
          "18:  \"github.com/zclconf/go-cty/cty/gocty\"",
          "19: )",
          "",
          "[Removed Lines]",
          "16:  \"github.com/hashicorp/nomad/helper/pointer\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:  weight := v.GetAttr(\"weight\")",
          "121:  if !weight.IsNull() {",
          "122:   w, _ := weight.AsBigFloat().Int64()",
          "124:  }",
          "",
          "[Removed Lines]",
          "123:   a.Weight = pointer.Of(int8(w))",
          "",
          "[Added Lines]",
          "122:   a.Weight = pointerOf(int8(w))",
          "",
          "---------------"
        ],
        "jobspec2/helper_test.go||jobspec2/helper_test.go": [
          "File: jobspec2/helper_test.go -> jobspec2/helper_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "jobspec2/parse_job.go||jobspec2/parse_job.go": [
          "File: jobspec2/parse_job.go -> jobspec2/parse_job.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "10:  \"github.com/hashicorp/nomad/api\"",
          "12: )",
          "14: func normalizeJob(jc *jobConfig) {",
          "",
          "[Removed Lines]",
          "11:  \"github.com/hashicorp/nomad/helper/pointer\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  }",
          "83:  if v.Env == nil {",
          "85:  }",
          "86:  if v.DisableFile == nil {",
          "88:  }",
          "89:  if v.ChangeMode == nil {",
          "91:  }",
          "92: }",
          "",
          "[Removed Lines]",
          "84:   v.Env = pointer.Of(true)",
          "87:   v.DisableFile = pointer.Of(false)",
          "90:   v.ChangeMode = pointer.Of(\"restart\")",
          "",
          "[Added Lines]",
          "83:   v.Env = pointerOf(true)",
          "86:   v.DisableFile = pointerOf(false)",
          "89:   v.ChangeMode = pointerOf(\"restart\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  for _, t := range templates {",
          "129:   if t.ChangeMode == nil {",
          "131:   }",
          "132:   if t.Perms == nil {",
          "134:   }",
          "135:   if t.Splay == nil {",
          "137:   }",
          "138:   if t.ErrMissingKey == nil {",
          "140:   }",
          "141:   normalizeChangeScript(t.ChangeScript)",
          "142:  }",
          "",
          "[Removed Lines]",
          "130:    t.ChangeMode = pointer.Of(\"restart\")",
          "133:    t.Perms = pointer.Of(\"0644\")",
          "136:    t.Splay = pointer.Of(5 * time.Second)",
          "139:    t.ErrMissingKey = pointer.Of(false)",
          "",
          "[Added Lines]",
          "129:    t.ChangeMode = pointerOf(\"restart\")",
          "132:    t.Perms = pointerOf(\"0644\")",
          "135:    t.Splay = pointerOf(5 * time.Second)",
          "138:    t.ErrMissingKey = pointerOf(false)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:  }",
          "154:  if ch.Timeout == nil {",
          "156:  }",
          "158:  if ch.FailOnError == nil {",
          "160:  }",
          "161: }",
          "",
          "[Removed Lines]",
          "155:   ch.Timeout = pointer.Of(5 * time.Second)",
          "159:   ch.FailOnError = pointer.Of(false)",
          "",
          "[Added Lines]",
          "154:   ch.Timeout = pointerOf(5 * time.Second)",
          "158:   ch.FailOnError = pointerOf(false)",
          "",
          "---------------"
        ],
        "jobspec2/parse_test.go||jobspec2/parse_test.go": [
          "File: jobspec2/parse_test.go -> jobspec2/parse_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"time\"",
          "12:  \"github.com/hashicorp/nomad/api\"",
          "15:  \"github.com/shoenig/test/must\"",
          "16:  \"github.com/stretchr/testify/require\"",
          "17: )",
          "19: func TestParse_ConnectJob(t *testing.T) {",
          "22:  name := \"./test-fixtures/connect-example.hcl\"",
          "23:  f, err := os.Open(name)",
          "",
          "[Removed Lines]",
          "13:  \"github.com/hashicorp/nomad/ci\"",
          "14:  \"github.com/hashicorp/nomad/helper/pointer\"",
          "20:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "18:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: }",
          "34: func TestParse_VarsAndFunctions(t *testing.T) {",
          "37:  hcl := `",
          "38: variables {",
          "",
          "[Removed Lines]",
          "35:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "33:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: }",
          "60: func TestParse_VariablesDefaultsAndSet(t *testing.T) {",
          "63:  hcl := `",
          "64: variables {",
          "",
          "[Removed Lines]",
          "61:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "59:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159: func TestParse_UnknownVariables(t *testing.T) {",
          "162:  hcl := `",
          "163: variables {",
          "",
          "[Removed Lines]",
          "160:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "158:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194: func TestParse_UnsetVariables(t *testing.T) {",
          "197:  hcl := `",
          "198: variable \"region_var\" {}",
          "",
          "[Removed Lines]",
          "195:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "193:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214: }",
          "216: func TestParse_Locals(t *testing.T) {",
          "219:  hcl := `",
          "220: variables {",
          "",
          "[Removed Lines]",
          "217:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "215:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "263: }",
          "265: func TestParse_FileOperators(t *testing.T) {",
          "268:  hcl := `",
          "269: job \"example\" {",
          "",
          "[Removed Lines]",
          "266:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "264:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "300: }",
          "302: func TestParseDynamic(t *testing.T) {",
          "305:  hcl := `",
          "306: job \"example\" {",
          "",
          "[Removed Lines]",
          "303:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "301:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "363: }",
          "365: func TestParse_InvalidHCL(t *testing.T) {",
          "368:  t.Run(\"invalid body\", func(t *testing.T) {",
          "369:   hcl := `invalid{hcl`",
          "",
          "[Removed Lines]",
          "366:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "364:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "408: }",
          "410: func TestParse_InvalidScalingSyntax(t *testing.T) {",
          "413:  cases := []struct {",
          "414:   name        string",
          "",
          "[Removed Lines]",
          "411:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "409:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "574: }",
          "576: func TestParseJob_JobWithFunctionsAndLookups(t *testing.T) {",
          "579:  hcl := `",
          "580: variable \"env\" {",
          "",
          "[Removed Lines]",
          "577:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "575:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "613:   {",
          "614:    \"prod\",",
          "615:    &api.Job{",
          "618:     Datacenters: []string{\"prod-dc1\", \"prod-dc2\"},",
          "619:     TaskGroups: []*api.TaskGroup{",
          "620:      {",
          "624:       Tasks: []*api.Task{",
          "625:        {",
          "",
          "[Removed Lines]",
          "616:     ID:          pointer.Of(\"job-webserver\"),",
          "617:     Name:        pointer.Of(\"job-webserver\"),",
          "621:       Name:  pointer.Of(\"group-webserver\"),",
          "622:       Count: pointer.Of(20),",
          "",
          "[Added Lines]",
          "614:     ID:          pointerOf(\"job-webserver\"),",
          "615:     Name:        pointerOf(\"job-webserver\"),",
          "619:       Name:  pointerOf(\"group-webserver\"),",
          "620:       Count: pointerOf(20),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "639:   {",
          "640:    \"staging\",",
          "641:    &api.Job{",
          "644:     Datacenters: []string{\"dc1\"},",
          "645:     TaskGroups: []*api.TaskGroup{",
          "646:      {",
          "650:       Tasks: []*api.Task{",
          "651:        {",
          "",
          "[Removed Lines]",
          "642:     ID:          pointer.Of(\"job-webserver\"),",
          "643:     Name:        pointer.Of(\"job-webserver\"),",
          "647:       Name:  pointer.Of(\"group-webserver\"),",
          "648:       Count: pointer.Of(3),",
          "",
          "[Added Lines]",
          "640:     ID:          pointerOf(\"job-webserver\"),",
          "641:     Name:        pointerOf(\"job-webserver\"),",
          "645:       Name:  pointerOf(\"group-webserver\"),",
          "646:       Count: pointerOf(3),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "665:   {",
          "666:    \"unknown\",",
          "667:    &api.Job{",
          "670:     Datacenters: []string{},",
          "671:     TaskGroups: []*api.TaskGroup{",
          "672:      {",
          "676:       Tasks: []*api.Task{",
          "677:        {",
          "",
          "[Removed Lines]",
          "668:     ID:          pointer.Of(\"job-webserver\"),",
          "669:     Name:        pointer.Of(\"job-webserver\"),",
          "673:       Name:  pointer.Of(\"group-webserver\"),",
          "674:       Count: pointer.Of(0),",
          "",
          "[Added Lines]",
          "666:     ID:          pointerOf(\"job-webserver\"),",
          "667:     Name:        pointerOf(\"job-webserver\"),",
          "671:       Name:  pointerOf(\"group-webserver\"),",
          "672:       Count: pointerOf(0),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "705: }",
          "707: func TestParse_TaskEnvs(t *testing.T) {",
          "710:  cases := []struct {",
          "711:   name       string",
          "",
          "[Removed Lines]",
          "708:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "706:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "780: }",
          "782: func TestParse_TaskEnvs_Multiple(t *testing.T) {",
          "785:  hcl := `",
          "786: job \"example\" {",
          "",
          "[Removed Lines]",
          "783:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "781:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "806: }",
          "808: func Test_TaskEnvs_Invalid(t *testing.T) {",
          "811:  cases := []struct {",
          "812:   name        string",
          "",
          "[Removed Lines]",
          "809:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "807:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "856: }",
          "858: func TestParse_Meta_Alternatives(t *testing.T) {",
          "861:  hcl := ` job \"example\" {",
          "862:   group \"group\" {",
          "",
          "[Removed Lines]",
          "859:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "857:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "904: }",
          "906: func TestParse_Constraint_Alternatives(t *testing.T) {",
          "909:  hclOpVal := `",
          "910: job \"example\" {",
          "",
          "[Removed Lines]",
          "907:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "905:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1008: func TestParse_UndefinedVariables(t *testing.T) {",
          "1011:  cases := []string{",
          "1012:   \"plain\",",
          "",
          "[Removed Lines]",
          "1009:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "1007:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1050: }",
          "1052: func TestParseServiceCheck(t *testing.T) {",
          "1055:  hcl := ` job \"group_service_check_script\" {",
          "1056:   group \"group\" {",
          "",
          "[Removed Lines]",
          "1053:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "1051:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1074:  require.NoError(t, err)",
          "1076:  expectedJob := &api.Job{",
          "1079:   TaskGroups: []*api.TaskGroup{",
          "1080:    {",
          "1082:     Services: []*api.Service{",
          "1083:      {",
          "1084:       Name:      \"foo-service\",",
          "",
          "[Removed Lines]",
          "1077:   ID:   pointer.Of(\"group_service_check_script\"),",
          "1078:   Name: pointer.Of(\"group_service_check_script\"),",
          "1081:     Name: pointer.Of(\"group\"),",
          "",
          "[Added Lines]",
          "1075:   ID:   pointerOf(\"group_service_check_script\"),",
          "1076:   Name: pointerOf(\"group_service_check_script\"),",
          "1079:     Name: pointerOf(\"group\"),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1101: }",
          "1103: func TestWaitConfig(t *testing.T) {",
          "1106:  hclBytes, err := os.ReadFile(\"test-fixtures/template-wait-config.hcl\")",
          "1107:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "1104:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "1102:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1122: }",
          "1124: func TestErrMissingKey(t *testing.T) {",
          "1126:  hclBytes, err := os.ReadFile(\"test-fixtures/template-err-missing-key.hcl\")",
          "1127:  require.NoError(t, err)",
          "1128:  job, err := ParseWithConfig(&ParseConfig{",
          "",
          "[Removed Lines]",
          "1125:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "1123:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1138: }",
          "1140: func TestRestartRenderTemplates(t *testing.T) {",
          "1142:  hclBytes, err := os.ReadFile(\"test-fixtures/restart-render-templates.hcl\")",
          "1143:  require.NoError(t, err)",
          "1144:  job, err := ParseWithConfig(&ParseConfig{",
          "",
          "[Removed Lines]",
          "1141:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "1139:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1161: func TestIdentity(t *testing.T) {",
          "1163:  hclBytes, err := os.ReadFile(\"test-fixtures/identity-compat.nomad.hcl\")",
          "1164:  must.NoError(t, err)",
          "1165:  job, err := ParseWithConfig(&ParseConfig{",
          "",
          "[Removed Lines]",
          "1162:  ci.Parallel(t)",
          "",
          "[Added Lines]",
          "1160:  t.Parallel()",
          "",
          "---------------"
        ],
        "jobspec2/util.go||jobspec2/util.go": [
          "File: jobspec2/util.go -> jobspec2/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package jobspec2",
          "8: func pointerOf[A any](a A) *A {",
          "9:  return &a",
          "10: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22a295d5d6a9b097e611fdc3c6a281bf70431f53",
      "candidate_info": {
        "commit_hash": "22a295d5d6a9b097e611fdc3c6a281bf70431f53",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/22a295d5d6a9b097e611fdc3c6a281bf70431f53",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit 90d1561ae51fce60ada4753c8e0ac9187ea8a20a (#24776)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  github.com/creack/pty v1.1.24",
          "28:  github.com/distribution/reference v0.6.0",
          "29:  github.com/docker/cli v27.3.1+incompatible",
          "31:  github.com/docker/go-connections v0.4.0",
          "32:  github.com/docker/go-units v0.5.0",
          "33:  github.com/dustin/go-humanize v1.0.1",
          "",
          "[Removed Lines]",
          "30:  github.com/docker/docker v27.3.1+incompatible",
          "",
          "[Added Lines]",
          "30:  github.com/docker/docker v27.4.1+incompatible",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: github.com/docker/cli v27.3.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "385: github.com/docker/distribution v2.8.3+incompatible h1:AtKxIZ36LoNK51+Z6RpzLpddBirtxJnzDrHLEKxTAYk=",
          "386: github.com/docker/distribution v2.8.3+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=",
          "389: github.com/docker/docker-credential-helpers v0.7.0 h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=",
          "390: github.com/docker/docker-credential-helpers v0.7.0/go.mod h1:rETQfLdHNT3foU5kuNkFR1R1V12OJRRO5lzt2D1b5X0=",
          "391: github.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=",
          "",
          "[Removed Lines]",
          "387: github.com/docker/docker v27.3.1+incompatible h1:KttF0XoteNTicmUtBO0L2tP+J7FGRFTjaEF4k6WdhfI=",
          "388: github.com/docker/docker v27.3.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "",
          "[Added Lines]",
          "387: github.com/docker/docker v27.4.1+incompatible h1:ZJvcY7gfwHn1JF48PfbyXg7Jyt9ZCWDW+GGXOIxEwp4=",
          "388: github.com/docker/docker v27.4.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e1f88e01cb6c621807dbceb50c5b7928da4a2ff",
      "candidate_info": {
        "commit_hash": "5e1f88e01cb6c621807dbceb50c5b7928da4a2ff",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5e1f88e01cb6c621807dbceb50c5b7928da4a2ff",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/moby/sys/mountinfo from 0.7.1 to 0.7.2 (#24375)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  github.com/mitchellh/pointerstructure v1.2.1",
          "107:  github.com/mitchellh/reflectwalk v1.0.2",
          "108:  github.com/moby/sys/mount v0.3.3",
          "110:  github.com/moby/term v0.5.0",
          "111:  github.com/muesli/reflow v0.3.0",
          "112:  github.com/opencontainers/image-spec v1.1.0",
          "",
          "[Removed Lines]",
          "109:  github.com/moby/sys/mountinfo v0.7.1",
          "",
          "[Added Lines]",
          "109:  github.com/moby/sys/mountinfo v0.7.2",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "905: github.com/moby/sys/mount v0.3.3 h1:fX1SVkXFJ47XWDoeFW4Sq7PdQJnV2QIDZAqjNqgEjUs=",
          "906: github.com/moby/sys/mount v0.3.3/go.mod h1:PBaEorSNTLG5t/+4EgukEQVlAvVEc6ZjTySwKdqp5K0=",
          "907: github.com/moby/sys/mountinfo v0.6.2/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=",
          "910: github.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=",
          "911: github.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=",
          "912: github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=",
          "",
          "[Removed Lines]",
          "908: github.com/moby/sys/mountinfo v0.7.1 h1:/tTvQaSJRr2FshkhXiIpux6fQ2Zvc4j7tAhMTStAG2g=",
          "909: github.com/moby/sys/mountinfo v0.7.1/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=",
          "",
          "[Added Lines]",
          "908: github.com/moby/sys/mountinfo v0.7.2 h1:1shs6aH5s4o5H2zQLn796ADW1wMrIwHsyJ2v9KouLrg=",
          "909: github.com/moby/sys/mountinfo v0.7.2/go.mod h1:1YOa8w8Ih7uW0wALDUgT1dTTSBrZ+HiBLGws92L2RU4=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "718642f92e10eb0512f1f8f3e118da1513f7f5ad",
      "candidate_info": {
        "commit_hash": "718642f92e10eb0512f1f8f3e118da1513f7f5ad",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/718642f92e10eb0512f1f8f3e118da1513f7f5ad",
        "files": [
          "drivers/shared/capabilities/defaults.go"
        ],
        "message": "backport of commit 5dfb38d80667e3ae3985a369fa86c9fcc6697e23 (#24453)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "drivers/shared/capabilities/defaults.go||drivers/shared/capabilities/defaults.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/shared/capabilities/defaults.go||drivers/shared/capabilities/defaults.go": [
          "File: drivers/shared/capabilities/defaults.go -> drivers/shared/capabilities/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"regexp\"",
          "10:  \"github.com/moby/sys/capability\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"runtime\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: func Supported() *Set {",
          "41:  s := New(nil)",
          "45:  for _, c := range list {",
          "46:   s.Add(c.String())",
          "",
          "[Removed Lines]",
          "43:  list, _ := capability.ListSupported()",
          "",
          "[Added Lines]",
          "44:  var list []capability.Cap",
          "46:  switch runtime.GOOS {",
          "47:  case \"linux\":",
          "48:   list, _ = capability.ListSupported()",
          "49:  default:",
          "52:   list = capability.ListKnown()",
          "53:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8107454653bb151193a0f103f969e014aff7e9b1",
      "candidate_info": {
        "commit_hash": "8107454653bb151193a0f103f969e014aff7e9b1",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/8107454653bb151193a0f103f969e014aff7e9b1",
        "files": [
          "nomad/fsm.go"
        ],
        "message": "backport of commit 645923274d20bf8d77fa10c9a1428e175eccca41 (#24417)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "nomad/fsm.go||nomad/fsm.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/fsm.go||nomad/fsm.go": [
          "File: nomad/fsm.go -> nomad/fsm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:   snapType := SnapshotType(msgType[0])",
          "1565:   switch snapType {",
          "1566:   case TimeTableSnapshot:",
          "1570:   case NodeSnapshot:",
          "1571:    node := new(structs.Node)",
          "1572:    if err := dec.Decode(node); err != nil {",
          "",
          "[Removed Lines]",
          "1569:    return nil",
          "",
          "[Added Lines]",
          "1569:    var table []TimeTableEntry",
          "1570:    if err := dec.Decode(&table); err != nil {",
          "1571:     return err",
          "1572:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3311:  }",
          "3312:  return fmt.Sprintf(\"Unknown(%d)\", s)",
          "3313: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3321: type TimeTableEntry struct {",
          "3322:  Index uint64",
          "3323:  Time  time.Time",
          "3324: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}