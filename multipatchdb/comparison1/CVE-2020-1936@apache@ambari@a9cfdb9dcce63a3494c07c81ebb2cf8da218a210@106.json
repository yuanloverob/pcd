{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dacfd92e07e2cedf7d172c637cfeeb1a39611d66",
      "candidate_info": {
        "commit_hash": "dacfd92e07e2cedf7d172c637cfeeb1a39611d66",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/dacfd92e07e2cedf7d172c637cfeeb1a39611d66",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java"
        ],
        "message": "AMBARI-25341 SmartSense API call fails with Unsupported Media Type (#3057)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java||ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java||ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Enumeration;",
          "24: import java.util.HashSet;",
          "25: import java.util.Set;",
          "27: import javax.servlet.Filter;",
          "28: import javax.servlet.FilterChain;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     private static final Logger logger = LoggerFactory.getLogger(ContentTypeOverrideFilter.class);",
          "67:     class ContentTypeOverrideRequestWrapper extends HttpServletRequestWrapper {",
          "",
          "[Removed Lines]",
          "65:     private final Set<String> excludedUrls = new HashSet<>();",
          "",
          "[Added Lines]",
          "66:     private final Set<Pattern> excludedUrls = new HashSet<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:             HttpServletRequest httpServletRequest = (HttpServletRequest) request;",
          "134:             String contentType = httpServletRequest.getContentType();",
          "137:                 ContentTypeOverrideRequestWrapper requestWrapper = new ContentTypeOverrideRequestWrapper(httpServletRequest);",
          "138:                 ContentTypeOverrideResponseWrapper responseWrapper = new ContentTypeOverrideResponseWrapper((HttpServletResponse) response);",
          "",
          "[Removed Lines]",
          "136:             if (contentType != null && contentType.startsWith(MediaType.APPLICATION_JSON) && !excludedUrls.contains(httpServletRequest.getPathInfo())) {",
          "",
          "[Added Lines]",
          "137:             if (contentType != null && contentType.startsWith(MediaType.APPLICATION_JSON) && !isUrlExcluded(httpServletRequest.getPathInfo())) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:                             Consumes consumesAnnotation = method.getAnnotation(Consumes.class);",
          "162:                             for (String consume : consumesAnnotation.value()) {",
          "163:                                 if (MediaType.APPLICATION_JSON.equals(consume)) {",
          "165:                                     continue restart;",
          "166:                                 }",
          "167:                             }",
          "",
          "[Removed Lines]",
          "164:                                     excludedUrls.add(path.value());",
          "",
          "[Added Lines]",
          "165:                                     excludedUrls.add(Pattern.compile(path.value()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:             logger.error(\"Failed to discover URLs that are excluded from Content-Type override. Falling back to pre-defined list of exluded URLs.\", e);",
          "177:         }",
          "178:     }",
          "180:     @Override",
          "181:     public void destroy() {",
          "182:     }",
          "",
          "[Removed Lines]",
          "176:             excludedUrls.add(\"/bootstrap\");",
          "",
          "[Added Lines]",
          "177:             excludedUrls.add(Pattern.compile(\"/bootstrap\"));",
          "178:         } finally {",
          "179:             excludedUrls.add(Pattern.compile(\"/views/.*\"));",
          "183:     private boolean isUrlExcluded(String pathInfo) {",
          "184:         return excludedUrls.stream().anyMatch(p -> p.matcher(pathInfo).matches());",
          "185:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3503896cd57e2a520c350b41e5ec9b62409037a2",
      "candidate_info": {
        "commit_hash": "3503896cd57e2a520c350b41e5ec9b62409037a2",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3503896cd57e2a520c350b41e5ec9b62409037a2",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ],
        "message": "Revert hive pre-upgrade script commits in PR #1886",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import os",
          "22: import shutil",
          "23: import traceback",
          "26: # Ambari Commons & Resource Management Imports",
          "27: from resource_management.core.exceptions import Fail",
          "",
          "[Removed Lines]",
          "24: import glob",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:       hive_kinit_cmd = format(\"{kinit_path_local} -kt {hive_server2_keytab} {hive_principal}; \")",
          "100:       Execute(hive_kinit_cmd, user = params.hive_user)",
          "107:     cmd = format(\"{java64_home}/bin/java -Djavax.security.auth.useSubjectCredsOnly=false -cp {classpath} org.apache.hadoop.hive.upgrade.acid.PreUpgradeTool -execute\")",
          "108:     Execute(cmd, user = params.hive_user)",
          "",
          "[Removed Lines]",
          "102:     classpath = format(\"{source_dir}/hive2/lib/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{source_dir}/hadoop-hdfs/*:{source_dir}/hadoop-hdfs/lib/*:{source_dir}/hadoop/etc/hadoop/:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf/conf.server\")",
          "103:     # hack to avoid derby cp issue we want derby-10.10.2.0.jar to appear first in cp, if its available, note other derby jars are derbyclient-10.11.1.1.jar  derbynet-10.11.1.1.jar",
          "104:     derby_jars = glob.glob(source_dir+\"/hive2/lib/*derby-*.jar\")",
          "105:     if len(derby_jars) == 1:",
          "106:       classpath = derby_jars[0] + \":\" + classpath",
          "",
          "[Added Lines]",
          "102:     classpath = format(\"{source_dir}/hive2/lib/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fac419b5cb4dbdc3eddb0c6e1c336143760786b0",
      "candidate_info": {
        "commit_hash": "fac419b5cb4dbdc3eddb0c6e1c336143760786b0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/fac419b5cb4dbdc3eddb0c6e1c336143760786b0",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java"
        ],
        "message": "AMBARI-24879. kAdmin principal name is set on the GUI when enabling Kerberos with MIT KDC using a new variable replacement function (#2788)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:   }",
          "256:   @Override",
          "258:     return new String[]{",
          "259:         executableKinit,",
          "260:         \"-c\",",
          "",
          "[Removed Lines]",
          "257:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache) {",
          "",
          "[Added Lines]",
          "257:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache, Map<String, String> kerberosConfiguration) {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     executableKinit = getExecutable(\"kinit\");",
          "115:   }",
          "117:   @Override",
          "",
          "[Removed Lines]",
          "114:     setOpen(init());",
          "",
          "[Added Lines]",
          "114:     setOpen(init(kerberosConfiguration));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "274:   protected abstract String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache);",
          "",
          "[Added Lines]",
          "276:   protected abstract String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache, Map<String, String> kerberosConfigurations) throws KerberosOperationException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:     if (credentialsCacheFile != null) {",
          "299:       if (!credentialsCacheFile.delete()) {",
          "300:         LOG.debug(\"Failed to remove the orphaned cache file, {}\", credentialsCacheFile.getAbsolutePath());",
          "",
          "[Removed Lines]",
          "297:   protected boolean init() throws KerberosOperationException {",
          "",
          "[Added Lines]",
          "299:   protected boolean init(Map<String, String> kerberosConfiguration) throws KerberosOperationException {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "318:     PrincipalKeyCredential credentials = getAdministratorCredential();",
          "321:         environmentMap,",
          "322:         new InteractivePasswordHandler(String.valueOf(credentials.getKey()), null));",
          "",
          "[Removed Lines]",
          "320:     ShellCommandUtil.Result result = executeCommand(getKinitCommand(executableKinit, credentials, credentialsCache),",
          "",
          "[Added Lines]",
          "322:     ShellCommandUtil.Result result = executeCommand(getKinitCommand(executableKinit, credentials, credentialsCache, kerberosConfiguration),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   public final static String KERBEROS_ENV_ADMIN_SERVER_HOST = \"admin_server_host\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   public final static String KERBEROS_ENV_KADMIN_PRINCIPAL_NAME = \"kadmin_principal_name\";",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.serveraction.kerberos;",
          "21: import java.util.ArrayList;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.Set;",
          "26: import org.apache.ambari.server.configuration.Configuration;",
          "27: import org.apache.ambari.server.security.credential.PrincipalKeyCredential;",
          "28: import org.apache.ambari.server.utils.ShellCommandUtil;",
          "29: import org.apache.commons.collections.CollectionUtils;",
          "30: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.HashMap;",
          "27: import org.apache.ambari.server.AmbariException;",
          "30: import org.apache.ambari.server.state.kerberos.VariableReplacementHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   @Inject",
          "49:   private Configuration configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   @Inject",
          "55:   private VariableReplacementHelper variableReplacementHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:   }",
          "335:   @Override",
          "346:   }",
          "348:   @Override",
          "",
          "[Removed Lines]",
          "336:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache) {",
          "338:     return new String[]{",
          "339:         executableKinit,",
          "340:         \"-c\",",
          "341:         credentialsCache,",
          "342:         \"-S\",",
          "343:         String.format(\"kadmin/%s\", getAdminServerHost(false)),",
          "344:         credentials.getPrincipal()",
          "345:     };",
          "",
          "[Added Lines]",
          "342:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache, Map<String, String> kerberosConfiguration) throws KerberosOperationException {",
          "344:     try {",
          "345:       final String kadminPrincipalName = variableReplacementHelper.replaceVariables(kerberosConfiguration.get(KERBEROS_ENV_KADMIN_PRINCIPAL_NAME), buildReplacementsMap(kerberosConfiguration));",
          "346:       return new String[]{",
          "347:           executableKinit,",
          "348:           \"-c\",",
          "349:           credentialsCache,",
          "350:           \"-S\",",
          "351:           kadminPrincipalName,",
          "352:           credentials.getPrincipal()",
          "353:       };",
          "354:     } catch (AmbariException e) {",
          "355:       throw new KerberosOperationException(\"Error while getting 'kinit' command\", e);",
          "356:     }",
          "357:   }",
          "359:   private Map<String, Map<String, String>> buildReplacementsMap(Map<String, String> kerberosConfiguration) {",
          "360:     final Map<String, Map<String, String>> replacementsMap = new HashMap<>();",
          "361:     replacementsMap.put(\"\", kerberosConfiguration);",
          "362:     return replacementsMap;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       put(\"replace\", new ReplaceValue());",
          "61:       put(\"append\", new AppendFunction());",
          "62:       put(\"principalPrimary\", new PrincipalPrimary());",
          "63:     }",
          "64:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       put(\"stripPort\", new StripPort());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:       }",
          "433:     }",
          "434:   }",
          "435: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:   private static class StripPort implements Function {",
          "442:     @Override",
          "443:     public String perform(String[] args, String data, Map<String, Map<String, String>> replacementsMap) {",
          "444:       if (data == null) {",
          "445:         return null;",
          "446:       }",
          "447:       final int semicolonIndex = data.indexOf(\":\");",
          "448:       return semicolonIndex == -1 ? data : data.substring(0, semicolonIndex);",
          "449:     }",
          "450:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     Map<String,String> config = new HashMap<>();",
          "267:     config.put(\"encryption_types\", \"aes des3-cbc-sha1 rc4 des-cbc-md5\");",
          "269:     replayAll();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     config.put(MITKerberosOperationHandler.KERBEROS_ENV_KADMIN_PRINCIPAL_NAME, \"kadmin/kdc.example.com\");",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:         put(\"\", new HashMap<String, String>() {{",
          "197:           put(\"delimited.data\", \"one,two,three,four\");",
          "198:           put(\"realm\", \"UNIT.TEST\");",
          "199:         }});",
          "201:         put(\"kafka-broker\", new HashMap<String, String>() {{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:           put(\"admin_server_host\", \"c7401.ambari.apache.org\");",
          "200:           put(\"admin_server_host_port\", \"c7401.ambari.apache.org:8080\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:     assertEquals(\"test=unit.test\", helper.replaceVariables(\"test=${realm|toLower()}\", configurations));",
          "261:     assertEquals(\"PLAINTEXTSASL://localhost:6667\", helper.replaceVariables(\"${kafka-broker/listeners|replace(\\\\bPLAINTEXT\\\\b,PLAINTEXTSASL)}\", configurations));",
          "262:   }",
          "264:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     assertEquals(\"kadmin/c7401.ambari.apache.org\", helper.replaceVariables(\"kadmin/${admin_server_host|stripPort()}\", configurations));",
          "266:     assertEquals(\"kadmin/c7401.ambari.apache.org\", helper.replaceVariables(\"kadmin/${admin_server_host_port|stripPort()}\", configurations));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "177450b7449bcc95c5feb42850c8fc0c39fe491d",
      "candidate_info": {
        "commit_hash": "177450b7449bcc95c5feb42850c8fc0c39fe491d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/177450b7449bcc95c5feb42850c8fc0c39fe491d",
        "files": [
          "ambari-web/app/mixins/wizard/assign_master_components.js"
        ],
        "message": "AMBARI-24236 Ambari UI \"NEXT\" button is disabled for add service step of Spectrum Scale",
        "before_after_code_files": [
          "ambari-web/app/mixins/wizard/assign_master_components.js||ambari-web/app/mixins/wizard/assign_master_components.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/wizard/assign_master_components.js||ambari-web/app/mixins/wizard/assign_master_components.js": [
          "File: ambari-web/app/mixins/wizard/assign_master_components.js -> ambari-web/app/mixins/wizard/assign_master_components.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1185:     this.getRecommendedHosts({",
          "1186:       hosts: hostNames,",
          "1187:       components: this.getCurrentComponentHostMap()",
          "1189:       self.validateSelectedHostComponents({",
          "1190:         hosts: hostNames,",
          "1191:         blueprint: self.get('recommendations')",
          "1193:         if (callback) {",
          "1194:           callback();",
          "1195:         }",
          "",
          "[Removed Lines]",
          "1188:     }).then(function() {",
          "1192:       }).then(function() {",
          "",
          "[Added Lines]",
          "1188:     }).done(function() {",
          "1192:       }).always(function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1199:           self.recommendAndValidate(callback);",
          "1200:         }",
          "1201:       });",
          "1203:   },",
          "1205:   getCurrentComponentHostMap: function() {",
          "",
          "[Removed Lines]",
          "1202:     }, true);",
          "",
          "[Added Lines]",
          "1202:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "beb2133219f22e502892243d9d9867ebad3dbac1",
      "candidate_info": {
        "commit_hash": "beb2133219f22e502892243d9d9867ebad3dbac1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/beb2133219f22e502892243d9d9867ebad3dbac1",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java"
        ],
        "message": "AMBARI-9016 - Ambari API uses HTTP Header Content-Type:text/plain when the content is JSON. (#3015)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java||ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java||ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/api/ContentTypeOverrideFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.api;",
          "20: import java.io.IOException;",
          "21: import java.lang.reflect.Method;",
          "22: import java.util.Collections;",
          "23: import java.util.Enumeration;",
          "24: import java.util.HashSet;",
          "25: import java.util.Set;",
          "27: import javax.servlet.Filter;",
          "28: import javax.servlet.FilterChain;",
          "29: import javax.servlet.FilterConfig;",
          "30: import javax.servlet.ServletException;",
          "31: import javax.servlet.ServletRequest;",
          "32: import javax.servlet.ServletResponse;",
          "33: import javax.servlet.http.HttpServletRequest;",
          "34: import javax.servlet.http.HttpServletRequestWrapper;",
          "35: import javax.servlet.http.HttpServletResponse;",
          "36: import javax.servlet.http.HttpServletResponseWrapper;",
          "38: import javax.ws.rs.Consumes;",
          "39: import javax.ws.rs.Path;",
          "40: import javax.ws.rs.core.HttpHeaders;",
          "41: import javax.ws.rs.core.MediaType;",
          "43: import org.slf4j.Logger;",
          "44: import org.slf4j.LoggerFactory;",
          "46: import com.google.common.collect.ImmutableSet;",
          "47: import com.google.common.reflect.ClassPath;",
          "61: public class ContentTypeOverrideFilter implements Filter {",
          "63:     private static final Logger logger = LoggerFactory.getLogger(ContentTypeOverrideFilter.class);",
          "65:     private final Set<String> excludedUrls = new HashSet<>();",
          "67:     class ContentTypeOverrideRequestWrapper extends HttpServletRequestWrapper {",
          "69:         public ContentTypeOverrideRequestWrapper(HttpServletRequest request) {",
          "70:             super(request);",
          "71:         }",
          "73:         @Override",
          "74:         public Enumeration<String> getHeaders(String name) {",
          "75:             Enumeration<String> headerValues = super.getHeaders(name);",
          "76:             if (HttpHeaders.CONTENT_TYPE.equals(name)) {",
          "77:                 Set<String> newContentTypeValues = new HashSet<>();",
          "78:                 while (headerValues.hasMoreElements()) {",
          "79:                     String value = headerValues.nextElement();",
          "80:                     if(value != null && value.startsWith(MediaType.APPLICATION_JSON)) {",
          "81:                         newContentTypeValues.add(value.replace(MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN));",
          "82:                     } else {",
          "83:                         newContentTypeValues.add(value);",
          "84:                     }",
          "85:                 }",
          "86:                 return Collections.enumeration(newContentTypeValues);",
          "87:             }",
          "88:             return headerValues;",
          "89:         }",
          "91:         @Override",
          "92:         public String getHeader(String name) {",
          "93:             if (HttpHeaders.CONTENT_TYPE.equals(name)) {",
          "94:                 String header = super.getHeader(name);",
          "95:                 if (header != null && header.startsWith(MediaType.APPLICATION_JSON)) {",
          "96:                     return header.replace(MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN);",
          "97:                 }",
          "98:             }",
          "99:             return super.getHeader(name);",
          "100:         }",
          "101:     }",
          "103:     class ContentTypeOverrideResponseWrapper extends HttpServletResponseWrapper {",
          "105:         public ContentTypeOverrideResponseWrapper(HttpServletResponse response) {",
          "106:             super(response);",
          "107:             super.setContentType(MediaType.APPLICATION_JSON);",
          "108:         }",
          "110:         @Override",
          "111:         public void setHeader(String name, String value) {",
          "112:             if (!HttpHeaders.CONTENT_TYPE.equals(name)) {",
          "113:                 super.setHeader(name, value);",
          "114:             }",
          "115:         }",
          "117:         @Override",
          "118:         public void addHeader(String name, String value) {",
          "119:             if (!HttpHeaders.CONTENT_TYPE.equals(name)) {",
          "120:                 super.addHeader(name, value);",
          "121:             }",
          "122:         }",
          "124:         @Override",
          "125:         public void setContentType(String type) {",
          "127:         }",
          "128:     }",
          "130:     @Override",
          "131:     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {",
          "132:         if (request instanceof HttpServletRequest) {",
          "133:             HttpServletRequest httpServletRequest = (HttpServletRequest) request;",
          "134:             String contentType = httpServletRequest.getContentType();",
          "136:             if (contentType != null && contentType.startsWith(MediaType.APPLICATION_JSON) && !excludedUrls.contains(httpServletRequest.getPathInfo())) {",
          "137:                 ContentTypeOverrideRequestWrapper requestWrapper = new ContentTypeOverrideRequestWrapper(httpServletRequest);",
          "138:                 ContentTypeOverrideResponseWrapper responseWrapper = new ContentTypeOverrideResponseWrapper((HttpServletResponse) response);",
          "140:                 chain.doFilter(requestWrapper, responseWrapper);",
          "141:                 return;",
          "142:             }",
          "143:         }",
          "145:         chain.doFilter(request, response);",
          "146:     }",
          "148:     @Override",
          "149:     public void init(FilterConfig filterConfig) throws ServletException {",
          "150:         try {",
          "151:             ClassPath classPath = ClassPath.from(ClassLoader.getSystemClassLoader());",
          "152:             ImmutableSet<ClassPath.ClassInfo> classes = classPath.getTopLevelClassesRecursive(\"org.apache.ambari.server.api\");",
          "154:             restart:",
          "155:             for (ClassPath.ClassInfo classInfo: classes) {",
          "156:                 Class<?> clazz = classInfo.load();",
          "157:                 if (clazz.isAnnotationPresent(Path.class)) {",
          "158:                     Path path = clazz.getAnnotation(Path.class);",
          "159:                     for (Method method : clazz.getMethods()) {",
          "160:                         if (method.isAnnotationPresent(Consumes.class)) {",
          "161:                             Consumes consumesAnnotation = method.getAnnotation(Consumes.class);",
          "162:                             for (String consume : consumesAnnotation.value()) {",
          "163:                                 if (MediaType.APPLICATION_JSON.equals(consume)) {",
          "164:                                     excludedUrls.add(path.value());",
          "165:                                     continue restart;",
          "166:                                 }",
          "167:                             }",
          "168:                         }",
          "169:                     }",
          "170:                 }",
          "171:             }",
          "172:         } catch (Exception e) {",
          "173:             logger.error(\"Failed to discover URLs that are excluded from Content-Type override. Falling back to pre-defined list of exluded URLs.\", e);",
          "176:             excludedUrls.add(\"/bootstrap\");",
          "177:         }",
          "178:     }",
          "180:     @Override",
          "181:     public void destroy() {",
          "182:     }",
          "183: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.apache.ambari.server.agent.rest.AgentResource;",
          "43: import org.apache.ambari.server.api.AmbariErrorHandler;",
          "44: import org.apache.ambari.server.api.AmbariPersistFilter;",
          "45: import org.apache.ambari.server.api.MethodOverrideFilter;",
          "46: import org.apache.ambari.server.api.UserNameOverrideFilter;",
          "47: import org.apache.ambari.server.api.rest.BootStrapResource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.ambari.server.api.ContentTypeOverrideFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:       root.addFilter(new FilterHolder(injector.getInstance(AmbariPersistFilter.class)), \"/api/*\", DISPATCHER_TYPES);",
          "421:       root.addFilter(new FilterHolder(new MethodOverrideFilter()), \"/api/*\", DISPATCHER_TYPES);",
          "424:       root.addEventListener(new RequestContextListener());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:       root.addFilter(new FilterHolder(new ContentTypeOverrideFilter()), \"/api/*\", DISPATCHER_TYPES);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java -> ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.api;",
          "21: import static org.easymock.EasyMock.expect;",
          "23: import java.io.IOException;",
          "24: import java.util.Vector;",
          "26: import javax.servlet.FilterChain;",
          "27: import javax.servlet.ServletException;",
          "28: import javax.servlet.ServletRequest;",
          "29: import javax.servlet.ServletResponse;",
          "30: import javax.servlet.http.HttpServletRequest;",
          "31: import javax.servlet.http.HttpServletResponse;",
          "33: import javax.ws.rs.core.HttpHeaders;",
          "34: import javax.ws.rs.core.MediaType;",
          "36: import org.easymock.EasyMockRule;",
          "37: import org.easymock.EasyMockSupport;",
          "38: import org.easymock.Mock;",
          "39: import org.easymock.MockType;",
          "40: import org.junit.Rule;",
          "41: import org.junit.Test;",
          "43: import junit.framework.Assert;",
          "46: public class ContentTypeOverrideFilterTest extends EasyMockSupport {",
          "48:     private class FilterChainMock implements FilterChain {",
          "49:         HttpServletResponse response;",
          "50:         HttpServletRequest request;",
          "52:         @Override",
          "53:         public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {",
          "54:             this.request = (HttpServletRequest) request;",
          "55:             this.response = (HttpServletResponse) response;",
          "56:         }",
          "57:     }",
          "59:     @Rule",
          "60:     public EasyMockRule mock = new EasyMockRule(this);",
          "62:     @Mock(type = MockType.NICE)",
          "63:     private HttpServletRequest request;",
          "65:     @Mock(type = MockType.NICE)",
          "66:     private HttpServletResponse response;",
          "68:     private final ContentTypeOverrideFilter filter = new ContentTypeOverrideFilter();",
          "70:     @Test",
          "71:     public void testJSONContentTypeRequest() throws Exception {",
          "72:         Vector<String> headers = new Vector<>(1);",
          "73:         headers.add(MediaType.APPLICATION_JSON);",
          "75:         expect(request.getContentType()).andReturn(MediaType.APPLICATION_JSON).atLeastOnce();",
          "76:         expect(request.getHeader(HttpHeaders.CONTENT_TYPE)).andReturn(MediaType.APPLICATION_JSON).atLeastOnce();",
          "77:         expect(request.getHeaders(HttpHeaders.CONTENT_TYPE)).andReturn(headers.elements()).atLeastOnce();",
          "78:         replayAll();",
          "80:         FilterChainMock chain = new FilterChainMock();",
          "81:         filter.doFilter(request, response, chain);",
          "83:         Assert.assertEquals(MediaType.TEXT_PLAIN, chain.request.getHeader(HttpHeaders.CONTENT_TYPE));",
          "84:         Assert.assertEquals(MediaType.TEXT_PLAIN, chain.request.getHeaders(HttpHeaders.CONTENT_TYPE).nextElement());",
          "86:         verifyAll();",
          "87:     }",
          "88: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}