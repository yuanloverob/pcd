{
  "cve_id": "CVE-2024-31869",
  "cve_desc": "Airflow versions 2.7.0 through 2.8.4 have a vulnerability that allows an authenticated user to see sensitive provider configuration via the \"configuration\" UI page\u00a0when \"non-sensitive-only\" was set as \"webserver.expose_config\" configuration (The celery provider is the only community provider currently that has sensitive configurations). You should migrate to Airflow 2.9 or change your \"expose_config\" configuration to False as a workaround. This is similar, but different to  CVE-2023-46288 https://github.com/advisories/GHSA-9qqg-mh7c-chfq  which concerned API, not UI configuration page.",
  "repo": "apache/airflow",
  "patch_hash": "042c2acaed7c01933d37c2f8434640ce140a4b27",
  "patch_info": {
    "commit_hash": "042c2acaed7c01933d37c2f8434640ce140a4b27",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/042c2acaed7c01933d37c2f8434640ce140a4b27",
    "files": [
      "airflow/www/gunicorn_config.py"
    ],
    "message": "Load providers configuration when gunicorn workers start (#38795)\n\nWhen Gunicorn workers start, they do not fork, but start as new\nPython interpreters and they should also perform loadig of the\nconfiguration from installed providers.",
    "before_after_code_files": [
      "airflow/www/gunicorn_config.py||airflow/www/gunicorn_config.py"
    ]
  },
  "patch_diff": {
    "airflow/www/gunicorn_config.py||airflow/www/gunicorn_config.py": [
      "File: airflow/www/gunicorn_config.py -> airflow/www/gunicorn_config.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: def on_starting(server):",
      "37:     from airflow.providers_manager import ProvidersManager",
      "39:     # Load providers before forking workers",
      "",
      "[Removed Lines]",
      "40:     ProvidersManager().connection_form_widgets",
      "",
      "[Added Lines]",
      "39:     providers_manager = ProvidersManager()",
      "40:     # Load providers configuration before forking workers",
      "41:     providers_manager.initialize_providers_configuration()",
      "43:     providers_manager.connection_form_widgets",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3eb5f73d617b7482fdcc81a888e3599f1f63d75",
      "candidate_info": {
        "commit_hash": "a3eb5f73d617b7482fdcc81a888e3599f1f63d75",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/a3eb5f73d617b7482fdcc81a888e3599f1f63d75",
        "files": [
          "airflow/www/gunicorn_config.py"
        ],
        "message": "Load providers configuration when gunicorn workers start (#38795)\n\nWhen Gunicorn workers start, they do not fork, but start as new\nPython interpreters and they should also perform loadig of the\nconfiguration from installed providers.\n\n(cherry picked from commit 042c2acaed7c01933d37c2f8434640ce140a4b27)",
        "before_after_code_files": [
          "airflow/www/gunicorn_config.py||airflow/www/gunicorn_config.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/gunicorn_config.py||airflow/www/gunicorn_config.py"
          ],
          "candidate": [
            "airflow/www/gunicorn_config.py||airflow/www/gunicorn_config.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/gunicorn_config.py||airflow/www/gunicorn_config.py": [
          "File: airflow/www/gunicorn_config.py -> airflow/www/gunicorn_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: def on_starting(server):",
          "37:     from airflow.providers_manager import ProvidersManager",
          "39:     # Load providers before forking workers",
          "",
          "[Removed Lines]",
          "40:     ProvidersManager().connection_form_widgets",
          "",
          "[Added Lines]",
          "39:     providers_manager = ProvidersManager()",
          "40:     # Load providers configuration before forking workers",
          "41:     providers_manager.initialize_providers_configuration()",
          "43:     providers_manager.connection_form_widgets",
          "",
          "---------------"
        ]
      }
    }
  ]
}