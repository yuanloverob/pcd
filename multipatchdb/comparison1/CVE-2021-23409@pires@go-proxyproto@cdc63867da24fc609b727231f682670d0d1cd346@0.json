{
  "cve_id": "CVE-2021-23409",
  "cve_desc": "The package github.com/pires/go-proxyproto before 0.6.0 are vulnerable to Denial of Service (DoS) via creating connections without the proxy protocol header.",
  "repo": "pires/go-proxyproto",
  "patch_hash": "cdc63867da24fc609b727231f682670d0d1cd346",
  "patch_info": {
    "commit_hash": "cdc63867da24fc609b727231f682670d0d1cd346",
    "repo": "pires/go-proxyproto",
    "commit_url": "https://github.com/pires/go-proxyproto/pull/74/commits/cdc63867da24fc609b727231f682670d0d1cd346",
    "files": [
      "README.md",
      "examples/client/client.go",
      "examples/httpserver/httpserver.go",
      "examples/server/server.go",
      "protocol.go",
      "protocol_test.go"
    ],
    "message": "Add support for ReadHeaderTimeout\n\nSet a read deadline when waiting for the PROXY protocol header.\nFix for #65",
    "before_after_code_files": [
      "examples/client/client.go||examples/client/client.go",
      "examples/httpserver/httpserver.go||examples/httpserver/httpserver.go",
      "examples/server/server.go||examples/server/server.go",
      "protocol.go||protocol.go",
      "protocol_test.go||protocol_test.go"
    ]
  },
  "patch_diff": {
    "examples/client/client.go||examples/client/client.go": [
      "File: examples/client/client.go -> examples/client/client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package main",
      "3: import (",
      "4:  \"io\"",
      "5:  \"log\"",
      "6:  \"net\"",
      "8:  proxyproto \"github.com/pires/go-proxyproto\"",
      "9: )",
      "11: func chkErr(err error) {",
      "12:  if err != nil {",
      "13:   log.Fatalf(\"Error: %s\", err.Error())",
      "14:  }",
      "15: }",
      "17: func main() {",
      "19:  target, err := net.ResolveTCPAddr(\"tcp\", \"127.0.0.1:9876\")",
      "20:  chkErr(err)",
      "22:  conn, err := net.DialTCP(\"tcp\", nil, target)",
      "23:  chkErr(err)",
      "25:  defer conn.Close()",
      "29:  header := &proxyproto.Header{",
      "30:   Version:           1,",
      "31:   Command:           proxyproto.PROXY,",
      "32:   TransportProtocol: proxyproto.TCPv4,",
      "33:   SourceAddr: &net.TCPAddr{",
      "34:    IP:   net.ParseIP(\"10.1.1.1\"),",
      "35:    Port: 1000,",
      "36:   },",
      "37:   DestinationAddr: &net.TCPAddr{",
      "38:    IP:   net.ParseIP(\"20.2.2.2\"),",
      "39:    Port: 2000,",
      "40:   },",
      "41:  }",
      "43:  _, err = header.WriteTo(conn)",
      "44:  chkErr(err)",
      "46:  _, err = io.WriteString(conn, \"HELO\")",
      "47:  chkErr(err)",
      "48: }",
      "",
      "---------------"
    ],
    "examples/httpserver/httpserver.go||examples/httpserver/httpserver.go": [
      "File: examples/httpserver/httpserver.go -> examples/httpserver/httpserver.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package main",
      "3: import (",
      "4:  \"log\"",
      "5:  \"net\"",
      "6:  \"net/http\"",
      "7:  \"time\"",
      "9:  \"github.com/pires/go-proxyproto\"",
      "10: )",
      "14: func main() {",
      "15:  server := http.Server{",
      "16:   Addr: \":8080\",",
      "17:   ConnState: func(c net.Conn, s http.ConnState) {",
      "18:    if s == http.StateNew {",
      "19:     log.Printf(\"[ConnState] %s -> %s\", c.LocalAddr().String(), c.RemoteAddr().String())",
      "20:    }",
      "21:   },",
      "22:   Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "23:    log.Printf(\"[Handler] remote ip %q\", r.RemoteAddr)",
      "24:   }),",
      "25:  }",
      "27:  ln, err := net.Listen(\"tcp\", server.Addr)",
      "28:  if err != nil {",
      "29:   panic(err)",
      "30:  }",
      "32:  proxyListener := &proxyproto.Listener{",
      "33:   Listener:          ln,",
      "34:   ReadHeaderTimeout: 10 * time.Second,",
      "35:  }",
      "36:  defer proxyListener.Close()",
      "38:  server.Serve(proxyListener)",
      "39: }",
      "",
      "---------------"
    ],
    "examples/server/server.go||examples/server/server.go": [
      "File: examples/server/server.go -> examples/server/server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package main",
      "3: import (",
      "4:  \"log\"",
      "5:  \"net\"",
      "7:  proxyproto \"github.com/pires/go-proxyproto\"",
      "8: )",
      "10: func main() {",
      "12:  addr := \"localhost:9876\"",
      "13:  list, err := net.Listen(\"tcp\", addr)",
      "14:  if err != nil {",
      "15:   log.Fatalf(\"couldn't listen to %q: %q\\n\", addr, err.Error())",
      "16:  }",
      "19:  proxyListener := &proxyproto.Listener{Listener: list}",
      "20:  defer proxyListener.Close()",
      "23:  conn, err := proxyListener.Accept()",
      "24:  defer conn.Close()",
      "27:  if conn.LocalAddr() == nil {",
      "28:   log.Fatal(\"couldn't retrieve local address\")",
      "29:  }",
      "30:  log.Printf(\"local address: %q\", conn.LocalAddr().String())",
      "32:  if conn.RemoteAddr() == nil {",
      "33:   log.Fatal(\"couldn't retrieve remote address\")",
      "34:  }",
      "35:  log.Printf(\"remote address: %q\", conn.RemoteAddr().String())",
      "36: }",
      "",
      "---------------"
    ],
    "protocol.go||protocol.go": [
      "File: protocol.go -> protocol.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: type Listener struct {",
      "19: }",
      "",
      "[Removed Lines]",
      "16:  Listener       net.Listener",
      "17:  Policy         PolicyFunc",
      "18:  ValidateHeader Validator",
      "",
      "[Added Lines]",
      "16:  Listener          net.Listener",
      "17:  Policy            PolicyFunc",
      "18:  ValidateHeader    Validator",
      "19:  ReadHeaderTimeout time.Duration",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:   return nil, err",
      "53:  }",
      "55:  proxyHeaderPolicy := USE",
      "56:  if p.Policy != nil {",
      "57:   proxyHeaderPolicy, err = p.Policy(conn.RemoteAddr())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:  if d := p.ReadHeaderTimeout; d != 0 {",
      "57:   conn.SetReadDeadline(time.Now().Add(d))",
      "58:  }",
      "",
      "---------------"
    ],
    "protocol_test.go||protocol_test.go": [
      "File: protocol_test.go -> protocol_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import (",
      "8:  \"bytes\"",
      "9:  \"crypto/tls\"",
      "10:  \"crypto/x509\"",
      "11:  \"fmt\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9:  \"context\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13:  \"io/ioutil\"",
      "14:  \"net\"",
      "15:  \"testing\"",
      "16: )",
      "18: func TestPassthrough(t *testing.T) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:  \"time\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "61:  }",
      "62: }",
      "64: func TestParse_ipv4(t *testing.T) {",
      "65:  l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
      "66:  if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66: func TestReadHeaderTimeout(t *testing.T) {",
      "67:  l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
      "68:  if err != nil {",
      "69:   t.Fatalf(\"err: %v\", err)",
      "70:  }",
      "72:  pl := &Listener{",
      "73:   Listener:          l,",
      "74:   ReadHeaderTimeout: 1 * time.Millisecond,",
      "75:  }",
      "77:  ctx, cancel := context.WithCancel(context.Background())",
      "78:  defer cancel()",
      "80:  go func() {",
      "81:   conn, err := net.Dial(\"tcp\", pl.Addr().String())",
      "82:   if err != nil {",
      "83:    t.Fatalf(\"err: %v\", err)",
      "84:   }",
      "85:   defer conn.Close()",
      "87:   <-ctx.Done()",
      "88:  }()",
      "90:  conn, err := pl.Accept()",
      "91:  if err != nil {",
      "92:   t.Fatalf(\"err: %v\", err)",
      "93:  }",
      "94:  defer conn.Close()",
      "97:  recv := make([]byte, 4)",
      "98:  _, err = conn.Read(recv)",
      "100: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c5719ad65057c247db83b3ab9316988d05436da",
      "candidate_info": {
        "commit_hash": "0c5719ad65057c247db83b3ab9316988d05436da",
        "repo": "pires/go-proxyproto",
        "commit_url": "https://github.com/pires/go-proxyproto/commit/0c5719ad65057c247db83b3ab9316988d05436da",
        "files": [
          "protocol.go",
          "protocol_test.go",
          "tlv_test.go"
        ],
        "message": "protocol: fix header timeout when the user supplied deadline(s)",
        "before_after_code_files": [
          "protocol.go||protocol.go",
          "protocol_test.go||protocol_test.go",
          "tlv_test.go||tlv_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "protocol.go||protocol.go",
            "protocol_test.go||protocol_test.go"
          ],
          "candidate": [
            "protocol.go||protocol.go",
            "protocol_test.go||protocol_test.go"
          ]
        }
      },
      "candidate_diff": {
        "protocol.go||protocol.go": [
          "File: protocol.go -> protocol.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "9: )",
          "15: type Listener struct {",
          "16:  Listener          net.Listener",
          "17:  Policy            PolicyFunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: var DEFAULT_TIMEOUT = 200 * time.Millisecond",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  ProxyHeaderPolicy Policy",
          "31:  Validate          Validator",
          "32:  readErr           error",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  readHeaderTimeout time.Duration",
          "40:  readDeadline      time.Time",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   return nil, err",
          "54:  }",
          "62:  proxyHeaderPolicy := USE",
          "63:  if p.Policy != nil {",
          "64:   proxyHeaderPolicy, err = p.Policy(conn.RemoteAddr())",
          "",
          "[Removed Lines]",
          "56:  if d := p.ReadHeaderTimeout; d != 0 {",
          "59:   conn.SetReadDeadline(time.Now().Add(d))",
          "60:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   WithPolicy(proxyHeaderPolicy),",
          "75:   ValidateHeader(p.ValidateHeader),",
          "76:  )",
          "77:  return newConn, nil",
          "78: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:  if p.ReadHeaderTimeout == 0 {",
          "82:   p.ReadHeaderTimeout = DEFAULT_TIMEOUT",
          "83:  }",
          "86:  newConn.readHeaderTimeout = p.ReadHeaderTimeout",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108: func (p *Conn) Read(b []byte) (int, error) {",
          "109:  p.once.Do(func() {",
          "110:   p.readErr = p.readHeader()",
          "112:  })",
          "113:  if p.readErr != nil {",
          "114:   return 0, p.readErr",
          "",
          "[Removed Lines]",
          "111:   p.conn.SetReadDeadline(time.Time{})",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203: func (p *Conn) SetDeadline(t time.Time) error {",
          "204:  return p.conn.SetDeadline(t)",
          "205: }",
          "208: func (p *Conn) SetReadDeadline(t time.Time) error {",
          "209:  return p.conn.SetReadDeadline(t)",
          "210: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:  p.readDeadline = t",
          "223:  p.readDeadline = t",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "215: }",
          "217: func (p *Conn) readHeader() error {",
          "218:  header, err := Read(p.bufReader)",
          "221:  if err == ErrNoProxyProtocol {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:  if p.readHeaderTimeout > 0 {",
          "238:   p.conn.SetReadDeadline(time.Now().Add(p.readHeaderTimeout))",
          "239:  }",
          "248:  if p.readHeaderTimeout > 0 {",
          "249:   p.conn.SetReadDeadline(p.readDeadline)",
          "250:   if netErr, ok := err.(net.Error); ok && netErr.Timeout() {",
          "251:    err = ErrNoProxyProtocol",
          "252:   }",
          "253:  }",
          "",
          "---------------"
        ],
        "protocol_test.go||protocol_test.go": [
          "File: protocol_test.go -> protocol_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"io\"",
          "15:  \"io/ioutil\"",
          "16:  \"net\"",
          "18:  \"testing\"",
          "19:  \"time\"",
          "20: )",
          "",
          "[Removed Lines]",
          "17:  \"os\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  }",
          "66: }",
          "69:  l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "70:  if err != nil {",
          "71:   t.Fatalf(\"err: %v\", err)",
          "72:  }",
          "74:  pl := &Listener{",
          "75:   Listener:          l,",
          "77:  }",
          "82:  go func() {",
          "83:   conn, err := net.Dial(\"tcp\", pl.Addr().String())",
          "84:   if err != nil {",
          "85:    t.Fatalf(\"err: %v\", err)",
          "86:   }",
          "87:   defer conn.Close()",
          "90:  }()",
          "92:  conn, err := pl.Accept()",
          "93:  if err != nil {",
          "94:   t.Fatalf(\"err: %v\", err)",
          "95:  }",
          "96:  defer conn.Close()",
          "99:  recv := make([]byte, 4)",
          "100:  _, err = conn.Read(recv)",
          "104:  }",
          "",
          "[Removed Lines]",
          "68: func TestReadHeaderTimeout(t *testing.T) {",
          "76:   ReadHeaderTimeout: time.Millisecond * 250,",
          "79:  ctx, cancel := context.WithCancel(context.Background())",
          "80:  defer cancel()",
          "89:   <-ctx.Done()",
          "102:  if err != nil && !errors.Is(err, os.ErrDeadlineExceeded) {",
          "103:   t.Fatal(\"should timeout\")",
          "105: }",
          "",
          "[Added Lines]",
          "70: func TestRequiredWithReadHeaderTimeout(t *testing.T) {",
          "71:  for _, duration := range []int{100, 200, 400} {",
          "72:   t.Run(fmt.Sprint(duration), func(t *testing.T) {",
          "73:    start := time.Now()",
          "75:    l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "77:    if err != nil {",
          "78:     t.Fatalf(\"err: %v\", err)",
          "79:    }",
          "81:    pl := &Listener{",
          "82:     Listener:          l,",
          "83:     ReadHeaderTimeout: time.Millisecond * time.Duration(duration),",
          "84:     Policy: func(upstream net.Addr) (Policy, error) {",
          "85:      return REQUIRE, nil",
          "86:     },",
          "87:    }",
          "89:    ctx, cancel := context.WithCancel(context.Background())",
          "90:    defer cancel()",
          "92:    go func() {",
          "93:     conn, err := net.Dial(\"tcp\", pl.Addr().String())",
          "94:     if err != nil {",
          "95:      t.Fatalf(\"err: %v\", err)",
          "96:     }",
          "97:     defer conn.Close()",
          "99:     <-ctx.Done()",
          "100:    }()",
          "102:    conn, err := pl.Accept()",
          "103:    if err != nil {",
          "104:     t.Fatalf(\"err: %v\", err)",
          "105:    }",
          "106:    defer conn.Close()",
          "109:    recv := make([]byte, 4)",
          "110:    _, err = conn.Read(recv)",
          "112:    if err != nil && !errors.Is(err, ErrNoProxyProtocol) && time.Since(start)-pl.ReadHeaderTimeout > 10*time.Millisecond {",
          "113:     t.Fatal(\"proxy proto should not be found and time should be close to read timeout\")",
          "114:    }",
          "115:   })",
          "116:  }",
          "117: }",
          "122: func TestUseWithReadHeaderTimeout(t *testing.T) {",
          "123:  for _, duration := range []int{100, 200, 400} {",
          "124:   t.Run(fmt.Sprint(duration), func(t *testing.T) {",
          "125:    start := time.Now()",
          "127:    l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "129:    if err != nil {",
          "130:     t.Fatalf(\"err: %v\", err)",
          "131:    }",
          "133:    pl := &Listener{",
          "134:     Listener:          l,",
          "135:     ReadHeaderTimeout: time.Millisecond * time.Duration(duration),",
          "136:     Policy: func(upstream net.Addr) (Policy, error) {",
          "137:      return USE, nil",
          "138:     },",
          "139:    }",
          "141:    ctx, cancel := context.WithCancel(context.Background())",
          "142:    defer cancel()",
          "144:    go func() {",
          "145:     conn, err := net.Dial(\"tcp\", pl.Addr().String())",
          "146:     if err != nil {",
          "147:      t.Fatalf(\"err: %v\", err)",
          "148:     }",
          "149:     defer conn.Close()",
          "151:     <-ctx.Done()",
          "152:    }()",
          "154:    conn, err := pl.Accept()",
          "155:    if err != nil {",
          "156:     t.Fatalf(\"err: %v\", err)",
          "157:    }",
          "158:    defer conn.Close()",
          "162:    conn.SetDeadline(time.Now().Add(pl.ReadHeaderTimeout * 2))",
          "165:    recv := make([]byte, 4)",
          "166:    _, err = conn.Read(recv)",
          "168:    if err != nil && !errors.Is(err, ErrNoProxyProtocol) && (time.Since(start)-(pl.ReadHeaderTimeout*2)) > 10*time.Millisecond {",
          "169:     t.Fatal(\"proxy proto should not be found and time should be close to read timeout\")",
          "170:    }",
          "171:   })",
          "172:  }",
          "173: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:  }",
          "161:  defer conn.Close()",
          "163:  recv := make([]byte, 4)",
          "164:  _, err = conn.Read(recv)",
          "165:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:  conn.SetReadDeadline(time.Now().Add(timeout * 3))",
          "233:  conn.SetWriteDeadline(time.Now().Add(timeout * 3))",
          "237:  if err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189: }",
          "191: func TestParse_ipv4(t *testing.T) {",
          "192:  l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "193:  if err != nil {",
          "",
          "[Removed Lines]",
          "188:  }",
          "",
          "[Added Lines]",
          "260:  }",
          "261: }",
          "267: func TestReadHeaderTimeoutIsEmpty(t *testing.T) {",
          "274:   Listener: l,",
          "298:   time.Sleep(250 * time.Millisecond)",
          "319:  addr := conn.RemoteAddr().(*net.TCPAddr)",
          "320:  if addr.IP.String() == \"10.1.1.1\" {",
          "321:   t.Fatalf(\"bad: %v\", addr)",
          "322:  }",
          "323:  if addr.Port == 1000 {",
          "324:   t.Fatalf(\"bad: %v\", addr)",
          "326: }",
          "331: func TestReadHeaderTimeoutIsNegative(t *testing.T) {",
          "332:  l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "333:  if err != nil {",
          "334:   t.Fatalf(\"err: %v\", err)",
          "335:  }",
          "337:  pl := &Listener{",
          "338:   Listener:          l,",
          "339:   ReadHeaderTimeout: -1,",
          "340:  }",
          "342:  header := &Header{",
          "343:   Version:           2,",
          "344:   Command:           PROXY,",
          "345:   TransportProtocol: TCPv4,",
          "346:   SourceAddr: &net.TCPAddr{",
          "347:    IP:   net.ParseIP(\"10.1.1.1\"),",
          "348:    Port: 1000,",
          "349:   },",
          "350:   DestinationAddr: &net.TCPAddr{",
          "351:    IP:   net.ParseIP(\"20.2.2.2\"),",
          "352:    Port: 2000,",
          "353:   },",
          "354:  }",
          "355:  go func() {",
          "356:   conn, err := net.Dial(\"tcp\", pl.Addr().String())",
          "357:   if err != nil {",
          "358:    t.Fatalf(\"err: %v\", err)",
          "359:   }",
          "360:   defer conn.Close()",
          "363:   time.Sleep(250 * time.Millisecond)",
          "366:   header.WriteTo(conn)",
          "368:   conn.Write([]byte(\"ping\"))",
          "369:  }()",
          "371:  conn, err := pl.Accept()",
          "372:  if err != nil {",
          "373:   t.Fatalf(\"err: %v\", err)",
          "374:  }",
          "375:  defer conn.Close()",
          "377:  recv := make([]byte, 4)",
          "378:  _, err = conn.Read(recv)",
          "379:  if err != nil {",
          "",
          "---------------"
        ],
        "tlv_test.go||tlv_test.go": [
          "File: tlv_test.go -> tlv_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  fixturePartialLenTLV = []byte{byte(PP2_TYPE_MIN_CUSTOM) + 3, 0x00, 0x02, 0x00}",
          "14: )",
          "40: var invalidTLVTests = []struct {",
          "41:  name          string",
          "42:  reader        *bufio.Reader",
          "",
          "[Removed Lines]",
          "16: func checkTLVs(t *testing.T, name string, raw []byte, expected []PP2Type) []TLV {",
          "17:  header, err := parseVersion2(bufio.NewReader(bytes.NewReader(raw)))",
          "18:  if err != nil {",
          "19:   t.Fatalf(\"%s: Unexpected error reading header %#v\", name, err)",
          "20:  }",
          "22:  tlvs, err := header.TLVs()",
          "23:  if err != nil {",
          "24:   t.Fatalf(\"%s: Unexpected error splitting TLVS %#v\", name, err)",
          "25:  }",
          "27:  if len(tlvs) != len(expected) {",
          "28:   t.Fatalf(\"%s: Expected %d TLVs, actual %d\", name, len(expected), len(tlvs))",
          "29:  }",
          "31:  for i, et := range expected {",
          "32:   if at := tlvs[i].Type; at != et {",
          "33:    t.Fatalf(\"%s: Expected type %X, actual %X\", name, et, at)",
          "34:   }",
          "35:  }",
          "37:  return tlvs",
          "38: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67d28b39ea9035b20147dc85a50cac96e17b78f8",
      "candidate_info": {
        "commit_hash": "67d28b39ea9035b20147dc85a50cac96e17b78f8",
        "repo": "pires/go-proxyproto",
        "commit_url": "https://github.com/pires/go-proxyproto/commit/67d28b39ea9035b20147dc85a50cac96e17b78f8",
        "files": [
          "protocol_test.go"
        ],
        "message": "protocol: prove erroneous timeout after timeout is set\n\nAs reported in #75\n\nSigned-off-by: Pires <pjpires@gmail.com>",
        "before_after_code_files": [
          "protocol_test.go||protocol_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "protocol_test.go||protocol_test.go"
          ],
          "candidate": [
            "protocol_test.go||protocol_test.go"
          ]
        }
      },
      "candidate_diff": {
        "protocol_test.go||protocol_test.go": [
          "File: protocol_test.go -> protocol_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"context\"",
          "10:  \"crypto/tls\"",
          "11:  \"crypto/x509\"",
          "12:  \"fmt\"",
          "13:  \"io\"",
          "14:  \"io/ioutil\"",
          "15:  \"net\"",
          "16:  \"testing\"",
          "17:  \"time\"",
          "18: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"errors\"",
          "17:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   conn, err := net.Dial(\"tcp\", pl.Addr().String())",
          "30:   if err != nil {",
          "31:    t.Fatalf(\"err: %v\", err)",
          "33:   defer conn.Close()",
          "35:   conn.Write([]byte(\"ping\"))",
          "",
          "[Removed Lines]",
          "32:   }",
          "",
          "[Added Lines]",
          "34:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:  pl := &Listener{",
          "73:   Listener:          l,",
          "75:  }",
          "77:  ctx, cancel := context.WithCancel(context.Background())",
          "",
          "[Removed Lines]",
          "74:   ReadHeaderTimeout: 1 * time.Millisecond,",
          "",
          "[Added Lines]",
          "76:   ReadHeaderTimeout: time.Millisecond * 250,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:  recv := make([]byte, 4)",
          "98:  _, err = conn.Read(recv)",
          "100: }",
          "102: func TestParse_ipv4(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:  if err != nil && !errors.Is(err, os.ErrDeadlineExceeded){",
          "103:   t.Fatal(\"should timeout\")",
          "104:  }",
          "105: }",
          "107: func TestReadHeaderTimeoutIsReset(t *testing.T) {",
          "108:  const timeout = time.Millisecond * 250",
          "110:  l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "111:  if err != nil {",
          "112:   t.Fatalf(\"err: %v\", err)",
          "113:  }",
          "115:  pl := &Listener{",
          "116:   Listener: l,",
          "117:   ReadHeaderTimeout: timeout,",
          "118:  }",
          "120:  header := &Header{",
          "121:   Version:           2,",
          "122:   Command:           PROXY,",
          "123:   TransportProtocol: TCPv4,",
          "124:   SourceAddr: &net.TCPAddr{",
          "125:    IP:   net.ParseIP(\"10.1.1.1\"),",
          "126:    Port: 1000,",
          "127:   },",
          "128:   DestinationAddr: &net.TCPAddr{",
          "129:    IP:   net.ParseIP(\"20.2.2.2\"),",
          "130:    Port: 2000,",
          "131:   },",
          "132:  }",
          "133:  go func() {",
          "134:   conn, err := net.Dial(\"tcp\", pl.Addr().String())",
          "135:   if err != nil {",
          "136:    t.Fatalf(\"err: %v\", err)",
          "137:   }",
          "138:   defer conn.Close()",
          "141:   header.WriteTo(conn)",
          "144:   time.Sleep(timeout * 2)",
          "146:   conn.Write([]byte(\"ping\"))",
          "147:   recv := make([]byte, 4)",
          "148:   _, err = conn.Read(recv)",
          "149:   if err != nil {",
          "150:    t.Fatalf(\"err: %v\", err)",
          "151:   }",
          "152:   if !bytes.Equal(recv, []byte(\"pong\")) {",
          "153:    t.Fatalf(\"bad: %v\", recv)",
          "154:   }",
          "155:  }()",
          "157:  conn, err := pl.Accept()",
          "158:  if err != nil {",
          "159:   t.Fatalf(\"err: %v\", err)",
          "160:  }",
          "161:  defer conn.Close()",
          "163:  recv := make([]byte, 4)",
          "164:  _, err = conn.Read(recv)",
          "165:  if err != nil {",
          "166:   t.Fatalf(\"err: %v\", err)",
          "167:  }",
          "168:  if !bytes.Equal(recv, []byte(\"ping\")) {",
          "169:   t.Fatalf(\"bad: %v\", recv)",
          "170:  }",
          "172:  if _, err := conn.Write([]byte(\"pong\")); err != nil {",
          "173:   t.Fatalf(\"err: %v\", err)",
          "174:  }",
          "177:  addr := conn.RemoteAddr().(*net.TCPAddr)",
          "178:  if addr.IP.String() != \"10.1.1.1\" {",
          "179:   t.Fatalf(\"bad: %v\", addr)",
          "180:  }",
          "181:  if addr.Port != 1000 {",
          "182:   t.Fatalf(\"bad: %v\", addr)",
          "183:  }",
          "185:  h := conn.(*Conn).ProxyHeader()",
          "186:  if !h.EqualsTo(header) {",
          "187:   t.Errorf(\"bad: %v\", h)",
          "188:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}