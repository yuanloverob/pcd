{
  "cve_id": "CVE-2016-4972",
  "cve_desc": "OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.",
  "repo": "openstack/murano",
  "patch_hash": "28de8c36c9dbe4aaf4d062e6fb6099afd437f49b",
  "patch_info": {
    "commit_hash": "28de8c36c9dbe4aaf4d062e6fb6099afd437f49b",
    "repo": "openstack/murano",
    "commit_url": "https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b",
    "files": [
      "murano/engine/yaql_yaml_loader.py",
      "murano/tests/functional/common/utils.py",
      "murano/tests/unit/policy/test_congress_rules.py",
      "releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml"
    ],
    "message": "Use SafeLoader to load yaml files\n\nBefore this patch yaml.Loader was used by the engine to create custom\nyaql-enabled yaml loader. It is unsafe do to so, because yaml.Loader is\ncapable of creating custom python objects from specifically constructed\nyaml files.\nAfter this patch all yaml load operations are performed with safe\nloaders instead.\nAlso uses SafeConstructor instead of Constructor.\n\nChange-Id: I61a3c42d73608b5d013285f015a45f4774d264e3\nCloses-Bug: #1586079",
    "before_after_code_files": [
      "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
      "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
      "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
    ]
  },
  "patch_diff": {
    "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py": [
      "File: murano/engine/yaql_yaml_loader.py -> murano/engine/yaql_yaml_loader.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:                 node.end_mark.line + 1,",
      "44:                 node.end_mark.column + 1)",
      "47:             def construct_yaml_map(self, node):",
      "48:                 data = MuranoPlDict()",
      "49:                 data.source_file_position = build_position(node)",
      "",
      "[Removed Lines]",
      "46:         class MuranoPlYamlConstructor(yaml.constructor.Constructor):",
      "",
      "[Added Lines]",
      "46:         class MuranoPlYamlConstructor(yaml.constructor.SafeConstructor):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:                 value = self.construct_mapping(node)",
      "52:                 data.update(value)",
      "55:             pass",
      "57:         YaqlYamlLoader.add_constructor(",
      "",
      "[Removed Lines]",
      "54:         class YaqlYamlLoader(yaml.Loader, MuranoPlYamlConstructor):",
      "",
      "[Added Lines]",
      "54:         class YaqlYamlLoader(yaml.SafeLoader, MuranoPlYamlConstructor):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "61:         # workaround for PyYAML bug: http://pyyaml.org/ticket/221",
      "62:         resolvers = {}",
      "64:             resolvers[k] = v[:]",
      "65:         YaqlYamlLoader.yaml_implicit_resolvers = resolvers",
      "",
      "[Removed Lines]",
      "63:         for k, v in yaml.Loader.yaml_implicit_resolvers.items():",
      "",
      "[Added Lines]",
      "63:         for k, v in yaml.SafeLoader.yaml_implicit_resolvers.items():",
      "",
      "---------------"
    ],
    "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py": [
      "File: murano/tests/functional/common/utils.py -> murano/tests/functional/common/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "249:         \"\"\"",
      "250:         component = service.to_dict()",
      "251:         component = json.dumps(component)",
      "254:     @classmethod",
      "255:     def get_service_id(cls, service):",
      "",
      "[Removed Lines]",
      "252:         return yaml.load(component)",
      "",
      "[Added Lines]",
      "252:         return yaml.safe_load(component)",
      "",
      "---------------"
    ],
    "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py": [
      "File: murano/tests/unit/policy/test_congress_rules.py -> murano/tests/unit/policy/test_congress_rules.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:             os.path.dirname(inspect.getfile(self.__class__)), file_name)",
      "89:         with open(model_file) as stream:",
      "92:     def _create_rules_str(self, model_file, package_loader=None):",
      "93:         model = self._load_file(model_file)",
      "",
      "[Removed Lines]",
      "90:             return yaml.load(stream)",
      "",
      "[Added Lines]",
      "90:             return yaml.safe_load(stream)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d3dd9c6da6d5422b936aef11c05b4e5e4d58668",
      "candidate_info": {
        "commit_hash": "2d3dd9c6da6d5422b936aef11c05b4e5e4d58668",
        "repo": "openstack/murano",
        "commit_url": "https://github.com/openstack/murano/commit/2d3dd9c6da6d5422b936aef11c05b4e5e4d58668",
        "files": [
          "murano/tests/functional/common/utils.py",
          "murano/tests/functional/engine/base.py",
          "murano/tests/functional/engine/config.conf.sample",
          "murano/tests/functional/engine/config.py",
          "murano/tests/functional/engine/integration_base.py",
          "murano/tests/functional/engine/manager.py",
          "murano/tests/functional/engine/muranomanager.py",
          "murano/tests/functional/engine/test_mistral.py",
          "test-requirements.txt"
        ],
        "message": "Introduce refactored tests\n\n- Move all functions excluding specific to common/utils.py\n- Add requests to test-requirements.txt\n- Modify config.py to give more flexibility to tests\n\nChange-Id: I1d86d500da8aab67d90da7314ccb6c376c8f59d4\nPartially-Implements: blueprint new-ci-tests-preparation",
        "before_after_code_files": [
          "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
          "murano/tests/functional/engine/base.py||murano/tests/functional/engine/base.py",
          "murano/tests/functional/engine/config.conf.sample||murano/tests/functional/engine/config.conf.sample",
          "murano/tests/functional/engine/config.py||murano/tests/functional/engine/config.py",
          "murano/tests/functional/engine/integration_base.py||murano/tests/functional/engine/integration_base.py",
          "murano/tests/functional/engine/manager.py||murano/tests/functional/engine/manager.py",
          "murano/tests/functional/engine/muranomanager.py||murano/tests/functional/engine/muranomanager.py",
          "murano/tests/functional/engine/test_mistral.py||murano/tests/functional/engine/test_mistral.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py"
          ],
          "candidate": [
            "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py": [
          "File: murano/tests/functional/common/utils.py -> murano/tests/functional/common/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # under the License.",
          "15: import contextlib",
          "16: import logging",
          "17: import os",
          "18: import time",
          "19: import zipfile",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import json",
          "19: import random",
          "20: import socket",
          "21: import telnetlib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: from keystoneclient.v2_0 import client as ksclient",
          "24: from muranoclient import client as mclient",
          "25: import muranoclient.common.exceptions as exceptions",
          "27: from murano.services import states",
          "28: import murano.tests.functional.engine.config as cfg",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import yaml",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81: class DeployTestMixin(ZipUtilsMixin):",
          "82:     cfg.load_config()",
          "84:     @staticmethod",
          "85:     @memoize",
          "86:     def keystone_client():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # -----------------------------Clients methods---------------------------------",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:                                  endpoint=heat_url,",
          "99:                                  token=cls.keystone_client().auth_token)",
          "112:     @classmethod",
          "113:     @memoize",
          "114:     def murano_client(cls):",
          "",
          "[Removed Lines]",
          "101:     @classmethod",
          "102:     def get_murano_url(cls):",
          "103:         try:",
          "104:             url = cls.keystone_client().service_catalog.url_for(",
          "105:                 service_type='application_catalog', endpoint_type='publicURL')",
          "106:         except ks_exceptions.EndpointNotFound:",
          "107:             url = CONF.murano.murano_url",
          "108:             LOG.warning(\"Murano endpoint not found in Keystone. Using CONF.\")",
          "109:         return url if 'v1' not in url else \"/\".join(",
          "110:             url.split('/')[:url.split('/').index('v1')])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:                               endpoint=murano_url,",
          "118:                               token=cls.keystone_client().auth_token)",
          "148:     @classmethod",
          "149:     def deploy_apps(cls, name, *apps):",
          "150:         environment = cls.murano_client().environments.create({'name': name})",
          "151:         cls.init_list(\"_environments\")",
          "152:         cls._environments.append(environment)",
          "",
          "[Removed Lines]",
          "120:     @classmethod",
          "121:     def init_list(cls, list_name):",
          "122:         if not hasattr(cls, list_name):",
          "123:             setattr(cls, list_name, [])",
          "125:     @classmethod",
          "126:     def upload_package(cls, package_name, body, app):",
          "127:         files = {'%s' % package_name: open(app, 'rb')}",
          "128:         package = cls.murano_client().packages.create(body, files)",
          "129:         cls.init_list(\"_packages\")",
          "130:         cls._packages.append(package)",
          "131:         return package",
          "133:     @classmethod",
          "134:     def environment_delete(cls, environment_id, timeout=180):",
          "135:         cls.murano_client().environments.delete(environment_id)",
          "137:         start_time = time.time()",
          "138:         while time.time() - start_time < timeout:",
          "139:             try:",
          "140:                 cls.murano_client().environments.get(environment_id)",
          "141:             except exceptions.HTTPNotFound:",
          "142:                 return",
          "143:         err_msg = ('Environment {0} was not deleted in {1} seconds'.",
          "144:                    format(environment_id, timeout))",
          "145:         LOG.error(err_msg)",
          "146:         raise RuntimeError(err_msg)",
          "",
          "[Added Lines]",
          "115: # --------------------------Specific test methods------------------------------",
          "119:         \"\"\"Create and deploy environment.",
          "121:         :param name: Murano environment name",
          "122:         :param apps: App(s), described in JSON format",
          "123:         :return: Murano environment",
          "124:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:     @staticmethod",
          "164:     def wait_for_final_status(environment, timeout=300):",
          "165:         start_time = time.time()",
          "166:         status = environment.manager.get(environment.id).status",
          "167:         while states.SessionState.DEPLOYING == status:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:         \"\"\"Function for wait final status of environment.",
          "142:         :param environment: Murano environment.",
          "143:         :param timeout: Timeout for waiting environment to get any status",
          "144:                excluding DEPLOYING state",
          "145:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "177:                                                               dep[0].id)",
          "178:         return status, \", \".join([r.text for r in reports])",
          "180:     @classmethod",
          "183:         try:",
          "190:     @classmethod",
          "191:     def purge_uploaded_packages(cls):",
          "192:         cls.init_list(\"_packages\")",
          "193:         try:",
          "194:             for pkg in cls._packages:",
          "",
          "[Removed Lines]",
          "181:     def purge_environments(cls):",
          "182:         cls.init_list(\"_environments\")",
          "184:             for env in cls._environments:",
          "185:                 with ignored(Exception):",
          "186:                     cls.environment_delete(env.id)",
          "187:         finally:",
          "188:             cls._environments = []",
          "",
          "[Added Lines]",
          "161: # -----------------------------Reports methods---------------------------------",
          "164:     def get_last_deployment(cls, environment):",
          "165:         \"\"\"Gets last deployment of Murano environment.",
          "167:         :param environment: Murano environment",
          "168:         :return:",
          "169:         \"\"\"",
          "170:         deployments = cls.murano_client().deployments.list(environment.id)",
          "171:         return deployments[0]",
          "173:     @classmethod",
          "174:     def get_deployment_report(cls, environment, deployment):",
          "175:         \"\"\"Gets reports for environment with specific deployment.",
          "177:         :param environment: Murano environment.",
          "178:         :param deployment: Murano deployment for certain environment",
          "179:         :return:",
          "180:         \"\"\"",
          "181:         history = ''",
          "182:         report = cls.murano_client().deployments.reports(",
          "183:             environment.id, deployment.id)",
          "184:         for status in report:",
          "185:             history += '\\t{0} - {1}\\n'.format(status.created, status.text)",
          "186:         return history",
          "188:     @classmethod",
          "189:     def _log_report(cls, environment):",
          "190:         \"\"\"Used for logging reports on failures.",
          "192:         :param environment: Murano environment.",
          "193:         \"\"\"",
          "194:         deployment = cls.get_last_deployment(environment)",
          "196:             details = deployment.result['result']['details']",
          "197:             LOG.warning('Details:\\n {0}'.format(details))",
          "198:         except Exception as e:",
          "199:             LOG.error(e)",
          "200:         report = cls.get_deployment_report(environment, deployment)",
          "201:         LOG.debug('Report:\\n {0}\\n'.format(report))",
          "203: # -----------------------------Service methods---------------------------------",
          "205:     @classmethod",
          "206:     def add_service(cls, environment, data, session, to_dict=False):",
          "207:         \"\"\"This function adds a specific service to environment.",
          "209:         :param environment: Murano environment",
          "210:         :param data: JSON with specific servive to add into",
          "211:         :param session: Session that is open for environment",
          "212:         :param to_dict: If True - returns a JSON object with service",
          "213:                         If False - returns a specific class <Service>",
          "214:         \"\"\"",
          "216:         LOG.debug('Added service:\\n {0}'.format(data))",
          "217:         service = cls.murano_client().services.post(environment.id,",
          "218:                                                     path='/', data=data,",
          "219:                                                     session_id=session.id)",
          "220:         if to_dict:",
          "221:             return cls._convert_service(service)",
          "222:         else:",
          "223:             return service",
          "225:     @classmethod",
          "226:     def get_service_as_json(cls, environment, service_name):",
          "227:         \"\"\"Get a service with specific name from environment in JSON format.",
          "229:         :param environment: Murano environment",
          "230:         :param service_name: Service name",
          "231:         :return:",
          "232:         \"\"\"",
          "233:         for service in cls.murano_client().services.list(environment.id):",
          "234:             if service.name == service_name:",
          "235:                 return cls._convert_service(service)",
          "237:     @classmethod",
          "238:     def _convert_service(cls, service):",
          "239:         \"\"\"Converts a <Service> to JSON object.",
          "241:         :param service: <Service> object",
          "242:         :return: JSON object",
          "243:         \"\"\"",
          "244:         component = service.to_dict()",
          "245:         component = json.dumps(component)",
          "246:         return yaml.load(component)",
          "248: # -----------------------------Packages methods--------------------------------",
          "250:     @classmethod",
          "251:     def upload_package(cls, package_name, body, app):",
          "252:         \"\"\"Uploads a .zip package with parameters to Murano.",
          "254:         :param package_name: Package name in Murano repository",
          "255:         :param body: Categories, tags, etc.",
          "256:                      e.g. {",
          "257:                            \"categories\": [\"Application Servers\"],",
          "258:                            \"tags\": [\"tag\"]",
          "259:                            }",
          "260:         :param app: Correct .zip archive with the application",
          "261:         :return: Package",
          "262:         \"\"\"",
          "263:         files = {'{0}'.format(package_name): open(app, 'rb')}",
          "264:         package = cls.murano_client().packages.create(body, files)",
          "265:         cls.init_list(\"_packages\")",
          "266:         cls._packages.append(package)",
          "267:         return package",
          "269: # ------------------------------Common methods---------------------------------",
          "271:     @classmethod",
          "272:     def rand_name(cls, name='murano'):",
          "273:         \"\"\"Generates random string.",
          "275:         :param name: Basic name",
          "276:         :return:",
          "277:         \"\"\"",
          "278:         return name + str(random.randint(1, 0x7fffffff))",
          "280:     @classmethod",
          "281:     def init_list(cls, list_name):",
          "282:         if not hasattr(cls, list_name):",
          "283:             setattr(cls, list_name, [])",
          "285:     @classmethod",
          "286:     def get_murano_url(cls):",
          "287:         try:",
          "288:             url = cls.keystone_client().service_catalog.url_for(",
          "289:                 service_type='application_catalog', endpoint_type='publicURL')",
          "290:         except ks_exceptions.EndpointNotFound:",
          "291:             url = CONF.murano.murano_url",
          "292:             LOG.warning(\"Murano endpoint not found in Keystone. Using CONF.\")",
          "293:         return url if 'v1' not in url else \"/\".join(",
          "294:             url.split('/')[:url.split('/').index('v1')])",
          "296:     @classmethod",
          "297:     def verify_connection(cls, ip, port):",
          "298:         \"\"\"Try to connect to specific ip:port with telnet.",
          "300:         :param ip: Ip that you want to check",
          "301:         :param port: Port that you want to check",
          "302:         :return: :raise RuntimeError:",
          "303:         \"\"\"",
          "304:         tn = telnetlib.Telnet(ip, port)",
          "305:         tn.write('GET / HTTP/1.0\\n\\n')",
          "306:         try:",
          "307:             buf = tn.read_all()",
          "308:             LOG.debug('Data:\\n {0}'.format(buf))",
          "309:             if len(buf) != 0:",
          "310:                 tn.sock.sendall(telnetlib.IAC + telnetlib.NOP)",
          "311:                 return",
          "312:             else:",
          "313:                 raise RuntimeError('Resource at {0}:{1} not exist'.",
          "314:                                    format(ip, port))",
          "315:         except socket.error as e:",
          "316:             LOG.debug('Socket Error: {0}'.format(e))",
          "318:     @classmethod",
          "319:     def get_ip_by_appname(cls, environment, appname):",
          "320:         \"\"\"Returns ip of instance with a deployed application using app name.",
          "322:         :param environment: Murano environment",
          "323:         :param appname: Application name or substring of application name",
          "324:         :return:",
          "325:         \"\"\"",
          "326:         for service in environment.services:",
          "327:             if appname in service['name']:",
          "328:                 return service['instance']['floatingIpAddress']",
          "330:     @classmethod",
          "331:     def get_ip_by_instance_name(cls, environment, inst_name):",
          "332:         \"\"\"Returns ip of instance using instance name.",
          "334:         :param environment: Murano environment",
          "335:         :param name: String, which is substring of name of instance or name of",
          "336:         instance",
          "337:         :return:",
          "338:         \"\"\"",
          "339:         for service in environment.services:",
          "340:             if inst_name in service['instance']['name']:",
          "341:                 return service['instance']['floatingIpAddress']",
          "343:     @classmethod",
          "344:     def get_k8s_ip_by_instance_name(cls, environment, inst_name, service_name):",
          "345:         \"\"\"Returns ip of specific kubernetes node (gateway, master, minion).",
          "347:         Search depends on service name of kubernetes and names of spawned",
          "348:         instances",
          "349:         :param environment: Murano environment",
          "350:         :param inst_name: Name of instance or substring of instance name",
          "351:         :param service_name: Name of Kube Cluster application in Murano",
          "352:         environment",
          "353:         :return: Ip of Kubernetes instances",
          "354:         \"\"\"",
          "355:         for service in environment.services:",
          "356:             if service_name in service['name']:",
          "357:                 if \"gateway\" in inst_name:",
          "358:                     for gateway in service['gatewayNodes']:",
          "359:                         if inst_name in gateway['instance']['name']:",
          "360:                             LOG.debug(gateway['instance']['floatingIpAddress'])",
          "361:                             return gateway['instance']['floatingIpAddress']",
          "362:                 elif \"master\" in inst_name:",
          "363:                     LOG.debug(service['masterNode']['instance'][",
          "364:                         'floatingIpAddress'])",
          "365:                     return service['masterNode']['instance'][",
          "366:                         'floatingIpAddress']",
          "367:                 elif \"minion\" in inst_name:",
          "368:                     for minion in service['minionNodes']:",
          "369:                         if inst_name in minion['instance']['name']:",
          "370:                             LOG.debug(minion['instance']['floatingIpAddress'])",
          "371:                             return minion['instance']['floatingIpAddress']",
          "373: # -----------------------------Cleanup methods---------------------------------",
          "377:         \"\"\"Cleanup for uploaded packages.\"\"\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "202:                 os.remove(pkg_file)",
          "203:         finally:",
          "204:             cls._package_files = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:     @classmethod",
          "393:     def purge_environments(cls):",
          "394:         \"\"\"Cleanup for created environments.\"\"\"",
          "395:         cls.init_list(\"_environments\")",
          "396:         try:",
          "397:             for env in cls._environments:",
          "398:                 with ignored(Exception):",
          "399:                     cls.environment_delete(env.id)",
          "400:         finally:",
          "401:             cls._environments = []",
          "403: # -----------------------Methods for environment CRUD--------------------------",
          "405:     @classmethod",
          "406:     def create_environment(cls):",
          "407:         \"\"\"Creates Murano environment with random name.",
          "410:         :return: Murano environment",
          "411:         \"\"\"",
          "412:         name = cls.rand_name('MuranoTe')",
          "413:         environment = cls.murano_client().environments.create({'name': name})",
          "414:         cls._environments.append(environment)",
          "415:         return environment",
          "417:     @classmethod",
          "418:     def get_environment(cls, environment):",
          "419:         \"\"\"Refresh <Environment> variable.",
          "421:         :param environment: Murano environment.",
          "422:         :return: Murano environment.",
          "423:         \"\"\"",
          "424:         return cls.murano_client().environments.get(environment.id)",
          "426:     @classmethod",
          "427:     def environment_delete(cls, environment_id, timeout=180):",
          "428:         \"\"\"Remove Murano environment.",
          "430:         :param environment_id: ID of Murano environment",
          "431:         :param timeout: Timeout to environment get deleted",
          "432:         :return: :raise RuntimeError:",
          "433:         \"\"\"",
          "434:         cls.murano_client().environments.delete(environment_id)",
          "436:         start_time = time.time()",
          "437:         while time.time() - start_time < timeout:",
          "438:             try:",
          "439:                 cls.murano_client().environments.get(environment_id)",
          "440:             except exceptions.HTTPNotFound:",
          "441:                 return",
          "442:         err_msg = ('Environment {0} was not deleted in {1} seconds'.",
          "443:                    format(environment_id, timeout))",
          "444:         LOG.error(err_msg)",
          "445:         raise RuntimeError(err_msg)",
          "447: # -----------------------Methods for session actions---------------------------",
          "449:     @classmethod",
          "450:     def create_session(cls, environment):",
          "451:         return cls.murano_client().sessions.configure(environment.id)",
          "453:     @classmethod",
          "454:     def delete_session(cls, environment, session):",
          "455:         return cls.murano_client().sessions.delete(environment.id, session.id)",
          "458: # -------------------------------Heat methods----------------------------------",
          "460:     @classmethod",
          "461:     def _get_stack(cls, environment_id):",
          "463:         for stack in cls.heat_client().stacks.list():",
          "464:             if environment_id in stack.description:",
          "465:                 return stack",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/base.py||murano/tests/functional/engine/base.py": [
          "File: murano/tests/functional/engine/base.py -> murano/tests/functional/engine/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import time",
          "17: import uuid",
          "21: CONF = core.CONF",
          "",
          "[Removed Lines]",
          "19: import murano.tests.functional.engine.muranomanager as core",
          "",
          "[Added Lines]",
          "19: import murano.tests.functional.engine.manager as core",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:         environment_name = 'Telnetenv' + uuid.uuid4().hex[:5]",
          "102:     def test_deploy_apache(self):",
          "103:         post_body = {",
          "",
          "[Removed Lines]",
          "98:         env = self._quick_deploy(environment_name, post_body)",
          "100:         self.deployment_success_check(env, 23)",
          "",
          "[Added Lines]",
          "98:         environment = self.deploy_apps(environment_name, post_body)",
          "99:         self.wait_for_environment_deploy(environment)",
          "100:         self.deployment_success_check(environment, 23)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         environment_name = 'Apacheenv' + uuid.uuid4().hex[:5]",
          "127:     def test_deploy_postgresql(self):",
          "128:         post_body = {",
          "",
          "[Removed Lines]",
          "123:         env = self._quick_deploy(environment_name, post_body)",
          "125:         self.deployment_success_check(env, 80)",
          "",
          "[Added Lines]",
          "123:         environment = self.deploy_apps(environment_name, post_body)",
          "124:         self.wait_for_environment_deploy(environment)",
          "125:         self.deployment_success_check(environment, 80)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:         environment_name = 'Postgreenv' + uuid.uuid4().hex[:5]",
          "155:     def test_deploy_tomcat(self):",
          "156:         post_body = {",
          "",
          "[Removed Lines]",
          "151:         env = self._quick_deploy(environment_name, post_body)",
          "153:         self.deployment_success_check(env, 5432)",
          "",
          "[Added Lines]",
          "151:         environment = self.deploy_apps(environment_name, post_body)",
          "152:         self.wait_for_environment_deploy(environment)",
          "153:         self.deployment_success_check(environment, 5432)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:         environment_name = 'Tomcatenv' + uuid.uuid4().hex[:5]",
          "180:     def test_instance_refs_are_removed_after_application_is_removed(self):",
          "181:         # FIXME(sergmelikyan): Revise this as part of proper fix for #1417136",
          "",
          "[Removed Lines]",
          "176:         env = self._quick_deploy(environment_name, post_body)",
          "178:         self.deployment_success_check(env, 8080)",
          "",
          "[Added Lines]",
          "176:         environment = self.deploy_apps(environment_name, post_body)",
          "177:         self.wait_for_environment_deploy(environment)",
          "178:         self.deployment_success_check(environment, 8080)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:         application_id = application1['?']['id']",
          "189:         instance_name = application1['instance']['name']",
          "190:         apps = [application1, application2]",
          "193:         # delete telnet application",
          "194:         session = self.murano.sessions.configure(environment.id)",
          "",
          "[Removed Lines]",
          "191:         environment = self._quick_deploy(name, *apps)",
          "",
          "[Added Lines]",
          "191:         environment = self.deploy_apps(name, *apps)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:         name = 'e' + uuid.uuid4().hex",
          "213:         application = self._get_telnet_app()",
          "216:         stack = self._get_stack(environment.id)",
          "217:         self.assertIsNotNone(stack)",
          "221:         start_time = time.time()",
          "222:         while stack is not None:",
          "",
          "[Removed Lines]",
          "214:         environment = self._quick_deploy(name, application)",
          "219:         self.murano.environments.delete(environment.id)",
          "",
          "[Added Lines]",
          "214:         environment = self.deploy_apps(name, application)",
          "215:         self.wait_for_environment_deploy(environment)",
          "219:         self.murano_client().environments.delete(environment.id)",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/config.conf.sample||murano/tests/functional/engine/config.conf.sample": [
          "File: murano/tests/functional/engine/config.conf.sample -> murano/tests/functional/engine/config.conf.sample",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [murano]",
          "2: # keystone url",
          "5: # keystone user",
          "8: # password for keystone user",
          "11: # keystone tenant",
          "14: # murano url",
          "20: # Flavor for advanced checks",
          "23: # image for linux services",
          "26: # image for windows services",
          "",
          "[Removed Lines]",
          "3: #auth_url = http://127.0.0.1:5000/v2.0/",
          "6: #user = admin",
          "9: #password = pass",
          "12: #tenant = admin",
          "15: #murano_url = http://localhost:8082",
          "17: # Flavor for simple checks",
          "18: #standard_flavor = m1.medium",
          "21: #advanced_flavor = m1.large",
          "24: #linux_image = default_linux",
          "27: #windows_image = default_windows",
          "",
          "[Added Lines]",
          "3: # auth_url = http://127.0.0.1:5000/v2.0/",
          "6: # user = admin",
          "9: # password = admin",
          "12: # tenant = admin",
          "14: # keyname - used for debugging murano-agent",
          "15: # keyname = keyname",
          "18: # murano_url = http://127.0.0.1:8082",
          "20: # Flavor for sanity checks",
          "21: # standard_flavor = m1.medium",
          "24: # advanced_flavor = m1.medium",
          "27: # linux_image = default_linux",
          "29: # image for docker applications",
          "30: # docker_image = debian-8-docker.qcow2",
          "32: # image for kubernetes applications",
          "33: # kubernetes_image = ubuntu14.04-x64-kubernetes.qcow2",
          "36: # windows_image = default_windows",
          "38: # image for hdp sandbox",
          "39: # hdp_image = hdp-sandbox",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/config.py||murano/tests/functional/engine/config.py": [
          "File: murano/tests/functional/engine/config.py -> murano/tests/functional/engine/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     cfg.StrOpt('tenant',",
          "33:                default='admin',",
          "34:                help='keystone tenant'),",
          "35:     cfg.StrOpt('murano_url',",
          "36:                default='http://127.0.0.1:8082/v1/',",
          "37:                help=\"murano url\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     cfg.StrOpt('keyname',",
          "36:                default='',",
          "37:                help='name of keypair for debugging'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     cfg.StrOpt('linux_image',",
          "45:                default='default_linux',",
          "46:                help=\"image for linux services\"),",
          "47:     cfg.StrOpt('windows_image',",
          "48:                default='default_windows',",
          "50: ]",
          "52: CONF = cfg.CONF",
          "",
          "[Removed Lines]",
          "49:                help=\"image for windows services\")",
          "",
          "[Added Lines]",
          "50:     cfg.StrOpt('docker_image',",
          "51:                default='ubuntu14.04-x64-docker',",
          "52:                help=\"image for docker applications\"),",
          "55:                help=\"image for windows services\"),",
          "56:     cfg.StrOpt('hdp_image',",
          "57:                default=\"hdp-sandbox\",",
          "58:                help=\"image for hdp-sandbox\"),",
          "59:     cfg.StrOpt('kubernetes_image',",
          "60:                default=\"ubuntu14.04-x64-kubernetes\",",
          "61:                help=\"image for kubernetes\")",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/integration_base.py||murano/tests/functional/engine/integration_base.py": [
          "File: murano/tests/functional/engine/integration_base.py -> murano/tests/functional/engine/integration_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) 2015 Openstack Foundation, Inc.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
          "4: # not use this file except in compliance with the License. You may obtain",
          "5: # a copy of the License at",
          "6: #",
          "7: # http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
          "11: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
          "12: # License for the specific language governing permissions and limitations",
          "13: # under the License.",
          "15: import os",
          "16: import uuid",
          "18: import mistralclient.api.client as mistralclient",
          "19: import testresources",
          "20: import testtools",
          "22: import murano.tests.functional.common.tempest_utils as tempest_utils",
          "23: import murano.tests.functional.common.utils as utils",
          "26: class MistralIntegration(testtools.TestCase, testtools.testcase.WithAttributes,",
          "27:                          testresources.ResourcedTestCase,",
          "28:                          tempest_utils.TempestDeployTestMixin):",
          "30:     @classmethod",
          "31:     @utils.memoize",
          "32:     def mistral_client(cls):",
          "33:         keystone_client = cls.keystone_client()",
          "35:         endpoint_type = 'publicURL'",
          "36:         service_type = 'workflowv2'",
          "38:         mistral_url = keystone_client.service_catalog.url_for(",
          "39:             service_type=service_type,",
          "40:             endpoint_type=endpoint_type)",
          "42:         auth_token = keystone_client.auth_token",
          "44:         return mistralclient.client(mistral_url=mistral_url,",
          "45:                                     auth_url=keystone_client.auth_url,",
          "46:                                     project_id=keystone_client.tenant_id,",
          "47:                                     endpoint_type=endpoint_type,",
          "48:                                     service_type=service_type,",
          "49:                                     auth_token=auth_token,",
          "50:                                     user_id=keystone_client.user_id)",
          "52:     @classmethod",
          "53:     def upload_mistral_showcase_app(cls):",
          "54:         app_dir = 'io.murano.apps.test.MistralShowcaseApp'",
          "55:         zip_file_path = cls.zip_dir(os.path.dirname(__file__), app_dir)",
          "56:         cls.init_list(\"_package_files\")",
          "57:         cls._package_files.append(zip_file_path)",
          "58:         return cls.upload_package(",
          "59:             'MistralShowcaseApp',",
          "60:             {\"categories\": [\"Web\"], \"tags\": [\"tag\"]},",
          "61:             zip_file_path)",
          "63:     @staticmethod",
          "64:     def _create_env_body():",
          "65:         return {",
          "66:             \"name\": \"Mistral_environment\",",
          "67:             \"?\": {",
          "68:                 \"type\": \"io.murano.apps.test.MistralShowcaseApp\",",
          "69:                 \"id\": str(uuid.uuid4())",
          "70:             }",
          "71:         }",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/manager.py||murano/tests/functional/engine/manager.py": [
          "File: murano/tests/functional/engine/manager.py -> murano/tests/functional/engine/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) 2015 Mirantis, Inc.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
          "4: # not use this file except in compliance with the License. You may obtain",
          "5: # a copy of the License at",
          "6: #",
          "7: # http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
          "11: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
          "12: # License for the specific language governing permissions and limitations",
          "13: # under the License.",
          "15: import logging",
          "16: import socket",
          "17: import time",
          "18: import uuid",
          "20: import requests",
          "21: import testresources",
          "22: import testtools",
          "24: import murano.tests.functional.common.utils as utils",
          "25: import murano.tests.functional.engine.config as cfg",
          "28: CONF = cfg.cfg.CONF",
          "30: LOG = logging.getLogger(__name__)",
          "33: class MuranoTestsCore(testtools.TestCase, testtools.testcase.WithAttributes,",
          "34:                       testresources.ResourcedTestCase, utils.DeployTestMixin):",
          "35:     \"\"\"This manager provides access to Murano-api service.\"\"\"",
          "36:     @classmethod",
          "37:     def setUpClass(cls):",
          "38:         super(MuranoTestsCore, cls).setUpClass()",
          "40:         cfg.load_config()",
          "41:         cls._environments = []",
          "43:     def setUp(self):",
          "44:         super(MuranoTestsCore, self).setUp()",
          "46:     def tearDown(self):",
          "47:         super(MuranoTestsCore, self).tearDown()",
          "48:         self.purge_environments()",
          "50: # --------------------------Specific test methods------------------------------",
          "52:     def wait_for_environment_deploy(self, environment):",
          "53:         \"\"\"Wait for successful deployment of Murano environment.",
          "55:         Logging deployments and reports of failure.",
          "56:         :param environment: Murano environment",
          "57:         :return: Murano environment",
          "58:         \"\"\"",
          "59:         start_time = time.time()",
          "60:         status = environment.manager.get(environment.id).status",
          "61:         while status != 'ready':",
          "62:             status = environment.manager.get(environment.id).status",
          "63:             if time.time() - start_time > 1800:",
          "64:                 time.sleep(60)",
          "65:                 self._log_report(environment)",
          "66:                 self.fail(",
          "67:                     'Environment deployment is not finished in 1200 seconds')",
          "68:             elif status == 'deploy failure':",
          "69:                 self._log_report(environment)",
          "70:                 time.sleep(60)",
          "71:                 self.fail('Environment has incorrect status {0}'.",
          "72:                           format(status))",
          "73:             time.sleep(5)",
          "74:         LOG.debug('Environment {0} is ready'.format(environment.name))",
          "75:         return environment.manager.get(environment.id)",
          "77:     def status_check(self, environment, configurations, kubernetes=False):",
          "78:         \"\"\"Function which gives opportunity to check any count of instances.",
          "80:         :param environment: Murano environment",
          "81:         :param configurations: Array of configurations.",
          "82:         :param kubernetes: Used for parsing multiple instances in one service",
          "83:                False by default.",
          "84:         Example: [[instance_name, *ports], [instance_name, *ports]] ...",
          "85:         Example k8s: [[cluster['name'], instance_name, *ports], [...], ...]",
          "86:         \"\"\"",
          "87:         for configuration in configurations:",
          "88:             if kubernetes:",
          "89:                 service_name = configuration[0]",
          "90:                 LOG.debug('Service: {0}'.format(service_name))",
          "91:                 inst_name = configuration[1]",
          "92:                 LOG.debug('Instance: {0}'.format(inst_name))",
          "93:                 ports = configuration[2:]",
          "94:                 LOG.debug('Acquired ports: {0}'.format(ports))",
          "95:                 ip = self.get_k8s_ip_by_instance_name(environment, inst_name,",
          "96:                                                       service_name)",
          "97:                 if ip and ports:",
          "98:                     for port in ports:",
          "99:                         self.check_port_access(ip, port)",
          "100:                         self.check_k8s_deployment(ip, port)",
          "101:                 else:",
          "102:                     self.fail('Instance does not have floating IP')",
          "103:             else:",
          "104:                 inst_name = configuration[0]",
          "105:                 ports = configuration[1:]",
          "106:                 ip = self.get_ip_by_instance_name(environment, inst_name)",
          "107:                 if ip and ports:",
          "108:                     for port in ports:",
          "109:                         self.check_port_access(ip, port)",
          "110:                 else:",
          "111:                     self.fail('Instance does not have floating IP')",
          "113:     def deployment_success_check(self, environment, *ports):",
          "114:         \"\"\"Old style deployment check.",
          "116:         Checks that environment deployment successfully. Only one instance in",
          "117:         environment for this function is permitted for using this function.",
          "118:         :param environment: Murano environment",
          "119:         :param ports:",
          "120:         \"\"\"",
          "121:         deployment = self.murano_client().deployments.list(environment.id)[-1]",
          "123:         self.assertEqual('success', deployment.state,",
          "124:                          'Deployment status is {0}'.format(deployment.state))",
          "126:         ip = environment.services[0]['instance']['floatingIpAddress']",
          "128:         if ip:",
          "129:             for port in ports:",
          "130:                 self.check_port_access(ip, port)",
          "131:         else:",
          "132:             self.fail('Instance does not have floating IP')",
          "134:     def check_port_access(self, ip, port):",
          "135:         \"\"\"Check that ports are opened on specific instances.",
          "137:         :param ip: Instance's ip address",
          "138:         :param port: Port that you want to check",
          "139:         \"\"\"",
          "140:         result = 1",
          "141:         start_time = time.time()",
          "142:         while time.time() - start_time < 600:",
          "143:             sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
          "144:             result = sock.connect_ex((str(ip), port))",
          "145:             sock.close()",
          "146:             if result == 0:",
          "147:                 break",
          "148:             time.sleep(5)",
          "149:         self.assertEqual(0, result, '%s port is closed on instance' % port)",
          "151:     def check_k8s_deployment(self, ip, port):",
          "152:         start_time = time.time()",
          "153:         while time.time() - start_time < 600:",
          "154:             try:",
          "155:                 LOG.debug('Checking: {0}:{1}'.format(ip, port))",
          "156:                 self.verify_connection(ip, port)",
          "157:                 return",
          "158:             except RuntimeError as e:",
          "159:                 time.sleep(10)",
          "160:                 LOG.debug(e)",
          "161:         self.fail('Containers are not ready')",
          "163:     def check_path(self, env, path, inst_name=None):",
          "164:         \"\"\"Check path of deployed application using requests method 'GET'.",
          "166:         :param env: Murano environment.",
          "167:         :param path: Path to check",
          "168:         Example: wordpress. e.g. function will check http://<ip>/wordpress",
          "169:         :param inst_name: If defined, function will search through environment",
          "170:         for instance ip and after check path.",
          "171:         \"\"\"",
          "172:         environment = env.manager.get(env.id)",
          "173:         if inst_name:",
          "174:             ip = self.get_ip_by_instance_name(environment, inst_name)",
          "175:         else:",
          "176:             ip = environment.services[0]['instance']['floatingIpAddress']",
          "177:         resp = requests.get('http://{0}/{1}'.format(ip, path))",
          "178:         if resp.status_code == 200:",
          "179:             pass",
          "180:         else:",
          "181:             self.fail(\"Service path unavailable\")",
          "183:     def deploy_environment(self, environment, session):",
          "184:         self.murano_client().sessions.deploy(environment.id, session.id)",
          "185:         return self.wait_for_environment_deploy(environment)",
          "187:     def _get_telnet_app(self):",
          "188:         return {",
          "189:             \"instance\": {",
          "190:                 \"?\": {",
          "191:                     \"type\": \"io.murano.resources.LinuxMuranoInstance\",",
          "192:                     \"id\": str(uuid.uuid4())",
          "193:                 },",
          "194:                 \"flavor\": self.flavor,",
          "195:                 \"image\": self.linux,",
          "196:                 \"name\": \"instance{0}\".format(uuid.uuid4().hex[:5]),",
          "197:             },",
          "198:             \"name\": \"app{0}\".format(uuid.uuid4().hex[:5]),",
          "199:             \"?\": {",
          "200:                 \"type\": \"io.murano.apps.linux.Telnet\",",
          "201:                 \"id\": str(uuid.uuid4())",
          "202:             }",
          "203:         }",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/muranomanager.py||murano/tests/functional/engine/muranomanager.py": [
          "File: murano/tests/functional/engine/muranomanager.py -> murano/tests/functional/engine/muranomanager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "murano/tests/functional/engine/test_mistral.py||murano/tests/functional/engine/test_mistral.py": [
          "File: murano/tests/functional/engine/test_mistral.py -> murano/tests/functional/engine/test_mistral.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # License for the specific language governing permissions and limitations",
          "13: # under the License.",
          "16: import uuid",
          "22: import murano.tests.functional.common.utils as common_utils",
          "48:     @classmethod",
          "49:     def setUpClass(cls):",
          "",
          "[Removed Lines]",
          "15: import os",
          "18: import mistralclient.api.client as mistralclient",
          "19: import testtools",
          "21: import murano.tests.functional.common.tempest_utils as tempest_utils",
          "25: class MistralTest(testtools.TestCase, tempest_utils.TempestDeployTestMixin):",
          "27:     @classmethod",
          "28:     def mistral_client(cls):",
          "29:         keystone_client = cls.keystone_client()",
          "31:         endpoint_type = 'publicURL'",
          "32:         service_type = 'workflowv2'",
          "34:         mistral_url = keystone_client.service_catalog.url_for(",
          "35:             service_type=service_type,",
          "36:             endpoint_type=endpoint_type)",
          "38:         auth_token = keystone_client.auth_token",
          "40:         return mistralclient.client(mistral_url=mistral_url,",
          "41:                                     auth_url=keystone_client.auth_url,",
          "42:                                     project_id=keystone_client.tenant_id,",
          "43:                                     endpoint_type=endpoint_type,",
          "44:                                     service_type=service_type,",
          "45:                                     auth_token=auth_token,",
          "46:                                     user_id=keystone_client.user_id)",
          "",
          "[Added Lines]",
          "18: import murano.tests.functional.engine.integration_base as core",
          "21: class MistralTest(core.MistralIntegration):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     @classmethod",
          "61:     def tearDownClass(cls):",
          "62:         with common_utils.ignored(Exception):",
          "63:             cls.purge_uploaded_packages()",
          "86:     def test_deploy_package_success(self):",
          "87:         # Test expects successful deployment and one output: input_1_value.",
          "",
          "[Removed Lines]",
          "65:     @classmethod",
          "66:     def upload_mistral_showcase_app(cls):",
          "67:         app_dir = 'io.murano.apps.test.MistralShowcaseApp'",
          "68:         zip_file_path = cls.zip_dir(os.path.dirname(__file__), app_dir)",
          "69:         cls.init_list(\"_package_files\")",
          "70:         cls._package_files.append(zip_file_path)",
          "71:         return cls.upload_package(",
          "72:             'MistralShowcaseApp',",
          "73:             {\"categories\": [\"Web\"], \"tags\": [\"tag\"]},",
          "74:             zip_file_path)",
          "76:     @staticmethod",
          "77:     def _create_env_body():",
          "78:         return {",
          "79:             \"name\": \"Mistral_environment\",",
          "80:             \"?\": {",
          "81:                 \"type\": \"io.murano.apps.test.MistralShowcaseApp\",",
          "82:                 \"id\": str(uuid.uuid4())",
          "83:             }",
          "84:         }",
          "",
          "[Added Lines]",
          "37:         with common_utils.ignored(Exception):",
          "38:             cls.purge_environments()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a9f3436e123a3ef335d81fd18f59f53ac329daf",
      "candidate_info": {
        "commit_hash": "9a9f3436e123a3ef335d81fd18f59f53ac329daf",
        "repo": "openstack/murano",
        "commit_url": "https://github.com/openstack/murano/commit/9a9f3436e123a3ef335d81fd18f59f53ac329daf",
        "files": [
          "murano/api/v1/__init__.py",
          "murano/api/v1/catalog.py",
          "murano/cmd/manage.py",
          "murano/dsl/helpers.py",
          "murano/dsl/macros.py",
          "murano/dsl/murano_package.py",
          "murano/dsl/yaql_expression.py",
          "murano/dsl/yaql_integration.py",
          "murano/engine/package_loader.py",
          "murano/engine/yaql_yaml_loader.py",
          "murano/packages/application_package.py",
          "murano/packages/hot_package.py",
          "murano/packages/load_utils.py",
          "murano/packages/mpl_package.py",
          "murano/packages/package.py",
          "murano/packages/package_base.py",
          "murano/tests/unit/api/v1/test_catalog.py",
          "murano/tests/unit/dsl/foundation/test_package_loader.py",
          "murano/tests/unit/test_engine.py"
        ],
        "message": "Version-aware YAML loading\n\n* Refactoring of \"packages\" Python package\n* Now MuranoPL YAML classes can be parsed by different engines\ndepending on Format string in package manifest\n\nWith this change MuranoPL classes will no longer\nbe read and parsed (including YAQL expressions parsing)\nupon package load but only on first class access and\nwith ability to peak different parsers depending on\nformat version specified in manifest. As a consequence\nit is now possible to use different YAQL engines for\ndifferent package format versions. Also startup\ntime was greatly improved as unneeded classes are no more\nparsed and logos and UI forms are not loaded.\n\nPartially implements: blueprint murano-versioning\n\nChange-Id: I23fc5da1a43b405d526438329dc04aed589dee13",
        "before_after_code_files": [
          "murano/api/v1/__init__.py||murano/api/v1/__init__.py",
          "murano/api/v1/catalog.py||murano/api/v1/catalog.py",
          "murano/cmd/manage.py||murano/cmd/manage.py",
          "murano/dsl/helpers.py||murano/dsl/helpers.py",
          "murano/dsl/macros.py||murano/dsl/macros.py",
          "murano/dsl/murano_package.py||murano/dsl/murano_package.py",
          "murano/dsl/yaql_expression.py||murano/dsl/yaql_expression.py",
          "murano/dsl/yaql_integration.py||murano/dsl/yaql_integration.py",
          "murano/engine/package_loader.py||murano/engine/package_loader.py",
          "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
          "murano/packages/application_package.py||murano/packages/application_package.py",
          "murano/packages/hot_package.py||murano/packages/hot_package.py",
          "murano/packages/load_utils.py||murano/packages/load_utils.py",
          "murano/packages/mpl_package.py||murano/packages/mpl_package.py",
          "murano/packages/package.py||murano/packages/package.py",
          "murano/packages/package_base.py||murano/packages/package_base.py",
          "murano/tests/unit/api/v1/test_catalog.py||murano/tests/unit/api/v1/test_catalog.py",
          "murano/tests/unit/dsl/foundation/test_package_loader.py||murano/tests/unit/dsl/foundation/test_package_loader.py",
          "murano/tests/unit/test_engine.py||murano/tests/unit/test_engine.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py"
          ],
          "candidate": [
            "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py"
          ]
        }
      },
      "candidate_diff": {
        "murano/api/v1/__init__.py||murano/api/v1/__init__.py": [
          "File: murano/api/v1/__init__.py -> murano/api/v1/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: ORDER_VALUES = ('fqn', 'name', 'created')",
          "25: PKG_PARAMS_MAP = {'display_name': 'name',",
          "26:                   'full_name': 'fully_qualified_name',",
          "28:                   'logo': 'logo',",
          "29:                   'package_type': 'type',",
          "30:                   'description': 'description',",
          "",
          "[Removed Lines]",
          "27:                   'raw_ui': 'ui_definition',",
          "",
          "[Added Lines]",
          "27:                   'ui': 'ui_definition',",
          "",
          "---------------"
        ],
        "murano/api/v1/catalog.py||murano/api/v1/catalog.py": [
          "File: murano/api/v1/catalog.py -> murano/api/v1/catalog.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:             tempf.write(content)",
          "227:             package_meta['archive'] = content",
          "228:         try:",
          "231:         except pkg_exc.PackageLoadError as e:",
          "232:             msg = _(\"Couldn't load package from file: {0}\").format(e)",
          "233:             LOG.exception(msg)",
          "",
          "[Removed Lines]",
          "229:             pkg_to_upload = load_utils.load_from_file(",
          "230:                 tempf.name, target_dir=None, drop_dir=True)",
          "",
          "[Added Lines]",
          "229:             with load_utils.load_from_file(",
          "230:                     tempf.name, target_dir=None,",
          "231:                     drop_dir=True) as pkg_to_upload:",
          "232:                 # extend dictionary for update db",
          "233:                 for k, v in PKG_PARAMS_MAP.iteritems():",
          "234:                     if hasattr(pkg_to_upload, k):",
          "235:                         package_meta[v] = getattr(pkg_to_upload, k)",
          "236:                 try:",
          "237:                     package = db_api.package_upload(",
          "238:                         package_meta, req.context.tenant)",
          "239:                 except db_exc.DBDuplicateEntry:",
          "240:                     msg = _('Package with specified full '",
          "241:                             'name is already registered')",
          "242:                     LOG.exception(msg)",
          "243:                     raise exc.HTTPConflict(msg)",
          "244:                 return package.to_dict()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:             LOG.debug(\"Deleting package archive temporary file\")",
          "237:             os.remove(tempf.name)",
          "252:     def get_ui(self, req, package_id):",
          "253:         target = {'package_id': package_id}",
          "254:         policy.check(\"get_package\", req.context, target)",
          "",
          "[Removed Lines]",
          "239:         # extend dictionary for update db",
          "240:         for k, v in PKG_PARAMS_MAP.iteritems():",
          "241:             if hasattr(pkg_to_upload, k):",
          "242:                 package_meta[v] = getattr(pkg_to_upload, k)",
          "244:         try:",
          "245:             package = db_api.package_upload(package_meta, req.context.tenant)",
          "246:         except db_exc.DBDuplicateEntry:",
          "247:             msg = _('Package with specified full name is already registered')",
          "248:             LOG.exception(msg)",
          "249:             raise exc.HTTPConflict(msg)",
          "250:         return package.to_dict()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "murano/cmd/manage.py||murano/cmd/manage.py": [
          "File: murano/cmd/manage.py -> murano/cmd/manage.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         'tags': pkg.tags,",
          "74:         'logo': pkg.logo,",
          "75:         'supplier_logo': pkg.supplier_logo,",
          "77:         'class_definitions': pkg.classes,",
          "78:         'archive': pkg.blob,",
          "79:         'categories': categories or []",
          "",
          "[Removed Lines]",
          "76:         'ui_definition': pkg.raw_ui,",
          "",
          "[Added Lines]",
          "76:         'ui_definition': pkg.ui,",
          "",
          "---------------"
        ],
        "murano/dsl/helpers.py||murano/dsl/helpers.py": [
          "File: murano/dsl/helpers.py -> murano/dsl/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:     return version_spec",
          "247: def traverse(seed, producer=None, track_visited=True):",
          "248:     if not yaqlutils.is_iterable(seed):",
          "249:         seed = [seed]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247: def parse_version(version):",
          "248:     if isinstance(version, semantic_version.Version):",
          "249:         return version",
          "250:     if not version:",
          "251:         version = '0'",
          "252:     return semantic_version.Version.coerce(str(version))",
          "",
          "---------------"
        ],
        "murano/dsl/macros.py||murano/dsl/macros.py": [
          "File: murano/dsl/macros.py -> murano/dsl/macros.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: class ParallelMacro(CodeBlock):",
          "96:     def __init__(self, Parallel, Limit=None):",
          "97:         super(ParallelMacro, self).__init__(Parallel)",
          "103:     def execute(self, context):",
          "104:         if not self.code_block:",
          "",
          "[Removed Lines]",
          "98:         if Limit:",
          "99:             self._limit = yaql_expression.YaqlExpression(str(Limit))",
          "100:         else:",
          "101:             self._limit = len(self.code_block)",
          "",
          "[Added Lines]",
          "98:         self._limit = Limit or len(self.code_block)",
          "",
          "---------------"
        ],
        "murano/dsl/murano_package.py||murano/dsl/murano_package.py": [
          "File: murano/dsl/murano_package.py -> murano/dsl/murano_package.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         super(MuranoPackage, self).__init__()",
          "37:         self._package_loader = weakref.proxy(package_loader)",
          "38:         self._name = name",
          "41:         self._requirements = {",
          "42:             name: semantic_version.Spec('==' + str(self._version.major))",
          "43:         }",
          "",
          "[Removed Lines]",
          "39:         self._version = self._parse_version(version)",
          "40:         self._runtime_version = self._parse_version(runtime_version)",
          "",
          "[Added Lines]",
          "39:         self._version = helpers.parse_version(version)",
          "40:         self._runtime_version = helpers.parse_version(runtime_version)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:                 except exceptions.NoClassFound:",
          "183:                     continue",
          "184:         raise exceptions.NoClassFound(name)",
          "",
          "[Removed Lines]",
          "186:     @staticmethod",
          "187:     def _parse_version(version):",
          "188:         if isinstance(version, semantic_version.Version):",
          "189:             return version",
          "190:         if not version:",
          "191:             version = '0'",
          "192:         return semantic_version.Version.coerce(str(version))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "murano/dsl/yaql_expression.py||murano/dsl/yaql_expression.py": [
          "File: murano/dsl/yaql_expression.py -> murano/dsl/yaql_expression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: class YaqlExpression(dsl_types.YaqlExpression):",
          "29:         if isinstance(expression, types.StringTypes):",
          "30:             self._expression = encodeutils.safe_encode(expression)",
          "32:             self._file_position = None",
          "33:         elif isinstance(expression, YaqlExpression):",
          "34:             self._expression = expression._expression",
          "",
          "[Removed Lines]",
          "28:     def __init__(self, expression):",
          "31:             self._parsed_expression = yaql_integration.parse(self._expression)",
          "",
          "[Added Lines]",
          "28:     def __init__(self, expression, version):",
          "29:         self._version = version",
          "32:             self._parsed_expression = yaql_integration.parse(",
          "33:                 self._expression, version)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     def expression(self):",
          "46:         return self._expression",
          "48:     @property",
          "49:     def source_file_position(self):",
          "50:         return self._file_position",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     @property",
          "51:     def version(self):",
          "52:         return self._version",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         return self._expression",
          "62:     @staticmethod",
          "65:             return False",
          "67:             return False",
          "68:         try:",
          "70:             return True",
          "71:         except yaql_exceptions.YaqlParsingException:",
          "72:             return False",
          "",
          "[Removed Lines]",
          "63:     def match(expr):",
          "64:         if not isinstance(expr, types.StringTypes):",
          "66:         if re.match('^[\\s\\w\\d.:]*$', expr):",
          "69:             yaql_integration.parse(expr)",
          "",
          "[Added Lines]",
          "69:     def is_expression(expression, version):",
          "70:         if not isinstance(expression, types.StringTypes):",
          "72:         if re.match('^[\\s\\w\\d.:]*$', expression):",
          "75:             yaql_integration.parse(expression, version)",
          "",
          "---------------"
        ],
        "murano/dsl/yaql_integration.py||murano/dsl/yaql_integration.py": [
          "File: murano/dsl/yaql_integration.py -> murano/dsl/yaql_integration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     return ROOT_CONTEXT.create_child_context()",
          "87: def call_func(__context, __name, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "83: def parse(expression):",
          "84:     return ENGINE(expression)",
          "",
          "[Added Lines]",
          "83: def choose_yaql_engine(version):",
          "84:     return ENGINE",
          "87: def parse(expression, version):",
          "88:     return choose_yaql_engine(version)(expression)",
          "",
          "---------------"
        ],
        "murano/engine/package_loader.py||murano/engine/package_loader.py": [
          "File: murano/engine/package_loader.py -> murano/engine/package_loader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:             self._root_loader, app_package)",
          "126:         for name in app_package.classes:",
          "127:             dsl_package.register_class(",
          "129:                 name)",
          "130:         if app_package.full_name == constants.CORE_LIBRARY:",
          "131:             system_objects.register(dsl_package)",
          "",
          "[Removed Lines]",
          "128:                 (lambda cls: lambda: app_package.get_class(cls))(name),",
          "",
          "[Added Lines]",
          "128:                 (lambda cls: lambda: get_class(app_package, cls))(name),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:         if os.path.exists(package_directory):",
          "140:             try:",
          "144:             except pkg_exc.PackageLoadError:",
          "145:                 LOG.exception(_LE(",
          "146:                     'Unable to load package from cache. Clean-up...'))",
          "",
          "[Removed Lines]",
          "141:                 return load_utils.load_from_dir(",
          "142:                     package_directory, preload=True,",
          "143:                     loader=yaql_yaml_loader.YaqlYamlLoader)",
          "",
          "[Added Lines]",
          "141:                 return load_utils.load_from_dir(package_directory)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:             with tempfile.NamedTemporaryFile(delete=False) as package_file:",
          "160:                 package_file.write(package_data)",
          "169:         except IOError:",
          "170:             msg = 'Unable to extract package data for %s' % package_id",
          "171:             exc_info = sys.exc_info()",
          "",
          "[Removed Lines]",
          "162:             return load_utils.load_from_file(",
          "163:                 package_file.name,",
          "164:                 target_dir=package_directory,",
          "165:                 drop_dir=False,",
          "166:                 loader=yaql_yaml_loader.YaqlYamlLoader,",
          "167:                 preload=False",
          "168:             )",
          "",
          "[Added Lines]",
          "160:             with load_utils.load_from_file(",
          "161:                     package_file.name,",
          "162:                     target_dir=package_directory,",
          "163:                     drop_dir=False) as app_package:",
          "164:                 return app_package",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:     def _build_index(self):",
          "216:         for folder in self.search_package_folders(self._base_path):",
          "217:             try:",
          "221:                 dsl_package = murano_package.MuranoPackage(",
          "222:                     self._root_loader, package)",
          "223:                 for class_name in package.classes:",
          "224:                     dsl_package.register_class(",
          "225:                         (lambda pkg, cls:",
          "227:                         class_name",
          "228:                     )",
          "229:                 if dsl_package.name == constants.CORE_LIBRARY:",
          "",
          "[Removed Lines]",
          "218:                 package = load_utils.load_from_dir(",
          "219:                     folder, preload=False,",
          "220:                     loader=yaql_yaml_loader.YaqlYamlLoader)",
          "226:                             lambda: pkg.get_class(cls))(package, class_name),",
          "",
          "[Added Lines]",
          "214:                 package = load_utils.load_from_dir(folder)",
          "220:                             lambda: get_class(pkg, cls))(package, class_name),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:     def __exit__(self, exc_type, exc_val, exc_tb):",
          "329:         self.api_loader.cleanup()",
          "330:         return False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: def get_class(package, name):",
          "328:     version = package.runtime_version",
          "329:     loader = yaql_yaml_loader.get_loader(version)",
          "330:     contents, file_id = package.get_class(name)",
          "331:     return loader(contents, file_id)",
          "",
          "---------------"
        ],
        "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py": [
          "File: murano/engine/yaql_yaml_loader.py -> murano/engine/yaql_yaml_loader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import yaml.constructor",
          "20: from murano.dsl import dsl_types",
          "21: from murano.dsl import yaql_expression",
          "",
          "[Removed Lines]",
          "24: class MuranoPlDict(dict):",
          "25:     pass",
          "28: class MuranoPlYamlConstructor(yaml.constructor.Constructor):",
          "29:     def construct_yaml_map(self, node):",
          "30:         data = MuranoPlDict()",
          "31:         data.source_file_position = build_position(node)",
          "32:         yield data",
          "33:         value = self.construct_mapping(node)",
          "34:         data.update(value)",
          "37: class YaqlYamlLoader(yaml.Loader, MuranoPlYamlConstructor):",
          "38:     pass",
          "41: YaqlYamlLoader.add_constructor(u'tag:yaml.org,2002:map',",
          "42:                                MuranoPlYamlConstructor.construct_yaml_map)",
          "45: # workaround for PyYAML bug: http://pyyaml.org/ticket/221",
          "46: resolvers = {}",
          "47: for k, v in yaml.Loader.yaml_implicit_resolvers.items():",
          "48:     resolvers[k] = v[:]",
          "49: YaqlYamlLoader.yaml_implicit_resolvers = resolvers",
          "52: def build_position(node):",
          "53:     return dsl_types.ExpressionFilePosition(",
          "54:         node.start_mark.name,",
          "55:         node.start_mark.line + 1,",
          "56:         node.start_mark.column + 1,",
          "57:         node.end_mark.line + 1,",
          "58:         node.end_mark.column + 1)",
          "61: def yaql_constructor(loader, node):",
          "62:     value = loader.construct_scalar(node)",
          "63:     result = yaql_expression.YaqlExpression(value)",
          "64:     result.source_file_position = build_position(node)",
          "65:     return result",
          "67: YaqlYamlLoader.add_constructor(u'!yaql', yaql_constructor)",
          "68: YaqlYamlLoader.add_implicit_resolver(u'!yaql', yaql_expression.YaqlExpression,",
          "69:                                      None)",
          "",
          "[Added Lines]",
          "21: from murano.dsl import helpers",
          "25: def get_loader(version):",
          "26:     version = helpers.parse_version(version)",
          "28:     class MuranoPlDict(dict):",
          "29:         pass",
          "31:     class YaqlExpression(yaql_expression.YaqlExpression):",
          "32:         @staticmethod",
          "33:         def match(expr):",
          "34:             return yaql_expression.YaqlExpression.is_expression(expr, version)",
          "36:     def load(contents, file_id):",
          "37:         def build_position(node):",
          "38:             return dsl_types.ExpressionFilePosition(",
          "39:                 file_id,",
          "40:                 node.start_mark.line + 1,",
          "41:                 node.start_mark.column + 1,",
          "42:                 node.end_mark.line + 1,",
          "43:                 node.end_mark.column + 1)",
          "45:         class MuranoPlYamlConstructor(yaml.constructor.Constructor):",
          "46:             def construct_yaml_map(self, node):",
          "47:                 data = MuranoPlDict()",
          "48:                 data.source_file_position = build_position(node)",
          "49:                 yield data",
          "50:                 value = self.construct_mapping(node)",
          "51:                 data.update(value)",
          "53:         class YaqlYamlLoader(yaml.Loader, MuranoPlYamlConstructor):",
          "54:             pass",
          "56:         YaqlYamlLoader.add_constructor(",
          "57:             u'tag:yaml.org,2002:map',",
          "58:             MuranoPlYamlConstructor.construct_yaml_map)",
          "60:         # workaround for PyYAML bug: http://pyyaml.org/ticket/221",
          "61:         resolvers = {}",
          "62:         for k, v in yaml.Loader.yaml_implicit_resolvers.items():",
          "63:             resolvers[k] = v[:]",
          "64:         YaqlYamlLoader.yaml_implicit_resolvers = resolvers",
          "66:         def yaql_constructor(loader, node):",
          "67:             value = loader.construct_scalar(node)",
          "68:             result = yaql_expression.YaqlExpression(value, version)",
          "69:             result.source_file_position = build_position(node)",
          "70:             return result",
          "72:         YaqlYamlLoader.add_constructor(u'!yaql', yaql_constructor)",
          "73:         YaqlYamlLoader.add_implicit_resolver(u'!yaql', YaqlExpression, None)",
          "74:         return yaml.load(contents, Loader=YaqlYamlLoader)",
          "76:     return load",
          "",
          "---------------"
        ],
        "murano/packages/application_package.py||murano/packages/application_package.py": [
          "File: murano/packages/application_package.py -> murano/packages/application_package.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "murano/packages/hot_package.py||murano/packages/hot_package.py": [
          "File: murano/packages/hot_package.py -> murano/packages/hot_package.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import sys",
          "18: import types",
          "21: import yaml",
          "25: from murano.packages import exceptions",
          "28: RESOURCES_DIR_NAME = 'Resources/'",
          "29: HOT_FILES_DIR_NAME = 'HotFiles/'",
          "30: HOT_ENV_DIR_NAME = 'HotEnvironments/'",
          "33: class Dumper(yaml.Dumper):",
          "34:     pass",
          "37: def yaql_representer(dumper, data):",
          "41: Dumper.add_representer(YAQL, yaql_representer)",
          "47:         self._translated_class = None",
          "48:         self._source_directory = source_directory",
          "49:         self._translated_ui = None",
          "69:     @property",
          "70:     def classes(self):",
          "71:         return self.full_name,",
          "73:     @property",
          "74:     def ui(self):",
          "75:         if not self._translated_ui:",
          "76:             self._translated_ui = self._translate_ui()",
          "77:         return self._translated_ui",
          "85:     def get_class(self, name):",
          "86:         if name != self.full_name:",
          "87:             raise exceptions.PackageClassLoadError(",
          "88:                 name, 'Class not defined in this package')",
          "89:         if not self._translated_class:",
          "90:             self._translate_class()",
          "99:     def _translate_class(self):",
          "100:         template_file = os.path.join(self._source_directory, 'template.yaml')",
          "",
          "[Removed Lines]",
          "20: import semantic_version",
          "23: from murano.dsl import yaql_expression",
          "24: from murano.packages import application_package",
          "27: YAQL = yaql_expression.YaqlExpression",
          "38:     return dumper.represent_scalar(u'!yaql', str(data))",
          "44: class HotPackage(application_package.ApplicationPackage):",
          "45:     def __init__(self, source_directory, manifest, loader, runtime_version):",
          "46:         super(HotPackage, self).__init__(source_directory, manifest, loader)",
          "51:         self._full_name = manifest.get('FullName')",
          "52:         if not self._full_name:",
          "53:             raise exceptions.PackageFormatError(",
          "54:                 'FullName not specified')",
          "55:         self._check_full_name(self._full_name)",
          "56:         self._package_type = manifest.get('Type')",
          "57:         if self._package_type not in application_package.PackageTypes.ALL:",
          "58:             raise exceptions.PackageFormatError('Invalid Package Type')",
          "59:         self._display_name = manifest.get('Name', self._full_name)",
          "60:         self._description = manifest.get('Description')",
          "61:         self._author = manifest.get('Author')",
          "62:         self._supplier = manifest.get('Supplier') or {}",
          "63:         self._logo = manifest.get('Logo')",
          "64:         self._tags = manifest.get('Tags')",
          "65:         self._version = semantic_version.Version.coerce(str(manifest.get(",
          "66:             'Version', '0.0.0')))",
          "67:         self._runtime_version = runtime_version",
          "79:     @property",
          "80:     def raw_ui(self):",
          "81:         ui_obj = self.ui",
          "82:         result = yaml.dump(ui_obj, Dumper=Dumper, default_style='\"')",
          "83:         return result",
          "91:         return self._translated_class",
          "93:     def load(self):",
          "94:         self.get_class(self.full_name)",
          "95:         if not self._translated_ui:",
          "96:             self._translated_ui = self._translate_ui()",
          "97:         super(HotPackage, self).load()",
          "",
          "[Added Lines]",
          "23: from murano.packages import package_base",
          "30: class YAQL(object):",
          "31:     def __init__(self, expr):",
          "32:         self.expr = expr",
          "40:     return dumper.represent_scalar(u'!yaql', data.expr)",
          "46: class HotPackage(package_base.PackageBase):",
          "47:     def __init__(self, source_directory, manifest,",
          "48:                  package_format, runtime_version):",
          "49:         super(HotPackage, self).__init__(",
          "50:             source_directory, manifest, package_format, runtime_version)",
          "60:     @property",
          "61:     def requirements(self):",
          "62:         return {}",
          "76:         return self._translated_class, '<generated code>'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         files = HotPackage._translate_files(self._source_directory)",
          "130:         translated.update(HotPackage._generate_workflow(hot, files))",
          "133:     @staticmethod",
          "134:     def _build_properties(hot, validate_hot_parameters):",
          "",
          "[Removed Lines]",
          "131:         self._translated_class = translated",
          "",
          "[Added Lines]",
          "110:         self._translated_class = yaml.dump(translated, Dumper=Dumper)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "546:                 groups, self.full_name),",
          "547:             'Forms': forms",
          "548:         }",
          "",
          "[Removed Lines]",
          "549:         return translated",
          "",
          "[Added Lines]",
          "528:         return yaml.dump(translated, Dumper=Dumper)",
          "",
          "---------------"
        ],
        "murano/packages/load_utils.py||murano/packages/load_utils.py": [
          "File: murano/packages/load_utils.py -> murano/packages/load_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #    License for the specific language governing permissions and limitations",
          "13: #    under the License.",
          "15: import os",
          "16: import shutil",
          "17: import string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import contextlib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: import semantic_version",
          "23: import yaml",
          "27: import murano.packages.exceptions as e",
          "28: import murano.packages.hot_package",
          "29: import murano.packages.mpl_package",
          "34:     if not os.path.isfile(archive_path):",
          "35:         raise e.PackageLoadError('Unable to find package file')",
          "36:     created = False",
          "",
          "[Removed Lines]",
          "25: from murano.engine import yaql_yaml_loader",
          "26: import murano.packages.application_package",
          "32: def load_from_file(archive_path, target_dir=None, drop_dir=False,",
          "33:                    loader=yaql_yaml_loader.YaqlYamlLoader, preload=True):",
          "",
          "[Added Lines]",
          "31: @contextlib.contextmanager",
          "32: def load_from_file(archive_path, target_dir=None, drop_dir=False):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:                                        \"zip archive\".format(archive_path))",
          "51:         package = zipfile.ZipFile(archive_path)",
          "52:         package.extractall(path=target_dir)",
          "54:     except ValueError as err:",
          "55:         raise e.PackageLoadError(\"Couldn't load package from file: \"",
          "56:                                  \"{0}\".format(err))",
          "",
          "[Removed Lines]",
          "53:         return load_from_dir(target_dir, preload=preload, loader=loader)",
          "",
          "[Added Lines]",
          "52:         yield load_from_dir(target_dir)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:                     os.unlink(os.path.join(target_dir, f))",
          "68:     formats = {",
          "69:         'MuranoPL': {",
          "70:             ('1.0.0', '1.0.0'): murano.packages.mpl_package.MuranoPlPackage,",
          "",
          "[Removed Lines]",
          "66: def load_from_dir(source_directory, filename='manifest.yaml', preload=False,",
          "67:                   loader=yaql_yaml_loader.YaqlYamlLoader):",
          "",
          "[Added Lines]",
          "65: def load_from_dir(source_directory, filename='manifest.yaml'):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:             min_version = semantic_version.Version(key[0])",
          "105:             max_version = semantic_version.Version(key[1])",
          "106:             if min_version <= version <= max_version:",
          "111:         raise e.PackageFormatError(",
          "112:             'Unsupported {0} format version {1}'.format(parts[0], version))",
          "",
          "[Removed Lines]",
          "107:                 package = value(source_directory, content, loader, version)",
          "108:                 if preload:",
          "109:                     package.load()",
          "110:                 return package",
          "",
          "[Added Lines]",
          "105:                 return value(source_directory, content, parts[0], version)",
          "",
          "---------------"
        ],
        "murano/packages/mpl_package.py||murano/packages/mpl_package.py": [
          "File: murano/packages/mpl_package.py -> murano/packages/mpl_package.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #    under the License.",
          "15: import os",
          "22: from murano.packages import exceptions",
          "27:         super(MuranoPlPackage, self).__init__(",
          "47:         self._classes = manifest.get('Classes')",
          "54:         self._requirements = manifest.get('Require') or {}",
          "56:     @property",
          "57:     def classes(self):",
          "60:     @property",
          "61:     def ui(self):",
          "66:     @property",
          "72:     def get_class(self, name):",
          "99:         if name not in self._classes:",
          "100:             raise exceptions.PackageClassLoadError(",
          "101:                 name, 'Class not defined in package ' + self.full_name)",
          "",
          "[Removed Lines]",
          "16: import sys",
          "18: import semantic_version",
          "19: import yaml",
          "21: from murano.packages import application_package",
          "25: class MuranoPlPackage(application_package.ApplicationPackage):",
          "26:     def __init__(self, source_directory, manifest, loader, runtime_version):",
          "28:             source_directory, manifest, loader)",
          "30:         self._classes = None",
          "31:         self._ui = None",
          "32:         self._ui_cache = None",
          "33:         self._raw_ui_cache = None",
          "34:         self._classes_cache = {}",
          "36:         self._full_name = manifest.get('FullName')",
          "37:         if not self._full_name:",
          "38:             raise exceptions.PackageFormatError('FullName not specified')",
          "39:         self._check_full_name(self._full_name)",
          "40:         self._package_type = manifest.get('Type')",
          "41:         if self._package_type not in application_package.PackageTypes.ALL:",
          "42:             raise exceptions.PackageFormatError('Invalid Package Type')",
          "43:         self._display_name = manifest.get('Name', self._full_name)",
          "44:         self._description = manifest.get('Description')",
          "45:         self._author = manifest.get('Author')",
          "46:         self._supplier = manifest.get('Supplier') or {}",
          "48:         self._ui = manifest.get('UI', 'ui.yaml')",
          "49:         self._logo = manifest.get('Logo')",
          "50:         self._tags = manifest.get('Tags')",
          "51:         self._version = semantic_version.Version.coerce(str(manifest.get(",
          "52:             'Version', '0.0.0')))",
          "53:         self._runtime_version = runtime_version",
          "58:         return tuple(self._classes.keys())",
          "62:         if not self._ui_cache:",
          "63:             self._load_ui(True)",
          "64:         return self._ui_cache",
          "67:     def raw_ui(self):",
          "68:         if not self._raw_ui_cache:",
          "69:             self._load_ui(False)",
          "70:         return self._raw_ui_cache",
          "73:         if name not in self._classes_cache:",
          "74:             self._load_class(name)",
          "75:         return self._classes_cache[name]",
          "77:     # Private methods",
          "78:     def _load_ui(self, load_yaml=False):",
          "79:         if self._raw_ui_cache and load_yaml:",
          "80:             self._ui_cache = yaml.load(self._raw_ui_cache, self.yaml_loader)",
          "81:         else:",
          "82:             ui_file = self._ui",
          "83:             full_path = os.path.join(self._source_directory, 'UI', ui_file)",
          "84:             if not os.path.isfile(full_path):",
          "85:                 self._raw_ui_cache = None",
          "86:                 self._ui_cache = None",
          "87:                 return",
          "88:             try:",
          "89:                 with open(full_path) as stream:",
          "90:                     self._raw_ui_cache = stream.read()",
          "91:                     if load_yaml:",
          "92:                         self._ui_cache = yaml.load(self._raw_ui_cache,",
          "93:                                                    self.yaml_loader)",
          "94:             except Exception as ex:",
          "95:                 trace = sys.exc_info()[2]",
          "96:                 raise exceptions.PackageUILoadError(str(ex)), None, trace",
          "98:     def _load_class(self, name):",
          "",
          "[Added Lines]",
          "18: from murano.packages import package_base",
          "21: class MuranoPlPackage(package_base.PackageBase):",
          "22:     def __init__(self, source_directory, manifest,",
          "23:                  package_format, runtime_version):",
          "25:             source_directory, manifest, package_format, runtime_version)",
          "27:         self._ui_file = manifest.get('UI', 'ui.yaml')",
          "32:         return self._classes.keys()",
          "36:         full_path = os.path.join(self._source_directory, 'UI', self._ui_file)",
          "37:         if not os.path.isfile(full_path):",
          "38:             return None",
          "39:         with open(full_path) as stream:",
          "40:             return stream.read()",
          "43:     def requirements(self):",
          "44:         return self._requirements",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         if not os.path.isfile(full_path):",
          "105:             raise exceptions.PackageClassLoadError(",
          "106:                 name, 'File with class definition not found')",
          "",
          "[Removed Lines]",
          "107:         try:",
          "108:             with open(full_path) as stream:",
          "109:                 self._classes_cache[name] = yaml.load(stream, self.yaml_loader)",
          "110:         except Exception as ex:",
          "111:             trace = sys.exc_info()[2]",
          "112:             msg = 'Unable to load class definition due to \"{0}\"'.format(",
          "113:                 str(ex))",
          "114:             raise exceptions.PackageClassLoadError(name, msg), None, trace",
          "116:     def load(self):",
          "117:         self._classes_cache.clear()",
          "118:         for class_name in self._classes:",
          "119:             self.get_class(class_name)",
          "120:         self._load_ui(True)",
          "121:         super(MuranoPlPackage, self).load()",
          "",
          "[Added Lines]",
          "55:         with open(full_path) as stream:",
          "56:             return stream.read(), full_path",
          "",
          "---------------"
        ],
        "murano/packages/package.py||murano/packages/package.py": [
          "File: murano/packages/package.py -> murano/packages/package.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) 2015 Mirantis Inc.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: # you may not use this file except in compliance with the License.",
          "5: # You may obtain a copy of the License at",
          "6: #",
          "7: #    http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",
          "12: # implied.",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License.",
          "16: import abc",
          "17: import io",
          "18: import os",
          "19: import zipfile",
          "21: import six",
          "24: class PackageType(object):",
          "25:     Library = 'Library'",
          "26:     Application = 'Application'",
          "27:     ALL = [Library, Application]",
          "30: @six.add_metaclass(abc.ABCMeta)",
          "31: class Package(object):",
          "32:     def __init__(self, source_directory, package_format, runtime_version):",
          "33:         self._source_directory = source_directory",
          "34:         self._format = package_format",
          "35:         self._runtime_version = runtime_version",
          "36:         self._blob_cache = None",
          "38:     @property",
          "39:     def format(self):",
          "40:         return self._format",
          "42:     @abc.abstractproperty",
          "43:     def full_name(self):",
          "44:         raise NotImplementedError()",
          "46:     @abc.abstractproperty",
          "47:     def version(self):",
          "48:         raise NotImplementedError()",
          "50:     @abc.abstractproperty",
          "51:     def classes(self):",
          "52:         raise NotImplementedError()",
          "54:     @property",
          "55:     def runtime_version(self):",
          "56:         return self._runtime_version",
          "58:     @abc.abstractproperty",
          "59:     def requirements(self):",
          "60:         raise NotImplementedError()",
          "62:     @abc.abstractproperty",
          "63:     def package_type(self):",
          "64:         raise NotImplementedError()",
          "66:     @abc.abstractproperty",
          "67:     def display_name(self):",
          "68:         raise NotImplementedError()",
          "70:     @abc.abstractproperty",
          "71:     def description(self):",
          "72:         raise NotImplementedError()",
          "74:     @abc.abstractproperty",
          "75:     def author(self):",
          "76:         raise NotImplementedError()",
          "78:     @abc.abstractproperty",
          "79:     def supplier(self):",
          "80:         raise NotImplementedError()",
          "82:     @abc.abstractproperty",
          "83:     def tags(self):",
          "84:         raise NotImplementedError()",
          "86:     @abc.abstractproperty",
          "87:     def logo(self):",
          "88:         raise NotImplementedError()",
          "90:     @abc.abstractproperty",
          "91:     def supplier_logo(self):",
          "92:         raise NotImplementedError()",
          "94:     @property",
          "95:     def blob(self):",
          "96:         if not self._blob_cache:",
          "97:             self._blob_cache = _pack_dir(self._source_directory)",
          "98:         return self._blob_cache",
          "100:     @abc.abstractmethod",
          "101:     def get_class(self, name):",
          "102:         raise NotImplementedError()",
          "104:     @abc.abstractmethod",
          "105:     def get_resource(self, name):",
          "106:         raise NotImplementedError()",
          "108:     @abc.abstractproperty",
          "109:     def ui(self):",
          "110:         raise NotImplementedError()",
          "113: def _zip_dir(path, zip_file):",
          "114:     for root, dirs, files in os.walk(path):",
          "115:         for f in files:",
          "116:             abs_path = os.path.join(root, f)",
          "117:             relative_path = os.path.relpath(abs_path, path)",
          "118:             zip_file.write(abs_path, relative_path)",
          "121: def _pack_dir(source_directory):",
          "122:     blob = io.BytesIO()",
          "123:     zip_file = zipfile.ZipFile(blob, mode='w')",
          "124:     _zip_dir(source_directory, zip_file)",
          "125:     zip_file.close()",
          "127:     return blob.getvalue()",
          "",
          "---------------"
        ],
        "murano/packages/package_base.py||murano/packages/package_base.py": [
          "File: murano/packages/package_base.py -> murano/packages/package_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) 2015 Mirantis Inc.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: # you may not use this file except in compliance with the License.",
          "5: # You may obtain a copy of the License at",
          "6: #",
          "7: #    http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",
          "12: # implied.",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License.",
          "16: import abc",
          "17: import imghdr",
          "18: import os",
          "19: import re",
          "20: import sys",
          "22: import semantic_version",
          "24: from murano.packages import exceptions",
          "25: from murano.packages import package",
          "28: class PackageBase(package.Package):",
          "29:     def __init__(self, source_directory, manifest,",
          "30:                  package_format, runtime_version):",
          "31:         super(PackageBase, self).__init__(",
          "32:             source_directory, package_format, runtime_version)",
          "33:         self._full_name = manifest.get('FullName')",
          "34:         if not self._full_name:",
          "35:             raise exceptions.PackageFormatError('FullName is not specified')",
          "36:         self._check_full_name(self._full_name)",
          "37:         self._version = semantic_version.Version.coerce(str(manifest.get(",
          "38:             'Version', '0.0.0')))",
          "39:         self._package_type = manifest.get('Type')",
          "40:         if self._package_type not in package.PackageType.ALL:",
          "41:             raise exceptions.PackageFormatError(",
          "42:                 'Invalid package Type {0}'.format(self._package_type))",
          "43:         self._display_name = manifest.get('Name', self._full_name)",
          "44:         self._description = manifest.get('Description')",
          "45:         self._author = manifest.get('Author')",
          "46:         self._supplier = manifest.get('Supplier') or {}",
          "47:         self._logo = manifest.get('Logo')",
          "48:         self._tags = manifest.get('Tags')",
          "50:         self._logo_cache = None",
          "51:         self._supplier_logo_cache = None",
          "53:     @abc.abstractproperty",
          "54:     def requirements(self):",
          "55:         raise NotImplementedError()",
          "57:     @abc.abstractproperty",
          "58:     def classes(self):",
          "59:         raise NotImplementedError()",
          "61:     @abc.abstractmethod",
          "62:     def get_class(self, name):",
          "63:         raise NotImplementedError()",
          "65:     @abc.abstractproperty",
          "66:     def ui(self):",
          "67:         raise NotImplementedError()",
          "69:     @property",
          "70:     def full_name(self):",
          "71:         return self._full_name",
          "73:     @property",
          "74:     def version(self):",
          "75:         return self._version",
          "77:     @property",
          "78:     def package_type(self):",
          "79:         return self._package_type",
          "81:     @property",
          "82:     def display_name(self):",
          "83:         return self._display_name",
          "85:     @property",
          "86:     def description(self):",
          "87:         return self._description",
          "89:     @property",
          "90:     def author(self):",
          "91:         return self._author",
          "93:     @property",
          "94:     def supplier(self):",
          "95:         return self._supplier",
          "97:     @property",
          "98:     def tags(self):",
          "99:         return list(self._tags)",
          "101:     @property",
          "102:     def logo(self):",
          "103:         return self._load_image(self._logo, 'logo.png', 'logo')",
          "105:     @property",
          "106:     def supplier_logo(self):",
          "107:         return self._load_image(",
          "108:             self._supplier.get('Logo'), 'supplier_logo.png', 'supplier logo')",
          "110:     def get_resource(self, name):",
          "111:         resources_dir = os.path.join(self._source_directory, 'Resources')",
          "112:         if not os.path.exists(resources_dir):",
          "113:             os.makedirs(resources_dir)",
          "114:         return os.path.join(resources_dir, name)",
          "116:     def _load_image(self, file_name, default_name, what_image):",
          "117:         full_path = os.path.join(",
          "118:             self._source_directory, file_name or default_name)",
          "119:         if not os.path.isfile(full_path) and not file_name:",
          "120:             return",
          "121:         try:",
          "122:             if imghdr.what(full_path) != 'png':",
          "123:                 raise exceptions.PackageLoadError(",
          "124:                     '{0} is not in PNG format'.format(what_image))",
          "125:             with open(full_path) as stream:",
          "126:                 return stream.read()",
          "127:         except Exception as ex:",
          "128:             trace = sys.exc_info()[2]",
          "129:             raise exceptions.PackageLoadError(",
          "130:                 'Unable to load {0}: {1}'.format(what_image, ex)), None, trace",
          "132:     @staticmethod",
          "133:     def _check_full_name(full_name):",
          "134:         error = exceptions.PackageFormatError('Invalid FullName ' + full_name)",
          "135:         if re.match(r'^[\\w\\.]+$', full_name):",
          "136:             if full_name.startswith('.') or full_name.endswith('.'):",
          "137:                 raise error",
          "138:             if '..' in full_name:",
          "139:                 raise error",
          "140:         else:",
          "141:             raise error",
          "",
          "---------------"
        ],
        "murano/tests/unit/api/v1/test_catalog.py||murano/tests/unit/api/v1/test_catalog.py": [
          "File: murano/tests/unit/api/v1/test_catalog.py -> murano/tests/unit/api/v1/test_catalog.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:             'tags': pkg.tags,",
          "228:             'logo': pkg.logo,",
          "229:             'supplier_logo': pkg.supplier_logo,",
          "232:             'archive': pkg.blob,",
          "233:             'categories': [],",
          "234:         }",
          "",
          "[Removed Lines]",
          "230:             'ui_definition': pkg.raw_ui,",
          "231:             'class_definitions': pkg.classes,",
          "",
          "[Added Lines]",
          "230:             'ui_definition': pkg.ui,",
          "231:             'class_definitions': tuple(pkg.classes),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: --BOUNDARY--'''",
          "324:         with mock.patch('murano.packages.load_utils.load_from_file') as lff:",
          "327:             # Uploading a non-public package",
          "328:             req = self._post(",
          "",
          "[Removed Lines]",
          "325:             lff.return_value = package_from_dir",
          "",
          "[Added Lines]",
          "325:             ctxmgr = mock.Mock()",
          "326:             ctxmgr.__enter__ = mock.Mock(return_value=package_from_dir)",
          "327:             ctxmgr.__exit__ = mock.Mock(return_value=False)",
          "328:             lff.return_value = ctxmgr",
          "",
          "---------------"
        ],
        "murano/tests/unit/dsl/foundation/test_package_loader.py||murano/tests/unit/dsl/foundation/test_package_loader.py": [
          "File: murano/tests/unit/dsl/foundation/test_package_loader.py -> murano/tests/unit/dsl/foundation/test_package_loader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import fnmatch",
          "16: import os.path",
          "20: from murano.dsl import murano_package",
          "21: from murano.dsl import namespace_resolver",
          "22: from murano.dsl import package_loader",
          "",
          "[Removed Lines]",
          "18: import yaml",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: class TestPackage(murano_package.MuranoPackage):",
          "29:                  runtime_version, requirements, configs):",
          "30:         self.__configs = configs",
          "31:         super(TestPackage, self).__init__(",
          "33:             runtime_version, requirements)",
          "35:     def get_class_config(self, name):",
          "36:         return self.__configs.get(name, {})",
          "39: class TestPackageLoader(package_loader.MuranoPackageLoader):",
          "40:     _classes_cache = {}",
          "42:     def __init__(self, directory, package_name, parent_loader=None):",
          "43:         self._package_name = package_name",
          "44:         if directory in TestPackageLoader._classes_cache:",
          "45:             self._classes = TestPackageLoader._classes_cache[directory]",
          "46:         else:",
          "",
          "[Removed Lines]",
          "28:     def __init__(self, package_loader, name, version,",
          "32:             package_loader, name, version,",
          "",
          "[Added Lines]",
          "26:     def __init__(self, pkg_loader, name, version,",
          "30:             pkg_loader, name, version,",
          "36:     def get_resource(self, name):",
          "37:         pass",
          "45:         self._yaml_loader = yaql_yaml_loader.get_loader('1.0')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     def _load_class(self, class_def_file):",
          "82:         with open(class_def_file) as stream:",
          "85:         if 'Name' not in data:",
          "86:             return",
          "",
          "[Removed Lines]",
          "83:             data = yaml.load(stream, yaql_yaml_loader.YaqlYamlLoader)",
          "",
          "[Added Lines]",
          "85:             data = self._yaml_loader(stream.read(), class_def_file)",
          "",
          "---------------"
        ],
        "murano/tests/unit/test_engine.py||murano/tests/unit/test_engine.py": [
          "File: murano/tests/unit/test_engine.py -> murano/tests/unit/test_engine.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import re",
          "19: import mock",
          "20: import yaql",
          "21: from yaql.language import exceptions",
          "22: from yaql.language import utils",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import semantic_version",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:             'atom': ('some', (1, 'atom'), 'hi!'),",
          "133:             'sample': ('atom', (0, 1, 2, 3, 4))",
          "134:         })",
          "136:         context = yaql.create_context()",
          "137:         evaluated_value = helpers.evaluate(yaql_value, context)",
          "138:         evaluated_complex_value = helpers.evaluate(complex_value, context)",
          "",
          "[Removed Lines]",
          "135:         print yaql_value(1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: class TestYaqlExpression(base.MuranoTestCase):",
          "146:     def setUp(self):",
          "147:         super(TestYaqlExpression, self).setUp()",
          "149:     def test_expression(self):",
          "152:         self.assertEqual('string', yaql_expr.expression)",
          "154:     def test_unicode_expression(self):",
          "157:         self.assertEqual(u\"'yaql \u2665 unicode'\".encode('utf-8'),",
          "158:                          yaql_expr.expression)",
          "160:     def test_unicode_expression_expression(self):",
          "164:         self.assertEqual(u\"'yaql \u2665 unicode'\".encode('utf-8'),",
          "165:                          yaql_expr2.expression)",
          "167:     def test_evaluate_calls(self):",
          "168:         string = 'string'",
          "170:                           mock.call().evaluate(context=None)]",
          "172:         with mock.patch('murano.dsl.yaql_integration.parse') as mock_parse:",
          "174:             yaql_expr(None)",
          "176:         self.assertEqual(expected_calls, mock_parse.mock_calls)",
          "181:         with mock.patch('murano.dsl.yaql_integration.parse'):",
          "185:         with mock.patch('murano.dsl.yaql_integration.parse') as parse_mock:",
          "186:             parse_mock.side_effect = exceptions.YaqlGrammarException",
          "189:         with mock.patch('murano.dsl.yaql_integration.parse') as parse_mock:",
          "190:             parse_mock.side_effect = exceptions.YaqlLexicalException",
          "",
          "[Removed Lines]",
          "150:         yaql_expr = yaql_expression.YaqlExpression('string')",
          "155:         yaql_expr = yaql_expression.YaqlExpression(u\"'yaql \u2665 unicode'\")",
          "161:         yaql_expr = yaql_expression.YaqlExpression(u\"'yaql \u2665 unicode'\")",
          "162:         yaql_expr2 = yaql_expression.YaqlExpression(yaql_expr)",
          "169:         expected_calls = [mock.call(string),",
          "173:             yaql_expr = yaql_expression.YaqlExpression(string)",
          "178:     def test_match_returns(self):",
          "179:         expr = yaql_expression.YaqlExpression('string')",
          "182:             self.assertTrue(expr.match('$some'))",
          "183:             self.assertTrue(expr.match('$.someMore'))",
          "187:             self.assertFalse(expr.match(''))",
          "191:             self.assertFalse(expr.match(''))",
          "",
          "[Added Lines]",
          "144:         self._version = semantic_version.Version.coerce('1.0')",
          "148:         yaql_expr = yaql_expression.YaqlExpression('string', self._version)",
          "153:         yaql_expr = yaql_expression.YaqlExpression(u\"'yaql \u2665 unicode'\",",
          "154:                                                    self._version)",
          "160:         yaql_expr = yaql_expression.YaqlExpression(u\"'yaql \u2665 unicode'\",",
          "161:                                                    self._version)",
          "162:         yaql_expr2 = yaql_expression.YaqlExpression(yaql_expr, self._version)",
          "169:         expected_calls = [mock.call(string, self._version),",
          "173:             yaql_expr = yaql_expression.YaqlExpression(string, self._version)",
          "178:     def test_is_expression_returns(self):",
          "179:         expr = yaql_expression.YaqlExpression('string', self._version)",
          "182:             self.assertTrue(expr.is_expression('$some', self._version))",
          "183:             self.assertTrue(expr.is_expression('$.someMore', self._version))",
          "187:             self.assertFalse(expr.is_expression('', self._version))",
          "191:             self.assertFalse(expr.is_expression('', self._version))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "355513fe2e8c929f783de1109bee76c340cedced",
      "candidate_info": {
        "commit_hash": "355513fe2e8c929f783de1109bee76c340cedced",
        "repo": "openstack/murano",
        "commit_url": "https://github.com/openstack/murano/commit/355513fe2e8c929f783de1109bee76c340cedced",
        "files": [
          "murano/engine/yaql_yaml_loader.py",
          "murano/tests/functional/common/utils.py",
          "murano/tests/unit/policy/test_congress_rules.py",
          "releasenotes/notes/safeloader-cve-2016-4972-b3ebd61913c9c4bc.yaml"
        ],
        "message": "Use SafeLoader to load yaml files\n\nBefore this patch yaml.Loader was used by the engine to create custom\nyaql-enabled yaml loader. It is unsafe do to so, because yaml.Loader is\ncapable of creating custom python objects from specifically constructed\nyaml files.\nAfter this patch all yaml load operations are performed with safe\nloaders instead.\nAlso use SafeConstructor instead of Constructor.\n\nChange-Id: I61a3c42d73608b5d013285f015a45f4774d264e3\nCloses-Bug: #1586079",
        "before_after_code_files": [
          "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
          "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
          "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
            "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
            "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
          ],
          "candidate": [
            "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
            "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
            "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
          ]
        }
      },
      "candidate_diff": {
        "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py": [
          "File: murano/engine/yaql_yaml_loader.py -> murano/engine/yaql_yaml_loader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:                 node.end_mark.line + 1,",
          "44:                 node.end_mark.column + 1)",
          "47:             def construct_yaml_map(self, node):",
          "48:                 data = MuranoPlDict()",
          "49:                 data.source_file_position = build_position(node)",
          "",
          "[Removed Lines]",
          "46:         class MuranoPlYamlConstructor(yaml.constructor.Constructor):",
          "",
          "[Added Lines]",
          "46:         class MuranoPlYamlConstructor(yaml.constructor.SafeConstructor):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:                 value = self.construct_mapping(node)",
          "52:                 data.update(value)",
          "55:             pass",
          "57:         YaqlYamlLoader.add_constructor(",
          "",
          "[Removed Lines]",
          "54:         class YaqlYamlLoader(yaml.Loader, MuranoPlYamlConstructor):",
          "",
          "[Added Lines]",
          "54:         class YaqlYamlLoader(yaml.SafeLoader, MuranoPlYamlConstructor):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         # workaround for PyYAML bug: http://pyyaml.org/ticket/221",
          "62:         resolvers = {}",
          "64:             resolvers[k] = v[:]",
          "65:         YaqlYamlLoader.yaml_implicit_resolvers = resolvers",
          "",
          "[Removed Lines]",
          "63:         for k, v in yaml.Loader.yaml_implicit_resolvers.items():",
          "",
          "[Added Lines]",
          "63:         for k, v in yaml.SafeLoader.yaml_implicit_resolvers.items():",
          "",
          "---------------"
        ],
        "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py": [
          "File: murano/tests/functional/common/utils.py -> murano/tests/functional/common/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         \"\"\"",
          "240:         component = service.to_dict()",
          "241:         component = json.dumps(component)",
          "244:     @classmethod",
          "245:     def get_service_id(cls, service):",
          "",
          "[Removed Lines]",
          "242:         return yaml.load(component)",
          "",
          "[Added Lines]",
          "242:         return yaml.safe_load(component)",
          "",
          "---------------"
        ],
        "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py": [
          "File: murano/tests/unit/policy/test_congress_rules.py -> murano/tests/unit/policy/test_congress_rules.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:             os.path.dirname(inspect.getfile(self.__class__)), file_name)",
          "89:         with open(model_file) as stream:",
          "92:     def _create_rules_str(self, model_file, package_loader=None):",
          "93:         model = self._load_file(model_file)",
          "",
          "[Removed Lines]",
          "90:             return yaml.load(stream)",
          "",
          "[Added Lines]",
          "90:             return yaml.safe_load(stream)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b03c4759aa40d66bd4fcf62c96e352c117bdf4b9",
      "candidate_info": {
        "commit_hash": "b03c4759aa40d66bd4fcf62c96e352c117bdf4b9",
        "repo": "openstack/murano",
        "commit_url": "https://github.com/openstack/murano/commit/b03c4759aa40d66bd4fcf62c96e352c117bdf4b9",
        "files": [
          "murano/engine/yaql_yaml_loader.py",
          "murano/tests/functional/common/utils.py",
          "murano/tests/unit/policy/test_congress_rules.py",
          "releasenotes/notes/safeloader-cve-2016-4972-4e7e42b9257c5628.yaml"
        ],
        "message": "Use SafeLoader to load yaml files\n\nBefore this patch yaml.Loader was used by the engine to create custom\nyaql-enabled yaml loader. It is unsafe do to so, because yaml.Loader is\ncapable of creating custom python objects from specifically constructed\nyaml files.\nAfter this patch all yaml load operations are performed with safe\nloaders instead.\nAlso use SafeConstructor instead of Constructor.\n\nChange-Id: I61a3c42d73608b5d013285f015a45f4774d264e3\nCloses-Bug: #1586079",
        "before_after_code_files": [
          "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
          "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
          "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
            "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
            "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
          ],
          "candidate": [
            "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py",
            "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py",
            "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py"
          ]
        }
      },
      "candidate_diff": {
        "murano/engine/yaql_yaml_loader.py||murano/engine/yaql_yaml_loader.py": [
          "File: murano/engine/yaql_yaml_loader.py -> murano/engine/yaql_yaml_loader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:                 node.end_mark.line + 1,",
          "44:                 node.end_mark.column + 1)",
          "47:             def construct_yaml_map(self, node):",
          "48:                 data = MuranoPlDict()",
          "49:                 data.source_file_position = build_position(node)",
          "",
          "[Removed Lines]",
          "46:         class MuranoPlYamlConstructor(yaml.constructor.Constructor):",
          "",
          "[Added Lines]",
          "46:         class MuranoPlYamlConstructor(yaml.constructor.SafeConstructor):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:                 value = self.construct_mapping(node)",
          "52:                 data.update(value)",
          "55:             pass",
          "57:         YaqlYamlLoader.add_constructor(",
          "",
          "[Removed Lines]",
          "54:         class YaqlYamlLoader(yaml.Loader, MuranoPlYamlConstructor):",
          "",
          "[Added Lines]",
          "54:         class YaqlYamlLoader(yaml.SafeLoader, MuranoPlYamlConstructor):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         # workaround for PyYAML bug: http://pyyaml.org/ticket/221",
          "62:         resolvers = {}",
          "64:             resolvers[k] = v[:]",
          "65:         YaqlYamlLoader.yaml_implicit_resolvers = resolvers",
          "",
          "[Removed Lines]",
          "63:         for k, v in yaml.Loader.yaml_implicit_resolvers.items():",
          "",
          "[Added Lines]",
          "63:         for k, v in yaml.SafeLoader.yaml_implicit_resolvers.items():",
          "",
          "---------------"
        ],
        "murano/tests/functional/common/utils.py||murano/tests/functional/common/utils.py": [
          "File: murano/tests/functional/common/utils.py -> murano/tests/functional/common/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:         \"\"\"",
          "248:         component = service.to_dict()",
          "249:         component = json.dumps(component)",
          "252:     @classmethod",
          "253:     def get_service_id(cls, service):",
          "",
          "[Removed Lines]",
          "250:         return yaml.load(component)",
          "",
          "[Added Lines]",
          "250:         return yaml.safe_load(component)",
          "",
          "---------------"
        ],
        "murano/tests/unit/policy/test_congress_rules.py||murano/tests/unit/policy/test_congress_rules.py": [
          "File: murano/tests/unit/policy/test_congress_rules.py -> murano/tests/unit/policy/test_congress_rules.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:             os.path.dirname(inspect.getfile(self.__class__)), file_name)",
          "89:         with open(model_file) as stream:",
          "92:     def _create_rules_str(self, model_file, package_loader=None):",
          "93:         model = self._load_file(model_file)",
          "",
          "[Removed Lines]",
          "90:             return yaml.load(stream)",
          "",
          "[Added Lines]",
          "90:             return yaml.safe_load(stream)",
          "",
          "---------------"
        ]
      }
    }
  ]
}