{
  "cve_id": "CVE-2020-10378",
  "cve_desc": "In libImaging/PcxDecode.c in Pillow before 7.1.0, an out-of-bounds read can occur when reading PCX files where state->shuffle is instructed to read beyond state->buffer.",
  "repo": "python-pillow/Pillow",
  "patch_hash": "6a83e4324738bb0452fbe8074a995b1c73f08de7",
  "patch_info": {
    "commit_hash": "6a83e4324738bb0452fbe8074a995b1c73f08de7",
    "repo": "python-pillow/Pillow",
    "commit_url": "https://github.com/python-pillow/Pillow/commit/6a83e4324738bb0452fbe8074a995b1c73f08de7",
    "files": [
      "src/libImaging/PcxDecode.c"
    ],
    "message": "Fix OOB Access on PcxDecode.c",
    "before_after_code_files": [
      "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c"
    ]
  },
  "patch_diff": {
    "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c": [
      "File: src/libImaging/PcxDecode.c -> src/libImaging/PcxDecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:     UINT8 n;",
      "23:     UINT8* ptr;",
      "29:         state->errcode = IMAGING_CODEC_OVERRUN;",
      "30:         return -1;",
      "31:     }",
      "",
      "[Removed Lines]",
      "25:     if (strcmp(im->mode, \"1\") == 0 && state->xsize > state->bytes * 8) {",
      "26:         state->errcode = IMAGING_CODEC_OVERRUN;",
      "27:         return -1;",
      "28:     } else if (strcmp(im->mode, \"P\") == 0 && state->xsize > state->bytes) {",
      "",
      "[Added Lines]",
      "25:     if ((state->xsize * state->bits + 7) / 8 > state->bytes) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "124f4bb591e16212605d0e41c413ed53e242cba2",
      "candidate_info": {
        "commit_hash": "124f4bb591e16212605d0e41c413ed53e242cba2",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/124f4bb591e16212605d0e41c413ed53e242cba2",
        "files": [
          "Tests/images/01r_00.pcx",
          "Tests/test_image.py"
        ],
        "message": "Tests for PCX OOB Access",
        "before_after_code_files": [
          "Tests/test_image.py||Tests/test_image.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/python-pillow/Pillow/pull/4506"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tests/test_image.py||Tests/test_image.py": [
          "File: Tests/test_image.py -> Tests/test_image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:             assert test_module.PILLOW_VERSION > \"7.0.0\"",
          "640:     def test_overrun(self):",
          "641:         for file in [",
          "642:             \"fli_overrun.bin\",",
          "643:             \"sgi_overrun.bin\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:         \"\"\" For overrun completeness, test as:",
          "642:         `valgrind pytest -qq Tests/test_image.py::TestImage::test_overrun | grep decode.c`",
          "643:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "645:             \"sgi_overrun_expandrow2.bin\",",
          "646:             \"pcx_overrun.bin\",",
          "647:             \"pcx_overrun2.bin\",",
          "648:         ]:",
          "649:             with Image.open(os.path.join(\"Tests/images\", file)) as im:",
          "650:                 try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:             \"01r_00.pcx\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ada137eba5b605fd5aeff619c33bbf0e53af26ee",
      "candidate_info": {
        "commit_hash": "ada137eba5b605fd5aeff619c33bbf0e53af26ee",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/ada137eba5b605fd5aeff619c33bbf0e53af26ee",
        "files": [
          "Tests/test_image.py"
        ],
        "message": "Fix Flake8",
        "before_after_code_files": [
          "Tests/test_image.py||Tests/test_image.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/python-pillow/Pillow/pull/4506"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tests/test_image.py||Tests/test_image.py": [
          "File: Tests/test_image.py -> Tests/test_image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:     def test_overrun(self):",
          "641:         \"\"\" For overrun completeness, test as:",
          "643:         \"\"\"",
          "644:         for file in [",
          "645:             \"fli_overrun.bin\",",
          "",
          "[Removed Lines]",
          "642:         `valgrind pytest -qq Tests/test_image.py::TestImage::test_overrun | grep decode.c`",
          "",
          "[Added Lines]",
          "642:         valgrind pytest -qq Tests/test_image.py::TestImage::test_overrun | grep decode.c",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f0c8f731190f761180bed827d07b7a740d8555b",
      "candidate_info": {
        "commit_hash": "8f0c8f731190f761180bed827d07b7a740d8555b",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/8f0c8f731190f761180bed827d07b7a740d8555b",
        "files": [
          "Tests/images/pcx_overrun2.bin",
          "Tests/test_image.py",
          "src/libImaging/PcxDecode.c"
        ],
        "message": "Catch PCX P mode buffer overrun",
        "before_after_code_files": [
          "Tests/test_image.py||Tests/test_image.py",
          "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c"
          ],
          "candidate": [
            "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_image.py||Tests/test_image.py": [
          "File: Tests/test_image.py -> Tests/test_image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:             self.assertFalse(fp.closed)",
          "592:     def test_overrun(self):",
          "594:             with Image.open(os.path.join(\"Tests/images\", file)) as im:",
          "595:                 try:",
          "596:                     im.load()",
          "",
          "[Removed Lines]",
          "593:         for file in [\"fli_overrun.bin\", \"sgi_overrun.bin\", \"pcx_overrun.bin\"]:",
          "",
          "[Added Lines]",
          "593:         for file in [",
          "594:             \"fli_overrun.bin\",",
          "595:             \"sgi_overrun.bin\",",
          "596:             \"pcx_overrun.bin\",",
          "597:             \"pcx_overrun2.bin\",",
          "598:         ]:",
          "",
          "---------------"
        ],
        "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c": [
          "File: src/libImaging/PcxDecode.c -> src/libImaging/PcxDecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     if (strcmp(im->mode, \"1\") == 0 && state->xsize > state->bytes * 8) {",
          "26:         state->errcode = IMAGING_CODEC_OVERRUN;",
          "27:         return -1;",
          "28:     }",
          "30:     ptr = buf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:     } else if (strcmp(im->mode, \"P\") == 0 && state->xsize > state->bytes) {",
          "29:         state->errcode = IMAGING_CODEC_OVERRUN;",
          "30:         return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab52630d0644e42a75eb88b78b9a9d7438a6fbeb",
      "candidate_info": {
        "commit_hash": "ab52630d0644e42a75eb88b78b9a9d7438a6fbeb",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/ab52630d0644e42a75eb88b78b9a9d7438a6fbeb",
        "files": [
          "Tests/images/fli_overrun.bin",
          "Tests/images/pcx_overrun.bin",
          "Tests/images/sgi_overrun.bin",
          "Tests/test_image.py",
          "src/libImaging/FliDecode.c",
          "src/libImaging/PcxDecode.c",
          "src/libImaging/SgiRleDecode.c"
        ],
        "message": "Catch buffer overruns",
        "before_after_code_files": [
          "Tests/test_image.py||Tests/test_image.py",
          "src/libImaging/FliDecode.c||src/libImaging/FliDecode.c",
          "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c",
          "src/libImaging/SgiRleDecode.c||src/libImaging/SgiRleDecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c"
          ],
          "candidate": [
            "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_image.py||Tests/test_image.py": [
          "File: Tests/test_image.py -> Tests/test_image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:             self.assertFalse(fp.closed)",
          "593: class MockEncoder(object):",
          "594:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:     def test_overrun(self):",
          "593:         for file in [\"fli_overrun.bin\", \"sgi_overrun.bin\", \"pcx_overrun.bin\"]:",
          "594:             im = Image.open(os.path.join(\"Tests/images\", file))",
          "595:             try:",
          "596:                 im.load()",
          "597:                 self.assertFail()",
          "598:             except IOError as e:",
          "599:                 self.assertEqual(str(e), \"buffer overrun when reading image file\")",
          "",
          "---------------"
        ],
        "src/libImaging/FliDecode.c||src/libImaging/FliDecode.c": [
          "File: src/libImaging/FliDecode.c -> src/libImaging/FliDecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: {",
          "31:     UINT8* ptr;",
          "32:     int framesize;",
          "34:     int l, lines;",
          "35:     int i, j, x = 0, y, ymax;",
          "",
          "[Removed Lines]",
          "33:     int c, chunks;",
          "",
          "[Added Lines]",
          "33:     int c, chunks, advance;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     chunks = I16(ptr+6);",
          "61:     ptr += 16;",
          "64:     for (c = 0; c < chunks; c++) {",
          "66:  switch (I16(ptr+4)) {",
          "67:  case 4: case 11:",
          "",
          "[Removed Lines]",
          "65:  UINT8 *data = ptr + 6;",
          "",
          "[Added Lines]",
          "62:     bytes -= 16;",
          "66:  UINT8* data;",
          "67:  if (bytes < 10) {",
          "68:      state->errcode = IMAGING_CODEC_OVERRUN;",
          "69:      return -1;",
          "70:  }",
          "71:  data = ptr + 6;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:      state->errcode = IMAGING_CODEC_UNKNOWN;",
          "199:      return -1;",
          "200:  }",
          "202:     }",
          "",
          "[Removed Lines]",
          "201:  ptr += I32(ptr);",
          "",
          "[Added Lines]",
          "207:  advance = I32(ptr);",
          "208:  ptr += advance;",
          "209:  bytes -= advance;",
          "",
          "---------------"
        ],
        "src/libImaging/PcxDecode.c||src/libImaging/PcxDecode.c": [
          "File: src/libImaging/PcxDecode.c -> src/libImaging/PcxDecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     UINT8 n;",
          "23:     UINT8* ptr;",
          "25:     ptr = buf;",
          "27:     for (;;) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     if (strcmp(im->mode, \"1\") == 0 && state->xsize > state->bytes * 8) {",
          "26:         state->errcode = IMAGING_CODEC_OVERRUN;",
          "27:         return -1;",
          "28:     }",
          "",
          "---------------"
        ],
        "src/libImaging/SgiRleDecode.c||src/libImaging/SgiRleDecode.c": [
          "File: src/libImaging/SgiRleDecode.c -> src/libImaging/SgiRleDecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:             c->rlelength = c->lengthtab[c->rowno + c->channo * im->ysize];",
          "158:             c->rleoffset -= SGI_HEADER_SIZE;",
          "161:             if (c->bpc ==1) {",
          "162:                 if(expandrow(&state->buffer[c->channo], &ptr[c->rleoffset], c->rlelength, im->bands))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:             if (c->rleoffset + c->rlelength > c->bufsize) {",
          "161:                 state->errcode = IMAGING_CODEC_OVERRUN;",
          "162:                 return -1;",
          "163:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}