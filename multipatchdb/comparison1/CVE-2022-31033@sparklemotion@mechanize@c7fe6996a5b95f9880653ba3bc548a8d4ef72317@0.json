{
  "cve_id": "CVE-2022-31033",
  "cve_desc": "The Mechanize library is used for automating interaction with websites. Mechanize automatically stores and sends cookies, follows redirects, and can follow links and submit forms. In versions prior to 2.8.5 the Authorization header is leaked after a redirect to a different port on the same site. Users are advised to upgrade to Mechanize v2.8.5 or later. There are no known workarounds for this issue.",
  "repo": "sparklemotion/mechanize",
  "patch_hash": "c7fe6996a5b95f9880653ba3bc548a8d4ef72317",
  "patch_info": {
    "commit_hash": "c7fe6996a5b95f9880653ba3bc548a8d4ef72317",
    "repo": "sparklemotion/mechanize",
    "commit_url": "https://github.com/sparklemotion/mechanize/commit/c7fe6996a5b95f9880653ba3bc548a8d4ef72317",
    "files": [
      "lib/mechanize/http/agent.rb",
      "test/test_mechanize_http_agent.rb"
    ],
    "message": "Merge pull request #600 from sparklemotion/flavorjones-redirect-headers\n\nfix: clear credentials when redirecting to a different port",
    "before_after_code_files": [
      "lib/mechanize/http/agent.rb||lib/mechanize/http/agent.rb",
      "test/test_mechanize_http_agent.rb||test/test_mechanize_http_agent.rb"
    ]
  },
  "patch_diff": {
    "lib/mechanize/http/agent.rb||lib/mechanize/http/agent.rb": [
      "File: lib/mechanize/http/agent.rb -> lib/mechanize/http/agent.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: class Mechanize::HTTP::Agent",
      "13:   POST_HEADERS = ['Content-Length', 'Content-MD5', 'Content-Type']",
      "15:   # :section: Headers",
      "",
      "[Removed Lines]",
      "12:   CREDENTIAL_HEADERS = ['Authorization', 'Cookie']",
      "",
      "[Added Lines]",
      "12:   CREDENTIAL_HEADERS = ['Authorization']",
      "13:   COOKIE_HEADERS = ['Cookie']",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "998:     end",
      "1000:     # Make sure we clear credential headers if being redirected to another site",
      "1004:       end",
      "1005:     end",
      "1007:     fetch new_uri, redirect_method, headers, [], referer, redirects + 1",
      "",
      "[Removed Lines]",
      "1001:     if new_uri.host != page.uri.host",
      "1002:       CREDENTIAL_HEADERS.each do |ch|",
      "1003:         headers.delete_if { |h| h.casecmp?(ch) }",
      "",
      "[Added Lines]",
      "1002:     if new_uri.host == page.uri.host",
      "1003:       if new_uri.port != page.uri.port",
      "1004:         # https://datatracker.ietf.org/doc/html/rfc6265#section-8.5",
      "1005:         # cookies are OK to be shared across ports on the same host",
      "1006:         CREDENTIAL_HEADERS.each { |ch| headers.delete_if { |h| h.casecmp?(ch) } }",
      "1008:     else",
      "1009:       (COOKIE_HEADERS + CREDENTIAL_HEADERS).each { |ch| headers.delete_if { |h| h.casecmp?(ch) } }",
      "",
      "---------------"
    ],
    "test/test_mechanize_http_agent.rb||test/test_mechanize_http_agent.rb": [
      "File: test/test_mechanize_http_agent.rb -> test/test_mechanize_http_agent.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1569:     refute_includes(headers.keys, \"AUTHORIZATION\")",
      "1570:     refute_includes(headers.keys, \"cookie\")",
      "1573:     refute_match(\"authorization|Basic xxx\", page.body)",
      "1574:     refute_match(\"cookie|name=value\", page.body)",
      "1575:   end",
      "",
      "[Removed Lines]",
      "1572:     assert_match 'range|bytes=0-9999', page.body",
      "",
      "[Added Lines]",
      "1572:     assert_match(\"range|bytes=0-9999\", page.body)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1590:     assert_includes(headers.keys, \"AUTHORIZATION\")",
      "1591:     assert_includes(headers.keys, \"cookie\")",
      "1594:     assert_match(\"authorization|Basic xxx\", page.body)",
      "1595:     assert_match(\"cookie|name=value\", page.body)",
      "1596:   end",
      "1598:   def test_response_redirect_not_ok",
      "1599:     @agent.redirect_ok = false",
      "",
      "[Removed Lines]",
      "1593:     assert_match 'range|bytes=0-9999', page.body",
      "",
      "[Added Lines]",
      "1593:     assert_match(\"range|bytes=0-9999\", page.body)",
      "1598:   def test_response_redirect_to_same_site_diff_port_with_credential",
      "1599:     @agent.redirect_ok = true",
      "1601:     headers = {",
      "1602:       'Range' => 'bytes=0-9999',",
      "1603:       'AUTHORIZATION' => 'Basic xxx',",
      "1604:       'cookie' => 'name=value',",
      "1605:     }",
      "1607:     page = html_page ''",
      "1608:     page = @agent.response_redirect({ 'Location' => 'http://example:81/http_headers' }, :get,",
      "1609:                                     page, 0, headers)",
      "1611:     refute_includes(headers.keys, \"AUTHORIZATION\")",
      "1612:     assert_includes(headers.keys, \"cookie\")",
      "1614:     assert_match(\"range|bytes=0-9999\", page.body)",
      "1615:     refute_match(\"authorization|Basic xxx\", page.body)",
      "1616:     assert_match(\"cookie|name=value\", page.body)",
      "1617:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "907c778001625cb9daa686d5019c939cb416e45b",
      "candidate_info": {
        "commit_hash": "907c778001625cb9daa686d5019c939cb416e45b",
        "repo": "sparklemotion/mechanize",
        "commit_url": "https://github.com/sparklemotion/mechanize/commit/907c778001625cb9daa686d5019c939cb416e45b",
        "files": [
          "lib/mechanize/http/agent.rb",
          "test/test_mechanize_http_agent.rb"
        ],
        "message": "fix: clear credentials when redirecting to a different port\n\nNote that in this case we treat cookies differently from credentials\nper RFC 6265 section 8.5:\n\nhttps://datatracker.ietf.org/doc/html/rfc6265#section-8.5\n\n> Cookies do not provide isolation by port.  If a cookie is readable\n> by a service running on one port, the cookie is also readable by a\n> service running on another port of the same server.  If a cookie is\n> writable by a service on one port, the cookie is also writable by a\n> service running on another port of the same server.  For this\n> reason, servers SHOULD NOT both run mutually distrusting services on\n> different ports of the same host and use cookies to store security-\n> sensitive information.",
        "before_after_code_files": [
          "lib/mechanize/http/agent.rb||lib/mechanize/http/agent.rb",
          "test/test_mechanize_http_agent.rb||test/test_mechanize_http_agent.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/sparklemotion/mechanize/pull/600"
        ],
        "olp_code_files": {
          "patch": [
            "lib/mechanize/http/agent.rb||lib/mechanize/http/agent.rb",
            "test/test_mechanize_http_agent.rb||test/test_mechanize_http_agent.rb"
          ],
          "candidate": [
            "lib/mechanize/http/agent.rb||lib/mechanize/http/agent.rb",
            "test/test_mechanize_http_agent.rb||test/test_mechanize_http_agent.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/mechanize/http/agent.rb||lib/mechanize/http/agent.rb": [
          "File: lib/mechanize/http/agent.rb -> lib/mechanize/http/agent.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: class Mechanize::HTTP::Agent",
          "13:   POST_HEADERS = ['Content-Length', 'Content-MD5', 'Content-Type']",
          "15:   # :section: Headers",
          "",
          "[Removed Lines]",
          "12:   CREDENTIAL_HEADERS = ['Authorization', 'Cookie']",
          "",
          "[Added Lines]",
          "12:   CREDENTIAL_HEADERS = ['Authorization']",
          "13:   COOKIE_HEADERS = ['Cookie']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "998:     end",
          "1000:     # Make sure we clear credential headers if being redirected to another site",
          "1004:       end",
          "1005:     end",
          "1007:     fetch new_uri, redirect_method, headers, [], referer, redirects + 1",
          "",
          "[Removed Lines]",
          "1001:     if new_uri.host != page.uri.host",
          "1002:       CREDENTIAL_HEADERS.each do |ch|",
          "1003:         headers.delete_if { |h| h.casecmp?(ch) }",
          "",
          "[Added Lines]",
          "1002:     if new_uri.host == page.uri.host",
          "1003:       if new_uri.port != page.uri.port",
          "1004:         # https://datatracker.ietf.org/doc/html/rfc6265#section-8.5",
          "1005:         # cookies are OK to be shared across ports on the same host",
          "1006:         CREDENTIAL_HEADERS.each { |ch| headers.delete_if { |h| h.casecmp?(ch) } }",
          "1008:     else",
          "1009:       (COOKIE_HEADERS + CREDENTIAL_HEADERS).each { |ch| headers.delete_if { |h| h.casecmp?(ch) } }",
          "",
          "---------------"
        ],
        "test/test_mechanize_http_agent.rb||test/test_mechanize_http_agent.rb": [
          "File: test/test_mechanize_http_agent.rb -> test/test_mechanize_http_agent.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1569:     refute_includes(headers.keys, \"AUTHORIZATION\")",
          "1570:     refute_includes(headers.keys, \"cookie\")",
          "1573:     refute_match(\"authorization|Basic xxx\", page.body)",
          "1574:     refute_match(\"cookie|name=value\", page.body)",
          "1575:   end",
          "",
          "[Removed Lines]",
          "1572:     assert_match 'range|bytes=0-9999', page.body",
          "",
          "[Added Lines]",
          "1572:     assert_match(\"range|bytes=0-9999\", page.body)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1590:     assert_includes(headers.keys, \"AUTHORIZATION\")",
          "1591:     assert_includes(headers.keys, \"cookie\")",
          "1594:     assert_match(\"authorization|Basic xxx\", page.body)",
          "1595:     assert_match(\"cookie|name=value\", page.body)",
          "1596:   end",
          "1598:   def test_response_redirect_not_ok",
          "1599:     @agent.redirect_ok = false",
          "",
          "[Removed Lines]",
          "1593:     assert_match 'range|bytes=0-9999', page.body",
          "",
          "[Added Lines]",
          "1593:     assert_match(\"range|bytes=0-9999\", page.body)",
          "1598:   def test_response_redirect_to_same_site_diff_port_with_credential",
          "1599:     @agent.redirect_ok = true",
          "1601:     headers = {",
          "1602:       'Range' => 'bytes=0-9999',",
          "1603:       'AUTHORIZATION' => 'Basic xxx',",
          "1604:       'cookie' => 'name=value',",
          "1605:     }",
          "1607:     page = html_page ''",
          "1608:     page = @agent.response_redirect({ 'Location' => 'http://example:81/http_headers' }, :get,",
          "1609:                                     page, 0, headers)",
          "1611:     refute_includes(headers.keys, \"AUTHORIZATION\")",
          "1612:     assert_includes(headers.keys, \"cookie\")",
          "1614:     assert_match(\"range|bytes=0-9999\", page.body)",
          "1615:     refute_match(\"authorization|Basic xxx\", page.body)",
          "1616:     assert_match(\"cookie|name=value\", page.body)",
          "1617:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}