{
  "cve_id": "CVE-2021-32807",
  "cve_desc": "The module `AccessControl` defines security policies for Python code used in restricted code within Zope applications. Restricted code is any code that resides in Zope's object database, such as the contents of `Script (Python)` objects. The policies defined in `AccessControl` severely restrict access to Python modules and only exempt a few that are deemed safe, such as Python's `string` module. However, full access to the `string` module also allows access to the class `Formatter`, which can be overridden and extended within `Script (Python)` in a way that provides access to other unsafe Python libraries. Those unsafe Python libraries can be used for remote code execution. By default, you need to have the admin-level Zope \"Manager\" role to add or edit `Script (Python)` objects through the web. Only sites that allow untrusted users to add/edit these scripts through the web - which would be a very unusual configuration to begin with - are at risk. The problem has been fixed in AccessControl 4.3 and 5.2. Only AccessControl versions 4 and 5 are vulnerable, and only on Python 3, not Python 2.7. As a workaround, a site administrator can restrict adding/editing `Script (Python)` objects through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing these scripts through the web should be restricted to trusted users only. This is the default configuration in Zope.",
  "repo": "zopefoundation/AccessControl",
  "patch_hash": "b42dd4badf803bb9fb71ac34cd9cb0c249262f2c",
  "patch_info": {
    "commit_hash": "b42dd4badf803bb9fb71ac34cd9cb0c249262f2c",
    "repo": "zopefoundation/AccessControl",
    "commit_url": "https://github.com/zopefoundation/AccessControl/commit/b42dd4badf803bb9fb71ac34cd9cb0c249262f2c",
    "files": [
      "CHANGES.rst",
      "src/AccessControl/ZopeGuards.py",
      "src/AccessControl/tests/testZopeSecurityPolicy.py"
    ],
    "message": "Merge pull request from GHSA-qcx9-j53g-ccgf",
    "before_after_code_files": [
      "src/AccessControl/ZopeGuards.py||src/AccessControl/ZopeGuards.py",
      "src/AccessControl/tests/testZopeSecurityPolicy.py||src/AccessControl/tests/testZopeSecurityPolicy.py"
    ]
  },
  "patch_diff": {
    "src/AccessControl/ZopeGuards.py||src/AccessControl/ZopeGuards.py": [
      "File: src/AccessControl/ZopeGuards.py -> src/AccessControl/ZopeGuards.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from RestrictedPython.Utilities import utility_builtins",
      "31: from zExceptions import Unauthorized",
      "33: from AccessControl.SecurityInfo import secureModule",
      "34: from AccessControl.SecurityManagement import getSecurityManager",
      "35: from AccessControl.SimpleObjectPolicies import ContainerAssertions",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from AccessControl.SecurityInfo import ModuleSecurityInfo",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: math.__allow_access_to_unprotected_subobjects__ = 1",
      "58: random.__allow_access_to_unprotected_subobjects__ = 1",
      "60: # AccessControl.Implementation inserts these names into this module as",
      "61: # module globals:  aq_validate, guarded_getattr",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: # Mark some unprotected module attributes as private, these should not be",
      "62: # used in untrusted Python code such as Scripts (Python)",
      "63: string_modsec = ModuleSecurityInfo('string')",
      "64: for name in ('Formatter', 'Template'):",
      "65:     string_modsec.declarePrivate(name)  # NOQA: D001",
      "66: secureModule('string')",
      "",
      "---------------"
    ],
    "src/AccessControl/tests/testZopeSecurityPolicy.py||src/AccessControl/tests/testZopeSecurityPolicy.py": [
      "File: src/AccessControl/tests/testZopeSecurityPolicy.py -> src/AccessControl/tests/testZopeSecurityPolicy.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:         c.attr = PublicMethod()",
      "279:         self.assertPolicyAllows(c, 'attr')",
      "281:     def testUnicodeAttributeLookups(self):",
      "282:         item = self.item",
      "283:         r_item = self.a.r_item",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "281:     def testAccessToStringModule(self):",
      "282:         # The string module is available to restricted code and its members are",
      "283:         # explicitly allowed via a",
      "284:         # ``__allow_access_to_unprotected_subobjects__`` declaration. However,",
      "285:         # a few classes are exempted and declared private, they can indirectly",
      "286:         # provide uncontrolled access to system libraries from within",
      "287:         # restricted code.",
      "288:         import string",
      "290:         self.assertPolicyAllows(string, 'printable')",
      "291:         self.assertPolicyDenies(string, 'Formatter')",
      "292:         self.assertPolicyDenies(string, 'Template')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae2dab0cc34e6dd1561c5b12d4a56cd140f87e1d",
      "candidate_info": {
        "commit_hash": "ae2dab0cc34e6dd1561c5b12d4a56cd140f87e1d",
        "repo": "zopefoundation/AccessControl",
        "commit_url": "https://github.com/zopefoundation/AccessControl/commit/ae2dab0cc34e6dd1561c5b12d4a56cd140f87e1d",
        "files": [
          "CHANGES.rst",
          "src/AccessControl/ZopeGuards.py",
          "src/AccessControl/tests/testZopeSecurityPolicy.py"
        ],
        "message": "Merge pull request from GHSA-qcx9-j53g-ccgf",
        "before_after_code_files": [
          "src/AccessControl/ZopeGuards.py||src/AccessControl/ZopeGuards.py",
          "src/AccessControl/tests/testZopeSecurityPolicy.py||src/AccessControl/tests/testZopeSecurityPolicy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/AccessControl/ZopeGuards.py||src/AccessControl/ZopeGuards.py",
            "src/AccessControl/tests/testZopeSecurityPolicy.py||src/AccessControl/tests/testZopeSecurityPolicy.py"
          ],
          "candidate": [
            "src/AccessControl/ZopeGuards.py||src/AccessControl/ZopeGuards.py",
            "src/AccessControl/tests/testZopeSecurityPolicy.py||src/AccessControl/tests/testZopeSecurityPolicy.py"
          ]
        }
      },
      "candidate_diff": {
        "src/AccessControl/ZopeGuards.py||src/AccessControl/ZopeGuards.py": [
          "File: src/AccessControl/ZopeGuards.py -> src/AccessControl/ZopeGuards.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from RestrictedPython.Utilities import utility_builtins",
          "31: from zExceptions import Unauthorized",
          "33: from AccessControl.SecurityInfo import secureModule",
          "34: from AccessControl.SecurityManagement import getSecurityManager",
          "35: from AccessControl.SimpleObjectPolicies import ContainerAssertions",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: from AccessControl.SecurityInfo import ModuleSecurityInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: math.__allow_access_to_unprotected_subobjects__ = 1",
          "58: random.__allow_access_to_unprotected_subobjects__ = 1",
          "60: # AccessControl.Implementation inserts these names into this module as",
          "61: # module globals:  aq_validate, guarded_getattr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: # Mark some unprotected module attributes as private, these should not be",
          "62: # used in untrusted Python code such as Scripts (Python)",
          "63: string_modsec = ModuleSecurityInfo('string')",
          "64: for name in ('Formatter', 'Template'):",
          "65:     string_modsec.declarePrivate(name)  # NOQA: D001",
          "66: secureModule('string')",
          "",
          "---------------"
        ],
        "src/AccessControl/tests/testZopeSecurityPolicy.py||src/AccessControl/tests/testZopeSecurityPolicy.py": [
          "File: src/AccessControl/tests/testZopeSecurityPolicy.py -> src/AccessControl/tests/testZopeSecurityPolicy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         c.attr = PublicMethod()",
          "279:         self.assertPolicyAllows(c, 'attr')",
          "281:     def testUnicodeAttributeLookups(self):",
          "282:         item = self.item",
          "283:         r_item = self.a.r_item",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:     def testAccessToStringModule(self):",
          "282:         # The string module is available to restricted code and its members are",
          "283:         # explicitly allowed via a",
          "284:         # ``__allow_access_to_unprotected_subobjects__`` declaration. However,",
          "285:         # a few classes are exempted and declared private, they can indirectly",
          "286:         # provide uncontrolled access to system libraries from within",
          "287:         # restricted code.",
          "288:         import string",
          "290:         self.assertPolicyAllows(string, 'printable')",
          "291:         self.assertPolicyDenies(string, 'Formatter')",
          "292:         self.assertPolicyDenies(string, 'Template')",
          "",
          "---------------"
        ]
      }
    }
  ]
}