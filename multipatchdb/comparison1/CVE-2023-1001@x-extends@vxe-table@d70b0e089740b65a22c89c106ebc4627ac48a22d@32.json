{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "346f5a201a9fa662b03895de5e7d47a6e1d85f76",
      "candidate_info": {
        "commit_hash": "346f5a201a9fa662b03895de5e7d47a6e1d85f76",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/346f5a201a9fa662b03895de5e7d47a6e1d85f76",
        "files": [
          "README.md",
          "packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/table/src/methods.js",
          "packages/tooltip/src/tooltip.js",
          "styles/custom.scss"
        ],
        "message": "fix \u4fee\u590d\u5408\u5e76\u540e\u663e\u793a\u7a7a\u767d\u95ee\u9898",
        "before_after_code_files": [
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js",
          "styles/custom.scss||styles/custom.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                 'is--disabled': isMaxFixedColumn && !column.fixed",
          "83:               }],",
          "84:               attrs: {",
          "86:               },",
          "87:               on: {",
          "88:                 click: () => {",
          "",
          "[Removed Lines]",
          "85:                 title: GlobalConfig.i18n(column.fixed === 'left' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedLeft')",
          "",
          "[Added Lines]",
          "85:                 title: GlobalConfig.i18n(column.fixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:                 'is--disabled': isMaxFixedColumn && !column.fixed",
          "97:               }],",
          "98:               attrs: {",
          "100:               },",
          "101:               on: {",
          "102:                 click: () => {",
          "",
          "[Removed Lines]",
          "99:                 title: GlobalConfig.i18n(column.fixed === 'right' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedRight')",
          "",
          "[Added Lines]",
          "99:                 title: GlobalConfig.i18n(column.fixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:                 class: 'vxe-table-custom--body',",
          "353:                 props: {",
          "354:                   tag: 'tbody',",
          "356:                 }",
          "357:               }, trVNs)",
          "358:             ])",
          "",
          "[Removed Lines]",
          "355:                   name: 'vxe-table-custom--flip'",
          "",
          "[Added Lines]",
          "355:                   name: 'vxe-table-custom--list'",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:       customRestore: 'Reset',",
          "203:       fixedLeft: 'Freeze on the left',",
          "204:       fixedRight: 'Freeze on the right',",
          "206:     },",
          "207:     input: {",
          "208:       date: {",
          "",
          "[Removed Lines]",
          "205:       cancelfixed: 'Unfreeze column'",
          "",
          "[Added Lines]",
          "205:       cancelFixed: 'Unfreeze column'",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:       customRestore: 'Restaurar',",
          "203:       fixedLeft: 'Freeze on the left',",
          "204:       fixedRight: 'Freeze on the right',",
          "206:     },",
          "207:     entrada: {",
          "208:       fecha: {",
          "",
          "[Removed Lines]",
          "205:       cancelfixed: 'Unfreeze column'",
          "",
          "[Added Lines]",
          "205:       cancelFixed: 'Unfreeze column'",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:       customRestore: '\u30ea\u30bb\u30c3\u30c8',",
          "203:       fixedLeft: '\u5de6\u5074\u306b\u56fa\u5b9a',",
          "204:       fixedRight: '\u53f3\u5074\u306b\u56fa\u5b9a',",
          "206:     },",
          "207:     input: {",
          "208:       date: {",
          "",
          "[Removed Lines]",
          "205:       cancelfixed: '\u5217\u56fa\u5b9a\u3092\u53d6\u6d88'",
          "",
          "[Added Lines]",
          "205:       cancelFixed: '\u5217\u56fa\u5b9a\u3092\u53d6\u6d88'",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:       customRestore: 'Redefinir',",
          "203:       fixedLeft: 'Freeze on the left',",
          "204:       fixedRight: 'Freeze on the right',",
          "206:     },",
          "207:     input: {",
          "208:       date: {",
          "",
          "[Removed Lines]",
          "205:       cancelfixed: 'Unfreeze column'",
          "",
          "[Added Lines]",
          "205:       cancelFixed: 'Unfreeze column'",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:       customRestore: '\u91cd\u7f6e',",
          "203:       fixedLeft: '\u51bb\u7ed3\u5728\u5de6\u4fa7',",
          "204:       fixedRight: '\u51bb\u7ed3\u5728\u53f3\u4fa7',",
          "206:     },",
          "207:     input: {",
          "208:       date: {",
          "",
          "[Removed Lines]",
          "205:       cancelfixed: '\u53d6\u6d88\u51bb\u7ed3\u5217'",
          "",
          "[Added Lines]",
          "205:       cancelFixed: '\u53d6\u6d88\u51bb\u7ed3\u5217'",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:       customRestore: '\u91cd\u7f6e',",
          "203:       fixedLeft: '\u51bb\u7ed3\u5728\u5de6\u5074',",
          "204:       fixedRight: '\u51bb\u7ed3\u5728\u53f3\u5074',",
          "206:     },",
          "207:     input: {",
          "208:       date: {",
          "",
          "[Removed Lines]",
          "205:       cancelfixed: '\u53d6\u6d88\u51bb\u7ed3\u5217'",
          "",
          "[Added Lines]",
          "205:       cancelFixed: '\u53d6\u6d88\u51bb\u7ed3\u5217'",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5214:       errLog('vxe.error.errConflicts', ['merge-cells', 'span-method'])",
          "5215:     }",
          "5216:     setMerges(this, merges, this.mergeList, this.afterFullData)",
          "5218:   },",
          "",
          "[Removed Lines]",
          "5217:     return this.$nextTick().then(() => this.updateCellAreas())",
          "",
          "[Added Lines]",
          "5217:     return this.$nextTick().then(() => {",
          "5218:       this.updateCellAreas()",
          "5219:       return this.updateStyle()",
          "5220:     })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5227:     const rest = removeMerges(this, merges, this.mergeList, this.afterFullData)",
          "5228:     return this.$nextTick().then(() => {",
          "5229:       this.updateCellAreas()",
          "5230:       return rest",
          "5231:     })",
          "5232:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5233:       this.updateStyle()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5242:   clearMergeCells () {",
          "5243:     this.mergeList = []",
          "5245:   },",
          "5246:   handleDefaultMergeFooterItems () {",
          "5247:     this.setMergeFooterItems(this.mergeFooterItems)",
          "",
          "[Removed Lines]",
          "5244:     return this.$nextTick()",
          "",
          "[Added Lines]",
          "5248:     return this.$nextTick().then(() => {",
          "5249:       return this.updateStyle()",
          "5250:     })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5251:       errLog('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method'])",
          "5252:     }",
          "5253:     setMerges(this, merges, this.mergeFooterList, null)",
          "5255:   },",
          "5256:   removeMergeFooterItems (merges) {",
          "5257:     if (this.footerSpanMethod) {",
          "",
          "[Removed Lines]",
          "5254:     return this.$nextTick().then(() => this.updateCellAreas())",
          "",
          "[Added Lines]",
          "5260:     return this.$nextTick().then(() => {",
          "5261:       this.updateCellAreas()",
          "5262:       return this.updateStyle()",
          "5263:     })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5260:     const rest = removeMerges(this, merges, this.mergeFooterList, null)",
          "5261:     return this.$nextTick().then(() => {",
          "5262:       this.updateCellAreas()",
          "5263:       return rest",
          "5264:     })",
          "5265:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5272:       this.updateStyle()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5275:   clearMergeFooterItems () {",
          "5276:     this.mergeFooterList = []",
          "5278:   },",
          "5279:   updateZindex () {",
          "5280:     if (this.zIndex) {",
          "",
          "[Removed Lines]",
          "5277:     return this.$nextTick()",
          "",
          "[Added Lines]",
          "5287:     return this.$nextTick().then(() => {",
          "5288:       return this.updateStyle()",
          "5289:     })",
          "",
          "---------------"
        ],
        "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js": [
          "File: packages/tooltip/src/tooltip.js -> packages/tooltip/src/tooltip.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   props: {",
          "71:     value: Boolean,",
          "72:     size: { type: String, default: () => GlobalConfig.tooltip.size || GlobalConfig.size },",
          "75:     content: { type: [String, Number], default: null },",
          "76:     useHTML: Boolean,",
          "77:     zIndex: [String, Number],",
          "",
          "[Removed Lines]",
          "73:     trigger: { type: String, default: () => GlobalConfig.tooltip.trigger },",
          "74:     theme: { type: String, default: () => GlobalConfig.tooltip.theme },",
          "",
          "[Added Lines]",
          "73:     trigger: { type: String, default: () => GlobalConfig.tooltip.trigger || 'hover' },",
          "74:     theme: { type: String, default: () => GlobalConfig.tooltip.theme || 'dark' },",
          "",
          "---------------"
        ],
        "styles/custom.scss||styles/custom.scss": [
          "File: styles/custom.scss -> styles/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   }",
          "264: }",
          "267:   transition: transform 0.35s;",
          "268: }",
          "",
          "[Removed Lines]",
          "266: .vxe-table-custom--flip-move {",
          "",
          "[Added Lines]",
          "266: .vxe-table-custom--list-move {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78f90af7b51a3fa2c016fd4f766a8893152c638f",
      "candidate_info": {
        "commit_hash": "78f90af7b51a3fa2c016fd4f766a8893152c638f",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/78f90af7b51a3fa2c016fd4f766a8893152c638f",
        "files": [
          "README.md",
          "examples/views/table/base/Sort.vue",
          "package.json",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/table/src/cell.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/filter.scss",
          "styles/icon.scss",
          "styles/icon/iconfont.ttf",
          "styles/icon/iconfont.woff",
          "styles/icon/iconfont.woff2",
          "styles/table.scss"
        ],
        "message": "fix",
        "before_after_code_files": [
          "examples/views/table/base/Sort.vue||examples/views/table/base/Sort.vue",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/filter.scss||styles/filter.scss",
          "styles/icon.scss||styles/icon.scss",
          "styles/table.scss||styles/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/base/Sort.vue||examples/views/table/base/Sort.vue": [
          "File: examples/views/table/base/Sort.vue -> examples/views/table/base/Sort.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:       highlight-hover-row",
          "22:       ref=\"xTable\"",
          "23:       height=\"300\"",
          "24:       :data=\"tableData\">",
          "25:       <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "26:       <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:       :sort-config=\"{iconLayout: 'horizontal', iconAsc: 'vxe-icon-sort-asc', iconDesc: 'vxe-icon-sort-desc'}\"",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:       confirmFilter: 'Confirm',",
          "136:       resetFilter: 'Reset',",
          "137:       allFilter: 'All',",
          "138:       sortAsc: 'Ascending: lowest to highest',",
          "139:       sortDesc: 'Descending: highest to lowest',",
          "140:       filter: 'Enable filtering on selected columns',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:       sortSingle: 'Click sort',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:       confirmFilter: '\u5b8c\u4e86',",
          "136:       resetFilter: '\u30ea\u30bb\u30c3\u30c8',",
          "137:       allFilter: '\u5168\u3066',",
          "138:       sortAsc: '\u6607\u9806',",
          "139:       sortDesc: '\u964d\u9806',",
          "140:       filter: '\u9078\u629e\u3057\u305f\u5217\u3092\u30d5\u30a3\u30eb\u30bf\u3059\u308b',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:       sortSingle: '\u70b9\u51fb\u6392\u5e8f',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:       confirmFilter: '\u7b5b\u9009',",
          "136:       resetFilter: '\u91cd\u7f6e',",
          "137:       allFilter: '\u5168\u90e8',",
          "138:       sortAsc: '\u5347\u5e8f\uff1a\u6700\u4f4e\u5230\u6700\u9ad8',",
          "139:       sortDesc: '\u964d\u5e8f\uff1a\u6700\u9ad8\u5230\u6700\u4f4e',",
          "140:       filter: '\u5bf9\u6240\u9009\u7684\u5217\u542f\u7528\u7b5b\u9009',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:       sortSingle: '\u70b9\u51fb\u6392\u5e8f',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:       confirmFilter: '\u7be9\u9078',",
          "136:       resetFilter: '\u91cd\u7f6e',",
          "137:       allFilter: '\u5168\u90e8',",
          "138:       sortAsc: '\u6309\u4f4e\u5230\u9ad8\u6392\u5e8f',",
          "139:       sortDesc: '\u6309\u9ad8\u5230\u4f4e\u6392\u5e8f',",
          "140:       filter: '\u5c0d\u6240\u9078\u7684\u5217\u555f\u7528\u7be9\u9078',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:       sortSingle: '\u9ede\u64ca\u6392\u5e8f',",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "632:   },",
          "633:   renderSortIcon (h, params) {",
          "634:     const { $table, column } = params",
          "636:     return showIcon ? [",
          "637:       h('span', {",
          "639:       }, [",
          "640:         h('i', {",
          "641:           class: ['vxe-sort--asc-btn', iconAsc || GlobalConfig.icon.TABLE_SORT_ASC, {",
          "",
          "[Removed Lines]",
          "635:     const { showIcon, iconAsc, iconDesc } = $table.sortOpts",
          "638:         class: 'vxe-cell--sort'",
          "",
          "[Added Lines]",
          "635:     const { showIcon, iconLayout, iconAsc, iconDesc } = $table.sortOpts",
          "638:         class: ['vxe-cell--sort', `vxe-cell--sort-${iconLayout}-layout`]",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     },",
          "71:     filterConfig: {",
          "",
          "[Removed Lines]",
          "69:       showIcon: true",
          "",
          "[Added Lines]",
          "69:       showIcon: true,",
          "70:       iconLayout: 'vertical'",
          "",
          "---------------"
        ],
        "styles/filter.scss||styles/filter.scss": [
          "File: styles/filter.scss -> styles/filter.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: .vxe-cell--filter {",
          "7:   text-align: center;",
          "8:   vertical-align: middle;",
          "9:   display: inline-block;",
          "",
          "[Removed Lines]",
          "6:   padding: 0 0.1em 0 0.25em;",
          "",
          "[Added Lines]",
          "6:   padding: 0 0.1em 0 0.2em;",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: @font-face {",
          "4:   font-family: \"vxeiconfont\";",
          "5:   src:",
          "7: }",
          "9: @keyframes rollCircle {",
          "",
          "[Removed Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "[Added Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: $btnThemeList: (",
          "19:   (",
          "20:     name: \"primary\",",
          "22:   ),",
          "23:   (",
          "24:     name: \"success\",",
          "26:   ),",
          "27:   (",
          "28:     name: \"info\",",
          "30:   ),",
          "31:   (",
          "32:     name: \"warning\",",
          "34:   ),",
          "35:   (",
          "36:     name: \"danger\",",
          "38:   )",
          "39: );",
          "",
          "[Removed Lines]",
          "21:     textColor: var(--vxe-primary-color),",
          "25:     textColor: var(--vxe-success-color),",
          "29:     textColor: var(--vxe-info-color),",
          "33:     textColor: var(--vxe-warning-color),",
          "37:     textColor: var(--vxe-danger-color),",
          "",
          "[Added Lines]",
          "21:     textColor: $vxe-primary-color,",
          "25:     textColor: $vxe-success-color,",
          "29:     textColor: $vxe-info-color,",
          "33:     textColor: $vxe-warning-color,",
          "37:     textColor: $vxe-danger-color,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   }",
          "74: }",
          "76: .vxe-icon-end-page:before {",
          "77:   content: \"\\e607\";",
          "78: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: .vxe-icon-sort:before {",
          "77:   content: \"\\e93e\";",
          "78: }",
          "80: .vxe-icon-sort-desc:before {",
          "81:   content: \"\\e60a\";",
          "82: }",
          "84: .vxe-icon-sort-asc:before {",
          "85:   content: \"\\f295\";",
          "86: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553:   content: \"\\e6c8\";",
          "554: }",
          "560: .vxe-icon-chart-pie:before {",
          "561:   content: \"\\e902\";",
          "562: }",
          "",
          "[Removed Lines]",
          "556: .vxe-icon-sort:before {",
          "557:   content: \"\\e6a0\";",
          "558: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "617:   content: \"\\e84e\";",
          "618: }",
          "628: .vxe-icon-fixed-left-fill:before {",
          "629:   content: \"\\e9b9\";",
          "630: }",
          "",
          "[Removed Lines]",
          "620: .vxe-icon-fixed-fill:before {",
          "621:   content: \"\\e9b9\";",
          "622: }",
          "624: .vxe-icon-fixed:before {",
          "625:   content: \"\\e9ba\";",
          "626: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   }",
          "326:   .vxe-cell--sort {",
          "330:     text-align: center;",
          "332:     position: relative;",
          "333:   }",
          "334:   .vxe-sort--asc-btn,",
          "335:   .vxe-sort--desc-btn {",
          "338:     color: $vxe-table-column-icon-border-color;",
          "343:     cursor: pointer;",
          "344:     &:hover {",
          "345:       color: $vxe-font-color;",
          "",
          "[Removed Lines]",
          "327:     width: 1.5em;",
          "328:     height: 1.35em;",
          "329:     vertical-align: middle;",
          "331:     display: inline-block;",
          "336:     position: absolute;",
          "337:     left: 0.2em;",
          "339:     width: 1em;",
          "340:     text-align: center;",
          "341:     height: 0.8em;",
          "342:     line-height: 0.8em;",
          "",
          "[Added Lines]",
          "329:     padding: 0 0.1em 0 0.2em;",
          "330:   }",
          "331:   .vxe-cell--sort-vertical-layout {",
          "332:     display: inline-flex;",
          "333:     flex-direction: column;",
          "334:     height: 1.8em;",
          "335:     vertical-align: middle;",
          "336:     .vxe-sort--asc-btn,",
          "337:     .vxe-sort--desc-btn {",
          "338:       height: 0.6em;",
          "339:     }",
          "340:   }",
          "341:   .vxe-cell--sort-horizontal-layout {",
          "342:     display: inline-flex;",
          "343:     flex-direction: row;",
          "344:     .vxe-sort--asc-btn,",
          "345:     .vxe-sort--desc-btn {",
          "346:       width: 0.5em;",
          "347:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:       color: $vxe-primary-color;",
          "349:     }",
          "350:   }",
          "357: }",
          "359: .vxe-header--column {",
          "",
          "[Removed Lines]",
          "351:   .vxe-sort--asc-btn {",
          "352:     top: -0.1em;",
          "353:   }",
          "354:   .vxe-sort--desc-btn {",
          "355:     bottom: -0.2em;",
          "356:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a06fc1fad3346ca541ca28221a01cc482816d016",
      "candidate_info": {
        "commit_hash": "a06fc1fad3346ca541ca28221a01cc482816d016",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/a06fc1fad3346ca541ca28221a01cc482816d016",
        "files": [
          "packages/table/src/body.js"
        ],
        "message": "\u4f18\u5316\u6821\u9a8c",
        "before_after_code_files": [
          "packages/table/src/body.js||packages/table/src/body.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     columnOpts,",
          "88:     validErrorMaps",
          "89:   } = $xetable",
          "91:   const { actived } = editStore",
          "92:   const { rHeight: scrollYRHeight } = sYOpts",
          "93:   const { height: rowHeight } = rowOpts",
          "",
          "[Removed Lines]",
          "90:   const { type, cellRender, editRender, align, showOverflow, className, treeNode } = column",
          "",
          "[Added Lines]",
          "90:   const { type, cellRender, editRender, align, showOverflow, className, treeNode, slots } = column",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:       }, column.renderCell(h, params))",
          "246:     )",
          "247:     if (showValidTip && errorValidItem) {",
          "248:       tdVNs.push(",
          "249:         h('div', {",
          "253:           } : null",
          "255:           h('span', {",
          "256:             class: 'vxe-cell--valid-error-msg'",
          "257:           }, errorValidItem.content)",
          "",
          "[Removed Lines]",
          "250:           class: 'vxe-cell--valid-error-hint',",
          "251:           style: errorValidItem.rule && errorValidItem.rule.maxWidth ? {",
          "252:             width: `${errorValidItem.rule.maxWidth}px`",
          "254:         }, [",
          "",
          "[Added Lines]",
          "248:       const errRule = errorValidItem.rule",
          "249:       const validSlot = slots ? slots.valid : null",
          "250:       const validParams = { ...params, ...errorValidItem }",
          "253:           class: ['vxe-cell--valid-error-hint', UtilTools.getClass(validOpts.className, errorValidItem)],",
          "254:           style: errRule && errRule.maxWidth ? {",
          "255:             width: `${errRule.maxWidth}px`",
          "257:         }, validSlot ? $xetable.callSlot(validSlot, validParams, h) : [",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2164602c1b0a515226ad3776169e81b5b6fa341a",
      "candidate_info": {
        "commit_hash": "2164602c1b0a515226ad3776169e81b5b6fa341a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/2164602c1b0a515226ad3776169e81b5b6fa341a",
        "files": [
          "package.json",
          "packages/table/module/filter/mixin.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts",
          "packages/ui/index.ts",
          "styles/components/icon.scss",
          "styles/components/table.scss",
          "styles/icon/iconfont.ttf",
          "styles/icon/iconfont.woff",
          "styles/icon/iconfont.woff2"
        ],
        "message": "releases 3.11.25",
        "before_after_code_files": [
          "packages/table/module/filter/mixin.ts||packages/table/module/filter/mixin.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/ui/index.ts||packages/ui/index.ts",
          "styles/components/icon.scss||styles/components/icon.scss",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/module/filter/mixin.ts||packages/table/module/filter/mixin.ts": [
          "File: packages/table/module/filter/mixin.ts -> packages/table/module/filter/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { getDomNode, triggerEvent } from '../../../ui/src/dom'",
          "5: import { isEnableConf } from '../../../ui/src/utils'",
          "7: const { renderer } = VxeUI",
          "9: export default {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import type { VxeTableDefines } from '../../../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:       const column = handleFieldOrColumn(this, fieldOrColumn)",
          "37:       if (column && column.filters) {",
          "38:         column.filters = toFilters(options || [])",
          "39:       }",
          "41:     },",
          "42:     checkFilterOptions () {",
          "43:       const { filterStore } = this",
          "",
          "[Removed Lines]",
          "35:     _setFilter (fieldOrColumn: any, options: any, update: any) {",
          "40:       return update ? this.updateData() : this.$nextTick()",
          "",
          "[Added Lines]",
          "37:     _setFilter (fieldOrColumn: any, options: any, isUpdate: any) {",
          "38:       const $xeTable = this",
          "43:         if (isUpdate) {",
          "44:           return $xeTable.handleColumnConfirmFilter(column, new Event('click'))",
          "45:         }",
          "47:       return $xeTable.$nextTick()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:       })",
          "182:       return filterList",
          "183:     },",
          "192:       const { field } = column",
          "193:       const values: any[] = []",
          "194:       const datas: any[] = []",
          "",
          "[Removed Lines]",
          "189:     confirmFilterEvent (evnt: any) {",
          "190:       const { filterStore, filterOpts, scrollXLoad: oldScrollXLoad, scrollYLoad: oldScrollYLoad } = this",
          "191:       const { column } = filterStore",
          "",
          "[Added Lines]",
          "191:     handleColumnConfirmFilter (column: VxeTableDefines.ColumnInfo, evnt: Event | null) {",
          "192:       const $xeTable = this",
          "193:       const props = $xeTable",
          "194:       const reactData = $xeTable",
          "196:       const { mouseConfig } = props",
          "197:       const { scrollXLoad: oldScrollXLoad, scrollYLoad: oldScrollYLoad } = reactData",
          "198:       const filterOpts = $xeTable.computeFilterOpts",
          "199:       const mouseOpts = $xeTable.computeMouseOpts",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:         this.handleTableData(true)",
          "206:         this.checkSelectionStatus()",
          "207:       }",
          "210:       }",
          "211:       if (evnt) {",
          "213:       }",
          "216:         const { scrollXLoad, scrollYLoad } = this",
          "217:         if ((oldScrollXLoad || scrollXLoad) || (oldScrollYLoad || scrollYLoad)) {",
          "218:           if ((oldScrollXLoad || scrollXLoad)) {",
          "220:           }",
          "221:           if ((oldScrollYLoad || scrollYLoad)) {",
          "223:           }",
          "225:         }",
          "226:       }).then(() => {",
          "229:       }).then(() => {",
          "232:       })",
          "233:     },",
          "234:     handleClearFilter (column: any) {",
          "235:       if (column) {",
          "236:         const { filters, filterRender } = column",
          "",
          "[Removed Lines]",
          "208:       if (this.mouseConfig && this.mouseOpts.area && this.handleFilterEvent) {",
          "209:         this.handleFilterEvent(evnt, params)",
          "212:         this.emitEvent('filter-change', params, evnt)",
          "214:       this.closeFilter()",
          "215:       this.updateFooter().then(() => {",
          "219:             this.updateScrollXSpace()",
          "222:             this.updateScrollYSpace()",
          "224:           return this.refreshScroll()",
          "227:         this.updateCellAreas()",
          "228:         return this.recalculate(true)",
          "231:         setTimeout(() => this.recalculate(), 50)",
          "",
          "[Added Lines]",
          "216:       if (mouseConfig && mouseOpts.area && this.handleFilterEvent) {",
          "217:         $xeTable.handleFilterEvent(evnt, params)",
          "220:         $xeTable.emitEvent('filter-change', params, evnt)",
          "222:       $xeTable.closeFilter()",
          "223:       return $xeTable.updateFooter().then(() => {",
          "227:             $xeTable.updateScrollXSpace()",
          "230:             $xeTable.updateScrollYSpace()",
          "232:           return $xeTable.refreshScroll()",
          "235:         $xeTable.updateCellAreas()",
          "236:         return $xeTable.recalculate(true)",
          "239:         setTimeout(() => $xeTable.recalculate(), 50)",
          "247:     confirmFilterEvent (evnt: any) {",
          "248:       const $xeTable = this",
          "249:       const reactData = $xeTable",
          "251:       const { filterStore } = reactData",
          "252:       const { column } = filterStore",
          "253:       $xeTable.handleColumnConfirmFilter(column, evnt)",
          "254:     },",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: function showDropTip ($xeTable: any, evnt: DragEvent | MouseEvent, trEl: HTMLElement | null, thEl: HTMLElement | null, showLine: boolean, dragPos: string) {",
          "443:   const reactData = $xeTable",
          "445:   const el = $xeTable.$refs.refElem as HTMLElement",
          "446:   if (!el) {",
          "447:     return",
          "448:   }",
          "449:   const { scrollbarWidth, scrollbarHeight } = reactData",
          "450:   const wrapperRect = el.getBoundingClientRect()",
          "451:   if (trEl) {",
          "452:     const rdLineEl = $xeTable.$refs.refDragRowLineElem as HTMLElement",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:   const internalData = $xeTable",
          "451:   const { prevDragToChild } = internalData",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "458:         rdLineEl.style.height = `${trRect.height}px`",
          "459:         rdLineEl.style.width = `${wrapperRect.width - scrollbarWidth}px`",
          "460:         rdLineEl.setAttribute('drag-pos', dragPos)",
          "461:       } else {",
          "462:         rdLineEl.style.display = ''",
          "463:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:         rdLineEl.setAttribute('drag-to-child', prevDragToChild ? 'y' : 'n')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:     rdTipEl.style.display = 'block'",
          "483:     rdTipEl.style.top = `${Math.min(el.clientHeight - el.scrollTop - rdTipEl.clientHeight, evnt.clientY - wrapperRect.y)}px`",
          "484:     rdTipEl.style.left = `${Math.min(el.clientWidth - el.scrollLeft - rdTipEl.clientWidth - 16, evnt.clientX - wrapperRect.x)}px`",
          "486:   }",
          "487: }",
          "",
          "[Removed Lines]",
          "485:     rdTipEl.setAttribute('drag-status', showLine ? 'normal' : 'disabled')",
          "",
          "[Added Lines]",
          "488:     rdTipEl.setAttribute('drag-status', showLine ? (prevDragToChild ? 'sub' : 'normal') : 'disabled')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5031:       }",
          "5032:     }",
          "5033:   },",
          "5037:   triggerSortEvent (evnt: any, column: any, order: any) {",
          "5039:     const { field, sortable, remoteSort } = column",
          "5040:     if (sortable || remoteSort) {",
          "5041:       if (!order || column.order === order) {",
          "5043:       } else {",
          "5045:       }",
          "5051:     }",
          "5052:   },",
          "",
          "[Removed Lines]",
          "5038:     const { sortOpts } = this",
          "5042:         this.clearSort(sortOpts.multiple ? column : null)",
          "5044:         this.sort({ field, order })",
          "5046:       const params = { $table: this, $event: evnt, column, field, property: field, order: column.order, sortList: this.getSortColumns(), sortTime: column.sortTime }",
          "5047:       if (this.mouseConfig && this.mouseOpts.area && this.handleSortEvent) {",
          "5048:         this.handleSortEvent(evnt, params)",
          "5049:       }",
          "5050:       this.emitEvent('sort-change', params, evnt)",
          "",
          "[Added Lines]",
          "5037:   handleColumnSortEvent (evnt: any, column: any) {",
          "5038:     const $xeTable = this",
          "5039:     const props = $xeTable",
          "5041:     const { mouseConfig } = props",
          "5042:     const mouseOpts = $xeTable.computeMouseOpts",
          "5043:     const { field, sortable } = column",
          "5044:     if (sortable) {",
          "5045:       const params = { $table: $xeTable, $event: evnt, column, field, property: field, order: column.order, sortList: $xeTable.getSortColumns(), sortTime: column.sortTime }",
          "5046:       if (mouseConfig && mouseOpts.area && $xeTable.handleSortEvent) {",
          "5047:         $xeTable.handleSortEvent(evnt, params)",
          "5048:       }",
          "5049:       $xeTable.dispatchEvent('sort-change', params, evnt)",
          "5050:     }",
          "5051:   },",
          "5056:     const $xeTable = this",
          "5058:     const sortOpts = $xeTable.computeSortOpts",
          "5062:         $xeTable.clearSort(sortOpts.multiple ? column : null)",
          "5064:         $xeTable.sort({ field, order })",
          "5066:       $xeTable.handleColumnSortEvent(evnt, column)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5068:     const { treeConfig, dragConfig } = props",
          "5069:     const rowDragOpts = $xeTable.computeRowDragOpts",
          "5071:     const { isCrossDrag, isSelfToChildDrag, dragEndMethod } = rowDragOpts",
          "5072:     const treeOpts = $xeTable.computeTreeOpts",
          "5074:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "5075:     const { dragRow } = reactData",
          "5076:     const { afterFullData, tableFullData, prevDragRow, prevDragPos } = internalData",
          "",
          "[Removed Lines]",
          "5070:     const { fullAllDataRowIdData } = internalData",
          "5073:     const { transform, mapChildrenField, parentField } = treeOpts",
          "",
          "[Added Lines]",
          "5086:     const { fullAllDataRowIdData, prevDragToChild } = internalData",
          "5089:     const { transform, rowField, mapChildrenField, parentField } = treeOpts",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5177:                     childRow[parentField] = dragRow[parentField]",
          "5178:                   })",
          "5179:                 }",
          "5182:                 internalData.tableFullTreeData = XEUtils.toArrayTree(fullList, {",
          "5183:                   key: treeOpts.rowField,",
          "",
          "[Removed Lines]",
          "5180:                 dragRow[parentField] = prevDragRow[parentField]",
          "",
          "[Added Lines]",
          "5196:                 dragRow[parentField] = prevDragToChild ? prevDragRow[rowField] : prevDragRow[parentField]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5249:     const { treeConfig } = props",
          "5250:     const { fullAllDataRowIdData } = internalData",
          "5251:     const { dragRow } = reactData",
          "5252:     const rowDragOpts = $xeTable.computeRowDragOpts",
          "5254:     if (!dragRow) {",
          "5255:       evnt.preventDefault()",
          "5256:       return",
          "5257:     }",
          "5258:     const trEl = evnt.currentTarget as HTMLElement",
          "5259:     const rowid = trEl.getAttribute('rowid') || ''",
          "5260:     const rest = fullAllDataRowIdData[rowid]",
          "",
          "[Removed Lines]",
          "5253:     const { isCrossDrag } = rowDragOpts",
          "",
          "[Added Lines]",
          "5268:     const treeOpts = $xeTable.computeTreeOpts",
          "5269:     const { transform } = treeOpts",
          "5271:     const { isCrossDrag, isToChildDrag } = rowDragOpts",
          "5276:     const hasCtrlKey = evnt.ctrlKey",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5268:         showDropTip($xeTable, evnt, trEl, null, false, dragPos)",
          "5269:         return",
          "5270:       }",
          "5271:       internalData.prevDragRow = row",
          "5272:       internalData.prevDragPos = dragPos",
          "5273:       showDropTip($xeTable, evnt, trEl, null, true, dragPos)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5290:       internalData.prevDragToChild = !!(treeConfig && transform && isToChildDrag && hasCtrlKey)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5438:         showDropTip($xeTable, evnt, null, thEl, false, dragPos)",
          "5439:         return",
          "5440:       }",
          "5441:       internalData.prevDragCol = column",
          "5442:       internalData.prevDragPos = dragPos",
          "5443:       showDropTip($xeTable, evnt, null, thEl, true, dragPos)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5461:       internalData.prevDragToChild = false",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5600:     }",
          "5601:     return this.$nextTick()",
          "5602:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5624:   setSort (sortConfs: VxeTableDefines.SortConfs | VxeTableDefines.SortConfs[], isUpdate?: boolean) {",
          "5625:     const $xeTable = this",
          "5627:     const sortOpts = $xeTable.computeSortOpts",
          "5628:     const { multiple, remote, orders } = sortOpts",
          "5629:     if (!XEUtils.isArray(sortConfs)) {",
          "5630:       sortConfs = [sortConfs]",
          "5631:     }",
          "5632:     if (sortConfs && sortConfs.length) {",
          "5633:       if (!multiple) {",
          "5634:         sortConfs = [sortConfs[0]]",
          "5635:         clearAllSort($xeTable)",
          "5636:       }",
          "5637:       let firstColumn: any = null",
          "5638:       sortConfs.forEach((confs: any, index: number) => {",
          "5639:         let { field, order } = confs",
          "5640:         let column = field",
          "5641:         if (XEUtils.isString(field)) {",
          "5642:           column = $xeTable.getColumnByField(field)",
          "5643:         }",
          "5644:         if (!firstColumn) {",
          "5645:           firstColumn = column",
          "5646:         }",
          "5647:         if (column && column.sortable) {",
          "5648:           if (orders.indexOf(order) === -1) {",
          "5649:             order = getNextSortOrder($xeTable, column)",
          "5650:           }",
          "5651:           if (column.order !== order) {",
          "5652:             column.order = order",
          "5653:           }",
          "5654:           column.sortTime = Date.now() + index",
          "5655:         }",
          "5656:       })",
          "5657:       if (isUpdate) {",
          "5658:         if (!remote) {",
          "5659:           $xeTable.handleTableData(true)",
          "5660:         }",
          "5661:         $xeTable.handleColumnSortEvent(new Event('click'), firstColumn)",
          "5662:       }",
          "5663:       return $xeTable.$nextTick().then(() => {",
          "5664:         $xeTable.updateCellAreas()",
          "5665:         return $xeTable.updateStyle()",
          "5666:       })",
          "5667:     }",
          "5668:     return $xeTable.$nextTick()",
          "5669:   },",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:             h('span', {",
          "159:               class: ['vxe-table--drag-sort-tip-normal-status', dragRow ? getIcon().TABLE_DRAG_STATUS_ROW : getIcon().TABLE_DRAG_STATUS_COLUMN]",
          "160:             }),",
          "161:             h('span', {",
          "162:               class: ['vxe-table--drag-sort-tip-disabled-status', getIcon().TABLE_DRAG_DISABLED]",
          "163:             })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:             h('span', {",
          "162:               class: ['vxe-table--drag-sort-tip-sub-status', getIcon().TABLE_DRAG_STATUS_SUB_ROW]",
          "163:             }),",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:   TABLE_DRAG_ROW: iconPrefix + 'drag-handle',",
          "259:   TABLE_DRAG_COLUMN: iconPrefix + 'drag-handle',",
          "260:   TABLE_DRAG_STATUS_ROW: iconPrefix + 'sort',",
          "261:   TABLE_DRAG_STATUS_COLUMN: iconPrefix + 'swap',",
          "262:   TABLE_DRAG_DISABLED: iconPrefix + 'no-drop',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:   TABLE_DRAG_STATUS_SUB_ROW: iconPrefix + 'add-sub',",
          "",
          "---------------"
        ],
        "styles/components/icon.scss||styles/components/icon.scss": [
          "File: styles/components/icon.scss -> styles/components/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: @font-face {",
          "6:   font-family: \"vxetableiconfont\";",
          "7:   src:",
          "9: }",
          "11: @keyframes rollCircle {",
          "",
          "[Removed Lines]",
          "8:        url('data:application/x-font-woff2;charset=utf-8;base64,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') format('woff2');",
          "",
          "[Added Lines]",
          "8:        url('data:application/x-font-woff2;charset=utf-8;base64,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') format('woff2');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   }",
          "80: }",
          "82: .vxe-table-icon-swap:before {",
          "83:   content: \"\\e7f3\";",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: .vxe-table-icon-add-sub:before {",
          "83:   content: \"\\e6bc\";",
          "84: }",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:     &[drag-pos=\"bottom\"] {",
          "1344:       border-bottom-color: var(--vxe-ui-font-primary-color);",
          "1345:     }",
          "1346:     &.is--guides {",
          "1347:       background-color: var( --vxe-ui-table-drag-over-background-color);",
          "1348:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346:     &[drag-to-child=\"y\"] {",
          "1347:       border-top-color: transparent;",
          "1348:       border-bottom-color: transparent;",
          "1349:       border-left-color: var(--vxe-ui-status-success-color);",
          "1350:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1381:         display: block;",
          "1382:       }",
          "1383:     }",
          "1384:     &[drag-status=\"disabled\"] {",
          "1385:       .vxe-table--drag-sort-tip-disabled-status {",
          "1386:         display: block;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1389:     &[drag-status=\"sub\"] {",
          "1390:       .vxe-table--drag-sort-tip-sub-status {",
          "1391:         display: block;",
          "1392:       }",
          "1393:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1400:     flex-shrink: 0;",
          "1401:     color: var(--vxe-ui-status-error-color)",
          "1402:   }",
          "1404:     display: none;",
          "1405:   }",
          "1406:   .vxe-table--drag-sort-tip-content {",
          "",
          "[Removed Lines]",
          "1403:   .vxe-table--drag-sort-tip-normal-status {",
          "",
          "[Added Lines]",
          "1413:   .vxe-table--drag-sort-tip-normal-status,",
          "1414:   .vxe-table--drag-sort-tip-sub-status {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6db912e165bb83ed6ffc83c8229c33eccc88cc96",
      "candidate_info": {
        "commit_hash": "6db912e165bb83ed6ffc83c8229c33eccc88cc96",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/6db912e165bb83ed6ffc83c8229c33eccc88cc96",
        "files": [
          "README.md",
          "package.json",
          "packages/modal/src/modal.js",
          "packages/table/src/methods.js",
          "styles/export.scss"
        ],
        "message": "releases 3.8.15",
        "before_after_code_files": [
          "packages/modal/src/modal.js||packages/modal/src/modal.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "styles/export.scss||styles/export.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/modal/src/modal.js||packages/modal/src/modal.js": [
          "File: packages/modal/src/modal.js -> packages/modal/src/modal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:     maximize () {",
          "481:       return this.$nextTick().then(() => {",
          "482:         if (!this.revertLocat) {",
          "484:           const modalBoxElem = this.getBox()",
          "486:           this.revertLocat = {",
          "487:             top: modalBoxElem.offsetTop,",
          "488:             left: modalBoxElem.offsetLeft,",
          "",
          "[Removed Lines]",
          "483:           const marginSize = Math.max(0, this.marginSize)",
          "485:           const { visibleHeight, visibleWidth } = DomTools.getDomNode()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:             height: modalBoxElem.offsetHeight + (modalBoxElem.style.height ? 0 : 1)",
          "491:           }",
          "492:           Object.assign(modalBoxElem.style, {",
          "497:           })",
          "498:           this.savePosStorage()",
          "499:         }",
          "",
          "[Removed Lines]",
          "493:             top: `${marginSize}px`,",
          "494:             left: `${marginSize}px`,",
          "495:             width: `${visibleWidth - marginSize * 2}px`,",
          "496:             height: `${visibleHeight - marginSize * 2}px`",
          "",
          "[Added Lines]",
          "491:             top: '0',",
          "492:             left: '0',",
          "493:             width: '100%',",
          "494:             height: '100%'",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1635:         const bodyWidth = tableBodyElem ? tableBodyElem.clientWidth - 1 : 0",
          "1636:         rdWidth = Math.floor(colWidth * bodyWidth)",
          "1637:       }",
          "1639:     }",
          "1640:     return this.$nextTick()",
          "1641:   },",
          "",
          "[Removed Lines]",
          "1638:       column.renderWidth = rdWidth",
          "",
          "[Added Lines]",
          "1638:       column.resizeWidth = rdWidth",
          "1639:       return this.refreshColumn()",
          "",
          "---------------"
        ],
        "styles/export.scss||styles/export.scss": [
          "File: styles/export.scss -> styles/export.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:       cursor: pointer;",
          "92:     }",
          "93:     &:hover {",
          "94:       & > i {",
          "95:         display: block;",
          "96:       }",
          "98:     }",
          "99:   }",
          "100:   .vxe-import-select--file {",
          "",
          "[Removed Lines]",
          "97:       color: $vxe-primary-color;",
          "",
          "[Added Lines]",
          "94:       color: $vxe-primary-color;",
          "",
          "---------------"
        ]
      }
    }
  ]
}