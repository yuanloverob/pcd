{
  "cve_id": "CVE-2023-42780",
  "cve_desc": "Apache Airflow, versions prior to 2.7.2, contains a security vulnerability that allows authenticated users of Airflow to list warnings for all DAGs, even if the user had no permission to see those DAGs. It would reveal the dag_ids and the stack-traces of import errors for those DAGs with import errors.\nUsers of Apache Airflow are advised to upgrade to version 2.7.2 or newer to mitigate the risk associated with this vulnerability.\n\n",
  "repo": "apache/airflow",
  "patch_hash": "cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
  "patch_info": {
    "commit_hash": "cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
    "files": [
      "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
    ],
    "message": "Fix dag warning endpoint permissions (#34355)\n\n* Fix dag warning endpoint permissions\n\n* update the query to have an accurate result for total entries and pagination\n\n* add unit tests\n\n* Update test_dag_warning_endpoint.py\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n\n---------\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n(cherry picked from commit 3570bbfbea69e2965f91b9964ce28bc268c68129)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: # under the License.",
      "17: from __future__ import annotations",
      "19: from sqlalchemy import select",
      "20: from sqlalchemy.orm import Session",
      "22: from airflow.api_connexion import security",
      "23: from airflow.api_connexion.parameters import apply_sorting, check_limit, format_parameters",
      "24: from airflow.api_connexion.schemas.dag_warning_schema import (",
      "25:     DagWarningCollection,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from flask import g",
      "24: from airflow.api_connexion.exceptions import PermissionDenied",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: from airflow.api_connexion.types import APIResponse",
      "29: from airflow.models.dagwarning import DagWarning as DagWarningModel",
      "30: from airflow.security import permissions",
      "31: from airflow.utils.db import get_query_count",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from airflow.utils.airflow_flask_app import get_airflow_app",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "52:     allowed_filter_attrs = [\"dag_id\", \"warning_type\", \"message\", \"timestamp\"]",
      "53:     query = select(DagWarningModel)",
      "54:     if dag_id:",
      "55:         query = query.where(DagWarningModel.dag_id == dag_id)",
      "56:     if warning_type:",
      "57:         query = query.where(DagWarningModel.warning_type == warning_type)",
      "58:     total_entries = get_query_count(query, session=session)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:         if not get_airflow_app().appbuilder.sm.can_read_dag(dag_id, g.user):",
      "59:             raise PermissionDenied(detail=f\"User not allowed to access this DAG: {dag_id}\")",
      "61:     else:",
      "62:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
      "63:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_warning_endpoint.py -> tests/api_connexion/endpoints/test_dag_warning_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:         app,  # type:ignore",
      "36:         username=\"test\",",
      "37:         role_name=\"Test\",",
      "39:     )",
      "40:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "42:     yield minimal_app_for_api",
      "44:     delete_user(app, username=\"test\")  # type: ignore",
      "45:     delete_user(app, username=\"test_no_permissions\")  # type: ignore",
      "48: class TestBaseDagWarning:",
      "",
      "[Removed Lines]",
      "38:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING)],  # type: ignore",
      "",
      "[Added Lines]",
      "38:         permissions=[",
      "39:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
      "40:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG),",
      "41:         ],  # type: ignore",
      "44:     create_user(",
      "45:         app,  # type:ignore",
      "46:         username=\"test_with_dag2_read\",",
      "47:         role_name=\"TestWithDag2Read\",",
      "48:         permissions=[",
      "49:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
      "50:             (permissions.ACTION_CAN_READ, f\"{permissions.RESOURCE_DAG_PREFIX}dag2\"),",
      "51:         ],  # type: ignore",
      "52:     )",
      "58:     delete_user(app, username=\"test_with_dag2_read\")  # type: ignore",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:             \"/api/v1/dagWarnings\", environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"}",
      "148:         )",
      "149:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:     def test_should_raise_403_forbidden_when_user_has_no_dag_read_permission(self):",
      "165:         response = self.client.get(",
      "166:             \"/api/v1/dagWarnings\",",
      "167:             environ_overrides={\"REMOTE_USER\": \"test_with_dag2_read\"},",
      "168:             query_string={\"dag_id\": \"dag1\"},",
      "169:         )",
      "170:         assert response.status_code == 403",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd70ac0dafbf15e3c2de31a8294f313518728c0e",
      "candidate_info": {
        "commit_hash": "cd70ac0dafbf15e3c2de31a8294f313518728c0e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/cd70ac0dafbf15e3c2de31a8294f313518728c0e",
        "files": [
          "BREEZE.rst",
          "dev/README_RELEASE_AIRFLOW.md",
          "dev/README_RELEASE_HELM_CHART.md",
          "dev/README_RELEASE_PROVIDER_PACKAGES.md",
          "dev/breeze/src/airflow_breeze/commands/developer_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "dev/breeze/src/airflow_breeze/global_constants.py",
          "dev/breeze/src/airflow_breeze/utils/add_back_references.py",
          "dev/breeze/src/airflow_breeze/utils/common_options.py",
          "dev/breeze/tests/test_global_constants.py",
          "dev/provider_packages/publish_provider_documentation.sh",
          "images/breeze/output-commands-hash.txt",
          "images/breeze/output-commands.svg",
          "images/breeze/output_build-docs.svg",
          "images/breeze/output_release-management.svg",
          "images/breeze/output_release-management_add-back-references.svg",
          "images/breeze/output_release-management_generate-issue-content-providers.svg",
          "images/breeze/output_release-management_prepare-provider-documentation.svg",
          "images/breeze/output_release-management_prepare-provider-packages.svg",
          "images/breeze/output_release-management_publish-docs.svg"
        ],
        "message": "Better fix for add-back-references (#33207)\n\nThis is a better fix for add-back-references breeze command, as\nthe previous fix had a bug and processed more than just providers\nwhen providers --gen-type was selected. See #33149.\n\nThis version fixes it in a much more consistent way:\n\n* you have to specify what you want to work on as option\n* you can  select few of the provider via auto-complete\n* you can also select apache-airflow and helm-chart\n* you can mix and match them if you need\n\nAll the scripts and references where `--gen-type` was used\npreviously have been updated and documentation was changed to\nreflect it\n\n(cherry picked from commit 8c28454842c13cad1e0f2af0ec0d9a001e103aa2)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/commands/developer_commands.py||dev/breeze/src/airflow_breeze/commands/developer_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands.py||dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py||dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py",
          "dev/breeze/src/airflow_breeze/utils/add_back_references.py||dev/breeze/src/airflow_breeze/utils/add_back_references.py",
          "dev/breeze/src/airflow_breeze/utils/common_options.py||dev/breeze/src/airflow_breeze/utils/common_options.py",
          "dev/breeze/tests/test_global_constants.py||dev/breeze/tests/test_global_constants.py",
          "dev/provider_packages/publish_provider_documentation.sh||dev/provider_packages/publish_provider_documentation.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/commands/developer_commands.py||dev/breeze/src/airflow_breeze/commands/developer_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/developer_commands.py -> dev/breeze/src/airflow_breeze/commands/developer_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     DEFAULT_PYTHON_MAJOR_MINOR_VERSION,",
          "35:     DOCKER_DEFAULT_PLATFORM,",
          "36:     MOUNT_SELECTED,",
          "38: )",
          "39: from airflow_breeze.params.build_ci_params import BuildCiParams",
          "40: from airflow_breeze.params.doc_build_params import DocBuildParams",
          "",
          "[Removed Lines]",
          "37:     get_available_documentation_provider_packages,",
          "",
          "[Added Lines]",
          "37:     get_available_documentation_packages,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362: @click.option(",
          "363:     \"--package-filter\",",
          "364:     help=\"List of packages to consider.\",",
          "366:     multiple=True,",
          "367: )",
          "368: @click.option(",
          "",
          "[Removed Lines]",
          "365:     type=NotVerifiedBetterChoice(get_available_documentation_provider_packages()),",
          "",
          "[Added Lines]",
          "365:     type=NotVerifiedBetterChoice(get_available_documentation_packages()),",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/release_management_commands.py||dev/breeze/src/airflow_breeze/commands/release_management_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/release_management_commands.py -> dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     MOUNT_ALL,",
          "44:     MOUNT_SELECTED,",
          "45:     MULTI_PLATFORM,",
          "47: )",
          "48: from airflow_breeze.params.shell_params import ShellParams",
          "49: from airflow_breeze.utils.add_back_references import (",
          "51:     start_generating_back_references,",
          "52: )",
          "53: from airflow_breeze.utils.ci_group import ci_group",
          "54: from airflow_breeze.utils.common_options import (",
          "55:     argument_packages,",
          "56:     option_airflow_constraints_mode_ci,",
          "57:     option_airflow_constraints_reference,",
          "58:     option_airflow_extras,",
          "",
          "[Removed Lines]",
          "46:     get_available_documentation_provider_packages,",
          "50:     GenerationType,",
          "",
          "[Added Lines]",
          "46:     get_available_documentation_packages,",
          "55:     argument_packages_plus_all_providers,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783: @click.option(",
          "784:     \"--package-filter\",",
          "785:     help=\"List of packages to consider.\",",
          "787:     multiple=True,",
          "788: )",
          "789: @option_verbose",
          "",
          "[Removed Lines]",
          "786:     type=NotVerifiedBetterChoice(get_available_documentation_provider_packages()),",
          "",
          "[Added Lines]",
          "786:     type=NotVerifiedBetterChoice(get_available_documentation_packages()),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "816: @release_management.command(",
          "817:     name=\"add-back-references\",",
          "819: )",
          "820: @click.option(",
          "821:     \"-a\",",
          "",
          "[Removed Lines]",
          "818:     help=\"Command to add back references for documentation to make it backward compatible\",",
          "",
          "[Added Lines]",
          "818:     help=\"Command to add back references for documentation to make it backward compatible.\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "825:     help=\"Local directory path of cloned airflow-site repo.\",",
          "826:     required=True,",
          "827: )",
          "839: @option_verbose",
          "840: @option_dry_run",
          "841: def add_back_references(",
          "842:     airflow_site_directory: str,",
          "845: ):",
          "846:     \"\"\"Adds back references for documentation generated by build-docs and publish-docs\"\"\"",
          "847:     site_path = Path(airflow_site_directory)",
          "",
          "[Removed Lines]",
          "828: @click.option(",
          "829:     \"-g\",",
          "830:     \"--gen-type\",",
          "831:     show_default=True,",
          "832:     help=\"Type of back references to generate. Forced to providers if providers specified as arguments.\",",
          "833:     type=BetterChoice(",
          "834:         [e.name for e in GenerationType],",
          "835:     ),",
          "836:     default=GenerationType.airflow.name,",
          "837: )",
          "838: @argument_packages",
          "843:     gen_type: str,",
          "844:     packages: list[str],",
          "",
          "[Added Lines]",
          "828: @argument_packages_plus_all_providers",
          "833:     packages_plus_all_providers: tuple[str],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "851:             \"Provide the path of cloned airflow-site repo\\n\"",
          "852:         )",
          "853:         sys.exit(1)",
          "855:         get_console().print(",
          "866:         )",
          "867:         sys.exit(1)",
          "872: @release_management.command(",
          "",
          "[Removed Lines]",
          "854:     if len(packages) != 0 and gen_type != GenerationType.providers.name:",
          "856:             [",
          "857:                 f\"[warning]Forcing gen type to \"",
          "858:                 f\"{GenerationType.providers} as some provider_packages are selected.\"",
          "859:             ]",
          "860:         )",
          "861:         gen_type = GenerationType.providers.name",
          "862:     gen = GenerationType[gen_type]",
          "863:     if gen not in GenerationType:",
          "864:         get_console().print(",
          "865:             \"\\n[error]invalid type of doc generation required. Pass one of [airflow | providers | helm]\\n\"",
          "869:     start_generating_back_references(gen, site_path, packages)",
          "",
          "[Added Lines]",
          "843:     if len(packages_plus_all_providers) == 0:",
          "845:             \"\\n[error]You need to specify at least one package to generate back references for\\n\"",
          "848:     packages = list(packages_plus_all_providers)",
          "849:     if \"all-providers\" in packages_plus_all_providers:",
          "850:         packages.remove(\"all-providers\")",
          "851:         packages.extend(get_available_documentation_packages(only_providers=True, short_version=True))",
          "852:     start_generating_back_references(site_path, packages)",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py||dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py": [
          "File: dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py -> dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     \"breeze release-management add-back-references\": [",
          "175:         {",
          "176:             \"name\": \"Add Back References to Docs\",",
          "178:         },",
          "179:     ],",
          "180:     \"breeze release-management generate-issue-content-providers\": [",
          "",
          "[Removed Lines]",
          "177:             \"options\": [\"--airflow-site-directory\", \"--gen-type\"],",
          "",
          "[Added Lines]",
          "177:             \"options\": [\"--airflow-site-directory\"],",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py": [
          "File: dev/breeze/src/airflow_breeze/global_constants.py -> dev/breeze/src/airflow_breeze/global_constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: ALL_HISTORICAL_PYTHON_VERSIONS = [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]",
          "150:     provider_names: list[str] = list(json.loads(PROVIDER_DEPENDENCIES_JSON_FILE_PATH.read_text()).keys())",
          "151:     doc_provider_names = [provider_name.replace(\".\", \"-\") for provider_name in provider_names]",
          "155:     if short_version:",
          "156:         prefix_len = len(\"apache-airflow-providers-\")",
          "157:         available_packages = [",
          "159:             for package in available_packages",
          "161:         ]",
          "162:     return available_packages",
          "",
          "[Removed Lines]",
          "149: def get_available_documentation_provider_packages(short_version=False) -> list[str]:",
          "152:     available_packages = [f\"apache-airflow-providers-{doc_provider}\" for doc_provider in doc_provider_names]",
          "153:     available_packages.extend([\"apache-airflow\", \"docker-stack\", \"helm-chart\"])",
          "154:     available_packages.sort()",
          "158:             package[prefix_len:].replace(\"-\", \".\")",
          "160:             if len(package) > prefix_len",
          "",
          "[Added Lines]",
          "149: def get_available_documentation_packages(short_version=False, only_providers: bool = False) -> list[str]:",
          "152:     available_packages = []",
          "153:     if not only_providers:",
          "154:         available_packages.extend([\"apache-airflow\", \"docker-stack\", \"helm-chart\"])",
          "155:     all_providers = [f\"apache-airflow-providers-{doc_provider}\" for doc_provider in doc_provider_names]",
          "156:     all_providers.sort()",
          "157:     available_packages.extend(all_providers)",
          "161:             package[prefix_len:].replace(\"-\", \".\") if len(package) > prefix_len else package",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/add_back_references.py||dev/breeze/src/airflow_breeze/utils/add_back_references.py": [
          "File: dev/breeze/src/airflow_breeze/utils/add_back_references.py -> dev/breeze/src/airflow_breeze/utils/add_back_references.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: # under the License.",
          "17: from __future__ import annotations",
          "20: import os",
          "21: import re",
          "22: import tempfile",
          "",
          "[Removed Lines]",
          "19: import enum",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: from rich import print",
          "31: airflow_redirects_link = (",
          "32:     \"https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/redirects.txt\"",
          "",
          "[Removed Lines]",
          "29: from airflow_breeze.global_constants import get_available_documentation_provider_packages",
          "",
          "[Added Lines]",
          "28: from airflow_breeze.utils.console import get_console",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34: helm_redirects_link = \"https://raw.githubusercontent.com/apache/airflow/main/docs/helm-chart/redirects.txt\"",
          "44: def download_file(url):",
          "45:     try:",
          "46:         temp_dir = Path(tempfile.mkdtemp(prefix=\"temp_dir\", suffix=\"\"))",
          "",
          "[Removed Lines]",
          "37: # types of generations supported",
          "38: class GenerationType(enum.Enum):",
          "39:     airflow = 1",
          "40:     helm = 2",
          "41:     providers = 3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:                 create_back_reference_html(relative_path, dest_file_path)",
          "156:     docs_archive_path = airflow_site_directory / \"docs-archive\"",
          "157:     airflow_docs_path = docs_archive_path / \"apache-airflow\"",
          "158:     helm_docs_path = docs_archive_path / \"helm-chart\"",
          "161:         generate_back_references(airflow_redirects_link, airflow_docs_path)",
          "163:         generate_back_references(helm_redirects_link, helm_docs_path)",
          "172:         for p in all_providers:",
          "173:             print(f\"Processing airflow provider: {p}\")",
          "174:             generate_back_references(get_github_redirects_url(p), docs_archive_path / p)",
          "",
          "[Removed Lines]",
          "152: def start_generating_back_references(",
          "153:     gen_type: GenerationType, airflow_site_directory: Path, short_provider_package_ids: list[str]",
          "154: ):",
          "155:     # Either packages or gen_type should be provided",
          "160:     if gen_type == GenerationType.airflow:",
          "162:     elif gen_type == GenerationType.helm:",
          "164:     elif gen_type == GenerationType.providers:",
          "165:         if short_provider_package_ids:",
          "166:             all_providers = [",
          "167:                 f\"apache-airflow-providers-{package.replace('.','-')}\"",
          "168:                 for package in short_provider_package_ids",
          "169:             ]",
          "170:         else:",
          "171:             all_providers = get_available_documentation_provider_packages()",
          "",
          "[Added Lines]",
          "144: def start_generating_back_references(airflow_site_directory: Path, short_provider_package_ids: list[str]):",
          "148:     if \"apache-airflow\" in short_provider_package_ids:",
          "150:         short_provider_package_ids.remove(\"apache-airflow\")",
          "151:     if \"helm-chart\" in short_provider_package_ids:",
          "153:         short_provider_package_ids.remove(\"helm-chart\")",
          "154:     if \"docker-stack\" in short_provider_package_ids:",
          "155:         get_console().print(\"[info]Skipping docker-stack package. No back-reference needed.\")",
          "156:         short_provider_package_ids.remove(\"docker-stack\")",
          "157:     if short_provider_package_ids:",
          "158:         all_providers = [",
          "159:             f\"apache-airflow-providers-{package.replace('.','-')}\" for package in short_provider_package_ids",
          "160:         ]",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/common_options.py||dev/breeze/src/airflow_breeze/utils/common_options.py": [
          "File: dev/breeze/src/airflow_breeze/utils/common_options.py -> dev/breeze/src/airflow_breeze/utils/common_options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     SINGLE_PLATFORMS,",
          "45:     START_AIRFLOW_ALLOWED_EXECUTORS,",
          "46:     START_AIRFLOW_DEFAULT_ALLOWED_EXECUTORS,",
          "48: )",
          "49: from airflow_breeze.utils.custom_param_types import (",
          "50:     AnswerChoice,",
          "",
          "[Removed Lines]",
          "47:     get_available_documentation_provider_packages,",
          "",
          "[Added Lines]",
          "47:     get_available_documentation_packages,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:     \"packages\",",
          "444:     nargs=-1,",
          "445:     required=False,",
          "447: )",
          "448: option_airflow_constraints_reference = click.option(",
          "449:     \"--airflow-constraints-reference\",",
          "",
          "[Removed Lines]",
          "446:     type=BetterChoice(get_available_documentation_provider_packages(short_version=True)),",
          "",
          "[Added Lines]",
          "446:     type=BetterChoice(get_available_documentation_packages(short_version=True)),",
          "447: )",
          "448: argument_packages_plus_all_providers = click.argument(",
          "449:     \"packages_plus_all_providers\",",
          "450:     nargs=-1,",
          "451:     required=False,",
          "452:     type=BetterChoice([\"all-providers\"] + get_available_documentation_packages(short_version=True)),",
          "",
          "---------------"
        ],
        "dev/breeze/tests/test_global_constants.py||dev/breeze/tests/test_global_constants.py": [
          "File: dev/breeze/tests/test_global_constants.py -> dev/breeze/tests/test_global_constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: # under the License.",
          "17: from __future__ import annotations",
          "21: AVAILABLE_PACKAGES_STARTING_LIST = (\"apache-airflow\", \"helm-chart\", \"docker-stack\")",
          "24: def test_get_available_packages():",
          "27:         assert package.startswith(AVAILABLE_PACKAGES_STARTING_LIST)",
          "",
          "[Removed Lines]",
          "19: from airflow_breeze.global_constants import get_available_documentation_provider_packages",
          "25:     assert len(get_available_documentation_provider_packages()) > 70",
          "26:     for package in get_available_documentation_provider_packages():",
          "",
          "[Added Lines]",
          "19: from airflow_breeze.global_constants import get_available_documentation_packages",
          "25:     assert len(get_available_documentation_packages()) > 70",
          "26:     for package in get_available_documentation_packages():",
          "",
          "---------------"
        ],
        "dev/provider_packages/publish_provider_documentation.sh||dev/provider_packages/publish_provider_documentation.sh": [
          "File: dev/provider_packages/publish_provider_documentation.sh -> dev/provider_packages/publish_provider_documentation.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: breeze build-docs \"${provider_filters[@]}\"",
          "33: cd \"${AIRFLOW_SITE_DIRECTORY}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: breeze release-management add-back-references \"${@}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79d3433d4c091c3badcc8fd3f86389b44a88e067",
      "candidate_info": {
        "commit_hash": "79d3433d4c091c3badcc8fd3f86389b44a88e067",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/79d3433d4c091c3badcc8fd3f86389b44a88e067",
        "files": [
          "setup.py"
        ],
        "message": "Refactor unneeded 'continue' jumps in setup.py (#33848)\n\n(cherry picked from commit ff1a5f2a991f267b0628a4706992029a36be8961)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:     \"\"\"",
          "649:     for alias, extra in EXTRAS_DEPRECATED_ALIASES.items():",
          "650:         dependencies = EXTRAS_DEPENDENCIES.get(extra) if extra != \"\" else []",
          "656: def add_all_deprecated_provider_packages() -> None:",
          "",
          "[Removed Lines]",
          "651:         if dependencies is None:",
          "652:             continue",
          "653:         EXTRAS_DEPENDENCIES[alias] = dependencies",
          "",
          "[Added Lines]",
          "651:         if dependencies is not None:",
          "652:             EXTRAS_DEPENDENCIES[alias] = dependencies",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:     {\"kubernetes\": [\"apache-airflow-provider-cncf-kubernetes\"]}",
          "662:     \"\"\"",
          "663:     for alias, provider in EXTRAS_DEPRECATED_ALIASES.items():",
          "669: add_extras_for_all_deprecated_aliases()",
          "",
          "[Removed Lines]",
          "664:         if alias in EXTRAS_DEPRECATED_ALIASES_NOT_PROVIDERS:",
          "665:             continue",
          "666:         replace_extra_dependencies_with_provider_packages(alias, [provider])",
          "",
          "[Added Lines]",
          "663:         if alias not in EXTRAS_DEPRECATED_ALIASES_NOT_PROVIDERS:",
          "664:             replace_extra_dependencies_with_provider_packages(alias, [provider])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "703: def get_all_db_dependencies() -> list[str]:",
          "704:     _all_db_reqs: set[str] = set()",
          "705:     for provider in ALL_DB_PROVIDERS:",
          "710:     return list(_all_db_reqs)",
          "",
          "[Removed Lines]",
          "706:         if provider not in PROVIDER_DEPENDENCIES:",
          "707:             continue",
          "708:         for req in PROVIDER_DEPENDENCIES[provider][DEPS]:",
          "709:             _all_db_reqs.add(req)",
          "",
          "[Added Lines]",
          "704:         if provider in PROVIDER_DEPENDENCIES:",
          "705:             for req in PROVIDER_DEPENDENCIES[provider][DEPS]:",
          "706:                 _all_db_reqs.add(req)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1666066f1acd7223803cc31fb01017f5a1a21aa",
      "candidate_info": {
        "commit_hash": "b1666066f1acd7223803cc31fb01017f5a1a21aa",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b1666066f1acd7223803cc31fb01017f5a1a21aa",
        "files": [
          "airflow/stats.py"
        ],
        "message": "Avoid creating unnecessary list when parsing stats datadog tags (#33943)\n\n(cherry picked from commit c92c9611ede6b9156ebb2eaca2443340270435f8)",
        "before_after_code_files": [
          "airflow/stats.py||airflow/stats.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/stats.py||airflow/stats.py": [
          "File: airflow/stats.py -> airflow/stats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     @classmethod",
          "63:     def get_constant_tags(cls) -> list[str]:",
          "64:         \"\"\"Get constant DataDog tags to add to all stats.\"\"\"",
          "66:         tags_in_string = conf.get(\"metrics\", \"statsd_datadog_tags\", fallback=None)",
          "75: if TYPE_CHECKING:",
          "",
          "[Removed Lines]",
          "65:         tags: list[str] = []",
          "67:         if tags_in_string is None or tags_in_string == \"\":",
          "68:             return tags",
          "69:         else:",
          "70:             for key_value in tags_in_string.split(\",\"):",
          "71:                 tags.append(key_value)",
          "72:             return tags",
          "",
          "[Added Lines]",
          "66:         if not tags_in_string:",
          "67:             return []",
          "68:         return tags_in_string.split(\",\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d83d2e361f58dce8465c4236f396f9b24451d922",
      "candidate_info": {
        "commit_hash": "d83d2e361f58dce8465c4236f396f9b24451d922",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/d83d2e361f58dce8465c4236f396f9b24451d922",
        "files": [
          "airflow/api/auth/backend/kerberos_auth.py",
          "airflow/www/views.py"
        ],
        "message": "Remove useless string join from core (#33969)\n\n(cherry picked from commit b7191b8d0adae87f72bb6d1a038fb7937b6a80ae)",
        "before_after_code_files": [
          "airflow/api/auth/backend/kerberos_auth.py||airflow/api/auth/backend/kerberos_auth.py",
          "airflow/www/views.py||airflow/www/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/api/auth/backend/kerberos_auth.py||airflow/api/auth/backend/kerberos_auth.py": [
          "File: airflow/api/auth/backend/kerberos_auth.py -> airflow/api/auth/backend/kerberos_auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:                 response = function(*args, **kwargs)",
          "145:                 response = make_response(response)",
          "146:                 if ctx.kerberos_token is not None:",
          "149:                 return response",
          "150:             if return_code != kerberos.AUTH_GSS_CONTINUE:",
          "",
          "[Removed Lines]",
          "147:                     response.headers[\"WWW-Authenticate\"] = \" \".join([\"negotiate\", ctx.kerberos_token])",
          "",
          "[Added Lines]",
          "147:                     response.headers[\"WWW-Authenticate\"] = f\"negotiate {ctx.kerberos_token}\"",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:     for key, value in input_dict.items():",
          "562:         if isinstance(value, dict):",
          "563:             for sub_key in get_key_paths(value):",
          "565:         else:",
          "566:             yield key",
          "",
          "[Removed Lines]",
          "564:                 yield \".\".join((key, sub_key))",
          "",
          "[Added Lines]",
          "564:                 yield f\"{key}.{sub_key}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1528:                     for key, value in content.items():",
          "1529:                         renderer = task.template_fields_renderers.get(key, key)",
          "1530:                         if renderer in renderers:",
          "1532:                                 renderers[renderer](value) if not no_dagrun else \"\"",
          "1533:                             )",
          "1534:                         else:",
          "1536:                                 \"<pre><code>{}</pre></code>\"",
          "1537:                             ).format(pformat(value) if not no_dagrun else \"\")",
          "1538:                 else:",
          "1539:                     for dict_keys in get_key_paths(content):",
          "1541:                         renderer = task.template_fields_renderers.get(template_path, template_path)",
          "1542:                         if renderer in renderers:",
          "1543:                             content_value = get_value_from_path(dict_keys, content)",
          "",
          "[Removed Lines]",
          "1531:                             html_dict[\".\".join([template_field, key])] = (",
          "1535:                             html_dict[\".\".join([template_field, key])] = Markup(",
          "1540:                         template_path = \".\".join((template_field, dict_keys))",
          "",
          "[Added Lines]",
          "1531:                             html_dict[f\"{template_field}.{key}\"] = (",
          "1535:                             html_dict[f\"{template_field}.{key}\"] = Markup(",
          "1540:                         template_path = f\"{template_field}.{dict_keys}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f76cd2751b36dc8d22a20db24f9e0bd56b121e56",
      "candidate_info": {
        "commit_hash": "f76cd2751b36dc8d22a20db24f9e0bd56b121e56",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/f76cd2751b36dc8d22a20db24f9e0bd56b121e56",
        "files": [
          "airflow/www/security.py"
        ],
        "message": "Restore EXISTING_ROLES from security.py (#34523)\n\n(cherry picked from commit 5d2cea4515cd656e85c39e04d148fcb2d6ba516a)",
        "before_after_code_files": [
          "airflow/www/security.py||airflow/www/security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/security.py||airflow/www/security.py": [
          "File: airflow/www/security.py -> airflow/www/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     # Fetch the security manager override from the auth manager",
          "65:     SecurityManagerOverride = get_auth_manager().get_security_manager_override_class()",
          "68: class AirflowSecurityManager(SecurityManagerOverride, SecurityManager, LoggingMixin):",
          "69:     \"\"\"Custom security manager, which introduces a permission model adapted to Airflow.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: EXISTING_ROLES = {",
          "68:     \"Admin\",",
          "69:     \"Viewer\",",
          "70:     \"User\",",
          "71:     \"Op\",",
          "72:     \"Public\",",
          "73: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}