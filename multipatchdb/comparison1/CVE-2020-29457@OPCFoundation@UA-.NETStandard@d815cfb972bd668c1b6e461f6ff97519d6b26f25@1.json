{
  "cve_id": "CVE-2020-29457",
  "cve_desc": "A Privilege Elevation vulnerability in OPC UA .NET Standard Stack 1.4.363.107 could allow a rogue application to establish a secure connection.",
  "repo": "OPCFoundation/UA-.NETStandard",
  "patch_hash": "d815cfb972bd668c1b6e461f6ff97519d6b26f25",
  "patch_info": {
    "commit_hash": "d815cfb972bd668c1b6e461f6ff97519d6b26f25",
    "repo": "OPCFoundation/UA-.NETStandard",
    "commit_url": "https://github.com/OPCFoundation/UA-.NETStandard/pull/1229/commits/d815cfb972bd668c1b6e461f6ff97519d6b26f25",
    "files": [
      "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
      "Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs",
      "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs"
    ],
    "message": "Improve handling of certificate validation (#1217)\n\nThe change ensures that all certificate validation failures (except those related to the hostname of a server) are stacked in the right order into a service result, which -- if not empty -- in the end is raised in a service result exception.\nThe single point where knowledge about suppressible changes is needed is the place in Validate, where that exception is caught.",
    "before_after_code_files": [
      "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
      "Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs||Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs",
      "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs||Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs"
    ]
  },
  "patch_diff": {
    "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs": [
      "File: Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs -> Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:             catch (ServiceResultException se)",
      "252:             {",
      "279:                 }",
      "",
      "[Removed Lines]",
      "254:                 switch (se.StatusCode)",
      "255:                 {",
      "256:                     case StatusCodes.BadCertificateHostNameInvalid:",
      "257:                     case StatusCodes.BadCertificateIssuerRevocationUnknown:",
      "258:                     case StatusCodes.BadCertificateChainIncomplete:",
      "259:                     case StatusCodes.BadCertificateIssuerTimeInvalid:",
      "260:                     case StatusCodes.BadCertificateIssuerUseNotAllowed:",
      "261:                     case StatusCodes.BadCertificateRevocationUnknown:",
      "262:                     case StatusCodes.BadCertificateTimeInvalid:",
      "263:                     case StatusCodes.BadCertificatePolicyCheckFailed:",
      "264:                     case StatusCodes.BadCertificateUseNotAllowed:",
      "265:                     case StatusCodes.BadCertificateUntrusted:",
      "266:                     {",
      "267:                         Utils.Trace(\"Certificate Vaildation failed for '{0}'. Reason={1}\", certificate.Subject, (StatusCode)se.StatusCode);",
      "268:                         break;",
      "269:                     }",
      "271:                     default:",
      "272:                     {",
      "274:                         Utils.Trace((int)Utils.TraceMasks.Error, \"Certificate '{0}' rejected. Reason={1}\", certificate.Subject, (StatusCode)se.StatusCode);",
      "275:                         SaveCertificate(certificate);",
      "277:                         throw new ServiceResultException(se, StatusCodes.BadCertificateInvalid);",
      "278:                     }",
      "",
      "[Added Lines]",
      "254:                 if (ContainsUnsuppressibleSC(se.Result))",
      "255:                 {",
      "256:                     Utils.Trace((int)Utils.TraceMasks.Error, \"Certificate '{0}' rejected. Reason={1}\", certificate.Subject, (StatusCode)se.StatusCode);",
      "257:                     SaveCertificate(certificate);",
      "259:                     throw new ServiceResultException(se, StatusCodes.BadCertificateInvalid);",
      "260:                 }",
      "261:                 else",
      "262:                 {",
      "263:                     Utils.Trace(\"Certificate Vaildation failed for '{0}'. Reason={1}\", certificate.Subject, se.ToLongString());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "310:             }",
      "311:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "308:         static private bool ContainsUnsuppressibleSC(ServiceResult sr)",
      "309:         {",
      "310:             List<StatusCode> suppressibleStatusCodes = new List<StatusCode>()",
      "311:             {",
      "312:                 StatusCodes.BadCertificateHostNameInvalid,",
      "313:                 StatusCodes.BadCertificateIssuerRevocationUnknown,",
      "314:                 StatusCodes.BadCertificateChainIncomplete,",
      "315:                 StatusCodes.BadCertificateIssuerTimeInvalid,",
      "316:                 StatusCodes.BadCertificateIssuerUseNotAllowed,",
      "317:                 StatusCodes.BadCertificateRevocationUnknown,",
      "318:                 StatusCodes.BadCertificateTimeInvalid,",
      "319:                 StatusCodes.BadCertificatePolicyCheckFailed,",
      "320:                 StatusCodes.BadCertificateUseNotAllowed,",
      "321:                 StatusCodes.BadCertificateUntrusted",
      "322:             };",
      "323:             if (!suppressibleStatusCodes.Contains(sr.StatusCode))",
      "324:             {",
      "325:                 return true;",
      "326:             }",
      "327:             if(sr.InnerResult == null)",
      "328:             {",
      "329:                 return false;",
      "330:             }",
      "331:             return ContainsUnsuppressibleSC(sr.InnerResult);",
      "332:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "668:             }",
      "672:             X509Chain chain = new X509Chain();",
      "673:             chain.ChainPolicy = policy;",
      "674:             chain.Build(certificate);",
      "",
      "[Removed Lines]",
      "671:             bool chainStatusChecked = false;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:                 target = new CertificateIdentifier(certificate);",
      "682:             }",
      "684:             for (int ii = 0; ii < chain.ChainElements.Count; ii++)",
      "685:             {",
      "686:                 X509ChainElement element = chain.ChainElements[ii];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "705:             ServiceResult sresult = null;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "697:                 {",
      "698:                     foreach (X509ChainStatus status in element.ChainElementStatus)",
      "699:                     {",
      "702:                         if (ServiceResult.IsBad(result))",
      "703:                         {",
      "719:                         }",
      "722:                     }",
      "723:                 }",
      "729:                 if (issuer != null)",
      "730:                 {",
      "",
      "[Removed Lines]",
      "700:                         ServiceResult result = CheckChainStatus(status, target, issuer, (ii != 0));",
      "705:                             if (trustedCertificate == null)",
      "706:                             {",
      "707:                                 ServiceResult errorResult = new ServiceResult(",
      "708:                                     result.StatusCode,",
      "709:                                     result.SymbolicId,",
      "710:                                     result.NamespaceUri,",
      "711:                                     result.LocalizedText,",
      "712:                                     result.AdditionalInfo,",
      "713:                                     StatusCodes.BadCertificateUntrusted);",
      "715:                                 throw new ServiceResultException(errorResult);",
      "716:                             }",
      "718:                             throw new ServiceResultException(result);",
      "721:                         chainStatusChecked = true;",
      "724:                 else",
      "725:                 {",
      "726:                     chainStatusChecked = true;",
      "727:                 }",
      "",
      "[Added Lines]",
      "723:                         ServiceResult result = CheckChainStatus(status, target, issuer, (ii != 0));",
      "726:                             sresult = new ServiceResult(result, sresult);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "751:                     chainIncomplete = true;",
      "752:                 }",
      "765:             if (issuedByCA && !isIssuerTrusted && trustedCertificate == null)",
      "766:             {",
      "771:                         \"Certificate issuer is not trusted.\\r\\nSubjectName: {0}\\r\\nIssuerName: {1}\",",
      "775:             }",
      "",
      "[Removed Lines]",
      "753:             }",
      "755:             if (issuedByCA && (!chainStatusChecked || chainIncomplete))",
      "756:             {",
      "757:                 throw ServiceResultException.Create(",
      "758:                     StatusCodes.BadCertificateChainIncomplete,",
      "759:                     \"Certificate chain validation incomplete.\\r\\nSubjectName: {0}\\r\\nIssuerName: {1}\",",
      "760:                     certificate.SubjectName.Name,",
      "761:                     certificate.IssuerName.Name);",
      "762:             }",
      "767:                 if (m_applicationCertificate == null || !Utils.IsEqual(m_applicationCertificate.RawData, certificate.RawData))",
      "768:                 {",
      "769:                     throw ServiceResultException.Create(",
      "770:                         StatusCodes.BadCertificateUntrusted,",
      "772:                         certificate.SubjectName.Name,",
      "773:                         certificate.IssuerName.Name);",
      "774:                 }",
      "",
      "[Added Lines]",
      "755:             }",
      "760:                 sresult = new ServiceResult(StatusCodes.BadCertificateUntrusted,",
      "761:                     null,",
      "762:                     null,",
      "763:                     String.Format(",
      "765:                     certificate.SubjectName.Name,",
      "766:                     certificate.IssuerName.Name),",
      "767:                     null,",
      "768:                     sresult",
      "769:                     );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "779:             {",
      "780:                 if (m_applicationCertificate == null || !Utils.IsEqual(m_applicationCertificate.RawData, certificate.RawData))",
      "781:                 {",
      "785:                         certificate.SubjectName.Name,",
      "787:                 }",
      "788:             }",
      "",
      "[Removed Lines]",
      "782:                     throw ServiceResultException.Create(",
      "783:                         StatusCodes.BadCertificateUntrusted,",
      "784:                         \"Certificate is not trusted.\\r\\nSubjectName: {0}\\r\\nIssuerName: {1}\",",
      "786:                         certificate.IssuerName.Name);",
      "",
      "[Added Lines]",
      "777:                     sresult = new ServiceResult(StatusCodes.BadCertificateUntrusted,",
      "778:                         null,",
      "779:                         null,",
      "780:                         String.Format(",
      "781:                             \"Certificate is not trusted.\\r\\nSubjectName: {0}\\r\\nIssuerName: {1}\",",
      "783:                         certificate.IssuerName.Name),",
      "784:                         null,",
      "785:                         sresult",
      "786:                         );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "793:             if ((certificateKeyUsage & X509KeyUsageFlags.DataEncipherment) == 0)",
      "794:             {",
      "796:             }",
      "799:             if (m_rejectSHA1SignedCertificates && IsSHA1SignatureAlgorithm(certificate.SignatureAlgorithm))",
      "800:             {",
      "802:             }",
      "804:             int keySize = X509Utils.GetRSAPublicKeySize(certificate);",
      "805:             if (keySize < m_minimumCertificateKeySize)",
      "806:             {",
      "808:             }",
      "809:         }",
      "",
      "[Removed Lines]",
      "795:                 throw new ServiceResultException(StatusCodes.BadCertificateUseNotAllowed, \"Usage of certificate is not allowed.\");",
      "801:                 throw new ServiceResultException(StatusCodes.BadCertificatePolicyCheckFailed, \"SHA1 signed certificates are not trusted\");",
      "807:                 throw new ServiceResultException(StatusCodes.BadCertificatePolicyCheckFailed, \"Certificate doesn't meet minimum key length requirement\");",
      "",
      "[Added Lines]",
      "795:                 sresult = new ServiceResult(StatusCodes.BadCertificateUseNotAllowed,",
      "796:                     null,",
      "797:                     null,",
      "798:                     \"Usage of certificate is not allowed.\",",
      "799:                     null,",
      "800:                     sresult",
      "801:                     );",
      "807:                 sresult = new ServiceResult(StatusCodes.BadCertificatePolicyCheckFailed,",
      "808:                     null,",
      "809:                     null,",
      "810:                     \"SHA1 signed certificates are not trusted\",",
      "811:                     null,",
      "812:                     sresult",
      "813:                     );",
      "819:                 sresult = new ServiceResult(StatusCodes.BadCertificatePolicyCheckFailed,",
      "820:                     null,",
      "821:                     null,",
      "822:                     \"Certificate doesn't meet minimum key length requirement\",",
      "823:                     null,",
      "824:                     sresult",
      "825:                     );",
      "826:             }",
      "828:             if (issuedByCA && chainIncomplete)",
      "829:             {",
      "830:                 sresult = new ServiceResult(StatusCodes.BadCertificateChainIncomplete,",
      "831:                     null,",
      "832:                     null,",
      "833:                     String.Format(",
      "834:                         \"Certificate chain validation incomplete.\\r\\nSubjectName: {0}\\r\\nIssuerName: {1}\",",
      "835:                     certificate.SubjectName.Name,",
      "836:                     certificate.IssuerName.Name),",
      "837:                     null,",
      "838:                     sresult",
      "839:                     );",
      "840:             }",
      "841:             if(sresult != null)",
      "842:             {",
      "843:                 throw new ServiceResultException(sresult);",
      "",
      "---------------"
    ],
    "Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs||Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs": [
      "File: Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs -> Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:             InnerResult = innerResult;",
      "54:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:         public ServiceResult(",
      "62:             ServiceResult outerResult,",
      "63:             ServiceResult innerResult = null)",
      "64:             :",
      "65:             this(outerResult.Code, outerResult.SymbolicId, outerResult.NamespaceUri, outerResult.LocalizedText, outerResult.AdditionalInfo, innerResult)",
      "66:         {",
      "67:         }",
      "",
      "---------------"
    ],
    "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs||Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs": [
      "File: Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs -> Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "758:             Assert.NotNull(cert);",
      "759:             Assert.True(X509Utils.CompareDistinguishedName(\"CN=App Test Cert\", cert.Subject));",
      "760:             CleanupValidatorAndStores();",
      "762:             {",
      "763:                 await m_issuerStore.Add(cert);",
      "764:             }",
      "",
      "[Removed Lines]",
      "761:             if (trusted)",
      "",
      "[Added Lines]",
      "761:             if (!trusted)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "768:             }",
      "769:             var certValidator = InitValidatorWithStores();",
      "770:             var serviceResultException = Assert.Throws<ServiceResultException>(() => { certValidator.Validate(cert); });",
      "772:         }",
      "",
      "[Removed Lines]",
      "771:             Assert.AreEqual(StatusCodes.BadCertificateTimeInvalid, serviceResultException.StatusCode, serviceResultException.Message);",
      "",
      "[Added Lines]",
      "771:             if (!trusted)",
      "772:             {",
      "773:                 Assert.AreEqual(StatusCodes.BadCertificateUntrusted, serviceResultException.StatusCode, serviceResultException.Message);",
      "774:             }",
      "775:             else",
      "776:             {",
      "777:                 Assert.AreEqual(StatusCodes.BadCertificateTimeInvalid, serviceResultException.StatusCode, serviceResultException.Message);",
      "778:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "788:             Assert.NotNull(cert);",
      "789:             Assert.True(X509Utils.CompareDistinguishedName(\"CN=App Test Cert\", cert.Subject));",
      "790:             CleanupValidatorAndStores();",
      "792:             {",
      "793:                 await m_issuerStore.Add(cert);",
      "794:             }",
      "",
      "[Removed Lines]",
      "791:             if (trusted)",
      "",
      "[Added Lines]",
      "798:             if (!trusted)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "798:             }",
      "799:             var certValidator = InitValidatorWithStores();",
      "800:             var serviceResultException = Assert.Throws<ServiceResultException>(() => { certValidator.Validate(cert); });",
      "802:         }",
      "804:         [Test, Order(602)]",
      "",
      "[Removed Lines]",
      "801:             Assert.AreEqual(StatusCodes.BadCertificateTimeInvalid, serviceResultException.StatusCode, serviceResultException.Message);",
      "",
      "[Added Lines]",
      "808:             if (!trusted)",
      "809:             {",
      "810:                 Assert.AreEqual(StatusCodes.BadCertificateUntrusted, serviceResultException.StatusCode, serviceResultException.Message);",
      "811:             }",
      "812:             else",
      "813:             {",
      "814:                 Assert.AreEqual(StatusCodes.BadCertificateTimeInvalid, serviceResultException.StatusCode, serviceResultException.Message);",
      "815:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d57ae58f26b6f6431f1200bf1602674e4041fca",
      "candidate_info": {
        "commit_hash": "5d57ae58f26b6f6431f1200bf1602674e4041fca",
        "repo": "OPCFoundation/UA-.NETStandard",
        "commit_url": "https://github.com/OPCFoundation/UA-.NETStandard/commit/5d57ae58f26b6f6431f1200bf1602674e4041fca",
        "files": [
          "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs"
        ],
        "message": "Fix for chain status check. #948 Fixes #960  Fixes #996 Fixes #1025",
        "before_after_code_files": [
          "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs"
          ],
          "candidate": [
            "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs"
          ]
        }
      },
      "candidate_diff": {
        "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs": [
          "File: Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs -> Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:                     issuer = issuers[ii];",
          "752:                 }",
          "756:                 {",
          "760:                     {",
          "763:                         {",
          "773:                         }",
          "776:                     }",
          "777:                     chainStatusChecked = true;",
          "778:                 }",
          "",
          "[Removed Lines]",
          "755:                 foreach (X509ChainStatus status in element.ChainElementStatus)",
          "757:                     ServiceResult result = CheckChainStatus(status, target, issuer, (ii != 0));",
          "759:                     if (ServiceResult.IsBad(result))",
          "762:                         if (trustedCertificate == null)",
          "764:                             ServiceResult errorResult = new ServiceResult(",
          "765:                                 result.StatusCode,",
          "766:                                 result.SymbolicId,",
          "767:                                 result.NamespaceUri,",
          "768:                                 result.LocalizedText,",
          "769:                                 result.AdditionalInfo,",
          "770:                                 StatusCodes.BadCertificateUntrusted);",
          "772:                             throw new ServiceResultException(errorResult);",
          "775:                         throw new ServiceResultException(result);",
          "",
          "[Added Lines]",
          "757:                 if (element.ChainElementStatus.Length > 0)",
          "759:                     foreach (X509ChainStatus status in element.ChainElementStatus)",
          "761:                         ServiceResult result = CheckChainStatus(status, target, issuer, (ii != 0));",
          "763:                         if (ServiceResult.IsBad(result))",
          "766:                             if (trustedCertificate == null)",
          "767:                             {",
          "768:                                 ServiceResult errorResult = new ServiceResult(",
          "769:                                     result.StatusCode,",
          "770:                                     result.SymbolicId,",
          "771:                                     result.NamespaceUri,",
          "772:                                     result.LocalizedText,",
          "773:                                     result.AdditionalInfo,",
          "774:                                     StatusCodes.BadCertificateUntrusted);",
          "776:                                 throw new ServiceResultException(errorResult);",
          "777:                             }",
          "779:                             throw new ServiceResultException(result);",
          "782:                         chainStatusChecked = true;",
          "784:                 }",
          "785:                 else",
          "786:                 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e736d22fc2e3109f4e5bd9d2a8a637a54a34bf8",
      "candidate_info": {
        "commit_hash": "7e736d22fc2e3109f4e5bd9d2a8a637a54a34bf8",
        "repo": "OPCFoundation/UA-.NETStandard",
        "commit_url": "https://github.com/OPCFoundation/UA-.NETStandard/commit/7e736d22fc2e3109f4e5bd9d2a8a637a54a34bf8",
        "files": [
          ".editorconfig",
          "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
          "Stack/Opc.Ua.Core/Types/Utils/Utils.cs",
          "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs",
          "Tests/Opc.Ua.Gds.Tests/PushTest.cs"
        ],
        "message": "Improve auto accept in cert validation handler, add tests (#1386)\n\n- if a cert validator is enabled, use it and ignore auto accept flag.\n- trace auto accept message, if used\n- make all config flags public, otherwise they can only be configured using a SecurityConfiguration. Once a config flag is set using a property, it is protected from modification by a SecurityConfiguration. This way apps can consistently override.\n- add tests for the SHA1 and AutoAccept configuration flags\n- add a method to reset the validated list of certificates. The list of certs should be revalidated from time to time to catch expired or revoked certificates. Applications can call `ResetValidatedCertificates` to clear the list with a daily timer.",
        "before_after_code_files": [
          "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
          "Stack/Opc.Ua.Core/Types/Utils/Utils.cs||Stack/Opc.Ua.Core/Types/Utils/Utils.cs",
          "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs||Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs",
          "Tests/Opc.Ua.Gds.Tests/PushTest.cs||Tests/Opc.Ua.Gds.Tests/PushTest.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
            "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs||Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs"
          ],
          "candidate": [
            "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
            "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs||Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs"
          ]
        }
      },
      "candidate_diff": {
        "Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs||Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs": [
          "File: Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs -> Stack/Opc.Ua.Core/Security/Certificates/CertificateValidator.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         public CertificateValidator()",
          "34:         {",
          "35:             m_validatedCertificates = new Dictionary<string, X509Certificate2>();",
          "36:             m_autoAcceptUntrustedCertificates = false;",
          "37:             m_rejectSHA1SignedCertificates = CertificateFactory.DefaultHashSize >= 256;",
          "38:             m_rejectUnknownRevocationStatus = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:             m_protectFlags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         {",
          "110:             lock (m_lock)",
          "111:             {",
          "114:                 m_trustedCertificateStore = null;",
          "115:                 m_trustedCertificateList = null;",
          "",
          "[Removed Lines]",
          "112:                 m_validatedCertificates.Clear();",
          "",
          "[Added Lines]",
          "113:                 ResetValidatedCertificates();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:                     configuration.TrustedIssuerCertificates,",
          "174:                     configuration.TrustedPeerCertificates,",
          "175:                     configuration.RejectedCertificateStore);",
          "180:             }",
          "182:             if (configuration.ApplicationCertificate != null)",
          "",
          "[Removed Lines]",
          "176:                 m_autoAcceptUntrustedCertificates = configuration.AutoAcceptUntrustedCertificates;",
          "177:                 m_rejectSHA1SignedCertificates = configuration.RejectSHA1SignedCertificates;",
          "178:                 m_rejectUnknownRevocationStatus = configuration.RejectUnknownRevocationStatus;",
          "179:                 m_minimumCertificateKeySize = configuration.MinimumCertificateKeySize;",
          "",
          "[Added Lines]",
          "177:                 if ((m_protectFlags & ProtectFlags.AutoAcceptUntrustedCertificates) == 0)",
          "178:                 {",
          "179:                     m_autoAcceptUntrustedCertificates = configuration.AutoAcceptUntrustedCertificates;",
          "180:                 }",
          "181:                 if ((m_protectFlags & ProtectFlags.RejectSHA1SignedCertificates) == 0)",
          "182:                 {",
          "183:                     m_rejectSHA1SignedCertificates = configuration.RejectSHA1SignedCertificates;",
          "184:                 }",
          "185:                 if ((m_protectFlags & ProtectFlags.RejectUnknownRevocationStatus) == 0)",
          "186:                 {",
          "187:                     m_rejectUnknownRevocationStatus = configuration.RejectUnknownRevocationStatus;",
          "188:                 }",
          "189:                 if ((m_protectFlags & ProtectFlags.MinimumCertificateKeySize) == 0)",
          "190:                 {",
          "191:                     m_minimumCertificateKeySize = configuration.MinimumCertificateKeySize;",
          "192:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:             }",
          "210:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:         public void ResetValidatedCertificates()",
          "229:         {",
          "230:             lock (m_lock)",
          "231:             {",
          "233:                 foreach (var cert in m_validatedCertificates.Values)",
          "234:                 {",
          "235:                     Utils.SilentDispose(cert);",
          "236:                 }",
          "237:                 m_validatedCertificates.Clear();",
          "238:             }",
          "239:         }",
          "244:         public bool AutoAcceptUntrustedCertificates",
          "245:         {",
          "246:             get { return m_autoAcceptUntrustedCertificates; }",
          "247:             set",
          "248:             {",
          "249:                 lock (m_lock)",
          "250:                 {",
          "251:                     m_protectFlags |= ProtectFlags.AutoAcceptUntrustedCertificates;",
          "252:                     if (m_autoAcceptUntrustedCertificates != value)",
          "253:                     {",
          "254:                         m_autoAcceptUntrustedCertificates = value;",
          "255:                         ResetValidatedCertificates();",
          "256:                     }",
          "257:                 }",
          "258:             }",
          "259:         }",
          "264:         public bool RejectSHA1SignedCertificates",
          "265:         {",
          "266:             get { return m_rejectSHA1SignedCertificates; }",
          "267:             set",
          "268:             {",
          "269:                 lock (m_lock)",
          "270:                 {",
          "271:                     m_protectFlags |= ProtectFlags.RejectSHA1SignedCertificates;",
          "272:                     if (m_rejectSHA1SignedCertificates != value)",
          "273:                     {",
          "274:                         m_rejectSHA1SignedCertificates = value;",
          "275:                         ResetValidatedCertificates();",
          "276:                     }",
          "277:                 }",
          "278:             }",
          "279:         }",
          "284:         public bool RejectUnknownRevocationStatus",
          "285:         {",
          "286:             get { return m_rejectUnknownRevocationStatus; }",
          "287:             set",
          "288:             {",
          "289:                 lock (m_lock)",
          "290:                 {",
          "291:                     m_protectFlags |= ProtectFlags.RejectUnknownRevocationStatus;",
          "292:                     if (m_rejectUnknownRevocationStatus != value)",
          "293:                     {",
          "294:                         m_rejectUnknownRevocationStatus = value;",
          "295:                         ResetValidatedCertificates();",
          "296:                     }",
          "297:                 }",
          "298:             }",
          "299:         }",
          "304:         public ushort MinimumCertificateKeySize",
          "305:         {",
          "306:             get { return m_minimumCertificateKeySize; }",
          "307:             set",
          "308:             {",
          "309:                 lock (m_lock)",
          "310:                 {",
          "311:                     m_protectFlags |= ProtectFlags.MinimumCertificateKeySize;",
          "312:                     if (m_minimumCertificateKeySize != value)",
          "313:                     {",
          "314:                         m_minimumCertificateKeySize = value;",
          "315:                         ResetValidatedCertificates();",
          "316:                     }",
          "317:                 }",
          "318:             }",
          "319:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284:                 ServiceResult serviceResult = se.Result;",
          "285:                 lock (m_callbackLock)",
          "286:                 {",
          "288:                     {",
          "290:                         {",
          "291:                             CertificateValidationEventArgs args = new CertificateValidationEventArgs(serviceResult, certificate);",
          "292:                             m_CertificateValidation(this, args);",
          "",
          "[Removed Lines]",
          "287:                     if (m_CertificateValidation != null)",
          "289:                         do",
          "",
          "[Added Lines]",
          "395:                     do",
          "397:                         if (m_CertificateValidation != null)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "297:                                 break;",
          "298:                             }",
          "299:                             accept = args.Accept;",
          "311:                 }",
          "",
          "[Removed Lines]",
          "300:                             if (accept)",
          "301:                             {",
          "302:                                 serviceResult = serviceResult.InnerResult;",
          "303:                             }",
          "304:                             else",
          "305:                             {",
          "307:                                 se = new ServiceResultException(serviceResult);",
          "308:                             }",
          "309:                         } while (accept && serviceResult != null);",
          "310:                     }",
          "",
          "[Added Lines]",
          "408:                         }",
          "409:                         else if (m_autoAcceptUntrustedCertificates &&",
          "410:                             serviceResult.StatusCode == StatusCodes.BadCertificateUntrusted)",
          "411:                         {",
          "412:                             accept = true;",
          "413:                             Utils.Trace(Utils.TraceMasks.Security, \"Automatically accepted certificate: {0}\", certificate.Subject);",
          "414:                         }",
          "416:                         if (accept)",
          "417:                         {",
          "418:                             serviceResult = serviceResult.InnerResult;",
          "419:                         }",
          "420:                         else",
          "421:                         {",
          "423:                             se = new ServiceResultException(serviceResult);",
          "424:                         }",
          "425:                     } while (accept && serviceResult != null);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "315:                 {",
          "317:                     Utils.Trace(Utils.TraceMasks.Error, \"Certificate '{0}' rejected. Reason={1}\",",
          "319:                     SaveCertificate(certificate);",
          "321:                     throw new ServiceResultException(se, StatusCodes.BadCertificateInvalid);",
          "",
          "[Removed Lines]",
          "318:                         certificate.Subject, serviceResult != null ? serviceResult.ToString() : \"Unknown Error\" );",
          "",
          "[Added Lines]",
          "433:                         certificate.Subject, serviceResult != null ? serviceResult.ToString() : \"Unknown Error\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "783:                 }",
          "784:             }",
          "787:             {",
          "798:                 {",
          "805:                 }",
          "806:             }",
          "",
          "[Removed Lines]",
          "786:             if (!m_autoAcceptUntrustedCertificates)",
          "789:                 if (issuedByCA && !isIssuerTrusted && trustedCertificate == null)",
          "790:                 {",
          "791:                     var message = CertificateMessage(\"Certificate Issuer is not trusted.\", certificate);",
          "792:                     sresult = new ServiceResult(StatusCodes.BadCertificateUntrusted,",
          "793:                         null, null, message, null, sresult);",
          "794:                 }",
          "797:                 if (trustedCertificate == null && !isIssuerTrusted)",
          "799:                     if (m_applicationCertificate == null || !Utils.IsEqual(m_applicationCertificate.RawData, certificate.RawData))",
          "800:                     {",
          "801:                         var message = CertificateMessage(\"Certificate is not trusted.\", certificate);",
          "802:                         sresult = new ServiceResult(StatusCodes.BadCertificateUntrusted,",
          "803:                         null, null, message, null, sresult);",
          "804:                     }",
          "",
          "[Added Lines]",
          "902:             if (issuedByCA && !isIssuerTrusted && trustedCertificate == null)",
          "904:                 var message = CertificateMessage(\"Certificate Issuer is not trusted.\", certificate);",
          "905:                 sresult = new ServiceResult(StatusCodes.BadCertificateUntrusted,",
          "906:                     null, null, message, null, sresult);",
          "907:             }",
          "910:             if (trustedCertificate == null && !isIssuerTrusted)",
          "911:             {",
          "912:                 if (m_applicationCertificate == null || !Utils.IsEqual(m_applicationCertificate.RawData, certificate.RawData))",
          "914:                     var message = CertificateMessage(\"Certificate is not trusted.\", certificate);",
          "915:                     sresult = new ServiceResult(StatusCodes.BadCertificateUntrusted,",
          "916:                     null, null, message, null, sresult);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1139:         }",
          "1140:         #endregion",
          "1142:         #region Private Fields",
          "1143:         private object m_lock = new object();",
          "1144:         private object m_callbackLock = new object();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254:         #region Private Enum",
          "1259:         [Flags]",
          "1260:         private enum ProtectFlags",
          "1261:         {",
          "1262:             AutoAcceptUntrustedCertificates = 1,",
          "1263:             RejectSHA1SignedCertificates = 2,",
          "1264:             RejectUnknownRevocationStatus = 4,",
          "1265:             MinimumCertificateKeySize = 8",
          "1266:         };",
          "1267:         #endregion",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1151:         private event CertificateValidationEventHandler m_CertificateValidation;",
          "1152:         private event CertificateUpdateEventHandler m_CertificateUpdate;",
          "1153:         private X509Certificate2 m_applicationCertificate;",
          "1154:         private bool m_autoAcceptUntrustedCertificates;",
          "1155:         private bool m_rejectSHA1SignedCertificates;",
          "1156:         private bool m_rejectUnknownRevocationStatus;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1281:         private ProtectFlags m_protectFlags;",
          "",
          "---------------"
        ],
        "Stack/Opc.Ua.Core/Types/Utils/Utils.cs||Stack/Opc.Ua.Core/Types/Utils/Utils.cs": [
          "File: Stack/Opc.Ua.Core/Types/Utils/Utils.cs -> Stack/Opc.Ua.Core/Types/Utils/Utils.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:                             writer.WriteLine(output);",
          "340:                             writer.Flush();",
          "342:                         }",
          "343:                     }",
          "344:                     catch (Exception e)",
          "",
          "[Removed Lines]",
          "341:                             writer.Dispose();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "924:         #endregion",
          "926:         #region String, Object and Data Convienence Functions",
          "",
          "[Removed Lines]",
          "927:         private const int MAX_MESSAGE_LENGTH = 1024;",
          "928:         private const uint FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200;",
          "929:         private const uint FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "937:         public static void SilentDispose(object objectToDispose)",
          "938:         {",
          "939:             IDisposable disposable = objectToDispose as IDisposable;",
          "942:             {",
          "947: #if DEBUG",
          "952: #else",
          "956: #endif",
          "958:         }",
          "",
          "[Removed Lines]",
          "941:             if (disposable != null)",
          "943:                 try",
          "944:                 {",
          "945:                     disposable.Dispose();",
          "946:                 }",
          "948:                 catch (Exception e)",
          "949:                 {",
          "950:                     Utils.Trace(e, \"Error disposing object: {0}\", disposable.GetType().Name);",
          "951:                 }",
          "953:                 catch (Exception)",
          "954:                 {",
          "955:                 }",
          "957:             }",
          "",
          "[Added Lines]",
          "935:             SilentDispose(disposable);",
          "936:         }",
          "944:         public static void SilentDispose(IDisposable disposable)",
          "945:         {",
          "946:             try",
          "948:                 disposable?.Dispose();",
          "949:             }",
          "951:             catch (Exception e)",
          "952:             {",
          "953:                 Utils.Trace(e, \"Error disposing object: {0}\", disposable.GetType().Name);",
          "954:             }",
          "956:             catch (Exception) {;}",
          "",
          "---------------"
        ],
        "Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs||Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs": [
          "File: Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs -> Tests/Opc.Ua.Core.Tests/Security/Certificates/CertificateValidatorTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "748:                 var pemDataBlob = PEMWriter.ExportCertificateAsPEM(appCert);",
          "749:                 var pemString = Encoding.UTF8.GetString(pemDataBlob);",
          "750:                 TestContext.Out.WriteLine(pemString);",
          "752:                 var exception = Assert.Throws<ArgumentException>(() => CertificateFactory.CreateCertificateWithPEMPrivateKey(new X509Certificate2(appCert), pemDataBlob));",
          "753: #endif",
          "754:             }",
          "755:         }",
          "",
          "[Removed Lines]",
          "751: #if NETCOREAPP3_1",
          "757: #if NETCOREAPP3_1",
          "",
          "[Added Lines]",
          "751: #if NETCOREAPP3_1_OR_GREATER",
          "757: #if NETCOREAPP3_1_OR_GREATER",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "948:         [Theory]",
          "950:         {",
          "952:             Assert.Ignore(\"SHA1 is unsupported on .NET Core 3.1\");",
          "953: #endif",
          "954:             var cert = CertificateFactory.CreateCertificate(null, null, \"CN=SHA1 signed\", null)",
          "",
          "[Removed Lines]",
          "949:         public async Task TestSHA1Rejected(bool trusted)",
          "951: #if NETCOREAPP3_1",
          "",
          "[Added Lines]",
          "949:         public async Task TestSHA1Rejected(bool trusted, bool rejectSHA1)",
          "951: #if NETCOREAPP3_1_OR_GREATER",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "960:                 await validator.TrustedStore.Add(cert).ConfigureAwait(false);",
          "961:             }",
          "962:             var certValidator = validator.Update();",
          "968:             {",
          "973:             }",
          "974:             else",
          "975:             {",
          "977:             }",
          "978:         }",
          "",
          "[Removed Lines]",
          "963:             var serviceResultException = Assert.Throws<ServiceResultException>(() => certValidator.Validate(cert));",
          "964:             Assert.AreEqual(StatusCodes.BadCertificatePolicyCheckFailed, serviceResultException.StatusCode, serviceResultException.Message);",
          "965:             Assert.NotNull(serviceResultException.InnerResult);",
          "966:             ServiceResult innerResult = serviceResultException.InnerResult.InnerResult;",
          "967:             if (!trusted)",
          "969:                 Assert.NotNull(innerResult);",
          "970:                 Assert.AreEqual(StatusCodes.BadCertificateUntrusted,",
          "971:                     innerResult.StatusCode.Code,",
          "972:                     innerResult.LocalizedText.Text);",
          "976:                 Assert.Null(innerResult);",
          "",
          "[Added Lines]",
          "963:             certValidator.RejectSHA1SignedCertificates = rejectSHA1;",
          "964:             if (rejectSHA1)",
          "966:                 var serviceResultException = Assert.Throws<ServiceResultException>(() => certValidator.Validate(cert));",
          "967:                 Assert.AreEqual(StatusCodes.BadCertificatePolicyCheckFailed, serviceResultException.StatusCode, serviceResultException.Message);",
          "968:                 Assert.NotNull(serviceResultException.InnerResult);",
          "969:                 ServiceResult innerResult = serviceResultException.InnerResult.InnerResult;",
          "970:                 if (!trusted)",
          "971:                 {",
          "972:                     Assert.NotNull(innerResult);",
          "973:                     Assert.AreEqual(StatusCodes.BadCertificateUntrusted,",
          "974:                         innerResult.StatusCode.Code,",
          "975:                         innerResult.LocalizedText.Text);",
          "976:                 }",
          "977:                 else",
          "978:                 {",
          "979:                     Assert.Null(innerResult);",
          "980:                 }",
          "984:                 if (trusted)",
          "985:                 {",
          "986:                     certValidator.Validate(cert);",
          "987:                 }",
          "988:                 else",
          "989:                 {",
          "990:                     var serviceResultException = Assert.Throws<ServiceResultException>(() => certValidator.Validate(cert));",
          "991:                     Assert.AreEqual(StatusCodes.BadCertificateUntrusted, serviceResultException.StatusCode, serviceResultException.Message);",
          "992:                     Assert.NotNull(serviceResultException.InnerResult);",
          "993:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1120:             certValidator.CertificateValidation -= approver.OnCertificateValidation;",
          "1121:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143:         [Theory]",
          "1144:         public async Task TestAutoAccept(bool trusted, bool autoAccept)",
          "1145:         {",
          "1146:             var cert = CertificateFactory.CreateCertificate(null, null, \"CN=Test\", null)",
          "1147:                 .CreateForRSA();",
          "1148:             var validator = TemporaryCertValidator.Create();",
          "1149:             if (trusted)",
          "1150:             {",
          "1151:                 await validator.TrustedStore.Add(cert).ConfigureAwait(false);",
          "1152:             }",
          "1153:             var certValidator = validator.Update();",
          "1154:             certValidator.AutoAcceptUntrustedCertificates = autoAccept;",
          "1155:             if (autoAccept || trusted)",
          "1156:             {",
          "1157:                 certValidator.Validate(cert);",
          "1158:             }",
          "1159:             else",
          "1160:             {",
          "1161:                 var serviceResultException = Assert.Throws<ServiceResultException>(() => certValidator.Validate(cert));",
          "1162:                 Assert.AreEqual(StatusCodes.BadCertificateUntrusted, serviceResultException.StatusCode, serviceResultException.Message);",
          "1163:                 Assert.NotNull(serviceResultException.InnerResult);",
          "1164:                 ServiceResult innerResult = serviceResultException.InnerResult.InnerResult;",
          "1165:                 Assert.Null(innerResult);",
          "1166:             }",
          "1169:             certValidator = validator.Update();",
          "1170:             certValidator.AutoAcceptUntrustedCertificates = autoAccept;",
          "1171:             CertValidationApprover approver;",
          "1172:             approver = new CertValidationApprover(new StatusCode[] {",
          "1173:                 StatusCodes.BadCertificateUntrusted",
          "1174:             });",
          "1175:             certValidator.CertificateValidation += approver.OnCertificateValidation;",
          "1176:             certValidator.Validate(cert);",
          "1177:             certValidator.CertificateValidation -= approver.OnCertificateValidation;",
          "1180:             certValidator = validator.Update();",
          "1181:             certValidator.AutoAcceptUntrustedCertificates = autoAccept;",
          "1182:             approver = new CertValidationApprover(new StatusCode[] { });",
          "1183:             certValidator.CertificateValidation += approver.OnCertificateValidation;",
          "1184:             if (trusted)",
          "1185:             {",
          "1186:                 certValidator.Validate(cert);",
          "1187:             }",
          "1188:             else",
          "1189:             {",
          "1190:                 ServiceResultException serviceResultException = Assert.Throws<ServiceResultException>(() => certValidator.Validate(cert));",
          "1191:                 Assert.AreEqual(StatusCodes.BadCertificateUntrusted, serviceResultException.StatusCode, serviceResultException.Message);",
          "1192:             }",
          "1193:             certValidator.CertificateValidation -= approver.OnCertificateValidation;",
          "1194:         }",
          "",
          "---------------"
        ],
        "Tests/Opc.Ua.Gds.Tests/PushTest.cs||Tests/Opc.Ua.Gds.Tests/PushTest.cs": [
          "File: Tests/Opc.Ua.Gds.Tests/PushTest.cs -> Tests/Opc.Ua.Gds.Tests/PushTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:         [Test, Order(510)]",
          "371:         public void UpdateCertificateCASigned()",
          "372:         {",
          "375:             if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))",
          "376:             {",
          "378:             }",
          "379: #endif",
          "380:             ConnectPushClient(true);",
          "",
          "[Removed Lines]",
          "373: #if NETCOREAPP3_1",
          "377:                 Assert.Ignore(\"Update CA signed certifcate fails on mac OS.\");",
          "",
          "[Added Lines]",
          "373: #if NETCOREAPP3_1_OR_GREATER",
          "377:                 Assert.Ignore(\"Update CA signed certificate fails on mac OS.\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}