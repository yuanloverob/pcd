{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
  "patch_info": {
    "commit_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "files": [
      "changelog/cve-2023-34049.security.md",
      "salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py"
    ],
    "message": "Fix CVE-2023-34049",
    "before_after_code_files": [
      "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
    ]
  },
  "patch_diff": {
    "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
      "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import logging",
      "12: import multiprocessing",
      "13: import os",
      "14: import queue",
      "15: import re",
      "16: import shlex",
      "17: import subprocess",
      "18: import sys",
      "19: import tarfile",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import pathlib",
      "18: import shutil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
      "468:                 self._key_deploy_run(host, target, False)",
      "469:             return ret",
      "471:             target = self.targets[host]",
      "472:             # permission denied, attempt to auto deploy ssh key",
      "473:             print(",
      "",
      "[Removed Lines]",
      "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
      "",
      "[Added Lines]",
      "472:         stderr = ret[host].get(\"stderr\", \"\")",
      "473:         # -failed to upload file- is detecting scp errors",
      "474:         # Errors to ignore when Permission denied is in the stderr. For example",
      "475:         # scp can get a permission denied on the target host, but they where",
      "476:         # able to accurate authenticate against the box",
      "477:         ignore_err = [\"failed to upload file\"]",
      "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
      "479:         if \"Permission denied\" in stderr and not check_err:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1007:         \"\"\"",
      "1008:         Run our pre_flight script before running any ssh commands",
      "1009:         \"\"\"",
      "1016:     def check_thin_dir(self):",
      "1017:         \"\"\"",
      "",
      "[Removed Lines]",
      "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
      "1012:         self.shell.send(self.ssh_pre_flight, script)",
      "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
      "",
      "[Added Lines]",
      "1019:         with tempfile.NamedTemporaryFile() as temp:",
      "1020:             # ensure we use copyfile to not copy the file attributes",
      "1021:             # we want to ensure we use the perms set by the secure",
      "1022:             # NamedTemporaryFile",
      "1023:             try:",
      "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
      "1025:             except OSError as err:",
      "1026:                 return (",
      "1027:                     \"\",",
      "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
      "1029:                     1,",
      "1030:                 )",
      "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
      "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
      "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
      "1034:             if retcode != 0:",
      "1035:                 # We could not copy the script to the target",
      "1036:                 log.error(",
      "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
      "1038:                 )",
      "1039:                 return stdout, stderr, retcode",
      "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
      "1042:             return self.execute_script(",
      "1043:                 target_script, script_args=self.ssh_pre_flight_args",
      "1044:             )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1388:             return self.shell.exec_cmd(cmd_str)",
      "1390:         # Write the shim to a temporary file in the default temp directory",
      "1394:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
      "1396:         # Copy shim to target system, under $HOME/.<randomized name>",
      "1400:         if self.winrm:",
      "1401:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
      "1404:         # Remove our shim file",
      "1405:         try:",
      "",
      "[Removed Lines]",
      "1391:         with tempfile.NamedTemporaryFile(",
      "1392:             mode=\"w+b\", prefix=\"shim_\", delete=False",
      "1393:         ) as shim_tmp_file:",
      "1397:         target_shim_file = \".{}.{}\".format(",
      "1398:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
      "1399:         )",
      "1402:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
      "",
      "[Added Lines]",
      "1421:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
      "1425:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
      "1429:         stdout, stderr, retcode = self.shell.send(",
      "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
      "1431:         )",
      "1432:         if retcode != 0:",
      "1433:             log.error(f\"Could not copy the shim script to target\")",
      "1434:             return stdout, stderr, retcode",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
      "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import re",
      "4: from textwrap import dedent",
      "6: import pytest",
      "",
      "[Removed Lines]",
      "1: import os",
      "3: import tempfile",
      "",
      "[Added Lines]",
      "1: import logging",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from salt.client import ssh",
      "17: from tests.support.mock import MagicMock, call, patch",
      "20: @pytest.fixture",
      "21: def opts(tmp_path):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: log = logging.getLogger(__name__)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:         assert ret == cmd_ret",
      "245: def test_execute_script(opts, target, tmp_path):",
      "246:     \"\"\"",
      "247:     test Single.execute_script()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "247:     \"\"\"",
      "248:     test Single.run_ssh_pre_flight function",
      "249:     \"\"\"",
      "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "251:     single = ssh.Single(",
      "252:         opts,",
      "253:         opts[\"argv\"],",
      "254:         \"localhost\",",
      "255:         mods={},",
      "256:         fsclient=None,",
      "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "258:         mine=False,",
      "260:     )",
      "262:     cmd_ret = (\"Success\", \"\", 0)",
      "263:     mock_flight = MagicMock(return_value=cmd_ret)",
      "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
      "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
      "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "267:     patch_exec_cmd = patch(",
      "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
      "269:     )",
      "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
      "273:         ret = single.run()",
      "274:         mock_cmd.assert_called()",
      "275:         mock_flight.assert_called()",
      "276:         assert ret == cmd_ret",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "273:         ] == mock_cmd.call_args_list",
      "277:     \"\"\"",
      "278:     test Single.shim_cmd()",
      "279:     \"\"\"",
      "",
      "[Removed Lines]",
      "276: def test_shim_cmd(opts, target):",
      "",
      "[Added Lines]",
      "310: def test_shim_cmd(opts, target, tmp_path):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
      "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "301:         assert ret == exp_ret",
      "302:         assert [",
      "305:         ] == mock_cmd.call_args_list",
      "309:     \"\"\"",
      "311:     \"\"\"",
      "313:     single = ssh.Single(",
      "314:         opts,",
      "315:         opts[\"argv\"],",
      "",
      "[Removed Lines]",
      "299:     with patch_cmd, patch_rand, patch_send:",
      "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
      "304:             call(\"rm '.35d96ccac2ff.py'\"),",
      "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "310:     test Single.run_ssh_pre_flight",
      "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "332:     tmp_file = tmp_path / \"tmp_file\"",
      "333:     mock_tmp = MagicMock()",
      "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "337:     with patch_cmd, patch_tmp, patch_send:",
      "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
      "342:             call(f\"rm '.{tmp_file.name}'\"),",
      "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
      "348:     test Single.shim_cmd() when copying the file fails",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:         mine=False,",
      "321:         winrm=False,",
      "322:         tty=True,",
      "324:     )",
      "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "332:     )",
      "335:         ret = single.run_ssh_pre_flight()",
      "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
      "",
      "[Removed Lines]",
      "326:     exp_ret = (\"Success\", \"\", 0)",
      "327:     mock_cmd = MagicMock(return_value=exp_ret)",
      "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
      "330:     exp_tmp = os.path.join(",
      "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
      "334:     with patch_cmd, patch_send:",
      "336:         assert ret == exp_ret",
      "337:         assert [",
      "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
      "339:             call(\"rm '{}'\".format(exp_tmp)),",
      "340:         ] == mock_cmd.call_args_list",
      "",
      "[Added Lines]",
      "363:     ret_cmd = (\"Success\", \"\", 0)",
      "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
      "366:     ret_send = (\"\", \"General error in file copy\", 1)",
      "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
      "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "370:     with patch_cmd, patch_rand, patch_send:",
      "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "372:         assert ret == ret_send",
      "373:         assert \"Could not copy the shim script to target\" in caplog.text",
      "374:         mock_cmd.assert_not_called()",
      "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
      "378:     \"\"\"",
      "379:     test Single.run_ssh_pre_flight when you",
      "380:     cannot connect to the target",
      "381:     \"\"\"",
      "382:     pre_flight = tmp_path / \"script.sh\"",
      "383:     pre_flight.write_text(\"\")",
      "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "385:     single = ssh.Single(",
      "386:         opts,",
      "387:         opts[\"argv\"],",
      "388:         \"localhost\",",
      "389:         mods={},",
      "390:         fsclient=None,",
      "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "392:         mine=False,",
      "393:         winrm=False,",
      "394:         tty=True,",
      "396:     )",
      "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "399:     tmp_file = tmp_path / \"tmp_file\"",
      "400:     mock_tmp = MagicMock()",
      "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "403:     ret_send = (",
      "404:         \"\",",
      "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
      "406:         255,",
      "407:     )",
      "408:     send_mock = MagicMock(return_value=ret_send)",
      "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "411:     with caplog.at_level(logging.TRACE):",
      "412:         with patch_send, patch_exec_cmd, patch_tmp:",
      "413:             ret = single.run_ssh_pre_flight()",
      "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
      "415:     assert (",
      "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
      "417:         in caplog.text",
      "418:     )",
      "419:     assert ret == ret_send",
      "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "421:     target_script = send_mock.call_args_list[0][0][1]",
      "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "423:     mock_exec_cmd.assert_not_called()",
      "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
      "427:     \"\"\"",
      "428:     test Single.run_ssh_pre_flight when you",
      "429:     cannot copy script to the target due to",
      "430:     a permission denied error",
      "431:     \"\"\"",
      "432:     pre_flight = tmp_path / \"script.sh\"",
      "433:     pre_flight.write_text(\"\")",
      "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "435:     single = ssh.Single(",
      "436:         opts,",
      "437:         opts[\"argv\"],",
      "438:         \"localhost\",",
      "439:         mods={},",
      "440:         fsclient=None,",
      "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "442:         mine=False,",
      "443:         winrm=False,",
      "444:         tty=True,",
      "446:     )",
      "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "449:     tmp_file = tmp_path / \"tmp_file\"",
      "450:     mock_tmp = MagicMock()",
      "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "453:     ret_send = (",
      "454:         \"\",",
      "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "456:         255,",
      "458:     send_mock = MagicMock(return_value=ret_send)",
      "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "461:     with patch_send, patch_exec_cmd, patch_tmp:",
      "463:     assert ret == ret_send",
      "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "465:     target_script = send_mock.call_args_list[0][0][1]",
      "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "467:     mock_exec_cmd.assert_not_called()",
      "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
      "471:     \"\"\"",
      "472:     test Single.run_ssh_pre_flight when you",
      "473:     can connect to the target",
      "474:     \"\"\"",
      "475:     pre_flight = tmp_path / \"script.sh\"",
      "476:     pre_flight.write_text(\"\")",
      "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "478:     single = ssh.Single(",
      "479:         opts,",
      "480:         opts[\"argv\"],",
      "481:         \"localhost\",",
      "482:         mods={},",
      "483:         fsclient=None,",
      "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "485:         mine=False,",
      "486:         winrm=False,",
      "487:         tty=True,",
      "489:     )",
      "490:     ret_exec_cmd = (\"\", \"\", 1)",
      "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "493:     tmp_file = tmp_path / \"tmp_file\"",
      "494:     mock_tmp = MagicMock()",
      "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "497:     ret_send = (",
      "498:         \"\",",
      "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
      "500:         0,",
      "501:     )",
      "502:     send_mock = MagicMock(return_value=ret_send)",
      "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "505:     with caplog.at_level(logging.TRACE):",
      "506:         with patch_send, patch_exec_cmd, patch_tmp:",
      "507:             ret = single.run_ssh_pre_flight()",
      "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
      "510:     assert ret == ret_exec_cmd",
      "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "512:     target_script = send_mock.call_args_list[0][0][1]",
      "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "514:     mock_exec_cmd.assert_called()",
      "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
      "518:     \"\"\"",
      "519:     test Single.run_ssh_pre_flight when cannot",
      "520:     copyfile with shutil",
      "521:     \"\"\"",
      "522:     pre_flight = tmp_path / \"script.sh\"",
      "523:     pre_flight.write_text(\"\")",
      "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "525:     single = ssh.Single(",
      "526:         opts,",
      "527:         opts[\"argv\"],",
      "528:         \"localhost\",",
      "529:         mods={},",
      "530:         fsclient=None,",
      "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "532:         mine=False,",
      "533:         winrm=False,",
      "534:         tty=True,",
      "536:     )",
      "537:     ret_exec_cmd = (\"\", \"\", 1)",
      "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "540:     tmp_file = tmp_path / \"tmp_file\"",
      "541:     mock_tmp = MagicMock()",
      "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "544:     send_mock = MagicMock()",
      "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
      "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
      "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
      "550:         ret = single.run_ssh_pre_flight()",
      "552:     assert ret == (",
      "553:         \"\",",
      "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
      "555:         1,",
      "556:     )",
      "557:     mock_exec_cmd.assert_not_called()",
      "558:     send_mock.assert_not_called()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "434:     and script successfully runs",
      "435:     \"\"\"",
      "436:     opts[\"ssh_run_pre_flight\"] = True",
      "439:     if test_opts[0] is not None:",
      "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
      "",
      "[Removed Lines]",
      "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "655:     pre_flight_script = tmp_path / \"script.sh\"",
      "656:     pre_flight_script.write_text(\"\")",
      "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
      "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
      "469: @pytest.mark.slow_test",
      "",
      "[Removed Lines]",
      "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
      "463:         ret = single.run()",
      "464:         assert mock_exec_cmd.mock_calls[0].args[",
      "465:             0",
      "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
      "",
      "[Added Lines]",
      "679:     patch_shell_send = patch(",
      "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
      "681:     )",
      "685:         single.run()",
      "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
      "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
      "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
      "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
      "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
      "345:     \"\"\"",
      "346:     test \"key_deploy\" function when",
      "347:     permission denied authentication error",
      "348:     when attempting to use scp to copy file",
      "349:     to target",
      "350:     \"\"\"",
      "351:     host = \"localhost\"",
      "352:     passwd = \"password\"",
      "353:     usr = \"ssh-usr\"",
      "354:     opts[\"ssh_user\"] = usr",
      "355:     opts[\"tgt\"] = host",
      "357:     ssh_ret = {",
      "358:         host: {",
      "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
      "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
      "361:             \"retcode\": 255,",
      "362:         }",
      "363:     }",
      "364:     key_run_ret = {",
      "365:         \"localhost\": {",
      "366:             \"jid\": \"20230922155652279959\",",
      "367:             \"return\": \"test\",",
      "368:             \"retcode\": 0,",
      "369:             \"id\": \"test\",",
      "370:             \"fun\": \"cmd.run\",",
      "371:             \"fun_args\": [\"echo test\"],",
      "372:         }",
      "373:     }",
      "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "375:     with patch_roster_file:",
      "376:         client = ssh.SSH(opts)",
      "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
      "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
      "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
      "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "381:     with patch_input, patch_getpass, patch_key_run:",
      "382:         ret = client.key_deploy(host, ssh_ret)",
      "383:     assert mock_key_run.call_args_list[0][0] == (",
      "384:         host,",
      "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
      "386:         True,",
      "387:     )",
      "388:     assert ret == key_run_ret",
      "389:     assert mock_key_run.call_count == 1",
      "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
      "393:     \"\"\"",
      "394:     test \"key_deploy\" function when permission denied",
      "395:     due to not having access to copy the file to the target",
      "396:     We do not want to deploy the key, because this is not",
      "397:     an authentication to the target error.",
      "398:     \"\"\"",
      "399:     host = \"localhost\"",
      "400:     passwd = \"password\"",
      "401:     usr = \"ssh-usr\"",
      "402:     opts[\"ssh_user\"] = usr",
      "403:     opts[\"tgt\"] = host",
      "405:     mock_key_run = MagicMock(return_value=False)",
      "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "408:     ssh_ret = {",
      "409:         \"localhost\": {",
      "410:             \"stdout\": \"\",",
      "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "412:             \"retcode\": 1,",
      "413:         }",
      "414:     }",
      "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "416:     with patch_roster_file:",
      "417:         client = ssh.SSH(opts)",
      "418:     ret = client.key_deploy(host, ssh_ret)",
      "419:     assert ret == ssh_ret",
      "420:     assert mock_key_run.call_count == 0",
      "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
      "424:     \"\"\"",
      "425:     test \"key_deploy\" function when no permission denied",
      "426:     is returned",
      "427:     \"\"\"",
      "428:     host = \"localhost\"",
      "429:     passwd = \"password\"",
      "430:     usr = \"ssh-usr\"",
      "431:     opts[\"ssh_user\"] = usr",
      "432:     opts[\"tgt\"] = host",
      "434:     mock_key_run = MagicMock(return_value=False)",
      "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "436:     ssh_ret = {",
      "437:         \"localhost\": {",
      "438:             \"jid\": \"20230922161937998385\",",
      "439:             \"return\": \"test\",",
      "440:             \"retcode\": 0,",
      "441:             \"id\": \"test\",",
      "442:             \"fun\": \"cmd.run\",",
      "443:             \"fun_args\": [\"echo test\"],",
      "444:         }",
      "445:     }",
      "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "447:     with patch_roster_file:",
      "448:         client = ssh.SSH(opts)",
      "449:     ret = client.key_deploy(host, ssh_ret)",
      "450:     assert ret == ssh_ret",
      "451:     assert mock_key_run.call_count == 0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5991f14a8c9aa1e6b63e20a32f344aa8803f90e4",
      "candidate_info": {
        "commit_hash": "5991f14a8c9aa1e6b63e20a32f344aa8803f90e4",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/5991f14a8c9aa1e6b63e20a32f344aa8803f90e4",
        "files": [
          "changelog/66210.added.md",
          "salt/client/ssh/__init__.py",
          "salt/client/ssh/client.py",
          "tests/pytests/unit/client/ssh/test_single.py"
        ],
        "message": "Allow ssh pre connection hook",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/client/ssh/client.py||salt/client/ssh/client.py",
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008:         self.fsclient = fsclient",
          "1009:         self.context = {\"master_opts\": self.opts, \"fileclient\": self.fsclient}",
          "1011:         self.ssh_pre_flight = kwargs.get(\"ssh_pre_flight\", None)",
          "1012:         self.ssh_pre_flight_args = kwargs.get(\"ssh_pre_flight_args\", None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:         self.ssh_pre_hook = kwargs.get(\"ssh_pre_hook\", None)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1093:             return arg",
          "1094:         return \"\".join([\"\\\\\" + char if re.match(r\"\\W\", char) else char for char in arg])",
          "1096:     def run_ssh_pre_flight(self):",
          "1097:         \"\"\"",
          "1098:         Run our pre_flight script before running any ssh commands",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1097:     def run_ssh_pre_hook(self):",
          "1098:         \"\"\"",
          "1099:         Run a pre_hook script on the host machine before running any ssh commands",
          "1100:         \"\"\"",
          "1101:         return self.shell.exec_cmd(self.ssh_pre_hook)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1168:         stdout = stderr = \"\"",
          "1169:         retcode = salt.defaults.exitcodes.EX_OK",
          "1171:         if self.ssh_pre_flight:",
          "1172:             if not self.opts.get(\"ssh_run_pre_flight\", False) and self.check_thin_dir():",
          "1173:                 log.info(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178:         if self.ssh_pre_hook:",
          "1179:             stdout, stderr, retcode = self.run_ssh_pre_hook()",
          "1180:             if retcode != salt.defaults.exitcodes.EX_OK:",
          "1181:                 log.error(\"Error running ssh_pre_hook script %s\", self.ssh_pre_hook)",
          "1182:                 return stdout, stderr, retcode",
          "1183:             log.info(\"Successfully ran the ssh_pre_hook script: %s\", self.ssh_pre_hook)",
          "",
          "---------------"
        ],
        "salt/client/ssh/client.py||salt/client/ssh/client.py": [
          "File: salt/client/ssh/client.py -> salt/client/ssh/client.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:             (\"ssh_scan_timeout\", int),",
          "66:             (\"ssh_timeout\", int),",
          "67:             (\"ssh_log_file\", str),",
          "68:             (\"raw_shell\", bool),",
          "69:             (\"refresh_cache\", bool),",
          "70:             (\"roster\", str),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:             (\"ssh_pre_hook\", str),",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:     )",
          "836:     assert expected in cmd",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839: def test_run_ssh_pre_hook_success(opts, target, tmp_path):",
          "840:     \"\"\"",
          "841:     Test run_ssh_pre_hook when ssh_pre_hook is successful.",
          "842:     \"\"\"",
          "843:     target[\"ssh_pre_hook\"] = \"echo 'Pre-hook success'\"",
          "844:     single_instance = ssh.Single(opts, opts[\"argv\"], \"localhost\", **target)",
          "845:     mock_exec_cmd = MagicMock(return_value=(\"Output\", \"No errors\", 0))",
          "846:     with patch.object(single_instance.shell, \"exec_cmd\", mock_exec_cmd):",
          "847:         result = single_instance.run_ssh_pre_hook()",
          "848:         assert result == (\"Output\", \"No errors\", 0)",
          "851: def test_run_ssh_pre_hook_failure(opts, target):",
          "852:     \"\"\"",
          "853:     Test run_ssh_pre_hook when ssh_pre_hook fails.",
          "854:     \"\"\"",
          "855:     target[\"ssh_pre_hook\"] = \"echo 'Pre-hook failure'\"",
          "856:     single_instance = ssh.Single(opts, opts[\"argv\"], \"localhost\", **target)",
          "857:     mock_exec_cmd = MagicMock(return_value=(\"Error output\", \"Failed to execute\", 1))",
          "858:     with patch.object(single_instance.shell, \"exec_cmd\", mock_exec_cmd):",
          "859:         result = single_instance.run_ssh_pre_hook()",
          "860:         assert result == (\"Error output\", \"Failed to execute\", 1)",
          "863: def test_run_integration_with_pre_hook_success(opts, target):",
          "864:     \"\"\"",
          "865:     Test the run method integrates run_ssh_pre_hook and proceeds on success.",
          "866:     \"\"\"",
          "867:     target[\"ssh_pre_hook\"] = \"echo 'Pre-hook success'\"",
          "868:     target[\"ssh_pre_flight\"] = None",
          "869:     single_instance = ssh.Single(opts, opts[\"argv\"], \"localhost\", **target)",
          "870:     mock_pre_hook = MagicMock(return_value=(\"\", \"\", 0))",
          "871:     mock_cmd_block = MagicMock(return_value=(\"\", \"\", 0))",
          "872:     with patch.object(single_instance, \"run_ssh_pre_hook\", mock_pre_hook), patch.object(",
          "873:         single_instance, \"cmd_block\", mock_cmd_block",
          "874:     ):",
          "875:         stdout, stderr, retcode = single_instance.run()",
          "876:         assert retcode == 0",
          "877:         mock_pre_hook.assert_called_once()",
          "880: def test_run_integration_with_pre_hook_failure(opts, target):",
          "881:     \"\"\"",
          "882:     Test the run method handles pre_hook failure correctly and skips further steps.",
          "883:     \"\"\"",
          "884:     target[\"ssh_pre_hook\"] = \"echo 'Pre-hook failure'\"",
          "885:     target[\"ssh_pre_flight\"] = None",
          "886:     single_instance = ssh.Single(opts, opts[\"argv\"], \"localhost\", **target)",
          "887:     mock_pre_hook = MagicMock(return_value=(\"Error output\", \"Failed to execute\", 1))",
          "888:     with patch.object(single_instance, \"run_ssh_pre_hook\", mock_pre_hook):",
          "889:         stdout, stderr, retcode = single_instance.run()",
          "890:         assert retcode == 1",
          "891:         assert \"Failed to execute\" in stderr",
          "892:         mock_pre_hook.assert_called_once()",
          "895: def test_run_integration_with_no_pre_hook(opts, target):",
          "896:     \"\"\"",
          "897:     Test the run method succeeds with no ssh_pre_hook",
          "898:     \"\"\"",
          "899:     target[\"ssh_pre_hook\"] = None",
          "900:     target[\"ssh_pre_flight\"] = None",
          "901:     single_instance = ssh.Single(opts, opts[\"argv\"], \"localhost\", **target)",
          "902:     mock_cmd_block = MagicMock(return_value=(\"\", \"\", 0))",
          "903:     with patch.object(single_instance, \"cmd_block\", mock_cmd_block):",
          "904:         stdout, stderr, retcode = single_instance.run()",
          "905:         assert retcode == 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f70585e344be51fd774ceb7a5ee7b81c91822a4",
      "candidate_info": {
        "commit_hash": "9f70585e344be51fd774ceb7a5ee7b81c91822a4",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/9f70585e344be51fd774ceb7a5ee7b81c91822a4",
        "files": [
          "salt/client/ssh/__init__.py",
          "salt/client/ssh/wrapper/state.py",
          "tests/pytests/integration/ssh/test_deploy.py"
        ],
        "message": "run pre-commit upgrade code for Py3.8+",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/client/ssh/wrapper/state.py||salt/client/ssh/wrapper/state.py",
          "tests/pytests/integration/ssh/test_deploy.py||tests/pytests/integration/ssh/test_deploy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:         }",
          "305:         if self.opts.get(\"rand_thin_dir\"):",
          "306:             self.defaults[\"thin_dir\"] = os.path.join(",
          "308:             )",
          "309:             self.opts[\"ssh_wipe\"] = \"True\"",
          "310:         self.returners = salt.loader.returners(self.opts, {})",
          "",
          "[Removed Lines]",
          "307:                 \"/var/tmp\", \".{}\".format(uuid.uuid4().hex[:6])",
          "",
          "[Added Lines]",
          "307:                 \"/var/tmp\", f\".{uuid.uuid4().hex[:6]}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:             priv = self.opts.get(",
          "455:                 \"ssh_priv\", os.path.join(self.opts[\"pki_dir\"], \"ssh\", \"salt-ssh.rsa\")",
          "456:             )",
          "458:         with salt.utils.files.fopen(pub, \"r\") as fp_:",
          "461:     def key_deploy(self, host, ret):",
          "462:         \"\"\"",
          "",
          "[Removed Lines]",
          "457:         pub = \"{}.pub\".format(priv)",
          "459:             return \"{} rsa root@master\".format(fp_.read().split()[1])",
          "",
          "[Added Lines]",
          "457:         pub = f\"{priv}.pub\"",
          "459:             return f\"{fp_.read().split()[1]} rsa root@master\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:             )",
          "800:         if self.opts.get(\"verbose\"):",
          "802:             print(msg)",
          "803:             print(\"-\" * len(msg) + \"\\n\")",
          "804:             print(\"\")",
          "",
          "[Removed Lines]",
          "801:             msg = \"Executing job with jid {}\".format(jid)",
          "",
          "[Added Lines]",
          "801:             msg = f\"Executing job with jid {jid}\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1017:         \"\"\"",
          "1018:         check if the thindir exists on the remote machine",
          "1019:         \"\"\"",
          "1023:         if retcode != 0:",
          "1024:             return False",
          "1025:         return True",
          "",
          "[Removed Lines]",
          "1020:         stdout, stderr, retcode = self.shell.exec_cmd(",
          "1021:             \"test -d {}\".format(self.thin_dir)",
          "1022:         )",
          "",
          "[Added Lines]",
          "1020:         stdout, stderr, retcode = self.shell.exec_cmd(f\"test -d {self.thin_dir}\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1265:             else:",
          "1266:                 result = self.wfuncs[self.fun](*self.args, **self.kwargs)",
          "1267:         except TypeError as exc:",
          "1269:             log.error(result, exc_info_on_loglevel=logging.DEBUG)",
          "1270:             retcode = 1",
          "1271:         except Exception as exc:  # pylint: disable=broad-except",
          "",
          "[Removed Lines]",
          "1268:             result = \"TypeError encountered executing {}: {}\".format(self.fun, exc)",
          "",
          "[Added Lines]",
          "1266:             result = f\"TypeError encountered executing {self.fun}: {exc}\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1292:         \"\"\"",
          "1293:         if self.target.get(\"sudo\"):",
          "1294:             sudo = (",
          "1296:                 if self.target.get(\"passwd\")",
          "1297:                 else \"sudo\"",
          "1298:             )",
          "",
          "[Removed Lines]",
          "1295:                 \"sudo -p '{}'\".format(salt.client.ssh.shell.SUDO_PROMPT)",
          "",
          "[Added Lines]",
          "1293:                 f\"sudo -p '{salt.client.ssh.shell.SUDO_PROMPT}'\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1364:                 script_args = shlex.split(str(script_args))",
          "1365:             args = \" {}\".format(\" \".join([shlex.quote(str(el)) for el in script_args]))",
          "1366:         if extension == \"ps1\":",
          "1368:         else:",
          "1369:             if not self.winrm:",
          "1373:             else:",
          "1374:                 ret = saltwinshell.call_python(self, script)",
          "1376:         # Remove file from target system",
          "1377:         if not self.winrm:",
          "1379:         else:",
          "1382:         return ret",
          "",
          "[Removed Lines]",
          "1367:             ret = self.shell.exec_cmd('\"powershell {}\"'.format(script))",
          "1370:                 ret = self.shell.exec_cmd(",
          "1371:                     \"/bin/sh '{}{}'{}\".format(pre_dir, script, args)",
          "1372:                 )",
          "1378:             self.shell.exec_cmd(\"rm '{}{}'\".format(pre_dir, script))",
          "1380:             self.shell.exec_cmd(\"del {}\".format(script))",
          "",
          "[Added Lines]",
          "1365:             ret = self.shell.exec_cmd(f'\"powershell {script}\"')",
          "1368:                 ret = self.shell.exec_cmd(f\"/bin/sh '{pre_dir}{script}'{args}\")",
          "1374:             self.shell.exec_cmd(f\"rm '{pre_dir}{script}'\")",
          "1376:             self.shell.exec_cmd(f\"del {script}\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1465:                 while re.search(RSTR_RE, stderr):",
          "1466:                     stderr = re.split(RSTR_RE, stderr, 1)[1].strip()",
          "1467:             else:",
          "1470:         # FIXME: this discards output from ssh_shim if the shim succeeds.  It should",
          "1471:         # always save the shim output regardless of shim success or failure.",
          "",
          "[Removed Lines]",
          "1468:                 return \"ERROR: {}\".format(error), stderr, retcode",
          "",
          "[Added Lines]",
          "1464:                 return f\"ERROR: {error}\", stderr, retcode",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1525:                     # If RSTR is not seen in both stdout and stderr then there",
          "1526:                     # was a thin deployment problem.",
          "1527:                     return (",
          "1529:                         stderr,",
          "1530:                         retcode,",
          "1531:                     )",
          "",
          "[Removed Lines]",
          "1528:                         \"ERROR: Failure deploying ext_mods: {}\".format(stdout),",
          "",
          "[Added Lines]",
          "1524:                         f\"ERROR: Failure deploying ext_mods: {stdout}\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1693:             files = fsclient.file_list(env)",
          "1694:             for ref in sync_refs:",
          "1695:                 mods_data = {}",
          "1697:                 for fn_ in sorted(files):",
          "1698:                     if fn_.startswith(pref):",
          "1699:                         if fn_.endswith((\".py\", \".so\", \".pyx\")):",
          "",
          "[Removed Lines]",
          "1696:                 pref = \"_{}\".format(ref)",
          "",
          "[Added Lines]",
          "1692:                 pref = f\"_{ref}\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1715:         ver_base = salt.utils.stringutils.to_bytes(ver_base)",
          "1717:         ver = hashlib.sha1(ver_base).hexdigest()",
          "1721:         mods = {\"version\": ver, \"file\": ext_tar_path}",
          "1722:         if os.path.isfile(ext_tar_path):",
          "1723:             return mods",
          "",
          "[Removed Lines]",
          "1718:         ext_tar_path = os.path.join(",
          "1719:             fsclient.opts[\"cachedir\"], \"ext_mods.{}.tgz\".format(ver)",
          "1720:         )",
          "",
          "[Added Lines]",
          "1714:         ext_tar_path = os.path.join(fsclient.opts[\"cachedir\"], f\"ext_mods.{ver}.tgz\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1766:             for key in list(arg.keys()):",
          "1767:                 if key == \"__kwarg__\":",
          "1768:                     continue",
          "1770:         else:",
          "1771:             converted.append(arg)",
          "1772:     return converted",
          "",
          "[Removed Lines]",
          "1769:                 converted.append(\"{}={}\".format(key, arg[key]))",
          "",
          "[Added Lines]",
          "1763:                 converted.append(f\"{key}={arg[key]}\")",
          "",
          "---------------"
        ],
        "salt/client/ssh/wrapper/state.py||salt/client/ssh/wrapper/state.py": [
          "File: salt/client/ssh/wrapper/state.py -> salt/client/ssh/wrapper/state.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:         try:",
          "559:             if salt.utils.platform.is_windows():",
          "560:                 # Make sure cache file isn't read-only",
          "562:             with salt.utils.files.fopen(notify_path, \"w+b\") as fp_:",
          "563:                 salt.payload.dump(req, fp_)",
          "564:         except OSError:",
          "",
          "[Removed Lines]",
          "561:                 __salt__[\"cmd.run\"]('attrib -R \"{}\"'.format(notify_path))",
          "",
          "[Added Lines]",
          "561:                 __salt__[\"cmd.run\"](f'attrib -R \"{notify_path}\"')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:             try:",
          "623:                 if salt.utils.platform.is_windows():",
          "624:                     # Make sure cache file isn't read-only",
          "626:                 with salt.utils.files.fopen(notify_path, \"w+b\") as fp_:",
          "627:                     salt.payload.dump(req, fp_)",
          "628:             except OSError:",
          "",
          "[Removed Lines]",
          "625:                     __salt__[\"cmd.run\"]('attrib -R \"{}\"'.format(notify_path))",
          "",
          "[Added Lines]",
          "625:                     __salt__[\"cmd.run\"](f'attrib -R \"{notify_path}\"')",
          "",
          "---------------"
        ],
        "tests/pytests/integration/ssh/test_deploy.py||tests/pytests/integration/ssh/test_deploy.py": [
          "File: tests/pytests/integration/ssh/test_deploy.py -> tests/pytests/integration/ssh/test_deploy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         roster_data = salt.utils.yaml.safe_load(rfh)",
          "76:         roster_data[\"localhost\"].update(",
          "77:             {",
          "79:             }",
          "80:         )",
          "81:     with salt.utils.files.fopen(roster_file, \"w\") as wfh:",
          "82:         salt.utils.yaml.safe_dump(roster_data, wfh)",
          "87:     assert ret.returncode == 0",
          "88:     assert path in ret.data",
          "",
          "[Removed Lines]",
          "78:                 \"set_path\": \"$PATH:/usr/local/bin/:{}\".format(path),",
          "84:     ret = salt_ssh_cli.run(",
          "85:         \"--roster-file={}\".format(roster_file), \"environ.get\", \"PATH\"",
          "86:     )",
          "",
          "[Added Lines]",
          "78:                 \"set_path\": f\"$PATH:/usr/local/bin/:{path}\",",
          "84:     ret = salt_ssh_cli.run(f\"--roster-file={roster_file}\", \"environ.get\", \"PATH\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         roster_data[\"localhost\"].update({\"tty\": True})",
          "99:     with salt.utils.files.fopen(roster_file, \"w\") as wfh:",
          "100:         salt.utils.yaml.safe_dump(roster_data, wfh)",
          "102:     assert ret.returncode == 0",
          "103:     assert ret.data is True",
          "",
          "[Removed Lines]",
          "101:     ret = salt_ssh_cli.run(\"--roster-file={}\".format(roster_file), \"test.ping\")",
          "",
          "[Added Lines]",
          "99:     ret = salt_ssh_cli.run(f\"--roster-file={roster_file}\", \"test.ping\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b95855edf58ea0237d6425a9c0df20d09c10d513",
      "candidate_info": {
        "commit_hash": "b95855edf58ea0237d6425a9c0df20d09c10d513",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/b95855edf58ea0237d6425a9c0df20d09c10d513",
        "files": [
          "salt/client/ssh/__init__.py",
          "salt/utils/relenv.py"
        ],
        "message": "passing lint",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/utils/relenv.py||salt/utils/relenv.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: SSH_SH_SHIM_RELENV = \"\\n\".join(",
          "197:     [",
          "198:         s.strip()",
          "200: /bin/sh << 'EOF'",
          "201: set -e",
          "202: set -u",
          "",
          "[Removed Lines]",
          "199:         for s in '''",
          "",
          "[Added Lines]",
          "198:         for s in \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241: exec $SUDO \"$SALT_CALL_BIN\" --retcode-passthrough --local --metadata --out=json -lquiet -c \"$RELENV_DIR\" {ARGS}",
          "242: EOF",
          "244:     ]",
          "245: )",
          "",
          "[Removed Lines]",
          "243: '''.split(\"\\n\")",
          "",
          "[Added Lines]",
          "242: \"\"\".split(",
          "243:             \"\\n\"",
          "244:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1132:         if self.opts.get(\"relenv\"):",
          "1133:             kernel, os_arch = self.detect_os_arch()",
          "1135:         else:",
          "1136:             self.thin = thin if thin else salt.utils.thin.thin_path(opts[\"cachedir\"])",
          "",
          "[Removed Lines]",
          "1134:             self.thin = salt.utils.relenv.gen_relenv(opts[\"cachedir\"], kernel=kernel, os_arch=os_arch)",
          "",
          "[Added Lines]",
          "1135:             self.thin = salt.utils.relenv.gen_relenv(",
          "1136:                 opts[\"cachedir\"], kernel=kernel, os_arch=os_arch",
          "1137:             )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1186:                 kernel = \"windows\"",
          "1187:             else:",
          "1188:                 # Neither Unix nor Windows detection succeeded",
          "1191:         log.info(f'Detected kernel \"{kernel}\" and architecture \"{os_arch}\" on target')",
          "1193:         return kernel, os_arch",
          "1196:     def __arg_comps(self):",
          "1197:         \"\"\"",
          "1198:         Return the function name and the arg list",
          "",
          "[Removed Lines]",
          "1189:                 raise ValueError(f\"Failed to detect OS and architecture. Commands failed with output: {stdout}, {stderr}\")",
          "",
          "[Added Lines]",
          "1192:                 raise ValueError(",
          "1193:                     f\"Failed to detect OS and architecture. Commands failed with output: {stdout}, {stderr}\"",
          "1194:                 )",
          "",
          "---------------"
        ],
        "salt/utils/relenv.py||salt/utils/relenv.py": [
          "File: salt/utils/relenv.py -> salt/utils/relenv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import logging",
          "3: import re",
          "4: import requests",
          "5: import salt.utils.files",
          "6: import salt.utils.http",
          "7: import salt.utils.thin",
          "10: log = logging.getLogger(__name__)",
          "12: def gen_relenv(",
          "13:     cachedir,",
          "14:     kernel,",
          "",
          "[Removed Lines]",
          "1: import os",
          "8: import salt.utils.hashutils",
          "",
          "[Added Lines]",
          "2: import os",
          "8: import salt.utils.hashutils",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     latest_tarball = matches[-1]",
          "67:     return base_url + latest_tarball",
          "69: def download(cachedir, url, destination):",
          "70:     if not os.path.exists(destination):",
          "71:         log.info(f\"Downloading from {url} to {destination}\")",
          "72:         try:",
          "74:                 def stream_callback(chunk):",
          "75:                     dest_file.write(chunk)",
          "76:                 result = salt.utils.http.query(",
          "77:                     url=url,",
          "79:                     stream=True,",
          "80:                     streaming_callback=stream_callback,",
          "82:                 )",
          "83:                 if result.get(\"status\") != 200:",
          "84:                     log.error(f\"Failed to download file from {url}\")",
          "",
          "[Removed Lines]",
          "73:             with salt.utils.files.fopen(destination, 'wb+') as dest_file:",
          "78:                     method='GET',",
          "81:                     raise_error=True",
          "",
          "[Added Lines]",
          "78:             with salt.utils.files.fopen(destination, \"wb+\") as dest_file:",
          "85:                     method=\"GET\",",
          "88:                     raise_error=True,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2224a82dedfb88ad7cf7ea02986710bb630becc1",
      "candidate_info": {
        "commit_hash": "2224a82dedfb88ad7cf7ea02986710bb630becc1",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/2224a82dedfb88ad7cf7ea02986710bb630becc1",
        "files": [
          "salt/client/ssh/__init__.py",
          "salt/client/ssh/wrapper/__init__.py",
          "tests/pytests/unit/client/ssh/test_ssh.py"
        ],
        "message": "Update key deploy routine for new parsing workflow",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/client/ssh/wrapper/__init__.py||salt/client/ssh/wrapper/__init__.py",
          "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:         \"\"\"",
          "465:         Deploy the SSH key if the minions don't auth",
          "466:         \"\"\"",
          "467:         if not isinstance(ret[host], dict) or self.opts.get(\"ssh_key_deploy\"):",
          "468:             target = self.targets[host]",
          "469:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
          "470:                 self._key_deploy_run(host, target, False)",
          "480:             target = self.targets[host]",
          "481:             # permission denied, attempt to auto deploy ssh key",
          "482:             print(",
          "",
          "[Removed Lines]",
          "471:             return ret",
          "472:         stderr = ret[host].get(\"stderr\", \"\")",
          "473:         # -failed to upload file- is detecting scp errors",
          "474:         # Errors to ignore when Permission denied is in the stderr. For example",
          "475:         # scp can get a permission denied on the target host, but they where",
          "476:         # able to accurate authenticate against the box",
          "477:         ignore_err = [\"failed to upload file\"]",
          "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
          "479:         if \"Permission denied\" in stderr and not check_err:",
          "",
          "[Added Lines]",
          "467:         # `or` initially was `and`, but was changed to be able to \"deploy",
          "468:         # to multiple hosts\" in #22661. Why? On each command error, this checks",
          "469:         # if a key deploy can be attempted without it being requested.",
          "474:             return ret, None",
          "475:         if \"_error\" in ret[host] and ret[host][\"_error\"] == \"Permission denied\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:                 \"Password for {}@{}: \".format(target[\"user\"], host)",
          "491:             )",
          "492:             return self._key_deploy_run(host, target, True)",
          "495:     def _key_deploy_run(self, host, target, re_run=True):",
          "496:         \"\"\"",
          "",
          "[Removed Lines]",
          "493:         return ret",
          "",
          "[Added Lines]",
          "489:         return ret, None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:             )",
          "530:             stdout, stderr, retcode = single.cmd_block()",
          "531:             try:",
          "538:         if salt.defaults.exitcodes.EX_OK != retcode:",
          "542:     def handle_routine(self, que, opts, host, target, mine=False):",
          "543:         \"\"\"",
          "",
          "[Removed Lines]",
          "532:                 data = salt.utils.json.find_json(stdout)",
          "533:                 return {host: data.get(\"local\", data)}",
          "534:             except Exception:  # pylint: disable=broad-except",
          "535:                 if stderr:",
          "536:                     return {host: stderr}",
          "537:                 return {host: \"Bad Return\"}",
          "539:             return {host: stderr}",
          "540:         return {host: stdout}",
          "",
          "[Added Lines]",
          "528:                 retcode = int(retcode)",
          "529:             except (TypeError, ValueError):",
          "530:                 log.warning(f\"Got an invalid retcode for host '{host}': '{retcode}'\")",
          "531:                 retcode = 1",
          "532:             try:",
          "533:                 ret = (",
          "534:                     salt.client.ssh.wrapper.parse_ret(stdout, stderr, retcode),",
          "535:                     salt.defaults.exitcodes.EX_OK,",
          "536:                 )",
          "537:             except (",
          "538:                 salt.client.ssh.wrapper.SSHPermissionDeniedError,",
          "539:                 salt.client.ssh.wrapper.SSHCommandExecutionError,",
          "540:             ) as err:",
          "541:                 ret = err.to_ret()",
          "542:                 retcode = max(retcode, err.retcode, 1)",
          "543:             except salt.client.ssh.wrapper.SSHException as err:",
          "544:                 ret = err.to_ret()",
          "545:                 if not self.opts.get(\"raw_shell\"):",
          "546:                     # We only expect valid JSON output from Salt",
          "547:                     retcode = max(retcode, err.retcode, 1)",
          "548:                 else:",
          "549:                     ret.pop(\"_error\", None)",
          "550:             except Exception as err:  # pylint: disable=broad-except",
          "551:                 log.error(",
          "552:                     f\"Error while parsing the command output: {err}\",",
          "553:                     exc_info_on_loglevel=logging.DEBUG,",
          "554:                 )",
          "555:                 ret = {",
          "556:                     \"_error\": f\"Internal error while parsing the command output: {err}\",",
          "557:                     \"stdout\": stdout,",
          "558:                     \"stderr\": stderr,",
          "559:                     \"retcode\": retcode,",
          "560:                     \"data\": None,",
          "561:                 }",
          "562:                 retcode = max(retcode, 1)",
          "563:             return {host: ret}, retcode",
          "566:             return {host: stderr}, retcode",
          "567:         return {host: stdout}, retcode",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "559:         retcode = 0",
          "560:         try:",
          "561:             stdout, stderr, retcode = single.run()",
          "562:             ret[\"ret\"] = salt.client.ssh.wrapper.parse_ret(stdout, stderr, retcode)",
          "563:         except (",
          "564:             salt.client.ssh.wrapper.SSHPermissionDeniedError,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:             try:",
          "590:                 retcode = int(retcode)",
          "591:             except (TypeError, ValueError):",
          "592:                 log.warning(f\"Got an invalid retcode for host '{host}': '{retcode}'\")",
          "593:                 retcode = 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "831:             final_exit = max(final_exit, retcode)",
          "833:             self.cache_job(jid, host, ret[host], fun)",
          "836:             if isinstance(ret[host], dict) and (",
          "837:                 ret[host].get(\"stderr\") or \"\"",
          "",
          "[Removed Lines]",
          "834:             ret = self.key_deploy(host, ret)",
          "",
          "[Added Lines]",
          "866:             ret, deploy_retcode = self.key_deploy(host, ret)",
          "867:             if deploy_retcode is not None:",
          "868:                 retcode = deploy_retcode",
          "870:             final_exit = max(final_exit, retcode)",
          "",
          "---------------"
        ],
        "salt/client/ssh/wrapper/__init__.py||salt/client/ssh/wrapper/__init__.py": [
          "File: salt/client/ssh/wrapper/__init__.py -> salt/client/ssh/wrapper/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         log.warning(f\"Got an invalid retcode for host: '{retcode}'\")",
          "273:         retcode = 1",
          "278:     result = NOT_SET",
          "279:     error = None",
          "280:     data = None",
          "282:     try:",
          "285:             try:",
          "287:                 try:",
          "288:                     # Ensure a reported local retcode is kept (at least)",
          "297:                     result = result[\"return\"]",
          "301:         else:",
          "302:             error = SSHMalformedReturnError",
          "307:     if retcode:",
          "308:         error = SSHCommandExecutionError",
          "309:     if error is not None:",
          "",
          "[Removed Lines]",
          "275:     if retcode and stderr.count(\"Permission denied\"):",
          "276:         raise SSHPermissionDeniedError(stdout=stdout, stderr=stderr, retcode=retcode)",
          "283:         data = salt.utils.json.loads(stdout)",
          "284:         if len(data) < 2 and \"local\" in data:",
          "286:                 result = data[\"local\"]",
          "289:                     retcode = max(retcode, result[\"retcode\"])",
          "290:                 except (KeyError, TypeError):",
          "291:                     pass",
          "292:                 if not isinstance(data[\"local\"], dict):",
          "293:                     # When a command has failed, the return is dumped as-is",
          "294:                     # without declaring it as a result, usually a string or list.",
          "295:                     error = SSHCommandExecutionError",
          "296:                 elif result_only:",
          "298:             except KeyError:",
          "299:                 error = SSHMalformedReturnError",
          "300:                 result = NOT_SET",
          "304:     except ValueError:",
          "305:         # No valid JSON output was found",
          "306:         error = SSHReturnDecodeError",
          "",
          "[Added Lines]",
          "275:     if \"Permission denied\" in stderr:",
          "276:         # -failed to upload file- is detecting scp errors",
          "277:         # Errors to ignore when Permission denied is in the stderr. For example",
          "278:         # scp can get a permission denied on the target host, but they where",
          "279:         # able to accurate authenticate against the box",
          "280:         ignore_err = [\"failed to upload file\"]",
          "281:         check_err = [x for x in ignore_err if stderr.count(x)]",
          "282:         if not check_err:",
          "283:             raise SSHPermissionDeniedError(",
          "284:                 stdout=stdout, stderr=stderr, retcode=retcode",
          "285:             )",
          "292:         data = salt.utils.json.find_json(stdout)",
          "293:     except ValueError:",
          "294:         # No valid JSON output was found",
          "295:         error = SSHReturnDecodeError",
          "296:     else:",
          "297:         if isinstance(data, dict) and len(data) < 2 and \"local\" in data:",
          "298:             result = data[\"local\"]",
          "300:                 remote_retcode = result[\"retcode\"]",
          "301:             except (KeyError, TypeError):",
          "302:                 pass",
          "303:             else:",
          "306:                     retcode = max(retcode, remote_retcode)",
          "307:                 except (TypeError, ValueError):",
          "308:                     log.warning(f\"Host reported an invalid retcode: '{remote_retcode}'\")",
          "309:                     retcode = max(retcode, 1)",
          "311:             if not isinstance(result, dict):",
          "312:                 # When a command has failed, the return is dumped as-is",
          "313:                 # without declaring it as a result, usually a string or list.",
          "314:                 error = SSHCommandExecutionError",
          "315:             elif result_only:",
          "316:                 try:",
          "318:                 except KeyError:",
          "319:                     error = SSHMalformedReturnError",
          "320:                     result = NOT_SET",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
          "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:     ssh_ret = {",
          "358:         host: {",
          "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
          "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
          "361:             \"retcode\": 255,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:             \"_error\": \"Permission denied\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:             \"fun\": \"cmd.run\",",
          "371:             \"fun_args\": [\"echo test\"],",
          "372:         }",
          "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "375:     with patch_roster_file:",
          "376:         client = ssh.SSH(opts)",
          "",
          "[Removed Lines]",
          "373:     }",
          "",
          "[Added Lines]",
          "374:     }, 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "416:     with patch_roster_file:",
          "417:         client = ssh.SSH(opts)",
          "419:     assert ret == ssh_ret",
          "420:     assert mock_key_run.call_count == 0",
          "",
          "[Removed Lines]",
          "418:     ret = client.key_deploy(host, ssh_ret)",
          "",
          "[Added Lines]",
          "419:     ret, retcode = client.key_deploy(host, ssh_ret)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "447:     with patch_roster_file:",
          "448:         client = ssh.SSH(opts)",
          "450:     assert ret == ssh_ret",
          "451:     assert mock_key_run.call_count == 0",
          "",
          "[Removed Lines]",
          "449:     ret = client.key_deploy(host, ssh_ret)",
          "",
          "[Added Lines]",
          "450:     ret, retcode = client.key_deploy(host, ssh_ret)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "472:     que.put.assert_called_once_with(",
          "473:         ({\"id\": \"localhost\", \"ret\": {\"retcode\": expected, \"return\": \"foo\"}}, 1)",
          "474:     )",
          "478: def test_handle_routine_single_run_invalid_retcode(opts, target, caplog):",
          "",
          "[Removed Lines]",
          "475:     assert f\"Host 'localhost' reported an invalid retcode: '{expected}'\" in caplog.text",
          "",
          "[Added Lines]",
          "476:     assert f\"Host reported an invalid retcode: '{expected}'\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496:         (",
          "497:             {",
          "498:                 \"id\": \"localhost\",",
          "504:             },",
          "505:             1,",
          "506:         )",
          "",
          "[Removed Lines]",
          "499:                 \"ret\": {",
          "500:                     \"stdout\": \"\",",
          "501:                     \"stderr\": \"Something went seriously wrong\",",
          "502:                     \"retcode\": 1,",
          "503:                 },",
          "",
          "[Added Lines]",
          "500:                 \"ret\": \"Something went seriously wrong\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9269d6d7a6b96f7c94ec0742ec1952f5959f09f6",
      "candidate_info": {
        "commit_hash": "9269d6d7a6b96f7c94ec0742ec1952f5959f09f6",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/9269d6d7a6b96f7c94ec0742ec1952f5959f09f6",
        "files": [
          "salt/client/ssh/__init__.py",
          "salt/client/ssh/shell.py",
          "tests/pytests/unit/client/ssh/test_shell.py"
        ],
        "message": "Don't `mkdir -p` on empty paths",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/client/ssh/shell.py||salt/client/ssh/shell.py",
          "tests/pytests/unit/client/ssh/test_shell.py||tests/pytests/unit/client/ssh/test_shell.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1517:         if self.winrm:",
          "1518:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
          "1519:         stdout, stderr, retcode = self.shell.send(",
          "1521:         )",
          "1522:         if retcode != 0:",
          "1523:             log.error(\"Could not copy the shim script to target\")",
          "",
          "[Removed Lines]",
          "1520:             shim_tmp_file.name, target_shim_file, makedirs=True",
          "",
          "[Added Lines]",
          "1520:             shim_tmp_file.name, target_shim_file, makedirs=self.winrm",
          "",
          "---------------"
        ],
        "salt/client/ssh/shell.py||salt/client/ssh/shell.py": [
          "File: salt/client/ssh/shell.py -> salt/client/ssh/shell.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         ssh_options=None,",
          "88:     ):",
          "89:         self.opts = opts",
          "91:         self.host = host.strip(\"[]\")",
          "92:         self.user = user",
          "93:         self.port = port",
          "",
          "[Removed Lines]",
          "90:         # ssh <ipv6>, but scp [<ipv6]:/path",
          "",
          "[Added Lines]",
          "90:         # ssh <ipv6>, but scp [<ipv6>]:/path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:         scp a file or files to a remote system",
          "340:         \"\"\"",
          "341:         if makedirs:",
          "347:         host = self.host",
          "348:         if \":\" in host:",
          "349:             host = f\"[{host}]\"",
          "",
          "[Removed Lines]",
          "342:             ret = self.exec_cmd(f\"mkdir -p {os.path.dirname(remote)}\")",
          "343:             if ret[2]:",
          "344:                 return ret",
          "346:         # scp needs [<ipv6}",
          "",
          "[Added Lines]",
          "342:             pardir = os.path.dirname(remote)",
          "343:             if not pardir:",
          "344:                 log.warning(",
          "345:                     f\"Makedirs called on relative filename: '{remote}'. Skipping.\"",
          "346:                 )",
          "347:             else:",
          "348:                 ret = self.exec_cmd(\"mkdir -p \" + shlex.quote(pardir))",
          "349:                 if ret[2]:",
          "350:                     return ret",
          "352:         # scp needs [<ipv6>]",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_shell.py||tests/pytests/unit/client/ssh/test_shell.py": [
          "File: tests/pytests/unit/client/ssh/test_shell.py -> tests/pytests/unit/client/ssh/test_shell.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import subprocess",
          "2: import types",
          "4: import pytest",
          "6: import salt.client.ssh.shell as shell",
          "10: @pytest.fixture",
          "",
          "[Removed Lines]",
          "7: from tests.support.mock import MagicMock, PropertyMock, patch",
          "",
          "[Added Lines]",
          "1: import logging",
          "8: from tests.support.mock import MagicMock, PropertyMock, call, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     assert retcode == 137",
          "109:     with patch(\"salt.client.ssh.shell.Shell.exec_cmd\", side_effect=exec_cmd):",
          "110:         shl = shell.Shell({}, \"localhost\")",
          "111:         stdout, stderr, retcode = shl.send(\"/tmp/file\", \"/tmp/file\", True)",
          "",
          "[Removed Lines]",
          "103: def test_ssh_shell_send_makedirs_failure_returns_immediately():",
          "104:     def exec_cmd(cmd):",
          "105:         if cmd.startswith(\"mkdir -p\"):",
          "106:             return \"\", \"Not a directory\", 1",
          "107:         return \"\", \"\", 0",
          "112:         assert retcode == 1",
          "113:         assert \"Not a directory\" in stderr",
          "",
          "[Added Lines]",
          "104: def exec_cmd(cmd):",
          "105:     if cmd.startswith(\"mkdir -p\"):",
          "106:         return \"\", \"Not a directory\", 1",
          "107:     return \"OK\", \"\", 0",
          "110: def test_ssh_shell_send_makedirs_failure_returns_immediately():",
          "114:     assert retcode == 1",
          "115:     assert \"Not a directory\" in stderr",
          "118: def test_ssh_shell_send_makedirs_on_relative_filename_skips_exec(caplog):",
          "119:     with patch(\"salt.client.ssh.shell.Shell.exec_cmd\", side_effect=exec_cmd) as cmd:",
          "120:         with patch(\"salt.client.ssh.shell.Shell._run_cmd\", return_value=(\"\", \"\", 0)):",
          "121:             shl = shell.Shell({}, \"localhost\")",
          "122:             with caplog.at_level(logging.WARNING):",
          "123:                 stdout, stderr, retcode = shl.send(\"/tmp/file\", \"targetfile\", True)",
          "124:     assert retcode == 0",
          "125:     assert \"Not a directory\" not in stderr",
          "126:     assert call(\"mkdir -p ''\") not in cmd.mock_calls",
          "127:     assert \"Makedirs called on relative filename\" in caplog.text",
          "",
          "---------------"
        ]
      }
    }
  ]
}