{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86bd6643fbeb0b6d0e1abb0b45d712cd12847eba",
      "candidate_info": {
        "commit_hash": "86bd6643fbeb0b6d0e1abb0b45d712cd12847eba",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/86bd6643fbeb0b6d0e1abb0b45d712cd12847eba",
        "files": [
          "command/agent/agent_endpoint_test.go"
        ],
        "message": "test: Use runtime CPUs for test not static number (#25459)\n\nbackport of commit b3f28f938706400167ef242ccd64ae36ea427374\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/agent/agent_endpoint_test.go||command/agent/agent_endpoint_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/agent_endpoint_test.go||command/agent/agent_endpoint_test.go": [
          "File: command/agent/agent_endpoint_test.go -> command/agent/agent_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1620:  ci.Parallel(t)",
          "1622:  configFn := func(c *Config) {",
          "1625:   c.Server.EnabledSchedulers = []string{\"_core\", \"batch\"}",
          "1626:   c.Client.Enabled = false",
          "1627:  }",
          "",
          "[Removed Lines]",
          "1623:   var numSchedulers = 4",
          "1624:   c.Server.NumSchedulers = &numSchedulers",
          "",
          "[Added Lines]",
          "1623:   c.Server.NumSchedulers = pointer.Of(runtime.NumCPU())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2afc9c20106d049d864f9ac58496e9325e6e3e4b",
      "candidate_info": {
        "commit_hash": "2afc9c20106d049d864f9ac58496e9325e6e3e4b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/2afc9c20106d049d864f9ac58496e9325e6e3e4b",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "deps: dependabot consolidation 20250317 (#25407) (#25412)\n\n* chore(deps): bump google.golang.org/grpc from 1.69.4 to 1.71.0\n* chore(deps): bump github.com/hashicorp/go-memdb from 1.3.4 to 1.3.5\n* chore(deps): bump github.com/prometheus/common from 0.62.0 to 0.63.0\n* chore(deps): bump github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  github.com/golang-jwt/jwt/v5 v5.2.1",
          "41:  github.com/golang/protobuf v1.5.4",
          "42:  github.com/golang/snappy v0.0.4",
          "44:  github.com/gorilla/handlers v1.5.2",
          "45:  github.com/gorilla/websocket v1.5.3",
          "46:  github.com/gosuri/uilive v0.0.4",
          "",
          "[Removed Lines]",
          "43:  github.com/google/go-cmp v0.6.0",
          "",
          "[Added Lines]",
          "43:  github.com/google/go-cmp v0.7.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  github.com/hashicorp/go-kms-wrapping/v2 v2.0.18",
          "65:  github.com/hashicorp/go-kms-wrapping/wrappers/awskms/v2 v2.0.10",
          "66:  github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.14",
          "68:  github.com/hashicorp/go-kms-wrapping/wrappers/transit/v2 v2.0.13",
          "70:  github.com/hashicorp/go-msgpack/v2 v2.1.3",
          "71:  github.com/hashicorp/go-multierror v1.1.1",
          "72:  github.com/hashicorp/go-netaddrs v0.1.0",
          "",
          "[Removed Lines]",
          "67:  github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.12",
          "69:  github.com/hashicorp/go-memdb v1.3.4",
          "",
          "[Added Lines]",
          "67:  github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.13",
          "69:  github.com/hashicorp/go-memdb v1.3.5",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:  github.com/opencontainers/runtime-spec v1.2.0",
          "118:  github.com/posener/complete v1.2.3",
          "119:  github.com/prometheus/client_golang v1.21.0",
          "121:  github.com/rs/cors v1.11.1",
          "122:  github.com/ryanuber/columnize v2.1.2+incompatible",
          "123:  github.com/ryanuber/go-glob v1.0.0",
          "",
          "[Removed Lines]",
          "120:  github.com/prometheus/common v0.62.0",
          "",
          "[Added Lines]",
          "120:  github.com/prometheus/common v0.63.0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:  golang.org/x/sync v0.12.0",
          "136:  golang.org/x/sys v0.31.0",
          "137:  golang.org/x/time v0.10.0",
          "140:  gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7",
          "141:  gopkg.in/tomb.v2 v2.0.0-20140626144623-14b3d72120e8",
          "142:  oss.indeed.com/go/libtime v1.6.0",
          "",
          "[Removed Lines]",
          "138:  google.golang.org/grpc v1.69.4",
          "139:  google.golang.org/protobuf v1.36.3",
          "",
          "[Added Lines]",
          "138:  google.golang.org/grpc v1.71.0",
          "139:  google.golang.org/protobuf v1.36.5",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "220:  github.com/docker/docker-credential-helpers v0.7.0 // indirect",
          "221:  github.com/docker/go-metrics v0.0.1 // indirect",
          "222:  github.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7 // indirect",
          "225:  github.com/felixge/httpsnoop v1.0.4 // indirect",
          "226:  github.com/fsnotify/fsnotify v1.6.0 // indirect",
          "227:  github.com/go-jose/go-jose/v4 v4.0.5 // indirect",
          "",
          "[Removed Lines]",
          "223:  github.com/envoyproxy/go-control-plane/envoy v1.32.3 // indirect",
          "224:  github.com/envoyproxy/protoc-gen-validate v1.1.0 // indirect",
          "",
          "[Added Lines]",
          "223:  github.com/envoyproxy/go-control-plane/envoy v1.32.4 // indirect",
          "224:  github.com/envoyproxy/protoc-gen-validate v1.2.1 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "915: github.com/envoyproxy/go-control-plane v0.11.1-0.20230524094728-9239064ad72f/go.mod h1:sfYdkwUW4BA3PbKjySwjJy+O4Pu0h62rlqCMHNk+K+Q=",
          "916: github.com/envoyproxy/go-control-plane v0.13.4 h1:zEqyPVyku6IvWCFwux4x9RxkLOMUL+1vC9xUFv5l2/M=",
          "917: github.com/envoyproxy/go-control-plane v0.13.4/go.mod h1:kDfuBlDVsSj2MjrLEtRWtHlsWIFcGyB2RMO44Dc5GZA=",
          "920: github.com/envoyproxy/go-control-plane/ratelimit v0.1.0 h1:/G9QYbddjL25KvtKTv3an9lx6VBE2cnb8wp1vEGNYGI=",
          "921: github.com/envoyproxy/go-control-plane/ratelimit v0.1.0/go.mod h1:Wk+tMFAFbCXaJPzVVHnPgRKdUdwW/KdbRt94AzgRee4=",
          "922: github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=",
          "923: github.com/envoyproxy/protoc-gen-validate v0.6.7/go.mod h1:dyJXwwfPK2VSqiB9Klm1J6romD608Ba7Hij42vrOBCo=",
          "924: github.com/envoyproxy/protoc-gen-validate v0.9.1/go.mod h1:OKNgG7TCp5pF4d6XftA0++PMirau2/yoOwVac3AbF2w=",
          "925: github.com/envoyproxy/protoc-gen-validate v0.10.1/go.mod h1:DRjgyB0I43LtJapqN6NiRwroiAU2PaFuvk/vjgh61ss=",
          "928: github.com/evanphx/json-patch v4.2.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=",
          "929: github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=",
          "930: github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=",
          "",
          "[Removed Lines]",
          "918: github.com/envoyproxy/go-control-plane/envoy v1.32.3 h1:hVEaommgvzTjTd4xCaFd+kEQ2iYBtGxP6luyLrx6uOk=",
          "919: github.com/envoyproxy/go-control-plane/envoy v1.32.3/go.mod h1:F6hWupPfh75TBXGKA++MCT/CZHFq5r9/uwt/kQYkZfE=",
          "926: github.com/envoyproxy/protoc-gen-validate v1.1.0 h1:tntQDh69XqOCOZsDz0lVJQez/2L6Uu2PdjCQwWCJ3bM=",
          "927: github.com/envoyproxy/protoc-gen-validate v1.1.0/go.mod h1:sXRDRVmzEbkM7CVcM06s9shE/m23dg3wzjl0UWqJ2q4=",
          "",
          "[Added Lines]",
          "918: github.com/envoyproxy/go-control-plane/envoy v1.32.4 h1:jb83lalDRZSpPWW2Z7Mck/8kXZ5CQAFYVjQcdVIr83A=",
          "919: github.com/envoyproxy/go-control-plane/envoy v1.32.4/go.mod h1:Gzjc5k8JcJswLjAx1Zm+wSYE20UrLtt7JZMWiWQXQEw=",
          "926: github.com/envoyproxy/protoc-gen-validate v1.2.1 h1:DEo3O99U8j4hBFwbJfrz9VtgcDfUKS7KJ7spH3d86P8=",
          "927: github.com/envoyproxy/protoc-gen-validate v1.2.1/go.mod h1:d/C80l/jxXLdfEIhX1W2TmLfsJ31lvEjwamM4DxlWXU=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1070: github.com/google/go-cmp v0.5.7/go.mod h1:n+brtR0CgQNWTVd5ZUFpTBC8YFBDLK/h/bpaJ8/DtOE=",
          "1071: github.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=",
          "1072: github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=",
          "1074: github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=",
          "1075: github.com/google/go-querystring v0.0.0-20170111101155-53e6ce116135 h1:zLTLjkaOFEFIOxY5BWLFLwh+cL8vOBW4XJ2aqLE/Tf0=",
          "1076: github.com/google/go-querystring v0.0.0-20170111101155-53e6ce116135/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=",
          "1077: github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=",
          "",
          "[Removed Lines]",
          "1073: github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=",
          "",
          "[Added Lines]",
          "1074: github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=",
          "1075: github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196: github.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=",
          "1197: github.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=",
          "1198: github.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=",
          "1200: github.com/hashicorp/go-immutable-radix v1.3.1 h1:DKHmCUm2hRBK510BaiZlwvpD40f8bJFeZnpfm2KLowc=",
          "1201: github.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=",
          "1202: github.com/hashicorp/go-immutable-radix/v2 v2.1.0 h1:CUW5RYIcysz+D3B+l1mDeXrQ7fUvGGCwJfdASSzbrfo=",
          "",
          "[Removed Lines]",
          "1199: github.com/hashicorp/go-immutable-radix v1.3.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1207: github.com/hashicorp/go-kms-wrapping/wrappers/awskms/v2 v2.0.10/go.mod h1:eX4b0InOUfJ3NjfNWlJruBDT3rHXxOVw+7qNFmtjNbo=",
          "1208: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.14 h1:oK4OQ5EPbx/66dAvitksV+OdrQ86SZEj3B6VSZrbdEY=",
          "1209: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.14/go.mod h1:fWxrv9YkAMqtsISde5mcutoMvuiH4kyg1AlDzzmqRh8=",
          "1212: github.com/hashicorp/go-kms-wrapping/wrappers/transit/v2 v2.0.13 h1:UuDeq3nr0e+H9CrZM3dvpDGkWFSJYTtuTqVekn2za2k=",
          "1213: github.com/hashicorp/go-kms-wrapping/wrappers/transit/v2 v2.0.13/go.mod h1:E2dYgXYNkvKe84PIxD9eJqqhFRA4guCTDweJR4i0gds=",
          "1216: github.com/hashicorp/go-metrics v0.5.4 h1:8mmPiIJkTPPEbAiV97IxdAGNdRdaWwVap1BU6elejKY=",
          "1217: github.com/hashicorp/go-metrics v0.5.4/go.mod h1:CG5yz4NZ/AI/aQt9Ucm/vdBnbh7fvmv4lxZ350i+QQI=",
          "1218: github.com/hashicorp/go-msgpack v0.5.5/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=",
          "",
          "[Removed Lines]",
          "1210: github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.12 h1:PCqWzT/Hii0KL07JsBZ3lJbv/wx02IAHYlhWQq8rxRY=",
          "1211: github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.12/go.mod h1:HSaOaX/lv3ShCdilUYbOTPnSvmoZ9xtQhgw+8hYcZkg=",
          "1214: github.com/hashicorp/go-memdb v1.3.4 h1:XSL3NR682X/cVk2IeV0d70N4DZ9ljI885xAEU8IoK3c=",
          "1215: github.com/hashicorp/go-memdb v1.3.4/go.mod h1:uBTr1oQbtuMgd1SSGoR8YV27eT3sBHbYiNm53bMpgSg=",
          "",
          "[Added Lines]",
          "1210: github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.13 h1:NGBZnF+yPRZ3gjFl69Y2m58/U0iyB2oH9HaznL9tekA=",
          "1211: github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.13/go.mod h1:4Xb+6d8VPeDcUNuh4toPqJlDpkajeJyIQeg36TtWhKw=",
          "1214: github.com/hashicorp/go-memdb v1.3.5 h1:b3taDMxCBCBVgyRrS1AZVHO14ubMYZB++QpNhBg+Nyo=",
          "1215: github.com/hashicorp/go-memdb v1.3.5/go.mod h1:8IVKKBkVe+fxFgdFOYxzQQNjz+sWCyHCdIC/+5+Vy1Y=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1554: github.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=",
          "1555: github.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=",
          "1556: github.com/prometheus/common v0.26.0/go.mod h1:M7rCNAaPfAosfx8veZJCuw84e35h3Cfd9VFqTh1DIvc=",
          "1559: github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=",
          "1560: github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=",
          "1561: github.com/prometheus/procfs v0.0.3/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=",
          "",
          "[Removed Lines]",
          "1557: github.com/prometheus/common v0.62.0 h1:xasJaQlnWAeyHdUBeGjXmutelfJHWMRr+Fg4QszZ2Io=",
          "1558: github.com/prometheus/common v0.62.0/go.mod h1:vyBcEuLSvWos9B1+CyL7JZ2up+uFzXhkqml0W5zIY1I=",
          "",
          "[Added Lines]",
          "1557: github.com/prometheus/common v0.63.0 h1:YR/EIY1o3mEFP/kZCD7iDMnLPlGyuU2Gb3HIcXnA98k=",
          "1558: github.com/prometheus/common v0.63.0/go.mod h1:VVFF/fBIoToEnWRVkYoXEkq3R3paCoxG9PXP74SnV18=",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2453: google.golang.org/grpc v1.53.0/go.mod h1:OnIrk0ipVdj4N5d9IUoFUx72/VlD7+jUsHwZgwSMQpw=",
          "2454: google.golang.org/grpc v1.54.0/go.mod h1:PUSEXI6iWghWaB6lXM4knEgpJNu2qUcKfDtNci3EC2g=",
          "2455: google.golang.org/grpc v1.56.3/go.mod h1:I9bI3vqKfayGqPUAwGdOSu7kt6oIJLixfffKrpXqQ9s=",
          "2458: google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=",
          "2459: google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=",
          "2460: google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=",
          "",
          "[Removed Lines]",
          "2456: google.golang.org/grpc v1.69.4 h1:MF5TftSMkd8GLw/m0KM6V8CMOCY6NZ1NQDPGFgbTt4A=",
          "2457: google.golang.org/grpc v1.69.4/go.mod h1:vyjdE6jLBI76dgpDojsFGNaHlxdjXN9ghpnd2o7JGZ4=",
          "",
          "[Added Lines]",
          "2456: google.golang.org/grpc v1.71.0 h1:kF77BGdPTQ4/JZWMlb9VpJ5pa25aqvVqogsxNHHdeBg=",
          "2457: google.golang.org/grpc v1.71.0/go.mod h1:H0GRtasmQOh9LkFoCPDu3ZrwUtD1YGE+b2vYBYd/8Ec=",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2474: google.golang.org/protobuf v1.29.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=",
          "2475: google.golang.org/protobuf v1.30.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=",
          "2476: google.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=",
          "2479: gopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=",
          "2480: gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=",
          "2481: gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=",
          "",
          "[Removed Lines]",
          "2477: google.golang.org/protobuf v1.36.3 h1:82DV7MYdb8anAVi3qge1wSnMDrnKK7ebr+I0hHRN1BU=",
          "2478: google.golang.org/protobuf v1.36.3/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=",
          "",
          "[Added Lines]",
          "2477: google.golang.org/protobuf v1.36.5 h1:tPhr+woSbjfYvY6/GPufUoYizxw1cF/yFoxJ2fmpwlM=",
          "2478: google.golang.org/protobuf v1.36.5/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd5475c3b8f7895cd66d37f4fe58e6a2a4bf6184",
      "candidate_info": {
        "commit_hash": "bd5475c3b8f7895cd66d37f4fe58e6a2a4bf6184",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/bd5475c3b8f7895cd66d37f4fe58e6a2a4bf6184",
        "files": [
          ".changelog/24456.txt",
          "nomad/core_sched.go",
          "nomad/core_sched_test.go",
          "nomad/system_endpoint_test.go"
        ],
        "message": "backport of commit 6ccfcc37a30b34f5f76fece890af1c42a510ea9c (#24523)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "nomad/core_sched.go||nomad/core_sched.go",
          "nomad/core_sched_test.go||nomad/core_sched_test.go",
          "nomad/system_endpoint_test.go||nomad/system_endpoint_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/core_sched.go||nomad/core_sched.go": [
          "File: nomad/core_sched.go -> nomad/core_sched.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  log \"github.com/hashicorp/go-hclog\"",
          "14:  memdb \"github.com/hashicorp/go-memdb\"",
          "15:  version \"github.com/hashicorp/go-version\"",
          "16:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "17:  \"github.com/hashicorp/nomad/nomad/state\"",
          "18:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/hashicorp/nomad/helper/pointer\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  snap   *state.StateSnapshot",
          "29:  logger log.Logger",
          "42: }",
          "45: func NewCoreScheduler(srv *Server, snap *state.StateSnapshot) scheduler.Scheduler {",
          "46:  s := &CoreScheduler{",
          "50:  }",
          "51:  return s",
          "52: }",
          "",
          "[Removed Lines]",
          "33:  customJobGCThreshold                time.Duration",
          "34:  customEvalGCThreshold               time.Duration",
          "35:  customBatchEvalGCThreshold          time.Duration",
          "36:  customNodeGCThreshold               time.Duration",
          "37:  customDeploymentGCThreshold         time.Duration",
          "38:  customCSIVolumeClaimGCThreshold     time.Duration",
          "39:  customCSIPluginGCThreshold          time.Duration",
          "40:  customACLTokenExpirationGCThreshold time.Duration",
          "41:  customRootKeyGCThreshold            time.Duration",
          "47:   srv:    srv,",
          "48:   snap:   snap,",
          "49:   logger: srv.logger.ResetNamed(\"core.sched\"),",
          "",
          "[Added Lines]",
          "36:  customThresholdForObject map[string]*time.Duration",
          "42:   srv:                      srv,",
          "43:   snap:                     snap,",
          "44:   logger:                   srv.logger.ResetNamed(\"core.sched\"),",
          "45:   customThresholdForObject: make(map[string]*time.Duration),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: func (c *CoreScheduler) Process(eval *structs.Evaluation) error {",
          "56:  job := strings.Split(eval.JobID, \":\") // extra data can be smuggled in w/ JobID",
          "57:  switch job[0] {",
          "58:  case structs.CoreJobEvalGC:",
          "60:  case structs.CoreJobNodeGC:",
          "62:  case structs.CoreJobJobGC:",
          "64:  case structs.CoreJobDeploymentGC:",
          "66:  case structs.CoreJobCSIVolumeClaimGC:",
          "68:  case structs.CoreJobCSIPluginGC:",
          "70:  case structs.CoreJobOneTimeTokenGC:",
          "71:   return c.expiredOneTimeTokenGC(eval)",
          "72:  case structs.CoreJobLocalTokenExpiredGC:",
          "74:  case structs.CoreJobGlobalTokenExpiredGC:",
          "76:  case structs.CoreJobRootKeyRotateOrGC:",
          "77:   return c.rootKeyRotateOrGC(eval)",
          "78:  case structs.CoreJobVariablesRekey:",
          "",
          "[Removed Lines]",
          "59:   return c.evalGC()",
          "61:   return c.nodeGC(eval)",
          "63:   return c.jobGC(eval)",
          "65:   return c.deploymentGC()",
          "67:   return c.csiVolumeClaimGC(eval)",
          "69:   return c.csiPluginGC(eval)",
          "73:   return c.expiredACLTokenGC(eval, false)",
          "75:   return c.expiredACLTokenGC(eval, true)",
          "",
          "[Added Lines]",
          "55:  customThreshold := c.customThresholdForObject[job[0]]",
          "59:   return c.evalGC(customThreshold)",
          "61:   return c.nodeGC(eval, customThreshold)",
          "63:   return c.jobGC(eval, customThreshold)",
          "65:   return c.deploymentGC(customThreshold)",
          "67:   return c.csiVolumeClaimGC(eval, customThreshold)",
          "69:   return c.csiPluginGC(eval, customThreshold)",
          "73:   return c.expiredACLTokenGC(eval, false, customThreshold)",
          "75:   return c.expiredACLTokenGC(eval, true, customThreshold)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88: func (c *CoreScheduler) forceGC(eval *structs.Evaluation) error {",
          "90:   return err",
          "91:  }",
          "93:   return err",
          "94:  }",
          "96:   return err",
          "97:  }",
          "99:   return err",
          "100:  }",
          "102:   return err",
          "103:  }",
          "104:  if err := c.expiredOneTimeTokenGC(eval); err != nil {",
          "105:   return err",
          "106:  }",
          "108:   return err",
          "109:  }",
          "111:   return err",
          "112:  }",
          "113:  if err := c.rootKeyGC(eval, time.Now()); err != nil {",
          "114:   return err",
          "115:  }",
          "119: }",
          "124:  ws := memdb.NewWatchSet()",
          "125:  iter, err := c.snap.JobsByGC(ws, true)",
          "",
          "[Removed Lines]",
          "89:  if err := c.jobGC(eval); err != nil {",
          "92:  if err := c.evalGC(); err != nil {",
          "95:  if err := c.deploymentGC(); err != nil {",
          "98:  if err := c.csiPluginGC(eval); err != nil {",
          "101:  if err := c.csiVolumeClaimGC(eval); err != nil {",
          "107:  if err := c.expiredACLTokenGC(eval, false); err != nil {",
          "110:  if err := c.expiredACLTokenGC(eval, true); err != nil {",
          "118:  return c.nodeGC(eval)",
          "122: func (c *CoreScheduler) jobGC(eval *structs.Evaluation) error {",
          "",
          "[Added Lines]",
          "90:  force := pointer.Of(time.Millisecond)",
          "92:  if err := c.jobGC(eval, force); err != nil {",
          "95:  if err := c.evalGC(force); err != nil {",
          "98:  if err := c.deploymentGC(force); err != nil {",
          "101:  if err := c.csiPluginGC(eval, force); err != nil {",
          "104:  if err := c.csiVolumeClaimGC(eval, force); err != nil {",
          "110:  if err := c.expiredACLTokenGC(eval, false, force); err != nil {",
          "113:  if err := c.expiredACLTokenGC(eval, true, force); err != nil {",
          "122:  return c.nodeGC(eval, force)",
          "126: func (c *CoreScheduler) jobGC(eval *structs.Evaluation, customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:  threshold = c.srv.config.JobGCThreshold",
          "136:  }",
          "138:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "134:  if c.customJobGCThreshold != 0 {",
          "135:   threshold = c.customJobGCThreshold",
          "",
          "[Added Lines]",
          "138:  if customThreshold != nil {",
          "139:   threshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263: }",
          "268:  ws := memdb.NewWatchSet()",
          "269:  iter, err := c.snap.Evals(ws, false)",
          "",
          "[Removed Lines]",
          "266: func (c *CoreScheduler) evalGC() error {",
          "",
          "[Added Lines]",
          "270: func (c *CoreScheduler) evalGC(customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "276:  batchThreshold = c.srv.config.BatchEvalGCThreshold",
          "284:  }",
          "286:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "279:  if c.customEvalGCThreshold != 0 {",
          "280:   threshold = c.customEvalGCThreshold",
          "281:  }",
          "282:  if c.customBatchEvalGCThreshold != 0 {",
          "283:   batchThreshold = c.customBatchEvalGCThreshold",
          "",
          "[Added Lines]",
          "283:  if customThreshold != nil {",
          "284:   threshold = *customThreshold",
          "285:   batchThreshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "462: }",
          "467:  ws := memdb.NewWatchSet()",
          "468:  iter, err := c.snap.Nodes(ws)",
          "",
          "[Removed Lines]",
          "465: func (c *CoreScheduler) nodeGC(eval *structs.Evaluation) error {",
          "",
          "[Added Lines]",
          "466: func (c *CoreScheduler) nodeGC(eval *structs.Evaluation, customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "474:  threshold = c.srv.config.NodeGCThreshold",
          "479:  }",
          "480:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "477:  if c.customNodeGCThreshold != 0 {",
          "478:   threshold = c.customNodeGCThreshold",
          "",
          "[Added Lines]",
          "478:  if customThreshold != nil {",
          "479:   threshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "566: }",
          "571:  ws := memdb.NewWatchSet()",
          "572:  iter, err := c.snap.Deployments(ws, state.SortDefault)",
          "",
          "[Removed Lines]",
          "569: func (c *CoreScheduler) deploymentGC() error {",
          "",
          "[Added Lines]",
          "570: func (c *CoreScheduler) deploymentGC(customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "578:  threshold = c.srv.config.DeploymentGCThreshold",
          "583:  }",
          "584:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "581:  if c.customDeploymentGCThreshold != 0 {",
          "582:   threshold = c.customDeploymentGCThreshold",
          "",
          "[Added Lines]",
          "582:  if customThreshold != nil {",
          "583:   threshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "739: }",
          "744:  gcClaims := func(ns, volID string) error {",
          "745:   req := &structs.CSIVolumeClaimRequest{",
          "",
          "[Removed Lines]",
          "742: func (c *CoreScheduler) csiVolumeClaimGC(eval *structs.Evaluation) error {",
          "",
          "[Added Lines]",
          "743: func (c *CoreScheduler) csiVolumeClaimGC(eval *structs.Evaluation, customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "778:  threshold = c.srv.config.CSIVolumeClaimGCThreshold",
          "783:  }",
          "784:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "781:  if c.customCSIVolumeClaimGCThreshold != 0 {",
          "782:   threshold = c.customCSIVolumeClaimGCThreshold",
          "",
          "[Added Lines]",
          "782:  if customThreshold != nil {",
          "783:   threshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "812: }",
          "817:  ws := memdb.NewWatchSet()",
          "",
          "[Removed Lines]",
          "815: func (c *CoreScheduler) csiPluginGC(eval *structs.Evaluation) error {",
          "",
          "[Added Lines]",
          "816: func (c *CoreScheduler) csiPluginGC(eval *structs.Evaluation, customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "825:  threshold = c.srv.config.CSIPluginGCThreshold",
          "830:  }",
          "831:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "828:  if c.customCSIPluginGCThreshold != 0 {",
          "829:   threshold = c.customCSIPluginGCThreshold",
          "",
          "[Added Lines]",
          "829:  if customThreshold != nil {",
          "830:   threshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "873: func (c *CoreScheduler) expiredACLTokenGC(eval *structs.Evaluation, global bool) error {",
          "",
          "[Added Lines]",
          "874: func (c *CoreScheduler) expiredACLTokenGC(eval *structs.Evaluation, global bool, customThreshold *time.Duration) error {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "893:  threshold = c.srv.config.ACLTokenExpirationGCThreshold",
          "898:  }",
          "899:  cutoffTime := c.getCutoffTime(threshold)",
          "",
          "[Removed Lines]",
          "896:  if c.customACLTokenExpirationGCThreshold != 0 {",
          "897:   threshold = c.customACLTokenExpirationGCThreshold",
          "",
          "[Added Lines]",
          "897:  if customThreshold != nil {",
          "898:   threshold = *customThreshold",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1003:   return err",
          "1004:  }",
          "",
          "[Removed Lines]",
          "1006:  var threshold time.Duration",
          "1007:  threshold = c.srv.config.RootKeyGCThreshold",
          "1010:  if c.customRootKeyGCThreshold != 0 {",
          "1011:   threshold = c.customRootKeyGCThreshold",
          "1012:  }",
          "",
          "[Added Lines]",
          "1009:  threshold := c.srv.config.RootKeyGCThreshold",
          "",
          "---------------"
        ],
        "nomad/core_sched_test.go||nomad/core_sched_test.go": [
          "File: nomad/core_sched_test.go -> nomad/core_sched_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:  gc = s1.coreJobEval(structs.CoreJobEvalGC, jobModifyIdx*2)",
          "533:  must.NoError(t, core.Process(gc))",
          "",
          "[Removed Lines]",
          "530:  core.(*CoreScheduler).customBatchEvalGCThreshold = time.Minute",
          "",
          "[Added Lines]",
          "530:  core.(*CoreScheduler).customThresholdForObject[structs.CoreJobEvalGC] = pointer.Of(time.Minute)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2513:  index++",
          "2514:  gc := srv.coreJobEval(structs.CoreJobForceGC, index)",
          "2515:  c := core.(*CoreScheduler)",
          "",
          "[Removed Lines]",
          "2516:  require.NoError(t, c.csiVolumeClaimGC(gc))",
          "",
          "[Added Lines]",
          "2514:  require.NoError(t, c.csiVolumeClaimGC(gc, nil))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2551:  index++",
          "2552:  gc := srv.coreJobEval(structs.CoreJobForceGC, index)",
          "2553:  c := core.(*CoreScheduler)",
          "2556:  vol, err := srv.State().CSIVolumeByID(nil, structs.DefaultNamespace, \"csi-volume-nfs0\")",
          "2557:  must.NoError(t, err)",
          "",
          "[Removed Lines]",
          "2554:  must.NoError(t, c.csiVolumeClaimGC(gc))",
          "",
          "[Added Lines]",
          "2552:  must.NoError(t, c.csiVolumeClaimGC(gc, nil))",
          "",
          "---------------"
        ],
        "nomad/system_endpoint_test.go||nomad/system_endpoint_test.go": [
          "File: nomad/system_endpoint_test.go -> nomad/system_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  job := mock.Job()",
          "35:  job.Type = structs.JobTypeBatch",
          "36:  job.Stop = true",
          "39:  must.NoError(t, state.UpsertJob(structs.MsgTypeTestSetup, 1000, nil, job))",
          "41:  eval := mock.Eval()",
          "42:  eval.Status = structs.EvalStatusComplete",
          "43:  eval.JobID = job.ID",
          "46:  must.NoError(t, state.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval}))",
          "",
          "[Removed Lines]",
          "38:  job.SubmitTime = time.Now().Add(-6 * time.Hour).UnixNano()",
          "45:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "[Added Lines]",
          "38:  job.SubmitTime = time.Now().Add(-10 * time.Millisecond).UnixNano()",
          "45:  eval.ModifyTime = time.Now().Add(-10 * time.Millisecond).UnixNano()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4460e660fb56f653ebabc26268c84e9945d66ba0",
      "candidate_info": {
        "commit_hash": "4460e660fb56f653ebabc26268c84e9945d66ba0",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/4460e660fb56f653ebabc26268c84e9945d66ba0",
        "files": [
          ".changelog/24320.txt",
          "ui/app/controllers/settings/tokens.js",
          "ui/app/services/system.js",
          "ui/app/styles/core/navbar.scss",
          "ui/app/templates/components/region-switcher.hbs",
          "ui/mirage/config.js",
          "ui/tests/acceptance/regions-test.js",
          "ui/tests/pages/layout.js",
          "ui/tests/unit/adapters/job-test.js"
        ],
        "message": "backport of commit 4dbcdd103ad39f8e4b5b6d772f8d25928ddc8bb6 (#24357)\n\nCo-authored-by: Seth Hoenig <shoenig@duck.com>",
        "before_after_code_files": [
          "ui/app/controllers/settings/tokens.js||ui/app/controllers/settings/tokens.js",
          "ui/app/services/system.js||ui/app/services/system.js",
          "ui/app/styles/core/navbar.scss||ui/app/styles/core/navbar.scss",
          "ui/app/templates/components/region-switcher.hbs||ui/app/templates/components/region-switcher.hbs",
          "ui/mirage/config.js||ui/mirage/config.js",
          "ui/tests/acceptance/regions-test.js||ui/tests/acceptance/regions-test.js",
          "ui/tests/pages/layout.js||ui/tests/pages/layout.js",
          "ui/tests/unit/adapters/job-test.js||ui/tests/unit/adapters/job-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/controllers/settings/tokens.js||ui/app/controllers/settings/tokens.js": [
          "File: ui/app/controllers/settings/tokens.js -> ui/app/controllers/settings/tokens.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   @service token;",
          "24:   @service store;",
          "25:   @service router;",
          "27:   queryParams = ['code', 'state', 'jwtAuthMethod'];",
          "29:   @tracked secret = this.token.secret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   @service system;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:           this.token.get('fetchSelfTokenAndPolicies').perform().catch();",
          "167:           this.signInStatus = 'success';",
          "168:           this.token.set('tokenNotFound', false);",
          "169:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:           if (!this.system.activeRegion) {",
          "168:             this.system.get('defaultRegion').then((res) => {",
          "169:               if (res.region) {",
          "170:                 this.system.set('activeRegion', res.region);",
          "171:               }",
          "172:             });",
          "173:           }",
          "",
          "---------------"
        ],
        "ui/app/services/system.js||ui/app/services/system.js": [
          "File: ui/app/services/system.js -> ui/app/services/system.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     });",
          "58:   }",
          "61:   get defaultRegion() {",
          "62:     const token = this.token;",
          "63:     return PromiseObject.create({",
          "",
          "[Removed Lines]",
          "60:   @computed",
          "",
          "[Added Lines]",
          "60:   @computed('token.selfToken')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     return this.get('regions.length') > 1;",
          "111:   }",
          "113:   @computed('activeRegion', 'defaultRegion.region', 'shouldShowRegions')",
          "114:   get shouldIncludeRegion() {",
          "115:     return (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   get hasNonDefaultRegion() {",
          "114:     return this.get('regions')",
          "115:       .toArray()",
          "116:       .some((region) => region !== 'global');",
          "117:   }",
          "",
          "---------------"
        ],
        "ui/app/styles/core/navbar.scss||ui/app/styles/core/navbar.scss": [
          "File: ui/app/styles/core/navbar.scss -> ui/app/styles/core/navbar.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     display: flex;",
          "143:     align-items: center;",
          "145:     &.is-gutter {",
          "146:       width: $gutter-width;",
          "147:       display: block;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     &.single-region {",
          "146:       display: block;",
          "147:       padding: 0;",
          "148:       font-size: 1em;",
          "149:       color: rgba($primary-invert, 0.9);",
          "151:       > span {",
          "152:         font-weight: 500;",
          "153:       }",
          "154:     }",
          "",
          "---------------"
        ],
        "ui/app/templates/components/region-switcher.hbs||ui/app/templates/components/region-switcher.hbs": [
          "File: ui/app/templates/components/region-switcher.hbs -> ui/app/templates/components/region-switcher.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:       @tagName=\"div\"",
          "13:       @triggerClass={{this.decoration}}",
          "14:       @options={{this.sortedRegions}}",
          "16:       @searchEnabled={{false}}",
          "17:       @onChange={{action this.gotoRegion}} as |region|>",
          "19:     </PowerSelect>",
          "20:   </span>",
          "21: {{/if}}",
          "",
          "[Removed Lines]",
          "15:       @selected={{this.system.activeRegion}}",
          "18:       <span class=\"ember-power-select-prefix\">Region: </span>{{region}}",
          "",
          "[Added Lines]",
          "15:       @selected={{or this.system.activeRegion 'Select a Region'}}",
          "18:       {{#if this.system.activeRegion}}",
          "19:         <span class=\"ember-power-select-prefix\">Region: </span>",
          "20:       {{/if}}",
          "21:       {{region}}",
          "24: {{else if this.system.hasNonDefaultRegion}}",
          "25:   <div class=\"navbar-item single-region\">",
          "26:     <span>Region: </span>{{this.system.activeRegion}}",
          "27:   </div>",
          "",
          "---------------"
        ],
        "ui/mirage/config.js||ui/mirage/config.js": [
          "File: ui/mirage/config.js -> ui/mirage/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "708:     return this.serialize(volume);",
          "709:   });",
          "712:     const firstRegion = regions.first();",
          "713:     return {",
          "714:       ServerRegion: firstRegion ? firstRegion.id : null,",
          "",
          "[Removed Lines]",
          "711:   this.get('/agent/members', function ({ agents, regions }) {",
          "",
          "[Added Lines]",
          "711:   this.get('/agent/members', function ({ agents, regions }, req) {",
          "712:     const tokenPresent = req.requestHeaders['X-Nomad-Token'];",
          "713:     if (!tokenPresent) {",
          "714:       return new Response(403, {}, 'Forbidden');",
          "715:     }",
          "",
          "---------------"
        ],
        "ui/tests/acceptance/regions-test.js||ui/tests/acceptance/regions-test.js": [
          "File: ui/tests/acceptance/regions-test.js -> ui/tests/acceptance/regions-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import ClientsList from 'nomad-ui/tests/pages/clients/list';",
          "16: import Layout from 'nomad-ui/tests/pages/layout';",
          "17: import Allocation from 'nomad-ui/tests/pages/allocations/detail';",
          "19: module('Acceptance | regions (only one)', function (hooks) {",
          "20:   setupApplicationTest(hooks);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import Tokens from 'nomad-ui/tests/pages/settings/tokens';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     await a11yAudit(assert);",
          "36:   });",
          "39:     server.create('region', { id: 'global' });",
          "41:     await JobsList.visit();",
          "43:     assert.notOk(Layout.navbar.regionSwitcher.isPresent, 'No region switcher');",
          "44:     assert.ok(document.title.includes('Jobs'));",
          "45:   });",
          "48:     server.create('region', { id: 'some-region' });",
          "50:     await JobsList.visit();",
          "52:     assert.notOk(Layout.navbar.regionSwitcher.isPresent, 'No region switcher');",
          "53:   });",
          "55:   test('pages do not include the region query param', async function (assert) {",
          "",
          "[Removed Lines]",
          "38:   test('when there is only one region, the region switcher is not shown in the nav bar and the region is not in the page title', async function (assert) {",
          "47:   test('when the only region is not named \"global\", the region switcher still is not shown', async function (assert) {",
          "",
          "[Added Lines]",
          "39:   test('when there is only one region, and it is the default one, the region switcher is not shown in the nav bar and the region is not in the page title', async function (assert) {",
          "45:     assert.notOk(Layout.navbar.singleRegion.isPresent, 'No single region');",
          "49:   test('when the only region is not named \"global\", the region switcher still is not shown, but the single region name is', async function (assert) {",
          "55:     assert.ok(Layout.navbar.singleRegion.isPresent, 'Single region');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:       }",
          "219:     });",
          "220:   });",
          "221: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:   test('Signing in sets the active region', async function (assert) {",
          "226:     window.localStorage.clear();",
          "227:     let managementToken = server.create('token');",
          "228:     await Tokens.visit();",
          "229:     assert.equal(",
          "230:       Layout.navbar.regionSwitcher.text,",
          "231:       'Select a Region',",
          "232:       'Region picker says \"Select a Region\" before signing in'",
          "233:     );",
          "234:     await Tokens.secret(managementToken.secretId).submit();",
          "235:     assert.equal(",
          "236:       window.localStorage.nomadActiveRegion,",
          "237:       'global',",
          "238:       'Region is set in localStorage after signing in'",
          "239:     );",
          "240:     assert.equal(",
          "241:       Layout.navbar.regionSwitcher.text,",
          "242:       'Region: global',",
          "243:       'Region picker says \"Region: global\" after signing in'",
          "244:     );",
          "245:   });",
          "",
          "---------------"
        ],
        "ui/tests/pages/layout.js||ui/tests/pages/layout.js": [
          "File: ui/tests/pages/layout.js -> ui/tests/pages/layout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       }),",
          "29:     },",
          "31:     search: {",
          "32:       scope: '[data-test-search-parent]',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     singleRegion: {",
          "32:       scope: '.single-region',",
          "33:       text: text(),",
          "34:     },",
          "",
          "---------------"
        ],
        "ui/tests/unit/adapters/job-test.js||ui/tests/unit/adapters/job-test.js": [
          "File: ui/tests/unit/adapters/job-test.js -> ui/tests/unit/adapters/job-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:   });",
          "470:   test('when the region is set to the default region, requests are made without the region query param', async function (assert) {",
          "471:     await this.initializeUI({ region: 'region-1' });",
          "473:     const { pretender } = this.server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     const secret = 'here is the secret';",
          "472:     this.subject().set('token.secret', secret);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cde3d630a0c0fd31c3a3d5d6bce1268ac0c1af2",
      "candidate_info": {
        "commit_hash": "5cde3d630a0c0fd31c3a3d5d6bce1268ac0c1af2",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5cde3d630a0c0fd31c3a3d5d6bce1268ac0c1af2",
        "files": [
          ".changelog/24981.txt",
          "drivers/docker/coordinator.go",
          "drivers/docker/coordinator_test.go"
        ],
        "message": "backport of commit 3493551c38bcaa41d015de09e63eed54bd8fb08a (#25052)\n\nCo-authored-by: Daniel Bennett <dbennett@hashicorp.com>",
        "before_after_code_files": [
          "drivers/docker/coordinator.go||drivers/docker/coordinator.go",
          "drivers/docker/coordinator_test.go||drivers/docker/coordinator_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/coordinator.go||drivers/docker/coordinator.go": [
          "File: drivers/docker/coordinator.go -> drivers/docker/coordinator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:   _, err = io.Copy(pm, reader)",
          "217:   if err != nil && !errors.Is(err, io.EOF) {",
          "218:    d.logger.Error(\"error reading image pull progress\", \"error\", err)",
          "219:    return",
          "220:   }",
          "221:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:    future.set(\"\", \"\", recoverablePullError(err, imageID))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:  if imageNotFoundMatcher.MatchString(err.Error()) {",
          "421:   recoverable = false",
          "422:  }",
          "424: }",
          "",
          "[Removed Lines]",
          "423:  return structs.NewRecoverableError(fmt.Errorf(\"Failed to pull `%s`: %s\", image, err), recoverable)",
          "",
          "[Added Lines]",
          "424:  return structs.NewRecoverableError(fmt.Errorf(\"Failed to pull `%s`: %w\", image, err), recoverable)",
          "",
          "---------------"
        ],
        "drivers/docker/coordinator_test.go||drivers/docker/coordinator_test.go": [
          "File: drivers/docker/coordinator_test.go -> drivers/docker/coordinator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"context\"",
          "8:  \"fmt\"",
          "9:  \"io\"",
          "10:  \"sync\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:  \"github.com/hashicorp/nomad/helper/testlog\"",
          "18:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "19:  \"github.com/hashicorp/nomad/testutil\"",
          "20:  \"github.com/stretchr/testify/require\"",
          "21: )",
          "23: type mockImageClient struct {",
          "29: }",
          "31: func newMockImageClient(idToName map[string]string, pullDelay time.Duration) *mockImageClient {",
          "",
          "[Removed Lines]",
          "24:  pulled    map[string]int",
          "25:  idToName  map[string]string",
          "26:  removed   map[string]int",
          "27:  pullDelay time.Duration",
          "28:  lock      sync.Mutex",
          "",
          "[Added Lines]",
          "21:  \"github.com/shoenig/test/must\"",
          "26:  pulled     map[string]int",
          "27:  idToName   map[string]string",
          "28:  removed    map[string]int",
          "29:  pullDelay  time.Duration",
          "30:  pullReader io.ReadCloser",
          "31:  lock       sync.Mutex",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:  m.lock.Lock()",
          "43:  defer m.lock.Unlock()",
          "44:  m.pulled[refStr]++",
          "46: }",
          "48: func (m *mockImageClient) ImageInspectWithRaw(ctx context.Context, id string) (types.ImageInspect, []byte, error) {",
          "",
          "[Removed Lines]",
          "45:  return nil, nil",
          "",
          "[Added Lines]",
          "48:  return m.pullReader, nil",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:  return []image.DeleteResponse{}, nil",
          "61: }",
          "63: func TestDockerCoordinator_ConcurrentPulls(t *testing.T) {",
          "64:  ci.Parallel(t)",
          "65:  image := \"foo\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: type readErrorer struct {",
          "67:  readErr    error",
          "68:  closeError error",
          "69: }",
          "71: var _ io.ReadCloser = &readErrorer{}",
          "73: func (r *readErrorer) Read(p []byte) (n int, err error) {",
          "74:  return len(p), r.readErr",
          "75: }",
          "77: func (r *readErrorer) Close() error {",
          "78:  return r.closeError",
          "79: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "323:  require.Equal(t, map[string]int{id1: 1}, mock.removed, \"removed images\")",
          "324: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344: func TestDockerCoordinator_PullImage_ProgressError(t *testing.T) {",
          "347:  ci.Parallel(t)",
          "349:  timeout := time.Second // shut down the driver in 1s (should not happen)",
          "350:  driverCtx, cancel := context.WithTimeout(context.Background(), timeout)",
          "351:  defer cancel()",
          "353:  mapping := map[string]string{uuid.Generate(): \"foo\"}",
          "354:  mock := newMockImageClient(mapping, 1*time.Millisecond)",
          "355:  config := &dockerCoordinatorConfig{",
          "356:   ctx:         driverCtx,",
          "357:   logger:      testlog.HCLogger(t),",
          "358:   cleanup:     true,",
          "359:   client:      mock,",
          "360:   removeDelay: 1 * time.Millisecond,",
          "361:  }",
          "362:  coordinator := newDockerCoordinator(config)",
          "366:  readErr := errors.New(\"a bad bad thing happened\")",
          "367:  mock.pullReader = &readErrorer{readErr: readErr}",
          "369:  _, _, err := coordinator.PullImage(\"foo\", nil, uuid.Generate(), nil, timeout, timeout)",
          "370:  must.ErrorIs(t, err, readErr)",
          "371: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}