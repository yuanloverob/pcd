{
  "cve_id": "CVE-2024-47003",
  "cve_desc": "Mattermost versions 9.11.x <= 9.11.0 and 9.5.x <= 9.5.8 fail to validate that the message of the permalink post is a string,\u00a0which allows an attacker to send a non-string value as the message of a permalink post and crash the frontend.",
  "repo": "mattermost/mattermost",
  "patch_hash": "69a8b3df0f9fd3a7a5b792ec678b6191618d039b",
  "patch_info": {
    "commit_hash": "69a8b3df0f9fd3a7a5b792ec678b6191618d039b",
    "repo": "mattermost/mattermost",
    "commit_url": "https://github.com/mattermost/mattermost/commit/69a8b3df0f9fd3a7a5b792ec678b6191618d039b",
    "files": [
      "server/channels/app/post_metadata.go",
      "server/public/model/post.go"
    ],
    "message": "Cleanup post embed for WebSocket payload (#27763)\n\n* Cleanup post embed for WebSocket payload\n\n* Removing post embeds in create post API\n\n* Fixed a nil check:\n\n* Removed a now-irrelavent test\n\n---------\n\nCo-authored-by: Mattermost Build <build@mattermost.com>",
    "before_after_code_files": [
      "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
      "server/public/model/post.go||server/public/model/post.go"
    ]
  },
  "patch_diff": {
    "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go": [
      "File: server/channels/app/post_metadata.go -> server/channels/app/post_metadata.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "202: }",
      "204: func removePermalinkMetadataFromPost(post *model.Post) {",
      "205:  if post.Metadata == nil || len(post.Metadata.Embeds) == 0 {",
      "206:   return",
      "207:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "205:  removeEmbeddedPostsFromMetadata(post)",
      "206:  post.DelProp(model.PostPropsPreviewedPost)",
      "207: }",
      "209: func removeEmbeddedPostsFromMetadata(post *model.Post) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:  }",
      "219:  post.Metadata.Embeds = newEmbeds",
      "222: }",
      "224: func (a *App) sanitizePostMetadataForUserAndChannel(c request.CTX, post *model.Post, previewedPost *model.PreviewPost, previewedChannel *model.Channel, userID string) *model.Post {",
      "",
      "[Removed Lines]",
      "221:  post.DelProp(model.PostPropsPreviewedPost)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/public/model/post.go||server/public/model/post.go": [
      "File: server/public/model/post.go -> server/public/model/post.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "508: func (o *Post) SanitizeInput() {",
      "509:  o.DeleteAt = 0",
      "510:  o.RemoteId = NewPointer(\"\")",
      "511: }",
      "513: func (o *Post) ContainsIntegrationsReservedProps() []string {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "512:  if o.Metadata != nil {",
      "513:   o.Metadata.Embeds = nil",
      "514:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "539412b353da0a86184daec5e9fe9a84da458a6c",
      "candidate_info": {
        "commit_hash": "539412b353da0a86184daec5e9fe9a84da458a6c",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/539412b353da0a86184daec5e9fe9a84da458a6c",
        "files": [
          "server/channels/app/notification.go",
          "server/channels/app/notification_test.go",
          "server/channels/app/post.go",
          "server/channels/app/post_metadata.go"
        ],
        "message": "Fix MM53643 (#25683)\n\n* Fix MM53643\n\n* Add test\n\n* Remove unneeded part of a test\n\n---------\n\nCo-authored-by: Mattermost Build <build@mattermost.com>",
        "before_after_code_files": [
          "server/channels/app/notification.go||server/channels/app/notification.go",
          "server/channels/app/notification_test.go||server/channels/app/notification_test.go",
          "server/channels/app/post.go||server/channels/app/post.go",
          "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go"
          ],
          "candidate": [
            "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/app/notification.go||server/channels/app/notification.go": [
          "File: server/channels/app/notification.go -> server/channels/app/notification.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:  message := model.NewWebSocketEvent(model.WebsocketEventPosted, \"\", post.ChannelId, \"\", nil, \"\")",
          "495:  message.Add(\"channel_type\", channel.Type)",
          "496:  message.Add(\"channel_display_name\", notification.GetChannelName(model.ShowUsername, \"\"))",
          "497:  message.Add(\"channel_name\", channel.Name)",
          "",
          "[Removed Lines]",
          "489:  postJSON, jsonErr := post.ToJSON()",
          "490:  if jsonErr != nil {",
          "491:   return nil, errors.Wrapf(jsonErr, \"failed to encode post to JSON\")",
          "492:  }",
          "493:  message.Add(\"post\", postJSON)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530:   return nil, err",
          "531:  }",
          "532:  if !published {",
          "533:   a.Publish(message)",
          "534:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:   removePermalinkMetadataFromPost(post)",
          "527:   postJSON, jsonErr := post.ToJSON()",
          "528:   if jsonErr != nil {",
          "529:    return nil, errors.Wrapf(jsonErr, \"failed to encode post to JSON\")",
          "530:   }",
          "531:   message.Add(\"post\", postJSON)",
          "",
          "---------------"
        ],
        "server/channels/app/notification_test.go||server/channels/app/notification_test.go": [
          "File: server/channels/app/notification_test.go -> server/channels/app/notification_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   assert.Nil(t, received2.GetBroadcast().BroadcastHooks)",
          "396:   assert.Nil(t, received2.GetBroadcast().BroadcastHookArgs)",
          "397:  })",
          "398: }",
          "400: func assertUnmarshalsTo(t *testing.T, expected any, actual any) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:  t.Run(\"should sanitize the post if there is an error\", func(t *testing.T) {",
          "400:   messages, closeWS1 := connectFakeWebSocket(t, th, th.BasicUser.Id, \"\")",
          "401:   defer closeWS1()",
          "403:   linkedPostId := \"123456789\"",
          "404:   postURL := fmt.Sprintf(\"%s/%s/pl/%s\", th.App.GetSiteURL(), th.BasicTeam.Name, linkedPostId)",
          "405:   post := &model.Post{",
          "406:    UserId:    sender.Id,",
          "407:    ChannelId: th.BasicChannel.Id,",
          "408:    Message:   postURL,",
          "409:    Metadata: &model.PostMetadata{",
          "410:     Embeds: []*model.PostEmbed{",
          "411:      {",
          "412:       Type: model.PostEmbedPermalink,",
          "413:       URL:  postURL,",
          "414:       Data: &model.Post{},",
          "415:      },",
          "416:     },",
          "417:    },",
          "418:   }",
          "419:   post.SetProps(model.StringInterface{model.PostPropsPreviewedPost: linkedPostId})",
          "421:   _, err := th.App.SendNotifications(th.Context, post, th.BasicTeam, th.BasicChannel, sender, nil, false)",
          "422:   require.NoError(t, err)",
          "424:   received := <-messages",
          "425:   require.Equal(t, model.WebsocketEventPosted, received.EventType())",
          "426:   receivedPost := &model.Post{}",
          "427:   err = json.Unmarshal([]byte(received.GetData()[\"post\"].(string)), &receivedPost)",
          "428:   require.NoError(t, err)",
          "429:   assert.Equal(t, postURL, receivedPost.Message)",
          "430:   assert.Nil(t, receivedPost.Metadata.Embeds)",
          "431:  })",
          "",
          "---------------"
        ],
        "server/channels/app/post.go||server/channels/app/post.go": [
          "File: server/channels/app/post.go -> server/channels/app/post.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:  }",
          "759:  message := model.NewWebSocketEvent(model.WebsocketEventPostEdited, \"\", rpost.ChannelId, \"\", nil, \"\")",
          "766:  published, err := a.publishWebsocketEventForPermalinkPost(c, rpost, message)",
          "767:  if err != nil {",
          "768:   return nil, err",
          "769:  }",
          "770:  if !published {",
          "771:   a.Publish(message)",
          "772:  }",
          "",
          "[Removed Lines]",
          "760:  postJSON, jsonErr := rpost.ToJSON()",
          "761:  if jsonErr != nil {",
          "762:   return nil, model.NewAppError(\"UpdatePost\", \"app.post.marshal.app_error\", nil, \"\", http.StatusInternalServerError).Wrap(jsonErr)",
          "763:  }",
          "764:  message.Add(\"post\", postJSON)",
          "",
          "[Added Lines]",
          "766:   removePermalinkMetadataFromPost(rpost)",
          "767:   postJSON, jsonErr := rpost.ToJSON()",
          "768:   if jsonErr != nil {",
          "769:    return nil, model.NewAppError(\"UpdatePost\", \"app.post.marshal.app_error\", nil, \"\", http.StatusInternalServerError).Wrap(jsonErr)",
          "770:   }",
          "771:   message.Add(\"post\", postJSON)",
          "",
          "---------------"
        ],
        "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go": [
          "File: server/channels/app/post_metadata.go -> server/channels/app/post_metadata.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  return post",
          "191: }",
          "193: func (a *App) sanitizePostMetadataForUserAndChannel(c request.CTX, post *model.Post, previewedPost *model.PreviewPost, previewedChannel *model.Channel, userID string) *model.Post {",
          "194:  if post.Metadata == nil || len(post.Metadata.Embeds) == 0 || previewedPost == nil {",
          "195:   return post",
          "196:  }",
          "198:  if previewedChannel != nil && !a.HasPermissionToReadChannel(c, userID, previewedChannel) {",
          "212:  }",
          "214:  return post",
          "",
          "[Removed Lines]",
          "202:   var newEmbeds []*model.PostEmbed",
          "203:   for _, embed := range post.Metadata.Embeds {",
          "204:    if embed.Type != model.PostEmbedPermalink {",
          "205:     newEmbeds = append(newEmbeds, embed)",
          "206:    }",
          "207:   }",
          "209:   post.Metadata.Embeds = newEmbeds",
          "211:   post.DelProp(model.PostPropsPreviewedPost)",
          "",
          "[Added Lines]",
          "193: func removePermalinkMetadataFromPost(post *model.Post) {",
          "194:  if post.Metadata == nil || len(post.Metadata.Embeds) == 0 {",
          "195:   return",
          "196:  }",
          "201:  var newEmbeds []*model.PostEmbed",
          "202:  for _, embed := range post.Metadata.Embeds {",
          "203:   if embed.Type != model.PostEmbedPermalink {",
          "204:    newEmbeds = append(newEmbeds, embed)",
          "205:   }",
          "206:  }",
          "208:  post.Metadata.Embeds = newEmbeds",
          "210:  post.DelProp(model.PostPropsPreviewedPost)",
          "211: }",
          "219:   removePermalinkMetadataFromPost(post)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:  }",
          "232:  if previewedChannel != nil && !a.HasPermissionToReadChannel(c, userID, previewedChannel) {",
          "246:  }",
          "248:  return post, nil",
          "",
          "[Removed Lines]",
          "236:   var newEmbeds []*model.PostEmbed",
          "237:   for _, embed := range post.Metadata.Embeds {",
          "238:    if embed.Type != model.PostEmbedPermalink {",
          "239:     newEmbeds = append(newEmbeds, embed)",
          "240:    }",
          "241:   }",
          "243:   post.Metadata.Embeds = newEmbeds",
          "245:   post.DelProp(model.PostPropsPreviewedPost)",
          "",
          "[Added Lines]",
          "241:   removePermalinkMetadataFromPost(post)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10eba63c2e79dc4529eef1de2c21a52483fee3d0",
      "candidate_info": {
        "commit_hash": "10eba63c2e79dc4529eef1de2c21a52483fee3d0",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/10eba63c2e79dc4529eef1de2c21a52483fee3d0",
        "files": [
          "server/channels/app/post_metadata.go",
          "server/public/model/post.go"
        ],
        "message": "Cleanup post embed for WebSocket payload (#27763) (#27878)\n\nAutomatic Merge",
        "before_after_code_files": [
          "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
          "server/public/model/post.go||server/public/model/post.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
            "server/public/model/post.go||server/public/model/post.go"
          ],
          "candidate": [
            "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
            "server/public/model/post.go||server/public/model/post.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go": [
          "File: server/channels/app/post_metadata.go -> server/channels/app/post_metadata.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: }",
          "204: func removePermalinkMetadataFromPost(post *model.Post) {",
          "205:  if post.Metadata == nil || len(post.Metadata.Embeds) == 0 {",
          "206:   return",
          "207:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:  removeEmbeddedPostsFromMetadata(post)",
          "206:  post.DelProp(model.PostPropsPreviewedPost)",
          "207: }",
          "209: func removeEmbeddedPostsFromMetadata(post *model.Post) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  }",
          "219:  post.Metadata.Embeds = newEmbeds",
          "222: }",
          "224: func (a *App) sanitizePostMetadataForUserAndChannel(c request.CTX, post *model.Post, previewedPost *model.PreviewPost, previewedChannel *model.Channel, userID string) *model.Post {",
          "",
          "[Removed Lines]",
          "221:  post.DelProp(model.PostPropsPreviewedPost)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/public/model/post.go||server/public/model/post.go": [
          "File: server/public/model/post.go -> server/public/model/post.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "508: func (o *Post) SanitizeInput() {",
          "509:  o.DeleteAt = 0",
          "511: }",
          "513: func (o *Post) ContainsIntegrationsReservedProps() []string {",
          "",
          "[Removed Lines]",
          "510:  o.RemoteId = NewString(\"\")",
          "",
          "[Added Lines]",
          "510:  o.RemoteId = NewPointer(\"\")",
          "512:  if o.Metadata != nil {",
          "513:   o.Metadata.Embeds = nil",
          "514:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3389fc13d4ec9c551e408d7be9ff5f35d879fdd",
      "candidate_info": {
        "commit_hash": "b3389fc13d4ec9c551e408d7be9ff5f35d879fdd",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/b3389fc13d4ec9c551e408d7be9ff5f35d879fdd",
        "files": [
          "server/channels/app/post_metadata.go",
          "server/public/model/post.go"
        ],
        "message": "Websocket cleanup cherrypick for v9.5 (#27879)\n\nAutomatic Merge",
        "before_after_code_files": [
          "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
          "server/public/model/post.go||server/public/model/post.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
            "server/public/model/post.go||server/public/model/post.go"
          ],
          "candidate": [
            "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go",
            "server/public/model/post.go||server/public/model/post.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/app/post_metadata.go||server/channels/app/post_metadata.go": [
          "File: server/channels/app/post_metadata.go -> server/channels/app/post_metadata.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: }",
          "204: func removePermalinkMetadataFromPost(post *model.Post) {",
          "205:  if post.Metadata == nil || len(post.Metadata.Embeds) == 0 {",
          "206:   return",
          "207:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:  removeEmbeddedPostsFromMetadata(post)",
          "206:  post.DelProp(model.PostPropsPreviewedPost)",
          "207: }",
          "209: func removeEmbeddedPostsFromMetadata(post *model.Post) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  }",
          "219:  post.Metadata.Embeds = newEmbeds",
          "222: }",
          "224: func (a *App) sanitizePostMetadataForUserAndChannel(c request.CTX, post *model.Post, previewedPost *model.PreviewPost, previewedChannel *model.Channel, userID string) *model.Post {",
          "",
          "[Removed Lines]",
          "221:  post.DelProp(model.PostPropsPreviewedPost)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/public/model/post.go||server/public/model/post.go": [
          "File: server/public/model/post.go -> server/public/model/post.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "508: func (o *Post) SanitizeInput() {",
          "509:  o.DeleteAt = 0",
          "510:  o.RemoteId = NewString(\"\")",
          "511: }",
          "513: func (o *Post) ContainsIntegrationsReservedProps() []string {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:  if o.Metadata != nil {",
          "513:   o.Metadata.Embeds = nil",
          "514:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}