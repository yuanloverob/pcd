{
  "cve_id": "CVE-2020-11053",
  "cve_desc": "In OAuth2 Proxy before 5.1.1, there is an open redirect vulnerability. Users can provide a redirect address for the proxy to send the authenticated user to at the end of the authentication flow. This is expected to be the original URL that the user was trying to access. This redirect URL is checked within the proxy and validated before redirecting the user to prevent malicious actors providing redirects to potentially harmful sites. However, by crafting a redirect URL with HTML encoded whitespace characters the validation could be bypassed and allow a redirect to any URL provided. This has been patched in 5.1.1.",
  "repo": "oauth2-proxy/oauth2-proxy",
  "patch_hash": "0d5fa211df8ef2449347a56b22c779eb8d894c43",
  "patch_info": {
    "commit_hash": "0d5fa211df8ef2449347a56b22c779eb8d894c43",
    "repo": "oauth2-proxy/oauth2-proxy",
    "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/0d5fa211df8ef2449347a56b22c779eb8d894c43",
    "files": [
      "oauthproxy.go",
      "oauthproxy_test.go"
    ],
    "message": "Merge pull request from GHSA-j7px-6hwj-hpjg",
    "before_after_code_files": [
      "oauthproxy.go||oauthproxy.go",
      "oauthproxy_test.go||oauthproxy_test.go"
    ]
  },
  "patch_diff": {
    "oauthproxy.go||oauthproxy.go": [
      "File: oauthproxy.go -> oauthproxy.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: var (",
      "59:  ErrNeedsLogin = errors.New(\"redirect to login page\")",
      "60: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:  invalidRedirectRegex = regexp.MustCompile(`^/(\\s|\\v)?(/|\\\\)`)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "579: func (p *OAuthProxy) IsValidRedirect(redirect string) bool {",
      "580:  switch {",
      "582:   return true",
      "583:  case strings.HasPrefix(redirect, \"http://\") || strings.HasPrefix(redirect, \"https://\"):",
      "584:   redirectURL, err := url.Parse(redirect)",
      "",
      "[Removed Lines]",
      "581:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !strings.HasPrefix(redirect, \"/\\\\\"):",
      "",
      "[Added Lines]",
      "585:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !invalidRedirectRegex.MatchString(redirect):",
      "",
      "---------------"
    ],
    "oauthproxy_test.go||oauthproxy_test.go": [
      "File: oauthproxy_test.go -> oauthproxy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "322:    Redirect:       \"http://a.sub.anyport.bar:8081/redirect\",",
      "323:    ExpectedResult: true,",
      "324:   },",
      "325:  }",
      "327:  for _, tc := range testCases {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:   {",
      "326:    Desc:           \"openRedirect1\",",
      "327:    Redirect:       \"/\\\\evil.com\",",
      "328:    ExpectedResult: false,",
      "329:   },",
      "330:   {",
      "331:    Desc:           \"openRedirectSpace1\",",
      "332:    Redirect:       \"/ /evil.com\",",
      "333:    ExpectedResult: false,",
      "334:   },",
      "335:   {",
      "336:    Desc:           \"openRedirectSpace2\",",
      "337:    Redirect:       \"/ \\\\evil.com\",",
      "338:    ExpectedResult: false,",
      "339:   },",
      "340:   {",
      "341:    Desc:           \"openRedirectTab1\",",
      "342:    Redirect:       \"/\\t/evil.com\",",
      "343:    ExpectedResult: false,",
      "344:   },",
      "345:   {",
      "346:    Desc:           \"openRedirectTab2\",",
      "347:    Redirect:       \"/\\t\\\\evil.com\",",
      "348:    ExpectedResult: false,",
      "349:   },",
      "350:   {",
      "351:    Desc:           \"openRedirectVerticalTab1\",",
      "352:    Redirect:       \"/\\v/evil.com\",",
      "353:    ExpectedResult: false,",
      "354:   },",
      "355:   {",
      "356:    Desc:           \"openRedirectVerticalTab2\",",
      "357:    Redirect:       \"/\\v\\\\evil.com\",",
      "358:    ExpectedResult: false,",
      "359:   },",
      "360:   {",
      "361:    Desc:           \"openRedirectNewLine1\",",
      "362:    Redirect:       \"/\\n/evil.com\",",
      "363:    ExpectedResult: false,",
      "364:   },",
      "365:   {",
      "366:    Desc:           \"openRedirectNewLine2\",",
      "367:    Redirect:       \"/\\n\\\\evil.com\",",
      "368:    ExpectedResult: false,",
      "369:   },",
      "370:   {",
      "371:    Desc:           \"openRedirectCarriageReturn1\",",
      "372:    Redirect:       \"/\\r/evil.com\",",
      "373:    ExpectedResult: false,",
      "374:   },",
      "375:   {",
      "376:    Desc:           \"openRedirectCarriageReturn2\",",
      "377:    Redirect:       \"/\\r\\\\evil.com\",",
      "378:    ExpectedResult: false,",
      "379:   },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d69fd6af22751974364e35cc697f9eaaaef160d3",
      "candidate_info": {
        "commit_hash": "d69fd6af22751974364e35cc697f9eaaaef160d3",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/d69fd6af22751974364e35cc697f9eaaaef160d3",
        "files": [
          "CHANGELOG.md",
          "docs/configuration/configuration.md",
          "http.go",
          "main.go",
          "oauthproxy.go",
          "pkg/apis/options/legacy_options.go",
          "pkg/apis/options/logging.go",
          "pkg/authentication/basic/htpasswd.go",
          "pkg/cookies/cookies.go",
          "pkg/logger/logger.go",
          "pkg/middleware/basic_session.go",
          "pkg/middleware/jwt_session.go",
          "pkg/middleware/stored_session.go",
          "pkg/sessions/cookie/session_store.go",
          "pkg/sessions/redis/redis_store.go",
          "pkg/upstream/proxy.go",
          "pkg/validation/logging.go",
          "pkg/validation/options.go",
          "providers/azure.go",
          "providers/bitbucket.go",
          "providers/google.go",
          "providers/internal_util.go",
          "providers/keycloak.go",
          "providers/provider_data.go",
          "validator.go",
          "watcher.go",
          "watcher_unsupported.go"
        ],
        "message": "Allow Logging to stdout with separate Error Log Channel (#718)\n\n* Add dedicated error logging writer\n\n* Document new errors to stdout flag\n\n* Update changelog\n\n* Thread-safe the log buffer\n\n* Address feedback\n\n* Remove duplication by adding log level\n\n* Clean up error formatting\n\n* Apply suggestions from code review\n\nCo-authored-by: Joel Speed <Joel.speed@hotmail.co.uk>",
        "before_after_code_files": [
          "http.go||http.go",
          "main.go||main.go",
          "oauthproxy.go||oauthproxy.go",
          "pkg/apis/options/legacy_options.go||pkg/apis/options/legacy_options.go",
          "pkg/apis/options/logging.go||pkg/apis/options/logging.go",
          "pkg/authentication/basic/htpasswd.go||pkg/authentication/basic/htpasswd.go",
          "pkg/cookies/cookies.go||pkg/cookies/cookies.go",
          "pkg/logger/logger.go||pkg/logger/logger.go",
          "pkg/middleware/basic_session.go||pkg/middleware/basic_session.go",
          "pkg/middleware/jwt_session.go||pkg/middleware/jwt_session.go",
          "pkg/middleware/stored_session.go||pkg/middleware/stored_session.go",
          "pkg/sessions/cookie/session_store.go||pkg/sessions/cookie/session_store.go",
          "pkg/sessions/redis/redis_store.go||pkg/sessions/redis/redis_store.go",
          "pkg/upstream/proxy.go||pkg/upstream/proxy.go",
          "pkg/validation/logging.go||pkg/validation/logging.go",
          "pkg/validation/options.go||pkg/validation/options.go",
          "providers/azure.go||providers/azure.go",
          "providers/bitbucket.go||providers/bitbucket.go",
          "providers/google.go||providers/google.go",
          "providers/internal_util.go||providers/internal_util.go",
          "providers/keycloak.go||providers/keycloak.go",
          "providers/provider_data.go||providers/provider_data.go",
          "validator.go||validator.go",
          "watcher.go||watcher.go",
          "watcher_unsupported.go||watcher_unsupported.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "http.go||http.go": [
          "File: http.go -> http.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  err := srv.Serve(listener)",
          "108:  if err != nil && !errors.Is(err, http.ErrServerClosed) {",
          "110:  }",
          "111:  <-idleConnsClosed",
          "112: }",
          "",
          "[Removed Lines]",
          "109:   logger.Printf(\"ERROR: http.Serve() - %s\", err)",
          "",
          "[Added Lines]",
          "109:   logger.Errorf(\"ERROR: http.Serve() - %s\", err)",
          "",
          "---------------"
        ],
        "main.go||main.go": [
          "File: main.go -> main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  legacyOpts := options.NewLegacyOptions()",
          "39:  err = options.Load(*config, flagSet, legacyOpts)",
          "40:  if err != nil {",
          "42:   os.Exit(1)",
          "43:  }",
          "45:  opts, err := legacyOpts.ToOptions()",
          "46:  if err != nil {",
          "48:   os.Exit(1)",
          "49:  }",
          "",
          "[Removed Lines]",
          "41:   logger.Printf(\"ERROR: Failed to load config: %v\", err)",
          "47:   logger.Printf(\"ERROR: Failed to convert config: %v\", err)",
          "",
          "[Added Lines]",
          "41:   logger.Errorf(\"ERROR: Failed to load config: %v\", err)",
          "47:   logger.Errorf(\"ERROR: Failed to convert config: %v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  validator := NewValidator(opts.EmailDomains, opts.AuthenticatedEmailsFile)",
          "58:  oauthproxy, err := NewOAuthProxy(opts, validator)",
          "59:  if err != nil {",
          "61:   os.Exit(1)",
          "62:  }",
          "",
          "[Removed Lines]",
          "60:   logger.Printf(\"ERROR: Failed to initialise OAuth2 Proxy: %v\", err)",
          "",
          "[Added Lines]",
          "60:   logger.Errorf(\"ERROR: Failed to initialise OAuth2 Proxy: %v\", err)",
          "",
          "---------------"
        ],
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:    domain = h",
          "338:   }",
          "339:   if !strings.HasSuffix(domain, cookieDomain) {",
          "341:   }",
          "342:  }",
          "",
          "[Removed Lines]",
          "340:    logger.Printf(\"Warning: request host is %q but using configured cookie domain of %q\", domain, cookieDomain)",
          "",
          "[Added Lines]",
          "340:    logger.Errorf(\"Warning: request host is %q but using configured cookie domain of %q\", domain, cookieDomain)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:  redirectURL, err := p.GetRedirect(req)",
          "425:  if err != nil {",
          "427:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "428:   return",
          "429:  }",
          "",
          "[Removed Lines]",
          "426:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "",
          "[Added Lines]",
          "426:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "624:  remoteAddr, err := ip.GetClientIP(p.realClientIPParser, req)",
          "625:  if err != nil {",
          "628:   return false",
          "629:  }",
          "",
          "[Removed Lines]",
          "626:   logger.Printf(\"Error obtaining real IP for trusted IP list: %v\", err)",
          "",
          "[Added Lines]",
          "626:   logger.Errorf(\"Error obtaining real IP for trusted IP list: %v\", err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "666: func (p *OAuthProxy) SignIn(rw http.ResponseWriter, req *http.Request) {",
          "667:  redirect, err := p.GetRedirect(req)",
          "668:  if err != nil {",
          "670:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "671:   return",
          "672:  }",
          "",
          "[Removed Lines]",
          "669:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "",
          "[Added Lines]",
          "669:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "718: func (p *OAuthProxy) SignOut(rw http.ResponseWriter, req *http.Request) {",
          "719:  redirect, err := p.GetRedirect(req)",
          "720:  if err != nil {",
          "722:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "723:   return",
          "724:  }",
          "725:  err = p.ClearSessionCookie(rw, req)",
          "726:  if err != nil {",
          "728:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "729:   return",
          "730:  }",
          "",
          "[Removed Lines]",
          "721:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "727:   logger.Printf(\"Error clearing session cookie: %v\", err)",
          "",
          "[Added Lines]",
          "721:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "727:   logger.Errorf(\"Error clearing session cookie: %v\", err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "736:  prepareNoCache(rw)",
          "737:  nonce, err := encryption.Nonce()",
          "738:  if err != nil {",
          "740:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "741:   return",
          "742:  }",
          "743:  p.SetCSRFCookie(rw, req, nonce)",
          "744:  redirect, err := p.GetRedirect(req)",
          "745:  if err != nil {",
          "747:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "748:   return",
          "749:  }",
          "",
          "[Removed Lines]",
          "739:   logger.Printf(\"Error obtaining nonce: %v\", err)",
          "746:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "",
          "[Added Lines]",
          "739:   logger.Errorf(\"Error obtaining nonce: %v\", err)",
          "746:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "760:  err := req.ParseForm()",
          "761:  if err != nil {",
          "763:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "764:   return",
          "765:  }",
          "766:  errorString := req.Form.Get(\"error\")",
          "767:  if errorString != \"\" {",
          "769:   p.ErrorPage(rw, http.StatusForbidden, \"Permission Denied\", errorString)",
          "770:   return",
          "771:  }",
          "773:  session, err := p.redeemCode(req.Context(), req.Host, req.Form.Get(\"code\"))",
          "774:  if err != nil {",
          "776:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", \"Internal Error\")",
          "777:   return",
          "778:  }",
          "780:  s := strings.SplitN(req.Form.Get(\"state\"), \":\", 2)",
          "781:  if len(s) != 2 {",
          "783:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", \"Invalid State\")",
          "784:   return",
          "785:  }",
          "",
          "[Removed Lines]",
          "762:   logger.Printf(\"Error while parsing OAuth2 callback: %v\", err)",
          "768:   logger.Printf(\"Error while parsing OAuth2 callback: %s\", errorString)",
          "775:   logger.Printf(\"Error redeeming code during OAuth2 callback: %v\", err)",
          "782:   logger.Printf(\"Error while parsing OAuth2 state: invalid length\")",
          "",
          "[Added Lines]",
          "762:   logger.Errorf(\"Error while parsing OAuth2 callback: %v\", err)",
          "768:   logger.Errorf(\"Error while parsing OAuth2 callback: %s\", errorString)",
          "775:   logger.Errorf(\"Error redeeming code during OAuth2 callback: %v\", err)",
          "782:   logger.Error(\"Error while parsing OAuth2 state: invalid length\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "866:  default:",
          "869:   p.ErrorPage(rw, http.StatusInternalServerError,",
          "870:    \"Internal Error\", \"Internal Error\")",
          "871:  }",
          "",
          "[Removed Lines]",
          "868:   logger.Printf(\"Unexpected internal error: %s\", err)",
          "",
          "[Added Lines]",
          "868:   logger.Errorf(\"Unexpected internal error: %v\", err)",
          "",
          "---------------"
        ],
        "pkg/apis/options/legacy_options.go||pkg/apis/options/legacy_options.go": [
          "File: pkg/apis/options/legacy_options.go -> pkg/apis/options/legacy_options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   case \"static\":",
          "92:    responseCode, err := strconv.Atoi(u.Host)",
          "93:    if err != nil {",
          "95:     responseCode = 200",
          "96:    }",
          "97:    upstream.Static = true",
          "",
          "[Removed Lines]",
          "94:     logger.Printf(\"unable to convert %q to int, use default \\\"200\\\"\", u.Host)",
          "",
          "[Added Lines]",
          "94:     logger.Errorf(\"unable to convert %q to int, use default \\\"200\\\"\", u.Host)",
          "",
          "---------------"
        ],
        "pkg/apis/options/logging.go||pkg/apis/options/logging.go": [
          "File: pkg/apis/options/logging.go -> pkg/apis/options/logging.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  RequestFormat   string         `flag:\"request-logging-format\" cfg:\"request_logging_format\"`",
          "14:  StandardEnabled bool           `flag:\"standard-logging\" cfg:\"standard_logging\"`",
          "15:  StandardFormat  string         `flag:\"standard-logging-format\" cfg:\"standard_logging_format\"`",
          "16:  ExcludePaths    []string       `flag:\"exclude-logging-path\" cfg:\"exclude_logging_paths\"`",
          "17:  LocalTime       bool           `flag:\"logging-local-time\" cfg:\"logging_local_time\"`",
          "18:  SilencePing     bool           `flag:\"silence-ping-logging\" cfg:\"silence_ping_logging\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  ErrToInfo       bool           `flag:\"errors-to-info-log\" cfg:\"errors_to_info_log\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  flagSet.String(\"standard-logging-format\", logger.DefaultStandardLoggingFormat, \"Template for standard log lines\")",
          "38:  flagSet.Bool(\"request-logging\", true, \"Log HTTP requests\")",
          "39:  flagSet.String(\"request-logging-format\", logger.DefaultRequestLoggingFormat, \"Template for HTTP request log lines\")",
          "41:  flagSet.StringSlice(\"exclude-logging-path\", []string{}, \"Exclude logging requests to paths (eg: '/path1,/path2,/path3')\")",
          "42:  flagSet.Bool(\"logging-local-time\", true, \"If the time in log files and backup filenames are local or UTC time\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  flagSet.Bool(\"errors-to-info-log\", false, \"Log errors to the standard logging\u00a0channel instead of stderr\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:   RequestFormat:   logger.DefaultRequestLoggingFormat,",
          "64:   StandardEnabled: true,",
          "65:   StandardFormat:  logger.DefaultStandardLoggingFormat,",
          "66:   File: LogFileOptions{",
          "67:    Filename:   \"\",",
          "68:    MaxSize:    100,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   ErrToInfo:       false,",
          "",
          "---------------"
        ],
        "pkg/authentication/basic/htpasswd.go||pkg/authentication/basic/htpasswd.go": [
          "File: pkg/authentication/basic/htpasswd.go -> pkg/authentication/basic/htpasswd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  }",
          "83:  return h, nil",
          "84: }",
          "",
          "[Removed Lines]",
          "81:   logger.Printf(\"Invalid htpasswd entry for %s. Must be a SHA or bcrypt entry.\", user)",
          "",
          "[Added Lines]",
          "81:   logger.Errorf(\"Invalid htpasswd entry for %s. Must be a SHA or bcrypt entry.\", user)",
          "",
          "---------------"
        ],
        "pkg/cookies/cookies.go||pkg/cookies/cookies.go": [
          "File: pkg/cookies/cookies.go -> pkg/cookies/cookies.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:    host = h",
          "21:   }",
          "22:   if !strings.HasSuffix(host, domain) {",
          "24:   }",
          "25:  }",
          "",
          "[Removed Lines]",
          "23:    logger.Printf(\"Warning: request host is %q but using configured cookie domain of %q\", host, domain)",
          "",
          "[Added Lines]",
          "23:    logger.Errorf(\"Warning: request host is %q but using configured cookie domain of %q\", host, domain)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   return MakeCookie(req, name, value, cookieOpts.Path, domain, cookieOpts.HTTPOnly, cookieOpts.Secure, expiration, now, ParseSameSite(cookieOpts.SameSite))",
          "46:  }",
          "49:  defaultDomain := \"\"",
          "50:  if len(cookieOpts.Domains) > 0 {",
          "51:   defaultDomain = cookieOpts.Domains[len(cookieOpts.Domains)-1]",
          "",
          "[Removed Lines]",
          "48:  logger.Printf(\"Warning: request host %q did not match any of the specific cookie domains of %q\", GetRequestHost(req), strings.Join(cookieOpts.Domains, \",\"))",
          "",
          "[Added Lines]",
          "48:  logger.Errorf(\"Warning: request host %q did not match any of the specific cookie domains of %q\", GetRequestHost(req), strings.Join(cookieOpts.Domains, \",\"))",
          "",
          "---------------"
        ],
        "pkg/logger/logger.go||pkg/logger/logger.go": [
          "File: pkg/logger/logger.go -> pkg/logger/logger.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package logger",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"io\"",
          "6:  \"net/http\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:  \"bytes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: type AuthStatus string",
          "18: const (",
          "20:  DefaultStandardLoggingFormat = \"[{{.Timestamp}}] [{{.File}}] {{.Message}}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: type Level int",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:  LUTC",
          "40:  LstdFlags = Lshortfile",
          "41: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  DEFAULT Level = iota",
          "49:  ERROR",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:  mu             sync.Mutex",
          "88:  flag           int",
          "89:  writer         io.Writer",
          "90:  stdEnabled     bool",
          "91:  authEnabled    bool",
          "92:  reqEnabled     bool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:  errWriter      io.Writer",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101: func New(flag int) *Logger {",
          "102:  return &Logger{",
          "104:   flag:           flag,",
          "105:   stdEnabled:     true,",
          "106:   authEnabled:    true,",
          "",
          "[Removed Lines]",
          "103:   writer:         os.Stderr,",
          "",
          "[Added Lines]",
          "113:   writer:         os.Stdout,",
          "114:   errWriter:      os.Stderr,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116: var std = New(LstdFlags)",
          "125:  now := time.Now()",
          "126:  file := \"???:0\"",
          "",
          "[Removed Lines]",
          "120: func (l *Logger) Output(calldepth int, message string) {",
          "121:  if !l.stdEnabled {",
          "122:   return",
          "123:  }",
          "",
          "[Added Lines]",
          "129: func (l *Logger) formatLogMessage(calldepth int, message string) []byte {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "129:   file = l.GetFileLineString(calldepth + 1)",
          "130:  }",
          "136:   Timestamp: FormatTimestamp(now),",
          "137:   File:      file,",
          "138:   Message:   message,",
          "",
          "[Removed Lines]",
          "132:  l.mu.Lock()",
          "133:  defer l.mu.Unlock()",
          "135:  err := l.stdLogTemplate.Execute(l.writer, stdLogMessageData{",
          "",
          "[Added Lines]",
          "137:  var logBuff = new(bytes.Buffer)",
          "138:  err := l.stdLogTemplate.Execute(logBuff, stdLogMessageData{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "145:  if err != nil {",
          "146:   panic(err)",
          "147:  }",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  logBuff.Write([]byte(\"\\n\"))",
          "153:  return logBuff.Bytes()",
          "154: }",
          "158: func (l *Logger) Output(lvl Level, calldepth int, message string) {",
          "159:  l.mu.Lock()",
          "160:  defer l.mu.Unlock()",
          "161:  if !l.stdEnabled {",
          "162:   return",
          "163:  }",
          "164:  msg := l.formatLogMessage(calldepth, message)",
          "165:  switch lvl {",
          "166:  case ERROR:",
          "167:   l.errWriter.Write(msg)",
          "168:  default:",
          "169:   l.writer.Write(msg)",
          "170:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "302:  l.stdEnabled = e",
          "303: }",
          "306: func (l *Logger) SetAuthEnabled(e bool) {",
          "307:  l.mu.Lock()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: func (l *Logger) SetErrToInfo(e bool) {",
          "330:  l.mu.Lock()",
          "331:  defer l.mu.Unlock()",
          "332:  if e {",
          "333:   l.errWriter = l.writer",
          "334:  } else {",
          "335:   l.errWriter = os.Stderr",
          "336:  }",
          "337: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "371:  std.SetFlags(flag)",
          "372: }",
          "375: func SetOutput(w io.Writer) {",
          "376:  std.mu.Lock()",
          "377:  defer std.mu.Unlock()",
          "378:  std.writer = w",
          "379: }",
          "383: func SetStandardEnabled(e bool) {",
          "384:  std.SetStandardEnabled(e)",
          "385: }",
          "389: func SetAuthEnabled(e bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416: func SetErrOutput(w io.Writer) {",
          "417:  std.mu.Lock()",
          "418:  defer std.mu.Unlock()",
          "419:  std.errWriter = w",
          "420: }",
          "430: func SetErrToInfo(e bool) {",
          "431:  std.SetErrToInfo(e)",
          "432: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "430: func Print(v ...interface{}) {",
          "432: }",
          "436: func Printf(format string, v ...interface{}) {",
          "438: }",
          "442: func Println(v ...interface{}) {",
          "444: }",
          "447: func Fatal(v ...interface{}) {",
          "449:  os.Exit(1)",
          "450: }",
          "453: func Fatalf(format string, v ...interface{}) {",
          "455:  os.Exit(1)",
          "456: }",
          "459: func Fatalln(v ...interface{}) {",
          "461:  os.Exit(1)",
          "462: }",
          "465: func Panic(v ...interface{}) {",
          "466:  s := fmt.Sprint(v...)",
          "468:  panic(s)",
          "469: }",
          "472: func Panicf(format string, v ...interface{}) {",
          "473:  s := fmt.Sprintf(format, v...)",
          "475:  panic(s)",
          "476: }",
          "479: func Panicln(v ...interface{}) {",
          "480:  s := fmt.Sprintln(v...)",
          "482:  panic(s)",
          "483: }",
          "",
          "[Removed Lines]",
          "431:  std.Output(2, fmt.Sprint(v...))",
          "437:  std.Output(2, fmt.Sprintf(format, v...))",
          "443:  std.Output(2, fmt.Sprintln(v...))",
          "448:  std.Output(2, fmt.Sprint(v...))",
          "454:  std.Output(2, fmt.Sprintf(format, v...))",
          "460:  std.Output(2, fmt.Sprintln(v...))",
          "467:  std.Output(2, s)",
          "474:  std.Output(2, s)",
          "481:  std.Output(2, s)",
          "",
          "[Added Lines]",
          "478:  std.Output(DEFAULT, 2, fmt.Sprint(v...))",
          "484:  std.Output(DEFAULT, 2, fmt.Sprintf(format, v...))",
          "490:  std.Output(DEFAULT, 2, fmt.Sprintln(v...))",
          "491: }",
          "495: func Error(v ...interface{}) {",
          "496:  std.Output(ERROR, 2, fmt.Sprint(v...))",
          "497: }",
          "501: func Errorf(format string, v ...interface{}) {",
          "502:  std.Output(ERROR, 2, fmt.Sprintf(format, v...))",
          "503: }",
          "507: func Errorln(v ...interface{}) {",
          "508:  std.Output(ERROR, 2, fmt.Sprintln(v...))",
          "513:  std.Output(ERROR, 2, fmt.Sprint(v...))",
          "519:  std.Output(ERROR, 2, fmt.Sprintf(format, v...))",
          "525:  std.Output(ERROR, 2, fmt.Sprintln(v...))",
          "532:  std.Output(ERROR, 2, s)",
          "539:  std.Output(ERROR, 2, s)",
          "546:  std.Output(ERROR, 2, s)",
          "",
          "---------------"
        ],
        "pkg/middleware/basic_session.go||pkg/middleware/basic_session.go": [
          "File: pkg/middleware/basic_session.go -> pkg/middleware/basic_session.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   session, err := getBasicSession(validator, req)",
          "36:   if err != nil {",
          "38:   }",
          "",
          "[Removed Lines]",
          "37:    logger.Printf(\"Error retrieving session from token in Authorization header: %v\", err)",
          "",
          "[Added Lines]",
          "37:    logger.Errorf(\"Error retrieving session from token in Authorization header: %v\", err)",
          "",
          "---------------"
        ],
        "pkg/middleware/jwt_session.go||pkg/middleware/jwt_session.go": [
          "File: pkg/middleware/jwt_session.go -> pkg/middleware/jwt_session.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   session, err := j.getJwtSession(req)",
          "59:   if err != nil {",
          "61:   }",
          "",
          "[Removed Lines]",
          "60:    logger.Printf(\"Error retrieving session from token in Authorization header: %v\", err)",
          "",
          "[Added Lines]",
          "60:    logger.Errorf(\"Error retrieving session from token in Authorization header: %v\", err)",
          "",
          "---------------"
        ],
        "pkg/middleware/stored_session.go||pkg/middleware/stored_session.go": [
          "File: pkg/middleware/stored_session.go -> pkg/middleware/stored_session.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   if err != nil {",
          "76:    err = s.store.Clear(rw, req)",
          "77:    if err != nil {",
          "79:    }",
          "80:   }",
          "",
          "[Removed Lines]",
          "75:    logger.Printf(\"Error loading cookied session: %v, removing session\", err)",
          "78:     logger.Printf(\"Error removing session: %v\", err)",
          "",
          "[Added Lines]",
          "75:    logger.Errorf(\"Error loading cookied session: %v, removing session\", err)",
          "78:     logger.Errorf(\"Error removing session: %v\", err)",
          "",
          "---------------"
        ],
        "pkg/sessions/cookie/session_store.go||pkg/sessions/cookie/session_store.go": [
          "File: pkg/sessions/cookie/session_store.go -> pkg/sessions/cookie/session_store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   return []*http.Cookie{c}",
          "177:  }",
          "181:  cookies := []*http.Cookie{}",
          "182:  valueBytes := []byte(c.Value)",
          "",
          "[Removed Lines]",
          "179:  logger.Printf(\"WARNING: Multiple cookies are required for this session as it exceeds the 4kb cookie limit. Please use server side session storage (eg. Redis) instead.\")",
          "",
          "[Added Lines]",
          "179:  logger.Errorf(\"WARNING: Multiple cookies are required for this session as it exceeds the 4kb cookie limit. Please use server side session storage (eg. Redis) instead.\")",
          "",
          "---------------"
        ],
        "pkg/sessions/redis/redis_store.go||pkg/sessions/redis/redis_store.go": [
          "File: pkg/sessions/redis/redis_store.go -> pkg/sessions/redis/redis_store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:  if opts.CAPath != \"\" {",
          "122:   rootCAs, err := x509.SystemCertPool()",
          "123:   if err != nil {",
          "125:   }",
          "126:   if rootCAs == nil {",
          "127:    rootCAs = x509.NewCertPool()",
          "",
          "[Removed Lines]",
          "124:    logger.Printf(\"failed to load system cert pool for redis connection, falling back to empty cert pool\")",
          "",
          "[Added Lines]",
          "124:    logger.Errorf(\"failed to load system cert pool for redis connection, falling back to empty cert pool\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   if ok := rootCAs.AppendCertsFromPEM(certs); !ok {",
          "137:   }",
          "139:   opt.TLSConfig.RootCAs = rootCAs",
          "",
          "[Removed Lines]",
          "136:    logger.Printf(\"no certs appended, using system certs only\")",
          "",
          "[Added Lines]",
          "136:    logger.Errorf(\"no certs appended, using system certs only\")",
          "",
          "---------------"
        ],
        "pkg/upstream/proxy.go||pkg/upstream/proxy.go": [
          "File: pkg/upstream/proxy.go -> pkg/upstream/proxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: func NewProxyErrorHandler(errorTemplate *template.Template, proxyPrefix string) ProxyErrorHandler {",
          "76:  return func(rw http.ResponseWriter, req *http.Request, proxyErr error) {",
          "78:   rw.WriteHeader(http.StatusBadGateway)",
          "79:   data := struct {",
          "80:    Title       string",
          "",
          "[Removed Lines]",
          "77:   logger.Printf(\"Error proxying to upstream server: %v\", proxyErr)",
          "",
          "[Added Lines]",
          "77:   logger.Errorf(\"Error proxying to upstream server: %v\", proxyErr)",
          "",
          "---------------"
        ],
        "pkg/validation/logging.go||pkg/validation/logging.go": [
          "File: pkg/validation/logging.go -> pkg/validation/logging.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  if !o.StandardEnabled && !o.AuthEnabled && !o.RequestEnabled {",
          "44:  }",
          "47:  logger.SetStandardEnabled(o.StandardEnabled)",
          "48:  logger.SetAuthEnabled(o.AuthEnabled)",
          "49:  logger.SetReqEnabled(o.RequestEnabled)",
          "50:  logger.SetStandardTemplate(o.StandardFormat)",
          "",
          "[Removed Lines]",
          "43:   logger.Print(\"Warning: Logging disabled. No further logs will be shown.\")",
          "",
          "[Added Lines]",
          "43:   logger.Error(\"Warning: Logging disabled. No further logs will be shown.\")",
          "48:  logger.SetErrToInfo(o.ErrToInfo)",
          "",
          "---------------"
        ],
        "pkg/validation/options.go||pkg/validation/options.go": [
          "File: pkg/validation/options.go -> pkg/validation/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     Do().",
          "93:     UnmarshalJSON()",
          "94:    if err != nil {",
          "96:    } else {",
          "",
          "[Removed Lines]",
          "95:     logger.Printf(\"error: failed to discover OIDC configuration: %v\", err)",
          "",
          "[Added Lines]",
          "95:     logger.Errorf(\"error: failed to discover OIDC configuration: %v\", err)",
          "",
          "---------------"
        ],
        "providers/azure.go||providers/azure.go": [
          "File: providers/azure.go -> providers/azure.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  email, err = json.Get(\"userPrincipalName\").String()",
          "204:  if err != nil {",
          "206:   return \"\", err",
          "207:  }",
          "209:  if email == \"\" {",
          "211:   return \"\", err",
          "212:  }",
          "",
          "[Removed Lines]",
          "205:   logger.Printf(\"failed making request %s\", err)",
          "210:   logger.Printf(\"failed to get email address\")",
          "",
          "[Added Lines]",
          "205:   logger.Errorf(\"failed making request %s\", err)",
          "210:   logger.Errorf(\"failed to get email address\")",
          "",
          "---------------"
        ],
        "providers/bitbucket.go||providers/bitbucket.go": [
          "File: providers/bitbucket.go -> providers/bitbucket.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   Do().",
          "108:   UnmarshalInto(&emails)",
          "109:  if err != nil {",
          "111:   return \"\", err",
          "112:  }",
          "",
          "[Removed Lines]",
          "110:   logger.Printf(\"failed making request: %v\", err)",
          "",
          "[Added Lines]",
          "110:   logger.Errorf(\"failed making request: %v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:    Do().",
          "124:    UnmarshalInto(&teams)",
          "125:   if err != nil {",
          "127:    return \"\", err",
          "128:   }",
          "129:   var found = false",
          "",
          "[Removed Lines]",
          "126:    logger.Printf(\"failed requesting teams membership: %v\", err)",
          "",
          "[Added Lines]",
          "126:    logger.Errorf(\"failed requesting teams membership: %v\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:    }",
          "135:   }",
          "136:   if !found {",
          "138:    return \"\", nil",
          "139:   }",
          "140:  }",
          "",
          "[Removed Lines]",
          "137:    logger.Print(\"team membership test failed, access denied\")",
          "",
          "[Added Lines]",
          "137:    logger.Error(\"team membership test failed, access denied\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:    Do().",
          "154:    UnmarshalInto(&repositories)",
          "155:   if err != nil {",
          "157:    return \"\", err",
          "158:   }",
          "",
          "[Removed Lines]",
          "156:    logger.Printf(\"failed checking repository access: %v\", err)",
          "",
          "[Added Lines]",
          "156:    logger.Errorf(\"failed checking repository access: %v\", err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:    }",
          "166:   }",
          "167:   if !found {",
          "169:    return \"\", nil",
          "170:   }",
          "171:  }",
          "",
          "[Removed Lines]",
          "168:    logger.Print(\"repository access test failed, access denied\")",
          "",
          "[Added Lines]",
          "168:    logger.Error(\"repository access test failed, access denied\")",
          "",
          "---------------"
        ],
        "providers/google.go||providers/google.go": [
          "File: providers/google.go -> providers/google.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:    gerr, ok := err.(*googleapi.Error)",
          "213:    switch {",
          "214:    case ok && gerr.Code == 404:",
          "216:    case ok && gerr.Code == 400:",
          "",
          "[Removed Lines]",
          "215:     logger.Printf(\"error checking membership in group %s: group does not exist\", group)",
          "",
          "[Added Lines]",
          "215:     logger.Errorf(\"error checking membership in group %s: group does not exist\", group)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:     r, err := req.Do()",
          "224:     if err != nil {",
          "226:      continue",
          "227:     }",
          "",
          "[Removed Lines]",
          "225:      logger.Printf(\"error using get API to check member %s of google group %s: user not in the group\", email, group)",
          "",
          "[Added Lines]",
          "225:      logger.Errorf(\"error using get API to check member %s of google group %s: user not in the group\", email, group)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:      return true",
          "233:     }",
          "234:    default:",
          "236:    }",
          "237:    continue",
          "238:   }",
          "",
          "[Removed Lines]",
          "235:     logger.Printf(\"error checking group membership: %v\", err)",
          "",
          "[Added Lines]",
          "235:     logger.Errorf(\"error checking group membership: %v\", err)",
          "",
          "---------------"
        ],
        "providers/internal_util.go||providers/internal_util.go": [
          "File: providers/internal_util.go -> providers/internal_util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: func stripParam(param, endpoint string) string {",
          "25:  u, err := url.Parse(endpoint)",
          "26:  if err != nil {",
          "28:   return endpoint",
          "29:  }",
          "31:  if u.RawQuery != \"\" {",
          "32:   values, err := url.ParseQuery(u.RawQuery)",
          "33:   if err != nil {",
          "35:    return u.String()",
          "36:   }",
          "",
          "[Removed Lines]",
          "27:   logger.Printf(\"error attempting to strip %s: %s\", param, err)",
          "34:    logger.Printf(\"error attempting to strip %s: %s\", param, err)",
          "",
          "[Added Lines]",
          "27:   logger.Errorf(\"error attempting to strip %s: %s\", param, err)",
          "34:    logger.Errorf(\"error attempting to strip %s: %s\", param, err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   WithHeaders(header).",
          "62:   Do()",
          "63:  if result.Error() != nil {",
          "66:   return false",
          "67:  }",
          "",
          "[Removed Lines]",
          "64:   logger.Printf(\"GET %s\", stripToken(endpoint))",
          "65:   logger.Printf(\"token validation request failed: %s\", result.Error())",
          "",
          "[Added Lines]",
          "64:   logger.Errorf(\"GET %s\", stripToken(endpoint))",
          "65:   logger.Errorf(\"token validation request failed: %s\", result.Error())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:  if result.StatusCode() == 200 {",
          "72:   return true",
          "73:  }",
          "75:  return false",
          "76: }",
          "",
          "[Removed Lines]",
          "74:  logger.Printf(\"token validation request failed: status %d - %s\", result.StatusCode(), result.Body())",
          "",
          "[Added Lines]",
          "74:  logger.Errorf(\"token validation request failed: status %d - %s\", result.StatusCode(), result.Body())",
          "",
          "---------------"
        ],
        "providers/keycloak.go||providers/keycloak.go": [
          "File: providers/keycloak.go -> providers/keycloak.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   Do().",
          "71:   UnmarshalJSON()",
          "72:  if err != nil {",
          "74:   return \"\", err",
          "75:  }",
          "",
          "[Removed Lines]",
          "73:   logger.Printf(\"failed making request %s\", err)",
          "",
          "[Added Lines]",
          "73:   logger.Errorf(\"failed making request %s\", err)",
          "",
          "---------------"
        ],
        "providers/provider_data.go||providers/provider_data.go": [
          "File: providers/provider_data.go -> providers/provider_data.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  fileClientSecret, err := ioutil.ReadFile(p.ClientSecretFile)",
          "41:  if err != nil {",
          "43:   return \"\", errors.New(\"could not read client secret file\")",
          "44:  }",
          "45:  return string(fileClientSecret), nil",
          "",
          "[Removed Lines]",
          "42:   logger.Printf(\"error reading client secret file %s: %s\", p.ClientSecretFile, err)",
          "",
          "[Added Lines]",
          "42:   logger.Errorf(\"error reading client secret file %s: %s\", p.ClientSecretFile, err)",
          "",
          "---------------"
        ],
        "validator.go||validator.go": [
          "File: validator.go -> validator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  csvReader.TrimLeadingSpace = true",
          "63:  records, err := csvReader.ReadAll()",
          "64:  if err != nil {",
          "66:   return",
          "67:  }",
          "68:  updated := make(map[string]bool)",
          "",
          "[Removed Lines]",
          "65:   logger.Printf(\"error reading authenticated-emails-file=%q, %s\", um.usersFile, err)",
          "",
          "[Added Lines]",
          "65:   logger.Errorf(\"error reading authenticated-emails-file=%q, %s\", um.usersFile, err)",
          "",
          "---------------"
        ],
        "watcher.go||watcher.go": [
          "File: watcher.go -> watcher.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     logger.Printf(\"reloading after event: %s\", event)",
          "70:     action()",
          "71:    case err = <-watcher.Errors:",
          "73:    }",
          "74:   }",
          "75:  }()",
          "",
          "[Removed Lines]",
          "72:     logger.Printf(\"error watching %s: %s\", filename, err)",
          "",
          "[Added Lines]",
          "72:     logger.Errorf(\"error watching %s: %s\", filename, err)",
          "",
          "---------------"
        ],
        "watcher_unsupported.go||watcher_unsupported.go": [
          "File: watcher_unsupported.go -> watcher_unsupported.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import \"github.com/oauth2-proxy/oauth2-proxy/pkg/logger\"",
          "7: func WatchForUpdates(filename string, done <-chan bool, action func()) {",
          "9:  go func() { <-done }()",
          "10: }",
          "",
          "[Removed Lines]",
          "8:  logger.Printf(\"file watching not implemented on this platform\")",
          "",
          "[Added Lines]",
          "8:  logger.Errorf(\"file watching not implemented on this platform\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d74a51cd70875362b09d77f3d5f9824d3d4d564",
      "candidate_info": {
        "commit_hash": "1d74a51cd70875362b09d77f3d5f9824d3d4d564",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/1d74a51cd70875362b09d77f3d5f9824d3d4d564",
        "files": [
          "CHANGELOG.md",
          "docs/docs/configuration/overview.md",
          "oauthproxy.go",
          "oauthproxy_test.go",
          "pkg/util/util.go",
          "pkg/util/util_test.go"
        ],
        "message": "Use X-Forwarded-{Proto,Host,Uri} on redirect as last resort (#957)",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go",
          "pkg/util/util.go||pkg/util/util.go",
          "pkg/util/util_test.go||pkg/util/util_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  SetAuthorization     bool",
          "99:  PassAuthorization    bool",
          "100:  PreferEmailToUser    bool",
          "101:  skipAuthPreflight    bool",
          "102:  skipJwtBearerTokens  bool",
          "103:  templates            *template.Template",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:  ReverseProxy         bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   UserInfoPath:      fmt.Sprintf(\"%s/userinfo\", opts.ProxyPrefix),",
          "202:   ProxyPrefix:          opts.ProxyPrefix,",
          "203:   provider:             opts.GetProvider(),",
          "204:   providerNameOverride: opts.ProviderName,",
          "205:   sessionStore:         sessionStore,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   ReverseProxy:         opts.ReverseProxy,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:  if req.Form.Get(\"rd\") != \"\" {",
          "579:   redirect = req.Form.Get(\"rd\")",
          "580:  }",
          "581:  if !p.IsValidRedirect(redirect) {",
          "583:   redirect = req.URL.RequestURI()",
          "585:    redirect = \"/\"",
          "586:   }",
          "587:  }",
          "",
          "[Removed Lines]",
          "584:   if strings.HasPrefix(redirect, p.ProxyPrefix) {",
          "",
          "[Added Lines]",
          "587:  if redirect == \"\" && isForwardedRequest(req, p.ReverseProxy) {",
          "588:   redirect = p.getRedirectFromForwardHeaders(req)",
          "589:  }",
          "594:   if strings.HasPrefix(redirect, fmt.Sprintf(\"%s/\", p.ProxyPrefix)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "589:  return",
          "590: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: func (p *OAuthProxy) getRedirectFromForwardHeaders(req *http.Request) string {",
          "604:  uri := util.GetRequestURI(req)",
          "606:  if strings.HasPrefix(uri, fmt.Sprintf(\"%s/\", p.ProxyPrefix)) {",
          "607:   uri = \"/\"",
          "608:  }",
          "610:  return fmt.Sprintf(\"%s://%s%s\", util.GetRequestProto(req), util.GetRequestHost(req), uri)",
          "611: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "686:  return false",
          "687: }",
          "690: var noCacheHeaders = map[string]string{",
          "691:  \"Expires\":         time.Unix(0, 0).Format(time.RFC1123),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "711: func isForwardedRequest(req *http.Request, reverseProxy bool) bool {",
          "712:  isForwarded := req.Host != util.GetRequestHost(req)",
          "713:  return isForwarded && reverseProxy",
          "714: }",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1751: func TestGetRedirect(t *testing.T) {",
          "1752:  opts := baseTestOptions()",
          "1753:  err := validation.Validate(opts)",
          "1754:  assert.NoError(t, err)",
          "1755:  require.NotEmpty(t, opts.ProxyPrefix)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1753:  opts.WhitelistDomains = append(opts.WhitelistDomains, \".example.com\")",
          "1754:  opts.WhitelistDomains = append(opts.WhitelistDomains, \".example.com:8443\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1761:  tests := []struct {",
          "1762:   name             string",
          "1763:   url              string",
          "1764:   expectedRedirect string",
          "1765:  }{",
          "1766:   {",
          "1767:    name:             \"request outside of ProxyPrefix redirects to original URL\",",
          "1768:    url:              \"/foo/bar\",",
          "1769:    expectedRedirect: \"/foo/bar\",",
          "1770:   },",
          "1771:   {",
          "1772:    name:             \"request with query preserves query\",",
          "1773:    url:              \"/foo?bar\",",
          "1774:    expectedRedirect: \"/foo?bar\",",
          "1775:   },",
          "1776:   {",
          "1777:    name:             \"request under ProxyPrefix redirects to root\",",
          "1778:    url:              proxy.ProxyPrefix + \"/foo/bar\",",
          "1779:    expectedRedirect: \"/\",",
          "1780:   },",
          "1781:  }",
          "1782:  for _, tt := range tests {",
          "1783:   t.Run(tt.name, func(t *testing.T) {",
          "1784:    req, _ := http.NewRequest(\"GET\", tt.url, nil)",
          "1785:    redirect, err := proxy.GetRedirect(req)",
          "1787:    assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1766:   headers          map[string]string",
          "1767:   reverseProxy     bool",
          "1773:    headers:          nil,",
          "1774:    reverseProxy:     false,",
          "1780:    headers:          nil,",
          "1781:    reverseProxy:     false,",
          "1787:    headers:          nil,",
          "1788:    reverseProxy:     false,",
          "1791:   {",
          "1792:    name: \"proxied request outside of ProxyPrefix redirects to proxied URL\",",
          "1793:    url:  \"https://oauth.example.com/foo/bar\",",
          "1794:    headers: map[string]string{",
          "1795:     \"X-Forwarded-Proto\": \"https\",",
          "1796:     \"X-Forwarded-Host\":  \"a-service.example.com\",",
          "1797:     \"X-Forwarded-Uri\":   \"/foo/bar\",",
          "1798:    },",
          "1799:    reverseProxy:     true,",
          "1800:    expectedRedirect: \"https://a-service.example.com/foo/bar\",",
          "1801:   },",
          "1802:   {",
          "1803:    name: \"non-proxied request with spoofed proxy headers wouldn't redirect\",",
          "1804:    url:  \"https://oauth.example.com/foo?bar\",",
          "1805:    headers: map[string]string{",
          "1806:     \"X-Forwarded-Proto\": \"https\",",
          "1807:     \"X-Forwarded-Host\":  \"a-service.example.com\",",
          "1808:     \"X-Forwarded-Uri\":   \"/foo/bar\",",
          "1809:    },",
          "1810:    reverseProxy:     false,",
          "1811:    expectedRedirect: \"/foo?bar\",",
          "1812:   },",
          "1813:   {",
          "1814:    name: \"proxied request under ProxyPrefix redirects to root\",",
          "1815:    url:  \"https://oauth.example.com\" + proxy.ProxyPrefix + \"/foo/bar\",",
          "1816:    headers: map[string]string{",
          "1817:     \"X-Forwarded-Proto\": \"https\",",
          "1818:     \"X-Forwarded-Host\":  \"a-service.example.com\",",
          "1819:     \"X-Forwarded-Uri\":   proxy.ProxyPrefix + \"/foo/bar\",",
          "1820:    },",
          "1821:    reverseProxy:     true,",
          "1822:    expectedRedirect: \"https://a-service.example.com/\",",
          "1823:   },",
          "1824:   {",
          "1825:    name: \"proxied request with port under ProxyPrefix redirects to root\",",
          "1826:    url:  \"https://oauth.example.com\" + proxy.ProxyPrefix + \"/foo/bar\",",
          "1827:    headers: map[string]string{",
          "1828:     \"X-Forwarded-Proto\": \"https\",",
          "1829:     \"X-Forwarded-Host\":  \"a-service.example.com:8443\",",
          "1830:     \"X-Forwarded-Uri\":   proxy.ProxyPrefix + \"/foo/bar\",",
          "1831:    },",
          "1832:    reverseProxy:     true,",
          "1833:    expectedRedirect: \"https://a-service.example.com:8443/\",",
          "1834:   },",
          "1835:   {",
          "1836:    name: \"proxied request with missing uri header would still redirect to desired redirect\",",
          "1837:    url:  \"https://oauth.example.com/foo?bar\",",
          "1838:    headers: map[string]string{",
          "1839:     \"X-Forwarded-Proto\": \"https\",",
          "1840:     \"X-Forwarded-Host\":  \"a-service.example.com\",",
          "1841:    },",
          "1842:    reverseProxy:     true,",
          "1843:    expectedRedirect: \"https://a-service.example.com/foo?bar\",",
          "1844:   },",
          "1845:   {",
          "1846:    name:             \"request with headers proxy not being set (and reverse proxy enabled) would still redirect to desired redirect\",",
          "1847:    url:              \"https://oauth.example.com/foo?bar\",",
          "1848:    headers:          nil,",
          "1849:    reverseProxy:     true,",
          "1850:    expectedRedirect: \"/foo?bar\",",
          "1851:   },",
          "1852:   {",
          "1853:    name: \"proxied request with X-Auth-Request-Redirect being set outside of ProxyPrefix redirects to proxied URL\",",
          "1854:    url:  \"https://oauth.example.com/foo/bar\",",
          "1855:    headers: map[string]string{",
          "1856:     \"X-Auth-Request-Redirect\": \"https://a-service.example.com/foo/bar\",",
          "1857:     \"X-Forwarded-Proto\":       \"\",",
          "1858:     \"X-Forwarded-Host\":        \"\",",
          "1859:     \"X-Forwarded-Uri\":         \"\",",
          "1860:    },",
          "1861:    reverseProxy:     true,",
          "1862:    expectedRedirect: \"https://a-service.example.com/foo/bar\",",
          "1863:   },",
          "1864:   {",
          "1865:    name:             \"proxied request with rd query string redirects to proxied URL\",",
          "1866:    url:              \"https://oauth.example.com/foo/bar?rd=https%3A%2F%2Fa%2Dservice%2Eexample%2Ecom%2Ffoo%2Fbar\",",
          "1867:    headers:          nil,",
          "1868:    reverseProxy:     false,",
          "1869:    expectedRedirect: \"https://a-service.example.com/foo/bar\",",
          "1870:   },",
          "1871:   {",
          "1872:    name: \"proxied request with rd query string and all headers set (and reverse proxy not enabled) redirects to proxied URL on rd query string\",",
          "1873:    url:  \"https://oauth.example.com/foo/bar?rd=https%3A%2F%2Fa%2Dservice%2Eexample%2Ecom%2Ffoo%2Fjazz\",",
          "1874:    headers: map[string]string{",
          "1875:     \"X-Auth-Request-Redirect\": \"https://a-service.example.com/foo/baz\",",
          "1876:     \"X-Forwarded-Proto\":       \"http\",",
          "1877:     \"X-Forwarded-Host\":        \"another-service.example.com\",",
          "1878:     \"X-Forwarded-Uri\":         \"/seasons/greetings\",",
          "1879:    },",
          "1880:    reverseProxy:     false,",
          "1881:    expectedRedirect: \"https://a-service.example.com/foo/jazz\",",
          "1882:   },",
          "1883:   {",
          "1884:    name: \"proxied request with rd query string and some headers set redirects to proxied URL on rd query string\",",
          "1885:    url:  \"https://oauth.example.com/foo/bar?rd=https%3A%2F%2Fa%2Dservice%2Eexample%2Ecom%2Ffoo%2Fbaz\",",
          "1886:    headers: map[string]string{",
          "1887:     \"X-Auth-Request-Redirect\": \"\",",
          "1888:     \"X-Forwarded-Proto\":       \"https\",",
          "1889:     \"X-Forwarded-Host\":        \"another-service.example.com\",",
          "1890:     \"X-Forwarded-Uri\":         \"/seasons/greetings\",",
          "1891:    },",
          "1892:    reverseProxy:     true,",
          "1893:    expectedRedirect: \"https://a-service.example.com/foo/baz\",",
          "1894:   },",
          "1899:    for header, value := range tt.headers {",
          "1900:     if value != \"\" {",
          "1901:      req.Header.Add(header, value)",
          "1902:     }",
          "1903:    }",
          "1904:    proxy.ReverseProxy = tt.reverseProxy",
          "",
          "---------------"
        ],
        "pkg/util/util.go||pkg/util/util.go": [
          "File: pkg/util/util.go -> pkg/util/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  return pool, nil",
          "26: }",
          "29: func GetRequestHost(req *http.Request) string {",
          "30:  host := req.Header.Get(\"X-Forwarded-Host\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: func GetRequestProto(req *http.Request) string {",
          "30:  proto := req.Header.Get(\"X-Forwarded-Proto\")",
          "31:  if proto == \"\" {",
          "32:   proto = req.URL.Scheme",
          "33:  }",
          "34:  return proto",
          "35: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  }",
          "34:  return host",
          "35: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: func GetRequestURI(req *http.Request) string {",
          "48:  uri := req.Header.Get(\"X-Forwarded-Uri\")",
          "49:  if uri == \"\" {",
          "51:   uri = req.URL.RequestURI()",
          "52:  }",
          "53:  return uri",
          "54: }",
          "",
          "---------------"
        ],
        "pkg/util/util_test.go||pkg/util/util_test.go": [
          "File: pkg/util/util_test.go -> pkg/util/util_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  extHost := GetRequestHost(proxyReq)",
          "111:  g.Expect(extHost).To(Equal(\"external.example.com\"))",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: func TestGetRequestProto(t *testing.T) {",
          "115:  g := NewWithT(t)",
          "117:  req := httptest.NewRequest(\"GET\", \"https://example.com\", nil)",
          "118:  proto := GetRequestProto(req)",
          "119:  g.Expect(proto).To(Equal(\"https\"))",
          "121:  proxyReq := httptest.NewRequest(\"GET\", \"https://internal.example.com\", nil)",
          "122:  proxyReq.Header.Add(\"X-Forwarded-Proto\", \"http\")",
          "123:  extProto := GetRequestProto(proxyReq)",
          "124:  g.Expect(extProto).To(Equal(\"http\"))",
          "125: }",
          "127: func TestGetRequestURI(t *testing.T) {",
          "128:  g := NewWithT(t)",
          "130:  req := httptest.NewRequest(\"GET\", \"https://example.com/ping\", nil)",
          "131:  uri := GetRequestURI(req)",
          "132:  g.Expect(uri).To(Equal(\"/ping\"))",
          "134:  proxyReq := httptest.NewRequest(\"GET\", \"http://internal.example.com/bong\", nil)",
          "135:  proxyReq.Header.Add(\"X-Forwarded-Uri\", \"/ping\")",
          "136:  extURI := GetRequestURI(proxyReq)",
          "137:  g.Expect(extURI).To(Equal(\"/ping\"))",
          "138: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc756b9de33e7e87f6e134f7cfd10455d2a9fbb8",
      "candidate_info": {
        "commit_hash": "dc756b9de33e7e87f6e134f7cfd10455d2a9fbb8",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/dc756b9de33e7e87f6e134f7cfd10455d2a9fbb8",
        "files": [
          "CHANGELOG.md",
          "oauthproxy.go"
        ],
        "message": "Don't log invalid redirect if redirect is empty",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "599: func (p *OAuthProxy) IsValidRedirect(redirect string) bool {",
          "600:  switch {",
          "601:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !invalidRedirectRegex.MatchString(redirect):",
          "602:   return true",
          "603:  case strings.HasPrefix(redirect, \"http://\") || strings.HasPrefix(redirect, \"https://\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:  case redirect == \"\":",
          "603:   return false",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45222395e0a5976ad312249ab6399487116c2605",
      "candidate_info": {
        "commit_hash": "45222395e0a5976ad312249ab6399487116c2605",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/45222395e0a5976ad312249ab6399487116c2605",
        "files": [
          "oauthproxy.go",
          "pkg/logger/logger.go",
          "pkg/sessions/persistence/manager.go"
        ],
        "message": "Attempt to log still on template errors",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "pkg/logger/logger.go||pkg/logger/logger.go",
          "pkg/sessions/persistence/manager.go||pkg/sessions/persistence/manager.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "647: func (p *OAuthProxy) SignIn(rw http.ResponseWriter, req *http.Request) {",
          "648:  redirect, err := p.GetRedirect(req)",
          "649:  if err != nil {",
          "651:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "652:   return",
          "653:  }",
          "",
          "[Removed Lines]",
          "650:   logger.Printf(\"Error obtaining redirect: %s\", err.Error())",
          "",
          "[Added Lines]",
          "650:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:   session := &sessionsapi.SessionState{User: user}",
          "658:   err = p.SaveSession(rw, req, session)",
          "659:   if err != nil {",
          "661:    p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "662:    return",
          "663:   }",
          "",
          "[Removed Lines]",
          "660:    logger.Printf(\"Error saving session: %s\", err.Error())",
          "",
          "[Added Lines]",
          "660:    logger.Printf(\"Error saving session: %v\", err)",
          "",
          "---------------"
        ],
        "pkg/logger/logger.go||pkg/logger/logger.go": [
          "File: pkg/logger/logger.go -> pkg/logger/logger.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   File:      file,",
          "138:   Message:   message,",
          "139:  })",
          "140:  if err != nil {",
          "142:  }",
          "144:  _, err = l.writer.Write([]byte(\"\\n\"))",
          "",
          "[Removed Lines]",
          "141:   panic(err)",
          "",
          "[Added Lines]",
          "142:   _, ferr := fmt.Fprintf(l.writer, \"[%s] [%s] %s\",",
          "143:    FormatTimestamp(now),",
          "144:    file,",
          "145:    message)",
          "146:   if ferr != nil {",
          "147:    panic(ferr)",
          "148:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:   Status:        string(status),",
          "178:   Message:       fmt.Sprintf(format, a...),",
          "179:  })",
          "180:  if err != nil {",
          "182:  }",
          "184:  _, err = l.writer.Write([]byte(\"\\n\"))",
          "",
          "[Removed Lines]",
          "181:   panic(err)",
          "",
          "[Added Lines]",
          "189:   _, ferr := fmt.Fprintf(l.writer, \"%s - %s [%s] [%s] %s\",",
          "190:    client,",
          "191:    username,",
          "192:    FormatTimestamp(now),",
          "193:    string(status),",
          "194:    fmt.Sprintf(format, a...))",
          "195:   if ferr != nil {",
          "196:    panic(ferr)",
          "197:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:   UserAgent:       fmt.Sprintf(\"%q\", req.UserAgent()),",
          "235:   Username:        username,",
          "236:  })",
          "237:  if err != nil {",
          "239:  }",
          "241:  _, err = l.writer.Write([]byte(\"\\n\"))",
          "",
          "[Removed Lines]",
          "238:   panic(err)",
          "",
          "[Added Lines]",
          "255:   _, ferr := fmt.Fprintf(l.writer, \"%s - %s [%s] %s %s %s %q %s %q %d %d %0.3f\",",
          "256:    client, username, FormatTimestamp(ts), req.Host, req.Method, upstream,",
          "257:    url.RequestURI(), req.Proto, req.UserAgent(), status, size, duration)",
          "258:   if ferr != nil {",
          "259:    panic(ferr)",
          "260:   }",
          "",
          "---------------"
        ],
        "pkg/sessions/persistence/manager.go||pkg/sessions/persistence/manager.go": [
          "File: pkg/sessions/persistence/manager.go -> pkg/sessions/persistence/manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   return err",
          "50:  }",
          "58: }",
          "",
          "[Removed Lines]",
          "52:  err = tckt.setCookie(rw, req, s)",
          "53:  if err != nil {",
          "54:   return err",
          "55:  }",
          "57:  return nil",
          "",
          "[Added Lines]",
          "52:  return tckt.setCookie(rw, req, s)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23b2355f852bf66aaccc47087003a1a3f4578fe7",
      "candidate_info": {
        "commit_hash": "23b2355f852bf66aaccc47087003a1a3f4578fe7",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/23b2355f852bf66aaccc47087003a1a3f4578fe7",
        "files": [
          "CHANGELOG.md",
          "oauthproxy.go",
          "oauthproxy_test.go"
        ],
        "message": "Allow group authZ in AuthOnly endpoint via Querystring",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:  case path == p.OAuthCallbackPath:",
          "745:   p.OAuthCallback(rw, req)",
          "746:  case path == p.AuthOnlyPath:",
          "748:  case path == p.UserInfoPath:",
          "749:   p.UserInfo(rw, req)",
          "750:  default:",
          "",
          "[Removed Lines]",
          "747:   p.AuthenticateOnly(rw, req)",
          "",
          "[Added Lines]",
          "747:   p.AuthOnly(rw, req)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "925:  }",
          "926: }",
          "930:  session, err := p.getAuthenticatedSession(rw, req)",
          "931:  if err != nil {",
          "932:   http.Error(rw, \"unauthorized request\", http.StatusUnauthorized)",
          "933:   return",
          "934:  }",
          "937:  p.addHeadersForProxying(rw, req, session)",
          "938:  p.headersChain.Then(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {",
          "",
          "[Removed Lines]",
          "929: func (p *OAuthProxy) AuthenticateOnly(rw http.ResponseWriter, req *http.Request) {",
          "",
          "[Added Lines]",
          "930: func (p *OAuthProxy) AuthOnly(rw http.ResponseWriter, req *http.Request) {",
          "939:  if !checkAllowedGroups(req, session) {",
          "940:   http.Error(rw, \"unauthorized request\", http.StatusUnauthorized)",
          "941:   return",
          "942:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:  return session, nil",
          "1017: }",
          "1020: func (p *OAuthProxy) addHeadersForProxying(rw http.ResponseWriter, req *http.Request, session *sessionsapi.SessionState) {",
          "1021:  if session.Email == \"\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1027: func checkAllowedGroups(req *http.Request, session *sessionsapi.SessionState) bool {",
          "1028:  allowedGroups := extractAllowedGroups(req)",
          "1029:  if len(allowedGroups) == 0 {",
          "1030:   return true",
          "1031:  }",
          "1033:  for _, group := range session.Groups {",
          "1034:   if _, ok := allowedGroups[group]; ok {",
          "1035:    return true",
          "1036:   }",
          "1037:  }",
          "1039:  return false",
          "1040: }",
          "1042: func extractAllowedGroups(req *http.Request) map[string]struct{} {",
          "1043:  groups := map[string]struct{}{}",
          "1044:  query := req.URL.Query()",
          "1047:  if multiGroups, ok := query[\"allowed_group\"]; ok {",
          "1048:   for _, group := range multiGroups {",
          "1049:    groups[group] = struct{}{}",
          "1050:   }",
          "1051:  }",
          "1054:  for _, group := range strings.Split(query.Get(\"allowed_groups\"), \",\") {",
          "1055:   if group != \"\" {",
          "1056:    groups[group] = struct{}{}",
          "1057:   }",
          "1058:  }",
          "1060:  return groups",
          "1061: }",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:  assert.Equal(t, http.StatusUnauthorized, test.rw.Code)",
          "1198: }",
          "1201:  pcTest, err := NewProcessCookieTestWithOptionsModifiers(modifiers...)",
          "1202:  if err != nil {",
          "1203:   return nil, err",
          "1204:  }",
          "1207:  return pcTest, nil",
          "1208: }",
          "1210: func TestAuthOnlyEndpointAccepted(t *testing.T) {",
          "1212:  if err != nil {",
          "1213:   t.Fatal(err)",
          "1214:  }",
          "",
          "[Removed Lines]",
          "1200: func NewAuthOnlyEndpointTest(modifiers ...OptionsModifier) (*ProcessCookieTest, error) {",
          "1205:  pcTest.req, _ = http.NewRequest(\"GET\",",
          "1206:   pcTest.opts.ProxyPrefix+\"/auth\", nil)",
          "1211:  test, err := NewAuthOnlyEndpointTest()",
          "",
          "[Added Lines]",
          "1200: func NewAuthOnlyEndpointTest(querystring string, modifiers ...OptionsModifier) (*ProcessCookieTest, error) {",
          "1205:  pcTest.req, _ = http.NewRequest(",
          "1206:   \"GET\",",
          "1207:   fmt.Sprintf(\"%s/auth%s\", pcTest.opts.ProxyPrefix, querystring),",
          "1208:   nil)",
          "1213:  test, err := NewAuthOnlyEndpointTest(\"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1226: }",
          "1228: func TestAuthOnlyEndpointUnauthorizedOnNoCookieSetError(t *testing.T) {",
          "1230:  if err != nil {",
          "1231:   t.Fatal(err)",
          "1232:  }",
          "",
          "[Removed Lines]",
          "1229:  test, err := NewAuthOnlyEndpointTest()",
          "",
          "[Added Lines]",
          "1231:  test, err := NewAuthOnlyEndpointTest(\"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1238: }",
          "1240: func TestAuthOnlyEndpointUnauthorizedOnExpiration(t *testing.T) {",
          "1242:   opts.Cookie.Expire = time.Duration(24) * time.Hour",
          "1243:  })",
          "1244:  if err != nil {",
          "",
          "[Removed Lines]",
          "1241:  test, err := NewAuthOnlyEndpointTest(func(opts *options.Options) {",
          "",
          "[Added Lines]",
          "1243:  test, err := NewAuthOnlyEndpointTest(\"\", func(opts *options.Options) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1258: }",
          "1260: func TestAuthOnlyEndpointUnauthorizedOnEmailValidationFailure(t *testing.T) {",
          "1262:  if err != nil {",
          "1263:   t.Fatal(err)",
          "1264:  }",
          "",
          "[Removed Lines]",
          "1261:  test, err := NewAuthOnlyEndpointTest()",
          "",
          "[Added Lines]",
          "1263:  test, err := NewAuthOnlyEndpointTest(\"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1960:  verifier := oidc.NewVerifier(\"https://issuer.example.com\", keyset,",
          "1961:   &oidc.Config{ClientID: \"https://test.myapp.com\", SkipExpiryCheck: true})",
          "1964:   opts.InjectRequestHeaders = []options.Header{",
          "1965:    {",
          "1966:     Name: \"Authorization\",",
          "",
          "[Removed Lines]",
          "1963:  test, err := NewAuthOnlyEndpointTest(func(opts *options.Options) {",
          "",
          "[Added Lines]",
          "1965:  test, err := NewAuthOnlyEndpointTest(\"\", func(opts *options.Options) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2692: }",
          "2694: func TestAuthOnlyAllowedGroups(t *testing.T) {",
          "2696:   name               string",
          "2697:   allowedGroups      []string",
          "2698:   groups             []string",
          "2699:   expectUnauthorized bool",
          "2700:  }{",
          "2705:  }",
          "2709:    emailAddress := \"test\"",
          "2710:    created := time.Now()",
          "2712:    session := &sessions.SessionState{",
          "2714:     Email:       emailAddress,",
          "2715:     AccessToken: \"oauth_token\",",
          "2716:     CreatedAt:   &created,",
          "2717:    }",
          "2721:    })",
          "2722:    if err != nil {",
          "2723:     t.Fatal(err)",
          "",
          "[Removed Lines]",
          "2695:  tests := []struct {",
          "2701:   {\"NoAllowedGroups\", []string{}, []string{}, false},",
          "2702:   {\"NoAllowedGroupsUserHasGroups\", []string{}, []string{\"a\", \"b\"}, false},",
          "2703:   {\"UserInAllowedGroup\", []string{\"a\"}, []string{\"a\", \"b\"}, false},",
          "2704:   {\"UserNotInAllowedGroup\", []string{\"a\"}, []string{\"c\"}, true},",
          "2707:  for _, tt := range tests {",
          "2708:   t.Run(tt.name, func(t *testing.T) {",
          "2713:     Groups:      tt.groups,",
          "2719:    test, err := NewAuthOnlyEndpointTest(func(opts *options.Options) {",
          "2720:     opts.AllowedGroups = tt.allowedGroups",
          "",
          "[Added Lines]",
          "2696:  testCases := []struct {",
          "2700:   querystring        string",
          "2703:   {",
          "2704:    name:               \"NoAllowedGroups\",",
          "2705:    allowedGroups:      []string{},",
          "2706:    groups:             []string{},",
          "2707:    querystring:        \"\",",
          "2708:    expectUnauthorized: false,",
          "2709:   },",
          "2710:   {",
          "2711:    name:               \"NoAllowedGroupsUserHasGroups\",",
          "2712:    allowedGroups:      []string{},",
          "2713:    groups:             []string{\"a\", \"b\"},",
          "2714:    querystring:        \"\",",
          "2715:    expectUnauthorized: false,",
          "2716:   },",
          "2717:   {",
          "2718:    name:               \"UserInAllowedGroup\",",
          "2719:    allowedGroups:      []string{\"a\"},",
          "2720:    groups:             []string{\"a\", \"b\"},",
          "2721:    querystring:        \"\",",
          "2722:    expectUnauthorized: false,",
          "2723:   },",
          "2724:   {",
          "2725:    name:               \"UserNotInAllowedGroup\",",
          "2726:    allowedGroups:      []string{\"a\"},",
          "2727:    groups:             []string{\"c\"},",
          "2728:    querystring:        \"\",",
          "2729:    expectUnauthorized: true,",
          "2730:   },",
          "2731:   {",
          "2732:    name:               \"UserInQuerystringGroup\",",
          "2733:    allowedGroups:      []string{\"a\", \"b\"},",
          "2734:    groups:             []string{\"a\", \"c\"},",
          "2735:    querystring:        \"?allowed_group=a\",",
          "2736:    expectUnauthorized: false,",
          "2737:   },",
          "2738:   {",
          "2739:    name:               \"UserInOnlyQuerystringGroup\",",
          "2740:    allowedGroups:      []string{},",
          "2741:    groups:             []string{\"a\", \"c\"},",
          "2742:    querystring:        \"?allowed_groups=a,b\",",
          "2743:    expectUnauthorized: false,",
          "2744:   },",
          "2745:   {",
          "2746:    name:               \"UserInMultiParamQuerystringGroup\",",
          "2747:    allowedGroups:      []string{\"a\", \"b\"},",
          "2748:    groups:             []string{\"b\"},",
          "2749:    querystring:        \"?allowed_group=a&allowed_group=b\",",
          "2750:    expectUnauthorized: false,",
          "2751:   },",
          "2752:   {",
          "2753:    name:               \"UserInDelimitedQuerystringGroup\",",
          "2754:    allowedGroups:      []string{\"a\", \"b\", \"c\"},",
          "2755:    groups:             []string{\"c\"},",
          "2756:    querystring:        \"?allowed_groups=a,c\",",
          "2757:    expectUnauthorized: false,",
          "2758:   },",
          "2759:   {",
          "2760:    name:               \"UserNotInQuerystringGroup\",",
          "2761:    allowedGroups:      []string{},",
          "2762:    groups:             []string{\"c\"},",
          "2763:    querystring:        \"?allowed_group=a&allowed_group=b\",",
          "2764:    expectUnauthorized: true,",
          "2765:   },",
          "2766:   {",
          "2767:    name:               \"UserInConfigGroupNotInQuerystringGroup\",",
          "2768:    allowedGroups:      []string{\"a\", \"b\", \"c\"},",
          "2769:    groups:             []string{\"c\"},",
          "2770:    querystring:        \"?allowed_group=a&allowed_group=b\",",
          "2771:    expectUnauthorized: true,",
          "2772:   },",
          "2773:   {",
          "2774:    name:               \"UserInQuerystringGroupNotInConfigGroup\",",
          "2775:    allowedGroups:      []string{\"a\", \"b\"},",
          "2776:    groups:             []string{\"c\"},",
          "2777:    querystring:        \"?allowed_groups=b,c\",",
          "2778:    expectUnauthorized: true,",
          "2779:   },",
          "2782:  for _, tc := range testCases {",
          "2783:   t.Run(tc.name, func(t *testing.T) {",
          "2788:     Groups:      tc.groups,",
          "2794:    test, err := NewAuthOnlyEndpointTest(tc.querystring, func(opts *options.Options) {",
          "2795:     opts.AllowedGroups = tc.allowedGroups",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2729:    test.proxy.ServeHTTP(test.rw, test.req)",
          "2732:     assert.Equal(t, http.StatusUnauthorized, test.rw.Code)",
          "2733:    } else {",
          "2734:     assert.Equal(t, http.StatusAccepted, test.rw.Code)",
          "",
          "[Removed Lines]",
          "2731:    if tt.expectUnauthorized {",
          "",
          "[Added Lines]",
          "2806:    if tc.expectUnauthorized {",
          "",
          "---------------"
        ]
      }
    }
  ]
}