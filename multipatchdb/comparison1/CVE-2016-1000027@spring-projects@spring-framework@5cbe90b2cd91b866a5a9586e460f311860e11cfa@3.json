{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c998a70bcfe0a0ee45b2abd6cb025f1f99a1e0f",
      "candidate_info": {
        "commit_hash": "7c998a70bcfe0a0ee45b2abd6cb025f1f99a1e0f",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/7c998a70bcfe0a0ee45b2abd6cb025f1f99a1e0f",
        "files": [
          "spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java"
        ],
        "message": "Quartz ResourceLoaderClassLoadHelper explicitly falls back to classpath lookup\n\nIssue: SPR-13706\n(cherry picked from commit 51f356f)",
        "before_after_code_files": [
          "spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java": [
          "File: spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java -> spring-context-support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.scheduling.quartz;",
          "20: import java.io.IOException;",
          "21: import java.io.InputStream;",
          "22: import java.net.URL;",
          "",
          "[Removed Lines]",
          "19: import java.io.FileNotFoundException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:  public URL getResource(String name) {",
          "84:   Resource resource = this.resourceLoader.getResource(name);",
          "90:   }",
          "94:   }",
          "95:  }",
          "97:  public InputStream getResourceAsStream(String name) {",
          "98:   Resource resource = this.resourceLoader.getResource(name);",
          "104:   }",
          "108:   }",
          "109:  }",
          "111:  public ClassLoader getClassLoader() {",
          "112:   return this.resourceLoader.getClassLoader();",
          "113:  }",
          "",
          "[Removed Lines]",
          "85:   try {",
          "86:    return resource.getURL();",
          "87:   }",
          "88:   catch (FileNotFoundException ex) {",
          "89:    return null;",
          "91:   catch (IOException ex) {",
          "92:    logger.warn(\"Could not load \" + resource);",
          "93:    return null;",
          "99:   try {",
          "100:    return resource.getInputStream();",
          "101:   }",
          "102:   catch (FileNotFoundException ex) {",
          "103:    return null;",
          "105:   catch (IOException ex) {",
          "106:    logger.warn(\"Could not load \" + resource);",
          "107:    return null;",
          "",
          "[Added Lines]",
          "84:   if (resource.exists()) {",
          "85:    try {",
          "86:     return resource.getURL();",
          "87:    }",
          "88:    catch (IOException ex) {",
          "89:     if (logger.isWarnEnabled()) {",
          "90:      logger.warn(\"Could not load \" + resource);",
          "91:     }",
          "92:     return null;",
          "93:    }",
          "95:   else {",
          "96:    return getClassLoader().getResource(name);",
          "102:   if (resource.exists()) {",
          "103:    try {",
          "104:     return resource.getInputStream();",
          "105:    }",
          "106:    catch (IOException ex) {",
          "107:     if (logger.isWarnEnabled()) {",
          "108:      logger.warn(\"Could not load \" + resource);",
          "109:     }",
          "110:     return null;",
          "111:    }",
          "113:   else {",
          "114:    return getClassLoader().getResourceAsStream(name);",
          "118:  @Override",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d6b0ca5bee3578c7a433f44d0d86cf5e521b10d",
      "candidate_info": {
        "commit_hash": "3d6b0ca5bee3578c7a433f44d0d86cf5e521b10d",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/3d6b0ca5bee3578c7a433f44d0d86cf5e521b10d",
        "files": [
          "spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java",
          "spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java"
        ],
        "message": "SpringCacheAnnotationParser properly accepts empty @Caching annotation\n\nIssue: SPR-14162",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java||spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java",
          "spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java||spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java||spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java": [
          "File: spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java -> spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   if (cachings != null) {",
          "71:    ops = lazyInit(ops);",
          "72:    for (Caching caching : cachings) {",
          "74:    }",
          "75:   }",
          "",
          "[Removed Lines]",
          "73:     ops.addAll(parseCachingAnnotation(ae, caching));",
          "",
          "[Added Lines]",
          "73:     Collection<CacheOperation> cachingOps = parseCachingAnnotation(ae, caching);",
          "74:     if (cachingOps != null) {",
          "75:      ops.addAll(cachingOps);",
          "76:     }",
          "",
          "---------------"
        ],
        "spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java||spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java": [
          "File: spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java -> spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.cache.annotation;",
          "21: import java.lang.annotation.ElementType;",
          "22: import java.lang.annotation.Retention;",
          "23: import java.lang.annotation.RetentionPolicy;",
          "",
          "[Removed Lines]",
          "19: import static org.junit.Assert.*;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import java.util.Iterator;",
          "29: import org.junit.Test;",
          "30: import org.springframework.cache.interceptor.CacheEvictOperation;",
          "31: import org.springframework.cache.interceptor.CacheOperation;",
          "32: import org.springframework.cache.interceptor.CacheableOperation;",
          "38: public class AnnotationCacheOperationSourceTests {",
          "47:  @Test",
          "48:  public void testSingularAnnotation() throws Exception {",
          "",
          "[Removed Lines]",
          "33: import org.springframework.util.ReflectionUtils;",
          "40:  private AnnotationCacheOperationSource source = new AnnotationCacheOperationSource();",
          "42:  private Collection<CacheOperation> getOps(String name) {",
          "43:   Method method = ReflectionUtils.findMethod(AnnotatedClass.class, name);",
          "44:   return source.getCacheOperations(method, AnnotatedClass.class);",
          "45:  }",
          "",
          "[Added Lines]",
          "33: import static org.junit.Assert.*;",
          "40:  private final AnnotationCacheOperationSource source = new AnnotationCacheOperationSource();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   assertTrue(it.next() instanceof CacheEvictOperation);",
          "70:  }",
          "72:  @Test",
          "73:  public void testSingularStereotype() throws Exception {",
          "74:   Collection<CacheOperation> ops = getOps(\"singleStereotype\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:  @Test",
          "69:  public void testEmptyCaching() throws Exception {",
          "70:   Collection<CacheOperation> ops = getOps(\"emptyCaching\");",
          "71:   assertTrue(ops.isEmpty());",
          "72:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:   assertTrue(next.getCacheNames().contains(\"bar\"));",
          "91:  }",
          "93:  private static class AnnotatedClass {",
          "94:   @Cacheable(\"test\")",
          "95:   public void singular() {",
          "96:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:  private Collection<CacheOperation> getOps(String name) throws Exception {",
          "97:   Method method = AnnotatedClass.class.getMethod(name);",
          "98:   return source.getCacheOperations(method, AnnotatedClass.class);",
          "99:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:   public void multiple() {",
          "101:   }",
          "104:   public void caching() {",
          "105:   }",
          "107:   @EvictFoo",
          "108:   public void singleStereotype() {",
          "110:   }",
          "112:   @EvictFoo",
          "",
          "[Removed Lines]",
          "103:   @Caching(cacheable = { @Cacheable(\"test\") }, evict = { @CacheEvict(\"test\") })",
          "",
          "[Added Lines]",
          "113:   @Caching(cacheable = @Cacheable(\"test\"), evict = @CacheEvict(\"test\"))",
          "117:   @Caching",
          "118:   public void emptyCaching() {",
          "119:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120:   }",
          "121:  }",
          "123:  @Retention(RetentionPolicy.RUNTIME)",
          "124:  @Target(ElementType.METHOD)",
          "125:  @Cacheable(\"foo\")",
          "126:  public @interface CacheableFoo {",
          "127:  }",
          "129:  @Retention(RetentionPolicy.RUNTIME)",
          "130:  @Target(ElementType.METHOD)",
          "132:  public @interface EvictFoo {",
          "133:  }",
          "135:  @Retention(RetentionPolicy.RUNTIME)",
          "136:  @Target(ElementType.METHOD)",
          "138:  public @interface EvictBar {",
          "139:  }",
          "",
          "[Removed Lines]",
          "131:  @CacheEvict(value = \"foo\")",
          "137:  @CacheEvict(value = \"bar\")",
          "140: }",
          "",
          "[Added Lines]",
          "146:  @CacheEvict(\"foo\")",
          "153:  @CacheEvict(\"bar\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07db535b37fc20ac9d327a5f3efe49f3eec3620f",
      "candidate_info": {
        "commit_hash": "07db535b37fc20ac9d327a5f3efe49f3eec3620f",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/07db535b37fc20ac9d327a5f3efe49f3eec3620f",
        "files": [
          "spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java"
        ],
        "message": "Polishing",
        "before_after_code_files": [
          "spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java||spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java||spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java": [
          "File: spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java -> spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:    }",
          "739:    catch (NamingException ex) {",
          "740:     if (logger.isDebugEnabled()) {",
          "743:     }",
          "744:    }",
          "745:   }",
          "",
          "[Removed Lines]",
          "741:      logger.debug(",
          "742:        \"No JTA TransactionSynchronizationRegistry found at default JNDI location [\" + jndiName + \"]\", ex);",
          "",
          "[Added Lines]",
          "740:      logger.debug(\"No JTA TransactionSynchronizationRegistry found at default JNDI location [\" + jndiName + \"]\", ex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:   catch (NotSupportedException ex) {",
          "827:    throw new NestedTransactionNotSupportedException(",
          "829:   }",
          "830:   catch (UnsupportedOperationException ex) {",
          "832:    throw new NestedTransactionNotSupportedException(",
          "834:   }",
          "835:   catch (SystemException ex) {",
          "836:    throw new CannotCreateTransactionException(\"JTA failure on begin\", ex);",
          "",
          "[Removed Lines]",
          "828:     \"JTA implementation does not support nested transactions\", ex);",
          "833:     \"JTA implementation does not support nested transactions\", ex);",
          "",
          "[Added Lines]",
          "826:      \"JTA implementation does not support nested transactions\", ex);",
          "831:      \"JTA implementation does not support nested transactions\", ex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "886:   if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {",
          "887:    throw new InvalidIsolationLevelException(",
          "890:   }",
          "891:  }",
          "",
          "[Removed Lines]",
          "888:     \"JtaTransactionManager does not support custom isolation levels by default - \" +",
          "889:     \"switch 'allowCustomIsolationLevels' to 'true'\");",
          "",
          "[Added Lines]",
          "886:      \"JtaTransactionManager does not support custom isolation levels by default - \" +",
          "887:      \"switch 'allowCustomIsolationLevels' to 'true'\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6a4981a9200f79fc33db32e2e4b59d22bf45d68",
      "candidate_info": {
        "commit_hash": "d6a4981a9200f79fc33db32e2e4b59d22bf45d68",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/d6a4981a9200f79fc33db32e2e4b59d22bf45d68",
        "files": [
          "spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java",
          "src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java"
        ],
        "message": "Polishing (cherry picked from commit 1e491f1)",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java||spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java",
          "src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java||src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java||spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java": [
          "File: spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java -> spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  public Trigger getTrigger() {",
          "49:  }",
          "50: }",
          "",
          "[Removed Lines]",
          "48:   return trigger;",
          "",
          "[Added Lines]",
          "48:   return this.trigger;",
          "",
          "---------------"
        ],
        "src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java||src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java": [
          "File: src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java -> src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: public class ScheduledAndTransactionalAnnotationIntegrationTests {",
          "52:  @Before",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: @SuppressWarnings(\"resource\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:   Assume.group(TestGroup.PERFORMANCE);",
          "55:  }",
          "57:  @Test",
          "58:  public void failsWhenJdkProxyAndScheduledMethodNotPresentOnInterface() {",
          "59:   AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();",
          "60:   ctx.register(Config.class, JdkProxyTxConfig.class, RepoConfigA.class);",
          "61:   try {",
          "62:    ctx.refresh();",
          "64:   }",
          "65:   catch (BeanCreationException ex) {",
          "66:    assertTrue(ex.getRootCause().getMessage().startsWith(\"@Scheduled method 'scheduled' found\"));",
          "",
          "[Removed Lines]",
          "63:    fail(\"expected exception\");",
          "",
          "[Added Lines]",
          "66:    fail(\"Should have thrown BeanCreationException\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:  @Configuration",
          "102:  @EnableTransactionManagement",
          "105:  @Configuration",
          "106:  @EnableTransactionManagement(proxyTargetClass=true)",
          "109:  @Configuration",
          "110:  static class RepoConfigA {",
          "111:   @Bean",
          "112:   public MyRepository repository() {",
          "113:    return new MyRepositoryImpl();",
          "114:   }",
          "115:  }",
          "117:  @Configuration",
          "118:  static class RepoConfigB {",
          "119:   @Bean",
          "120:   public MyRepositoryWithScheduledMethod repository() {",
          "121:    return new MyRepositoryWithScheduledMethodImpl();",
          "122:   }",
          "123:  }",
          "125:  @Configuration",
          "126:  @EnableScheduling",
          "127:  static class Config {",
          "",
          "[Removed Lines]",
          "103:  static class JdkProxyTxConfig { }",
          "107:  static class SubclassProxyTxConfig { }",
          "",
          "[Added Lines]",
          "106:  static class JdkProxyTxConfig {",
          "107:  }",
          "112:  static class SubclassProxyTxConfig {",
          "113:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:   @Bean",
          "140:   public PersistenceExceptionTranslator peTranslator() {",
          "143:   }",
          "144:  }",
          "146:  public interface MyRepository {",
          "147:   int getInvocationCount();",
          "148:  }",
          "150:  @Repository",
          "151:  static class MyRepositoryImpl implements MyRepository {",
          "",
          "[Removed Lines]",
          "141:    PersistenceExceptionTranslator txlator = mock(PersistenceExceptionTranslator.class);",
          "142:    return txlator;",
          "",
          "[Added Lines]",
          "152:    return mock(PersistenceExceptionTranslator.class);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:   }",
          "165:  }",
          "167:  public interface MyRepositoryWithScheduledMethod {",
          "168:   int getInvocationCount();",
          "170:  }",
          "172:  @Repository",
          "173:  static class MyRepositoryWithScheduledMethodImpl implements MyRepositoryWithScheduledMethod {",
          "",
          "[Removed Lines]",
          "169:   public void scheduled();",
          "",
          "[Added Lines]",
          "185:   void scheduled();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25cf96f6df4ff5fc97278fcbb0853c21b4b6a45c",
      "candidate_info": {
        "commit_hash": "25cf96f6df4ff5fc97278fcbb0853c21b4b6a45c",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/25cf96f6df4ff5fc97278fcbb0853c21b4b6a45c",
        "files": [
          "spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java",
          "spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java"
        ],
        "message": "AbstractRequestLoggingFilter ignores non-available query string\n\nIssue: SPR-14244\n(cherry picked from commit 0f2bc3f)",
        "before_after_code_files": [
          "spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java||spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java",
          "spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java||spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java||spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java": [
          "File: spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java -> spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:   msg.append(prefix);",
          "259:   msg.append(\"uri=\").append(request.getRequestURI());",
          "260:   if (isIncludeQueryString()) {",
          "262:   }",
          "263:   if (isIncludeClientInfo()) {",
          "264:    String client = request.getRemoteAddr();",
          "",
          "[Removed Lines]",
          "261:    msg.append('?').append(request.getQueryString());",
          "",
          "[Added Lines]",
          "261:    String queryString = request.getQueryString();",
          "262:    if (queryString != null) {",
          "263:     msg.append('?').append(queryString);",
          "264:    }",
          "",
          "---------------"
        ],
        "spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java||spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java": [
          "File: spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java -> spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import javax.servlet.http.HttpServletRequest;",
          "25: import javax.servlet.http.HttpServletResponse;",
          "28: import org.junit.Test;",
          "30: import org.springframework.mock.web.test.MockHttpServletRequest;",
          "",
          "[Removed Lines]",
          "27: import org.junit.Before;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import static org.junit.Assert.*;",
          "41: public class RequestLoggingFilterTests {",
          "52:  @Test",
          "",
          "[Removed Lines]",
          "43:  private MyRequestLoggingFilter filter;",
          "46:  @Before",
          "47:  public void createFilter() throws Exception {",
          "48:   filter = new MyRequestLoggingFilter();",
          "49:  }",
          "",
          "[Added Lines]",
          "43:  private final MyRequestLoggingFilter filter = new MyRequestLoggingFilter();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:  }",
          "72:  @Test",
          "74:   filter.setIncludeQueryString(true);",
          "77:   MockHttpServletResponse response = new MockHttpServletResponse();",
          "79:   request.setQueryString(\"booking=42\");",
          "81:   FilterChain filterChain = new NoOpFilterChain();",
          "83:   filter.doFilter(request, response, filterChain);",
          "85:   assertNotNull(filter.beforeRequestMessage);",
          "88:   assertNotNull(filter.afterRequestMessage);",
          "90:  }",
          "92:  @Test",
          "",
          "[Removed Lines]",
          "73:  public void queryString() throws Exception {",
          "76:   final MockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/hotels\");",
          "86:   assertTrue(filter.beforeRequestMessage.contains(\"uri=/hotels?booking=42\"));",
          "89:   assertTrue(filter.afterRequestMessage.contains(\"uri=/hotels?booking=42\"));",
          "",
          "[Added Lines]",
          "67:  public void queryStringIncluded() throws Exception {",
          "70:   MockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/hotels\");",
          "76:   filter.doFilter(request, response, filterChain);",
          "78:   assertNotNull(filter.beforeRequestMessage);",
          "79:   assertTrue(filter.beforeRequestMessage.contains(\"[uri=/hotels?booking=42]\"));",
          "81:   assertNotNull(filter.afterRequestMessage);",
          "82:   assertTrue(filter.afterRequestMessage.contains(\"[uri=/hotels?booking=42]\"));",
          "83:  }",
          "85:  @Test",
          "86:  public void noQueryStringAvailable() throws Exception {",
          "87:   filter.setIncludeQueryString(true);",
          "89:   MockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/hotels\");",
          "90:   MockHttpServletResponse response = new MockHttpServletResponse();",
          "92:   FilterChain filterChain = new NoOpFilterChain();",
          "96:   assertTrue(filter.beforeRequestMessage.contains(\"[uri=/hotels]\"));",
          "99:   assertTrue(filter.afterRequestMessage.contains(\"[uri=/hotels]\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:   final byte[] requestBody = \"Hello World\".getBytes(\"UTF-8\");",
          "100:   request.setContent(requestBody);",
          "103:    @Override",
          "104:    public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse)",
          "105:      throws IOException, ServletException {",
          "",
          "[Removed Lines]",
          "101:   FilterChain filterChain = new FilterChain() {",
          "",
          "[Added Lines]",
          "112:   FilterChain filterChain = new FilterChain() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:   final String requestBody = \"Hello World\";",
          "126:   request.setContent(requestBody.getBytes(\"UTF-8\"));",
          "129:    @Override",
          "130:    public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse)",
          "131:      throws IOException, ServletException {",
          "",
          "[Removed Lines]",
          "127:   FilterChain filterChain = new FilterChain() {",
          "",
          "[Added Lines]",
          "138:   FilterChain filterChain = new FilterChain() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:   final byte[] requestBody = \"Hello World\".getBytes(\"UTF-8\");",
          "153:   request.setContent(requestBody);",
          "156:    @Override",
          "157:    public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse)",
          "158:      throws IOException, ServletException {",
          "",
          "[Removed Lines]",
          "154:   FilterChain filterChain = new FilterChain() {",
          "",
          "[Added Lines]",
          "165:   FilterChain filterChain = new FilterChain() {",
          "",
          "---------------"
        ]
      }
    }
  ]
}