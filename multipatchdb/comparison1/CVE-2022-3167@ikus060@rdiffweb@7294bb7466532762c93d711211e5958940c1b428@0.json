{
  "cve_id": "CVE-2022-3167",
  "cve_desc": "Improper Restriction of Rendered UI Layers or Frames in GitHub repository ikus060/rdiffweb prior to 2.4.1.",
  "repo": "ikus060/rdiffweb",
  "patch_hash": "7294bb7466532762c93d711211e5958940c1b428",
  "patch_info": {
    "commit_hash": "7294bb7466532762c93d711211e5958940c1b428",
    "repo": "ikus060/rdiffweb",
    "commit_url": "https://github.com/ikus060/rdiffweb/commit/7294bb7466532762c93d711211e5958940c1b428",
    "files": [
      "README.md",
      "rdiffweb/controller/tests/test_csrf.py",
      "rdiffweb/tools/security.py"
    ],
    "message": "Add Clickjacking Defense",
    "before_after_code_files": [
      "rdiffweb/controller/tests/test_csrf.py||rdiffweb/controller/tests/test_csrf.py",
      "rdiffweb/tools/security.py||rdiffweb/tools/security.py"
    ]
  },
  "patch_diff": {
    "rdiffweb/controller/tests/test_csrf.py||rdiffweb/controller/tests/test_csrf.py": [
      "File: rdiffweb/controller/tests/test_csrf.py -> rdiffweb/controller/tests/test_csrf.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         self.getPage('/', method='POST')",
      "72:         # Then the request is accepted with 200 OK",
      "73:         self.assertStatus(200)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:     def test_clickjacking_defense(self):",
      "76:         # Given a POST request made to rdiffweb",
      "77:         # When the request is made without an origin",
      "78:         self.getPage('/')",
      "79:         # Then the request is accepted with 200 OK",
      "80:         self.assertStatus(200)",
      "81:         self.assertHeaderItemValue('X-Frame-Options', 'DENY')",
      "",
      "---------------"
    ],
    "rdiffweb/tools/security.py||rdiffweb/tools/security.py": [
      "File: rdiffweb/tools/security.py -> rdiffweb/tools/security.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     \"\"\"",
      "37:     This tool provide CSRF mitigation.",
      "43:     \"\"\"",
      "45:     def __init__(self):",
      "",
      "[Removed Lines]",
      "39:     First, by defining `SameSite=Lax` on the cookie",
      "40:     Second by validating the `Origin` and `Referer`.",
      "42:     Ref.: https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
      "",
      "[Added Lines]",
      "43:     Ref.:",
      "44:     https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
      "45:     https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:         self._priority = 71",
      "50:     def _setup(self):",
      "52:         return super()._setup()",
      "55:         # Awaiting bug fix in cherrypy",
      "56:         # https://github.com/cherrypy/cherrypy/issues/1767",
      "57:         # Force SameSite to Lax",
      "59:         if cookie:",
      "60:             cookie['samesite'] = 'Lax'",
      "",
      "[Removed Lines]",
      "51:         cherrypy.request.hooks.attach('before_finalize', self._set_same_site)",
      "54:     def _set_same_site(self):",
      "58:         cookie = cherrypy.serving.response.cookie.get('session_id', None)",
      "",
      "[Added Lines]",
      "54:         cherrypy.request.hooks.attach('before_finalize', self._set_headers)",
      "57:     def _set_headers(self):",
      "58:         response = cherrypy.serving.response",
      "59:         # Define X-Frame-Options to avoid Clickjacking",
      "60:         response.headers['X-Frame-Options'] = 'DENY'",
      "64:         cookie = response.cookie.get('session_id', None)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44f23983fa9ee60a5c15e63b278b84d2206cba50",
      "candidate_info": {
        "commit_hash": "44f23983fa9ee60a5c15e63b278b84d2206cba50",
        "repo": "ikus060/rdiffweb",
        "commit_url": "https://github.com/ikus060/rdiffweb/commit/44f23983fa9ee60a5c15e63b278b84d2206cba50",
        "files": [
          "rdiffweb/controller/api.py",
          "rdiffweb/controller/cherrypy_wtf.py",
          "rdiffweb/controller/dispatch.py",
          "rdiffweb/controller/filter_authentication.py",
          "rdiffweb/controller/page_login.py",
          "rdiffweb/controller/tests/test_controller.py",
          "rdiffweb/controller/tests/test_csrf.py",
          "rdiffweb/controller/tests/test_page_history.py",
          "rdiffweb/controller/tests/test_page_login.py",
          "rdiffweb/core/tests/test_i18n.py",
          "rdiffweb/rdw_app.py",
          "rdiffweb/templates/login.html",
          "rdiffweb/test.py",
          "rdiffweb/tools/auth_basic.py",
          "rdiffweb/tools/auth_form.py",
          "rdiffweb/tools/currentuser.py",
          "rdiffweb/tools/security.py"
        ],
        "message": "Improve authentication mechanics",
        "before_after_code_files": [
          "rdiffweb/controller/api.py||rdiffweb/controller/api.py",
          "rdiffweb/controller/cherrypy_wtf.py||rdiffweb/controller/cherrypy_wtf.py",
          "rdiffweb/controller/dispatch.py||rdiffweb/controller/dispatch.py",
          "rdiffweb/controller/filter_authentication.py||rdiffweb/controller/filter_authentication.py",
          "rdiffweb/controller/page_login.py||rdiffweb/controller/page_login.py",
          "rdiffweb/controller/tests/test_controller.py||rdiffweb/controller/tests/test_controller.py",
          "rdiffweb/controller/tests/test_csrf.py||rdiffweb/controller/tests/test_csrf.py",
          "rdiffweb/controller/tests/test_page_history.py||rdiffweb/controller/tests/test_page_history.py",
          "rdiffweb/controller/tests/test_page_login.py||rdiffweb/controller/tests/test_page_login.py",
          "rdiffweb/core/tests/test_i18n.py||rdiffweb/core/tests/test_i18n.py",
          "rdiffweb/rdw_app.py||rdiffweb/rdw_app.py",
          "rdiffweb/templates/login.html||rdiffweb/templates/login.html",
          "rdiffweb/test.py||rdiffweb/test.py",
          "rdiffweb/tools/auth_basic.py||rdiffweb/tools/auth_basic.py",
          "rdiffweb/tools/auth_form.py||rdiffweb/tools/auth_form.py",
          "rdiffweb/tools/currentuser.py||rdiffweb/tools/currentuser.py",
          "rdiffweb/tools/security.py||rdiffweb/tools/security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rdiffweb/controller/tests/test_csrf.py||rdiffweb/controller/tests/test_csrf.py",
            "rdiffweb/tools/security.py||rdiffweb/tools/security.py"
          ],
          "candidate": [
            "rdiffweb/controller/tests/test_csrf.py||rdiffweb/controller/tests/test_csrf.py",
            "rdiffweb/tools/security.py||rdiffweb/tools/security.py"
          ]
        }
      },
      "candidate_diff": {
        "rdiffweb/controller/api.py||rdiffweb/controller/api.py": [
          "File: rdiffweb/controller/api.py -> rdiffweb/controller/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: @cherrypy.tools.json_out(handler=json_handler)",
          "60: class ApiPage(Controller):",
          "61:     \"\"\"",
          "62:     This class provide a restful API to access some of the rdiffweb resources.",
          "",
          "[Removed Lines]",
          "54: @cherrypy.config(**{",
          "55:     'tools.authform.on': False,",
          "56:     'tools.i18n.on': False,",
          "57:     'tools.authbasic.on': True,",
          "58:     'tools.sessions.on': True,",
          "59:     'error_page.default': False})",
          "",
          "[Added Lines]",
          "54: @cherrypy.config(**{'error_page.default': False})",
          "55: @cherrypy.tools.auth_basic()",
          "56: @cherrypy.tools.auth_form(on=False)",
          "57: @cherrypy.tools.sessions(on=True)",
          "58: @cherrypy.tools.i18n(on=False)",
          "",
          "---------------"
        ],
        "rdiffweb/controller/cherrypy_wtf.py||rdiffweb/controller/cherrypy_wtf.py": [
          "File: rdiffweb/controller/cherrypy_wtf.py -> rdiffweb/controller/cherrypy_wtf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import cherrypy",
          "20: from wtforms.form import Form",
          "22: SUBMIT_METHODS = {'POST', 'PUT', 'PATCH', 'DELETE'}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from markupsafe import Markup, escape",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     def error_message(self):",
          "75:         if self.errors:",
          "76:             return ' '.join(['%s: %s' % (field, ', '.join(messages)) for field, messages in self.errors.items()])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     def __html__(self):",
          "80:         \"\"\"",
          "81:         Return a HTML representation of the form. For more powerful rendering, see the __call__() method.",
          "82:         \"\"\"",
          "83:         return self()",
          "85:     def __call__(self, div_class='form-outline', label_class='form-label', field_class='form-control', error_class='invalid-feedback'):",
          "87:         def generator():",
          "88:             for id, field in self._fields.items():",
          "89:                 if field.type == 'HiddenField':",
          "90:                     yield field(**{'class': field_class})",
          "91:                 else:",
          "92:                     yield Markup('<div class=\"%s\">' % escape(div_class))",
          "93:                     yield field.label(**{'class': label_class})",
          "94:                     yield field(**{'class': field_class})",
          "95:                     for error in field.errors:",
          "96:                         yield Markup('<div class=\"%s\">%s</div>' % (escape(error_class), escape(error)))",
          "97:                     yield Markup('</div>')",
          "98:         return Markup('').join(list(generator()))",
          "",
          "---------------"
        ],
        "rdiffweb/controller/dispatch.py||rdiffweb/controller/dispatch.py": [
          "File: rdiffweb/controller/dispatch.py -> rdiffweb/controller/dispatch.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         content_type = mimetypes.types_map.get(ext, None)  # @UndefinedVariable",
          "126:     @cherrypy.expose",
          "128:     def handler(*args, **kwargs):",
          "129:         if cherrypy.request.method not in ('GET', 'HEAD'):",
          "130:             return None",
          "",
          "[Removed Lines]",
          "127:     @cherrypy.config(**{'tools.authform.on': False, 'tools.sessions.on': False})",
          "",
          "[Added Lines]",
          "127:     @cherrypy.tools.auth_form(on=False)",
          "128:     @cherrypy.tools.sessions(on=False)",
          "",
          "---------------"
        ],
        "rdiffweb/controller/filter_authentication.py||rdiffweb/controller/filter_authentication.py": [
          "File: rdiffweb/controller/filter_authentication.py -> rdiffweb/controller/filter_authentication.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rdiffweb/controller/page_login.py||rdiffweb/controller/page_login.py": [
          "File: rdiffweb/controller/page_login.py -> rdiffweb/controller/page_login.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: # rdiffweb, A web interface to rdiff-backup repositories",
          "3: # Copyright (C) 2012-2021 rdiffweb contributors",
          "4: #",
          "5: # This program is free software: you can redistribute it and/or modify",
          "6: # it under the terms of the GNU General Public License as published by",
          "7: # the Free Software Foundation, either version 3 of the License, or",
          "8: # (at your option) any later version.",
          "9: #",
          "10: # This program is distributed in the hope that it will be useful,",
          "11: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: # GNU General Public License for more details.",
          "14: #",
          "15: # You should have received a copy of the GNU General Public License",
          "16: # along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "17: import logging",
          "19: import cherrypy",
          "20: from rdiffweb.controller import Controller, flash",
          "21: from rdiffweb.controller.cherrypy_wtf import CherryForm",
          "22: from rdiffweb.core.config import Option",
          "23: from rdiffweb.core.i18n import ugettext as _",
          "24: from wtforms.fields import PasswordField, StringField",
          "25: from wtforms.fields.simple import HiddenField",
          "26: from wtforms.validators import InputRequired",
          "28: from rdiffweb.tools.auth_form import SESSION_KEY",
          "30: # Define the logger",
          "31: logger = logging.getLogger(__name__)",
          "34: class LoginForm(CherryForm):",
          "35:     login = StringField(",
          "36:         _('Username'),",
          "37:         validators=[InputRequired()],",
          "38:         render_kw={",
          "39:             \"placeholder\": _('Username'),",
          "40:             \"autocorrect\": \"off\",",
          "41:             \"autocapitalize\": \"none\",",
          "42:             \"autocomplete\": \"off\",",
          "43:             \"autofocus\": \"autofocus\"})",
          "44:     password = PasswordField(",
          "45:         _('Password'),",
          "46:         validators=[InputRequired()],",
          "47:         render_kw={\"placeholder\": _('Password')})",
          "48:     # Sanitize the redirect URL to avoid Open Redirect",
          "49:     redirect = HiddenField(default='/', filters=[lambda v: v if v.startswith('/') else '/'])",
          "52: class LoginPage(Controller):",
          "53:     \"\"\"",
          "54:     This page is used by the authentication to enter a user/pass.",
          "55:     \"\"\"",
          "57:     _welcome_msg = Option(\"welcome_msg\")",
          "59:     @cherrypy.expose()",
          "60:     @cherrypy.config(**{'tools.auth_form.on': False})",
          "61:     def index(self, **kwargs):",
          "62:         form = LoginForm()",
          "63:         # Validate user's credentials",
          "64:         if form.validate_on_submit():",
          "65:             try:",
          "66:                 userobj = cherrypy.request.app.store.login(form.login.data, form.password.data)",
          "67:             except Exception:",
          "68:                 logger.exception('fail to validate credential')",
          "69:                 flash(_(\"Fail to validate user credential.\"))",
          "70:             else:",
          "71:                 if userobj:",
          "72:                     cherrypy.session[SESSION_KEY] = userobj.username",
          "73:                     raise cherrypy.HTTPRedirect(form.redirect.data)",
          "74:                 flash(_(\"Invalid username or password.\"))",
          "76:         params = {",
          "77:             'form': form",
          "78:         }",
          "80:         # Add welcome message to params. Try to load translated message.",
          "81:         if self._welcome_msg:",
          "82:             params[\"welcome_msg\"] = self._welcome_msg.get('')",
          "83:             if hasattr(cherrypy.response, 'i18n'):",
          "84:                 locale = cherrypy.response.i18n.locale.language",
          "85:                 params[\"welcome_msg\"] = self._welcome_msg.get(locale, params[\"welcome_msg\"])",
          "87:         return self._compile_template(\"login.html\", **params).encode(\"utf-8\")",
          "90: class LogoutPage(Controller):",
          "92:     @cherrypy.expose",
          "93:     @cherrypy.config(**{'tools.auth_form.on': False})",
          "94:     def default(self):",
          "95:         cherrypy.session[SESSION_KEY] = None",
          "96:         raise cherrypy.HTTPRedirect('/')",
          "",
          "---------------"
        ],
        "rdiffweb/controller/tests/test_controller.py||rdiffweb/controller/tests/test_controller.py": [
          "File: rdiffweb/controller/tests/test_controller.py -> rdiffweb/controller/tests/test_controller.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: class ControllerTest(rdiffweb.test.WebCase):",
          "29:     default_config = {'HeaderName': 'MyTest'}",
          "31:     def test_headername(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     login = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         Check if the headername is used in the page.",
          "34:         \"\"\"",
          "35:         self.getPage(\"/\")",
          "36:         self.assertInBody('MyTest')",
          "38:     def test_theme(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:         self.assertStatus('200 OK')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:         Check if the theme is properly configure.",
          "41:         \"\"\"",
          "42:         self.getPage(\"/\")",
          "43:         self.assertInBody('/static/default.css')",
          "46: class ControllerOrangeThemeTest(rdiffweb.test.WebCase):",
          "48:     default_config = {'DefaultTheme': 'orange'}",
          "50:     def test_theme(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         self.assertStatus('200 OK')",
          "52:     login = True",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52:         Check if the theme is properly configure.",
          "53:         \"\"\"",
          "54:         self.getPage(\"/\")",
          "55:         self.assertInBody('/static/orange.css')",
          "58: class ControllerBlueThemeTest(rdiffweb.test.WebCase):",
          "60:     default_config = {'DefaultTheme': 'blue'}",
          "62:     def test_theme(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         self.assertStatus('200 OK')",
          "67:     login = True",
          "",
          "---------------"
        ],
        "rdiffweb/controller/tests/test_csrf.py||rdiffweb/controller/tests/test_csrf.py": [
          "File: rdiffweb/controller/tests/test_csrf.py -> rdiffweb/controller/tests/test_csrf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: class CsrfTest(rdiffweb.test.WebCase):",
          "27:     def test_samesite_lax(self):",
          "28:         # Given a request made to rdiffweb",
          "29:         # When receiving the response",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     login = True",
          "",
          "---------------"
        ],
        "rdiffweb/controller/tests/test_page_history.py||rdiffweb/controller/tests/test_page_history.py": [
          "File: rdiffweb/controller/tests/test_page_history.py -> rdiffweb/controller/tests/test_page_history.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         url = \"/history/\" + user + \"/\" + path + \"/\"",
          "37:         if limit:",
          "38:             url += \"?limit=%s\" % limit",
          "41:     def test_history_with_root(self):",
          "42:         self._history(self.USERNAME, self.REPO)",
          "",
          "[Removed Lines]",
          "39:         return self.getPage(url)",
          "",
          "[Added Lines]",
          "39:         self.getPage(url)",
          "40:         self.assertStatus('200 OK')",
          "",
          "---------------"
        ],
        "rdiffweb/controller/tests/test_page_login.py||rdiffweb/controller/tests/test_page_login.py": [
          "File: rdiffweb/controller/tests/test_page_login.py -> rdiffweb/controller/tests/test_page_login.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         Make sure the login page can be rendered without error.",
          "32:         \"\"\"",
          "33:         self.getPage('/')",
          "37:     def test_getpage_with_plaintext(self):",
          "38:         \"\"\"",
          "39:         Requesting plain text without being authenticated should show the login form.",
          "40:         \"\"\"",
          "41:         self.getPage('/', headers=[(\"Accept\", \"text/plain\")])",
          "45:     def test_getpage_with_redirect_get(self):",
          "46:         \"\"\"",
          "",
          "[Removed Lines]",
          "34:         self.assertStatus('200 OK')",
          "35:         self.assertInBody('Enter your username and password to log in.')",
          "42:         self.assertStatus('200 OK')",
          "43:         self.assertInBody('Enter your username and password to log in.')",
          "",
          "[Added Lines]",
          "34:         self.assertStatus('303 See Other')",
          "35:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2F')",
          "42:         self.assertStatus('303 See Other')",
          "43:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2F')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         #  Query the page without login-in",
          "50:         self.getPage('/browse/' + self.USERNAME +",
          "51:                      \"/\" + self.REPO + '/DIR%EF%BF%BD/')",
          "56:     def test_getpage_with_broken_encoding(self):",
          "57:         \"\"\"",
          "",
          "[Removed Lines]",
          "52:         self.assertStatus('200 OK')",
          "53:         self.assertInBody(self.baseurl + '/browse/' +",
          "54:                           self.USERNAME + \"/\" + self.REPO + '/DIR%EF%BF%BD/')",
          "",
          "[Added Lines]",
          "52:         self.assertStatus('303 See Other')",
          "53:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2Fbrowse%2Fadmin%2Ftestcases%2FDIR%C3%AF%C2%BF%C2%BD%2F')",
          "55:     def test_getpage_with_open_redirect(self):",
          "56:         # Given a user browsing a URL with open redirect",
          "57:         # When the user visit the login page",
          "58:         self.getPage('/login/?redirect=https://attacker.com')",
          "59:         # The URL is sanitize.",
          "60:         self.assertNotInBody('https://attacker.com')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         \"\"\"",
          "60:         #  Query the page without login-in",
          "61:         self.getPage('/restore/' + self.USERNAME + \"/\" + self.REPO +",
          "67:     def test_getpage_with_redirect_post(self):",
          "68:         \"\"\"",
          "",
          "[Removed Lines]",
          "62:                      '/Fichier%20avec%20non%20asci%20char%20%C9velyne%20M%E8re.txt?date=1454448640')",
          "63:         self.assertStatus('200 OK')",
          "64:         self.assertInBody(self.baseurl + '/restore/' + self.USERNAME + \"/\" + self.REPO +",
          "65:                           '/Fichier%20avec%20non%20asci%20char%20%C9velyne%20M%E8re.txt?date=1454448640')",
          "",
          "[Added Lines]",
          "68:                      '/Fichier%20avec%20non%20asci%20char%20%C9velyne%20M%E8re.txt')",
          "69:         self.assertStatus('303 See Other')",
          "70:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2Frestore%2Fadmin%2Ftestcases%2FFichier+avec+non+asci+char+%C3%89velyne+M%C3%A8re.txt')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         \"\"\"",
          "71:         b = {'login': 'admin',",
          "72:              'password': 'invalid',",
          "74:         self.getPage('/login/', method='POST', body=b)",
          "75:         self.assertStatus('200 OK')",
          "76:         self.assertInBody('id=\"form-login\"')",
          "80:     def test_getpage_with_querystring_redirect_get(self):",
          "81:         \"\"\"",
          "82:         Check if unauthenticated users are redirect properly to login page.",
          "83:         \"\"\"",
          "84:         self.getPage('/browse/' + self.REPO + '/?restore=T')",
          "89:         self.getPage('/restore/' + self.REPO + '?date=1414871387&usetar=T')",
          "94:     def test_getpage_with_redirection(self):",
          "95:         \"\"\"",
          "",
          "[Removed Lines]",
          "73:              'redirect': self.baseurl + '/browse/' + self.REPO + '/DIR%EF%BF%BD/'}",
          "77:         self.assertInBody(self.baseurl + '/browse/' +",
          "78:                           self.REPO + '/DIR%EF%BF%BD/\"')",
          "85:         self.assertStatus('200 OK')",
          "86:         self.assertInBody(self.baseurl + '/browse/' +",
          "87:                           self.REPO + '/?restore=T')",
          "90:         self.assertStatus('200 OK')",
          "91:         self.assertInBody(self.baseurl + '/restore/' +",
          "92:                           self.REPO + '?date=1414871387&amp;usetar=T')",
          "",
          "[Added Lines]",
          "78:              'redirect': '/browse/' + self.REPO + '/DIR%EF%BF%BD/'}",
          "82:         self.assertInBody('/browse/' + self.REPO + '/DIR%EF%BF%BD/\"')",
          "89:         self.assertStatus('303 See Other')",
          "90:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2Fbrowse%2Ftestcases%2F%3Frestore%3DT')",
          "92:     def test_getpage_with_multiple_querystring_redirect_get(self):",
          "94:         self.assertStatus('303 See Other')",
          "95:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2Frestore%2Ftestcases%3Fdate%3D1414871387%26usetar%3DT')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:     def test_getpage_without_username(self):",
          "107:         \"\"\"",
          "109:         \"\"\"",
          "110:         self.getPage('/login/', method='GET')",
          "114:     def test_getpage_with_empty_password(self):",
          "115:         \"\"\"",
          "",
          "[Removed Lines]",
          "108:         Check if error   is raised when requesting /login without a username.",
          "111:         self.assertStatus('303 See Other')",
          "112:         self.assertHeaderItemValue('Location', self.baseurl + '/')",
          "",
          "[Added Lines]",
          "111:         Check if error is raised when requesting /login without a username.",
          "114:         self.assertStatus('200 OK')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119:              'password': ''}",
          "120:         self.getPage('/login/', method='POST', body=b)",
          "121:         self.assertStatus('200 OK')",
          "124:     def test_getpage_admin(self):",
          "125:         \"\"\"",
          "126:         Access to admin area without session should redirect to login page.",
          "127:         \"\"\"",
          "128:         self.getPage('/admin/')",
          "132:     def test_getapi_without_authorization(self):",
          "133:         \"\"\"",
          "",
          "[Removed Lines]",
          "122:         self.assertInBody('Invalid username or password.')",
          "129:         self.assertStatus('200 OK')",
          "130:         self.assertInBody('Enter your username and password to log in.')",
          "",
          "[Added Lines]",
          "124:         self.assertInBody('This field is required.')",
          "126:     def test_getpage_with_invalid_url(self):",
          "127:         self.getPage('/login/kefuxian.mvc', method='GET')",
          "128:         self.assertStatus('303 See Other')",
          "130:     def test_post_with_invalid_url(self):",
          "131:         self.getPage('/login/kefuxian.mvc', method='POST')",
          "132:         self.assertStatus('303 See Other')",
          "139:         self.assertStatus('303 See Other')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "194:         \"\"\"",
          "195:         Make sure the login page can be rendered without error.",
          "196:         \"\"\"",
          "198:         self.assertStatus('200 OK')",
          "199:         self.assertInBody('default message')",
          "",
          "[Removed Lines]",
          "197:         self.getPage('/', headers=[(\"Accept-Language\", \"it\")])",
          "",
          "[Added Lines]",
          "206:         self.getPage('/login/', headers=[(\"Accept-Language\", \"it\")])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "202:         \"\"\"",
          "203:         Make sure the login page can be rendered without error.",
          "204:         \"\"\"",
          "206:         self.assertStatus('200 OK')",
          "207:         self.assertInBody('french message')",
          "",
          "[Removed Lines]",
          "205:         self.getPage('/', headers=[(\"Accept-Language\", \"fr\")])",
          "",
          "[Added Lines]",
          "214:         self.getPage('/login/', headers=[(\"Accept-Language\", \"fr\")])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:     def test_login(self):",
          "217:         # Query a page",
          "219:         self.assertStatus('200 OK')",
          "220:         self.assertInBody('Enter your username and password to log in.')",
          "221:         # Login",
          "",
          "[Removed Lines]",
          "218:         self.getPage('/')",
          "",
          "[Added Lines]",
          "227:         self.getPage('/login/')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "250:         self.assertHeaderItemValue('Location', self.baseurl + '/')",
          "251:         # Get content of a page.",
          "252:         self.getPage(\"/prefs/\")",
          "",
          "[Removed Lines]",
          "253:         self.assertStatus('200 OK')",
          "254:         self.assertInBody('login')",
          "",
          "[Added Lines]",
          "262:         self.assertStatus('303 See Other')",
          "263:         self.assertHeaderItemValue('Location', self.baseurl + '/login/?redirect=%2Fprefs%2F')",
          "",
          "---------------"
        ],
        "rdiffweb/core/tests/test_i18n.py||rdiffweb/core/tests/test_i18n.py": [
          "File: rdiffweb/core/tests/test_i18n.py -> rdiffweb/core/tests/test_i18n.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     def test_language_with_unknown(self):",
          "152:         #  Query the page without login-in",
          "154:         self.assertStatus('200 OK')",
          "155:         self.assertHeaderItemValue(\"Content-Language\", \"en_US\")",
          "156:         self.assertInBody(\"Sign in\")",
          "158:     def test_language_en(self):",
          "160:         self.assertStatus('200 OK')",
          "161:         self.assertHeaderItemValue(\"Content-Language\", \"en_US\")",
          "162:         self.assertInBody(\"Sign in\")",
          "164:     def test_language_en_fr(self):",
          "165:         self.getPage(",
          "167:         self.assertStatus('200 OK')",
          "168:         self.assertHeaderItemValue(\"Content-Language\", \"en_US\")",
          "169:         self.assertInBody(\"Sign in\")",
          "171:     def test_language_fr(self):",
          "172:         self.getPage(",
          "174:         self.assertStatus('200 OK')",
          "175:         self.assertHeaderItemValue(\"Content-Language\", \"fr_CA\")",
          "176:         self.assertInBody(\"Se connecter\")",
          "",
          "[Removed Lines]",
          "153:         self.getPage(\"/\", headers=[(\"Accept-Language\", \"it\")])",
          "159:         self.getPage(\"/\", headers=[(\"Accept-Language\", \"en-US,en;q=0.8\")])",
          "166:             \"/\", headers=[(\"Accept-Language\", \"en-US,en;q=0.8,fr-CA;q=0.8\")])",
          "173:             \"/\", headers=[(\"Accept-Language\", \"fr-CA;q=0.8,fr;q=0.6\")])",
          "",
          "[Added Lines]",
          "153:         self.getPage(\"/login/\", headers=[(\"Accept-Language\", \"it\")])",
          "159:         self.getPage(\"/login/\", headers=[(\"Accept-Language\", \"en-US,en;q=0.8\")])",
          "166:             \"/login/\", headers=[(\"Accept-Language\", \"en-US,en;q=0.8,fr-CA;q=0.8\")])",
          "173:             \"/login/\", headers=[(\"Accept-Language\", \"fr-CA;q=0.8,fr;q=0.6\")])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     def test_language_between_session(self):",
          "179:         # Make a request with Accept-Language",
          "180:         self.getPage(",
          "182:         self.assertStatus('200 OK')",
          "183:         self.assertHeaderItemValue(\"Content-Language\", \"fr_CA\")",
          "184:         self.assertInBody(\"Se connecter\")",
          "185:         # Make a second request without Accept-Language",
          "187:         self.assertStatus('200 OK')",
          "188:         self.assertHeaderItemValue(\"Content-Language\", \"fr_CA\")",
          "189:         self.assertInBody(\"Se connecter\")",
          "",
          "[Removed Lines]",
          "181:             \"/\", headers=[(\"Accept-Language\", \"fr-CA;q=0.8,fr;q=0.6\")])",
          "186:         self.getPage(\"/\")",
          "",
          "[Added Lines]",
          "181:             \"/login/\", headers=[(\"Accept-Language\", \"fr-CA;q=0.8,fr;q=0.6\")])",
          "186:         self.getPage(\"/login/\")",
          "",
          "---------------"
        ],
        "rdiffweb/rdw_app.py||rdiffweb/rdw_app.py": [
          "File: rdiffweb/rdw_app.py -> rdiffweb/rdw_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # You should have received a copy of the GNU General Public License",
          "16: # along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "20: import logging",
          "21: import os",
          "22: import sys",
          "25: import cherrypy",
          "26: import pkg_resources",
          "27: import rdiffweb",
          "30: from rdiffweb.controller import filter_authorization  # @UnusedImport",
          "31: from rdiffweb.controller.api import ApiPage",
          "33: from rdiffweb.controller.page_admin import AdminPage",
          "34: from rdiffweb.controller.page_browse import BrowsePage",
          "35: from rdiffweb.controller.page_graphs import GraphsPage",
          "36: from rdiffweb.controller.page_history import HistoryPage",
          "37: from rdiffweb.controller.page_locations import LocationsPage",
          "38: from rdiffweb.controller.page_prefs import PreferencesPage",
          "39: from rdiffweb.controller.page_restore import RestorePage",
          "40: from rdiffweb.controller.page_settings import SettingsPage",
          "",
          "[Removed Lines]",
          "18: from collections import namedtuple",
          "19: from distutils.version import LooseVersion",
          "24: from cherrypy import Application",
          "28: from rdiffweb.controller import Controller",
          "29: from rdiffweb.controller import filter_authentication  # @UnusedImport",
          "32: from rdiffweb.controller.dispatch import static, empty  # @UnusedImport",
          "",
          "[Added Lines]",
          "21: from collections import namedtuple",
          "22: from distutils.version import LooseVersion",
          "26: from cherrypy import Application",
          "29: import rdiffweb.tools.auth_form",
          "30: import rdiffweb.tools.auth_basic",
          "31: import rdiffweb.tools.currentuser",
          "32: import rdiffweb.tools.security",
          "34: from rdiffweb.controller import Controller",
          "36: from rdiffweb.controller.dispatch import empty, static  # @UnusedImport",
          "39: from rdiffweb.controller.page_delete import DeletePage",
          "43: from rdiffweb.controller.page_login import LoginPage, LogoutPage",
          "44: from rdiffweb.controller.page_logs import LogsPage",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: from rdiffweb.core import i18n  # @UnusedImport",
          "43: from rdiffweb.core import rdw_templating",
          "44: from rdiffweb.core.config import Option",
          "46: from rdiffweb.core.notification import NotificationJob, NotificationPlugin",
          "47: from rdiffweb.core.quota import DefaultUserQuota",
          "52: from rdiffweb.core.removeolder import RemoveOlderJob",
          "53: from rdiffweb.core.scheduler import Scheduler",
          "55: # Define the logger",
          "56: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "45: from rdiffweb.core.librdiff import DoesNotExistError, AccessDeniedError",
          "48: from rdiffweb.core.store import Store",
          "50: from rdiffweb.controller.page_delete import DeletePage",
          "51: from rdiffweb.controller.page_logs import LogsPage",
          "",
          "[Added Lines]",
          "52: from rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError",
          "57: from rdiffweb.core.store import Store",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: class Root(LocationsPage):",
          "73:     def __init__(self):",
          "74:         self.browse = BrowsePage()",
          "75:         self.delete = DeletePage()",
          "76:         self.restore = RestorePage()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         self.login = LoginPage()",
          "79:         self.logout = LogoutPage()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         # Initialise the application",
          "117:         config = {",
          "118:             '/': {",
          "120:                 'tools.csrf.on': True,",
          "121:                 'tools.i18n.on': True,",
          "122:                 'tools.i18n.default': 'en_US',",
          "",
          "[Removed Lines]",
          "119:                 'tools.authform.on': True,",
          "",
          "[Added Lines]",
          "125:                 'tools.auth_basic.realm': 'rdiffweb',",
          "126:                 'tools.auth_basic.checkpassword': self._checkpassword,",
          "127:                 'tools.auth_form.on': True,",
          "128:                 'tools.currentuser.on': True,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:         \"\"\"",
          "179:         return getattr(cherrypy.serving.request, 'currentuser', None)",
          "181:     def error_page(self, **kwargs):",
          "182:         \"\"\"",
          "183:         Default error page shown to the user when an unexpected error occur.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     def _checkpassword(self, realm, username, password):",
          "191:         \"\"\"",
          "192:         Check basic authentication.",
          "193:         \"\"\"",
          "194:         return self.store.login(username, password) is not None",
          "",
          "---------------"
        ],
        "rdiffweb/templates/login.html||rdiffweb/templates/login.html": [
          "File: rdiffweb/templates/login.html -> rdiffweb/templates/login.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:             <h1>{% if header_name %}{{ header_name }}{% else %}rdiffweb{% endif %}</h1>",
          "8:             <p class='light'>",
          "9:                 {% if welcome_msg %}",
          "18:             </p>",
          "19:         </center>",
          "20:     </div>",
          "",
          "[Removed Lines]",
          "10:                     {% autoescape false %}{{ welcome_msg }}{% endautoescape %}",
          "11:                 {% else %}",
          "12:                  {% trans %}A simplified backup management software for quick access to your archives through an efficient web interface.{% endtrans %}",
          "13:                  <br/><br/>",
          "14:                  <a href=\"https://rdiffweb.org/\">{% trans %}website{% endtrans %}</a> \u2022",
          "15:                  <a href=\"https://rdiffweb.org/doc/\">{% trans %}docs{% endtrans %}</a> \u2022",
          "16:                  <a href=\"https://groups.google.com/d/forum/rdiffweb\">{% trans %}community{% endtrans %}</a>",
          "17:              {% endif %}",
          "",
          "[Added Lines]",
          "10:                 {% autoescape false %}{{ welcome_msg }}{% endautoescape %}",
          "11:                 {% else %}",
          "12:                 {% trans %}A simplified backup management software for quick access to your archives through an",
          "13:                 efficient web interface.{% endtrans %}",
          "14:                 <br /><br />",
          "15:                 <a href=\"https://rdiffweb.org/\">{% trans %}website{% endtrans %}</a> \u2022",
          "16:                 <a href=\"https://rdiffweb.org/doc/\">{% trans %}docs{% endtrans %}</a> \u2022",
          "17:                 <a href=\"https://groups.google.com/d/forum/rdiffweb\">{% trans %}community{% endtrans %}</a>",
          "18:                 {% endif %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: </div>",
          "23: <!-- /container -->",
          "24: <div class=\"container login-page\">",
          "29:         <h2 class=\"form-signin-heading\">{{ _('Sign in') }}</h2>",
          "30:         {% include 'message.html' %}",
          "31:         <p>{% trans %}Enter your username and password to log in.{% endtrans %}</p>",
          "38:         <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">{{ _('Sign in') }}</button>",
          "39:     </form>",
          "40: </div>",
          "",
          "[Removed Lines]",
          "25:     <form class=\"form-signin\" role=\"form\" method=\"post\"",
          "26:       action=\"/login/\" id=\"form-login\">",
          "27:         <input type=\"hidden\" name=\"redirect\"",
          "28:             value=\"{{ redirect }}\" />",
          "32:         <input type=\"text\" class=\"form-control\" placeholder=\"{{ _('Username') }}\"",
          "33:             name=\"login\" value=\"{{ login }}\" id=\"username\"",
          "34:             autocorrect=\"off\" autocapitalize=\"none\" autocomplete=\"off\"",
          "35:             required autofocus>",
          "36:         <input type=\"password\" class=\"form-control\" placeholder=\"{{ _('Password') }}\"",
          "37:             name=\"password\" id=\"password\" required>",
          "41: {% endblock %}",
          "",
          "[Added Lines]",
          "26:     <form class=\"form-signin\" role=\"form\" method=\"post\" action=\"/login/\" id=\"form-login\">",
          "30:         {{ form }}",
          "34: {% endblock %}",
          "",
          "---------------"
        ],
        "rdiffweb/test.py||rdiffweb/test.py": [
          "File: rdiffweb/test.py -> rdiffweb/test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: \"\"\"",
          "24: import json",
          "25: import os",
          "27: import shutil",
          "28: import subprocess",
          "29: import tempfile",
          "30: import unittest",
          "31: import unittest.mock",
          "33: import cherrypy",
          "34: import pkg_resources",
          "",
          "[Removed Lines]",
          "26: import re",
          "",
          "[Added Lines]",
          "31: from threading import Thread",
          "32: from urllib.parse import urlencode",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: from rdiffweb.core.store import _REPOS, _SSHKEYS, _USERS",
          "39: from rdiffweb.rdw_app import RdiffwebApp",
          "47: class MockRdiffwebApp(RdiffwebApp):",
          "",
          "[Removed Lines]",
          "41: try:",
          "42:     from urllib.parse import urlencode  # @UnresolvedImport @UnusedImport",
          "43: except:",
          "44:     from urllib import urlencode  # @UnresolvedImport @UnusedImport @Reimport",
          "",
          "[Added Lines]",
          "42: # For cherrypy8, we need to monkey patch Thread.isAlive",
          "43: Thread.isAlive = Thread.is_alive",
          "",
          "---------------"
        ],
        "rdiffweb/tools/auth_basic.py||rdiffweb/tools/auth_basic.py": [
          "File: rdiffweb/tools/auth_basic.py -> rdiffweb/tools/auth_basic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: # rdiffweb, A web interface to rdiff-backup repositories",
          "3: # Copyright (C) 2012-2021 rdiffweb contributors",
          "4: #",
          "5: # This program is free software: you can redistribute it and/or modify",
          "6: # it under the terms of the GNU General Public License as published by",
          "7: # the Free Software Foundation, either version 3 of the License, or",
          "8: # (at your option) any later version.",
          "9: #",
          "10: # This program is distributed in the hope that it will be useful,",
          "11: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: # GNU General Public License for more details.",
          "14: #",
          "15: # You should have received a copy of the GNU General Public License",
          "16: # along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "17: import cherrypy",
          "18: import base64",
          "20: SESSION_KEY = '_cp_username'",
          "22: # Monkey patch cherrypy base64 calls",
          "23: base64.decodestring = base64.b64decode",
          "26: def basic_auth(realm, checkpassword, debug=False, session_key=SESSION_KEY):",
          "27:     \"\"\"",
          "28:     Tool supporting basic authentication but also support session authentication.",
          "29:     If user is already authenticated, this tools will let him in.",
          "30:     \"\"\"",
          "31:     # When session is not enable, simply validate credentials",
          "32:     sessions_on = cherrypy.request.config.get('tools.sessions.on', False)",
          "33:     if not sessions_on:",
          "34:         cherrypy.lib.auth_basic.basic_auth(realm, checkpassword, debug)",
          "36:     # When session, is enabled, let check if user is already authenticated",
          "37:     username = cherrypy.session.get(session_key)",
          "38:     if not username:",
          "39:         # User is not authenticated.",
          "40:         # Verify credential, will raise an exception if credentials are invalid.",
          "41:         cherrypy.lib.auth_basic.basic_auth(realm, checkpassword, debug)",
          "42:         # User is authenticated, let save this into the session.",
          "43:         cherrypy.session[session_key] = cherrypy.request.login",
          "46: cherrypy.tools.auth_basic = cherrypy.Tool('before_handler', basic_auth, priority=70)",
          "",
          "---------------"
        ],
        "rdiffweb/tools/auth_form.py||rdiffweb/tools/auth_form.py": [
          "File: rdiffweb/tools/auth_form.py -> rdiffweb/tools/auth_form.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: # rdiffweb, A web interface to rdiff-backup repositories",
          "3: # Copyright (C) 2012-2021 rdiffweb contributors",
          "4: #",
          "5: # This program is free software: you can redistribute it and/or modify",
          "6: # it under the terms of the GNU General Public License as published by",
          "7: # the Free Software Foundation, either version 3 of the License, or",
          "8: # (at your option) any later version.",
          "9: #",
          "10: # This program is distributed in the hope that it will be useful,",
          "11: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: # GNU General Public License for more details.",
          "14: #",
          "15: # You should have received a copy of the GNU General Public License",
          "16: # along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "17: import cherrypy",
          "19: SESSION_KEY = '_cp_username'",
          "22: def check_auth_form(login_url='/login/', session_key=SESSION_KEY):",
          "23:     \"\"\"",
          "24:     A tool that verify if the session is associated to a user by tracking",
          "25:     a session key. If session is not authenticated, redirect him to login page.",
          "26:     \"\"\"",
          "27:     # Session is required for this tools",
          "28:     username = cherrypy.session.get(session_key)",
          "29:     if not username:",
          "30:         redirect = cherrypy.serving.request.path_info",
          "31:         query_string = cherrypy.serving.request.query_string",
          "32:         if query_string:",
          "33:             redirect = redirect + '?' + query_string",
          "34:         new_url = cherrypy.url(",
          "35:             login_url, qs={'redirect': redirect})",
          "36:         raise cherrypy.HTTPRedirect(new_url)",
          "39: cherrypy.tools.auth_form = cherrypy.Tool('before_handler', check_auth_form, priority=72)",
          "",
          "---------------"
        ],
        "rdiffweb/tools/currentuser.py||rdiffweb/tools/currentuser.py": [
          "File: rdiffweb/tools/currentuser.py -> rdiffweb/tools/currentuser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: # rdiffweb, A web interface to rdiff-backup repositories",
          "3: # Copyright (C) 2012-2021 rdiffweb contributors",
          "4: #",
          "5: # This program is free software: you can redistribute it and/or modify",
          "6: # it under the terms of the GNU General Public License as published by",
          "7: # the Free Software Foundation, either version 3 of the License, or",
          "8: # (at your option) any later version.",
          "9: #",
          "10: # This program is distributed in the hope that it will be useful,",
          "11: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: # GNU General Public License for more details.",
          "14: #",
          "15: # You should have received a copy of the GNU General Public License",
          "16: # along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "17: import cherrypy",
          "19: SESSION_KEY = '_cp_username'",
          "22: def get_currentuser(session_key=SESSION_KEY):",
          "23:     \"\"\"",
          "24:     When session is enabled and user is authenticated, get the",
          "25:     current user object and store it into the session.",
          "26:     \"\"\"",
          "27:     # Check if session is enabled",
          "28:     sessions_on = cherrypy.request.config.get('tools.sessions.on', False)",
          "29:     if not sessions_on:",
          "30:         return",
          "31:     # Check if user is authenticated",
          "32:     username = cherrypy.session.get(session_key)",
          "33:     if not username:",
          "34:         return",
          "35:     # Get reference to current user object",
          "36:     app = cherrypy.request.app",
          "37:     userobj = app.store.get_user(username)  # @UndefinedVariable",
          "38:     if not userobj:",
          "39:         # User was deleted after authenticating.",
          "40:         raise cherrypy.HTTPError(403)",
          "41:     cherrypy.serving.request.login = userobj.username",
          "42:     cherrypy.serving.request.currentuser = userobj",
          "45: cherrypy.tools.currentuser = cherrypy.Tool('before_handler', get_currentuser, priority=73)",
          "",
          "---------------"
        ],
        "rdiffweb/tools/security.py||rdiffweb/tools/security.py": [
          "File: rdiffweb/tools/security.py -> rdiffweb/tools/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: # rdiffweb, A web interface to rdiff-backup repositories",
          "3: # Copyright (C) 2012-2021 rdiffweb contributors",
          "4: #",
          "5: # This program is free software: you can redistribute it and/or modify",
          "6: # it under the terms of the GNU General Public License as published by",
          "7: # the Free Software Foundation, either version 3 of the License, or",
          "8: # (at your option) any later version.",
          "9: #",
          "10: # This program is distributed in the hope that it will be useful,",
          "11: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: # GNU General Public License for more details.",
          "14: #",
          "15: # You should have received a copy of the GNU General Public License",
          "16: # along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "18: import http.cookies",
          "19: import logging",
          "21: import cherrypy",
          "22: from cherrypy._cptools import HandlerTool",
          "24: # Define the logger",
          "25: logger = logging.getLogger(__name__)",
          "27: #",
          "28: # Patch Morsel prior to 3.8",
          "29: # Allow SameSite attribute to be define on the cookie.",
          "30: #",
          "31: if not http.cookies.Morsel().isReservedKey(\"samesite\"):",
          "32:     http.cookies.Morsel._reserved['samesite'] = 'SameSite'",
          "35: class CsrfAuth(HandlerTool):",
          "36:     \"\"\"",
          "37:     This tool provide CSRF mitigation.",
          "39:     First, by defining `SameSite=Lax` on the cookie",
          "40:     Second by validating the `Origin` and `Referer`.",
          "42:     Ref.: https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
          "43:     \"\"\"",
          "45:     def __init__(self):",
          "46:         HandlerTool.__init__(self, self.run, name='csrf')",
          "47:         # Make sure to run before authform (priority 71)",
          "48:         self._priority = 71",
          "50:     def _setup(self):",
          "51:         cherrypy.request.hooks.attach('before_finalize', self._set_same_site)",
          "52:         return super()._setup()",
          "54:     def _set_same_site(self):",
          "55:         # Awaiting bug fix in cherrypy",
          "56:         # https://github.com/cherrypy/cherrypy/issues/1767",
          "57:         # Force SameSite to Lax",
          "58:         cookie = cherrypy.serving.response.cookie.get('session_id', None)",
          "59:         if cookie:",
          "60:             cookie['samesite'] = 'Lax'",
          "62:     def run(self):",
          "63:         if cherrypy.request.method in ['POST', 'PUT', 'PATCH', 'DELETE']:",
          "64:             # Check if Origin matches our target.",
          "65:             origin = cherrypy.request.headers.get('Origin', None)",
          "66:             if origin and not origin.startswith(cherrypy.request.base):",
          "67:                 raise cherrypy.HTTPError(403, 'Unexpected Origin header')",
          "70: cherrypy.tools.csrf = CsrfAuth()",
          "",
          "---------------"
        ]
      }
    }
  ]
}