{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48a125a5bc14d31cde5ed610e78d7427fa4f8497",
      "candidate_info": {
        "commit_hash": "48a125a5bc14d31cde5ed610e78d7427fa4f8497",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/48a125a5bc14d31cde5ed610e78d7427fa4f8497",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"
        ],
        "message": "PDFBOX-4969: avoid IndexOutOfBoundsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882055 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:         {",
          "181:             COSArray numbersArray = (COSArray) numBase;",
          "182:             indices = new HashMap<Integer, COSObjectable>();",
          "184:             {",
          "185:                 COSBase base = numbersArray.getObject(i);",
          "186:                 if (!(base instanceof COSInteger))",
          "",
          "[Removed Lines]",
          "183:             for (int i = 0; i < numbersArray.size(); i += 2)",
          "",
          "[Added Lines]",
          "182:             if (numbersArray.size() % 2 != 0)",
          "183:             {",
          "184:                 LOG.warn(\"Numbers array has odd size: \" + numbersArray.size());",
          "185:             }",
          "186:             for (int i = 0; i + 1 < numbersArray.size(); i += 2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b11cb18755b5d0d29e754d12cdf4ea932b50d5e3",
      "candidate_info": {
        "commit_hash": "b11cb18755b5d0d29e754d12cdf4ea932b50d5e3",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b11cb18755b5d0d29e754d12cdf4ea932b50d5e3",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java"
        ],
        "message": "PDFBOX-5072: avoid IndexOutOfBoundsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1885208 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:         if( namesArray != null )",
          "262:         {",
          "263:             Map<String, T> names = new LinkedHashMap<String, T>();",
          "265:             {",
          "266:                 COSBase base = namesArray.getObject(i);",
          "267:                 if (!(base instanceof COSString))",
          "",
          "[Removed Lines]",
          "264:             for( int i=0; i<namesArray.size(); i+=2 )",
          "",
          "[Added Lines]",
          "264:             if (namesArray.size() % 2 != 0)",
          "265:             {",
          "266:                 LOG.warn(\"Names array has odd size: \" + namesArray.size());",
          "267:             }",
          "268:             for (int i = 0; i + 1 < namesArray.size(); i += 2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6cca5e50f2efc403212cbf2b64c23ddc1a40aca",
      "candidate_info": {
        "commit_hash": "d6cca5e50f2efc403212cbf2b64c23ddc1a40aca",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d6cca5e50f2efc403212cbf2b64c23ddc1a40aca",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java"
        ],
        "message": "PDFBOX-4988: treat nbspace like space\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882600 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:         {",
          "164:             return new GeneralPath();",
          "165:         }",
          "170:     }",
          "172:     @Override",
          "",
          "[Removed Lines]",
          "166:         else",
          "167:         {",
          "168:             return genericFont.getPath(name);",
          "169:         }",
          "",
          "[Added Lines]",
          "166:         return \"nbspace\".equals(name) ? genericFont.getPath(\"space\") : genericFont.getPath(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2236396eac1fa9923f5e8c0f05e0ec93730bf39",
      "candidate_info": {
        "commit_hash": "d2236396eac1fa9923f5e8c0f05e0ec93730bf39",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d2236396eac1fa9923f5e8c0f05e0ec93730bf39",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java"
        ],
        "message": "PDFBOX-4892: unnecessary convertion removed, as suggested by valerybokov; use char instead of string for single character\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887606 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java||xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java||xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java -> xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:         StringBuilder retval = new StringBuilder();",
          "294:         retval.append(cal.get(Calendar.YEAR));",
          "296:         retval.append(String.format(Locale.US, \"%02d\", cal.get(Calendar.MONTH) + 1));",
          "298:         retval.append(String.format(Locale.US, \"%02d\", cal.get(Calendar.DAY_OF_MONTH)));",
          "300:         retval.append(String.format(Locale.US, \"%02d\", cal.get(Calendar.HOUR_OF_DAY)));",
          "302:         retval.append(String.format(Locale.US, \"%02d\", cal.get(Calendar.MINUTE)));",
          "304:         retval.append(String.format(Locale.US, \"%02d\", cal.get(Calendar.SECOND)));",
          "306:         if (printMillis)",
          "307:         {",
          "309:             retval.append(String.format(Locale.US, \"%03d\", cal.get(Calendar.MILLISECOND)));",
          "310:         }",
          "312:         int timeZone = cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET);",
          "313:         if (timeZone < 0)",
          "314:         {",
          "316:         }",
          "317:         else",
          "318:         {",
          "320:         }",
          "321:         timeZone = Math.abs(timeZone);",
          "",
          "[Removed Lines]",
          "295:         retval.append(\"-\");",
          "297:         retval.append(\"-\");",
          "299:         retval.append(\"T\");",
          "301:         retval.append(\":\");",
          "303:         retval.append(\":\");",
          "308:             retval.append(\".\");",
          "315:             retval.append(\"-\");",
          "319:             retval.append(\"+\");",
          "",
          "[Added Lines]",
          "295:         retval.append('-');",
          "297:         retval.append('-');",
          "299:         retval.append('T');",
          "301:         retval.append(':');",
          "303:         retval.append(':');",
          "308:             retval.append('.');",
          "315:             retval.append('-');",
          "319:             retval.append('+');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:         int minutes = (timeZone - (hours * 1000 * 60 * 60)) / 1000 / 60;",
          "325:         if (hours < 10)",
          "326:         {",
          "328:         }",
          "331:         if (minutes < 10)",
          "332:         {",
          "334:         }",
          "336:         return retval.toString();",
          "337:     }",
          "",
          "[Removed Lines]",
          "327:             retval.append(\"0\");",
          "329:         retval.append(Integer.toString(hours));",
          "330:         retval.append(\":\");",
          "333:             retval.append(\"0\");",
          "335:         retval.append(Integer.toString(minutes));",
          "",
          "[Added Lines]",
          "327:             retval.append('0');",
          "329:         retval.append(hours);",
          "330:         retval.append(':');",
          "333:             retval.append('0');",
          "335:         retval.append(minutes);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e47ef3863f319d054fa8309aec304cf0a5ebf5e5",
      "candidate_info": {
        "commit_hash": "e47ef3863f319d054fa8309aec304cf0a5ebf5e5",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e47ef3863f319d054fa8309aec304cf0a5ebf5e5",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java",
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java",
          "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java"
        ],
        "message": "PDFBOX-4939: increase test coverage\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881025 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java",
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java",
          "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java||examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/AddBorderToField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         PDField field = acroForm.getField(\"SampleField\");",
          "55:         PDAnnotationWidget widget = field.getWidgets().get(0);",
          "59:                 new PDAppearanceCharacteristicsDictionary(new COSDictionary());",
          "65:         widget.setAppearanceCharacteristics(fieldAppearance);",
          "",
          "[Removed Lines]",
          "58:         PDAppearanceCharacteristicsDictionary fieldAppearance =",
          "60:         PDColor green = new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE);",
          "61:         fieldAppearance.setBorderColour(green);",
          "",
          "[Added Lines]",
          "58:         PDAppearanceCharacteristicsDictionary fieldAppearance =",
          "60:         PDColor red = new PDColor(new float[] { 1, 0, 0 }, PDDeviceRGB.INSTANCE);",
          "61:         fieldAppearance.setBorderColour(red);",
          "",
          "---------------"
        ],
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateMultiWidgetsForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:         textBox.setValue(\"Sample field\");",
          "142:         document.close();",
          "143:     }",
          "144: }",
          "",
          "[Removed Lines]",
          "141:         document.save(\"MultiWidgetsForm.pdf\");",
          "",
          "[Added Lines]",
          "141:         document.save(\"target/MultiWidgetsForm.pdf\");",
          "",
          "---------------"
        ],
        "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java||examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java -> examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.examples.interactive.form;",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import java.util.List;",
          "22: import org.apache.pdfbox.cos.COSName;",
          "23: import org.apache.pdfbox.pdmodel.PDDocument;",
          "24: import org.apache.pdfbox.pdmodel.PDPage;",
          "25: import org.apache.pdfbox.pdmodel.PDResources;",
          "26: import org.apache.pdfbox.pdmodel.font.PDFont;",
          "27: import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
          "28: import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
          "29: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "30: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary;",
          "31: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;",
          "32: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry;",
          "33: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
          "34: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "35: import org.apache.pdfbox.pdmodel.interactive.form.PDTextField;",
          "36: import org.apache.pdfbox.rendering.PDFRenderer;",
          "37: import org.junit.Assert;",
          "38: import org.junit.Test;",
          "45: public class TestCreateSimpleForms",
          "46: {",
          "47:     public TestCreateSimpleForms()",
          "48:     {",
          "49:     }",
          "56:     @Test",
          "57:     public void testCreateSimpleForm() throws IOException",
          "58:     {",
          "59:         CreateSimpleForm.main(null);",
          "60:         PDDocument doc = PDDocument.load(new File(\"target/SimpleForm.pdf\"));",
          "61:         new PDFRenderer(doc).renderImage(0);",
          "62:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "63:         PDTextField textBox = (PDTextField) acroForm.getField(\"SampleField\");",
          "64:         Assert.assertEquals(\"Sample field content\", textBox.getValue());",
          "65:         try",
          "66:         {",
          "67:             textBox.setValue(\"\u0141\u00f3d\u017a\");",
          "68:             Assert.fail(\"should have failed with IllegalArgumentException\");",
          "69:         }",
          "70:         catch (IllegalArgumentException ex)",
          "71:         {",
          "72:             Assert.assertTrue(ex.getMessage().contains(\"U+0141 ('Lslash') is not available\"));",
          "73:         }",
          "75:         PDFont font = getFontFromWidgetResources(textBox, \"Helv\");",
          "76:         Assert.assertEquals(\"Helvetica\", font.getName());",
          "77:         Assert.assertTrue(font.isStandard14());",
          "78:         doc.close();",
          "79:     }",
          "81:     @Test",
          "82:     public void testAddBorderToField() throws IOException",
          "83:     {",
          "84:         CreateSimpleForm.main(null);",
          "86:         PDDocument doc = PDDocument.load(new File(\"target/SimpleForm.pdf\"));",
          "87:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "88:         PDTextField textBox = (PDTextField) acroForm.getField(\"SampleField\");",
          "89:         PDAnnotationWidget widget = textBox.getWidgets().get(0);",
          "90:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics = widget.getAppearanceCharacteristics();",
          "91:         PDColor borderColour = appearanceCharacteristics.getBorderColour();",
          "92:         PDColor backgroundColour = appearanceCharacteristics.getBackground();",
          "93:         Assert.assertEquals(borderColour.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "94:         Assert.assertEquals(backgroundColour.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "95:         Assert.assertArrayEquals(new float[]{0,1,0}, borderColour.getComponents(), 0);",
          "96:         Assert.assertArrayEquals(new float[]{1,1,0}, backgroundColour.getComponents(), 0);",
          "97:         doc.close();",
          "99:         AddBorderToField.main(null);",
          "101:         PDDocument doc2 = PDDocument.load(new File(\"target/AddBorderToField.pdf\"));",
          "102:         new PDFRenderer(doc2).renderImage(0);",
          "103:         PDAcroForm acroForm2 = doc2.getDocumentCatalog().getAcroForm();",
          "104:         PDTextField textBox2 = (PDTextField) acroForm2.getField(\"SampleField\");",
          "105:         PDAnnotationWidget widget2 = textBox2.getWidgets().get(0);",
          "106:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics2 = widget2.getAppearanceCharacteristics();",
          "107:         PDColor borderColour2 = appearanceCharacteristics2.getBorderColour();",
          "108:         Assert.assertEquals(borderColour2.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "109:         Assert.assertArrayEquals(new float[]{1,0,0}, borderColour2.getComponents(), 0);",
          "111:         doc2.close();",
          "112:     }",
          "119:     @Test",
          "120:     public void testCreateSimpleFormWithEmbeddedFont() throws IOException",
          "121:     {",
          "122:         CreateSimpleFormWithEmbeddedFont.main(null);",
          "123:         PDDocument doc = PDDocument.load(new File(\"target/SimpleFormWithEmbeddedFont.pdf\"));",
          "124:         new PDFRenderer(doc).renderImage(0);",
          "125:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "126:         PDTextField textBox = (PDTextField) acroForm.getField(\"SampleField\");",
          "127:         Assert.assertEquals(\"Sample field \u0130\", textBox.getValue());",
          "128:         textBox.setValue(\"\u0141\u00f3d\u017a\");",
          "129:         PDFont font = getFontFromWidgetResources(textBox, \"F1\");",
          "130:         Assert.assertEquals(\"LiberationSans\", font.getName());",
          "131:         doc.close();",
          "132:     }",
          "139:     @Test",
          "140:     public void testCreateMultiWidgetsForm() throws IOException",
          "141:     {",
          "142:         CreateMultiWidgetsForm.main(null);",
          "144:         PDDocument doc = PDDocument.load(new File(\"target/MultiWidgetsForm.pdf\"));",
          "145:         Assert.assertEquals(2, doc.getNumberOfPages());",
          "146:         new PDFRenderer(doc).renderImage(0);",
          "147:         new PDFRenderer(doc).renderImage(1);",
          "148:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "149:         PDTextField textBox = (PDTextField) acroForm.getField(\"SampleField\");",
          "150:         Assert.assertEquals(\"Sample field\", textBox.getValue());",
          "151:         List<PDAnnotationWidget> widgets = textBox.getWidgets();",
          "152:         Assert.assertEquals(2, widgets.size());",
          "153:         PDAnnotationWidget w1 = widgets.get(0);",
          "154:         PDAnnotationWidget w2 = widgets.get(1);",
          "155:         PDPage page1 = w1.getPage();",
          "156:         PDPage page2 = w2.getPage();",
          "157:         Assert.assertFalse(page1.getCOSObject().equals(page2.getCOSObject()));",
          "158:         Assert.assertEquals(page1, doc.getPage(0));",
          "159:         Assert.assertEquals(page2, doc.getPage(1));",
          "160:         Assert.assertEquals(page1.getAnnotations().get(0), w1);",
          "161:         Assert.assertEquals(page2.getAnnotations().get(0), w2);",
          "162:         Assert.assertFalse(w1.equals(w2));",
          "163:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics1 = w1.getAppearanceCharacteristics();",
          "164:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics2 = w2.getAppearanceCharacteristics();",
          "165:         PDColor backgroundColor1 = appearanceCharacteristics1.getBackground();",
          "166:         PDColor backgroundColor2 = appearanceCharacteristics2.getBackground();",
          "167:         PDColor borderColour1 = appearanceCharacteristics1.getBorderColour();",
          "168:         PDColor borderColour2 = appearanceCharacteristics2.getBorderColour();",
          "169:         Assert.assertEquals(backgroundColor1.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "170:         Assert.assertEquals(backgroundColor2.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "171:         Assert.assertEquals(borderColour1.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "172:         Assert.assertEquals(borderColour2.getColorSpace(), PDDeviceRGB.INSTANCE);",
          "173:         Assert.assertArrayEquals(new float[]{1,1,0}, backgroundColor1.getComponents(), 0);",
          "174:         Assert.assertArrayEquals(new float[]{0,1,0}, backgroundColor2.getComponents(), 0);",
          "175:         Assert.assertArrayEquals(new float[]{0,1,0}, borderColour1.getComponents(), 0);",
          "176:         Assert.assertArrayEquals(new float[]{1,0,0}, borderColour2.getComponents(), 0);",
          "177:         doc.close();",
          "178:     }",
          "180:     private PDFont getFontFromWidgetResources(PDTextField textBox, String fontResourceName) throws IOException",
          "181:     {",
          "182:         PDAnnotationWidget widget = textBox.getWidgets().get(0);",
          "183:         PDAppearanceDictionary appearance = widget.getAppearance();",
          "184:         PDAppearanceEntry normalAppearance = appearance.getNormalAppearance();",
          "185:         PDAppearanceStream appearanceStream = normalAppearance.getAppearanceStream();",
          "186:         PDResources resources = appearanceStream.getResources();",
          "187:         return resources.getFont(COSName.getPDFName(fontResourceName));",
          "188:     }",
          "189: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}