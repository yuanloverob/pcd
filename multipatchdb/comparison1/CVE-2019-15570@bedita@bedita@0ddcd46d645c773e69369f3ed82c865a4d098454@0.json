{
  "cve_id": "CVE-2019-15570",
  "cve_desc": "BEdita through 4.0.0-RC2 allows SQL injection during a save operation for a relation with parameters.",
  "repo": "bedita/bedita",
  "patch_hash": "0ddcd46d645c773e69369f3ed82c865a4d098454",
  "patch_info": {
    "commit_hash": "0ddcd46d645c773e69369f3ed82c865a4d098454",
    "repo": "bedita/bedita",
    "commit_url": "https://github.com/bedita/bedita/commit/0ddcd46d645c773e69369f3ed82c865a4d098454",
    "files": [
      "bedita-app/models/object_relation.php",
      "bedita-app/models/objects/b_e_object.php",
      "bedita-app/tests/cases/models/object_relation.test.php"
    ],
    "message": "Merge pull request #1608 from fquffio/fix/v3/sanitize-relation-params\n\nAvoid potential SQL injection when updating relations with params",
    "before_after_code_files": [
      "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php",
      "bedita-app/models/objects/b_e_object.php||bedita-app/models/objects/b_e_object.php",
      "bedita-app/tests/cases/models/object_relation.test.php||bedita-app/tests/cases/models/object_relation.test.php"
    ]
  },
  "patch_diff": {
    "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php": [
      "File: bedita-app/models/object_relation.php -> bedita-app/models/object_relation.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:         return $results;",
      "45:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:     private static function prepareAll() {",
      "54:         $values = func_get_args();",
      "55:         foreach ($values as &$val) {",
      "56:             if ($val === null) {",
      "57:                 $val = 'NULL';",
      "58:                 continue;",
      "59:             }",
      "61:             if (!is_scalar($val)) {",
      "62:                 $val = json_encode($val);",
      "63:             }",
      "64:             $val = sprintf('\\'%s\\'', Sanitize::escape($val));",
      "65:         }",
      "66:         unset($val);",
      "68:         return $values;",
      "69:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:     public function createRelation($id, $objectId, $switch, $priority, $bidirectional = true, $params = array()) {",
      "66:         $res = $this->query($q);",
      "67:         if ($res === false) {",
      "68:             return $res;",
      "69:         }",
      "80:         }",
      "82:         ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
      "",
      "[Removed Lines]",
      "64:         $jParams = $params === null ? 'NULL' : sprintf(\"'%s'\", json_encode($params));",
      "65:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$id}, {$objectId}, '{$switch}', {$priority}, {$jParams})\";",
      "70:         if (!$bidirectional) {",
      "71:             ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
      "72:             return $res;",
      "73:         }",
      "75:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$objectId}, {$id}, '{$switch}', {$priority}, {$jParams})\";",
      "76:         $res = $this->query($q);",
      "78:         if ($res === false) {",
      "79:             return $res;",
      "",
      "[Added Lines]",
      "88:         list($qId, $qObjectId, $qSwitch, $qPriority, $qParams) = static::prepareAll($id, $objectId, $switch, $priority, $params);",
      "89:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qId}, {$qObjectId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
      "94:         if ($bidirectional) {",
      "95:             $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qObjectId}, {$qId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
      "96:             $res = $this->query($q);",
      "98:             if ($res === false) {",
      "99:                 return $res;",
      "100:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:     public function createRelationAndInverse($id, $objectId, $switch, $inverseSwitch = null, $priority = null, $params = array()) {",
      "100:         if ($priority == null) {",
      "103:         }",
      "107:         $res = $this->query($q);",
      "108:         if ($res === false) {",
      "109:             return $res;",
      "110:         }",
      "119:         if (empty($inverseRel[0][\"object_relations\"][\"priority\"])) {",
      "123:         } else {",
      "125:         }",
      "128:         $res = $this->query($q);",
      "130:         if ($res === false) {",
      "",
      "[Removed Lines]",
      "101:             $rel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$id} AND switch='{$switch}'\");",
      "102:             $priority = (empty($rel[0][0][\"priority\"]))? 1 : $rel[0][0][\"priority\"];",
      "105:         $jParams = $params === null ? 'NULL' : sprintf(\"'%s'\", json_encode($params));",
      "106:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$id}, {$objectId}, '{$switch}', {$priority}, {$jParams})\";",
      "112:         if ($inverseSwitch == null) {",
      "113:             $inverseSwitch = $switch;",
      "114:         }",
      "116:         $inverseRel = $this->query(\"SELECT priority FROM object_relations WHERE id={$objectId}",
      "117:                                     AND object_id={$id} AND switch='{$inverseSwitch}'\");",
      "121:             $inverseRel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$objectId} AND switch='{$inverseSwitch}'\");",
      "122:             $inversePriority = (empty($inverseRel[0][0][\"priority\"]))? 1 : $inverseRel[0][0][\"priority\"];",
      "124:             $inversePriority = $inverseRel[0][\"object_relations\"][\"priority\"];",
      "127:         $q= \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$objectId}, {$id}, '{$inverseSwitch}', {$inversePriority}, {$jParams})\" ;",
      "",
      "[Added Lines]",
      "120:         if ($inverseSwitch == null) {",
      "121:             $inverseSwitch = $switch;",
      "122:         }",
      "124:         list($qId, $qObjectId, $qSwitch, $qInverseSwitch, $qPriority, $qParams) = static::prepareAll($id, $objectId, $switch, $inverseSwitch, $priority, $params);",
      "126:             $rel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$qId} AND switch={$qSwitch}\");",
      "127:             $qPriority = $priority = (empty($rel[0][0][\"priority\"]))? 1 : $rel[0][0][\"priority\"];",
      "131:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qId}, {$qObjectId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
      "137:         $inverseRel = $this->query(\"SELECT priority FROM object_relations WHERE id={$qObjectId}",
      "138:                                     AND object_id={$qId} AND switch={$qInverseSwitch}\");",
      "141:             $inverseRel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$qObjectId} AND switch={$qInverseSwitch}\");",
      "142:             $qInversePriority = (empty($inverseRel[0][0][\"priority\"])) ? 1 : $inverseRel[0][0][\"priority\"];",
      "144:             $qInversePriority = $inverseRel[0][\"object_relations\"][\"priority\"];",
      "148:         $q= \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qObjectId}, {$qId}, {$qInverseSwitch}, {$qInversePriority}, {$qParams})\" ;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "148:     public function deleteRelation($id, $objectId=null, $switch=null, $bidirectional = true) {",
      "150:         $clearObjects = array($id);",
      "153:         if ($objectId !== null) {",
      "156:             $clearObjects[] = $objectId;",
      "157:         }",
      "158:         if ($switch !== null) {",
      "161:         }",
      "162:         $res = $this->query($q);",
      "163:         if ($res === false) {",
      "",
      "[Removed Lines]",
      "151:         $q = \"DELETE FROM object_relations WHERE id={$id}\";",
      "152:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$id}\";",
      "154:             $q .= \" AND object_id={$objectId}\";",
      "155:             $qReverse .= \" AND id={$objectId}\";",
      "159:             $q .= \" AND switch='{$switch}'\";",
      "160:             $qReverse .= \" AND switch='{$switch}'\";",
      "",
      "[Added Lines]",
      "171:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
      "173:         $q = \"DELETE FROM object_relations WHERE id={$qId}\";",
      "174:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$qId}\";",
      "176:             $q .= \" AND object_id={$qObjectId}\";",
      "177:             $qReverse .= \" AND id={$qObjectId}\";",
      "181:             $q .= \" AND switch={$qSwitch}\";",
      "182:             $qReverse .= \" AND switch={$qSwitch}\";",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "191:     public function deleteRelationAndInverse($id, $objectId = null, $switch = null) {",
      "194:         $clearObjects = array($id);",
      "197:         if ($objectId !== null) {",
      "201:             $clearObjects[] = $objectId;",
      "202:         }",
      "203:         if ($switch !== null) {",
      "205:             $inverseSwitch = $this->inverseOf($switch);",
      "206:             if (empty($inverseSwitch)) {",
      "207:                 return false;",
      "208:             }",
      "211:         }",
      "212:         $res = $this->query($q);",
      "213:         if ($res === false) {",
      "",
      "[Removed Lines]",
      "193:         $id = Sanitize::escape($id);",
      "195:         $q = \"DELETE FROM object_relations WHERE id={$id}\";",
      "196:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$id}\";",
      "198:             $objectId = Sanitize::escape($objectId);",
      "199:             $q .= \" AND object_id={$objectId}\";",
      "200:             $qReverse .= \" AND id={$objectId}\";",
      "204:             $switch = Sanitize::escape($switch);",
      "209:             $q .= \" AND switch='{$switch}'\";",
      "210:             $qReverse .= \" AND switch='{$inverseSwitch}'\";",
      "",
      "[Added Lines]",
      "215:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
      "217:         $q = \"DELETE FROM object_relations WHERE id={$qId}\";",
      "218:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$qId}\";",
      "220:             $q .= \" AND object_id={$qObjectId}\";",
      "221:             $qReverse .= \" AND id={$qObjectId}\";",
      "229:             list($qInverseSwitch) = static::prepareAll($inverseSwitch);",
      "230:             $q .= \" AND switch={$qSwitch}\";",
      "231:             $qReverse .= \" AND switch={$qInverseSwitch}\";",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "235:     public function deleteObjectRelation($id, $switch, $inverseSwitch = null) {",
      "238:         $res = $this->query($q);",
      "239:         if ($res === false) {",
      "240:             $this->log('Error executing query: ' . $q, 'error');",
      "241:             return $res;",
      "242:         }",
      "247:         $res = $this->query($qReverse);",
      "248:         if ($res === false) {",
      "249:             $this->log('Error executing query: ' . $qReverse, 'error');",
      "",
      "[Removed Lines]",
      "237:         $q = \"DELETE FROM object_relations WHERE id={$id} AND switch='{$switch}'\";",
      "243:         if (empty($inverseSwitch)) {",
      "244:             $inverseSwitch = $switch;",
      "245:         }",
      "246:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$id} AND switch='{$inverseSwitch}'\";",
      "",
      "[Added Lines]",
      "257:         if (empty($inverseSwitch)) {",
      "258:             $inverseSwitch = $switch;",
      "259:         }",
      "261:         list($qId, $qSwitch, $qInverseSwitch) = static::prepareAll($id, $switch, $inverseSwitch);",
      "262:         $q = \"DELETE FROM object_relations WHERE id={$qId} AND switch={$qSwitch}\";",
      "268:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$qId} AND switch={$qInverseSwitch}\";",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "279:     }",
      "",
      "[Removed Lines]",
      "267:     public function updateRelationPriority($id, $objectId, $switch, $priority){",
      "268:         $q = \"  UPDATE object_relations",
      "269:                 SET priority={$priority}",
      "270:                 WHERE id={$id} AND object_id={$objectId} AND switch='{$switch}'\";",
      "271:         $res = $this->query($q);",
      "272:         if ($res === false) {",
      "273:             return $res;",
      "274:         }",
      "276:         ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
      "278:         return $res;",
      "",
      "[Added Lines]",
      "289:     public function updateRelationPriority($id, $objectId, $switch, $priority) {",
      "290:         return $this->updateRelation($id, $objectId, $switch, compact('priority'));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "290:     public function updateRelationParams($id, $objectId, $switch, $params=array()) {",
      "303:     }",
      "",
      "[Removed Lines]",
      "291:         $jParams = $params === null ? 'NULL' : sprintf(\"'%s'\", json_encode($params));",
      "292:         $q = \"  UPDATE object_relations",
      "293:                 SET params={$jParams}",
      "294:                 WHERE ((id={$id} AND object_id={$objectId}) OR (id={$objectId} AND object_id={$id})) AND switch='{$switch}'\";",
      "295:         $res = $this->query($q);",
      "296:         if ($res === false) {",
      "297:             return $res;",
      "298:         }",
      "300:         ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
      "302:         return $res;",
      "",
      "[Added Lines]",
      "303:         return $this->updateRelation($id, $objectId, $switch, compact('params'));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "319:         }",
      "320:         $updateData = array();",
      "321:         if (array_key_exists('params', $set)) {",
      "331:         }",
      "332:         if (array_key_exists('priority', $set)) {",
      "339:         }",
      "341:         if (empty($updateData)) {",
      "342:             return false;",
      "343:         }",
      "350:         $result = $this->query($q);",
      "353:         if ($result !== false && array_key_exists('params', $set)) {",
      "354:             $switchInverse = $this->inverseOf($switch);",
      "355:             $q = \"UPDATE object_relations",
      "358:             $result = $this->query($q);",
      "359:         }",
      "",
      "[Removed Lines]",
      "322:             if ($set['params'] === null) {",
      "323:                 $updateData[] = \"params=NULL\";",
      "324:             } else {",
      "325:                 if (!is_array($set['params'])) {",
      "326:                     return false;",
      "327:                 }",
      "328:                 $set['params'] = json_encode($set['params']);",
      "329:                 $updateData[] = \"params='{$set['params']}'\";",
      "330:             }",
      "333:             if ($set['priority'] === null) {",
      "334:                 $updateData[] = \"priority=NULL\";",
      "335:             } else {",
      "336:                 $set['priority'] = Sanitize::escape($set['priority']);",
      "337:                 $updateData[] = \"priority='{$set['priority']}'\";",
      "338:             }",
      "345:         $q = 'UPDATE object_relations SET ';",
      "346:         foreach ($updateData as $key => $value) {",
      "347:             $q .= ($key == 0) ? $value : ', ' . $value;",
      "348:         }",
      "349:         $q .= \" WHERE id={$id} AND object_id={$objectId} AND switch='{$switch}'\";",
      "356:                 SET params='{$set['params']}'",
      "357:                 WHERE id={$objectId} AND object_id={$id} AND switch='{$switchInverse}'\";",
      "",
      "[Added Lines]",
      "323:             list($qParams) = static::prepareAll($set['params']);",
      "324:             $updateData[] = sprintf('params=%s', $qParams);",
      "327:             list($qPriority) = static::prepareAll($set['priority']);",
      "328:             $updateData[] = sprintf('priority=%s', $qPriority);",
      "335:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
      "336:         $updateData = implode(', ', $updateData);",
      "338:         $q = \"UPDATE object_relations SET {$updateData} WHERE id={$qId} AND object_id={$qObjectId} AND switch={$qSwitch}\";",
      "344:             list($qSwitchInverse, $qParams) = static::prepareAll($switchInverse, $set['params']);",
      "346:                 SET params={$qParams}",
      "347:                 WHERE id={$qObjectId} AND object_id={$qId} AND switch={$qSwitchInverse}\";",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     public function relationExists($id, $objectId, $switch) {",
      "380:         if (empty($actualId[0]['object_relations']['id'])) {",
      "381:             return false;",
      "382:         }",
      "",
      "[Removed Lines]",
      "378:         $actualId = $this->query(\"SELECT id FROM object_relations WHERE id={$id}",
      "379:             AND object_id={$objectId} AND switch='{$switch}'\");",
      "",
      "[Added Lines]",
      "368:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
      "369:         $actualId = $this->query(\"SELECT id FROM object_relations WHERE id={$qId}",
      "370:             AND object_id={$qObjectId} AND switch={$qSwitch}\", false);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "393:     public function relationPriority($id, $objectId, $switch) {",
      "396:         if(empty($pri[0][\"object_relations\"][\"priority\"])) {",
      "397:             return false;",
      "398:         }",
      "",
      "[Removed Lines]",
      "394:         $pri = $this->query(\"SELECT priority FROM object_relations WHERE id={$id}",
      "395:                                     AND object_id={$objectId} AND switch='{$switch}'\");",
      "",
      "[Added Lines]",
      "385:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
      "386:         $pri = $this->query(\"SELECT * FROM object_relations WHERE id={$qId}",
      "387:                                     AND object_id={$qObjectId} AND switch={$qSwitch}\", false);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "410:     public function relationParams($id, $objectId, $switch, $assoc=true) {",
      "413:         if(empty($pri[0][\"object_relations\"][\"params\"])) {",
      "414:             return false;",
      "415:         }",
      "",
      "[Removed Lines]",
      "411:         $pri = $this->query(\"SELECT params FROM object_relations WHERE id={$id}",
      "412:                                     AND object_id={$objectId} AND switch='{$switch}'\");",
      "",
      "[Added Lines]",
      "403:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
      "404:         $pri = $this->query(\"SELECT params FROM object_relations WHERE id={$qId}",
      "405:                                     AND object_id={$qObjectId} AND switch={$qSwitch}\", false);",
      "",
      "---------------"
    ],
    "bedita-app/models/objects/b_e_object.php||bedita-app/models/objects/b_e_object.php": [
      "File: bedita-app/models/objects/b_e_object.php -> bedita-app/models/objects/b_e_object.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "392:             foreach ($this->data['BEObject']['RelatedObject'] as $switch => $values) {",
      "394:                 foreach ($values as $key => $val) {",
      "402:                     $inverseSwitch = $switch;",
      "403:                     if (!empty($allRelations[$switch]) && !empty($allRelations[$switch][\"inverse\"])) {",
      "",
      "[Removed Lines]",
      "395:                     $obj_id = isset($val['id'])? $val['id'] : false;",
      "396:                     $priority = isset($val['priority'])? \"'{$val['priority']}'\" : 'NULL';",
      "397:                     $params = isset($val['params'])? \"'\" . json_encode($val['params']) . \"'\" : 'NULL';",
      "400:                     $queriesDelete[] = \"DELETE FROM {$table} WHERE {$assoc['foreignKey']} = '{$this->id}' AND switch = '{$switch}' \";",
      "",
      "[Added Lines]",
      "395:                     $obj_id = isset($val['id'])? Sanitize::escape($val['id']) : false;",
      "396:                     $priority = isset($val['priority'])? Sanitize::escape($val['priority']) : 'NULL';",
      "397:                     $params = isset($val['params'])? \"'\" . Sanitize::escape(json_encode($val['params'])) . \"'\" : 'NULL';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "405:                     } elseif (!empty($inverseRelations[$switch])) {",
      "406:                         $inverseSwitch = $inverseRelations[$switch];",
      "407:                     }",
      "409:                     $queriesDelete[] = \"DELETE FROM {$table} WHERE {$assoc['associationForeignKey']} = '{$this->id}'",
      "410:                                         AND switch = '{$inverseSwitch}' \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "405:                     $switch = Sanitize::escape($switch);",
      "406:                     $inverseSwitch = Sanitize::escape($inverseSwitch);",
      "410:                     $queriesDelete[] = \"DELETE FROM {$table} WHERE {$assoc['foreignKey']} = '{$this->id}' AND switch = '{$switch}' \";",
      "",
      "---------------"
    ],
    "bedita-app/tests/cases/models/object_relation.test.php||bedita-app/tests/cases/models/object_relation.test.php": [
      "File: bedita-app/tests/cases/models/object_relation.test.php -> bedita-app/tests/cases/models/object_relation.test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:         $this->assertEqual($result, true);",
      "101:     }",
      "103:     public function testIsValid() {",
      "104:         $this->assertTrue($this->ObjectRelation->isValid('attach', 'document'));",
      "105:         $this->assertTrue($this->ObjectRelation->isValid('attached_to', 'image'));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     public function testRelationWithSingleQuotes()",
      "106:     {",
      "108:         $docIds = array();",
      "109:         for ($i = 1; $i <= 2; $i++) {",
      "110:             $this->Document->create();",
      "111:             $res = $this->Document->save(array(",
      "112:                 'title' => sprintf('Test document %d', $i),",
      "113:             ));",
      "114:             $this->assertNotEqual($res, false);",
      "115:             $docIds[$i] = $this->Document->id;",
      "116:         }",
      "118:         $switch = 'test\\'relation';",
      "119:         $priority = 123;",
      "120:         $params = array('Hello, World!' => 'I\\'m Gustavo.');",
      "123:         $res = $this->ObjectRelation->createRelation($docIds[1], $docIds[2], $switch, $priority, true, $params);",
      "124:         $this->assertNotEqual($res, false);",
      "127:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
      "128:         $this->assertEqual($exists, true);",
      "129:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $switch);",
      "130:         $this->assertEqual($exists, true);",
      "133:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
      "134:         $this->assertEqual($actualPriority, $priority);",
      "135:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
      "136:         $this->assertEqual($actualParams, $params);",
      "137:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $switch);",
      "138:         $this->assertEqual($actualParams, $params);",
      "141:         $newPriority = 456;",
      "142:         $newParams = null;",
      "143:         $res = $this->ObjectRelation->updateRelation($docIds[1], $docIds[2], $switch, array(",
      "144:             'priority' => $newPriority,",
      "145:             'params' => $newParams,",
      "146:         ));",
      "147:         $this->assertNotEqual($res, false);",
      "150:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
      "151:         $this->assertEqual($actualPriority, $newPriority);",
      "152:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
      "153:         $this->assertEqual($actualParams, $newParams);",
      "154:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $switch);",
      "155:         $this->assertEqual($actualParams, $newParams);",
      "158:         $res = $this->ObjectRelation->deleteRelation($docIds[1], $docIds[2], $switch, true);",
      "159:         $this->assertNotEqual($res, false);",
      "162:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
      "163:         $this->assertEqual($exists, false);",
      "164:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $switch);",
      "165:         $this->assertEqual($exists, false);",
      "166:     }",
      "168:     public function testRelationWithSingleQuotesAndInverse()",
      "169:     {",
      "171:         $docIds = array();",
      "172:         for ($i = 1; $i <= 2; $i++) {",
      "173:             $this->Document->create();",
      "174:             $res = $this->Document->save(array(",
      "175:                 'title' => sprintf('Test document %d', $i),",
      "176:             ));",
      "177:             $this->assertNotEqual($res, false);",
      "178:             $docIds[$i] = $this->Document->id;",
      "179:         }",
      "182:         $switch = 'test\\'relation';",
      "183:         $inverseSwitch = 'relation\\'test';",
      "184:         Configure::write(",
      "185:             sprintf('objRelationType.%s', $switch),",
      "186:             array('inverse' => $inverseSwitch, 'left' => array(), 'right' => array())",
      "187:         );",
      "188:         BeLib::getObject('BeConfigure')->mergeAllRelations(true);",
      "191:         $priority = 123;",
      "192:         $params = array('Hello, World!' => 'I\\'m Gustavo.');",
      "193:         $res = $this->ObjectRelation->createRelationAndInverse($docIds[1], $docIds[2], $switch, $inverseSwitch, $priority, $params);",
      "194:         $this->assertNotEqual($res, false);",
      "197:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
      "198:         $this->assertEqual($exists, true);",
      "199:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $inverseSwitch);",
      "200:         $this->assertEqual($exists, false);",
      "201:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $inverseSwitch);",
      "202:         $this->assertEqual($exists, true);",
      "203:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $switch);",
      "204:         $this->assertEqual($exists, false);",
      "207:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
      "208:         $this->assertEqual($actualPriority, $priority);",
      "209:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[2], $docIds[1], $inverseSwitch);",
      "210:         $this->assertEqual($actualPriority, 1);",
      "211:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
      "212:         $this->assertEqual($actualParams, $params);",
      "213:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $inverseSwitch);",
      "214:         $this->assertEqual($actualParams, $params);",
      "217:         $newPriority = 456;",
      "218:         $newParams = null;",
      "219:         $res = $this->ObjectRelation->updateRelation($docIds[1], $docIds[2], $switch, array(",
      "220:             'priority' => $newPriority,",
      "221:             'params' => $newParams,",
      "222:         ));",
      "223:         $this->assertNotEqual($res, false);",
      "226:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
      "227:         $this->assertEqual($actualPriority, $newPriority);",
      "228:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[2], $docIds[1], $inverseSwitch);",
      "229:         $this->assertEqual($actualPriority, 1);",
      "230:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
      "231:         $this->assertEqual($actualParams, $newParams);",
      "232:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $inverseSwitch);",
      "233:         $this->assertEqual($actualParams, $newParams);",
      "236:         $res = $this->ObjectRelation->deleteRelationAndInverse($docIds[1], $docIds[2], $switch);",
      "237:         $this->assertNotEqual($res, false);",
      "240:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
      "241:         $this->assertEqual($exists, false);",
      "242:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $inverseSwitch);",
      "243:         $this->assertEqual($exists, false);",
      "246:         Configure::delete(sprintf('objRelationType.%s', $switch));",
      "247:         BeLib::getObject('BeConfigure')->mergeAllRelations(true);",
      "248:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85b0da4ac692025c89c4c2e95c0697fa82869be4",
      "candidate_info": {
        "commit_hash": "85b0da4ac692025c89c4c2e95c0697fa82869be4",
        "repo": "bedita/bedita",
        "commit_url": "https://github.com/bedita/bedita/commit/85b0da4ac692025c89c4c2e95c0697fa82869be4",
        "files": [
          "bedita-app/models/object_relation.php"
        ],
        "message": "style: put function opening brace on same line as signature",
        "before_after_code_files": [
          "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/bedita/bedita/pull/1608"
        ],
        "olp_code_files": {
          "patch": [
            "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
          ],
          "candidate": [
            "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
          ]
        }
      },
      "candidate_diff": {
        "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php": [
          "File: bedita-app/models/object_relation.php -> bedita-app/models/object_relation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         $values = func_get_args();",
          "56:         foreach ($values as &$val) {",
          "57:             if ($val === null) {",
          "",
          "[Removed Lines]",
          "53:     private static function prepareAll()",
          "54:     {",
          "",
          "[Added Lines]",
          "53:     private static function prepareAll() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         list($qId, $qObjectId, $qSwitch, $qPriority, $qParams) = static::prepareAll($id, $objectId, $switch, $priority, $params);",
          "91:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qId}, {$qObjectId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
          "",
          "[Removed Lines]",
          "87:     public function createRelation($id, $objectId, $switch, $priority, $bidirectional = true, $params = array())",
          "88:     {",
          "",
          "[Added Lines]",
          "86:     public function createRelation($id, $objectId, $switch, $priority, $bidirectional = true, $params = array()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:         if ($inverseSwitch == null) {",
          "124:             $inverseSwitch = $switch;",
          "125:         }",
          "",
          "[Removed Lines]",
          "121:     public function createRelationAndInverse($id, $objectId, $switch, $inverseSwitch = null, $priority = null, $params = array())",
          "122:     {",
          "",
          "[Added Lines]",
          "119:     public function createRelationAndInverse($id, $objectId, $switch, $inverseSwitch = null, $priority = null, $params = array()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:         if (empty($inverseSwitch)) {",
          "262:             $inverseSwitch = $switch;",
          "263:         }",
          "",
          "[Removed Lines]",
          "259:     public function deleteObjectRelation($id, $switch, $inverseSwitch = null)",
          "260:     {",
          "",
          "[Added Lines]",
          "256:     public function deleteObjectRelation($id, $switch, $inverseSwitch = null) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:         return $this->updateRelation($id, $objectId, $switch, compact('priority'));",
          "296:     }",
          "",
          "[Removed Lines]",
          "293:     public function updateRelationPriority($id, $objectId, $switch, $priority)",
          "294:     {",
          "",
          "[Added Lines]",
          "289:     public function updateRelationPriority($id, $objectId, $switch, $priority) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:         return $this->updateRelation($id, $objectId, $switch, compact('params'));",
          "310:     }",
          "",
          "[Removed Lines]",
          "307:     public function updateRelationParams($id, $objectId, $switch, $params=array())",
          "308:     {",
          "",
          "[Added Lines]",
          "302:     public function updateRelationParams($id, $objectId, $switch, $params=array()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "375:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "376:         $actualId = $this->query(\"SELECT id FROM object_relations WHERE id={$qId}",
          "377:             AND object_id={$qObjectId} AND switch={$qSwitch}\", false);",
          "",
          "[Removed Lines]",
          "373:     public function relationExists($id, $objectId, $switch)",
          "374:     {",
          "",
          "[Added Lines]",
          "367:     public function relationExists($id, $objectId, $switch) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "393:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "394:         $pri = $this->query(\"SELECT * FROM object_relations WHERE id={$qId}",
          "395:                                     AND object_id={$qObjectId} AND switch={$qSwitch}\", false);",
          "",
          "[Removed Lines]",
          "391:     public function relationPriority($id, $objectId, $switch)",
          "392:     {",
          "",
          "[Added Lines]",
          "384:     public function relationPriority($id, $objectId, $switch) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "412:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "413:         $pri = $this->query(\"SELECT params FROM object_relations WHERE id={$qId}",
          "414:                                     AND object_id={$qObjectId} AND switch={$qSwitch}\", false);",
          "",
          "[Removed Lines]",
          "410:     public function relationParams($id, $objectId, $switch, $assoc=true)",
          "411:     {",
          "",
          "[Added Lines]",
          "402:     public function relationParams($id, $objectId, $switch, $assoc=true) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0791cf86f267461c522d1e9d56848d683304ae7",
      "candidate_info": {
        "commit_hash": "e0791cf86f267461c522d1e9d56848d683304ae7",
        "repo": "bedita/bedita",
        "commit_url": "https://github.com/bedita/bedita/commit/e0791cf86f267461c522d1e9d56848d683304ae7",
        "files": [
          "bedita-app/models/object_relation.php"
        ],
        "message": "refactor: remove duplicate logic",
        "before_after_code_files": [
          "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/bedita/bedita/pull/1608"
        ],
        "olp_code_files": {
          "patch": [
            "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
          ],
          "candidate": [
            "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
          ]
        }
      },
      "candidate_diff": {
        "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php": [
          "File: bedita-app/models/object_relation.php -> bedita-app/models/object_relation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:     public function updateRelationPriority($id, $objectId, $switch, $priority)",
          "294:     {",
          "307:     }",
          "",
          "[Removed Lines]",
          "295:         list($qId, $qObjectId, $qSwitch, $qPriority) = static::prepareAll($id, $objectId, $switch, $priority);",
          "296:         $q = \"  UPDATE object_relations",
          "297:                 SET priority={$qPriority}",
          "298:                 WHERE id={$qId} AND object_id={$qObjectId} AND switch={$qSwitch}\";",
          "299:         $res = $this->query($q);",
          "300:         if ($res === false) {",
          "301:             return $res;",
          "302:         }",
          "304:         ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
          "306:         return $res;",
          "",
          "[Added Lines]",
          "295:         return $this->updateRelation($id, $objectId, $switch, compact('priority'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     public function updateRelationParams($id, $objectId, $switch, $params=array())",
          "319:     {",
          "332:     }",
          "",
          "[Removed Lines]",
          "320:         list($qId, $qObjectId, $qSwitch, $qParams) = static::prepareAll($id, $objectId, $switch, $params);",
          "321:         $q = \"  UPDATE object_relations",
          "322:                 SET params={$qParams}",
          "323:                 WHERE ((id={$qId} AND object_id={$qObjectId}) OR (id={$qObjectId} AND object_id={$qId})) AND switch={$qSwitch}\";",
          "324:         $res = $this->query($q);",
          "325:         if ($res === false) {",
          "326:             return $res;",
          "327:         }",
          "329:         ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
          "331:         return $res;",
          "",
          "[Added Lines]",
          "309:         return $this->updateRelation($id, $objectId, $switch, compact('params'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c7b28299041c6346cddbbdc67ec5237e42c15b3",
      "candidate_info": {
        "commit_hash": "1c7b28299041c6346cddbbdc67ec5237e42c15b3",
        "repo": "bedita/bedita",
        "commit_url": "https://github.com/bedita/bedita/commit/1c7b28299041c6346cddbbdc67ec5237e42c15b3",
        "files": [
          "bedita-app/tests/cases/models/object_relation.test.php"
        ],
        "message": "test: add unit tests to cover cases where relations have single quotes",
        "before_after_code_files": [
          "bedita-app/tests/cases/models/object_relation.test.php||bedita-app/tests/cases/models/object_relation.test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/bedita/bedita/pull/1608"
        ],
        "olp_code_files": {
          "patch": [
            "bedita-app/tests/cases/models/object_relation.test.php||bedita-app/tests/cases/models/object_relation.test.php"
          ],
          "candidate": [
            "bedita-app/tests/cases/models/object_relation.test.php||bedita-app/tests/cases/models/object_relation.test.php"
          ]
        }
      },
      "candidate_diff": {
        "bedita-app/tests/cases/models/object_relation.test.php||bedita-app/tests/cases/models/object_relation.test.php": [
          "File: bedita-app/tests/cases/models/object_relation.test.php -> bedita-app/tests/cases/models/object_relation.test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         $this->assertEqual($result, true);",
          "101:     }",
          "103:     public function testIsValid() {",
          "104:         $this->assertTrue($this->ObjectRelation->isValid('attach', 'document'));",
          "105:         $this->assertTrue($this->ObjectRelation->isValid('attached_to', 'image'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     public function testRelationWithSingleQuotes()",
          "106:     {",
          "108:         $docIds = array();",
          "109:         for ($i = 1; $i <= 2; $i++) {",
          "110:             $this->Document->create();",
          "111:             $res = $this->Document->save(array(",
          "112:                 'title' => sprintf('Test document %d', $i),",
          "113:             ));",
          "114:             $this->assertNotEqual($res, false);",
          "115:             $docIds[$i] = $this->Document->id;",
          "116:         }",
          "118:         $switch = 'test\\'relation';",
          "119:         $priority = 123;",
          "120:         $params = array('Hello, World!' => 'I\\'m Gustavo.');",
          "123:         $res = $this->ObjectRelation->createRelation($docIds[1], $docIds[2], $switch, $priority, true, $params);",
          "124:         $this->assertNotEqual($res, false);",
          "127:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
          "128:         $this->assertEqual($exists, true);",
          "129:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $switch);",
          "130:         $this->assertEqual($exists, true);",
          "133:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
          "134:         $this->assertEqual($actualPriority, $priority);",
          "135:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
          "136:         $this->assertEqual($actualParams, $params);",
          "137:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $switch);",
          "138:         $this->assertEqual($actualParams, $params);",
          "141:         $newPriority = 456;",
          "142:         $newParams = null;",
          "143:         $res = $this->ObjectRelation->updateRelation($docIds[1], $docIds[2], $switch, array(",
          "144:             'priority' => $newPriority,",
          "145:             'params' => $newParams,",
          "146:         ));",
          "147:         $this->assertNotEqual($res, false);",
          "150:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
          "151:         $this->assertEqual($actualPriority, $newPriority);",
          "152:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
          "153:         $this->assertEqual($actualParams, $newParams);",
          "154:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $switch);",
          "155:         $this->assertEqual($actualParams, $newParams);",
          "158:         $res = $this->ObjectRelation->deleteRelation($docIds[1], $docIds[2], $switch, true);",
          "159:         $this->assertNotEqual($res, false);",
          "162:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
          "163:         $this->assertEqual($exists, false);",
          "164:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $switch);",
          "165:         $this->assertEqual($exists, false);",
          "166:     }",
          "168:     public function testRelationWithSingleQuotesAndInverse()",
          "169:     {",
          "171:         $docIds = array();",
          "172:         for ($i = 1; $i <= 2; $i++) {",
          "173:             $this->Document->create();",
          "174:             $res = $this->Document->save(array(",
          "175:                 'title' => sprintf('Test document %d', $i),",
          "176:             ));",
          "177:             $this->assertNotEqual($res, false);",
          "178:             $docIds[$i] = $this->Document->id;",
          "179:         }",
          "182:         $switch = 'test\\'relation';",
          "183:         $inverseSwitch = 'relation\\'test';",
          "184:         Configure::write(",
          "185:             sprintf('objRelationType.%s', $switch),",
          "186:             array('inverse' => $inverseSwitch, 'left' => array(), 'right' => array())",
          "187:         );",
          "188:         BeLib::getObject('BeConfigure')->mergeAllRelations(true);",
          "191:         $priority = 123;",
          "192:         $params = array('Hello, World!' => 'I\\'m Gustavo.');",
          "193:         $res = $this->ObjectRelation->createRelationAndInverse($docIds[1], $docIds[2], $switch, $inverseSwitch, $priority, $params);",
          "194:         $this->assertNotEqual($res, false);",
          "197:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
          "198:         $this->assertEqual($exists, true);",
          "199:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $inverseSwitch);",
          "200:         $this->assertEqual($exists, false);",
          "201:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $inverseSwitch);",
          "202:         $this->assertEqual($exists, true);",
          "203:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $switch);",
          "204:         $this->assertEqual($exists, false);",
          "207:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
          "208:         $this->assertEqual($actualPriority, $priority);",
          "209:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[2], $docIds[1], $inverseSwitch);",
          "210:         $this->assertEqual($actualPriority, 1);",
          "211:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
          "212:         $this->assertEqual($actualParams, $params);",
          "213:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $inverseSwitch);",
          "214:         $this->assertEqual($actualParams, $params);",
          "217:         $newPriority = 456;",
          "218:         $newParams = null;",
          "219:         $res = $this->ObjectRelation->updateRelation($docIds[1], $docIds[2], $switch, array(",
          "220:             'priority' => $newPriority,",
          "221:             'params' => $newParams,",
          "222:         ));",
          "223:         $this->assertNotEqual($res, false);",
          "226:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[1], $docIds[2], $switch);",
          "227:         $this->assertEqual($actualPriority, $newPriority);",
          "228:         $actualPriority = $this->ObjectRelation->relationPriority($docIds[2], $docIds[1], $inverseSwitch);",
          "229:         $this->assertEqual($actualPriority, 1);",
          "230:         $actualParams = $this->ObjectRelation->relationParams($docIds[1], $docIds[2], $switch);",
          "231:         $this->assertEqual($actualParams, $newParams);",
          "232:         $actualParams = $this->ObjectRelation->relationParams($docIds[2], $docIds[1], $inverseSwitch);",
          "233:         $this->assertEqual($actualParams, $newParams);",
          "236:         $res = $this->ObjectRelation->deleteRelationAndInverse($docIds[1], $docIds[2], $switch);",
          "237:         $this->assertNotEqual($res, false);",
          "240:         $exists = $this->ObjectRelation->relationExists($docIds[1], $docIds[2], $switch);",
          "241:         $this->assertEqual($exists, false);",
          "242:         $exists = $this->ObjectRelation->relationExists($docIds[2], $docIds[1], $inverseSwitch);",
          "243:         $this->assertEqual($exists, false);",
          "246:         Configure::delete(sprintf('objRelationType.%s', $switch));",
          "247:         BeLib::getObject('BeConfigure')->mergeAllRelations(true);",
          "248:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8af5ef52f0c6f447ba6c638b9114a2cdfcc0aae9",
      "candidate_info": {
        "commit_hash": "8af5ef52f0c6f447ba6c638b9114a2cdfcc0aae9",
        "repo": "bedita/bedita",
        "commit_url": "https://github.com/bedita/bedita/commit/8af5ef52f0c6f447ba6c638b9114a2cdfcc0aae9",
        "files": [
          "bedita-app/models/objects/b_e_object.php"
        ],
        "message": "fix: move DELETE query after sanitization",
        "before_after_code_files": [
          "bedita-app/models/objects/b_e_object.php||bedita-app/models/objects/b_e_object.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/bedita/bedita/pull/1608"
        ],
        "olp_code_files": {
          "patch": [
            "bedita-app/models/objects/b_e_object.php||bedita-app/models/objects/b_e_object.php"
          ],
          "candidate": [
            "bedita-app/models/objects/b_e_object.php||bedita-app/models/objects/b_e_object.php"
          ]
        }
      },
      "candidate_diff": {
        "bedita-app/models/objects/b_e_object.php||bedita-app/models/objects/b_e_object.php": [
          "File: bedita-app/models/objects/b_e_object.php -> bedita-app/models/objects/b_e_object.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:                     $obj_id = isset($val['id'])? Sanitize::escape($val['id']) : false;",
          "396:                     $priority = isset($val['priority'])? Sanitize::escape($val['priority']) : 'NULL';",
          "397:                     $params = isset($val['params'])? \"'\" . Sanitize::escape(json_encode($val['params'])) . \"'\" : 'NULL';",
          "402:                     $inverseSwitch = $switch;",
          "403:                     if (!empty($allRelations[$switch]) && !empty($allRelations[$switch][\"inverse\"])) {",
          "",
          "[Removed Lines]",
          "400:                     $queriesDelete[] = \"DELETE FROM {$table} WHERE {$assoc['foreignKey']} = '{$this->id}' AND switch = '{$switch}' \";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:                     $switch = Sanitize::escape($switch);",
          "409:                     $inverseSwitch = Sanitize::escape($inverseSwitch);",
          "411:                     $queriesDelete[] = \"DELETE FROM {$table} WHERE {$assoc['associationForeignKey']} = '{$this->id}'",
          "412:                                         AND switch = '{$inverseSwitch}' \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:                     $queriesDelete[] = \"DELETE FROM {$table} WHERE {$assoc['foreignKey']} = '{$this->id}' AND switch = '{$switch}' \";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6346d59a558cd4ee437df7044d41271bf04ccf4",
      "candidate_info": {
        "commit_hash": "e6346d59a558cd4ee437df7044d41271bf04ccf4",
        "repo": "bedita/bedita",
        "commit_url": "https://github.com/bedita/bedita/commit/e6346d59a558cd4ee437df7044d41271bf04ccf4",
        "files": [
          "bedita-app/models/object_relation.php"
        ],
        "message": "fix: sanitize values also in ObjectRelation model",
        "before_after_code_files": [
          "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/bedita/bedita/pull/1608"
        ],
        "olp_code_files": {
          "patch": [
            "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
          ],
          "candidate": [
            "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php"
          ]
        }
      },
      "candidate_diff": {
        "bedita-app/models/object_relation.php||bedita-app/models/object_relation.php": [
          "File: bedita-app/models/object_relation.php -> bedita-app/models/object_relation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         return $results;",
          "45:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     private static function prepareAll()",
          "54:     {",
          "55:         $values = func_get_args();",
          "56:         foreach ($values as &$val) {",
          "57:             if ($val === null) {",
          "58:                 $val = 'NULL';",
          "59:                 continue;",
          "60:             }",
          "62:             if (!is_scalar($val)) {",
          "63:                 $val = json_encode($val);",
          "64:             }",
          "65:             $val = sprintf('%s', Sanitize::escape($val));",
          "66:         }",
          "67:         unset($val);",
          "69:         return $values;",
          "70:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         $res = $this->query($q);",
          "67:         if ($res === false) {",
          "68:             return $res;",
          "69:         }",
          "80:         }",
          "82:         ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
          "",
          "[Removed Lines]",
          "62:     public function createRelation($id, $objectId, $switch, $priority, $bidirectional = true, $params = array()) {",
          "64:         $jParams = $params === null ? 'NULL' : sprintf(\"'%s'\", json_encode($params));",
          "65:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$id}, {$objectId}, '{$switch}', {$priority}, {$jParams})\";",
          "70:         if (!$bidirectional) {",
          "71:             ClassRegistry::init('BEObject')->clearCacheByIds(array($id, $objectId));",
          "72:             return $res;",
          "73:         }",
          "75:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$objectId}, {$id}, '{$switch}', {$priority}, {$jParams})\";",
          "76:         $res = $this->query($q);",
          "78:         if ($res === false) {",
          "79:             return $res;",
          "",
          "[Added Lines]",
          "87:     public function createRelation($id, $objectId, $switch, $priority, $bidirectional = true, $params = array())",
          "88:     {",
          "90:         list($qId, $qObjectId, $qSwitch, $qPriority, $qParams) = static::prepareAll($id, $objectId, $switch, $priority, $params);",
          "91:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qId}, {$qObjectId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
          "96:         if ($bidirectional) {",
          "97:             $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qObjectId}, {$qId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
          "98:             $res = $this->query($q);",
          "100:             if ($res === false) {",
          "101:                 return $res;",
          "102:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         if ($priority == null) {",
          "103:         }",
          "107:         $res = $this->query($q);",
          "108:         if ($res === false) {",
          "109:             return $res;",
          "110:         }",
          "119:         if (empty($inverseRel[0][\"object_relations\"][\"priority\"])) {",
          "123:         } else {",
          "125:         }",
          "128:         $res = $this->query($q);",
          "130:         if ($res === false) {",
          "",
          "[Removed Lines]",
          "98:     public function createRelationAndInverse($id, $objectId, $switch, $inverseSwitch = null, $priority = null, $params = array()) {",
          "101:             $rel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$id} AND switch='{$switch}'\");",
          "102:             $priority = (empty($rel[0][0][\"priority\"]))? 1 : $rel[0][0][\"priority\"];",
          "105:         $jParams = $params === null ? 'NULL' : sprintf(\"'%s'\", json_encode($params));",
          "106:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$id}, {$objectId}, '{$switch}', {$priority}, {$jParams})\";",
          "112:         if ($inverseSwitch == null) {",
          "113:             $inverseSwitch = $switch;",
          "114:         }",
          "116:         $inverseRel = $this->query(\"SELECT priority FROM object_relations WHERE id={$objectId}",
          "117:                                     AND object_id={$id} AND switch='{$inverseSwitch}'\");",
          "121:             $inverseRel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$objectId} AND switch='{$inverseSwitch}'\");",
          "122:             $inversePriority = (empty($inverseRel[0][0][\"priority\"]))? 1 : $inverseRel[0][0][\"priority\"];",
          "124:             $inversePriority = $inverseRel[0][\"object_relations\"][\"priority\"];",
          "127:         $q= \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$objectId}, {$id}, '{$inverseSwitch}', {$inversePriority}, {$jParams})\" ;",
          "",
          "[Added Lines]",
          "121:     public function createRelationAndInverse($id, $objectId, $switch, $inverseSwitch = null, $priority = null, $params = array())",
          "122:     {",
          "123:         if ($inverseSwitch == null) {",
          "124:             $inverseSwitch = $switch;",
          "125:         }",
          "127:         list($qId, $qObjectId, $qSwitch, $qInverseSwitch, $qPriority, $qParams) = static::prepareAll($id, $objectId, $switch, $inverseSwitch, $priority, $params);",
          "129:             $rel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$qId} AND switch={$qSwitch}\");",
          "130:             $qPriority = $priority = (empty($rel[0][0][\"priority\"]))? 1 : $rel[0][0][\"priority\"];",
          "134:         $q = \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qId}, {$qObjectId}, {$qSwitch}, {$qPriority}, {$qParams})\";",
          "140:         $inverseRel = $this->query(\"SELECT priority FROM object_relations WHERE id={$qObjectId}",
          "141:                                     AND object_id={$qId} AND switch={$qInverseSwitch}\");",
          "144:             $inverseRel = $this->query(\"SELECT MAX(priority)+1 AS priority FROM object_relations WHERE id={$qObjectId} AND switch={$qInverseSwitch}\");",
          "145:             $qInversePriority = (empty($inverseRel[0][0][\"priority\"])) ? 1 : $inverseRel[0][0][\"priority\"];",
          "147:             $qInversePriority = $inverseRel[0][\"object_relations\"][\"priority\"];",
          "151:         $q= \"INSERT INTO object_relations (id, object_id, switch, priority, params) VALUES ({$qObjectId}, {$qId}, {$qInverseSwitch}, {$qInversePriority}, {$qParams})\" ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:     public function deleteRelation($id, $objectId=null, $switch=null, $bidirectional = true) {",
          "150:         $clearObjects = array($id);",
          "153:         if ($objectId !== null) {",
          "156:             $clearObjects[] = $objectId;",
          "157:         }",
          "158:         if ($switch !== null) {",
          "161:         }",
          "162:         $res = $this->query($q);",
          "163:         if ($res === false) {",
          "",
          "[Removed Lines]",
          "151:         $q = \"DELETE FROM object_relations WHERE id={$id}\";",
          "152:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$id}\";",
          "154:             $q .= \" AND object_id={$objectId}\";",
          "155:             $qReverse .= \" AND id={$objectId}\";",
          "159:             $q .= \" AND switch='{$switch}'\";",
          "160:             $qReverse .= \" AND switch='{$switch}'\";",
          "",
          "[Added Lines]",
          "174:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "176:         $q = \"DELETE FROM object_relations WHERE id={$qId}\";",
          "177:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$qId}\";",
          "179:             $q .= \" AND object_id={$qObjectId}\";",
          "180:             $qReverse .= \" AND id={$qObjectId}\";",
          "184:             $q .= \" AND switch={$qSwitch}\";",
          "185:             $qReverse .= \" AND switch={$qSwitch}\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:     public function deleteRelationAndInverse($id, $objectId = null, $switch = null) {",
          "194:         $clearObjects = array($id);",
          "197:         if ($objectId !== null) {",
          "201:             $clearObjects[] = $objectId;",
          "202:         }",
          "203:         if ($switch !== null) {",
          "205:             $inverseSwitch = $this->inverseOf($switch);",
          "206:             if (empty($inverseSwitch)) {",
          "207:                 return false;",
          "208:             }",
          "211:         }",
          "212:         $res = $this->query($q);",
          "213:         if ($res === false) {",
          "",
          "[Removed Lines]",
          "193:         $id = Sanitize::escape($id);",
          "195:         $q = \"DELETE FROM object_relations WHERE id={$id}\";",
          "196:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$id}\";",
          "198:             $objectId = Sanitize::escape($objectId);",
          "199:             $q .= \" AND object_id={$objectId}\";",
          "200:             $qReverse .= \" AND id={$objectId}\";",
          "204:             $switch = Sanitize::escape($switch);",
          "209:             $q .= \" AND switch='{$switch}'\";",
          "210:             $qReverse .= \" AND switch='{$inverseSwitch}'\";",
          "",
          "[Added Lines]",
          "218:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "220:         $q = \"DELETE FROM object_relations WHERE id={$qId}\";",
          "221:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$qId}\";",
          "223:             $q .= \" AND object_id={$qObjectId}\";",
          "224:             $qReverse .= \" AND id={$qObjectId}\";",
          "232:             list($qInverseSwitch) = static::prepareAll($inverseSwitch);",
          "233:             $q .= \" AND switch={$qSwitch}\";",
          "234:             $qReverse .= \" AND switch={$qInverseSwitch}\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:         $res = $this->query($q);",
          "239:         if ($res === false) {",
          "240:             $this->log('Error executing query: ' . $q, 'error');",
          "241:             return $res;",
          "242:         }",
          "247:         $res = $this->query($qReverse);",
          "248:         if ($res === false) {",
          "249:             $this->log('Error executing query: ' . $qReverse, 'error');",
          "",
          "[Removed Lines]",
          "235:     public function deleteObjectRelation($id, $switch, $inverseSwitch = null) {",
          "237:         $q = \"DELETE FROM object_relations WHERE id={$id} AND switch='{$switch}'\";",
          "243:         if (empty($inverseSwitch)) {",
          "244:             $inverseSwitch = $switch;",
          "245:         }",
          "246:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$id} AND switch='{$inverseSwitch}'\";",
          "",
          "[Added Lines]",
          "259:     public function deleteObjectRelation($id, $switch, $inverseSwitch = null)",
          "260:     {",
          "261:         if (empty($inverseSwitch)) {",
          "262:             $inverseSwitch = $switch;",
          "263:         }",
          "265:         list($qId, $qSwitch, $qInverseSwitch) = static::prepareAll($id, $switch, $inverseSwitch);",
          "266:         $q = \"DELETE FROM object_relations WHERE id={$qId} AND switch={$qSwitch}\";",
          "272:         $qReverse = \"DELETE FROM object_relations WHERE object_id={$qId} AND switch={$qInverseSwitch}\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:         $q = \"  UPDATE object_relations",
          "271:         $res = $this->query($q);",
          "272:         if ($res === false) {",
          "273:             return $res;",
          "",
          "[Removed Lines]",
          "267:     public function updateRelationPriority($id, $objectId, $switch, $priority){",
          "269:                 SET priority={$priority}",
          "270:                 WHERE id={$id} AND object_id={$objectId} AND switch='{$switch}'\";",
          "",
          "[Added Lines]",
          "293:     public function updateRelationPriority($id, $objectId, $switch, $priority)",
          "294:     {",
          "295:         list($qId, $qObjectId, $qSwitch, $qPriority) = static::prepareAll($id, $objectId, $switch, $priority);",
          "297:                 SET priority={$qPriority}",
          "298:                 WHERE id={$qId} AND object_id={$qObjectId} AND switch={$qSwitch}\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "292:         $q = \"  UPDATE object_relations",
          "295:         $res = $this->query($q);",
          "296:         if ($res === false) {",
          "297:             return $res;",
          "",
          "[Removed Lines]",
          "290:     public function updateRelationParams($id, $objectId, $switch, $params=array()) {",
          "291:         $jParams = $params === null ? 'NULL' : sprintf(\"'%s'\", json_encode($params));",
          "293:                 SET params={$jParams}",
          "294:                 WHERE ((id={$id} AND object_id={$objectId}) OR (id={$objectId} AND object_id={$id})) AND switch='{$switch}'\";",
          "",
          "[Added Lines]",
          "318:     public function updateRelationParams($id, $objectId, $switch, $params=array())",
          "319:     {",
          "320:         list($qId, $qObjectId, $qSwitch, $qParams) = static::prepareAll($id, $objectId, $switch, $params);",
          "322:                 SET params={$qParams}",
          "323:                 WHERE ((id={$qId} AND object_id={$qObjectId}) OR (id={$qObjectId} AND object_id={$qId})) AND switch={$qSwitch}\";",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "319:         }",
          "320:         $updateData = array();",
          "321:         if (array_key_exists('params', $set)) {",
          "331:         }",
          "332:         if (array_key_exists('priority', $set)) {",
          "339:         }",
          "341:         if (empty($updateData)) {",
          "342:             return false;",
          "343:         }",
          "345:         $q = 'UPDATE object_relations SET ';",
          "346:         foreach ($updateData as $key => $value) {",
          "347:             $q .= ($key == 0) ? $value : ', ' . $value;",
          "348:         }",
          "350:         $result = $this->query($q);",
          "353:         if ($result !== false && array_key_exists('params', $set)) {",
          "354:             $switchInverse = $this->inverseOf($switch);",
          "355:             $q = \"UPDATE object_relations",
          "358:             $result = $this->query($q);",
          "359:         }",
          "",
          "[Removed Lines]",
          "322:             if ($set['params'] === null) {",
          "323:                 $updateData[] = \"params=NULL\";",
          "324:             } else {",
          "325:                 if (!is_array($set['params'])) {",
          "326:                     return false;",
          "327:                 }",
          "328:                 $set['params'] = json_encode($set['params']);",
          "329:                 $updateData[] = \"params='{$set['params']}'\";",
          "330:             }",
          "333:             if ($set['priority'] === null) {",
          "334:                 $updateData[] = \"priority=NULL\";",
          "335:             } else {",
          "336:                 $set['priority'] = Sanitize::escape($set['priority']);",
          "337:                 $updateData[] = \"priority='{$set['priority']}'\";",
          "338:             }",
          "349:         $q .= \" WHERE id={$id} AND object_id={$objectId} AND switch='{$switch}'\";",
          "356:                 SET params='{$set['params']}'",
          "357:                 WHERE id={$objectId} AND object_id={$id} AND switch='{$switchInverse}'\";",
          "",
          "[Added Lines]",
          "351:             list($qParams) = static::prepareAll($set['params']);",
          "352:             $updateData[] = sprintf('params=%s', $qParams);",
          "355:             list($qPriority) = static::prepareAll($set['priority']);",
          "356:             $updateData[] = sprintf('priority=%s', $qPriority);",
          "363:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "369:         $q .= \" WHERE id={$qId} AND object_id={$qObjectId} AND switch={$qSwitch}\";",
          "375:             list($qSwitchInverse, $qParams) = static::prepareAll($switchInverse, $set['params']);",
          "377:                 SET params={$qParams}",
          "378:                 WHERE id={$qObjectId} AND object_id={$qId} AND switch={$qSwitchInverse}\";",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "380:         if (empty($actualId[0]['object_relations']['id'])) {",
          "381:             return false;",
          "382:         }",
          "",
          "[Removed Lines]",
          "377:     public function relationExists($id, $objectId, $switch) {",
          "378:         $actualId = $this->query(\"SELECT id FROM object_relations WHERE id={$id}",
          "379:             AND object_id={$objectId} AND switch='{$switch}'\");",
          "",
          "[Added Lines]",
          "398:     public function relationExists($id, $objectId, $switch)",
          "399:     {",
          "400:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "401:         $actualId = $this->query(\"SELECT id FROM object_relations WHERE id={$qId}",
          "402:             AND object_id={$qObjectId} AND switch={$qSwitch}\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "396:         if(empty($pri[0][\"object_relations\"][\"priority\"])) {",
          "397:             return false;",
          "398:         }",
          "",
          "[Removed Lines]",
          "393:     public function relationPriority($id, $objectId, $switch) {",
          "394:         $pri = $this->query(\"SELECT priority FROM object_relations WHERE id={$id}",
          "395:                                     AND object_id={$objectId} AND switch='{$switch}'\");",
          "",
          "[Added Lines]",
          "416:     public function relationPriority($id, $objectId, $switch)",
          "417:     {",
          "418:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "419:         $pri = $this->query(\"SELECT priority FROM object_relations WHERE id={$qId}",
          "420:                                     AND object_id={$qObjectId} AND switch={$qSwitch}\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "413:         if(empty($pri[0][\"object_relations\"][\"params\"])) {",
          "414:             return false;",
          "415:         }",
          "",
          "[Removed Lines]",
          "410:     public function relationParams($id, $objectId, $switch, $assoc=true) {",
          "411:         $pri = $this->query(\"SELECT params FROM object_relations WHERE id={$id}",
          "412:                                     AND object_id={$objectId} AND switch='{$switch}'\");",
          "",
          "[Added Lines]",
          "435:     public function relationParams($id, $objectId, $switch, $assoc=true)",
          "436:     {",
          "437:         list($qId, $qObjectId, $qSwitch) = static::prepareAll($id, $objectId, $switch);",
          "438:         $pri = $this->query(\"SELECT params FROM object_relations WHERE id={$qId}",
          "439:                                     AND object_id={$qObjectId} AND switch={$qSwitch}\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}