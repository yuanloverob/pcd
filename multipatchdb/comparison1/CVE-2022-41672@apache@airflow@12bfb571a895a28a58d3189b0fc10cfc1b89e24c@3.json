{
  "cve_id": "CVE-2022-41672",
  "cve_desc": "In Apache Airflow, prior to version 2.4.1, deactivating a user wouldn't prevent an already authenticated user from being able to continue using the UI or API.",
  "repo": "apache/airflow",
  "patch_hash": "12bfb571a895a28a58d3189b0fc10cfc1b89e24c",
  "patch_info": {
    "commit_hash": "12bfb571a895a28a58d3189b0fc10cfc1b89e24c",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/12bfb571a895a28a58d3189b0fc10cfc1b89e24c",
    "files": [
      "airflow/www/app.py",
      "airflow/www/extensions/init_security.py",
      "tests/test_utils/decorators.py",
      "tests/www/views/conftest.py",
      "tests/www/views/test_session.py",
      "tests/www/views/test_views_base.py"
    ],
    "message": "Check user is active (#26635)\n\n(cherry picked from commit 59707cdf7eacb698ca375b5220af30a39ca1018c)",
    "before_after_code_files": [
      "airflow/www/app.py||airflow/www/app.py",
      "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py",
      "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
      "tests/www/views/conftest.py||tests/www/views/conftest.py",
      "tests/www/views/test_session.py||tests/www/views/test_session.py",
      "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py"
    ]
  },
  "patch_diff": {
    "airflow/www/app.py||airflow/www/app.py": [
      "File: airflow/www/app.py -> airflow/www/app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: from airflow.www.extensions.init_jinja_globals import init_jinja_globals",
      "40: from airflow.www.extensions.init_manifest_files import configure_manifest_files",
      "41: from airflow.www.extensions.init_robots import init_robots",
      "43: from airflow.www.extensions.init_session import init_airflow_session_interface",
      "44: from airflow.www.extensions.init_views import (",
      "45:     init_api_connexion,",
      "",
      "[Removed Lines]",
      "42: from airflow.www.extensions.init_security import init_api_experimental_auth, init_xframe_protection",
      "",
      "[Added Lines]",
      "42: from airflow.www.extensions.init_security import (",
      "43:     init_api_experimental_auth,",
      "44:     init_check_user_active,",
      "45:     init_xframe_protection,",
      "46: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:         init_jinja_globals(flask_app)",
      "153:         init_xframe_protection(flask_app)",
      "154:         init_airflow_session_interface(flask_app)",
      "155:     return flask_app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:         init_check_user_active(flask_app)",
      "",
      "---------------"
    ],
    "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py": [
      "File: airflow/www/extensions/init_security.py -> airflow/www/extensions/init_security.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import logging",
      "20: from importlib import import_module",
      "22: from airflow.configuration import conf",
      "23: from airflow.exceptions import AirflowConfigException, AirflowException",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: from flask import g, redirect, url_for",
      "23: from flask_login import logout_user",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:         except ImportError as err:",
      "61:             log.critical(\"Cannot import %s for API authentication due to: %s\", backend, err)",
      "62:             raise AirflowException(err)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68: def init_check_user_active(app):",
      "69:     @app.before_request",
      "70:     def check_user_active():",
      "71:         if g.user is not None and not g.user.is_anonymous and not g.user.is_active:",
      "72:             logout_user()",
      "73:             return redirect(url_for(app.appbuilder.sm.auth_view.endpoint + \".login\"))",
      "",
      "---------------"
    ],
    "tests/test_utils/decorators.py||tests/test_utils/decorators.py": [
      "File: tests/test_utils/decorators.py -> tests/test_utils/decorators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:             \"init_xframe_protection\",",
      "46:             \"init_airflow_session_interface\",",
      "47:             \"init_appbuilder\",",
      "48:         ]",
      "50:         @functools.wraps(f)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:             \"init_check_user_active\",",
      "",
      "---------------"
    ],
    "tests/www/views/conftest.py||tests/www/views/conftest.py": [
      "File: tests/www/views/conftest.py -> tests/www/views/conftest.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:             \"init_jinja_globals\",",
      "59:             \"init_plugins\",",
      "60:             \"init_airflow_session_interface\",",
      "61:         ]",
      "62:     )",
      "63:     def factory():",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:             \"init_check_user_active\",",
      "",
      "---------------"
    ],
    "tests/www/views/test_session.py||tests/www/views/test_session.py": [
      "File: tests/www/views/test_session.py -> tests/www/views/test_session.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:     new_session_cookie = get_session_cookie(user_client)",
      "89:     assert new_session_cookie is not None",
      "90:     assert old_session_cookie.value != new_session_cookie.value",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93: def test_check_active_user(app, user_client):",
      "94:     user = app.appbuilder.sm.find_user(username=\"test_user\")",
      "95:     user.active = False",
      "96:     resp = user_client.get(\"/home\")",
      "97:     assert resp.status_code == 302",
      "98:     assert \"/login\" in resp.headers.get(\"Location\")",
      "100:     # And they were logged out",
      "101:     user.active = True",
      "102:     resp = user_client.get(\"/home\")",
      "103:     assert resp.status_code == 302",
      "104:     assert \"/login\" in resp.headers.get(\"Location\")",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py": [
      "File: tests/www/views/test_views_base.py -> tests/www/views/test_views_base.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
      "34:     with assert_queries_count(16):",
      "36:     check_content_in_response('DAGs', resp)",
      "",
      "[Removed Lines]",
      "33: def test_index(admin_client):",
      "35:         resp = admin_client.get('/', follow_redirects=True)",
      "",
      "[Added Lines]",
      "33: def test_index_redirect(admin_client):",
      "34:     resp = admin_client.get('/')",
      "35:     assert resp.status_code == 302",
      "36:     assert '/home' in resp.headers.get(\"Location\")",
      "38:     resp = admin_client.get('/', follow_redirects=True)",
      "39:     check_content_in_response('DAGs', resp)",
      "42: def test_homepage_query_count(admin_client):",
      "44:         resp = admin_client.get('/home')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "131d8be2c678b271c52f84f79601ad1131bc83e4",
      "candidate_info": {
        "commit_hash": "131d8be2c678b271c52f84f79601ad1131bc83e4",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/131d8be2c678b271c52f84f79601ad1131bc83e4",
        "files": [
          "airflow/www/static/js/dag/details/ConfirmDialog.tsx"
        ],
        "message": "Fix scroll overflow for ConfirmDialog (#26681)\n\n(cherry picked from commit a83689935867b02fe1502e263f7dd1febff732ed)",
        "before_after_code_files": [
          "airflow/www/static/js/dag/details/ConfirmDialog.tsx||airflow/www/static/js/dag/details/ConfirmDialog.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/dag/details/ConfirmDialog.tsx||airflow/www/static/js/dag/details/ConfirmDialog.tsx": [
          "File: airflow/www/static/js/dag/details/ConfirmDialog.tsx -> airflow/www/static/js/dag/details/ConfirmDialog.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:       blockScrollOnMount={false}",
          "59:     >",
          "60:       <AlertDialogOverlay>",
          "62:           <AlertDialogHeader fontSize=\"4xl\" fontWeight=\"bold\">",
          "63:             {title}",
          "64:           </AlertDialogHeader>",
          "67:             <Text mb={2}>{description}</Text>",
          "68:             {Array.isArray(body) && body.map((ti) => (<Code key={ti} fontSize=\"lg\">{ti}</Code>))}",
          "69:           </AlertDialogBody>",
          "",
          "[Removed Lines]",
          "61:         <AlertDialogContent>",
          "66:           <AlertDialogBody>",
          "",
          "[Added Lines]",
          "62:         <AlertDialogContent maxHeight=\"90vh\">",
          "67:           <AlertDialogBody overflowY=\"auto\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aba4bd20af9811dca0f90e976f073f7fd3596e3",
      "candidate_info": {
        "commit_hash": "0aba4bd20af9811dca0f90e976f073f7fd3596e3",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0aba4bd20af9811dca0f90e976f073f7fd3596e3",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/config_templates/default_airflow.cfg"
        ],
        "message": "Document the non-sensitive-only option for expose_config (#26507)\n\nDocuments the new non-sensitive-only option for ``webserver.expose_config``.\n\n(cherry picked from commit 675eb4db4e5d3da86b818fb3daccd3baf4d1ff4c)",
        "before_after_code_files": [
          "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
          "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: # documentation - https://docs.gunicorn.org/en/stable/settings.html#access-log-format",
          "623: access_logformat =",
          "626: expose_config = False",
          "628: # Expose hostname in the web server",
          "",
          "[Removed Lines]",
          "625: # Expose the configuration file in the web server",
          "",
          "[Added Lines]",
          "625: # Expose the configuration file in the web server. Set to \"non-sensitive-only\" to show all values",
          "626: # except those that have security implications. \"True\" shows all values. \"False\" hides the",
          "627: # configuration completely.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69274caf613950939df3bf8a96a5b27336b20843",
      "candidate_info": {
        "commit_hash": "69274caf613950939df3bf8a96a5b27336b20843",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/69274caf613950939df3bf8a96a5b27336b20843",
        "files": [
          "airflow/www/templates/airflow/dag_dependencies.html"
        ],
        "message": "DAG Deps extends `base_template` (#26439)\n\nThe DAG Deps page should extend `base_template` instead of Airflow's\nmain template (which is the default `base_template`). This is consistent\nwith all other pages and allows for proper UI customization.\n\n(cherry picked from commit 9925bbd98156bc9f3ab792da2eb484bc45daa69c)",
        "before_after_code_files": [
          "airflow/www/templates/airflow/dag_dependencies.html||airflow/www/templates/airflow/dag_dependencies.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/templates/airflow/dag_dependencies.html||airflow/www/templates/airflow/dag_dependencies.html": [
          "File: airflow/www/templates/airflow/dag_dependencies.html -> airflow/www/templates/airflow/dag_dependencies.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: under the License.",
          "18: #}",
          "22: {% block title %}Airflow - DAG Dependencies{% endblock %}",
          "",
          "[Removed Lines]",
          "20: {% extends \"airflow/main.html\" %}",
          "",
          "[Added Lines]",
          "20: {% extends base_template %}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cd93d541e715666f3117607cba003372830eb0e",
      "candidate_info": {
        "commit_hash": "5cd93d541e715666f3117607cba003372830eb0e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/5cd93d541e715666f3117607cba003372830eb0e",
        "files": [
          "airflow/example_dags/example_branch_datetime_operator.py"
        ],
        "message": "Doc: Fix typos in ``example_branch_datetime_operator`` (#26455)\n\n(cherry picked from commit 4ed455674efde607180b9ebf05cd505348bcb8bd)",
        "before_after_code_files": [
          "airflow/example_dags/example_branch_datetime_operator.py||airflow/example_dags/example_branch_datetime_operator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/example_dags/example_branch_datetime_operator.py||airflow/example_dags/example_branch_datetime_operator.py": [
          "File: airflow/example_dags/example_branch_datetime_operator.py -> airflow/example_dags/example_branch_datetime_operator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     dag=dag1,",
          "49: )",
          "52: cond1 >> [empty_task_11, empty_task_21]",
          "53: # [END howto_branch_datetime_operator]",
          "",
          "[Removed Lines]",
          "51: # Run empty_task_1 if cond1 executes between 2020-10-10 14:00:00 and 2020-10-10 15:00:00",
          "",
          "[Added Lines]",
          "51: # Run empty_task_11 if cond1 executes between 2020-10-10 14:00:00 and 2020-10-10 15:00:00",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: )",
          "76: # Since target_lower happens after target_upper, target_upper will be moved to the following day",
          "78: cond2 >> [empty_task_12, empty_task_22]",
          "79: # [END howto_branch_datetime_operator_next_day]",
          "",
          "[Removed Lines]",
          "77: # Run empty_task_1 if cond2 executes between 15:00:00, and 00:00:00 of the following day",
          "",
          "[Added Lines]",
          "77: # Run empty_task_12 if cond2 executes between 15:00:00, and 00:00:00 of the following day",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:     dag=dag3,",
          "100: )",
          "103: cond3 >> [empty_task_13, empty_task_23]",
          "104: # [END howto_branch_datetime_operator_logical_date]",
          "",
          "[Removed Lines]",
          "102: # Run empty_task_3 if cond1 executes between 2020-10-10 14:00:00 and 2020-10-10 15:00:00",
          "",
          "[Added Lines]",
          "102: # Run empty_task_13 if cond3 executes between 2020-10-10 14:00:00 and 2020-10-10 15:00:00",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b9a540176f3818af2aaaee04a959026622a0e47",
      "candidate_info": {
        "commit_hash": "0b9a540176f3818af2aaaee04a959026622a0e47",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0b9a540176f3818af2aaaee04a959026622a0e47",
        "files": [
          "airflow/www/fab_security/manager.py"
        ],
        "message": "No missing user warning for public admin (#26611)\n\nIf airflow has been configured such that public role is admin, there's no need to add users, so we shouldn't warn if there are none.\n\n(cherry picked from commit f01eed6490acd3bb3a58824e7388c4c3cd50ae29)",
        "before_after_code_files": [
          "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py": [
          "File: airflow/www/fab_security/manager.py -> airflow/www/fab_security/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:         if self.auth_role_admin not in self.builtin_roles:",
          "821:             self.add_role(self.auth_role_admin)",
          "822:         self.add_role(self.auth_role_public)",
          "824:             log.warning(LOGMSG_WAR_SEC_NO_USER)",
          "826:     def reset_password(self, userid, password):",
          "",
          "[Removed Lines]",
          "823:         if self.count_users() == 0:",
          "",
          "[Added Lines]",
          "823:         if self.count_users() == 0 and self.auth_role_public != self.auth_role_admin:",
          "",
          "---------------"
        ]
      }
    }
  ]
}