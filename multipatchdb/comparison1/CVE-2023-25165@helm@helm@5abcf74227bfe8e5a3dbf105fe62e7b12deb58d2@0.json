{
  "cve_id": "CVE-2023-25165",
  "cve_desc": "Helm is a tool that streamlines installing and managing Kubernetes applications.`getHostByName` is a Helm template function introduced in Helm v3. The function is able to accept a hostname and return an IP address for that hostname. To get the IP address the function performs a DNS lookup. The DNS lookup happens when used with `helm install|upgrade|template` or when the Helm SDK is used to render a chart. Information passed into the chart can be disclosed to the DNS servers used to lookup the IP address. For example, a malicious chart could inject `getHostByName` into a chart in order to disclose values to a malicious DNS server. The issue has been fixed in Helm 3.11.1. Prior to using a chart with Helm verify the `getHostByName` function is not being used in a template to disclose any information you do not want passed to DNS servers.",
  "repo": "helm/helm",
  "patch_hash": "5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
  "patch_info": {
    "commit_hash": "5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
    "files": [
      "cmd/helm/install.go",
      "cmd/helm/upgrade.go",
      "pkg/action/action.go",
      "pkg/action/install.go",
      "pkg/action/upgrade.go",
      "pkg/engine/engine.go",
      "pkg/engine/engine_test.go"
    ],
    "message": "Merge pull request from GHSA-pwcw-6f5g-gxf8\n\nUpdate to func handling",
    "before_after_code_files": [
      "cmd/helm/install.go||cmd/helm/install.go",
      "cmd/helm/upgrade.go||cmd/helm/upgrade.go",
      "pkg/action/action.go||pkg/action/action.go",
      "pkg/action/install.go||pkg/action/install.go",
      "pkg/action/upgrade.go||pkg/action/upgrade.go",
      "pkg/engine/engine.go||pkg/engine/engine.go",
      "pkg/engine/engine_test.go||pkg/engine/engine_test.go"
    ]
  },
  "patch_diff": {
    "cmd/helm/install.go||cmd/helm/install.go": [
      "File: cmd/helm/install.go -> cmd/helm/install.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:  f.BoolVar(&client.Atomic, \"atomic\", false, \"if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\")",
      "171:  f.BoolVar(&client.SkipCRDs, \"skip-crds\", false, \"if set, no CRDs will be installed. By default, CRDs are installed if not already present\")",
      "172:  f.BoolVar(&client.SubNotes, \"render-subchart-notes\", false, \"if set, render subchart notes along with the parent\")",
      "173:  addValueOptionsFlags(f, valueOpts)",
      "174:  addChartPathOptionsFlags(f, &client.ChartPathOptions)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173:  f.BoolVar(&client.EnableDNS, \"enable-dns\", false, \"enable DNS lookups when rendering templates\")",
      "",
      "---------------"
    ],
    "cmd/helm/upgrade.go||cmd/helm/upgrade.go": [
      "File: cmd/helm/upgrade.go -> cmd/helm/upgrade.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "119:      instClient.SubNotes = client.SubNotes",
      "120:      instClient.Description = client.Description",
      "121:      instClient.DependencyUpdate = client.DependencyUpdate",
      "123:      rel, err := runInstall(args, instClient, valueOpts, out)",
      "124:      if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "122:      instClient.EnableDNS = client.EnableDNS",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:  f.BoolVar(&client.SubNotes, \"render-subchart-notes\", false, \"if set, render subchart notes along with the parent\")",
      "233:  f.StringVar(&client.Description, \"description\", \"\", \"add a custom description\")",
      "234:  f.BoolVar(&client.DependencyUpdate, \"dependency-update\", false, \"update dependencies if they are missing before installing the chart\")",
      "235:  addChartPathOptionsFlags(f, &client.ChartPathOptions)",
      "236:  addValueOptionsFlags(f, valueOpts)",
      "237:  bindOutputFlag(cmd, &outfmt)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:  f.BoolVar(&client.EnableDNS, \"enable-dns\", false, \"enable DNS lookups when rendering templates\")",
      "",
      "---------------"
    ],
    "pkg/action/action.go||pkg/action/action.go": [
      "File: pkg/action/action.go -> pkg/action/action.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:  hs := []*release.Hook{}",
      "107:  b := bytes.NewBuffer(nil)",
      "",
      "[Removed Lines]",
      "105: func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Values, releaseName, outputDir string, subNotes, useReleaseName, includeCrds bool, pr postrender.PostRenderer, dryRun bool) ([]*release.Hook, *bytes.Buffer, string, error) {",
      "",
      "[Added Lines]",
      "106: func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Values, releaseName, outputDir string, subNotes, useReleaseName, includeCrds bool, pr postrender.PostRenderer, dryRun, enableDNS bool) ([]*release.Hook, *bytes.Buffer, string, error) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:   if err != nil {",
      "131:    return hs, b, \"\", err",
      "132:   }",
      "134:  } else {",
      "136:  }",
      "138:  if err2 != nil {",
      "",
      "[Removed Lines]",
      "133:   files, err2 = engine.RenderWithClient(ch, values, restConfig)",
      "135:   files, err2 = engine.Render(ch, values)",
      "",
      "[Added Lines]",
      "134:   e := engine.New(restConfig)",
      "135:   e.EnableDNS = enableDNS",
      "136:   files, err2 = e.Render(ch, values)",
      "138:   var e engine.Engine",
      "139:   e.EnableDNS = enableDNS",
      "140:   files, err2 = e.Render(ch, values)",
      "",
      "---------------"
    ],
    "pkg/action/install.go||pkg/action/install.go": [
      "File: pkg/action/install.go -> pkg/action/install.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:  APIVersions chartutil.VersionSet",
      "99:  IsUpgrade bool",
      "102:  UseReleaseName bool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101:  EnableDNS bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "257:  rel := i.createRelease(chrt, vals)",
      "259:  var manifestDoc *bytes.Buffer",
      "262:  if manifestDoc != nil {",
      "263:   rel.Manifest = manifestDoc.String()",
      "",
      "[Removed Lines]",
      "260:  rel.Hooks, manifestDoc, rel.Info.Notes, err = i.cfg.renderResources(chrt, valuesToRender, i.ReleaseName, i.OutputDir, i.SubNotes, i.UseReleaseName, i.IncludeCRDs, i.PostRenderer, i.DryRun)",
      "",
      "[Added Lines]",
      "262:  rel.Hooks, manifestDoc, rel.Info.Notes, err = i.cfg.renderResources(chrt, valuesToRender, i.ReleaseName, i.OutputDir, i.SubNotes, i.UseReleaseName, i.IncludeCRDs, i.PostRenderer, i.DryRun, i.EnableDNS)",
      "",
      "---------------"
    ],
    "pkg/action/upgrade.go||pkg/action/upgrade.go": [
      "File: pkg/action/upgrade.go -> pkg/action/upgrade.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:  DependencyUpdate bool",
      "105:  Lock sync.Mutex",
      "106: }",
      "108: type resultMessage struct {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "107:  EnableDNS bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:   return nil, nil, err",
      "232:  }",
      "235:  if err != nil {",
      "236:   return nil, nil, err",
      "237:  }",
      "",
      "[Removed Lines]",
      "234:  hooks, manifestDoc, notesTxt, err := u.cfg.renderResources(chart, valuesToRender, \"\", \"\", u.SubNotes, false, false, u.PostRenderer, u.DryRun)",
      "",
      "[Added Lines]",
      "236:  hooks, manifestDoc, notesTxt, err := u.cfg.renderResources(chart, valuesToRender, \"\", \"\", u.SubNotes, false, false, u.PostRenderer, u.DryRun, u.EnableDNS)",
      "",
      "---------------"
    ],
    "pkg/engine/engine.go||pkg/engine/engine.go": [
      "File: pkg/engine/engine.go -> pkg/engine/engine.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  LintMode bool",
      "44:  config *rest.Config",
      "45: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  EnableDNS bool",
      "47: }",
      "50: func New(config *rest.Config) Engine {",
      "51:  return Engine{",
      "52:   config: config,",
      "53:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "189:   funcMap[\"lookup\"] = NewLookupFunction(e.config)",
      "190:  }",
      "192:  t.Funcs(funcMap)",
      "193: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "203:  if !e.EnableDNS {",
      "204:   funcMap[\"getHostByName\"] = func(name string) string {",
      "205:    return \"\"",
      "206:   }",
      "207:  }",
      "",
      "---------------"
    ],
    "pkg/engine/engine_test.go||pkg/engine/engine_test.go": [
      "File: pkg/engine/engine_test.go -> pkg/engine/engine_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import (",
      "20:  \"fmt\"",
      "21:  \"strings\"",
      "22:  \"sync\"",
      "23:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:  \"path\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:    {Name: \"templates/test2\", Data: []byte(\"{{.Values.global.callme | lower }}\")},",
      "90:    {Name: \"templates/test3\", Data: []byte(\"{{.noValue}}\")},",
      "91:    {Name: \"templates/test4\", Data: []byte(\"{{toJson .Values}}\")},",
      "92:   },",
      "93:   Values: map[string]interface{}{\"outer\": \"DEFAULT\", \"inner\": \"DEFAULT\"},",
      "94:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93:    {Name: \"templates/test5\", Data: []byte(\"{{getHostByName \\\"helm.sh\\\"}}\")},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "117:   \"moby/templates/test2\": \"ishmael\",",
      "118:   \"moby/templates/test3\": \"\",",
      "119:   \"moby/templates/test4\": `{\"global\":{\"callme\":\"Ishmael\"},\"inner\":\"inn\",\"outer\":\"spouter\"}`,",
      "120:  }",
      "122:  for name, data := range expect {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "122:   \"moby/templates/test5\": \"\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "200:  }",
      "201: }",
      "203: func TestParallelRenderInternals(t *testing.T) {",
      "205:  e := new(Engine)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206: func TestRenderWIthDNS(t *testing.T) {",
      "207:  c := &chart.Chart{",
      "208:   Metadata: &chart.Metadata{",
      "209:    Name:    \"moby\",",
      "210:    Version: \"1.2.3\",",
      "211:   },",
      "212:   Templates: []*chart.File{",
      "213:    {Name: \"templates/test1\", Data: []byte(\"{{getHostByName \\\"helm.sh\\\"}}\")},",
      "214:   },",
      "215:   Values: map[string]interface{}{},",
      "216:  }",
      "218:  vals := map[string]interface{}{",
      "219:   \"Values\": map[string]interface{}{},",
      "220:  }",
      "222:  v, err := chartutil.CoalesceValues(c, vals)",
      "223:  if err != nil {",
      "224:   t.Fatalf(\"Failed to coalesce values: %s\", err)",
      "225:  }",
      "227:  var e Engine",
      "228:  e.EnableDNS = true",
      "229:  out, err := e.Render(c, v)",
      "230:  if err != nil {",
      "231:   t.Errorf(\"Failed to render templates: %s\", err)",
      "232:  }",
      "234:  for _, val := range c.Templates {",
      "235:   fp := path.Join(\"moby\", val.Name)",
      "236:   if out[fp] == \"\" {",
      "237:    t.Errorf(\"Expected IP address, got %q\", out[fp])",
      "238:   }",
      "239:  }",
      "240: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "293b50c65d4d56187cd4e2f390f0ada46b4c4737",
      "candidate_info": {
        "commit_hash": "293b50c65d4d56187cd4e2f390f0ada46b4c4737",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/293b50c65d4d56187cd4e2f390f0ada46b4c4737",
        "files": [
          "cmd/helm/install.go",
          "cmd/helm/upgrade.go",
          "pkg/action/action.go",
          "pkg/action/install.go",
          "pkg/action/upgrade.go",
          "pkg/engine/engine.go",
          "pkg/engine/engine_test.go"
        ],
        "message": "Update to func handling\n\nSigned-off-by: Matt Farina <matt@mattfarina.com>\n(cherry picked from commit 863bc74e5ad090b97f69dcb643be8d969b07e7cf)",
        "before_after_code_files": [
          "cmd/helm/install.go||cmd/helm/install.go",
          "cmd/helm/upgrade.go||cmd/helm/upgrade.go",
          "pkg/action/action.go||pkg/action/action.go",
          "pkg/action/install.go||pkg/action/install.go",
          "pkg/action/upgrade.go||pkg/action/upgrade.go",
          "pkg/engine/engine.go||pkg/engine/engine.go",
          "pkg/engine/engine_test.go||pkg/engine/engine_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "cmd/helm/install.go||cmd/helm/install.go",
            "cmd/helm/upgrade.go||cmd/helm/upgrade.go",
            "pkg/action/action.go||pkg/action/action.go",
            "pkg/action/install.go||pkg/action/install.go",
            "pkg/action/upgrade.go||pkg/action/upgrade.go",
            "pkg/engine/engine.go||pkg/engine/engine.go",
            "pkg/engine/engine_test.go||pkg/engine/engine_test.go"
          ],
          "candidate": [
            "cmd/helm/install.go||cmd/helm/install.go",
            "cmd/helm/upgrade.go||cmd/helm/upgrade.go",
            "pkg/action/action.go||pkg/action/action.go",
            "pkg/action/install.go||pkg/action/install.go",
            "pkg/action/upgrade.go||pkg/action/upgrade.go",
            "pkg/engine/engine.go||pkg/engine/engine.go",
            "pkg/engine/engine_test.go||pkg/engine/engine_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/helm/install.go||cmd/helm/install.go": [
          "File: cmd/helm/install.go -> cmd/helm/install.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  f.BoolVar(&client.Atomic, \"atomic\", false, \"if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\")",
          "171:  f.BoolVar(&client.SkipCRDs, \"skip-crds\", false, \"if set, no CRDs will be installed. By default, CRDs are installed if not already present\")",
          "172:  f.BoolVar(&client.SubNotes, \"render-subchart-notes\", false, \"if set, render subchart notes along with the parent\")",
          "173:  addValueOptionsFlags(f, valueOpts)",
          "174:  addChartPathOptionsFlags(f, &client.ChartPathOptions)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:  f.BoolVar(&client.EnableDNS, \"enable-dns\", false, \"enable DNS lookups when rendering templates\")",
          "",
          "---------------"
        ],
        "cmd/helm/upgrade.go||cmd/helm/upgrade.go": [
          "File: cmd/helm/upgrade.go -> cmd/helm/upgrade.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:      instClient.SubNotes = client.SubNotes",
          "120:      instClient.Description = client.Description",
          "121:      instClient.DependencyUpdate = client.DependencyUpdate",
          "123:      rel, err := runInstall(args, instClient, valueOpts, out)",
          "124:      if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:      instClient.EnableDNS = client.EnableDNS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  f.BoolVar(&client.SubNotes, \"render-subchart-notes\", false, \"if set, render subchart notes along with the parent\")",
          "233:  f.StringVar(&client.Description, \"description\", \"\", \"add a custom description\")",
          "234:  f.BoolVar(&client.DependencyUpdate, \"dependency-update\", false, \"update dependencies if they are missing before installing the chart\")",
          "235:  addChartPathOptionsFlags(f, &client.ChartPathOptions)",
          "236:  addValueOptionsFlags(f, valueOpts)",
          "237:  bindOutputFlag(cmd, &outfmt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:  f.BoolVar(&client.EnableDNS, \"enable-dns\", false, \"enable DNS lookups when rendering templates\")",
          "",
          "---------------"
        ],
        "pkg/action/action.go||pkg/action/action.go": [
          "File: pkg/action/action.go -> pkg/action/action.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  hs := []*release.Hook{}",
          "107:  b := bytes.NewBuffer(nil)",
          "",
          "[Removed Lines]",
          "105: func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Values, releaseName, outputDir string, subNotes, useReleaseName, includeCrds bool, pr postrender.PostRenderer, dryRun bool) ([]*release.Hook, *bytes.Buffer, string, error) {",
          "",
          "[Added Lines]",
          "106: func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Values, releaseName, outputDir string, subNotes, useReleaseName, includeCrds bool, pr postrender.PostRenderer, dryRun, enableDNS bool) ([]*release.Hook, *bytes.Buffer, string, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:   if err != nil {",
          "131:    return hs, b, \"\", err",
          "132:   }",
          "134:  } else {",
          "136:  }",
          "138:  if err2 != nil {",
          "",
          "[Removed Lines]",
          "133:   files, err2 = engine.RenderWithClient(ch, values, restConfig)",
          "135:   files, err2 = engine.Render(ch, values)",
          "",
          "[Added Lines]",
          "134:   e := engine.New(restConfig)",
          "135:   e.EnableDNS = enableDNS",
          "136:   files, err2 = e.Render(ch, values)",
          "138:   var e engine.Engine",
          "139:   e.EnableDNS = enableDNS",
          "140:   files, err2 = e.Render(ch, values)",
          "",
          "---------------"
        ],
        "pkg/action/install.go||pkg/action/install.go": [
          "File: pkg/action/install.go -> pkg/action/install.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  APIVersions chartutil.VersionSet",
          "99:  IsUpgrade bool",
          "102:  UseReleaseName bool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:  EnableDNS bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:  rel := i.createRelease(chrt, vals)",
          "259:  var manifestDoc *bytes.Buffer",
          "262:  if manifestDoc != nil {",
          "263:   rel.Manifest = manifestDoc.String()",
          "",
          "[Removed Lines]",
          "260:  rel.Hooks, manifestDoc, rel.Info.Notes, err = i.cfg.renderResources(chrt, valuesToRender, i.ReleaseName, i.OutputDir, i.SubNotes, i.UseReleaseName, i.IncludeCRDs, i.PostRenderer, i.DryRun)",
          "",
          "[Added Lines]",
          "262:  rel.Hooks, manifestDoc, rel.Info.Notes, err = i.cfg.renderResources(chrt, valuesToRender, i.ReleaseName, i.OutputDir, i.SubNotes, i.UseReleaseName, i.IncludeCRDs, i.PostRenderer, i.DryRun, i.EnableDNS)",
          "",
          "---------------"
        ],
        "pkg/action/upgrade.go||pkg/action/upgrade.go": [
          "File: pkg/action/upgrade.go -> pkg/action/upgrade.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  DependencyUpdate bool",
          "105:  Lock sync.Mutex",
          "106: }",
          "108: type resultMessage struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:  EnableDNS bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:   return nil, nil, err",
          "232:  }",
          "235:  if err != nil {",
          "236:   return nil, nil, err",
          "237:  }",
          "",
          "[Removed Lines]",
          "234:  hooks, manifestDoc, notesTxt, err := u.cfg.renderResources(chart, valuesToRender, \"\", \"\", u.SubNotes, false, false, u.PostRenderer, u.DryRun)",
          "",
          "[Added Lines]",
          "236:  hooks, manifestDoc, notesTxt, err := u.cfg.renderResources(chart, valuesToRender, \"\", \"\", u.SubNotes, false, false, u.PostRenderer, u.DryRun, u.EnableDNS)",
          "",
          "---------------"
        ],
        "pkg/engine/engine.go||pkg/engine/engine.go": [
          "File: pkg/engine/engine.go -> pkg/engine/engine.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  LintMode bool",
          "44:  config *rest.Config",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:  EnableDNS bool",
          "47: }",
          "50: func New(config *rest.Config) Engine {",
          "51:  return Engine{",
          "52:   config: config,",
          "53:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   funcMap[\"lookup\"] = NewLookupFunction(e.config)",
          "190:  }",
          "192:  t.Funcs(funcMap)",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  if !e.EnableDNS {",
          "204:   funcMap[\"getHostByName\"] = func(name string) string {",
          "205:    return \"\"",
          "206:   }",
          "207:  }",
          "",
          "---------------"
        ],
        "pkg/engine/engine_test.go||pkg/engine/engine_test.go": [
          "File: pkg/engine/engine_test.go -> pkg/engine/engine_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"fmt\"",
          "21:  \"strings\"",
          "22:  \"sync\"",
          "23:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"path\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:    {Name: \"templates/test2\", Data: []byte(\"{{.Values.global.callme | lower }}\")},",
          "90:    {Name: \"templates/test3\", Data: []byte(\"{{.noValue}}\")},",
          "91:    {Name: \"templates/test4\", Data: []byte(\"{{toJson .Values}}\")},",
          "92:   },",
          "93:   Values: map[string]interface{}{\"outer\": \"DEFAULT\", \"inner\": \"DEFAULT\"},",
          "94:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:    {Name: \"templates/test5\", Data: []byte(\"{{getHostByName \\\"helm.sh\\\"}}\")},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:   \"moby/templates/test2\": \"ishmael\",",
          "118:   \"moby/templates/test3\": \"\",",
          "119:   \"moby/templates/test4\": `{\"global\":{\"callme\":\"Ishmael\"},\"inner\":\"inn\",\"outer\":\"spouter\"}`,",
          "120:  }",
          "122:  for name, data := range expect {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   \"moby/templates/test5\": \"\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:  }",
          "201: }",
          "203: func TestParallelRenderInternals(t *testing.T) {",
          "205:  e := new(Engine)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: func TestRenderWIthDNS(t *testing.T) {",
          "207:  c := &chart.Chart{",
          "208:   Metadata: &chart.Metadata{",
          "209:    Name:    \"moby\",",
          "210:    Version: \"1.2.3\",",
          "211:   },",
          "212:   Templates: []*chart.File{",
          "213:    {Name: \"templates/test1\", Data: []byte(\"{{getHostByName \\\"helm.sh\\\"}}\")},",
          "214:   },",
          "215:   Values: map[string]interface{}{},",
          "216:  }",
          "218:  vals := map[string]interface{}{",
          "219:   \"Values\": map[string]interface{}{},",
          "220:  }",
          "222:  v, err := chartutil.CoalesceValues(c, vals)",
          "223:  if err != nil {",
          "224:   t.Fatalf(\"Failed to coalesce values: %s\", err)",
          "225:  }",
          "227:  var e Engine",
          "228:  e.EnableDNS = true",
          "229:  out, err := e.Render(c, v)",
          "230:  if err != nil {",
          "231:   t.Errorf(\"Failed to render templates: %s\", err)",
          "232:  }",
          "234:  for _, val := range c.Templates {",
          "235:   fp := path.Join(\"moby\", val.Name)",
          "236:   if out[fp] == \"\" {",
          "237:    t.Errorf(\"Expected IP address, got %q\", out[fp])",
          "238:   }",
          "239:  }",
          "240: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}