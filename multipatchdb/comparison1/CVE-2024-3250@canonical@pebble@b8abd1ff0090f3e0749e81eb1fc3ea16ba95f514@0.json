{
  "cve_id": "CVE-2024-3250",
  "cve_desc": "It was discovered that Canonical's Pebble service manager read-file API and the associated pebble pull command, before v1.10.2, allowed unprivileged local users to read files with root-equivalent permissions when Pebble was running as root. Fixes are also available as backports to v1.1.1, v1.4.2, and v1.7.4.",
  "repo": "canonical/pebble",
  "patch_hash": "b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514",
  "patch_info": {
    "commit_hash": "b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514",
    "repo": "canonical/pebble",
    "commit_url": "https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514",
    "files": [
      "internals/daemon/api.go",
      "internals/daemon/daemon_test.go"
    ],
    "message": "fix(daemon): require admin access for file pull API\n\nThis locks down the files \"pull\" API to require admin. Even though it's\na read (GET), this meant any user could potentially read sensitive\nfiles.\n\nWe also lock down the task-websocket endpoint to admin. This is a GET\nendpoint, but these websockets are used by exec to send stdin/out/err\nand commands to the exec'd process, so they should require admin too.",
    "before_after_code_files": [
      "internals/daemon/api.go||internals/daemon/api.go",
      "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
    ]
  },
  "patch_diff": {
    "internals/daemon/api.go||internals/daemon/api.go": [
      "File: internals/daemon/api.go -> internals/daemon/api.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:  UserOK: true,",
      "71:  POST:   v1PostLayers,",
      "72: }, {",
      "77: }, {",
      "78:  Path:   \"/v1/logs\",",
      "79:  UserOK: true,",
      "",
      "[Removed Lines]",
      "73:  Path:   \"/v1/files\",",
      "74:  UserOK: true,",
      "75:  GET:    v1GetFiles,",
      "76:  POST:   v1PostFiles,",
      "",
      "[Added Lines]",
      "73:  Path:      \"/v1/files\",",
      "74:  AdminOnly: true,",
      "75:  GET:       v1GetFiles,",
      "76:  POST:      v1PostFiles,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:  UserOK: true,",
      "84:  POST:   v1PostExec,",
      "85: }, {",
      "89: }, {",
      "90:  Path:   \"/v1/signals\",",
      "91:  UserOK: true,",
      "",
      "[Removed Lines]",
      "86:  Path:   \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
      "87:  UserOK: true,",
      "88:  GET:    v1GetTaskWebsocket,",
      "",
      "[Added Lines]",
      "86:  Path:      \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
      "87:  AdminOnly: true,",
      "88:  GET:       v1GetTaskWebsocket,",
      "",
      "---------------"
    ],
    "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go": [
      "File: internals/daemon/daemon_test.go -> internals/daemon/daemon_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:  \"bytes\"",
      "19:  \"encoding/json\"",
      "20:  \"fmt\"",
      "21:  \"io/ioutil\"",
      "22:  \"net\"",
      "23:  \"net/http\"",
      "24:  \"net/http/httptest\"",
      "25:  \"os\"",
      "26:  \"path/filepath\"",
      "27:  \"sync\"",
      "28:  \"syscall\"",
      "29:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:  \"io\"",
      "26:  \"net/url\"",
      "29:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1243:  c.Check(tasks[0].Kind(), Equals, \"stop\")",
      "1244: }",
      "1246: type rebootSuite struct{}",
      "1248: var _ = Suite(&rebootSuite{})",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1249: func (s *daemonSuite) TestAPIAccessLevels(c *C) {",
      "1250:  _ = s.newDaemon(c)",
      "1252:  tests := []struct {",
      "1253:   method string",
      "1254:   path   string",
      "1255:   body   string",
      "1256:   uid    int // -1 means no peer cred user",
      "1257:   status int",
      "1258:  }{",
      "1259:   {\"GET\", \"/v1/system-info\", ``, -1, http.StatusOK},",
      "1261:   {\"GET\", \"/v1/health\", ``, -1, http.StatusOK},",
      "1263:   {\"GET\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
      "1264:   {\"GET\", \"/v1/warnings\", ``, 42, http.StatusOK},",
      "1265:   {\"GET\", \"/v1/warnings\", ``, 0, http.StatusOK},",
      "1266:   {\"POST\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
      "1267:   {\"POST\", \"/v1/warnings\", ``, 42, http.StatusUnauthorized},",
      "1268:   {\"POST\", \"/v1/warnings\", ``, 0, http.StatusBadRequest},",
      "1270:   {\"GET\", \"/v1/changes\", ``, -1, http.StatusUnauthorized},",
      "1271:   {\"GET\", \"/v1/changes\", ``, 42, http.StatusOK},",
      "1272:   {\"GET\", \"/v1/changes\", ``, 0, http.StatusOK},",
      "1274:   {\"GET\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
      "1275:   {\"GET\", \"/v1/services\", ``, 42, http.StatusOK},",
      "1276:   {\"GET\", \"/v1/services\", ``, 0, http.StatusOK},",
      "1277:   {\"POST\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
      "1278:   {\"POST\", \"/v1/services\", ``, 42, http.StatusUnauthorized},",
      "1279:   {\"POST\", \"/v1/services\", ``, 0, http.StatusBadRequest},",
      "1281:   {\"POST\", \"/v1/layers\", ``, -1, http.StatusUnauthorized},",
      "1282:   {\"POST\", \"/v1/layers\", ``, 42, http.StatusUnauthorized},",
      "1283:   {\"POST\", \"/v1/layers\", ``, 0, http.StatusBadRequest},",
      "1285:   {\"GET\", \"/v1/files?action=list&path=/\", ``, -1, http.StatusUnauthorized},",
      "1286:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 42, http.StatusUnauthorized}, // even reading files requires admin",
      "1287:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 0, http.StatusOK},",
      "1288:   {\"POST\", \"/v1/files\", `{}`, -1, http.StatusUnauthorized},",
      "1289:   {\"POST\", \"/v1/files\", `{}`, 42, http.StatusUnauthorized},",
      "1290:   {\"POST\", \"/v1/files\", `{}`, 0, http.StatusBadRequest},",
      "1292:   {\"GET\", \"/v1/logs\", ``, -1, http.StatusUnauthorized},",
      "1293:   {\"GET\", \"/v1/logs\", ``, 42, http.StatusOK},",
      "1294:   {\"GET\", \"/v1/logs\", ``, 0, http.StatusOK},",
      "1296:   {\"POST\", \"/v1/exec\", `{}`, -1, http.StatusUnauthorized},",
      "1297:   {\"POST\", \"/v1/exec\", `{}`, 42, http.StatusUnauthorized},",
      "1298:   {\"POST\", \"/v1/exec\", `{}`, 0, http.StatusBadRequest},",
      "1300:   {\"POST\", \"/v1/signals\", `{}`, -1, http.StatusUnauthorized},",
      "1301:   {\"POST\", \"/v1/signals\", `{}`, 42, http.StatusUnauthorized},",
      "1302:   {\"POST\", \"/v1/signals\", `{}`, 0, http.StatusBadRequest},",
      "1304:   {\"GET\", \"/v1/checks\", ``, -1, http.StatusUnauthorized},",
      "1305:   {\"GET\", \"/v1/checks\", ``, 42, http.StatusOK},",
      "1306:   {\"GET\", \"/v1/checks\", ``, 0, http.StatusOK},",
      "1307:  }",
      "1309:  for _, test := range tests {",
      "1310:   remoteAddr := \"\"",
      "1311:   if test.uid >= 0 {",
      "1312:    remoteAddr = fmt.Sprintf(\"pid=100;uid=%d;socket=;\", test.uid)",
      "1313:   }",
      "1314:   requestURL, err := url.Parse(\"http://localhost\" + test.path)",
      "1315:   c.Assert(err, IsNil)",
      "1316:   request := &http.Request{",
      "1317:    Method:     test.method,",
      "1318:    URL:        requestURL,",
      "1319:    Body:       io.NopCloser(strings.NewReader(test.body)),",
      "1320:    RemoteAddr: remoteAddr,",
      "1321:   }",
      "1322:   recorder := httptest.NewRecorder()",
      "1323:   cmd := apiCmd(requestURL.Path)",
      "1324:   cmd.ServeHTTP(recorder, request)",
      "1326:   response := recorder.Result()",
      "1327:   if response.StatusCode != test.status {",
      "1329:    c.Logf(\"%s %s uid=%d: expected %d, got %d; response body:\\n%s\",",
      "1330:     test.method, test.path, test.uid, test.status, response.StatusCode, recorder.Body.String())",
      "1331:   }",
      "1332:   c.Assert(response.StatusCode, Equals, test.status)",
      "1333:  }",
      "1334: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ca343d3889533143477e21c63867f2f3c3b5645",
      "candidate_info": {
        "commit_hash": "4ca343d3889533143477e21c63867f2f3c3b5645",
        "repo": "canonical/pebble",
        "commit_url": "https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645",
        "files": [
          "internals/daemon/api.go",
          "internals/daemon/daemon_test.go"
        ],
        "message": "fix(daemon): require admin access for file pull API\n\nThis locks down the files \"pull\" API to require admin. Even though it's\na read (GET), this meant any user could potentially read sensitive\nfiles.\n\nWe also lock down the task-websocket endpoint to admin. This is a GET\nendpoint, but these websockets are used by exec to send stdin/out/err\nand commands to the exec'd process, so they should require admin too.",
        "before_after_code_files": [
          "internals/daemon/api.go||internals/daemon/api.go",
          "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "internals/daemon/api.go||internals/daemon/api.go",
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ],
          "candidate": [
            "internals/daemon/api.go||internals/daemon/api.go",
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internals/daemon/api.go||internals/daemon/api.go": [
          "File: internals/daemon/api.go -> internals/daemon/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  UserOK: true,",
          "71:  POST:   v1PostLayers,",
          "72: }, {",
          "77: }, {",
          "78:  Path:   \"/v1/logs\",",
          "79:  UserOK: true,",
          "",
          "[Removed Lines]",
          "73:  Path:   \"/v1/files\",",
          "74:  UserOK: true,",
          "75:  GET:    v1GetFiles,",
          "76:  POST:   v1PostFiles,",
          "",
          "[Added Lines]",
          "73:  Path:      \"/v1/files\",",
          "74:  AdminOnly: true,",
          "75:  GET:       v1GetFiles,",
          "76:  POST:      v1PostFiles,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:  UserOK: true,",
          "84:  POST:   v1PostExec,",
          "85: }, {",
          "89: }, {",
          "90:  Path:   \"/v1/signals\",",
          "91:  UserOK: true,",
          "",
          "[Removed Lines]",
          "86:  Path:   \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "87:  UserOK: true,",
          "88:  GET:    v1GetTaskWebsocket,",
          "",
          "[Added Lines]",
          "86:  Path:      \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "87:  AdminOnly: true,",
          "88:  GET:       v1GetTaskWebsocket,",
          "",
          "---------------"
        ],
        "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go": [
          "File: internals/daemon/daemon_test.go -> internals/daemon/daemon_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"bytes\"",
          "19:  \"encoding/json\"",
          "20:  \"fmt\"",
          "21:  \"io/ioutil\"",
          "22:  \"net\"",
          "23:  \"net/http\"",
          "24:  \"net/http/httptest\"",
          "25:  \"os\"",
          "26:  \"path/filepath\"",
          "27:  \"sync\"",
          "28:  \"syscall\"",
          "29:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"io\"",
          "26:  \"net/url\"",
          "29:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1292:  c.Check(tasks[0].Kind(), Equals, \"stop\")",
          "1293: }",
          "1295: type rebootSuite struct{}",
          "1297: var _ = Suite(&rebootSuite{})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298: func (s *daemonSuite) TestAPIAccessLevels(c *C) {",
          "1299:  _ = s.newDaemon(c)",
          "1301:  tests := []struct {",
          "1302:   method string",
          "1303:   path   string",
          "1304:   body   string",
          "1305:   uid    int // -1 means no peer cred user",
          "1306:   status int",
          "1307:  }{",
          "1308:   {\"GET\", \"/v1/system-info\", ``, -1, http.StatusOK},",
          "1310:   {\"GET\", \"/v1/health\", ``, -1, http.StatusOK},",
          "1312:   {\"GET\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
          "1313:   {\"GET\", \"/v1/warnings\", ``, 42, http.StatusOK},",
          "1314:   {\"GET\", \"/v1/warnings\", ``, 0, http.StatusOK},",
          "1315:   {\"POST\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
          "1316:   {\"POST\", \"/v1/warnings\", ``, 42, http.StatusUnauthorized},",
          "1317:   {\"POST\", \"/v1/warnings\", ``, 0, http.StatusBadRequest},",
          "1319:   {\"GET\", \"/v1/changes\", ``, -1, http.StatusUnauthorized},",
          "1320:   {\"GET\", \"/v1/changes\", ``, 42, http.StatusOK},",
          "1321:   {\"GET\", \"/v1/changes\", ``, 0, http.StatusOK},",
          "1323:   {\"GET\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
          "1324:   {\"GET\", \"/v1/services\", ``, 42, http.StatusOK},",
          "1325:   {\"GET\", \"/v1/services\", ``, 0, http.StatusOK},",
          "1326:   {\"POST\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
          "1327:   {\"POST\", \"/v1/services\", ``, 42, http.StatusUnauthorized},",
          "1328:   {\"POST\", \"/v1/services\", ``, 0, http.StatusBadRequest},",
          "1330:   {\"POST\", \"/v1/layers\", ``, -1, http.StatusUnauthorized},",
          "1331:   {\"POST\", \"/v1/layers\", ``, 42, http.StatusUnauthorized},",
          "1332:   {\"POST\", \"/v1/layers\", ``, 0, http.StatusBadRequest},",
          "1334:   {\"GET\", \"/v1/files?action=list&path=/\", ``, -1, http.StatusUnauthorized},",
          "1335:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 42, http.StatusUnauthorized}, // even reading files requires admin",
          "1336:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 0, http.StatusOK},",
          "1337:   {\"POST\", \"/v1/files\", `{}`, -1, http.StatusUnauthorized},",
          "1338:   {\"POST\", \"/v1/files\", `{}`, 42, http.StatusUnauthorized},",
          "1339:   {\"POST\", \"/v1/files\", `{}`, 0, http.StatusBadRequest},",
          "1341:   {\"GET\", \"/v1/logs\", ``, -1, http.StatusUnauthorized},",
          "1342:   {\"GET\", \"/v1/logs\", ``, 42, http.StatusOK},",
          "1343:   {\"GET\", \"/v1/logs\", ``, 0, http.StatusOK},",
          "1345:   {\"POST\", \"/v1/exec\", `{}`, -1, http.StatusUnauthorized},",
          "1346:   {\"POST\", \"/v1/exec\", `{}`, 42, http.StatusUnauthorized},",
          "1347:   {\"POST\", \"/v1/exec\", `{}`, 0, http.StatusBadRequest},",
          "1349:   {\"POST\", \"/v1/signals\", `{}`, -1, http.StatusUnauthorized},",
          "1350:   {\"POST\", \"/v1/signals\", `{}`, 42, http.StatusUnauthorized},",
          "1351:   {\"POST\", \"/v1/signals\", `{}`, 0, http.StatusBadRequest},",
          "1353:   {\"GET\", \"/v1/checks\", ``, -1, http.StatusUnauthorized},",
          "1354:   {\"GET\", \"/v1/checks\", ``, 42, http.StatusOK},",
          "1355:   {\"GET\", \"/v1/checks\", ``, 0, http.StatusOK},",
          "1356:  }",
          "1358:  for _, test := range tests {",
          "1359:   remoteAddr := \"\"",
          "1360:   if test.uid >= 0 {",
          "1361:    remoteAddr = fmt.Sprintf(\"pid=100;uid=%d;socket=;\", test.uid)",
          "1362:   }",
          "1363:   requestURL, err := url.Parse(\"http://localhost\" + test.path)",
          "1364:   c.Assert(err, IsNil)",
          "1365:   request := &http.Request{",
          "1366:    Method:     test.method,",
          "1367:    URL:        requestURL,",
          "1368:    Body:       io.NopCloser(strings.NewReader(test.body)),",
          "1369:    RemoteAddr: remoteAddr,",
          "1370:   }",
          "1371:   recorder := httptest.NewRecorder()",
          "1372:   cmd := apiCmd(requestURL.Path)",
          "1373:   cmd.ServeHTTP(recorder, request)",
          "1375:   response := recorder.Result()",
          "1376:   if response.StatusCode != test.status {",
          "1378:    c.Logf(\"%s %s uid=%d: expected %d, got %d; response body:\\n%s\",",
          "1379:     test.method, test.path, test.uid, test.status, response.StatusCode, recorder.Body.String())",
          "1380:   }",
          "1381:   c.Assert(response.StatusCode, Equals, test.status)",
          "1382:  }",
          "1383: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd326225b9b0be067da7d8858e2c912078cbbbd5",
      "candidate_info": {
        "commit_hash": "cd326225b9b0be067da7d8858e2c912078cbbbd5",
        "repo": "canonical/pebble",
        "commit_url": "https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5",
        "files": [
          "internal/daemon/api.go",
          "internal/daemon/daemon_test.go"
        ],
        "message": "fix(daemon): require admin access for file pull API\n\nThis locks down the files \"pull\" API to require admin. Even though it's\na read (GET), this meant any user could potentially read sensitive\nfiles.\n\nWe also lock down the task-websocket endpoint to admin. This is a GET\nendpoint, but these websockets are used by exec to send stdin/out/err\nand commands to the exec'd process, so they should require admin too.",
        "before_after_code_files": [
          "internal/daemon/api.go||internal/daemon/api.go",
          "internal/daemon/daemon_test.go||internal/daemon/daemon_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/daemon/api.go||internal/daemon/api.go": [
          "File: internal/daemon/api.go -> internal/daemon/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  UserOK: true,",
          "71:  POST:   v1PostLayers,",
          "72: }, {",
          "77: }, {",
          "78:  Path:   \"/v1/logs\",",
          "79:  UserOK: true,",
          "",
          "[Removed Lines]",
          "73:  Path:   \"/v1/files\",",
          "74:  UserOK: true,",
          "75:  GET:    v1GetFiles,",
          "76:  POST:   v1PostFiles,",
          "",
          "[Added Lines]",
          "73:  Path:      \"/v1/files\",",
          "74:  AdminOnly: true,",
          "75:  GET:       v1GetFiles,",
          "76:  POST:      v1PostFiles,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:  UserOK: true,",
          "84:  POST:   v1PostExec,",
          "85: }, {",
          "89: }, {",
          "90:  Path:   \"/v1/signals\",",
          "91:  UserOK: true,",
          "",
          "[Removed Lines]",
          "86:  Path:   \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "87:  UserOK: true,",
          "88:  GET:    v1GetTaskWebsocket,",
          "",
          "[Added Lines]",
          "86:  Path:      \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "87:  AdminOnly: true,",
          "88:  GET:       v1GetTaskWebsocket,",
          "",
          "---------------"
        ],
        "internal/daemon/daemon_test.go||internal/daemon/daemon_test.go": [
          "File: internal/daemon/daemon_test.go -> internal/daemon/daemon_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"bytes\"",
          "19:  \"encoding/json\"",
          "20:  \"fmt\"",
          "21:  \"io/ioutil\"",
          "22:  \"net\"",
          "23:  \"net/http\"",
          "24:  \"net/http/httptest\"",
          "25:  \"os\"",
          "26:  \"path/filepath\"",
          "27:  \"sync\"",
          "28:  \"syscall\"",
          "29:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"io\"",
          "26:  \"net/url\"",
          "29:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1148:  c.Assert(tasks, HasLen, 1)",
          "1149:  c.Check(tasks[0].Kind(), Equals, \"stop\")",
          "1150: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1155: func (s *daemonSuite) TestAPIAccessLevels(c *C) {",
          "1156:  _ = s.newDaemon(c)",
          "1158:  tests := []struct {",
          "1159:   method string",
          "1160:   path   string",
          "1161:   body   string",
          "1162:   uid    int // -1 means no peer cred user",
          "1163:   status int",
          "1164:  }{",
          "1165:   {\"GET\", \"/v1/system-info\", ``, -1, http.StatusOK},",
          "1167:   {\"GET\", \"/v1/health\", ``, -1, http.StatusOK},",
          "1169:   {\"GET\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
          "1170:   {\"GET\", \"/v1/warnings\", ``, 42, http.StatusOK},",
          "1171:   {\"GET\", \"/v1/warnings\", ``, 0, http.StatusOK},",
          "1172:   {\"POST\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
          "1173:   {\"POST\", \"/v1/warnings\", ``, 42, http.StatusUnauthorized},",
          "1174:   {\"POST\", \"/v1/warnings\", ``, 0, http.StatusBadRequest},",
          "1176:   {\"GET\", \"/v1/changes\", ``, -1, http.StatusUnauthorized},",
          "1177:   {\"GET\", \"/v1/changes\", ``, 42, http.StatusOK},",
          "1178:   {\"GET\", \"/v1/changes\", ``, 0, http.StatusOK},",
          "1180:   {\"GET\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
          "1181:   {\"GET\", \"/v1/services\", ``, 42, http.StatusOK},",
          "1182:   {\"GET\", \"/v1/services\", ``, 0, http.StatusOK},",
          "1183:   {\"POST\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
          "1184:   {\"POST\", \"/v1/services\", ``, 42, http.StatusUnauthorized},",
          "1185:   {\"POST\", \"/v1/services\", ``, 0, http.StatusBadRequest},",
          "1187:   {\"POST\", \"/v1/layers\", ``, -1, http.StatusUnauthorized},",
          "1188:   {\"POST\", \"/v1/layers\", ``, 42, http.StatusUnauthorized},",
          "1189:   {\"POST\", \"/v1/layers\", ``, 0, http.StatusBadRequest},",
          "1191:   {\"GET\", \"/v1/files?action=list&path=/\", ``, -1, http.StatusUnauthorized},",
          "1192:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 42, http.StatusUnauthorized}, // even reading files requires admin",
          "1193:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 0, http.StatusOK},",
          "1194:   {\"POST\", \"/v1/files\", `{}`, -1, http.StatusUnauthorized},",
          "1195:   {\"POST\", \"/v1/files\", `{}`, 42, http.StatusUnauthorized},",
          "1196:   {\"POST\", \"/v1/files\", `{}`, 0, http.StatusBadRequest},",
          "1198:   {\"GET\", \"/v1/logs\", ``, -1, http.StatusUnauthorized},",
          "1199:   {\"GET\", \"/v1/logs\", ``, 42, http.StatusOK},",
          "1200:   {\"GET\", \"/v1/logs\", ``, 0, http.StatusOK},",
          "1202:   {\"POST\", \"/v1/exec\", `{}`, -1, http.StatusUnauthorized},",
          "1203:   {\"POST\", \"/v1/exec\", `{}`, 42, http.StatusUnauthorized},",
          "1204:   {\"POST\", \"/v1/exec\", `{}`, 0, http.StatusBadRequest},",
          "1206:   {\"POST\", \"/v1/signals\", `{}`, -1, http.StatusUnauthorized},",
          "1207:   {\"POST\", \"/v1/signals\", `{}`, 42, http.StatusUnauthorized},",
          "1208:   {\"POST\", \"/v1/signals\", `{}`, 0, http.StatusBadRequest},",
          "1210:   {\"GET\", \"/v1/checks\", ``, -1, http.StatusUnauthorized},",
          "1211:   {\"GET\", \"/v1/checks\", ``, 42, http.StatusOK},",
          "1212:   {\"GET\", \"/v1/checks\", ``, 0, http.StatusOK},",
          "1213:  }",
          "1215:  for _, test := range tests {",
          "1216:   remoteAddr := \"\"",
          "1217:   if test.uid >= 0 {",
          "1218:    remoteAddr = fmt.Sprintf(\"pid=100;uid=%d;socket=;\", test.uid)",
          "1219:   }",
          "1220:   requestURL, err := url.Parse(\"http://localhost\" + test.path)",
          "1221:   c.Assert(err, IsNil)",
          "1222:   request := &http.Request{",
          "1223:    Method:     test.method,",
          "1224:    URL:        requestURL,",
          "1225:    Body:       io.NopCloser(strings.NewReader(test.body)),",
          "1226:    RemoteAddr: remoteAddr,",
          "1227:   }",
          "1228:   recorder := httptest.NewRecorder()",
          "1229:   cmd := apiCmd(requestURL.Path)",
          "1230:   cmd.ServeHTTP(recorder, request)",
          "1232:   response := recorder.Result()",
          "1233:   if response.StatusCode != test.status {",
          "1235:    c.Logf(\"%s %s uid=%d: expected %d, got %d; response body:\\n%s\",",
          "1236:     test.method, test.path, test.uid, test.status, response.StatusCode, recorder.Body.String())",
          "1237:   }",
          "1238:   c.Assert(response.StatusCode, Equals, test.status)",
          "1239:  }",
          "1240: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}