{
  "cve_id": "CVE-2019-1131",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
  "patch_info": {
    "commit_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/242c59ea40c0428e1ced7366bf2c28bfbdda1999",
    "files": [
      "lib/Parser/Parse.cpp"
    ],
    "message": "[CVE-2019-1131] Chakra Type confusion",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "4664:                     }",
      "4665:                 }",
      "4672:                 bool couldBeObjectPattern = !isObjectPattern && m_token.tk == tkAsg;",
      "",
      "[Removed Lines]",
      "4667:                 if (buildAST)",
      "4668:                 {",
      "4669:                     CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
      "4670:                 }",
      "",
      "[Added Lines]",
      "4667:                 CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
      "candidate_info": {
        "commit_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/329d9d213e7b286349c0b156be4b5a088555de90",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-1141] Chakra JIT Type Confusion\n\nDuring the loop prepass the index variable is not fully constructed, so we can't rely it being negative\nSo we need to kiil the object type.",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2695: }",
          "2697: bool",
          "2699: {",
          "2700:     if (opnd == nullptr)",
          "2701:     {",
          "",
          "[Removed Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const",
          "",
          "[Added Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass /*=nullptr*/) const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2725:         {",
          "2726:             return true;",
          "2727:         }",
          "2728:         if (this->prePassLoop->preservesNumberValue->Test(opnd->m_sym->m_id))",
          "2729:         {",
          "2730:             return false;",
          "2731:         }",
          "2734:     }",
          "2736:     return true;",
          "",
          "[Removed Lines]",
          "2733:         return !this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "",
          "[Added Lines]",
          "2729:         bool isSafeToTransfer = this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "2730:         if (isSafeToTransferInPrepass != nullptr)",
          "2731:         {",
          "2733:         }",
          "2739:         return !isSafeToTransfer;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
          "774:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
          "775:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
          "778: public:",
          "779:     static bool             IsTypeSpecPhaseOff(Func const * func);",
          "",
          "[Removed Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
          "",
          "[Added Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass = nullptr) const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     {",
          "230:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "231:         SetAnyPropertyMayBeWrittenTo();",
          "",
          "[Removed Lines]",
          "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
          "",
          "[Added Lines]",
          "228:     bool isSafeToTransfer = true;",
          "229:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt, &isSafeToTransfer))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
          "237:         int indexLowerBound = 0;",
          "240:         {",
          "242:             this->KillAllObjectTypes(bv);",
          "",
          "[Removed Lines]",
          "239:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "[Added Lines]",
          "240:         if (!isSafeToTransfer || indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
      "candidate_info": {
        "commit_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/450a349fda1b153d758a9e01698b977e60870e4c",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h"
        ],
        "message": "Update version to 1.11.12",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 11",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 12",
          "",
          "---------------"
        ]
      }
    }
  ]
}