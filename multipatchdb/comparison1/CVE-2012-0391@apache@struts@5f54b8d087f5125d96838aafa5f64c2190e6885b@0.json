{
  "cve_id": "CVE-2012-0391",
  "cve_desc": "The ExceptionDelegator component in Apache Struts before 2.2.3.1 interprets parameter values as OGNL expressions during certain exception handling for mismatched data types of properties, which allows remote attackers to execute arbitrary Java code via a crafted parameter.",
  "repo": "apache/struts",
  "patch_hash": "5f54b8d087f5125d96838aafa5f64c2190e6885b",
  "patch_info": {
    "commit_hash": "5f54b8d087f5125d96838aafa5f64c2190e6885b",
    "repo": "apache/struts",
    "commit_url": "https://github.com/apache/struts/commit/5f54b8d087f5125d96838aafa5f64c2190e6885b",
    "files": [
      "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java"
    ],
    "message": "WW-3668 - Vulnerability: User input is evaluated as an OGNL expression when there's a conversion error (a demonstrative patch).\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1156279 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java"
    ]
  },
  "patch_diff": {
    "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java": [
      "File: xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java -> xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:     protected ActionContext context;",
      "36:     protected ActionInvocation invocation;",
      "37:     protected ConversionErrorInterceptor interceptor;",
      "39:     protected Mock mockInvocation;",
      "40:     protected ValueStack stack;",
      "43:     public void testFieldErrorAdded() throws Exception {",
      "46:         SimpleAction action = new SimpleAction();",
      "47:         mockInvocation.expectAndReturn(\"getAction\", action);",
      "",
      "[Removed Lines]",
      "38:     protected Map conversionErrors;",
      "44:         conversionErrors.put(\"foo\", new Long(123));",
      "",
      "[Added Lines]",
      "38:     protected Map<String,Object> conversionErrors;",
      "44:         conversionErrors.put(\"foo\", 123L);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:     public void testWithPreResultListener() throws Exception {",
      "70:         conversionErrors.put(\"foo\", \"Hello\");",
      "83:         assertNull(action.getFieldErrors().get(\"foo\"));",
      "86:         interceptor.intercept(mai);",
      "",
      "[Removed Lines]",
      "72:         ActionContext ac = new ActionContext(stack.getContext());",
      "73:         ac.setConversionErrors(conversionErrors);",
      "74:         ac.setValueStack(stack);",
      "76:         MockActionInvocation mai = new MockActionInvocation();",
      "77:         mai.setInvocationContext(ac);",
      "78:         mai.setStack(stack);",
      "79:         SimpleAction action = new SimpleAction();",
      "80:         action.setFoo(55);",
      "81:         mai.setAction(action);",
      "82:         stack.push(action);",
      "84:         assertEquals(new Integer(55), stack.findValue(\"foo\"));",
      "",
      "[Added Lines]",
      "72:         ActionContext ac = createActionContext();",
      "73:         MockActionInvocation mai = createActionInvocation(ac);",
      "74:         SimpleAction action = createAction(mai);",
      "77:         assertEquals(55, stack.findValue(\"foo\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:         assertEquals(\"Hello\", stack.findValue(\"foo\")); // assume that the original value is reset",
      "92:     }",
      "94:     @Override",
      "95:     protected void setUp() throws Exception {",
      "96:         super.setUp();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:     public void testWithPreResultListenerAgainstMaliciousCode() throws Exception {",
      "92:         conversionErrors.put(\"foo\", \"' + #root + '\");",
      "94:         ActionContext ac = createActionContext();",
      "96:         MockActionInvocation mai = createActionInvocation(ac);",
      "98:         SimpleAction action = createAction(mai);",
      "99:         assertNull(action.getFieldErrors().get(\"foo\"));",
      "100:         assertEquals(55, stack.findValue(\"foo\"));",
      "102:         interceptor.intercept(mai);",
      "104:         assertTrue(action.hasFieldErrors());",
      "105:         assertNotNull(action.getFieldErrors().get(\"foo\"));",
      "107:         assertEquals(\"' + #root + '\", stack.findValue(\"foo\"));",
      "108:     }",
      "110:     private MockActionInvocation createActionInvocation(ActionContext ac) {",
      "111:         MockActionInvocation mai = new MockActionInvocation();",
      "112:         mai.setInvocationContext(ac);",
      "113:         mai.setStack(stack);",
      "114:         return mai;",
      "115:     }",
      "117:     private SimpleAction createAction(MockActionInvocation mai) {",
      "118:         SimpleAction action = new SimpleAction();",
      "119:         action.setFoo(55);",
      "120:         mai.setAction(action);",
      "121:         stack.push(action);",
      "122:         return action;",
      "123:     }",
      "125:     private ActionContext createActionContext() {",
      "126:         ActionContext ac = new ActionContext(stack.getContext());",
      "127:         ac.setConversionErrors(conversionErrors);",
      "128:         ac.setValueStack(stack);",
      "129:         return ac;",
      "130:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "99:         invocation = (ActionInvocation) mockInvocation.proxy();",
      "100:         stack = ActionContext.getContext().getValueStack();",
      "101:         context = new ActionContext(stack.getContext());",
      "103:         context.setConversionErrors(conversionErrors);",
      "104:         mockInvocation.matchAndReturn(\"getInvocationContext\", context);",
      "105:         mockInvocation.expect(\"addPreResultListener\", C.isA(PreResultListener.class));",
      "",
      "[Removed Lines]",
      "102:         conversionErrors = new HashMap();",
      "",
      "[Added Lines]",
      "140:         conversionErrors = new HashMap<String,Object>();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4265d369dc29d57a9f2846a85b26598e83f3892",
      "candidate_info": {
        "commit_hash": "b4265d369dc29d57a9f2846a85b26598e83f3892",
        "repo": "apache/struts",
        "commit_url": "https://github.com/apache/struts/commit/b4265d369dc29d57a9f2846a85b26598e83f3892",
        "files": [
          "core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java",
          "core/src/main/resources/template/simple/text.ftl",
          "core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java",
          "xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java",
          "xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java",
          "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java"
        ],
        "message": "WW-3668 - Vulnerability: User input is evaluated as an OGNL expression when there's a conversion error\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1157009 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java||core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java",
          "core/src/main/resources/template/simple/text.ftl||core/src/main/resources/template/simple/text.ftl",
          "core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java||core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java",
          "xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java||xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java",
          "xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java||xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java",
          "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java"
          ],
          "candidate": [
            "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java||core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java": [
          "File: core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java -> core/src/main/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         try {",
          "81:             stack.push(value);",
          "84:         } finally {",
          "85:             stack.pop();",
          "86:         }",
          "",
          "[Removed Lines]",
          "83:             return \"'\" + stack.findValue(\"top\", String.class) + \"'\";",
          "",
          "[Added Lines]",
          "83:             return escape(stack.findString(\"top\"));",
          "",
          "---------------"
        ],
        "core/src/main/resources/template/simple/text.ftl||core/src/main/resources/template/simple/text.ftl": [
          "File: core/src/main/resources/template/simple/text.ftl -> core/src/main/resources/template/simple/text.ftl",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  maxlength=\"${parameters.maxlength?html}\"<#rt/>",
          "30: </#if>",
          "31: <#if parameters.nameValue??>",
          "33: </#if>",
          "34: <#if parameters.disabled?default(false)>",
          "35:  disabled=\"disabled\"<#rt/>",
          "",
          "[Removed Lines]",
          "32:  value=\"<@s.property value=\"parameters.nameValue\"/>\"<#rt/>",
          "",
          "[Added Lines]",
          "32:  value=\"${parameters.nameValue?html}\"<#rt/>",
          "",
          "---------------"
        ],
        "core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java||core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java": [
          "File: core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java -> core/src/test/java/org/apache/struts2/interceptor/StrutsConversionErrorInterceptorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package org.apache.struts2.interceptor;",
          "29: import com.mockobjects.dynamic.C;",
          "30: import com.mockobjects.dynamic.Mock;",
          "31: import com.opensymphony.xwork2.Action;",
          "",
          "[Removed Lines]",
          "24: import java.util.HashMap;",
          "25: import java.util.Map;",
          "27: import org.apache.struts2.StrutsTestCase;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import com.opensymphony.xwork2.ActionInvocation;",
          "34: import com.opensymphony.xwork2.ActionSupport;",
          "35: import com.opensymphony.xwork2.util.ValueStack;",
          "",
          "[Removed Lines]",
          "36: import com.opensymphony.xwork2.util.ValueStackFactory;",
          "",
          "[Added Lines]",
          "31: import org.apache.struts2.StrutsTestCase;",
          "33: import java.util.HashMap;",
          "34: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     protected ActionContext context;",
          "46:     protected ActionInvocation invocation;",
          "48:     protected Mock mockInvocation;",
          "49:     protected ValueStack stack;",
          "50:     protected StrutsConversionErrorInterceptor interceptor;",
          "53:     public void testEmptyValuesDoNotSetFieldErrors() throws Exception {",
          "55:         conversionErrors.put(\"bar\", \"\");",
          "56:         conversionErrors.put(\"baz\", new String[]{\"\"});",
          "",
          "[Removed Lines]",
          "47:     protected Map conversionErrors;",
          "54:         conversionErrors.put(\"foo\", new Long(123));",
          "",
          "[Added Lines]",
          "45:     protected Map<String, Object> conversionErrors;",
          "52:         conversionErrors.put(\"foo\", 123L);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:     }",
          "72:     public void testFieldErrorAdded() throws Exception {",
          "75:         ActionSupport action = new ActionSupport();",
          "76:         mockInvocation.expectAndReturn(\"getAction\", action);",
          "",
          "[Removed Lines]",
          "73:         conversionErrors.put(\"foo\", new Long(123));",
          "",
          "[Added Lines]",
          "71:         conversionErrors.put(\"foo\", 123L);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89:         invocation = (ActionInvocation) mockInvocation.proxy();",
          "90:         stack = ActionContext.getContext().getValueStack();",
          "91:         context = new ActionContext(stack.getContext());",
          "93:         context.setConversionErrors(conversionErrors);",
          "94:         mockInvocation.matchAndReturn(\"getInvocationContext\", context);",
          "95:         mockInvocation.expectAndReturn(\"invoke\", Action.SUCCESS);",
          "",
          "[Removed Lines]",
          "92:         conversionErrors = new HashMap();",
          "",
          "[Added Lines]",
          "90:         conversionErrors = new HashMap<String, Object>();",
          "",
          "---------------"
        ],
        "xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java||xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java": [
          "File: xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java -> xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import com.opensymphony.xwork2.ValidationAware;",
          "21: import com.opensymphony.xwork2.conversion.impl.XWorkConverter;",
          "22: import com.opensymphony.xwork2.util.ValueStack;",
          "24: import java.util.HashMap;",
          "25: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.commons.lang.StringEscapeUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     public static final String ORIGINAL_PROPERTY_OVERRIDE = \"original.property.override\";",
          "86:     protected Object getOverrideExpr(ActionInvocation invocation, Object value) {",
          "88:     }",
          "90:     @Override",
          "",
          "[Removed Lines]",
          "87:         return \"'\" + value + \"'\";",
          "",
          "[Added Lines]",
          "88:         return escape(value);",
          "89:     }",
          "91:     protected String escape(Object value) {",
          "92:         return \"\\\"\" + StringEscapeUtils.escapeJava(String.valueOf(value)) + \"\\\"\";",
          "",
          "---------------"
        ],
        "xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java||xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java": [
          "File: xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java -> xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/RepopulateConversionErrorFieldValidatorSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import com.opensymphony.xwork2.util.logging.Logger;",
          "23: import com.opensymphony.xwork2.util.logging.LoggerFactory;",
          "24: import com.opensymphony.xwork2.validator.ValidationException;",
          "26: import java.util.LinkedHashMap;",
          "27: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.commons.lang.StringEscapeUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: public abstract class RepopulateConversionErrorFieldValidatorSupport extends FieldValidatorSupport {",
          "164:         if (conversionErrors.containsKey(fullFieldName)) {",
          "165:             Object value = conversionErrors.get(fullFieldName);",
          "",
          "[Removed Lines]",
          "136:  private static final Logger LOG = LoggerFactory.getLogger(RepopulateConversionErrorFieldValidatorSupport.class);",
          "138:  private String repopulateFieldAsString = \"false\";",
          "139:  private boolean repopulateFieldAsBoolean = false;",
          "141:  public String getRepopulateField() {",
          "142:   return repopulateFieldAsString;",
          "143:  }",
          "145:  public void setRepopulateField(String repopulateField) {",
          "146:   this.repopulateFieldAsString = repopulateField == null ? repopulateField : repopulateField.trim();",
          "147:   this.repopulateFieldAsBoolean = \"true\".equalsIgnoreCase(this.repopulateFieldAsString) ? (true) : (false);",
          "148:  }",
          "150:  public void validate(Object object) throws ValidationException {",
          "151:   doValidate(object);",
          "152:   if (repopulateFieldAsBoolean) {",
          "153:    repopulateField(object);",
          "154:   }",
          "155:  }",
          "157:  public void repopulateField(Object object) throws ValidationException {",
          "159:   ActionInvocation invocation = ActionContext.getContext().getActionInvocation();",
          "160:   Map<String, Object> conversionErrors = ActionContext.getContext().getConversionErrors();",
          "162:   String fieldName = getFieldName();",
          "163:   String fullFieldName = getValidatorContext().getFullFieldName(fieldName);",
          "",
          "[Added Lines]",
          "137:     private static final Logger LOG = LoggerFactory.getLogger(RepopulateConversionErrorFieldValidatorSupport.class);",
          "139:     private String repopulateFieldAsString = \"false\";",
          "140:     private boolean repopulateFieldAsBoolean = false;",
          "142:     public String getRepopulateField() {",
          "143:         return repopulateFieldAsString;",
          "144:     }",
          "146:     public void setRepopulateField(String repopulateField) {",
          "147:         this.repopulateFieldAsString = repopulateField == null ? repopulateField : repopulateField.trim();",
          "148:         this.repopulateFieldAsBoolean = \"true\".equalsIgnoreCase(this.repopulateFieldAsString) ? (true) : (false);",
          "149:     }",
          "151:     public void validate(Object object) throws ValidationException {",
          "152:         doValidate(object);",
          "153:         if (repopulateFieldAsBoolean) {",
          "154:             repopulateField(object);",
          "155:         }",
          "156:     }",
          "158:     public void repopulateField(Object object) throws ValidationException {",
          "160:         ActionInvocation invocation = ActionContext.getContext().getActionInvocation();",
          "161:         Map<String, Object> conversionErrors = ActionContext.getContext().getConversionErrors();",
          "163:         String fieldName = getFieldName();",
          "164:         String fullFieldName = getValidatorContext().getFullFieldName(fieldName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:             if (value instanceof String[]) {",
          "172:                 String[] tmpValue = (String[]) value;",
          "174:                     doExprOverride = true;",
          "176:                 } else {",
          "177:                     if (LOG.isWarnEnabled()) {",
          "179:                     }",
          "180:                 }",
          "181:             } else if (value instanceof String) {",
          "182:                 String tmpValue = (String) value;",
          "183:                 doExprOverride = true;",
          "185:             } else {",
          "187:                 if (LOG.isWarnEnabled()) {",
          "",
          "[Removed Lines]",
          "173:                 if (tmpValue != null && (tmpValue.length > 0)) {",
          "175:                     fakeParams.put(fullFieldName, \"'\" + tmpValue[0] + \"'\");",
          "178:                  LOG.warn(\"value is an empty array of String or with first element in it as null [\" + value + \"], will not repopulate conversion error \");",
          "184:                 fakeParams.put(fullFieldName, \"'\" + tmpValue + \"'\");",
          "",
          "[Added Lines]",
          "174:                 if ((tmpValue.length > 0)) {",
          "176:                     fakeParams.put(fullFieldName, escape(tmpValue[0]));",
          "179:                         LOG.warn(\"value is an empty array of String or with first element in it as null [\" + value + \"], will not repopulate conversion error \");",
          "185:                 fakeParams.put(fullFieldName, escape(tmpValue));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:                 });",
          "199:             }",
          "200:         }",
          "204: }",
          "",
          "[Removed Lines]",
          "201:  }",
          "203:  protected abstract void doValidate(Object object) throws ValidationException;",
          "",
          "[Added Lines]",
          "202:     }",
          "204:     protected String escape(String value) {",
          "205:         return \"\\\"\" + StringEscapeUtils.escapeJava(value) + \"\\\"\";",
          "206:     }",
          "208:     protected abstract void doValidate(Object object) throws ValidationException;",
          "",
          "---------------"
        ],
        "xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java": [
          "File: xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java -> xwork-core/src/test/java/com/opensymphony/xwork2/interceptor/ConversionErrorInterceptorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected ActionContext context;",
          "36:     protected ActionInvocation invocation;",
          "37:     protected ConversionErrorInterceptor interceptor;",
          "39:     protected Mock mockInvocation;",
          "40:     protected ValueStack stack;",
          "",
          "[Removed Lines]",
          "38:     protected Map<String,Object> conversionErrors;",
          "",
          "[Added Lines]",
          "38:     protected Map<String, Object> conversionErrors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     public void testWithPreResultListenerAgainstMaliciousCode() throws Exception {",
          "94:         ActionContext ac = createActionContext();",
          "",
          "[Removed Lines]",
          "92:         conversionErrors.put(\"foo\", \"' + #root + '\");",
          "",
          "[Added Lines]",
          "93:         conversionErrors.put(\"foo\", \"\\\" + #root + \\\"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:         assertTrue(action.hasFieldErrors());",
          "105:         assertNotNull(action.getFieldErrors().get(\"foo\"));",
          "108:     }",
          "110:     private MockActionInvocation createActionInvocation(ActionContext ac) {",
          "",
          "[Removed Lines]",
          "107:         assertEquals(\"' + #root + '\", stack.findValue(\"foo\"));",
          "",
          "[Added Lines]",
          "108:         assertEquals(\"\\\" + #root + \\\"\", stack.findValue(\"foo\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:         invocation = (ActionInvocation) mockInvocation.proxy();",
          "138:         stack = ActionContext.getContext().getValueStack();",
          "139:         context = new ActionContext(stack.getContext());",
          "141:         context.setConversionErrors(conversionErrors);",
          "142:         mockInvocation.matchAndReturn(\"getInvocationContext\", context);",
          "143:         mockInvocation.expect(\"addPreResultListener\", C.isA(PreResultListener.class));",
          "",
          "[Removed Lines]",
          "140:         conversionErrors = new HashMap<String,Object>();",
          "",
          "[Added Lines]",
          "141:         conversionErrors = new HashMap<String, Object>();",
          "",
          "---------------"
        ]
      }
    }
  ]
}