{
  "cve_id": "CVE-2023-45348",
  "cve_desc": "Apache Airflow, versions 2.7.0 and 2.7.1, is affected by a vulnerability that allows an authenticated user to retrieve sensitive configuration information when the \"expose_config\" option is set to \"non-sensitive-only\". The `expose_config` option is False by default.\nIt is recommended to upgrade to a version that is not affected.",
  "repo": "apache/airflow",
  "patch_hash": "a4a0b5dd3d0ce05311c70bb9a32b66a650dbc0b4",
  "patch_info": {
    "commit_hash": "a4a0b5dd3d0ce05311c70bb9a32b66a650dbc0b4",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/a4a0b5dd3d0ce05311c70bb9a32b66a650dbc0b4",
    "files": [
      "airflow/api_connexion/endpoints/config_endpoint.py",
      "airflow/configuration.py",
      "tests/api_connexion/endpoints/test_config_endpoint.py"
    ],
    "message": "Check if the lower of provided values are sensitives in config endpoint (#34712)\n\n* Check if the lower of provided values are sensitives in config endpoint\n\n* update unit test\n\n* ensure that all values in sensitive dict are in lower characters\n\n(cherry picked from commit f044589b685855a8fce8f5376bea2564c5a001f7)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
      "airflow/configuration.py||airflow/configuration.py",
      "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py": [
      "File: airflow/api_connexion/endpoints/config_endpoint.py -> airflow/api_connexion/endpoints/config_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:                 \"Config not found.\", detail=f\"The option [{section}/{option}] is not found in config.\"",
      "124:             )",
      "127:             value = \"< hidden >\"",
      "128:         else:",
      "129:             value = conf.get(section, option)",
      "",
      "[Removed Lines]",
      "126:         if (section, option) in conf.sensitive_config_values:",
      "",
      "[Added Lines]",
      "126:         if (section.lower(), option.lower()) in conf.sensitive_config_values:",
      "",
      "---------------"
    ],
    "airflow/configuration.py||airflow/configuration.py": [
      "File: airflow/configuration.py -> airflow/configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:             for s, s_c in self.configuration_description.items()",
      "312:             for k, item in s_c.get(\"options\").items()  # type: ignore[union-attr]",
      "313:         }",
      "315:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
      "316:         depr_section = {",
      "317:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
      "",
      "[Removed Lines]",
      "314:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
      "",
      "[Added Lines]",
      "314:         sensitive = {",
      "315:             (section.lower(), key.lower())",
      "316:             for (section, key), v in flattened.items()",
      "317:             if v.get(\"sensitive\") is True",
      "318:         }",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_config_endpoint.py -> tests/api_connexion/endpoints/test_config_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:         return_value=MOCK_CONF_WITH_SENSITIVE_VALUE,",
      "248:     )",
      "249:     @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "251:         response = self.client.get(",
      "253:             headers={\"Accept\": \"text/plain\"},",
      "254:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "255:         )",
      "256:         assert response.status_code == 200",
      "257:         expected = textwrap.dedent(",
      "261:         \"\"\"",
      "262:         )",
      "263:         assert expected == response.data.decode()",
      "",
      "[Removed Lines]",
      "250:     def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict):",
      "252:             \"/api/v1/config/section/core/option/sql_alchemy_conn\",",
      "258:             \"\"\"\\",
      "259:         [core]",
      "260:         sql_alchemy_conn = < hidden >",
      "",
      "[Added Lines]",
      "250:     @pytest.mark.parametrize(",
      "251:         \"section, option\",",
      "252:         [",
      "253:             (\"core\", \"sql_alchemy_conn\"),",
      "254:             (\"core\", \"SQL_ALCHEMY_CONN\"),",
      "255:             (\"corE\", \"sql_alchemy_conn\"),",
      "256:             (\"CORE\", \"sql_alchemy_conn\"),",
      "257:         ],",
      "258:     )",
      "259:     def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict, section, option):",
      "261:             f\"/api/v1/config/section/{section}/option/{option}\",",
      "267:             f\"\"\"\\",
      "268:         [{section}]",
      "269:         {option} = < hidden >",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0159b2fe3f58d7372ac03138ff94d6ff66bf475",
      "candidate_info": {
        "commit_hash": "b0159b2fe3f58d7372ac03138ff94d6ff66bf475",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b0159b2fe3f58d7372ac03138ff94d6ff66bf475",
        "files": [
          "setup.py"
        ],
        "message": "Restrict `astroid` version < 3 (#34658)\n\n(cherry picked from commit 19450e03f534f63399bf5db2df7690fdd47b09c8)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:     \"requests>=2.26.0\",",
          "300: ]",
          "301: doc = [",
          "303:     \"checksumdir\",",
          "304:     # click 8.1.4 and 8.1.5 generate mypy errors due to typing issue in the upstream package:",
          "305:     # https://github.com/pallets/click/issues/2558",
          "",
          "[Removed Lines]",
          "302:     \"astroid>=2.12.3\",",
          "",
          "[Added Lines]",
          "302:     # sphinx-autoapi fails with astroid 3.0, see: https://github.com/readthedocs/sphinx-autoapi/issues/407",
          "303:     # This was fixed in sphinx-autoapi 3.0, however it has requirement sphinx>=6.1, but we stuck on 5.x",
          "304:     \"astroid>=2.12.3, <3.0\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97e53b02dd085d81c2424421d75406d13a78ab84",
      "candidate_info": {
        "commit_hash": "97e53b02dd085d81c2424421d75406d13a78ab84",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/97e53b02dd085d81c2424421d75406d13a78ab84",
        "files": [
          "airflow/cli/commands/pool_command.py",
          "airflow/cli/commands/webserver_command.py",
          "airflow/dag_processing/processor.py",
          "airflow/listeners/listener.py",
          "airflow/models/baseoperator.py",
          "airflow/models/dag.py",
          "airflow/sensors/filesystem.py",
          "airflow/triggers/file.py",
          "airflow/www/extensions/init_jinja_globals.py",
          "airflow/www/fab_security/manager.py",
          "airflow/www/views.py",
          "dev/breeze/src/airflow_breeze/utils/coertions.py"
        ],
        "message": "Simplify conditions on len() (#33454)\n\n(cherry picked from commit e434ae8e4ae7f7940a86c7386245fbaaf1821965)",
        "before_after_code_files": [
          "airflow/cli/commands/pool_command.py||airflow/cli/commands/pool_command.py",
          "airflow/cli/commands/webserver_command.py||airflow/cli/commands/webserver_command.py",
          "airflow/dag_processing/processor.py||airflow/dag_processing/processor.py",
          "airflow/listeners/listener.py||airflow/listeners/listener.py",
          "airflow/models/baseoperator.py||airflow/models/baseoperator.py",
          "airflow/models/dag.py||airflow/models/dag.py",
          "airflow/sensors/filesystem.py||airflow/sensors/filesystem.py",
          "airflow/triggers/file.py||airflow/triggers/file.py",
          "airflow/www/extensions/init_jinja_globals.py||airflow/www/extensions/init_jinja_globals.py",
          "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py",
          "airflow/www/views.py||airflow/www/views.py",
          "dev/breeze/src/airflow_breeze/utils/coertions.py||dev/breeze/src/airflow_breeze/utils/coertions.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/cli/commands/pool_command.py||airflow/cli/commands/pool_command.py": [
          "File: airflow/cli/commands/pool_command.py -> airflow/cli/commands/pool_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     if not os.path.exists(args.file):",
          "98:         raise SystemExit(f\"Missing pools file {args.file}\")",
          "99:     pools, failed = pool_import_helper(args.file)",
          "101:         raise SystemExit(f\"Failed to update pool(s): {', '.join(failed)}\")",
          "102:     print(f\"Uploaded {len(pools)} pool(s)\")",
          "",
          "[Removed Lines]",
          "100:     if len(failed) > 0:",
          "",
          "[Added Lines]",
          "100:     if failed:",
          "",
          "---------------"
        ],
        "airflow/cli/commands/webserver_command.py||airflow/cli/commands/webserver_command.py": [
          "File: airflow/cli/commands/webserver_command.py -> airflow/cli/commands/webserver_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         def ready_prefix_on_cmdline(proc):",
          "139:             try:",
          "140:                 cmdline = proc.cmdline()",
          "142:                     return settings.GUNICORN_WORKER_READY_PREFIX in cmdline[0]",
          "143:             except psutil.NoSuchProcess:",
          "144:                 pass",
          "",
          "[Removed Lines]",
          "141:                 if len(cmdline) > 0:",
          "",
          "[Added Lines]",
          "141:                 if cmdline:",
          "",
          "---------------"
        ],
        "airflow/dag_processing/processor.py||airflow/dag_processing/processor.py": [
          "File: airflow/dag_processing/processor.py -> airflow/dag_processing/processor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:             Stats.incr(\"dag_file_refresh_error\", 1, 1, tags={\"file_path\": file_path})",
          "836:             return 0, 0",
          "839:             self.log.info(\"DAG(s) %s retrieved from %s\", dagbag.dags.keys(), file_path)",
          "840:         else:",
          "841:             self.log.warning(\"No viable dags retrieved from %s\", file_path)",
          "",
          "[Removed Lines]",
          "838:         if len(dagbag.dags) > 0:",
          "",
          "[Added Lines]",
          "838:         if dagbag.dags:",
          "",
          "---------------"
        ],
        "airflow/listeners/listener.py||airflow/listeners/listener.py": [
          "File: airflow/listeners/listener.py -> airflow/listeners/listener.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     @property",
          "48:     def has_listeners(self) -> bool:",
          "51:     @property",
          "52:     def hook(self) -> _HookRelay:",
          "",
          "[Removed Lines]",
          "49:         return len(self.pm.get_plugins()) > 0",
          "",
          "[Added Lines]",
          "49:         return bool(self.pm.get_plugins())",
          "",
          "---------------"
        ],
        "airflow/models/baseoperator.py||airflow/models/baseoperator.py": [
          "File: airflow/models/baseoperator.py -> airflow/models/baseoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:             from airflow.models.dag import DagContext",
          "392:             from airflow.utils.task_group import TaskGroupContext",
          "395:                 raise AirflowException(\"Use keyword arguments when initializing operators\")",
          "397:             instantiated_from_mapped = kwargs.pop(",
          "",
          "[Removed Lines]",
          "394:             if len(args) > 0:",
          "",
          "[Added Lines]",
          "394:             if args:",
          "",
          "---------------"
        ],
        "airflow/models/dag.py||airflow/models/dag.py": [
          "File: airflow/models/dag.py -> airflow/models/dag.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1591:             .limit(num)",
          "1592:         ).all()",
          "1595:             return self.get_task_instances(start_date=base_date, end_date=base_date, session=session)",
          "1597:         min_date: datetime | None = execution_dates[-1]._mapping.get(",
          "",
          "[Removed Lines]",
          "1594:         if len(execution_dates) == 0:",
          "",
          "[Added Lines]",
          "1594:         if not execution_dates:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3155:         :param active_dag_ids: list of DAG IDs that are active",
          "3156:         :return: None",
          "3157:         \"\"\"",
          "3159:             return",
          "3160:         for dag in session.scalars(select(DagModel).where(~DagModel.dag_id.in_(active_dag_ids))).all():",
          "3161:             dag.is_active = False",
          "",
          "[Removed Lines]",
          "3158:         if len(active_dag_ids) == 0:",
          "",
          "[Added Lines]",
          "3158:         if not active_dag_ids:",
          "",
          "---------------"
        ],
        "airflow/sensors/filesystem.py||airflow/sensors/filesystem.py": [
          "File: airflow/sensors/filesystem.py -> airflow/sensors/filesystem.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                 return True",
          "72:             for _, _, files in os.walk(path):",
          "74:                     return True",
          "75:         return False",
          "",
          "[Removed Lines]",
          "73:                 if len(files) > 0:",
          "",
          "[Added Lines]",
          "73:                 if files:",
          "",
          "---------------"
        ],
        "airflow/triggers/file.py||airflow/triggers/file.py": [
          "File: airflow/triggers/file.py -> airflow/triggers/file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                     self.log.info(\"Found File %s last modified: %s\", str(path), str(mod_time))",
          "69:                     yield TriggerEvent(True)",
          "70:                 for _, _, files in os.walk(self.filepath):",
          "72:                         yield TriggerEvent(True)",
          "73:             await asyncio.sleep(self.poll_interval)",
          "",
          "[Removed Lines]",
          "71:                     if len(files) > 0:",
          "",
          "[Added Lines]",
          "71:                     if files:",
          "",
          "---------------"
        ],
        "airflow/www/extensions/init_jinja_globals.py||airflow/www/extensions/init_jinja_globals.py": [
          "File: airflow/www/extensions/init_jinja_globals.py -> airflow/www/extensions/init_jinja_globals.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         }",
          "76:         backends = conf.get(\"api\", \"auth_backends\")",
          "78:             extra_globals[\"rest_api_enabled\"] = True",
          "80:         if \"analytics_tool\" in conf.getsection(\"webserver\"):",
          "",
          "[Removed Lines]",
          "77:         if len(backends) > 0 and backends[0] != \"airflow.api.auth.backend.deny_all\":",
          "",
          "[Added Lines]",
          "77:         if backends and backends[0] != \"airflow.api.auth.backend.deny_all\":",
          "",
          "---------------"
        ],
        "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py": [
          "File: airflow/www/fab_security/manager.py -> airflow/www/fab_security/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:             self.auth_ldap_lastname_field,",
          "756:             self.auth_ldap_email_field,",
          "757:         ]",
          "759:             request_fields.append(self.auth_ldap_group_field)",
          "761:         # perform the LDAP search",
          "",
          "[Removed Lines]",
          "758:         if len(self.auth_roles_mapping) > 0:",
          "",
          "[Added Lines]",
          "758:         if self.auth_roles_mapping:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "795:         user_role_objects = set()",
          "797:         # apply AUTH_ROLES_MAPPING",
          "799:             user_role_keys = self.ldap_extract_list(user_attributes, self.auth_ldap_group_field)",
          "800:             user_role_objects.update(self.get_roles_from_keys(user_role_keys))",
          "",
          "[Removed Lines]",
          "798:         if len(self.auth_roles_mapping) > 0:",
          "",
          "[Added Lines]",
          "798:         if self.auth_roles_mapping:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:         user_role_objects = set()",
          "1088:         # apply AUTH_ROLES_MAPPING",
          "1090:             user_role_keys = userinfo.get(\"role_keys\", [])",
          "1091:             user_role_objects.update(self.get_roles_from_keys(user_role_keys))",
          "",
          "[Removed Lines]",
          "1089:         if len(self.auth_roles_mapping) > 0:",
          "",
          "[Added Lines]",
          "1089:         if self.auth_roles_mapping:",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3862:         for dag, dependencies in SerializedDagModel.get_dag_dependencies().items():",
          "3863:             dag_node_id = f\"dag:{dag}\"",
          "3865:                 for dep in dependencies:",
          "3866:                     if dep.dependency_type == \"dag\" or dep.dependency_type == \"dataset\":",
          "3867:                         nodes_dict[dag_node_id] = node_dict(dag_node_id, dag, \"dag\")",
          "",
          "[Removed Lines]",
          "3864:             if dag_node_id not in nodes_dict and len(dependencies) > 0:",
          "",
          "[Added Lines]",
          "3864:             if dag_node_id not in nodes_dict:",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/coertions.py||dev/breeze/src/airflow_breeze/utils/coertions.py": [
          "File: dev/breeze/src/airflow_breeze/utils/coertions.py -> dev/breeze/src/airflow_breeze/utils/coertions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: def one_or_none_set(iterable: Iterable[bool]) -> bool:",
          "",
          "[Removed Lines]",
          "33:     return sum(1 for i in iterable if i) in (0, 1)",
          "",
          "[Added Lines]",
          "33:     return 0 <= sum(1 for i in iterable if i) <= 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a525e85e31b26d413c986c86d181114bb37bd06",
      "candidate_info": {
        "commit_hash": "4a525e85e31b26d413c986c86d181114bb37bd06",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4a525e85e31b26d413c986c86d181114bb37bd06",
        "files": [
          "airflow/api_connexion/endpoints/config_endpoint.py",
          "tests/api_connexion/endpoints/test_config_endpoint.py"
        ],
        "message": "fix(api_connexion): handle the cases that webserver.expose_config is set to non-sensitive-only instead of boolean value (#32261)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
          "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
            "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
          ],
          "candidate": [
            "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
            "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py": [
          "File: airflow/api_connexion/endpoints/config_endpoint.py -> airflow/api_connexion/endpoints/config_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         \"application/json\": _config_to_json,",
          "75:     }",
          "76:     return_type = request.accept_mimetypes.best_match(serializer.keys())",
          "77:     if return_type not in serializer:",
          "78:         return Response(status=HTTPStatus.NOT_ACCEPTABLE)",
          "80:         if section and not conf.has_section(section):",
          "81:             raise NotFound(\"section not found.\", detail=f\"section={section} not found.\")",
          "83:         if section:",
          "84:             conf_section_value = conf_dict[section]",
          "85:             conf_dict.clear()",
          "",
          "[Removed Lines]",
          "79:     elif conf.getboolean(\"webserver\", \"expose_config\"):",
          "82:         conf_dict = conf.as_dict(display_source=False, display_sensitive=True)",
          "",
          "[Added Lines]",
          "77:     if conf.get(\"webserver\", \"expose_config\").lower() == \"non-sensitive-only\":",
          "78:         expose_config = True",
          "79:         display_sensitive = False",
          "80:     else:",
          "81:         expose_config = conf.getboolean(\"webserver\", \"expose_config\")",
          "82:         display_sensitive = True",
          "86:     elif expose_config:",
          "89:         conf_dict = conf.as_dict(display_source=False, display_sensitive=display_sensitive)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:         \"application/json\": _config_to_json,",
          "104:     }",
          "105:     return_type = request.accept_mimetypes.best_match(serializer.keys())",
          "106:     if return_type not in serializer:",
          "107:         return Response(status=HTTPStatus.NOT_ACCEPTABLE)",
          "109:         if not conf.has_option(section, option):",
          "110:             raise NotFound(",
          "111:                 \"Config not found.\", detail=f\"The option [{section}/{option}] is not found in config.\"",
          "112:             )",
          "115:         config = Config(",
          "116:             sections=[ConfigSection(name=section, options=[ConfigOption(key=option, value=value)])]",
          "",
          "[Removed Lines]",
          "108:     elif conf.getboolean(\"webserver\", \"expose_config\"):",
          "113:         value = conf.get(section, option)",
          "",
          "[Added Lines]",
          "113:     if conf.get(\"webserver\", \"expose_config\").lower() == \"non-sensitive-only\":",
          "114:         expose_config = True",
          "115:     else:",
          "116:         expose_config = conf.getboolean(\"webserver\", \"expose_config\")",
          "120:     elif expose_config:",
          "126:         print(conf.sensitive_config_values)",
          "127:         if (section, option) in conf.sensitive_config_values:",
          "128:             value = \"< hidden >\"",
          "129:         else:",
          "130:             value = conf.get(section, option)",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_config_endpoint.py -> tests/api_connexion/endpoints/test_config_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     },",
          "36: }",
          "39: @pytest.fixture(scope=\"module\")",
          "40: def configured_app(minimal_app_for_api):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: MOCK_CONF_WITH_SENSITIVE_VALUE = {",
          "39:     \"core\": {\"parallelism\": \"1024\", \"sql_alchemy_conn\": \"mock_conn\"},",
          "40:     \"smtp\": {",
          "41:         \"smtp_host\": \"localhost\",",
          "42:         \"smtp_mail_from\": \"airflow@example.com\",",
          "43:     },",
          "44: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         response = self.client.get(",
          "66:             \"/api/v1/config\", headers={\"Accept\": \"text/plain\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
          "67:         )",
          "68:         assert response.status_code == 200",
          "69:         expected = textwrap.dedent(",
          "70:             \"\"\"\\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)",
          "77:         assert response.status_code == 200",
          "78:         expected = textwrap.dedent(",
          "79:             \"\"\"\\",
          "80:         [core]",
          "81:         parallelism = 1024",
          "83:         [smtp]",
          "84:         smtp_host = localhost",
          "85:         smtp_mail_from = airflow@example.com",
          "86:         \"\"\"",
          "87:         )",
          "88:         assert expected == response.data.decode()",
          "90:     @patch(\"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\", return_value=MOCK_CONF)",
          "91:     @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
          "92:     def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict):",
          "93:         response = self.client.get(",
          "94:             \"/api/v1/config\", headers={\"Accept\": \"text/plain\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
          "95:         )",
          "96:         mock_as_dict.assert_called_with(display_source=False, display_sensitive=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:             headers={\"Accept\": \"application/json\"},",
          "86:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "87:         )",
          "88:         assert response.status_code == 200",
          "89:         expected = {",
          "90:             \"sections\": [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:             headers={\"Accept\": \"text/plain\"},",
          "113:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "114:         )",
          "115:         assert response.status_code == 200",
          "116:         expected = textwrap.dedent(",
          "117:             \"\"\"\\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:         mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:             headers={\"Accept\": \"application/json\"},",
          "130:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "131:         )",
          "132:         assert response.status_code == 200",
          "133:         expected = {",
          "134:             \"sections\": [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:         mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210:         )",
          "211:         assert expected == response.data.decode()",
          "213:     @patch(\"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\", return_value=MOCK_CONF)",
          "214:     def test_should_respond_200_application_json(self, mock_as_dict):",
          "215:         response = self.client.get(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     @patch(",
          "246:         \"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\",",
          "247:         return_value=MOCK_CONF_WITH_SENSITIVE_VALUE,",
          "248:     )",
          "249:     @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
          "250:     def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict):",
          "251:         response = self.client.get(",
          "252:             \"/api/v1/config/section/core/option/sql_alchemy_conn\",",
          "253:             headers={\"Accept\": \"text/plain\"},",
          "254:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "255:         )",
          "256:         assert response.status_code == 200",
          "257:         expected = textwrap.dedent(",
          "258:             \"\"\"\\",
          "259:         [core]",
          "260:         sql_alchemy_conn = < hidden >",
          "261:         \"\"\"",
          "262:         )",
          "263:         assert expected == response.data.decode()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cab342ee010bfd048006ca458c760b37470b6ea5",
      "candidate_info": {
        "commit_hash": "cab342ee010bfd048006ca458c760b37470b6ea5",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/cab342ee010bfd048006ca458c760b37470b6ea5",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/configuration.py",
          "airflow/www/views.py",
          "tests/core/test_configuration.py",
          "tests/www/views/test_views_configuration.py"
        ],
        "message": "Use single source of truth for sensitive config items (#31820)\n\nPreviously we had them defined both in constant and in config.yml.\n\nNow just config.yml",
        "before_after_code_files": [
          "airflow/configuration.py||airflow/configuration.py",
          "airflow/www/views.py||airflow/www/views.py",
          "tests/core/test_configuration.py||tests/core/test_configuration.py",
          "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/configuration.py||airflow/configuration.py"
          ],
          "candidate": [
            "airflow/configuration.py||airflow/configuration.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/configuration.py||airflow/configuration.py": [
          "File: airflow/configuration.py -> airflow/configuration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: from contextlib import contextmanager, suppress",
          "38: from json.decoder import JSONDecodeError",
          "39: from re import Pattern",
          "41: from urllib.parse import urlsplit",
          "43: from typing_extensions import overload",
          "",
          "[Removed Lines]",
          "40: from typing import IO, Any, Dict, Iterable, Tuple, Union",
          "",
          "[Added Lines]",
          "40: from typing import IO, Any, Dict, Iterable, Set, Tuple, Union",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         return yaml.safe_load(config_file)",
          "164: class AirflowConfigParser(ConfigParser):",
          "165:     \"\"\"Custom Airflow Configparser supporting defaults and deprecated options.\"\"\"",
          "",
          "[Removed Lines]",
          "149: SENSITIVE_CONFIG_VALUES = {",
          "150:     (\"database\", \"sql_alchemy_conn\"),",
          "151:     (\"core\", \"fernet_key\"),",
          "152:     (\"celery\", \"broker_url\"),",
          "153:     (\"celery\", \"flower_basic_auth\"),",
          "154:     (\"celery\", \"result_backend\"),",
          "155:     (\"atlas\", \"password\"),",
          "156:     (\"smtp\", \"smtp_password\"),",
          "157:     (\"webserver\", \"secret_key\"),",
          "158:     (\"secrets\", \"backend_kwargs\"),",
          "159:     # The following options are deprecated",
          "160:     (\"core\", \"sql_alchemy_conn\"),",
          "161: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:     # These configs can also be fetched from Secrets backend",
          "171:     # following the \"{section}__{name}__secret\" pattern",
          "175:     # A mapping of (new section, new option) -> (old section, old option, since_version).",
          "176:     # When reading new option, the old option will be checked to see if it exists. If it does a",
          "",
          "[Removed Lines]",
          "173:     sensitive_config_values: set[tuple[str, str]] = SENSITIVE_CONFIG_VALUES",
          "",
          "[Added Lines]",
          "158:     @functools.cached_property",
          "159:     def sensitive_config_values(self) -> Set[tuple[str, str]]:  # noqa: UP006",
          "160:         default_config = default_config_yaml()",
          "161:         flattened = {",
          "162:             (s, k): item for s, s_c in default_config.items() for k, item in s_c.get(\"options\").items()",
          "163:         }",
          "164:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
          "165:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
          "166:         depr_section = {",
          "167:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
          "168:         }",
          "169:         sensitive.update(depr_section, depr_option)",
          "170:         return sensitive",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4159:         # TODO remove \"if raw\" usage in Airflow 3.0. Configuration can be fetched via the REST API.",
          "4160:         if raw:",
          "4161:             if expose_config == \"non-sensitive-only\":",
          "4164:                 updater = configupdater.ConfigUpdater()",
          "4165:                 updater.read(AIRFLOW_CONFIG)",
          "4167:                     if updater.has_option(sect, key):",
          "4168:                         updater[sect][key].value = \"< hidden >\"",
          "4169:                 config = str(updater)",
          "",
          "[Removed Lines]",
          "4162:                 from airflow.configuration import SENSITIVE_CONFIG_VALUES",
          "4166:                 for sect, key in SENSITIVE_CONFIG_VALUES:",
          "",
          "[Added Lines]",
          "4164:                 for sect, key in conf.sensitive_config_values:",
          "",
          "---------------"
        ],
        "tests/core/test_configuration.py||tests/core/test_configuration.py": [
          "File: tests/core/test_configuration.py -> tests/core/test_configuration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     AirflowConfigException,",
          "37:     AirflowConfigParser,",
          "38:     conf,",
          "39:     expand_env_var,",
          "40:     get_airflow_config,",
          "41:     get_airflow_home,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     default_config_yaml,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1447:             w = captured.pop()",
          "1448:             assert \"your `conf.get*` call to use the new name\" in str(w.message)",
          "1449:             assert w.category == FutureWarning",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1453: def test_sensitive_values():",
          "1454:     from airflow.settings import conf",
          "1456:     # this list was hardcoded prior to 2.6.2",
          "1457:     # included here to avoid regression in refactor",
          "1458:     # inclusion of keys ending in \"password\" or \"kwargs\" is automated from 2.6.2",
          "1459:     # items not matching this pattern must be added here manually",
          "1460:     sensitive_values = {",
          "1461:         (\"database\", \"sql_alchemy_conn\"),",
          "1462:         (\"core\", \"fernet_key\"),",
          "1463:         (\"celery\", \"broker_url\"),",
          "1464:         (\"celery\", \"flower_basic_auth\"),",
          "1465:         (\"celery\", \"result_backend\"),",
          "1466:         (\"atlas\", \"password\"),",
          "1467:         (\"smtp\", \"smtp_password\"),",
          "1468:         (\"webserver\", \"secret_key\"),",
          "1469:         (\"secrets\", \"backend_kwargs\"),",
          "1470:         (\"sentry\", \"sentry_dsn\"),",
          "1471:         (\"database\", \"sql_alchemy_engine_args\"),",
          "1472:         (\"core\", \"sql_alchemy_conn\"),",
          "1473:     }",
          "1474:     default_config = default_config_yaml()",
          "1475:     all_keys = {(s, k) for s, v in default_config.items() for k in v.get(\"options\")}",
          "1476:     suspected_sensitive = {(s, k) for (s, k) in all_keys if k.endswith((\"password\", \"kwargs\"))}",
          "1477:     exclude_list = {",
          "1478:         (\"kubernetes_executor\", \"delete_option_kwargs\"),",
          "1479:     }",
          "1480:     suspected_sensitive -= exclude_list",
          "1481:     sensitive_values.update(suspected_sensitive)",
          "1482:     assert sensitive_values == conf.sensitive_config_values",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py": [
          "File: tests/www/views/test_views_configuration.py -> tests/www/views/test_views_configuration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import html",
          "22: from tests.test_utils.config import conf_vars",
          "23: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
          "",
          "[Removed Lines]",
          "21: from airflow.configuration import SENSITIVE_CONFIG_VALUES, conf",
          "",
          "[Added Lines]",
          "21: from airflow.configuration import conf",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: @conf_vars({(\"webserver\", \"expose_config\"): \"True\"})",
          "37: def test_user_can_view_configuration(admin_client):",
          "38:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
          "40:         value = conf.get(section, key, fallback=\"\")",
          "41:         if not value:",
          "42:             continue",
          "",
          "[Removed Lines]",
          "39:     for section, key in SENSITIVE_CONFIG_VALUES:",
          "",
          "[Added Lines]",
          "39:     for section, key in conf.sensitive_config_values:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
          "47: def test_configuration_redacted(admin_client):",
          "48:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
          "50:         value = conf.get(section, key, fallback=\"\")",
          "51:         if not value or value == \"airflow\":",
          "52:             continue",
          "",
          "[Removed Lines]",
          "49:     for section, key in SENSITIVE_CONFIG_VALUES:",
          "",
          "[Added Lines]",
          "49:     for section, key in conf.sensitive_config_values:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
          "59: def test_configuration_redacted_in_running_configuration(admin_client):",
          "60:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
          "62:         value = conf.get(section, key, fallback=\"\")",
          "63:         if not value or value == \"airflow\":",
          "64:             continue",
          "",
          "[Removed Lines]",
          "61:     for section, key in SENSITIVE_CONFIG_VALUES:",
          "",
          "[Added Lines]",
          "61:     for section, key in conf.sensitive_config_values:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab74d1ba98f0f1d601206164d2b9529681bed4b3",
      "candidate_info": {
        "commit_hash": "ab74d1ba98f0f1d601206164d2b9529681bed4b3",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/ab74d1ba98f0f1d601206164d2b9529681bed4b3",
        "files": [
          "airflow/api_connexion/endpoints/config_endpoint.py",
          "airflow/api_connexion/openapi/v1.yaml",
          "airflow/www/static/js/types/api-generated.ts",
          "tests/api_connexion/endpoints/test_config_endpoint.py"
        ],
        "message": "Add rest endpoint to get option of configuration (#31056)\n\nCurrently, getting a single configuration option is missing in the rest API.\nThis PR add an endpoint `/config/section/{section}/option/{option}` to\nReturn a single option. If the option is not found, the API returns 404.\nAlso, if `expose_config` is not set in configuration then it would return 403.",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
          "airflow/www/static/js/types/api-generated.ts||airflow/www/static/js/types/api-generated.ts",
          "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
            "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
          ],
          "candidate": [
            "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
            "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py": [
          "File: airflow/api_connexion/endpoints/config_endpoint.py -> airflow/api_connexion/endpoints/config_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from flask import Response, request",
          "23: from airflow.api_connexion import security",
          "25: from airflow.api_connexion.schemas.config_schema import Config, ConfigOption, ConfigSection, config_schema",
          "26: from airflow.configuration import conf",
          "27: from airflow.exceptions import AirflowNotFoundException",
          "",
          "[Removed Lines]",
          "24: from airflow.api_connexion.exceptions import PermissionDenied",
          "",
          "[Added Lines]",
          "24: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:                 \" reasons.\"",
          "96:             )",
          "97:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: @security.requires_access([(permissions.ACTION_CAN_READ, permissions.RESOURCE_CONFIG)])",
          "101: def get_value(section: str, option: str) -> Response:",
          "102:     serializer = {",
          "103:         \"text/plain\": _config_to_text,",
          "104:         \"application/json\": _config_to_json,",
          "105:     }",
          "106:     return_type = request.accept_mimetypes.best_match(serializer.keys())",
          "107:     if return_type not in serializer:",
          "108:         return Response(status=HTTPStatus.NOT_ACCEPTABLE)",
          "109:     elif conf.getboolean(\"webserver\", \"expose_config\"):",
          "110:         if not conf.has_option(section, option):",
          "111:             raise NotFound(",
          "112:                 \"Config not found.\", detail=f\"The option [{section}/{option}] is not found in config.\"",
          "113:             )",
          "114:         value = conf.get(section, option)",
          "116:         config = Config(",
          "117:             sections=[ConfigSection(name=section, options=[ConfigOption(key=option, value=value)])]",
          "118:         )",
          "119:         config_text = serializer[return_type](config)",
          "120:         return Response(config_text, headers={\"Content-Type\": return_type})",
          "121:     else:",
          "122:         raise PermissionDenied(",
          "123:             detail=(",
          "124:                 \"Your Airflow administrator chose not to expose the configuration, most likely for security\"",
          "125:                 \" reasons.\"",
          "126:             )",
          "127:         )",
          "",
          "---------------"
        ],
        "airflow/www/static/js/types/api-generated.ts||airflow/www/static/js/types/api-generated.ts": [
          "File: airflow/www/static/js/types/api-generated.ts -> airflow/www/static/js/types/api-generated.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:   \"/config\": {",
          "642:     get: operations[\"get_config\"];",
          "643:   };",
          "644:   \"/health\": {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644:   \"/config/section/{section}/option/{option}\": {",
          "645:     get: operations[\"get_value\"];",
          "646:   };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4196:       403: components[\"responses\"][\"PermissionDenied\"];",
          "4197:     };",
          "4198:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4202:   get_value: {",
          "4203:     parameters: {",
          "4204:       path: {",
          "4205:         section: string;",
          "4206:         option: string;",
          "4207:       };",
          "4208:     };",
          "4209:     responses: {",
          "4211:       200: {",
          "4212:         content: {",
          "4213:           \"application/json\": components[\"schemas\"][\"Config\"];",
          "4214:           \"text/plain\": string;",
          "4215:         };",
          "4216:       };",
          "4217:       401: components[\"responses\"][\"Unauthenticated\"];",
          "4218:       403: components[\"responses\"][\"PermissionDenied\"];",
          "4219:       404: components[\"responses\"][\"NotFound\"];",
          "4220:     };",
          "4221:   };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5000: export type GetConfigVariables = CamelCasedPropertiesDeep<",
          "5001:   operations[\"get_config\"][\"parameters\"][\"query\"]",
          "5002: >;",
          "5003: export type GetPluginsVariables = CamelCasedPropertiesDeep<",
          "5004:   operations[\"get_plugins\"][\"parameters\"][\"query\"]",
          "5005: >;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5026: export type GetValueVariables = CamelCasedPropertiesDeep<",
          "5027:   operations[\"get_value\"][\"parameters\"][\"path\"]",
          "5028: >;",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_config_endpoint.py -> tests/api_connexion/endpoints/test_config_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         )",
          "176:         assert response.status_code == 403",
          "177:         assert \"chose not to expose\" in response.json[\"detail\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: class TestGetValue:",
          "181:     @pytest.fixture(autouse=True)",
          "182:     def setup_attrs(self, configured_app) -> None:",
          "183:         self.app = configured_app",
          "184:         self.client = self.app.test_client()  # type:ignore",
          "186:     @patch(\"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\", return_value=MOCK_CONF)",
          "187:     def test_should_respond_200_text_plain(self, mock_as_dict):",
          "188:         response = self.client.get(",
          "189:             \"/api/v1/config/section/smtp/option/smtp_mail_from\",",
          "190:             headers={\"Accept\": \"text/plain\"},",
          "191:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "192:         )",
          "193:         assert response.status_code == 200",
          "194:         expected = textwrap.dedent(",
          "195:             \"\"\"\\",
          "196:         [smtp]",
          "197:         smtp_mail_from = airflow@example.com",
          "198:         \"\"\"",
          "199:         )",
          "200:         assert expected == response.data.decode()",
          "202:     @patch(\"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\", return_value=MOCK_CONF)",
          "203:     def test_should_respond_200_application_json(self, mock_as_dict):",
          "204:         response = self.client.get(",
          "205:             \"/api/v1/config/section/smtp/option/smtp_mail_from\",",
          "206:             headers={\"Accept\": \"application/json\"},",
          "207:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "208:         )",
          "209:         assert response.status_code == 200",
          "210:         expected = {",
          "211:             \"sections\": [",
          "212:                 {",
          "213:                     \"name\": \"smtp\",",
          "214:                     \"options\": [",
          "215:                         {\"key\": \"smtp_mail_from\", \"value\": \"airflow@example.com\"},",
          "216:                     ],",
          "217:                 },",
          "218:             ]",
          "219:         }",
          "220:         assert expected == response.json",
          "222:     @patch(\"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\", return_value=MOCK_CONF)",
          "223:     def test_should_respond_404_when_option_not_exist(self, mock_as_dict):",
          "224:         response = self.client.get(",
          "225:             \"/api/v1/config/section/smtp/option/smtp_mail_from1\",",
          "226:             headers={\"Accept\": \"application/json\"},",
          "227:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "228:         )",
          "230:         assert response.status_code == 404",
          "231:         assert \"The option [smtp/smtp_mail_from1] is not found in config.\" in response.json[\"detail\"]",
          "233:     @patch(\"airflow.api_connexion.endpoints.config_endpoint.conf.as_dict\", return_value=MOCK_CONF)",
          "234:     def test_should_respond_406(self, mock_as_dict):",
          "235:         response = self.client.get(",
          "236:             \"/api/v1/config/section/smtp/option/smtp_mail_from\",",
          "237:             headers={\"Accept\": \"application/octet-stream\"},",
          "238:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "239:         )",
          "240:         assert response.status_code == 406",
          "242:     def test_should_raises_401_unauthenticated(self):",
          "243:         response = self.client.get(",
          "244:             \"/api/v1/config/section/smtp/option/smtp_mail_from\", headers={\"Accept\": \"application/json\"}",
          "245:         )",
          "247:         assert_401(response)",
          "249:     def test_should_raises_403_unauthorized(self):",
          "250:         response = self.client.get(",
          "251:             \"/api/v1/config/section/smtp/option/smtp_mail_from\",",
          "252:             headers={\"Accept\": \"application/json\"},",
          "253:             environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"},",
          "254:         )",
          "256:         assert response.status_code == 403",
          "258:     @conf_vars({(\"webserver\", \"expose_config\"): \"False\"})",
          "259:     def test_should_respond_403_when_expose_config_off(self):",
          "260:         response = self.client.get(",
          "261:             \"/api/v1/config/section/smtp/option/smtp_mail_from\",",
          "262:             headers={\"Accept\": \"application/json\"},",
          "263:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "264:         )",
          "265:         assert response.status_code == 403",
          "266:         assert \"chose not to expose\" in response.json[\"detail\"]",
          "",
          "---------------"
        ]
      }
    }
  ]
}