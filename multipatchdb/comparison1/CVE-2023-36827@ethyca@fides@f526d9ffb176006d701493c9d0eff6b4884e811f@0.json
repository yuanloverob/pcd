{
  "cve_id": "CVE-2023-36827",
  "cve_desc": "Fides is an open-source privacy engineering platform for managing the fulfillment of data privacy requests in a runtime environment, and the enforcement of privacy regulations in code. A path traversal (directory traversal) vulnerability affects fides versions lower than version `2.15.1`, allowing remote attackers to access arbitrary files on the fides webserver container's filesystem. The vulnerability is patched in fides `2.15.1`.\n\nIf the Fides webserver API is not directly accessible to attackers and is instead deployed behind a reverse proxy as recommended in Ethyca's security best practice documentation, and the reverse proxy is an AWS application load balancer, the vulnerability can't be exploited by these attackers. An AWS application load balancer will reject this attack with a 400 error. Additionally, any secrets supplied to the container using environment variables rather than a `fides.toml` configuration file are not affected by this vulnerability.\n",
  "repo": "ethyca/fides",
  "patch_hash": "f526d9ffb176006d701493c9d0eff6b4884e811f",
  "patch_info": {
    "commit_hash": "f526d9ffb176006d701493c9d0eff6b4884e811f",
    "repo": "ethyca/fides",
    "commit_url": "https://github.com/ethyca/fides/commit/f526d9ffb176006d701493c9d0eff6b4884e811f",
    "files": [
      "src/fides/api/common_exceptions.py",
      "src/fides/api/main.py",
      "tests/ops/util/test_api_router.py"
    ],
    "message": "Merge pull request from GHSA-r25m-cr6v-p9hq\n\n* fix for vuln\n\n* Apply suggestions from code review\n\nUse correct spelling of malicious.\n\nCo-authored-by: Adam Sachs <adam@ethyca.com>\n\n* Update src/fides/api/main.py\n\nVerbiage\n\nCo-authored-by: Thomas <thomas.lapiana+github@pm.me>\n\n---------\n\nCo-authored-by: Adam Sachs <adam@ethyca.com>\nCo-authored-by: Thomas <thomas.lapiana+github@pm.me>\nCo-authored-by: Dave Quinlan <83430497+daveqnet@users.noreply.github.com>",
    "before_after_code_files": [
      "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py",
      "src/fides/api/main.py||src/fides/api/main.py",
      "tests/ops/util/test_api_router.py||tests/ops/util/test_api_router.py"
    ]
  },
  "patch_diff": {
    "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py": [
      "File: src/fides/api/common_exceptions.py -> src/fides/api/common_exceptions.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:     \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"",
      "226: class AuthenticationError(HTTPException):",
      "227:     \"\"\"To be raised when attempting to fetch an access token using",
      "228:     invalid credentials.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226: class MalisciousUrlException(Exception):",
      "227:     \"\"\"Fides has detected a potentially maliscious URL.\"\"\"",
      "",
      "---------------"
    ],
    "src/fides/api/main.py||src/fides/api/main.py": [
      "File: src/fides/api/main.py -> src/fides/api/main.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \"\"\"",
      "2: Contains the code that sets up the API.",
      "3: \"\"\"",
      "4: import sys",
      "5: from datetime import datetime, timezone",
      "6: from logging import WARNING",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import os",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11: from fideslog.sdk.python.event import AnalyticsEvent",
      "12: from loguru import logger",
      "13: from starlette.background import BackgroundTask",
      "14: from uvicorn import Config, Server",
      "16: import fides",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: from urllib.parse import unquote",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20:     log_startup,",
      "21:     run_database_startup,",
      "22: )",
      "23: from fides.api.middleware import handle_audit_log_resource",
      "24: from fides.api.schemas.analytics import Event, ExtraData",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from fides.api.common_exceptions import MalisciousUrlException",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "151:     return get_admin_index_as_response()",
      "154: @app.get(\"/{catchall:path}\", response_class=Response, tags=[\"Default\"])",
      "155: def read_other_paths(request: Request) -> Response:",
      "156:     \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157: def sanitise_url_path(path: str) -> str:",
      "158:     \"\"\"Returns a URL path that does not contain any ../ or //\"\"\"",
      "159:     path = unquote(path)",
      "160:     path = os.path.normpath(path)",
      "161:     for token in path.split(\"/\"):",
      "162:         if \"..\" in token:",
      "163:             logger.warning(f\"Potentially dangerous use of URL hierarchy in path: {path}\")",
      "164:             raise MalisciousUrlException()",
      "165:     return path",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "158:     \"\"\"",
      "159:     # check first if requested file exists (for frontend assets)",
      "160:     path = request.path_params[\"catchall\"]",
      "162:     # search for matching route in package (i.e. /dataset)",
      "163:     ui_file = match_route(get_ui_file_map(), path)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:     logger.debug(f\"Catch all path detected: {path}\")",
      "176:     try:",
      "177:         path = sanitise_url_path(path)",
      "178:     except MalisciousUrlException:",
      "179:         # if a maliscious URL is detected, route the user to the index",
      "180:         return get_admin_index_as_response()",
      "",
      "---------------"
    ],
    "tests/ops/util/test_api_router.py||tests/ops/util/test_api_router.py": [
      "File: tests/ops/util/test_api_router.py -> tests/ops/util/test_api_router.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:             f\"{V1_URL_PREFIX}/route/does/not/exist/\", headers=auth_header",
      "46:         )",
      "47:         assert resp_4.status_code == HTTP_404_NOT_FOUND",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:     def test_malicious_url(",
      "50:         self,",
      "51:         api_client: TestClient,",
      "52:         url,",
      "53:     ) -> None:",
      "54:         malicious_paths = [",
      "55:             \"../../../../../../../../../etc/passwd\",",
      "56:             \"..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",",
      "57:             \"%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",",
      "58:             \"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd\",",
      "59:             \"..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd\",",
      "60:             \".../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//etc/passwd\",",
      "61:             \"...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2fetc/passwd\",",
      "62:             \"%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//etc/passwd\",",
      "63:             \"%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2fetc/passwd\",",
      "64:         ]",
      "65:         for path in malicious_paths:",
      "66:             resp = api_client.get(f\"{url}/{path}\")",
      "67:             assert resp.status_code == 200",
      "68:             assert resp.text == \"<h1>Privacy is a Human Right!</h1>\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "111bf3bf1fec0521be89a32eae42f3729a61115e",
      "candidate_info": {
        "commit_hash": "111bf3bf1fec0521be89a32eae42f3729a61115e",
        "repo": "ethyca/fides",
        "commit_url": "https://github.com/ethyca/fides/commit/111bf3bf1fec0521be89a32eae42f3729a61115e",
        "files": [
          "CHANGELOG.md",
          "src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py",
          "src/fides/api/main.py",
          "src/fides/api/models/privacy_preference.py",
          "src/fides/api/service/connectors/saas/connector_registry_service.py",
          "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py",
          "tests/ops/api/v1/endpoints/test_connection_template_endpoints.py",
          "tests/ops/api/v1/endpoints/test_system.py",
          "tests/ops/models/test_privacy_preference.py"
        ],
        "message": "[Backend] Fix Validation Error where Current Privacy Preferences might be None (#3719)\n\nFix bug where if a single user saves their preferences in rapid succession, the older PrivacyPreferenceHistory history record will no longer have a relationship with the CurrentPrivacyPreference record because a newer PrivacyPreferenceHistory had superseded it.  This just affected serialization of the response when saving preferences.",
        "before_after_code_files": [
          "src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py||src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py",
          "src/fides/api/main.py||src/fides/api/main.py",
          "src/fides/api/models/privacy_preference.py||src/fides/api/models/privacy_preference.py",
          "src/fides/api/service/connectors/saas/connector_registry_service.py||src/fides/api/service/connectors/saas/connector_registry_service.py",
          "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py||tests/ops/api/v1/endpoints/test_connection_config_endpoints.py",
          "tests/ops/api/v1/endpoints/test_connection_template_endpoints.py||tests/ops/api/v1/endpoints/test_connection_template_endpoints.py",
          "tests/ops/api/v1/endpoints/test_system.py||tests/ops/api/v1/endpoints/test_system.py",
          "tests/ops/models/test_privacy_preference.py||tests/ops/models/test_privacy_preference.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/fides/api/main.py||src/fides/api/main.py"
          ],
          "candidate": [
            "src/fides/api/main.py||src/fides/api/main.py"
          ]
        }
      },
      "candidate_diff": {
        "src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py||src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py": [
          "File: src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py -> src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:     needs_server_side_propagation: bool = False",
          "346:     for privacy_preference in request_data.preferences:",
          "348:             db=db,",
          "349:             data={",
          "350:                 \"anonymized_ip_address\": request_data.anonymized_ip_address,",
          "",
          "[Removed Lines]",
          "347:         historical_preference: PrivacyPreferenceHistory = PrivacyPreferenceHistory.create(",
          "",
          "[Added Lines]",
          "347:         (",
          "348:             historical_preference,",
          "349:             current_preference,",
          "350:         ) = PrivacyPreferenceHistory.create_history_and_upsert_current_preference(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:             },",
          "377:             check_name=False,",
          "378:         )",
          "382:         created_historical_preferences.append(historical_preference)",
          "385:         if (",
          "386:             historical_preference.privacy_notice_history.enforcement_level",
          "",
          "[Removed Lines]",
          "379:         upserted_current_preference: CurrentPrivacyPreference = (",
          "380:             historical_preference.current_privacy_preference",
          "381:         )",
          "383:         upserted_current_preferences.append(upserted_current_preference)",
          "",
          "[Added Lines]",
          "383:         upserted_current_preferences.append(current_preference)",
          "",
          "---------------"
        ],
        "src/fides/api/main.py||src/fides/api/main.py": [
          "File: src/fides/api/main.py -> src/fides/api/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from datetime import datetime, timezone",
          "7: from logging import WARNING",
          "8: from typing import Callable, Optional",
          "10: from fastapi import HTTPException, Request, Response, status",
          "11: from fastapi.responses import FileResponse",
          "12: from fideslog.sdk.python.event import AnalyticsEvent",
          "13: from loguru import logger",
          "14: from starlette.background import BackgroundTask",
          "16: from uvicorn import Config, Server",
          "18: import fides",
          "",
          "[Removed Lines]",
          "15: from urllib.parse import unquote",
          "",
          "[Added Lines]",
          "9: from urllib.parse import unquote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     path = os.path.normpath(path)",
          "161:     for token in path.split(\"/\"):",
          "162:         if \"..\" in token:",
          "164:             raise MalisciousUrlException()",
          "165:     return path",
          "",
          "[Removed Lines]",
          "163:             logger.warning(f\"Potentially dangerous use of URL hierarchy in path: {path}\")",
          "",
          "[Added Lines]",
          "163:             logger.warning(",
          "164:                 f\"Potentially dangerous use of URL hierarchy in path: {path}\"",
          "165:             )",
          "",
          "---------------"
        ],
        "src/fides/api/models/privacy_preference.py||src/fides/api/models/privacy_preference.py": [
          "File: src/fides/api/models/privacy_preference.py -> src/fides/api/models/privacy_preference.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from __future__ import annotations",
          "5: from enum import Enum",
          "8: from sqlalchemy import ARRAY, Column, DateTime",
          "9: from sqlalchemy import Enum as EnumColumn",
          "",
          "[Removed Lines]",
          "6: from typing import Any, Dict, Optional, Type",
          "",
          "[Added Lines]",
          "6: from typing import Any, Dict, Optional, Tuple, Type",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:         data: dict[str, Any],",
          "206:         check_name: bool = False,",
          "207:     ) -> PrivacyPreferenceHistory:",
          "208:         \"\"\"Create a PrivacyPreferenceHistory record and then upsert the CurrentPrivacyPreference record.",
          "209:         If separate CurrentPrivacyPreferences exist for both a verified provided identity and a fides user device",
          "210:         id provided identity, consolidate these \"current\" preferences into a single record.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:         \"\"\"Method that creates a PrivacyPreferenceRecord and upserts a CurrentPrivacyPreference record.",
          "210:         The only difference between this and PrivacyPreference.create_history_and_upsert_current_preference",
          "211:         is the response.",
          "212:         \"\"\"",
          "213:         history, _ = cls.create_history_and_upsert_current_preference(",
          "214:             db, data=data, check_name=check_name",
          "215:         )",
          "216:         return history",
          "218:     @classmethod",
          "219:     def create_history_and_upsert_current_preference(",
          "220:         cls: Type[PrivacyPreferenceHistory],",
          "221:         db: Session,",
          "223:         data: dict[str, Any],",
          "224:         check_name: bool = False,",
          "225:     ) -> Tuple[PrivacyPreferenceHistory, CurrentPrivacyPreference]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:         if current_preference:",
          "286:             current_preference.update(db=db, data=current_privacy_preference_data)",
          "287:         else:",
          "289:                 db=db, data=current_privacy_preference_data, check_name=False",
          "290:             )",
          "295: class CurrentPrivacyPreference(Base):",
          "",
          "[Removed Lines]",
          "288:             CurrentPrivacyPreference.create(",
          "292:         return created_privacy_preference_history",
          "",
          "[Added Lines]",
          "306:             current_preference = CurrentPrivacyPreference.create(",
          "310:         return created_privacy_preference_history, current_preference",
          "",
          "---------------"
        ],
        "src/fides/api/service/connectors/saas/connector_registry_service.py||src/fides/api/service/connectors/saas/connector_registry_service.py": [
          "File: src/fides/api/service/connectors/saas/connector_registry_service.py -> src/fides/api/service/connectors/saas/connector_registry_service.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:     )",
          "325:     data = {",
          "327:         \"description\": template_values.description,",
          "328:         \"connection_type\": ConnectionType.saas,",
          "329:         \"access\": AccessLevel.write,",
          "",
          "[Removed Lines]",
          "326:         \"key\": template_values.key if template_values.key else template_values.instance_key,",
          "",
          "[Added Lines]",
          "326:         \"key\": template_values.key",
          "327:         if template_values.key",
          "328:         else template_values.instance_key,",
          "",
          "---------------"
        ],
        "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py||tests/ops/api/v1/endpoints/test_connection_config_endpoints.py": [
          "File: tests/ops/api/v1/endpoints/test_connection_config_endpoints.py -> tests/ops/api/v1/endpoints/test_connection_config_endpoints.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:         assert call_args[4] is None",
          "707:         assert call_args[5] is None",
          "711:         auth_header = generate_auth_header(scopes=[CONNECTION_CREATE_OR_UPDATE])",
          "712:         del payload[0][\"name\"]",
          "713:         response = api_client.patch(url, headers=auth_header, json=payload)",
          "",
          "[Removed Lines]",
          "710:     def test_patch_connections_no_name(self, api_client, generate_auth_header, url, payload):",
          "",
          "[Added Lines]",
          "709:     def test_patch_connections_no_name(",
          "710:         self, api_client, generate_auth_header, url, payload",
          "711:     ):",
          "",
          "---------------"
        ],
        "tests/ops/api/v1/endpoints/test_connection_template_endpoints.py||tests/ops/api/v1/endpoints/test_connection_template_endpoints.py": [
          "File: tests/ops/api/v1/endpoints/test_connection_template_endpoints.py -> tests/ops/api/v1/endpoints/test_connection_template_endpoints.py"
        ],
        "tests/ops/api/v1/endpoints/test_system.py||tests/ops/api/v1/endpoints/test_system.py": [
          "File: tests/ops/api/v1/endpoints/test_system.py -> tests/ops/api/v1/endpoints/test_system.py"
        ],
        "tests/ops/models/test_privacy_preference.py||tests/ops/models/test_privacy_preference.py": [
          "File: tests/ops/models/test_privacy_preference.py -> tests/ops/models/test_privacy_preference.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     IdentityNotFoundException,",
          "10:     PrivacyNoticeHistoryNotFound,",
          "11: )",
          "13: from fides.api.models.privacy_preference import (",
          "14:     PrivacyPreferenceHistory,",
          "15:     RequestOrigin,",
          "",
          "[Removed Lines]",
          "12: from fides.api.models.privacy_notice import PrivacyNoticeRegion",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:         preference_history_record.delete(db)",
          "247:         next_preference_history_record.delete(db)",
          "249:     def test_cache_system_status(self, privacy_preference_history, db):",
          "250:         assert privacy_preference_history.affected_system_status == {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     def test_create_history_and_upsert_current_preferences(",
          "249:         self,",
          "250:         db,",
          "251:         privacy_notice,",
          "252:     ):",
          "253:         provided_identity_data = {",
          "254:             \"privacy_request_id\": None,",
          "255:             \"field_name\": \"email\",",
          "256:             \"hashed_value\": ProvidedIdentity.hash_value(\"test@email.com\"),",
          "257:             \"encrypted_value\": {\"value\": \"test@email.com\"},",
          "258:         }",
          "259:         fides_user_provided_identity_data = {",
          "260:             \"privacy_request_id\": None,",
          "261:             \"field_name\": \"fides_user_device_id\",",
          "262:             \"hashed_value\": ProvidedIdentity.hash_value(",
          "263:                 \"test_fides_user_device_id_1234567\"",
          "264:             ),",
          "265:             \"encrypted_value\": {\"value\": \"test_fides_user_device_id_1234567\"},",
          "266:         }",
          "267:         provided_identity = ProvidedIdentity.create(db, data=provided_identity_data)",
          "268:         fides_user_provided_identity = ProvidedIdentity.create(",
          "269:             db, data=fides_user_provided_identity_data",
          "270:         )",
          "272:         privacy_notice_history = privacy_notice.histories[0]",
          "274:         email, hashed_email = extract_identity_from_provided_identity(",
          "275:             provided_identity, ProvidedIdentityType.email",
          "276:         )",
          "277:         phone_number, hashed_phone_number = extract_identity_from_provided_identity(",
          "278:             provided_identity, ProvidedIdentityType.phone_number",
          "279:         )",
          "280:         (",
          "281:             fides_user_device_id,",
          "282:             hashed_device_id,",
          "283:         ) = extract_identity_from_provided_identity(",
          "284:             fides_user_provided_identity, ProvidedIdentityType.fides_user_device_id",
          "285:         )",
          "287:         (",
          "288:             preference_history_record,",
          "289:             current_record,",
          "290:         ) = PrivacyPreferenceHistory.create_history_and_upsert_current_preference(",
          "291:             db=db,",
          "292:             data={",
          "293:                 \"email\": email,",
          "294:                 \"fides_user_device\": fides_user_device_id,",
          "295:                 \"fides_user_device_provided_identity_id\": fides_user_provided_identity.id,",
          "296:                 \"hashed_email\": hashed_email,",
          "297:                 \"hashed_fides_user_device\": hashed_device_id,",
          "298:                 \"hashed_phone_number\": hashed_phone_number,",
          "299:                 \"phone_number\": phone_number,",
          "300:                 \"preference\": \"opt_out\",",
          "301:                 \"privacy_notice_history_id\": privacy_notice_history.id,",
          "302:                 \"provided_identity_id\": provided_identity.id,",
          "303:                 \"request_origin\": \"privacy_center\",",
          "304:                 \"secondary_user_ids\": {\"ga_client_id\": \"test\"},",
          "305:                 \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/324.42 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/425.24\",",
          "306:                 \"user_geography\": \"us_ca\",",
          "307:                 \"url_recorded\": \"example.com/privacy_center\",",
          "308:             },",
          "309:             check_name=False,",
          "310:         )",
          "312:         assert current_record == preference_history_record.current_privacy_preference",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a36682d25b4daca1f078c49aced24e64aed3ab1",
      "candidate_info": {
        "commit_hash": "5a36682d25b4daca1f078c49aced24e64aed3ab1",
        "repo": "ethyca/fides",
        "commit_url": "https://github.com/ethyca/fides/commit/5a36682d25b4daca1f078c49aced24e64aed3ab1",
        "files": [
          "src/fides/api/common_exceptions.py",
          "src/fides/api/main.py",
          "tests/ops/util/test_api_router.py"
        ],
        "message": "Merge pull request from GHSA-r25m-cr6v-p9hq\n\n* fix for vuln\n\n* Apply suggestions from code review\n\nUse correct spelling of malicious.\n\nCo-authored-by: Adam Sachs <adam@ethyca.com>\n\n* Update src/fides/api/main.py\n\nVerbiage\n\nCo-authored-by: Thomas <thomas.lapiana+github@pm.me>\n\n---------\n\nCo-authored-by: Adam Sachs <adam@ethyca.com>\nCo-authored-by: Thomas <thomas.lapiana+github@pm.me>\nCo-authored-by: Dave Quinlan <83430497+daveqnet@users.noreply.github.com>",
        "before_after_code_files": [
          "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py",
          "src/fides/api/main.py||src/fides/api/main.py",
          "tests/ops/util/test_api_router.py||tests/ops/util/test_api_router.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py",
            "src/fides/api/main.py||src/fides/api/main.py",
            "tests/ops/util/test_api_router.py||tests/ops/util/test_api_router.py"
          ],
          "candidate": [
            "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py",
            "src/fides/api/main.py||src/fides/api/main.py",
            "tests/ops/util/test_api_router.py||tests/ops/util/test_api_router.py"
          ]
        }
      },
      "candidate_diff": {
        "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py": [
          "File: src/fides/api/common_exceptions.py -> src/fides/api/common_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"",
          "226: class AuthenticationError(HTTPException):",
          "227:     \"\"\"To be raised when attempting to fetch an access token using",
          "228:     invalid credentials.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226: class MalisciousUrlException(Exception):",
          "227:     \"\"\"Fides has detected a potentially maliscious URL.\"\"\"",
          "",
          "---------------"
        ],
        "src/fides/api/main.py||src/fides/api/main.py": [
          "File: src/fides/api/main.py -> src/fides/api/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"",
          "2: Contains the code that sets up the API.",
          "3: \"\"\"",
          "4: import sys",
          "5: from datetime import datetime, timezone",
          "6: from logging import WARNING",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: from fideslog.sdk.python.event import AnalyticsEvent",
          "12: from loguru import logger",
          "13: from starlette.background import BackgroundTask",
          "14: from uvicorn import Config, Server",
          "16: import fides",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: from urllib.parse import unquote",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:     log_startup,",
          "22:     run_database_startup,",
          "23: )",
          "24: from fides.api.middleware import handle_audit_log_resource",
          "25: from fides.api.schemas.analytics import Event, ExtraData",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: from fides.api.common_exceptions import MalisciousUrlException",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:     return get_admin_index_as_response()",
          "154: @app.get(\"/{catchall:path}\", response_class=Response, tags=[\"Default\"])",
          "155: def read_other_paths(request: Request) -> Response:",
          "156:     \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: def sanitise_url_path(path: str) -> str:",
          "158:     \"\"\"Returns a URL path that does not contain any ../ or //\"\"\"",
          "159:     path = unquote(path)",
          "160:     path = os.path.normpath(path)",
          "161:     for token in path.split(\"/\"):",
          "162:         if \"..\" in token:",
          "163:             logger.warning(f\"Potentially dangerous use of URL hierarchy in path: {path}\")",
          "164:             raise MalisciousUrlException()",
          "165:     return path",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:     \"\"\"",
          "159:     # check first if requested file exists (for frontend assets)",
          "160:     path = request.path_params[\"catchall\"]",
          "162:     # search for matching route in package (i.e. /dataset)",
          "163:     ui_file = match_route(get_ui_file_map(), path)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     logger.debug(f\"Catch all path detected: {path}\")",
          "176:     try:",
          "177:         path = sanitise_url_path(path)",
          "178:     except MalisciousUrlException:",
          "179:         # if a maliscious URL is detected, route the user to the index",
          "180:         return get_admin_index_as_response()",
          "",
          "---------------"
        ],
        "tests/ops/util/test_api_router.py||tests/ops/util/test_api_router.py": [
          "File: tests/ops/util/test_api_router.py -> tests/ops/util/test_api_router.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             f\"{V1_URL_PREFIX}/route/does/not/exist/\", headers=auth_header",
          "46:         )",
          "47:         assert resp_4.status_code == HTTP_404_NOT_FOUND",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     def test_malicious_url(",
          "50:         self,",
          "51:         api_client: TestClient,",
          "52:         url,",
          "53:     ) -> None:",
          "54:         malicious_paths = [",
          "55:             \"../../../../../../../../../etc/passwd\",",
          "56:             \"..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",",
          "57:             \"%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",",
          "58:             \"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd\",",
          "59:             \"..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd\",",
          "60:             \".../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//etc/passwd\",",
          "61:             \"...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2fetc/passwd\",",
          "62:             \"%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//etc/passwd\",",
          "63:             \"%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2fetc/passwd\",",
          "64:         ]",
          "65:         for path in malicious_paths:",
          "66:             resp = api_client.get(f\"{url}/{path}\")",
          "67:             assert resp.status_code == 200",
          "68:             assert resp.text == \"<h1>Privacy is a Human Right!</h1>\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d14fe6d4d0530deb57c2d8a62d83a27d26c1f5b",
      "candidate_info": {
        "commit_hash": "6d14fe6d4d0530deb57c2d8a62d83a27d26c1f5b",
        "repo": "ethyca/fides",
        "commit_url": "https://github.com/ethyca/fides/commit/6d14fe6d4d0530deb57c2d8a62d83a27d26c1f5b",
        "files": [
          "CHANGELOG.md",
          "dev-requirements.txt",
          "docker-compose.yml",
          "requirements.txt",
          "src/fides/api/common_exceptions.py",
          "src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py",
          "src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py",
          "src/fides/api/service/connectors/sql_connector.py",
          "src/fides/core/config/security_settings.py",
          "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py",
          "tests/ops/integration_tests/test_connection_configuration_integration.py"
        ],
        "message": "Optional SSH Support for DSR Processing (#3374)\n\nCo-authored-by: Sean Preston <sean@ethyca.com>",
        "before_after_code_files": [
          "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py",
          "src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py||src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py",
          "src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py||src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py",
          "src/fides/api/service/connectors/sql_connector.py||src/fides/api/service/connectors/sql_connector.py",
          "src/fides/core/config/security_settings.py||src/fides/core/config/security_settings.py",
          "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py||tests/ops/api/v1/endpoints/test_connection_config_endpoints.py",
          "tests/ops/integration_tests/test_connection_configuration_integration.py||tests/ops/integration_tests/test_connection_configuration_integration.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py"
          ],
          "candidate": [
            "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py"
          ]
        }
      },
      "candidate_diff": {
        "src/fides/api/common_exceptions.py||src/fides/api/common_exceptions.py": [
          "File: src/fides/api/common_exceptions.py -> src/fides/api/common_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     \"\"\"Exception for when a connection type secret schema is not found.\"\"\"",
          "222: class AuthenticationError(HTTPException):",
          "223:     \"\"\"To be raised when attempting to fetch an access token using",
          "224:     invalid credentials.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: class SSHTunnelConfigNotFoundException(Exception):",
          "223:     \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"",
          "",
          "---------------"
        ],
        "src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py||src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py": [
          "File: src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py -> src/fides/api/schemas/connection_configuration/connection_secrets_postgres.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         str",
          "18:     ] = None  # Either the entire \"url\" *OR* the \"host\" should be supplied.",
          "19:     port: Optional[int] = None",
          "21:     _required_components: List[str] = [\"host\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:     ssh_required: bool = False",
          "",
          "---------------"
        ],
        "src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py||src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py": [
          "File: src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py -> src/fides/api/schemas/connection_configuration/connection_secrets_redshift.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     user: Optional[str] = None",
          "16:     password: Optional[str] = None",
          "17:     db_schema: Optional[str] = None",
          "19:     _required_components: List[str] = [\"host\", \"user\", \"password\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:     ssh_required: bool = False",
          "",
          "---------------"
        ],
        "src/fides/api/service/connectors/sql_connector.py||src/fides/api/service/connectors/sql_connector.py": [
          "File: src/fides/api/service/connectors/sql_connector.py -> src/fides/api/service/connectors/sql_connector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from abc import abstractmethod",
          "2: from typing import Any, Dict, List, Optional, Type",
          "4: from loguru import logger",
          "5: from snowflake.sqlalchemy import URL as Snowflake_URL",
          "6: from sqlalchemy import Column, text",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import io",
          "5: import paramiko",
          "6: import sshtunnel  # type: ignore",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: from sqlalchemy.sql import Executable  # type: ignore",
          "17: from sqlalchemy.sql.elements import TextClause",
          "20: from fides.api.graph.traversal import TraversalNode",
          "21: from fides.api.models.connectionconfig import ConnectionConfig, ConnectionTestStatus",
          "22: from fides.api.models.policy import Policy",
          "",
          "[Removed Lines]",
          "19: from fides.api.common_exceptions import ConnectionException",
          "",
          "[Added Lines]",
          "22: from fides.api.common_exceptions import (",
          "23:     ConnectionException,",
          "24:     SSHTunnelConfigNotFoundException,",
          "25: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SQLQueryConfig,",
          "47: )",
          "48: from fides.api.util.collection_util import Row",
          "51: class SQLConnector(BaseConnector[Engine]):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: from fides.core.config import get_config",
          "57: CONFIG = get_config()",
          "59: sshtunnel.SSH_TIMEOUT = CONFIG.security.bastion_server_ssh_timeout",
          "60: sshtunnel.TUNNEL_TIMEOUT = CONFIG.security.bastion_server_ssh_tunnel_timeout",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:             raise NotImplementedError(",
          "62:                 \"SQL Connectors must define their secrets schema class\"",
          "63:             )",
          "65:     @staticmethod",
          "66:     def cursor_result_to_rows(results: CursorResult) -> List[Row]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         self.ssh_server: sshtunnel._ForwardServer = None",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:         if self.db_client:",
          "162:             logger.debug(\" disposing of {}\", self.__class__)",
          "163:             self.db_client.dispose()",
          "165:     def create_client(self) -> Engine:",
          "166:         \"\"\"Returns a SQLAlchemy Engine that can be used to interact with a database\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:         if self.ssh_server:",
          "178:             self.ssh_server.stop()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:         \"\"\"Optionally override to set the schema for a given database that",
          "177:         persists through the entire session\"\"\"",
          "180: class PostgreSQLConnector(SQLConnector):",
          "181:     \"\"\"Connector specific to postgresql\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     def create_ssh_tunnel(self, host: Optional[str], port: Optional[int]) -> None:",
          "195:         \"\"\"Creates an SSH Tunnel to forward ports as configured.\"\"\"",
          "196:         if not CONFIG.security.bastion_server_ssh_private_key:",
          "197:             raise SSHTunnelConfigNotFoundException(",
          "198:                 \"Fides is configured to use an SSH tunnel without config provided.\"",
          "199:             )",
          "201:         with io.BytesIO(",
          "202:             CONFIG.security.bastion_server_ssh_private_key.encode(\"utf8\")",
          "203:         ) as binary_file:",
          "204:             with io.TextIOWrapper(binary_file, encoding=\"utf8\") as file_obj:",
          "205:                 private_key = paramiko.RSAKey.from_private_key(file_obj=file_obj)",
          "207:         self.ssh_server = sshtunnel.SSHTunnelForwarder(",
          "208:             (CONFIG.security.bastion_server_host),",
          "209:             ssh_username=CONFIG.security.bastion_server_ssh_username,",
          "210:             ssh_pkey=private_key,",
          "211:             remote_bind_address=(",
          "212:                 host,",
          "213:                 port,",
          "214:             ),",
          "215:         )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:         dbname = f\"/{config.dbname}\" if config.dbname else \"\"",
          "198:         return f\"postgresql://{user_password}{netloc}{port}{dbname}\"",
          "200:     def set_schema(self, connection: Connection) -> None:",
          "201:         \"\"\"Sets the schema for a postgres database if applicable\"\"\"",
          "202:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     def build_ssh_uri(self, local_address: tuple) -> str:",
          "239:         \"\"\"Build URI of format postgresql://[user[:password]@][ssh_host][:ssh_port][/dbname]\"\"\"",
          "240:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "242:         user_password = \"\"",
          "243:         if config.username:",
          "244:             user = config.username",
          "245:             password = f\":{config.password}\" if config.password else \"\"",
          "246:             user_password = f\"{user}{password}@\"",
          "248:         local_host, local_port = local_address",
          "249:         netloc = local_host",
          "250:         port = f\":{local_port}\" if local_port else \"\"",
          "251:         dbname = f\"/{config.dbname}\" if config.dbname else \"\"",
          "252:         return f\"postgresql://{user_password}{netloc}{port}{dbname}\"",
          "254:     # Overrides SQLConnector.create_client",
          "255:     def create_client(self) -> Engine:",
          "256:         \"\"\"Returns a SQLAlchemy Engine that can be used to interact with a database\"\"\"",
          "257:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "258:         if config.ssh_required and CONFIG.security.bastion_server_ssh_private_key:",
          "259:             self.create_ssh_tunnel(host=config.host, port=config.port)",
          "260:             self.ssh_server.start()",
          "261:             uri = self.build_ssh_uri(local_address=self.ssh_server.local_bind_address)",
          "262:         else:",
          "263:             uri = config.url or self.build_uri()",
          "264:         return create_engine(",
          "265:             uri,",
          "266:             hide_parameters=self.hide_parameters,",
          "267:             echo=not self.hide_parameters,",
          "268:         )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "271:     secrets_schema = RedshiftSchema",
          "273:     # Overrides BaseConnector.build_uri",
          "274:     def build_uri(self) -> str:",
          "275:         \"\"\"Build URI of format redshift+psycopg2://user:password@[host][:port][/database]\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     def build_ssh_uri(self, local_address: tuple) -> str:",
          "344:         \"\"\"Build SSH URI of format redshift+psycopg2://[user[:password]@][ssh_host][:ssh_port][/dbname]\"\"\"",
          "345:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "347:         local_host, local_port = local_address",
          "349:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "351:         port = f\":{local_port}\" if local_port else \"\"",
          "352:         database = f\"/{config.database}\" if config.database else \"\"",
          "353:         url = f\"redshift+psycopg2://{config.user}:{config.password}@{local_host}{port}{database}\"",
          "354:         return url",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:         url = f\"redshift+psycopg2://{config.user}:{config.password}@{config.host}{port}{database}\"",
          "281:         return url",
          "283:     def set_schema(self, connection: Connection) -> None:",
          "284:         \"\"\"Sets the search_path for the duration of the session\"\"\"",
          "285:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:     # Overrides SQLConnector.create_client",
          "367:     def create_client(self) -> Engine:",
          "368:         \"\"\"Returns a SQLAlchemy Engine that can be used to interact with a database\"\"\"",
          "369:         config = self.secrets_schema(**self.configuration.secrets or {})",
          "370:         if config.ssh_required and CONFIG.security.bastion_server_ssh_private_key:",
          "371:             self.create_ssh_tunnel(host=config.host, port=config.port)",
          "372:             self.ssh_server.start()",
          "373:             uri = self.build_ssh_uri(local_address=self.ssh_server.local_bind_address)",
          "374:         else:",
          "375:             uri = config.url or self.build_uri()",
          "376:         return create_engine(",
          "377:             uri,",
          "378:             hide_parameters=self.hide_parameters,",
          "379:             echo=not self.hide_parameters,",
          "380:         )",
          "",
          "---------------"
        ],
        "src/fides/core/config/security_settings.py||src/fides/core/config/security_settings.py": [
          "File: src/fides/core/config/security_settings.py -> src/fides/core/config/security_settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         description=\"Either enables the collection of audit log resource data or bypasses the middleware\",",
          "128:     )",
          "130:     @validator(\"app_encryption_key\")",
          "131:     @classmethod",
          "132:     def validate_encryption_key_length(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     bastion_server_host: Optional[str] = Field(",
          "131:         default=None, description=\"An optional field to store the bastion server host\"",
          "132:     )",
          "133:     bastion_server_ssh_username: Optional[str] = Field(",
          "134:         default=None,",
          "135:         description=\"An optional field to store the username used to access the bastion server\",",
          "136:     )",
          "137:     bastion_server_ssh_private_key: Optional[str] = Field(",
          "138:         default=None,",
          "139:         description=\"An optional field to store the key used to SSH into the bastion server.\",",
          "140:     )",
          "141:     bastion_server_ssh_timeout: float = Field(",
          "142:         default=0.1,",
          "143:         description=\"The timeout in seconds for the transport socket (``socket.settimeout``)\",",
          "144:     )",
          "145:     bastion_server_ssh_tunnel_timeout: float = Field(",
          "146:         default=10,",
          "147:         description=\"The timeout in seconds for tunnel connection (open_channel timeout)\",",
          "148:     )",
          "",
          "---------------"
        ],
        "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py||tests/ops/api/v1/endpoints/test_connection_config_endpoints.py": [
          "File: tests/ops/api/v1/endpoints/test_connection_config_endpoints.py -> tests/ops/api/v1/endpoints/test_connection_config_endpoints.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1294:     ) -> None:",
          "1295:         \"\"\"Note: this test does not attempt to actually connect to the db, via use of verify query param.\"\"\"",
          "1296:         auth_header = generate_auth_header(scopes=[CONNECTION_CREATE_OR_UPDATE])",
          "1298:         resp = api_client.put(",
          "1299:             url + \"?verify=False\",",
          "1300:             headers=auth_header,",
          "",
          "[Removed Lines]",
          "1297:         payload = {\"host\": \"localhost\", \"port\": \"1234\", \"dbname\": \"my_test_db\"}",
          "",
          "[Added Lines]",
          "1297:         payload = {",
          "1298:             \"host\": \"localhost\",",
          "1299:             \"port\": \"1234\",",
          "1300:             \"dbname\": \"my_test_db\",",
          "1301:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1314:             \"password\": None,",
          "1315:             \"url\": None,",
          "1316:             \"db_schema\": None,",
          "1317:         }",
          "1319:         payload = {\"url\": \"postgresql://test_user:test_pass@localhost:1234/my_test_db\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1321:             \"ssh_required\": False,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1336:             \"password\": None,",
          "1337:             \"url\": payload[\"url\"],",
          "1338:             \"db_schema\": None,",
          "1339:         }",
          "1340:         assert connection_config.last_test_timestamp is None",
          "1341:         assert connection_config.last_test_succeeded is None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1344:             \"ssh_required\": False,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1428:             \"user\": \"awsuser\",",
          "1429:             \"password\": \"test_password\",",
          "1430:             \"db_schema\": \"test\",",
          "1431:         }",
          "1432:         resp = api_client.put(",
          "1433:             url + \"?verify=False\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1437:             \"ssh_required\": False,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1448:             \"password\": \"test_password\",",
          "1449:             \"db_schema\": \"test\",",
          "1450:             \"url\": None,",
          "1451:         }",
          "1452:         assert redshift_connection_config.last_test_timestamp is None",
          "1453:         assert redshift_connection_config.last_test_succeeded is None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458:             \"ssh_required\": False,",
          "",
          "---------------"
        ],
        "tests/ops/integration_tests/test_connection_configuration_integration.py||tests/ops/integration_tests/test_connection_configuration_integration.py": [
          "File: tests/ops/integration_tests/test_connection_configuration_integration.py -> tests/ops/integration_tests/test_connection_configuration_integration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:             \"password\": None,",
          "70:             \"url\": None,",
          "71:             \"db_schema\": None,",
          "72:         }",
          "73:         assert connection_config.last_test_timestamp is not None",
          "74:         assert connection_config.last_test_succeeded is False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             \"ssh_required\": False,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:             \"password\": \"postgres\",",
          "115:             \"url\": None,",
          "116:             \"db_schema\": None,",
          "117:         }",
          "118:         assert connection_config.last_test_timestamp is not None",
          "119:         assert connection_config.last_test_succeeded is True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:             \"ssh_required\": False,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:             \"password\": None,",
          "156:             \"url\": payload[\"url\"],",
          "157:             \"db_schema\": None,",
          "158:         }",
          "159:         assert connection_config.last_test_timestamp is not None",
          "160:         assert connection_config.last_test_succeeded is True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:             \"ssh_required\": False,",
          "",
          "---------------"
        ]
      }
    }
  ]
}