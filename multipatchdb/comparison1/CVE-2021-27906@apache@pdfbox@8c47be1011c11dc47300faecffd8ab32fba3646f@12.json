{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d3915392a268d537bba1b0417f6e7c8f4244ea04",
      "candidate_info": {
        "commit_hash": "d3915392a268d537bba1b0417f6e7c8f4244ea04",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d3915392a268d537bba1b0417f6e7c8f4244ea04",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"
        ],
        "message": "PDFBOX-5155: improve exception message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889353 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java -> fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:             }",
          "254:             else",
          "255:             {",
          "257:             }",
          "258:         }",
          "259:         return numbers;",
          "",
          "[Removed Lines]",
          "256:                throw new IOException(\"Expected INTEGER or REAL but got \" + token.getKind());",
          "",
          "[Added Lines]",
          "256:                 throw new IOException(\"Expected INTEGER or REAL but got \" + token +",
          "257:                         \" at array position \" + i);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d3298c28ed000f5f08dae778711f3aa990ee4ef",
      "candidate_info": {
        "commit_hash": "1d3298c28ed000f5f08dae778711f3aa990ee4ef",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1d3298c28ed000f5f08dae778711f3aa990ee4ef",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887708 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java||examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java||examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java -> examples/src/main/java/org/apache/pdfbox/examples/lucene/LucenePDFDocument.java"
        ]
      }
    },
    {
      "candidate_hash": "5c54ade87829db60e73edffde22042dcba1388e6",
      "candidate_info": {
        "commit_hash": "5c54ade87829db60e73edffde22042dcba1388e6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5c54ade87829db60e73edffde22042dcba1388e6",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java"
        ],
        "message": "PDFBOX-2941: don't abort if there's an exception when rendering a glyph; remove unneeded code\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889270 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java||debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java||debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java -> debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.debugger.fontencodingpane;",
          "23: import java.io.IOException;",
          "24: import java.util.LinkedHashMap;",
          "25: import java.util.Map;",
          "",
          "[Removed Lines]",
          "19: import org.apache.pdfbox.pdmodel.font.PDSimpleFont;",
          "20: import org.apache.pdfbox.pdmodel.font.PDVectorFont;",
          "22: import javax.swing.JPanel;",
          "",
          "[Added Lines]",
          "19: import java.awt.geom.GeneralPath;",
          "23: import javax.swing.JPanel;",
          "25: import org.apache.commons.logging.Log;",
          "26: import org.apache.commons.logging.LogFactory;",
          "27: import org.apache.pdfbox.pdmodel.font.PDSimpleFont;",
          "28: import org.apache.pdfbox.pdmodel.font.PDVectorFont;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: class SimpleFont extends FontPane",
          "32: {",
          "33:     public static final String NO_GLYPH = \"None\";",
          "34:     private final FontEncodingView view;",
          "35:     private int totalAvailableGlyph = 0;",
          "42:     SimpleFont(PDSimpleFont font) throws IOException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     private static final Log LOG = LogFactory.getLog(SimpleFont.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:                 String glyphName = font.getEncoding().getName(index);",
          "68:                 glyphs[index][1] = glyphName;",
          "69:                 glyphs[index][2] = font.toUnicode(index);",
          "71:                 {",
          "73:                     glyphs[index][3] = ((PDVectorFont) font).getPath(index);",
          "74:                 }",
          "76:                 {",
          "78:                 }",
          "79:                 totalAvailableGlyph++;",
          "80:             }",
          "",
          "[Removed Lines]",
          "70:                 if (font instanceof PDVectorFont)",
          "75:                 else",
          "77:                     glyphs[index][3] = font.getPath(glyphName);",
          "",
          "[Added Lines]",
          "75:                 try",
          "80:                 catch (IOException ex)",
          "82:                     LOG.error(\"Couldn't render code \" + index + \" ('\" + glyphName + \"') of font \" +",
          "83:                             font.getName(), ex);",
          "84:                     glyphs[index][3] = new GeneralPath();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f390c871c52d64191513573f324b578f7425d291",
      "candidate_info": {
        "commit_hash": "f390c871c52d64191513573f324b578f7425d291",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f390c871c52d64191513573f324b578f7425d291",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-5203: improve failure message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890353 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "862:             {",
          "863:                 continue; // not relevant here",
          "864:             }",
          "866:                     sigCertHolderSetFromVRIArray.contains(holder));",
          "867:         }",
          "",
          "[Removed Lines]",
          "865:             Assert.assertTrue(\"VRI/signaturehash/Cert array doesn't contain \" + holder.getSubject(),",
          "",
          "[Added Lines]",
          "865:             Assert.assertTrue(\"File '\" + outFile + \"' Root/DSS/VRI/\" + hexSignatureHash +",
          "866:                     \"/Cert array doesn't contain a certificate with subject '\" +",
          "867:                     holder.getSubject() + \"' and serial \" + holder.getSerialNumber(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "389efafde44bf43df09275b8f095fb52c43cc027",
      "candidate_info": {
        "commit_hash": "389efafde44bf43df09275b8f095fb52c43cc027",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/389efafde44bf43df09275b8f095fb52c43cc027",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java"
        ],
        "message": "PDFBOX-4892: use typed getter instead of generic one, simplify code\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882067 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/PDSeedValueCertificate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public PDSeedValueCertificate()",
          "73:     {",
          "77:     }",
          "",
          "[Removed Lines]",
          "74:         this.dictionary = new COSDictionary();",
          "75:         this.dictionary.setItem(COSName.TYPE, COSName.SV_CERT);",
          "76:         this.dictionary.setDirect(true);",
          "",
          "[Added Lines]",
          "74:         dictionary = new COSDictionary();",
          "75:         dictionary.setItem(COSName.TYPE, COSName.SV_CERT);",
          "76:         dictionary.setDirect(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     public PDSeedValueCertificate(COSDictionary dict)",
          "85:     {",
          "88:     }",
          "",
          "[Removed Lines]",
          "86:         this.dictionary = dict;",
          "87:         this.dictionary.setDirect(true);",
          "",
          "[Added Lines]",
          "86:         dictionary = dict;",
          "87:         dictionary.setDirect(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:     public boolean isSubjectRequired()",
          "106:     {",
          "108:     }",
          "",
          "[Removed Lines]",
          "107:         return this.getCOSObject().getFlag(COSName.FF, FLAG_SUBJECT);",
          "",
          "[Added Lines]",
          "107:         return dictionary.getFlag(COSName.FF, FLAG_SUBJECT);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     public void setSubjectRequired(boolean flag)",
          "116:     {",
          "118:     }",
          "",
          "[Removed Lines]",
          "117:         this.getCOSObject().setFlag(COSName.FF, FLAG_SUBJECT, flag);",
          "",
          "[Added Lines]",
          "117:         dictionary.setFlag(COSName.FF, FLAG_SUBJECT, flag);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:     public boolean isIssuerRequired()",
          "125:     {",
          "127:     }",
          "",
          "[Removed Lines]",
          "126:         return this.getCOSObject().getFlag(COSName.FF, FLAG_ISSUER);",
          "",
          "[Added Lines]",
          "126:         return dictionary.getFlag(COSName.FF, FLAG_ISSUER);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:     public void setIssuerRequired(boolean flag)",
          "135:     {",
          "137:     }",
          "",
          "[Removed Lines]",
          "136:         this.getCOSObject().setFlag(COSName.FF, FLAG_ISSUER, flag);",
          "",
          "[Added Lines]",
          "136:         dictionary.setFlag(COSName.FF, FLAG_ISSUER, flag);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:     public boolean isOIDRequired()",
          "144:     {",
          "146:     }",
          "",
          "[Removed Lines]",
          "145:         return this.getCOSObject().getFlag(COSName.FF, FLAG_OID);",
          "",
          "[Added Lines]",
          "145:         return dictionary.getFlag(COSName.FF, FLAG_OID);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "153:     public void setOIDRequired(boolean flag)",
          "154:     {",
          "156:     }",
          "",
          "[Removed Lines]",
          "155:         this.getCOSObject().setFlag(COSName.FF, FLAG_OID, flag);",
          "",
          "[Added Lines]",
          "155:         dictionary.setFlag(COSName.FF, FLAG_OID, flag);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "162:     public boolean isSubjectDNRequired()",
          "163:     {",
          "165:     }",
          "",
          "[Removed Lines]",
          "164:         return this.getCOSObject().getFlag(COSName.FF, FLAG_SUBJECT_DN);",
          "",
          "[Added Lines]",
          "164:         return dictionary.getFlag(COSName.FF, FLAG_SUBJECT_DN);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "172:     public void setSubjectDNRequired(boolean flag)",
          "173:     {",
          "175:     }",
          "",
          "[Removed Lines]",
          "174:         this.getCOSObject().setFlag(COSName.FF, FLAG_SUBJECT_DN, flag);",
          "",
          "[Added Lines]",
          "174:         dictionary.setFlag(COSName.FF, FLAG_SUBJECT_DN, flag);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "181:     public boolean isKeyUsageRequired()",
          "182:     {",
          "184:     }",
          "",
          "[Removed Lines]",
          "183:         return this.getCOSObject().getFlag(COSName.FF, FLAG_KEY_USAGE);",
          "",
          "[Added Lines]",
          "183:         return dictionary.getFlag(COSName.FF, FLAG_KEY_USAGE);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "191:     public void setKeyUsageRequired(boolean flag)",
          "192:     {",
          "194:     }",
          "",
          "[Removed Lines]",
          "193:         this.getCOSObject().setFlag(COSName.FF, FLAG_KEY_USAGE, flag);",
          "",
          "[Added Lines]",
          "193:         dictionary.setFlag(COSName.FF, FLAG_KEY_USAGE, flag);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "200:     public boolean isURLRequired()",
          "201:     {",
          "203:     }",
          "",
          "[Removed Lines]",
          "202:         return this.getCOSObject().getFlag(COSName.FF, FLAG_URL);",
          "",
          "[Added Lines]",
          "202:         return dictionary.getFlag(COSName.FF, FLAG_URL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "210:     public void setURLRequired(boolean flag)",
          "211:     {",
          "213:     }",
          "",
          "[Removed Lines]",
          "212:         this.getCOSObject().setFlag(COSName.FF, FLAG_URL, flag);",
          "",
          "[Added Lines]",
          "212:         dictionary.setFlag(COSName.FF, FLAG_URL, flag);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "220:     public List<byte[]> getSubject()",
          "221:     {",
          "229:     }",
          "",
          "[Removed Lines]",
          "222:         COSBase base = this.dictionary.getDictionaryObject(COSName.SUBJECT);",
          "223:         if (base instanceof COSArray)",
          "224:         {",
          "225:             COSArray array = (COSArray) base;",
          "226:             return getListOfByteArraysFromCOSArray(array);",
          "227:         }",
          "228:         return null;",
          "",
          "[Added Lines]",
          "222:         COSArray array = dictionary.getCOSArray(COSName.SUBJECT);",
          "223:         return array != null ? getListOfByteArraysFromCOSArray(array) : null;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "240:     public void setSubject(List<byte[]> subjects)",
          "241:     {",
          "248:     }",
          "",
          "[Removed Lines]",
          "242:         COSArray array = new COSArray();",
          "243:         for (byte[] subject : subjects)",
          "244:         {",
          "245:             array.add(new COSString(subject));",
          "246:         }",
          "247:         this.dictionary.setItem(COSName.SUBJECT, array);",
          "",
          "[Added Lines]",
          "237:         dictionary.setItem(COSName.SUBJECT, convertListOfByteArraysToCOSArray(subjects));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "256:     public void addSubject(byte[] subject)",
          "257:     {",
          "265:         {",
          "266:             array = new COSArray();",
          "267:         }",
          "271:     }",
          "",
          "[Removed Lines]",
          "258:         COSBase base = this.dictionary.getDictionaryObject(COSName.SUBJECT);",
          "259:         COSArray array;",
          "260:         if (base instanceof COSArray)",
          "261:         {",
          "262:             array = (COSArray) base;",
          "263:         }",
          "264:         else",
          "268:         COSString string = new COSString(subject);",
          "269:         array.add(string);",
          "270:         this.dictionary.setItem(COSName.SUBJECT, array);",
          "",
          "[Added Lines]",
          "248:         COSArray array = dictionary.getCOSArray(COSName.SUBJECT);",
          "249:         if (array == null)",
          "253:         array.add(new COSString(subject));",
          "254:         dictionary.setItem(COSName.SUBJECT, array);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "278:     public void removeSubject(byte[] subject)",
          "279:     {",
          "282:         {",
          "284:             array.remove(new COSString(subject));",
          "285:         }",
          "286:     }",
          "",
          "[Removed Lines]",
          "280:         COSBase base = this.dictionary.getDictionaryObject(COSName.SUBJECT);",
          "281:         if (base instanceof COSArray)",
          "283:             COSArray array = (COSArray) base;",
          "",
          "[Added Lines]",
          "264:         COSArray array = dictionary.getCOSArray(COSName.SUBJECT);",
          "265:         if (array != null)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "294:     public List<Map<String, String>> getSubjectDN()",
          "295:     {",
          "298:         {",
          "301:             List<Map<String, String>> result = new LinkedList<Map<String, String>>();",
          "303:             {",
          "304:                 if (subjectDNItem instanceof COSDictionary)",
          "305:                 {",
          "",
          "[Removed Lines]",
          "296:         COSBase base = this.dictionary.getDictionaryObject(COSName.SUBJECT_DN);",
          "297:         if (base instanceof COSArray)",
          "299:             COSArray cosArray = (COSArray) base;",
          "300:             List subjectDNList = cosArray.toList();",
          "302:             for (Object subjectDNItem : subjectDNList)",
          "",
          "[Added Lines]",
          "279:         COSArray cosArray = dictionary.getCOSArray(COSName.SUBJECT_DN);",
          "280:         if (cosArray != null)",
          "282:             List<? extends COSBase> subjectDNList = cosArray.toList();",
          "284:             for (COSBase subjectDNItem : subjectDNList)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "337:             }",
          "338:             subjectDNDict.add(dict);",
          "339:         }",
          "341:                 COSArrayList.converterToCOSArray(subjectDNDict));",
          "342:     }",
          "",
          "[Removed Lines]",
          "340:         this.dictionary.setItem(COSName.SUBJECT_DN,",
          "",
          "[Added Lines]",
          "322:         dictionary.setItem(COSName.SUBJECT_DN,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "362:     public List<String> getKeyUsage()",
          "363:     {",
          "366:         {",
          "368:             List<String> keyUsageExtensions = new LinkedList<String>();",
          "369:             for (COSBase item : array)",
          "370:             {",
          "",
          "[Removed Lines]",
          "364:         COSBase base = this.dictionary.getDictionaryObject(COSName.KEY_USAGE);",
          "365:         if (base instanceof COSArray)",
          "367:             COSArray array = (COSArray) base;",
          "",
          "[Added Lines]",
          "346:         COSArray array = dictionary.getCOSArray(COSName.KEY_USAGE);",
          "347:         if (array != null)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "401:     public void setKeyUsage(List<String> keyUsageExtensions)",
          "402:     {",
          "404:                 COSArrayList.converterToCOSArray(keyUsageExtensions));",
          "405:     }",
          "",
          "[Removed Lines]",
          "403:         this.dictionary.setItem(COSName.KEY_USAGE,",
          "",
          "[Added Lines]",
          "384:         dictionary.setItem(COSName.KEY_USAGE,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "420:                 throw new IllegalArgumentException(\"characters can only be 0, 1, X\");",
          "421:             }",
          "422:         }",
          "430:         {",
          "431:             array = new COSArray();",
          "432:         }",
          "436:     }",
          "",
          "[Removed Lines]",
          "423:         COSBase base = this.dictionary.getDictionaryObject(COSName.KEY_USAGE);",
          "424:         COSArray array;",
          "425:         if (base instanceof COSArray)",
          "426:         {",
          "427:             array = (COSArray) base;",
          "428:         }",
          "429:         else",
          "433:         COSString string = new COSString(keyUsageExtension);",
          "434:         array.add(string);",
          "435:         this.dictionary.setItem(COSName.KEY_USAGE, array);",
          "",
          "[Added Lines]",
          "404:         COSArray array = dictionary.getCOSArray(COSName.KEY_USAGE);",
          "405:         if (array == null)",
          "409:         array.add(new COSString(keyUsageExtension));",
          "410:         dictionary.setItem(COSName.KEY_USAGE, array);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "465:     public void removeKeyUsage(String keyUsageExtension)",
          "466:     {",
          "469:         {",
          "471:             array.remove(new COSString(keyUsageExtension));",
          "472:         }",
          "473:     }",
          "",
          "[Removed Lines]",
          "467:         COSBase base = this.dictionary.getDictionaryObject(COSName.KEY_USAGE);",
          "468:         if (base instanceof COSArray)",
          "470:             COSArray array = (COSArray) base;",
          "",
          "[Added Lines]",
          "442:         COSArray array = dictionary.getCOSArray(COSName.KEY_USAGE);",
          "443:         if (array != null)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "480:     public List<byte[]> getIssuer()",
          "481:     {",
          "489:     }",
          "",
          "[Removed Lines]",
          "482:         COSBase base = this.dictionary.getDictionaryObject(COSName.ISSUER);",
          "483:         if (base instanceof COSArray)",
          "484:         {",
          "485:             COSArray array = (COSArray) base;",
          "486:             return getListOfByteArraysFromCOSArray(array);",
          "487:         }",
          "488:         return null;",
          "",
          "[Added Lines]",
          "456:         COSArray array = dictionary.getCOSArray(COSName.ISSUER);",
          "457:         return array != null ? getListOfByteArraysFromCOSArray(array) : null;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "498:     public void setIssuer(List<byte[]> issuers)",
          "499:     {",
          "506:     }",
          "",
          "[Removed Lines]",
          "500:         COSArray array = new COSArray();",
          "501:         for (byte[] issuer : issuers)",
          "502:         {",
          "503:             array.add(new COSString(issuer));",
          "504:         }",
          "505:         this.dictionary.setItem(COSName.ISSUER, array);",
          "",
          "[Added Lines]",
          "469:         dictionary.setItem(COSName.ISSUER, convertListOfByteArraysToCOSArray(issuers));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "515:     public void addIssuer(byte[] issuer)",
          "516:     {",
          "524:         {",
          "525:             array = new COSArray();",
          "526:         }",
          "530:     }",
          "",
          "[Removed Lines]",
          "517:         COSBase base = this.dictionary.getDictionaryObject(COSName.ISSUER);",
          "518:         COSArray array;",
          "519:         if (base instanceof COSArray)",
          "520:         {",
          "521:             array = (COSArray) base;",
          "522:         }",
          "523:         else",
          "527:         COSString string = new COSString(issuer);",
          "528:         array.add(string);",
          "529:         this.dictionary.setItem(COSName.ISSUER, array);",
          "",
          "[Added Lines]",
          "481:         COSArray array = dictionary.getCOSArray(COSName.ISSUER);",
          "482:         if (array == null)",
          "486:         array.add(new COSString(issuer));",
          "487:         dictionary.setItem(COSName.ISSUER, array);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "537:     public void removeIssuer(byte[] issuer)",
          "538:     {",
          "541:         {",
          "543:             array.remove(new COSString(issuer));",
          "544:         }",
          "545:     }",
          "",
          "[Removed Lines]",
          "539:         COSBase base = this.dictionary.getDictionaryObject(COSName.ISSUER);",
          "540:         if (base instanceof COSArray)",
          "542:             COSArray array = (COSArray) base;",
          "",
          "[Added Lines]",
          "497:         COSArray array = dictionary.getCOSArray(COSName.ISSUER);",
          "498:         if (array != null)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "553:     public List<byte[]> getOID()",
          "554:     {",
          "562:     }",
          "",
          "[Removed Lines]",
          "555:         COSBase base = this.dictionary.getDictionaryObject(COSName.OID);",
          "556:         if (base instanceof COSArray)",
          "557:         {",
          "558:             COSArray array = (COSArray) base;",
          "559:             return getListOfByteArraysFromCOSArray(array);",
          "560:         }",
          "561:         return null;",
          "",
          "[Added Lines]",
          "512:         COSArray array = dictionary.getCOSArray(COSName.OID);",
          "513:         return array != null ? getListOfByteArraysFromCOSArray(array) : null;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "571:     public void setOID(List<byte[]> oidByteStrings)",
          "572:     {",
          "579:     }",
          "",
          "[Removed Lines]",
          "573:         COSArray array = new COSArray();",
          "574:         for (byte[] oid : oidByteStrings)",
          "575:         {",
          "576:             array.add(new COSString(oid));",
          "577:         }",
          "578:         this.dictionary.setItem(COSName.OID, array);",
          "",
          "[Added Lines]",
          "525:         dictionary.setItem(COSName.OID, convertListOfByteArraysToCOSArray(oidByteStrings));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "586:     public void addOID(byte[] oid)",
          "587:     {",
          "595:         {",
          "596:             array = new COSArray();",
          "597:         }",
          "601:     }",
          "",
          "[Removed Lines]",
          "588:         COSBase base = this.dictionary.getDictionaryObject(COSName.OID);",
          "589:         COSArray array;",
          "590:         if (base instanceof COSArray)",
          "591:         {",
          "592:             array = (COSArray) base;",
          "593:         }",
          "594:         else",
          "598:         COSString string = new COSString(oid);",
          "599:         array.add(string);",
          "600:         this.dictionary.setItem(COSName.OID, array);",
          "",
          "[Added Lines]",
          "535:         COSArray array = dictionary.getCOSArray(COSName.OID);",
          "536:         if (array == null)",
          "540:         array.add(new COSString(oid));",
          "541:         dictionary.setItem(COSName.OID, array);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "608:     public void removeOID(byte[] oid)",
          "609:     {",
          "612:         {",
          "614:             array.remove(new COSString(oid));",
          "615:         }",
          "616:     }",
          "",
          "[Removed Lines]",
          "610:         COSBase base = this.dictionary.getDictionaryObject(COSName.OID);",
          "611:         if (base instanceof COSArray)",
          "613:             COSArray array = (COSArray) base;",
          "",
          "[Added Lines]",
          "551:         COSArray array = dictionary.getCOSArray(COSName.OID);",
          "552:         if (array != null)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "623:     public String getURL()",
          "624:     {",
          "626:     }",
          "",
          "[Removed Lines]",
          "625:         return this.dictionary.getString(COSName.URL);",
          "",
          "[Added Lines]",
          "565:         return dictionary.getString(COSName.URL);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "633:     public void setURL(String url)",
          "634:     {",
          "636:     }",
          "",
          "[Removed Lines]",
          "635:         this.dictionary.setString(COSName.URL, url);",
          "",
          "[Added Lines]",
          "575:         dictionary.setString(COSName.URL, url);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "653:     public String getURLType()",
          "654:     {",
          "656:     }",
          "",
          "[Removed Lines]",
          "655:         return this.dictionary.getNameAsString(COSName.URL_TYPE);",
          "",
          "[Added Lines]",
          "595:         return dictionary.getNameAsString(COSName.URL_TYPE);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "678:     public void setURLType(String urlType)",
          "679:     {",
          "681:     }",
          "683:     private static List<byte[]> getListOfByteArraysFromCOSArray(COSArray array)",
          "",
          "[Removed Lines]",
          "680:         this.dictionary.setName(COSName.URL_TYPE, urlType);",
          "",
          "[Added Lines]",
          "620:         dictionary.setName(COSName.URL_TYPE, urlType);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "693:         return result;",
          "694:     }",
          "696: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:     private static COSArray convertListOfByteArraysToCOSArray(List<byte[]> strings)",
          "637:     {",
          "638:         COSArray array = new COSArray();",
          "639:         for (byte[] string : strings)",
          "640:         {",
          "641:             array.add(new COSString(string));",
          "642:         }",
          "643:         return array;",
          "644:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}