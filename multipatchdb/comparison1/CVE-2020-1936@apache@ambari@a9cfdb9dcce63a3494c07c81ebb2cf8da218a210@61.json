{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98b1948f6390a3afce6eee0a6fc047c27f474fa2",
      "candidate_info": {
        "commit_hash": "98b1948f6390a3afce6eee0a6fc047c27f474fa2",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/98b1948f6390a3afce6eee0a6fc047c27f474fa2",
        "files": [
          ".gitignore",
          "MANIFEST.in",
          "pom.xml",
          "setup.py"
        ],
        "message": "AMBARI-24558. Add setup.py for ambari python packages (for using with pip) (#2195)\n\n* AMBARI-24558. Add setup.py for ambari-commons (for pip)\n\n* AMBARI-24558 Add /usr/bin/env python\n\n* AMBARI-24558. Find subpackages + rename module + move setup.py to root\n\n* AMBARI-24558. Add descriptions + .gitignore\n\n* AMBARI-24558. Add descriptions + .gitignore\n\n* AMBARI-24558. Extends default version to __version__ in order to replace that during builds.\n\n* AMBARI-24558. Fix last commit\n\n* AMBARI-24558. Add rat check excludes",
        "before_after_code_files": [
          "MANIFEST.in||MANIFEST.in",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "MANIFEST.in||MANIFEST.in": [
          "File: MANIFEST.in -> MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #   Licensed under the Apache License, Version 2.0 (the \"License\");",
          "2: #   you may not use this file except in compliance with the License.",
          "3: #   You may obtain a copy of the License at",
          "4: #",
          "5: #       http://www.apache.org/licenses/LICENSE-2.0",
          "6: #",
          "7: #   Unless required by applicable law or agreed to in writing, software",
          "8: #   distributed under the License is distributed on an \"AS IS\" BASIS,",
          "9: #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "10: #   See the License for the specific language governing permissions and",
          "11: #   limitations under the License.",
          "12: include ambari-common/src/main/python/ambari_commons/resources/*",
          "13: include ambari-common/src/main/python/ambari_commons/libs/**/*.so",
          "14: include ambari-common/src/main/python/pluggable_stack_definition/configs/*",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: '''",
          "3: Licensed to the Apache Software Foundation (ASF) under one",
          "4: or more contributor license agreements.  See the NOTICE file",
          "5: distributed with this work for additional information",
          "6: regarding copyright ownership.  The ASF licenses this file",
          "7: to you under the Apache License, Version 2.0 (the",
          "8: \"License\"); you may not use this file except in compliance",
          "9: with the License.  You may obtain a copy of the License at",
          "11:     http://www.apache.org/licenses/LICENSE-2.0",
          "13: Unless required by applicable law or agreed to in writing, software",
          "14: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "15: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "16: See the License for the specific language governing permissions and",
          "17: limitations under the License.",
          "18: '''",
          "20: import os",
          "21: from os.path import dirname",
          "22: from setuptools import find_packages, setup",
          "24: AMBARI_COMMON_PYTHON_FOLDER = \"ambari-common/src/main/python\"",
          "25: AMBARI_SERVER_TEST_PYTHON_FOLDER = \"ambari-server/src/test/python\"",
          "27: def get_ambari_common_packages():",
          "28:   return find_packages(AMBARI_COMMON_PYTHON_FOLDER, exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"])",
          "30: def get_ambari_server_stack_package():",
          "31:   return [\"stacks.utils\"]",
          "33: def create_package_dir_map():",
          "34:   package_dirs = {}",
          "35:   ambari_common_packages = get_ambari_common_packages()",
          "36:   for ambari_common_package in ambari_common_packages:",
          "37:     package_dirs[ambari_common_package] = AMBARI_COMMON_PYTHON_FOLDER + '/' + ambari_common_package.replace(\".\", \"/\")",
          "39:   ambari_server_packages = get_ambari_server_stack_package()",
          "40:   for ambari_server_package in ambari_server_packages:",
          "41:     package_dirs[ambari_server_package] = AMBARI_SERVER_TEST_PYTHON_FOLDER + '/' + ambari_server_package.replace(\".\", \"/\")",
          "42:   return package_dirs",
          "43: __version__ = \"3.0.0.dev0\"",
          "44: def get_version():",
          "45:   ambari_version = os.environ[\"AMBARI_VERSION\"] if \"AMBARI_VERSION\" in os.environ else __version__",
          "46:   print ambari_version",
          "47:   return ambari_version",
          "49: \"\"\"",
          "50: Example usage:",
          "51: - build package with specific version:",
          "52:   python setup.py sdist -d \"my/dist/location\"",
          "53: - build and install package with specific version:",
          "54:   python setup.py sdist -d \"my/dist/location\" install",
          "55: - build and upload package with specific version:",
          "56:   python setup.py sdist -d \"my/dist/location\" upload -r \"http://localhost:8080\"",
          "58: Installing from pip:",
          "59: - pip install --extra-index-url=http://localhost:8080 ambari-python==2.7.1  // 3.0.0.dev0 is the snapshot version",
          "61: Note: using 'export AMBARI_VERSION=2.7.1' before commands you can redefine the package version, but you will need this export during the pip install as well",
          "62: \"\"\"",
          "63: setup(",
          "64:   name = \"ambari-python\",",
          "65:   version = get_version(),",
          "66:   author = \"Apache Software Foundation\",",
          "67:   author_email = \"dev@ambari.apache.org\",",
          "68:   description = (\"Framework for provison/manage/monitor Hadoop clusters\"),",
          "69:   license = \"AP2\",",
          "70:   keywords = \"hadoop, ambari\",",
          "71:   url = \"https://ambari.apache.org\",",
          "72:   packages = get_ambari_common_packages() + get_ambari_server_stack_package(),",
          "73:   package_dir = create_package_dir_map(),",
          "74:   include_package_data = True,",
          "75:   long_description=\"The Apache Ambari project is aimed at making Hadoop management simpler by developing software for provisioning, managing, and monitoring Apache Hadoop clusters. \"",
          "76:                    \"Ambari provides an intuitive, easy-to-use Hadoop management web UI backed by its RESTful APIs.\"",
          "77: )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e4608e501120e612e6a6cf935d73bd6c97c1629",
      "candidate_info": {
        "commit_hash": "7e4608e501120e612e6a6cf935d73bd6c97c1629",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7e4608e501120e612e6a6cf935d73bd6c97c1629",
        "files": [
          "ambari-agent/conf/unix/install-helper.sh",
          "ambari-agent/pom.xml",
          "ambari-agent/src/main/package/deb/control/postrm",
          "ambari-agent/src/main/package/deb/control/preinst",
          "ambari-agent/src/main/package/deb/control/prerm",
          "ambari-agent/src/main/package/rpm/postremove.sh",
          "ambari-agent/src/main/package/rpm/posttrans_agent.sh",
          "ambari-agent/src/main/package/rpm/preinstall.sh",
          "ambari-agent/src/main/package/rpm/preremove.sh",
          "ambari-server/conf/unix/install-helper.sh",
          "ambari-server/pom.xml",
          "ambari-server/src/main/package/deb/control/postrm",
          "ambari-server/src/main/package/deb/control/preinst",
          "ambari-server/src/main/package/deb/control/prerm",
          "ambari-server/src/main/package/rpm/postinstall.sh",
          "ambari-server/src/main/package/rpm/postremove.sh",
          "ambari-server/src/main/package/rpm/preinstall.sh",
          "ambari-server/src/main/package/rpm/preremove.sh"
        ],
        "message": "[AMBARI-24465] Warnings during ambari-agent, ambari-server upgrade (dgrinenko) (#2046)",
        "before_after_code_files": [
          "ambari-agent/conf/unix/install-helper.sh||ambari-agent/conf/unix/install-helper.sh",
          "ambari-agent/src/main/package/rpm/postremove.sh||ambari-agent/src/main/package/rpm/postremove.sh",
          "ambari-agent/src/main/package/rpm/posttrans_agent.sh||ambari-agent/src/main/package/rpm/posttrans_agent.sh",
          "ambari-agent/src/main/package/rpm/preinstall.sh||ambari-agent/src/main/package/rpm/preinstall.sh",
          "ambari-agent/src/main/package/rpm/preremove.sh||ambari-agent/src/main/package/rpm/preremove.sh",
          "ambari-server/conf/unix/install-helper.sh||ambari-server/conf/unix/install-helper.sh",
          "ambari-server/src/main/package/rpm/postinstall.sh||ambari-server/src/main/package/rpm/postinstall.sh",
          "ambari-server/src/main/package/rpm/postremove.sh||ambari-server/src/main/package/rpm/postremove.sh",
          "ambari-server/src/main/package/rpm/preinstall.sh||ambari-server/src/main/package/rpm/preinstall.sh",
          "ambari-server/src/main/package/rpm/preremove.sh||ambari-server/src/main/package/rpm/preremove.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/conf/unix/install-helper.sh||ambari-agent/conf/unix/install-helper.sh": [
          "File: ambari-agent/conf/unix/install-helper.sh -> ambari-agent/conf/unix/install-helper.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #                      AGENT INSTALL HELPER                      #",
          "19: ##################################################################",
          "28: PYTHON_WRAPER_TARGET=\"/usr/bin/ambari-python-wrap\"",
          "34: OLD_COMMON_DIR=\"/usr/lib/python2.6/site-packages/ambari_commons\"",
          "35: OLD_RESOURCE_MANAGEMENT_DIR=\"/usr/lib/python2.6/site-packages/resource_management\"",
          "",
          "[Removed Lines]",
          "21: INSTALL_HELPER_SERVER=\"/var/lib/ambari-server/install-helper.sh\"",
          "22: COMMON_DIR=\"/usr/lib/ambari-agent/lib/ambari_commons\"",
          "23: RESOURCE_MANAGEMENT_DIR=\"/usr/lib/ambari-agent/lib/resource_management\"",
          "24: JINJA_DIR=\"/usr/lib/ambari-agent/lib/ambari_jinja2\"",
          "25: SIMPLEJSON_DIR=\"/usr/lib/ambari-agent/lib/ambari_simplejson\"",
          "26: OLD_OLD_COMMON_DIR=\"/usr/lib/ambari-agent/lib/common_functions\"",
          "27: AMBARI_AGENT=\"/usr/lib/ambari-agent/lib/ambari_agent\"",
          "29: AMBARI_AGENT_VAR=\"/var/lib/ambari-agent\"",
          "30: AMBARI_AGENT_BINARY=\"/etc/init.d/ambari-agent\"",
          "31: AMBARI_AGENT_BINARY_SYMLINK=\"/usr/sbin/ambari-agent\"",
          "",
          "[Added Lines]",
          "21: # WARNING. Please keep the script POSIX compliant and don't use bash extensions",
          "23: AMBARI_UNIT=\"ambari-agent\"",
          "24: ACTION=$1",
          "25: AMBARI_AGENT_ROOT_DIR=\"/usr/lib/${AMBARI_UNIT}\"",
          "26: AMBARI_SERVER_ROOT_DIR=\"/usr/lib/ambari-server\"",
          "27: COMMON_DIR=\"${AMBARI_AGENT_ROOT_DIR}/lib/ambari_commons\"",
          "28: RESOURCE_MANAGEMENT_DIR=\"${AMBARI_AGENT_ROOT_DIR}/lib/resource_management\"",
          "29: JINJA_DIR=\"${AMBARI_AGENT_ROOT_DIR}/lib/ambari_jinja2\"",
          "30: SIMPLEJSON_DIR=\"${AMBARI_AGENT_ROOT_DIR}/lib/ambari_simplejson\"",
          "31: OLD_OLD_COMMON_DIR=\"${AMBARI_AGENT_ROOT_DIR}/lib/common_functions\"",
          "32: AMBARI_AGENT=\"${AMBARI_AGENT_ROOT_DIR}/lib/ambari_agent\"",
          "34: AMBARI_AGENT_VAR=\"/var/lib/${AMBARI_UNIT}\"",
          "35: AMBARI_AGENT_BINARY=\"/etc/init.d/${AMBARI_UNIT}\"",
          "36: AMBARI_AGENT_BINARY_SYMLINK=\"/usr/sbin/${AMBARI_UNIT}\"",
          "37: AMBARI_ENV_RPMSAVE=\"/var/lib/${AMBARI_UNIT}/ambari-env.sh.rpmsave\"",
          "38: AMBARI_HELPER=\"/var/lib/ambari-agent/install-helper.sh.orig\"",
          "40: LOG_FILE=/dev/null",
          "42: CLEANUP_MODULES=\"resource_management;ambari_commons;ambari_agent;ambari_ws4py;ambari_stomp;ambari_jinja2;ambari_simplejson\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: OLD_SIMPLEJSON_DIR=\"/usr/lib/python2.6/site-packages/ambari_simplejson\"",
          "38: OLD_AMBARI_AGENT_DIR=\"/usr/lib/python2.6/site-packages/ambari_agent\"",
          "40: clean_pyc_files(){",
          "41:   # cleaning old *.pyc files",
          "46: }",
          "49: do_install(){",
          "50:   if [ -d \"/etc/ambari-agent/conf.save\" ]; then",
          "",
          "[Removed Lines]",
          "42:   find ${RESOURCE_MANAGEMENT_DIR:?} -name *.pyc -exec rm {} \\;",
          "43:   find ${COMMON_DIR:?} -name *.pyc -exec rm {} \\;",
          "44:   find ${AMBARI_AGENT:?} -name *.pyc -exec rm {} \\;",
          "45:   find ${AMBARI_AGENT_VAR:?} -name *.pyc -exec rm {} \\;",
          "",
          "[Added Lines]",
          "51: resolve_log_file(){",
          "52:  local log_dir=/var/log/${AMBARI_UNIT}",
          "53:  local log_file=\"${log_dir}/${AMBARI_UNIT}-pkgmgr.log\"",
          "55:  if [ ! -d \"${log_dir}\" ]; then",
          "56:    mkdir \"${log_dir}\" 1>/dev/null 2>&1",
          "57:  fi",
          "59:  if [ -d \"${log_dir}\" ]; then",
          "60:    touch ${log_file} 1>/dev/null 2>&1",
          "61:    if [ -f \"${log_file}\" ]; then",
          "62:     LOG_FILE=\"${log_file}\"",
          "63:    fi",
          "64:  fi",
          "66:  echo \"--> Install-helper custom action log started at $(date '+%d/%m/%y %H:%M') for '${ACTION}'\" 1>>${LOG_FILE} 2>&1",
          "67: }",
          "71:   local lib_dir=\"${AMBARI_AGENT_ROOT_DIR}/lib\"",
          "73:   echo ${CLEANUP_MODULES} | tr ';' '\\n' | while read item; do",
          "74:     local item=\"${lib_dir}/${item}\"",
          "75:     echo \"Cleaning pyc files from ${item}...\"",
          "76:     if [ -d \"${item}\" ]; then",
          "77:       find ${item:?} -name *.pyc -exec rm {} \\; 1>>${LOG_FILE} 2>&1",
          "78:     else",
          "79:       echo \"Skipping ${item} pyc cleaning, as package not existing\"",
          "80:     fi",
          "81:   done",
          "84: remove_ambari_unit_dir(){",
          "85:   # removing empty dirs, which left after cleaning pyc files",
          "87:   find \"${AMBARI_AGENT_ROOT_DIR}\" -type d | tac | while read item; do",
          "88:     echo \"Removing empty dir ${item}...\"",
          "89:     rmdir --ignore-fail-on-non-empty ${item} 1>/dev/null 2>&1",
          "90:   done",
          "92:   rm -rf ${AMBARI_HELPER}",
          "93:   find \"${AMBARI_AGENT_VAR}\" -type d | tac | while read item; do",
          "94:     echo \"Removing empty dir ${item}...\"",
          "95:     rmdir --ignore-fail-on-non-empty ${item} 1>/dev/null 2>&1",
          "96:   done",
          "97: }",
          "99: remove_autostart(){",
          "100:   which chkconfig",
          "101:   if [ \"$?\" -eq 0 ] ; then",
          "102:     chkconfig --list | grep ambari-server && chkconfig --del ambari-agent",
          "103:   fi",
          "104:   which update-rc.d",
          "105:   if [ \"$?\" -eq 0 ] ; then",
          "106:     update-rc.d -f ambari-agent remove",
          "107:   fi",
          "108: }",
          "110: install_autostart(){",
          "111:   which chkconfig 1>>${LOG_FILE} 2>&1",
          "112:   if [ \"$?\" -eq 0 ] ; then",
          "113:     chkconfig --add ambari-agent",
          "114:   fi",
          "115:   which update-rc.d 1>>${LOG_FILE} 2>&1",
          "116:   if [ \"$?\" -eq 0 ] ; then",
          "117:     update-rc.d ambari-agent defaults",
          "118:   fi",
          "119: }",
          "121: locate_python(){",
          "122:   local python_binaries=\"/usr/bin/python;/usr/bin/python2;/usr/bin/python2.7\"",
          "124:   echo ${python_binaries}| tr ';' '\\n' | while read python_binary; do",
          "125:     ${python_binary} -c \"import sys ; ver = sys.version_info ; sys.exit(not (ver >= (2,7) and ver<(3,0)))\" 1>>${LOG_FILE} 2>/dev/null",
          "127:     if [ $? -eq 0 ]; then",
          "128:       echo \"${python_binary}\"",
          "129:       break",
          "130:     fi",
          "131:   done",
          "132: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   fi",
          "55:   # these symlinks (or directories) where created in ambari releases prior to ambari-2.6.2. Do clean up.",
          "58:   # setting up /usr/sbin/ambari-agent symlink",
          "62:   # on nano Ubuntu, when umask=027 those folders are created without 'x' bit for 'others'.",
          "63:   # which causes failures when hadoop users try to access tmp_dir",
          "83:   # remove old python wrapper",
          "105:   else",
          "111:       fi",
          "113:     fi",
          "114:   fi",
          "119:     if [ $? -ne 0 ] ; then",
          "121:     fi",
          "122:   fi",
          "123: }",
          "132:   if [ -d \"/etc/ambari-agent/conf.save\" ]; then",
          "133:     mv /etc/ambari-agent/conf.save /etc/ambari-agent/conf_$(date '+%d_%m_%y_%H_%M').save",
          "134:   fi",
          "160:   fi",
          "170: }",
          "172: do_upgrade(){",
          "173:   do_install",
          "174: }",
          "187: esac",
          "",
          "[Removed Lines]",
          "56:   rm -rf \"$OLD_COMMON_DIR\" \"$OLD_RESOURCE_MANAGEMENT_DIR\" \"$OLD_JINJA_DIR\" \"$OLD_SIMPLEJSON_DIR\" \"$OLD_OLD_COMMON_DIR\" \"$OLD_AMBARI_AGENT_DIR\"",
          "59:   rm -f \"$AMBARI_AGENT_BINARY_SYMLINK\"",
          "60:   ln -s \"$AMBARI_AGENT_BINARY\" \"$AMBARI_AGENT_BINARY_SYMLINK\"",
          "64:   chmod a+x $AMBARI_AGENT_VAR",
          "66:   chmod 1777 $AMBARI_AGENT_VAR/tmp",
          "67:   chmod 700 $AMBARI_AGENT_VAR/keys",
          "68:   chmod 700 $AMBARI_AGENT_VAR/data",
          "70:   #TODO we need this when upgrading from pre 2.4 versions to 2.4, remove this when upgrade from pre 2.4 versions will be",
          "71:   #TODO unsupported",
          "72:   clean_pyc_files",
          "74:   which chkconfig > /dev/null 2>&1",
          "75:   if [ \"$?\" -eq 0 ] ; then",
          "76:     chkconfig --add ambari-agent",
          "77:   fi",
          "78:   which update-rc.d > /dev/null 2>&1",
          "79:   if [ \"$?\" -eq 0 ] ; then",
          "80:     update-rc.d ambari-agent defaults",
          "81:   fi",
          "84:   rm -f \"$PYTHON_WRAPER_TARGET\"",
          "86:   AMBARI_PYTHON=\"\"",
          "87:   python_binaries=( \"/usr/bin/python\" \"/usr/bin/python2\" \"/usr/bin/python2.7\" \"/usr/bin/python2.6\" )",
          "88:   for python_binary in \"${python_binaries[@]}\"",
          "89:   do",
          "90:     $python_binary -c \"import sys ; ver = sys.version_info ; sys.exit(not (ver >= (2,6) and ver<(3,0)))\" 1>/dev/null 2>/dev/null",
          "92:     if [ $? -eq 0 ] ; then",
          "93:       AMBARI_PYTHON=\"$python_binary\"",
          "94:       break;",
          "95:     fi",
          "96:   done",
          "98:   BAK=/etc/ambari-agent/conf/ambari-agent.ini.old",
          "99:   ORIG=/etc/ambari-agent/conf/ambari-agent.ini",
          "100:   UPGRADE_AGENT_CONFIGS_SCRIPT=/var/lib/ambari-agent/upgrade_agent_configs.py",
          "102:   if [ -z \"$AMBARI_PYTHON\" ] ; then",
          "103:     >&2 echo \"Cannot detect python for Ambari to use. Please manually set $PYTHON_WRAPER_TARGET link to point to correct python binary\"",
          "104:     >&2 echo \"Cannot upgrade agent configs because python for Ambari is not configured. The old config file is saved as $BAK . Execution of $UPGRADE_AGENT_CONFIGS_SCRIPT was skipped.\"",
          "106:     ln -s \"$AMBARI_PYTHON\" \"$PYTHON_WRAPER_TARGET\"",
          "108:     if [ -f $BAK ]; then",
          "109:       if [ -f \"$UPGRADE_AGENT_CONFIGS_SCRIPT\" ]; then",
          "110:         $UPGRADE_AGENT_CONFIGS_SCRIPT",
          "112:       mv $BAK ${BAK}_$(date '+%d_%m_%y_%H_%M').save",
          "116:   if [ -f \"$AMBARI_ENV_RPMSAVE\" ] ; then",
          "117:     PYTHON_PATH_LINE='export PYTHONPATH=/usr/lib/ambari-agent/lib:$PYTHONPATH'",
          "118:     grep \"^$PYTHON_PATH_LINE\\$\" \"$AMBARI_ENV_RPMSAVE\" > /dev/null",
          "120:       echo -e \"\\n$PYTHON_PATH_LINE\" >> $AMBARI_ENV_RPMSAVE",
          "125: do_remove(){",
          "126:   /usr/sbin/ambari-agent stop > /dev/null 2>&1",
          "128:   clean_pyc_files",
          "130:   rm -f \"$AMBARI_AGENT_BINARY_SYMLINK\"",
          "135:   mv /etc/ambari-agent/conf /etc/ambari-agent/conf.save",
          "137:   if [ -f \"$PYTHON_WRAPER_TARGET\" ]; then",
          "138:     rm -f \"$PYTHON_WRAPER_TARGET\"",
          "139:   fi",
          "141:   if [ -d \"$COMMON_DIR\" ]; then",
          "142:     rm -rf $COMMON_DIR",
          "143:   fi",
          "145:   if [ -d \"$RESOURCE_MANAGEMENT_DIR\" ]; then",
          "146:     rm -rf $RESOURCE_MANAGEMENT_DIR",
          "147:   fi",
          "149:   if [ -d \"$JINJA_DIR\" ]; then",
          "150:     rm -rf $JINJA_DIR",
          "151:   fi",
          "153:   if [ -d \"$SIMPLEJSON_DIR\" ]; then",
          "154:     rm -rf $SIMPLEJSON_DIR",
          "155:   fi",
          "157:   # if server package exists, restore their settings",
          "158:   if [ -f \"$INSTALL_HELPER_SERVER\" ]; then  #  call server shared files installer",
          "159:     $INSTALL_HELPER_SERVER install",
          "162:   which chkconfig > /dev/null 2>&1",
          "163:   if [ \"$?\" -eq 0 ] ; then",
          "164:     chkconfig --list | grep ambari-server && chkconfig --del ambari-agent",
          "165:   fi",
          "166:   which update-rc.d > /dev/null 2>&1",
          "167:   if [ \"$?\" -eq 0 ] ; then",
          "168:     update-rc.d -f ambari-agent remove",
          "169:   fi",
          "177: case \"$1\" in",
          "178: install)",
          "179:   do_install",
          "180:   ;;",
          "181: remove)",
          "182:   do_remove",
          "183:   ;;",
          "184: upgrade)",
          "185:   do_upgrade",
          "186: ;;",
          "",
          "[Added Lines]",
          "141:   rm -rf \"${OLD_COMMON_DIR}\" \"${OLD_RESOURCE_MANAGEMENT_DIR}\" \"${OLD_JINJA_DIR}\" \"${OLD_SIMPLEJSON_DIR}\" \"${OLD_OLD_COMMON_DIR}\" \"${OLD_AMBARI_AGENT_DIR}\"",
          "144:   rm -f \"${AMBARI_AGENT_BINARY_SYMLINK}\"",
          "145:   ln -s \"${AMBARI_AGENT_BINARY}\" \"${AMBARI_AGENT_BINARY_SYMLINK}\"",
          "149:   chmod a+x ${AMBARI_AGENT_VAR}",
          "151:   chmod 1777 ${AMBARI_AGENT_VAR}/tmp",
          "152:   chmod 700 ${AMBARI_AGENT_VAR}/keys",
          "153:   chmod 700 ${AMBARI_AGENT_VAR}/data",
          "155:   install_autostart 1>>${LOG_FILE} 2>&1",
          "158:   rm -f \"${PYTHON_WRAPER_TARGET}\"",
          "160:   local ambari_python=$(locate_python)",
          "161:   local bak=/etc/ambari-agent/conf/ambari-agent.ini.old",
          "162:   local orig=/etc/ambari-agent/conf/ambari-agent.ini",
          "163:   local upgrade_agent_configs_script=/var/lib/ambari-agent/upgrade_agent_configs.py",
          "165:   if [ -z \"${ambari_python}\" ] ; then",
          "166:     >&2 echo \"Cannot detect python for Ambari to use. Please manually set ${PYTHON_WRAPER_TARGET} link to point to correct python binary\"",
          "167:     >&2 echo \"Cannot upgrade agent configs because python for Ambari is not configured. The old config file is saved as ${bak} . Execution of ${upgrade_agent_configs_script} was skipped.\"",
          "169:     ln -s \"${ambari_python}\" \"${PYTHON_WRAPER_TARGET}\"",
          "171:     if [ -f ${bak} ]; then",
          "172:       if [ -f \"${upgrade_agent_configs_script}\" ]; then",
          "173:         ${upgrade_agent_configs_script}",
          "175:       mv ${bak} ${bak}_$(date '+%d_%m_%y_%H_%M').save",
          "179:   if [ -f \"${AMBARI_ENV_RPMSAVE}\" ] ; then",
          "180:     PYTHON_PATH_LINE=\"export PYTHONPATH=${AMBARI_AGENT_ROOT_DIR}/lib:\\$\\{PYTHONPATH\\}\"",
          "181:     grep \"^${PYTHON_PATH_LINE}\\$\" \"${AMBARI_ENV_RPMSAVE}\" >>${LOG_FILE}",
          "183:       echo -e \"\\n${PYTHON_PATH_LINE}\" 1>>${AMBARI_ENV_RPMSAVE}",
          "188: copy_helper(){",
          "189:   cp -f /var/lib/ambari-agent/install-helper.sh ${AMBARI_HELPER} 1>/dev/null 2>&1",
          "190: }",
          "192: do_remove(){",
          "193:   /usr/sbin/ambari-agent stop 1>>${LOG_FILE} 2>&1",
          "195:   rm -f \"${AMBARI_AGENT_BINARY_SYMLINK}\" 1>>${LOG_FILE} 2>&1",
          "200:   # first step / label: config_backup",
          "201:   cp -rf /etc/ambari-agent/conf /etc/ambari-agent/conf.save",
          "203:   remove_autostart 1>>${LOG_FILE} 2>&1",
          "204:   copy_helper 1>>${LOG_FILE} 2>&1",
          "205: }",
          "207: do_cleanup(){",
          "208:   # do_cleanup is a function, which called after do_remove stage and is supposed to be save place to",
          "209:   # remove obsolete files generated by application activity",
          "211:   clean_pyc_files 1>>${LOG_FILE} 2>&1",
          "213:   # second step / label: config_backup",
          "214:   rm -rf /etc/ambari-agent/conf",
          "216:   if [ ! -d \"${AMBARI_SERVER_ROOT_DIR}\" ]; then",
          "217:     echo \"Removing ${PYTHON_WRAPER_TARGET} ...\" 1>>${LOG_FILE} 2>&1",
          "218:     rm -f ${PYTHON_WRAPER_TARGET} 1>>${LOG_FILE} 2>&1",
          "221:   remove_ambari_unit_dir 1>>${LOG_FILE} 2>&1",
          "228: do_backup(){",
          "229:   # ToDo: find a way to move backup logic here from preinstall.sh and preinst scripts",
          "230:   # ToDo: general problem is that still no files are installed on step, when backup is supposed to be done",
          "231:   echo \"\"",
          "232: }",
          "234: resolve_log_file",
          "236: case \"${ACTION}\" in",
          "237:   install)",
          "238:     do_install",
          "239:     ;;",
          "240:   remove)",
          "241:     do_remove",
          "242:     ;;",
          "243:   upgrade)",
          "244:     do_upgrade",
          "245:     ;;",
          "246:   cleanup)",
          "247:     do_cleanup",
          "248:     ;;",
          "250:     echo \"Wrong command given\"",
          "251:     ;;",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/package/rpm/postremove.sh||ambari-agent/src/main/package/rpm/postremove.sh": [
          "File: ambari-agent/src/main/package/rpm/postremove.sh -> ambari-agent/src/main/package/rpm/postremove.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one or more",
          "2: # contributor license agreements.  See the NOTICE file distributed with",
          "3: # this work for additional information regarding copyright ownership.",
          "4: # The ASF licenses this file to You under the Apache License, Version 2.0",
          "5: # (the \"License\"); you may not use this file except in compliance with",
          "6: # the License.  You may obtain a copy of the License at",
          "7: #",
          "8: #     http://www.apache.org/licenses/LICENSE-2.0",
          "9: #",
          "10: # Unless required by applicable law or agreed to in writing, software",
          "11: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License",
          "17: if [ \"$1\" -eq 0 ]; then  # Action is uninstall",
          "18:     if [ -f \"/var/lib/ambari-agent/install-helper.sh.orig\" ]; then",
          "19:       /var/lib/ambari-agent/install-helper.sh.orig cleanup",
          "20:       rm -f /var/lib/ambari-agent/install-helper.sh.orig 1>/dev/null 2>&1",
          "21:     fi",
          "22: fi",
          "24: exit 0",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/package/rpm/posttrans_agent.sh||ambari-agent/src/main/package/rpm/posttrans_agent.sh": [
          "File: ambari-agent/src/main/package/rpm/posttrans_agent.sh -> ambari-agent/src/main/package/rpm/posttrans_agent.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: AMBARI_AGENT_BINARY_SYMLINK=\"/usr/sbin/ambari-agent\"",
          "20: # setting ambari-agent binary symlink",
          "23: fi",
          "25: exit 0",
          "",
          "[Removed Lines]",
          "21: if [ ! -f \"$AMBARI_AGENT_BINARY_SYMLINK\" ]; then",
          "22:   ln -s \"$AMBARI_AGENT_BINARY\" \"$AMBARI_AGENT_BINARY_SYMLINK\"",
          "",
          "[Added Lines]",
          "21: if [ ! -f \"${AMBARI_AGENT_BINARY_SYMLINK}\" ]; then",
          "22:   ln -s \"${AMBARI_AGENT_BINARY}\" \"${AMBARI_AGENT_BINARY_SYMLINK}\"",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/package/rpm/preinstall.sh||ambari-agent/src/main/package/rpm/preinstall.sh": [
          "File: ambari-agent/src/main/package/rpm/preinstall.sh -> ambari-agent/src/main/package/rpm/preinstall.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License",
          "46: exit 0",
          "",
          "[Removed Lines]",
          "16: STACKS_FOLDER=\"/var/lib/ambari-agent/cache/stacks\"",
          "17: STACKS_FOLDER_OLD=/var/lib/ambari-agent/cache/stacks_$(date '+%d_%m_%y_%H_%M').old",
          "19: COMMON_SERVICES_FOLDER=\"/var/lib/ambari-agent/cache/common-services\"",
          "20: COMMON_SERVICES_FOLDER_OLD=/var/lib/ambari-agent/cache/common-services_$(date '+%d_%m_%y_%H_%M').old",
          "22: if [ -d \"/etc/ambari-agent/conf.save\" ]",
          "23: then",
          "24:     mv /etc/ambari-agent/conf.save /etc/ambari-agent/conf_$(date '+%d_%m_%y_%H_%M').save",
          "25: fi",
          "27: BAK=/etc/ambari-agent/conf/ambari-agent.ini.old",
          "28: ORIG=/etc/ambari-agent/conf/ambari-agent.ini",
          "30: BAK_SUDOERS=/etc/sudoers.d/ambari-agent.bak",
          "31: ORIG_SUDOERS=/etc/sudoers.d/ambari-agent",
          "33: [ -f $ORIG ] && mv -f $ORIG $BAK",
          "34: [ -f $ORIG_SUDOERS ] && echo \"Moving $ORIG_SUDOERS to $BAK_SUDOERS. Please restore the file if you were using it for ambari-agent non-root functionality\" && mv -f $ORIG_SUDOERS $BAK_SUDOERS",
          "36: if [ -d \"$STACKS_FOLDER\" ]",
          "37: then",
          "38:     mv -f \"$STACKS_FOLDER\" \"$STACKS_FOLDER_OLD\"",
          "39: fi",
          "41: if [ -d \"$COMMON_SERVICES_FOLDER\" ]",
          "42: then",
          "43:     mv -f \"$COMMON_SERVICES_FOLDER\" \"$COMMON_SERVICES_FOLDER_OLD\"",
          "44: fi",
          "",
          "[Added Lines]",
          "17: do_backups(){",
          "18:   local etc_dir=\"/etc/ambari-agent\"",
          "19:   local var_dir=\"/var/lib/ambari-agent\"",
          "20:   local sudoers_dir=\"/etc/sudoers.d\"",
          "22:   # format: title note source target",
          "23:   local backup_folders=\"stack folders::${var_dir}/cache/stacks:${var_dir}/cache/stacks_$(date '+%d_%m_%y_%H_%M').old",
          "24: common services folder::${var_dir}/cache/common-services:${var_dir}/cache/common-services_$(date '+%d_%m_%y_%H_%M').old",
          "25: ambari-agent.ini::${etc_dir}/conf/ambari-agent.ini:${etc_dir}/conf/ambari-agent.ini.old",
          "26: sudoers:Please restore the file if you were using it for ambari-agent non-root functionality:${sudoers_dir}/ambari-agent:${sudoers_dir}/ambari-agent.bak\"",
          "28:   echo \"${backup_folders}\" | while IFS=: read title notes source target; do",
          "29:     if [ -d \"${source}\" ] || [ -f \"${source}\" ]; then",
          "30:       echo -n \"Moving ${title}: ${source} -> ${target}\"",
          "32:       if [ ! -z ${notes} ]; then",
          "33:         echo \", ${notes}\"",
          "34:       else",
          "35:         echo \"\"",
          "36:       fi",
          "38:       mv -f \"${source}\" \"${target}\"",
          "39:     fi",
          "40:   done",
          "41: }",
          "43: do_backups",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/package/rpm/preremove.sh||ambari-agent/src/main/package/rpm/preremove.sh": [
          "File: ambari-agent/src/main/package/rpm/preremove.sh -> ambari-agent/src/main/package/rpm/preremove.sh"
        ],
        "ambari-server/conf/unix/install-helper.sh||ambari-server/conf/unix/install-helper.sh": [
          "File: ambari-server/conf/unix/install-helper.sh -> ambari-server/conf/unix/install-helper.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License.",
          "17: #                      SERVER INSTALL HELPER                     #",
          "18: ##################################################################",
          "19: ROOT_DIR_PATH=\"${RPM_INSTALL_PREFIX}\"",
          "20: ROOT=`echo \"${RPM_INSTALL_PREFIX}\" | sed 's|/$||g'` # Customized folder, which ambari-server files are installed into ('/' or '' are default).",
          "48: PYTHON_WRAPER_TARGET=\"${PYTHON_WRAPER_DIR}/ambari-python-wrap\"",
          "50: AMBARI_SERVER_EXECUTABLE_LINK=\"${ROOT}/usr/sbin/ambari-server\"",
          "51: AMBARI_SERVER_EXECUTABLE=\"${ROOT}/etc/init.d/ambari-server\"",
          "",
          "[Removed Lines]",
          "16: #########################################postinstall.sh#########################",
          "22: OLD_COMMON_DIR=\"${ROOT}/usr/lib/python2.6/site-packages/ambari_commons\"",
          "23: OLD_RESOURCE_MANAGEMENT_DIR=\"${ROOT}/usr/lib/python2.6/site-packages/resource_management\"",
          "24: OLD_JINJA_DIR=\"${ROOT}/usr/lib/python2.6/site-packages/ambari_jinja2\"",
          "25: OLD_SIMPLEJSON_DIR=\"${ROOT}/usr/lib/python2.6/site-packages/ambari_simplejson\"",
          "26: OLD_AMBARI_SERVER_DIR=\"${ROOT}/usr/lib/python2.6/site-packages/ambari_server\"",
          "28: COMMON_DIR=\"${ROOT}/usr/lib/ambari-server/lib/ambari_commons\"",
          "29: RESOURCE_MANAGEMENT_DIR=\"${ROOT}/usr/lib/ambari-server/lib/resource_management\"",
          "30: JINJA_DIR=\"${ROOT}/usr/lib/ambari-server/lib/ambari_jinja2\"",
          "31: SIMPLEJSON_DIR=\"${ROOT}/usr/lib/ambari-server/lib/ambari_simplejson\"",
          "32: AMBARI_SERVER=\"${ROOT}/usr/lib/ambari-server/lib/ambari_server\"",
          "35: INSTALL_HELPER_AGENT=\"/var/lib/ambari-agent/install-helper.sh\"",
          "36: CA_CONFIG=\"${ROOT}/var/lib/ambari-server/keys/ca.config\"",
          "37: COMMON_DIR_SERVER=\"${ROOT}/usr/lib/ambari-server/lib/ambari_commons\"",
          "38: RESOURCE_MANAGEMENT_DIR_SERVER=\"${ROOT}/usr/lib/ambari-server/lib/resource_management\"",
          "39: JINJA_SERVER_DIR=\"${ROOT}/usr/lib/ambari-server/lib/ambari_jinja2\"",
          "40: SIMPLEJSON_SERVER_DIR=\"${ROOT}/usr/lib/ambari-server/lib/ambari_simplejson\"",
          "41: AMBARI_PROPERTIES=\"${ROOT}/etc/ambari-server/conf/ambari.properties\"",
          "42: AMBARI_ENV_RPMSAVE=\"${ROOT}/var/lib/ambari-server/ambari-env.sh.rpmsave\" # this turns into ambari-env.sh during ambari-server start",
          "43: AMBARI_SERVER_KEYS_FOLDER=\"${ROOT}/var/lib/ambari-server/keys\"",
          "44: AMBARI_SERVER_KEYS_DB_FOLDER=\"${ROOT}/var/lib/ambari-server/keys/db\"",
          "45: AMBARI_SERVER_NEWCERTS_FOLDER=\"${ROOT}/var/lib/ambari-server/keys/db/newcerts\"",
          "47: PYTHON_WRAPER_DIR=\"${ROOT}/usr/bin/\"",
          "",
          "[Added Lines]",
          "16: ##################################################################",
          "20: # WARNING. Please keep the script POSIX compliant and don't use bash extensions",
          "24: AMBARI_UNIT=\"ambari-server\"",
          "25: ACTION=$1",
          "28: OLD_PYLIB_PATH=\"${ROOT}/usr/lib/python2.6/site-packages\"",
          "29: OLD_PY_MODULES=\"ambari_commons;resource_management;ambari_jinja2;ambari_simplejson;ambari_server\"",
          "31: AMBARI_SERVER_ROOT_DIR=\"${ROOT}/usr/lib/${AMBARI_UNIT}\"",
          "32: AMBARI_AGENT_ROOT_DIR==\"${ROOT}/usr/lib/ambari-agent\"",
          "33: AMBARI_SERVER=\"${AMBARI_SERVER_ROOT_DIR}/lib/ambari_server\"",
          "35: CA_CONFIG=\"${ROOT}/var/lib/${AMBARI_UNIT}/keys/ca.config\"",
          "36: COMMON_DIR_SERVER=\"${ROOT}/usr/lib/${AMBARI_UNIT}/lib/ambari_commons\"",
          "37: RESOURCE_MANAGEMENT_DIR_SERVER=\"${ROOT}/usr/lib/${AMBARI_UNIT}/lib/resource_management\"",
          "38: JINJA_SERVER_DIR=\"${ROOT}/usr/lib/${AMBARI_UNIT}/lib/ambari_jinja2\"",
          "39: SIMPLEJSON_SERVER_DIR=\"${ROOT}/usr/lib/${AMBARI_UNIT}/lib/ambari_simplejson\"",
          "40: AMBARI_PROPERTIES=\"${ROOT}/etc/${AMBARI_UNIT}/conf/ambari.properties\"",
          "41: AMBARI_ENV_RPMSAVE=\"${ROOT}/var/lib/${AMBARI_UNIT}/ambari-env.sh.rpmsave\" # this turns into ambari-env.sh during ambari-server start",
          "42: AMBARI_SERVER_KEYS_FOLDER=\"${ROOT}/var/lib/${AMBARI_UNIT}/keys\"",
          "43: AMBARI_SERVER_KEYS_DB_FOLDER=\"${ROOT}/var/lib/${AMBARI_UNIT}/keys/db\"",
          "44: AMBARI_SERVER_NEWCERTS_FOLDER=\"${ROOT}/var/lib/${AMBARI_UNIT}/keys/db/newcerts\"",
          "45: CLEANUP_MODULES=\"resource_management;ambari_commons;ambari_server;ambari_ws4py;ambari_stomp;ambari_jinja2;ambari_simplejson\"",
          "46: AMBARI_SERVER_VAR=\"${ROOT}/var/lib/${AMBARI_UNIT}\"",
          "47: AMBARI_HELPER=\"${ROOT}/var/lib/ambari-server/install-helper.sh.orig\"",
          "49: PYTHON_WRAPER_DIR=\"${ROOT}/usr/bin\"",
          "52: LOG_FILE=/dev/null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: AMBARI_CONFIGS_DIR_SAVE_BACKUP=\"${ROOT}/etc/ambari-server/conf_$(date '+%d_%m_%y_%H_%M').save\"",
          "56: AMBARI_LOG4J=\"${AMBARI_CONFIGS_DIR}/log4j.properties\"",
          "88:     fi",
          "89:   done",
          "103:   which chkconfig > /dev/null 2>&1",
          "104:   if [ \"$?\" -eq 0 ] ; then",
          "106:   fi",
          "107:   which update-rc.d > /dev/null 2>&1",
          "108:   if [ \"$?\" -eq 0 ] ; then",
          "110:   fi",
          "112:   # if installed to customized root folder, skip ambari-server service actions,",
          "113:   # as no file in /etc/init.d/ambari-server is present",
          "119:   else",
          "121:   fi",
          "133:           fi",
          "134:       fi",
          "135:   fi",
          "142:     fi",
          "143:   fi",
          "144: }",
          "160:   fi",
          "180:   fi",
          "195: }",
          "197: do_upgrade(){",
          "",
          "[Removed Lines]",
          "58: clean_pyc_files(){",
          "59:   # cleaning old *.pyc files",
          "60:   find ${RESOURCE_MANAGEMENT_DIR:?} -name *.pyc -exec rm {} \\;",
          "61:   find ${COMMON_DIR:?} -name *.pyc -exec rm {} \\;",
          "62:   find ${AMBARI_SERVER:?} -name *.pyc -exec rm {} \\;",
          "63: }",
          "66: do_install(){",
          "67:   rm -f \"$AMBARI_SERVER_EXECUTABLE_LINK\"",
          "68:   ln -s \"$AMBARI_SERVER_EXECUTABLE\" \"$AMBARI_SERVER_EXECUTABLE_LINK\"",
          "70: rm -rf \"$OLD_COMMON_DIR\" \"$OLD_RESOURCE_MANAGEMENT_DIR\" \"$OLD_JINJA_DIR\" \"$OLD_SIMPLEJSON_DIR\" \"$OLD_COMMON_DIR\" \"$OLD_AMBARI_SERVER_DIR\"",
          "72:   #TODO we need this when upgrading from pre 2.4 versions to 2.4, remove this when upgrade from pre 2.4 versions will be",
          "73:   #TODO unsupported",
          "74:   clean_pyc_files",
          "76:   # remove old python wrapper",
          "77:   rm -f \"$PYTHON_WRAPER_TARGET\"",
          "79:   AMBARI_PYTHON=\"\"",
          "80:   python_binaries=( \"/usr/bin/python\" \"/usr/bin/python2\" \"/usr/bin/python2.7\" \"/usr/bin/python2.6\" )",
          "81:   for python_binary in \"${python_binaries[@]}\"",
          "82:   do",
          "83:     $python_binary -c \"import sys ; ver = sys.version_info ; sys.exit(not (ver >= (2,6) and ver<(3,0)))\" 1>/dev/null 2>/dev/null",
          "85:     if [ $? -eq 0 ] ; then",
          "86:       AMBARI_PYTHON=\"$python_binary\"",
          "87:       break;",
          "91:   if [ -z \"$AMBARI_PYTHON\" ] ; then",
          "92:     >&2 echo \"Cannot detect python for ambari to use. Please manually set $PYTHON_WRAPER link to point to correct python binary\"",
          "93:   else",
          "94:  mkdir -p \"$PYTHON_WRAPER_DIR\"",
          "95:     ln -s \"$AMBARI_PYTHON\" \"$PYTHON_WRAPER_TARGET\"",
          "96:   fi",
          "98:   sed -i \"s|ambari.root.dir\\s*=\\s*/|ambari.root.dir=${ROOT_DIR_PATH}|g\" \"$AMBARI_LOG4J\"",
          "99:   sed -i \"s|root_dir\\s*=\\s*/|root_dir = ${ROOT_DIR_PATH}|g\" \"$CA_CONFIG\"",
          "100:   sed -i \"s|^ROOT=\\\"/\\\"$|ROOT=\\\"${ROOT_DIR_PATH}\\\"|g\" \"$AMBARI_SERVER_EXECUTABLE\"",
          "102:   AUTOSTART_SERVER_CMD=\"\"",
          "105:     AUTOSTART_SERVER_CMD=\"chkconfig --add ambari-server\"",
          "109:     AUTOSTART_SERVER_CMD=\"update-rc.d ambari-server defaults\"",
          "114:   if [ ! \"${ROOT}/\" -ef \"/\" ] ; then",
          "115:  echo \"Not adding ambari-server service to startup, as installed to customized root.\"",
          "116:  echo \"If you need this functionality run the commands below, which create ambari-server service and configure it to run at startup: \"",
          "117:  echo \"sudo ln -s ${AMBARI_SERVER_EXECUTABLE} /etc/init.d/ambari-server\"",
          "118:  echo \"sudo $AUTOSTART_SERVER_CMD\"",
          "120:  $AUTOSTART_SERVER_CMD",
          "123:   if [ -d \"$AMBARI_SERVER_KEYS_FOLDER\" ]",
          "124:   then",
          "125:       chmod 700 \"$AMBARI_SERVER_KEYS_FOLDER\"",
          "126:       if [ -d \"$AMBARI_SERVER_KEYS_DB_FOLDER\" ]",
          "127:       then",
          "128:           chmod 700 \"$AMBARI_SERVER_KEYS_DB_FOLDER\"",
          "129:           if [ -d \"$AMBARI_SERVER_NEWCERTS_FOLDER\" ]",
          "130:           then",
          "131:               chmod 700 \"$AMBARI_SERVER_NEWCERTS_FOLDER\"",
          "137:   if [ -f \"$AMBARI_ENV_RPMSAVE\" ] ; then",
          "138:     PYTHON_PATH_LINE='export PYTHONPATH=/usr/lib/ambari-server/lib:$PYTHONPATH'",
          "139:     grep \"^$PYTHON_PATH_LINE\\$\" \"$AMBARI_ENV_RPMSAVE\" > /dev/null",
          "140:     if [ $? -ne 0 ] ; then",
          "141:       echo -e \"\\n$PYTHON_PATH_LINE\" >> $AMBARI_ENV_RPMSAVE",
          "146: do_remove(){",
          "147:   $AMBARI_SERVER_EXECUTABLE stop > /dev/null 2>&1",
          "149:   clean_pyc_files",
          "151:   if [ -d \"$AMBARI_CONFIGS_DIR_SAVE\" ]; then",
          "152:     mv \"$AMBARI_CONFIGS_DIR_SAVE\" \"$AMBARI_CONFIGS_DIR_SAVE_BACKUP\"",
          "153:   fi",
          "154:   # Remove link created during install",
          "155:   rm -f \"$AMBARI_SERVER_EXECUTABLE_LINK\"",
          "156:   mv \"$AMBARI_CONFIGS_DIR\" \"$AMBARI_CONFIGS_DIR_SAVE\"",
          "158:   if [ -f \"$PYTHON_WRAPER_TARGET\" ]; then",
          "159:     rm -f \"$PYTHON_WRAPER_TARGET\"",
          "162:   if [ -d \"$COMMON_DIR\" ]; then",
          "163:     rm -f $COMMON_DIR",
          "164:   fi",
          "166:   if [ -d \"$RESOURCE_MANAGEMENT_DIR\" ]; then",
          "167:     rm -f $RESOURCE_MANAGEMENT_DIR",
          "168:   fi",
          "170:   if [ -d \"$JINJA_DIR\" ]; then",
          "171:     rm -f $JINJA_DIR",
          "172:   fi",
          "174:   if [ -d \"$SIMPLEJSON_DIR\" ]; then",
          "175:     rm -f $SIMPLEJSON_DIR",
          "176:   fi",
          "178:   if [ -d \"$AMBARI_SERVER\" ]; then",
          "179:     rm -rf \"$AMBARI_SERVER\"",
          "182:   # if server package exists, restore their settings",
          "183:   if [ -f \"$INSTALL_HELPER_AGENT\" ]; then  #  call agent shared files installer",
          "184:     $INSTALL_HELPER_AGENT install",
          "185:   fi",
          "187:   which chkconfig > /dev/null 2>&1",
          "188:   if [ \"$?\" -eq 0 ] ; then",
          "189:     chkconfig --list | grep ambari-server && chkconfig --del ambari-server",
          "190:   fi",
          "191:   which update-rc.d > /dev/null 2>&1",
          "192:   if [ \"$?\" -eq 0 ] ; then",
          "193:     update-rc.d -f ambari-server remove",
          "194:   fi",
          "",
          "[Added Lines]",
          "63: resolve_log_file(){",
          "64:  local log_dir=/var/log/${AMBARI_UNIT}",
          "65:  local log_file=\"${log_dir}/${AMBARI_UNIT}-pkgmgr.log\"",
          "67:  if [ ! -d \"${log_dir}\" ]; then",
          "68:    mkdir \"${log_dir}\" 1>/dev/null 2>&1",
          "69:  fi",
          "71:  if [ -d \"${log_dir}\" ]; then",
          "72:    touch ${log_file} 1>/dev/null 2>&1",
          "73:    if [ -f \"${log_file}\" ]; then",
          "74:     LOG_FILE=\"${log_file}\"",
          "75:    fi",
          "76:  fi",
          "78:  echo \"--> Install-helper custom action log started at $(date '+%d/%m/%y %H:%M') for '${ACTION}'\" 1>>${LOG_FILE} 2>&1",
          "79: }",
          "81: clean_pyc_files(){",
          "82:   # cleaning old *.pyc files",
          "83:   local lib_dir=\"${AMBARI_SERVER_ROOT_DIR}/lib\"",
          "85:   echo ${CLEANUP_MODULES} | tr ';' '\\n' | while read item; do",
          "86:     local item=\"${lib_dir}/${item}\"",
          "87:     echo \"Cleaning pyc files from ${item}...\"",
          "88:     if [ -d \"${item}\" ]; then",
          "89:       find ${item:?} -name *.pyc -exec rm {} \\; 1>>${LOG_FILE} 2>&1",
          "90:     else",
          "91:       echo \"Skipping ${item} pyc cleaning, as package not existing\"",
          "94: }",
          "96: remove_ambari_unit_dir(){",
          "97:   # removing empty dirs, which left after cleaning pyc files",
          "99:   find \"${AMBARI_SERVER_ROOT_DIR}\" -type d | tac | while read item; do",
          "100:     echo \"Removing empty dir ${item}...\"",
          "101:     rmdir --ignore-fail-on-non-empty ${item} 1>/dev/null 2>&1",
          "102:   done",
          "104:   rm -rf ${AMBARI_HELPER}",
          "105:   find \"${AMBARI_SERVER_VAR}\" -type d | tac | while read item; do",
          "106:     echo \"Removing empty dir ${item}...\"",
          "107:     rmdir --ignore-fail-on-non-empty ${item} 1>/dev/null 2>&1",
          "108:   done",
          "109: }",
          "111: remove_autostart(){",
          "112:    which chkconfig > /dev/null 2>&1",
          "113:   if [ \"$?\" -eq 0 ] ; then",
          "114:     chkconfig --list | grep ambari-server && chkconfig --del ambari-server",
          "115:   fi",
          "116:   which update-rc.d > /dev/null 2>&1",
          "117:   if [ \"$?\" -eq 0 ] ; then",
          "118:     update-rc.d -f ambari-server remove",
          "119:   fi",
          "120: }",
          "122: install_autostart(){",
          "123:   local autostart_server_cmd=\"\"",
          "126:     autostart_server_cmd=\"chkconfig --add ambari-server\"",
          "130:     autostart_server_cmd=\"update-rc.d ambari-server defaults\"",
          "135:   if [ ! \"${ROOT}/\" -ef \"/\" ]; then",
          "136:     echo \"Not adding ambari-server service to startup, as installed to customized root.\"",
          "137:     echo \"If you need this functionality run the commands below, which create ambari-server service and configure it to run at startup: \"",
          "138:     echo \"sudo ln -s ${AMBARI_SERVER_EXECUTABLE} /etc/init.d/ambari-server\"",
          "139:     echo \"sudo ${autostart_server_cmd}\"",
          "141:     ${autostart_server_cmd}",
          "143: }",
          "145: locate_python(){",
          "146:   local python_binaries=\"/usr/bin/python;/usr/bin/python2;/usr/bin/python2.7\"",
          "148:   echo ${python_binaries}| tr ';' '\\n' | while read python_binary; do",
          "149:     ${python_binary} -c \"import sys ; ver = sys.version_info ; sys.exit(not (ver >= (2,7) and ver<(3,0)))\" 1>>${LOG_FILE} 2>/dev/null",
          "151:     if [ $? -eq 0 ]; then",
          "152:       echo \"${python_binary}\"",
          "153:       break",
          "154:     fi",
          "155:   done",
          "156: }",
          "158: do_install(){",
          "160:   rm -f \"${AMBARI_SERVER_EXECUTABLE_LINK}\"",
          "161:   ln -s \"${AMBARI_SERVER_EXECUTABLE}\" \"${AMBARI_SERVER_EXECUTABLE_LINK}\"",
          "163:   echo ${OLD_PY_MODULES} | tr ';' '\\n' | while read item; do",
          "164:    local old_path=\"${OLD_PYLIB_PATH}/${item}\"",
          "165:    if [ -d \"${old_path}\" ]; then",
          "166:      echo \"Removing old python module ${old_path}...\"  1>>${LOG_FILE} 2>&1",
          "167:      rm -rf ${old_path} 1>/dev/null 2>&1",
          "168:    fi",
          "169:   done",
          "171:   # remove old python wrapper",
          "172:   rm -f \"${PYTHON_WRAPER_TARGET}\"",
          "174:   local ambari_python=$(locate_python)",
          "176:   if [ -z \"${ambari_python}\" ]; then",
          "177:     >&2 echo \"Cannot detect Python for Ambari to use. Please manually set ${PYTHON_WRAPER_TARGET} link to point to correct Python binary\"",
          "178:   else",
          "179:     mkdir -p \"${PYTHON_WRAPER_DIR}\"",
          "180:     ln -s \"${ambari_python}\" \"${PYTHON_WRAPER_TARGET}\"",
          "181:   fi",
          "183:   sed -i \"s|ambari.root.dir\\s*=\\s*/|ambari.root.dir=${ROOT_DIR_PATH}|g\" \"${AMBARI_LOG4J}\"",
          "184:   sed -i \"s|root_dir\\s*=\\s*/|root_dir = ${ROOT_DIR_PATH}|g\" \"${CA_CONFIG}\"",
          "185:   sed -i \"s|^ROOT=\\\"/\\\"$|ROOT=\\\"${ROOT_DIR_PATH}\\\"|g\" \"${AMBARI_SERVER_EXECUTABLE}\"",
          "187:   install_autostart |tee -a ${LOG_FILE}",
          "189:   if [ -d \"${AMBARI_SERVER_KEYS_FOLDER}\" ]; then",
          "190:       chmod 700 \"${AMBARI_SERVER_KEYS_FOLDER}\"",
          "191:       if [ -d \"${AMBARI_SERVER_KEYS_DB_FOLDER}\" ]; then",
          "192:           chmod 700 \"${AMBARI_SERVER_KEYS_DB_FOLDER}\"",
          "193:           if [ -d \"${AMBARI_SERVER_NEWCERTS_FOLDER}\" ]; then",
          "194:               chmod 700 \"${AMBARI_SERVER_NEWCERTS_FOLDER}\"",
          "199:   if [ -f \"${AMBARI_ENV_RPMSAVE}\" ]; then",
          "200:     local python_path_line=\"export PYTHONPATH=${AMBARI_SERVER_ROOT_DIR}/lib:\\$\\{PYTHONPATH\\}\"",
          "201:     grep \"^${python_path_line}\\$\" \"${AMBARI_ENV_RPMSAVE}\" > /dev/null",
          "202:     if [ $? -ne 0 ]; then",
          "203:       echo -e \"\\n${python_path_line}\" >> ${AMBARI_ENV_RPMSAVE}",
          "208: copy_helper(){",
          "209:   local install_helper=\"${RPM_INSTALL_PREFIX}/var/lib/ambari-server/install-helper.sh\"",
          "210:   cp -f ${install_helper} ${AMBARI_HELPER} 1>/dev/null 2>&1",
          "211: }",
          "213: do_remove(){",
          "214:   ${AMBARI_SERVER_EXECUTABLE} stop > /dev/null 2>&1",
          "216:   if [ -d \"${AMBARI_CONFIGS_DIR_SAVE}\" ]; then",
          "217:     mv \"${AMBARI_CONFIGS_DIR_SAVE}\" \"${AMBARI_CONFIGS_DIR_SAVE_BACKUP}\"",
          "219:   # part.1 Remove link created during install AMBARI_ENV_RPMSAVE",
          "220:   rm -f \"${AMBARI_SERVER_EXECUTABLE_LINK}\"",
          "221:   cp -rf \"${AMBARI_CONFIGS_DIR}\" \"${AMBARI_CONFIGS_DIR_SAVE}\"",
          "223:   remove_autostart 1>>${LOG_FILE} 2>&1",
          "224:   copy_helper",
          "225: }",
          "228: do_cleanup(){",
          "229:   # do_cleanup is a function, which called after do_remove stage and is supposed to be save place to",
          "230:   # remove obsolete files generated by application activity",
          "232:   clean_pyc_files 1>>${LOG_FILE} 2>&1",
          "233:   remove_ambari_unit_dir 1>>${LOG_FILE} 2>&1",
          "235:   if [ ! -d \"${AMBARI_AGENT_ROOT_DIR}\" ]; then",
          "236:     echo \"Removing ${PYTHON_WRAPER_TARGET} ...\" 1>>${LOG_FILE} 2>&1",
          "237:     rm -f ${PYTHON_WRAPER_TARGET} 1>>${LOG_FILE} 2>&1",
          "240:   # part.2 Remove link created during install AMBARI_ENV_RPMSAVE",
          "241:   rm -rf \"${AMBARI_CONFIGS_DIR}\" 1>>${LOG_FILE} 2>&1",
          "242: }",
          "244: do_backup(){",
          "245:   # ToDo: find a way to move backup logic here from preinstall.sh and preinst scripts",
          "246:   # ToDo: general problem is that still no files are installed on step, when backup is supposed to be done",
          "247:   echo \"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:   do_install",
          "200: }",
          "212: esac",
          "",
          "[Removed Lines]",
          "202: case \"$1\" in",
          "203:  install)",
          "204:    do_install",
          "205:    ;;",
          "206:  remove)",
          "207:    do_remove",
          "208:    ;;",
          "209:  upgrade)",
          "210:    do_upgrade",
          "211:    ;;",
          "",
          "[Added Lines]",
          "255: resolve_log_file",
          "257: case \"${ACTION}\" in",
          "258:     install)",
          "259:       do_install",
          "260:       ;;",
          "261:     remove)",
          "262:       do_remove",
          "263:       ;;",
          "264:     upgrade)",
          "265:       do_upgrade",
          "266:       ;;",
          "267:     cleanup)",
          "268:       do_cleanup",
          "269:       ;;",
          "271:       echo \"Wrong command given\"",
          "272:       ;;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/package/rpm/postinstall.sh||ambari-server/src/main/package/rpm/postinstall.sh": [
          "File: ambari-server/src/main/package/rpm/postinstall.sh -> ambari-server/src/main/package/rpm/postinstall.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: case \"$1\" in",
          "21:   1) # Action install",
          "22:     if [ -f \"$INSTALL_HELPER\" ]; then",
          "24:     fi",
          "25:   ;;",
          "26:   2) # Action upgrade",
          "27:     if [ -f \"$INSTALL_HELPER\" ]; then",
          "29:     fi",
          "30:   ;;",
          "31: esac",
          "",
          "[Removed Lines]",
          "23:         $INSTALL_HELPER install",
          "28:         $INSTALL_HELPER upgrade",
          "",
          "[Added Lines]",
          "23:         ${INSTALL_HELPER} install",
          "28:         ${INSTALL_HELPER} upgrade",
          "",
          "---------------"
        ],
        "ambari-server/src/main/package/rpm/postremove.sh||ambari-server/src/main/package/rpm/postremove.sh": [
          "File: ambari-server/src/main/package/rpm/postremove.sh -> ambari-server/src/main/package/rpm/postremove.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one or more",
          "2: # contributor license agreements.  See the NOTICE file distributed with",
          "3: # this work for additional information regarding copyright ownership.",
          "4: # The ASF licenses this file to You under the Apache License, Version 2.0",
          "5: # (the \"License\"); you may not use this file except in compliance with",
          "6: # the License.  You may obtain a copy of the License at",
          "7: #",
          "8: #     http://www.apache.org/licenses/LICENSE-2.0",
          "9: #",
          "10: # Unless required by applicable law or agreed to in writing, software",
          "11: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License",
          "16: INSTALL_HELPER=\"${RPM_INSTALL_PREFIX}/var/lib/ambari-server/install-helper.sh.orig\"",
          "18: if [ \"$1\" -eq 0 ]; then  # Action is uninstall",
          "19:     if [ -f \"${INSTALL_HELPER}\" ]; then",
          "20:       ${INSTALL_HELPER} cleanup",
          "21:       rm -f ${INSTALL_HELPER} 1>/dev/null 2>&1",
          "22:     fi",
          "23: fi",
          "25: exit 0",
          "",
          "---------------"
        ],
        "ambari-server/src/main/package/rpm/preinstall.sh||ambari-server/src/main/package/rpm/preinstall.sh": [
          "File: ambari-server/src/main/package/rpm/preinstall.sh -> ambari-server/src/main/package/rpm/preinstall.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: ROOT=`echo \"${RPM_INSTALL_PREFIX}\" | sed 's|/$||g'`",
          "138:     fi",
          "",
          "[Removed Lines]",
          "18: STACKS_FOLDER=\"${ROOT}/var/lib/ambari-server/resources/stacks\"",
          "19: STACKS_FOLDER_OLD=\"${ROOT}/var/lib/ambari-server/resources/stacks_$(date '+%d_%m_%y_%H_%M').old\"",
          "21: COMMON_SERVICES_FOLDER=${ROOT}\"/var/lib/ambari-server/resources/common-services\"",
          "22: COMMON_SERVICES_FOLDER_OLD=\"${ROOT}/var/lib/ambari-server/resources/common-services_$(date '+%d_%m_%y_%H_%M').old\"",
          "24: MPACKS_FOLDER=\"${ROOT}/var/lib/ambari-server/resources/mpacks\"",
          "25: MPACKS_FOLDER_OLD=${ROOT}/var/lib/ambari-server/resources/mpacks_$(date '+%d_%m_%y_%H_%M').old",
          "27: AMBARI_PROPERTIES=\"${ROOT}/etc/ambari-server/conf/ambari.properties\"",
          "28: AMBARI_PROPERTIES_OLD=\"$AMBARI_PROPERTIES.rpmsave\"",
          "30: AMBARI_ENV=\"${ROOT}/var/lib/ambari-server/ambari-env.sh\"",
          "31: AMBARI_ENV_OLD=\"$AMBARI_ENV.rpmsave\"",
          "33: AMBARI_KRB_JAAS_LOGIN_FILE=\"${ROOT}/etc/ambari-server/conf/krb5JAASLogin.conf\"",
          "34: AMBARI_KRB_JAAS_LOGIN_FILE_OLD=\"$AMBARI_KRB_JAAS_LOGIN_FILE.rpmsave\"",
          "36: AMBARI_VIEWS_FOLDER=\"${ROOT}/var/lib/ambari-server/resources/views\"",
          "37: AMBARI_VIEWS_BACKUP_FOLDER=\"$AMBARI_VIEWS_FOLDER/backups\"",
          "39: AMBARI_SERVER_JAR_FILES=\"/usr/lib/ambari-server/ambari-server-*.jar\"",
          "40: AMBARI_SERVER_JAR_FILES_BACKUP_FOLDER=\"/usr/lib/ambari-server-backups\"",
          "41: SERVER_CONF_SAVE=\"${ROOT}/etc/ambari-server/conf.save\"",
          "42: SERVER_CONF_SAVE_BACKUP=\"${ROOT}/etc/ambari-server/conf_$(date '+%d_%m_%y_%H_%M').save\"",
          "44: if [ -d \"$SERVER_CONF_SAVE\" ]",
          "45: then",
          "46:     echo \"Backing up configs $SERVER_CONF_SAVE -> $SERVER_CONF_SAVE_BACKUP\"",
          "47:     mv \"$SERVER_CONF_SAVE\" \"$SERVER_CONF_SAVE_BACKUP\"",
          "48: fi",
          "50: if [ -f \"$AMBARI_PROPERTIES\" ]",
          "51: then",
          "52:     echo \"Backing up Ambari properties $AMBARI_PROPERTIES -> $AMBARI_PROPERTIES_OLD\"",
          "53:     cp -n \"$AMBARI_PROPERTIES\" \"$AMBARI_PROPERTIES_OLD\"",
          "54: fi",
          "56: if [ -f \"$AMBARI_ENV\" ]",
          "57: then",
          "58:     echo \"Backing up Ambari properties $AMBARI_ENV -> $AMBARI_ENV_OLD\"",
          "59:     cp -n \"$AMBARI_ENV\" \"$AMBARI_ENV_OLD\"",
          "60: fi",
          "62: if [ -f \"$AMBARI_KRB_JAAS_LOGIN_FILE\" ]",
          "63: then",
          "64:     echo \"Backing up JAAS login file $AMBARI_KRB_JAAS_LOGIN_FILE -> $AMBARI_KRB_JAAS_LOGIN_FILE_OLD\"",
          "65:     cp -n \"$AMBARI_KRB_JAAS_LOGIN_FILE\" \"$AMBARI_KRB_JAAS_LOGIN_FILE_OLD\"",
          "66: fi",
          "68: if [ -d \"$STACKS_FOLDER\" ]",
          "69: then",
          "70:     echo \"Backing up stacks directory $STACKS_FOLDER -> $STACKS_FOLDER_OLD\"",
          "71:     mv -f \"$STACKS_FOLDER\" \"$STACKS_FOLDER_OLD\"",
          "72: fi",
          "74: if [ -d \"$COMMON_SERVICES_FOLDER\" ]",
          "75: then",
          "76:     echo \"Backing up common-services directory $COMMON_SERVICES_FOLDER -> $COMMON_SERVICES_FOLDER_OLD\"",
          "77:     mv -f \"$COMMON_SERVICES_FOLDER\" \"$COMMON_SERVICES_FOLDER_OLD\"",
          "78: fi",
          "80: if [ -d \"$MPACKS_FOLDER\" ]",
          "81: then",
          "82:     # Make a copy of mpacks folder",
          "83:     if [ ! -d \"$MPACKS_FOLDER_OLD\" ]; then",
          "84:         echo \"Backing up mpacks directory $MPACKS_FOLDER -> $MPACKS_FOLDER_OLD\"",
          "85:         cp -R \"$MPACKS_FOLDER\" \"$MPACKS_FOLDER_OLD\"",
          "86:     fi",
          "88:     # Update symlinks in $STACKS_FOLDER_OLD to point to $MPACKS_FOLDER_OLD",
          "89:     if [ -d \"$STACKS_FOLDER_OLD\" ]; then",
          "90:         for link in $(find \"$STACKS_FOLDER_OLD\" -type l)",
          "91:         do",
          "92:             target=`readlink $link`",
          "93:             if grep -q \"$MPACKS_FOLDER/\"<<<$target; then",
          "94:                 new_target=\"${target/$MPACKS_FOLDER/$MPACKS_FOLDER_OLD}\"",
          "95:                 echo \"Updating symlink $link -> $new_target\"",
          "96:                 ln -snf $new_target $link",
          "97:             fi",
          "98:         done",
          "99:     fi",
          "101:     # Update symlinks in $COMMON_SERVICES_FOLDER_OLD to point to $MPACKS_FOLDER_OLD",
          "102:     if [ -d \"$COMMON_SERVICES_FOLDER_OLD\" ]; then",
          "103:     for link in $(find \"$COMMON_SERVICES_FOLDER_OLD\" -type l)",
          "104:         do",
          "105:             target=`readlink $link`",
          "106:             if grep -q \"$MPACKS_FOLDER/\"<<<$target; then",
          "107:                 new_target=\"${target/$MPACKS_FOLDER/$MPACKS_FOLDER_OLD}\"",
          "108:                 echo \"Updating symlink $link -> $new_target\"",
          "109:                 ln -snf $new_target $link",
          "110:             fi",
          "111:         done",
          "112:     fi",
          "113: fi",
          "115: if [ ! -d \"$AMBARI_VIEWS_BACKUP_FOLDER\" ] && [ -d \"$AMBARI_VIEWS_FOLDER\" ]",
          "116: then",
          "117:     mkdir \"$AMBARI_VIEWS_BACKUP_FOLDER\"",
          "118: fi",
          "120: ls $AMBARI_VIEWS_FOLDER/*.jar > /dev/null 2>&1",
          "121: JARS_EXIST=\"$?\"",
          "122: if [ -d \"$AMBARI_VIEWS_FOLDER\" ] && [ -d \"$AMBARI_VIEWS_BACKUP_FOLDER\" ] && [ \"$JARS_EXIST\" -eq 0 ]",
          "123: then",
          "124:     echo \"Backing up Ambari view jars $AMBARI_VIEWS_FOLDER/*.jar -> $AMBARI_VIEWS_BACKUP_FOLDER/\"",
          "125:     cp -u $AMBARI_VIEWS_FOLDER/*.jar $AMBARI_VIEWS_BACKUP_FOLDER/",
          "126: fi",
          "128: for f in $AMBARI_SERVER_JAR_FILES;",
          "129: do",
          "130:     if [ -f \"$f\" ]",
          "131:     then",
          "132:         if [ ! -d \"$AMBARI_SERVER_JAR_FILES_BACKUP_FOLDER\" ]",
          "133:         then",
          "134:             mkdir -p \"$AMBARI_SERVER_JAR_FILES_BACKUP_FOLDER\"",
          "135:         fi",
          "136:         echo \"Backing up Ambari server jar $f -> $AMBARI_SERVER_JAR_FILES_BACKUP_FOLDER/\"",
          "137:         mv -f $f $AMBARI_SERVER_JAR_FILES_BACKUP_FOLDER/",
          "139: done",
          "141: exit 0",
          "",
          "[Added Lines]",
          "19: do_backups(){",
          "20:   local etc_dir=\"${ROOT}/etc/ambari-server\"",
          "21:   local var_dir=\"${ROOT}/var/lib/ambari-server\"",
          "22:   local usr_dir=\"${ROOT}/usr/lib/ambari-server\"",
          "23:   local usr_backup_dir=\"${ROOT}/usr/lib/ambari-server-backups\"",
          "25:   local stacks_backup_folder=\"${var_dir}/resources/stacks_$(date '+%d_%m_%y_%H_%M').old\"",
          "26:   local common_service_backup_folder=\"${var_dir}/resources/common-services_$(date '+%d_%m_%y_%H_%M').old\"",
          "28:   #  backup configuration",
          "30:   # data format:  \"title:source:destination\"; each new record on new line",
          "31:   local backup_folders=\"configs:${etc_dir}/conf.save:${etc_dir}/conf_$(date '+%d_%m_%y_%H_%M').save",
          "32: Ambari properties:${etc_dir}/conf/ambari.properties:${etc_dir}/conf/ambari.propertie.rpmsave",
          "33: Ambari properties:${var_dir}/ambari-env.sh:${var_dir}/ambari-env.sh.rpmsave",
          "34: JAAS login file:${etc_dir}/conf/krb5JAASLogin.conf:${etc_dir}/conf/krb5JAASLogin.conf.rpmsave",
          "35: stacks directory:${var_dir}/resources/stacks:${stacks_backup_folder}",
          "36: common-services directory:${var_dir}/resources/common-services:${common_service_backup_folder}\"",
          "38:  echo \"${backup_folders}\"| while IFS=: read title source destination; do",
          "39:    if [ -d \"${source}\" ]; then",
          "40:      echo \"Backing up ${title}: ${source} -> ${destination}\"",
          "41:      mv -f \"${source}\" \"${destination}\"",
          "42:    fi",
          "43:  done",
          "45:   # backup mpacks",
          "47:   local mpacks_folder=\"${ROOT}/var/lib/ambari-server/resources/mpacks\"",
          "48:   local mpacks_folder_old=${ROOT}/var/lib/ambari-server/resources/mpacks_$(date '+%d_%m_%y_%H_%M').old",
          "50:   if [ -d \"${mpacks_folder}\" ]; then",
          "51:     # Make a copy of mpacks folder",
          "52:     if [ ! -d \"${mpacks_folder_old}\" ]; then",
          "53:       echo \"Backing up mpacks directory: ${mpacks_folder} -> ${mpacks_folder_old}\"",
          "54:       cp -R \"${mpacks_folder}\" \"${mpacks_folder_old}\"",
          "57:     local symlink_update_folders=\"${stacks_backup_folder};${common_service_backup_folder}\"",
          "59:     echo ${symlink_update_folders}| tr ';' '\\n'| while read item; do",
          "60:       if [ -d \"${item}\" ]; then",
          "61:         for link in $(find \"${item}\" -type l); do",
          "62:           local target=`readlink ${link}`",
          "63:           echo ${target}|grep -q \"${mpacks_folder}/\" 1>/dev/null 2>&1",
          "64:           if [ $? -eq 0 ]; then",
          "65:             local new_target=\"${target/$mpacks_folder/$mpacks_folder_old}\"",
          "66:             echo \"Updating symlink ${link} -> ${new_target}\"",
          "67:             ln -snf ${new_target} ${link}",
          "68:           fi",
          "69:         done",
          "70:       fi",
          "71:     done",
          "72:   fi",
          "74:   # backup Ambari Views",
          "76:   local ambari_views_folder=\"${var_dir}/resources/views\"",
          "77:   local ambari_views_backup_folder=\"${ambari_views_folder}/backups\"",
          "79:   if [ ! -d \"${ambari_views_backup_folder}\" ] && [ -d \"${ambari_views_folder}\" ]; then",
          "80:     mkdir \"${ambari_views_backup_folder}\"",
          "81:   fi",
          "83:   ls ${ambari_views_folder}/*.jar > /dev/null 2>&1",
          "84:   local jars_exist=$?",
          "85:   if [ -d \"${ambari_views_folder}\" ] && [ -d \"${ambari_views_backup_folder}\" ] && [ ${jars_exist} -eq 0 ]; then",
          "86:       echo \"Backing up Ambari view jars: ${ambari_views_folder}/*.jar -> ${ambari_views_backup_folder}/\"",
          "87:       cp -u ${ambari_views_folder}/*.jar \"${ambari_views_backup_folder}/\" 1>/dev/null 2>&1",
          "88:   fi",
          "90:   # backup Ambari Server Jar",
          "92:   local ambari_server_jar_files=${usr_dir}/ambari-server-*.jar",
          "93:   local ambari_server_jar_files_backup_folder=\"${usr_backup_dir}\"",
          "95:   for f in ${ambari_server_jar_files}; do",
          "96:       if [ -f \"${f}\" ]; then",
          "97:           if [ ! -d \"${ambari_server_jar_files_backup_folder}\" ]; then",
          "98:               mkdir -p \"${ambari_server_jar_files_backup_folder}\"",
          "99:           fi",
          "100:           echo \"Backing up Ambari server jar: ${f} -> ${ambari_server_jar_files_backup_folder}/\"",
          "101:           mv -f \"${f}\" \"${ambari_server_jar_files_backup_folder}/\"",
          "102:       fi",
          "103:   done",
          "104: }",
          "106: do_backups",
          "",
          "---------------"
        ],
        "ambari-server/src/main/package/rpm/preremove.sh||ambari-server/src/main/package/rpm/preremove.sh": [
          "File: ambari-server/src/main/package/rpm/preremove.sh -> ambari-server/src/main/package/rpm/preremove.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: INSTALL_HELPER=\"${RPM_INSTALL_PREFIX}/var/lib/ambari-server/install-helper.sh\"",
          "24: if [ \"$1\" -eq 0 ]; then  # Action is uninstall",
          "27:     fi",
          "28: fi",
          "",
          "[Removed Lines]",
          "25:     if [ -f \"$INSTALL_HELPER\" ]; then",
          "26:       $INSTALL_HELPER remove",
          "",
          "[Added Lines]",
          "26:     if [ -f \"${INSTALL_HELPER}\" ]; then",
          "27:       ${INSTALL_HELPER} remove",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cd0d91b449214c1eb01ec81ec395ab97d1a00f4",
      "candidate_info": {
        "commit_hash": "0cd0d91b449214c1eb01ec81ec395ab97d1a00f4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0cd0d91b449214c1eb01ec81ec395ab97d1a00f4",
        "files": [
          "ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py"
        ],
        "message": "AMBARI-25207 The Ubuntu repository id for the cached apt package list is generated wrong in case if were used URL with https protocol (dgrinenko) (#2887)",
        "before_after_code_files": [
          "ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py||ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py||ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py": [
          "File: ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py -> ambari-common/src/main/python/ambari_commons/repo_manager/apt_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   def all_packages(self, pkg_names=None, repo_filter=None):",
          "154:     return self.available_packages(pkg_names, repo_filter)",
          "156:   def get_available_packages_in_repos(self, repos):",
          "157:     \"\"\"",
          "158:     Gets all (both installed and available) packages that are available at given repositories.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   def transform_baseurl_to_repoid(self, base_url):",
          "157:     \"\"\"",
          "158:     Transforms the URL looking like proto://localhost/some/long/path to localhost_some_long_path",
          "160:     :type base_url str",
          "161:     :rtype str",
          "162:     \"\"\"",
          "163:     url_proto_mask = \"://\"",
          "164:     url_proto_pos = base_url.find(url_proto_mask)",
          "165:     if url_proto_pos > 0:",
          "166:       base_url = base_url[url_proto_pos+len(url_proto_mask):]",
          "168:     return base_url.replace(\"/\", \"_\").replace(\" \", \"_\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     repo_ids = []",
          "167:     for repo in repos.items:",
          "170:     if repos.feat.scoped:",
          "171:       Logger.info(\"Looking for matching packages in the following repositories: {0}\".format(\", \".join(repo_ids)))",
          "",
          "[Removed Lines]",
          "168:       repo_ids.append(repo.base_url.replace(\"http://\", \"\").replace(\"/\", \"_\"))",
          "",
          "[Added Lines]",
          "182:       repo_ids.append(self.transform_baseurl_to_repoid(repo.base_url))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f87fcd3faa9b0c436978e66600f64c0455789a64",
      "candidate_info": {
        "commit_hash": "f87fcd3faa9b0c436978e66600f64c0455789a64",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f87fcd3faa9b0c436978e66600f64c0455789a64",
        "files": [
          "ambari-logsearch/ambari-logsearch-assembly/src/main/package/deb/logfeeder/postinst",
          "ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh"
        ],
        "message": "AMBARI-24261. Keep custom jsons in /usr/lib/ambari-logsearch-logfeeder/conf after package upgrade",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh||ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh||ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh": [
          "File: ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh -> ambari-logsearch/ambari-logsearch-assembly/src/main/package/rpm/logfeeder/postinstall.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: ln -s $LOGFEEDER_SCRIPT_SOURCE $LOGFEEDER_SCRIPT_LINK_NAME",
          "27: #ln -s $LOGFEEDER_CONF_SOURCE $LOGFEEDER_CONF_LINK",
          "31: LOGFEEDER_CONF_BACKUP=\"/usr/lib/ambari-logsearch-logfeeder/conf-old\"",
          "",
          "[Removed Lines]",
          "29: # handle old checkpoint & keys folder",
          "",
          "[Added Lines]",
          "29: # handle old keys folder & custom jsons",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   if [ -d \"$LOGFEEDER_CONF_BACKUP/keys\" ]; then",
          "35:     cp -r $LOGFEEDER_CONF_BACKUP/keys $LOGFEEDER_CONF_SOURCE",
          "36:   fi",
          "39:   fi",
          "40: fi",
          "",
          "[Removed Lines]",
          "37:   if [ -d \"$LOGFEEDER_CONF_BACKUP/checkpoints\" ]; then",
          "38:     cp -r $LOGFEEDER_CONF_BACKUP/checkpoints $LOGFEEDER_CONF_SOURCE",
          "",
          "[Added Lines]",
          "38:   custom_jsons=(`find $LOGFEEDER_CONF_BACKUP -name \"*.json\" ! -name 'input*.json' ! -name 'global.config.json' ! -name 'output.config.json'`)",
          "39:   if [ ! -z \"$custom_jsons\" ]; then",
          "40:     for custom_json_file in \"${custom_jsons[@]}\"",
          "41:     do :",
          "42:       cp -r $custom_json_file \"$LOGFEEDER_CONF_SOURCE/\"",
          "43:     done",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94e6f90868588763e203381061a0b175f23389a3",
      "candidate_info": {
        "commit_hash": "94e6f90868588763e203381061a0b175f23389a3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/94e6f90868588763e203381061a0b175f23389a3",
        "files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/pom.xml",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "ambari-logsearch/ambari-logsearch-server/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java",
          "ambari-logsearch/docker/Dockerfile"
        ],
        "message": "Revert \"AMBARI-24692 - JDK 11 support for Log Search (#2843)\" (#2844)\n\nThis reverts commit 42a46e961d3ea2ce53328aa8f2fa41998e4379c3.",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh||ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh||ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "23: import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;",
          "24: import org.springframework.boot.builder.SpringApplicationBuilder;",
          "27: @SpringBootApplication(",
          "28:   scanBasePackages = {\"org.apache.ambari.logfeeder\"},",
          "",
          "[Removed Lines]",
          "25: import org.springframework.boot.context.ApplicationPidFileWriter;",
          "",
          "[Added Lines]",
          "25: import org.springframework.boot.system.ApplicationPidFileWriter;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh||ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   LOGFEEDER_GC_LOGFILE=\"$LOG_PATH_WITHOUT_SLASH/$LOGFEEDER_GC_LOGFILE\"",
          "81: fi",
          "90: function print_usage() {",
          "91:   cat << EOF",
          "",
          "[Removed Lines]",
          "83: java_version=$($JVM -version 2>&1 | grep 'version' | cut -d'\"' -f2 | cut -d'.' -f2)",
          "84: if [ $java_version == \"8\" ]; then",
          "85:   LOGFEEDER_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGFEEDER_GC_LOGFILE\"",
          "86: else",
          "87:   LOGFEEDER_GC_OPTS=\"-Xlog:gc*:file=$LOGFEEDER_GC_LOGFILE:time\"",
          "88: fi",
          "",
          "[Added Lines]",
          "83: LOGFEEDER_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGFEEDER_GC_LOGFILE\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   LOGFEEDER_DEBUG_PORT=${LOGFEEDER_DEBUG_PORT:-\"5006\"}",
          "161:   if [ \"$LOGFEEDER_DEBUG\" = \"true\" ]; then",
          "168:   fi",
          "170:   if [ \"$LOGFEEDER_SSL\" = \"true\" ]; then",
          "",
          "[Removed Lines]",
          "162:     if [ $java_version == \"8\" ]; then",
          "163:       LOGFEEDER_DEBUG_ADDRESS=$LOGFEEDER_DEBUG_PORT",
          "164:     else",
          "165:       LOGFEEDER_DEBUG_ADDRESS=\"*:$LOGFEEDER_DEBUG_PORT\"",
          "166:     fi",
          "167:     LOGFEEDER_JAVA_OPTS=\"$LOGFEEDER_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGFEEDER_DEBUG_ADDRESS,server=y,suspend=$LOGFEEDER_DEBUG_SUSPEND \"",
          "",
          "[Added Lines]",
          "157:     LOGFEEDER_JAVA_OPTS=\"$LOGFEEDER_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGFEEDER_DEBUG_PORT,server=y,suspend=$LOGFEEDER_DEBUG_SUSPEND \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219: }",
          "221: function stop() {",
          "223:   if [ -f \"$LOGFEEDER_PID_FILE\" ]; then",
          "224:     LOGFEEDER_PID=`cat \"$LOGFEEDER_PID_FILE\"`",
          "225:   fi",
          "",
          "[Removed Lines]",
          "222:   LOGFEEDER_STOP_WAIT=${LOGFEEDER_STOP_WAIT:-60}",
          "",
          "[Added Lines]",
          "212:   LOGFEEDER_STOP_WAIT=3",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch;",
          "21: import org.springframework.boot.Banner;",
          "23: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "24: import org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;",
          "26: import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;",
          "28: import org.springframework.boot.builder.SpringApplicationBuilder;",
          "31: @SpringBootApplication(",
          "32:   scanBasePackages = {\"org.apache.ambari.logsearch\"},",
          "33:   exclude = {",
          "34:     RepositoryRestMvcAutoConfiguration.class,",
          "35:     WebMvcAutoConfiguration.class,",
          "38:   }",
          "39: )",
          "40: public class LogSearch {",
          "",
          "[Removed Lines]",
          "22: import org.springframework.boot.WebApplicationType;",
          "25: import org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration;",
          "27: import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;",
          "29: import org.springframework.boot.context.ApplicationPidFileWriter;",
          "36:     SolrAutoConfiguration.class,",
          "37:     SolrRepositoriesAutoConfiguration.class",
          "",
          "[Added Lines]",
          "25: import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;",
          "27: import org.springframework.boot.system.ApplicationPidFileWriter;",
          "34:     SolrAutoConfiguration.class",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     new SpringApplicationBuilder(LogSearch.class)",
          "46:       .bannerMode(Banner.Mode.OFF)",
          "47:       .listeners(new ApplicationPidFileWriter(pidFile))",
          "49:       .run(args);",
          "50:   }",
          "",
          "[Removed Lines]",
          "48:       .web(WebApplicationType.SERVLET)",
          "",
          "[Added Lines]",
          "45:       .web(true)",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "23: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "24: import org.springframework.beans.factory.annotation.Value;",
          "25: import org.springframework.context.annotation.Configuration;",
          "27: @Configuration",
          "28: public class LogSearchHttpConfig {",
          "",
          "[Removed Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "[Added Lines]",
          "25: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   @Value(\"${logsearch.protocol:http}\")",
          "58:   private String protocol;",
          "70:   public String getProtocol() {",
          "71:     return protocol;",
          "72:   }",
          "",
          "[Removed Lines]",
          "60:   @LogSearchPropertyDescription(",
          "61:           name = \"logsearch.session.timeout\",",
          "62:           description = \"Log Search http session timeout in minutes.\",",
          "63:           examples = {\"300\"},",
          "64:           defaultValue = \"30\",",
          "65:           sources = {LOGSEARCH_PROPERTIES_FILE}",
          "66:   )",
          "67:   @Value(\"${logsearch.session.timeout:30}\")",
          "68:   private Integer sessionTimeout;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   public void setHttpsPort(int httpsPort) {",
          "91:     this.httpsPort = httpsPort;",
          "92:   }",
          "101: }",
          "",
          "[Removed Lines]",
          "94:   public Integer getSessionTimeout() {",
          "95:     return sessionTimeout;",
          "96:   }",
          "98:   public void setSessionTimeout(Integer sessionTimeout) {",
          "99:     this.sessionTimeout = sessionTimeout;",
          "100:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "24: import org.apache.ambari.logsearch.configurer.SslConfigurer;",
          "25: import org.apache.ambari.logsearch.web.listener.LogSearchSessionListener;",
          "26: import org.glassfish.jersey.servlet.ServletContainer;",
          "27: import org.glassfish.jersey.servlet.ServletProperties;",
          "28: import org.springframework.boot.autoconfigure.web.ServerProperties;",
          "29: import org.springframework.boot.web.servlet.ServletRegistrationBean;",
          "30: import org.springframework.context.annotation.Bean;",
          "31: import org.springframework.context.annotation.Configuration;",
          "33: @Configuration",
          "34: public class LogSearchServletConfig {",
          "",
          "[Removed Lines]",
          "21: import javax.inject.Inject;",
          "22: import javax.servlet.http.HttpSessionListener;",
          "",
          "[Added Lines]",
          "23: import org.eclipse.jetty.server.Connector;",
          "24: import org.eclipse.jetty.server.Server;",
          "25: import org.eclipse.jetty.server.ServerConnector;",
          "26: import org.eclipse.jetty.util.ssl.SslContextFactory;",
          "30: import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;",
          "31: import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer;",
          "32: import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;",
          "33: import org.springframework.boot.context.embedded.jetty.JettyServerCustomizer;",
          "38: import javax.inject.Inject;",
          "39: import javax.servlet.http.HttpSessionListener;",
          "41: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_APPLICATION_NAME;",
          "42: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, LogSearchJerseyResourceConfig.class.getName());",
          "56:     return registration;",
          "57:   }",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   @Bean",
          "71:   public EmbeddedServletContainerFactory containerFactory() {",
          "72:     final JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory = new JettyEmbeddedServletContainerFactory() {",
          "73:       @Override",
          "74:       protected JettyEmbeddedServletContainer getJettyEmbeddedServletContainer(Server server) {",
          "75:         return new JettyEmbeddedServletContainer(server);",
          "76:       }",
          "77:     };",
          "78:     jettyEmbeddedServletContainerFactory.setSessionTimeout(SESSION_TIMEOUT);",
          "79:     serverProperties.getSession().getCookie().setName(LOGSEARCH_SESSION_ID);",
          "80:     serverProperties.setDisplayName(LOGSEARCH_APPLICATION_NAME);",
          "81:     if (\"https\".equals(logSearchHttpConfig.getProtocol())) {",
          "82:       sslConfigurer.ensureStorePasswords();",
          "83:       sslConfigurer.loadKeystore();",
          "84:       jettyEmbeddedServletContainerFactory.addServerCustomizers((JettyServerCustomizer) server -> {",
          "85:         SslContextFactory sslContextFactory = sslConfigurer.getSslContextFactory();",
          "86:         ServerConnector sslConnector = new ServerConnector(server, sslContextFactory);",
          "87:         sslConnector.setPort(logSearchHttpConfig.getHttpsPort());",
          "88:         server.setConnectors(new Connector[]{sslConnector});",
          "89:       });",
          "90:     } else {",
          "91:       jettyEmbeddedServletContainerFactory.setPort(logSearchHttpConfig.getHttpPort());",
          "92:     }",
          "93:     return jettyEmbeddedServletContainerFactory;",
          "94:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "30: import org.apache.ambari.logsearch.conf.global.LogSearchConfigState;",
          "31: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "32: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthFailureHandler;",
          "33: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthSuccessHandler;",
          "34: import org.apache.ambari.logsearch.web.authenticate.LogsearchLogoutSuccessHandler;",
          "36: import org.apache.ambari.logsearch.web.filters.LogSearchLogLevelFilterManagerFilter;",
          "37: import org.apache.ambari.logsearch.web.filters.LogsearchAuditLogsStateFilter;",
          "38: import org.apache.ambari.logsearch.web.filters.LogsearchAuthenticationEntryPoint;",
          "39: import org.apache.ambari.logsearch.web.filters.LogsearchCorsFilter;",
          "42: import org.apache.ambari.logsearch.web.filters.LogsearchKRBAuthenticationFilter;",
          "43: import org.apache.ambari.logsearch.web.filters.LogsearchSecurityContextFormationFilter;",
          "44: import org.apache.ambari.logsearch.web.filters.LogsearchServiceLogsStateFilter;",
          "45: import org.apache.ambari.logsearch.web.filters.LogsearchUsernamePasswordAuthenticationFilter;",
          "46: import org.apache.ambari.logsearch.web.security.LogsearchAuthenticationProvider;",
          "47: import org.springframework.context.annotation.Bean;",
          "",
          "[Removed Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "26: import javax.inject.Inject;",
          "27: import javax.inject.Named;",
          "29: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "35: import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;",
          "40: import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;",
          "41: import org.apache.ambari.logsearch.web.filters.LogsearchJWTFilter;",
          "",
          "[Added Lines]",
          "21: import com.google.common.collect.Lists;",
          "25: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "33: import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;",
          "35: import org.apache.ambari.logsearch.web.filters.LogsearchJWTFilter;",
          "38: import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.springframework.security.config.annotation.web.builders.HttpSecurity;",
          "50: import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;",
          "51: import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;",
          "54: import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;",
          "55: import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;",
          "56: import org.springframework.security.web.util.matcher.AntPathRequestMatcher;",
          "57: import org.springframework.security.web.util.matcher.OrRequestMatcher;",
          "58: import org.springframework.security.web.util.matcher.RequestMatcher;",
          "62: @Configuration",
          "63: @EnableWebSecurity",
          "",
          "[Removed Lines]",
          "52: import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
          "53: import org.springframework.security.crypto.password.PasswordEncoder;",
          "60: import com.google.common.collect.Lists;",
          "",
          "[Added Lines]",
          "52: import javax.inject.Inject;",
          "53: import javax.inject.Named;",
          "54: import java.util.ArrayList;",
          "55: import java.util.List;",
          "57: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     return filter;",
          "175:   }",
          "182:   @Bean",
          "183:   public LogsearchServiceLogsStateFilter logsearchServiceLogFilter() {",
          "184:     return new LogsearchServiceLogsStateFilter(serviceLogsRequestMatcher(), solrServiceLogsState, solrServiceLogPropsConfig);",
          "",
          "[Removed Lines]",
          "177:   @Bean",
          "178:   public PasswordEncoder passwordEncoder() {",
          "179:     return new BCryptPasswordEncoder();",
          "180:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.ambari.logsearch.conf.global.SolrAuditLogsState;",
          "22: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "25: import org.apache.ambari.logsearch.dao.SolrSchemaFieldDao;",
          "26: import org.springframework.context.annotation.Bean;",
          "27: import org.springframework.context.annotation.Configuration;",
          "28: import org.springframework.scheduling.annotation.EnableScheduling;",
          "30: @Configuration",
          "31: @EnableScheduling",
          "32: public class SolrConfig {",
          "",
          "[Removed Lines]",
          "23: import org.apache.ambari.logsearch.conf.global.SolrEventHistoryState;",
          "",
          "[Added Lines]",
          "23: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "25: import org.apache.ambari.logsearch.conf.global.SolrEventHistoryState;",
          "29: import org.springframework.data.solr.repository.config.EnableSolrRepositories;",
          "33: @EnableSolrRepositories",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import javax.inject.Inject;",
          "29: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "30: import org.apache.ambari.logsearch.util.FileUtil;",
          "31: import org.apache.ambari.logsearch.util.JSONUtil;",
          "32: import org.apache.ambari.logsearch.web.model.Privilege;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.springframework.security.core.GrantedAuthority;",
          "31: import org.springframework.stereotype.Repository;",
          "32: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.apache.commons.collections.Predicate;",
          "37: import org.apache.commons.lang.StringUtils;",
          "38: import org.apache.log4j.Logger;",
          "43: @Repository",
          "44: public class UserDao {",
          "",
          "[Removed Lines]",
          "39: import org.springframework.security.core.GrantedAuthority;",
          "40: import org.springframework.security.crypto.password.PasswordEncoder;",
          "41: import org.springframework.stereotype.Repository;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   @Inject",
          "53:   private AuthPropsConfig authPropsConfig;",
          "58:   private ArrayList<HashMap<String, String>> userList = null;",
          "60:   @SuppressWarnings(\"unchecked\")",
          "",
          "[Removed Lines]",
          "55:   @Inject",
          "56:   private PasswordEncoder passwordEncoder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:       String username = user.get(USER_NAME);",
          "140:       String password = user.get(PASSWORD);",
          "141:       if (StringUtils.isNotBlank(password)) {",
          "143:         user.put(PASSWORD, \"\");",
          "144:         user.put(ENC_PASSWORD, encPassword);",
          "145:         isUpdated = true;",
          "",
          "[Removed Lines]",
          "142:         encPassword = passwordEncoder.encode(password);",
          "",
          "[Added Lines]",
          "139:         encPassword = CommonUtil.encryptPassword(username, password);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.util;",
          "21: import java.security.SecureRandom;",
          "23: import org.springframework.security.authentication.encoding.Md5PasswordEncoder;",
          "25: public class CommonUtil {",
          "26:   private CommonUtil() {",
          "27:     throw new UnsupportedOperationException();",
          "28:   }",
          "30:   private static SecureRandom secureRandom = new SecureRandom();",
          "31:   private static int counter = 0;",
          "33:   public static String genGUI() {",
          "34:     return System.currentTimeMillis() + \"_\" + secureRandom.nextInt(1000) + \"_\" + counter++;",
          "35:   }",
          "37:   private static final Md5PasswordEncoder md5Encoder = new Md5PasswordEncoder();",
          "38:   public static String encryptPassword(String username, String password) {",
          "39:     return md5Encoder.encodePassword(password, username);",
          "40:   }",
          "41: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.web.filters;",
          "21: import java.io.IOException;",
          "24: import javax.inject.Inject;",
          "25: import javax.servlet.FilterChain;",
          "",
          "[Removed Lines]",
          "22: import java.security.SecureRandom;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.apache.ambari.logsearch.common.LogSearchContext;",
          "35: import org.apache.ambari.logsearch.manager.SessionManager;",
          "36: import org.apache.ambari.logsearch.web.model.User;",
          "37: import org.apache.log4j.Logger;",
          "38: import org.springframework.security.authentication.AnonymousAuthenticationToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   public static final String LOGSEARCH_SC_SESSION_KEY = \"LOGSEARCH_SECURITY_CONTEXT\";",
          "48:   public static final String USER_AGENT = \"User-Agent\";",
          "52:   @Inject",
          "53:   SessionManager sessionManager;",
          "",
          "[Removed Lines]",
          "50:   private static SecureRandom secureRandom = new SecureRandom();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:         }",
          "83:         if (msaCookie == null) {",
          "84:           HttpServletResponse httpResponse = (HttpServletResponse) response;",
          "86:           Cookie cookie = new Cookie(\"msa\", msaCookie);",
          "88:           cookie.setMaxAge(Integer.MAX_VALUE);",
          "",
          "[Removed Lines]",
          "85:           msaCookie = System.currentTimeMillis() + \"_\" + secureRandom.nextInt(1000);",
          "",
          "[Added Lines]",
          "83:           msaCookie = CommonUtil.genGUI();",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import javax.servlet.Filter;",
          "30: import javax.servlet.FilterRegistration;",
          "32: import javax.servlet.RequestDispatcher;",
          "33: import javax.servlet.Servlet;",
          "34: import javax.servlet.ServletContext;",
          "",
          "[Removed Lines]",
          "31: import javax.servlet.FilterRegistration.Dynamic;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import javax.servlet.ServletRegistration;",
          "37: import javax.servlet.SessionCookieConfig;",
          "38: import javax.servlet.SessionTrackingMode;",
          "39: import javax.servlet.descriptor.JspConfigDescriptor;",
          "41: public class NoServletContext implements ServletContext {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import javax.servlet.FilterRegistration.Dynamic;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     return null;",
          "76:   }",
          "108:   @Override",
          "109:   public SessionCookieConfig getSessionCookieConfig() {",
          "110:     return null;",
          "",
          "[Removed Lines]",
          "78:   @Override",
          "79:   public int getSessionTimeout() {",
          "80:     return 0;",
          "81:   }",
          "83:   @Override",
          "84:   public void setSessionTimeout(int i) {",
          "86:   }",
          "88:   @Override",
          "89:   public String getRequestCharacterEncoding() {",
          "90:     return null;",
          "91:   }",
          "93:   @Override",
          "94:   public void setRequestCharacterEncoding(String s) {",
          "96:   }",
          "98:   @Override",
          "99:   public String getResponseCharacterEncoding() {",
          "100:     return null;",
          "101:   }",
          "103:   @Override",
          "104:   public void setResponseCharacterEncoding(String s) {",
          "106:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:   }",
          "285:   @Override",
          "287:       String servletName, Class<? extends Servlet> servletClass) {",
          "288:     return null;",
          "289:   }",
          "291:   @Override",
          "298:       String servletName, Servlet servlet) {",
          "299:     return null;",
          "300:   }",
          "302:   @Override",
          "304:       String servletName, String className) {",
          "305:     return null;",
          "306:   }",
          "",
          "[Removed Lines]",
          "286:   public ServletRegistration.Dynamic addServlet(",
          "292:   public ServletRegistration.Dynamic addJspFile(String s, String s1) {",
          "293:     return null;",
          "294:   }",
          "296:   @Override",
          "297:   public ServletRegistration.Dynamic addServlet(",
          "303:   public ServletRegistration.Dynamic addServlet(",
          "",
          "[Added Lines]",
          "256:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "262:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "268:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "26: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "27: import org.apache.commons.lang.StringEscapeUtils;",
          "28: import org.apache.commons.lang.StringUtils;",
          "29: import org.apache.log4j.Logger;",
          "",
          "[Removed Lines]",
          "23: import javax.inject.Inject;",
          "24: import javax.inject.Named;",
          "",
          "[Added Lines]",
          "24: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.springframework.security.core.GrantedAuthority;",
          "35: import org.springframework.security.core.userdetails.UserDetails;",
          "36: import org.springframework.security.core.userdetails.UserDetailsService;",
          "41: @Named",
          "42: public class LogsearchFileAuthenticationProvider extends LogsearchAbstractAuthenticationProvider {",
          "",
          "[Removed Lines]",
          "37: import org.springframework.security.crypto.password.PasswordEncoder;",
          "39: import com.google.common.annotations.VisibleForTesting;",
          "",
          "[Added Lines]",
          "36: import javax.inject.Inject;",
          "37: import javax.inject.Named;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   @Inject",
          "50:   private UserDetailsService userDetailsService;",
          "55:   @Override",
          "56:   public Authentication authenticate(Authentication authentication) throws AuthenticationException {",
          "57:     if (!authPropsConfig.isAuthFileEnabled()) {",
          "",
          "[Removed Lines]",
          "52:   @Inject",
          "53:   private PasswordEncoder passwordEncoder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:       logger.error(\"Password can't be null or empty.\");",
          "81:       throw new BadCredentialsException(\"Password can't be null or empty.\");",
          "82:     }",
          "85:       logger.error(\"Wrong password for user=\" + username);",
          "86:       throw new BadCredentialsException(\"Wrong password.\");",
          "87:     }",
          "89:     Collection<? extends GrantedAuthority> authorities = user.getAuthorities();",
          "91:     return authentication;",
          "92:   }",
          "98: }",
          "",
          "[Removed Lines]",
          "84:     if (!passwordEncoder.matches(password, user.getPassword())) {",
          "90:     authentication = new UsernamePasswordAuthenticationToken(username, user.getPassword(), authorities);",
          "94:   @VisibleForTesting",
          "95:   public void setPasswordEncoder(PasswordEncoder passwordEncoder) {",
          "96:     this.passwordEncoder = passwordEncoder;",
          "97:   }",
          "",
          "[Added Lines]",
          "78:     String encPassword = CommonUtil.encryptPassword(username, password);",
          "79:     if (!encPassword.equals(user.getPassword())) {",
          "85:     authentication = new UsernamePasswordAuthenticationToken(username, encPassword, authorities);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh||ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh -> ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   LOGSEARCH_GC_LOGFILE=\"$LOG_PATH_WITHOUT_SLASH/$LOGSEARCH_GC_LOGFILE\"",
          "79: fi",
          "88: function print_usage() {",
          "89:   cat << EOF",
          "",
          "[Removed Lines]",
          "81: java_version=$($JVM -version 2>&1 | grep 'version' | cut -d'\"' -f2 | cut -d'.' -f2)",
          "82: if [ $java_version == \"8\" ]; then",
          "83:   LOGSEARCH_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGSEARCH_GC_LOGFILE\"",
          "84: else",
          "85:   LOGSEARCH_GC_OPTS=\"-Xlog:gc*:file=$LOGSEARCH_GC_LOGFILE:time\"",
          "86: fi",
          "",
          "[Added Lines]",
          "81: LOGSEARCH_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGSEARCH_GC_LOGFILE\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:   LOGSEARCH_DEBUG_PORT=${LOGSEARCH_DEBUG_PORT:-\"5005\"}",
          "151:   if [ \"$LOGSEARCH_DEBUG\" = \"true\" ]; then",
          "158:   fi",
          "160:   if [ \"$LOGSEARCH_SSL\" = \"true\" ]; then",
          "",
          "[Removed Lines]",
          "152:     if [ $java_version == \"8\" ]; then",
          "153:       LOGSEARCH_DEBUG_ADDRESS=$LOGSEARCH_DEBUG_PORT",
          "154:     else",
          "155:       LOGSEARCH_DEBUG_ADDRESS=\"*:$LOGSEARCH_DEBUG_PORT\"",
          "156:     fi",
          "157:     LOGSEARCH_JAVA_OPTS=\"$LOGSEARCH_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGSEARCH_DEBUG_ADDRESS,server=y,suspend=$LOGSEARCH_DEBUG_SUSPEND \"",
          "",
          "[Added Lines]",
          "147:     LOGSEARCH_JAVA_OPTS=\"$LOGSEARCH_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGSEARCH_DEBUG_PORT,server=y,suspend=$LOGSEARCH_DEBUG_SUSPEND \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209: }",
          "211: function stop() {",
          "213:   if [ -f \"$LOGSEARCH_PID_FILE\" ]; then",
          "214:     LOGSEARCH_PID=`cat \"$LOGSEARCH_PID_FILE\"`",
          "215:   fi",
          "",
          "[Removed Lines]",
          "212:   LOGSEARCH_STOP_WAIT=${LOGSEARCH_STOP_WAIT:-10}",
          "",
          "[Added Lines]",
          "202:   LOGSEARCH_STOP_WAIT=3",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.AuditLogRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.AuditLogQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "29: import org.springframework.data.solr.core.query.SimpleQuery;",
          "31: public class AuditLogRequestConverterTest extends AbstractRequestConverterTest {",
          "33:   private AuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SimpleQuery simpleQuery = underTest.convert(request);",
          "48:     SolrQuery queryResult = new DefaultQueryParser().doConstructSolrQuery(simpleQuery);",
          "52:       queryResult.toQueryString());",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29\" +",
          "51:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=reqUser%3A%28joe+%22OR%22+steven%29&sort=evtTime+desc%2Cseq_num+desc\",",
          "",
          "[Added Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=repo%3A%28logsearch_app+OR+secure_log%29&fq=-repo%3A%28hst_agent+OR+system_message%29\" +",
          "51:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=reqUser%3A%28joe+OR+steven%29&sort=evtTime+desc%2Cseq_num+desc\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.AuditServiceLoadRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.AuditServiceLoadQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class AuditServiceLoadRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private AuditServiceLoadRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery solrQuery = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:   }",
          "52:   @Test",
          "",
          "[Removed Lines]",
          "48:       \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:       \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.field=repo\", solrQuery.toQueryString());",
          "",
          "[Added Lines]",
          "48:       \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:       \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.field=repo\", solrQuery.toQueryString());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceLogRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogQueryRequest;",
          "25: import org.apache.ambari.logsearch.util.SolrUtil;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: import org.springframework.data.solr.core.query.SimpleQuery;",
          "32: public class BaseServiceLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "34:   private BaseServiceLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     SolrQuery solrQuery = defaultQueryParser.doConstructSolrQuery(query);",
          "54:     SolrUtil.removeDoubleOrTripleEscapeFromFilters(solrQuery);",
          "57:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=path%3A%5C%2Fvar%5C%2Flog%5C%2Fmyfile%5C-%5C*%5C-hdfs.log\" +",
          "59:         \"&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D&sort=logtime+desc%2Cseq_num+desc\",",
          "60:       solrQuery.toQueryString());",
          "61:   }",
          "",
          "[Removed Lines]",
          "56:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29&fq=-type%3A%28hst_agent+%22OR%22+system_message%29\" +",
          "58:         \"&fq=type%3Acomponent&fq=level%3A%28FATAL+%22OR%22+ERROR+%22OR%22+WARN+%22OR%22+UNKNOWN%29&fq=host%3A%28logsearch1.com+%22OR%22+logsearch2.com%29\" +",
          "",
          "[Added Lines]",
          "56:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=type%3A%28logsearch_app+OR+secure_log%29&fq=-type%3A%28hst_agent+OR+system_message%29\" +",
          "58:         \"&fq=type%3Acomponent&fq=level%3A%28FATAL+OR+ERROR+OR+WARN+OR+UNKNOWN%29&fq=host%3A%28logsearch1.com+OR+logsearch2.com%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.FieldAuditLogRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.FieldAuditLogQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class FieldAuditLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private FieldAuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=myfield%2Crepo\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=myfield%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceAnyGraphRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceAnyGraphQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogAnyGraphRequestConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogAnyGraphRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceLogComponentLevelRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogComponentLevelQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogComponentLevelRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogComponentLevelRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Clevel\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&fq=cluster%3Acl1\" +",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&fq=cluster%3Acl1\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "65:       \"&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Clevel\", query.toQueryString());",
          "66:   }",
          "67: }",
          "",
          "[Removed Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&facet=true\" +",
          "",
          "[Added Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&facet=true\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceLogComponentHostRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogComponentHostQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogComponentRequestFacetQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogComponentRequestFacetQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:         \"&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Chost%2Clevel&facet.pivot=type%2Clevel\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "65:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Chost%2Clevel&facet.pivot=type%2Clevel\",",
          "66:       query.toQueryString());",
          "67:   }",
          "",
          "[Removed Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "[Added Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceLogLevelCountRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogLevelCountQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogLevelCountRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogLevelCountRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:       query.toQueryString());",
          "51:   }",
          "",
          "[Removed Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "[Added Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceLogHostComponentRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogHostComponentQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogTreeRequestFacetQueryConverterTest extends AbstractRequestConverterTest {",
          "31:   private ServiceLogTreeRequestFacetQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:         \"&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=host%2Ctype%2Clevel&facet.pivot=host%2Clevel\",",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&fq=cluster%3Acl1&facet=true\" +",
          "",
          "[Added Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&fq=cluster%3Acl1&facet=true\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "63:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=host%2Ctype%2Clevel&facet.pivot=host%2Clevel\",",
          "64:       query.toQueryString());",
          "65:   }",
          "",
          "[Removed Lines]",
          "62:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "[Added Lines]",
          "62:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.ServiceLogTruncatedRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogTruncatedQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogTruncatedRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogTruncatedRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "52:         \"&fq=cluster%3Acl1&sort=logtime+desc%2Cseq_num+desc\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=10&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage\" +",
          "",
          "[Added Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=10&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.TopFieldAuditLogRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.TopFieldAuditLogQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class TopFieldAuditLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private TopFieldAuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:       query.toQueryString());",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.pivot=myfield%2Crepo\",",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.pivot=myfield%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "23: import org.apache.ambari.logsearch.model.request.impl.UserExportRequest;",
          "24: import org.apache.ambari.logsearch.model.request.impl.query.UserExportQueryRequest;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.junit.Test;",
          "28: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class UserExportRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "31:   private UserExportRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=reqUser%2Crepo&facet.pivot=resource%2Crepo\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=reqUser%2Crepo&facet.pivot=resource%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.web.security;",
          "33: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "34: import org.apache.ambari.logsearch.web.model.User;",
          "35: import org.junit.Before;",
          "36: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "21: import static junit.framework.Assert.assertEquals;",
          "22: import static junit.framework.Assert.assertSame;",
          "23: import static junit.framework.Assert.fail;",
          "24: import static org.easymock.EasyMock.expect;",
          "25: import static org.easymock.EasyMock.replay;",
          "26: import static org.easymock.EasyMock.strictMock;",
          "27: import static org.easymock.EasyMock.verify;",
          "29: import java.lang.reflect.Field;",
          "30: import java.util.Collections;",
          "31: import java.util.List;",
          "",
          "[Added Lines]",
          "22: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.springframework.security.core.GrantedAuthority;",
          "41: import org.springframework.security.core.authority.SimpleGrantedAuthority;",
          "42: import org.springframework.security.core.userdetails.UserDetailsService;",
          "46: public class LogsearchFileAuthenticationProviderTest {",
          "48:   private LogsearchFileAuthenticationProvider provider;",
          "49:   private AuthPropsConfig mockAuthPropsConfig;",
          "50:   private UserDetailsService mockUserDetailsService;",
          "53:   @Before",
          "54:   public void init() throws Exception {",
          "",
          "[Removed Lines]",
          "43: import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
          "44: import org.springframework.security.crypto.password.PasswordEncoder;",
          "51:   private PasswordEncoder passwordEncoder;",
          "",
          "[Added Lines]",
          "33: import static junit.framework.Assert.assertEquals;",
          "34: import static junit.framework.Assert.assertSame;",
          "35: import static junit.framework.Assert.assertTrue;",
          "36: import static org.easymock.EasyMock.strictMock;",
          "37: import static org.easymock.EasyMock.expect;",
          "38: import static org.easymock.EasyMock.replay;",
          "39: import static org.easymock.EasyMock.verify;",
          "41: import java.lang.reflect.Field;",
          "42: import java.util.Arrays;",
          "43: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     Field userDetailsServiceField = LogsearchFileAuthenticationProvider.class.getDeclaredField(\"userDetailsService\");",
          "64:     userDetailsServiceField.setAccessible(true);",
          "65:     userDetailsServiceField.set(provider, mockUserDetailsService);",
          "69:   }",
          "71:   @Test",
          "",
          "[Removed Lines]",
          "67:     passwordEncoder = new BCryptPasswordEncoder();",
          "68:     provider.setPasswordEncoder(passwordEncoder);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     try {",
          "92:       provider.authenticate(authentication);",
          "94:     } catch(BadCredentialsException e) {",
          "95:       assertEquals(\"Username can't be null or empty.\", e.getMessage());",
          "96:     }",
          "",
          "[Removed Lines]",
          "93:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "88:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:     try {",
          "110:       provider.authenticate(authentication);",
          "112:     } catch(BadCredentialsException e) {",
          "113:       assertEquals(\"Username can't be null or empty.\", e.getMessage());",
          "114:     }",
          "",
          "[Removed Lines]",
          "111:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "106:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:     try {",
          "129:       provider.authenticate(authentication);",
          "131:     } catch(BadCredentialsException e) {",
          "132:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "133:     }",
          "",
          "[Removed Lines]",
          "130:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "125:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "146:     try {",
          "147:       provider.authenticate(authentication);",
          "149:     } catch(BadCredentialsException e) {",
          "150:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "151:     }",
          "",
          "[Removed Lines]",
          "148:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "143:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "163:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "164:     try {",
          "165:       provider.authenticate(authentication);",
          "167:     } catch (BadCredentialsException e) {",
          "168:       assertEquals(\"User not found.\", e.getMessage());",
          "169:     }",
          "",
          "[Removed Lines]",
          "166:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "161:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "174:   @Test",
          "175:   public void testAuthenticationNoPassword() {",
          "177:     User user = new User(\"principal\", null, grantedAuths);",
          "179:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "",
          "[Removed Lines]",
          "176:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "",
          "[Added Lines]",
          "171:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "184:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "185:     try {",
          "186:       provider.authenticate(authentication);",
          "188:     } catch (BadCredentialsException e) {",
          "189:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "190:     }",
          "",
          "[Removed Lines]",
          "187:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "182:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "195:   @Test",
          "196:   public void testAuthenticationWrongPassword() {",
          "200:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "201:     expect(mockUserDetailsService.loadUserByUsername(\"principal\")).andReturn(user);",
          "",
          "[Removed Lines]",
          "197:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "198:     User user = new User(\"principal\", passwordEncoder.encode(\"notCredentials\"), grantedAuths);",
          "",
          "[Added Lines]",
          "192:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "193:     User user = new User(\"principal\", CommonUtil.encryptPassword(\"principal\", \"notCredentials\"), grantedAuths);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "205:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "206:     try {",
          "207:       provider.authenticate(authentication);",
          "209:     } catch (BadCredentialsException e) {",
          "210:       assertEquals(\"Wrong password.\", e.getMessage());",
          "211:     }",
          "",
          "[Removed Lines]",
          "208:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "[Added Lines]",
          "203:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "216:   @Test",
          "217:   public void testAuthenticationSuccessful() {",
          "222:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "223:     expect(mockUserDetailsService.loadUserByUsername(\"principal\")).andReturn(user);",
          "",
          "[Removed Lines]",
          "218:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "219:     String encodedPassword = passwordEncoder.encode(\"credentials\");",
          "220:     User user = new User(\"principal\", encodedPassword, grantedAuths);",
          "",
          "[Added Lines]",
          "213:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "214:     User user = new User(\"principal\", CommonUtil.encryptPassword(\"principal\", \"credentials\"), grantedAuths);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "225:     replay(mockAuthPropsConfig, mockUserDetailsService);",
          "227:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "228:     Authentication authenticationResult = provider.authenticate(authentication);",
          "229:     assertEquals(\"principal\", authenticationResult.getName());",
          "230:     assertEquals(1, authenticationResult.getAuthorities().size());",
          "231:     assertEquals(new SimpleGrantedAuthority(\"ROLE_USER\"), authenticationResult.getAuthorities().iterator().next());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     assertEquals(CommonUtil.encryptPassword(\"principal\", \"credentials\"), authenticationResult.getCredentials());",
          "",
          "---------------"
        ]
      }
    }
  ]
}