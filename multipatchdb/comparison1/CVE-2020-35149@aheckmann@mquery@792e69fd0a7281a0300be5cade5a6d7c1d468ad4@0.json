{
  "cve_id": "CVE-2020-35149",
  "cve_desc": "lib/utils.js in mquery before 3.2.3 allows a pollution attack because a special property (e.g., __proto__) can be copied during a merge or clone operation.",
  "repo": "aheckmann/mquery",
  "patch_hash": "792e69fd0a7281a0300be5cade5a6d7c1d468ad4",
  "patch_info": {
    "commit_hash": "792e69fd0a7281a0300be5cade5a6d7c1d468ad4",
    "repo": "aheckmann/mquery",
    "commit_url": "https://github.com/aheckmann/mquery/commit/792e69fd0a7281a0300be5cade5a6d7c1d468ad4",
    "files": [
      "lib/utils.js",
      "test/utils.test.js"
    ],
    "message": "fix(utils): avoid copying special properties like `__proto__` when merging and cloning",
    "before_after_code_files": [
      "lib/utils.js||lib/utils.js",
      "test/utils.test.js||test/utils.test.js"
    ]
  },
  "patch_diff": {
    "lib/utils.js||lib/utils.js": [
      "File: lib/utils.js -> lib/utils.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: var Buffer = require('safe-buffer').Buffer;",
      "8: var RegExpClone = require('regexp-clone');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: var specialProperties = ['__proto__', 'constructor', 'prototype'];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:   var k;",
      "71:   for (k in obj) {",
      "72:     val = clone(obj[k], options);",
      "74:     if (!minimize || ('undefined' !== typeof val)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:     if (specialProperties.indexOf(k) !== -1) {",
      "77:       continue;",
      "78:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:   while (i--) {",
      "135:     key = keys[i];",
      "136:     if ('undefined' === typeof to[key]) {",
      "137:       to[key] = from[key];",
      "138:     } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:     if (specialProperties.indexOf(key) !== -1) {",
      "145:       continue;",
      "146:     }",
      "",
      "---------------"
    ],
    "test/utils.test.js||test/utils.test.js": [
      "File: test/utils.test.js -> test/utils.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:       done();",
      "142:     });",
      "143:   });",
      "144: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:     it('skips __proto__', function() {",
      "145:       var payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');",
      "146:       var res = utils.clone(payload);",
      "148:       assert.strictEqual({}.polluted, void 0);",
      "149:       assert.strictEqual(res.__proto__, Object.prototype);",
      "150:     });",
      "151:   });",
      "153:   describe('merge', function() {",
      "154:     it('avoids prototype pollution', function() {",
      "155:       var payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');",
      "156:       var obj = {};",
      "157:       utils.merge(obj, payload);",
      "159:       assert.strictEqual({}.polluted, void 0);",
      "160:     });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a51879f4383e4e4623a676e34ddceb75615e092f",
      "candidate_info": {
        "commit_hash": "a51879f4383e4e4623a676e34ddceb75615e092f",
        "repo": "aheckmann/mquery",
        "commit_url": "https://github.com/aheckmann/mquery/commit/a51879f4383e4e4623a676e34ddceb75615e092f",
        "files": [
          ".eslintrc.json",
          "lib/collection/collection.js",
          "lib/collection/index.js",
          "lib/collection/node.js",
          "lib/mquery.js",
          "lib/permissions.js",
          "lib/utils.js",
          "package.json",
          "test/.eslintrc.yml",
          "test/collection/node.js",
          "test/env.js",
          "test/index.js",
          "test/utils.test.js"
        ],
        "message": "BREAKING CHANGE: upgrade eslint to ES2017, switch to let/const and strict mode everywhere\n\nRe: #123",
        "before_after_code_files": [
          "lib/collection/collection.js||lib/collection/collection.js",
          "lib/collection/index.js||lib/collection/index.js",
          "lib/collection/node.js||lib/collection/node.js",
          "lib/mquery.js||lib/mquery.js",
          "lib/permissions.js||lib/permissions.js",
          "lib/utils.js||lib/utils.js",
          "test/collection/node.js||test/collection/node.js",
          "test/env.js||test/env.js",
          "test/index.js||test/index.js",
          "test/utils.test.js||test/utils.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/utils.js||lib/utils.js",
            "test/utils.test.js||test/utils.test.js"
          ],
          "candidate": [
            "lib/utils.js||lib/utils.js",
            "test/utils.test.js||test/utils.test.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/collection/collection.js||lib/collection/collection.js": [
          "File: lib/collection/collection.js -> lib/collection/collection.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   'find',",
          "9:   'findOne',",
          "10:   'updateMany',",
          "",
          "[Removed Lines]",
          "7: var methods = [",
          "",
          "[Added Lines]",
          "7: const methods = [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: function Collection() {}",
          "32:   Collection.prototype[method] = notImplemented(method);",
          "33: }",
          "",
          "[Removed Lines]",
          "30: for (var i = 0, len = methods.length; i < len; ++i) {",
          "31:   var method = methods[i];",
          "",
          "[Added Lines]",
          "30: for (let i = 0, len = methods.length; i < len; ++i) {",
          "31:   const method = methods[i];",
          "",
          "---------------"
        ],
        "lib/collection/index.js||lib/collection/index.js": [
          "File: lib/collection/index.js -> lib/collection/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "5: if ('unknown' == env.type) {",
          "6:   throw new Error('Unknown environment');",
          "",
          "[Removed Lines]",
          "3: var env = require('../env');",
          "",
          "[Added Lines]",
          "3: const env = require('../env');",
          "",
          "---------------"
        ],
        "lib/collection/node.js||lib/collection/node.js": [
          "File: lib/collection/node.js -> lib/collection/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: function NodeCollection(col) {",
          "11:   this.collection = col;",
          "",
          "[Removed Lines]",
          "7: var Collection = require('./collection');",
          "8: var utils = require('../utils');",
          "",
          "[Added Lines]",
          "7: const Collection = require('./collection');",
          "8: const utils = require('../utils');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: NodeCollection.prototype.find = function(match, options, cb) {",
          "28:   try {",
          "29:     cursor.toArray(cb);",
          "",
          "[Removed Lines]",
          "26:   var cursor = this.collection.find(match, options);",
          "",
          "[Added Lines]",
          "26:   const cursor = this.collection.find(match, options);",
          "",
          "---------------"
        ],
        "lib/mquery.js||lib/mquery.js": [
          "File: lib/mquery.js -> lib/mquery.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "7: var slice = require('sliced');",
          "8: var assert = require('assert');",
          "9: var util = require('util');",
          "10: var utils = require('./utils');",
          "11: var debug = require('debug')('mquery');",
          "",
          "[Added Lines]",
          "7: const slice = require('sliced');",
          "8: const assert = require('assert');",
          "9: const util = require('util');",
          "10: const utils = require('./utils');",
          "11: const debug = require('debug')('mquery');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   if (!(this instanceof Query))",
          "31:     return new Query(criteria, options);",
          "35:   this.op = proto.op || undefined;",
          "",
          "[Removed Lines]",
          "33:   var proto = this.constructor.prototype;",
          "",
          "[Added Lines]",
          "33:   const proto = this.constructor.prototype;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81: Object.defineProperty(Query, 'use$geoWithin', {",
          "83:   set: function(v) {",
          "84:     if (true === v) {",
          "",
          "[Removed Lines]",
          "80: var $withinCmd = '$geoWithin';",
          "82:   get: function( ) { return $withinCmd == '$geoWithin'; },",
          "",
          "[Added Lines]",
          "80: let $withinCmd = '$geoWithin';",
          "82:   get: function() { return $withinCmd == '$geoWithin'; },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:   utils.inherits(CustomQuery, Query);",
          "130:   p.options = {};",
          "131:   p.setOptions(this.options);",
          "",
          "[Removed Lines]",
          "128:   var p = CustomQuery.prototype;",
          "",
          "[Added Lines]",
          "128:   const p = CustomQuery.prototype;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172:     return this;",
          "179:     method = methods[i];",
          "182:     if ('function' == typeof this[method]) {",
          "184:         ? options[method]",
          "185:         : [options[method]];",
          "186:       this[method].apply(this, args);",
          "",
          "[Removed Lines]",
          "175:   var methods = utils.keys(options),",
          "176:       method;",
          "178:   for (var i = 0; i < methods.length; ++i) {",
          "183:       var args = utils.isArray(options[method])",
          "",
          "[Added Lines]",
          "175:   const methods = utils.keys(options);",
          "176:   let method;",
          "178:   for (let i = 0; i < methods.length; ++i) {",
          "183:       const args = utils.isArray(options[method])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "279:   if (!arguments.length) return this;",
          "280:   if (!this.op) this.op = 'find';",
          "284:   if ('string' == type) {",
          "285:     this._path = arguments[0];",
          "",
          "[Removed Lines]",
          "282:   var type = typeof arguments[0];",
          "",
          "[Added Lines]",
          "282:   const type = typeof arguments[0];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "317: Query.prototype.equals = function equals(val) {",
          "318:   this._ensurePath('equals');",
          "320:   this._conditions[path] = val;",
          "321:   return this;",
          "322: };",
          "",
          "[Removed Lines]",
          "319:   var path = this._path;",
          "",
          "[Added Lines]",
          "319:   const path = this._path;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "345: Query.prototype.eq = function eq(val) {",
          "346:   this._ensurePath('eq');",
          "348:   this._conditions[path] = val;",
          "349:   return this;",
          "350: };",
          "",
          "[Removed Lines]",
          "347:   var path = this._path;",
          "",
          "[Added Lines]",
          "347:   const path = this._path;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364: Query.prototype.or = function or(array) {",
          "366:   if (!utils.isArray(array)) array = [array];",
          "367:   or.push.apply(or, array);",
          "368:   return this;",
          "",
          "[Removed Lines]",
          "365:   var or = this._conditions.$or || (this._conditions.$or = []);",
          "",
          "[Added Lines]",
          "365:   const or = this._conditions.$or || (this._conditions.$or = []);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "383: Query.prototype.nor = function nor(array) {",
          "385:   if (!utils.isArray(array)) array = [array];",
          "386:   nor.push.apply(nor, array);",
          "387:   return this;",
          "",
          "[Removed Lines]",
          "384:   var nor = this._conditions.$nor || (this._conditions.$nor = []);",
          "",
          "[Added Lines]",
          "384:   const nor = this._conditions.$nor || (this._conditions.$nor = []);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "403: Query.prototype.and = function and(array) {",
          "405:   if (!Array.isArray(array)) array = [array];",
          "406:   and.push.apply(and, array);",
          "407:   return this;",
          "",
          "[Removed Lines]",
          "404:   var and = this._conditions.$and || (this._conditions.$and = []);",
          "",
          "[Added Lines]",
          "404:   const and = this._conditions.$and || (this._conditions.$and = []);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "555: 'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function($conditional) {",
          "556:   Query.prototype[$conditional] = function() {",
          "559:     if (1 === arguments.length) {",
          "560:       this._ensurePath($conditional);",
          "",
          "[Removed Lines]",
          "557:     var path, val;",
          "",
          "[Added Lines]",
          "557:     let path, val;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "565:       path = arguments[0];",
          "566:     }",
          "569:       this._conditions[path] :",
          "570:       (this._conditions[path] = {});",
          "571:     conds['$' + $conditional] = val;",
          "",
          "[Removed Lines]",
          "568:     var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?",
          "",
          "[Added Lines]",
          "568:     const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "585: Query.prototype.mod = function() {",
          "588:   if (1 === arguments.length) {",
          "589:     this._ensurePath('mod');",
          "",
          "[Removed Lines]",
          "586:   var val, path;",
          "",
          "[Added Lines]",
          "586:   let val, path;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "601:     path = arguments[0];",
          "602:   }",
          "605:   conds.$mod = val;",
          "606:   return this;",
          "607: };",
          "",
          "[Removed Lines]",
          "604:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "[Added Lines]",
          "604:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "629: Query.prototype.exists = function() {",
          "632:   if (0 === arguments.length) {",
          "633:     this._ensurePath('exists');",
          "",
          "[Removed Lines]",
          "630:   var path, val;",
          "",
          "[Added Lines]",
          "630:   let path, val;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "647:     val = arguments[1];",
          "648:   }",
          "651:   conds.$exists = val;",
          "652:   return this;",
          "653: };",
          "",
          "[Removed Lines]",
          "650:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "[Added Lines]",
          "650:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "681:   if (null == arguments[0])",
          "682:     throw new TypeError('Invalid argument');",
          "686:   if ('function' === typeof arguments[0]) {",
          "687:     this._ensurePath('elemMatch');",
          "",
          "[Removed Lines]",
          "684:   var fn, path, criteria;",
          "",
          "[Added Lines]",
          "684:   let fn, path, criteria;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "707:     criteria = criteria._conditions;",
          "708:   }",
          "711:   conds.$elemMatch = criteria;",
          "712:   return this;",
          "713: };",
          "",
          "[Removed Lines]",
          "710:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "[Added Lines]",
          "710:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "755:     return this.polygon.apply(this, arguments);",
          "756:   }",
          "760:   if (!area)",
          "761:     throw new TypeError('Invalid argument');",
          "",
          "[Removed Lines]",
          "758:   var area = arguments[0];",
          "",
          "[Added Lines]",
          "758:   const area = arguments[0];",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "797: Query.prototype.box = function() {",
          "800:   if (3 === arguments.length) {",
          "",
          "[Removed Lines]",
          "798:   var path, box;",
          "",
          "[Added Lines]",
          "798:   let path, box;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "810:     throw new TypeError('Invalid argument');",
          "811:   }",
          "815:   return this;",
          "816: };",
          "",
          "[Removed Lines]",
          "813:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "814:   conds[this._geoComparison || $withinCmd] = { '$box': box };",
          "",
          "[Added Lines]",
          "813:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "814:   conds[this._geoComparison || $withinCmd] = { $box: box };",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "833: Query.prototype.polygon = function() {",
          "836:   if ('string' == typeof arguments[0]) {",
          "",
          "[Removed Lines]",
          "834:   var val, path;",
          "",
          "[Added Lines]",
          "834:   let val, path;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "844:     val = slice(arguments);",
          "845:   }",
          "849:   return this;",
          "850: };",
          "",
          "[Removed Lines]",
          "847:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "848:   conds[this._geoComparison || $withinCmd] = { '$polygon': val };",
          "",
          "[Added Lines]",
          "847:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "848:   conds[this._geoComparison || $withinCmd] = { $polygon: val };",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "873: Query.prototype.circle = function() {",
          "876:   if (1 === arguments.length) {",
          "877:     this._ensurePath('circle');",
          "",
          "[Removed Lines]",
          "874:   var path, val;",
          "",
          "[Added Lines]",
          "874:   let path, val;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "887:   if (!('radius' in val && val.center))",
          "888:     throw new Error('center and radius are required');",
          "893:     ? '$centerSphere'",
          "894:     : '$center';",
          "897:   conds[wKey] = {};",
          "898:   conds[wKey][type] = [val.center, val.radius];",
          "",
          "[Removed Lines]",
          "890:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "892:   var type = val.spherical",
          "896:   var wKey = this._geoComparison || $withinCmd;",
          "",
          "[Added Lines]",
          "890:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "892:   const type = val.spherical",
          "896:   const wKey = this._geoComparison || $withinCmd;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "927: Query.prototype.near = function near() {",
          "930:   this._geoComparison = '$near';",
          "",
          "[Removed Lines]",
          "928:   var path, val;",
          "",
          "[Added Lines]",
          "928:   let path, val;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "946:     throw new Error('center is required');",
          "947:   }",
          "952:     ? '$nearSphere'",
          "953:     : '$near';",
          "",
          "[Removed Lines]",
          "949:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "951:   var type = val.spherical",
          "",
          "[Added Lines]",
          "949:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "951:   const type = val.spherical",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "956:   if (Array.isArray(val.center)) {",
          "957:     conds[type] = val.center;",
          "960:       ? val.maxDistance",
          "961:       : null;",
          "",
          "[Removed Lines]",
          "959:     var radius = 'maxDistance' in val",
          "",
          "[Added Lines]",
          "959:     const radius = 'maxDistance' in val",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "971:     if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {",
          "972:       throw new Error(util.format('Invalid GeoJSON specified for %s', type));",
          "973:     }",
          "977:     if ('maxDistance' in val) {",
          "",
          "[Removed Lines]",
          "974:     conds[type] = { $geometry : val.center };",
          "",
          "[Added Lines]",
          "974:     conds[type] = { $geometry: val.center };",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1015:     return this;",
          "1016:   }",
          "1020:   if (null != area && area.type && area.coordinates)",
          "1021:     return this.geometry(area);",
          "",
          "[Removed Lines]",
          "1018:   var area = arguments[0];",
          "",
          "[Added Lines]",
          "1018:   const area = arguments[0];",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1068:     throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');",
          "1069:   }",
          "1073:   if (1 === arguments.length) {",
          "1074:     this._ensurePath('geometry');",
          "",
          "[Removed Lines]",
          "1071:   var val, path;",
          "",
          "[Added Lines]",
          "1071:   let val, path;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1082:     throw new TypeError('Invalid argument');",
          "1083:   }",
          "1086:   conds[this._geoComparison] = { $geometry: val };",
          "1088:   return this;",
          "",
          "[Removed Lines]",
          "1085:   var conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "[Added Lines]",
          "1085:   const conds = this._conditions[path] || (this._conditions[path] = {});",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1119: Query.prototype.select = function select() {",
          "1121:   if (!arg) return this;",
          "1123:   if (arguments.length !== 1) {",
          "",
          "[Removed Lines]",
          "1120:   var arg = arguments[0];",
          "",
          "[Added Lines]",
          "1120:   let arg = arguments[0];",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1127:   this._validate('select');",
          "1133:   if (('string' == type || utils.isArgumentsObject(arg)) &&",
          "1134:     'number' == typeof arg.length || Array.isArray(arg)) {",
          "",
          "[Removed Lines]",
          "1129:   var fields = this._fields || (this._fields = {});",
          "1130:   var type = typeof arg;",
          "1131:   var i, len;",
          "",
          "[Added Lines]",
          "1129:   const fields = this._fields || (this._fields = {});",
          "1130:   const type = typeof arg;",
          "1131:   let i, len;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1136:       arg = arg.split(/\\s+/);",
          "1138:     for (i = 0, len = arg.length; i < len; ++i) {",
          "1140:       if (!field) continue;",
          "1142:       if (include === 0) field = field.substring(1);",
          "1143:       fields[field] = include;",
          "1144:     }",
          "",
          "[Removed Lines]",
          "1139:       var field = arg[i];",
          "1141:       var include = '-' == field[0] ? 0 : 1;",
          "",
          "[Added Lines]",
          "1139:       let field = arg[i];",
          "1141:       const include = '-' == field[0] ? 0 : 1;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1147:   }",
          "1149:   if (utils.isObject(arg)) {",
          "1151:     for (i = 0; i < keys.length; ++i) {",
          "1152:       fields[keys[i]] = arg[keys[i]];",
          "1153:     }",
          "",
          "[Removed Lines]",
          "1150:     var keys = utils.keys(arg);",
          "",
          "[Added Lines]",
          "1150:     const keys = utils.keys(arg);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1182:   this._validate('slice');",
          "1186:   if (1 === arguments.length) {",
          "1188:     if (typeof arg === 'object' && !Array.isArray(arg)) {",
          "1192:         this.slice(keys[i], arg[keys[i]]);",
          "1193:       }",
          "1194:       return this;",
          "",
          "[Removed Lines]",
          "1184:   var path, val;",
          "1187:     var arg = arguments[0];",
          "1189:       var keys = Object.keys(arg);",
          "1190:       var numKeys = keys.length;",
          "1191:       for (var i = 0; i < numKeys; ++i) {",
          "",
          "[Added Lines]",
          "1184:   let path, val;",
          "1187:     const arg = arguments[0];",
          "1189:       const keys = Object.keys(arg);",
          "1190:       const numKeys = keys.length;",
          "1191:       for (let i = 0; i < numKeys; ++i) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1210:     val = slice(arguments, 1);",
          "1211:   }",
          "1215:   return this;",
          "1216: };",
          "",
          "[Removed Lines]",
          "1213:   var myFields = this._fields || (this._fields = {});",
          "1214:   myFields[path] = { '$slice': val };",
          "",
          "[Added Lines]",
          "1213:   const myFields = this._fields || (this._fields = {});",
          "1214:   myFields[path] = { $slice: val };",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1242: Query.prototype.sort = function(arg) {",
          "1243:   if (!arg) return this;",
          "1246:   this._validate('sort');",
          "1251:   if (Array.isArray(arg)) {",
          "",
          "[Removed Lines]",
          "1244:   var i, len, field;",
          "1248:   var type = typeof arg;",
          "",
          "[Added Lines]",
          "1244:   let i, len, field;",
          "1248:   const type = typeof arg;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1266:     for (i = 0; i < len; ++i) {",
          "1267:       field = arg[i];",
          "1268:       if (!field) continue;",
          "1270:       if (ascend === -1) field = field.substring(1);",
          "1271:       push(this.options, field, ascend);",
          "1272:     }",
          "",
          "[Removed Lines]",
          "1269:       var ascend = '-' == field[0] ? -1 : 1;",
          "",
          "[Added Lines]",
          "1269:       const ascend = '-' == field[0] ? -1 : 1;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1278:   if (utils.isObject(arg)) {",
          "1280:     for (i = 0; i < keys.length; ++i) {",
          "1281:       field = keys[i];",
          "1282:       push(this.options, field, arg[field]);",
          "",
          "[Removed Lines]",
          "1279:     var keys = utils.keys(arg);",
          "",
          "[Added Lines]",
          "1279:     const keys = utils.keys(arg);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1301:   '-1': -1,",
          "1306: };",
          "1308: function push(opts, field, value) {",
          "",
          "[Removed Lines]",
          "1299: var _validSortValue = {",
          "1300:   '1': 1,",
          "1302:   'asc': 1,",
          "1303:   'ascending': 1,",
          "1304:   'desc': -1,",
          "1305:   'descending': -1",
          "",
          "[Added Lines]",
          "1299: const _validSortValue = {",
          "1300:   1: 1,",
          "1302:   asc: 1,",
          "1303:   ascending: 1,",
          "1304:   desc: -1,",
          "1305:   descending: -1",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1312:       '\\n- `.sort({ field: 1, test: -1 })`');",
          "1313:   }",
          "1316:   if (value && value.$meta) {",
          "1317:     s = opts.sort || (opts.sort = {});",
          "1319:     return;",
          "1320:   }",
          "1322:   s = opts.sort || (opts.sort = {});",
          "1324:   val = _validSortValue[val];",
          "1325:   if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');",
          "",
          "[Removed Lines]",
          "1315:   var s;",
          "1318:     s[field] = { $meta : value.$meta };",
          "1323:   var val = String(value || 1).toLowerCase();",
          "",
          "[Added Lines]",
          "1315:   let s;",
          "1318:     s[field] = { $meta: value.$meta };",
          "1323:   let val = String(value || 1).toLowerCase();",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1335:       '\\n- `.sort({ field: 1, test: -1 })`');",
          "1336:   }",
          "1339:   val = _validSortValue[val];",
          "1340:   if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');",
          "",
          "[Removed Lines]",
          "1338:   var val = String(value || 1).toLowerCase();",
          "",
          "[Added Lines]",
          "1338:   let val = String(value || 1).toLowerCase();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1349:       'object or map consistently');",
          "1350:   }",
          "1351:   map.forEach(function(value, key) {",
          "1353:     val = _validSortValue[val];",
          "1354:     if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');",
          "",
          "[Removed Lines]",
          "1352:     var val = String(value || 1).toLowerCase();",
          "",
          "[Added Lines]",
          "1352:     let val = String(value || 1).toLowerCase();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1534:   this._validate('hint');",
          "1537:   if (utils.isObject(arg)) {",
          "1542:       hint[k] = arg[k];",
          "1543:     }",
          "",
          "[Removed Lines]",
          "1536:   var arg = arguments[0];",
          "1538:     var hint = this.options.hint || (this.options.hint = {});",
          "1541:     for (var k in arg) {",
          "",
          "[Added Lines]",
          "1536:   const arg = arguments[0];",
          "1538:     const hint = this.options.hint || (this.options.hint = {});",
          "1541:     for (const k in arg) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1914:   if (!callback) return this;",
          "1919:   if (this.$useProjection) {",
          "1920:     options.projection = this._fieldsForExec();",
          "",
          "[Removed Lines]",
          "1916:   var conds = this._conditions;",
          "1917:   var options = this._optionsForExec();",
          "",
          "[Added Lines]",
          "1916:   const conds = this._conditions;",
          "1917:   const options = this._optionsForExec();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1954:     this.find(criteria);",
          "1955:   }",
          "1960:   if (this.$useProjection) {",
          "1961:     options.projection = this._fieldsForExec();",
          "",
          "[Removed Lines]",
          "1957:   var conds = this._conditions;",
          "1958:   var options = this._optionsForExec();",
          "",
          "[Added Lines]",
          "1957:   const conds = this._conditions;",
          "1958:   const options = this._optionsForExec();",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2007:   if (!callback) return this;",
          "2012:   if (this.$useProjection) {",
          "2013:     options.projection = this._fieldsForExec();",
          "",
          "[Removed Lines]",
          "2009:   var conds = this._conditions;",
          "2010:   var options = this._optionsForExec();",
          "",
          "[Added Lines]",
          "2009:   const conds = this._conditions;",
          "2010:   const options = this._optionsForExec();",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2065:   if (!callback) return this;",
          "2068:       options = this._optionsForExec();",
          "2070:   debug('count', this._collection.collectionName, conds, options);",
          "",
          "[Removed Lines]",
          "2067:   var conds = this._conditions,",
          "",
          "[Added Lines]",
          "2067:   const conds = this._conditions,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2147:     throw new Error('No value for `distinct` has been declared');",
          "2148:   }",
          "2151:       options = this._optionsForExec();",
          "2153:   debug('distinct', this._collection.collectionName, conds, options);",
          "",
          "[Removed Lines]",
          "2150:   var conds = this._conditions,",
          "",
          "[Added Lines]",
          "2150:   const conds = this._conditions,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2184: Query.prototype.updateMany = function updateMany(criteria, doc, options, callback) {",
          "2187:   switch (arguments.length) {",
          "2188:     case 3:",
          "",
          "[Removed Lines]",
          "2185:   var force;",
          "",
          "[Added Lines]",
          "2185:   let force;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2242: Query.prototype.updateOne = function updateOne(criteria, doc, options, callback) {",
          "2245:   switch (arguments.length) {",
          "2246:     case 3:",
          "",
          "[Removed Lines]",
          "2243:   var force;",
          "",
          "[Added Lines]",
          "2243:   let force;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2299: Query.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {",
          "2302:   switch (arguments.length) {",
          "2303:     case 3:",
          "",
          "[Removed Lines]",
          "2300:   var force;",
          "",
          "[Added Lines]",
          "2300:   let force;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2422: Query.prototype.remove = function(criteria, callback) {",
          "2423:   this.op = 'remove';",
          "2426:   if ('function' === typeof criteria) {",
          "2427:     callback = criteria;",
          "",
          "[Removed Lines]",
          "2424:   var force;",
          "",
          "[Added Lines]",
          "2424:   let force;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2436:   if (!(force || callback))",
          "2437:     return this;",
          "2440:   if (!callback) options.safe = false;",
          "2444:   debug('remove', this._collection.collectionName, conds, options);",
          "2445:   callback = this._wrapCallback('remove', callback, {",
          "",
          "[Removed Lines]",
          "2439:   var options = this._optionsForExec();",
          "2442:   var conds = this._conditions;",
          "",
          "[Added Lines]",
          "2439:   const options = this._optionsForExec();",
          "2442:   const conds = this._conditions;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2470: Query.prototype.deleteOne = function(criteria, callback) {",
          "2471:   this.op = 'deleteOne';",
          "2474:   if ('function' === typeof criteria) {",
          "2475:     callback = criteria;",
          "",
          "[Removed Lines]",
          "2472:   var force;",
          "",
          "[Added Lines]",
          "2472:   let force;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2484:   if (!(force || callback))",
          "2485:     return this;",
          "2488:   if (!callback) options.safe = false;",
          "2489:   delete options.justOne;",
          "2493:   debug('deleteOne', this._collection.collectionName, conds, options);",
          "2494:   callback = this._wrapCallback('deleteOne', callback, {",
          "",
          "[Removed Lines]",
          "2487:   var options = this._optionsForExec();",
          "2491:   var conds = this._conditions;",
          "",
          "[Added Lines]",
          "2487:   const options = this._optionsForExec();",
          "2491:   const conds = this._conditions;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2519: Query.prototype.deleteMany = function(criteria, callback) {",
          "2520:   this.op = 'deleteMany';",
          "2523:   if ('function' === typeof criteria) {",
          "2524:     callback = criteria;",
          "",
          "[Removed Lines]",
          "2521:   var force;",
          "",
          "[Added Lines]",
          "2521:   let force;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2533:   if (!(force || callback))",
          "2534:     return this;",
          "2537:   if (!callback) options.safe = false;",
          "2538:   delete options.justOne;",
          "2542:   debug('deleteOne', this._collection.collectionName, conds, options);",
          "2543:   callback = this._wrapCallback('deleteOne', callback, {",
          "",
          "[Removed Lines]",
          "2536:   var options = this._optionsForExec();",
          "2540:   var conds = this._conditions;",
          "",
          "[Added Lines]",
          "2536:   const options = this._optionsForExec();",
          "2540:   const conds = this._conditions;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2624:   if (!callback) return this;",
          "2628:   options = this._optionsForExec();",
          "2630:   return this._collection.findOneAndUpdate(conds, update, options, utils.tick(callback));",
          "",
          "[Removed Lines]",
          "2626:   var conds = this._conditions;",
          "2627:   var update = this._updateForExec();",
          "",
          "[Added Lines]",
          "2626:   const conds = this._conditions;",
          "2627:   const update = this._updateForExec();",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2680:   if (!callback) return this;",
          "2682:   options = this._optionsForExec();",
          "2685:   return this._collection.findOneAndDelete(conds, options, utils.tick(callback));",
          "2686: };",
          "",
          "[Removed Lines]",
          "2683:   var conds = this._conditions;",
          "",
          "[Added Lines]",
          "2683:   const conds = this._conditions;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2695: Query.prototype._wrapCallback = function(method, callback, queryInfo) {",
          "2698:   if (traceFunction) {",
          "2699:     queryInfo.collectionName = this._collection.collectionName;",
          "2702:       traceFunction.call(null, method, queryInfo, this);",
          "2706:     return function wrapperCallback(err, result) {",
          "2707:       if (traceCallback) {",
          "2709:         traceCallback.call(null, err, result, millis);",
          "2710:       }",
          "",
          "[Removed Lines]",
          "2696:   var traceFunction = this._traceFunction || Query.traceFunction;",
          "2701:     var traceCallback = traceFunction &&",
          "2704:     var startTime = new Date().getTime();",
          "2708:         var millis = new Date().getTime() - startTime;",
          "",
          "[Added Lines]",
          "2696:   const traceFunction = this._traceFunction || Query.traceFunction;",
          "2701:     const traceCallback = traceFunction &&",
          "2704:     const startTime = new Date().getTime();",
          "2708:         const millis = new Date().getTime() - startTime;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2774:     callback || (callback = true);",
          "2775:   }",
          "2779:   if ('function' == typeof callback) {",
          "2780:     this[this.op](callback);",
          "",
          "[Removed Lines]",
          "2777:   var _this = this;",
          "",
          "[Added Lines]",
          "2777:   const _this = this;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2802: Query.prototype.thunk = function() {",
          "2804:   return function(cb) {",
          "2805:     _this.exec(cb);",
          "2806:   };",
          "",
          "[Removed Lines]",
          "2803:   var _this = this;",
          "",
          "[Added Lines]",
          "2803:   const _this = this;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2819: Query.prototype.then = function(resolve, reject) {",
          "2822:     _this.exec(function(err, val) {",
          "2823:       if (err) error(err);",
          "2824:       else success(val);",
          "",
          "[Removed Lines]",
          "2820:   var _this = this;",
          "2821:   var promise = new Query.Promise(function(success, error) {",
          "",
          "[Added Lines]",
          "2820:   const _this = this;",
          "2821:   const promise = new Query.Promise(function(success, error) {",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2839:   if ('find' != this.op)",
          "2840:     throw new Error('stream() is only available for find');",
          "2845:   if (this.$useProjection) {",
          "2846:     options.projection = this._fieldsForExec();",
          "2847:   } else {",
          "",
          "[Removed Lines]",
          "2842:   var conds = this._conditions;",
          "2844:   var options = this._optionsForExec();",
          "",
          "[Added Lines]",
          "2842:   const conds = this._conditions;",
          "2844:   const options = this._optionsForExec();",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2878: Query.prototype.selectedInclusively = function selectedInclusively() {",
          "2879:   if (!this._fields) return false;",
          "2882:   if (0 === keys.length) return false;",
          "2886:     if (0 === this._fields[key]) return false;",
          "2887:     if (this._fields[key] &&",
          "2888:         typeof this._fields[key] === 'object' &&",
          "",
          "[Removed Lines]",
          "2881:   var keys = Object.keys(this._fields);",
          "2884:   for (var i = 0; i < keys.length; ++i) {",
          "2885:     var key = keys[i];",
          "",
          "[Added Lines]",
          "2881:   const keys = Object.keys(this._fields);",
          "2884:   for (let i = 0; i < keys.length; ++i) {",
          "2885:     const key = keys[i];",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2908: Query.prototype.selectedExclusively = function selectedExclusively() {",
          "2909:   if (!this._fields) return false;",
          "2912:   if (0 === keys.length) return false;",
          "2916:     if (0 === this._fields[key]) return true;",
          "2917:   }",
          "",
          "[Removed Lines]",
          "2911:   var keys = Object.keys(this._fields);",
          "2914:   for (var i = 0; i < keys.length; ++i) {",
          "2915:     var key = keys[i];",
          "",
          "[Added Lines]",
          "2911:   const keys = Object.keys(this._fields);",
          "2914:   for (let i = 0; i < keys.length; ++i) {",
          "2915:     const key = keys[i];",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2946: Query.prototype._optionsForExec = function() {",
          "2948:   return options;",
          "2949: };",
          "",
          "[Removed Lines]",
          "2947:   var options = utils.clone(this.options);",
          "",
          "[Added Lines]",
          "2947:   const options = utils.clone(this.options);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2968: Query.prototype._updateForExec = function() {",
          "2977:     if (this.options.overwrite) {",
          "2978:       ret[op] = update[op];",
          "2979:       continue;",
          "",
          "[Removed Lines]",
          "2969:   var update = utils.clone(this._update),",
          "2970:       ops = utils.keys(update),",
          "2971:       i = ops.length,",
          "2972:       ret = {};",
          "2974:   while (i--) {",
          "2975:     var op = ops[i];",
          "",
          "[Added Lines]",
          "2969:   const update = utils.clone(this._update);",
          "2970:   const ops = utils.keys(update);",
          "2971:   const ret = {};",
          "2973:   for (const op of ops) {",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2989:         }",
          "2990:       }",
          "2991:       ret.$set[op] = update[op];",
          "2993:       if (!~ops.indexOf('$set')) ops.push('$set');",
          "2994:     } else if ('$set' === op) {",
          "2995:       if (!ret.$set) {",
          "",
          "[Removed Lines]",
          "2992:       ops.splice(i, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3013: Query.prototype._ensurePath = function(method) {",
          "3014:   if (!this._path) {",
          "3016:                      + 'when called with these arguments';",
          "3017:     throw new Error(msg);",
          "3018:   }",
          "",
          "[Removed Lines]",
          "3015:     var msg = method + '() must be used after where() '",
          "",
          "[Added Lines]",
          "3011:     const msg = method + '() must be used after where() '",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3025: Query.permissions = require('./permissions');",
          "3027: Query._isPermitted = function(a, b) {",
          "3029:   if (!denied) return true;",
          "3030:   return true !== denied[a];",
          "3031: };",
          "3033: Query.prototype._validate = function(action) {",
          "3037:   if (undefined === action) {",
          "",
          "[Removed Lines]",
          "3028:   var denied = Query.permissions[b];",
          "3034:   var fail;",
          "3035:   var validator;",
          "",
          "[Added Lines]",
          "3024:   const denied = Query.permissions[b];",
          "3030:   let fail;",
          "3031:   let validator;",
          "",
          "---------------"
        ],
        "lib/permissions.js||lib/permissions.js": [
          "File: lib/permissions.js -> lib/permissions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "5: denied.distinct = function(self) {",
          "6:   if (self._fields && Object.keys(self._fields).length > 0) {",
          "7:     return 'field selection and slice';",
          "8:   }",
          "13:   keys.every(function(option) {",
          "14:     if (self.options[option]) {",
          "",
          "[Removed Lines]",
          "3: var denied = exports;",
          "10:   var keys = Object.keys(denied.distinct);",
          "11:   var err;",
          "",
          "[Added Lines]",
          "3: const denied = exports;",
          "10:   const keys = Object.keys(denied.distinct);",
          "11:   let err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: denied.findOneAndUpdate =",
          "40: denied.findOneAndRemove = function(self) {",
          "44:   keys.every(function(option) {",
          "45:     if (self.options[option]) {",
          "",
          "[Removed Lines]",
          "41:   var keys = Object.keys(denied.findOneAndUpdate);",
          "42:   var err;",
          "",
          "[Added Lines]",
          "41:   const keys = Object.keys(denied.findOneAndUpdate);",
          "42:   let err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     return 'field selection and slice';",
          "67:   }",
          "72:   keys.every(function(option) {",
          "73:     if (self.options[option]) {",
          "",
          "[Removed Lines]",
          "69:   var keys = Object.keys(denied.count);",
          "70:   var err;",
          "",
          "[Added Lines]",
          "69:   const keys = Object.keys(denied.count);",
          "70:   let err;",
          "",
          "---------------"
        ],
        "lib/utils.js||lib/utils.js": [
          "File: lib/utils.js -> lib/utils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "7: var RegExpClone = require('regexp-clone');",
          "9: var specialProperties = ['__proto__', 'constructor', 'prototype'];",
          "",
          "[Added Lines]",
          "7: const RegExpClone = require('regexp-clone');",
          "9: const specialProperties = ['__proto__', 'constructor', 'prototype'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:   if (obj === undefined || obj === null)",
          "22:     return obj;",
          "",
          "[Removed Lines]",
          "20: var clone = exports.clone = function clone(obj, options) {",
          "",
          "[Added Lines]",
          "20: const clone = exports.clone = function clone(obj, options) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: exports.cloneObject = function cloneObject(obj, options) {",
          "74:     k = keys[i];",
          "",
          "[Removed Lines]",
          "66:   var minimize = options && options.minimize;",
          "67:   var ret = {};",
          "68:   var hasKeys;",
          "69:   var val;",
          "70:   var keys = Object.keys(obj);",
          "71:   var k;",
          "73:   for (var i = 0; i < keys.length; ++i) {",
          "",
          "[Added Lines]",
          "66:   const minimize = options && options.minimize;",
          "67:   const ret = {};",
          "68:   let hasKeys;",
          "69:   let val;",
          "70:   const keys = Object.keys(obj);",
          "71:   let k;",
          "73:   for (let i = 0; i < keys.length; ++i) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92: };",
          "94: exports.cloneArray = function cloneArray(arr, options) {",
          "97:     ret.push(clone(arr[i], options));",
          "98:   return ret;",
          "99: };",
          "",
          "[Removed Lines]",
          "95:   var ret = [];",
          "96:   for (var i = 0, l = arr.length; i < l; i++)",
          "",
          "[Added Lines]",
          "95:   const ret = [];",
          "96:   for (let i = 0, l = arr.length; i < l; i++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:     soon(function() {",
          "125:       callback.apply(this, args);",
          "126:     });",
          "",
          "[Removed Lines]",
          "123:     var args = arguments;",
          "",
          "[Added Lines]",
          "123:     const args = arguments;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "138: exports.merge = function merge(to, from) {",
          "145:     if (specialProperties.indexOf(key) !== -1) {",
          "146:       continue;",
          "147:     }",
          "",
          "[Removed Lines]",
          "139:   var keys = Object.keys(from),",
          "140:       i = keys.length,",
          "141:       key;",
          "143:   while (i--) {",
          "144:     key = keys[i];",
          "",
          "[Added Lines]",
          "139:   const keys = Object.keys(from);",
          "141:   for (const key of keys) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168: exports.mergeClone = function mergeClone(to, from) {",
          "175:     if (specialProperties.indexOf(key) !== -1) {",
          "176:       continue;",
          "177:     }",
          "",
          "[Removed Lines]",
          "169:   var keys = Object.keys(from),",
          "170:       i = keys.length,",
          "171:       key;",
          "173:   while (i--) {",
          "174:     key = keys[i];",
          "",
          "[Added Lines]",
          "166:   const keys = Object.keys(from);",
          "168:   for (const key of keys) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "270: exports.toString = function(arg) {",
          "271:   return _toString.call(arg);",
          "272: };",
          "",
          "[Removed Lines]",
          "269: var _toString = Object.prototype.toString;",
          "",
          "[Added Lines]",
          "263: const _toString = Object.prototype.toString;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "282:   return '[object Object]' == exports.toString(arg);",
          "283: };",
          "",
          "[Removed Lines]",
          "281: var isObject = exports.isObject = function(arg) {",
          "",
          "[Added Lines]",
          "275: const isObject = exports.isObject = function(arg) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "340:   ? setImmediate",
          "341:   : process.nextTick;",
          "",
          "[Removed Lines]",
          "339: var soon = exports.soon = 'function' == typeof setImmediate",
          "",
          "[Added Lines]",
          "333: const soon = exports.soon = 'function' == typeof setImmediate",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "350: exports.cloneBuffer = function(buff) {",
          "352:   buff.copy(dupe, 0, 0, buff.length);",
          "353:   return dupe;",
          "354: };",
          "",
          "[Removed Lines]",
          "351:   var dupe = Buffer.alloc(buff.length);",
          "",
          "[Added Lines]",
          "345:   const dupe = Buffer.alloc(buff.length);",
          "",
          "---------------"
        ],
        "test/collection/node.js||test/collection/node.js": [
          "File: test/collection/node.js -> test/collection/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: exports.getCollection = function(cb) {",
          "10:   mongo.MongoClient.connect(uri, function(err, _client) {",
          "",
          "[Removed Lines]",
          "2: var assert = require('assert');",
          "3: var mongo = require('mongodb');",
          "5: var uri = process.env.MQUERY_URI || 'mongodb://localhost/mquery';",
          "6: var client;",
          "7: var db;",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: const assert = require('assert');",
          "4: const mongo = require('mongodb');",
          "6: const uri = process.env.MQUERY_URI || 'mongodb://localhost/mquery';",
          "7: let client;",
          "8: let db;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:     client = _client;",
          "13:     db = client.db();",
          "18:     db.dropDatabase(function() {",
          "",
          "[Removed Lines]",
          "15:     var collection = db.collection('stuff');",
          "",
          "[Added Lines]",
          "16:     const collection = db.collection('stuff');",
          "",
          "---------------"
        ],
        "test/env.js||test/env.js": [
          "File: test/env.js -> test/env.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: console.log('environment: %s', env.type);",
          "7: switch (env.type) {",
          "8:   case 'node':",
          "9:     col = require('./collection/node');",
          "",
          "[Removed Lines]",
          "2: var env = require('../').env;",
          "6: var col;",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: const env = require('../').env;",
          "7: let col;",
          "",
          "---------------"
        ],
        "test/index.js||test/index.js": [
          "File: test/index.js -> test/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: describe('mquery', function() {",
          "9:   before(function(done) {",
          "",
          "[Removed Lines]",
          "1: var mquery = require('../');",
          "2: var assert = require('assert');",
          "7:   var col;",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: const mquery = require('../');",
          "4: const assert = require('assert');",
          "9:   let col;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     });",
          "29:     describe('defaults', function() {",
          "30:       it('are set', function() {",
          "32:         assert.strictEqual(undefined, m.op);",
          "33:         assert.deepEqual({}, m.options);",
          "34:       });",
          "35:     });",
          "36:     describe('criteria', function() {",
          "37:       it('if collection-like is used as collection', function() {",
          "39:         assert.equal(col, m._collection.collection);",
          "40:       });",
          "41:       it('non-collection-like is used as criteria', function() {",
          "43:         assert.ok(!m._collection);",
          "44:         assert.deepEqual({ works: true }, m._conditions);",
          "45:       });",
          "46:     });",
          "47:     describe('options', function() {",
          "48:       it('are merged when passed', function() {",
          "50:         m = mquery(col, { safe: true });",
          "51:         assert.deepEqual({ safe: true }, m.options);",
          "52:         m = mquery({ name: 'mquery' }, { safe: true });",
          "",
          "[Removed Lines]",
          "31:         var m = mquery();",
          "38:         var m = mquery(col);",
          "42:         var m = mquery({ works: true });",
          "49:         var m;",
          "",
          "[Added Lines]",
          "33:         const m = mquery();",
          "40:         const m = mquery(col);",
          "44:         const m = mquery({ works: true });",
          "51:         let m;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:   describe('toConstructor', function() {",
          "59:     it('creates subclasses of mquery', function() {",
          "67:       q.where(match);",
          "68:       q.select(select);",
          "69:       q.updateOne(update);",
          "70:       q.where(path);",
          "71:       q.find();",
          "76:       assert.ok(m instanceof mquery);",
          "77:       assert.deepEqual(opts, m.options);",
          "",
          "[Removed Lines]",
          "60:       var opts = { safe: { w: 'majority' }, readPreference: 'p' };",
          "61:       var match = { name: 'test', count: { $gt: 101 }};",
          "62:       var select = { name: 1, count: 0 };",
          "63:       var update = { $set: { x: true }};",
          "64:       var path = 'street';",
          "66:       var q = mquery().setOptions(opts);",
          "73:       var M = q.toConstructor();",
          "74:       var m = M();",
          "",
          "[Added Lines]",
          "62:       const opts = { safe: { w: 'majority' }, readPreference: 'p' };",
          "63:       const match = { name: 'test', count: { $gt: 101 } };",
          "64:       const select = { name: 1, count: 0 };",
          "65:       const update = { $set: { x: true } };",
          "66:       const path = 'street';",
          "68:       const q = mquery().setOptions(opts);",
          "75:       const M = q.toConstructor();",
          "76:       const m = M();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:   describe('setOptions', function() {",
          "87:     it('calls associated methods', function() {",
          "89:       assert.equal(m._collection, null);",
          "90:       m.setOptions({ collection: col });",
          "91:       assert.equal(m._collection.collection, col);",
          "92:     });",
          "93:     it('directly sets option when no method exists', function() {",
          "95:       assert.equal(m.options.woot, null);",
          "96:       m.setOptions({ woot: 'yay' });",
          "97:       assert.equal(m.options.woot, 'yay');",
          "98:     });",
          "99:     it('is chainable', function() {",
          "103:       n = m.setOptions();",
          "104:       assert.equal(m, n);",
          "",
          "[Removed Lines]",
          "88:       var m = mquery();",
          "94:       var m = mquery();",
          "100:       var m = mquery(),",
          "101:           n;",
          "",
          "[Added Lines]",
          "90:       const m = mquery();",
          "96:       const m = mquery();",
          "102:       const m = mquery();",
          "103:       let n;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:   describe('collection', function() {",
          "111:     it('sets the _collection', function() {",
          "113:       m.collection(col);",
          "114:       assert.equal(m._collection.collection, col);",
          "115:     });",
          "116:     it('is chainable', function() {",
          "119:       assert.equal(m, n);",
          "120:     });",
          "121:   });",
          "123:   describe('$where', function() {",
          "124:     it('sets the $where condition', function() {",
          "126:       function go() {}",
          "127:       m.$where(go);",
          "128:       assert.ok(go === m._conditions.$where);",
          "129:     });",
          "130:     it('is chainable', function() {",
          "133:       assert.equal(m, n);",
          "134:     });",
          "135:   });",
          "137:   describe('where', function() {",
          "138:     it('without arguments', function() {",
          "140:       m.where();",
          "141:       assert.deepEqual({}, m._conditions);",
          "142:     });",
          "143:     it('with non-string/object argument', function() {",
          "146:       assert.throws(function() {",
          "147:         m.where([]);",
          "",
          "[Removed Lines]",
          "112:       var m = mquery();",
          "117:       var m = mquery();",
          "118:       var n = m.collection(col);",
          "125:       var m = mquery();",
          "131:       var m = mquery();",
          "132:       var n = m.$where('x');",
          "139:       var m = mquery();",
          "144:       var m = mquery();",
          "",
          "[Added Lines]",
          "114:       const m = mquery();",
          "119:       const m = mquery();",
          "120:       const n = m.collection(col);",
          "127:       const m = mquery();",
          "133:       const m = mquery();",
          "134:       const n = m.$where('x');",
          "141:       const m = mquery();",
          "146:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:     });",
          "150:     describe('with one argument', function() {",
          "151:       it('that is an object', function() {",
          "153:         m.where({ name: 'flawed' });",
          "154:         assert.strictEqual(m._conditions.name, 'flawed');",
          "155:       });",
          "156:       it('that is a query', function() {",
          "159:         m.where(n);",
          "160:         assert.strictEqual(m._conditions.name, 'changed');",
          "161:       });",
          "162:       it('that is a string', function() {",
          "164:         m.where('name');",
          "165:         assert.equal('name', m._path);",
          "166:         assert.strictEqual(m._conditions.name, undefined);",
          "167:       });",
          "168:     });",
          "169:     it('with two arguments', function() {",
          "171:       m.where('name', 'The Great Pumpkin');",
          "172:       assert.equal('name', m._path);",
          "173:       assert.strictEqual(m._conditions.name, 'The Great Pumpkin');",
          "174:     });",
          "175:     it('is chainable', function() {",
          "180:       assert.equal(m, n);",
          "181:       n = m.where();",
          "182:       assert.equal(m, n);",
          "",
          "[Removed Lines]",
          "152:         var m = mquery();",
          "157:         var m = mquery({ name: 'first' });",
          "158:         var n = mquery({ name: 'changed' });",
          "163:         var m = mquery();",
          "170:       var m = mquery();",
          "176:       var m = mquery(),",
          "177:           n;",
          "179:       n = m.where('x', 'y');",
          "",
          "[Added Lines]",
          "154:         const m = mquery();",
          "159:         const m = mquery({ name: 'first' });",
          "160:         const n = mquery({ name: 'changed' });",
          "165:         const m = mquery();",
          "172:       const m = mquery();",
          "178:       const m = mquery();",
          "180:       let n = m.where('x', 'y');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:   });",
          "185:   describe('equals', function() {",
          "186:     it('must be called after where()', function() {",
          "188:       assert.throws(function() {",
          "189:         m.equals();",
          "190:       }, /must be used after where/);",
          "191:     });",
          "192:     it('sets value of path set with where()', function() {",
          "194:       m.where('age').equals(1000);",
          "195:       assert.deepEqual({ age: 1000 }, m._conditions);",
          "196:     });",
          "197:     it('is chainable', function() {",
          "200:       assert.equal(m, n);",
          "201:     });",
          "202:   });",
          "203:   describe('eq', function() {",
          "204:     it('is alias of equals', function() {",
          "206:       m.where('age').eq(1000);",
          "207:       assert.deepEqual({ age: 1000 }, m._conditions);",
          "208:     });",
          "209:   });",
          "210:   describe('or', function() {",
          "211:     it('pushes onto the internal $or condition', function() {",
          "213:       m.or({ 'Nightmare Before Christmas': true });",
          "215:     });",
          "216:     it('allows passing arrays', function() {",
          "219:       m.or(arg);",
          "220:       assert.deepEqual(arg, m._conditions.$or);",
          "221:     });",
          "222:     it('allows calling multiple times', function() {",
          "225:       m.or(arg);",
          "226:       m.or({ y: 1 });",
          "229:     });",
          "230:     it('is chainable', function() {",
          "233:       assert.deepEqual({ name: 'table', $or: [{ o: 'k' }] }, m._conditions);",
          "234:     });",
          "235:   });",
          "237:   describe('nor', function() {",
          "238:     it('pushes onto the internal $nor condition', function() {",
          "240:       m.nor({ 'Nightmare Before Christmas': true });",
          "242:     });",
          "243:     it('allows passing arrays', function() {",
          "246:       m.nor(arg);",
          "247:       assert.deepEqual(arg, m._conditions.$nor);",
          "248:     });",
          "249:     it('allows calling multiple times', function() {",
          "252:       m.nor(arg);",
          "253:       m.nor({ y: 1 });",
          "256:     });",
          "257:     it('is chainable', function() {",
          "260:       assert.deepEqual({ name: 'table', $nor: [{ o: 'k' }] }, m._conditions);",
          "261:     });",
          "262:   });",
          "264:   describe('and', function() {",
          "265:     it('pushes onto the internal $and condition', function() {",
          "267:       m.and({ 'Nightmare Before Christmas': true });",
          "269:     });",
          "270:     it('allows passing arrays', function() {",
          "273:       m.and(arg);",
          "274:       assert.deepEqual(arg, m._conditions.$and);",
          "275:     });",
          "276:     it('allows calling multiple times', function() {",
          "279:       m.and(arg);",
          "280:       m.and({ y: 1 });",
          "283:     });",
          "284:     it('is chainable', function() {",
          "287:       assert.deepEqual({ name: 'table', $and: [{ o: 'k' }] }, m._conditions);",
          "288:     });",
          "289:   });",
          "",
          "[Removed Lines]",
          "187:       var m = mquery();",
          "193:       var m = mquery();",
          "198:       var m = mquery();",
          "199:       var n = m.where('x').equals(3);",
          "205:       var m = mquery();",
          "212:       var m = mquery();",
          "214:       assert.deepEqual([{'Nightmare Before Christmas': true }], m._conditions.$or);",
          "217:       var m = mquery();",
          "218:       var arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];",
          "223:       var m = mquery();",
          "224:       var arg = [{ looper: true }, { x: 1 }];",
          "227:       m.or([{ w: 'oo' }, { z: 'oo'} ]);",
          "228:       assert.deepEqual([{looper:true},{x:1},{y:1},{w:'oo'},{z:'oo'}], m._conditions.$or);",
          "231:       var m = mquery();",
          "232:       m.or({ o: 'k'}).where('name', 'table');",
          "239:       var m = mquery();",
          "241:       assert.deepEqual([{'Nightmare Before Christmas': true }], m._conditions.$nor);",
          "244:       var m = mquery();",
          "245:       var arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];",
          "250:       var m = mquery();",
          "251:       var arg = [{ looper: true }, { x: 1 }];",
          "254:       m.nor([{ w: 'oo' }, { z: 'oo'} ]);",
          "255:       assert.deepEqual([{looper:true},{x:1},{y:1},{w:'oo'},{z:'oo'}], m._conditions.$nor);",
          "258:       var m = mquery();",
          "259:       m.nor({ o: 'k'}).where('name', 'table');",
          "266:       var m = mquery();",
          "268:       assert.deepEqual([{'Nightmare Before Christmas': true }], m._conditions.$and);",
          "271:       var m = mquery();",
          "272:       var arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];",
          "277:       var m = mquery();",
          "278:       var arg = [{ looper: true }, { x: 1 }];",
          "281:       m.and([{ w: 'oo' }, { z: 'oo'} ]);",
          "282:       assert.deepEqual([{looper:true},{x:1},{y:1},{w:'oo'},{z:'oo'}], m._conditions.$and);",
          "285:       var m = mquery();",
          "286:       m.and({ o: 'k'}).where('name', 'table');",
          "",
          "[Added Lines]",
          "188:       const m = mquery();",
          "194:       const m = mquery();",
          "199:       const m = mquery();",
          "200:       const n = m.where('x').equals(3);",
          "206:       const m = mquery();",
          "213:       const m = mquery();",
          "215:       assert.deepEqual([{ 'Nightmare Before Christmas': true }], m._conditions.$or);",
          "218:       const m = mquery();",
          "219:       const arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];",
          "224:       const m = mquery();",
          "225:       const arg = [{ looper: true }, { x: 1 }];",
          "228:       m.or([{ w: 'oo' }, { z: 'oo' }]);",
          "229:       assert.deepEqual([{ looper: true }, { x: 1 }, { y: 1 }, { w: 'oo' }, { z: 'oo' }], m._conditions.$or);",
          "232:       const m = mquery();",
          "233:       m.or({ o: 'k' }).where('name', 'table');",
          "240:       const m = mquery();",
          "242:       assert.deepEqual([{ 'Nightmare Before Christmas': true }], m._conditions.$nor);",
          "245:       const m = mquery();",
          "246:       const arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];",
          "251:       const m = mquery();",
          "252:       const arg = [{ looper: true }, { x: 1 }];",
          "255:       m.nor([{ w: 'oo' }, { z: 'oo' }]);",
          "256:       assert.deepEqual([{ looper: true }, { x: 1 }, { y: 1 }, { w: 'oo' }, { z: 'oo' }], m._conditions.$nor);",
          "259:       const m = mquery();",
          "260:       m.nor({ o: 'k' }).where('name', 'table');",
          "267:       const m = mquery();",
          "269:       assert.deepEqual([{ 'Nightmare Before Christmas': true }], m._conditions.$and);",
          "272:       const m = mquery();",
          "273:       const arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];",
          "278:       const m = mquery();",
          "279:       const arg = [{ looper: true }, { x: 1 }];",
          "282:       m.and([{ w: 'oo' }, { z: 'oo' }]);",
          "283:       assert.deepEqual([{ looper: true }, { x: 1 }, { y: 1 }, { w: 'oo' }, { z: 'oo' }], m._conditions.$and);",
          "286:       const m = mquery();",
          "287:       m.and({ o: 'k' }).where('name', 'table');",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "291:   function generalCondition(type) {",
          "292:     return function() {",
          "293:       it('accepts 2 args', function() {",
          "296:         check['$' + type] = 3;",
          "297:         assert.deepEqual(m._conditions.count, check);",
          "298:       });",
          "299:       it('uses previously set `where` path if 1 arg passed', function() {",
          "302:         check['$' + type] = 3;",
          "303:         assert.deepEqual(m._conditions.count, check);",
          "304:       });",
          "",
          "[Removed Lines]",
          "294:         var m = mquery()[type]('count', 3);",
          "295:         var check = {};",
          "300:         var m = mquery().where('count')[type](3);",
          "301:         var check = {};",
          "",
          "[Added Lines]",
          "295:         const m = mquery()[type]('count', 3);",
          "296:         const check = {};",
          "301:         const m = mquery().where('count')[type](3);",
          "302:         const check = {};",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:         }, /must be used after where/);",
          "309:       });",
          "310:       it('is chainable', function() {",
          "313:         check.count['$' + type] = 3;",
          "314:         assert.deepEqual(m._conditions, check);",
          "315:       });",
          "316:       it('overwrites previous value', function() {",
          "319:         check['$' + type] = 8;",
          "320:         assert.deepEqual(m._conditions.count, check);",
          "321:       });",
          "",
          "[Removed Lines]",
          "311:         var m = mquery().where('count')[type](3).where('x', 8);",
          "312:         var check = {x: 8, count: {}};",
          "317:         var m = mquery().where('count')[type](3)[type](8);",
          "318:         var check = {};",
          "",
          "[Added Lines]",
          "312:         const m = mquery().where('count')[type](3).where('x', 8);",
          "313:         const check = { x: 8, count: {} };",
          "318:         const m = mquery().where('count')[type](3)[type](8);",
          "319:         const check = {};",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "334:         }, /must be used after where/);",
          "335:       });",
          "336:       it('works', function() {",
          "339:       });",
          "340:     });",
          "",
          "[Removed Lines]",
          "337:         var m = mquery().where('madmen').mod([10,20]);",
          "338:         assert.deepEqual(m._conditions, { madmen: { $mod: [10,20] }});",
          "",
          "[Added Lines]",
          "338:         const m = mquery().where('madmen').mod([10, 20]);",
          "339:         assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "346:         }, /must be used after where/);",
          "347:       });",
          "348:       it('works', function() {",
          "351:       });",
          "352:     });",
          "354:     it('with 2 arguments and second is an array', function() {",
          "357:     });",
          "359:     it('with 3 arguments', function() {",
          "362:     });",
          "364:     it('is chainable', function() {",
          "367:       assert.deepEqual(m._conditions, check);",
          "368:     });",
          "369:   });",
          "",
          "[Removed Lines]",
          "349:         var m = mquery().where('madmen').mod(10, 20);",
          "350:         assert.deepEqual(m._conditions, { madmen: { $mod: [10,20] }});",
          "355:       var m = mquery().mod('madmen', [10,20]);",
          "356:       assert.deepEqual(m._conditions, { madmen: { $mod: [10,20] }});",
          "360:       var m = mquery().mod('madmen', 10, 20);",
          "361:       assert.deepEqual(m._conditions, { madmen: { $mod: [10,20] }});",
          "365:       var m = mquery().mod('madmen', 10, 20).where('x', 8);",
          "366:       var check = { madmen: { $mod: [10,20] }, x: 8};",
          "",
          "[Added Lines]",
          "350:         const m = mquery().where('madmen').mod(10, 20);",
          "351:         assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });",
          "356:       const m = mquery().mod('madmen', [10, 20]);",
          "357:       assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });",
          "361:       const m = mquery().mod('madmen', 10, 20);",
          "362:       assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });",
          "366:       const m = mquery().mod('madmen', 10, 20).where('x', 8);",
          "367:       const check = { madmen: { $mod: [10, 20] }, x: 8 };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "376:         }, /must be used after where/);",
          "377:       });",
          "378:       it('works', function() {",
          "381:         assert.deepEqual(m._conditions, check);",
          "382:       });",
          "383:     });",
          "",
          "[Removed Lines]",
          "379:         var m = mquery().where('name').exists();",
          "380:         var check = { name: { $exists: true }};",
          "",
          "[Added Lines]",
          "380:         const m = mquery().where('name').exists();",
          "381:         const check = { name: { $exists: true } };",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "390:           }, /must be used after where/);",
          "391:         });",
          "392:         it('works', function() {",
          "395:           assert.deepEqual(m._conditions, check);",
          "396:         });",
          "397:       });",
          "398:       describe('that is not boolean', function() {",
          "399:         it('sets the value to `true`', function() {",
          "402:           assert.deepEqual(m._conditions, check);",
          "403:         });",
          "404:       });",
          "",
          "[Removed Lines]",
          "393:           var m = mquery().exists('name', false);",
          "394:           var check = { name: { $exists: false }};",
          "400:           var m = mquery().where('name').exists('yummy');",
          "401:           var check = { yummy: { $exists: true }};",
          "",
          "[Added Lines]",
          "394:           const m = mquery().exists('name', false);",
          "395:           const check = { name: { $exists: false } };",
          "401:           const m = mquery().where('name').exists('yummy');",
          "402:           const check = { yummy: { $exists: true } };",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "407:     describe('with 2 args', function() {",
          "408:       it('works', function() {",
          "411:         assert.deepEqual(m._conditions, check);",
          "412:       });",
          "413:     });",
          "415:     it('is chainable', function() {",
          "418:       assert.deepEqual(m._conditions, check);",
          "419:     });",
          "420:   });",
          "",
          "[Removed Lines]",
          "409:         var m = mquery().exists('yummy', false);",
          "410:         var check = { yummy: { $exists: false }};",
          "416:       var m = mquery().where('name').exists().find({ x: 1 });",
          "417:       var check = { name: { $exists: true }, x: 1};",
          "",
          "[Added Lines]",
          "410:         const m = mquery().exists('yummy', false);",
          "411:         const check = { yummy: { $exists: false } };",
          "417:       const m = mquery().where('name').exists().find({ x: 1 });",
          "418:       const check = { name: { $exists: true }, x: 1 };",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "446:           }, /must be used after where/);",
          "447:         });",
          "448:         it('works', function() {",
          "451:         });",
          "452:       });",
          "453:       describe('that is a function', function() {",
          "",
          "[Removed Lines]",
          "449:           var m = mquery().where('comment').elemMatch({ author: 'joe', votes: {$gte: 3 }});",
          "450:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: {$gte: 3}}}}, m._conditions);",
          "",
          "[Added Lines]",
          "450:           const m = mquery().where('comment').elemMatch({ author: 'joe', votes: { $gte: 3 } });",
          "451:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "457:           }, /must be used after where/);",
          "458:         });",
          "459:         it('works', function() {",
          "462:           });",
          "464:         });",
          "465:       });",
          "466:     });",
          "",
          "[Removed Lines]",
          "460:           var m = mquery().where('comment').elemMatch(function(query) {",
          "461:             query.where({ author: 'joe', votes: {$gte: 3 }});",
          "463:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: {$gte: 3}}}}, m._conditions);",
          "",
          "[Added Lines]",
          "461:           const m = mquery().where('comment').elemMatch(function(query) {",
          "462:             query.where({ author: 'joe', votes: { $gte: 3 } });",
          "464:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "468:     describe('with 2 arguments', function() {",
          "469:       describe('and the 2nd is an object', function() {",
          "470:         it('works', function() {",
          "473:         });",
          "474:       });",
          "475:       describe('and the 2nd is a function', function() {",
          "476:         it('works', function() {",
          "479:           });",
          "481:         });",
          "482:       });",
          "483:       it('and the 2nd is not a function or object', function() {",
          "",
          "[Removed Lines]",
          "471:           var m = mquery().elemMatch('comment', { author: 'joe', votes: {$gte: 3 }});",
          "472:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: {$gte: 3}}}}, m._conditions);",
          "477:           var m = mquery().elemMatch('comment', function(query) {",
          "478:             query.where({ author: 'joe', votes: {$gte: 3 }});",
          "480:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: {$gte: 3}}}}, m._conditions);",
          "",
          "[Added Lines]",
          "472:           const m = mquery().elemMatch('comment', { author: 'joe', votes: { $gte: 3 } });",
          "473:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);",
          "478:           const m = mquery().elemMatch('comment', function(query) {",
          "479:             query.where({ author: 'joe', votes: { $gte: 3 } });",
          "481:           assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "491:   describe('within', function() {",
          "492:     it('is chainable', function() {",
          "494:       assert.equal(m.where('a').within(), m);",
          "495:     });",
          "496:     describe('when called with arguments', function() {",
          "",
          "[Removed Lines]",
          "493:       var m = mquery();",
          "",
          "[Added Lines]",
          "494:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "510:           }, /Invalid argument/);",
          "511:         });",
          "512:         it('delegates to circle when center exists', function() {",
          "515:         });",
          "516:         it('delegates to box when exists', function() {",
          "519:         });",
          "520:         it('delegates to polygon when exists', function() {",
          "523:         });",
          "524:         it('delegates to geometry when exists', function() {",
          "527:         });",
          "528:       });",
          "530:       describe('of length 2', function() {",
          "531:         it('delegates to box()', function() {",
          "534:         });",
          "535:       });",
          "537:       describe('of length > 2', function() {",
          "538:         it('delegates to polygon()', function() {",
          "541:         });",
          "542:       });",
          "543:     });",
          "",
          "[Removed Lines]",
          "513:           var m = mquery().where('loc').within({ center: [10,10], radius: 3 });",
          "514:           assert.deepEqual({ $geoWithin: {$center:[[10,10], 3]}}, m._conditions.loc);",
          "517:           var m = mquery().where('loc').within({ box: [[10,10], [11,14]] });",
          "518:           assert.deepEqual({ $geoWithin: {$box:[[10,10], [11,14]]}}, m._conditions.loc);",
          "521:           var m = mquery().where('loc').within({ polygon: [[10,10], [11,14],[10,9]] });",
          "522:           assert.deepEqual({ $geoWithin: {$polygon:[[10,10], [11,14],[10,9]]}}, m._conditions.loc);",
          "525:           var m = mquery().where('loc').within({ type: 'Polygon', coordinates: [[10,10], [11,14],[10,9]] });",
          "526:           assert.deepEqual({ $geoWithin: {$geometry: {type:'Polygon', coordinates: [[10,10], [11,14],[10,9]]}}}, m._conditions.loc);",
          "532:           var m = mquery().where('loc').within([1,2],[2,5]);",
          "533:           assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1,2],[2,5]]}});",
          "539:           var m = mquery().where('loc').within([1,2],[2,5],[2,4],[1,3]);",
          "540:           assert.deepEqual(m._conditions.loc, { $geoWithin: { $polygon: [[1,2],[2,5],[2,4],[1,3]]}});",
          "",
          "[Added Lines]",
          "514:           const m = mquery().where('loc').within({ center: [10, 10], radius: 3 });",
          "515:           assert.deepEqual({ $geoWithin: { $center: [[10, 10], 3] } }, m._conditions.loc);",
          "518:           const m = mquery().where('loc').within({ box: [[10, 10], [11, 14]] });",
          "519:           assert.deepEqual({ $geoWithin: { $box: [[10, 10], [11, 14]] } }, m._conditions.loc);",
          "522:           const m = mquery().where('loc').within({ polygon: [[10, 10], [11, 14], [10, 9]] });",
          "523:           assert.deepEqual({ $geoWithin: { $polygon: [[10, 10], [11, 14], [10, 9]] } }, m._conditions.loc);",
          "526:           const m = mquery().where('loc').within({ type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] });",
          "527:           assert.deepEqual({ $geoWithin: { $geometry: { type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] } } }, m._conditions.loc);",
          "533:           const m = mquery().where('loc').within([1, 2], [2, 5]);",
          "534:           assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1, 2], [2, 5]] } });",
          "540:           const m = mquery().where('loc').within([1, 2], [2, 5], [2, 4], [1, 3]);",
          "541:           assert.deepEqual(m._conditions.loc, { $geoWithin: { $polygon: [[1, 2], [2, 5], [2, 4], [1, 3]] } });",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "553:     describe('when called with arguments', function() {",
          "554:       describe('of length 1', function() {",
          "555:         it('delegates to circle when center exists', function() {",
          "558:         });",
          "559:         it('delegates to box when exists', function() {",
          "562:         });",
          "563:         it('delegates to polygon when exists', function() {",
          "566:         });",
          "567:         it('delegates to geometry when exists', function() {",
          "570:         });",
          "571:       });",
          "573:       describe('of length 2', function() {",
          "574:         it('delegates to box()', function() {",
          "577:         });",
          "578:       });",
          "580:       describe('of length > 2', function() {",
          "581:         it('delegates to polygon()', function() {",
          "584:         });",
          "585:       });",
          "586:     });",
          "",
          "[Removed Lines]",
          "556:           var m = mquery().where('loc').within({ center: [10,10], radius: 3 });",
          "557:           assert.deepEqual({ $within: {$center:[[10,10], 3]}}, m._conditions.loc);",
          "560:           var m = mquery().where('loc').within({ box: [[10,10], [11,14]] });",
          "561:           assert.deepEqual({ $within: {$box:[[10,10], [11,14]]}}, m._conditions.loc);",
          "564:           var m = mquery().where('loc').within({ polygon: [[10,10], [11,14],[10,9]] });",
          "565:           assert.deepEqual({ $within: {$polygon:[[10,10], [11,14],[10,9]]}}, m._conditions.loc);",
          "568:           var m = mquery().where('loc').within({ type: 'Polygon', coordinates: [[10,10], [11,14],[10,9]] });",
          "569:           assert.deepEqual({ $within: {$geometry: {type:'Polygon', coordinates: [[10,10], [11,14],[10,9]]}}}, m._conditions.loc);",
          "575:           var m = mquery().where('loc').within([1,2],[2,5]);",
          "576:           assert.deepEqual(m._conditions.loc, { $within: { $box: [[1,2],[2,5]]}});",
          "582:           var m = mquery().where('loc').within([1,2],[2,5],[2,4],[1,3]);",
          "583:           assert.deepEqual(m._conditions.loc, { $within: { $polygon: [[1,2],[2,5],[2,4],[1,3]]}});",
          "",
          "[Added Lines]",
          "557:           const m = mquery().where('loc').within({ center: [10, 10], radius: 3 });",
          "558:           assert.deepEqual({ $within: { $center: [[10, 10], 3] } }, m._conditions.loc);",
          "561:           const m = mquery().where('loc').within({ box: [[10, 10], [11, 14]] });",
          "562:           assert.deepEqual({ $within: { $box: [[10, 10], [11, 14]] } }, m._conditions.loc);",
          "565:           const m = mquery().where('loc').within({ polygon: [[10, 10], [11, 14], [10, 9]] });",
          "566:           assert.deepEqual({ $within: { $polygon: [[10, 10], [11, 14], [10, 9]] } }, m._conditions.loc);",
          "569:           const m = mquery().where('loc').within({ type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] });",
          "570:           assert.deepEqual({ $within: { $geometry: { type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] } } }, m._conditions.loc);",
          "576:           const m = mquery().where('loc').within([1, 2], [2, 5]);",
          "577:           assert.deepEqual(m._conditions.loc, { $within: { $box: [[1, 2], [2, 5]] } });",
          "583:           const m = mquery().where('loc').within([1, 2], [2, 5], [2, 4], [1, 3]);",
          "584:           assert.deepEqual(m._conditions.loc, { $within: { $polygon: [[1, 2], [2, 5], [2, 4], [1, 3]] } });",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "597:     describe('with > 3 arguments', function() {",
          "598:       it('throws', function() {",
          "599:         assert.throws(function() {",
          "601:         }, /Invalid argument/);",
          "602:       });",
          "603:     });",
          "",
          "[Removed Lines]",
          "600:           mquery().box(1,2,3,4);",
          "",
          "[Added Lines]",
          "601:           mquery().box(1, 2, 3, 4);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "605:     describe('with 2 arguments', function() {",
          "606:       it('throws if not used after where()', function() {",
          "607:         assert.throws(function() {",
          "609:         }, /must be used after where/);",
          "610:       });",
          "611:       it('works', function() {",
          "614:       });",
          "615:     });",
          "617:     describe('with 3 arguments', function() {",
          "618:       it('works', function() {",
          "621:       });",
          "622:     });",
          "623:   });",
          "",
          "[Removed Lines]",
          "608:           mquery().box([],[]);",
          "612:         var m = mquery().where('loc').box([1,2],[3,4]);",
          "613:         assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1,2],[3,4]] }});",
          "619:         var m = mquery().box('loc', [1,2],[3,4]);",
          "620:         assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1,2],[3,4]] }});",
          "",
          "[Added Lines]",
          "609:           mquery().box([], []);",
          "613:         const m = mquery().where('loc').box([1, 2], [3, 4]);",
          "614:         assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1, 2], [3, 4]] } });",
          "620:         const m = mquery().box('loc', [1, 2], [3, 4]);",
          "621:         assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1, 2], [3, 4]] } });",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "630:         }, /must be used after where/);",
          "632:         assert.doesNotThrow(function() {",
          "634:         });",
          "635:       });",
          "637:       it('assigns arguments to within polygon condition', function() {",
          "640:       });",
          "641:     });",
          "643:     describe('when first arg is a string', function() {",
          "644:       it('assigns remaining arguments to within polygon condition', function() {",
          "647:       });",
          "648:     });",
          "649:   });",
          "",
          "[Removed Lines]",
          "633:           mquery().where('loc').polygon([1,2], [2,3], [3,6]);",
          "638:         var m = mquery().where('loc').polygon([1,2], [2,3], [3,6]);",
          "639:         assert.deepEqual(m._conditions, { loc: {$geoWithin: {$polygon: [[1,2],[2,3],[3,6]]}} });",
          "645:         var m = mquery().polygon('loc', [1,2], [2,3], [3,6]);",
          "646:         assert.deepEqual(m._conditions, { loc: {$geoWithin: {$polygon: [[1,2],[2,3],[3,6]]}} });",
          "",
          "[Added Lines]",
          "634:           mquery().where('loc').polygon([1, 2], [2, 3], [3, 6]);",
          "639:         const m = mquery().where('loc').polygon([1, 2], [2, 3], [3, 6]);",
          "640:         assert.deepEqual(m._conditions, { loc: { $geoWithin: { $polygon: [[1, 2], [2, 3], [3, 6]] } } });",
          "646:         const m = mquery().polygon('loc', [1, 2], [2, 3], [3, 6]);",
          "647:         assert.deepEqual(m._conditions, { loc: { $geoWithin: { $polygon: [[1, 2], [2, 3], [3, 6]] } } });",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "655:           mquery().circle('x');",
          "656:         }, /must be used after where/);",
          "657:         assert.doesNotThrow(function() {",
          "659:         });",
          "660:       });",
          "661:       it('works', function() {",
          "664:       });",
          "665:     });",
          "666:     describe('with 3 args', function() {",
          "667:       it('throws', function() {",
          "668:         assert.throws(function() {",
          "670:         }, /Invalid argument/);",
          "671:       });",
          "672:     });",
          "",
          "[Removed Lines]",
          "658:           mquery().where('loc').circle({center:[0,0], radius: 3 });",
          "662:         var m = mquery().where('loc').circle({center:[0,0], radius: 3 });",
          "663:         assert.deepEqual(m._conditions, { loc: { $geoWithin: {$center: [[0,0],3] }}});",
          "669:           mquery().where('loc').circle(1,2,3);",
          "",
          "[Added Lines]",
          "659:           mquery().where('loc').circle({ center: [0, 0], radius: 3 });",
          "663:         const m = mquery().where('loc').circle({ center: [0, 0], radius: 3 });",
          "664:         assert.deepEqual(m._conditions, { loc: { $geoWithin: { $center: [[0, 0], 3] } } });",
          "670:           mquery().where('loc').circle(1, 2, 3);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "678:         mquery().circle('loc', { radius: 1 });",
          "679:       }, /center and radius are required/);",
          "680:       assert.doesNotThrow(function() {",
          "682:       });",
          "683:     });",
          "684:   });",
          "686:   describe('geometry', function() {",
          "690:     it('must be called after within or intersects', function(done) {",
          "691:       assert.throws(function() {",
          "",
          "[Removed Lines]",
          "681:         mquery().circle('loc', { center: [1,2], radius: 1 });",
          "688:     var point = { type: 'Point', coordinates: [[0,0],[1,1]] };",
          "",
          "[Added Lines]",
          "682:         mquery().circle('loc', { center: [1, 2], radius: 1 });",
          "689:     const point = { type: 'Point', coordinates: [[0, 0], [1, 1]] };",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "706:     describe('when called with one argument', function() {",
          "707:       describe('after within()', function() {",
          "708:         it('and arg quacks like geoJSON', function(done) {",
          "711:           done();",
          "712:         });",
          "713:       });",
          "715:       describe('after intersects()', function() {",
          "716:         it('and arg quacks like geoJSON', function(done) {",
          "719:           done();",
          "720:         });",
          "721:       });",
          "723:       it('and arg does not quack like geoJSON', function(done) {",
          "724:         assert.throws(function() {",
          "726:         }, /Invalid argument/);",
          "727:         done();",
          "728:       });",
          "",
          "[Removed Lines]",
          "709:           var m = mquery().where('a').within().geometry(point);",
          "710:           assert.deepEqual({ a: { $geoWithin: { $geometry: point }}}, m._conditions);",
          "717:           var m = mquery().where('a').intersects().geometry(point);",
          "718:           assert.deepEqual({ a: { $geoIntersects: { $geometry: point }}}, m._conditions);",
          "725:           mquery().where('b').within().geometry({type:1, coordinates:2});",
          "",
          "[Added Lines]",
          "710:           const m = mquery().where('a').within().geometry(point);",
          "711:           assert.deepEqual({ a: { $geoWithin: { $geometry: point } } }, m._conditions);",
          "718:           const m = mquery().where('a').intersects().geometry(point);",
          "719:           assert.deepEqual({ a: { $geoIntersects: { $geometry: point } } }, m._conditions);",
          "726:           mquery().where('b').within().geometry({ type: 1, coordinates: 2 });",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "741:     describe('when called with more than one arguments', function() {",
          "742:       it('throws', function(done) {",
          "743:         assert.throws(function() {",
          "745:         }, /Invalid argument/);",
          "746:         done();",
          "747:       });",
          "",
          "[Removed Lines]",
          "744:           mquery().where('a').within().geometry({type:'a',coordinates:[]}, 2);",
          "",
          "[Added Lines]",
          "745:           mquery().where('a').within().geometry({ type: 'a', coordinates: [] }, 2);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "751:   describe('intersects', function() {",
          "752:     it('must be used after where()', function(done) {",
          "754:       assert.throws(function() {",
          "755:         m.intersects();",
          "756:       }, /must be used after where/);",
          "",
          "[Removed Lines]",
          "753:       var m = mquery();",
          "",
          "[Added Lines]",
          "754:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "758:     });",
          "760:     it('sets geo comparison to \"$intersects\"', function(done) {",
          "762:       assert.equal('$geoIntersects', n._geoComparison);",
          "763:       done();",
          "764:     });",
          "766:     it('is chainable', function() {",
          "768:       assert.equal(m.where('a').intersects(), m);",
          "769:     });",
          "771:     it('calls geometry if argument quacks like geojson', function(done) {",
          "776:       m.geometry = function(arg) {",
          "777:         ran = true;",
          "",
          "[Removed Lines]",
          "761:       var n = mquery().where('a').intersects();",
          "767:       var m = mquery();",
          "772:       var m = mquery();",
          "773:       var o = { type: 'LineString', coordinates: [[0,1],[3,40]] };",
          "774:       var ran = false;",
          "",
          "[Added Lines]",
          "762:       const n = mquery().where('a').intersects();",
          "768:       const m = mquery();",
          "773:       const m = mquery();",
          "774:       const o = { type: 'LineString', coordinates: [[0, 1], [3, 40]] };",
          "775:       let ran = false;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "785:     });",
          "787:     it('throws if argument is not geometry-like', function(done) {",
          "790:       assert.throws(function() {",
          "791:         m.intersects(null);",
          "",
          "[Removed Lines]",
          "788:       var m = mquery().where('a');",
          "",
          "[Added Lines]",
          "789:       const m = mquery().where('a');",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "824:     describe('with 0 args', function() {",
          "825:       it('is compatible with geometry()', function(done) {",
          "828:         done();",
          "829:       });",
          "830:     });",
          "",
          "[Removed Lines]",
          "826:         var q = mquery().where('x').near().geometry({ type: 'Point', coordinates: [180, 11] });",
          "827:         assert.deepEqual({ $near: {$geometry: {type:'Point', coordinates: [180,11]}}}, q._conditions.x);",
          "",
          "[Added Lines]",
          "827:         const q = mquery().where('x').near().geometry({ type: 'Point', coordinates: [180, 11] });",
          "828:         assert.deepEqual({ $near: { $geometry: { type: 'Point', coordinates: [180, 11] } } }, q._conditions.x);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "837:       });",
          "838:       it('does not throw if used after where()', function() {",
          "839:         assert.doesNotThrow(function() {",
          "841:         });",
          "842:       });",
          "843:     });",
          "844:     describe('with > 2 args', function() {",
          "845:       it('throws', function() {",
          "846:         assert.throws(function() {",
          "848:         }, /Invalid argument/);",
          "849:       });",
          "850:     });",
          "852:     it('creates $geometry args for GeoJSON', function() {",
          "855:     });",
          "857:     it('expects `center`', function() {",
          "",
          "[Removed Lines]",
          "840:           mquery().where('loc').near({center:[1,1]});",
          "847:           mquery().near(1,2,3);",
          "853:       var m = mquery().where('loc').near({ center: { type: 'Point', coordinates: [10,10] }});",
          "854:       assert.deepEqual({ $near: {$geometry: {type:'Point', coordinates: [10,10]}}}, m._conditions.loc);",
          "",
          "[Added Lines]",
          "841:           mquery().where('loc').near({ center: [1, 1] });",
          "848:           mquery().near(1, 2, 3);",
          "854:       const m = mquery().where('loc').near({ center: { type: 'Point', coordinates: [10, 10] } });",
          "855:       assert.deepEqual({ $near: { $geometry: { type: 'Point', coordinates: [10, 10] } } }, m._conditions.loc);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "859:         mquery().near('loc', { maxDistance: 3 });",
          "860:       }, /center is required/);",
          "861:       assert.doesNotThrow(function() {",
          "863:       });",
          "864:     });",
          "866:     it('accepts spherical conditions', function() {",
          "869:     });",
          "871:     it('is non-spherical by default', function() {",
          "874:     });",
          "876:     it('supports maxDistance', function() {",
          "879:     });",
          "881:     it('supports minDistance', function() {",
          "884:     });",
          "886:     it('is chainable', function() {",
          "889:     });",
          "891:     describe('supports passing GeoJSON, gh-13', function() {",
          "892:       it('with center', function() {",
          "895:           maxDistance: 2",
          "896:         });",
          "899:           loc: {",
          "900:             $near: {",
          "901:               $geometry: {",
          "902:                 type: 'Point',",
          "904:               },",
          "906:             }",
          "907:           }",
          "908:         };",
          "",
          "[Removed Lines]",
          "862:         mquery().near('loc', { center: [3,4] });",
          "867:       var m = mquery().where('loc').near({ center: [1,2], spherical: true });",
          "868:       assert.deepEqual(m._conditions, { loc: { $nearSphere: [1,2]}});",
          "872:       var m = mquery().where('loc').near({ center: [1,2] });",
          "873:       assert.deepEqual(m._conditions, { loc: { $near: [1,2]}});",
          "877:       var m = mquery().where('loc').near({ center: [1,2], maxDistance:4 });",
          "878:       assert.deepEqual(m._conditions, { loc: { $near: [1,2], $maxDistance: 4}});",
          "882:       var m = mquery().where('loc').near({ center: [1,2], minDistance:4 });",
          "883:       assert.deepEqual(m._conditions, { loc: { $near: [1,2], $minDistance: 4}});",
          "887:       var m = mquery().where('loc').near({ center: [1,2], maxDistance:4 }).find({ x: 1 });",
          "888:       assert.deepEqual(m._conditions, { loc: { $near: [1,2], $maxDistance: 4}, x: 1});",
          "893:         var m = mquery().where('loc').near({",
          "894:           center: { type: 'Point', coordinates: [1,1] },",
          "898:         var expect = {",
          "903:                 coordinates : [1,1]",
          "905:               $maxDistance : 2",
          "",
          "[Added Lines]",
          "863:         mquery().near('loc', { center: [3, 4] });",
          "868:       const m = mquery().where('loc').near({ center: [1, 2], spherical: true });",
          "869:       assert.deepEqual(m._conditions, { loc: { $nearSphere: [1, 2] } });",
          "873:       const m = mquery().where('loc').near({ center: [1, 2] });",
          "874:       assert.deepEqual(m._conditions, { loc: { $near: [1, 2] } });",
          "878:       const m = mquery().where('loc').near({ center: [1, 2], maxDistance: 4 });",
          "879:       assert.deepEqual(m._conditions, { loc: { $near: [1, 2], $maxDistance: 4 } });",
          "883:       const m = mquery().where('loc').near({ center: [1, 2], minDistance: 4 });",
          "884:       assert.deepEqual(m._conditions, { loc: { $near: [1, 2], $minDistance: 4 } });",
          "888:       const m = mquery().where('loc').near({ center: [1, 2], maxDistance: 4 }).find({ x: 1 });",
          "889:       assert.deepEqual(m._conditions, { loc: { $near: [1, 2], $maxDistance: 4 }, x: 1 });",
          "894:         const m = mquery().where('loc').near({",
          "895:           center: { type: 'Point', coordinates: [1, 1] },",
          "899:         const expect = {",
          "904:                 coordinates: [1, 1]",
          "906:               $maxDistance: 2",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "917:   describe('select', function() {",
          "918:     describe('with 0 args', function() {",
          "919:       it('is chainable', function() {",
          "921:         assert.equal(m, m.select());",
          "922:       });",
          "923:     });",
          "925:     it('accepts an object', function() {",
          "928:       assert.deepEqual(m._fields, o);",
          "929:     });",
          "931:     it('accepts a string', function() {",
          "934:       assert.deepEqual(m._fields, { x: 1, y: 0 });",
          "935:     });",
          "937:     it('does accept an array', function() {",
          "940:       assert.deepEqual(m._fields, { x: 1, y: 0 });",
          "941:     });",
          "943:     it('merges previous arguments', function() {",
          "946:       m.select('z -u w').select({ x: 0 });",
          "947:       assert.deepEqual(m._fields, {",
          "948:         x: 0,",
          "",
          "[Removed Lines]",
          "920:         var m = mquery();",
          "926:       var o = { x: 1, y: 1 };",
          "927:       var m = mquery().select(o);",
          "932:       var o = 'x -y';",
          "933:       var m = mquery().select(o);",
          "938:       var o = ['x', '-y'];",
          "939:       var m = mquery().select(o);",
          "944:       var o = { x: 1, y: 0, a: 1 };",
          "945:       var m = mquery().select(o);",
          "",
          "[Added Lines]",
          "921:         const m = mquery();",
          "927:       const o = { x: 1, y: 1 };",
          "928:       const m = mquery().select(o);",
          "933:       const o = 'x -y';",
          "934:       const m = mquery().select(o);",
          "939:       const o = ['x', '-y'];",
          "940:       const m = mquery().select(o);",
          "945:       const o = { x: 1, y: 0, a: 1 };",
          "946:       const m = mquery().select(o);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "961:     });",
          "963:     it('accepts arguments objects', function() {",
          "965:       function t() {",
          "966:         m.select(arguments);",
          "967:         assert.deepEqual(m._fields, { x: 1, y: 0 });",
          "",
          "[Removed Lines]",
          "964:       var m = mquery();",
          "",
          "[Added Lines]",
          "965:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "975:   describe('selected', function() {",
          "976:     it('returns true when fields have been selected', function(done) {",
          "979:       m = mquery().select({ name: 1 });",
          "980:       assert.ok(m.selected());",
          "",
          "[Removed Lines]",
          "977:       var m;",
          "",
          "[Added Lines]",
          "978:       let m;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "986:     });",
          "988:     it('returns false when no fields have been selected', function(done) {",
          "990:       assert.strictEqual(false, m.selected());",
          "991:       done();",
          "992:     });",
          "",
          "[Removed Lines]",
          "989:       var m = mquery();",
          "",
          "[Added Lines]",
          "990:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1015:     describe('returns true', function() {",
          "1016:       it('when fields have been included', function(done) {",
          "1017:         assert.equal(true, mquery().select('name').selectedInclusively());",
          "1019:         done();",
          "1020:       });",
          "1021:     });",
          "",
          "[Removed Lines]",
          "1018:         assert.equal(true, mquery().select({ name:1 }).selectedInclusively());",
          "",
          "[Added Lines]",
          "1019:         assert.equal(true, mquery().select({ name: 1 }).selectedInclusively());",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1038:     describe('returns true', function() {",
          "1039:       it('when any field has been excluded', function(done) {",
          "1040:         assert.equal(true, mquery().select('-name').selectedExclusively());",
          "1042:         assert.equal(true, mquery().select('-_id').selectedExclusively());",
          "1043:         assert.strictEqual(true, mquery().select('name bio -_id').selectedExclusively());",
          "1044:         assert.strictEqual(true, mquery().select({ name: 1, _id: 0 }).selectedExclusively());",
          "",
          "[Removed Lines]",
          "1041:         assert.equal(true, mquery().select({ name:0 }).selectedExclusively());",
          "",
          "[Added Lines]",
          "1042:         assert.equal(true, mquery().select({ name: 0 }).selectedExclusively());",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1050:   describe('slice', function() {",
          "1051:     describe('with 0 args', function() {",
          "1052:       it('is chainable', function() {",
          "1054:         assert.equal(m, m.slice());",
          "1055:       });",
          "1056:       it('is a noop', function() {",
          "1058:         assert.deepEqual(m._fields, undefined);",
          "1059:       });",
          "1060:     });",
          "",
          "[Removed Lines]",
          "1053:         var m = mquery();",
          "1057:         var m = mquery().slice();",
          "",
          "[Added Lines]",
          "1054:         const m = mquery();",
          "1058:         const m = mquery().slice();",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1069:         });",
          "1070:       });",
          "1071:       it('that is a number', function() {",
          "1073:         query.where('collection').slice(5);",
          "1075:       });",
          "1076:       it('that is an array', function() {",
          "1080:       });",
          "1081:       it('that is an object', function() {",
          "1083:         query.slice({ collection: [5, 10] });",
          "1085:       });",
          "1086:     });",
          "",
          "[Removed Lines]",
          "1072:         var query = mquery();",
          "1074:         assert.deepEqual(query._fields, {collection: {$slice: 5}});",
          "1077:         var query = mquery();",
          "1078:         query.where('collection').slice([5,10]);",
          "1079:         assert.deepEqual(query._fields, {collection: {$slice: [5,10]}});",
          "1082:         var query = mquery();",
          "1084:         assert.deepEqual(query._fields, {collection: {$slice: [5,10]}});",
          "",
          "[Added Lines]",
          "1073:         const query = mquery();",
          "1075:         assert.deepEqual(query._fields, { collection: { $slice: 5 } });",
          "1078:         const query = mquery();",
          "1079:         query.where('collection').slice([5, 10]);",
          "1080:         assert.deepEqual(query._fields, { collection: { $slice: [5, 10] } });",
          "1083:         const query = mquery();",
          "1085:         assert.deepEqual(query._fields, { collection: { $slice: [5, 10] } });",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1089:       describe('and first is a number', function() {",
          "1090:         it('throws if not called after where', function() {",
          "1091:           assert.throws(function() {",
          "1093:           }, /must be used after where/);",
          "1094:         });",
          "1095:         it('does not throw if used after where', function() {",
          "1099:         });",
          "1100:       });",
          "1101:       it('and first is not a number', function() {",
          "1104:       });",
          "1105:     });",
          "1107:     describe('with 3 args', function() {",
          "1108:       it('works', function() {",
          "1110:         query.slice('collection', 14, 10);",
          "1112:       });",
          "1113:     });",
          "",
          "[Removed Lines]",
          "1092:             mquery().slice(2,3);",
          "1096:           var query = mquery();",
          "1097:           query.where('collection').slice(2,3);",
          "1098:           assert.deepEqual(query._fields, {collection: {$slice: [2,3]}});",
          "1102:         var query = mquery().slice('collection', [-5, 2]);",
          "1103:         assert.deepEqual(query._fields, {collection: {$slice: [-5,2]}});",
          "1109:         var query = mquery();",
          "1111:         assert.deepEqual(query._fields, {collection: {$slice: [14, 10]}});",
          "",
          "[Added Lines]",
          "1093:             mquery().slice(2, 3);",
          "1097:           const query = mquery();",
          "1098:           query.where('collection').slice(2, 3);",
          "1099:           assert.deepEqual(query._fields, { collection: { $slice: [2, 3] } });",
          "1103:         const query = mquery().slice('collection', [-5, 2]);",
          "1104:         assert.deepEqual(query._fields, { collection: { $slice: [-5, 2] } });",
          "1110:         const query = mquery();",
          "1112:         assert.deepEqual(query._fields, { collection: { $slice: [14, 10] } });",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1121:   describe('sort', function() {",
          "1122:     describe('with 0 args', function() {",
          "1123:       it('chains', function() {",
          "1125:         assert.equal(m, m.sort());",
          "1126:       });",
          "1127:       it('has no affect', function() {",
          "1129:         assert.equal(m.options.sort, undefined);",
          "1130:       });",
          "1131:     });",
          "1133:     it('works', function() {",
          "1135:       query.sort('a -c b');",
          "1138:       query = mquery();",
          "1142:       query = mquery();",
          "1143:       query.sort([['a', -1], ['c', 1], ['b', 'desc'], ['e', 'ascending'], ['f', 'descending']]);",
          "1144:       assert.deepEqual(query.options.sort, [['a', -1], ['c', 1], ['b', -1], ['e', 1], ['f', -1]]);",
          "1146:       query = mquery();",
          "1148:       try {",
          "1150:       } catch (err) {",
          "1151:         e = err;",
          "1152:       }",
          "",
          "[Removed Lines]",
          "1124:         var m = mquery();",
          "1128:         var m = mquery();",
          "1134:       var query = mquery();",
          "1136:       assert.deepEqual(query.options.sort, { a : 1, b: 1, c : -1});",
          "1139:       query.sort({'a': 1, 'c': -1, 'b': 'asc', e: 'descending', f: 'ascending'});",
          "1140:       assert.deepEqual(query.options.sort, {'a': 1, 'c': -1, 'b': 1, 'e': -1, 'f': 1});",
          "1147:       var e = undefined;",
          "1149:         query.sort([['a', 1], { 'b': 5 }]);",
          "",
          "[Added Lines]",
          "1125:         const m = mquery();",
          "1129:         const m = mquery();",
          "1135:       let query = mquery();",
          "1137:       assert.deepEqual(query.options.sort, { a: 1, b: 1, c: -1 });",
          "1140:       query.sort({ a: 1, c: -1, b: 'asc', e: 'descending', f: 'ascending' });",
          "1141:       assert.deepEqual(query.options.sort, { a: 1, c: -1, b: 1, e: -1, f: 1 });",
          "1148:       let e = undefined;",
          "1150:         query.sort([['a', 1], { b: 5 }]);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1166:     });",
          "1168:     it('handles $meta sort options', function() {",
          "1172:     });",
          "1174:     it('array syntax', function() {",
          "1176:       query.sort([['field', 1], ['test', -1]]);",
          "1177:       assert.deepEqual(query.options.sort, [['field', 1], ['test', -1]]);",
          "1178:     });",
          "1180:     it('throws with mixed array/object syntax', function() {",
          "1182:       assert.throws(function() {",
          "1183:         query.sort({ field: 1 }).sort([['test', -1]]);",
          "1184:       }, /Can't mix sort syntaxes/);",
          "",
          "[Removed Lines]",
          "1169:       var query = mquery();",
          "1170:       query.sort({ score: { $meta : 'textScore' } });",
          "1171:       assert.deepEqual(query.options.sort, { score : { $meta : 'textScore' } });",
          "1175:       var query = mquery();",
          "1181:       var query = mquery();",
          "",
          "[Added Lines]",
          "1170:       const query = mquery();",
          "1171:       query.sort({ score: { $meta: 'textScore' } });",
          "1172:       assert.deepEqual(query.options.sort, { score: { $meta: 'textScore' } });",
          "1176:       const query = mquery();",
          "1182:       const query = mquery();",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1191:       if (typeof Map === 'undefined') {",
          "1192:         return this.skip();",
          "1193:       }",
          "1195:       query.sort(new Map().set('field', 1).set('test', -1));",
          "1196:       assert.deepEqual(query.options.sort, new Map().set('field', 1).set('test', -1));",
          "1197:     });",
          "",
          "[Removed Lines]",
          "1194:       var query = mquery();",
          "",
          "[Added Lines]",
          "1195:       const query = mquery();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1200:   function simpleOption(type, options) {",
          "1201:     describe(type, function() {",
          "1202:       it('sets the ' + type + ' option', function() {",
          "1205:         assert.equal(2, m.options[optionName]);",
          "1206:       });",
          "1207:       it('is chainable', function() {",
          "1209:         assert.equal(m[type](3), m);",
          "1210:       });",
          "",
          "[Removed Lines]",
          "1203:         var m = mquery()[type](2);",
          "1204:         var optionName = options.name || type;",
          "1208:         var m = mquery();",
          "",
          "[Added Lines]",
          "1204:         const m = mquery()[type](2);",
          "1205:         const optionName = options.name || type;",
          "1209:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1214:     });",
          "1215:   }",
          "1224:   };",
          "1225:   Object.keys(negated).forEach(function(key) {",
          "1226:     simpleOption(key, negated[key]);",
          "",
          "[Removed Lines]",
          "1217:   var negated = {",
          "1218:     limit: {distinct: false, count: true},",
          "1219:     skip: {distinct: false, count: true},",
          "1220:     maxScan: {distinct: false, count: false},",
          "1221:     batchSize: {distinct: false, count: false},",
          "1222:     maxTime: {distinct: true, count: true, name: 'maxTimeMS' },",
          "1223:     comment: {distinct: false, count: false}",
          "",
          "[Added Lines]",
          "1218:   const negated = {",
          "1219:     limit: { distinct: false, count: true },",
          "1220:     skip: { distinct: false, count: true },",
          "1221:     maxScan: { distinct: false, count: false },",
          "1222:     batchSize: { distinct: false, count: false },",
          "1223:     maxTime: { distinct: true, count: true, name: 'maxTimeMS' },",
          "1224:     comment: { distinct: false, count: false }",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1229:   describe('snapshot', function() {",
          "1230:     it('works', function() {",
          "1233:       query = mquery();",
          "1234:       query.snapshot();",
          "",
          "[Removed Lines]",
          "1231:       var query;",
          "",
          "[Added Lines]",
          "1232:       let query;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1249:   describe('hint', function() {",
          "1250:     it('accepts an object', function() {",
          "1254:     });",
          "1256:     it('accepts a string', function() {",
          "1258:       query2.hint('a');",
          "1259:       assert.deepEqual(query2.options.hint, 'a');",
          "1260:     });",
          "",
          "[Removed Lines]",
          "1251:       var query2 = mquery();",
          "1252:       query2.hint({'a': 1, 'b': -1});",
          "1253:       assert.deepEqual(query2.options.hint, {'a': 1, 'b': -1});",
          "1257:       var query2 = mquery();",
          "",
          "[Added Lines]",
          "1252:       const query2 = mquery();",
          "1253:       query2.hint({ a: 1, b: -1 });",
          "1254:       assert.deepEqual(query2.options.hint, { a: 1, b: -1 });",
          "1258:       const query2 = mquery();",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1271:     describe('does not have side affects', function() {",
          "1272:       it('on invalid arg', function() {",
          "1274:         try {",
          "1275:           m.hint(1);",
          "1276:         } catch (err) {",
          "",
          "[Removed Lines]",
          "1273:         var m = mquery();",
          "",
          "[Added Lines]",
          "1274:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1279:         assert.equal(undefined, m.options.hint);",
          "1280:       });",
          "1281:       it('on missing arg', function() {",
          "1283:         assert.equal(undefined, m.options.hint);",
          "1284:       });",
          "1285:     });",
          "",
          "[Removed Lines]",
          "1282:         var m = mquery().hint();",
          "",
          "[Added Lines]",
          "1283:         const m = mquery().hint();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1290:   describe('j', function() {",
          "1291:     it('works', function() {",
          "1293:       assert.equal(true, m.options.j);",
          "1294:     });",
          "1295:   });",
          "1297:   describe('slaveOk', function() {",
          "1298:     it('works', function() {",
          "1301:       query = mquery();",
          "1302:       query.slaveOk();",
          "",
          "[Removed Lines]",
          "1292:       var m = mquery().j(true);",
          "1299:       var query;",
          "",
          "[Added Lines]",
          "1293:       const m = mquery().j(true);",
          "1300:       let query;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1315:   describe('read', function() {",
          "1316:     it('sets associated readPreference option', function() {",
          "1318:       m.read('p');",
          "1319:       assert.equal('primary', m.options.readPreference);",
          "1320:     });",
          "1321:     it('is chainable', function() {",
          "1323:       assert.equal(m, m.read('sp'));",
          "1324:     });",
          "1325:   });",
          "1327:   describe('readConcern', function() {",
          "1328:     it('sets associated readConcern option', function() {",
          "1331:       m = mquery();",
          "1332:       m.readConcern('s');",
          "",
          "[Removed Lines]",
          "1317:       var m = mquery();",
          "1322:       var m = mquery();",
          "1329:       var m;",
          "",
          "[Added Lines]",
          "1318:       const m = mquery();",
          "1323:       const m = mquery();",
          "1330:       let m;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1337:       assert.deepEqual({ level: 'local' }, m.options.readConcern);",
          "1338:     });",
          "1339:     it('is chainable', function() {",
          "1341:       assert.equal(m, m.readConcern('lz'));",
          "1342:     });",
          "1343:   });",
          "1345:   describe('tailable', function() {",
          "1346:     it('works', function() {",
          "1349:       query = mquery();",
          "1350:       query.tailable();",
          "",
          "[Removed Lines]",
          "1340:       var m = mquery();",
          "1347:       var query;",
          "",
          "[Added Lines]",
          "1341:       const m = mquery();",
          "1348:       let query;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1359:       assert.equal(false, query.options.tailable);",
          "1360:     });",
          "1361:     it('is chainable', function() {",
          "1363:       assert.equal(m, m.tailable());",
          "1364:     });",
          "1365:     noDistinct('tailable');",
          "",
          "[Removed Lines]",
          "1362:       var m = mquery();",
          "",
          "[Added Lines]",
          "1363:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1369:   describe('writeConcern', function() {",
          "1370:     it('sets associated writeConcern option', function() {",
          "1372:       m = mquery();",
          "1373:       m.writeConcern('majority');",
          "1374:       assert.equal('majority', m.options.w);",
          "",
          "[Removed Lines]",
          "1371:       var m;",
          "",
          "[Added Lines]",
          "1372:       let m;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1382:       assert.equal(1, m.options.w);",
          "1383:     });",
          "1384:     it('accepts object', function() {",
          "1387:       m = mquery().writeConcern({ w: 'm', j: true, wtimeout: 1000 });",
          "1388:       assert.equal('m', m.options.w); // check it does not convert m to majority",
          "1389:       assert.equal(true, m.options.j);",
          "1390:       assert.equal(1000, m.options.wtimeout);",
          "1393:       assert.equal('majority', m.options.w);",
          "1394:       assert.strictEqual(false, m.options.j);",
          "1395:       assert.strictEqual(0, m.options.wtimeout);",
          "1396:     });",
          "1397:     it('is chainable', function() {",
          "1399:       assert.equal(m, m.writeConcern('majority'));",
          "1400:     });",
          "1401:   });",
          "",
          "[Removed Lines]",
          "1385:       var m;",
          "1392:       m = mquery().w('m').w({j: false, wtimeout: 0 });",
          "1398:       var m = mquery();",
          "",
          "[Added Lines]",
          "1386:       let m;",
          "1393:       m = mquery().w('m').w({ j: false, wtimeout: 0 });",
          "1399:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1405:   describe('merge', function() {",
          "1406:     describe('with falsy arg', function() {",
          "1407:       it('returns itself', function() {",
          "1409:         assert.equal(m, m.merge());",
          "1410:         assert.equal(m, m.merge(null));",
          "1411:         assert.equal(m, m.merge(0));",
          "",
          "[Removed Lines]",
          "1408:         var m = mquery();",
          "",
          "[Added Lines]",
          "1409:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1429:       describe('that is a query', function() {",
          "1430:         it('merges conditions, field selection, and options', function() {",
          "1433:           assert.deepEqual(n._conditions, m._conditions);",
          "1434:           assert.deepEqual(n._fields, m._fields);",
          "1435:           assert.deepEqual(n.options, m.options);",
          "1436:         });",
          "1437:         it('clones update arguments', function(done) {",
          "1442:           assert.notDeepEqual(m._update, n._update);",
          "1443:           done();",
          "1444:         });",
          "1445:         it('is chainable', function() {",
          "1448:           assert.equal(n, n.merge(m));",
          "1449:         });",
          "1450:       });",
          "1452:       describe('that is an object', function() {",
          "1453:         it('merges', function() {",
          "1456:           assert.deepEqual(n._conditions, { x: 'hi' });",
          "1457:         });",
          "1458:         it('clones update arguments', function(done) {",
          "1463:           assert.notDeepEqual(m._update, n._update);",
          "1464:           done();",
          "1465:         });",
          "1466:         it('is chainable', function() {",
          "1469:           assert.equal(n, n.merge(m));",
          "1470:         });",
          "1471:       });",
          "",
          "[Removed Lines]",
          "1431:           var m = mquery({ x: 'hi' }, { select: 'x y', another: true });",
          "1432:           var n = mquery().merge(m);",
          "1438:           var original = { $set: { iTerm: true }};",
          "1439:           var m = mquery().updateOne(original);",
          "1440:           var n = mquery().merge(m);",
          "1441:           m.updateOne({ $set: { x: 2 }});",
          "1446:           var m = mquery({ x: 'hi' });",
          "1447:           var n = mquery();",
          "1454:           var m = { x: 'hi' };",
          "1455:           var n = mquery().merge(m);",
          "1459:           var original = { $set: { iTerm: true }};",
          "1460:           var m = mquery().updateOne(original);",
          "1461:           var n = mquery().merge(original);",
          "1462:           m.updateOne({ $set: { x: 2 }});",
          "1467:           var m = { x: 'hi' };",
          "1468:           var n = mquery();",
          "",
          "[Added Lines]",
          "1432:           const m = mquery({ x: 'hi' }, { select: 'x y', another: true });",
          "1433:           const n = mquery().merge(m);",
          "1439:           const original = { $set: { iTerm: true } };",
          "1440:           const m = mquery().updateOne(original);",
          "1441:           const n = mquery().merge(m);",
          "1442:           m.updateOne({ $set: { x: 2 } });",
          "1447:           const m = mquery({ x: 'hi' });",
          "1448:           const n = mquery();",
          "1455:           const m = { x: 'hi' };",
          "1456:           const n = mquery().merge(m);",
          "1460:           const original = { $set: { iTerm: true } };",
          "1461:           const m = mquery().updateOne(original);",
          "1462:           const n = mquery().merge(original);",
          "1463:           m.updateOne({ $set: { x: 2 } });",
          "1468:           const m = { x: 'hi' };",
          "1469:           const n = mquery();",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1477:   describe('find', function() {",
          "1478:     describe('with no callback', function() {",
          "1479:       it('does not execute', function() {",
          "1481:         assert.doesNotThrow(function() {",
          "1482:           m.find();",
          "1483:         });",
          "",
          "[Removed Lines]",
          "1480:         var m = mquery();",
          "",
          "[Added Lines]",
          "1481:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1488:     });",
          "1490:     it('is chainable', function() {",
          "1493:     });",
          "1495:     it('merges other queries', function() {",
          "1497:       m.tailable();",
          "1498:       m.select('_id');",
          "1500:       assert.deepEqual(a._conditions, m._conditions);",
          "1501:       assert.deepEqual(a.options, m.options);",
          "1502:       assert.deepEqual(a._fields, m._fields);",
          "",
          "[Removed Lines]",
          "1491:       var m = mquery().find({ x: 1 }).find().find({ y: 2 });",
          "1492:       assert.deepEqual(m._conditions, {x:1,y:2});",
          "1496:       var m = mquery({ name: 'mquery' });",
          "1499:       var a = mquery().find(m);",
          "",
          "[Added Lines]",
          "1492:       const m = mquery().find({ x: 1 }).find().find({ y: 2 });",
          "1493:       assert.deepEqual(m._conditions, { x: 1, y: 2 });",
          "1497:       const m = mquery({ name: 'mquery' });",
          "1500:       const a = mquery().find(m);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1519:         });",
          "1520:       });",
          "1521:       it('when Query is passed with a callback', function(done) {",
          "1523:         mquery(col).find(m, function(err, docs) {",
          "1524:           assert.ifError(err);",
          "1525:           assert.equal(1, docs.length);",
          "",
          "[Removed Lines]",
          "1522:         var m = mquery({ name: 'mquery' });",
          "",
          "[Added Lines]",
          "1523:         const m = mquery({ name: 'mquery' });",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1539:   describe('findOne', function() {",
          "1540:     describe('with no callback', function() {",
          "1541:       it('does not execute', function() {",
          "1543:         assert.doesNotThrow(function() {",
          "1544:           m.findOne();",
          "1545:         });",
          "",
          "[Removed Lines]",
          "1542:         var m = mquery();",
          "",
          "[Added Lines]",
          "1543:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1550:     });",
          "1552:     it('is chainable', function() {",
          "1555:       assert.equal(m, n);",
          "1557:       assert.equal('findOne', m.op);",
          "1558:     });",
          "1560:     it('merges other queries', function() {",
          "1562:       m.read('nearest');",
          "1563:       m.select('_id');",
          "1565:       assert.deepEqual(a._conditions, m._conditions);",
          "1566:       assert.deepEqual(a.options, m.options);",
          "1567:       assert.deepEqual(a._fields, m._fields);",
          "",
          "[Removed Lines]",
          "1553:       var m = mquery();",
          "1554:       var n = m.findOne({ x: 1 }).findOne().findOne({ y: 2 });",
          "1556:       assert.deepEqual(m._conditions, {x:1,y:2});",
          "1561:       var m = mquery({ name: 'mquery' });",
          "1564:       var a = mquery().findOne(m);",
          "",
          "[Added Lines]",
          "1554:       const m = mquery();",
          "1555:       const n = m.findOne({ x: 1 }).findOne().findOne({ y: 2 });",
          "1557:       assert.deepEqual(m._conditions, { x: 1, y: 2 });",
          "1562:       const m = mquery({ name: 'mquery' });",
          "1565:       const a = mquery().findOne(m);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1585:         });",
          "1586:       });",
          "1587:       it('when Query is passed with a callback', function(done) {",
          "1589:         mquery(col).findOne(m, function(err, doc) {",
          "1590:           assert.ifError(err);",
          "1591:           assert.ok(doc);",
          "",
          "[Removed Lines]",
          "1588:         var m = mquery(col).where({ name: 'mquery findone' });",
          "",
          "[Added Lines]",
          "1589:         const m = mquery(col).where({ name: 'mquery findone' });",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1607:   describe('count', function() {",
          "1608:     describe('with no callback', function() {",
          "1609:       it('does not execute', function() {",
          "1611:         assert.doesNotThrow(function() {",
          "1612:           m.count();",
          "1613:         });",
          "",
          "[Removed Lines]",
          "1610:         var m = mquery();",
          "",
          "[Added Lines]",
          "1611:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1618:     });",
          "1620:     it('is chainable', function() {",
          "1623:       assert.equal(m, n);",
          "1625:       assert.equal('count', m.op);",
          "1626:     });",
          "1628:     it('merges other queries', function() {",
          "1630:       m.read('nearest');",
          "1631:       m.select('_id');",
          "1633:       assert.deepEqual(a._conditions, m._conditions);",
          "1634:       assert.deepEqual(a.options, m.options);",
          "1635:       assert.deepEqual(a._fields, m._fields);",
          "",
          "[Removed Lines]",
          "1621:       var m = mquery();",
          "1622:       var n = m.count({ x: 1 }).count().count({ y: 2 });",
          "1624:       assert.deepEqual(m._conditions, {x:1,y:2});",
          "1629:       var m = mquery({ name: 'mquery' });",
          "1632:       var a = mquery().count(m);",
          "",
          "[Added Lines]",
          "1622:       const m = mquery();",
          "1623:       const n = m.count({ x: 1 }).count().count({ y: 2 });",
          "1625:       assert.deepEqual(m._conditions, { x: 1, y: 2 });",
          "1630:       const m = mquery({ name: 'mquery' });",
          "1633:       const a = mquery().count(m);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1653:         });",
          "1654:       });",
          "1655:       it('when Query is passed with a callback', function(done) {",
          "1657:         mquery(col).count(m, function(err, count) {",
          "1658:           assert.ifError(err);",
          "1659:           assert.ok(count);",
          "",
          "[Removed Lines]",
          "1656:         var m = mquery({ name: 'mquery count' });",
          "",
          "[Added Lines]",
          "1657:         const m = mquery({ name: 'mquery count' });",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1746:   describe('distinct', function() {",
          "1747:     describe('with no callback', function() {",
          "1748:       it('does not execute', function() {",
          "1750:         assert.doesNotThrow(function() {",
          "1751:           m.distinct();",
          "1752:         });",
          "",
          "[Removed Lines]",
          "1749:         var m = mquery();",
          "",
          "[Added Lines]",
          "1750:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1763:     });",
          "1765:     it('is chainable', function() {",
          "1768:       assert.equal(m, n);",
          "1770:       assert.equal('name', n._distinct);",
          "1771:       assert.equal('distinct', n.op);",
          "1772:     });",
          "1774:     it('overwrites field', function() {",
          "1776:       m.distinct('rename');",
          "1777:       assert.equal(m._distinct, 'rename');",
          "1779:       assert.equal(m._distinct, 'renamed');",
          "1780:     });",
          "1782:     it('merges other queries', function() {",
          "1784:       m.read('nearest');",
          "1786:       assert.deepEqual(a._conditions, m._conditions);",
          "1787:       assert.deepEqual(a.options, m.options);",
          "1788:       assert.deepEqual(a._fields, m._fields);",
          "",
          "[Removed Lines]",
          "1766:       var m = mquery({x:1}).distinct('name');",
          "1767:       var n = m.distinct({y:2});",
          "1769:       assert.deepEqual(n._conditions, {x:1, y:2});",
          "1775:       var m = mquery({ name: 'mquery' }).distinct('name');",
          "1778:       m.distinct({x:1}, 'renamed');",
          "1783:       var m = mquery().distinct({ name: 'mquery' }, 'age');",
          "1785:       var a = mquery().distinct(m);",
          "",
          "[Added Lines]",
          "1767:       const m = mquery({ x: 1 }).distinct('name');",
          "1768:       const n = m.distinct({ y: 2 });",
          "1770:       assert.deepEqual(n._conditions, { x: 1, y: 2 });",
          "1776:       const m = mquery({ name: 'mquery' }).distinct('name');",
          "1779:       m.distinct({ x: 1 }, 'renamed');",
          "1784:       const m = mquery().distinct({ name: 'mquery' }, 'age');",
          "1786:       const a = mquery().distinct(m);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1820:         });",
          "1821:       });",
          "1822:       describe('when Query is passed with a callback', function() {",
          "1824:         it('if distinct arg was declared', function(done) {",
          "1825:           mquery(col).distinct('age').distinct(m, function(err, doc) {",
          "1826:             assert.ifError(err);",
          "",
          "[Removed Lines]",
          "1823:         var m = mquery({ name: 'mquery distinct' });",
          "",
          "[Added Lines]",
          "1824:         const m = mquery({ name: 'mquery distinct' });",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1836:       });",
          "1837:       describe('when just a callback is passed', function() {",
          "1838:         it('if distinct arg was declared', function(done) {",
          "1840:           m.collection(col);",
          "1841:           m.distinct('age');",
          "1842:           m.distinct(function(err, doc) {",
          "",
          "[Removed Lines]",
          "1839:           var m = mquery({ name: 'mquery distinct' });",
          "",
          "[Added Lines]",
          "1840:           const m = mquery({ name: 'mquery distinct' });",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1846:           });",
          "1847:         });",
          "1848:         it('but not if no distinct arg was declared', function() {",
          "1850:           m.collection(col);",
          "1851:           assert.throws(function() {",
          "1852:             m.distinct(function() {});",
          "",
          "[Removed Lines]",
          "1849:           var m = mquery();",
          "",
          "[Added Lines]",
          "1850:           const m = mquery();",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1938:   describe('update', function() {",
          "1939:     describe('with no callback', function() {",
          "1940:       it('does not execute', function() {",
          "1942:         assert.doesNotThrow(function() {",
          "1943:           m.updateOne({ name: 'old' }, { name: 'updated' }, { multi: true });",
          "1944:         });",
          "",
          "[Removed Lines]",
          "1941:         var m = mquery();",
          "",
          "[Added Lines]",
          "1942:         const m = mquery();",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1955:     });",
          "1957:     it('is chainable', function() {",
          "1960:       assert.equal(m, n);",
          "1962:       assert.deepEqual({ y: 2 }, n._update);",
          "1963:       assert.equal('updateOne', n.op);",
          "1964:     });",
          "1966:     it('merges update doc arg', function() {",
          "1969:       m.updateOne({ z: 'stuff' });",
          "1970:       assert.deepEqual(m._update, { z: 'stuff', x: 'stuff', a: a });",
          "1971:       assert.deepEqual(m._conditions, { name: 'mquery' });",
          "",
          "[Removed Lines]",
          "1958:       var m = mquery({x:1}).updateOne({ y: 2 });",
          "1959:       var n = m.where({y:2});",
          "1961:       assert.deepEqual(n._conditions, {x:1, y:2});",
          "1967:       var a = [1,2];",
          "1968:       var m = mquery().where({ name: 'mquery' }).updateOne({ x: 'stuff', a: a });",
          "",
          "[Added Lines]",
          "1959:       const m = mquery({ x: 1 }).updateOne({ y: 2 });",
          "1960:       const n = m.where({ y: 2 });",
          "1962:       assert.deepEqual(n._conditions, { x: 1, y: 2 });",
          "1968:       const a = [1, 2];",
          "1969:       const m = mquery().where({ name: 'mquery' }).updateOne({ x: 'stuff', a: a });",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1979:     });",
          "1981:     describe('executes', function() {",
          "1983:       before(function(done) {",
          "1984:         col.insert({ name: 'mquery update', age: 1 }, {}, function(err, res) {",
          "1985:           id = res.insertedIds[0];",
          "",
          "[Removed Lines]",
          "1982:       var id;",
          "",
          "[Added Lines]",
          "1983:       let id;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1994:       describe('when conds + doc + opts + callback passed', function() {",
          "1995:         it('works', function(done) {",
          "1997:           m.updateOne({}, { name: 'Sparky' }, {}, function(err, res) {",
          "1998:             assert.ifError(err);",
          "1999:             assert.equal(res.modifiedCount, 1);",
          "",
          "[Removed Lines]",
          "1996:           var m = mquery(col).where({ _id: id });",
          "",
          "[Added Lines]",
          "1997:           const m = mquery(col).where({ _id: id });",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2009:       describe('when conds + doc + callback passed', function() {",
          "2010:         it('works', function(done) {",
          "2012:             assert.ifError(err);",
          "2013:             assert.ok(1, num);",
          "2014:             m.findOne(function(err, doc) {",
          "",
          "[Removed Lines]",
          "2011:           var m = mquery(col).updateOne({ _id: id }, { name: 'fairgrounds' }, function(err, num) {",
          "",
          "[Added Lines]",
          "2012:           const m = mquery(col).updateOne({ _id: id }, { name: 'fairgrounds' }, function(err, num) {",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2023:       describe('when doc + callback passed', function() {",
          "2024:         it('works', function(done) {",
          "2026:             assert.ifError(err);",
          "2027:             assert.ok(1, num);",
          "2028:             m.findOne(function(err, doc) {",
          "",
          "[Removed Lines]",
          "2025:           var m = mquery(col).where({ _id: id }).updateOne({ name: 'changed' }, function(err, num) {",
          "",
          "[Added Lines]",
          "2026:           const m = mquery(col).where({ _id: id }).updateOne({ name: 'changed' }, function(err, num) {",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2037:       describe('when just callback passed', function() {",
          "2038:         it('works', function(done) {",
          "2040:           m.setOptions({ safe: true });",
          "2041:           m.updateOne({ name: 'Frankenweenie' });",
          "2042:           m.updateOne(function(err, res) {",
          "",
          "[Removed Lines]",
          "2039:           var m = mquery(col).where({ _id: id });",
          "",
          "[Added Lines]",
          "2040:           const m = mquery(col).where({ _id: id });",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2054:       describe('without a callback', function() {",
          "2055:         it('when forced by exec()', function(done) {",
          "2057:           m.setOptions({ safe: true, multi: true });",
          "2058:           m.updateOne({ name: 'forced' });",
          "2061:           m._collection.updateOne = function(conds, doc, opts) {",
          "2062:             m._collection.update = update;",
          "",
          "[Removed Lines]",
          "2056:           var m = mquery(col).where({ _id: id });",
          "2060:           var update = m._collection.update;",
          "",
          "[Added Lines]",
          "2057:           const m = mquery(col).where({ _id: id });",
          "2061:           const update = m._collection.update;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2074:       describe('except when update doc is empty and missing overwrite flag', function() {",
          "2075:         it('works', function(done) {",
          "2077:           m.setOptions({ safe: true });",
          "2078:           m.updateOne({ }, function(err, num) {",
          "2079:             assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2076:           var m = mquery(col).where({ _id: id });",
          "",
          "[Added Lines]",
          "2077:           const m = mquery(col).where({ _id: id });",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2094:       describe('when boolean (true) - exec()', function() {",
          "2095:         it('works', function(done) {",
          "2097:           m.updateOne({ name: 'bool' }).updateOne(true);",
          "2098:           setTimeout(function() {",
          "2099:             m.findOne(function(err, doc) {",
          "",
          "[Removed Lines]",
          "2096:           var m = mquery(col).where({ _id: id });",
          "",
          "[Added Lines]",
          "2097:           const m = mquery(col).where({ _id: id });",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2111:   describe('remove', function() {",
          "2112:     describe('with 0 args', function() {",
          "2114:       before(function(done) {",
          "2115:         col.insert({ name: name }, { safe: true }, done);",
          "2116:       });",
          "",
          "[Removed Lines]",
          "2113:       var name = 'remove: no args test';",
          "",
          "[Added Lines]",
          "2114:       const name = 'remove: no args test';",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2119:       });",
          "2121:       it('does not execute', function(done) {",
          "2123:         col.remove = function() {",
          "2124:           col.remove = remove;",
          "2125:           done(new Error('remove executed!'));",
          "",
          "[Removed Lines]",
          "2122:         var remove = col.remove;",
          "",
          "[Added Lines]",
          "2123:         const remove = col.remove;",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2133:       });",
          "2135:       it('chains', function() {",
          "2137:         assert.equal(m, m.remove());",
          "2138:       });",
          "2139:     });",
          "2141:     describe('with 1 argument', function() {",
          "2143:       before(function(done) {",
          "2144:         col.insert({ name: name }, { safe: true }, done);",
          "2145:       });",
          "",
          "[Removed Lines]",
          "2136:         var m = mquery();",
          "2142:       var name = 'remove: 1 arg test';",
          "",
          "[Added Lines]",
          "2137:         const m = mquery();",
          "2143:       const name = 'remove: 1 arg test';",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2150:       describe('that is a', function() {",
          "2151:         it('plain object', function() {",
          "2153:           m.remove({ color: '#fff' });",
          "2154:           assert.deepEqual({ name: 'Whiskers', color: '#fff' }, m._conditions);",
          "2155:         });",
          "2157:         it('query', function() {",
          "2160:           m.remove(q);",
          "2161:           assert.deepEqual({ name: 'Whiskers', color: '#fff' }, m._conditions);",
          "2162:         });",
          "2164:         it('function', function(done) {",
          "2166:             assert.ifError(err);",
          "2167:             mquery(col).findOne({ name: name }, function(err, doc) {",
          "2168:               assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2152:           var m = mquery(col).remove({ name: 'Whiskers' });",
          "2158:           var q = mquery({ color: '#fff' });",
          "2159:           var m = mquery(col).remove({ name: 'Whiskers' });",
          "2165:           mquery(col, { safe: true }).where({name: name}).remove(function(err) {",
          "",
          "[Added Lines]",
          "2153:           const m = mquery(col).remove({ name: 'Whiskers' });",
          "2159:           const q = mquery({ color: '#fff' });",
          "2160:           const m = mquery(col).remove({ name: 'Whiskers' });",
          "2166:           mquery(col, { safe: true }).where({ name: name }).remove(function(err) {",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2194:     });",
          "2196:     describe('with 2 arguments', function() {",
          "2198:       beforeEach(function(done) {",
          "2199:         col.remove({}, { safe: true }, function(err) {",
          "2200:           assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2197:       var name = 'remove: 2 arg test';",
          "",
          "[Added Lines]",
          "2198:       const name = 'remove: 2 arg test';",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2227:       describe('mquery + callback', function() {",
          "2228:         it('works', function(done) {",
          "2230:           mquery(col).remove(m, function(err) {",
          "2231:             assert.ifError(err);",
          "2232:             mquery(col).find(function(err, docs) {",
          "",
          "[Removed Lines]",
          "2229:           var m = mquery({ name: name });",
          "",
          "[Added Lines]",
          "2230:           const m = mquery({ name: name });",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2317:   }",
          "2319:   describe('findOneAndUpdate', function() {",
          "2322:     validateFindAndModifyOptions('findOneAndUpdate');",
          "2324:     describe('with 0 args', function() {",
          "2325:       it('makes no changes', function() {",
          "2328:         assert.deepEqual(m, n);",
          "2329:       });",
          "2330:     });",
          "2331:     describe('with 1 arg', function() {",
          "2332:       describe('that is an object', function() {",
          "2333:         it('updates the doc', function() {",
          "2337:         });",
          "2338:       });",
          "2339:       describe('that is a query', function() {",
          "2340:         it('updates the doc', function() {",
          "2343:           assert.deepEqual(n._update, { x: 1 });",
          "2344:         });",
          "2345:       });",
          "2346:       it('that is a function', function(done) {",
          "2347:         col.insert({ name: name }, {}, function(err) {",
          "2348:           assert.ifError(err);",
          "2350:           name = '1 arg';",
          "2352:           n.findOneAndUpdate(function(err, res) {",
          "2353:             assert.ifError(err);",
          "2354:             assert.ok(res.value);",
          "",
          "[Removed Lines]",
          "2320:     var name = 'findOneAndUpdate + fn';",
          "2326:         var m = mquery();",
          "2327:         var n = m.findOneAndUpdate();",
          "2334:           var m = mquery();",
          "2335:           var n = m.findOneAndUpdate({ $set: { name: '1 arg' }});",
          "2336:           assert.deepEqual(n._update, { $set: { name: '1 arg' }});",
          "2341:           var m = mquery({ name: name }).updateOne({ x: 1 });",
          "2342:           var n = mquery().findOneAndUpdate(m);",
          "2349:           var m = mquery({ name: name }).collection(col);",
          "2351:           var n = m.updateOne({ $set: { name: name } }).setOptions({ returnDocument: 'after' });",
          "",
          "[Added Lines]",
          "2321:     let name = 'findOneAndUpdate + fn';",
          "2327:         const m = mquery();",
          "2328:         const n = m.findOneAndUpdate();",
          "2335:           const m = mquery();",
          "2336:           const n = m.findOneAndUpdate({ $set: { name: '1 arg' } });",
          "2337:           assert.deepEqual(n._update, { $set: { name: '1 arg' } });",
          "2342:           const m = mquery({ name: name }).updateOne({ x: 1 });",
          "2343:           const n = mquery().findOneAndUpdate(m);",
          "2350:           const m = mquery({ name: name }).collection(col);",
          "2352:           const n = m.updateOne({ $set: { name: name } }).setOptions({ returnDocument: 'after' });",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2360:     });",
          "2361:     describe('with 2 args', function() {",
          "2362:       it('conditions + update', function() {",
          "2364:         m.findOneAndUpdate({ name: name }, { age: 100 });",
          "2365:         assert.deepEqual({ name: name }, m._conditions);",
          "2366:         assert.deepEqual({ age: 100 }, m._update);",
          "2367:       });",
          "2368:       it('query + update', function() {",
          "2371:         m.findOneAndUpdate(n, { age: 100 });",
          "2372:         assert.deepEqual({ name: name }, m._conditions);",
          "2373:         assert.deepEqual({ age: 100 }, m._update);",
          "2374:       });",
          "2375:       it('update + callback', function(done) {",
          "2378:           assert.ifError(err);",
          "2379:           assert.equal(10, res.value.age);",
          "2380:           done();",
          "",
          "[Removed Lines]",
          "2363:         var m = mquery(col);",
          "2369:         var n = mquery({ name: name });",
          "2370:         var m = mquery(col);",
          "2376:         var m = mquery(col).where({ name: name });",
          "2377:         m.findOneAndUpdate({}, { $inc: { age: 10 }}, { returnDocument: 'after' }, function(err, res) {",
          "",
          "[Added Lines]",
          "2364:         const m = mquery(col);",
          "2370:         const n = mquery({ name: name });",
          "2371:         const m = mquery(col);",
          "2377:         const m = mquery(col).where({ name: name });",
          "2378:         m.findOneAndUpdate({}, { $inc: { age: 10 } }, { returnDocument: 'after' }, function(err, res) {",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2383:     });",
          "2384:     describe('with 3 args', function() {",
          "2385:       it('conditions + update + options', function() {",
          "2389:         assert.deepEqual({ works: true }, n._update);",
          "2390:         assert.deepEqual({ returnDocument: 'before' }, n.options);",
          "2391:       });",
          "2392:       it('conditions + update + callback', function(done) {",
          "2394:         m.findOneAndUpdate({ name: name }, { works: true }, { returnDocument: 'after' }, function(err, res) {",
          "2395:           assert.ifError(err);",
          "2396:           assert.ok(res.value);",
          "",
          "[Removed Lines]",
          "2386:         var m = mquery();",
          "2387:         var n = m.findOneAndUpdate({ name: name }, { works: true }, { returnDocument: 'before' });",
          "2388:         assert.deepEqual({ name: name}, n._conditions);",
          "2393:         var m = mquery(col);",
          "",
          "[Added Lines]",
          "2387:         const m = mquery();",
          "2388:         const n = m.findOneAndUpdate({ name: name }, { works: true }, { returnDocument: 'before' });",
          "2389:         assert.deepEqual({ name: name }, n._conditions);",
          "2394:         const m = mquery(col);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2402:     });",
          "2403:     describe('with 4 args', function() {",
          "2404:       it('conditions + update + options + callback', function(done) {",
          "2406:         m.findOneAndUpdate({ name: name }, { works: false }, { new: false }, function(err, res) {",
          "2407:           assert.ifError(err);",
          "2408:           assert.ok(res.value);",
          "",
          "[Removed Lines]",
          "2405:         var m = mquery(col);",
          "",
          "[Added Lines]",
          "2406:         const m = mquery(col);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2415:   });",
          "2417:   describe('findOneAndRemove', function() {",
          "2420:     validateFindAndModifyOptions('findOneAndRemove');",
          "2422:     describe('with 0 args', function() {",
          "2423:       it('makes no changes', function() {",
          "2426:         assert.deepEqual(m, n);",
          "2427:       });",
          "2428:     });",
          "2429:     describe('with 1 arg', function() {",
          "2430:       describe('that is an object', function() {",
          "2431:         it('updates the doc', function() {",
          "2434:           assert.deepEqual(n._conditions, { name: '1 arg' });",
          "2435:         });",
          "2436:       });",
          "2437:       describe('that is a query', function() {",
          "2438:         it('updates the doc', function() {",
          "2441:           assert.deepEqual(n._conditions, { name: name });",
          "2442:         });",
          "2443:       });",
          "2444:       it('that is a function', function(done) {",
          "2445:         col.insert({ name: name }, { safe: true }, function(err) {",
          "2446:           assert.ifError(err);",
          "2448:           m.findOneAndRemove(function(err, res) {",
          "2449:             assert.ifError(err);",
          "2450:             assert.ok(res.value);",
          "",
          "[Removed Lines]",
          "2418:     var name = 'findOneAndRemove';",
          "2424:         var m = mquery();",
          "2425:         var n = m.findOneAndRemove();",
          "2432:           var m = mquery();",
          "2433:           var n = m.findOneAndRemove({ name: '1 arg' });",
          "2439:           var m = mquery({ name: name });",
          "2440:           var n = m.findOneAndRemove(m);",
          "2447:           var m = mquery({ name: name }).collection(col);",
          "",
          "[Added Lines]",
          "2419:     let name = 'findOneAndRemove';",
          "2425:         const m = mquery();",
          "2426:         const n = m.findOneAndRemove();",
          "2433:           const m = mquery();",
          "2434:           const n = m.findOneAndRemove({ name: '1 arg' });",
          "2440:           const m = mquery({ name: name });",
          "2441:           const n = m.findOneAndRemove(m);",
          "2448:           const m = mquery({ name: name }).collection(col);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2456:     });",
          "2457:     describe('with 2 args', function() {",
          "2458:       it('conditions + options', function() {",
          "2460:         m.findOneAndRemove({ name: name }, { new: false });",
          "2461:         assert.deepEqual({ name: name }, m._conditions);",
          "2462:         assert.deepEqual({ new: false }, m.options);",
          "2463:       });",
          "2464:       it('query + options', function() {",
          "2468:         assert.deepEqual({ name: name }, m._conditions);",
          "2470:       });",
          "2471:       it('conditions + callback', function(done) {",
          "2472:         col.insert({ name: name }, { safe: true }, function(err) {",
          "2473:           assert.ifError(err);",
          "2475:           m.findOneAndRemove({ name: name }, function(err, res) {",
          "2476:             assert.ifError(err);",
          "2477:             assert.equal(name, res.value.name);",
          "",
          "[Removed Lines]",
          "2459:         var m = mquery(col);",
          "2465:         var n = mquery({ name: name });",
          "2466:         var m = mquery(col);",
          "2467:         m.findOneAndRemove(n, { sort: { x: 1 }});",
          "2469:         assert.deepEqual({ sort: { 'x': 1 }}, m.options);",
          "2474:           var m = mquery(col);",
          "",
          "[Added Lines]",
          "2460:         const m = mquery(col);",
          "2466:         const n = mquery({ name: name });",
          "2467:         const m = mquery(col);",
          "2468:         m.findOneAndRemove(n, { sort: { x: 1 } });",
          "2470:         assert.deepEqual({ sort: { x: 1 } }, m.options);",
          "2475:           const m = mquery(col);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2482:       it('query + callback', function(done) {",
          "2483:         col.insert({ name: name }, { safe: true }, function(err) {",
          "2484:           assert.ifError(err);",
          "2487:           m.findOneAndRemove(n, function(err, res) {",
          "2488:             assert.ifError(err);",
          "2489:             assert.equal(name, res.value.name);",
          "",
          "[Removed Lines]",
          "2485:           var n = mquery({ name: name });",
          "2486:           var m = mquery(col);",
          "",
          "[Added Lines]",
          "2486:           const n = mquery({ name: name });",
          "2487:           const m = mquery(col);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2497:         name = 'findOneAndRemove + conds + options + cb';",
          "2498:         col.insert([{ name: name }, { name: 'a' }], { safe: true }, function(err) {",
          "2499:           assert.ifError(err);",
          "2502:             assert.ifError(err);",
          "2503:             assert.ok(res.value);",
          "2504:             assert.equal(name, res.value.name);",
          "",
          "[Removed Lines]",
          "2500:           var m = mquery(col);",
          "2501:           m.findOneAndRemove({ name: name }, { sort: { name: 1 }}, function(err, res) {",
          "",
          "[Added Lines]",
          "2501:           const m = mquery(col);",
          "2502:           m.findOneAndRemove({ name: name }, { sort: { name: 1 } }, function(err, res) {",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2527:     describe('find', function() {",
          "2528:       it('works', function(done) {",
          "2530:         m.exec(function(err, docs) {",
          "2531:           assert.ifError(err);",
          "2532:           assert.equal(2, docs.length);",
          "",
          "[Removed Lines]",
          "2529:         var m = mquery(col).find({ name: 'exec' });",
          "",
          "[Added Lines]",
          "2530:         const m = mquery(col).find({ name: 'exec' });",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2535:       });",
          "2537:       it('works with readPreferences', function(done) {",
          "2539:         try {",
          "2542:           m.read(rp);",
          "2543:         } catch (e) {",
          "2544:           done(e.code === 'MODULE_NOT_FOUND' ? null : e);",
          "",
          "[Removed Lines]",
          "2538:         var m = mquery(col).find({ name: 'exec' });",
          "2540:           var ReadPreference = require('mongodb').ReadPreference;",
          "2541:           var rp = new ReadPreference('primary');",
          "",
          "[Added Lines]",
          "2539:         const m = mquery(col).find({ name: 'exec' });",
          "2541:           const ReadPreference = require('mongodb').ReadPreference;",
          "2542:           const rp = new ReadPreference('primary');",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2565:       });",
          "2567:       it('works with readConcern', function(done) {",
          "2569:         m.readConcern('l');",
          "2570:         m.exec(function(err, docs) {",
          "2571:           assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2568:         var m = mquery(col).find({ name: 'exec' });",
          "",
          "[Added Lines]",
          "2569:         const m = mquery(col).find({ name: 'exec' });",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2575:       });",
          "2577:       it('works with collation', function(done) {",
          "2579:         m.collation({ locale: 'en_US', strength: 1 });",
          "2580:         m.exec(function(err, docs) {",
          "2581:           assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2578:         var m = mquery(col).find({ name: 'EXEC' });",
          "",
          "[Added Lines]",
          "2579:         const m = mquery(col).find({ name: 'EXEC' });",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2586:     });",
          "2588:     it('findOne', function(done) {",
          "2590:       m.exec(function(err, doc) {",
          "2591:         assert.ifError(err);",
          "2592:         assert.equal(2, doc.age);",
          "",
          "[Removed Lines]",
          "2589:       var m = mquery(col).findOne({ age: 2 });",
          "",
          "[Added Lines]",
          "2590:       const m = mquery(col).findOne({ age: 2 });",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2595:     });",
          "2597:     it('count', function(done) {",
          "2599:       m.exec(function(err, count) {",
          "2600:         assert.ifError(err);",
          "2601:         assert.equal(2, count);",
          "",
          "[Removed Lines]",
          "2598:       var m = mquery(col).count({ name: 'exec' });",
          "",
          "[Added Lines]",
          "2599:       const m = mquery(col).count({ name: 'exec' });",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2604:     });",
          "2606:     it('distinct', function(done) {",
          "2608:       m.collection(col);",
          "2609:       m.distinct('age');",
          "2610:       m.exec(function(err, array) {",
          "",
          "[Removed Lines]",
          "2607:       var m = mquery({ name: 'exec' });",
          "",
          "[Added Lines]",
          "2608:       const m = mquery({ name: 'exec' });",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2677:     describe('remove', function() {",
          "2678:       it('with a callback', function(done) {",
          "2680:         m.exec(function(err, res) {",
          "2681:           assert.ifError(err);",
          "2682:           assert.equal(1, res.deletedCount);",
          "",
          "[Removed Lines]",
          "2679:         var m = mquery(col).where({ age: 2 }).remove();",
          "",
          "[Added Lines]",
          "2680:         const m = mquery(col).where({ age: 2 }).remove();",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2685:       });",
          "2687:       it('without a callback', function(done) {",
          "2689:         m.exec();",
          "2691:         setTimeout(function() {",
          "",
          "[Removed Lines]",
          "2688:         var m = mquery(col).where({ age: 1 }).remove();",
          "",
          "[Added Lines]",
          "2689:         const m = mquery(col).where({ age: 1 }).remove();",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2700:     describe('deleteOne', function() {",
          "2701:       it('with a callback', function(done) {",
          "2703:         m.exec(function(err, res) {",
          "2704:           assert.ifError(err);",
          "2705:           assert.equal(res.deletedCount, 1);",
          "",
          "[Removed Lines]",
          "2702:         var m = mquery(col).where({ age: { $gte: 0 } }).deleteOne();",
          "",
          "[Added Lines]",
          "2703:         const m = mquery(col).where({ age: { $gte: 0 } }).deleteOne();",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "2708:       });",
          "2710:       it('with justOne set', function(done) {",
          "2713:           setOptions({ justOne: false }).",
          "2714:           deleteOne();",
          "",
          "[Removed Lines]",
          "2711:         var m = mquery(col).where({ age: { $gte: 0 } }).",
          "",
          "[Added Lines]",
          "2712:         const m = mquery(col).where({ age: { $gte: 0 } }).",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "2723:     describe('deleteMany', function() {",
          "2724:       it('with a callback', function(done) {",
          "2726:         m.exec(function(err, res) {",
          "2727:           assert.ifError(err);",
          "2728:           assert.equal(res.deletedCount, 2);",
          "",
          "[Removed Lines]",
          "2725:         var m = mquery(col).where({ age: { $gte: 0 } }).deleteMany();",
          "",
          "[Added Lines]",
          "2726:         const m = mquery(col).where({ age: { $gte: 0 } }).deleteMany();",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "2734:     describe('findOneAndUpdate', function() {",
          "2735:       it('with a callback', function(done) {",
          "2737:         m.findOneAndUpdate({ name: 'exec', age: 1 }, { $set: { name: 'findOneAndUpdate' } }, { returnDocument: 'after' });",
          "2738:         m.exec(function(err, res) {",
          "2739:           assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2736:         var m = mquery(col);",
          "",
          "[Added Lines]",
          "2737:         const m = mquery(col);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "2746:     describe('findOneAndRemove', function() {",
          "2747:       it('with a callback', function(done) {",
          "2749:         m.findOneAndRemove({ name: 'exec', age: 2 });",
          "2750:         m.exec(function(err, res) {",
          "2751:           assert.ifError(err);",
          "",
          "[Removed Lines]",
          "2748:         var m = mquery(col);",
          "",
          "[Added Lines]",
          "2749:         const m = mquery(col);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "2767:     });",
          "2769:     it('calls trace function when executing query', function(done) {",
          "2774:       m.setTraceFunction(function(method, queryInfo) {",
          "2775:         try {",
          "",
          "[Removed Lines]",
          "2770:       var m = mquery(col);",
          "2772:       var resultTraceCalled;",
          "",
          "[Added Lines]",
          "2771:       const m = mquery(col);",
          "2773:       let resultTraceCalled;",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "2790:         };",
          "2791:       });",
          "2794:         assert.ifError(err);",
          "2795:         assert.equal(resultTraceCalled, true);",
          "2796:         assert.equal(93, doc.age);",
          "",
          "[Removed Lines]",
          "2793:       m.findOne({name: 'trace'}, function(err, doc) {",
          "",
          "[Added Lines]",
          "2794:       m.findOne({ name: 'trace' }, function(err, doc) {",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "2801:     it('inherits trace function when calling toConstructor', function(done) {",
          "2802:       function traceFunction() { return function() {}; }",
          "2807:       assert.equal(traceFunction, query._traceFunction);",
          "2809:       done();",
          "",
          "[Removed Lines]",
          "2804:       var tracedQuery = mquery().setTraceFunction(traceFunction).toConstructor();",
          "2806:       var query = tracedQuery();",
          "",
          "[Added Lines]",
          "2805:       const tracedQuery = mquery().setTraceFunction(traceFunction).toConstructor();",
          "2807:       const query = tracedQuery();",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "2819:     it('passes the fn arg to `exec`', function(done) {",
          "2820:       function cb() {}",
          "2823:       m.exec = function testing(fn) {",
          "2824:         assert.equal(this, m);",
          "",
          "[Removed Lines]",
          "2821:       var m = mquery();",
          "",
          "[Added Lines]",
          "2822:       const m = mquery();",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "2840:     });",
          "2842:     it('returns a promise A+ compat object', function(done) {",
          "2844:       assert.equal('function', typeof m.then);",
          "2845:       done();",
          "2846:     });",
          "2848:     it('creates a promise that is resolved on success', function(done) {",
          "2850:       promise.then(function(count) {",
          "2851:         assert.equal(2, count);",
          "2852:         done();",
          "",
          "[Removed Lines]",
          "2843:       var m = mquery(col).find();",
          "2849:       var promise = mquery(col).count({ name: 'then' }).then();",
          "",
          "[Added Lines]",
          "2844:       const m = mquery(col).find();",
          "2850:       const promise = mquery(col).count({ name: 'then' }).then();",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "2854:     });",
          "2856:     it('supports exec() cb being called synchronously #66', function(done) {",
          "2858:       query.exec = function(cb) {",
          "2859:         cb(null, 66);",
          "2860:       };",
          "",
          "[Removed Lines]",
          "2857:       var query = mquery(col).count({ name: 'then' });",
          "",
          "[Added Lines]",
          "2858:       const query = mquery(col).count({ name: 'then' });",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "2879:     describe('throws', function() {",
          "2880:       describe('if used with non-find operations', function() {",
          "2883:         ops.forEach(function(op) {",
          "2884:           assert.throws(function() {",
          "",
          "[Removed Lines]",
          "2881:         var ops = ['update', 'findOneAndUpdate', 'remove', 'count', 'distinct'];",
          "",
          "[Added Lines]",
          "2882:         const ops = ['update', 'findOneAndUpdate', 'remove', 'count', 'distinct'];",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "2889:     });",
          "2891:     it('returns a stream', function(done) {",
          "2896:       stream.on('data', function(doc) {",
          "2897:         assert.equal('stream', doc.name);",
          "",
          "[Removed Lines]",
          "2892:       var stream = mquery(col).find({ name: 'stream' }).stream();",
          "2893:       var count = 0;",
          "2894:       var err;",
          "",
          "[Added Lines]",
          "2893:       const stream = mquery(col).find({ name: 'stream' }).stream();",
          "2894:       let count = 0;",
          "2895:       let err;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "2933:   describe('_updateForExec', function() {",
          "2934:     it('returns a clone of the update object with same key order #19', function(done) {",
          "2943:       for (key in q._update.$push.n) {",
          "2944:         order.push(key);",
          "2945:       }",
          "2950:       for (key in doc.$push.n) {",
          "2951:         assert.equal(key, order[i]);",
          "2952:         i++;",
          "",
          "[Removed Lines]",
          "2935:       var update = {};",
          "2936:       update.$push = { n: { $each: [{x:10}], $slice: -1, $sort: {x:1}}};",
          "2938:       var q = mquery().updateOne({ x: 1 }, update);",
          "2941:       var order = [];",
          "2942:       var key;",
          "2948:       var doc = q._updateForExec();",
          "2949:       var i = 0;",
          "",
          "[Added Lines]",
          "2936:       const update = {};",
          "2937:       update.$push = { n: { $each: [{ x: 10 }], $slice: -1, $sort: { x: 1 } } };",
          "2939:       const q = mquery().updateOne({ x: 1 }, update);",
          "2942:       const order = [];",
          "2943:       let key;",
          "2949:       const doc = q._updateForExec();",
          "2950:       let i = 0;",
          "",
          "---------------"
        ],
        "test/utils.test.js||test/utils.test.js": [
          "File: test/utils.test.js -> test/utils.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "9: try {",
          "10:   mongo = new require('mongodb');",
          "11: } catch (e) {",
          "",
          "[Removed Lines]",
          "3: var Buffer = require('safe-buffer').Buffer;",
          "4: var utils = require('../lib/utils');",
          "5: var assert = require('assert');",
          "6: var debug = require('debug');",
          "8: var mongo;",
          "",
          "[Added Lines]",
          "3: const Buffer = require('safe-buffer').Buffer;",
          "4: const utils = require('../lib/utils');",
          "5: const assert = require('assert');",
          "6: const debug = require('debug');",
          "8: let mongo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         this.id = id;",
          "20:       }",
          "24:       assert.ok(o2 instanceof ObjectId);",
          "26:       done();",
          "",
          "[Removed Lines]",
          "22:       var o1 = new ObjectId('1234');",
          "23:       var o2 = utils.clone(o1);",
          "",
          "[Added Lines]",
          "22:       const o1 = new ObjectId('1234');",
          "23:       const o2 = utils.clone(o1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:         this.id = id;",
          "32:       }",
          "37:       assert.ok(o2 instanceof ObjectID);",
          "38:       done();",
          "",
          "[Removed Lines]",
          "34:       var o1 = new ObjectID('1234');",
          "35:       var o2 = utils.clone(o1);",
          "",
          "[Added Lines]",
          "34:       const o1 = new ObjectID('1234');",
          "35:       const o2 = utils.clone(o1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "43:         this.id = id;",
          "44:       }",
          "48:       assert.ok(!(o2 instanceof ObjectIdd));",
          "50:       done();",
          "",
          "[Removed Lines]",
          "46:       var o1 = new ObjectIdd('1234');",
          "47:       var o2 = utils.clone(o1);",
          "",
          "[Added Lines]",
          "46:       const o1 = new ObjectIdd('1234');",
          "47:       const o2 = utils.clone(o1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "57:       }",
          "59:       ObjectID.prototype.clone = function() {",
          "61:         ret.cloned = true;",
          "62:         return ret;",
          "63:       };",
          "67:       assert.equal(id, o1.id);",
          "68:       assert.equal(false, o1.cloned);",
          "71:       assert.ok(o2 instanceof ObjectID);",
          "72:       assert.equal(id, o2.id);",
          "73:       assert.ok(o2.cloned);",
          "",
          "[Removed Lines]",
          "60:         var ret = new ObjectID(this.id);",
          "65:       var id = 1234;",
          "66:       var o1 = new ObjectID(id);",
          "70:       var o2 = utils.clone(o1);",
          "",
          "[Added Lines]",
          "60:         const ret = new ObjectID(this.id);",
          "65:       const id = 1234;",
          "66:       const o1 = new ObjectID(id);",
          "70:       const o2 = utils.clone(o1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "77:     it('clones mongodb.ReadPreferences', function(done) {",
          "78:       if (!mongo) return done();",
          "82:       ];",
          "84:         new mongo.ReadPreference('primary'),",
          "85:         new mongo.ReadPreference(mongo.ReadPreference.PRIMARY_PREFERRED),",
          "86:         new mongo.ReadPreference('secondary', tags)",
          "87:       ];",
          "92:         assert.notEqual(prefs[i], prefsCloned[i]);",
          "93:         if (prefs[i].tags) {",
          "94:           assert.ok(prefsCloned[i].tags);",
          "",
          "[Removed Lines]",
          "80:       var tags = [",
          "81:         {dc: 'tag1'}",
          "83:       var prefs = [",
          "89:       var prefsCloned = utils.clone(prefs);",
          "91:       for (var i = 0; i < prefsCloned.length; i++) {",
          "",
          "[Added Lines]",
          "80:       const tags = [",
          "81:         { dc: 'tag1' }",
          "83:       const prefs = [",
          "89:       const prefsCloned = utils.clone(prefs);",
          "91:       for (let i = 0; i < prefsCloned.length; i++) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "105:     it('clones mongodb.Binary', function(done) {",
          "106:       if (!mongo) return done();",
          "110:       assert.equal(binary.sub_type, clone.sub_type);",
          "111:       assert.equal(String(binary.buffer), String(buf));",
          "112:       assert.ok(binary !== clone);",
          "",
          "[Removed Lines]",
          "107:       var buf = Buffer.from('hi');",
          "108:       var binary = new mongo.Binary(buf, 2);",
          "109:       var clone = utils.clone(binary);",
          "",
          "[Added Lines]",
          "107:       const buf = Buffer.from('hi');",
          "108:       const binary = new mongo.Binary(buf, 2);",
          "109:       const clone = utils.clone(binary);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "114:     });",
          "116:     it('handles objects with no constructor', function(done) {",
          "120:       o.name = name;",
          "123:       assert.doesNotThrow(function() {",
          "124:         clone = utils.clone(o);",
          "125:       });",
          "",
          "[Removed Lines]",
          "117:       var name = '335';",
          "119:       var o = Object.create(null);",
          "122:       var clone;",
          "",
          "[Added Lines]",
          "117:       const name = '335';",
          "119:       const o = Object.create(null);",
          "122:       let clone;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "130:     });",
          "132:     it('handles buffers', function(done) {",
          "134:       buff.fill(1);",
          "138:         assert.equal(buff[i], clone[i]);",
          "139:       }",
          "",
          "[Removed Lines]",
          "133:       var buff = Buffer.alloc(10);",
          "135:       var clone = utils.clone(buff);",
          "137:       for (var i = 0; i < buff.length; i++) {",
          "",
          "[Added Lines]",
          "133:       const buff = Buffer.alloc(10);",
          "135:       const clone = utils.clone(buff);",
          "137:       for (let i = 0; i < buff.length; i++) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "142:     });",
          "144:     it('skips __proto__', function() {",
          "148:       assert.strictEqual({}.polluted, void 0);",
          "149:       assert.strictEqual(res.__proto__, Object.prototype);",
          "",
          "[Removed Lines]",
          "145:       var payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');",
          "146:       var res = utils.clone(payload);",
          "",
          "[Added Lines]",
          "145:       const payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');",
          "146:       const res = utils.clone(payload);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "153:   describe('merge', function() {",
          "154:     it('avoids prototype pollution', function() {",
          "157:       utils.merge(obj, payload);",
          "159:       assert.strictEqual({}.polluted, void 0);",
          "",
          "[Removed Lines]",
          "155:       var payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');",
          "156:       var obj = {};",
          "",
          "[Added Lines]",
          "155:       const payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');",
          "156:       const obj = {};",
          "",
          "---------------"
        ]
      }
    }
  ]
}