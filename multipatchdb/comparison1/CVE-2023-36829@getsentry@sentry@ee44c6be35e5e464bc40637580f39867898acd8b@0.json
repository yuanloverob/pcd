{
  "cve_id": "CVE-2023-36829",
  "cve_desc": "Sentry is an error tracking and performance monitoring platform. Starting in version 23.6.0 and prior to version 23.6.2, the Sentry API incorrectly returns the `access-control-allow-credentials: true` HTTP header if the `Origin` request header ends with the `system.base-hostname` option of Sentry installation. This only affects installations that have `system.base-hostname` option explicitly set, as it is empty by default. Impact is limited since recent versions of major browsers have cross-site cookie blocking enabled by default. However, this flaw could allow other multi-step attacks. The patch has been released in Sentry 23.6.2.",
  "repo": "getsentry/sentry",
  "patch_hash": "ee44c6be35e5e464bc40637580f39867898acd8b",
  "patch_info": {
    "commit_hash": "ee44c6be35e5e464bc40637580f39867898acd8b",
    "repo": "getsentry/sentry",
    "commit_url": "https://github.com/getsentry/sentry/commit/ee44c6be35e5e464bc40637580f39867898acd8b",
    "files": [
      "src/sentry/api/base.py",
      "tests/sentry/api/test_base.py"
    ],
    "message": "Fix GHSA-4xqm-4p72-87h6 (#52276)",
    "before_after_code_files": [
      "src/sentry/api/base.py||src/sentry/api/base.py",
      "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py"
    ]
  },
  "patch_diff": {
    "src/sentry/api/base.py||src/sentry/api/base.py": [
      "File: src/sentry/api/base.py -> src/sentry/api/base.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "121:         # to be sent.",
      "122:         basehost = options.get(\"system.base-hostname\")",
      "123:         if basehost and origin:",
      "125:                 response[\"Access-Control-Allow-Credentials\"] = \"true\"",
      "127:         return response",
      "",
      "[Removed Lines]",
      "124:             if origin.endswith(basehost):",
      "",
      "[Added Lines]",
      "124:             if origin.endswith((\"://\" + basehost, \".\" + basehost)):",
      "",
      "---------------"
    ],
    "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py": [
      "File: tests/sentry/api/test_base.py -> tests/sentry/api/test_base.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:         org = self.create_organization()",
      "163:         apikey = ApiKey.objects.create(organization_id=org.id, allowed_origins=\"*\")",
      "175:     def test_invalid_cors_without_auth(self):",
      "176:         request = self.make_request(method=\"GET\")",
      "",
      "[Removed Lines]",
      "165:         request = self.make_request(method=\"GET\")",
      "166:         request.META[\"HTTP_ORIGIN\"] = \"http://acme.example.com\"",
      "167:         request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
      "168:             apikey.key.encode(\"utf-8\")",
      "169:         )",
      "171:         response = _dummy_endpoint(request)",
      "172:         response.render()",
      "173:         assert \"Access-Control-Allow-Credentials\" not in response",
      "",
      "[Added Lines]",
      "165:         for http_origin in [\"http://acme.example.com\", \"http://fakeacme.com\"]:",
      "166:             request = self.make_request(method=\"GET\")",
      "167:             request.META[\"HTTP_ORIGIN\"] = http_origin",
      "168:             request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
      "169:                 apikey.key.encode(\"utf-8\")",
      "170:             )",
      "172:             response = _dummy_endpoint(request)",
      "173:             response.render()",
      "174:             assert \"Access-Control-Allow-Credentials\" not in response",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fd87d5ad5b2a1b59abad5fc3215e126613d4719f",
      "candidate_info": {
        "commit_hash": "fd87d5ad5b2a1b59abad5fc3215e126613d4719f",
        "repo": "getsentry/sentry",
        "commit_url": "https://github.com/getsentry/sentry/commit/fd87d5ad5b2a1b59abad5fc3215e126613d4719f",
        "files": [
          "src/sentry/api/base.py",
          "src/sentry/middleware/ratelimit.py",
          "tests/sentry/middleware/test_ratelimit_middleware.py"
        ],
        "message": "feat(api) Add CORS headers to rate limit responses (#59443)\n\nWe need CORS headers on our rate limit responses so that application\nerror handling can find out that requests were rate limited and display\nappropriate error messaging.\n\nFixes HC-958",
        "before_after_code_files": [
          "src/sentry/api/base.py||src/sentry/api/base.py",
          "src/sentry/middleware/ratelimit.py||src/sentry/middleware/ratelimit.py",
          "tests/sentry/middleware/test_ratelimit_middleware.py||tests/sentry/middleware/test_ratelimit_middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/sentry/api/base.py||src/sentry/api/base.py"
          ],
          "candidate": [
            "src/sentry/api/base.py||src/sentry/api/base.py"
          ]
        }
      },
      "candidate_diff": {
        "src/sentry/api/base.py||src/sentry/api/base.py": [
          "File: src/sentry/api/base.py -> src/sentry/api/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         else:",
          "117:             response = func(self, request, *args, **kwargs)",
          "126:         )",
          "156: class Endpoint(APIView):",
          "",
          "[Removed Lines]",
          "119:         allow = \", \".join(self._allowed_methods())",
          "120:         response[\"Allow\"] = allow",
          "121:         response[\"Access-Control-Allow-Methods\"] = allow",
          "122:         response[\"Access-Control-Allow-Headers\"] = (",
          "123:             \"X-Sentry-Auth, X-Requested-With, Origin, Accept, \"",
          "124:             \"Content-Type, Authentication, Authorization, Content-Encoding, \"",
          "125:             \"sentry-trace, baggage, X-CSRFToken\"",
          "127:         response[\"Access-Control-Expose-Headers\"] = (",
          "128:             \"X-Sentry-Error, X-Sentry-Direct-Hit, X-Hits, X-Max-Hits, \"",
          "129:             \"Endpoint, Retry-After, Link\"",
          "130:         )",
          "132:         if request.META.get(\"HTTP_ORIGIN\") == \"null\":",
          "133:             # if ORIGIN header is explicitly specified as 'null' leave it alone",
          "134:             origin: str | None = \"null\"",
          "135:         else:",
          "136:             origin = origin_from_request(request)",
          "138:         if origin is None or origin == \"null\":",
          "139:             response[\"Access-Control-Allow-Origin\"] = \"*\"",
          "140:         else:",
          "141:             response[\"Access-Control-Allow-Origin\"] = origin",
          "143:         # If the requesting origin is a subdomain of",
          "144:         # the application's base-hostname we should allow cookies",
          "145:         # to be sent.",
          "146:         basehost = options.get(\"system.base-hostname\")",
          "147:         if basehost and origin:",
          "148:             if origin.endswith((\"://\" + basehost, \".\" + basehost)):",
          "149:                 response[\"Access-Control-Allow-Credentials\"] = \"true\"",
          "151:         return response",
          "153:     return allow_cors_options_wrapper",
          "",
          "[Added Lines]",
          "119:         return apply_cors_headers(",
          "120:             request=request, response=response, allowed_methods=self._allowed_methods()",
          "123:     return allow_cors_options_wrapper",
          "126: def apply_cors_headers(",
          "127:     request: HttpRequest, response: HttpResponse, allowed_methods: list[str] | None = None",
          "128: ) -> HttpResponse:",
          "129:     if allowed_methods is None:",
          "130:         allowed_methods = []",
          "131:     allow = \", \".join(allowed_methods)",
          "132:     response[\"Allow\"] = allow",
          "133:     response[\"Access-Control-Allow-Methods\"] = allow",
          "134:     response[\"Access-Control-Allow-Headers\"] = (",
          "135:         \"X-Sentry-Auth, X-Requested-With, Origin, Accept, \"",
          "136:         \"Content-Type, Authentication, Authorization, Content-Encoding, \"",
          "137:         \"sentry-trace, baggage, X-CSRFToken\"",
          "138:     )",
          "139:     response[\"Access-Control-Expose-Headers\"] = (",
          "140:         \"X-Sentry-Error, X-Sentry-Direct-Hit, X-Hits, X-Max-Hits, \" \"Endpoint, Retry-After, Link\"",
          "141:     )",
          "143:     if request.META.get(\"HTTP_ORIGIN\") == \"null\":",
          "144:         # if ORIGIN header is explicitly specified as 'null' leave it alone",
          "145:         origin: str | None = \"null\"",
          "146:     else:",
          "147:         origin = origin_from_request(request)",
          "149:     if origin is None or origin == \"null\":",
          "150:         response[\"Access-Control-Allow-Origin\"] = \"*\"",
          "151:     else:",
          "152:         response[\"Access-Control-Allow-Origin\"] = origin",
          "154:     # If the requesting origin is a subdomain of",
          "155:     # the application's base-hostname we should allow cookies",
          "156:     # to be sent.",
          "157:     basehost = options.get(\"system.base-hostname\")",
          "158:     if basehost and origin:",
          "159:         if origin.endswith((\"://\" + basehost, \".\" + basehost)):",
          "160:             response[\"Access-Control-Allow-Credentials\"] = \"true\"",
          "162:     return response",
          "",
          "---------------"
        ],
        "src/sentry/middleware/ratelimit.py||src/sentry/middleware/ratelimit.py": [
          "File: src/sentry/middleware/ratelimit.py -> src/sentry/middleware/ratelimit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from django.http.request import HttpRequest",
          "9: from django.http.response import HttpResponse, HttpResponseBase",
          "11: from sentry.ratelimits import (",
          "12:     above_rate_limit_check,",
          "13:     finish_request,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from sentry.api.base import apply_cors_headers",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:                                 \"window\": request.rate_limit_metadata.window,",
          "103:                             },",
          "104:                         )",
          "106:                             json.dumps(",
          "107:                                 DEFAULT_ERROR_MESSAGE.format(",
          "108:                                     limit=request.rate_limit_metadata.limit,",
          "",
          "[Removed Lines]",
          "105:                         return HttpResponse(",
          "",
          "[Added Lines]",
          "106:                         response = HttpResponse(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:                             ),",
          "112:                             status=429,",
          "113:                         )",
          "114:             except Exception:",
          "115:                 logging.exception(",
          "116:                     \"Error during rate limiting, failing open. THIS SHOULD NOT HAPPEN\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:                         return apply_cors_headers(",
          "116:                             request=request, response=response, allowed_methods=[request.method]",
          "117:                         )",
          "",
          "---------------"
        ],
        "tests/sentry/middleware/test_ratelimit_middleware.py||tests/sentry/middleware/test_ratelimit_middleware.py": [
          "File: tests/sentry/middleware/test_ratelimit_middleware.py -> tests/sentry/middleware/test_ratelimit_middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:             self.middleware.process_view(request, self._test_endpoint, [], {})",
          "110:             assert request.will_be_rate_limited",
          "112:     @patch(\"sentry.middleware.ratelimit.get_rate_limit_value\")",
          "113:     def test_negative_rate_limit_check(self, default_rate_limit_mock):",
          "114:         request = self.factory.get(\"/\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:     @patch(\"sentry.middleware.ratelimit.get_rate_limit_value\")",
          "113:     def test_positive_rate_limit_response_headers(self, default_rate_limit_mock):",
          "114:         request = self.factory.get(\"/\")",
          "116:         with freeze_time(\"2000-01-01\"), patch.object(",
          "117:             RatelimitMiddlewareTest.TestEndpoint, \"enforce_rate_limit\", True",
          "118:         ):",
          "119:             default_rate_limit_mock.return_value = RateLimit(0, 100)",
          "120:             response = self.middleware.process_view(request, self._test_endpoint, [], {})",
          "121:             assert request.will_be_rate_limited",
          "122:             assert response",
          "123:             assert response[\"Access-Control-Allow-Methods\"] == \"GET\"",
          "124:             assert response[\"Access-Control-Allow-Origin\"] == \"*\"",
          "125:             assert response[\"Access-Control-Allow-Headers\"]",
          "126:             assert response[\"Access-Control-Expose-Headers\"]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f94dd6f8855306564ca9e2df057a243d6b1bf6d",
      "candidate_info": {
        "commit_hash": "5f94dd6f8855306564ca9e2df057a243d6b1bf6d",
        "repo": "getsentry/sentry",
        "commit_url": "https://github.com/getsentry/sentry/commit/5f94dd6f8855306564ca9e2df057a243d6b1bf6d",
        "files": [
          "src/sentry/testutils/factories.py",
          "src/sentry/testutils/fixtures.py",
          "tests/sentry/api/endpoints/test_auth.py",
          "tests/sentry/api/endpoints/test_auth_index.py",
          "tests/sentry/api/endpoints/test_group_details.py",
          "tests/sentry/api/endpoints/test_index.py",
          "tests/sentry/api/endpoints/test_organization_projects.py",
          "tests/sentry/api/endpoints/test_organization_releases.py",
          "tests/sentry/api/test_base.py",
          "tests/sentry/middleware/test_auth.py",
          "tests/snuba/api/endpoints/test_organization_events.py"
        ],
        "message": "ref(api): Create basic auth header helper function (#53296)\n\nFormatting a basic auth header is long and annoying to type out so create util function to handle instead",
        "before_after_code_files": [
          "src/sentry/testutils/factories.py||src/sentry/testutils/factories.py",
          "src/sentry/testutils/fixtures.py||src/sentry/testutils/fixtures.py",
          "tests/sentry/api/endpoints/test_auth.py||tests/sentry/api/endpoints/test_auth.py",
          "tests/sentry/api/endpoints/test_auth_index.py||tests/sentry/api/endpoints/test_auth_index.py",
          "tests/sentry/api/endpoints/test_group_details.py||tests/sentry/api/endpoints/test_group_details.py",
          "tests/sentry/api/endpoints/test_index.py||tests/sentry/api/endpoints/test_index.py",
          "tests/sentry/api/endpoints/test_organization_projects.py||tests/sentry/api/endpoints/test_organization_projects.py",
          "tests/sentry/api/endpoints/test_organization_releases.py||tests/sentry/api/endpoints/test_organization_releases.py",
          "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py",
          "tests/sentry/middleware/test_auth.py||tests/sentry/middleware/test_auth.py",
          "tests/snuba/api/endpoints/test_organization_events.py||tests/snuba/api/endpoints/test_organization_events.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py"
          ],
          "candidate": [
            "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py"
          ]
        }
      },
      "candidate_diff": {
        "src/sentry/testutils/factories.py||src/sentry/testutils/factories.py": [
          "File: src/sentry/testutils/factories.py -> src/sentry/testutils/factories.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import io",
          "4: import os",
          "5: import random",
          "6: from binascii import hexlify",
          "7: from contextlib import contextmanager",
          "8: from datetime import datetime",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: from base64 import b64encode",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1533:         return action",
          "1535:     @staticmethod",
          "1536:     @assume_test_silo_mode(SiloMode.REGION)",
          "1537:     def snooze_rule(**kwargs):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1536:     @staticmethod",
          "1537:     def create_basic_auth_header(username: str, password: str = \"\") -> str:",
          "1538:         return b\"Basic \" + b64encode(f\"{username}:{password}\".encode())",
          "",
          "---------------"
        ],
        "src/sentry/testutils/fixtures.py||src/sentry/testutils/fixtures.py": [
          "File: src/sentry/testutils/fixtures.py -> src/sentry/testutils/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:     def create_organization_mapping(self, *args, **kwargs):",
          "445:         return Factories.create_org_mapping(*args, **kwargs)",
          "447:     def snooze_rule(self, *args, **kwargs):",
          "448:         return Factories.snooze_rule(*args, **kwargs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:     def create_basic_auth_header(self, *args, **kwargs):",
          "448:         return Factories.create_basic_auth_header(*args, **kwargs)",
          "",
          "---------------"
        ],
        "tests/sentry/api/endpoints/test_auth.py||tests/sentry/api/endpoints/test_auth.py": [
          "File: tests/sentry/api/endpoints/test_auth.py -> tests/sentry/api/endpoints/test_auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.urls import reverse",
          "5: from sentry.testutils import APITestCase",
          "",
          "[Removed Lines]",
          "1: import base64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:         user.set_password(\"test\")",
          "14:         user.save()",
          "18:         url = reverse(\"sentry-api-0-auth\")",
          "21:         assert response.status_code == 200, response.content",
          "",
          "[Removed Lines]",
          "16:         auth_header = b\"Basic \" + base64.b64encode(b\"a@example.com:test\")",
          "19:         response = self.client.post(url, format=\"json\", HTTP_AUTHORIZATION=auth_header)",
          "",
          "[Added Lines]",
          "15:         response = self.client.post(",
          "16:             url,",
          "17:             format=\"json\",",
          "18:             HTTP_AUTHORIZATION=self.create_basic_auth_header(\"a@example.com\", \"test\"),",
          "19:         )",
          "",
          "---------------"
        ],
        "tests/sentry/api/endpoints/test_auth_index.py||tests/sentry/api/endpoints/test_auth_index.py": [
          "File: tests/sentry/api/endpoints/test_auth_index.py -> tests/sentry/api/endpoints/test_auth_index.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from datetime import datetime, timedelta, timezone",
          "3: from unittest import mock",
          "4: from urllib.parse import urlencode",
          "",
          "[Removed Lines]",
          "1: from base64 import b64encode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         user = self.create_user(\"foo@example.com\")",
          "39:         response = self.client.post(",
          "40:             self.path,",
          "42:         )",
          "43:         assert response.status_code == 200",
          "44:         assert response.data[\"id\"] == str(user.id)",
          "",
          "[Removed Lines]",
          "41:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{user.username}:admin\".encode()),",
          "",
          "[Added Lines]",
          "40:             HTTP_AUTHORIZATION=self.create_basic_auth_header(user.username, \"admin\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:         user = self.create_user(\"foo@example.com\")",
          "48:         response = self.client.post(",
          "49:             self.path,",
          "51:         )",
          "52:         assert response.status_code == 401",
          "",
          "[Removed Lines]",
          "50:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{user.username}:foobar\".encode()),",
          "",
          "[Added Lines]",
          "49:             HTTP_AUTHORIZATION=self.create_basic_auth_header(user.username, \"foobar\"),",
          "",
          "---------------"
        ],
        "tests/sentry/api/endpoints/test_group_details.py||tests/sentry/api/endpoints/test_group_details.py": [
          "File: tests/sentry/api/endpoints/test_group_details.py -> tests/sentry/api/endpoints/test_group_details.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from datetime import timedelta",
          "3: from unittest import mock",
          "",
          "[Removed Lines]",
          "1: from base64 import b64encode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:             url,",
          "437:             data={\"assignedTo\": self.user.id},",
          "438:             format=\"json\",",
          "440:         )",
          "441:         assert response.status_code == 200, response.content",
          "442:         assert GroupAssignee.objects.filter(group=group, user_id=self.user.id).exists()",
          "",
          "[Removed Lines]",
          "439:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{api_key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "438:             HTTP_AUTHORIZATION=self.create_basic_auth_header(api_key.key),",
          "",
          "---------------"
        ],
        "tests/sentry/api/endpoints/test_index.py||tests/sentry/api/endpoints/test_index.py": [
          "File: tests/sentry/api/endpoints/test_index.py -> tests/sentry/api/endpoints/test_index.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.urls import reverse",
          "5: from sentry.models import ApiKey, ApiToken",
          "",
          "[Removed Lines]",
          "1: from base64 import b64encode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         key = ApiKey.objects.create(organization_id=org.id)",
          "30:         url = reverse(\"sentry-api-index\")",
          "31:         response = self.client.get(",
          "33:         )",
          "34:         assert response.status_code == 200",
          "35:         assert response.data[\"version\"] == \"0\"",
          "",
          "[Removed Lines]",
          "32:             url, HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{key.key}:\".encode())",
          "",
          "[Added Lines]",
          "30:             url,",
          "31:             HTTP_AUTHORIZATION=self.create_basic_auth_header(key.key),",
          "",
          "---------------"
        ],
        "tests/sentry/api/endpoints/test_organization_projects.py||tests/sentry/api/endpoints/test_organization_projects.py": [
          "File: tests/sentry/api/endpoints/test_organization_projects.py -> tests/sentry/api/endpoints/test_organization_projects.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.urls import reverse",
          "5: from sentry.models import ApiKey",
          "",
          "[Removed Lines]",
          "1: from base64 import b64encode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         path = reverse(self.endpoint, args=[self.organization.slug])",
          "30:         response = self.client.get(",
          "31:             path,",
          "33:         )",
          "34:         self.check_valid_response(response, [project])",
          "",
          "[Removed Lines]",
          "32:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "30:             HTTP_AUTHORIZATION=self.create_basic_auth_header(key.key),",
          "",
          "---------------"
        ],
        "tests/sentry/api/endpoints/test_organization_releases.py||tests/sentry/api/endpoints/test_organization_releases.py": [
          "File: tests/sentry/api/endpoints/test_organization_releases.py -> tests/sentry/api/endpoints/test_organization_releases.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import unittest",
          "3: from datetime import datetime, timedelta",
          "4: from functools import cached_property",
          "5: from unittest.mock import patch",
          "",
          "[Removed Lines]",
          "2: from base64 import b64encode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1633:         response = self.client.post(",
          "1634:             url,",
          "1635:             data={\"version\": \"1.2.1\", \"projects\": [project1.slug]},",
          "1637:         )",
          "1638:         assert response.status_code == 403",
          "",
          "[Removed Lines]",
          "1636:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{bad_api_key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "1635:             HTTP_AUTHORIZATION=self.create_basic_auth_header(bad_api_key.key),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1645:         response = self.client.post(",
          "1646:             url,",
          "1647:             data={\"version\": \"1.2.1\", \"projects\": [project1.slug]},",
          "1649:         )",
          "1650:         assert response.status_code == 403",
          "",
          "[Removed Lines]",
          "1648:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{wrong_org_api_key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "1647:             HTTP_AUTHORIZATION=self.create_basic_auth_header(wrong_org_api_key.key),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1657:         response = self.client.post(",
          "1658:             url,",
          "1659:             data={\"version\": \"1.2.1\", \"projects\": [project1.slug]},",
          "1661:         )",
          "1662:         assert response.status_code == 201, response.content",
          "",
          "[Removed Lines]",
          "1660:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{good_api_key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "1659:             HTTP_AUTHORIZATION=self.create_basic_auth_header(good_api_key.key),",
          "",
          "---------------"
        ],
        "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py": [
          "File: tests/sentry/api/test_base.py -> tests/sentry/api/test_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from unittest import mock",
          "3: from unittest.mock import MagicMock",
          "",
          "[Removed Lines]",
          "1: import base64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:         request = self.make_request(method=\"GET\")",
          "117:         request.META[\"HTTP_ORIGIN\"] = \"http://example.com\"",
          "122:         response = _dummy_endpoint(request)",
          "123:         response.render()",
          "",
          "[Removed Lines]",
          "118:         request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
          "119:             apikey.key.encode(\"utf-8\")",
          "120:         )",
          "",
          "[Added Lines]",
          "117:         request.META[\"HTTP_AUTHORIZATION\"] = self.create_basic_auth_header(apikey.key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:         request = self.make_request(method=\"GET\")",
          "143:         request.META[\"HTTP_ORIGIN\"] = \"http://acme.example.com\"",
          "148:         response = _dummy_endpoint(request)",
          "149:         response.render()",
          "",
          "[Removed Lines]",
          "144:         request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
          "145:             apikey.key.encode(\"utf-8\")",
          "146:         )",
          "",
          "[Added Lines]",
          "141:         request.META[\"HTTP_AUTHORIZATION\"] = self.create_basic_auth_header(apikey.key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:         for http_origin in [\"http://acme.example.com\", \"http://fakeacme.com\"]:",
          "168:             request = self.make_request(method=\"GET\")",
          "169:             request.META[\"HTTP_ORIGIN\"] = http_origin",
          "174:             response = _dummy_endpoint(request)",
          "175:             response.render()",
          "",
          "[Removed Lines]",
          "170:             request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
          "171:                 apikey.key.encode(\"utf-8\")",
          "172:             )",
          "",
          "[Added Lines]",
          "165:             request.META[\"HTTP_AUTHORIZATION\"] = self.create_basic_auth_header(apikey.key)",
          "",
          "---------------"
        ],
        "tests/sentry/middleware/test_auth.py||tests/sentry/middleware/test_auth.py": [
          "File: tests/sentry/middleware/test_auth.py -> tests/sentry/middleware/test_auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from functools import cached_property",
          "3: from unittest.mock import patch",
          "",
          "[Removed Lines]",
          "1: import base64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:                 organization_id=self.organization.id, allowed_origins=\"*\"",
          "115:             )",
          "116:             request = self.make_request(method=\"GET\")",
          "121:         self.middleware.process_request(request)",
          "122:         # ApiKey is tied to an organization not user",
          "",
          "[Removed Lines]",
          "117:             request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
          "118:                 apikey.key.encode(\"utf-8\")",
          "119:             )",
          "",
          "[Added Lines]",
          "116:             request.META[\"HTTP_AUTHORIZATION\"] = self.create_basic_auth_header(apikey.key)",
          "",
          "---------------"
        ],
        "tests/snuba/api/endpoints/test_organization_events.py||tests/snuba/api/endpoints/test_organization_events.py": [
          "File: tests/snuba/api/endpoints/test_organization_events.py -> tests/snuba/api/endpoints/test_organization_events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import math",
          "2: import uuid",
          "4: from datetime import timedelta",
          "5: from unittest import mock",
          "",
          "[Removed Lines]",
          "3: from base64 import b64encode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:             url,",
          "124:             query,",
          "125:             format=\"json\",",
          "127:         )",
          "129:         assert response.status_code == 200, response.content",
          "",
          "[Removed Lines]",
          "126:             HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{api_key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "125:             HTTP_AUTHORIZATION=self.create_basic_auth_header(api_key.key),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4219:                 url,",
          "4220:                 query,",
          "4221:                 format=\"json\",",
          "4223:             )",
          "4225:         _, kwargs = mock.call_args",
          "",
          "[Removed Lines]",
          "4222:                 HTTP_AUTHORIZATION=b\"Basic \" + b64encode(f\"{api_key.key}:\".encode()),",
          "",
          "[Added Lines]",
          "4221:                 HTTP_AUTHORIZATION=self.create_basic_auth_header(api_key.key),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ce7978b9cc81ca4c75b9286aa749b7e8e356191",
      "candidate_info": {
        "commit_hash": "2ce7978b9cc81ca4c75b9286aa749b7e8e356191",
        "repo": "getsentry/sentry",
        "commit_url": "https://github.com/getsentry/sentry/commit/2ce7978b9cc81ca4c75b9286aa749b7e8e356191",
        "files": [
          "src/sentry/api/base.py",
          "tests/sentry/api/test_base.py"
        ],
        "message": "fix(cors) Allow requests to sentry.io from subdomains (#50102)\n\nWe have a few UX flows that need to get information from an organization\nthat isn't the current one. An example of this is completing a sentry\napp installation.\n\nWe'll also be relying on CORS requests as we continue to separate the\ncontrol and region silos. If a request comes in with an Origin of a\nsubdomain, we need cookies to be sent.",
        "before_after_code_files": [
          "src/sentry/api/base.py||src/sentry/api/base.py",
          "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/sentry/api/base.py||src/sentry/api/base.py",
            "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py"
          ],
          "candidate": [
            "src/sentry/api/base.py||src/sentry/api/base.py",
            "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py"
          ]
        }
      },
      "candidate_diff": {
        "src/sentry/api/base.py||src/sentry/api/base.py": [
          "File: src/sentry/api/base.py -> src/sentry/api/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from rest_framework.views import APIView",
          "21: from sentry_sdk import Scope",
          "24: from sentry.apidocs.hooks import HTTP_METHODS_SET",
          "25: from sentry.auth import access",
          "26: from sentry.models import Environment",
          "",
          "[Removed Lines]",
          "23: from sentry import analytics, tsdb",
          "",
          "[Added Lines]",
          "23: from sentry import analytics, options, tsdb",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:         else:",
          "111:             response[\"Access-Control-Allow-Origin\"] = origin",
          "113:         return response",
          "115:     return allow_cors_options_wrapper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         # If the requesting origin is a subdomain of",
          "113:         # the application's base-hostname we should allow cookies",
          "114:         # to be sent.",
          "115:         basehost = options.get(\"system.base-hostname\")",
          "116:         if basehost and origin:",
          "117:             if origin.endswith(basehost):",
          "118:                 response[\"Access-Control-Allow-Credentials\"] = \"true\"",
          "",
          "---------------"
        ],
        "tests/sentry/api/test_base.py||tests/sentry/api/test_base.py": [
          "File: tests/sentry/api/test_base.py -> tests/sentry/api/test_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: from sentry.services.hybrid_cloud.util import FunctionSiloLimit",
          "16: from sentry.silo import SiloMode",
          "17: from sentry.testutils import APITestCase",
          "18: from sentry.utils.cursors import Cursor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: from sentry.testutils.helpers.options import override_options",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         )",
          "130:         assert response[\"Access-Control-Expose-Headers\"] == \"X-Sentry-Error, Retry-After\"",
          "131:         assert response[\"Access-Control-Allow-Methods\"] == \"GET, HEAD, OPTIONS\"",
          "133:     def test_invalid_cors_without_auth(self):",
          "134:         request = self.make_request(method=\"GET\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         assert \"Access-Control-Allow-Credentials\" not in response",
          "135:     @override_options({\"system.base-hostname\": \"example.com\"})",
          "136:     def test_allow_credentials(self):",
          "137:         org = self.create_organization()",
          "138:         apikey = ApiKey.objects.create(organization_id=org.id, allowed_origins=\"*\")",
          "140:         request = self.make_request(method=\"GET\")",
          "141:         request.META[\"HTTP_ORIGIN\"] = \"http://acme.example.com\"",
          "142:         request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
          "143:             apikey.key.encode(\"utf-8\")",
          "144:         )",
          "146:         response = _dummy_endpoint(request)",
          "147:         response.render()",
          "149:         assert response.status_code == 200, response.content",
          "150:         assert response[\"Access-Control-Allow-Origin\"] == \"http://acme.example.com\"",
          "151:         assert response[\"Access-Control-Allow-Headers\"] == (",
          "152:             \"X-Sentry-Auth, X-Requested-With, Origin, Accept, \"",
          "153:             \"Content-Type, Authentication, Authorization, Content-Encoding, \"",
          "154:             \"sentry-trace, baggage, X-CSRFToken\"",
          "155:         )",
          "156:         assert response[\"Access-Control-Expose-Headers\"] == \"X-Sentry-Error, Retry-After\"",
          "157:         assert response[\"Access-Control-Allow-Methods\"] == \"GET, HEAD, OPTIONS\"",
          "158:         assert response[\"Access-Control-Allow-Credentials\"] == \"true\"",
          "160:     @override_options({\"system.base-hostname\": \"acme.com\"})",
          "161:     def test_allow_credentials_incorrect(self):",
          "162:         org = self.create_organization()",
          "163:         apikey = ApiKey.objects.create(organization_id=org.id, allowed_origins=\"*\")",
          "165:         request = self.make_request(method=\"GET\")",
          "166:         request.META[\"HTTP_ORIGIN\"] = \"http://acme.example.com\"",
          "167:         request.META[\"HTTP_AUTHORIZATION\"] = b\"Basic \" + base64.b64encode(",
          "168:             apikey.key.encode(\"utf-8\")",
          "169:         )",
          "171:         response = _dummy_endpoint(request)",
          "172:         response.render()",
          "173:         assert \"Access-Control-Allow-Credentials\" not in response",
          "",
          "---------------"
        ]
      }
    }
  ]
}