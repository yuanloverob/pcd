{
  "cve_id": "CVE-2019-1010314",
  "cve_desc": "Gitea 1.7.2, 1.7.3 is affected by: Cross Site Scripting (XSS). The impact is: execute JavaScript in victim's browser, when the vulnerable repo page is loaded. The component is: repository's description. The attack vector is: victim must navigate to public and affected repo page.",
  "repo": "go-gitea/gitea",
  "patch_hash": "c7bbfd8f5eb097c6910e142415fcdf48fc3c9814",
  "patch_info": {
    "commit_hash": "c7bbfd8f5eb097c6910e142415fcdf48fc3c9814",
    "repo": "go-gitea/gitea",
    "commit_url": "https://github.com/go-gitea/gitea/commit/c7bbfd8f5eb097c6910e142415fcdf48fc3c9814",
    "files": [
      "models/repo.go",
      "modules/markup/html.go"
    ],
    "message": "backport 6306 (#6308)",
    "before_after_code_files": [
      "models/repo.go||models/repo.go",
      "modules/markup/html.go||modules/markup/html.go"
    ]
  },
  "patch_diff": {
    "models/repo.go||models/repo.go": [
      "File: models/repo.go -> models/repo.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "721: func (repo *Repository) DescriptionHTML() template.HTML {",
      "724:  }",
      "726: }",
      "",
      "[Removed Lines]",
      "722:  sanitize := func(s string) string {",
      "723:   return fmt.Sprintf(`<a href=\"%[1]s\" target=\"_blank\" rel=\"noopener noreferrer\">%[1]s</a>`, s)",
      "725:  return template.HTML(descPattern.ReplaceAllStringFunc(markup.Sanitize(repo.Description), sanitize))",
      "",
      "[Added Lines]",
      "722:  desc, err := markup.RenderDescriptionHTML([]byte(repo.Description), repo.HTMLURL(), repo.ComposeMetas())",
      "723:  if err != nil {",
      "724:   log.Error(4, \"Failed to render description for %s (ID: %d): %v\", repo.Name, repo.ID, err)",
      "725:   return template.HTML(markup.Sanitize(repo.Description))",
      "727:  return template.HTML(markup.Sanitize(string(desc)))",
      "",
      "---------------"
    ],
    "modules/markup/html.go||modules/markup/html.go": [
      "File: modules/markup/html.go -> modules/markup/html.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "234:  return ctx.postProcess(rawHTML)",
      "235: }",
      "237: var byteBodyTag = []byte(\"<body>\")",
      "238: var byteBodyTagClosing = []byte(\"</body>\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "239: func RenderDescriptionHTML(",
      "240:  rawHTML []byte,",
      "241:  urlPrefix string,",
      "242:  metas map[string]string,",
      "243: ) ([]byte, error) {",
      "244:  ctx := &postProcessCtx{",
      "245:   metas:     metas,",
      "246:   urlPrefix: urlPrefix,",
      "247:   procs: []processor{",
      "248:    descriptionLinkProcessor,",
      "249:   },",
      "250:  }",
      "251:  return ctx.postProcess(rawHTML)",
      "252: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "668:   node.FirstChild, node.LastChild = ch, ch",
      "669:  }",
      "670: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "690: func descriptionLinkProcessor(ctx *postProcessCtx, node *html.Node) {",
      "691:  m := linkRegex.FindStringIndex(node.Data)",
      "692:  if m == nil {",
      "693:   return",
      "694:  }",
      "695:  uri := node.Data[m[0]:m[1]]",
      "696:  replaceContent(node, m[0], m[1], createDescriptionLink(uri, uri))",
      "697: }",
      "699: func createDescriptionLink(href, content string) *html.Node {",
      "700:  textNode := &html.Node{",
      "701:   Type: html.TextNode,",
      "702:   Data: content,",
      "703:  }",
      "704:  linkNode := &html.Node{",
      "705:   FirstChild: textNode,",
      "706:   LastChild:  textNode,",
      "707:   Type:       html.ElementNode,",
      "708:   Data:       \"a\",",
      "709:   DataAtom:   atom.A,",
      "710:   Attr: []html.Attribute{",
      "711:    {Key: \"href\", Val: href},",
      "712:    {Key: \"target\", Val: \"_blank\"},",
      "713:    {Key: \"rel\", Val: \"noopener noreferrer\"},",
      "714:   },",
      "715:  }",
      "716:  textNode.Parent = linkNode",
      "717:  return linkNode",
      "718: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7bbfd8f5eb097c6910e142415fcdf48fc3c9814",
      "candidate_info": {
        "commit_hash": "c7bbfd8f5eb097c6910e142415fcdf48fc3c9814",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/c7bbfd8f5eb097c6910e142415fcdf48fc3c9814",
        "files": [
          "models/repo.go",
          "modules/markup/html.go"
        ],
        "message": "backport 6306 (#6308)",
        "before_after_code_files": [
          "models/repo.go||models/repo.go",
          "modules/markup/html.go||modules/markup/html.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "models/repo.go||models/repo.go",
            "modules/markup/html.go||modules/markup/html.go"
          ],
          "candidate": [
            "models/repo.go||models/repo.go",
            "modules/markup/html.go||modules/markup/html.go"
          ]
        }
      },
      "candidate_diff": {
        "models/repo.go||models/repo.go": [
          "File: models/repo.go -> models/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: func (repo *Repository) DescriptionHTML() template.HTML {",
          "724:  }",
          "726: }",
          "",
          "[Removed Lines]",
          "722:  sanitize := func(s string) string {",
          "723:   return fmt.Sprintf(`<a href=\"%[1]s\" target=\"_blank\" rel=\"noopener noreferrer\">%[1]s</a>`, s)",
          "725:  return template.HTML(descPattern.ReplaceAllStringFunc(markup.Sanitize(repo.Description), sanitize))",
          "",
          "[Added Lines]",
          "722:  desc, err := markup.RenderDescriptionHTML([]byte(repo.Description), repo.HTMLURL(), repo.ComposeMetas())",
          "723:  if err != nil {",
          "724:   log.Error(4, \"Failed to render description for %s (ID: %d): %v\", repo.Name, repo.ID, err)",
          "725:   return template.HTML(markup.Sanitize(repo.Description))",
          "727:  return template.HTML(markup.Sanitize(string(desc)))",
          "",
          "---------------"
        ],
        "modules/markup/html.go||modules/markup/html.go": [
          "File: modules/markup/html.go -> modules/markup/html.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:  return ctx.postProcess(rawHTML)",
          "235: }",
          "237: var byteBodyTag = []byte(\"<body>\")",
          "238: var byteBodyTagClosing = []byte(\"</body>\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: func RenderDescriptionHTML(",
          "240:  rawHTML []byte,",
          "241:  urlPrefix string,",
          "242:  metas map[string]string,",
          "243: ) ([]byte, error) {",
          "244:  ctx := &postProcessCtx{",
          "245:   metas:     metas,",
          "246:   urlPrefix: urlPrefix,",
          "247:   procs: []processor{",
          "248:    descriptionLinkProcessor,",
          "249:   },",
          "250:  }",
          "251:  return ctx.postProcess(rawHTML)",
          "252: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668:   node.FirstChild, node.LastChild = ch, ch",
          "669:  }",
          "670: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690: func descriptionLinkProcessor(ctx *postProcessCtx, node *html.Node) {",
          "691:  m := linkRegex.FindStringIndex(node.Data)",
          "692:  if m == nil {",
          "693:   return",
          "694:  }",
          "695:  uri := node.Data[m[0]:m[1]]",
          "696:  replaceContent(node, m[0], m[1], createDescriptionLink(uri, uri))",
          "697: }",
          "699: func createDescriptionLink(href, content string) *html.Node {",
          "700:  textNode := &html.Node{",
          "701:   Type: html.TextNode,",
          "702:   Data: content,",
          "703:  }",
          "704:  linkNode := &html.Node{",
          "705:   FirstChild: textNode,",
          "706:   LastChild:  textNode,",
          "707:   Type:       html.ElementNode,",
          "708:   Data:       \"a\",",
          "709:   DataAtom:   atom.A,",
          "710:   Attr: []html.Attribute{",
          "711:    {Key: \"href\", Val: href},",
          "712:    {Key: \"target\", Val: \"_blank\"},",
          "713:    {Key: \"rel\", Val: \"noopener noreferrer\"},",
          "714:   },",
          "715:  }",
          "716:  textNode.Parent = linkNode",
          "717:  return linkNode",
          "718: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2e9894988a8cb486f8838f4bf532401124802c4",
      "candidate_info": {
        "commit_hash": "b2e9894988a8cb486f8838f4bf532401124802c4",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/b2e9894988a8cb486f8838f4bf532401124802c4",
        "files": [
          "models/repo.go",
          "modules/markup/html.go"
        ],
        "message": "Fix reported issue in repo description (#6306)",
        "before_after_code_files": [
          "models/repo.go||models/repo.go",
          "modules/markup/html.go||modules/markup/html.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "models/repo.go||models/repo.go",
            "modules/markup/html.go||modules/markup/html.go"
          ],
          "candidate": [
            "models/repo.go||models/repo.go",
            "modules/markup/html.go||modules/markup/html.go"
          ]
        }
      },
      "candidate_diff": {
        "models/repo.go||models/repo.go": [
          "File: models/repo.go -> models/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "724: func (repo *Repository) DescriptionHTML() template.HTML {",
          "727:  }",
          "729: }",
          "",
          "[Removed Lines]",
          "725:  sanitize := func(s string) string {",
          "726:   return fmt.Sprintf(`<a href=\"%[1]s\" target=\"_blank\" rel=\"noopener noreferrer\">%[1]s</a>`, s)",
          "728:  return template.HTML(descPattern.ReplaceAllStringFunc(markup.Sanitize(repo.Description), sanitize))",
          "",
          "[Added Lines]",
          "725:  desc, err := markup.RenderDescriptionHTML([]byte(repo.Description), repo.HTMLURL(), repo.ComposeMetas())",
          "726:  if err != nil {",
          "727:   log.Error(4, \"Failed to render description for %s (ID: %d): %v\", repo.Name, repo.ID, err)",
          "728:   return template.HTML(markup.Sanitize(repo.Description))",
          "730:  return template.HTML(markup.Sanitize(string(desc)))",
          "",
          "---------------"
        ],
        "modules/markup/html.go||modules/markup/html.go": [
          "File: modules/markup/html.go -> modules/markup/html.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:  return ctx.postProcess(rawHTML)",
          "228: }",
          "230: var byteBodyTag = []byte(\"<body>\")",
          "231: var byteBodyTagClosing = []byte(\"</body>\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: func RenderDescriptionHTML(",
          "233:  rawHTML []byte,",
          "234:  urlPrefix string,",
          "235:  metas map[string]string,",
          "236: ) ([]byte, error) {",
          "237:  ctx := &postProcessCtx{",
          "238:   metas:     metas,",
          "239:   urlPrefix: urlPrefix,",
          "240:   procs: []processor{",
          "241:    descriptionLinkProcessor,",
          "242:   },",
          "243:  }",
          "244:  return ctx.postProcess(rawHTML)",
          "245: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "658:   node.FirstChild, node.LastChild = ch, ch",
          "659:  }",
          "660: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680: func descriptionLinkProcessor(ctx *postProcessCtx, node *html.Node) {",
          "681:  m := linkRegex.FindStringIndex(node.Data)",
          "682:  if m == nil {",
          "683:   return",
          "684:  }",
          "685:  uri := node.Data[m[0]:m[1]]",
          "686:  replaceContent(node, m[0], m[1], createDescriptionLink(uri, uri))",
          "687: }",
          "689: func createDescriptionLink(href, content string) *html.Node {",
          "690:  textNode := &html.Node{",
          "691:   Type: html.TextNode,",
          "692:   Data: content,",
          "693:  }",
          "694:  linkNode := &html.Node{",
          "695:   FirstChild: textNode,",
          "696:   LastChild:  textNode,",
          "697:   Type:       html.ElementNode,",
          "698:   Data:       \"a\",",
          "699:   DataAtom:   atom.A,",
          "700:   Attr: []html.Attribute{",
          "701:    {Key: \"href\", Val: href},",
          "702:    {Key: \"target\", Val: \"_blank\"},",
          "703:    {Key: \"rel\", Val: \"noopener noreferrer\"},",
          "704:   },",
          "705:  }",
          "706:  textNode.Parent = linkNode",
          "707:  return linkNode",
          "708: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}