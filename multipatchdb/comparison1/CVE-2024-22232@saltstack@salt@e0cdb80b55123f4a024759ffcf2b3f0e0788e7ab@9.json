{
  "cve_id": "CVE-2024-22232",
  "cve_desc": "A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master\u2019s filesystem.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1882947d8bf57d42acdaee0d93d21ec24d7c68b",
      "candidate_info": {
        "commit_hash": "f1882947d8bf57d42acdaee0d93d21ec24d7c68b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/f1882947d8bf57d42acdaee0d93d21ec24d7c68b",
        "files": [
          "tests/support/pkg.py"
        ],
        "message": "Fix the daemons path on the generated `.plist` files on MacOS\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/support/pkg.py||tests/support/pkg.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/support/pkg.py||tests/support/pkg.py": [
          "File: tests/support/pkg.py -> tests/support/pkg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:                 plist_file.unlink()",
          "825:             log.debug(\"Creating plist file for service: %s\", service)",
          "828:                 <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "829:                 <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">",
          "830:                 <plist version=\"1.0\">",
          "",
          "[Removed Lines]",
          "826:             contents = textwrap.dedent(",
          "827:                 f\"\"\"\\",
          "",
          "[Added Lines]",
          "826:             contents = f\"\"\"\\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "836:                         <key>KeepAlive</key>",
          "837:                         <true/>",
          "838:                         <key>ProgramArguments</key>",
          "842:                             <string>-c</string>",
          "843:                             <string>{self.conf_dir}</string>",
          "844:                         </array>",
          "",
          "[Removed Lines]",
          "839:                         <array>",
          "840:                             <string>{self.run_root}</string>",
          "841:                             <string>{service}</string>",
          "",
          "[Added Lines]",
          "838:                         <array>\"\"\"",
          "839:             for part in self.binary_paths[service]:",
          "840:                 contents += (",
          "841:                     f\"\"\"\\n                            <string>{part}</string>\\n\"\"\"",
          "842:                 )",
          "843:             contents += f\"\"\"\\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "855:                     </dict>",
          "856:                 </plist>",
          "857:                 \"\"\"",
          "860:             contents = plist_file.read_text()",
          "861:             log.debug(\"Created '%s'. Contents:\\n%s\", plist_file, contents)",
          "",
          "[Removed Lines]",
          "858:             )",
          "859:             plist_file.write_text(contents, encoding=\"utf-8\")",
          "",
          "[Added Lines]",
          "860:             plist_file.write_text(textwrap.dedent(contents), encoding=\"utf-8\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47de5e790bbb897c15a5d567cb8f6afe4405cb95",
      "candidate_info": {
        "commit_hash": "47de5e790bbb897c15a5d567cb8f6afe4405cb95",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/47de5e790bbb897c15a5d567cb8f6afe4405cb95",
        "files": [
          "tests/pytests/integration/minion/test_return_retries.py"
        ],
        "message": "Even more reliable pillar_timeout test",
        "before_after_code_files": [
          "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py": [
          "File: tests/pytests/integration/minion/test_return_retries.py -> tests/pytests/integration/minion/test_return_retries.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: @pytest.mark.slow_test",
          "56: def test_pillar_timeout(salt_master_factory):",
          "57:     cmd = \"\"\"",
          "59:     \"\"\".strip()",
          "60:     master_overrides = {",
          "61:         \"ext_pillar\": [",
          "",
          "[Removed Lines]",
          "58:     python -c \"import time; time.sleep(3.0); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "",
          "[Added Lines]",
          "58:     python -c \"import time; time.sleep(5); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ef5b5aa315f52a8ea58df56ed384d720c751f7b",
      "candidate_info": {
        "commit_hash": "5ef5b5aa315f52a8ea58df56ed384d720c751f7b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/5ef5b5aa315f52a8ea58df56ed384d720c751f7b",
        "files": [
          "tests/pytests/pkg/integration/test_check_imports.py"
        ],
        "message": "Don't override the results.\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/integration/test_check_imports.py||tests/pytests/pkg/integration/test_check_imports.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/integration/test_check_imports.py||tests/pytests/pkg/integration/test_check_imports.py": [
          "File: tests/pytests/pkg/integration/test_check_imports.py -> tests/pytests/pkg/integration/test_check_imports.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: def run():",
          "20:     config = {}",
          "22:         'templates', 'platform', 'cli', 'executors', 'config', 'wheel', 'netapi',",
          "23:         'cache', 'proxy', 'transport', 'metaproxy', 'modules', 'tokens', 'matchers',",
          "24:         'acl', 'auth', 'log', 'engines', 'client', 'returners', 'runners', 'tops',",
          "",
          "[Removed Lines]",
          "21:     for test_import in [",
          "",
          "[Added Lines]",
          "21:     for module in [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         'beacons', 'pillar', 'spm', 'utils', 'sdb', 'fileserver', 'defaults',",
          "27:         'ext', 'queues', 'grains', 'serializers'",
          "28:     ]:",
          "29:         try:",
          "31:             importlib.import_module(import_name)",
          "33:                 'test.succeed_without_changes': [",
          "34:                     {",
          "38:             }",
          "39:         except ModuleNotFoundError as err:",
          "41:                 'test.fail_without_changes': [",
          "42:                     {",
          "47:             }",
          "50:         try:",
          "53:                 'test.succeed_without_changes': [",
          "54:                     {",
          "58:             }",
          "59:         except ModuleNotFoundError as err:",
          "61:                 'test.fail_without_changes': [",
          "62:                     {",
          "67:             }",
          "68:     return config",
          "69: \"\"\"",
          "",
          "[Removed Lines]",
          "30:             import_name = \"salt.{}\".format(test_import)",
          "32:             config['test_imports_succeeded'] = {",
          "35:                         'name': import_name",
          "36:                     },",
          "37:                 ],",
          "40:             config['test_imports_failed'] = {",
          "43:                         'name': import_name,",
          "44:                         'comment': \"The imports test failed. The error was: {}\".format(err)",
          "45:                     },",
          "46:                 ],",
          "49:     for stdlib_import in [\"telnetlib\"]:",
          "51:             importlib.import_module(stdlib_import)",
          "52:             config['stdlib_imports_succeeded'] = {",
          "55:                         'name': stdlib_import",
          "56:                     },",
          "57:                 ],",
          "60:             config['stdlib_imports_failed'] = {",
          "63:                         'name': stdlib_import,",
          "64:                         'comment': \"The stdlib imports test failed. The error was: {}\".format(err)",
          "65:                     },",
          "66:                 ],",
          "",
          "[Added Lines]",
          "29:         import_name = \"salt.{}\".format(module)",
          "32:             config[import_name] = {",
          "35:                         \"name\": import_name,",
          "36:                         'comment': \"The '{}' import succeeded.\".format(import_name)",
          "37:                     }",
          "38:                 ]",
          "41:             config[import_name] = {",
          "44:                         \"name\": import_name,",
          "45:                         'comment': \"The '{}' import failed. The error was: {}\".format(import_name, err)",
          "46:                     }",
          "47:                 ]",
          "50:     for import_name in [\"telnetlib\"]:",
          "52:             importlib.import_module(import_name)",
          "53:             config[import_name] = {",
          "56:                         \"name\": import_name,",
          "57:                         'comment': \"The '{}' import succeeded.\".format(import_name)",
          "58:                     }",
          "59:                 ]",
          "62:             config[import_name] = {",
          "65:                         \"name\": import_name,",
          "66:                         'comment': \"The '{}' import failed. The error was: {}\".format(import_name, err)",
          "67:                     }",
          "68:                 ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6575f9b627eb2840774777249f56570ed84481fa",
      "candidate_info": {
        "commit_hash": "6575f9b627eb2840774777249f56570ed84481fa",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/6575f9b627eb2840774777249f56570ed84481fa",
        "files": [
          "tests/pytests/pkg/integration/test_salt_user.py"
        ],
        "message": "Fix variable name\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py": [
          "File: tests/pytests/pkg/integration/test_salt_user.py -> tests/pytests/pkg/integration/test_salt_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:                                         f\"cp -a {_path}/* {str(temp_dir_path_4)}/\"",
          "253:                                     )",
          "254:                                 elif bkup_count > 5:",
          "257:                                 ret = salt_call_cli.run(",
          "258:                                     \"--local\", \"cmd.run\", cmd_to_run",
          "",
          "[Removed Lines]",
          "255:                                     assert bkupcount < bkup_count_max  # force assertion",
          "",
          "[Added Lines]",
          "255:                                     # force assertion",
          "256:                                     assert bkup_count < bkup_count_max",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:                                     # use --update since /opt/saltstack/salt and would get SIGSEGV since mucking with running code",
          "350:                                     cmd_to_run = f\"cp -a --update --force {str(temp_dir_path_4)}/* {_path}/\"",
          "351:                                 elif bkup_count > 5:",
          "354:                                 ret = salt_call_cli.run(",
          "355:                                     \"--local\", \"cmd.run\", cmd_to_run",
          "",
          "[Removed Lines]",
          "352:                                     assert bkupcount < bkup_count_max  # force assertion",
          "",
          "[Added Lines]",
          "353:                                     # force assertion",
          "354:                                     assert bkup_count < bkup_count_max",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b2e9cae6a4d0370880f9163df8eda4bdcbdbd24",
      "candidate_info": {
        "commit_hash": "4b2e9cae6a4d0370880f9163df8eda4bdcbdbd24",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/4b2e9cae6a4d0370880f9163df8eda4bdcbdbd24",
        "files": [
          "tools/testsuite/__init__.py",
          "tools/testsuite/download.py",
          "tools/utils/gh.py"
        ],
        "message": "Fix CI nox artifacts download\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/testsuite/__init__.py||tools/testsuite/__init__.py",
          "tools/testsuite/download.py||tools/testsuite/download.py",
          "tools/utils/gh.py||tools/utils/gh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/testsuite/__init__.py||tools/testsuite/__init__.py": [
          "File: tools/testsuite/__init__.py -> tools/testsuite/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         },",
          "49:         \"platform\": {",
          "50:             \"help\": \"The onedir platform artifact to download\",",
          "52:             \"required\": True,",
          "53:         },",
          "54:         \"arch\": {",
          "",
          "[Removed Lines]",
          "51:             \"choices\": (\"linux\", \"darwin\", \"windows\"),",
          "",
          "[Added Lines]",
          "51:             \"choices\": (\"linux\", \"macos\", \"windows\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     if exitcode and exitcode != ExitCode.SOFT_FAIL:",
          "147:         ctx.exit(exitcode)",
          "148:     exitcode = tools.utils.gh.download_nox_artifact(",
          "150:     )",
          "151:     if exitcode and exitcode != ExitCode.SOFT_FAIL:",
          "152:         ctx.exit(exitcode)",
          "",
          "[Removed Lines]",
          "149:         ctx, run_id=run_id, slug=slug, nox_env=\"ci-test-onedir\", repository=repository",
          "",
          "[Added Lines]",
          "149:         ctx,",
          "150:         run_id=run_id,",
          "151:         platform=platform,",
          "152:         arch=arch,",
          "153:         nox_env=\"ci-test-onedir\",",
          "154:         repository=repository,",
          "",
          "---------------"
        ],
        "tools/testsuite/download.py||tools/testsuite/download.py": [
          "File: tools/testsuite/download.py -> tools/testsuite/download.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             \"help\": \"The workflow run ID from where to download artifacts from\",",
          "78:             \"required\": True,",
          "79:         },",
          "82:             \"required\": True,",
          "84:         },",
          "85:         \"nox_env\": {",
          "86:             \"help\": \"The nox environment name.\",",
          "",
          "[Removed Lines]",
          "80:         \"slug\": {",
          "81:             \"help\": \"The OS slug\",",
          "83:             \"choices\": OS_SLUGS,",
          "",
          "[Added Lines]",
          "80:         \"platform\": {",
          "81:             \"help\": \"The onedir platform artifact to download\",",
          "82:             \"choices\": (\"linux\", \"macos\", \"windows\"),",
          "83:             \"required\": True,",
          "84:         },",
          "85:         \"arch\": {",
          "86:             \"help\": \"The onedir artifact architecture\",",
          "87:             \"choices\": (\"x86_64\", \"aarch64\", \"amd64\", \"x86\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: def download_nox_artifact(",
          "94:     ctx: Context,",
          "95:     run_id: int = None,",
          "97:     nox_env: str = \"ci-test-onedir\",",
          "98:     repository: str = \"saltstack/salt\",",
          "99: ):",
          "",
          "[Removed Lines]",
          "96:     slug: str = None,",
          "",
          "[Added Lines]",
          "101:     platform: str = None,",
          "102:     arch: str = None,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     \"\"\"",
          "103:     if TYPE_CHECKING:",
          "104:         assert run_id is not None",
          "111:     exitcode = tools.utils.gh.download_nox_artifact(",
          "113:     )",
          "114:     ctx.exit(exitcode)",
          "",
          "[Removed Lines]",
          "105:         assert slug is not None",
          "107:     if slug.endswith(\"arm64\"):",
          "108:         slug = slug.replace(\"-arm64\", \"\")",
          "109:         nox_env += \"-aarch64\"",
          "112:         ctx=ctx, run_id=run_id, slug=slug, nox_env=nox_env, repository=repository",
          "",
          "[Added Lines]",
          "111:         assert arch is not None",
          "112:         assert platform is not None",
          "115:         ctx=ctx,",
          "116:         run_id=run_id,",
          "117:         platform=platform,",
          "118:         arch=arch,",
          "119:         nox_env=nox_env,",
          "120:         repository=repository,",
          "",
          "---------------"
        ],
        "tools/utils/gh.py||tools/utils/gh.py": [
          "File: tools/utils/gh.py -> tools/utils/gh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: def download_nox_artifact(",
          "107:     ctx: Context,",
          "108:     run_id: int = None,",
          "110:     nox_env: str = \"ci-test-onedir\",",
          "111:     repository: str = \"saltstack/salt\",",
          "112: ) -> ExitCode:",
          "",
          "[Removed Lines]",
          "109:     slug: str = None,",
          "",
          "[Added Lines]",
          "108:     platform: str,",
          "109:     arch: str,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     \"\"\"",
          "116:     if TYPE_CHECKING:",
          "117:         assert run_id is not None",
          "120:     artifacts_path = tools.utils.REPO_ROOT / \".nox\" / nox_env",
          "121:     if artifacts_path.exists():",
          "",
          "[Removed Lines]",
          "118:         assert slug is not None",
          "",
          "[Added Lines]",
          "119:         assert arch is not None",
          "120:         assert platform is not None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:             f\"The '.nox/{nox_env}' directory already exists ... Stopped processing.\"",
          "124:         )",
          "125:         return ExitCode.SOFT_FAIL",
          "127:     ctx.info(",
          "128:         f\"Searching for artifact {artifact_name} from run_id {run_id} in repository {repository} ...\"",
          "129:     )",
          "",
          "[Removed Lines]",
          "126:     artifact_name = f\"nox-{slug}-{nox_env}\"",
          "",
          "[Added Lines]",
          "128:     artifact_name = f\"nox-{platform}-{arch}-{nox_env}\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:         ctx.error(\"Could not find the 'nox' binary in $PATH\")",
          "140:         return ExitCode.FAIL",
          "141:     ret = ctx.run(",
          "143:     )",
          "144:     if ret.returncode:",
          "145:         ctx.error(\"Failed to decompress the nox dependencies\")",
          "",
          "[Removed Lines]",
          "142:         nox, \"--force-color\", \"-e\", \"decompress-dependencies\", \"--\", slug, check=False",
          "",
          "[Added Lines]",
          "144:         nox,",
          "145:         \"--force-color\",",
          "146:         \"-e\",",
          "147:         \"decompress-dependencies\",",
          "148:         \"--\",",
          "149:         platform,",
          "150:         arch,",
          "151:         check=False,",
          "",
          "---------------"
        ]
      }
    }
  ]
}