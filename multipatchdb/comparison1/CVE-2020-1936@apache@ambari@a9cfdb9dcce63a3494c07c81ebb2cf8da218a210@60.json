{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ebc084e74cf10ba14ab7cae86864b988f87b50b5",
      "candidate_info": {
        "commit_hash": "ebc084e74cf10ba14ab7cae86864b988f87b50b5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ebc084e74cf10ba14ab7cae86864b988f87b50b5",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py",
          "ambari-server/src/main/resources/stacks/HDP/2.0.6/configuration/cluster-env.xml"
        ],
        "message": "AMBARI-24622. Allow skipping package operations for LZO on sysprepped hosts (#2374)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py||ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py||ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py -> ambari-common/src/main/python/resource_management/libraries/functions/lzo_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   return True",
          "77: def install_lzo_if_needed():",
          "78:   \"\"\"",
          "79:   Install lzo package if {#should_install_lzo} is true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: def skip_package_operations():",
          "78:   \"\"\"",
          "79:   Return true if LZO packages are assumed to be pre-installed",
          "80:   Needs to be separate from should_install_lzo, as that one is used during tarball creation, too",
          "81:   \"\"\"",
          "82:   return default(\"/ambariLevelParams/host_sys_prepped\", False) and default(\"/configurations/cluster-env/sysprep_skip_lzo_package_operations\", False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   if not should_install_lzo():",
          "82:     return",
          "84:   # If user has just accepted GPL license. GPL repository can not yet be present.",
          "85:   Script.repository_util.create_repo_files()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   if skip_package_operations():",
          "92:     Logger.info(\"Skipping LZO package installation as host is sys prepped\")",
          "93:     return",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92827f0042d9c874d762412023489ca1d6166f36",
      "candidate_info": {
        "commit_hash": "92827f0042d9c874d762412023489ca1d6166f36",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/92827f0042d9c874d762412023489ca1d6166f36",
        "files": [
          "ambari-web/app/views/common/configs/service_config_container_view.js"
        ],
        "message": "AMBARI-24620 Duplicate view of configurations in Add Service wizard",
        "before_after_code_files": [
          "ambari-web/app/views/common/configs/service_config_container_view.js||ambari-web/app/views/common/configs/service_config_container_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/views/common/configs/service_config_container_view.js||ambari-web/app/views/common/configs/service_config_container_view.js": [
          "File: ambari-web/app/views/common/configs/service_config_container_view.js -> ambari-web/app/views/common/configs/service_config_container_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   view: null,",
          "27:   lazyLoading: null,",
          "29:   didInsertElement: function () {",
          "30:     if (this.get('controller.isInstallWizard')) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   pushViewTimeout: null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     if (this.get('controller.isRecommendedLoaded')) {",
          "113:       this.pushView();",
          "114:     } else {",
          "116:     }",
          "117:   }",
          "",
          "[Removed Lines]",
          "115:       Em.run.later(this.pushViewAfterRecommendation.bind(this), 300);",
          "",
          "[Added Lines]",
          "117:       clearTimeout(this.get('pushViewTimeout'));",
          "118:       this.set('pushViewTimeout', setTimeout(() => this.pushViewAfterRecommendation(), 300));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63be8e20dac7d66a35ea4714e46086631644a388",
      "candidate_info": {
        "commit_hash": "63be8e20dac7d66a35ea4714e46086631644a388",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/63be8e20dac7d66a35ea4714e46086631644a388",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ],
        "message": "AMBARI-25159. http.strict-transport-security change does not take affect in 2.7.x. (mpapirkovskyy) (#2832)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: import org.eclipse.jetty.server.HttpConfiguration;",
          "135: import org.eclipse.jetty.server.HttpConnectionFactory;",
          "136: import org.eclipse.jetty.server.NCSARequestLog;",
          "137: import org.eclipse.jetty.server.Server;",
          "138: import org.eclipse.jetty.server.ServerConnector;",
          "139: import org.eclipse.jetty.server.SessionIdManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: import org.eclipse.jetty.server.SecureRequestCustomizer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:       HttpConfiguration https_config = new HttpConfiguration();",
          "636:       https_config.setRequestHeaderSize(configs.getHttpRequestHeaderSize());",
          "637:       https_config.setResponseHeaderSize(configs.getHttpResponseHeaderSize());",
          "638:       https_config.setSendServerVersion(false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637:       https_config.addCustomizer(new SecureRequestCustomizer());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7eb83d0803d54cdb0e75964a6e08f028cad93417",
      "candidate_info": {
        "commit_hash": "7eb83d0803d54cdb0e75964a6e08f028cad93417",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7eb83d0803d54cdb0e75964a6e08f028cad93417",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java"
        ],
        "message": "AMBARI-25386. dfs_ha_initial_* properties should be removed during upgrade. (#3087)\n\n* AMBARI-25386. dfs_ha_initial_* properties should be removed during upgrade. (mpapirkovskyy)\n\n* AMBARI-25386. dfs_ha_initial_* properties should be removed during upgrade. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:       catalogBinder.addBinding().to(UpgradeCatalog272.class);",
          "194:       catalogBinder.addBinding().to(UpgradeCatalog273.class);",
          "195:       catalogBinder.addBinding().to(UpgradeCatalog274.class);",
          "196:       catalogBinder.addBinding().to(UpdateAlertScriptPaths.class);",
          "197:       catalogBinder.addBinding().to(FinalUpgradeCatalog.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:       catalogBinder.addBinding().to(UpgradeCatalog275.class);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog275.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import java.sql.SQLException;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "26: import org.apache.ambari.server.AmbariException;",
          "27: import org.apache.ambari.server.orm.dao.BlueprintDAO;",
          "28: import org.apache.ambari.server.orm.entities.BlueprintConfigEntity;",
          "29: import org.apache.ambari.server.orm.entities.BlueprintEntity;",
          "31: import com.google.gson.Gson;",
          "32: import com.google.inject.Inject;",
          "33: import com.google.inject.Injector;",
          "38: public class UpgradeCatalog275 extends AbstractUpgradeCatalog {",
          "40:   static final Gson GSON = new Gson();",
          "43:   @Inject",
          "44:   public UpgradeCatalog275(Injector injector) {",
          "45:     super(injector);",
          "46:   }",
          "48:   @Override",
          "49:   public String getSourceVersion() {",
          "50:     return \"2.7.4\";",
          "51:   }",
          "53:   @Override",
          "54:   public String getTargetVersion() {",
          "55:     return \"2.7.5\";",
          "56:   }",
          "64:   @Override",
          "65:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "67:   }",
          "75:   @Override",
          "76:   protected void executePreDMLUpdates() throws AmbariException, SQLException {",
          "77:     removeDfsHAInitial();",
          "78:   }",
          "86:   @Override",
          "87:   protected void executeDMLUpdates() throws AmbariException, SQLException {",
          "88:     addNewConfigurationsFromXml();",
          "89:   }",
          "91:   protected void removeDfsHAInitial() {",
          "92:     BlueprintDAO blueprintDAO = injector.getInstance(BlueprintDAO.class);",
          "93:     List<BlueprintEntity> blueprintEntityList = blueprintDAO.findAll();",
          "94:     List<BlueprintEntity> changedBlueprints = new ArrayList<>();",
          "95:     for (BlueprintEntity blueprintEntity : blueprintEntityList){",
          "96:       boolean changed = false;",
          "97:       Collection<BlueprintConfigEntity> blueprintConfigurations = blueprintEntity.getConfigurations();",
          "98:       for (BlueprintConfigEntity blueprintConfigEntity : blueprintConfigurations) {",
          "99:         if (blueprintConfigEntity.getType().equals(\"hadoop-env\")) {",
          "100:           String configData = blueprintConfigEntity.getConfigData();",
          "102:           Map<String, String> typeProperties = GSON.<Map<String, String>>fromJson(",
          "103:             configData, Map.class);",
          "105:           typeProperties.remove(\"dfs_ha_initial_namenode_standby\");",
          "106:           typeProperties.remove(\"dfs_ha_initial_namenode_active\");",
          "108:           blueprintConfigEntity.setConfigData(GSON.toJson(typeProperties));",
          "109:           changed = true;",
          "110:         }",
          "111:       }",
          "112:       if (changed) {",
          "113:         changedBlueprints.add(blueprintEntity);",
          "114:       }",
          "115:     }",
          "116:     for (BlueprintEntity blueprintEntity : changedBlueprints) {",
          "117:       blueprintDAO.merge(blueprintEntity);",
          "118:     }",
          "119:   }",
          "120: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog275Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import static org.easymock.EasyMock.capture;",
          "21: import static org.easymock.EasyMock.createMock;",
          "22: import static org.easymock.EasyMock.createNiceMock;",
          "23: import static org.easymock.EasyMock.expect;",
          "24: import static org.easymock.EasyMock.replay;",
          "25: import static org.easymock.EasyMock.verify;",
          "27: import java.util.Collection;",
          "28: import java.util.Collections;",
          "29: import java.util.List;",
          "30: import java.util.Map;",
          "32: import org.apache.ambari.server.orm.dao.BlueprintDAO;",
          "33: import org.apache.ambari.server.orm.entities.BlueprintConfigEntity;",
          "34: import org.apache.ambari.server.orm.entities.BlueprintEntity;",
          "35: import org.easymock.Capture;",
          "36: import org.junit.Assert;",
          "37: import org.junit.Test;",
          "39: import com.google.inject.Injector;",
          "41: public class UpgradeCatalog275Test {",
          "43:   @Test",
          "44:   public void testRemoveDfsHAInitial() {",
          "45:     Injector injector = createNiceMock(Injector.class);",
          "46:     BlueprintDAO blueprintDAO = createMock(BlueprintDAO.class);",
          "48:     BlueprintConfigEntity blueprintConfigEntity = new BlueprintConfigEntity();",
          "49:     blueprintConfigEntity.setType(\"hadoop-env\");",
          "50:     blueprintConfigEntity.setConfigData(\"{\\\"dfs_ha_initial_namenode_standby\\\":\\\"%HOSTGROUP::master_2%\\\",\" +",
          "51:                                           \"\\\"dfs_ha_initial_namenode_active\\\":\\\"u1602.ambari.apache.org\\\"}\");",
          "53:     List<BlueprintConfigEntity> blueprintConfigurations = Collections.singletonList(blueprintConfigEntity);",
          "55:     BlueprintEntity blueprintEntity = new BlueprintEntity();",
          "56:     blueprintEntity.setConfigurations(blueprintConfigurations);",
          "58:     List<BlueprintEntity> blueprintEntityList = Collections.singletonList(blueprintEntity);",
          "60:     expect(injector.getInstance(BlueprintDAO.class)).andReturn(blueprintDAO);",
          "61:     expect(blueprintDAO.findAll()).andReturn(blueprintEntityList);",
          "63:     Capture<BlueprintEntity> blueprintEntityCapture = Capture.newInstance();",
          "64:     expect(blueprintDAO.merge(capture(blueprintEntityCapture))).andReturn(null);",
          "66:     replay(injector, blueprintDAO);",
          "68:     UpgradeCatalog275 upgradeCatalog275 = new UpgradeCatalog275(injector);",
          "69:     upgradeCatalog275.removeDfsHAInitial();",
          "71:     verify(injector, blueprintDAO);",
          "73:     Assert.assertNotNull(blueprintEntityCapture.getValues());",
          "74:     Assert.assertEquals(1, blueprintEntityCapture.getValues().size());",
          "76:     BlueprintEntity blueprintEntityToMerge = blueprintEntityCapture.getValue();",
          "78:     Collection<BlueprintConfigEntity> resultConfigurations = blueprintEntityToMerge.getConfigurations();",
          "79:     for (BlueprintConfigEntity resultConfiguration : resultConfigurations) {",
          "80:       if (resultConfiguration.getType().equals(\"hadoop-env\")) {",
          "81:         String configData = resultConfiguration.getConfigData();",
          "83:         Map<String, String> typeProperties = UpgradeCatalog275.GSON.<Map<String, String>>fromJson(",
          "84:           configData, Map.class);",
          "85:         Assert.assertEquals(0, typeProperties.size());",
          "86:         return;",
          "87:       }",
          "88:     }",
          "89:     Assert.fail(\"No \\\"hadoop-env\\\" config type was found in result configuration\");",
          "90:   }",
          "91: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef51fd9e8ec8f7bb90687ff7abb04d233504e191",
      "candidate_info": {
        "commit_hash": "ef51fd9e8ec8f7bb90687ff7abb04d233504e191",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ef51fd9e8ec8f7bb90687ff7abb04d233504e191",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java"
        ],
        "message": "[AMBARI-23057] Upgrade fails because of Stale alert definitions (apappu) (#2885)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java||ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java||ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "49: import org.apache.ambari.server.configuration.Configuration;",
          "50: import org.apache.ambari.server.orm.DBAccessor;",
          "51: import org.apache.ambari.server.orm.dao.ClusterDAO;",
          "52: import org.apache.ambari.server.orm.dao.ExecutionCommandDAO;",
          "53: import org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.ambari.server.orm.dao.AlertDefinitionDAO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;",
          "56: import org.apache.ambari.server.orm.dao.MetainfoDAO;",
          "57: import org.apache.ambari.server.orm.dao.StageDAO;",
          "58: import org.apache.ambari.server.orm.entities.ClusterConfigEntity;",
          "59: import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;",
          "60: import org.apache.ambari.server.orm.entities.HostComponentStateEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.orm.entities.AlertDefinitionEntity;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:   private static Injector injector;",
          "95:   private static MetainfoDAO metainfoDAO;",
          "96:   private static Connection connection;",
          "97:   private static AmbariMetaInfo ambariMetaInfo;",
          "98:   private static DBAccessor dbAccessor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   private static AlertDefinitionDAO alertDefinitionDAO;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:     closeConnection();",
          "161:     connection = null;",
          "162:     metainfoDAO = null;",
          "163:     ambariMetaInfo = null;",
          "164:     dbAccessor = null;",
          "165:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     alertDefinitionDAO = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:         fixConfigGroupHostMappings();",
          "192:         fixConfigGroupsForDeletedServices();",
          "193:         fixConfigsSelectedMoreThanOnce();",
          "194:       }",
          "195:       checkSchemaName();",
          "196:       checkMySQLEngine();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:         fixAlertsForDeletedServices();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:       checkConfigGroupsHasServiceName();",
          "204:       checkConfigGroupHostMapping(true);",
          "205:       checkConfigGroupsForDeletedServices(true);",
          "206:       LOG.info(\"******************************* Check database completed *******************************\");",
          "207:       return checkResult;",
          "208:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:       checkForStalealertdefs();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218:     if (metainfoDAO == null) {",
          "219:       metainfoDAO = injector.getInstance(MetainfoDAO.class);",
          "220:     }",
          "222:     MetainfoEntity schemaVersionEntity = metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY);",
          "223:     String schemaVersion = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:     if (alertDefinitionDAO == null) {",
          "228:       alertDefinitionDAO = injector.getInstance(AlertDefinitionDAO.class);",
          "229:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "810:     }",
          "811:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825:   static Map<String, String>  checkForStalealertdefs () {",
          "826:     Configuration conf = injector.getInstance(Configuration.class);",
          "827:     Map<String, String> alertInfo = new HashMap<>();",
          "828:     LOG.info(\"Checking to ensure there is no stale alert definitions\");",
          "830:     ensureConnection();",
          "832:     String STALE_ALERT_DEFINITIONS = \"select definition_name, service_name from alert_definition where service_name not in \" +",
          "833:             \"(select service_name from clusterservices) and service_name not in ('AMBARI')\";",
          "835:     ResultSet rs = null;",
          "836:     Statement statement;",
          "838:     try {",
          "839:       statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
          "840:       rs = statement.executeQuery(STALE_ALERT_DEFINITIONS);",
          "841:       if (rs != null) {",
          "842:         while (rs.next()) {",
          "843:           alertInfo.put(rs.getString(\"definition_name\"),rs.getString(\"service_name\"));",
          "844:         }",
          "845:         if (!alertInfo.isEmpty()){",
          "846:           String alertInfoStr = \"\";",
          "847:           for (Map.Entry<String, String> entry : alertInfo.entrySet()) {",
          "848:             alertInfoStr = entry.getKey() + \"(\" + entry.getValue() + \")\" ;",
          "849:           }",
          "850:           warning(\"You have Alerts that are not mapped with any services : {}.Run --auto-fix-database to fix \"  +",
          "851:                   \"this automatically. Please backup Ambari Server database before running --auto-fix-database.\", alertInfoStr);",
          "852:         }",
          "853:       }",
          "854:     } catch (SQLException e) {",
          "855:       warning(\"Exception occurred during checking for stale alert definitions: \", e);",
          "856:     } finally {",
          "857:       if (rs != null) {",
          "858:         try {",
          "859:           rs.close();",
          "860:         } catch (SQLException e) {",
          "861:           LOG.error(\"Exception occurred during  checking for stale alert definitions: \", e);",
          "862:         }",
          "863:       }",
          "864:     }",
          "865:     return alertInfo;",
          "866:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1234:     }",
          "1235:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1292:   @Transactional",
          "1293:   static void fixAlertsForDeletedServices() {",
          "1295:     Configuration conf = injector.getInstance(Configuration.class);",
          "1297:     LOG.info(\"fixAlertsForDeletedServices stale alert definitions for deleted services\");",
          "1299:     ensureConnection();",
          "1301:     String SELECT_STALE_ALERT_DEFINITIONS = \"select definition_id from alert_definition where service_name not in \" +",
          "1302:             \"(select service_name from clusterservices) and service_name not in ('AMBARI')\";",
          "1304:     int recordsCount = 0;",
          "1305:     Statement statement = null;",
          "1306:     ResultSet rs = null;",
          "1307:     List<Integer> alertIds = new ArrayList<Integer>();",
          "1308:     try {",
          "1309:       statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
          "1310:       rs = statement.executeQuery(SELECT_STALE_ALERT_DEFINITIONS);",
          "1311:       while (rs.next()) {",
          "1312:         alertIds.add(rs.getInt(\"definition_id\"));",
          "1313:       }",
          "1315:     } catch (SQLException e) {",
          "1316:       warning(\"Exception occurred during fixing stale alert definitions: \", e);",
          "1317:     } finally {",
          "1318:       if (statement != null) {",
          "1319:         try {",
          "1320:           statement.close();",
          "1321:         } catch (SQLException e) {",
          "1322:           LOG.error(\"Exception occurred during fixing stale alert definitions: \", e);",
          "1323:         }",
          "1324:       }",
          "1325:       if (rs != null) {",
          "1326:         try {",
          "1327:           rs.close();",
          "1328:         } catch (SQLException e) {",
          "1329:           LOG.error(\"Exception occurred during fixing stale alert definitions: \", e);",
          "1330:         }",
          "1331:       }",
          "1332:     }",
          "1334:     for(Integer alertId : alertIds) {",
          "1335:       final AlertDefinitionEntity entity = alertDefinitionDAO.findById(alertId.intValue());",
          "1336:       alertDefinitionDAO.remove(entity);",
          "1337:     }",
          "1338:     warning(\"fixAlertsForDeletedServices - {}  Stale alerts were deleted\", alertIds.size());",
          "1340:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.state.Host;",
          "57: import org.apache.ambari.server.state.Service;",
          "58: import org.apache.ambari.server.state.ServiceInfo;",
          "59: import org.apache.ambari.server.state.configgroup.ConfigGroup;",
          "60: import org.apache.ambari.server.state.stack.OsFamily;",
          "61: import org.apache.ambari.server.testutils.PartialNiceMockBinder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.state.alert.AlertDefinition;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668:     Assert.assertTrue(configGroups.containsKey(3L));",
          "669:   }",
          "671:   @Test",
          "672:   public void testCollectConfigGroupsWithoutServiceName() throws Exception {",
          "673:     EasyMockSupport easyMockSupport = new EasyMockSupport();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672:   @Test",
          "673:   public void testCheckForStalealertdefs() throws Exception {",
          "674:     EasyMockSupport easyMockSupport = new EasyMockSupport();",
          "675:     final AlertDefinition alertDefinition = easyMockSupport.createNiceMock(AlertDefinition.class);",
          "676:     final DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(DBAccessor.class);",
          "677:     final StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(StackManagerFactory.class);",
          "678:     final EntityManager mockEntityManager = easyMockSupport.createNiceMock(EntityManager.class);",
          "679:     final Clusters mockClusters = easyMockSupport.createNiceMock(Clusters.class);",
          "680:     final OsFamily mockOSFamily = easyMockSupport.createNiceMock(OsFamily.class);",
          "682:     final Injector mockInjector = Guice.createInjector(new AbstractModule() {",
          "683:       @Override",
          "684:       protected void configure() {",
          "685:         bind(AlertDefinition.class).toInstance(alertDefinition);",
          "686:         bind(StackManagerFactory.class).toInstance(mockStackManagerFactory);",
          "687:         bind(EntityManager.class).toInstance(mockEntityManager);",
          "688:         bind(DBAccessor.class).toInstance(mockDBDbAccessor);",
          "689:         bind(Clusters.class).toInstance(mockClusters);",
          "690:         bind(OsFamily.class).toInstance(mockOSFamily);",
          "691:       }",
          "692:     });",
          "693:     final ResultSet staleAlertResultSet = easyMockSupport.createNiceMock(ResultSet.class);",
          "694:     expect(staleAlertResultSet.next()).andReturn(true).once();",
          "695:     expect(staleAlertResultSet.getString(\"definition_name\")).andReturn(\"ALERT-NAME\").atLeastOnce();",
          "696:     expect(staleAlertResultSet.getString(\"service_name\")).andReturn(\"SERVICE-DELETED\").atLeastOnce();",
          "697:     final Connection mockConnection = easyMockSupport.createNiceMock(Connection.class);",
          "698:     final Statement mockStatement = easyMockSupport.createNiceMock(Statement.class);",
          "700:     expect(mockDBDbAccessor.getConnection()).andReturn(mockConnection);",
          "701:     expect(mockDBDbAccessor.getDbType()).andReturn(DBAccessor.DbType.MYSQL);",
          "702:     expect(mockDBDbAccessor.getDbSchema()).andReturn(\"test_schema\");",
          "704:     expect(mockConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement).anyTimes();",
          "705:     expect(mockStatement.executeQuery(\"select definition_name, service_name from alert_definition where service_name not in \" +",
          "706:             \"(select service_name from clusterservices) and service_name not in ('AMBARI')\")).andReturn(staleAlertResultSet);",
          "708:     expect(alertDefinition.getDefinitionId()).andReturn(1L);",
          "709:     expect(alertDefinition.getName()).andReturn(\"AlertTest\");",
          "711:     DatabaseConsistencyCheckHelper.setInjector(mockInjector);",
          "713:     easyMockSupport.replayAll();",
          "715:     Map<String, String> stalealertdefs1 = DatabaseConsistencyCheckHelper.checkForStalealertdefs();",
          "717:     Assert.assertEquals(1, stalealertdefs1.size());",
          "718:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}