{
  "cve_id": "CVE-2017-14695",
  "cve_desc": "Directory traversal vulnerability in minion id validation in SaltStack Salt before 2016.3.8, 2016.11.x before 2016.11.8, and 2017.7.x before 2017.7.2 allows remote minions with incorrect credentials to authenticate to a master via a crafted minion ID.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12791.",
  "repo": "saltstack/salt",
  "patch_hash": "80d90307b07b3703428ecbb7c8bb468e28a9ae6d",
  "patch_info": {
    "commit_hash": "80d90307b07b3703428ecbb7c8bb468e28a9ae6d",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/80d90307b07b3703428ecbb7c8bb468e28a9ae6d",
    "files": [
      "salt/utils/verify.py",
      "tests/unit/utils/test_verify.py"
    ],
    "message": "Don't allow path separators in minion ID",
    "before_after_code_files": [
      "salt/utils/verify.py||salt/utils/verify.py",
      "tests/unit/utils/test_verify.py||tests/unit/utils/test_verify.py"
    ]
  },
  "patch_diff": {
    "salt/utils/verify.py||salt/utils/verify.py": [
      "File: salt/utils/verify.py -> salt/utils/verify.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "480:     return ''",
      "492: def valid_id(opts, id_):",
      "493:     '''",
      "494:     Returns if the passed id is valid",
      "495:     '''",
      "496:     try:",
      "499:         return False",
      "",
      "[Removed Lines]",
      "483: def clean_id(id_):",
      "484:     '''",
      "485:     Returns if the passed id is clean.",
      "486:     '''",
      "487:     if re.search(r'\\.\\.\\{sep}'.format(sep=os.sep), id_):",
      "488:         return False",
      "489:     return True",
      "497:         return bool(clean_path(opts['pki_dir'], id_)) and clean_id(id_)",
      "498:     except (AttributeError, KeyError, TypeError) as e:",
      "",
      "[Added Lines]",
      "488:         if any(x in id_ for x in ('/', '\\\\', '\\0')):",
      "489:             return False",
      "490:         return bool(clean_path(opts['pki_dir'], id_))",
      "491:     except (AttributeError, KeyError, TypeError):",
      "",
      "---------------"
    ],
    "tests/unit/utils/test_verify.py||tests/unit/utils/test_verify.py": [
      "File: tests/unit/utils/test_verify.py -> tests/unit/utils/test_verify.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:         opts = {'pki_dir': '/tmp/whatever'}",
      "59:         self.assertFalse(valid_id(opts, None))",
      "61:     def test_zmq_verify(self):",
      "62:         self.assertTrue(zmq_version())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:     def test_valid_id_pathsep(self):",
      "62:         '''",
      "63:         Path separators in id should make it invalid",
      "64:         '''",
      "65:         opts = {'pki_dir': '/tmp/whatever'}",
      "66:         # We have to test both path separators because os.path.normpath will",
      "67:         # convert forward slashes to backslashes on Windows.",
      "68:         for pathsep in ('/', '\\\\'):",
      "69:             self.assertFalse(valid_id(opts, pathsep.join(('..', 'foobar'))))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f8b5e1a0f23fe0f2be5b3c3e04199b57a53db5b",
      "candidate_info": {
        "commit_hash": "5f8b5e1a0f23fe0f2be5b3c3e04199b57a53db5b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/5f8b5e1a0f23fe0f2be5b3c3e04199b57a53db5b",
        "files": [
          "salt/crypt.py",
          "salt/transport/tcp.py",
          "salt/transport/zeromq.py"
        ],
        "message": "Do not allow IDs with null bytes in decoded payloads",
        "before_after_code_files": [
          "salt/crypt.py||salt/crypt.py",
          "salt/transport/tcp.py||salt/transport/tcp.py",
          "salt/transport/zeromq.py||salt/transport/zeromq.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/45025"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/crypt.py||salt/crypt.py": [
          "File: salt/crypt.py -> salt/crypt.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:                 raise tornado.gen.Return('retry')",
          "608:             else:",
          "609:                 raise SaltClientError('Attempt to authenticate with the salt master failed with timeout error')",
          "610:         if 'load' in payload:",
          "611:             if 'ret' in payload['load']:",
          "612:                 if not payload['load']['ret']:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:         if not isinstance(payload, dict):",
          "611:             log.error('Sign-in attempt failed: %s', payload)",
          "612:             raise tornado.gen.Return(False)",
          "",
          "---------------"
        ],
        "salt/transport/tcp.py||salt/transport/tcp.py": [
          "File: salt/transport/tcp.py -> salt/transport/tcp.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:                     'payload and load must be a dict', header=header))",
          "624:                 raise tornado.gen.Return()",
          "626:             # intercept the \"_auth\" commands, since the main daemon shouldn't know",
          "627:             # anything about our key auth",
          "628:             if payload['enc'] == 'clear' and payload.get('load', {}).get('cmd') == '_auth':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:             try:",
          "627:                 id_ = payload['load'].get('id', '')",
          "628:                 if '\\0' in id_:",
          "629:                     log.error('Payload contains an id with a null byte: %s', payload)",
          "630:                     stream.send(self.serial.dumps('bad load: id contains a null byte'))",
          "631:                     raise tornado.gen.Return()",
          "632:             except TypeError:",
          "633:                 log.error('Payload contains non-string id: %s', payload)",
          "634:                 stream.send(self.serial.dumps('bad load: id {0} is not a string'.format(id_)))",
          "635:                 raise tornado.gen.Return()",
          "",
          "---------------"
        ],
        "salt/transport/zeromq.py||salt/transport/zeromq.py": [
          "File: salt/transport/zeromq.py -> salt/transport/zeromq.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "596:             stream.send(self.serial.dumps('payload and load must be a dict'))",
          "597:             raise tornado.gen.Return()",
          "599:         # intercept the \"_auth\" commands, since the main daemon shouldn't know",
          "600:         # anything about our key auth",
          "601:         if payload['enc'] == 'clear' and payload.get('load', {}).get('cmd') == '_auth':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "599:         try:",
          "600:             id_ = payload['load'].get('id', '')",
          "601:             if '\\0' in id_:",
          "602:                 log.error('Payload contains an id with a null byte: %s', payload)",
          "603:                 stream.send(self.serial.dumps('bad load: id contains a null byte'))",
          "604:                 raise tornado.gen.Return()",
          "605:         except TypeError:",
          "606:             log.error('Payload contains non-string id: %s', payload)",
          "607:             stream.send(self.serial.dumps('bad load: id {0} is not a string'.format(id_)))",
          "608:             raise tornado.gen.Return()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa87d67258a5b6742fc53d06c7bdac0f643bc9f1",
      "candidate_info": {
        "commit_hash": "aa87d67258a5b6742fc53d06c7bdac0f643bc9f1",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/aa87d67258a5b6742fc53d06c7bdac0f643bc9f1",
        "files": [
          "salt/utils/verify.py"
        ],
        "message": "Add clean_id function to salt.utils.verify.py",
        "before_after_code_files": [
          "salt/utils/verify.py||salt/utils/verify.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ],
          "candidate": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/utils/verify.py||salt/utils/verify.py": [
          "File: salt/utils/verify.py -> salt/utils/verify.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:     return ''",
          "483: def valid_id(opts, id_):",
          "484:     '''",
          "485:     Returns if the passed id is valid",
          "486:     '''",
          "487:     try:",
          "489:     except (AttributeError, KeyError, TypeError) as e:",
          "490:         return False",
          "",
          "[Removed Lines]",
          "488:         return bool(clean_path(opts['pki_dir'], id_))",
          "",
          "[Added Lines]",
          "483: def clean_id(id_):",
          "484:     '''",
          "485:     Returns if the passed id is clean.",
          "486:     '''",
          "487:     if re.search(r'\\.\\.{sep}'.format(sep=os.sep), id_):",
          "488:         return False",
          "489:     return True",
          "497:         return bool(clean_path(opts['pki_dir'], id_)) and clean_id(id_)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a27e8d55c6643ddadab010896650b085df4ca096",
      "candidate_info": {
        "commit_hash": "a27e8d55c6643ddadab010896650b085df4ca096",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a27e8d55c6643ddadab010896650b085df4ca096",
        "files": [
          "salt/utils/verify.py"
        ],
        "message": "Update verify.py\n\n#40366 #40394",
        "before_after_code_files": [
          "salt/utils/verify.py||salt/utils/verify.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ],
          "candidate": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/utils/verify.py||salt/utils/verify.py": [
          "File: salt/utils/verify.py -> salt/utils/verify.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:     '''",
          "487:     try:",
          "488:         return bool(clean_path(opts['pki_dir'], id_))",
          "490:         return False",
          "",
          "[Removed Lines]",
          "489:     except (AttributeError, KeyError) as e:",
          "",
          "[Added Lines]",
          "489:     except (AttributeError, KeyError, TypeError) as e:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31b38f50ebf321a1d14af0868c516a5de865f5a8",
      "candidate_info": {
        "commit_hash": "31b38f50ebf321a1d14af0868c516a5de865f5a8",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/31b38f50ebf321a1d14af0868c516a5de865f5a8",
        "files": [
          "salt/utils/verify.py",
          "tests/unit/utils/verify_test.py"
        ],
        "message": "Don't allow path separators in minion ID",
        "before_after_code_files": [
          "salt/utils/verify.py||salt/utils/verify.py",
          "tests/unit/utils/verify_test.py||tests/unit/utils/verify_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ],
          "candidate": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/utils/verify.py||salt/utils/verify.py": [
          "File: salt/utils/verify.py -> salt/utils/verify.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:     return ''",
          "497: def valid_id(opts, id_):",
          "498:     '''",
          "499:     Returns if the passed id is valid",
          "500:     '''",
          "501:     try:",
          "504:         return False",
          "",
          "[Removed Lines]",
          "488: def clean_id(id_):",
          "489:     '''",
          "490:     Returns if the passed id is clean.",
          "491:     '''",
          "492:     if re.search(r'\\.\\.{sep}'.format(sep=os.sep), id_):",
          "493:         return False",
          "494:     return True",
          "502:         return bool(clean_path(opts['pki_dir'], id_)) and clean_id(id_)",
          "503:     except (AttributeError, KeyError) as e:",
          "",
          "[Added Lines]",
          "493:         if any(x in id_ for x in ('/', '\\\\', '\\0')):",
          "494:             return False",
          "495:         return bool(clean_path(opts['pki_dir'], id_))",
          "496:     except (AttributeError, KeyError, TypeError):",
          "",
          "---------------"
        ],
        "tests/unit/utils/verify_test.py||tests/unit/utils/verify_test.py": [
          "File: tests/unit/utils/verify_test.py -> tests/unit/utils/verify_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         opts = {'pki_dir': '/tmp/whatever'}",
          "61:         self.assertFalse(valid_id(opts, None))",
          "63:     def test_zmq_verify(self):",
          "64:         self.assertTrue(zmq_version())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     def test_valid_id_pathsep(self):",
          "64:         '''",
          "65:         Path separators in id should make it invalid",
          "66:         '''",
          "67:         opts = {'pki_dir': '/tmp/whatever'}",
          "68:         # We have to test both path separators because os.path.normpath will",
          "69:         # convert forward slashes to backslashes on Windows.",
          "70:         for pathsep in ('/', '\\\\'):",
          "71:             self.assertFalse(valid_id(opts, pathsep.join(('..', 'foobar'))))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ba1f6112fa72627b42eed4c4eea439dce2df31c",
      "candidate_info": {
        "commit_hash": "9ba1f6112fa72627b42eed4c4eea439dce2df31c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/9ba1f6112fa72627b42eed4c4eea439dce2df31c",
        "files": [
          "salt/utils/verify.py",
          "tests/unit/utils/verify_test.py"
        ],
        "message": "Don't allow path separators in minion ID",
        "before_after_code_files": [
          "salt/utils/verify.py||salt/utils/verify.py",
          "tests/unit/utils/verify_test.py||tests/unit/utils/verify_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ],
          "candidate": [
            "salt/utils/verify.py||salt/utils/verify.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/utils/verify.py||salt/utils/verify.py": [
          "File: salt/utils/verify.py -> salt/utils/verify.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:     return ''",
          "493: def valid_id(opts, id_):",
          "494:     '''",
          "495:     Returns if the passed id is valid",
          "496:     '''",
          "497:     try:",
          "500:         return False",
          "",
          "[Removed Lines]",
          "484: def clean_id(id_):",
          "485:     '''",
          "486:     Returns if the passed id is clean.",
          "487:     '''",
          "488:     if re.search(r'\\.\\.{sep}'.format(sep=os.sep), id_):",
          "489:         return False",
          "490:     return True",
          "498:         return bool(clean_path(opts['pki_dir'], id_)) and clean_id(id_)",
          "499:     except (AttributeError, KeyError) as e:",
          "",
          "[Added Lines]",
          "489:         if any(x in id_ for x in ('/', '\\\\', '\\0')):",
          "490:             return False",
          "491:         return bool(clean_path(opts['pki_dir'], id_))",
          "492:     except (AttributeError, KeyError, TypeError):",
          "",
          "---------------"
        ],
        "tests/unit/utils/verify_test.py||tests/unit/utils/verify_test.py": [
          "File: tests/unit/utils/verify_test.py -> tests/unit/utils/verify_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         opts = {'pki_dir': '/tmp/whatever'}",
          "61:         self.assertFalse(valid_id(opts, None))",
          "63:     def test_zmq_verify(self):",
          "64:         self.assertTrue(zmq_version())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     def test_valid_id_pathsep(self):",
          "64:         '''",
          "65:         Path separators in id should make it invalid",
          "66:         '''",
          "67:         opts = {'pki_dir': '/tmp/whatever'}",
          "68:         # We have to test both path separators because os.path.normpath will",
          "69:         # convert forward slashes to backslashes on Windows.",
          "70:         for pathsep in ('/', '\\\\'):",
          "71:             self.assertFalse(valid_id(opts, pathsep.join(('..', 'foobar'))))",
          "",
          "---------------"
        ]
      }
    }
  ]
}