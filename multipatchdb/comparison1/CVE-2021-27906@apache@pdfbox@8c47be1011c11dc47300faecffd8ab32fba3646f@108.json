{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f96c77fa170ae254294977fb78da86b887dc7751",
      "candidate_info": {
        "commit_hash": "f96c77fa170ae254294977fb78da86b887dc7751",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f96c77fa170ae254294977fb78da86b887dc7751",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ],
        "message": "PDFBOX-4723: revert equals and hashCode for COSStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881479 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         this.scratchFile = scratchFile != null ? scratchFile : ScratchFile.getMainMemoryOnlyInstance();",
          "77:     }",
          "",
          "[Removed Lines]",
          "82:     @Override",
          "83:     public boolean equals(Object o) {",
          "84:         if (o == this)",
          "85:         {",
          "86:             return true;",
          "87:         }",
          "89:         if (!(o instanceof COSStream))",
          "90:         {",
          "91:             return false;",
          "92:         }",
          "94:         COSStream toBeCompared = (COSStream) o;",
          "96:         if (toBeCompared.size() != size())",
          "97:         {",
          "98:             return false;",
          "99:         }",
          "102:         Iterator<Entry<COSName, COSBase>> iter = entrySet().iterator();",
          "103:         while (iter.hasNext())",
          "104:         {",
          "105:             Entry<COSName, COSBase> entry = iter.next();",
          "106:             COSName key = entry.getKey();",
          "107:             COSBase value = entry.getValue();",
          "109:             if (!toBeCompared.containsKey(key))",
          "110:             {",
          "111:                 return false;",
          "112:             }",
          "113:             else if (value == null)",
          "114:             {",
          "115:                 if (toBeCompared.getItem(key) != null)",
          "116:                 {",
          "117:                     return false;",
          "118:                 }",
          "119:             }",
          "120:             else if (!value.equals(toBeCompared.getItem(key)))",
          "121:             {",
          "122:                 return false;",
          "123:             }",
          "124:         }",
          "127:         if (!toBeCompared.toTextString().equals(toTextString()))",
          "128:         {",
          "129:             return false;",
          "130:         }",
          "132:         return true;",
          "133:     }",
          "138:     @Override",
          "139:     public int hashCode() {",
          "140:         Object[] members = {items, randomAccess, scratchFile, isWriting};",
          "141:         return Arrays.hashCode(members);",
          "142:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f5e41f2124e39fff6b356dee2b02f49cd22b2a8",
      "candidate_info": {
        "commit_hash": "1f5e41f2124e39fff6b356dee2b02f49cd22b2a8",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1f5e41f2124e39fff6b356dee2b02f49cd22b2a8",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-4892: use base class\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890108 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: import org.apache.pdfbox.cos.COSArray;",
          "53: import org.apache.pdfbox.cos.COSDictionary;",
          "55: import org.apache.pdfbox.cos.COSName;",
          "56: import org.apache.pdfbox.cos.COSStream;",
          "57: import org.apache.pdfbox.examples.interactive.form.CreateSimpleForm;",
          "",
          "[Removed Lines]",
          "54: import org.apache.pdfbox.cos.COSInputStream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "853:         for (int i = 0; i < sigCertArray.size(); ++i)",
          "854:         {",
          "855:             COSStream certStream = (COSStream) sigCertArray.getObject(i);",
          "857:             sigCertHolderSetFromVRIArray.add(new X509CertificateHolder(IOUtils.toByteArray(is)));",
          "858:             is.close();",
          "859:         }",
          "",
          "[Removed Lines]",
          "856:             COSInputStream is = certStream.createInputStream();",
          "",
          "[Added Lines]",
          "855:             InputStream is = certStream.createInputStream();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "872:         for (int i = 0; i < dssCertArray.size(); ++i)",
          "873:         {",
          "874:             COSStream certStream = (COSStream) dssCertArray.getObject(i);",
          "876:             X509Certificate cert = (X509Certificate) certificateFactory.generateCertificate(is);",
          "877:             is.close();",
          "878:             certSet.add(cert);",
          "",
          "[Removed Lines]",
          "875:             COSInputStream is = certStream.createInputStream();",
          "",
          "[Added Lines]",
          "874:             InputStream is = certStream.createInputStream();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "902:         for (int i = 0; i < crlArray.size(); ++i)",
          "903:         {",
          "904:             COSStream crlStream = (COSStream) crlArray.getObject(i);",
          "906:             X509CRL cert = (X509CRL) certificateFactory.generateCRL(is);",
          "907:             is.close();",
          "908:             crlSet.add(cert);",
          "",
          "[Removed Lines]",
          "905:             COSInputStream is = crlStream.createInputStream();",
          "",
          "[Added Lines]",
          "904:             InputStream is = crlStream.createInputStream();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "934:             COSDictionary crlSigDict = vriDict.getCOSDictionary(COSName.getPDFName(hexCrlSignatureHash));",
          "935:             COSArray certArray2 = crlSigDict.getCOSArray(COSName.getPDFName(\"Cert\"));",
          "936:             COSStream certStream = (COSStream) certArray2.getObject(0);",
          "938:             X509CertificateHolder certHolder2 = new X509CertificateHolder(IOUtils.toByteArray(is2));",
          "939:             is2.close();",
          "",
          "[Removed Lines]",
          "937:             COSInputStream is2 = certStream.createInputStream();",
          "",
          "[Added Lines]",
          "936:             InputStream is2 = certStream.createInputStream();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "947:         for (int i = 0; i < ocspArray.size(); ++i)",
          "948:         {",
          "949:             COSStream ocspStream = (COSStream) ocspArray.getObject(i);",
          "951:             OCSPResp ocspResp = new OCSPResp(is);",
          "952:             is.close();",
          "953:             oscpSet.add(ocspResp);",
          "",
          "[Removed Lines]",
          "950:             COSInputStream is = ocspStream.createInputStream();",
          "",
          "[Added Lines]",
          "949:             InputStream is = ocspStream.createInputStream();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "974:             COSArray certArray2 = ocspSigDict.getCOSArray(COSName.getPDFName(\"Cert\"));",
          "975:             COSStream certStream = (COSStream) certArray2.getObject(0);",
          "977:             X509CertificateHolder certHolder2 = new X509CertificateHolder(IOUtils.toByteArray(is2));",
          "978:             is2.close();",
          "",
          "[Removed Lines]",
          "976:             COSInputStream is2 = certStream.createInputStream();",
          "",
          "[Added Lines]",
          "975:             InputStream is2 = certStream.createInputStream();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d18774b6990a9904653733352e0f8a1b70e919e",
      "candidate_info": {
        "commit_hash": "0d18774b6990a9904653733352e0f8a1b70e919e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/0d18774b6990a9904653733352e0f8a1b70e919e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"
        ],
        "message": "PDFBOX-4892: use correct index, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892557 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     {",
          "282:         Integer retval = null;",
          "283:         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );",
          "285:         {",
          "286:             retval = arr.getInt( 1 );",
          "287:         }",
          "",
          "[Removed Lines]",
          "284:         if( arr != null && arr.get(0) != null )",
          "",
          "[Added Lines]",
          "284:         if( arr != null && arr.get(1) != null )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ab1dfd2571b7f1238252ffc8234e34f78c1865",
      "candidate_info": {
        "commit_hash": "09ab1dfd2571b7f1238252ffc8234e34f78c1865",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/09ab1dfd2571b7f1238252ffc8234e34f78c1865",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-5134: calculating the bounding boxes of the triangles reduces shading rendering times if no bounding box is preset, as suggested by Oliver Schmidtmer; Closes #109\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888288 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/GouraudShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Point;",
          "20: import java.awt.Rectangle;",
          "21: import java.awt.geom.AffineTransform;",
          "23: import java.awt.image.ColorModel;",
          "24: import java.io.IOException;",
          "25: import java.util.ArrayList;",
          "26: import java.util.HashMap;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "33: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "22: import java.awt.geom.Point2D;",
          "29: import javax.imageio.stream.ImageInputStream;",
          "30: import org.apache.commons.logging.Log;",
          "31: import org.apache.commons.logging.LogFactory;",
          "32: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: abstract class GouraudShadingContext extends TriangleBasedShadingContext",
          "42: {",
          "",
          "[Removed Lines]",
          "43:     private static final Log LOG = LogFactory.getLog(GouraudShadingContext.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         super(shading, colorModel, xform, matrix);",
          "63:     }",
          "112:     final void setTriangleList(List<ShadedTriangle> triangleList)",
          "113:     {",
          "114:         this.triangleList = triangleList;",
          "",
          "[Removed Lines]",
          "78:     protected Vertex readVertex(ImageInputStream input, long maxSrcCoord, long maxSrcColor,",
          "79:                                 PDRange rangeX, PDRange rangeY, PDRange[] colRangeTab,",
          "80:                                 Matrix matrix, AffineTransform xform) throws IOException",
          "81:     {",
          "82:         float[] colorComponentTab = new float[numberOfColorComponents];",
          "83:         long x = input.readBits(bitsPerCoordinate);",
          "84:         long y = input.readBits(bitsPerCoordinate);",
          "85:         float dstX = interpolate(x, maxSrcCoord, rangeX.getMin(), rangeX.getMax());",
          "86:         float dstY = interpolate(y, maxSrcCoord, rangeY.getMin(), rangeY.getMax());",
          "87:         LOG.debug(\"coord: \" + String.format(\"[%06X,%06X] -> [%f,%f]\", x, y, dstX, dstY));",
          "88:         Point2D p = matrix.transformPoint(dstX, dstY);",
          "89:         xform.transform(p, p);",
          "91:         for (int n = 0; n < numberOfColorComponents; ++n)",
          "92:         {",
          "93:             int color = (int) input.readBits(bitsPerColorComponent);",
          "94:             colorComponentTab[n] = interpolate(color, maxSrcColor, colRangeTab[n].getMin(),",
          "95:                     colRangeTab[n].getMax());",
          "96:             LOG.debug(\"color[\" + n + \"]: \" + color + \"/\" + String.format(\"%02x\", color)",
          "97:                     + \"-> color[\" + n + \"]: \" + colorComponentTab[n]);",
          "98:         }",
          "103:         int bitOffset = input.getBitOffset();",
          "104:         if (bitOffset != 0)",
          "105:         {",
          "106:             input.readBits(8 - bitOffset);",
          "107:         }",
          "109:         return new Vertex(p, colorComponentTab);",
          "110:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:         super.dispose();",
          "130:     }",
          "146:     @Override",
          "147:     protected boolean isDataEmpty()",
          "148:     {",
          "",
          "[Removed Lines]",
          "141:     private float interpolate(float src, long srcMax, float dstMin, float dstMax)",
          "142:     {",
          "143:         return dstMin + (src * (dstMax - dstMin) / srcMax);",
          "144:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "19: import java.awt.geom.AffineTransform;",
          "20: import java.awt.geom.Point2D;",
          "21: import java.awt.geom.Rectangle2D;",
          "22: import java.io.EOFException;",
          "23: import java.io.IOException;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "28: import javax.imageio.stream.ImageInputStream;",
          "29: import javax.imageio.stream.MemoryCacheImageInputStream;",
          "31: import org.apache.commons.logging.Log;",
          "32: import org.apache.commons.logging.LogFactory;",
          "33: import org.apache.pdfbox.cos.COSDictionary;",
          "34: import org.apache.pdfbox.cos.COSStream;",
          "35: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "36: import org.apache.pdfbox.util.Matrix;",
          "41: abstract class PDMeshBasedShadingType extends PDShadingType4",
          "42: {",
          "44:     private static final Log LOG = LogFactory.getLog(PDMeshBasedShadingType.class);",
          "46:     PDMeshBasedShadingType(COSDictionary shadingDictionary)",
          "47:     {",
          "48:         super(shadingDictionary);",
          "49:     }",
          "61:     @SuppressWarnings({ \"squid:S2583\", \"squid:S1166\" })",
          "62:     final List<Patch> collectPatches(AffineTransform xform, Matrix matrix, int controlPoints)",
          "63:             throws IOException",
          "64:     {",
          "65:         COSDictionary dict = getCOSObject();",
          "66:         if (!(dict instanceof COSStream))",
          "67:         {",
          "68:             return Collections.emptyList();",
          "69:         }",
          "70:         PDRange rangeX = getDecodeForParameter(0);",
          "71:         PDRange rangeY = getDecodeForParameter(1);",
          "72:         if (Float.compare(rangeX.getMin(), rangeX.getMax()) == 0",
          "73:                 || Float.compare(rangeY.getMin(), rangeY.getMax()) == 0)",
          "74:         {",
          "75:             return Collections.emptyList();",
          "76:         }",
          "77:         int bitsPerFlag = getBitsPerFlag();",
          "78:         PDRange[] colRange = new PDRange[getNumberOfColorComponents()];",
          "79:         for (int i = 0; i < getNumberOfColorComponents(); ++i)",
          "80:         {",
          "81:             colRange[i] = getDecodeForParameter(2 + i);",
          "82:             if (colRange[i] == null)",
          "83:             {",
          "84:                 throw new IOException(\"Range missing in shading /Decode entry\");",
          "85:             }",
          "86:         }",
          "87:         List<Patch> list = new ArrayList<Patch>();",
          "88:         long maxSrcCoord = (long) Math.pow(2, getBitsPerCoordinate()) - 1;",
          "89:         long maxSrcColor = (long) Math.pow(2, getBitsPerComponent()) - 1;",
          "90:         COSStream cosStream = (COSStream) dict;",
          "92:         ImageInputStream mciis = new MemoryCacheImageInputStream(cosStream.createInputStream());",
          "93:         try",
          "94:         {",
          "95:             Point2D[] implicitEdge = new Point2D[4];",
          "96:             float[][] implicitCornerColor = new float[2][getNumberOfColorComponents()];",
          "97:             byte flag = 0;",
          "99:             try",
          "100:             {",
          "101:                 flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "102:             }",
          "103:             catch (EOFException ex)",
          "104:             {",
          "105:                 LOG.error(ex);",
          "106:             }",
          "108:             boolean eof = false;",
          "109:             while (!eof)",
          "110:             {",
          "111:                 try",
          "112:                 {",
          "113:                     boolean isFree = (flag == 0);",
          "114:                     Patch current = readPatch(mciis, isFree, implicitEdge, implicitCornerColor,",
          "115:                             maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange, matrix, xform,",
          "116:                             controlPoints);",
          "117:                     if (current == null)",
          "118:                     {",
          "119:                         break;",
          "120:                     }",
          "121:                     list.add(current);",
          "122:                     flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "123:                     switch (flag)",
          "124:                     {",
          "125:                     case 0:",
          "126:                         break;",
          "127:                     case 1:",
          "128:                         implicitEdge = current.getFlag1Edge();",
          "129:                         implicitCornerColor = current.getFlag1Color();",
          "130:                         break;",
          "131:                     case 2:",
          "132:                         implicitEdge = current.getFlag2Edge();",
          "133:                         implicitCornerColor = current.getFlag2Color();",
          "134:                         break;",
          "135:                     case 3:",
          "136:                         implicitEdge = current.getFlag3Edge();",
          "137:                         implicitCornerColor = current.getFlag3Color();",
          "138:                         break;",
          "139:                     default:",
          "140:                         LOG.warn(\"bad flag: \" + flag);",
          "141:                         break;",
          "142:                     }",
          "143:                 }",
          "144:                 catch (EOFException ex)",
          "145:                 {",
          "146:                     eof = true;",
          "147:                 }",
          "148:             }",
          "149:         }",
          "150:         finally",
          "151:         {",
          "152:             mciis.close();",
          "153:         }",
          "154:         return list;",
          "155:     }",
          "175:     protected Patch readPatch(ImageInputStream input, boolean isFree, Point2D[] implicitEdge,",
          "176:             float[][] implicitCornerColor, long maxSrcCoord, long maxSrcColor, PDRange rangeX,",
          "177:             PDRange rangeY, PDRange[] colRange, Matrix matrix, AffineTransform xform,",
          "178:             int controlPoints) throws IOException",
          "179:     {",
          "180:         float[][] color = new float[4][getNumberOfColorComponents()];",
          "181:         Point2D[] points = new Point2D[controlPoints];",
          "182:         int pStart = 4, cStart = 2;",
          "183:         if (isFree)",
          "184:         {",
          "185:             pStart = 0;",
          "186:             cStart = 0;",
          "187:         }",
          "188:         else",
          "189:         {",
          "190:             points[0] = implicitEdge[0];",
          "191:             points[1] = implicitEdge[1];",
          "192:             points[2] = implicitEdge[2];",
          "193:             points[3] = implicitEdge[3];",
          "195:             for (int i = 0; i < getNumberOfColorComponents(); i++)",
          "196:             {",
          "197:                 color[0][i] = implicitCornerColor[0][i];",
          "198:                 color[1][i] = implicitCornerColor[1][i];",
          "199:             }",
          "200:         }",
          "202:         try",
          "203:         {",
          "204:             for (int i = pStart; i < controlPoints; i++)",
          "205:             {",
          "206:                 long x = input.readBits(getBitsPerCoordinate());",
          "207:                 long y = input.readBits(getBitsPerCoordinate());",
          "208:                 float px = interpolate(x, maxSrcCoord, rangeX.getMin(), rangeX.getMax());",
          "209:                 float py = interpolate(y, maxSrcCoord, rangeY.getMin(), rangeY.getMax());",
          "210:                 Point2D p = matrix.transformPoint(px, py);",
          "211:                 xform.transform(p, p);",
          "212:                 points[i] = p;",
          "213:             }",
          "214:             for (int i = cStart; i < 4; i++)",
          "215:             {",
          "216:                 for (int j = 0; j < getNumberOfColorComponents(); j++)",
          "217:                 {",
          "218:                     long c = input.readBits(getBitsPerComponent());",
          "219:                     color[i][j] = interpolate(c, maxSrcColor, colRange[j].getMin(),",
          "220:                             colRange[j].getMax());",
          "221:                 }",
          "222:             }",
          "223:         }",
          "224:         catch (EOFException ex)",
          "225:         {",
          "226:             LOG.debug(\"EOF\", ex);",
          "227:             return null;",
          "228:         }",
          "229:         return generatePatch(points, color);",
          "230:     }",
          "240:     abstract Patch generatePatch(Point2D[] points, float[][] color);",
          "242:     @Override",
          "243:     abstract public Rectangle2D getBounds(AffineTransform xform, Matrix matrix) throws IOException;",
          "245:     Rectangle2D getBounds(AffineTransform xform, Matrix matrix, int controlPoints)",
          "246:             throws IOException",
          "247:     {",
          "248:         Rectangle2D bounds = null;",
          "249:         for (Patch patch : collectPatches(xform, matrix, controlPoints))",
          "250:         {",
          "251:             for (ShadedTriangle shadedTriangle : patch.listOfTriangles)",
          "252:             {",
          "253:                 if (bounds == null)",
          "254:                 {",
          "255:                     bounds = new Rectangle2D.Double(shadedTriangle.corner[0].getX(),",
          "256:                             shadedTriangle.corner[0].getY(), 0, 0);",
          "257:                 }",
          "258:                 bounds.add(shadedTriangle.corner[0]);",
          "259:                 bounds.add(shadedTriangle.corner[1]);",
          "260:                 bounds.add(shadedTriangle.corner[2]);",
          "261:             }",
          "262:         }",
          "263:         return bounds;",
          "264:     }",
          "265: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShading.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "19: import java.awt.Paint;",
          "20: import java.io.IOException;",
          "21: import org.apache.pdfbox.cos.COSArray;",
          "22: import org.apache.pdfbox.cos.COSBase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.geom.AffineTransform;",
          "21: import java.awt.geom.Rectangle2D;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         }",
          "196:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:     public Rectangle2D getBounds(AffineTransform xform, Matrix matrix) throws IOException",
          "209:     {",
          "210:         return null;",
          "211:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "19: import java.awt.Paint;",
          "21: import org.apache.pdfbox.cos.COSDictionary;",
          "22: import org.apache.pdfbox.cos.COSName;",
          "23: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.geom.AffineTransform;",
          "21: import java.awt.geom.Point2D;",
          "22: import java.io.EOFException;",
          "23: import java.io.IOException;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "28: import javax.imageio.stream.ImageInputStream;",
          "29: import javax.imageio.stream.MemoryCacheImageInputStream;",
          "31: import org.apache.commons.logging.Log;",
          "32: import org.apache.commons.logging.LogFactory;",
          "35: import org.apache.pdfbox.cos.COSStream;",
          "36: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: public class PDShadingType4 extends PDTriangleBasedShadingType",
          "29: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     private static final Log LOG = LogFactory.getLog(PDShadingType4.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     {",
          "70:         return new Type4ShadingPaint(this, matrix);",
          "71:     }",
          "72: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     @SuppressWarnings(\"squid:S1166\")",
          "90:     @Override",
          "91:     List<ShadedTriangle> collectTriangles(AffineTransform xform, Matrix matrix)",
          "92:             throws IOException",
          "93:     {",
          "94:   int bitsPerFlag = getBitsPerFlag();",
          "95:         COSDictionary dict = getCOSObject();",
          "96:         if (!(dict instanceof COSStream))",
          "97:         {",
          "98:             return Collections.emptyList();",
          "99:         }",
          "100:         PDRange rangeX = getDecodeForParameter(0);",
          "101:         PDRange rangeY = getDecodeForParameter(1);",
          "102:         if (Float.compare(rangeX.getMin(), rangeX.getMax()) == 0 ||",
          "103:             Float.compare(rangeY.getMin(), rangeY.getMax()) == 0)",
          "104:         {",
          "105:             return Collections.emptyList();",
          "106:         }",
          "107:         PDRange[] colRange = new PDRange[getNumberOfColorComponents()];",
          "108:         for (int i = 0; i < getNumberOfColorComponents(); ++i)",
          "109:         {",
          "110:             colRange[i] = getDecodeForParameter(2 + i);",
          "111:         }",
          "112:         List<ShadedTriangle> list = new ArrayList<ShadedTriangle>();",
          "113:         long maxSrcCoord = (long) Math.pow(2, getBitsPerCoordinate()) - 1;",
          "114:         long maxSrcColor = (long) Math.pow(2, getBitsPerComponent()) - 1;",
          "115:         COSStream stream = (COSStream) dict;",
          "117:         ImageInputStream mciis = new MemoryCacheImageInputStream(stream.createInputStream());",
          "118:         try",
          "119:         {",
          "120:             byte flag = (byte) 0;",
          "121:             try",
          "122:             {",
          "123:                 flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "124:             }",
          "125:             catch (EOFException ex)",
          "126:             {",
          "127:                 LOG.error(ex);",
          "128:             }",
          "130:             boolean eof = false;",
          "131:             while (!eof)",
          "132:             {",
          "133:                 Vertex p0, p1, p2;",
          "134:                 Point2D[] ps;",
          "135:                 float[][] cs;",
          "136:                 int lastIndex;",
          "137:                 try",
          "138:                 {",
          "139:                     switch (flag)",
          "140:                     {",
          "141:                         case 0:",
          "142:                             p0 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange,",
          "143:                                             matrix, xform);",
          "144:                             flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "145:                             if (flag != 0)",
          "146:                             {",
          "147:                                 LOG.error(\"bad triangle: \" + flag);",
          "148:                             }",
          "149:                             p1 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange,",
          "150:                                             matrix, xform);",
          "151:                             mciis.readBits(bitsPerFlag);",
          "152:                             if (flag != 0)",
          "153:                             {",
          "154:                                 LOG.error(\"bad triangle: \" + flag);",
          "155:                             }",
          "156:                             p2 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange,",
          "157:                                             matrix, xform);",
          "158:                             ps = new Point2D[] { p0.point, p1.point, p2.point };",
          "159:                             cs = new float[][] { p0.color, p1.color, p2.color };",
          "160:                             list.add(new ShadedTriangle(ps, cs));",
          "161:                             flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "162:                             break;",
          "163:                         case 1:",
          "164:                         case 2:",
          "165:                             lastIndex = list.size() - 1;",
          "166:                             if (lastIndex < 0)",
          "167:                             {",
          "168:                                 LOG.error(\"broken data stream: \" + list.size());",
          "169:                             }",
          "170:                             else",
          "171:                             {",
          "172:                                 ShadedTriangle preTri = list.get(lastIndex);",
          "173:                                 p2 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY,",
          "174:                                                 colRange, matrix, xform);",
          "175:                                 ps = new Point2D[] { flag == 1 ? preTri.corner[1] : preTri.corner[0],",
          "176:                                                      preTri.corner[2],",
          "177:                                                      p2.point };",
          "178:                                 cs = new float[][] { flag == 1 ? preTri.color[1] : preTri.color[0],",
          "179:                                                      preTri.color[2],",
          "180:                                                      p2.color };",
          "181:                                 list.add(new ShadedTriangle(ps, cs));",
          "182:                                 flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "183:                             }",
          "184:                             break;",
          "185:                         default:",
          "186:                             LOG.warn(\"bad flag: \" + flag);",
          "187:                             break;",
          "188:                     }",
          "189:                 }",
          "190:                 catch (EOFException ex)",
          "191:                 {",
          "192:                     eof = true;",
          "193:                 }",
          "194:             }",
          "195:         }",
          "196:         finally",
          "197:         {",
          "198:             mciis.close();",
          "199:         }",
          "200:         return list;",
          "201:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "19: import java.awt.Paint;",
          "21: import org.apache.pdfbox.cos.COSDictionary;",
          "22: import org.apache.pdfbox.cos.COSName;",
          "23: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.geom.AffineTransform;",
          "21: import java.awt.geom.Point2D;",
          "22: import java.io.EOFException;",
          "23: import java.io.IOException;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "28: import javax.imageio.stream.ImageInputStream;",
          "29: import javax.imageio.stream.MemoryCacheImageInputStream;",
          "33: import org.apache.pdfbox.cos.COSStream;",
          "34: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     {",
          "70:         return new Type5ShadingPaint(this, matrix);",
          "71:     }",
          "72: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     @SuppressWarnings(\"squid:S1166\")",
          "86:     @Override",
          "87:     List<ShadedTriangle> collectTriangles(AffineTransform xform, Matrix matrix) throws IOException",
          "88:     {",
          "89:         COSDictionary dict = getCOSObject();",
          "90:         if (!(dict instanceof COSStream))",
          "91:         {",
          "92:             return Collections.emptyList();",
          "93:         }",
          "94:         PDRange rangeX = getDecodeForParameter(0);",
          "95:         PDRange rangeY = getDecodeForParameter(1);",
          "96:         if (Float.compare(rangeX.getMin(), rangeX.getMax()) == 0 ||",
          "97:             Float.compare(rangeY.getMin(), rangeY.getMax()) == 0)",
          "98:         {",
          "99:             return Collections.emptyList();",
          "100:         }",
          "101:         int numPerRow = getVerticesPerRow();",
          "102:         PDRange[] colRange = new PDRange[getNumberOfColorComponents()];",
          "103:         for (int i = 0; i < getNumberOfColorComponents(); ++i)",
          "104:         {",
          "105:             colRange[i] = getDecodeForParameter(2 + i);",
          "106:         }",
          "107:         List<Vertex> vlist = new ArrayList<Vertex>();",
          "108:         long maxSrcCoord = (long) Math.pow(2, getBitsPerCoordinate()) - 1;",
          "109:         long maxSrcColor = (long) Math.pow(2, getBitsPerComponent()) - 1;",
          "110:         COSStream cosStream = (COSStream) dict;",
          "112:         ImageInputStream mciis = new MemoryCacheImageInputStream(cosStream.createInputStream());",
          "113:         try",
          "114:         {",
          "115:             boolean eof = false;",
          "116:             while (!eof)",
          "117:             {",
          "118:                 Vertex p;",
          "119:                 try",
          "120:                 {",
          "121:                     p = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange, matrix, xform);",
          "122:                     vlist.add(p);",
          "123:                 }",
          "124:                 catch (EOFException ex)",
          "125:                 {",
          "126:                     eof = true;",
          "127:                 }",
          "128:             }",
          "129:         }",
          "130:         finally",
          "131:         {",
          "132:             mciis.close();",
          "133:         }",
          "134:         int rowNum = vlist.size() / numPerRow;",
          "135:         Vertex[][] latticeArray = new Vertex[rowNum][numPerRow];",
          "136:         List<ShadedTriangle> list = new ArrayList<ShadedTriangle>();",
          "137:         if (rowNum < 2)",
          "138:         {",
          "140:             return list;",
          "141:         }",
          "142:         for (int i = 0; i < rowNum; i++)",
          "143:         {",
          "144:             for (int j = 0; j < numPerRow; j++)",
          "145:             {",
          "146:                 latticeArray[i][j] = vlist.get(i * numPerRow + j);",
          "147:             }",
          "148:         }",
          "150:         for (int i = 0; i < rowNum - 1; i++)",
          "151:         {",
          "152:             for (int j = 0; j < numPerRow - 1; j++)",
          "153:             {",
          "154:                 Point2D[] ps = new Point2D[] {",
          "155:                     latticeArray[i][j].point,",
          "156:                     latticeArray[i][j + 1].point,",
          "157:                     latticeArray[i + 1][j].point  };",
          "159:                 float[][] cs = new float[][] {",
          "160:                     latticeArray[i][j].color,",
          "161:                     latticeArray[i][j + 1].color,",
          "162:                     latticeArray[i + 1][j].color };",
          "164:                 list.add(new ShadedTriangle(ps, cs));",
          "166:                 ps = new Point2D[] {",
          "167:                     latticeArray[i][j + 1].point,",
          "168:                     latticeArray[i + 1][j].point,",
          "169:                     latticeArray[i + 1][j + 1].point };",
          "171:                 cs = new float[][]{",
          "172:                     latticeArray[i][j + 1].color,",
          "173:                     latticeArray[i + 1][j].color,",
          "174:                     latticeArray[i + 1][j + 1].color };",
          "176:                 list.add(new ShadedTriangle(ps, cs));",
          "177:             }",
          "178:         }",
          "179:         return list;",
          "180:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType6.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "19: import java.awt.Paint;",
          "21: import org.apache.pdfbox.cos.COSDictionary;",
          "22: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.geom.AffineTransform;",
          "21: import java.awt.geom.Point2D;",
          "22: import java.awt.geom.Rectangle2D;",
          "23: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: {",
          "",
          "[Removed Lines]",
          "27: public class PDShadingType6 extends PDShadingType4",
          "",
          "[Added Lines]",
          "31: public class PDShadingType6 extends PDMeshBasedShadingType",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     {",
          "48:         return new Type6ShadingPaint(this, matrix);",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     @Override",
          "56:     protected Patch generatePatch(Point2D[] points, float[][] color)",
          "57:     {",
          "58:         return new CoonsPatch(points, color);",
          "59:     }",
          "61:     @Override",
          "62:     public Rectangle2D getBounds(AffineTransform xform, Matrix matrix) throws IOException",
          "63:     {",
          "64:         return getBounds(xform, matrix, 12);",
          "65:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType7.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "19: import java.awt.Paint;",
          "21: import org.apache.pdfbox.cos.COSDictionary;",
          "22: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.geom.AffineTransform;",
          "21: import java.awt.geom.Point2D;",
          "22: import java.awt.geom.Rectangle2D;",
          "23: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: {",
          "",
          "[Removed Lines]",
          "27: public class PDShadingType7 extends PDShadingType6",
          "",
          "[Added Lines]",
          "31: public class PDShadingType7 extends PDMeshBasedShadingType",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     {",
          "48:         return new Type7ShadingPaint(this, matrix);",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     @Override",
          "56:     protected Patch generatePatch(Point2D[] points, float[][] color)",
          "57:     {",
          "58:         return new TensorPatch(points, color);",
          "59:     }",
          "61:     @Override",
          "62:     public Rectangle2D getBounds(AffineTransform xform, Matrix matrix) throws IOException",
          "63:     {",
          "64:         return getBounds(xform, matrix, 16);",
          "65:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDTriangleBasedShadingType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package org.apache.pdfbox.pdmodel.graphics.shading;",
          "18: import org.apache.pdfbox.cos.COSArray;",
          "19: import org.apache.pdfbox.cos.COSDictionary;",
          "20: import org.apache.pdfbox.cos.COSName;",
          "21: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import java.awt.geom.AffineTransform;",
          "19: import java.awt.geom.Point2D;",
          "20: import java.awt.geom.Rectangle2D;",
          "21: import java.io.IOException;",
          "22: import java.util.List;",
          "24: import javax.imageio.stream.ImageInputStream;",
          "26: import org.apache.commons.logging.Log;",
          "27: import org.apache.commons.logging.LogFactory;",
          "32: import org.apache.pdfbox.util.Matrix;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     private COSArray decode = null;",
          "33:     PDTriangleBasedShadingType(COSDictionary shadingDictionary)",
          "34:     {",
          "35:         super(shadingDictionary);",
          "36:     }",
          "44:     public int getBitsPerComponent()",
          "45:     {",
          "47:     }",
          "",
          "[Removed Lines]",
          "46:         return getCOSObject().getInt(COSName.BITS_PER_COMPONENT, -1);",
          "",
          "[Added Lines]",
          "44:     private static final Log LOG = LogFactory.getLog(TriangleBasedShadingContext.class);",
          "46:     private int bitsPerCoordinate = -1;",
          "47:     private int bitsPerColorComponent = -1;",
          "48:     private int numberOfColorComponents = -1;",
          "62:         if (bitsPerColorComponent == -1)",
          "63:         {",
          "64:             bitsPerColorComponent = getCOSObject().getInt(COSName.BITS_PER_COMPONENT, -1);",
          "65:             LOG.debug(\"bitsPerColorComponent: \" + bitsPerColorComponent);",
          "66:         }",
          "67:         return bitsPerColorComponent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     public void setBitsPerComponent(int bitsPerComponent)",
          "55:     {",
          "56:         getCOSObject().setInt(COSName.BITS_PER_COMPONENT, bitsPerComponent);",
          "57:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         bitsPerColorComponent = bitsPerComponent;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:     public int getBitsPerCoordinate()",
          "66:     {",
          "68:     }",
          "76:     {",
          "78:     }",
          "",
          "[Removed Lines]",
          "67:         return getCOSObject().getInt(COSName.BITS_PER_COORDINATE, -1);",
          "75:     public void setBitsPerCoordinate(int bitsPerComponent)",
          "77:         getCOSObject().setInt(COSName.BITS_PER_COORDINATE, bitsPerComponent);",
          "",
          "[Added Lines]",
          "89:         if (bitsPerCoordinate == -1)",
          "90:         {",
          "91:             bitsPerCoordinate = getCOSObject().getInt(COSName.BITS_PER_COORDINATE, -1);",
          "92:             LOG.debug(\"bitsPerCoordinate: \" + (Math.pow(2, bitsPerCoordinate) - 1));",
          "93:         }",
          "94:         return bitsPerCoordinate;",
          "102:     public void setBitsPerCoordinate(int bitsPerCoordinate)",
          "104:         getCOSObject().setInt(COSName.BITS_PER_COORDINATE, bitsPerCoordinate);",
          "105:         this.bitsPerCoordinate = bitsPerCoordinate;",
          "106:     }",
          "113:     public int getNumberOfColorComponents() throws IOException",
          "114:     {",
          "115:         if (numberOfColorComponents == -1)",
          "116:         {",
          "117:             numberOfColorComponents = getFunction() != null ? 1",
          "118:                     : getColorSpace().getNumberOfComponents();",
          "119:             LOG.debug(\"numberOfColorComponents: \" + numberOfColorComponents);",
          "120:         }",
          "121:         return numberOfColorComponents;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:         }",
          "119:         return retval;",
          "120:     }",
          "122: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     protected float interpolate(float src, long srcMax, float dstMin, float dstMax)",
          "176:     {",
          "177:         return dstMin + (src * (dstMax - dstMin) / srcMax);",
          "178:     }",
          "193:     protected Vertex readVertex(ImageInputStream input, long maxSrcCoord, long maxSrcColor,",
          "194:                                 PDRange rangeX, PDRange rangeY, PDRange[] colRangeTab,",
          "195:                                 Matrix matrix, AffineTransform xform) throws IOException",
          "196:     {",
          "197:         float[] colorComponentTab = new float[numberOfColorComponents];",
          "198:         long x = input.readBits(bitsPerCoordinate);",
          "199:         long y = input.readBits(bitsPerCoordinate);",
          "200:         float dstX = interpolate(x, maxSrcCoord, rangeX.getMin(), rangeX.getMax());",
          "201:         float dstY = interpolate(y, maxSrcCoord, rangeY.getMin(), rangeY.getMax());",
          "202:         LOG.debug(\"coord: \" + String.format(\"[%06X,%06X] -> [%f,%f]\", x, y, dstX, dstY));",
          "203:         Point2D p = matrix.transformPoint(dstX, dstY);",
          "204:         xform.transform(p, p);",
          "206:         for (int n = 0; n < numberOfColorComponents; ++n)",
          "207:         {",
          "208:             int color = (int) input.readBits(bitsPerColorComponent);",
          "209:             colorComponentTab[n] = interpolate(color, maxSrcColor, colRangeTab[n].getMin(),",
          "210:                     colRangeTab[n].getMax());",
          "211:             LOG.debug(\"color[\" + n + \"]: \" + color + \"/\" + String.format(\"%02x\", color)",
          "212:                     + \"-> color[\" + n + \"]: \" + colorComponentTab[n]);",
          "213:         }",
          "218:         int bitOffset = input.getBitOffset();",
          "219:         if (bitOffset != 0)",
          "220:         {",
          "221:             input.readBits(8 - bitOffset);",
          "222:         }",
          "224:         return new Vertex(p, colorComponentTab);",
          "225:     }",
          "227:     abstract List<ShadedTriangle> collectTriangles(AffineTransform xform, Matrix matrix) throws IOException;",
          "229:     @Override",
          "230:     public Rectangle2D getBounds(AffineTransform xform, Matrix matrix) throws IOException",
          "231:     {",
          "232:         Rectangle2D bounds = null;",
          "233:         for (ShadedTriangle shadedTriangle : collectTriangles(xform, matrix))",
          "234:         {",
          "235:             if (bounds == null)",
          "236:             {",
          "237:                 bounds = new Rectangle2D.Double(shadedTriangle.corner[0].getX(),",
          "238:                         shadedTriangle.corner[0].getY(), 0, 0);",
          "239:             }",
          "240:             bounds.add(shadedTriangle.corner[0]);",
          "241:             bounds.add(shadedTriangle.corner[1]);",
          "242:             bounds.add(shadedTriangle.corner[2]);",
          "243:         }",
          "244:         return bounds;",
          "245:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.awt.Point;",
          "19: import java.awt.Rectangle;",
          "20: import java.awt.geom.AffineTransform;",
          "22: import java.awt.image.ColorModel;",
          "24: import java.io.IOException;",
          "25: import java.util.ArrayList;",
          "27: import java.util.HashMap;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "37: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "21: import java.awt.geom.Point2D;",
          "23: import java.io.EOFException;",
          "26: import java.util.Collections;",
          "30: import javax.imageio.stream.ImageInputStream;",
          "31: import javax.imageio.stream.MemoryCacheImageInputStream;",
          "32: import org.apache.commons.logging.Log;",
          "33: import org.apache.commons.logging.LogFactory;",
          "34: import org.apache.pdfbox.cos.COSDictionary;",
          "35: import org.apache.pdfbox.cos.COSStream;",
          "36: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: abstract class PatchMeshesShadingContext extends TriangleBasedShadingContext",
          "46: {",
          "",
          "[Removed Lines]",
          "47:     private static final Log LOG = LogFactory.getLog(PatchMeshesShadingContext.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:             AffineTransform xform, Matrix matrix, Rectangle deviceBounds,",
          "67:             int controlPoints) throws IOException",
          "68:     {",
          "69:         super(shading, colorModel, xform, matrix);",
          "71:         createPixelTable(deviceBounds);",
          "72:     }",
          "274:     @Override",
          "275:     protected Map<Point, Integer> calcPixelTable(Rectangle deviceBounds)  throws IOException",
          "276:     {",
          "",
          "[Removed Lines]",
          "65:     protected PatchMeshesShadingContext(PDShadingType6 shading, ColorModel colorModel,",
          "70:         patchList = collectPatches(shading, xform, matrix, controlPoints);",
          "85:     final List<Patch> collectPatches(PDShadingType6 shadingType, AffineTransform xform,",
          "86:             Matrix matrix, int controlPoints) throws IOException",
          "87:     {",
          "88:         COSDictionary dict = shadingType.getCOSObject();",
          "89:         if (!(dict instanceof COSStream))",
          "90:         {",
          "91:             return Collections.emptyList();",
          "92:         }",
          "93:         PDRange rangeX = shadingType.getDecodeForParameter(0);",
          "94:         PDRange rangeY = shadingType.getDecodeForParameter(1);",
          "95:         if (Float.compare(rangeX.getMin(), rangeX.getMax()) == 0 ||",
          "96:             Float.compare(rangeY.getMin(), rangeY.getMax()) == 0)",
          "97:         {",
          "98:             return Collections.emptyList();",
          "99:         }",
          "100:         int bitsPerFlag = shadingType.getBitsPerFlag();",
          "101:         PDRange[] colRange = new PDRange[numberOfColorComponents];",
          "102:         for (int i = 0; i < numberOfColorComponents; ++i)",
          "103:         {",
          "104:             colRange[i] = shadingType.getDecodeForParameter(2 + i);",
          "105:             if (colRange[i] == null)",
          "106:             {",
          "107:                 throw new IOException(\"Range missing in shading /Decode entry\");",
          "108:             }",
          "109:         }",
          "110:         List<Patch> list = new ArrayList<Patch>();",
          "111:         long maxSrcCoord = (long) Math.pow(2, bitsPerCoordinate) - 1;",
          "112:         long maxSrcColor = (long) Math.pow(2, bitsPerColorComponent) - 1;",
          "113:         COSStream cosStream = (COSStream) dict;",
          "115:         ImageInputStream mciis = new MemoryCacheImageInputStream(cosStream.createInputStream());",
          "116:         try",
          "117:         {",
          "118:             Point2D[] implicitEdge = new Point2D[4];",
          "119:             float[][] implicitCornerColor = new float[2][numberOfColorComponents];",
          "120:             byte flag = 0;",
          "122:             try",
          "123:             {",
          "124:                 flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "125:             }",
          "126:             catch (EOFException ex)",
          "127:             {",
          "128:                 LOG.error(ex);",
          "129:             }",
          "131:             boolean eof = false;",
          "132:             while (!eof)",
          "133:             {",
          "134:                 try",
          "135:                 {",
          "136:                     boolean isFree = (flag == 0);",
          "137:                     Patch current = readPatch(mciis, isFree, implicitEdge, implicitCornerColor,",
          "138:                             maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange, matrix, xform, controlPoints);",
          "139:                     if (current == null)",
          "140:                     {",
          "141:                         break;",
          "142:                     }",
          "143:                     list.add(current);",
          "144:                     flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "145:                     switch (flag)",
          "146:                     {",
          "147:                         case 0:",
          "148:                             break;",
          "149:                         case 1:",
          "150:                             implicitEdge = current.getFlag1Edge();",
          "151:                             implicitCornerColor = current.getFlag1Color();",
          "152:                             break;",
          "153:                         case 2:",
          "154:                             implicitEdge = current.getFlag2Edge();",
          "155:                             implicitCornerColor = current.getFlag2Color();",
          "156:                             break;",
          "157:                         case 3:",
          "158:                             implicitEdge = current.getFlag3Edge();",
          "159:                             implicitCornerColor = current.getFlag3Color();",
          "160:                             break;",
          "161:                         default:",
          "162:                             LOG.warn(\"bad flag: \" + flag);",
          "163:                             break;",
          "164:                     }",
          "165:                 }",
          "166:                 catch (EOFException ex)",
          "167:                 {",
          "168:                     eof = true;",
          "169:                 }",
          "170:             }",
          "171:         }",
          "172:         finally",
          "173:         {",
          "174:             mciis.close();",
          "175:         }",
          "176:         return list;",
          "177:     }",
          "198:     protected Patch readPatch(ImageInputStream input, boolean isFree, Point2D[] implicitEdge,",
          "199:                               float[][] implicitCornerColor, long maxSrcCoord, long maxSrcColor,",
          "200:                               PDRange rangeX, PDRange rangeY, PDRange[] colRange, Matrix matrix,",
          "201:                               AffineTransform xform, int controlPoints) throws IOException",
          "202:     {",
          "203:         float[][] color = new float[4][numberOfColorComponents];",
          "204:         Point2D[] points = new Point2D[controlPoints];",
          "205:         int pStart = 4, cStart = 2;",
          "206:         if (isFree)",
          "207:         {",
          "208:             pStart = 0;",
          "209:             cStart = 0;",
          "210:         }",
          "211:         else",
          "212:         {",
          "213:             points[0] = implicitEdge[0];",
          "214:             points[1] = implicitEdge[1];",
          "215:             points[2] = implicitEdge[2];",
          "216:             points[3] = implicitEdge[3];",
          "218:             for (int i = 0; i < numberOfColorComponents; i++)",
          "219:             {",
          "220:                 color[0][i] = implicitCornerColor[0][i];",
          "221:                 color[1][i] = implicitCornerColor[1][i];",
          "222:             }",
          "223:         }",
          "225:         try",
          "226:         {",
          "227:             for (int i = pStart; i < controlPoints; i++)",
          "228:             {",
          "229:                 long x = input.readBits(bitsPerCoordinate);",
          "230:                 long y = input.readBits(bitsPerCoordinate);",
          "231:                 float px = interpolate(x, maxSrcCoord, rangeX.getMin(), rangeX.getMax());",
          "232:                 float py = interpolate(y, maxSrcCoord, rangeY.getMin(), rangeY.getMax());",
          "233:                 Point2D p = matrix.transformPoint(px, py);",
          "234:                 xform.transform(p, p);",
          "235:                 points[i] = p;",
          "236:             }",
          "237:             for (int i = cStart; i < 4; i++)",
          "238:             {",
          "239:                 for (int j = 0; j < numberOfColorComponents; j++)",
          "240:                 {",
          "241:                     long c = input.readBits(bitsPerColorComponent);",
          "242:                     color[i][j] = interpolate(c, maxSrcColor, colRange[j].getMin(),",
          "243:                             colRange[j].getMax());",
          "244:                 }",
          "245:             }",
          "246:         }",
          "247:         catch (EOFException ex)",
          "248:         {",
          "249:             LOG.debug(\"EOF\");",
          "250:             return null;",
          "251:         }",
          "252:         return generatePatch(points, color);",
          "253:     }",
          "264:     abstract Patch generatePatch(Point2D[] points, float[][] color);",
          "269:     private float interpolate(float x, long maxValue, float rangeMin, float rangeMax)",
          "270:     {",
          "271:         return rangeMin + (x / maxValue) * (rangeMax - rangeMin);",
          "272:     }",
          "",
          "[Added Lines]",
          "55:     protected PatchMeshesShadingContext(PDMeshBasedShadingType shading, ColorModel colorModel,",
          "60:         patchList = shading.collectPatches(xform, matrix, controlPoints);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/TriangleBasedShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: abstract class TriangleBasedShadingContext extends ShadingContext implements PaintContext",
          "40: {",
          "50:     private Map<Point, Integer> pixelTable;",
          "",
          "[Removed Lines]",
          "41:     private static final Log LOG = LogFactory.getLog(TriangleBasedShadingContext.class);",
          "43:     protected int bitsPerCoordinate;",
          "44:     protected int bitsPerColorComponent;",
          "45:     protected int numberOfColorComponents;",
          "47:     private final boolean hasFunction;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:                                        Matrix matrix) throws IOException",
          "63:     {",
          "64:         super(shading, cm, xform, matrix);",
          "73:     }",
          "",
          "[Removed Lines]",
          "65:         PDTriangleBasedShadingType triangleBasedShadingType = (PDTriangleBasedShadingType) shading;",
          "66:         hasFunction = shading.getFunction() != null;",
          "67:         bitsPerCoordinate = triangleBasedShadingType.getBitsPerCoordinate();",
          "68:         LOG.debug(\"bitsPerCoordinate: \" + (Math.pow(2, bitsPerCoordinate) - 1));",
          "69:         bitsPerColorComponent = triangleBasedShadingType.getBitsPerComponent();",
          "70:         LOG.debug(\"bitsPerColorComponent: \" + bitsPerColorComponent);",
          "71:         numberOfColorComponents = hasFunction ? 1 : getShadingColorSpace().getNumberOfComponents();",
          "72:         LOG.debug(\"numberOfColorComponents: \" + numberOfColorComponents);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:     private int evalFunctionAndConvertToRGB(float[] values) throws IOException",
          "158:     {",
          "160:         {",
          "161:             values = getShading().evalFunction(values);",
          "162:         }",
          "",
          "[Removed Lines]",
          "159:         if (hasFunction)",
          "",
          "[Added Lines]",
          "143:         if (getShading().getFunction() != null)",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Rectangle;",
          "20: import java.awt.geom.AffineTransform;",
          "22: import java.awt.image.ColorModel;",
          "24: import java.io.IOException;",
          "30: import org.apache.commons.logging.Log;",
          "31: import org.apache.commons.logging.LogFactory;",
          "35: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "21: import java.awt.geom.Point2D;",
          "23: import java.io.EOFException;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Collections;",
          "27: import java.util.List;",
          "28: import javax.imageio.stream.ImageInputStream;",
          "29: import javax.imageio.stream.MemoryCacheImageInputStream;",
          "32: import org.apache.pdfbox.cos.COSDictionary;",
          "33: import org.apache.pdfbox.cos.COSStream;",
          "34: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         bitsPerFlag = shading.getBitsPerFlag();",
          "64:         LOG.debug(\"bitsPerFlag: \" + bitsPerFlag);",
          "66:         createPixelTable(deviceBounds);",
          "67:     }",
          "179: }",
          "",
          "[Removed Lines]",
          "65:         setTriangleList(collectTriangles(shading, xform, matrix));",
          "69:     private List<ShadedTriangle> collectTriangles(PDShadingType4 freeTriangleShadingType, AffineTransform xform, Matrix matrix)",
          "70:             throws IOException",
          "71:     {",
          "72:         COSDictionary dict = freeTriangleShadingType.getCOSObject();",
          "73:         if (!(dict instanceof COSStream))",
          "74:         {",
          "75:             return Collections.emptyList();",
          "76:         }",
          "77:         PDRange rangeX = freeTriangleShadingType.getDecodeForParameter(0);",
          "78:         PDRange rangeY = freeTriangleShadingType.getDecodeForParameter(1);",
          "79:         if (Float.compare(rangeX.getMin(), rangeX.getMax()) == 0 ||",
          "80:             Float.compare(rangeY.getMin(), rangeY.getMax()) == 0)",
          "81:         {",
          "82:             return Collections.emptyList();",
          "83:         }",
          "84:         PDRange[] colRange = new PDRange[numberOfColorComponents];",
          "85:         for (int i = 0; i < numberOfColorComponents; ++i)",
          "86:         {",
          "87:             colRange[i] = freeTriangleShadingType.getDecodeForParameter(2 + i);",
          "88:         }",
          "89:         List<ShadedTriangle> list = new ArrayList<ShadedTriangle>();",
          "90:         long maxSrcCoord = (long) Math.pow(2, bitsPerCoordinate) - 1;",
          "91:         long maxSrcColor = (long) Math.pow(2, bitsPerColorComponent) - 1;",
          "92:         COSStream stream = (COSStream) dict;",
          "94:         ImageInputStream mciis = new MemoryCacheImageInputStream(stream.createInputStream());",
          "95:         try",
          "96:         {",
          "97:             byte flag = (byte) 0;",
          "98:             try",
          "99:             {",
          "100:                 flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "101:             }",
          "102:             catch (EOFException ex)",
          "103:             {",
          "104:                 LOG.error(ex);",
          "105:             }",
          "107:             boolean eof = false;",
          "108:             while (!eof)",
          "109:             {",
          "110:                 Vertex p0, p1, p2;",
          "111:                 Point2D[] ps;",
          "112:                 float[][] cs;",
          "113:                 int lastIndex;",
          "114:                 try",
          "115:                 {",
          "116:                     switch (flag)",
          "117:                     {",
          "118:                         case 0:",
          "119:                             p0 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange,",
          "120:                                             matrix, xform);",
          "121:                             flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "122:                             if (flag != 0)",
          "123:                             {",
          "124:                                 LOG.error(\"bad triangle: \" + flag);",
          "125:                             }",
          "126:                             p1 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange,",
          "127:                                             matrix, xform);",
          "128:                             mciis.readBits(bitsPerFlag);",
          "129:                             if (flag != 0)",
          "130:                             {",
          "131:                                 LOG.error(\"bad triangle: \" + flag);",
          "132:                             }",
          "133:                             p2 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange,",
          "134:                                             matrix, xform);",
          "135:                             ps = new Point2D[] { p0.point, p1.point, p2.point };",
          "136:                             cs = new float[][] { p0.color, p1.color, p2.color };",
          "137:                             list.add(new ShadedTriangle(ps, cs));",
          "138:                             flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "139:                             break;",
          "140:                         case 1:",
          "141:                         case 2:",
          "142:                             lastIndex = list.size() - 1;",
          "143:                             if (lastIndex < 0)",
          "144:                             {",
          "145:                                 LOG.error(\"broken data stream: \" + list.size());",
          "146:                             }",
          "147:                             else",
          "148:                             {",
          "149:                                 ShadedTriangle preTri = list.get(lastIndex);",
          "150:                                 p2 = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY,",
          "151:                                                 colRange, matrix, xform);",
          "152:                                 ps = new Point2D[] { flag == 1 ? preTri.corner[1] : preTri.corner[0],",
          "153:                                                      preTri.corner[2],",
          "154:                                                      p2.point };",
          "155:                                 cs = new float[][] { flag == 1 ? preTri.color[1] : preTri.color[0],",
          "156:                                                      preTri.color[2],",
          "157:                                                      p2.color };",
          "158:                                 list.add(new ShadedTriangle(ps, cs));",
          "159:                                 flag = (byte) (mciis.readBits(bitsPerFlag) & 3);",
          "160:                             }",
          "161:                             break;",
          "162:                         default:",
          "163:                             LOG.warn(\"bad flag: \" + flag);",
          "164:                             break;",
          "165:                     }",
          "166:                 }",
          "167:                 catch (EOFException ex)",
          "168:                 {",
          "169:                     eof = true;",
          "170:                 }",
          "171:             }",
          "172:         }",
          "173:         finally",
          "174:         {",
          "175:             mciis.close();",
          "176:         }",
          "177:         return list;",
          "178:     }",
          "",
          "[Added Lines]",
          "56:         setTriangleList(shading.collectTriangles(xform, matrix));",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Rectangle;",
          "20: import java.awt.geom.AffineTransform;",
          "22: import java.awt.image.ColorModel;",
          "24: import java.io.IOException;",
          "30: import org.apache.commons.logging.Log;",
          "31: import org.apache.commons.logging.LogFactory;",
          "35: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "21: import java.awt.geom.Point2D;",
          "23: import java.io.EOFException;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Collections;",
          "27: import java.util.List;",
          "28: import javax.imageio.stream.ImageInputStream;",
          "29: import javax.imageio.stream.MemoryCacheImageInputStream;",
          "32: import org.apache.pdfbox.cos.COSDictionary;",
          "33: import org.apache.pdfbox.cos.COSStream;",
          "34: import org.apache.pdfbox.pdmodel.common.PDRange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         LOG.debug(\"Type5ShadingContext\");",
          "64:         createPixelTable(deviceBounds);",
          "65:     }",
          "163: }",
          "",
          "[Removed Lines]",
          "63:         setTriangleList(collectTriangles(shading, xform, matrix));",
          "67:     private List<ShadedTriangle> collectTriangles(PDShadingType5 latticeTriangleShadingType,",
          "68:             AffineTransform xform, Matrix matrix) throws IOException",
          "69:     {",
          "70:         COSDictionary dict = latticeTriangleShadingType.getCOSObject();",
          "71:         if (!(dict instanceof COSStream))",
          "72:         {",
          "73:             return Collections.emptyList();",
          "74:         }",
          "75:         PDRange rangeX = latticeTriangleShadingType.getDecodeForParameter(0);",
          "76:         PDRange rangeY = latticeTriangleShadingType.getDecodeForParameter(1);",
          "77:         if (Float.compare(rangeX.getMin(), rangeX.getMax()) == 0 ||",
          "78:             Float.compare(rangeY.getMin(), rangeY.getMax()) == 0)",
          "79:         {",
          "80:             return Collections.emptyList();",
          "81:         }",
          "82:         int numPerRow = latticeTriangleShadingType.getVerticesPerRow();",
          "83:         PDRange[] colRange = new PDRange[numberOfColorComponents];",
          "84:         for (int i = 0; i < numberOfColorComponents; ++i)",
          "85:         {",
          "86:             colRange[i] = latticeTriangleShadingType.getDecodeForParameter(2 + i);",
          "87:         }",
          "88:         List<Vertex> vlist = new ArrayList<Vertex>();",
          "89:         long maxSrcCoord = (long) Math.pow(2, bitsPerCoordinate) - 1;",
          "90:         long maxSrcColor = (long) Math.pow(2, bitsPerColorComponent) - 1;",
          "91:         COSStream cosStream = (COSStream) dict;",
          "93:         ImageInputStream mciis = new MemoryCacheImageInputStream(cosStream.createInputStream());",
          "94:         try",
          "95:         {",
          "96:             boolean eof = false;",
          "97:             while (!eof)",
          "98:             {",
          "99:                 Vertex p;",
          "100:                 try",
          "101:                 {",
          "102:                     p = readVertex(mciis, maxSrcCoord, maxSrcColor, rangeX, rangeY, colRange, matrix, xform);",
          "103:                     vlist.add(p);",
          "104:                 }",
          "105:                 catch (EOFException ex)",
          "106:                 {",
          "107:                     eof = true;",
          "108:                 }",
          "109:             }",
          "110:         }",
          "111:         finally",
          "112:         {",
          "113:             mciis.close();",
          "114:         }",
          "115:         int rowNum = vlist.size() / numPerRow;",
          "116:         Vertex[][] latticeArray = new Vertex[rowNum][numPerRow];",
          "117:         List<ShadedTriangle> list = new ArrayList<ShadedTriangle>();",
          "118:         if (rowNum < 2)",
          "119:         {",
          "121:             return list;",
          "122:         }",
          "123:         for (int i = 0; i < rowNum; i++)",
          "124:         {",
          "125:             for (int j = 0; j < numPerRow; j++)",
          "126:             {",
          "127:                 latticeArray[i][j] = vlist.get(i * numPerRow + j);",
          "128:             }",
          "129:         }",
          "131:         for (int i = 0; i < rowNum - 1; i++)",
          "132:         {",
          "133:             for (int j = 0; j < numPerRow - 1; j++)",
          "134:             {",
          "135:                 Point2D[] ps = new Point2D[] {",
          "136:                     latticeArray[i][j].point,",
          "137:                     latticeArray[i][j + 1].point,",
          "138:                     latticeArray[i + 1][j].point  };",
          "140:                 float[][] cs = new float[][] {",
          "141:                     latticeArray[i][j].color,",
          "142:                     latticeArray[i][j + 1].color,",
          "143:                     latticeArray[i + 1][j].color };",
          "145:                 list.add(new ShadedTriangle(ps, cs));",
          "147:                 ps = new Point2D[] {",
          "148:                     latticeArray[i][j + 1].point,",
          "149:                     latticeArray[i + 1][j].point,",
          "150:                     latticeArray[i + 1][j + 1].point };",
          "152:                 cs = new float[][]{",
          "153:                     latticeArray[i][j + 1].color,",
          "154:                     latticeArray[i + 1][j].color,",
          "155:                     latticeArray[i + 1][j + 1].color };",
          "157:                 list.add(new ShadedTriangle(ps, cs));",
          "158:             }",
          "159:         }",
          "160:         return list;",
          "161:     }",
          "",
          "[Added Lines]",
          "54:         setTriangleList(shading.collectTriangles(xform, matrix));",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.awt.Rectangle;",
          "19: import java.awt.geom.AffineTransform;",
          "21: import java.awt.image.ColorModel;",
          "22: import java.io.IOException;",
          "23: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "20: import java.awt.geom.Point2D;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {",
          "46:         super(shading, colorModel, xform, matrix, deviceBounds, 12);",
          "47:     }",
          "54: }",
          "",
          "[Removed Lines]",
          "49:     @Override",
          "50:     protected Patch generatePatch(Point2D[] points, float[][] color)",
          "51:     {",
          "52:         return new CoonsPatch(points, color);",
          "53:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.awt.Rectangle;",
          "19: import java.awt.geom.AffineTransform;",
          "21: import java.awt.image.ColorModel;",
          "22: import java.io.IOException;",
          "23: import org.apache.pdfbox.util.Matrix;",
          "",
          "[Removed Lines]",
          "20: import java.awt.geom.Point2D;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {",
          "46:         super(shading, colorModel, xform, matrix, deviceBounds, 16);",
          "47:     }",
          "54: }",
          "",
          "[Removed Lines]",
          "49:     @Override",
          "50:     protected Patch generatePatch(Point2D[] points, float[][] color)",
          "51:     {",
          "52:         return new TensorPatch(points, color);",
          "53:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:         }",
          "1414:         else",
          "1415:         {",
          "1417:         }",
          "1418:         if (isContentRendered())",
          "1419:         {",
          "",
          "[Removed Lines]",
          "1416:             area = getGraphicsState().getCurrentClippingPath();",
          "",
          "[Added Lines]",
          "1416:             Rectangle2D bounds = shading.getBounds(new AffineTransform(), ctm);",
          "1417:             if (bounds != null)",
          "1418:             {",
          "1419:                 bounds.add(new Point2D.Double(Math.floor(bounds.getMinX() - 1),",
          "1420:                         Math.floor(bounds.getMinY() - 1)));",
          "1421:                 bounds.add(new Point2D.Double(Math.ceil(bounds.getMaxX() + 1),",
          "1422:                         Math.ceil(bounds.getMaxY() + 1)));",
          "1423:                 area = new Area(bounds);",
          "1424:                 area.intersect(getGraphicsState().getCurrentClippingPath());",
          "1425:             }",
          "1426:             else",
          "1427:             {",
          "1428:                 area = getGraphicsState().getCurrentClippingPath();",
          "1429:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "697b9f072c65bb089d6b1ca025f4f30f7fa521d4",
      "candidate_info": {
        "commit_hash": "697b9f072c65bb089d6b1ca025f4f30f7fa521d4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/697b9f072c65bb089d6b1ca025f4f30f7fa521d4",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java"
        ],
        "message": "PDFBOX-4892: improve speed, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888029 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java||fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java||fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java -> fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:         int[] startCode = new int[uniToGID.size()+1];",
          "720:         int segCount = 0;",
          "721:         while(it.hasNext())",
          "722:         {",
          "",
          "[Removed Lines]",
          "718:         int[] endCode = new int[uniToGID.size()+1];",
          "719:         int[] idDelta = new int[uniToGID.size()+1];",
          "",
          "[Added Lines]",
          "718:         int[] endCode = new int[startCode.length];",
          "719:         int[] idDelta = new int[startCode.length];",
          "",
          "---------------"
        ]
      }
    }
  ]
}