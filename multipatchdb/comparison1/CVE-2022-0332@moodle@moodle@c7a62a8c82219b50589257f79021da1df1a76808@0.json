{
  "cve_id": "CVE-2022-0332",
  "cve_desc": "A flaw was found in Moodle in versions 3.11 to 3.11.4. An SQL injection risk was identified in the h5p activity web service responsible for fetching user attempt data.",
  "repo": "moodle/moodle",
  "patch_hash": "c7a62a8c82219b50589257f79021da1df1a76808",
  "patch_info": {
    "commit_hash": "c7a62a8c82219b50589257f79021da1df1a76808",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/c7a62a8c82219b50589257f79021da1df1a76808",
    "files": [
      "mod/h5pactivity/classes/external/get_user_attempts.php",
      "mod/h5pactivity/tests/external/get_user_attempts_test.php"
    ],
    "message": "MDL-72573 mod_h5pactivity: tighter validation of external sort param.\n\nRestrict external method $sortorder parameter to limited subset of\nvalues.",
    "before_after_code_files": [
      "mod/h5pactivity/classes/external/get_user_attempts.php||mod/h5pactivity/classes/external/get_user_attempts.php",
      "mod/h5pactivity/tests/external/get_user_attempts_test.php||mod/h5pactivity/tests/external/get_user_attempts_test.php"
    ]
  },
  "patch_diff": {
    "mod/h5pactivity/classes/external/get_user_attempts.php||mod/h5pactivity/classes/external/get_user_attempts.php": [
      "File: mod/h5pactivity/classes/external/get_user_attempts.php -> mod/h5pactivity/classes/external/get_user_attempts.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:             [",
      "63:                 'h5pactivityid' => new external_value(PARAM_INT, 'h5p activity instance id'),",
      "64:                 'sortorder' => new external_value(PARAM_TEXT,",
      "66:                 'page' => new external_value(PARAM_INT, 'current page', VALUE_DEFAULT, -1),",
      "67:                 'perpage' => new external_value(PARAM_INT, 'items per page', VALUE_DEFAULT, 0),",
      "68:                 'firstinitial' => new external_value(PARAM_TEXT, 'Users whose first name ' .",
      "",
      "[Removed Lines]",
      "65:                     'sort by this element: id, firstname', VALUE_DEFAULT, 'id ASC'),",
      "",
      "[Added Lines]",
      "65:                     'sort by either user id, firstname or lastname (with optional asc/desc)', VALUE_DEFAULT, 'id ASC'),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:             ?int $perpage = 0, $firstinitial = '', $lastinitial = ''): stdClass {",
      "90:         [",
      "91:             'h5pactivityid' => $h5pactivityid,",
      "",
      "[Removed Lines]",
      "88:     public static function execute(int $h5pactivityid, $sortorder = '', ?int $page = 0,",
      "",
      "[Added Lines]",
      "88:     public static function execute(int $h5pactivityid, $sortorder = 'id ASC', ?int $page = 0,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "117:                 'h5pactivity:reviewattempts required view attempts of all enrolled users.');",
      "118:         }",
      "122:         $users = self::get_active_users($manager, 'u.id, u.firstname, u.lastname',",
      "123:             $sortorder, $page * $perpage, $perpage);",
      "",
      "[Removed Lines]",
      "120:         $coursecontext = \\context_course::instance($course->id);",
      "",
      "[Added Lines]",
      "121:         $sortorderparts = explode(' ', $sortorder, 2);",
      "122:         $sortorder = get_safe_orderby([",
      "123:             'id' => 'u.id',",
      "124:             'firstname' => 'u.firstname',",
      "125:             'lastname' => 'u.lastname',",
      "126:             'default' => 'u.id',",
      "127:         ], $sortorderparts[0], $sortorderparts[1] ?? '');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "172:     private static function get_active_users(",
      "173:         manager $manager,",
      "174:         string $userfields = 'u.*',",
      "176:         int $limitfrom = 0,",
      "177:         int $limitnum = 0",
      "178:     ): array {",
      "",
      "[Removed Lines]",
      "175:         string $sortorder = null,",
      "",
      "[Added Lines]",
      "182:         string $sortorder = '',",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "185:         $sql = \"SELECT DISTINCT {$userfields}",
      "186:                   FROM {user} u {$capjoin->joins}",
      "193:         return $DB->get_records_sql($sql, $capjoin->params, $limitfrom, $limitnum);",
      "194:     }",
      "",
      "[Removed Lines]",
      "187:                 WHERE {$capjoin->wheres}\";",
      "189:         if (!empty($sortorder)) {",
      "190:             $sql .= \" ORDER BY {$sortorder}\";",
      "191:         }",
      "",
      "[Added Lines]",
      "194:                  WHERE {$capjoin->wheres}",
      "195:                        {$sortorder}\";",
      "",
      "---------------"
    ],
    "mod/h5pactivity/tests/external/get_user_attempts_test.php||mod/h5pactivity/tests/external/get_user_attempts_test.php": [
      "File: mod/h5pactivity/tests/external/get_user_attempts_test.php -> mod/h5pactivity/tests/external/get_user_attempts_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:             ],",
      "183:         ];",
      "184:     }",
      "185: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:     public function execute_with_sortorder(): array {",
      "192:         return [",
      "193:             'Sort by id' => ['id', ['user01', 'user02']],",
      "194:             'Sort by id desc' => ['id desc', ['user02', 'user01']],",
      "195:             'Sort by id asc' => ['id asc', ['user01', 'user02']],",
      "196:             'Sort by firstname' => ['firstname', ['user01', 'user02']],",
      "197:             'Sort by firstname desc' => ['firstname desc', ['user02', 'user01']],",
      "198:             'Sort by firstname asc' => ['firstname asc', ['user01', 'user02']],",
      "199:             'Sort by lastname' => ['lastname', ['user02', 'user01']],",
      "200:             'Sort by lastname desc' => ['lastname desc', ['user01', 'user02']],",
      "201:             'Sort by lastname asc' => ['lastname asc', ['user02', 'user01']],",
      "203:             'Sort by empty string' => ['', ['user01', 'user02']],",
      "204:             'Sort by invalid field' => ['invalid', ['user01', 'user02']],",
      "205:         ];",
      "206:     }",
      "216:     public function test_execute_with_sortorder(string $sortorder, array $expectedorder): void {",
      "217:         $this->resetAfterTest();",
      "218:         $this->setAdminUser();",
      "221:         $course = $this->getDataGenerator()->create_course();",
      "222:         $module = $this->getDataGenerator()->create_module('h5pactivity', ['course' => $course]);",
      "225:         $users['user01'] = $this->getDataGenerator()->create_and_enrol($course, 'student', [",
      "226:             'username' => 'user01',",
      "227:             'firstname' => 'Adam',",
      "228:             'lastname' => 'Zebra',",
      "229:         ]);",
      "230:         $users['user02'] = $this->getDataGenerator()->create_and_enrol($course, 'student', [",
      "231:             'username' => 'user02',",
      "232:             'firstname' => 'Zoe',",
      "233:             'lastname' => 'Apples',",
      "234:         ]);",
      "236:         $result = external_api::clean_returnvalue(",
      "237:             get_user_attempts::execute_returns(),",
      "238:             get_user_attempts::execute($module->id, $sortorder)",
      "239:         );",
      "242:         $expectedorderbyuserid = array_map(static function(string $username) use ($users): int {",
      "243:             return $users[$username]->id;",
      "244:         }, $expectedorder);",
      "247:         $this->assertEquals($expectedorderbyuserid, array_column($result['usersattempts'], 'userid'));",
      "248:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b09d50dd4accc6572690741e7f05e11c7e943969",
      "candidate_info": {
        "commit_hash": "b09d50dd4accc6572690741e7f05e11c7e943969",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b09d50dd4accc6572690741e7f05e11c7e943969",
        "files": [
          "mod/h5pactivity/classes/external/get_user_attempts.php",
          "mod/h5pactivity/tests/external/get_user_attempts_test.php"
        ],
        "message": "MDL-72573 mod_h5pactivity: tighter validation of external sort param.\n\nRestrict external method $sortorder parameter to limited subset of\nvalues.",
        "before_after_code_files": [
          "mod/h5pactivity/classes/external/get_user_attempts.php||mod/h5pactivity/classes/external/get_user_attempts.php",
          "mod/h5pactivity/tests/external/get_user_attempts_test.php||mod/h5pactivity/tests/external/get_user_attempts_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/h5pactivity/classes/external/get_user_attempts.php||mod/h5pactivity/classes/external/get_user_attempts.php",
            "mod/h5pactivity/tests/external/get_user_attempts_test.php||mod/h5pactivity/tests/external/get_user_attempts_test.php"
          ],
          "candidate": [
            "mod/h5pactivity/classes/external/get_user_attempts.php||mod/h5pactivity/classes/external/get_user_attempts.php",
            "mod/h5pactivity/tests/external/get_user_attempts_test.php||mod/h5pactivity/tests/external/get_user_attempts_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/h5pactivity/classes/external/get_user_attempts.php||mod/h5pactivity/classes/external/get_user_attempts.php": [
          "File: mod/h5pactivity/classes/external/get_user_attempts.php -> mod/h5pactivity/classes/external/get_user_attempts.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:             [",
          "63:                 'h5pactivityid' => new external_value(PARAM_INT, 'h5p activity instance id'),",
          "64:                 'sortorder' => new external_value(PARAM_TEXT,",
          "66:                 'page' => new external_value(PARAM_INT, 'current page', VALUE_DEFAULT, -1),",
          "67:                 'perpage' => new external_value(PARAM_INT, 'items per page', VALUE_DEFAULT, 0),",
          "68:                 'firstinitial' => new external_value(PARAM_TEXT, 'Users whose first name ' .",
          "",
          "[Removed Lines]",
          "65:                     'sort by this element: id, firstname', VALUE_DEFAULT, 'id ASC'),",
          "",
          "[Added Lines]",
          "65:                     'sort by either user id, firstname or lastname (with optional asc/desc)', VALUE_DEFAULT, 'id ASC'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:             ?int $perpage = 0, $firstinitial = '', $lastinitial = ''): stdClass {",
          "90:         [",
          "91:             'h5pactivityid' => $h5pactivityid,",
          "",
          "[Removed Lines]",
          "88:     public static function execute(int $h5pactivityid, $sortorder = '', ?int $page = 0,",
          "",
          "[Added Lines]",
          "88:     public static function execute(int $h5pactivityid, $sortorder = 'id ASC', ?int $page = 0,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:                 'h5pactivity:reviewattempts required view attempts of all enrolled users.');",
          "118:         }",
          "122:         $users = self::get_active_users($manager, 'u.id, u.firstname, u.lastname',",
          "123:             $sortorder, $page * $perpage, $perpage);",
          "",
          "[Removed Lines]",
          "120:         $coursecontext = \\context_course::instance($course->id);",
          "",
          "[Added Lines]",
          "121:         $sortorderparts = explode(' ', $sortorder, 2);",
          "122:         $sortorder = get_safe_orderby([",
          "123:             'id' => 'u.id',",
          "124:             'firstname' => 'u.firstname',",
          "125:             'lastname' => 'u.lastname',",
          "126:             'default' => 'u.id',",
          "127:         ], $sortorderparts[0], $sortorderparts[1] ?? '');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:     private static function get_active_users(",
          "173:         manager $manager,",
          "174:         string $userfields = 'u.*',",
          "176:         int $limitfrom = 0,",
          "177:         int $limitnum = 0",
          "178:     ): array {",
          "",
          "[Removed Lines]",
          "175:         string $sortorder = null,",
          "",
          "[Added Lines]",
          "182:         string $sortorder = '',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:         $sql = \"SELECT DISTINCT {$userfields}",
          "186:                   FROM {user} u {$capjoin->joins}",
          "193:         return $DB->get_records_sql($sql, $capjoin->params, $limitfrom, $limitnum);",
          "194:     }",
          "",
          "[Removed Lines]",
          "187:                 WHERE {$capjoin->wheres}\";",
          "189:         if (!empty($sortorder)) {",
          "190:             $sql .= \" ORDER BY {$sortorder}\";",
          "191:         }",
          "",
          "[Added Lines]",
          "194:                  WHERE {$capjoin->wheres}",
          "195:                        {$sortorder}\";",
          "",
          "---------------"
        ],
        "mod/h5pactivity/tests/external/get_user_attempts_test.php||mod/h5pactivity/tests/external/get_user_attempts_test.php": [
          "File: mod/h5pactivity/tests/external/get_user_attempts_test.php -> mod/h5pactivity/tests/external/get_user_attempts_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:             ],",
          "183:         ];",
          "184:     }",
          "185: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:     public function execute_with_sortorder(): array {",
          "192:         return [",
          "193:             'Sort by id' => ['id', ['user01', 'user02']],",
          "194:             'Sort by id desc' => ['id desc', ['user02', 'user01']],",
          "195:             'Sort by id asc' => ['id asc', ['user01', 'user02']],",
          "196:             'Sort by firstname' => ['firstname', ['user01', 'user02']],",
          "197:             'Sort by firstname desc' => ['firstname desc', ['user02', 'user01']],",
          "198:             'Sort by firstname asc' => ['firstname asc', ['user01', 'user02']],",
          "199:             'Sort by lastname' => ['lastname', ['user02', 'user01']],",
          "200:             'Sort by lastname desc' => ['lastname desc', ['user01', 'user02']],",
          "201:             'Sort by lastname asc' => ['lastname asc', ['user02', 'user01']],",
          "203:             'Sort by empty string' => ['', ['user01', 'user02']],",
          "204:             'Sort by invalid field' => ['invalid', ['user01', 'user02']],",
          "205:         ];",
          "206:     }",
          "216:     public function test_execute_with_sortorder(string $sortorder, array $expectedorder): void {",
          "217:         $this->resetAfterTest();",
          "218:         $this->setAdminUser();",
          "221:         $course = $this->getDataGenerator()->create_course();",
          "222:         $module = $this->getDataGenerator()->create_module('h5pactivity', ['course' => $course]);",
          "225:         $users['user01'] = $this->getDataGenerator()->create_and_enrol($course, 'student', [",
          "226:             'username' => 'user01',",
          "227:             'firstname' => 'Adam',",
          "228:             'lastname' => 'Zebra',",
          "229:         ]);",
          "230:         $users['user02'] = $this->getDataGenerator()->create_and_enrol($course, 'student', [",
          "231:             'username' => 'user02',",
          "232:             'firstname' => 'Zoe',",
          "233:             'lastname' => 'Apples',",
          "234:         ]);",
          "236:         $result = external_api::clean_returnvalue(",
          "237:             get_user_attempts::execute_returns(),",
          "238:             get_user_attempts::execute($module->id, $sortorder)",
          "239:         );",
          "242:         $expectedorderbyuserid = array_map(static function(string $username) use ($users): int {",
          "243:             return $users[$username]->id;",
          "244:         }, $expectedorder);",
          "247:         $this->assertEquals($expectedorderbyuserid, array_column($result['usersattempts'], 'userid'));",
          "248:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}