{
  "cve_id": "CVE-2021-40831",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been \u201coverridden\u201d. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to address this behavior. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.7.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.14.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.6.0 on macOS. Amazon Web Services AWS-C-IO 0.10.7 on macOS.",
  "repo": "aws/aws-iot-device-sdk-java-v2",
  "patch_hash": "46375e9b1bfb34109b9ff3b1eff9c770f9daa186",
  "patch_info": {
    "commit_hash": "46375e9b1bfb34109b9ff3b1eff9c770f9daa186",
    "repo": "aws/aws-iot-device-sdk-java-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-java-v2/commit/46375e9b1bfb34109b9ff3b1eff9c770f9daa186",
    "files": [
      "README.md",
      "android/app/build.gradle",
      "android/iotdevicesdk/build.gradle",
      "sdk/pom.xml"
    ],
    "message": "Fix CA override functions (#176)\n\nUpdate to aws-crt 0.14.0. This fixes the issue where \"overrideDefaultTrustStore\" functions did not actually override the system trust store on Linux and Apple platforms.",
    "before_after_code_files": [
      "android/app/build.gradle||android/app/build.gradle",
      "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
    ]
  },
  "patch_diff": {
    "android/app/build.gradle||android/app/build.gradle": [
      "File: android/app/build.gradle -> android/app/build.gradle",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: dependencies {",
      "51:     implementation fileTree(dir: 'libs', include: ['*.jar'])",
      "52:     implementation project(\":iotdevicesdk\")",
      "54:     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"",
      "55:     implementation 'androidx.appcompat:appcompat:1.1.0'",
      "56:     implementation 'androidx.core:core:1.2.0'",
      "",
      "[Removed Lines]",
      "53:     implementation 'software.amazon.awssdk.crt:android:0.11.5'",
      "",
      "[Added Lines]",
      "53:     implementation 'software.amazon.awssdk.crt:android:0.14.0'",
      "",
      "---------------"
    ],
    "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle": [
      "File: android/iotdevicesdk/build.gradle -> android/iotdevicesdk/build.gradle",
      "--- Hunk 1 ---",
      "[Context before]",
      "88: dependencies {",
      "89:     implementation fileTree(dir: 'libs', include: ['*.jar'])",
      "91:     implementation 'com.google.code.gson:gson:2.8.5'",
      "92:     implementation 'androidx.appcompat:appcompat:1.1.0'",
      "93:     testImplementation 'junit:junit:4.12'",
      "",
      "[Removed Lines]",
      "90:     implementation 'software.amazon.awssdk.crt:android:0.11.5'",
      "",
      "[Added Lines]",
      "90:     implementation 'software.amazon.awssdk.crt:android:0.14.0'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4b1bdc83dffdeaef6135aaa48753536d54e79795",
      "candidate_info": {
        "commit_hash": "4b1bdc83dffdeaef6135aaa48753536d54e79795",
        "repo": "aws/aws-iot-device-sdk-java-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-java-v2/commit/4b1bdc83dffdeaef6135aaa48753536d54e79795",
        "files": [
          "README.md",
          "android/iotdevicesdk/build.gradle",
          "sdk/pom.xml"
        ],
        "message": "Update to use latest CRT (#297)\n\n* Update to use latest CRT\n* Update to latest CRT release\n* Update SDK to use latest CRT release\n* Update README to include correct version",
        "before_after_code_files": [
          "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ],
          "candidate": [
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ]
        }
      },
      "candidate_diff": {
        "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle": [
          "File: android/iotdevicesdk/build.gradle -> android/iotdevicesdk/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: }",
          "93: dependencies {",
          "95:     implementation 'org.slf4j:slf4j-api:1.7.30'",
          "96:     implementation 'com.google.code.gson:gson:2.9.0'",
          "97:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "",
          "[Removed Lines]",
          "94:     api 'software.amazon.awssdk.crt:aws-crt-android:0.16.14'",
          "",
          "[Added Lines]",
          "94:     api 'software.amazon.awssdk.crt:aws-crt-android:0.17.1'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5337b101b7980122f135ed323632e5d59f52201",
      "candidate_info": {
        "commit_hash": "c5337b101b7980122f135ed323632e5d59f52201",
        "repo": "aws/aws-iot-device-sdk-java-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-java-v2/commit/c5337b101b7980122f135ed323632e5d59f52201",
        "files": [
          "README.md",
          "android/iotdevicesdk/build.gradle",
          "sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java",
          "sdk/pom.xml"
        ],
        "message": "add ability to read RpcServer port bound when port auto selected by OS  (#280)\n\nCo-authored-by: Vitaly Khalmansky <vkhalmansky@klika-tech.com>",
        "before_after_code_files": [
          "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle",
          "sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java||sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ],
          "candidate": [
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ]
        }
      },
      "candidate_diff": {
        "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle": [
          "File: android/iotdevicesdk/build.gradle -> android/iotdevicesdk/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: }",
          "93: dependencies {",
          "95:     implementation 'org.slf4j:slf4j-api:1.7.30'",
          "96:     implementation 'com.google.code.gson:gson:2.9.0'",
          "97:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "",
          "[Removed Lines]",
          "94:     api 'software.amazon.awssdk.crt:aws-crt-android:0.16.4'",
          "",
          "[Added Lines]",
          "94:     api 'software.amazon.awssdk.crt:aws-crt-android:0.16.12'",
          "",
          "---------------"
        ],
        "sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java||sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java": [
          "File: sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java -> sdk/greengrass/event-stream-rpc-server/src/main/java/software/amazon/awssdk/eventstreamrpc/RpcServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     private ServerTlsContext tlsContext;",
          "33:     private ServerListener listener;",
          "34:     private AtomicBoolean serverRunning;",
          "36:     public RpcServer(EventLoopGroup eventLoopGroup, SocketOptions socketOptions, TlsContextOptions tlsContextOptions, String hostname, int port, EventStreamRPCServiceHandler serviceHandler) {",
          "37:         this.eventLoopGroup = eventLoopGroup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     private int boundPort = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:                     LOGGER.info(\"Server connection closed code [\" + CRT.awsErrorString(errorCode) + \"]: \" + serverConnection.getResourceLogDescription());",
          "73:                 }",
          "74:             });",
          "75:         LOGGER.info(\"IpcServer started...\");",
          "76:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         boundPort = listener.getBoundPort();",
          "87:     public int getBoundPort() {",
          "88:         return boundPort;",
          "89:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d174606143148fb7aaa4658b6308f2d40ff011f1",
      "candidate_info": {
        "commit_hash": "d174606143148fb7aaa4658b6308f2d40ff011f1",
        "repo": "aws/aws-iot-device-sdk-java-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-java-v2/commit/d174606143148fb7aaa4658b6308f2d40ff011f1",
        "files": [
          "README.md",
          "android/app/src/main/assets/README.md",
          "android/iotdevicesdk/build.gradle",
          "codebuild/samples/customkeyops-linux.sh",
          "codebuild/samples/linux-smoke-tests.yml",
          "codebuild/samples/setup-linux.sh",
          "pom.xml",
          "samples/CustomKeyOpsPubSub/pom.xml",
          "samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java",
          "samples/README.md",
          "samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java",
          "sdk/pom.xml",
          "sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java"
        ],
        "message": "Custom TLS key operation support (#298)\n\nAdds custom key operation support to the Java V2 SDK.\n\nCommit log:\n* Enable custom TLS key operations\n* add missing arg to README\n* Refactor sample to use CommandLineUtils\n* Adjusted sample to work with latest changes to CRT for custom key operations\n* Added onCleanup callback to CustomKeyOpsPubSub sample\n* Minor sample change\n* Adjusted sample to not be stuck waiting for CRT resource, confirmed onCleanup function is being properly called\n* Remove testing code from sample and adjust README to mention Mutual TLS rather than MQTT\n* Fix the V2 sample and add the sample to codebuild CI\n* Update to latest CRT version\n* Fixed accidentally updating wrong part of pom.xml file\n* Modify linux-smoke-tests to run the custom key operations sample\n* Fixed typo in codebuild yaml...\n* Bump to trigger CI again\n\nCo-authored-by: Michael Graeb <graebm@amazon.com>",
        "before_after_code_files": [
          "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle",
          "codebuild/samples/customkeyops-linux.sh||codebuild/samples/customkeyops-linux.sh",
          "codebuild/samples/setup-linux.sh||codebuild/samples/setup-linux.sh",
          "samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java||samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java",
          "samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java||samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java",
          "sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java||sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ],
          "candidate": [
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ]
        }
      },
      "candidate_diff": {
        "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle": [
          "File: android/iotdevicesdk/build.gradle -> android/iotdevicesdk/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: }",
          "93: dependencies {",
          "95:     implementation 'org.slf4j:slf4j-api:1.7.30'",
          "96:     implementation 'com.google.code.gson:gson:2.9.0'",
          "97:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "",
          "[Removed Lines]",
          "94:     api 'software.amazon.awssdk.crt:aws-crt-android:0.17.1'",
          "",
          "[Added Lines]",
          "94:     api 'software.amazon.awssdk.crt:aws-crt-android:0.18.0'",
          "",
          "---------------"
        ],
        "codebuild/samples/customkeyops-linux.sh||codebuild/samples/customkeyops-linux.sh": [
          "File: codebuild/samples/customkeyops-linux.sh -> codebuild/samples/customkeyops-linux.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "3: set -e",
          "5: env",
          "7: pushd $CODEBUILD_SRC_DIR/samples/CustomKeyOpsPubSub",
          "9: ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"unit-test/endpoint\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')",
          "11: mvn compile",
          "13: echo \"Custom Key Ops test\"",
          "14: mvn exec:java -Dexec.mainClass=\"customkeyopspubsub.CustomKeyOpsPubSub\" -Daws.crt.ci=\"True\" -Dexec.arguments=\"--endpoint,$ENDPOINT,--key,/tmp/privatekey_p8.pem,--cert,/tmp/certificate.pem\"",
          "16: popd",
          "",
          "---------------"
        ],
        "codebuild/samples/setup-linux.sh||codebuild/samples/setup-linux.sh": [
          "File: codebuild/samples/setup-linux.sh -> codebuild/samples/setup-linux.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: cert=$(aws secretsmanager get-secret-value --secret-id \"unit-test/certificate\" --query \"SecretString\" | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$cert\" > /tmp/certificate.pem",
          "15: key=$(aws secretsmanager get-secret-value --secret-id \"unit-test/privatekey\" --query \"SecretString\" | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$key\" > /tmp/privatekey.pem",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: key_p8=$(aws secretsmanager get-secret-value --secret-id \"unit-test/privatekey-p8\" --query \"SecretString\" | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$key_p8\" > /tmp/privatekey_p8.pem",
          "",
          "---------------"
        ],
        "samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java||samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java": [
          "File: samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java -> samples/CustomKeyOpsPubSub/src/main/java/customkeyopspubsub/CustomKeyOpsPubSub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: package customkeyopspubsub;",
          "8: import software.amazon.awssdk.crt.CRT;",
          "9: import software.amazon.awssdk.crt.CrtResource;",
          "10: import software.amazon.awssdk.crt.CrtRuntimeException;",
          "11: import software.amazon.awssdk.crt.io.*;",
          "12: import software.amazon.awssdk.crt.mqtt.*;",
          "13: import software.amazon.awssdk.iot.AwsIotMqttConnectionBuilder;",
          "15: import software.amazon.awssdk.crt.Log;",
          "16: import software.amazon.awssdk.crt.Log.LogLevel;",
          "18: import java.io.BufferedReader;",
          "19: import java.io.ByteArrayOutputStream;",
          "20: import java.io.FileReader;",
          "21: import java.nio.charset.StandardCharsets;",
          "22: import java.security.KeyFactory;",
          "23: import java.security.PrivateKey;",
          "24: import java.security.Signature;",
          "25: import java.security.interfaces.RSAPrivateKey;",
          "26: import java.security.spec.PKCS8EncodedKeySpec;",
          "27: import java.util.Base64;",
          "28: import java.util.UUID;",
          "29: import java.util.concurrent.CompletableFuture;",
          "30: import java.util.concurrent.CountDownLatch;",
          "31: import java.util.concurrent.ExecutionException;",
          "33: import utils.commandlineutils.CommandLineUtils;",
          "35: public class CustomKeyOpsPubSub {",
          "40:     static String ciPropValue = System.getProperty(\"aws.crt.ci\");",
          "41:     static boolean isCI = ciPropValue != null && Boolean.valueOf(ciPropValue);",
          "43:     static CommandLineUtils cmdUtils;",
          "45:     static String topic = \"test/topic\";",
          "46:     static String message = \"Hello World!\";",
          "47:     static int    messagesToPublish = 10;",
          "48:     static String certPath;",
          "49:     static String keyPath;",
          "55:     static void onApplicationFailure(Throwable cause) {",
          "56:         if (isCI) {",
          "57:             throw new RuntimeException(\"CustomKeyOpsPubSub execution failure\", cause);",
          "58:         } else if (cause != null) {",
          "59:             System.out.println(\"Exception encountered: \" + cause.toString());",
          "60:         }",
          "61:     }",
          "63:     static class MyKeyOperationHandler implements TlsKeyOperationHandler {",
          "64:         RSAPrivateKey key;",
          "66:         MyKeyOperationHandler(String keyPath) {",
          "67:             key = loadPrivateKey(keyPath);",
          "68:         }",
          "70:         public void performOperation(TlsKeyOperation operation) {",
          "71:             try {",
          "72:                 System.out.println(\"MyKeyOperationHandler.performOperation\" + operation.getType().name());",
          "74:                 if (operation.getType() != TlsKeyOperation.Type.SIGN) {",
          "75:                     throw new RuntimeException(\"Simple sample only handles SIGN operations\");",
          "76:                 }",
          "78:                 if (operation.getSignatureAlgorithm() != TlsSignatureAlgorithm.RSA) {",
          "79:                     throw new RuntimeException(\"Simple sample only handles RSA keys\");",
          "80:                 }",
          "82:                 if (operation.getDigestAlgorithm() != TlsHashAlgorithm.SHA256) {",
          "83:                     throw new RuntimeException(\"Simple sample only handles SHA256 digests\");",
          "84:                 }",
          "89:                 byte[] digest = operation.getInput();",
          "93:                 byte[] sha256DigestAlgorithm = { 0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, (byte)0x86, 0x48, 0x01,",
          "94:                         0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20 };",
          "96:                 ByteArrayOutputStream digestInfoStream = new ByteArrayOutputStream();",
          "97:                 digestInfoStream.write(sha256DigestAlgorithm);",
          "98:                 digestInfoStream.write(digest);",
          "99:                 byte[] digestInfo = digestInfoStream.toByteArray();",
          "102:                 Signature rsaSign = Signature.getInstance(\"NONEwithRSA\");",
          "103:                 rsaSign.initSign(key);",
          "104:                 rsaSign.update(digestInfo);",
          "105:                 byte[] signatureBytes = rsaSign.sign();",
          "107:                 operation.complete(signatureBytes);",
          "109:             } catch (Exception ex) {",
          "110:                 System.out.println(\"Error during key operation:\" + ex);",
          "111:                 operation.completeExceptionally(ex);",
          "112:             }",
          "113:         }",
          "115:         RSAPrivateKey loadPrivateKey(String filepath) {",
          "124:             try {",
          "126:                 StringBuilder pemBase64 = new StringBuilder();",
          "127:                 try (BufferedReader reader = new BufferedReader(new FileReader(filepath))) {",
          "128:                     String line;",
          "129:                     while ((line = reader.readLine()) != null) {",
          "131:                         if (line.startsWith(\"---\")) {",
          "132:                             if (line.contains(\"RSA\")) {",
          "133:                                 throw new RuntimeException(\"private key must be converted from PKCS#1 to PKCS#8\");",
          "134:                             }",
          "135:                             continue;",
          "136:                         }",
          "137:                         pemBase64.append(line);",
          "138:                     }",
          "139:                 }",
          "141:                 String pemBase64String = pemBase64.toString();",
          "142:                 byte[] der = Base64.getDecoder().decode(pemBase64String);",
          "145:                 PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(der);",
          "146:                 KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");",
          "147:                 PrivateKey privateKey = keyFactory.generatePrivate(keySpec);",
          "148:                 return (RSAPrivateKey)privateKey;",
          "150:             } catch (Exception ex) {",
          "151:                 throw new RuntimeException(ex);",
          "152:             }",
          "153:         }",
          "154:     }",
          "156:     public static void main(String[] args) {",
          "158:         cmdUtils = new CommandLineUtils();",
          "159:         cmdUtils.registerProgramName(\"CustomKeyOpsPubSub\");",
          "160:         cmdUtils.addCommonMQTTCommands();",
          "161:         cmdUtils.addCommonTopicMessageCommands();",
          "162:         cmdUtils.registerCommand(\"key\", \"<path>\", \"Path to your PKCS#8 key in PEM format.\");",
          "163:         cmdUtils.registerCommand(\"cert\", \"<path>\", \"Path to your client certificate in PEM format.\");",
          "164:         cmdUtils.registerCommand(\"client_id\", \"<int>\", \"Client id to use (optional, default='test-*').\");",
          "165:         cmdUtils.registerCommand(\"port\", \"<int>\", \"Port to connect to on the endpoint (optional, default='8883').\");",
          "166:         cmdUtils.registerCommand(\"count\", \"<int>\", \"Number of messages to publish (optional, default='10').\");",
          "167:         cmdUtils.sendArguments(args);",
          "169:         keyPath = cmdUtils.getCommandRequired(\"key\", \"\");",
          "170:         certPath = cmdUtils.getCommandRequired(\"cert\", \"\");",
          "172:         topic = cmdUtils.getCommandOrDefault(\"topic\", topic);",
          "173:         message = cmdUtils.getCommandOrDefault(\"message\", message);",
          "174:         messagesToPublish = Integer.parseInt(cmdUtils.getCommandOrDefault(\"count\", String.valueOf(messagesToPublish)));",
          "176:         MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {",
          "177:             @Override",
          "178:             public void onConnectionInterrupted(int errorCode) {",
          "179:                 if (errorCode != 0) {",
          "180:                     System.out.println(\"Connection interrupted: \" + errorCode + \": \" + CRT.awsErrorString(errorCode));",
          "181:                 }",
          "182:             }",
          "184:             @Override",
          "185:             public void onConnectionResumed(boolean sessionPresent) {",
          "186:                 System.out.println(\"Connection resumed: \" + (sessionPresent ? \"existing session\" : \"clean session\"));",
          "187:             }",
          "188:         };",
          "190:         MyKeyOperationHandler myKeyOperationHandler = new MyKeyOperationHandler(keyPath);",
          "191:         TlsContextCustomKeyOperationOptions keyOperationOptions = new TlsContextCustomKeyOperationOptions(myKeyOperationHandler)",
          "192:                 .withCertificateFilePath(certPath);",
          "194:         try {",
          "195:             MqttClientConnection connection = cmdUtils.buildCustomKeyOperationConnection(callbacks, keyOperationOptions);",
          "196:             if (connection == null)",
          "197:             {",
          "198:                 onApplicationFailure(new RuntimeException(\"MQTT connection creation failed!\"));",
          "199:             }",
          "201:             CompletableFuture<Boolean> connected = connection.connect();",
          "202:             try {",
          "203:                 boolean sessionPresent = connected.get();",
          "204:                 System.out.println(\"Connected to \" + (!sessionPresent ? \"new\" : \"existing\") + \" session!\");",
          "205:             } catch (Exception ex) {",
          "206:                 throw new RuntimeException(\"Exception occurred during connect\", ex);",
          "207:             }",
          "209:             CountDownLatch countDownLatch = new CountDownLatch(messagesToPublish);",
          "211:             CompletableFuture<Integer> subscribed = connection.subscribe(topic, QualityOfService.AT_LEAST_ONCE, (message) -> {",
          "212:                 String payload = new String(message.getPayload(), StandardCharsets.UTF_8);",
          "213:                 System.out.println(\"MESSAGE: \" + payload);",
          "214:                 countDownLatch.countDown();",
          "215:             });",
          "217:             subscribed.get();",
          "219:             int count = 0;",
          "220:             while (count++ < messagesToPublish) {",
          "221:                 CompletableFuture<Integer> published = connection.publish(new MqttMessage(topic, message.getBytes(), QualityOfService.AT_LEAST_ONCE, false));",
          "222:                 published.get();",
          "223:                 Thread.sleep(1000);",
          "224:             }",
          "226:             countDownLatch.await();",
          "228:             CompletableFuture<Void> disconnected = connection.disconnect();",
          "229:             disconnected.get();",
          "231:             connection.close();",
          "233:         } catch (CrtRuntimeException | InterruptedException | ExecutionException ex) {",
          "234:             onApplicationFailure(ex);",
          "235:         }",
          "237:         CrtResource.waitForNoResources();",
          "238:         System.out.println(\"Complete!\");",
          "239:     }",
          "240: }",
          "",
          "---------------"
        ],
        "samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java||samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java": [
          "File: samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java -> samples/Utils/CommandLineUtils/utils/commandlineutils/CommandLineUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         registerCommand(m_cmd_topic, \"<str>\", \"Topic to publish, subscribe to. (optional, default='test/topic')\");",
          "159:     }",
          "161:     public MqttClientConnection buildPKCS11MQTTConnection(MqttClientConnectionEvents callbacks)",
          "162:     {",
          "163:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     public MqttClientConnection buildCustomKeyOperationConnection(",
          "162:         MqttClientConnectionEvents callbacks, TlsContextCustomKeyOperationOptions customKeyOperationOptions)",
          "163:     {",
          "164:         try {",
          "165:             AwsIotMqttConnectionBuilder builder = AwsIotMqttConnectionBuilder.newMtlsCustomKeyOperationsBuilder(",
          "166:                 customKeyOperationOptions);",
          "167:             buildConnectionSetupCAFileDefaults(builder);",
          "168:             buildConnectionSetupConnectionDefaults(builder, callbacks);",
          "169:             buildConnectionSetupProxyDefaults(builder);",
          "171:             MqttClientConnection conn = builder.build();",
          "172:             builder.close();",
          "173:             return conn;",
          "175:         } catch (CrtRuntimeException ex) {",
          "176:             return null;",
          "177:         }",
          "178:     }",
          "",
          "---------------"
        ],
        "sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java||sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java": [
          "File: sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java -> sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import software.amazon.awssdk.crt.io.ClientBootstrap;",
          "22: import software.amazon.awssdk.crt.io.ClientTlsContext;",
          "23: import software.amazon.awssdk.crt.io.SocketOptions;",
          "24: import software.amazon.awssdk.crt.io.TlsContextOptions;",
          "25: import software.amazon.awssdk.crt.io.TlsContextPkcs11Options;",
          "26: import software.amazon.awssdk.crt.mqtt.MqttClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import software.amazon.awssdk.crt.io.TlsContextCustomKeyOperationOptions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     public static AwsIotMqttConnectionBuilder newMtlsCustomKeyOperationsBuilder(TlsContextCustomKeyOperationOptions operationOptions) {",
          "156:         try (TlsContextOptions tlsContextOptions = TlsContextOptions.createWithMtlsCustomKeyOperations(operationOptions)) {",
          "157:             return new AwsIotMqttConnectionBuilder(tlsContextOptions);",
          "158:         }",
          "159:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eec30febcfce2968e47b7e6748704cf39fde3e7",
      "candidate_info": {
        "commit_hash": "2eec30febcfce2968e47b7e6748704cf39fde3e7",
        "repo": "aws/aws-iot-device-sdk-java-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-java-v2/commit/2eec30febcfce2968e47b7e6748704cf39fde3e7",
        "files": [
          "android/app/build.gradle",
          "android/iotdevicesdk/build.gradle",
          "sdk/pom.xml"
        ],
        "message": "Update crt to 0.8.4 (#95)\n\nupdate to 0.8.4\n\nCo-authored-by: Dengke Tang <dengket@amazon.com>",
        "before_after_code_files": [
          "android/app/build.gradle||android/app/build.gradle",
          "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "android/app/build.gradle||android/app/build.gradle",
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ],
          "candidate": [
            "android/app/build.gradle||android/app/build.gradle",
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ]
        }
      },
      "candidate_diff": {
        "android/app/build.gradle||android/app/build.gradle": [
          "File: android/app/build.gradle -> android/app/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: dependencies {",
          "51:     implementation fileTree(dir: 'libs', include: ['*.jar'])",
          "52:     implementation project(\":iotdevicesdk\")",
          "54:     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"",
          "55:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "56:     implementation 'androidx.core:core:1.2.0'",
          "",
          "[Removed Lines]",
          "53:     implementation 'software.amazon.awssdk.crt:android:0.6.6'",
          "",
          "[Added Lines]",
          "53:     implementation 'software.amazon.awssdk.crt:android:0.8.4'",
          "",
          "---------------"
        ],
        "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle": [
          "File: android/iotdevicesdk/build.gradle -> android/iotdevicesdk/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: dependencies {",
          "89:     implementation fileTree(dir: 'libs', include: ['*.jar'])",
          "91:     implementation 'com.google.code.gson:gson:2.8.5'",
          "92:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "93:     testImplementation 'junit:junit:4.12'",
          "",
          "[Removed Lines]",
          "90:     implementation 'software.amazon.awssdk.crt:android:0.6.6'",
          "",
          "[Added Lines]",
          "90:     implementation 'software.amazon.awssdk.crt:android:0.8.4'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9ab56e6b731dc8b8cdf4958f7513f44f5533d70",
      "candidate_info": {
        "commit_hash": "a9ab56e6b731dc8b8cdf4958f7513f44f5533d70",
        "repo": "aws/aws-iot-device-sdk-java-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-java-v2/commit/a9ab56e6b731dc8b8cdf4958f7513f44f5533d70",
        "files": [
          "README.md",
          "android/app/build.gradle",
          "android/iotdevicesdk/build.gradle",
          "samples/BasicPubSub/src/main/java/pubsub/PubSub.java",
          "samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java",
          "samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java",
          "samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java",
          "sdk/pom.xml",
          "sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java"
        ],
        "message": "MqttMessage now contains qos, retain, dup (#132)\n\n- MqttMessage now contains `qos` and `retain` members. Stop using deprecated methods which passed these as separate params.\n\n- use aws-crt-java v0.10.8",
        "before_after_code_files": [
          "android/app/build.gradle||android/app/build.gradle",
          "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle",
          "samples/BasicPubSub/src/main/java/pubsub/PubSub.java||samples/BasicPubSub/src/main/java/pubsub/PubSub.java",
          "samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java||samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java",
          "samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java||samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java",
          "samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java||samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java",
          "sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java||sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "android/app/build.gradle||android/app/build.gradle",
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ],
          "candidate": [
            "android/app/build.gradle||android/app/build.gradle",
            "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle"
          ]
        }
      },
      "candidate_diff": {
        "android/app/build.gradle||android/app/build.gradle": [
          "File: android/app/build.gradle -> android/app/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: dependencies {",
          "51:     implementation fileTree(dir: 'libs', include: ['*.jar'])",
          "52:     implementation project(\":iotdevicesdk\")",
          "54:     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"",
          "55:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "56:     implementation 'androidx.core:core:1.2.0'",
          "",
          "[Removed Lines]",
          "53:     implementation 'software.amazon.awssdk.crt:android:0.9.2'",
          "",
          "[Added Lines]",
          "53:     implementation 'software.amazon.awssdk.crt:android:0.10.8'",
          "",
          "---------------"
        ],
        "android/iotdevicesdk/build.gradle||android/iotdevicesdk/build.gradle": [
          "File: android/iotdevicesdk/build.gradle -> android/iotdevicesdk/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: dependencies {",
          "89:     implementation fileTree(dir: 'libs', include: ['*.jar'])",
          "91:     implementation 'com.google.code.gson:gson:2.8.5'",
          "92:     implementation 'androidx.appcompat:appcompat:1.1.0'",
          "93:     testImplementation 'junit:junit:4.12'",
          "",
          "[Removed Lines]",
          "90:     implementation 'software.amazon.awssdk.crt:android:0.9.2'",
          "",
          "[Added Lines]",
          "90:     implementation 'software.amazon.awssdk.crt:android:0.10.8'",
          "",
          "---------------"
        ],
        "samples/BasicPubSub/src/main/java/pubsub/PubSub.java||samples/BasicPubSub/src/main/java/pubsub/PubSub.java": [
          "File: samples/BasicPubSub/src/main/java/pubsub/PubSub.java -> samples/BasicPubSub/src/main/java/pubsub/PubSub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:                 int count = 0;",
          "307:                 while (count++ < messagesToPublish) {",
          "309:                     published.get();",
          "310:                     Thread.sleep(1000);",
          "311:                 }",
          "",
          "[Removed Lines]",
          "308:                     CompletableFuture<Integer> published = connection.publish(new MqttMessage(topic, message.getBytes()), QualityOfService.AT_LEAST_ONCE, false);",
          "",
          "[Added Lines]",
          "308:                     CompletableFuture<Integer> published = connection.publish(new MqttMessage(topic, message.getBytes(), QualityOfService.AT_LEAST_ONCE, false));",
          "",
          "---------------"
        ],
        "samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java||samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java": [
          "File: samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java -> samples/Greengrass/src/main/java/greengrass/BasicDiscovery.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:                     if (\"publish\".equals(mode) || \"both\".equals(mode)) {",
          "195:                         final CompletableFuture<Integer> publishResult = connection.publish(new MqttMessage(topic,",
          "197:                         Integer result = publishResult.get();",
          "198:                     }",
          "199:                 }",
          "",
          "[Removed Lines]",
          "196:                                 input.getBytes(StandardCharsets.UTF_8)), QualityOfService.AT_MOST_ONCE, false);",
          "",
          "[Added Lines]",
          "196:                                 input.getBytes(StandardCharsets.UTF_8), QualityOfService.AT_MOST_ONCE, false));",
          "",
          "---------------"
        ],
        "samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java||samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java": [
          "File: samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java -> samples/PubSubStress/src/main/java/pubsubstress/PubSubStress.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:                         String publishTopic = validTopics.get(Math.abs(rng.nextInt()) % validTopics.size());",
          "374:                         try {",
          "376:                         } catch (Exception e) {",
          "377:                             System.out.println(String.format(\"Publishing Exception: %s\", e.getMessage()));",
          "378:                         }",
          "",
          "[Removed Lines]",
          "375:                             publishFutures.add(connection.publish(new MqttMessage(publishTopic, messageContent.getBytes()), QualityOfService.AT_LEAST_ONCE, false));",
          "",
          "[Added Lines]",
          "375:                             publishFutures.add(connection.publish(new MqttMessage(publishTopic, messageContent.getBytes(), QualityOfService.AT_LEAST_ONCE, false)));",
          "",
          "---------------"
        ],
        "samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java||samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java": [
          "File: samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java -> samples/RawPubSub/src/main/java/rawpubsub/RawPubSub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:                     int count = 0;",
          "232:                     while (count++ < messagesToPublish) {",
          "234:                         published.get();",
          "235:                         Thread.sleep(1000);",
          "236:                     }",
          "",
          "[Removed Lines]",
          "233:                         CompletableFuture<Integer> published = connection.publish(new MqttMessage(topic, message.getBytes()), QualityOfService.AT_LEAST_ONCE, false);",
          "",
          "[Added Lines]",
          "233:                         CompletableFuture<Integer> published = connection.publish(new MqttMessage(topic, message.getBytes(), QualityOfService.AT_LEAST_ONCE, false));",
          "",
          "---------------"
        ],
        "sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java||sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java": [
          "File: sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java -> sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:         this.config.setWillMessage(message);",
          "296:         return this;",
          "297:     }",
          "",
          "[Removed Lines]",
          "291:     public AwsIotMqttConnectionBuilder withWill(MqttMessage message, QualityOfService qos, boolean retain) throws MqttException {",
          "293:         this.config.setWillQos(qos);",
          "294:         this.config.setWillRetain(retain);",
          "",
          "[Added Lines]",
          "290:     public AwsIotMqttConnectionBuilder withWill(MqttMessage message) throws MqttException {",
          "299:     @Deprecated",
          "300:     public AwsIotMqttConnectionBuilder withWill(MqttMessage message, QualityOfService qos, boolean retain) throws MqttException {",
          "301:         return withWill(new MqttMessage(message.getTopic(), message.getPayload(), qos, retain));",
          "302:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}