{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cae21ed69763612560e8a3a280b250db874c93dd",
      "candidate_info": {
        "commit_hash": "cae21ed69763612560e8a3a280b250db874c93dd",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cae21ed69763612560e8a3a280b250db874c93dd",
        "files": [
          "ambari-web/app/controllers/main/service/add_controller.js"
        ],
        "message": "AMBARI-25052 Unable to Add Services Due to toMapByProperty()",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/add_controller.js||ambari-web/app/controllers/main/service/add_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/add_controller.js||ambari-web/app/controllers/main/service/add_controller.js": [
          "File: ambari-web/app/controllers/main/service/add_controller.js -> ambari-web/app/controllers/main/service/add_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:   saveMasterComponentHosts: function (stepController) {",
          "237:     var masterComponentHosts = [];",
          "242:       masterComponentHosts.push({",
          "243:         display_name: _component.display_name,",
          "244:         component: _component.component_name,",
          "",
          "[Removed Lines]",
          "236:     var obj = stepController.get('selectedServicesMasters');",
          "238:     var installedComponents = App.HostComponent.find();",
          "240:     obj.forEach(function (_component) {",
          "241:       var installedComponent = installedComponents.findProperty('componentName', _component.component_name);",
          "",
          "[Added Lines]",
          "237:     var installedComponentsMap = App.HostComponent.find().toArray().toMapByProperty('componentName');",
          "239:     stepController.get('selectedServicesMasters').forEach(function (_component) {",
          "240:       var installedComponent = installedComponentsMap[_component.component_name];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:     this.setDBProperty('masterComponentHosts', masterComponentHosts);",
          "253:     this.set('content.masterComponentHosts', masterComponentHosts);",
          "256:     this.get('isStepDisabled').findProperty('step', 2).set('value', this.get('content.skipMasterStep'));",
          "257:   },",
          "",
          "[Removed Lines]",
          "255:     this.set('content.skipMasterStep', this.get('content.masterComponentHosts').everyProperty('isInstalled', true));",
          "",
          "[Added Lines]",
          "254:     this.set('content.skipMasterStep', masterComponentHosts.everyProperty('isInstalled', true));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d6676581379198e4c17f11afd2c344a73dfc1a9",
      "candidate_info": {
        "commit_hash": "3d6676581379198e4c17f11afd2c344a73dfc1a9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3d6676581379198e4c17f11afd2c344a73dfc1a9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java"
        ],
        "message": "AMBARI-25325 : Updating Transactional method as public, log Transaction failure (#3033)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java||ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java||ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java -> ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:   @Transactional",
          "194:     if (requestId == null) {",
          "195:       return;",
          "196:     }",
          "",
          "[Removed Lines]",
          "193:   void retryHoldingCommandsInRequest(Long requestId) {",
          "",
          "[Added Lines]",
          "193:   public void retryHoldingCommandsInRequest(Long requestId) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:   private void retryHostRoleCommand(HostRoleCommandEntity hrc) {",
          "305:   }",
          "306: }",
          "",
          "[Removed Lines]",
          "297:     hrc.setStatus(HostRoleStatus.PENDING);",
          "298:     hrc.setStartTime(-1L);",
          "300:     hrc.setEndTime(-1L);",
          "301:     hrc.setLastAttemptTime(-1L);",
          "304:     m_hostRoleCommandDAO.merge(hrc);",
          "",
          "[Added Lines]",
          "297:     try {",
          "298:       hrc.setStatus(HostRoleStatus.PENDING);",
          "299:       hrc.setStartTime(-1L);",
          "301:       hrc.setEndTime(-1L);",
          "302:       hrc.setLastAttemptTime(-1L);",
          "304:       m_hostRoleCommandDAO.merge(hrc);",
          "305:     } catch (Exception e) {",
          "306:       LOG.error(\"Error while updating hostRoleCommand. Entity: {}\", hrc, e);",
          "307:       throw e;",
          "308:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d935c5b5d5894ace8d97fa2a3965181e71dcc6c",
      "candidate_info": {
        "commit_hash": "3d935c5b5d5894ace8d97fa2a3965181e71dcc6c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3d935c5b5d5894ace8d97fa2a3965181e71dcc6c",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java"
        ],
        "message": "AMBARI-24267. No alerts even if Namenode / Datanodes down (amagyar) (#1723)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:             if (!oldDefinition.deeplyEquals(newDefinition)) {",
          "100:               changed = true;",
          "101:             }",
          "103:           }",
          "104:         }",
          "105:         if (update.getStaleIntervalMultiplier() != null",
          "106:             && !update.getStaleIntervalMultiplier().equals(staleIntervalMultiplier)) {",
          "107:           mergedStaleIntervalMultiplier = update.getStaleIntervalMultiplier();",
          "",
          "[Removed Lines]",
          "102:             mergedDefinitions.put(definitionId, oldDefinition);",
          "",
          "[Added Lines]",
          "102:             mergedDefinitions.put(definitionId, newDefinition);",
          "105:         if (addNewAlertDefinitions(update, mergedDefinitions)) {",
          "106:           changed = true;",
          "107:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     return mergedCluster;",
          "134:   }",
          "136:   public static AlertCluster emptyAlertCluster() {",
          "137:     return new AlertCluster();",
          "138:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:   private boolean addNewAlertDefinitions(AlertCluster update, Map<Long, AlertDefinition> mergedDefinitions) {",
          "144:     boolean hasNew = false;",
          "145:     for (Map.Entry<Long, AlertDefinition> each : update.alertDefinitions.entrySet()) {",
          "146:       if (!mergedDefinitions.containsKey(each.getKey())) {",
          "147:         mergedDefinitions.put(each.getKey(), each.getValue());",
          "148:         hasNew = true;",
          "149:       }",
          "150:     }",
          "151:     return hasNew;",
          "152:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: package org.apache.ambari.server.agent.stomp.dto;",
          "23: import static org.hamcrest.CoreMatchers.nullValue;",
          "24: import static org.hamcrest.collection.IsCollectionWithSize.hasSize;",
          "25: import static org.hamcrest.core.Is.is;",
          "26: import static org.junit.Assert.assertNotNull;",
          "27: import static org.junit.Assert.assertThat;",
          "28: import static org.junit.Assert.assertTrue;",
          "30: import java.util.HashMap;",
          "31: import java.util.Map;",
          "33: import org.apache.ambari.server.events.AlertDefinitionEventType;",
          "34: import org.apache.ambari.server.state.alert.AlertDefinition;",
          "35: import org.junit.Test;",
          "37: public class AlertClusterTest {",
          "38:   private static final int DEFAULT_INTERVAL = 1;",
          "39:   private static final int CHANGED_INTERVAL = 999;",
          "40:   private AlertCluster alertCluster;",
          "42:   @Test",
          "43:   public void testAddingNewAlertDefWithoutChangingExisting() throws Exception {",
          "45:     AlertDefinition existing1 = anAlertDefinition(1l);",
          "46:     AlertDefinition existing2 = anAlertDefinition(2l);",
          "47:     alertCluster = newAlertCluster(existing1, existing2);",
          "49:     AlertDefinition newDef = anAlertDefinition(3l);",
          "50:     AlertCluster result = update(alertCluster, newDef);",
          "52:     assertHasAlerts(result, existing1, existing2, newDef);",
          "53:   }",
          "55:   @Test",
          "56:   public void testChangingContentOfExistingAlertDef() throws Exception {",
          "58:     AlertDefinition existing1 = anAlertDefinition(1l);",
          "59:     AlertDefinition existing2 = anAlertDefinition(2l);",
          "60:     alertCluster = newAlertCluster(existing1, existing2);",
          "62:     AlertDefinition changed = anAlertDefinition(2, CHANGED_INTERVAL);",
          "63:     AlertCluster result = update(alertCluster, changed);",
          "65:     assertHasAlerts(result, existing1, changed);",
          "66:   }",
          "68:   @Test",
          "69:   public void testAddingNewAlertDefAndChangingExisting() throws Exception {",
          "71:     AlertDefinition existing1 = anAlertDefinition(1l);",
          "72:     AlertDefinition existing2 = anAlertDefinition(2l);",
          "73:     alertCluster = newAlertCluster(existing1, existing2);",
          "75:     AlertDefinition newDef = anAlertDefinition(3l);",
          "76:     AlertDefinition changed = anAlertDefinition(2, 999);",
          "77:     AlertCluster result = update(alertCluster, newDef, changed);",
          "79:     assertHasAlerts(result, existing1, changed, newDef);",
          "80:   }",
          "82:   @Test",
          "83:   public void testNoChange() throws Exception {",
          "85:     AlertDefinition existing = anAlertDefinition(1l);",
          "86:     alertCluster = newAlertCluster(existing);",
          "88:     AlertCluster result = update(alertCluster, existing);",
          "90:     assertThat(result, is(nullValue()));",
          "91:   }",
          "93:   private void assertHasAlerts(AlertCluster result, AlertDefinition... expectedItems) {",
          "94:     assertNotNull(result);",
          "95:     assertThat(result.getAlertDefinitions(), hasSize(expectedItems.length));",
          "96:     for (AlertDefinition expected : expectedItems) {",
          "97:       assertTrue(result.getAlertDefinitions() + \" should have contained: \" + expected,",
          "98:         result.getAlertDefinitions().stream().anyMatch(each -> each.deeplyEquals(expected)));",
          "99:     }",
          "100:   }",
          "102:   private AlertDefinition anAlertDefinition(long id) {",
          "103:     return anAlertDefinition(id, DEFAULT_INTERVAL);",
          "104:   }",
          "106:   private AlertDefinition anAlertDefinition(long id, int interval) {",
          "107:     AlertDefinition alertDefinition = new AlertDefinition();",
          "108:     alertDefinition.setDefinitionId(id);",
          "109:     alertDefinition.setName(Long.toString(id));",
          "110:     alertDefinition.setInterval(interval);",
          "111:     return alertDefinition;",
          "112:   }",
          "114:   private AlertCluster newAlertCluster(AlertDefinition... existingDefinitions) {",
          "115:     return new AlertCluster(asMap(existingDefinitions), \"host\");",
          "116:   }",
          "118:   private Map<Long,AlertDefinition> asMap(AlertDefinition... alertDefinition) {",
          "119:     Map<Long, AlertDefinition> alerts = new HashMap<>();",
          "120:     for (AlertDefinition each : alertDefinition) {",
          "121:       alerts.put(each.getDefinitionId(), each);",
          "122:     }",
          "123:     return alerts;",
          "124:   }",
          "126:   private AlertCluster update(AlertCluster alertCluster, AlertDefinition... alertDefinitions) {",
          "127:     return alertCluster.handleUpdate(AlertDefinitionEventType.UPDATE, newAlertCluster(alertDefinitions));",
          "128:   }",
          "129: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cacdbd06b68990789bd0127e6bad132022078a63",
      "candidate_info": {
        "commit_hash": "cacdbd06b68990789bd0127e6bad132022078a63",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cacdbd06b68990789bd0127e6bad132022078a63",
        "files": [
          "ambari-web/app/views/main/admin/stack_upgrade/versions_view.js"
        ],
        "message": "AMBARI-24505 host component out of sync error message on version screen",
        "before_after_code_files": [
          "ambari-web/app/views/main/admin/stack_upgrade/versions_view.js||ambari-web/app/views/main/admin/stack_upgrade/versions_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/views/main/admin/stack_upgrade/versions_view.js||ambari-web/app/views/main/admin/stack_upgrade/versions_view.js": [
          "File: ambari-web/app/views/main/admin/stack_upgrade/versions_view.js -> ambari-web/app/views/main/admin/stack_upgrade/versions_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   stackVersionError: function() {",
          "148:     if (errorStack) {",
          "149:       return Em.Object.create({",
          "150:         repoId: errorStack.get('id'),",
          "",
          "[Removed Lines]",
          "147:     const errorStack = this.get('repoVersions').filterProperty('status', 'OUT_OF_SYNC').findProperty('isStandard');",
          "",
          "[Added Lines]",
          "147:     const errorStack = this.get('repoVersions')",
          "148:     .filterProperty('isVisible')",
          "149:     .filterProperty('status', 'OUT_OF_SYNC')",
          "150:     .findProperty('isStandard');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e9e57c115c4e16d6556028940297ef792bbb9a8",
      "candidate_info": {
        "commit_hash": "0e9e57c115c4e16d6556028940297ef792bbb9a8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0e9e57c115c4e16d6556028940297ef792bbb9a8",
        "files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js"
        ],
        "message": "AMBARI-25436. Unable to uncheck 'hidden' checkbox in ambari stackVersions page",
        "before_after_code_files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsListCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:     };",
          "166:     $scope.isHideCheckBoxEnabled = function ( repo ) {",
          "168:     }",
          "169:   }]);",
          "",
          "[Removed Lines]",
          "167:       return !repo.isProccessing && ( (!repo.cluster && repo.status !== 'OUT_OF_SYNC') || repo.isPatch && ( repo.status === 'INSTALLED' || repo.status === 'INSTALL_FAILED') );",
          "",
          "[Added Lines]",
          "167:       return !repo.isProccessing && ( (!repo.cluster && repo.status !== 'OUT_OF_SYNC') || repo.isPatch && ( repo.status === 'INSTALLED' || repo.status === 'INSTALL_FAILED' ) || repo.hidden);",
          "",
          "---------------"
        ]
      }
    }
  ]
}