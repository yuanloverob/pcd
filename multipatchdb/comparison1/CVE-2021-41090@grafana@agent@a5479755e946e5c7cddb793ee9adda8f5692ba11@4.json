{
  "cve_id": "CVE-2021-41090",
  "cve_desc": "Grafana Agent is a telemetry collector for sending metrics, logs, and trace data to the opinionated Grafana observability stack. Prior to versions 0.20.1 and 0.21.2, inline secrets defined within a metrics instance config are exposed in plaintext over two endpoints: metrics instance configs defined in the base YAML file are exposed at `/-/config` and metrics instance configs defined for the scraping service are exposed at `/agent/api/v1/configs/:key`. Inline secrets will be exposed to anyone being able to reach these endpoints. If HTTPS with client authentication is not configured, these endpoints are accessible to unauthenticated users. Secrets found in these sections are used for delivering metrics to a Prometheus Remote Write system, authenticating against a system for discovering Prometheus targets, and authenticating against a system for collecting metrics. This does not apply for non-inlined secrets, such as `*_file` based secrets. This issue is patched in Grafana Agent versions 0.20.1 and 0.21.2. A few workarounds are available. Users who cannot upgrade should use non-inline secrets where possible. Users may also desire to restrict API access to Grafana Agent with some combination of restricting the network interfaces Grafana Agent listens on through `http_listen_address` in the `server` block, configuring Grafana Agent to use HTTPS with client authentication, and/or using firewall rules to restrict external access to Grafana Agent's API.",
  "repo": "grafana/agent",
  "patch_hash": "a5479755e946e5c7cddb793ee9adda8f5692ba11",
  "patch_info": {
    "commit_hash": "a5479755e946e5c7cddb793ee9adda8f5692ba11",
    "repo": "grafana/agent",
    "commit_url": "https://github.com/grafana/agent/commit/a5479755e946e5c7cddb793ee9adda8f5692ba11",
    "files": [
      "pkg/metrics/instance/configstore/api.go",
      "pkg/metrics/instance/configstore/api_test.go",
      "pkg/metrics/instance/instance.go",
      "pkg/metrics/instance/marshal_test.go"
    ],
    "message": "Merge pull request #17 from grafana/marshal-instance-config-secrets-0.21.2\n\n[v0.21.2] Scrub secrets when marshaling instance configs",
    "before_after_code_files": [
      "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
      "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
      "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
      "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
    ]
  },
  "patch_diff": {
    "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go": [
      "File: pkg/metrics/instance/configstore/api.go -> pkg/metrics/instance/configstore/api.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:  case err != nil:",
      "127:   api.writeError(rw, http.StatusInternalServerError, err)",
      "128:  case err == nil:",
      "130:   if err != nil {",
      "131:    api.writeError(rw, http.StatusInternalServerError, fmt.Errorf(\"could not marshal config for response: %w\", err))",
      "132:    return",
      "",
      "[Removed Lines]",
      "129:   bb, err := instance.MarshalConfig(&cfg, false)",
      "",
      "[Added Lines]",
      "129:   bb, err := instance.MarshalConfig(&cfg, true)",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go": [
      "File: pkg/metrics/instance/configstore/api_test.go -> pkg/metrics/instance/configstore/api_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"bytes\"",
      "5:  \"context\"",
      "6:  \"fmt\"",
      "7:  \"io/ioutil\"",
      "8:  \"net/http\"",
      "9:  \"net/http/httptest\"",
      "10:  \"testing\"",
      "11:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  \"encoding/json\"",
      "8:  \"io\"",
      "12:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:  })",
      "129: }",
      "131: func TestServer_PutConfiguration(t *testing.T) {",
      "132:  var s Mock",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134: func TestAPI_GetConfiguration_ScrubSecrets(t *testing.T) {",
      "135:  rawConfig := `name: exists",
      "136: scrape_configs:",
      "137: - job_name: local_scrape",
      "138:   follow_redirects: true",
      "139:   honor_timestamps: true",
      "140:   metrics_path: /metrics",
      "141:   scheme: http",
      "142:   static_configs:",
      "143:   - targets:",
      "144:     - 127.0.0.1:12345",
      "145:     labels:",
      "146:       cluster: localhost",
      "147:   basic_auth:",
      "148:     username: admin",
      "149:     password: SCRUBME",
      "150: remote_write:",
      "151: - url: http://localhost:9009/api/prom/push",
      "152:   remote_timeout: 30s",
      "153:   name: test-d0f32c",
      "154:   basic_auth:",
      "155:     username: admin",
      "156:     password: SCRUBME",
      "157:   queue_config:",
      "158:     capacity: 500",
      "159:     max_shards: 1000",
      "160:     min_shards: 1",
      "161:     max_samples_per_send: 100",
      "162:     batch_send_deadline: 5s",
      "163:     min_backoff: 30ms",
      "164:     max_backoff: 100ms",
      "165:   follow_redirects: true",
      "166:   metadata_config:",
      "167:     send: true",
      "168:     send_interval: 1m",
      "169:     max_samples_per_send: 500",
      "170: wal_truncate_frequency: 1m0s",
      "171: min_wal_time: 5m0s",
      "172: max_wal_time: 4h0m0s",
      "173: remote_flush_deadline: 1m0s",
      "174: `",
      "175:  scrubbedConfig := strings.ReplaceAll(rawConfig, \"SCRUBME\", \"<secret>\")",
      "177:  s := &Mock{",
      "178:   GetFunc: func(ctx context.Context, key string) (instance.Config, error) {",
      "179:    c, err := instance.UnmarshalConfig(strings.NewReader(rawConfig))",
      "180:    if err != nil {",
      "181:     return instance.Config{}, err",
      "182:    }",
      "183:    return *c, nil",
      "184:   },",
      "185:  }",
      "187:  api := NewAPI(log.NewNopLogger(), s, nil)",
      "188:  env := newAPITestEnvironment(t, api)",
      "190:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
      "191:  require.NoError(t, err)",
      "192:  require.Equal(t, http.StatusOK, resp.StatusCode)",
      "193:  respBytes, err := io.ReadAll(resp.Body)",
      "194:  require.NoError(t, err)",
      "196:  var apiResp struct {",
      "197:   Status string `json:\"status\"`",
      "198:   Data   struct {",
      "199:    Value string `json:\"value\"`",
      "200:   } `json:\"data\"`",
      "201:  }",
      "202:  err = json.Unmarshal(respBytes, &apiResp)",
      "203:  require.NoError(t, err)",
      "204:  require.Equal(t, \"success\", apiResp.Status)",
      "205:  require.YAMLEq(t, scrubbedConfig, apiResp.Data.Value)",
      "207:  t.Run(\"With Client\", func(t *testing.T) {",
      "208:   cli := client.New(env.srv.URL)",
      "209:   actual, err := cli.GetConfiguration(context.Background(), \"exists\")",
      "210:   require.NoError(t, err)",
      "215:   actualBytes, err := instance.MarshalConfig(actual, false)",
      "216:   require.NoError(t, err)",
      "217:   require.YAMLEq(t, scrubbedConfig, string(actualBytes))",
      "218:  })",
      "219: }",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go": [
      "File: pkg/metrics/instance/instance.go -> pkg/metrics/instance/instance.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:  if err != nil {",
      "95:   return nil, err",
      "96:  }",
      "",
      "[Removed Lines]",
      "93:  bb, err := MarshalConfig(&c, false)",
      "",
      "[Added Lines]",
      "93:  bb, err := MarshalConfig(&c, true)",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go": [
      "File: pkg/metrics/instance/marshal_test.go -> pkg/metrics/instance/marshal_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:  require.Error(t, err)",
      "26: }",
      "31:  cfg := `name: test",
      "32: scrape_configs:",
      "33: - job_name: local_scrape",
      "",
      "[Removed Lines]",
      "30: func TestMarshal_UnmarshalConfig(t *testing.T) {",
      "",
      "[Added Lines]",
      "30: func TestMarshal_UnmarshalConfig_RetainSecrets(t *testing.T) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: remote_flush_deadline: 1m0s",
      "70: `",
      "100: }",
      "105:  cfg := `name: test",
      "106: scrape_configs:",
      "107: - job_name: local_scrape",
      "",
      "[Removed Lines]",
      "72:  t.Run(\"direct marshal\", func(t *testing.T) {",
      "73:   var c Config",
      "74:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "75:   require.NoError(t, err)",
      "77:   out, err := yaml.Marshal(c)",
      "78:   require.NoError(t, err)",
      "79:   require.YAMLEq(t, cfg, string(out))",
      "80:  })",
      "82:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
      "83:   c := &Config{}",
      "84:   err := yaml.Unmarshal([]byte(cfg), c)",
      "85:   require.NoError(t, err)",
      "87:   out, err := yaml.Marshal(c)",
      "88:   require.NoError(t, err)",
      "89:   require.YAMLEq(t, cfg, string(out))",
      "90:  })",
      "92:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
      "93:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "94:   require.NoError(t, err)",
      "96:   out, err := MarshalConfig(c, false)",
      "97:   require.NoError(t, err)",
      "98:   require.YAMLEq(t, cfg, string(out))",
      "99:  })",
      "104: func TestMarshal_UnmarshalConfig_Sigv4(t *testing.T) {",
      "",
      "[Added Lines]",
      "72:  c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "73:  require.NoError(t, err)",
      "75:  out, err := MarshalConfig(c, false)",
      "76:  require.NoError(t, err)",
      "77:  require.YAMLEq(t, cfg, string(out))",
      "82: func TestMarshal_UnmarshalConfig_ScrubSecrets(t *testing.T) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "116:       cluster: localhost",
      "117:   basic_auth:",
      "118:     username: admin",
      "120: remote_write:",
      "121: - url: http://localhost:9009/api/prom/push",
      "122:   remote_timeout: 30s",
      "123:   name: test-d0f32c",
      "125:   queue_config:",
      "126:     capacity: 500",
      "127:     max_shards: 1000",
      "",
      "[Removed Lines]",
      "119:     password: foobar",
      "124:   sigv4: {}",
      "",
      "[Added Lines]",
      "97:     password: SCRUBME",
      "102:   basic_auth:",
      "103:     username: admin",
      "104:     password: SCRUBME",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "141: remote_flush_deadline: 1m0s",
      "142: `",
      "144:  t.Run(\"direct marshal\", func(t *testing.T) {",
      "145:   var c Config",
      "146:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:  scrub := func(in string) string {",
      "125:   return strings.ReplaceAll(in, \"SCRUBME\", \"<secret>\")",
      "126:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "149:   out, err := yaml.Marshal(c)",
      "150:   require.NoError(t, err)",
      "152:  })",
      "157:   require.NoError(t, err)",
      "160:   require.NoError(t, err)",
      "162:  })",
      "164:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
      "165:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "166:   require.NoError(t, err)",
      "169:   require.NoError(t, err)",
      "171:  })",
      "172: }",
      "",
      "[Removed Lines]",
      "151:   require.YAMLEq(t, cfg, string(out))",
      "154:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
      "155:   c := &Config{}",
      "156:   err := yaml.Unmarshal([]byte(cfg), c)",
      "159:   out, err := yaml.Marshal(c)",
      "161:   require.YAMLEq(t, cfg, string(out))",
      "168:   out, err := MarshalConfig(c, false)",
      "170:   require.YAMLEq(t, cfg, string(out))",
      "",
      "[Added Lines]",
      "135:   require.YAMLEq(t, scrub(cfg), string(out))",
      "138:  t.Run(\"direct marshal pointer\", func(t *testing.T) {",
      "139:   var c Config",
      "140:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "143:   out, err := yaml.Marshal(&c)",
      "145:   require.YAMLEq(t, scrub(cfg), string(out))",
      "152:   out, err := MarshalConfig(c, true)",
      "154:   require.YAMLEq(t, scrub(cfg), string(out))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "381ac9dec6fe9a6832683028b284dd7c7c15d07d",
      "candidate_info": {
        "commit_hash": "381ac9dec6fe9a6832683028b284dd7c7c15d07d",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/381ac9dec6fe9a6832683028b284dd7c7c15d07d",
        "files": [
          "pkg/metrics/instance/configstore/api.go",
          "pkg/metrics/instance/configstore/api_test.go",
          "pkg/metrics/instance/instance.go",
          "pkg/metrics/instance/marshal_test.go"
        ],
        "message": "Scrub secrets when marshaling instance configs",
        "before_after_code_files": [
          "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
          "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
          "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
          "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
            "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
            "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
            "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
          ],
          "candidate": [
            "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
            "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
            "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
            "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go": [
          "File: pkg/metrics/instance/configstore/api.go -> pkg/metrics/instance/configstore/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:  case err != nil:",
          "127:   api.writeError(rw, http.StatusInternalServerError, err)",
          "128:  case err == nil:",
          "130:   if err != nil {",
          "131:    api.writeError(rw, http.StatusInternalServerError, fmt.Errorf(\"could not marshal config for response: %w\", err))",
          "132:    return",
          "",
          "[Removed Lines]",
          "129:   bb, err := instance.MarshalConfig(&cfg, false)",
          "",
          "[Added Lines]",
          "129:   bb, err := instance.MarshalConfig(&cfg, true)",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go": [
          "File: pkg/metrics/instance/configstore/api_test.go -> pkg/metrics/instance/configstore/api_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"bytes\"",
          "5:  \"context\"",
          "6:  \"fmt\"",
          "7:  \"io/ioutil\"",
          "8:  \"net/http\"",
          "9:  \"net/http/httptest\"",
          "10:  \"testing\"",
          "11:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"encoding/json\"",
          "8:  \"io\"",
          "12:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:  })",
          "129: }",
          "131: func TestServer_PutConfiguration(t *testing.T) {",
          "132:  var s Mock",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: func TestAPI_GetConfiguration_ScrubSecrets(t *testing.T) {",
          "135:  rawConfig := `name: exists",
          "136: scrape_configs:",
          "137: - job_name: local_scrape",
          "138:   follow_redirects: true",
          "139:   honor_timestamps: true",
          "140:   metrics_path: /metrics",
          "141:   scheme: http",
          "142:   static_configs:",
          "143:   - targets:",
          "144:     - 127.0.0.1:12345",
          "145:     labels:",
          "146:       cluster: localhost",
          "147:   basic_auth:",
          "148:     username: admin",
          "149:     password: SCRUBME",
          "150: remote_write:",
          "151: - url: http://localhost:9009/api/prom/push",
          "152:   remote_timeout: 30s",
          "153:   name: test-d0f32c",
          "154:   basic_auth:",
          "155:     username: admin",
          "156:     password: SCRUBME",
          "157:   queue_config:",
          "158:     capacity: 500",
          "159:     max_shards: 1000",
          "160:     min_shards: 1",
          "161:     max_samples_per_send: 100",
          "162:     batch_send_deadline: 5s",
          "163:     min_backoff: 30ms",
          "164:     max_backoff: 100ms",
          "165:   follow_redirects: true",
          "166:   metadata_config:",
          "167:     send: true",
          "168:     send_interval: 1m",
          "169: wal_truncate_frequency: 1m0s",
          "170: min_wal_time: 5m0s",
          "171: max_wal_time: 4h0m0s",
          "172: remote_flush_deadline: 1m0s",
          "173: `",
          "174:  scrubbedConfig := strings.ReplaceAll(rawConfig, \"SCRUBME\", \"<secret>\")",
          "176:  s := &Mock{",
          "177:   GetFunc: func(ctx context.Context, key string) (instance.Config, error) {",
          "178:    c, err := instance.UnmarshalConfig(strings.NewReader(rawConfig))",
          "179:    if err != nil {",
          "180:     return instance.Config{}, err",
          "181:    }",
          "182:    return *c, nil",
          "183:   },",
          "184:  }",
          "186:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "187:  env := newAPITestEnvironment(t, api)",
          "189:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
          "190:  require.NoError(t, err)",
          "191:  require.Equal(t, http.StatusOK, resp.StatusCode)",
          "192:  respBytes, err := io.ReadAll(resp.Body)",
          "193:  require.NoError(t, err)",
          "195:  var apiResp struct {",
          "196:   Status string `json:\"status\"`",
          "197:   Data   struct {",
          "198:    Value string `json:\"value\"`",
          "199:   } `json:\"data\"`",
          "200:  }",
          "201:  err = json.Unmarshal(respBytes, &apiResp)",
          "202:  require.NoError(t, err)",
          "203:  require.Equal(t, \"success\", apiResp.Status)",
          "204:  require.YAMLEq(t, scrubbedConfig, apiResp.Data.Value)",
          "206:  t.Run(\"With Client\", func(t *testing.T) {",
          "207:   cli := client.New(env.srv.URL)",
          "208:   actual, err := cli.GetConfiguration(context.Background(), \"exists\")",
          "209:   require.NoError(t, err)",
          "214:   actualBytes, err := instance.MarshalConfig(actual, false)",
          "215:   require.NoError(t, err)",
          "216:   require.YAMLEq(t, scrubbedConfig, string(actualBytes))",
          "217:  })",
          "218: }",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go": [
          "File: pkg/metrics/instance/instance.go -> pkg/metrics/instance/instance.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if err != nil {",
          "95:   return nil, err",
          "96:  }",
          "",
          "[Removed Lines]",
          "93:  bb, err := MarshalConfig(&c, false)",
          "",
          "[Added Lines]",
          "93:  bb, err := MarshalConfig(&c, true)",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go": [
          "File: pkg/metrics/instance/marshal_test.go -> pkg/metrics/instance/marshal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  require.Error(t, err)",
          "26: }",
          "31:  cfg := `name: test",
          "32: scrape_configs:",
          "33: - job_name: local_scrape",
          "",
          "[Removed Lines]",
          "30: func TestMarshal_UnmarshalConfig(t *testing.T) {",
          "",
          "[Added Lines]",
          "30: func TestMarshal_UnmarshalConfig_RetainSecrets(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: remote_flush_deadline: 1m0s",
          "69: `",
          "99: }",
          "104:  cfg := `name: test",
          "105: scrape_configs:",
          "106: - job_name: local_scrape",
          "",
          "[Removed Lines]",
          "71:  t.Run(\"direct marshal\", func(t *testing.T) {",
          "72:   var c Config",
          "73:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "74:   require.NoError(t, err)",
          "76:   out, err := yaml.Marshal(c)",
          "77:   require.NoError(t, err)",
          "78:   require.YAMLEq(t, cfg, string(out))",
          "79:  })",
          "81:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
          "82:   c := &Config{}",
          "83:   err := yaml.Unmarshal([]byte(cfg), c)",
          "84:   require.NoError(t, err)",
          "86:   out, err := yaml.Marshal(c)",
          "87:   require.NoError(t, err)",
          "88:   require.YAMLEq(t, cfg, string(out))",
          "89:  })",
          "91:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
          "92:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "93:   require.NoError(t, err)",
          "95:   out, err := MarshalConfig(c, false)",
          "96:   require.NoError(t, err)",
          "97:   require.YAMLEq(t, cfg, string(out))",
          "98:  })",
          "103: func TestMarshal_UnmarshalConfig_Sigv4(t *testing.T) {",
          "",
          "[Added Lines]",
          "71:  c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "72:  require.NoError(t, err)",
          "74:  out, err := MarshalConfig(c, false)",
          "75:  require.NoError(t, err)",
          "76:  require.YAMLEq(t, cfg, string(out))",
          "81: func TestMarshal_UnmarshalConfig_ScrubSecrets(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:       cluster: localhost",
          "116:   basic_auth:",
          "117:     username: admin",
          "119: remote_write:",
          "120: - url: http://localhost:9009/api/prom/push",
          "121:   remote_timeout: 30s",
          "122:   name: test-d0f32c",
          "124:   queue_config:",
          "125:     capacity: 500",
          "126:     max_shards: 1000",
          "",
          "[Removed Lines]",
          "118:     password: foobar",
          "123:   sigv4: {}",
          "",
          "[Added Lines]",
          "96:     password: SCRUBME",
          "101:   basic_auth:",
          "102:     username: admin",
          "103:     password: SCRUBME",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139: remote_flush_deadline: 1m0s",
          "140: `",
          "142:  t.Run(\"direct marshal\", func(t *testing.T) {",
          "143:   var c Config",
          "144:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  scrub := func(in string) string {",
          "123:   return strings.ReplaceAll(in, \"SCRUBME\", \"<secret>\")",
          "124:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:   out, err := yaml.Marshal(c)",
          "148:   require.NoError(t, err)",
          "150:  })",
          "155:   require.NoError(t, err)",
          "158:   require.NoError(t, err)",
          "160:  })",
          "162:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
          "163:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "164:   require.NoError(t, err)",
          "167:   require.NoError(t, err)",
          "169:  })",
          "170: }",
          "",
          "[Removed Lines]",
          "149:   require.YAMLEq(t, cfg, string(out))",
          "152:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
          "153:   c := &Config{}",
          "154:   err := yaml.Unmarshal([]byte(cfg), c)",
          "157:   out, err := yaml.Marshal(c)",
          "159:   require.YAMLEq(t, cfg, string(out))",
          "166:   out, err := MarshalConfig(c, false)",
          "168:   require.YAMLEq(t, cfg, string(out))",
          "",
          "[Added Lines]",
          "133:   require.YAMLEq(t, scrub(cfg), string(out))",
          "136:  t.Run(\"direct marshal pointer\", func(t *testing.T) {",
          "137:   var c Config",
          "138:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "141:   out, err := yaml.Marshal(&c)",
          "143:   require.YAMLEq(t, scrub(cfg), string(out))",
          "150:   out, err := MarshalConfig(c, true)",
          "152:   require.YAMLEq(t, scrub(cfg), string(out))",
          "",
          "---------------"
        ]
      }
    }
  ]
}