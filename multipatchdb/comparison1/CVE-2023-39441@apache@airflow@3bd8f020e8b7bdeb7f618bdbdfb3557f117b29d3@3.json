{
  "cve_id": "CVE-2023-39441",
  "cve_desc": "Apache Airflow SMTP Provider before 1.3.0, Apache Airflow IMAP Provider before 3.3.0, and\u00a0Apache Airflow before 2.7.0 are affected by the\u00a0Validation of OpenSSL Certificate vulnerability.\n\nThe default SSL context with SSL library did not check a server's X.509\u00a0certificate.\u00a0 Instead, the code accepted any certificate, which could\u00a0result in the disclosure of mail server credentials or mail contents\u00a0when the client connects to an attacker in a MITM position.\n\nUsers are strongly advised to upgrade to Apache Airflow version 2.7.0 or newer, Apache Airflow IMAP Provider version 3.3.0 or newer, and Apache Airflow SMTP Provider version 1.3.0 or newer to mitigate the risk associated with this vulnerability",
  "repo": "apache/airflow",
  "patch_hash": "3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
  "patch_info": {
    "commit_hash": "3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/utils/email.py",
      "newsfragments/33070.significant.rst",
      "tests/utils/test_email.py"
    ],
    "message": "Allows to choose SSL context for SMTP connection (#33070)\n\nThis change add two options to choose from when SSL SMTP connection\nis created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is\n  preferred\n\n(cherry picked from commit 120efc186556b1e9498f90ad436c74e5f4e138e9)",
    "before_after_code_files": [
      "airflow/utils/email.py||airflow/utils/email.py",
      "tests/utils/test_email.py||tests/utils/test_email.py"
    ]
  },
  "patch_diff": {
    "airflow/utils/email.py||airflow/utils/email.py": [
      "File: airflow/utils/email.py -> airflow/utils/email.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import logging",
      "22: import os",
      "23: import smtplib",
      "24: import warnings",
      "25: from email.mime.application import MIMEApplication",
      "26: from email.mime.multipart import MIMEMultipart",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import ssl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "312:     :param with_ssl: Whether to use SSL encryption for the connection.",
      "313:     :return: An SMTP connection to the specified host and port.",
      "314:     \"\"\"",
      "322: def _get_email_list_from_str(addresses: str) -> list[str]:",
      "",
      "[Removed Lines]",
      "315:     return (",
      "316:         smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)",
      "317:         if with_ssl",
      "318:         else smtplib.SMTP(host=host, port=port, timeout=timeout)",
      "319:     )",
      "",
      "[Added Lines]",
      "316:     if not with_ssl:",
      "317:         return smtplib.SMTP(host=host, port=port, timeout=timeout)",
      "318:     else:",
      "319:         ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\")",
      "320:         if ssl_context_string == \"default\":",
      "321:             ssl_context = ssl.create_default_context()",
      "322:         elif ssl_context_string == \"none\":",
      "323:             ssl_context = None",
      "324:         else:",
      "325:             raise RuntimeError(",
      "326:                 f\"The email.ssl_context configuration variable must \"",
      "327:                 f\"be set to 'default' or 'none' and is '{ssl_context_string}.\"",
      "328:             )",
      "329:         return smtplib.SMTP_SSL(host=host, port=port, timeout=timeout, context=ssl_context)",
      "",
      "---------------"
    ],
    "tests/utils/test_email.py||tests/utils/test_email.py": [
      "File: tests/utils/test_email.py -> tests/utils/test_email.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "242:     @mock.patch(\"smtplib.SMTP\")",
      "244:         mock_smtp_ssl.return_value = mock.Mock()",
      "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
      "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "247:         assert not mock_smtp.called",
      "248:         mock_smtp_ssl.assert_called_once_with(",
      "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "252:         )",
      "254:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "",
      "[Removed Lines]",
      "243:     def test_send_mime_ssl(self, mock_smtp, mock_smtp_ssl):",
      "",
      "[Added Lines]",
      "243:     def test_send_mime_ssl_none_context(self, mock_smtp, mock_smtp_ssl):",
      "244:         mock_smtp_ssl.return_value = mock.Mock()",
      "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"none\"}):",
      "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "247:         assert not mock_smtp.called",
      "248:         mock_smtp_ssl.assert_called_once_with(",
      "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "252:             context=None,",
      "253:         )",
      "255:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "256:     @mock.patch(\"smtplib.SMTP\")",
      "257:     @mock.patch(\"ssl.create_default_context\")",
      "258:     def test_send_mime_ssl_default_context_if_not_set(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "263:         assert create_default_context.called",
      "268:             context=create_default_context.return_value,",
      "269:         )",
      "271:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "272:     @mock.patch(\"smtplib.SMTP\")",
      "273:     @mock.patch(\"ssl.create_default_context\")",
      "274:     def test_send_mime_ssl_default_context_with_value_set_to_default(",
      "275:         self, create_default_context, mock_smtp, mock_smtp_ssl",
      "276:     ):",
      "277:         mock_smtp_ssl.return_value = mock.Mock()",
      "278:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"default\"}):",
      "279:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "280:         assert not mock_smtp.called",
      "281:         assert create_default_context.called",
      "282:         mock_smtp_ssl.assert_called_once_with(",
      "283:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "284:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "285:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "286:             context=create_default_context.return_value,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "300:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "301:     @mock.patch(\"smtplib.SMTP\")",
      "303:         mock_smtp_ssl.side_effect = SMTPServerDisconnected()",
      "304:         msg = MIMEMultipart()",
      "305:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
      "",
      "[Removed Lines]",
      "302:     def test_send_mime_ssl_complete_failure(self, mock_smtp, mock_smtp_ssl):",
      "",
      "[Added Lines]",
      "336:     @mock.patch(\"ssl.create_default_context\")",
      "337:     def test_send_mime_ssl_complete_failure(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "310:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "311:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "312:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "313:         )",
      "314:         assert mock_smtp_ssl.call_count == conf.getint(\"smtp\", \"SMTP_RETRY_LIMIT\")",
      "315:         assert not mock_smtp.called",
      "316:         assert not mock_smtp_ssl.return_value.starttls.called",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "348:             context=create_default_context.return_value,",
      "350:         assert create_default_context.called",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48caedf8b009413a1d1b98af773bfae06254a08a",
      "candidate_info": {
        "commit_hash": "48caedf8b009413a1d1b98af773bfae06254a08a",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/48caedf8b009413a1d1b98af773bfae06254a08a",
        "files": [
          "airflow/auth/managers/base_auth_manager.py",
          "airflow/auth/managers/fab/fab_auth_manager.py",
          "airflow/auth/managers/fab/models/__init__.py",
          "airflow/auth/managers/fab/models/anonymous_user.py",
          "airflow/auth/managers/fab/security_manager/__init__.py",
          "airflow/auth/managers/fab/security_manager/override.py",
          "airflow/auth/managers/models/__init__.py",
          "airflow/auth/managers/models/base_user.py",
          "tests/auth/managers/fab/security_manager/__init__.py",
          "tests/auth/managers/fab/security_manager/test_override.py",
          "tests/auth/managers/fab/test_fab_auth_manager.py",
          "tests/www/test_security.py"
        ],
        "message": "Move security manager override to its own module (#32987)\n\n(cherry picked from commit c10f67b36ad101a5f447a5dc075a02fffec7d0f0)",
        "before_after_code_files": [
          "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py",
          "airflow/auth/managers/fab/fab_auth_manager.py||airflow/auth/managers/fab/fab_auth_manager.py",
          "airflow/auth/managers/fab/models.py||airflow/auth/managers/fab/models/__init__.py",
          "airflow/auth/managers/fab/auth/anonymous_user.py||airflow/auth/managers/fab/models/anonymous_user.py",
          "airflow/auth/managers/fab/security_manager_override.py||airflow/auth/managers/fab/security_manager/override.py",
          "tests/auth/managers/fab/security_manager/__init__.py||tests/auth/managers/fab/security_manager/__init__.py",
          "tests/auth/managers/fab/test_security_manager_override.py||tests/auth/managers/fab/security_manager/test_override.py",
          "tests/auth/managers/fab/test_fab_auth_manager.py||tests/auth/managers/fab/test_fab_auth_manager.py",
          "tests/www/test_security.py||tests/www/test_security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py": [
          "File: airflow/auth/managers/base_auth_manager.py -> airflow/auth/managers/base_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from abc import abstractmethod",
          "21: from typing import TYPE_CHECKING",
          "24: from airflow.exceptions import AirflowException",
          "25: from airflow.utils.log.logging_mixin import LoggingMixin",
          "",
          "[Removed Lines]",
          "23: from airflow.auth.managers.model.base_user import BaseUser",
          "",
          "[Added Lines]",
          "23: from airflow.auth.managers.models.base_user import BaseUser",
          "",
          "---------------"
        ],
        "airflow/auth/managers/fab/fab_auth_manager.py||airflow/auth/managers/fab/fab_auth_manager.py": [
          "File: airflow/auth/managers/fab/fab_auth_manager.py -> airflow/auth/managers/fab/fab_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from airflow import AirflowException",
          "24: from airflow.auth.managers.base_auth_manager import BaseAuthManager",
          "25: from airflow.auth.managers.fab.models import User",
          "29: class FabAuthManager(BaseAuthManager):",
          "",
          "[Removed Lines]",
          "26: from airflow.auth.managers.fab.security_manager_override import FabAirflowSecurityManagerOverride",
          "",
          "[Added Lines]",
          "26: from airflow.auth.managers.fab.security_manager.override import FabAirflowSecurityManagerOverride",
          "",
          "---------------"
        ],
        "airflow/auth/managers/fab/models.py||airflow/auth/managers/fab/models/__init__.py": [
          "File: airflow/auth/managers/fab/models.py -> airflow/auth/managers/fab/models/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: )",
          "41: from sqlalchemy.orm import backref, declared_attr, relationship",
          "44: from airflow.models.base import Base",
          "46: \"\"\"",
          "",
          "[Removed Lines]",
          "43: from airflow.auth.managers.model.base_user import BaseUser",
          "",
          "[Added Lines]",
          "43: from airflow.auth.managers.models.base_user import BaseUser",
          "",
          "---------------"
        ],
        "airflow/auth/managers/fab/auth/anonymous_user.py||airflow/auth/managers/fab/models/anonymous_user.py": [
          "File: airflow/auth/managers/fab/auth/anonymous_user.py -> airflow/auth/managers/fab/models/anonymous_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from flask import current_app",
          "21: from flask_login import AnonymousUserMixin",
          "26: class AnonymousUser(AnonymousUserMixin, BaseUser):",
          "",
          "[Removed Lines]",
          "23: from airflow.auth.managers.model.base_user import BaseUser",
          "",
          "[Added Lines]",
          "23: from airflow.auth.managers.models.base_user import BaseUser",
          "",
          "---------------"
        ],
        "airflow/auth/managers/fab/security_manager_override.py||airflow/auth/managers/fab/security_manager/override.py": [
          "File: airflow/auth/managers/fab/security_manager_override.py -> airflow/auth/managers/fab/security_manager/override.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from flask_login import LoginManager",
          "27: from werkzeug.security import generate_password_hash",
          "32: class FabAirflowSecurityManagerOverride:",
          "",
          "[Removed Lines]",
          "29: from airflow.auth.managers.fab.auth.anonymous_user import AnonymousUser",
          "",
          "[Added Lines]",
          "29: from airflow.auth.managers.fab.models.anonymous_user import AnonymousUser",
          "",
          "---------------"
        ],
        "tests/auth/managers/fab/security_manager/__init__.py||tests/auth/managers/fab/security_manager/__init__.py": [
          "File: tests/auth/managers/fab/security_manager/__init__.py -> tests/auth/managers/fab/security_manager/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "",
          "---------------"
        ],
        "tests/auth/managers/fab/test_security_manager_override.py||tests/auth/managers/fab/security_manager/test_override.py": [
          "File: tests/auth/managers/fab/test_security_manager_override.py -> tests/auth/managers/fab/security_manager/test_override.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import pytest",
          "26: appbuilder = Mock()",
          "27: actionmodelview = Mock()",
          "",
          "[Removed Lines]",
          "24: from airflow.auth.managers.fab.security_manager_override import FabAirflowSecurityManagerOverride",
          "",
          "[Added Lines]",
          "24: from airflow.auth.managers.fab.security_manager.override import FabAirflowSecurityManagerOverride",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:             )",
          "87:     with mock.patch(",
          "89:     ) as mock_login_manager, mock.patch(",
          "91:     ) as mock_jwt_manager:",
          "92:         mock_login_manager_instance = Mock()",
          "93:         mock_login_manager.return_value = mock_login_manager_instance",
          "",
          "[Removed Lines]",
          "88:         \"airflow.auth.managers.fab.security_manager_override.LoginManager\"",
          "90:         \"airflow.auth.managers.fab.security_manager_override.JWTManager\"",
          "",
          "[Added Lines]",
          "88:         \"airflow.auth.managers.fab.security_manager.override.LoginManager\"",
          "90:         \"airflow.auth.managers.fab.security_manager.override.JWTManager\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:         security_manager_override.load_user(\"123\")",
          "114:         mock_get_user_by_id.assert_called_once_with(123)",
          "117:     def test_load_user_jwt(self, mock_g, security_manager_override):",
          "118:         mock_user = Mock()",
          "119:         mock_load_user = Mock(return_value=mock_user)",
          "",
          "[Removed Lines]",
          "116:     @mock.patch(\"airflow.auth.managers.fab.security_manager_override.g\", spec={})",
          "",
          "[Added Lines]",
          "116:     @mock.patch(\"airflow.auth.managers.fab.security_manager.override.g\", spec={})",
          "",
          "---------------"
        ],
        "tests/auth/managers/fab/test_fab_auth_manager.py||tests/auth/managers/fab/test_fab_auth_manager.py": [
          "File: tests/auth/managers/fab/test_fab_auth_manager.py -> tests/auth/managers/fab/test_fab_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: from airflow import AirflowException",
          "25: from airflow.auth.managers.fab.fab_auth_manager import FabAuthManager",
          "26: from airflow.auth.managers.fab.models import User",
          "28: from airflow.www.security import ApplessAirflowSecurityManager",
          "",
          "[Removed Lines]",
          "27: from airflow.auth.managers.fab.security_manager_override import FabAirflowSecurityManagerOverride",
          "",
          "[Added Lines]",
          "27: from airflow.auth.managers.fab.security_manager.override import FabAirflowSecurityManagerOverride",
          "",
          "---------------"
        ],
        "tests/www/test_security.py||tests/www/test_security.py": [
          "File: tests/www/test_security.py -> tests/www/test_security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from flask_appbuilder.views import BaseView, ModelView",
          "31: from sqlalchemy import Column, Date, Float, Integer, String",
          "34: from airflow.auth.managers.fab.fab_auth_manager import FabAuthManager",
          "35: from airflow.auth.managers.fab.models import User, assoc_permission_role",
          "36: from airflow.configuration import initialize_config",
          "37: from airflow.exceptions import AirflowException",
          "38: from airflow.models import DagModel",
          "",
          "[Removed Lines]",
          "33: from airflow.auth.managers.fab.auth.anonymous_user import AnonymousUser",
          "",
          "[Added Lines]",
          "35: from airflow.auth.managers.fab.models.anonymous_user import AnonymousUser",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d6aca479201bd67854dbf128afcaaffc51729f6",
      "candidate_info": {
        "commit_hash": "7d6aca479201bd67854dbf128afcaaffc51729f6",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/7d6aca479201bd67854dbf128afcaaffc51729f6",
        "files": [
          "tests/providers/openlineage/plugins/test_openlineage_adapter.py"
        ],
        "message": "Fix test failing after open-lineage 1.0 API change (#33095)\n\nOne more test fix needed after #33087\n\n(cherry picked from commit 153e489dd02d1ca182e7eef65acdcb5225802a9b)",
        "before_after_code_files": [
          "tests/providers/openlineage/plugins/test_openlineage_adapter.py||tests/providers/openlineage/plugins/test_openlineage_adapter.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/providers/openlineage/plugins/test_openlineage_adapter.py||tests/providers/openlineage/plugins/test_openlineage_adapter.py": [
          "File: tests/providers/openlineage/plugins/test_openlineage_adapter.py -> tests/providers/openlineage/plugins/test_openlineage_adapter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     client = OpenLineageAdapter().get_or_create_openlineage_client()",
          "44:     assert client.transport.url == \"http://ol-api:5000\"",
          "48: @conf_vars(",
          "",
          "[Removed Lines]",
          "45:     assert \"Authorization\" in client.transport.session.headers",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dceeb134b47f55ed8c92806a722da1a0aeddc57a",
      "candidate_info": {
        "commit_hash": "dceeb134b47f55ed8c92806a722da1a0aeddc57a",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/dceeb134b47f55ed8c92806a722da1a0aeddc57a",
        "files": [
          "airflow/www/forms.py",
          "airflow/www/static/js/callModal.js",
          "airflow/www/static/js/cluster-activity/nav/FilterBar.tsx",
          "airflow/www/static/js/components/Time.test.tsx",
          "airflow/www/static/js/components/Time.tsx",
          "airflow/www/static/js/dag.js",
          "airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts",
          "airflow/www/static/js/dag/grid/dagRuns/index.test.tsx",
          "airflow/www/static/js/dag/nav/FilterBar.tsx",
          "airflow/www/static/js/graph.js",
          "airflow/www/static/js/task_instances.js",
          "airflow/www/templates/airflow/dag.html",
          "airflow/www/templates/airflow/graph.html",
          "airflow/www/views.py",
          "airflow/www/webpack.config.js",
          "docs/apache-airflow/img/graph.png",
          "docs/apache-airflow/img/mapping-simple-graph.png",
          "docs/apache-airflow/img/task_group.gif",
          "tests/www/views/test_views_decorators.py",
          "tests/www/views/test_views_graph.py",
          "tests/www/views/test_views_tasks.py"
        ],
        "message": "Remove old graph (#32958)\n\n(cherry picked from commit 154deed02ecc0be36b1ddfc9144aa05fb77b5f2d)",
        "before_after_code_files": [
          "airflow/www/forms.py||airflow/www/forms.py",
          "airflow/www/static/js/callModal.js||airflow/www/static/js/callModal.js",
          "airflow/www/static/js/cluster-activity/nav/FilterBar.tsx||airflow/www/static/js/cluster-activity/nav/FilterBar.tsx",
          "airflow/www/static/js/components/Time.test.tsx||airflow/www/static/js/components/Time.test.tsx",
          "airflow/www/static/js/components/Time.tsx||airflow/www/static/js/components/Time.tsx",
          "airflow/www/static/js/dag.js||airflow/www/static/js/dag.js",
          "airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts||airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts",
          "airflow/www/static/js/dag/grid/dagRuns/index.test.tsx||airflow/www/static/js/dag/grid/dagRuns/index.test.tsx",
          "airflow/www/static/js/dag/nav/FilterBar.tsx||airflow/www/static/js/dag/nav/FilterBar.tsx",
          "airflow/www/static/js/graph.js||airflow/www/static/js/graph.js",
          "airflow/www/static/js/task_instances.js||airflow/www/static/js/task_instances.js",
          "airflow/www/templates/airflow/dag.html||airflow/www/templates/airflow/dag.html",
          "airflow/www/templates/airflow/graph.html||airflow/www/templates/airflow/graph.html",
          "airflow/www/views.py||airflow/www/views.py",
          "airflow/www/webpack.config.js||airflow/www/webpack.config.js",
          "tests/www/views/test_views_decorators.py||tests/www/views/test_views_decorators.py",
          "tests/www/views/test_views_graph.py||tests/www/views/test_views_graph.py",
          "tests/www/views/test_views_tasks.py||tests/www/views/test_views_tasks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/forms.py||airflow/www/forms.py": [
          "File: airflow/www/forms.py -> airflow/www/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     )",
          "130: class DagRunEditForm(DynamicForm):",
          "131:     \"\"\"Form for editing DAG Run.",
          "",
          "[Removed Lines]",
          "124: class DateTimeWithNumRunsWithDagRunsForm(DateTimeWithNumRunsForm):",
          "125:     \"\"\"Date time and number of runs and dag runs form for graph and gantt view.\"\"\"",
          "127:     execution_date = SelectField(\"DAG run\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/static/js/callModal.js||airflow/www/static/js/callModal.js": [
          "File: airflow/www/static/js/callModal.js -> airflow/www/static/js/callModal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/static/js/cluster-activity/nav/FilterBar.tsx||airflow/www/static/js/cluster-activity/nav/FilterBar.tsx": [
          "File: airflow/www/static/js/cluster-activity/nav/FilterBar.tsx -> airflow/www/static/js/cluster-activity/nav/FilterBar.tsx"
        ],
        "airflow/www/static/js/components/Time.test.tsx||airflow/www/static/js/components/Time.test.tsx": [
          "File: airflow/www/static/js/components/Time.test.tsx -> airflow/www/static/js/components/Time.test.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import React from \"react\";",
          "23: import { render, fireEvent, act } from \"@testing-library/react\";",
          "26: import { defaultFormatWithTZ, TimezoneEvent } from \"src/datetime_utils\";",
          "27: import { Wrapper } from \"src/utils/testUtils\";",
          "",
          "[Removed Lines]",
          "24: import moment from \"moment-timezone\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/static/js/components/Time.tsx||airflow/www/static/js/components/Time.tsx": [
          "File: airflow/www/static/js/components/Time.tsx -> airflow/www/static/js/components/Time.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import React from \"react\";",
          "23: import { useTimezone } from \"src/context/timezone\";",
          "24: import { defaultFormatWithTZ } from \"src/datetime_utils\";",
          "",
          "[Removed Lines]",
          "21: import moment from \"moment-timezone\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag.js||airflow/www/static/js/dag.js": [
          "File: airflow/www/static/js/dag.js -> airflow/www/static/js/dag.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   nextDatasetsError = error;",
          "42: };",
          "45: $(window).on(\"load\", function onLoad() {",
          "46:   $(`a[href*=\"${this.location.pathname}\"]`).parent().addClass(\"active\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: const onTabChange = () => {",
          "46:   const urlParams = new URLSearchParams(window.location.search);",
          "47:   const isGrid = window.location.href.includes(`${dagId}/grid`);",
          "48:   const tab = urlParams.get(\"tab\");",
          "49:   const gridNav = document.getElementById(\"grid-nav\");",
          "50:   const graphNav = document.getElementById(\"graph-nav\");",
          "51:   const ganttNav = document.getElementById(\"gantt-nav\");",
          "52:   if (isGrid) {",
          "53:     if (tab === \"graph\") {",
          "54:       gridNav.classList.remove(\"active\");",
          "55:       ganttNav.classList.remove(\"active\");",
          "56:       graphNav.classList.add(\"active\");",
          "57:     } else if (tab === \"gantt\") {",
          "58:       gridNav.classList.remove(\"active\");",
          "59:       graphNav.classList.remove(\"active\");",
          "60:       ganttNav.classList.add(\"active\");",
          "61:     } else {",
          "62:       graphNav.classList.remove(\"active\");",
          "63:       ganttNav.classList.remove(\"active\");",
          "64:       gridNav.classList.add(\"active\");",
          "65:     }",
          "66:   }",
          "67: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   if (!singleDatasetUri) {",
          "51:     getDatasetTooltipInfo(dagId, run, setNextDatasets);",
          "52:   }",
          "53: });",
          "55: $(\"#pause_resume\").on(\"change\", function onChange() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   onTabChange();",
          "80: });",
          "83: const LOCATION_CHANGE = \"locationchange\";",
          "84: (function dispatchLocationEvent() {",
          "85:   const { pushState, replaceState } = window.history;",
          "87:   window.history.pushState = (...args) => {",
          "88:     pushState.apply(window.history, args);",
          "89:     window.dispatchEvent(new Event(LOCATION_CHANGE));",
          "90:   };",
          "92:   window.history.replaceState = (...args) => {",
          "93:     replaceState.apply(window.history, args);",
          "94:     window.dispatchEvent(new Event(LOCATION_CHANGE));",
          "95:   };",
          "97:   window.addEventListener(\"popstate\", () => {",
          "98:     window.dispatchEvent(new Event(LOCATION_CHANGE));",
          "99:   });",
          "100: })();",
          "102: window.addEventListener(LOCATION_CHANGE, () => {",
          "103:   onTabChange();",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts||airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts": [
          "File: airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts -> airflow/www/static/js/dag/details/taskInstance/Logs/utils.ts"
        ],
        "airflow/www/static/js/dag/grid/dagRuns/index.test.tsx||airflow/www/static/js/dag/grid/dagRuns/index.test.tsx": [
          "File: airflow/www/static/js/dag/grid/dagRuns/index.test.tsx -> airflow/www/static/js/dag/grid/dagRuns/index.test.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import React from \"react\";",
          "23: import { render } from \"@testing-library/react\";",
          "26: import { TableWrapper } from \"src/utils/testUtils\";",
          "27: import * as useGridDataModule from \"src/api/useGridData\";",
          "",
          "[Removed Lines]",
          "24: import moment from \"moment-timezone\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/nav/FilterBar.tsx||airflow/www/static/js/dag/nav/FilterBar.tsx": [
          "File: airflow/www/static/js/dag/nav/FilterBar.tsx -> airflow/www/static/js/dag/nav/FilterBar.tsx"
        ],
        "airflow/www/static/js/graph.js||airflow/www/static/js/graph.js": [
          "File: airflow/www/static/js/graph.js -> airflow/www/static/js/graph.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/static/js/task_instances.js||airflow/www/static/js/task_instances.js": [
          "File: airflow/www/static/js/task_instances.js -> airflow/www/static/js/task_instances.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   tt += generateTooltipDateTimes(ti.start_date, ti.end_date, dagTZ || \"UTC\");",
          "148:   return tt;",
          "149: }",
          "",
          "[Removed Lines]",
          "151: export function taskNoInstanceTooltip(taskId, task) {",
          "152:   let tt = \"\";",
          "153:   if (taskId) {",
          "154:     tt += `Task_id: ${escapeHtml(taskId)}<br>`;",
          "155:   }",
          "156:   if (task.operator_name !== undefined) {",
          "157:     tt += `Operator: ${escapeHtml(task.operator_name)}<br>`;",
          "158:   }",
          "159:   tt += \"<br><em>DAG has yet to run.</em>\";",
          "160:   return tt;",
          "161: }",
          "163: export function taskQueuedStateTooltip(ti) {",
          "164:   let tt = \"\";",
          "165:   tt += \"<strong>Status:</strong> Queued<br><br>\";",
          "166:   if (ti.task_id) {",
          "167:     tt += `Task_id: ${escapeHtml(ti.task_id)}<br>`;",
          "168:   }",
          "169:   tt += `Run: ${formatDateTime(ti.execution_date)}<br>`;",
          "170:   if (ti.run_id !== undefined) {",
          "171:     tt += `Run Id: <nobr>${escapeHtml(ti.run_id)}</nobr><br>`;",
          "172:   }",
          "173:   if (ti.operator_name !== undefined) {",
          "174:     tt += `Operator: ${escapeHtml(ti.operator_name)}<br>`;",
          "175:   }",
          "176:   if (ti.start_date && ti.queued_dttm) {",
          "177:     const startDate =",
          "178:       ti.start_date instanceof moment ? ti.start_date : moment(ti.start_date);",
          "179:     const queuedDate =",
          "180:       ti.queued_dttm instanceof moment",
          "181:         ? ti.queued_dttm",
          "182:         : moment(ti.queued_dttm);",
          "183:     const duration = startDate.diff(queuedDate, \"second\", true); // Set the floating point result flag to true.",
          "184:     tt += `Duration: ${escapeHtml(convertSecsToHumanReadable(duration))}<br>`;",
          "186:     tt += generateTooltipDateTimes(",
          "187:       ti.queued_dttm,",
          "188:       ti.start_date,",
          "189:       dagTZ || \"UTC\"",
          "190:     );",
          "191:   }",
          "192:   return tt;",
          "193: }",
          "195: window.tiTooltip = tiTooltip;",
          "196: window.taskNoInstanceTooltip = taskNoInstanceTooltip;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/templates/airflow/dag.html||airflow/www/templates/airflow/dag.html": [
          "File: airflow/www/templates/airflow/dag.html -> airflow/www/templates/airflow/dag.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     <div class=\"row\">",
          "185:       <div class=\"col-md-10\">",
          "186:         <ul class=\"nav nav-pills\">",
          "188:             <span class=\"material-icons\" aria-hidden=\"true\">grid_on</span>",
          "189:             Grid",
          "190:           </a></li>",
          "192:             <span class=\"material-icons\" aria-hidden=\"true\">account_tree</span>",
          "193:             Graph</a></li>",
          "194:           <li><a href=\"{{ url_for('Airflow.calendar', dag_id=dag.dag_id) }}\">",
          "",
          "[Removed Lines]",
          "187:           <li><a href=\"{{ url_for('Airflow.grid', dag_id=dag.dag_id, num_runs=num_runs_arg, root=root, base_date=base_date_arg) }}\">",
          "191:           <li><a href=\"{{ url_for('Airflow.graph', dag_id=dag.dag_id, root=root, num_runs=num_runs_arg, base_date=base_date_arg, execution_date=execution_date_arg) }}\">",
          "",
          "[Added Lines]",
          "187:           <li id=\"grid-nav\"><a href=\"{{ url_for('Airflow.grid', dag_id=dag.dag_id, num_runs=num_runs_arg, root=root, base_date=base_date_arg) }}\">",
          "191:           <li id=\"graph-nav\"><a href=\"{{ url_for('Airflow.graph', dag_id=dag.dag_id, root=root, num_runs=num_runs_arg, base_date=base_date_arg, execution_date=execution_date_arg) }}\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:           <li><a href=\"{{ url_for('Airflow.landing_times', dag_id=dag.dag_id, days=30, root=root, num_runs=num_runs_arg, base_date=base_date_arg) }}\">",
          "205:             <span class=\"material-icons\" aria-hidden=\"true\">flight_land</span>",
          "206:             Landing Times</a></li>",
          "208:             <span class=\"material-icons\" aria-hidden=\"true\">vertical_distribute</span>",
          "209:             Gantt</a></li>",
          "210:           <li><a href=\"{{ url_for('Airflow.dag_details', dag_id=dag.dag_id) }}\">",
          "",
          "[Removed Lines]",
          "207:           <li><a href=\"{{ url_for('Airflow.gantt', dag_id=dag.dag_id, root=root, num_runs=num_runs_arg, base_date=base_date_arg, execution_date=execution_date_arg) }}\">",
          "",
          "[Added Lines]",
          "207:           <li id=\"gantt-nav\"><a href=\"{{ url_for('Airflow.gantt', dag_id=dag.dag_id, root=root, num_runs=num_runs_arg, base_date=base_date_arg, execution_date=execution_date_arg) }}\">",
          "",
          "---------------"
        ],
        "airflow/www/templates/airflow/graph.html||airflow/www/templates/airflow/graph.html": [
          "File: airflow/www/templates/airflow/graph.html -> airflow/www/templates/airflow/graph.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: from sqlalchemy import Date, and_, case, desc, func, inspect, or_, select, union_all",
          "73: from sqlalchemy.exc import IntegrityError",
          "74: from sqlalchemy.orm import Session, joinedload",
          "77: import airflow",
          "78: from airflow import models, plugins_manager, settings",
          "",
          "[Removed Lines]",
          "75: from wtforms import SelectField, validators",
          "",
          "[Added Lines]",
          "75: from wtforms import validators",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:     DagRunEditForm,",
          "137:     DateTimeForm,",
          "138:     DateTimeWithNumRunsForm,",
          "140:     TaskInstanceEditForm,",
          "141:     create_connection_form_class,",
          "142: )",
          "",
          "[Removed Lines]",
          "139:     DateTimeWithNumRunsWithDagRunsForm,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3125:     @action_logging",
          "3126:     @provide_session",
          "3127:     def graph(self, dag_id: str, session: Session = NEW_SESSION):",
          "3129:         dag = get_airflow_app().dag_bag.get_dag(dag_id, session=session)",
          "3150:         dt_nr_dr_data = get_date_time_num_runs_dag_runs_form_data(request, session, dag)",
          "3153:         dttm = dt_nr_dr_data[\"dttm\"]",
          "3154:         dag_run = dag.get_dagrun(execution_date=dttm)",
          "3155:         dag_run_id = dag_run.run_id if dag_run else None",
          "3189:         }",
          "3228:     @expose(\"/duration\")",
          "3229:     @auth.has_access(",
          "",
          "[Removed Lines]",
          "3128:         \"\"\"Get DAG as Graph.\"\"\"",
          "3130:         dag_model = DagModel.get_dagmodel(dag_id, session=session)",
          "3131:         if not dag:",
          "3132:             flash(f'DAG \"{dag_id}\" seems to be missing.', \"error\")",
          "3133:             return redirect(url_for(\"Airflow.index\"))",
          "3135:         wwwutils.check_import_errors(dag.fileloc, session)",
          "3136:         wwwutils.check_dag_warnings(dag.dag_id, session)",
          "3138:         root = request.args.get(\"root\")",
          "3139:         if root:",
          "3140:             filter_upstream = request.args.get(\"filter_upstream\") == \"true\"",
          "3141:             filter_downstream = request.args.get(\"filter_downstream\") == \"true\"",
          "3142:             dag = dag.partial_subset(",
          "3143:                 task_ids_or_regex=root, include_upstream=filter_upstream, include_downstream=filter_downstream",
          "3144:             )",
          "3145:         arrange = request.args.get(\"arrange\", dag.orientation)",
          "3147:         nodes = task_group_to_dict(dag.task_group)",
          "3148:         edges = dag_edges(dag)",
          "3152:         dt_nr_dr_data[\"arrange\"] = arrange",
          "3157:         class GraphForm(DateTimeWithNumRunsWithDagRunsForm):",
          "3158:             \"\"\"Graph Form class.\"\"\"",
          "3160:             arrange = SelectField(",
          "3161:                 \"Layout\",",
          "3162:                 choices=(",
          "3163:                     (\"LR\", \"Left > Right\"),",
          "3164:                     (\"RL\", \"Right > Left\"),",
          "3165:                     (\"TB\", \"Top > Bottom\"),",
          "3166:                     (\"BT\", \"Bottom > Top\"),",
          "3167:                 ),",
          "3168:             )",
          "3170:         form = GraphForm(data=dt_nr_dr_data)",
          "3171:         form.execution_date.choices = dt_nr_dr_data[\"dr_choices\"]",
          "3173:         task_instances = {}",
          "3174:         for ti in dag.get_task_instances(dttm, dttm):",
          "3175:             if ti.task_id not in task_instances:",
          "3176:                 task_instances[ti.task_id] = wwwutils.get_instance_with_map(ti, session)",
          "3177:                 # Need to add operator_name explicitly because it's not a column in task_instances model.",
          "3178:                 task_instances[ti.task_id][\"operator_name\"] = ti.operator_name",
          "3179:         tasks = {",
          "3180:             t.task_id: {",
          "3181:                 \"dag_id\": t.dag_id,",
          "3182:                 \"task_type\": t.task_type,",
          "3183:                 \"operator_name\": t.operator_name,",
          "3184:                 \"extra_links\": t.extra_links,",
          "3185:                 \"is_mapped\": isinstance(t, MappedOperator),",
          "3186:                 \"trigger_rule\": t.trigger_rule,",
          "3187:             }",
          "3188:             for t in dag.tasks",
          "3190:         if not tasks:",
          "3191:             flash(\"No tasks found\", \"error\")",
          "3192:         session.commit()",
          "3193:         doc_md = wwwutils.wrapped_markdown(getattr(dag, \"doc_md\", None))",
          "3195:         task_log_reader = TaskLogReader()",
          "3196:         if task_log_reader.supports_external_link:",
          "3197:             external_log_name = task_log_reader.log_handler.log_name",
          "3198:         else:",
          "3199:             external_log_name = None",
          "3201:         state_priority = [\"no_status\" if p is None else p for p in wwwutils.priority]",
          "3203:         return self.render_template(",
          "3204:             \"airflow/graph.html\",",
          "3205:             dag=dag,",
          "3206:             form=form,",
          "3207:             dag_run_id=dag_run_id,",
          "3208:             execution_date=dttm.isoformat(),",
          "3209:             state_token=wwwutils.state_token(dt_nr_dr_data[\"dr_state\"]),",
          "3210:             doc_md=doc_md,",
          "3211:             arrange=arrange,",
          "3212:             operators=sorted(",
          "3213:                 {op.operator_name: op for op in dag.tasks}.values(), key=lambda x: x.operator_name",
          "3214:             ),",
          "3215:             root=root or \"\",",
          "3216:             task_instances=task_instances,",
          "3217:             tasks=tasks,",
          "3218:             nodes=nodes,",
          "3219:             edges=edges,",
          "3220:             show_external_log_redirect=task_log_reader.supports_external_link,",
          "3221:             external_log_name=external_log_name,",
          "3222:             dag_run_state=dt_nr_dr_data[\"dr_state\"],",
          "3223:             dag_model=dag_model,",
          "3224:             auto_refresh_interval=conf.getint(\"webserver\", \"auto_refresh_interval\"),",
          "3225:             state_priority=state_priority,",
          "3226:         )",
          "",
          "[Added Lines]",
          "3127:         \"\"\"Redirect to the replacement - grid + graph. Kept for backwards compatibility.\"\"\"",
          "3134:         kwargs = {",
          "3136:             \"dag_id\": dag_id,",
          "3137:             \"tab\": \"graph\",",
          "3138:             \"dag_run_id\": dag_run_id,",
          "3141:         return redirect(url_for(\"Airflow.grid\", **kwargs))",
          "",
          "---------------"
        ],
        "airflow/www/webpack.config.js||airflow/www/webpack.config.js": [
          "File: airflow/www/webpack.config.js -> airflow/www/webpack.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     dagDependencies: `${JS_DIR}/dag_dependencies.js`,",
          "66:     dags: [`${CSS_DIR}/dags.css`, `${JS_DIR}/dags.js`],",
          "67:     flash: `${CSS_DIR}/flash.css`,",
          "69:     loadingDots: `${CSS_DIR}/loading-dots.css`,",
          "70:     main: [`${CSS_DIR}/main.css`, `${JS_DIR}/main.js`],",
          "71:     materialIcons: `${CSS_DIR}/material-icons.css`,",
          "",
          "[Removed Lines]",
          "68:     graph: [`${CSS_DIR}/graph.css`, `${JS_DIR}/graph.js`],",
          "",
          "[Added Lines]",
          "68:     graph: `${CSS_DIR}/graph.css`,",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_decorators.py||tests/www/views/test_views_decorators.py": [
          "File: tests/www/views/test_views_decorators.py -> tests/www/views/test_views_decorators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: def test_action_logging_get(session, admin_client):",
          "102:     url = (",
          "104:         f\"execution_date={urllib.parse.quote_plus(str(EXAMPLE_DAG_DEFAULT_DATE))}\"",
          "105:     )",
          "106:     resp = admin_client.get(url, follow_redirects=True)",
          "109:     # In mysql backend, this commit() is needed to write down the logs",
          "110:     session.commit()",
          "111:     _check_last_log(",
          "112:         session,",
          "113:         dag_id=\"example_bash_operator\",",
          "115:         execution_date=EXAMPLE_DAG_DEFAULT_DATE,",
          "116:     )",
          "119: def test_action_logging_get_legacy_view(session, admin_client):",
          "120:     url = (",
          "122:         f\"execution_date={urllib.parse.quote_plus(str(EXAMPLE_DAG_DEFAULT_DATE))}\"",
          "123:     )",
          "124:     resp = admin_client.get(url, follow_redirects=True)",
          "127:     # In mysql backend, this commit() is needed to write down the logs",
          "128:     session.commit()",
          "129:     _check_last_log(",
          "130:         session,",
          "131:         dag_id=\"example_bash_operator\",",
          "133:         execution_date=EXAMPLE_DAG_DEFAULT_DATE,",
          "134:     )",
          "",
          "[Removed Lines]",
          "103:         f\"dags/example_bash_operator/graph?\"",
          "107:     check_content_in_response(\"runme_1\", resp)",
          "114:         event=\"graph\",",
          "121:         f\"graph?dag_id=example_bash_operator&\"",
          "125:     check_content_in_response(\"runme_1\", resp)",
          "132:         event=\"legacy_graph\",",
          "",
          "[Added Lines]",
          "103:         f\"dags/example_bash_operator/grid?\"",
          "107:     check_content_in_response(\"success\", resp)",
          "114:         event=\"grid\",",
          "121:         f\"tree?dag_id=example_bash_operator&\"",
          "125:     check_content_in_response(\"success\", resp)",
          "132:         event=\"legacy_tree\",",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_graph.py||tests/www/views/test_views_graph.py": [
          "File: tests/www/views/test_views_graph.py -> tests/www/views/test_views_graph.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_tasks.py||tests/www/views/test_views_tasks.py": [
          "File: tests/www/views/test_views_tasks.py -> tests/www/views/test_views_tasks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:             id=\"dag-details-subdag\",",
          "175:         ),",
          "176:         pytest.param(",
          "178:             [\"runme_1\"],",
          "180:         ),",
          "181:         pytest.param(",
          "185:         ),",
          "186:         pytest.param(",
          "187:             \"object/grid_data?dag_id=example_bash_operator\",",
          "",
          "[Removed Lines]",
          "177:             \"graph?dag_id=example_bash_operator\",",
          "179:             id=\"graph-url-param\",",
          "182:             \"dags/example_bash_operator/graph\",",
          "183:             [\"runme_1\"],",
          "184:             id=\"graph\",",
          "",
          "[Added Lines]",
          "177:             \"object/graph_data?dag_id=example_bash_operator\",",
          "179:             id=\"graph-data\",",
          "182:             \"object/graph_data?dag_id=example_subdag_operator.section-1\",",
          "183:             [\"section-1-task-1\"],",
          "184:             id=\"graph-data-subdag\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:     check_content_in_response(href, resp)",
          "374:     app.dag_bag.get_dag(\"test_tree_view\").create_dagrun(",
          "375:         run_type=DagRunType.SCHEDULED,",
          "376:         execution_date=DEFAULT_DATE,",
          "",
          "[Removed Lines]",
          "373: def test_graph_trigger_origin_graph_view(app, admin_client):",
          "",
          "[Added Lines]",
          "373: def test_graph_trigger_origin_grid_view(app, admin_client):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382:     url = \"/dags/test_tree_view/graph\"",
          "383:     resp = admin_client.get(url, follow_redirects=True)",
          "385:     href = f\"/dags/test_tree_view/trigger?{html.escape(urllib.parse.urlencode(params))}\"",
          "386:     check_content_in_response(href, resp)",
          "",
          "[Removed Lines]",
          "384:     params = {\"origin\": \"/dags/test_tree_view/graph\"}",
          "",
          "[Added Lines]",
          "384:     params = {\"origin\": \"/dags/test_tree_view/grid?tab=graph\"}",
          "385:     href = f\"/dags/test_tree_view/trigger?{html.escape(urllib.parse.urlencode(params))}\"",
          "386:     check_content_in_response(href, resp)",
          "389: def test_gantt_trigger_origin_grid_view(app, admin_client):",
          "390:     app.dag_bag.get_dag(\"test_tree_view\").create_dagrun(",
          "391:         run_type=DagRunType.SCHEDULED,",
          "392:         execution_date=DEFAULT_DATE,",
          "393:         data_interval=(DEFAULT_DATE, DEFAULT_DATE),",
          "394:         start_date=timezone.utcnow(),",
          "395:         state=State.RUNNING,",
          "396:     )",
          "398:     url = \"/dags/test_tree_view/gantt\"",
          "399:     resp = admin_client.get(url, follow_redirects=True)",
          "400:     params = {\"origin\": \"/dags/test_tree_view/grid?tab=gantt\"}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:     url = \"/dags/example_bash_operator/graph\"",
          "391:     resp = one_dag_perm_user_client.get(url, follow_redirects=True)",
          "392:     assert resp.status_code == 200",
          "394:     check_content_in_response(\"example_bash_operator\", resp)",
          "396:     url = \"/dags/example_xcom/graph\"",
          "",
          "[Removed Lines]",
          "393:     assert resp.request.url == \"http://localhost/dags/example_bash_operator/graph\"",
          "",
          "[Added Lines]",
          "409:     assert (",
          "410:         resp.request.url",
          "411:         == \"http://localhost/dags/example_bash_operator/grid?tab=graph&dag_run_id=TEST_DAGRUN\"",
          "412:     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6746f348f5c5f5ffbf76edd27f359e6b0f282a9",
      "candidate_info": {
        "commit_hash": "f6746f348f5c5f5ffbf76edd27f359e6b0f282a9",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/f6746f348f5c5f5ffbf76edd27f359e6b0f282a9",
        "files": [
          "airflow/www/templates/airflow/dag.html"
        ],
        "message": "remove legacy task instance modal (#33060)\n\n(cherry picked from commit b92370fe4d96ad0fb317779fc06ef865a22c40dd)",
        "before_after_code_files": [
          "airflow/www/templates/airflow/dag.html||airflow/www/templates/airflow/dag.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/templates/airflow/dag.html||airflow/www/templates/airflow/dag.html": [
          "File: airflow/www/templates/airflow/dag.html -> airflow/www/templates/airflow/dag.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     </div>",
          "243:   </div>",
          "244:   {{ dag_docs(doc_md) }}",
          "442:   <!-- Modal for dataset-triggered next run -->",
          "443:   {{ dataset_next_run_modal(id='dataset-next-run-modal') }}",
          "444: {% endblock %}",
          "",
          "[Removed Lines]",
          "245:   <!-- Modal for Task Instance -->",
          "246:   <div class=\"modal fade\" id=\"taskInstanceModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"taskInstanceModalLabel\" aria-hidden=\"true\">",
          "247:     <div class=\"modal-dialog\">",
          "248:       <div class=\"modal-content\">",
          "249:         <div class=\"modal-header\">",
          "250:           <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>",
          "251:           <h4 class=\"modal-title\" id=\"taskInstanceModalLabel\">",
          "252:             <span class=\"text-muted\">Task Instance:</span> <span id=\"task_id\"></span>",
          "253:             <br><span class=\"text-muted\">at:</span> <span id=\"execution_date\"></span>",
          "254:             <span id=\"modal_map_index\"><br><span class=\"text-muted\">Map Index:</span>",
          "255:               <span class=\"value\"></span>",
          "256:               <div class=\"dropdown\" id=\"mapped_dropdown\">",
          "257:                 <button class=\"btn btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">",
          "258:                   <span id=\"dropdown-label\" title=\"Select Mapped Instance\"></span>",
          "259:                   <span class=\"caret\"></span>",
          "260:                 </button>",
          "261:                 <ul class=\"dropdown-menu menu-scroll\"></ul>",
          "262:               </div>",
          "263:             </span>",
          "264:           </h4>",
          "265:         </div>",
          "266:         <div class=\"modal-body\">",
          "267:           <div id=\"div_btn_subdag\">",
          "268:             <a id=\"btn_subdag\" class=\"btn btn-primary\" data-base-url=\"{{ url_for('Airflow.' + dag.default_view, dag_id=dag.dag_id) }}\">",
          "269:               Zoom into Sub DAG",
          "270:             </a>",
          "271:             <hr>",
          "272:           </div>",
          "273:           <a id=\"btn_task\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('Airflow.task') }}\">",
          "274:             Instance Details",
          "275:           </a>",
          "276:           <a id=\"btn_rendered\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('Airflow.rendered_templates') }}\">",
          "277:             Rendered",
          "278:           </a>",
          "279:           {% if k8s_or_k8scelery_executor %}",
          "280:             <a id=\"btn_rendered_k8s\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('Airflow.rendered_k8s') }}\">",
          "281:               K8s Pod Spec",
          "282:             </a>",
          "283:           {% endif %}",
          "284:           <a id=\"btn_log\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('Airflow.log') }}\">",
          "285:             Log",
          "286:           </a>",
          "287:           <a id=\"btn_xcom\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('Airflow.xcom') }}\">",
          "288:             XCom",
          "289:           </a>",
          "290:           <a id=\"btn_mapped\" style=\"display: none;\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('TaskInstanceModelView.list') }}\">",
          "291:             List Instances, current run",
          "292:           </a>",
          "293:           <a id=\"btn_ti\" class=\"btn btn-sm\" data-base-url=\"{{ url_for('TaskInstanceModelView.list') }}\">",
          "294:             List Instances, all runs",
          "295:           </a>",
          "296:           <div class=\"dropdown\" style=\"display: inline\">",
          "297:             <button class=\"btn btn-sm dropdown-toggle\" type=\"button\" id=\"filterDropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">",
          "298:               Filter Tasks",
          "299:             </button>",
          "300:             <ul class=\"dropdown-menu\" aria-labelledby=\"filterDropdownMenuButton\">",
          "301:               <li><a id=\"btn_filter_upstream\" href=\"#\">Filter Upstream</a></li>",
          "302:               <li><a id=\"btn_filter_downstream\" href=\"#\">Filter Downstream</a></li>",
          "303:               <li><a id=\"btn_filter_upstream_downstream\" href=\"#\">Filter Upstream & Downstream</a></li>",
          "304:             </ul>",
          "305:           </div>",
          "306:           <hr>",
          "307:           <div id=\"dag_dl_logs\">",
          "308:             <label style=\"display:inline\">Download Log (by attempts):</label>",
          "309:             <ul class=\"nav nav-pills\" role=\"tablist\" id=\"try_index\" style=\"display:inline\">",
          "310:             </ul>",
          "311:             <hr>",
          "312:           </div>",
          "313:           {% if external_log_name is defined %}",
          "314:             <div id=\"dag_redir_logs\">",
          "315:               <label style=\"display:inline\"> View Logs in {{ external_log_name }} (by attempts):</label>",
          "316:               <ul class=\"nav nav-pills\" role=\"tablist\" id=\"redir_log_try_index\" style=\"display:inline\">",
          "317:               </ul>",
          "318:               <hr>",
          "319:               <hr>",
          "320:             </div>",
          "321:           {% endif %}",
          "322:           <h4 id=\"task_actions\">Task Actions</h4>",
          "323:           <form method=\"POST\" data-action=\"{{ url_for('Airflow.clear') }}\" id=\"clear_action\">",
          "324:             <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">",
          "325:             <input type=\"hidden\" name=\"dag_id\" value=\"{{ dag.dag_id }}\">",
          "326:             <input type=\"hidden\" name=\"task_id\">",
          "327:             <input type=\"hidden\" name=\"execution_date\">",
          "328:             <input type=\"hidden\" name=\"map_index\">",
          "329:             <input type=\"hidden\" name=\"origin\" value=\"{{ request.base_url }}\">",
          "330:             <div class=\"row\">",
          "331:               <span class=\"btn-group col-xs-12 col-sm-9 task-instance-modal-column\" data-toggle=\"buttons\">",
          "332:                 <label class=\"btn btn-default btn-sm\" title=\"Also include past task instances when clearing this one\">",
          "333:                   <input type=\"checkbox\" value=\"true\" name=\"past\" autocomplete=\"off\">",
          "334:                   Past",
          "335:                 </label>",
          "336:                 <label class=\"btn btn-default btn-sm\" title=\"Also include future task instances when clearing this one\">",
          "337:                   <input type=\"checkbox\" value=\"true\" name=\"future\" autocomplete=\"off\">",
          "338:                   Future",
          "339:                 </label>",
          "340:                 <label class=\"btn btn-default btn-sm\" title=\"Also include upstream dependencies\">",
          "341:                   <input type=\"checkbox\" value=\"true\" name=\"upstream\" autocomplete=\"off\">",
          "342:                   Upstream",
          "343:                 </label>",
          "344:                 <label class=\"btn btn-default btn-sm active\" title=\"Also include downstream dependencies\">",
          "345:                   <input type=\"checkbox\" value=\"true\" name=\"downstream\" checked autocomplete=\"off\">",
          "346:                   Downstream",
          "347:                 </label>",
          "348:                 <label class=\"btn btn-default btn-sm active\">",
          "349:                   <input type=\"checkbox\" value=\"true\" name=\"recursive\" checked autocomplete=\"off\">",
          "350:                   Recursive",
          "351:                 </label>",
          "352:                 <label class=\"btn btn-default btn-sm\" title=\"Only consider failed task instances when clearing this one\">",
          "353:                   <input type=\"checkbox\" value=\"true\" name=\"only_failed\" autocomplete=\"off\">",
          "354:                   Failed",
          "355:                 </label>",
          "356:               </span>",
          "357:               <span class=\"col-xs-12 col-sm-3 task-instance-modal-column\">",
          "358:                 <button type=\"submit\" id=\"btn_clear\" class=\"btn btn-primary btn-block\"",
          "359:                     title=\"Clearing deletes the previous state of the task instance, allowing it to get re-triggered by the scheduler or a backfill command\">",
          "360:                   Clear",
          "361:                 </button>",
          "362:               </span>",
          "363:             </div>",
          "364:             <hr style=\"margin-bottom: 8px;\">",
          "365:           </form>",
          "366:           <form method=\"GET\" data-action=\"{{ url_for('Airflow.confirm') }}\" id=\"failed_action\">",
          "367:             <input type=\"hidden\" name=\"dag_id\" value=\"{{ dag.dag_id }}\">",
          "368:             <input type=\"hidden\" name=\"task_id\">",
          "369:             <input type=\"hidden\" name=\"dag_run_id\">",
          "370:             <input type=\"hidden\" name=\"map_index\">",
          "371:             <input type=\"hidden\" name=\"origin\" value=\"{{ request.base_url }}\">",
          "372:             <input type=\"hidden\" name=\"state\" value=\"failed\">",
          "373:             <div class=\"row\">",
          "374:               <span class=\"btn-group col-xs-12 col-sm-9 task-instance-modal-column\" data-toggle=\"buttons\">",
          "375:                 <label class=\"btn btn-default\">",
          "376:                   <input type=\"checkbox\" value=\"true\" name=\"past\" autocomplete=\"off\">",
          "377:                   Past",
          "378:                 </label>",
          "379:                 <label class=\"btn btn-default\">",
          "380:                   <input type=\"checkbox\" value=\"true\" name=\"future\" autocomplete=\"off\">",
          "381:                   Future",
          "382:                 </label>",
          "383:                 <label class=\"btn btn-default\">",
          "384:                   <input type=\"checkbox\" value=\"true\" name=\"upstream\" autocomplete=\"off\">",
          "385:                   Upstream",
          "386:                 </label>",
          "387:                 <label class=\"btn btn-default\">",
          "388:                   <input type=\"checkbox\" value=\"true\" name=\"downstream\" autocomplete=\"off\">",
          "389:                   Downstream",
          "390:                 </label>",
          "391:               </span>",
          "392:               <span class=\"col-xs-12 col-sm-3 task-instance-modal-column\">",
          "393:                 <button type=\"submit\" id=\"btn_failed\" class=\"btn btn-primary btn-block\">",
          "394:                   Mark Failed",
          "395:                 </button>",
          "396:               </span>",
          "397:             </div>",
          "398:             <hr style=\"margin-bottom: 8px;\">",
          "399:           </form>",
          "400:           <form method=\"GET\" data-action=\"{{ url_for('Airflow.confirm') }}\" id=\"success_action\">",
          "401:             <input type=\"hidden\" name=\"dag_id\" value=\"{{ dag.dag_id }}\">",
          "402:             <input type=\"hidden\" name=\"task_id\">",
          "403:             <input type=\"hidden\" name=\"dag_run_id\">",
          "404:             <input type=\"hidden\" name=\"map_index\">",
          "405:             <input type=\"hidden\" name=\"origin\" value=\"{{ request.base_url }}\">",
          "406:             <input type=\"hidden\" name=\"state\" value=\"success\">",
          "407:             <div class=\"row\">",
          "408:               <span class=\"btn-group col-xs-12 col-sm-9 task-instance-modal-column\" data-toggle=\"buttons\">",
          "409:                 <label class=\"btn btn-default\">",
          "410:                   <input type=\"checkbox\" value=\"true\" name=\"past\" autocomplete=\"off\">",
          "411:                   Past",
          "412:                 </label>",
          "413:                 <label class=\"btn btn-default\">",
          "414:                   <input type=\"checkbox\" value=\"true\" name=\"future\" autocomplete=\"off\">",
          "415:                   Future",
          "416:                 </label>",
          "417:                 <label class=\"btn btn-default\">",
          "418:                   <input type=\"checkbox\" value=\"true\" name=\"upstream\" autocomplete=\"off\">",
          "419:                   Upstream",
          "420:                 </label>",
          "421:                 <label class=\"btn btn-default\">",
          "422:                   <input type=\"checkbox\" value=\"true\" name=\"downstream\" autocomplete=\"off\">",
          "423:                   Downstream",
          "424:                 </label>",
          "425:               </span>",
          "426:               <span class=\"col-xs-12 col-sm-3 task-instance-modal-column\">",
          "427:                 <button type=\"submit\" id=\"btn_success\" class=\"btn btn-primary btn-block\">",
          "428:                   Mark Success",
          "429:                 </button>",
          "430:               </span>",
          "431:             </div>",
          "432:           </form>",
          "433:           <hr>",
          "434:           <span class=\"btn-group\" id=\"extra_links\"></span>",
          "435:         </div>",
          "436:         <div class=\"modal-footer\">",
          "437:           <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>",
          "438:         </div>",
          "439:       </div>",
          "440:     </div>",
          "441:   </div>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bc036e1d9c6bb0cfcddee5677b2faa60b55f830",
      "candidate_info": {
        "commit_hash": "5bc036e1d9c6bb0cfcddee5677b2faa60b55f830",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/5bc036e1d9c6bb0cfcddee5677b2faa60b55f830",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/www/auth.py",
          "tests/www/test_security.py"
        ],
        "message": "Affix webserver access_denied warning to be configurable (#33022)\n\n* Affix webserver access_denied warning to be configurable\n\n(cherry picked from commit 12a760f6df831c1d53d035e4d169a69887e8bb26)",
        "before_after_code_files": [
          "airflow/www/auth.py||airflow/www/auth.py",
          "tests/www/test_security.py||tests/www/test_security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/auth.py||airflow/www/auth.py": [
          "File: airflow/www/auth.py -> airflow/www/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: T = TypeVar(\"T\", bound=Callable)",
          "31: def has_access(permissions: Sequence[tuple[str, str]] | None = None) -> Callable[[T], T]:",
          "32:     \"\"\"Factory for decorator that checks current user's permissions against required permissions.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: def get_access_denied_message():",
          "32:     return conf.get(\"webserver\", \"access_denied_message\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:                     403,",
          "60:                 )",
          "61:             else:",
          "63:                 flash(access_denied, \"danger\")",
          "64:             return redirect(get_auth_manager().get_url_login(next=request.url))",
          "",
          "[Removed Lines]",
          "62:                 access_denied = \"Access is Denied\"",
          "",
          "[Added Lines]",
          "66:                 access_denied = get_access_denied_message()",
          "",
          "---------------"
        ],
        "tests/www/test_security.py||tests/www/test_security.py": [
          "File: tests/www/test_security.py -> tests/www/test_security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import contextlib",
          "21: import datetime",
          "22: import logging",
          "23: from unittest import mock",
          "24: from unittest.mock import patch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: from airflow.auth.managers.fab.auth.anonymous_user import AnonymousUser",
          "33: from airflow.auth.managers.fab.fab_auth_manager import FabAuthManager",
          "34: from airflow.auth.managers.fab.models import User, assoc_permission_role",
          "35: from airflow.exceptions import AirflowException",
          "36: from airflow.models import DagModel",
          "37: from airflow.models.base import Base",
          "38: from airflow.models.dag import DAG",
          "39: from airflow.security import permissions",
          "40: from airflow.www import app as application",
          "41: from airflow.www.utils import CustomSQLAInterface",
          "42: from tests.test_utils.api_connexion_utils import (",
          "43:     create_user,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: from airflow.configuration import initialize_config",
          "43: from airflow.www.auth import get_access_denied_message",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "969:     assert len(users) == 1",
          "970:     delete_user(app, \"Test\")",
          "971:     assert \"Error adding new user to database\" in caplog.text",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "977: def test_default_access_denied_message():",
          "978:     initialize_config()",
          "979:     assert get_access_denied_message() == \"Access is Denied\"",
          "982: def test_custom_access_denied_message():",
          "983:     with mock.patch.dict(",
          "984:         os.environ,",
          "985:         {\"AIRFLOW__WEBSERVER__ACCESS_DENIED_MESSAGE\": \"My custom access denied message\"},",
          "986:         clear=True,",
          "987:     ):",
          "988:         initialize_config()",
          "989:         assert get_access_denied_message() == \"My custom access denied message\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}