{
  "cve_id": "CVE-2024-22231",
  "cve_desc": "Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead\u00a0a malicious attacker to create an arbitrary directory on a Salt master.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "689696858bddaefc655d1d94cd81e218662bef12",
      "candidate_info": {
        "commit_hash": "689696858bddaefc655d1d94cd81e218662bef12",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/689696858bddaefc655d1d94cd81e218662bef12",
        "files": [
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/files/check_imports.sls",
          "tests/pytests/pkg/files/check_python.py",
          "tests/pytests/pkg/integration/test_check_imports.py",
          "tests/pytests/pkg/integration/test_pip.py",
          "tests/pytests/pkg/integration/test_python.py",
          "tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_user.py",
          "tests/pytests/pkg/support/__init__.py",
          "tests/pytests/pkg/support/coverage/sitecustomize.py",
          "tests/pytests/pkg/support/helpers.py",
          "tests/pytests/pkg/support/paths.py",
          "tests/pytests/pkg/support/runtests.py",
          "tests/pytests/pkg/support/sminion.py",
          "tests/support/pkg.py"
        ],
        "message": "Reduce duplication, de-clutter, simplify\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/files/check_imports.sls||tests/pytests/pkg/files/check_imports.sls",
          "tests/pytests/pkg/files/check_python.py||tests/pytests/pkg/files/check_python.py",
          "tests/pytests/pkg/integration/test_check_imports.py||tests/pytests/pkg/integration/test_check_imports.py",
          "tests/pytests/pkg/integration/test_pip.py||tests/pytests/pkg/integration/test_pip.py",
          "tests/pytests/pkg/integration/test_python.py||tests/pytests/pkg/integration/test_python.py",
          "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py",
          "tests/pytests/pkg/support/coverage/sitecustomize.py||tests/pytests/pkg/support/coverage/sitecustomize.py",
          "tests/pytests/pkg/support/paths.py||tests/pytests/pkg/support/paths.py",
          "tests/pytests/pkg/support/runtests.py||tests/pytests/pkg/support/runtests.py",
          "tests/pytests/pkg/support/sminion.py||tests/pytests/pkg/support/sminion.py",
          "tests/pytests/pkg/support/helpers.py||tests/support/pkg.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: tests/pytests/pkg/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from saltfactories.utils.tempfiles import SaltPillarTree, SaltStateTree",
          "14: import salt.config",
          "25: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "15: from tests.pytests.pkg.support.helpers import (",
          "16:     CODE_DIR,",
          "17:     TESTS_DIR,",
          "18:     ApiRequest,",
          "19:     SaltMaster,",
          "20:     SaltMasterWindows,",
          "21:     SaltPkgInstall,",
          "22:     TestUser,",
          "23: )",
          "",
          "[Added Lines]",
          "15: from tests.conftest import CODE_DIR, TESTS_DIR",
          "16: from tests.support.pkg import ApiRequest, SaltMaster, SaltMasterWindows, SaltPkgInstall",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305: @pytest.fixture(scope=\"session\")",
          "307:     \"\"\"",
          "308:     Start up a master",
          "309:     \"\"\"",
          "",
          "[Removed Lines]",
          "306: def salt_master(salt_factories, install_salt, state_tree, pillar_tree):",
          "",
          "[Added Lines]",
          "299: def salt_master(",
          "300:     salt_factories, install_salt, state_tree, pillar_tree, pkg_tests_account",
          "301: ):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:         \"pillar_roots\": pillar_tree.as_dict(),",
          "328:         \"rest_cherrypy\": {\"port\": 8000, \"disable_ssl\": True},",
          "329:         \"netapi_enable_clients\": [\"local\"],",
          "331:         \"fips_mode\": FIPS_TESTRUN,",
          "332:         \"open_mode\": True,",
          "333:     }",
          "",
          "[Removed Lines]",
          "330:         \"external_auth\": {\"auto\": {\"saltdev\": [\".*\"]}},",
          "",
          "[Added Lines]",
          "325:         \"external_auth\": {",
          "326:             \"auto\": {",
          "327:                 pkg_tests_account.username: [",
          "328:                     \".*\",",
          "329:                 ],",
          "330:             },",
          "331:         },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "520:     return salt_minion.salt_call_cli()",
          "526:         yield account",
          "",
          "[Removed Lines]",
          "523: @pytest.fixture(scope=\"module\")",
          "524: def test_account(salt_call_cli):",
          "525:     with TestUser(salt_call_cli=salt_call_cli) as account:",
          "",
          "[Added Lines]",
          "524: @pytest.fixture(scope=\"session\")",
          "525: def pkg_tests_account():",
          "526:     with pytest.helpers.create_account() as account:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559: @pytest.fixture(scope=\"module\")",
          "562:         yield session",
          "",
          "[Removed Lines]",
          "560: def api_request(test_account, salt_api):",
          "561:     with ApiRequest(salt_api=salt_api, test_account=test_account) as session:",
          "",
          "[Added Lines]",
          "561: def api_request(pkg_tests_account, salt_api):",
          "562:     with ApiRequest(",
          "563:         port=salt_api.config[\"rest_cherrypy\"][\"port\"], account=pkg_tests_account",
          "564:     ) as session:",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/files/check_imports.sls||tests/pytests/pkg/files/check_imports.sls": [
          "File: tests/pytests/pkg/files/check_imports.sls -> tests/pytests/pkg/files/check_imports.sls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/files/check_python.py||tests/pytests/pkg/files/check_python.py": [
          "File: tests/pytests/pkg/files/check_python.py -> tests/pytests/pkg/files/check_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_check_imports.py||tests/pytests/pkg/integration/test_check_imports.py": [
          "File: tests/pytests/pkg/integration/test_check_imports.py -> tests/pytests/pkg/integration/test_check_imports.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: log = logging.getLogger(__name__)",
          "14:     \"\"\"",
          "15:     Test imports",
          "16:     \"\"\"",
          "18:     assert ret.returncode == 0",
          "19:     assert ret.data",
          "20:     result = MultiStateResult(raw=ret.data)",
          "",
          "[Removed Lines]",
          "13: def test_check_imports(salt_cli, salt_minion):",
          "17:     ret = salt_cli.run(\"state.sls\", \"check_imports\", minion_tgt=salt_minion.id)",
          "",
          "[Added Lines]",
          "13: CHECK_IMPORTS_SLS_CONTENTS = \"\"\"",
          "14: #!py",
          "15: import importlib",
          "17: def run():",
          "18:     config = {}",
          "19:     for test_import in [",
          "20:         'templates', 'platform', 'cli', 'executors', 'config', 'wheel', 'netapi',",
          "21:         'cache', 'proxy', 'transport', 'metaproxy', 'modules', 'tokens', 'matchers',",
          "22:         'acl', 'auth', 'log', 'engines', 'client', 'returners', 'runners', 'tops',",
          "23:         'output', 'daemons', 'thorium', 'renderers', 'states', 'cloud', 'roster',",
          "24:         'beacons', 'pillar', 'spm', 'utils', 'sdb', 'fileserver', 'defaults',",
          "25:         'ext', 'queues', 'grains', 'serializers'",
          "26:     ]:",
          "27:         try:",
          "28:             import_name = \"salt.{}\".format(test_import)",
          "29:             importlib.import_module(import_name)",
          "30:             config['test_imports_succeeded'] = {",
          "31:                 'test.succeed_without_changes': [",
          "32:                     {",
          "33:                         'name': import_name",
          "34:                     },",
          "35:                 ],",
          "36:             }",
          "37:         except ModuleNotFoundError as err:",
          "38:             config['test_imports_failed'] = {",
          "39:                 'test.fail_without_changes': [",
          "40:                     {",
          "41:                         'name': import_name,",
          "42:                         'comment': \"The imports test failed. The error was: {}\".format(err)",
          "43:                     },",
          "44:                 ],",
          "45:             }",
          "47:     for stdlib_import in [\"telnetlib\"]:",
          "48:         try:",
          "49:             importlib.import_module(stdlib_import)",
          "50:             config['stdlib_imports_succeeded'] = {",
          "51:                 'test.succeed_without_changes': [",
          "52:                     {",
          "53:                         'name': stdlib_import",
          "54:                     },",
          "55:                 ],",
          "56:             }",
          "57:         except ModuleNotFoundError as err:",
          "58:             config['stdlib_imports_failed'] = {",
          "59:                 'test.fail_without_changes': [",
          "60:                     {",
          "61:                         'name': stdlib_import,",
          "62:                         'comment': \"The stdlib imports test failed. The error was: {}\".format(err)",
          "63:                     },",
          "64:                 ],",
          "65:             }",
          "66:     return config",
          "67: \"\"\"",
          "70: @pytest.fixture",
          "71: def state_name(salt_master):",
          "72:     name = \"check-imports\"",
          "73:     with salt_master.state_tree.base.temp_file(",
          "74:         f\"{name}.sls\", CHECK_IMPORTS_SLS_CONTENTS",
          "75:     ):",
          "76:         yield name",
          "79: def test_check_imports(salt_cli, salt_minion, state_name):",
          "83:     ret = salt_cli.run(\"state.sls\", state_name, minion_tgt=salt_minion.id)",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_pip.py||tests/pytests/pkg/integration/test_pip.py": [
          "File: tests/pytests/pkg/integration/test_pip.py -> tests/pytests/pkg/integration/test_pip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             shutil.rmtree(dirname, ignore_errors=True)",
          "45: def test_pip_install(salt_call_cli, install_salt, shell):",
          "46:     \"\"\"",
          "47:     Test pip.install and ensure module can use installed library",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: @pytest.fixture",
          "46: def pkg_tests_account_environ(pkg_tests_account):",
          "47:     environ = os.environ.copy()",
          "48:     environ[\"LOGNAME\"] = environ[\"USER\"] = pkg_tests_account.username",
          "49:     environ[\"HOME\"] = pkg_tests_account.info.home",
          "50:     return environ",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     assert ret.returncode == 0",
          "102:     def result():",
          "103:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
          "104:         os.setgroups([])",
          "108:     return result",
          "111: @pytest.mark.skip_on_windows(reason=\"We can't easily demote users on Windows\")",
          "113:     if install_salt.classic:",
          "114:         pytest.skip(\"We can install non-root for classic packages\")",
          "115:     check_path = extras_pypath_bin / \"pep8\"",
          "",
          "[Removed Lines]",
          "101: def demote(user_uid, user_gid):",
          "105:         os.setgid(user_gid)",
          "106:         os.setuid(user_uid)",
          "112: def test_pip_non_root(shell, install_salt, test_account, extras_pypath_bin, pypath):",
          "",
          "[Added Lines]",
          "109: def demote(account):",
          "113:         os.setgid(account.info.gid)",
          "114:         os.setuid(account.info.uid)",
          "120: def test_pip_non_root(",
          "121:     shell,",
          "122:     install_salt,",
          "123:     pkg_tests_account,",
          "124:     extras_pypath_bin,",
          "125:     pypath,",
          "126:     pkg_tests_account_environ,",
          "127: ):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     # We should be able to issue a --help without being root",
          "119:     ret = subprocess.run(",
          "120:         install_salt.binary_paths[\"salt\"] + [\"--help\"],",
          "123:         stdout=subprocess.PIPE,",
          "124:         stderr=subprocess.PIPE,",
          "125:         check=False,",
          "",
          "[Removed Lines]",
          "121:         preexec_fn=demote(test_account.uid, test_account.gid),",
          "122:         env=test_account.env,",
          "",
          "[Added Lines]",
          "136:         preexec_fn=demote(pkg_tests_account),",
          "137:         env=pkg_tests_account_environ,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:     # Now, we should still not be able to install as non-root",
          "142:     ret = subprocess.run(",
          "143:         install_salt.binary_paths[\"pip\"] + [\"install\", \"pep8\"],",
          "146:         stdout=subprocess.PIPE,",
          "147:         stderr=subprocess.PIPE,",
          "148:         check=False,",
          "",
          "[Removed Lines]",
          "144:         preexec_fn=demote(test_account.uid, test_account.gid),",
          "145:         env=test_account.env,",
          "",
          "[Added Lines]",
          "159:         preexec_fn=demote(pkg_tests_account),",
          "160:         env=pkg_tests_account_environ,",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_python.py||tests/pytests/pkg/integration/test_python.py": [
          "File: tests/pytests/pkg/integration/test_python.py -> tests/pytests/pkg/integration/test_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import subprocess",
          "3: import pytest",
          "8: @pytest.fixture",
          "9: def python_script_bin(install_salt):",
          "",
          "[Removed Lines]",
          "5: from tests.pytests.pkg.support.helpers import TESTS_DIR",
          "",
          "[Added Lines]",
          "2: import textwrap",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     return install_salt.binary_paths[\"python\"]",
          "16: @pytest.mark.parametrize(\"exp_ret,user_arg\", [(1, \"false\"), (0, \"true\")])",
          "18:     ret = install_salt.proc.run(",
          "20:             python_script_bin",
          "21:             + [",
          "23:                 user_arg,",
          "24:             ]",
          "25:         ),",
          "",
          "[Removed Lines]",
          "17: def test_python_script(install_salt, exp_ret, user_arg, python_script_bin):",
          "22:                 str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\" / \"check_python.py\"),",
          "",
          "[Added Lines]",
          "15: @pytest.fixture",
          "16: def check_python_file(tmp_path):",
          "17:     script_path = tmp_path / \"check_python.py\"",
          "18:     script_path.write_text(",
          "19:         textwrap.dedent(",
          "20:             \"\"\"",
          "21:         import sys",
          "23:         import salt.utils.data",
          "25:         user_arg = sys.argv",
          "27:         if user_arg[1] == \"raise\":",
          "28:             raise Exception(\"test\")",
          "30:         if salt.utils.data.is_true(user_arg[1]):",
          "31:             sys.exit(0)",
          "32:         else:",
          "33:             sys.exit(1)",
          "34:         \"\"\"",
          "35:         )",
          "36:     )",
          "37:     return script_path",
          "41: def test_python_script(",
          "42:     install_salt, exp_ret, user_arg, python_script_bin, check_python_file",
          "43: ):",
          "48:                 str(check_python_file),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:     assert ret.returncode == exp_ret, ret.stderr",
          "36:     ret = install_salt.proc.run(",
          "38:             python_script_bin",
          "39:             + [",
          "41:                 \"raise\",",
          "42:             ]",
          "43:         ),",
          "",
          "[Removed Lines]",
          "35: def test_python_script_exception(install_salt, python_script_bin):",
          "40:                 str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\" / \"check_python.py\"),",
          "",
          "[Added Lines]",
          "61: def test_python_script_exception(install_salt, python_script_bin, check_python_file):",
          "66:                 str(check_python_file),",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py": [
          "File: tests/pytests/pkg/integration/test_salt_call.py -> tests/pytests/pkg/integration/test_salt_call.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: @pytest.mark.skip_on_windows()",
          "53:     \"\"\"",
          "54:     Test salt-call --local cmd_run id with runas",
          "55:     \"\"\"",
          "57:     assert \"Environment could not be retrieved for user\" not in caplog.text",
          "",
          "[Removed Lines]",
          "52: def test_salt_call_cmd_run_id_runas(salt_call_cli, test_account, caplog):",
          "56:     ret = salt_call_cli.run(\"--local\", \"cmd.run\", \"id\", runas=test_account.username)",
          "58:     assert str(test_account.uid) in ret.stdout",
          "59:     assert str(test_account.gid) in ret.stdout",
          "",
          "[Added Lines]",
          "52: def test_salt_call_cmd_run_id_runas(salt_call_cli, pkg_tests_account, caplog):",
          "56:     ret = salt_call_cli.run(",
          "57:         \"--local\", \"cmd.run\", \"id\", runas=pkg_tests_account.username",
          "58:     )",
          "60:     assert str(pkg_tests_account.info.uid) in ret.stdout",
          "61:     assert str(pkg_tests_account.info.gid) in ret.stdout",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py": [
          "File: tests/pytests/pkg/integration/test_salt_user.py -> tests/pytests/pkg/integration/test_salt_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: @pytest.mark.skip_if_binaries_missing(\"logrotate\")",
          "177: def test_paths_log_rotation(",
          "179: ):",
          "180:     \"\"\"",
          "181:     Test the correct ownership is assigned when log rotation occurs",
          "",
          "[Removed Lines]",
          "178:     salt_master, salt_minion, salt_call_cli, install_salt, test_account",
          "",
          "[Added Lines]",
          "178:     salt_master, salt_minion, salt_call_cli, install_salt, pkg_tests_account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:                                 \"file.replace\",",
          "268:                                 f\"{install_salt.conf_dir}/master\",",
          "269:                                 \"user: salt\",",
          "271:                                 \"flags=['IGNORECASE']\",",
          "272:                                 \"append_if_not_found=True\",",
          "273:                             )",
          "",
          "[Removed Lines]",
          "270:                                 f\"user: {test_account.username}\",",
          "",
          "[Added Lines]",
          "270:                                 f\"user: {pkg_tests_account.username}\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "276:                             # change ownership of appropriate paths to user",
          "277:                             for _path in log_pkg_paths:",
          "278:                                 chg_ownership_cmd = (",
          "280:                                 )",
          "281:                                 ret = salt_call_cli.run(",
          "282:                                     \"--local\", \"cmd.run\", chg_ownership_cmd",
          "",
          "[Removed Lines]",
          "279:                                     f\"chown -R {test_account.username} {_path}\"",
          "",
          "[Added Lines]",
          "279:                                     f\"chown -R {pkg_tests_account.username} {_path}\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:                                 for _path in log_files_list:",
          "318:                                     log_path = pathlib.Path(_path)",
          "319:                                     assert log_path.exists()",
          "321:                                     assert log_path.stat().st_mode & 0o7777 == 0o640",
          "323:                             # cleanup",
          "",
          "[Removed Lines]",
          "320:                                     assert log_path.owner() == test_account.username",
          "",
          "[Added Lines]",
          "320:                                     assert (",
          "321:                                         log_path.owner() == pkg_tests_account.username",
          "322:                                     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:                                 \"--local\",",
          "329:                                 \"file.replace\",",
          "330:                                 f\"{install_salt.conf_dir}/master\",",
          "332:                                 \"user: salt\",",
          "333:                                 \"flags=['IGNORECASE']\",",
          "334:                                 \"append_if_not_found=True\",",
          "",
          "[Removed Lines]",
          "331:                                 f\"user: {test_account.username}\",",
          "",
          "[Added Lines]",
          "333:                                 f\"user: {pkg_tests_account.username}\",",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/coverage/sitecustomize.py||tests/pytests/pkg/support/coverage/sitecustomize.py": [
          "File: tests/pytests/pkg/support/coverage/sitecustomize.py -> tests/pytests/pkg/support/coverage/sitecustomize.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/paths.py||tests/pytests/pkg/support/paths.py": [
          "File: tests/pytests/pkg/support/paths.py -> tests/pytests/pkg/support/paths.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/runtests.py||tests/pytests/pkg/support/runtests.py": [
          "File: tests/pytests/pkg/support/runtests.py -> tests/pytests/pkg/support/runtests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/sminion.py||tests/pytests/pkg/support/sminion.py": [
          "File: tests/pytests/pkg/support/sminion.py -> tests/pytests/pkg/support/sminion.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/helpers.py||tests/support/pkg.py": [
          "File: tests/pytests/pkg/support/helpers.py -> tests/support/pkg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from saltfactories.utils import cli_scripts",
          "32: import salt.utils.files",
          "49: ARTIFACTS_DIR = CODE_DIR / \"artifacts\" / \"pkg\"",
          "51: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "34: try:",
          "35:     import crypt",
          "37:     HAS_CRYPT = True",
          "38: except ImportError:",
          "39:     HAS_CRYPT = False",
          "40: try:",
          "41:     import pwd",
          "43:     HAS_PWD = True",
          "44: except ImportError:",
          "45:     HAS_PWD = False",
          "47: TESTS_DIR = pathlib.Path(__file__).resolve().parent.parent.parent.parent",
          "48: CODE_DIR = TESTS_DIR.parent",
          "",
          "[Added Lines]",
          "33: from tests.conftest import CODE_DIR",
          "34: from tests.support.pytest.helpers import TestAccount",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1451:         key.SaltKey.__attrs_post_init__(self)",
          "1526: @attr.s(kw_only=True, slots=True)",
          "1527: class ApiRequest:",
          "1530:     session: requests.Session = attr.ib(init=False, repr=False)",
          "1531:     api_uri: str = attr.ib(init=False)",
          "1532:     auth_data: Dict[str, str] = attr.ib(init=False)",
          "",
          "[Removed Lines]",
          "1454: @attr.s(kw_only=True, slots=True)",
          "1455: class TestUser:",
          "1456:     \"\"\"",
          "1457:     Add a test user",
          "1458:     \"\"\"",
          "1460:     salt_call_cli = attr.ib()",
          "1462:     username = attr.ib(default=\"saltdev\")",
          "1463:     # Must follow Windows Password Complexity requirements",
          "1464:     password = attr.ib(default=\"P@ssW0rd\")",
          "1465:     _pw_record = attr.ib(init=False, repr=False, default=None)",
          "1467:     def salt_call_local(self, *args):",
          "1468:         ret = self.salt_call_cli.run(\"--local\", *args)",
          "1469:         if ret.returncode != 0:",
          "1470:             log.error(ret)",
          "1471:         assert ret.returncode == 0",
          "1472:         return ret.data",
          "1474:     def add_user(self):",
          "1475:         log.debug(\"Adding system account %r\", self.username)",
          "1476:         if platform.is_windows():",
          "1477:             self.salt_call_local(\"user.add\", self.username, self.password)",
          "1478:         else:",
          "1479:             self.salt_call_local(\"user.add\", self.username)",
          "1480:             hash_passwd = crypt.crypt(self.password, crypt.mksalt(crypt.METHOD_SHA512))",
          "1481:             self.salt_call_local(\"shadow.set_password\", self.username, hash_passwd)",
          "1482:         assert self.username in self.salt_call_local(\"user.list_users\")",
          "1484:     def remove_user(self):",
          "1485:         log.debug(\"Removing system account %r\", self.username)",
          "1486:         if platform.is_windows():",
          "1487:             self.salt_call_local(",
          "1488:                 \"user.delete\", self.username, \"purge=True\", \"force=True\"",
          "1489:             )",
          "1490:         else:",
          "1491:             self.salt_call_local(\"user.delete\", self.username, \"remove=True\")",
          "1493:     @property",
          "1494:     def pw_record(self):",
          "1495:         if self._pw_record is None and HAS_PWD:",
          "1496:             self._pw_record = pwd.getpwnam(self.username)",
          "1497:         return self._pw_record",
          "1499:     @property",
          "1500:     def uid(self):",
          "1501:         if HAS_PWD:",
          "1502:             return self.pw_record.pw_uid",
          "1503:         return None",
          "1505:     @property",
          "1506:     def gid(self):",
          "1507:         if HAS_PWD:",
          "1508:             return self.pw_record.pw_gid",
          "1509:         return None",
          "1511:     @property",
          "1512:     def env(self):",
          "1513:         environ = os.environ.copy()",
          "1514:         environ[\"LOGNAME\"] = environ[\"USER\"] = self.username",
          "1515:         environ[\"HOME\"] = self.pw_record.pw_dir",
          "1516:         return environ",
          "1518:     def __enter__(self):",
          "1519:         self.add_user()",
          "1520:         return self",
          "1522:     def __exit__(self, *_):",
          "1523:         self.remove_user()",
          "1528:     salt_api: SaltApi = attr.ib(repr=False)",
          "1529:     test_account: TestUser = attr.ib(repr=False)",
          "",
          "[Added Lines]",
          "1443:     port: int = attr.ib(repr=False)",
          "1444:     account: TestAccount = attr.ib(repr=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1538:     @api_uri.default",
          "1539:     def _default_api_uri(self):",
          "1542:     @auth_data.default",
          "1543:     def _default_auth_data(self):",
          "1544:         return {",
          "1547:             \"eauth\": \"auto\",",
          "1548:             \"out\": \"json\",",
          "1549:         }",
          "",
          "[Removed Lines]",
          "1540:         return f\"http://localhost:{self.salt_api.config['rest_cherrypy']['port']}\"",
          "1545:             \"username\": self.test_account.username,",
          "1546:             \"password\": self.test_account.password,",
          "",
          "[Added Lines]",
          "1455:         return f\"http://localhost:{self.port}\"",
          "1460:             \"username\": self.account.username,",
          "1461:             \"password\": self.account.password,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d5e47a10e9860e7ee7a2f13e2c4d3c8b6941011",
      "candidate_info": {
        "commit_hash": "4d5e47a10e9860e7ee7a2f13e2c4d3c8b6941011",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/4d5e47a10e9860e7ee7a2f13e2c4d3c8b6941011",
        "files": [
          ".github/workflows/build-deps-ci-action.yml",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja"
        ],
        "message": "Revert \"Use windows self hosted runners to build CI deps\"\n\nThis reverts commit f99055beb9cf867493a81ab9c60c4ce3c653b1f0.\n\nWe would have to enable cross os caches(probably)",
        "before_after_code_files": [
          ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja": [
          "File: .github/workflows/templates/build-deps-ci-action.yml.jinja -> .github/workflows/templates/build-deps-ci-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   windows-dependencies:",
          "249:     name: Windows",
          "251:     timeout-minutes: 90",
          "252:     strategy:",
          "253:       fail-fast: false",
          "",
          "[Removed Lines]",
          "250:     runs-on: ${{ matrix.distro-slug }}",
          "",
          "[Added Lines]",
          "250:     runs-on:",
          "251:       - self-hosted",
          "252:       - linux",
          "253:       - bastion",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:       - name: \"Throttle Builds\"",
          "263:         shell: bash",
          "264:         run: |",
          "267:       - name: Checkout Source Code",
          "268:         uses: actions/checkout@v4",
          "",
          "[Removed Lines]",
          "265:           t=$(python3 -c 'import random, sys; sys.stdout.write(str(random.randint(1, 15)))'); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "",
          "[Added Lines]",
          "268:           t=$(shuf -i 1-30 -n 1); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:           cd artifacts",
          "290:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "293:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "295:         with:",
          "299:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "300:         run: |",
          "303:       - name: Install Dependencies",
          "304:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "308:         run: |",
          "311:       - name: Cleanup .nox Directory",
          "312:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "313:         run: |",
          "316:       - name: Compress .nox Directory",
          "317:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "318:         run: |",
          "321:       - name: Upload Nox Requirements Tarball",
          "322:         uses: actions/upload-artifact@v3",
          "",
          "[Removed Lines]",
          "292:       - name: Set up Python ${{ inputs.python-version }}",
          "294:         uses: actions/setup-python@v4",
          "296:           python-version: \"${{ inputs.python-version }}\"",
          "298:       - name: Install Nox",
          "301:           python3 -m pip install 'nox==${{ inputs.nox-version }}'",
          "305:         env:",
          "306:           PRINT_TEST_SELECTION: \"0\"",
          "307:           PRINT_SYSTEM_INFO: \"0\"",
          "309:           nox --install-only -e ${{ inputs.nox-session }}",
          "314:           nox --force-color -e \"pre-archive-cleanup(pkg=False)\"",
          "319:           nox --force-color -e compress-dependencies -- windows ${{ matrix.arch }}",
          "",
          "[Added Lines]",
          "295:       - name: PyPi Proxy",
          "297:         run: |",
          "298:           sed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\\n;' requirements/static/ci/*/*.txt",
          "300:       - name: Setup Python Tools Scripts",
          "301:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "302:         uses: ./.github/actions/setup-python-tools-scripts",
          "304:           cache-prefix: ${{ inputs.cache-prefix }}-build-deps-ci",
          "306:       - name: Get Salt Project GitHub Actions Bot Environment",
          "309:           TOKEN=$(curl -sS -f -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 30\")",
          "310:           SPB_ENVIRONMENT=$(curl -sS -f -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/tags/instance/spb:environment)",
          "311:           echo \"SPB_ENVIRONMENT=$SPB_ENVIRONMENT\" >> \"$GITHUB_ENV\"",
          "313:       - name: Start VM",
          "314:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "315:         id: spin-up-vm",
          "316:         run: |",
          "317:           tools --timestamps vm create --environment \"${SPB_ENVIRONMENT}\" --retries=2 ${{ matrix.distro-slug }}",
          "319:       - name: List Free Space",
          "320:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "321:         run: |",
          "322:           tools --timestamps vm ssh ${{ matrix.distro-slug }} -- df -h || true",
          "324:       - name: Upload Checkout To VM",
          "325:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "326:         run: |",
          "327:           tools --timestamps vm rsync ${{ matrix.distro-slug }}",
          "332:           tools --timestamps vm install-dependencies --nox-session=${{ inputs.nox-session }} ${{ matrix.distro-slug }}",
          "337:           tools --timestamps vm pre-archive-cleanup ${{ matrix.distro-slug }}",
          "342:           tools --timestamps vm compress-dependencies ${{ matrix.distro-slug }}",
          "344:       - name: Download Compressed .nox Directory",
          "345:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "346:         run: |",
          "347:           tools --timestamps vm download-dependencies ${{ matrix.distro-slug }}",
          "349:       - name: Destroy VM",
          "350:         if: always() && steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "351:         run: |",
          "352:           tools --timestamps vm destroy --no-wait ${{ matrix.distro-slug }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a21a5adc381d37aa0152e24730e8d013a526823f",
      "candidate_info": {
        "commit_hash": "a21a5adc381d37aa0152e24730e8d013a526823f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a21a5adc381d37aa0152e24730e8d013a526823f",
        "files": [
          "changelog/65759.fixed.md",
          "salt/netapi/rest_tornado/saltnado.py"
        ],
        "message": "Fix un-closed tranport in tornado netapi",
        "before_after_code_files": [
          "salt/netapi/rest_tornado/saltnado.py||salt/netapi/rest_tornado/saltnado.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/netapi/rest_tornado/saltnado.py||salt/netapi/rest_tornado/saltnado.py": [
          "File: salt/netapi/rest_tornado/saltnado.py -> salt/netapi/rest_tornado/saltnado.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:                     )",
          "397:                     del self.timeout_map[future]",
          "400: class BaseSaltAPIHandler(salt.ext.tornado.web.RequestHandler):  # pylint: disable=W0223",
          "401:     ct_out_map = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     def destroy(self):",
          "400:         self.event.destroy()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:         self.timeout_futures()",
          "511:         # clear local_client objects to disconnect event publisher's IOStream connections",
          "512:         del self.saltclients",
          "514:     def on_connection_close(self):",
          "515:         \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516:         self.application.event_listener.destroy()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3366ba233facfec3d725d31b1acdfc1db32fb634",
      "candidate_info": {
        "commit_hash": "3366ba233facfec3d725d31b1acdfc1db32fb634",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/3366ba233facfec3d725d31b1acdfc1db32fb634",
        "files": [
          "tools/testsuite/__init__.py"
        ],
        "message": "It's a single `nox.*.tar.xz` archive now\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/testsuite/__init__.py||tools/testsuite/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/testsuite/__init__.py||tools/testsuite/__init__.py": [
          "File: tools/testsuite/__init__.py -> tools/testsuite/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     if exitcode and exitcode != ExitCode.SOFT_FAIL:",
          "152:         ctx.exit(exitcode)",
          "153:     if pkg:",
          "163:         exitcode = tools.utils.gh.download_pkgs_artifact(",
          "164:             ctx,",
          "165:             run_id=run_id,",
          "",
          "[Removed Lines]",
          "154:         exitcode = tools.utils.gh.download_nox_artifact(",
          "155:             ctx,",
          "156:             run_id=run_id,",
          "157:             slug=slug,",
          "158:             nox_env=f\"test-pkgs-onedir-{arch}\",",
          "159:             repository=repository,",
          "160:         )",
          "161:         if exitcode and exitcode != ExitCode.SOFT_FAIL:",
          "162:             ctx.exit(exitcode)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c389db4f4545d720ab430eed81d2f214d4878ab",
      "candidate_info": {
        "commit_hash": "2c389db4f4545d720ab430eed81d2f214d4878ab",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/2c389db4f4545d720ab430eed81d2f214d4878ab",
        "files": [
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/support/helpers.py",
          "tests/support/pytest/helpers.py"
        ],
        "message": "Remove some duplicate fixtures\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/support/helpers.py||tests/pytests/pkg/support/helpers.py",
          "tests/support/pytest/helpers.py||tests/support/pytest/helpers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: tests/pytests/pkg/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     SaltPkgInstall,",
          "22:     TestUser,",
          "23: )",
          "26: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "24: from tests.support.sminion import create_sminion",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     return install_salt.version",
          "50: @pytest.fixture(scope=\"session\", autouse=True)",
          "51: def _system_up_to_date(",
          "52:     grains,",
          "",
          "[Removed Lines]",
          "40: @pytest.fixture(scope=\"session\")",
          "41: def sminion():",
          "42:     return create_sminion()",
          "45: @pytest.fixture(scope=\"session\")",
          "46: def grains(sminion):",
          "47:     return sminion.opts[\"grains\"].copy()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=True)",
          "512:     factory.after_terminate(",
          "514:     )",
          "515:     with factory.started(start_timeout=start_timeout):",
          "516:         yield factory",
          "",
          "[Removed Lines]",
          "513:         pytest.helpers.remove_stale_minion_key_pkg, salt_master, factory.id",
          "",
          "[Added Lines]",
          "502:         pytest.helpers.remove_stale_minion_key, salt_master, factory.id",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/helpers.py||tests/pytests/pkg/support/helpers.py": [
          "File: tests/pytests/pkg/support/helpers.py -> tests/pytests/pkg/support/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1559:         self.session.__exit__(*args)",
          "1596: @pytest.helpers.register",
          "1597: def download_file(url, dest, auth=None):",
          "1598:     # NOTE the stream=True parameter below",
          "",
          "[Removed Lines]",
          "1562: @pytest.helpers.register",
          "1563: def remove_stale_minion_key_pkg(master, minion_id):",
          "1564:     key_path = os.path.join(master.config[\"pki_dir\"], \"minions\", minion_id)",
          "1565:     if os.path.exists(key_path):",
          "1566:         os.unlink(key_path)",
          "1567:     else:",
          "1568:         log.debug(\"The minion(id=%r) key was not found at %s\", minion_id, key_path)",
          "1571: @pytest.helpers.register",
          "1572: def remove_stale_master_key(master):",
          "1573:     keys_path = os.path.join(master.config[\"pki_dir\"], \"master\")",
          "1574:     for key_name in (\"master.pem\", \"master.pub\"):",
          "1575:         key_path = os.path.join(keys_path, key_name)",
          "1576:         if os.path.exists(key_path):",
          "1577:             os.unlink(key_path)",
          "1578:         else:",
          "1579:             log.debug(",
          "1580:                 \"The master(id=%r) %s key was not found at %s\",",
          "1581:                 master.id,",
          "1582:                 key_name,",
          "1583:                 key_path,",
          "1584:             )",
          "1585:     key_path = os.path.join(master.config[\"pki_dir\"], \"minion\", \"minion_master.pub\")",
          "1586:     if os.path.exists(key_path):",
          "1587:         os.unlink(key_path)",
          "1588:     else:",
          "1589:         log.debug(",
          "1590:             \"The master(id=%r) minion_master.pub key was not found at %s\",",
          "1591:             master.id,",
          "1592:             key_path,",
          "1593:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/support/pytest/helpers.py||tests/support/pytest/helpers.py": [
          "File: tests/support/pytest/helpers.py -> tests/support/pytest/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         log.debug(\"The minion(id=%r) key was not found at %s\", minion_id, key_path)",
          "177: @pytest.helpers.register",
          "178: def remove_stale_proxy_minion_cache_file(proxy_minion, minion_id=None):",
          "179:     cachefile = os.path.join(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: @pytest.helpers.register",
          "178: def remove_stale_master_key(master):",
          "179:     keys_path = os.path.join(master.config[\"pki_dir\"], \"master\")",
          "180:     for key_name in (\"master.pem\", \"master.pub\"):",
          "181:         key_path = os.path.join(keys_path, key_name)",
          "182:         if os.path.exists(key_path):",
          "183:             os.unlink(key_path)",
          "184:         else:",
          "185:             log.debug(",
          "186:                 \"The master(id=%r) %s key was not found at %s\",",
          "187:                 master.id,",
          "188:                 key_name,",
          "189:                 key_path,",
          "190:             )",
          "191:     key_path = os.path.join(master.config[\"pki_dir\"], \"minion\", \"minion_master.pub\")",
          "192:     if os.path.exists(key_path):",
          "193:         os.unlink(key_path)",
          "194:     else:",
          "195:         log.debug(",
          "196:             \"The master(id=%r) minion_master.pub key was not found at %s\",",
          "197:             master.id,",
          "198:             key_path,",
          "199:         )",
          "",
          "---------------"
        ]
      }
    }
  ]
}