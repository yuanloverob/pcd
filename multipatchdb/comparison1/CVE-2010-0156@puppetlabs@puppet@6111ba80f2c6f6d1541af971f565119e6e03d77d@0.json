{
  "cve_id": "CVE-2010-0156",
  "cve_desc": "Puppet 0.24.x before 0.24.9 and 0.25.x before 0.25.2 allows local users to overwrite arbitrary files via a symlink attack on the (1) /tmp/daemonout, (2) /tmp/puppetdoc.txt, (3) /tmp/puppetdoc.tex, or (4) /tmp/puppetdoc.aux temporary file.",
  "repo": "puppetlabs/puppet",
  "patch_hash": "6111ba80f2c6f6d1541af971f565119e6e03d77d",
  "patch_info": {
    "commit_hash": "6111ba80f2c6f6d1541af971f565119e6e03d77d",
    "repo": "puppetlabs/puppet",
    "commit_url": "https://github.com/puppetlabs/puppet/commit/6111ba80f2c6f6d1541af971f565119e6e03d77d",
    "files": [
      "lib/puppet/daemon.rb",
      "lib/puppet/network/server.rb",
      "lib/puppet/rails/benchmark.rb",
      "lib/puppet/util.rb",
      "lib/puppet/util/reference.rb"
    ],
    "message": "Fix for temporary file security whole\n\nWe create temporary files in /tmp/ with predictable names.  These\ncould be used by an attacker to DoS a box by setting a symlink to\nsome other file (say, /etc/shadow) and waiting for us to overwrite\nit.\n\nThe minimalistic solution employed by this patch is to wrap all such\nfile writing with a paranoid wrapper that:\n\n1) Check to see if the target exists\n2) Issues a warning if it was a symlink\n3) Deletes it\n4) Waits (0.1 seconds if it was a file, 5 seconds if it was a symlink)\n5) Opens the file with EXCL, which will fail if the file has come back.\n\nIf this succeeds (as it normally will) it has exactly the same semantics\nas the original code (a must, as we are right at a release boundary).\nHowever, under no circumstances will it follow a preexisting symlink (the\noperating system guarantees this with EXCL) so the danger of an exploit\nhas been converted into the possibility of a failure, with an appropriate\nwarning.",
    "before_after_code_files": [
      "lib/puppet/daemon.rb||lib/puppet/daemon.rb",
      "lib/puppet/network/server.rb||lib/puppet/network/server.rb",
      "lib/puppet/rails/benchmark.rb||lib/puppet/rails/benchmark.rb",
      "lib/puppet/util.rb||lib/puppet/util.rb",
      "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb"
    ]
  },
  "patch_diff": {
    "lib/puppet/daemon.rb||lib/puppet/daemon.rb": [
      "File: lib/puppet/daemon.rb -> lib/puppet/daemon.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:             $stderr.reopen $stdout",
      "32:             Puppet::Util::Log.reopen",
      "33:         rescue => detail",
      "35:                 f.puts \"Could not start %s: %s\" % [Puppet[:name], detail]",
      "36:             }",
      "38:             exit(12)",
      "39:         end",
      "40:     end",
      "",
      "[Removed Lines]",
      "34:             File.open(\"/tmp/daemonout\", \"w\") { |f|",
      "37:             Puppet.err \"Could not start %s: %s\" % [Puppet[:name], detail]",
      "",
      "[Added Lines]",
      "34:             Puppet.err \"Could not start %s: %s\" % [Puppet[:name], detail]",
      "35:             Puppet::Util::secure_open(\"/tmp/daemonout\", \"w\") { |f|",
      "",
      "---------------"
    ],
    "lib/puppet/network/server.rb||lib/puppet/network/server.rb": [
      "File: lib/puppet/network/server.rb -> lib/puppet/network/server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:             $stderr.reopen $stdout",
      "23:             Puppet::Util::Log.reopen",
      "24:         rescue => detail",
      "26:                 f.puts \"Could not start %s: %s\" % [Puppet[:name], detail]",
      "27:             }",
      "28:             raise \"Could not start %s: %s\" % [Puppet[:name], detail]",
      "",
      "[Removed Lines]",
      "25:             File.open(\"/tmp/daemonout\", \"w\") { |f|",
      "",
      "[Added Lines]",
      "25:             Puppet::Util.secure_open(\"/tmp/daemonout\", \"w\") { |f|",
      "",
      "---------------"
    ],
    "lib/puppet/rails/benchmark.rb||lib/puppet/rails/benchmark.rb": [
      "File: lib/puppet/rails/benchmark.rb -> lib/puppet/rails/benchmark.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:             data = {}",
      "65:         end",
      "66:         data[branch] = $benchmarks",
      "68:     end",
      "69: end",
      "",
      "[Removed Lines]",
      "67:         File.open(file, \"w\") { |f| f.print YAML.dump(data) }",
      "",
      "[Added Lines]",
      "67:         Puppet::Util.secure_open(file, \"w\") { |f| f.print YAML.dump(data) }",
      "",
      "---------------"
    ],
    "lib/puppet/util.rb||lib/puppet/util.rb": [
      "File: lib/puppet/util.rb -> lib/puppet/util.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "407:     end",
      "409:     module_function :memory, :thinmark",
      "410: end",
      "411: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "411:     def secure_open(file,must_be_w,&block)",
      "412:         raise Puppet::DevError,\"secure_open only works with mode 'w'\" unless must_be_w == 'w'",
      "413:         raise Puppet::DevError,\"secure_open only requires a block\"    unless block_given?",
      "414:         Puppet.warning \"#{file} was a symlink to #{File.readlink(file)}\" if File.symlink?(file)",
      "415:         if File.exists?(file) or File.symlink?(file)",
      "416:             wait = File.symlink?(file) ? 5.0 : 0.1",
      "417:             File.delete(file)",
      "418:             sleep wait # give it a chance to reappear, just in case someone is actively trying something.",
      "419:         end",
      "420:         begin",
      "421:             File.open(file,File::CREAT|File::EXCL|File::TRUNC|File::WRONLY,&block)",
      "422:         rescue Errno::EEXIST",
      "423:             desc = File.symlink?(file) ? \"symlink to #{File.readlink(file)}\" : File.stat(file).ftype",
      "424:             puts \"Warning: #{file} was apparently created by another process (as\"",
      "425:             puts \"a #{desc}) as soon as it was deleted by this process.  Someone may be trying\"",
      "426:             puts \"to do something objectionable (such as tricking you into overwriting system\"",
      "427:             puts \"files if you are running as root).\"",
      "428:             raise",
      "429:         end",
      "430:     end",
      "431:     module_function :secure_open",
      "",
      "---------------"
    ],
    "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb": [
      "File: lib/puppet/util/reference.rb -> lib/puppet/util/reference.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:     def self.pdf(text)",
      "38:         puts \"creating pdf\"",
      "40:             f.puts text",
      "41:         end",
      "42:         rst2latex = %x{which rst2latex}",
      "",
      "[Removed Lines]",
      "39:         File.open(\"/tmp/puppetdoc.txt\", \"w\") do |f|",
      "",
      "[Added Lines]",
      "39:         Puppet::Util.secure_open(\"/tmp/puppetdoc.txt\", \"w\") do |f|",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:         end",
      "49:         rst2latex.chomp!",
      "50:         cmd = %{#{rst2latex} /tmp/puppetdoc.txt > /tmp/puppetdoc.tex}",
      "51:         output = %x{#{cmd}}",
      "52:         unless $? == 0",
      "53:             $stderr.puts \"rst2latex failed\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:         Puppet::Util.secure_open(\"/tmp/puppetdoc.tex\",\"w\") do |f|",
      "52:             # If we get here without an error, /tmp/puppetdoc.tex isn't a tricky cracker's symlink",
      "53:         end",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "67:         puts \"Creating markdown for #{name} reference.\"",
      "68:         dir = \"/tmp/\" + Puppet::PUPPETVERSION",
      "69:         FileUtils.mkdir(dir) unless File.directory?(dir)",
      "71:             f.puts text",
      "72:         end",
      "73:         pandoc = %x{which pandoc}",
      "",
      "[Removed Lines]",
      "70:         File.open(dir + \"/\" + \"#{name}.rst\", \"w\") do |f|",
      "",
      "[Added Lines]",
      "73:         Puppet::Util.secure_open(dir + \"/\" + \"#{name}.rst\", \"w\") do |f|",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "190:     end",
      "192:     def trac",
      "194:             f.puts self.to_trac",
      "195:         end",
      "",
      "[Removed Lines]",
      "193:         File.open(\"/tmp/puppetdoc.txt\", \"w\") do |f|",
      "",
      "[Added Lines]",
      "196:         Puppet::Util.secure_open(\"/tmp/puppetdoc.txt\", \"w\") do |f|",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "042689e06bcee2882a2937b2caeab4529ae5c048",
      "candidate_info": {
        "commit_hash": "042689e06bcee2882a2937b2caeab4529ae5c048",
        "repo": "puppetlabs/puppet",
        "commit_url": "https://github.com/puppetlabs/puppet/commit/042689e06bcee2882a2937b2caeab4529ae5c048",
        "files": [
          "lib/puppet/rails.rb",
          "lib/puppet/rails/benchmark.rb",
          "lib/puppet/rails/host.rb",
          "lib/puppet/rails/resource.rb"
        ],
        "message": "Adding a Rails-specific benchmarking module\n\nThis just slightly simplifies adding lots of time-debug\nstuff in Rails.\n\nSigned-off-by: Luke Kanies <luke@madstop.com>",
        "before_after_code_files": [
          "lib/puppet/rails.rb||lib/puppet/rails.rb",
          "lib/puppet/rails/benchmark.rb||lib/puppet/rails/benchmark.rb",
          "lib/puppet/rails/host.rb||lib/puppet/rails/host.rb",
          "lib/puppet/rails/resource.rb||lib/puppet/rails/resource.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/puppet/rails/benchmark.rb||lib/puppet/rails/benchmark.rb"
          ],
          "candidate": [
            "lib/puppet/rails/benchmark.rb||lib/puppet/rails/benchmark.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puppet/rails.rb||lib/puppet/rails.rb": [
          "File: lib/puppet/rails.rb -> lib/puppet/rails.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: require 'puppet'",
          "6: module Puppet::Rails",
          "8:     def self.connect",
          "9:         # This global init does not work for testing, because we remove",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:     TIME_DEBUG = true",
          "",
          "---------------"
        ],
        "lib/puppet/rails/benchmark.rb||lib/puppet/rails/benchmark.rb": [
          "File: lib/puppet/rails/benchmark.rb -> lib/puppet/rails/benchmark.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: require 'benchmark'",
          "2: module Puppet::Rails::Benchmark",
          "3:     $benchmarks = {:accumulated => {}}",
          "5:     def time_debug?",
          "6:         Puppet::Rails::TIME_DEBUG",
          "7:     end",
          "9:     def railsmark(message)",
          "10:         result = nil",
          "11:         seconds = Benchmark.realtime { result = yield }",
          "12:         Puppet.debug(message + \" in %0.2f seconds\" % seconds)",
          "14:         $benchmarks[message] = seconds if time_debug?",
          "15:         result",
          "16:     end",
          "18:     def sometimes_benchmark(message)",
          "19:         unless Puppet::Rails::TIME_DEBUG",
          "20:             return yield",
          "21:         end",
          "23:         railsmark(message) { yield }",
          "24:     end",
          "26:     # Collect partial benchmarks to be logged when they're",
          "27:     # all done.",
          "28:     #   These are always low-level debugging so we only",
          "29:     # print them if time_debug is enabled.",
          "30:     def accumulate_benchmark(message, label)",
          "31:         unless time_debug?",
          "32:             return yield",
          "33:         end",
          "35:         $benchmarks[:accumulated][message] ||= Hash.new(0)",
          "36:         $benchmarks[:accumulated][message][label] += Benchmark.realtime { yield }",
          "37:     end",
          "39:     # Log the accumulated marks.",
          "40:     def log_accumulated_marks(message)",
          "41:         return unless time_debug?",
          "43:         if $benchmarks[:accumulated].empty? or $benchmarks[:accumulated][message].nil? or $benchmarks[:accumulated][message].empty?",
          "44:             return",
          "45:         end",
          "47:         $benchmarks[:accumulated][message].each do |label, value|",
          "48:             Puppet.debug(message + (\"(%s)\" % label) + (\" in %0.2f seconds\" % value))",
          "49:         end",
          "50:     end",
          "52:     def write_benchmarks",
          "53:         return unless time_debug?",
          "55:         branch = %x{git branch}.split(\"\\n\").find { |l| l =~ /^\\*/ }.sub(\"* \", '')",
          "57:         file = \"/tmp/time_debugging.yaml\"",
          "59:         require 'yaml'",
          "61:         if FileTest.exist?(file)",
          "62:             data = YAML.load_file(file)",
          "63:         else",
          "64:             data = {}",
          "65:         end",
          "66:         data[branch] = $benchmarks",
          "67:         File.open(file, \"w\") { |f| f.print YAML.dump(data) }",
          "68:     end",
          "69: end",
          "",
          "---------------"
        ],
        "lib/puppet/rails/host.rb||lib/puppet/rails/host.rb": [
          "File: lib/puppet/rails/host.rb -> lib/puppet/rails/host.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: require 'puppet/rails/resource'",
          "2: require 'puppet/rails/fact_name'",
          "3: require 'puppet/rails/source_file'",
          "4: require 'puppet/util/rails/collection_merger'",
          "6: class Puppet::Rails::Host < ActiveRecord::Base",
          "7:     include Puppet::Util",
          "8:     include Puppet::Util::CollectionMerger",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: require 'puppet/rails/benchmark'",
          "8:     include Puppet::Rails::Benchmark",
          "9:     extend Puppet::Rails::Benchmark",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         args = {}",
          "41:         host = nil",
          "47:                 end",
          "72:         end",
          "74:         return host",
          "75:     end",
          "",
          "[Removed Lines]",
          "42:         transaction do",
          "43:             #unless host = find_by_name(name)",
          "44:             seconds = Benchmark.realtime {",
          "45:                 unless host = find_by_name(node.name)",
          "46:                     host = new(:name => node.name)",
          "48:             }",
          "49:             Puppet.debug(\"Searched for host in %0.2f seconds\" % seconds)",
          "50:             if ip = node.parameters[\"ipaddress\"]",
          "51:                 host.ip = ip",
          "52:             end",
          "54:             if env = node.environment",
          "55:                 host.environment = env",
          "56:             end",
          "58:             # Store the facts into the database.",
          "59:             host.merge_facts(node.parameters)",
          "61:             seconds = Benchmark.realtime {",
          "62:                 host.merge_resources(resources)",
          "63:             }",
          "64:             Puppet.debug(\"Handled resources in %0.2f seconds\" % seconds)",
          "66:             host.last_compile = Time.now",
          "68:             seconds = Benchmark.realtime {",
          "69:                 host.save",
          "70:             }",
          "71:             Puppet.debug(\"Saved host in %0.2f seconds\" % seconds)",
          "",
          "[Added Lines]",
          "45:         railsmark \"Stored node\" do",
          "46:             transaction do",
          "47:                 #unless host = find_by_name(name)",
          "49:                 sometimes_benchmark(\"Searched for host\")do",
          "50:                     unless host = find_by_name(node.name)",
          "51:                         host = new(:name => node.name)",
          "52:                     end",
          "53:                 end",
          "54:                 if ip = node.parameters[\"ipaddress\"]",
          "55:                     host.ip = ip",
          "58:                 if env = node.environment",
          "59:                     host.environment = env",
          "60:                 end",
          "62:                 # Store the facts into the database.",
          "63:                 host.merge_facts(node.parameters)",
          "65:                 sometimes_benchmark(\"Handled resources\") {",
          "66:                     host.merge_resources(resources)",
          "67:                 }",
          "69:                 host.last_compile = Time.now",
          "71:                 sometimes_benchmark(\"Saved host\") {",
          "72:                     host.save",
          "73:                 }",
          "74:             end",
          "78:         # This only runs if time debugging is enabled.",
          "79:         write_benchmarks",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:     # Set our resources.",
          "140:     def merge_resources(list)",
          "141:         resources_by_id = nil",
          "143:             resources_by_id = find_resources()",
          "144:         }",
          "148:             find_resources_parameters_tags(resources_by_id)",
          "149:         } if id",
          "153:             compare_to_catalog(resources_by_id, list)",
          "154:         }",
          "156:     end",
          "158:     def find_resources",
          "",
          "[Removed Lines]",
          "142:         seconds = Benchmark.realtime {",
          "145:         Puppet.debug(\"Searched for resources in %0.2f seconds\" % seconds)",
          "147:         seconds = Benchmark.realtime {",
          "150:         Puppet.debug(\"Searched for resource params and tags in %0.2f seconds\" % seconds)",
          "152:         seconds = Benchmark.realtime {",
          "155:         Puppet.debug(\"Resource comparison took %0.2f seconds\" % seconds)",
          "",
          "[Added Lines]",
          "149:         sometimes_benchmark(\"Searched for resources\") {",
          "153:         sometimes_benchmark(\"Searched for resource params and tags\") {",
          "157:         sometimes_benchmark(\"Performed resource comparison\") {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:         end",
          "181:         resources = nil",
          "183:             resources = remove_unneeded_resources(compiled, existing)",
          "184:         }",
          "187:         # Now for all resources in the catalog but not in the db, we're pretty easy.",
          "188:         additions = nil",
          "190:             additions = perform_resource_merger(compiled, resources)",
          "191:         }",
          "195:             additions.each do |resource|",
          "196:                 build_rails_resource_from_parser_resource(resource)",
          "197:             end",
          "198:         }",
          "200:     end",
          "202:     def add_new_resources(additions)",
          "",
          "[Removed Lines]",
          "182:         seconds = Benchmark.realtime {",
          "185:         Puppet.debug(\"Resource removal took %0.2f seconds\" % seconds)",
          "189:         seconds = Benchmark.realtime {",
          "192:         Puppet.debug(\"Resource merger took %0.2f seconds\" % seconds)",
          "194:         seconds = Benchmark.realtime {",
          "199:         Puppet.debug(\"Resource addition took %0.2f seconds\" % seconds)",
          "",
          "[Added Lines]",
          "186:         sometimes_benchmark(\"Resource removal\") {",
          "192:         sometimes_benchmark(\"Resource merger\") {",
          "196:         sometimes_benchmark(\"Resource addition\") {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:         end",
          "272:         # We need to use 'destroy' here, not 'delete', so that all",
          "273:         # dependent objects get removed, too.",
          "276:         return resources",
          "277:     end",
          "",
          "[Removed Lines]",
          "274:         Puppet::Rails::Resource.destroy(*deletions) unless deletions.empty?",
          "",
          "[Added Lines]",
          "275:         Puppet::Rails::Resource.destroy(deletions) unless deletions.empty?",
          "",
          "---------------"
        ],
        "lib/puppet/rails/resource.rb||lib/puppet/rails/resource.rb": [
          "File: lib/puppet/rails/resource.rb -> lib/puppet/rails/resource.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         db_params = {}",
          "110:         deletions = []",
          "112:         @params_hash.each do |value|",
          "113:             # First remove any parameters our catalog resource doesn't have at all.",
          "114:             deletions << value['id'] and next unless catalog_params.include?(value['name'])",
          "",
          "[Removed Lines]",
          "111:         #Puppet::Rails::ParamValue.find_all_params_from_resource(self).each do |value|",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         in_db = []",
          "150:         deletions = []",
          "151:         resource_tags = resource.tags",
          "153:         @tags_hash.each do |tag|",
          "154:             deletions << tag['id'] and next unless resource_tags.include?(tag['name'])",
          "155:             in_db << tag['name']",
          "",
          "[Removed Lines]",
          "152:         #Puppet::Rails::ResourceTag.find_all_tags_from_resource(self).each do |tag|",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b15231df5842df2ea83b779b22e6756e51bc39d0",
      "candidate_info": {
        "commit_hash": "b15231df5842df2ea83b779b22e6756e51bc39d0",
        "repo": "puppetlabs/puppet",
        "commit_url": "https://github.com/puppetlabs/puppet/commit/b15231df5842df2ea83b779b22e6756e51bc39d0",
        "files": [
          "lib/puppet/defaults.rb",
          "lib/puppet/provider.rb",
          "lib/puppet/provider/confine/exists.rb",
          "lib/puppet/type/exec.rb",
          "lib/puppet/util.rb",
          "lib/puppet/util/command_line.rb",
          "lib/puppet/util/reference.rb",
          "spec/integration/ssl/certificate_authority_spec.rb",
          "spec/unit/provider/confine/exists_spec.rb",
          "spec/unit/util/command_line_spec.rb",
          "test/other/provider.rb",
          "test/ral/manager/type.rb",
          "test/ral/providers/provider.rb"
        ],
        "message": "Fix for #4299 -- Don't require which\n\nWe already had an internal implementation of which hiding under an assumed\nname (Puppet::Util.binary); this commit calls it out of hiding and uses it\nconsisantly.",
        "before_after_code_files": [
          "lib/puppet/defaults.rb||lib/puppet/defaults.rb",
          "lib/puppet/provider.rb||lib/puppet/provider.rb",
          "lib/puppet/provider/confine/exists.rb||lib/puppet/provider/confine/exists.rb",
          "lib/puppet/type/exec.rb||lib/puppet/type/exec.rb",
          "lib/puppet/util.rb||lib/puppet/util.rb",
          "lib/puppet/util/command_line.rb||lib/puppet/util/command_line.rb",
          "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb",
          "spec/integration/ssl/certificate_authority_spec.rb||spec/integration/ssl/certificate_authority_spec.rb",
          "spec/unit/provider/confine/exists_spec.rb||spec/unit/provider/confine/exists_spec.rb",
          "spec/unit/util/command_line_spec.rb||spec/unit/util/command_line_spec.rb",
          "test/other/provider.rb||test/other/provider.rb",
          "test/ral/manager/type.rb||test/ral/manager/type.rb",
          "test/ral/providers/provider.rb||test/ral/providers/provider.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/puppet/util.rb||lib/puppet/util.rb",
            "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb"
          ],
          "candidate": [
            "lib/puppet/util.rb||lib/puppet/util.rb",
            "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puppet/defaults.rb||lib/puppet/defaults.rb": [
          "File: lib/puppet/defaults.rb -> lib/puppet/defaults.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     setdefaults(",
          "638:     :tagmail,",
          "639:     :tagmap => [\"$confdir/tagmail.conf\", \"The mapping between reporting tags and email addresses.\"],",
          "642:     :reportfrom => [\"report@\" + [Facter[\"hostname\"].value, Facter[\"domain\"].value].join(\".\"), \"The 'from' email address for the reports.\"],",
          "643:     :smtpserver => [\"none\", \"The server through which to send email reports.\"]",
          "",
          "[Removed Lines]",
          "640:     :sendmail => [%x{which sendmail 2>/dev/null}.chomp, \"Where to find the sendmail binary with which to send email.\"],",
          "",
          "[Added Lines]",
          "640:     :sendmail => [which('sendmail') || '', \"Where to find the sendmail binary with which to send email.\"],",
          "",
          "---------------"
        ],
        "lib/puppet/provider.rb||lib/puppet/provider.rb": [
          "File: lib/puppet/provider.rb -> lib/puppet/provider.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   Puppet::Util.logmethods(self, true)",
          "14:   class << self",
          "16:     include Puppet::Util, Puppet::Util::Docs",
          "17:     include Puppet::Util::Logging",
          "18:     attr_accessor :name",
          "",
          "[Removed Lines]",
          "15:     # Include the util module so we have access to things like 'binary'",
          "",
          "[Added Lines]",
          "15:     # Include the util module so we have access to things like 'which'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:       raise Puppet::DevError, \"No command #{name} defined for provider #{self.name}\"",
          "44:     end",
          "47:   end",
          "49:   # Define commands that are not optional.",
          "",
          "[Removed Lines]",
          "46:     binary(command)",
          "",
          "[Added Lines]",
          "46:     which(command)",
          "",
          "---------------"
        ],
        "lib/puppet/provider/confine/exists.rb||lib/puppet/provider/confine/exists.rb": [
          "File: lib/puppet/provider/confine/exists.rb -> lib/puppet/provider/confine/exists.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   end",
          "8:   def pass?(value)",
          "13:   end",
          "15:   def message(value)",
          "",
          "[Removed Lines]",
          "9:     if for_binary?",
          "10:       return false unless value = binary(value)",
          "11:     end",
          "12:     value and FileTest.exist?(value)",
          "",
          "[Added Lines]",
          "9:     value && (for_binary? ? which(value) : FileTest.exist?(value))",
          "",
          "---------------"
        ],
        "lib/puppet/type/exec.rb||lib/puppet/type/exec.rb": [
          "File: lib/puppet/type/exec.rb -> lib/puppet/type/exec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:       if self[:path]",
          "554:         if Puppet.features.posix? and !File.exists?(exe)",
          "555:           withenv :PATH => self[:path].join(File::PATH_SEPARATOR) do",
          "563:           end",
          "564:         elsif Puppet.features.microsoft_windows? and !File.exists?(exe)",
          "565:           self[:path].each do |path|",
          "",
          "[Removed Lines]",
          "556:             path = %x{which #{exe}}.chomp",
          "557:             if path == \"\"",
          "558:               raise ArgumentError,",
          "559:                 \"Could not find command '#{exe}'\"",
          "560:             else",
          "561:               exe = path",
          "562:             end",
          "",
          "[Added Lines]",
          "556:             exe = which(exe) || raise(ArgumentError,\"Could not find command '#{exe}'\")",
          "",
          "---------------"
        ],
        "lib/puppet/util.rb||lib/puppet/util.rb": [
          "File: lib/puppet/util.rb -> lib/puppet/util.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     end",
          "199:   end",
          "202:     if bin =~ /^\\//",
          "203:       return bin if FileTest.file? bin and FileTest.executable? bin",
          "204:     else",
          "",
          "[Removed Lines]",
          "201:   def binary(bin)",
          "",
          "[Added Lines]",
          "201:   def which(bin)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:     end",
          "210:     nil",
          "211:   end",
          "214:   # Execute the provided command in a pipe, yielding the pipe object.",
          "215:   def execpipe(command, failonfail = true)",
          "",
          "[Removed Lines]",
          "212:   module_function :binary",
          "",
          "[Added Lines]",
          "212:   module_function :which",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:   def memory",
          "380:     unless defined?(@pmap)",
          "387:     end",
          "388:     if @pmap",
          "390:     else",
          "391:       0",
          "392:     end",
          "",
          "[Removed Lines]",
          "381:       pmap = %x{which pmap 2>/dev/null}.chomp",
          "382:       if $CHILD_STATUS != 0 or pmap =~ /^no/",
          "383:         @pmap = nil",
          "384:       else",
          "385:         @pmap = pmap",
          "386:       end",
          "389:       return %x{pmap #{Process.pid}| grep total}.chomp.sub(/^\\s*total\\s+/, '').sub(/K$/, '').to_i",
          "",
          "[Added Lines]",
          "381:       @pmap = which('pmap')",
          "384:       %x{#{@pmap} #{Process.pid}| grep total}.chomp.sub(/^\\s*total\\s+/, '').sub(/K$/, '').to_i",
          "",
          "---------------"
        ],
        "lib/puppet/util/command_line.rb||lib/puppet/util/command_line.rb": [
          "File: lib/puppet/util/command_line.rb -> lib/puppet/util/command_line.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:           external_command = \"puppet-#{subcommand_name}\"",
          "64:           require 'puppet/util'",
          "66:           return false unless path_to_subcommand",
          "68:           system( path_to_subcommand, *args )",
          "",
          "[Removed Lines]",
          "65:           path_to_subcommand = Puppet::Util.binary( external_command )",
          "",
          "[Added Lines]",
          "65:           path_to_subcommand = Puppet::Util.which( external_command )",
          "",
          "---------------"
        ],
        "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb": [
          "File: lib/puppet/util/reference.rb -> lib/puppet/util/reference.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     Puppet::Util.secure_open(\"/tmp/puppetdoc.txt\", \"w\") do |f|",
          "40:       f.puts text",
          "41:     end",
          "50:     cmd = %{#{rst2latex} /tmp/puppetdoc.txt > /tmp/puppetdoc.tex}",
          "51:     Puppet::Util.secure_open(\"/tmp/puppetdoc.tex\",\"w\") do |f|",
          "52:       # If we get here without an error, /tmp/puppetdoc.tex isn't a tricky cracker's symlink",
          "",
          "[Removed Lines]",
          "42:     rst2latex = %x{which rst2latex}",
          "43:     if $CHILD_STATUS != 0 or rst2latex =~ /no /",
          "44:       rst2latex = %x{which rst2latex.py}",
          "45:     end",
          "46:     if $CHILD_STATUS != 0 or rst2latex =~ /no /",
          "47:       raise \"Could not find rst2latex\"",
          "48:     end",
          "49:     rst2latex.chomp!",
          "",
          "[Added Lines]",
          "42:     rst2latex = which('rst2latex') || which('rst2latex.py') || raise(\"Could not find rst2latex\")",
          "",
          "---------------"
        ],
        "spec/integration/ssl/certificate_authority_spec.rb||spec/integration/ssl/certificate_authority_spec.rb": [
          "File: spec/integration/ssl/certificate_authority_spec.rb -> spec/integration/ssl/certificate_authority_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     it \"should save valid certificates\" do",
          "122:       @ca.sign(\"luke.madstop.com\")",
          "127:         pending \"No ssl available\"",
          "128:       else",
          "129:         ca_cert = Puppet[:cacert]",
          "",
          "[Removed Lines]",
          "124:       ssl = %x{which openssl}",
          "126:       unless ssl",
          "",
          "[Added Lines]",
          "124:       unless ssl = Puppet::Util::which('openssl')",
          "",
          "---------------"
        ],
        "spec/unit/provider/confine/exists_spec.rb||spec/unit/provider/confine/exists_spec.rb": [
          "File: spec/unit/provider/confine/exists_spec.rb -> spec/unit/provider/confine/exists_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   describe \"and the confine is for binaries\" do",
          "41:     before { @confine.stubs(:for_binary).returns true }",
          "44:       @confine.pass?(\"/my/file\")",
          "45:     end",
          "49:       @confine.pass?(\"/my/file\").should be_false",
          "50:     end",
          "61:       @confine.pass?(\"/my/file\").should be_true",
          "62:     end",
          "63:   end",
          "",
          "[Removed Lines]",
          "42:     it \"should use its 'binary' method to look up the full path of the file\" do",
          "43:       @confine.expects(:binary).returns nil",
          "47:     it \"should return false if no binary can be found\" do",
          "48:       @confine.expects(:binary).with(\"/my/file\").returns nil",
          "52:     it \"should return true if the binary can be found and the file exists\" do",
          "53:       @confine.expects(:binary).with(\"/my/file\").returns \"/my/file\"",
          "54:       FileTest.expects(:exist?).with(\"/my/file\").returns true",
          "55:       @confine.pass?(\"/my/file\").should be_true",
          "56:     end",
          "58:     it \"should return false if the binary can be found but the file does not exist\" do",
          "59:       @confine.expects(:binary).with(\"/my/file\").returns \"/my/file\"",
          "60:       FileTest.expects(:exist?).with(\"/my/file\").returns true",
          "",
          "[Added Lines]",
          "42:     it \"should use its 'which' method to look up the full path of the file\" do",
          "43:       @confine.expects(:which).returns nil",
          "47:     it \"should return false if no executable can be found\" do",
          "48:       @confine.expects(:which).with(\"/my/file\").returns nil",
          "52:     it \"should return true if the executable can be found\" do",
          "53:       @confine.expects(:which).with(\"/my/file\").returns \"/my/file\"",
          "",
          "---------------"
        ],
        "spec/unit/util/command_line_spec.rb||spec/unit/util/command_line_spec.rb": [
          "File: spec/unit/util/command_line_spec.rb -> spec/unit/util/command_line_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   describe \"when the subcommand is not implemented\" do",
          "87:     it \"should find and invoke an executable with a hyphenated name\" do",
          "88:       commandline = Puppet::Util::CommandLine.new(\"puppet\", ['whatever', 'argument'], @tty)",
          "90:       commandline.expects(:system).with('/dev/null/puppet-whatever', 'argument')",
          "92:       commandline.execute",
          "",
          "[Removed Lines]",
          "89:       Puppet::Util.expects(:binary).with('puppet-whatever').returns('/dev/null/puppet-whatever')",
          "",
          "[Added Lines]",
          "89:       Puppet::Util.expects(:which).with('puppet-whatever').returns('/dev/null/puppet-whatever')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     describe \"and an external implementation cannot be found\" do",
          "96:       it \"should abort and show the usage message\" do",
          "97:         commandline = Puppet::Util::CommandLine.new(\"puppet\", ['whatever', 'argument'], @tty)",
          "99:         commandline.expects(:system).never",
          "101:         commandline.expects(:usage_message).returns(\"the usage message\")",
          "",
          "[Removed Lines]",
          "98:         Puppet::Util.expects(:binary).with('puppet-whatever').returns(nil)",
          "",
          "[Added Lines]",
          "98:         Puppet::Util.expects(:which).with('puppet-whatever').returns(nil)",
          "",
          "---------------"
        ],
        "test/other/provider.rb||test/other/provider.rb": [
          "File: test/other/provider.rb -> test/other/provider.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:       child = @type.provide(\"child\", :parent => parent.name) {}",
          "71:     }",
          "84:     assert_raise(Puppet::DevError) do",
          "85:       child.command(:nosuchcommand)",
          "86:     end",
          "88:     # Now create a parent command",
          "89:     assert_nothing_raised {",
          "91:     }",
          "93:     assert(parent.command(:sh), \"Did not find 'sh' command\")",
          "",
          "[Removed Lines]",
          "73:     assert_nothing_raised {",
          "74:       child.commands :which => \"which\"",
          "75:     }",
          "77:     assert(child.command(:which), \"Did not find 'which' command\")",
          "79:     assert(child.command(:which) =~ /^\\//,",
          "80:         \"Command did not become fully qualified\")",
          "81:     assert(FileTest.exists?(child.command(:which)),",
          "82:                 \"Did not find actual 'which' binary\")",
          "90:       parent.commands :sh => Puppet::Util.binary('sh')",
          "",
          "[Added Lines]",
          "79:       parent.commands :sh => Puppet::Util.which('sh')",
          "",
          "---------------"
        ],
        "test/ral/manager/type.rb||test/ral/manager/type.rb": [
          "File: test/ral/manager/type.rb -> test/ral/manager/type.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   def test_isomorphic_names",
          "277:     catalog = mk_catalog",
          "278:     # First do execs, since they're not isomorphic.",
          "280:     exec1 = exec2 = nil",
          "281:     assert_nothing_raised do",
          "",
          "[Removed Lines]",
          "279:     echo = Puppet::Util.binary \"echo\"",
          "",
          "[Added Lines]",
          "279:     echo = Puppet::Util.which \"echo\"",
          "",
          "---------------"
        ],
        "test/ral/providers/provider.rb||test/ral/providers/provider.rb": [
          "File: test/ral/providers/provider.rb -> test/ral/providers/provider.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   include PuppetTest",
          "11:   def echo",
          "14:     raise \"Could not find 'echo' binary; cannot complete test\" unless echo",
          "",
          "[Removed Lines]",
          "12:     echo = Puppet::Util.binary(\"echo\")",
          "",
          "[Added Lines]",
          "12:     echo = Puppet::Util.which(\"echo\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     provider.commands :testing => \"/no/such/path\"",
          "100:     provider.command(:testing)",
          "101:     assert_equal(\"/no/such/path\", provider.command(:testing), \"Did not return correct binary path\")",
          "",
          "[Removed Lines]",
          "98:     provider.stubs(:binary).returns \"/no/such/path\"",
          "",
          "[Added Lines]",
          "98:     provider.stubs(:which).returns \"/no/such/path\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:     dir = tstdir",
          "189:     file = File.join(dir, \"mycmd\")",
          "191:     File.open(file, \"w\") { |f|",
          "192:       f.puts %{#!#{sh}",
          "193:       echo A Failure >&2",
          "",
          "[Removed Lines]",
          "190:     sh = Puppet::Util.binary(\"sh\")",
          "",
          "[Added Lines]",
          "190:     sh = Puppet::Util.which(\"sh\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44f127f738f6427bdf2adbe1d06d57b7b62e715e",
      "candidate_info": {
        "commit_hash": "44f127f738f6427bdf2adbe1d06d57b7b62e715e",
        "repo": "puppetlabs/puppet",
        "commit_url": "https://github.com/puppetlabs/puppet/commit/44f127f738f6427bdf2adbe1d06d57b7b62e715e",
        "files": [
          "bin/puppetdoc",
          "lib/puppet/application/puppetdoc.rb",
          "lib/puppet/util/reference.rb"
        ],
        "message": "Added Markdown mode to puppetdoc to output Markdown.\n\nRequires the pandoc binary to function (http://johnmacfarlane.net/pandoc/).",
        "before_after_code_files": [
          "lib/puppet/application/puppetdoc.rb||lib/puppet/application/puppetdoc.rb",
          "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb"
          ],
          "candidate": [
            "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puppet/application/puppetdoc.rb||lib/puppet/application/puppetdoc.rb": [
          "File: lib/puppet/application/puppetdoc.rb -> lib/puppet/application/puppetdoc.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     end",
          "60:     dispatch do",
          "63:         return :other",
          "64:     end",
          "",
          "[Removed Lines]",
          "61:         return :rdoc if options[:mode] == :rdoc",
          "62:         return :trac if options[:mode] == :trac",
          "",
          "[Added Lines]",
          "61:         return options[:mode] if [:rdoc, :trac, :markdown].include?(options[:mode])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:         end",
          "102:     end",
          "104:     command(:other) do",
          "105:         text = \"\"",
          "106:         if options[:references].length > 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     command(:markdown) do",
          "104:         text = \"\"",
          "105:         with_contents = false",
          "106:         exit_code = 0",
          "107:         options[:references].sort { |a,b| a.to_s <=> b.to_s }.each do |name|",
          "108:             raise \"Could not find reference %s\" % name unless section = Puppet::Util::Reference.reference(name)",
          "110:             begin",
          "111:                 # Add the per-section text, but with no ToC",
          "112:                 text += section.send(options[:format], with_contents)",
          "113:                 text += Puppet::Util::Reference.footer",
          "114:                 text.gsub!(/`\\w+\\s+([^`]+)`:trac:/) { |m| $1 }",
          "115:                 Puppet::Util::Reference.markdown(name, text)",
          "116:                 text = \"\"",
          "117:             rescue => detail",
          "118:                 puts detail.backtrace",
          "119:                 $stderr.puts \"Could not generate reference %s: %s\" % [name, detail]",
          "120:                 exit_code = 1",
          "121:                 next",
          "122:             end",
          "123:         end",
          "125:         exit exit_code",
          "126:     end",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:         if options[:mode] == :pdf",
          "134:             Puppet::Util::Reference.pdf(text)",
          "136:             puts text",
          "137:         end",
          "",
          "[Removed Lines]",
          "135:         else",
          "",
          "[Added Lines]",
          "159:         else",
          "",
          "---------------"
        ],
        "lib/puppet/util/reference.rb||lib/puppet/util/reference.rb": [
          "File: lib/puppet/util/reference.rb -> lib/puppet/util/reference.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     end",
          "16:     def self.modes",
          "18:     end",
          "20:     def self.newreference(name, options = {}, &block)",
          "",
          "[Removed Lines]",
          "17:         %w{pdf trac text}",
          "",
          "[Added Lines]",
          "17:         %w{pdf trac text markdown}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         $stderr.puts output",
          "59:         # Now convert to pdf",
          "61:         Dir.chdir(\"/tmp\") do",
          "62:             %x{texi2pdf puppetdoc.tex >/dev/null 2>/dev/null}",
          "63:         end",
          "68:     end",
          "70:     def self.references",
          "",
          "[Removed Lines]",
          "60:         puts \"handling pdf\"",
          "65:         #if FileTest.exists?(\"/tmp/puppetdoc.pdf\")",
          "66:         #    FileUtils.mv(\"/tmp/puppetdoc.pdf\", \"/export/apache/docroots/reductivelabs.com/htdocs/downloads/puppet/reference.pdf\")",
          "67:         #end",
          "",
          "[Added Lines]",
          "64:     end",
          "66:     def self.markdown(name, text)",
          "67:         puts \"Creating markdown for #{name} reference.\"",
          "68:         dir = \"/tmp/\" + Puppet::PUPPETVERSION",
          "69:         FileUtils.mkdir(dir) unless File.directory?(dir)",
          "70:         File.open(dir + \"/\" + \"#{name}.rst\", \"w\") do |f|",
          "71:             f.puts text",
          "72:         end",
          "73:         pandoc = %x{which pandoc}",
          "74:         if $? != 0 or pandoc =~ /no /",
          "75:             pandoc = %x{which pandoc}",
          "76:         end",
          "77:         if $? != 0 or pandoc =~ /no /",
          "78:             raise \"Could not find pandoc\"",
          "79:         end",
          "80:         pandoc.chomp!",
          "81:         cmd = %{#{pandoc} -s -r rst -w markdown #{dir}/#{name}.rst -o #{dir}/#{name}.mdwn}",
          "82:         output = %x{#{cmd}}",
          "83:         unless $? == 0",
          "84:             $stderr.puts \"Pandoc failed to create #{name} reference.\"",
          "85:             $stderr.puts output",
          "86:             exit(1)",
          "87:         end",
          "89:         File.unlink(dir + \"/\" + \"#{name}.rst\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}