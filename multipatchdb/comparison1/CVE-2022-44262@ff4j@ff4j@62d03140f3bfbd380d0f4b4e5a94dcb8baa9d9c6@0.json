{
  "cve_id": "CVE-2022-44262",
  "cve_desc": "ff4j 1.8.1 is vulnerable to Remote Code Execution (RCE).",
  "repo": "ff4j/ff4j",
  "patch_hash": "62d03140f3bfbd380d0f4b4e5a94dcb8baa9d9c6",
  "patch_info": {
    "commit_hash": "62d03140f3bfbd380d0f4b4e5a94dcb8baa9d9c6",
    "repo": "ff4j/ff4j",
    "commit_url": "https://github.com/ff4j/ff4j/commit/62d03140f3bfbd380d0f4b4e5a94dcb8baa9d9c6",
    "files": [
      "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
      "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
      "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
      "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
      "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
      "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
      "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
      "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
      "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
      "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
      "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java",
      "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
      "ff4j-core/src/test/resources/test-feature-ko8.xml",
      "ff4j-core/src/test/resources/test-property6.xml",
      "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
      "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-features.json",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-features.xml",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-features.yml",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.json",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.xml",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.yml",
      "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java"
    ],
    "message": "Merge pull request #625 from honsq90/master\n\nfix: CVE-2022-44262 (#624)",
    "before_after_code_files": [
      "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
      "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
      "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
      "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
      "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
      "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java||ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
      "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java||ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
      "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
      "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
      "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
      "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java",
      "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java||ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
      "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
      "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties",
      "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
      "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java||ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java"
    ]
  },
  "patch_diff": {
    "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java": [
      "File: ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java -> ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "230:                 optionalType = MappingUtil.mapPropertyType(optionalType);",
      "231:                 try {",
      "234:                     ap = (Property<?>) constr.newInstance(name, strValue);",
      "235:                 } catch (Exception e) {",
      "236:                     throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
      "",
      "[Removed Lines]",
      "233:                     Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);",
      "",
      "[Added Lines]",
      "233:                     Class<?> typeClass = Class.forName(optionalType);",
      "234:                     if (!Property.class.isAssignableFrom(typeClass)) {",
      "235:                         throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
      "236:                     }",
      "237:                     Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "308:             if (null != flipStrategyClass && !\"\".equals(flipStrategyClass)) {",
      "309:                 FlippingStrategy flipStrategy = null;",
      "310:                 try {",
      "312:                 } catch (Exception e) {",
      "313:                     throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + f.getUid() +",
      "314:                             \"' -> check key [\" + currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS + \"]\", e);",
      "",
      "[Removed Lines]",
      "311:                     flipStrategy = (FlippingStrategy) Class.forName(flipStrategyClass).newInstance();",
      "",
      "[Added Lines]",
      "315:                     Class<?> typeClass = Class.forName(flipStrategyClass);",
      "316:                     if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
      "317:                         throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + flipStrategyClass + \"> invalid type\");",
      "318:                     }",
      "319:                     flipStrategy = (FlippingStrategy) typeClass.newInstance();",
      "",
      "---------------"
    ],
    "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java": [
      "File: ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java -> ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import org.ff4j.conf.XmlConfig;",
      "29: import org.ff4j.conf.XmlParser;",
      "30: import org.ff4j.core.Feature;",
      "31: import org.junit.Test;",
      "33: public class PropertiesParserTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import org.ff4j.test.unsafe.UnsafeFlippingStrategy;",
      "32: import org.ff4j.test.unsafe.UnsafeProperty;",
      "33: import org.junit.Assert;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:         new PropertiesParser().export(xmlConfig);",
      "48:     }",
      "50:     @Test",
      "51:     public void importProperties_should_be_same_asXMLImport() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:     @Test",
      "54:     public void should_fail_for_unsafe_property() {",
      "56:         InputStream propsFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-features.properties\");",
      "58:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "59:             new PropertiesParser().parseConfigurationFile(propsFile);",
      "60:         });",
      "61:         Assert.assertEquals(0, UnsafeProperty.count);",
      "62:     }",
      "64:     @Test",
      "65:     public void should_fail_for_unsafe_strategy() {",
      "67:         InputStream propsFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-strategy.properties\");",
      "69:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "70:             new PropertiesParser().parseConfigurationFile(propsFile);",
      "71:         });",
      "72:         Assert.assertEquals(0, UnsafeFlippingStrategy.count);",
      "73:     }",
      "",
      "---------------"
    ],
    "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java": [
      "File: ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java -> ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:                     optionalType = MappingUtil.mapPropertyType(optionalType);",
      "173:                     try {",
      "176:                         ap = (Property<?>) constr.newInstance(name, strValue);",
      "177:                     } catch (Exception e) {",
      "178:                         throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
      "",
      "[Removed Lines]",
      "175:                         Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);",
      "",
      "[Added Lines]",
      "175:                         Class<?> typeClass = Class.forName(optionalType);",
      "176:                         if (!Property.class.isAssignableFrom(typeClass)) {",
      "177:                             throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
      "178:                         }",
      "179:                         Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "251:         try {",
      "253:             String clazzName = (String) toggleStrategy.get(TOGGLE_STRATEGY_ATTCLASS);",
      "256:             List<Map<String, Object>> mapYamlParam = (List<Map<String, Object>>) toggleStrategy.get(TOGGLE_STRATEGY_PARAMTAG);",
      "257:             Map<String,String> params = new HashMap<>();",
      "",
      "[Removed Lines]",
      "254:             FlippingStrategy flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();",
      "",
      "[Added Lines]",
      "258:             Class<?> typeClass = Class.forName(clazzName);",
      "259:             if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
      "260:                 throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");",
      "261:             }",
      "262:             FlippingStrategy flipStrategy = (FlippingStrategy) typeClass.newInstance();",
      "",
      "---------------"
    ],
    "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java": [
      "File: ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java -> ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import org.ff4j.conf.XmlConfig;",
      "29: import org.ff4j.conf.XmlParser;",
      "30: import org.ff4j.core.Feature;",
      "31: import org.junit.Test;",
      "33: public class YamlParserTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import org.ff4j.test.unsafe.UnsafeProperty;",
      "32: import org.ff4j.test.unsafe.UnsafeFlippingStrategy;",
      "33: import org.junit.Assert;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:         new YamlParser().export(xmlConfig);",
      "48:     }",
      "50:     @Test",
      "51:     public void importYaml_should_be_same_asXMLImport() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:     @Test",
      "54:     public void should_fail_for_unsafe_property() {",
      "56:         InputStream ymlFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-features.yml\");",
      "58:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "59:             new YamlParser().parseConfigurationFile(ymlFile);",
      "60:         });",
      "61:         Assert.assertEquals(0, UnsafeProperty.count);",
      "62:     }",
      "64:     @Test",
      "65:     public void should_fail_for_unsafe_strategy() {",
      "67:         InputStream ymlFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-strategy.yml\");",
      "69:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "70:             new YamlParser().parseConfigurationFile(ymlFile);",
      "71:         });",
      "72:         Assert.assertEquals(0, UnsafeFlippingStrategy.count);",
      "73:     }",
      "",
      "---------------"
    ],
    "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java": [
      "File: ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java -> ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "385:                 try {",
      "388:                     ap = (Property<?>) constr.newInstance(name, value);",
      "389:                 } catch (Exception e) {",
      "390:                     throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
      "",
      "[Removed Lines]",
      "387:                     Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);",
      "",
      "[Added Lines]",
      "387:                     Class<?> typeClass = Class.forName(optionalType);",
      "388:                     if (!Property.class.isAssignableFrom(typeClass)) {",
      "389:                         throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
      "390:                     }",
      "391:                     Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "440:         try {",
      "442:             String clazzName = nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS).getNodeValue();",
      "446:             Map<String, String> parameters = new LinkedHashMap<String, String>();",
      "",
      "[Removed Lines]",
      "443:             flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();",
      "",
      "[Added Lines]",
      "447:             Class<?> typeClass = Class.forName(clazzName);",
      "448:             if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
      "449:                 throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");",
      "450:             }",
      "451:             flipStrategy = (FlippingStrategy) typeClass.newInstance();",
      "",
      "---------------"
    ],
    "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java||ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java": [
      "File: ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java -> ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "160:         Util.assertNotNull(pType);",
      "161:         Property<?> ap = null;",
      "162:         try {",
      "164:             ap = (Property<?>) constr.newInstance(pName, pValue);",
      "165:             ap.setDescription(desc);",
      "",
      "[Removed Lines]",
      "163:             Constructor<?> constr = Class.forName(pType).getConstructor(String.class, String.class);",
      "",
      "[Added Lines]",
      "163:             Class<?> typeClass = Class.forName(pType);",
      "164:             if (!Property.class.isAssignableFrom(typeClass)) {",
      "165:                 throw new IllegalArgumentException(\"Cannot create property <\" + pName + \"> invalid type <\" + pType + \">\");",
      "166:             }",
      "167:             Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
      "",
      "---------------"
    ],
    "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java||ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java": [
      "File: ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java -> ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "181:  public static FlippingStrategy instanceFlippingStrategy(String uid, String className,  Map<String, String> initparams) {",
      "182:         try {",
      "183:             Class<FlippingStrategy> clazz = (Class<FlippingStrategy>) (classLoader == null ? Class.forName(className) : classLoader.loadClass(className));",
      "184:             FlippingStrategy flipStrategy = clazz.newInstance();",
      "185:             flipStrategy.init(uid, initparams);",
      "186:             return flipStrategy;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:             if (!FlippingStrategy.class.isAssignableFrom(clazz)) {",
      "185:                 throw new IllegalArgumentException(\"Invalid type \" + className );",
      "186:             }",
      "",
      "---------------"
    ],
    "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java": [
      "File: ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java -> ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import org.ff4j.conf.XmlConfig;",
      "32: import org.ff4j.conf.XmlParser;",
      "33: import org.ff4j.property.Property;",
      "34: import org.junit.Assert;",
      "35: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import org.ff4j.test.unsafe.UnsafeFlippingStrategy;",
      "35: import org.ff4j.test.unsafe.UnsafeProperty;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:         parseFile(\"test-property5.xml\");",
      "70:     }",
      "72:     @Test(expected = IllegalArgumentException.class)",
      "73:     public void testParsingFeatureNoClass() throws IOException {",
      "74:         parseFile(\"test-feature-ko1.xml\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     @Test",
      "75:     public void testParsingPropertiesUnsafe() throws IOException {",
      "76:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "77:             parseFile(\"test-property6.xml\");",
      "78:         });",
      "79:         Assert.assertEquals(0, UnsafeProperty.count);",
      "80:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "104:         parseFile(\"test-feature-ko7.xml\");",
      "105:     }",
      "107:     @Test",
      "108:     public void testParseXMLWithSpecialCharacters() throws IOException {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     @Test",
      "118:     public void testParsingFeatureInvalidStrategy() throws IOException {",
      "119:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "120:             parseFile(\"test-feature-ko8.xml\");",
      "121:         });",
      "122:         Assert.assertEquals(0, UnsafeFlippingStrategy.count);",
      "123:     }",
      "",
      "---------------"
    ],
    "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java": [
      "File: ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java -> ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import org.ff4j.property.PropertyString;",
      "32: import org.ff4j.property.util.PropertyFactory;",
      "33: import org.ff4j.property.util.PropertyJsonBean;",
      "34: import org.ff4j.utils.Util;",
      "35: import org.junit.Assert;",
      "36: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import org.ff4j.test.unsafe.UnsafeProperty;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:     public void testPropertyFactory9() {",
      "100:         PropertyFactory.createProperty(\"p1\", PropertyString.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
      "101:     }",
      "103:     @Test",
      "104:     public void testCreateProperty() {",
      "105:         Assert.assertNull(PropertyFactory.createProperty(null));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104:     @Test",
      "105:     public void testPropertyFactory10() {",
      "106:         IllegalArgumentException exception = Assert.assertThrows(IllegalArgumentException.class, () -> {",
      "107:             PropertyFactory.createProperty(\"p1\", UnsafeProperty.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
      "108:         });",
      "109:         Assert.assertEquals(0, UnsafeProperty.count);",
      "110:         Assert.assertEquals(\"Cannot create property <p1> invalid type <org.ff4j.test.unsafe.UnsafeProperty>\", exception.getCause().getMessage());",
      "111:     }",
      "",
      "---------------"
    ],
    "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java": [
      "File: ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java -> ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.ff4j.test.unsafe;",
      "23: public class UnsafeFlippingStrategy {",
      "24:     public static int count = 0;",
      "25:     public UnsafeFlippingStrategy() {",
      "26:         count++;",
      "27:     }",
      "28: }",
      "",
      "---------------"
    ],
    "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java": [
      "File: ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java -> ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.ff4j.test.unsafe;",
      "23: public class UnsafeProperty {",
      "24:     public static int count = 0;",
      "25:     public UnsafeProperty(String name, String value) {",
      "26:         count++;",
      "27:     }",
      "28: }",
      "",
      "---------------"
    ],
    "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java||ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java": [
      "File: ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java -> ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import org.ff4j.property.PropertyInt;",
      "35: import org.ff4j.property.PropertyLong;",
      "36: import org.ff4j.property.PropertyString;",
      "37: import org.ff4j.store.InMemoryFeatureStore;",
      "38: import org.ff4j.utils.JdbcUtils;",
      "39: import org.ff4j.utils.JsonUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import org.ff4j.test.unsafe.UnsafeProperty;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     public void testIntanciateInvalidFlippingStrategy() {",
      "82:        MappingUtil.instanceFlippingStrategy(\"f1\", \"com.class.invalid\", new HashMap<String, String>());",
      "83:     }",
      "85:     @Test(expected = IllegalArgumentException.class)",
      "86:     public void testAssert1() {",
      "87:         Util.assertTrue(false);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     @Test",
      "87:     public void testInstantiateUnsafeProperty() {",
      "88:         Assert.assertThrows(FeatureAccessException.class, () -> {",
      "89:             MappingUtil.instanceFlippingStrategy(\"f1\", \"org.ff4j.test.unsafe.UnsafeProperty\", new HashMap<String, String>());",
      "90:         });",
      "91:         Assert.assertEquals(0, UnsafeProperty.count);",
      "92:     }",
      "",
      "---------------"
    ],
    "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java": [
      "File: ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java -> ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.ff4j.test.unsafe;",
      "23: public class UnsafeFlippingStrategy {",
      "24:     public static int count = 0;",
      "26:     public UnsafeFlippingStrategy() {",
      "27:         count++;",
      "28:     }",
      "29: }",
      "",
      "---------------"
    ],
    "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java": [
      "File: ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java -> ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.ff4j.test.unsafe;",
      "23: public class UnsafeProperty {",
      "24:     public static int count = 0;",
      "26:     public UnsafeProperty(String name, String value) {",
      "27:         count++;",
      "28:     }",
      "29: }",
      "",
      "---------------"
    ],
    "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties": [
      "File: ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties -> ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: ## -------------------------",
      "2: ## --         Format      --",
      "3: ## -------------------------",
      "4: # -- FEATURE --",
      "5: #ff4j.features.1.uid=",
      "6: #ff4j.features.1.enable=",
      "7: #ff4j.features.1.description=",
      "8: #ff4j.features.1.groupName=",
      "9: #ff4j.features.1.permissions=",
      "10: #ff4j.features.1.custom-properties.0.name=",
      "11: #ff4j.features.1.custom-properties.0.type=",
      "12: #ff4j.features.1.custom-properties.0.value=",
      "13: #ff4j.features.1.custom-properties.0.fixedValues=",
      "14: # -- PROPERTIES --",
      "15: #ff4j.properties.0.name=",
      "16: #ff4j.properties.0.type=",
      "17: #ff4j.properties.0.value=",
      "18: #ff4j.properties.0.fixedValues=",
      "20: # Core",
      "21: ff4j.autocreate=false",
      "22: ff4j.audit=false",
      "24: # -- PROPERTIES --",
      "26: # a",
      "27: ff4j.properties.0.name=a",
      "28: ff4j.properties.0.type=org.ff4j.test.property.UnsafeProperty",
      "29: ff4j.properties.0.value=UNSAFE",
      "",
      "---------------"
    ],
    "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties": [
      "File: ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties -> ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: ## -------------------------",
      "2: ## --         Format      --",
      "3: ## -------------------------",
      "4: # -- FEATURE --",
      "5: #ff4j.features.1.uid=",
      "6: #ff4j.features.1.enable=",
      "7: #ff4j.features.1.description=",
      "8: #ff4j.features.1.groupName=",
      "9: #ff4j.features.1.permissions=",
      "10: #ff4j.features.1.custom-properties.0.name=",
      "11: #ff4j.features.1.custom-properties.0.type=",
      "12: #ff4j.features.1.custom-properties.0.value=",
      "13: #ff4j.features.1.custom-properties.0.fixedValues=",
      "14: # -- PROPERTIES --",
      "15: #ff4j.properties.0.name=",
      "16: #ff4j.properties.0.type=",
      "17: #ff4j.properties.0.value=",
      "18: #ff4j.properties.0.fixedValues=",
      "20: # Core",
      "21: ff4j.autocreate=false",
      "22: ff4j.audit=false",
      "25: # -- FEATURE --",
      "26: ff4j.features.0.uid=first",
      "27: ff4j.features.0.enable=true",
      "28: ff4j.features.0.description=description",
      "29: ff4j.features.0.flipstrategy.class=org.ff4j.strategy.el.ExpressionFlipStrategy",
      "",
      "---------------"
    ],
    "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java||ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java": [
      "File: ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java -> ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:             if (null != strategy && !strategy.isEmpty()) {",
      "106:                 try {",
      "107:                     Class<?> strategyClass = Class.forName(strategy);",
      "108:                     FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();",
      "110:                     final String strategyParams = req.getParameter(STRATEGY_INIT);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:                     if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {",
      "109:                         throw new IllegalArgumentException(\"Cannot create flipstrategy: <\" + strategy + \"> invalid type\");",
      "110:                     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:         if (null != strategy && !strategy.isEmpty()) {",
      "247:             try {",
      "248:                 Class<?> strategyClass = Class.forName(strategy);",
      "249:                 FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();",
      "251:                 if (null != strategyParams && !strategyParams.isEmpty()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "252:                 if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {",
      "253:                     throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + strategy + \"> invalid type\");",
      "254:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
      "candidate_info": {
        "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
        "repo": "ff4j/ff4j",
        "commit_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
        "files": [
          "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
          "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
          "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
          "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
          "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
          "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
          "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java",
          "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
          "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java",
          "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
          "ff4j-core/src/test/resources/test-feature-ko8.xml",
          "ff4j-core/src/test/resources/test-property6.xml",
          "ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java",
          "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
          "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.json",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.xml",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.yml",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.json",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.xml",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.yml",
          "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java"
        ],
        "message": "fix: Validate FlippingStrategy in various parsers (#624)",
        "before_after_code_files": [
          "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
          "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
          "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
          "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
          "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
          "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java||ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
          "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
          "ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java",
          "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java||ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
          "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
          "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java||ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ff4j/ff4j/pull/625"
        ],
        "olp_code_files": {
          "patch": [
            "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
            "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
            "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
            "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
            "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
            "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java||ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
            "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
            "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
            "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java||ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
            "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
            "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
            "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java||ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java"
          ],
          "candidate": [
            "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
            "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
            "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
            "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
            "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
            "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java||ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
            "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
            "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
            "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java||ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
            "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
            "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
            "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java||ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java"
          ]
        }
      },
      "candidate_diff": {
        "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java": [
          "File: ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java -> ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:             if (null != flipStrategyClass && !\"\".equals(flipStrategyClass)) {",
          "313:                 FlippingStrategy flipStrategy = null;",
          "314:                 try {",
          "316:                 } catch (Exception e) {",
          "317:                     throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + f.getUid() +",
          "318:                             \"' -> check key [\" + currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS + \"]\", e);",
          "",
          "[Removed Lines]",
          "315:                     flipStrategy = (FlippingStrategy) Class.forName(flipStrategyClass).newInstance();",
          "",
          "[Added Lines]",
          "315:                     Class<?> typeClass = Class.forName(flipStrategyClass);",
          "316:                     if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
          "317:                         throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + flipStrategyClass + \"> invalid type\");",
          "318:                     }",
          "319:                     flipStrategy = (FlippingStrategy) typeClass.newInstance();",
          "",
          "---------------"
        ],
        "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java": [
          "File: ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java -> ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.ff4j.conf.XmlConfig;",
          "29: import org.ff4j.conf.XmlParser;",
          "30: import org.ff4j.core.Feature;",
          "31: import org.junit.Test;",
          "33: public class PropertiesParserTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.ff4j.test.unsafe.UnsafeFlippingStrategy;",
          "32: import org.ff4j.test.unsafe.UnsafeProperty;",
          "33: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         new PropertiesParser().export(xmlConfig);",
          "48:     }",
          "51:     public void should_fail_for_unsafe_property() {",
          "53:         InputStream propsFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-features.properties\");",
          "56:     }",
          "58:     @Test",
          "",
          "[Removed Lines]",
          "50:     @Test(expected = IllegalArgumentException.class)",
          "55:         new PropertiesParser().parseConfigurationFile(propsFile);",
          "",
          "[Added Lines]",
          "53:     @Test",
          "58:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "59:             new PropertiesParser().parseConfigurationFile(propsFile);",
          "60:         });",
          "61:         Assert.assertEquals(0, UnsafeProperty.count);",
          "62:     }",
          "64:     @Test",
          "65:     public void should_fail_for_unsafe_strategy() {",
          "67:         InputStream propsFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-strategy.properties\");",
          "69:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "70:             new PropertiesParser().parseConfigurationFile(propsFile);",
          "71:         });",
          "72:         Assert.assertEquals(0, UnsafeFlippingStrategy.count);",
          "",
          "---------------"
        ],
        "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java": [
          "File: ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java -> ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:         try {",
          "257:             String clazzName = (String) toggleStrategy.get(TOGGLE_STRATEGY_ATTCLASS);",
          "260:             List<Map<String, Object>> mapYamlParam = (List<Map<String, Object>>) toggleStrategy.get(TOGGLE_STRATEGY_PARAMTAG);",
          "261:             Map<String,String> params = new HashMap<>();",
          "",
          "[Removed Lines]",
          "258:             FlippingStrategy flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();",
          "",
          "[Added Lines]",
          "258:             Class<?> typeClass = Class.forName(clazzName);",
          "259:             if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
          "260:                 throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");",
          "261:             }",
          "262:             FlippingStrategy flipStrategy = (FlippingStrategy) typeClass.newInstance();",
          "",
          "---------------"
        ],
        "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java": [
          "File: ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java -> ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.ff4j.conf.XmlConfig;",
          "29: import org.ff4j.conf.XmlParser;",
          "30: import org.ff4j.core.Feature;",
          "31: import org.junit.Test;",
          "33: public class YamlParserTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.ff4j.test.unsafe.UnsafeProperty;",
          "32: import org.ff4j.test.unsafe.UnsafeFlippingStrategy;",
          "33: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         new YamlParser().export(xmlConfig);",
          "48:     }",
          "51:     public void should_fail_for_unsafe_property() {",
          "53:         InputStream ymlFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-features.yml\");",
          "56:     }",
          "58:     @Test",
          "",
          "[Removed Lines]",
          "50:     @Test(expected = IllegalArgumentException.class)",
          "55:         new YamlParser().parseConfigurationFile(ymlFile);",
          "",
          "[Added Lines]",
          "53:     @Test",
          "58:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "59:             new YamlParser().parseConfigurationFile(ymlFile);",
          "60:         });",
          "61:         Assert.assertEquals(0, UnsafeProperty.count);",
          "62:     }",
          "64:     @Test",
          "65:     public void should_fail_for_unsafe_strategy() {",
          "67:         InputStream ymlFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-strategy.yml\");",
          "69:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "70:             new YamlParser().parseConfigurationFile(ymlFile);",
          "71:         });",
          "72:         Assert.assertEquals(0, UnsafeFlippingStrategy.count);",
          "",
          "---------------"
        ],
        "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java": [
          "File: ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java -> ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:         try {",
          "446:             String clazzName = nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS).getNodeValue();",
          "450:             Map<String, String> parameters = new LinkedHashMap<String, String>();",
          "",
          "[Removed Lines]",
          "447:             flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();",
          "",
          "[Added Lines]",
          "447:             Class<?> typeClass = Class.forName(clazzName);",
          "448:             if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
          "449:                 throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");",
          "450:             }",
          "451:             flipStrategy = (FlippingStrategy) typeClass.newInstance();",
          "",
          "---------------"
        ],
        "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java||ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java": [
          "File: ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java -> ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  public static FlippingStrategy instanceFlippingStrategy(String uid, String className,  Map<String, String> initparams) {",
          "182:         try {",
          "183:             Class<FlippingStrategy> clazz = (Class<FlippingStrategy>) (classLoader == null ? Class.forName(className) : classLoader.loadClass(className));",
          "184:             FlippingStrategy flipStrategy = clazz.newInstance();",
          "185:             flipStrategy.init(uid, initparams);",
          "186:             return flipStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:             if (!FlippingStrategy.class.isAssignableFrom(clazz)) {",
          "185:                 throw new IllegalArgumentException(\"Invalid type \" + className );",
          "186:             }",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java -> ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.ff4j.conf.XmlConfig;",
          "32: import org.ff4j.conf.XmlParser;",
          "33: import org.ff4j.property.Property;",
          "34: import org.junit.Assert;",
          "35: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.ff4j.test.unsafe.UnsafeFlippingStrategy;",
          "35: import org.ff4j.test.unsafe.UnsafeProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     public void testParsingPropertiesMoreTag() throws IOException {",
          "69:         parseFile(\"test-property5.xml\");",
          "70:     }",
          "73:     public void testParsingPropertiesUnsafe() throws IOException {",
          "75:     }",
          "77:     @Test(expected = IllegalArgumentException.class)",
          "78:     public void testParsingFeatureNoClass() throws IOException {",
          "79:         parseFile(\"test-feature-ko1.xml\");",
          "",
          "[Removed Lines]",
          "72:     @Test(expected = IllegalArgumentException.class)",
          "74:         parseFile(\"test-property6.xml\");",
          "",
          "[Added Lines]",
          "74:     @Test",
          "76:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "77:             parseFile(\"test-property6.xml\");",
          "78:         });",
          "79:         Assert.assertEquals(0, UnsafeProperty.count);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         parseFile(\"test-feature-ko7.xml\");",
          "110:     }",
          "112:     @Test",
          "113:     public void testParseXMLWithSpecialCharacters() throws IOException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     @Test",
          "118:     public void testParsingFeatureInvalidStrategy() throws IOException {",
          "119:         Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "120:             parseFile(\"test-feature-ko8.xml\");",
          "121:         });",
          "122:         Assert.assertEquals(0, UnsafeFlippingStrategy.count);",
          "123:     }",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java -> ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.ff4j.property.PropertyString;",
          "32: import org.ff4j.property.util.PropertyFactory;",
          "33: import org.ff4j.property.util.PropertyJsonBean;",
          "34: import org.ff4j.utils.Util;",
          "35: import org.junit.Assert;",
          "36: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.ff4j.test.unsafe.UnsafeProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:             PropertyFactory.createProperty(\"p1\", UnsafeProperty.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
          "107:         } catch (IllegalArgumentException e) {",
          "108:             Assert.assertEquals(0, UnsafeProperty.count);",
          "110:         }",
          "111:     }",
          "",
          "[Removed Lines]",
          "109:             Assert.assertEquals(\"Cannot create property <p1> invalid type <org.ff4j.test.property.UnsafeProperty>\", e.getCause().getMessage());",
          "",
          "[Added Lines]",
          "110:             Assert.assertEquals(\"Cannot create property <p1> invalid type <org.ff4j.test.unsafe.UnsafeProperty>\", e.getCause().getMessage());",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java -> ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.ff4j.test.unsafe;",
          "23: public class UnsafeFlippingStrategy {",
          "24:     public static int count = 0;",
          "25:     public UnsafeFlippingStrategy() {",
          "26:         count++;",
          "27:     }",
          "28: }",
          "",
          "---------------"
        ],
        "ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java": [
          "File: ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java -> ff4j-core/src/test/java/org/ff4j/test/unsafe/UnsafeProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.ff4j.test.property;",
          "",
          "[Added Lines]",
          "1: package org.ff4j.test.unsafe;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     public UnsafeProperty(String name, String value) {",
          "29:         count++;",
          "30:     }",
          "",
          "[Removed Lines]",
          "23: class UnsafeProperty {",
          "24:     static int count = 0;",
          "25:     private String name;",
          "26:     private String value;",
          "",
          "[Added Lines]",
          "23: public class UnsafeProperty {",
          "24:     public static int count = 0;",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java||ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java -> ff4j-core/src/test/java/org/ff4j/test/utils/MappingUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.ff4j.property.PropertyInt;",
          "35: import org.ff4j.property.PropertyLong;",
          "36: import org.ff4j.property.PropertyString;",
          "37: import org.ff4j.store.InMemoryFeatureStore;",
          "38: import org.ff4j.utils.JdbcUtils;",
          "39: import org.ff4j.utils.JsonUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.ff4j.test.unsafe.UnsafeProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     public void testIntanciateInvalidFlippingStrategy() {",
          "82:        MappingUtil.instanceFlippingStrategy(\"f1\", \"com.class.invalid\", new HashMap<String, String>());",
          "83:     }",
          "85:     @Test(expected = IllegalArgumentException.class)",
          "86:     public void testAssert1() {",
          "87:         Util.assertTrue(false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     @Test",
          "87:     public void testInstantiateUnsafeProperty() {",
          "88:         Assert.assertThrows(FeatureAccessException.class, () -> {",
          "89:             MappingUtil.instanceFlippingStrategy(\"f1\", \"org.ff4j.test.unsafe.UnsafeProperty\", new HashMap<String, String>());",
          "90:         });",
          "91:         Assert.assertEquals(0, UnsafeProperty.count);",
          "92:     }",
          "",
          "---------------"
        ],
        "ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java": [
          "File: ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java -> ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeFlippingStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.ff4j.test.unsafe;",
          "23: public class UnsafeFlippingStrategy {",
          "24:     public static int count = 0;",
          "26:     public UnsafeFlippingStrategy() {",
          "27:         count++;",
          "28:     }",
          "29: }",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java -> ff4j-test/src/main/java/org/ff4j/test/unsafe/UnsafeProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.ff4j.test.property;",
          "",
          "[Added Lines]",
          "1: package org.ff4j.test.unsafe;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     public UnsafeProperty(String name, String value) {",
          "29:         count++;",
          "",
          "[Removed Lines]",
          "23: class UnsafeProperty {",
          "24:     static int count = 0;",
          "25:     private String name;",
          "26:     private String value;",
          "",
          "[Added Lines]",
          "23: public class UnsafeProperty {",
          "24:     public static int count = 0;",
          "",
          "---------------"
        ],
        "ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties": [
          "File: ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties -> ff4j-test/src/main/resources/unsafe/test-ff4j-strategy.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ## -------------------------",
          "2: ## --         Format      --",
          "3: ## -------------------------",
          "4: # -- FEATURE --",
          "5: #ff4j.features.1.uid=",
          "6: #ff4j.features.1.enable=",
          "7: #ff4j.features.1.description=",
          "8: #ff4j.features.1.groupName=",
          "9: #ff4j.features.1.permissions=",
          "10: #ff4j.features.1.custom-properties.0.name=",
          "11: #ff4j.features.1.custom-properties.0.type=",
          "12: #ff4j.features.1.custom-properties.0.value=",
          "13: #ff4j.features.1.custom-properties.0.fixedValues=",
          "14: # -- PROPERTIES --",
          "15: #ff4j.properties.0.name=",
          "16: #ff4j.properties.0.type=",
          "17: #ff4j.properties.0.value=",
          "18: #ff4j.properties.0.fixedValues=",
          "20: # Core",
          "21: ff4j.autocreate=false",
          "22: ff4j.audit=false",
          "25: # -- FEATURE --",
          "26: ff4j.features.0.uid=first",
          "27: ff4j.features.0.enable=true",
          "28: ff4j.features.0.description=description",
          "29: ff4j.features.0.flipstrategy.class=org.ff4j.strategy.el.ExpressionFlipStrategy",
          "",
          "---------------"
        ],
        "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java||ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java": [
          "File: ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java -> ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:             if (null != strategy && !strategy.isEmpty()) {",
          "106:                 try {",
          "107:                     Class<?> strategyClass = Class.forName(strategy);",
          "108:                     FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();",
          "110:                     final String strategyParams = req.getParameter(STRATEGY_INIT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:                     if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {",
          "109:                         throw new IllegalArgumentException(\"Cannot create flipstrategy: <\" + strategy + \"> invalid type\");",
          "110:                     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:         if (null != strategy && !strategy.isEmpty()) {",
          "247:             try {",
          "248:                 Class<?> strategyClass = Class.forName(strategy);",
          "249:                 FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();",
          "251:                 if (null != strategyParams && !strategyParams.isEmpty()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:                 if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {",
          "253:                     throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + strategy + \"> invalid type\");",
          "254:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e915c026aef46b502934cb05a825ea2ea15eb9e6",
      "candidate_info": {
        "commit_hash": "e915c026aef46b502934cb05a825ea2ea15eb9e6",
        "repo": "ff4j/ff4j",
        "commit_url": "https://github.com/ff4j/ff4j/commit/e915c026aef46b502934cb05a825ea2ea15eb9e6",
        "files": [
          "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
          "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
          "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
          "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
          "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
          "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java",
          "ff4j-core/src/test/resources/test-property6.xml",
          "ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.json",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.xml",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.yml"
        ],
        "message": "fix: Add assignable check to PropertiesParser, YamlParser and XmlParser (#624)",
        "before_after_code_files": [
          "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
          "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
          "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
          "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
          "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
          "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java",
          "ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java",
          "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ff4j/ff4j/pull/625"
        ],
        "olp_code_files": {
          "patch": [
            "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
            "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
            "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
            "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
            "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
            "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
            "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties"
          ],
          "candidate": [
            "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
            "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
            "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
            "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
            "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
            "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
            "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties"
          ]
        }
      },
      "candidate_diff": {
        "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java||ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java": [
          "File: ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java -> ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:                 optionalType = MappingUtil.mapPropertyType(optionalType);",
          "231:                 try {",
          "234:                     ap = (Property<?>) constr.newInstance(name, strValue);",
          "235:                 } catch (Exception e) {",
          "236:                     throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
          "",
          "[Removed Lines]",
          "233:                     Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);",
          "",
          "[Added Lines]",
          "233:                     Class<?> typeClass = Class.forName(optionalType);",
          "234:                     if (!Property.class.isAssignableFrom(typeClass)) {",
          "235:                         throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
          "236:                     }",
          "237:                     Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
          "",
          "---------------"
        ],
        "ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java||ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java": [
          "File: ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java -> ff4j-config-properties/src/test/java/org/ff4j/parser/properties/PropertiesParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         new PropertiesParser().export(xmlConfig);",
          "48:     }",
          "50:     @Test",
          "51:     public void importProperties_should_be_same_asXMLImport() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     @Test(expected = IllegalArgumentException.class)",
          "51:     public void should_fail_for_unsafe_property() {",
          "53:         InputStream propsFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-features.properties\");",
          "55:         new PropertiesParser().parseConfigurationFile(propsFile);",
          "56:     }",
          "",
          "---------------"
        ],
        "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java||ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java": [
          "File: ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java -> ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:                     optionalType = MappingUtil.mapPropertyType(optionalType);",
          "173:                     try {",
          "176:                         ap = (Property<?>) constr.newInstance(name, strValue);",
          "177:                     } catch (Exception e) {",
          "178:                         throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
          "",
          "[Removed Lines]",
          "175:                         Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);",
          "",
          "[Added Lines]",
          "175:                         Class<?> typeClass = Class.forName(optionalType);",
          "176:                         if (!Property.class.isAssignableFrom(typeClass)) {",
          "177:                             throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
          "178:                         }",
          "179:                         Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
          "",
          "---------------"
        ],
        "ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java||ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java": [
          "File: ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java -> ff4j-config-yaml/src/test/java/org/ff4j/parser/yaml/YamlParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         new YamlParser().export(xmlConfig);",
          "48:     }",
          "50:     @Test",
          "51:     public void importYaml_should_be_same_asXMLImport() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     @Test(expected = IllegalArgumentException.class)",
          "51:     public void should_fail_for_unsafe_property() {",
          "53:         InputStream ymlFile = getClass().getClassLoader().getResourceAsStream(\"unsafe/test-ff4j-features.yml\");",
          "55:         new YamlParser().parseConfigurationFile(ymlFile);",
          "56:     }",
          "",
          "---------------"
        ],
        "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java||ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java": [
          "File: ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java -> ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:                 try {",
          "388:                     ap = (Property<?>) constr.newInstance(name, value);",
          "389:                 } catch (Exception e) {",
          "390:                     throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
          "",
          "[Removed Lines]",
          "387:                     Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);",
          "",
          "[Added Lines]",
          "387:                     Class<?> typeClass = Class.forName(optionalType);",
          "388:                     if (!Property.class.isAssignableFrom(typeClass)) {",
          "389:                         throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
          "390:                     }",
          "391:                     Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java||ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java -> ff4j-core/src/test/java/org/ff4j/test/parser/XmlParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     public void testParsingPropertiesMoreTag() throws IOException {",
          "69:         parseFile(\"test-property5.xml\");",
          "70:     }",
          "72:     @Test(expected = IllegalArgumentException.class)",
          "73:     public void testParsingFeatureNoClass() throws IOException {",
          "74:         parseFile(\"test-feature-ko1.xml\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     @Test(expected = IllegalArgumentException.class)",
          "73:     public void testParsingPropertiesUnsafe() throws IOException {",
          "74:         parseFile(\"test-property6.xml\");",
          "75:     }",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java -> ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java"
        ],
        "ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java": [
          "File: ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java -> ff4j-test/src/main/java/org/ff4j/test/property/UnsafeProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.ff4j.test.property;",
          "23: class UnsafeProperty {",
          "24:     static int count = 0;",
          "25:     private String name;",
          "26:     private String value;",
          "28:     public UnsafeProperty(String name, String value) {",
          "29:         count++;",
          "30:     }",
          "31: }",
          "",
          "---------------"
        ],
        "ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties||ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties": [
          "File: ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties -> ff4j-test/src/main/resources/unsafe/test-ff4j-features.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ## -------------------------",
          "2: ## --         Format      --",
          "3: ## -------------------------",
          "4: # -- FEATURE --",
          "5: #ff4j.features.1.uid=",
          "6: #ff4j.features.1.enable=",
          "7: #ff4j.features.1.description=",
          "8: #ff4j.features.1.groupName=",
          "9: #ff4j.features.1.permissions=",
          "10: #ff4j.features.1.custom-properties.0.name=",
          "11: #ff4j.features.1.custom-properties.0.type=",
          "12: #ff4j.features.1.custom-properties.0.value=",
          "13: #ff4j.features.1.custom-properties.0.fixedValues=",
          "14: # -- PROPERTIES --",
          "15: #ff4j.properties.0.name=",
          "16: #ff4j.properties.0.type=",
          "17: #ff4j.properties.0.value=",
          "18: #ff4j.properties.0.fixedValues=",
          "20: # Core",
          "21: ff4j.autocreate=false",
          "22: ff4j.audit=false",
          "24: # -- PROPERTIES --",
          "26: # a",
          "27: ff4j.properties.0.name=a",
          "28: ff4j.properties.0.type=org.ff4j.test.property.UnsafeProperty",
          "29: ff4j.properties.0.value=UNSAFE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77fd4deb705991cba7c8e133f38dd3aaf30a50bb",
      "candidate_info": {
        "commit_hash": "77fd4deb705991cba7c8e133f38dd3aaf30a50bb",
        "repo": "ff4j/ff4j",
        "commit_url": "https://github.com/ff4j/ff4j/commit/77fd4deb705991cba7c8e133f38dd3aaf30a50bb",
        "files": [
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java"
        ],
        "message": "fix: Update UnsafeProperty to have a side effect that can be validated (#624)",
        "before_after_code_files": [
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ff4j/ff4j/pull/625"
        ],
        "olp_code_files": {
          "patch": [
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
          ],
          "candidate": [
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
          ]
        }
      },
      "candidate_diff": {
        "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java -> ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.junit.Assert;",
          "36: import org.junit.Test;",
          "42: public class PropertyFactoryTest {",
          "",
          "[Removed Lines]",
          "38: import static org.hamcrest.CoreMatchers.containsString;",
          "39: import static org.hamcrest.MatcherAssert.assertThat;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         try {",
          "109:             PropertyFactory.createProperty(\"p1\", UnsafeProperty.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
          "110:         } catch (IllegalArgumentException e) {",
          "112:         }",
          "113:     }",
          "",
          "[Removed Lines]",
          "111:             assertThat(e.getMessage(), containsString(\"Cannot create property <p1> invalid type <org.ff4j.test.property.PropertyFactoryTest$UnsafeProperty>\"));",
          "",
          "[Added Lines]",
          "108:             Assert.assertEquals(0, UnsafeProperty.count);",
          "109:             Assert.assertEquals(\"Cannot create property <p1> invalid type <org.ff4j.test.property.UnsafeProperty>\", e.getCause().getMessage());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         Assert.assertNotNull(PropertyFactory.createProperty(jsonBean));",
          "125:     }",
          "132: }",
          "",
          "[Removed Lines]",
          "127:     class UnsafeProperty {",
          "129:         public UnsafeProperty(String name, String value) {",
          "130:         }",
          "131:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java||ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java -> ff4j-core/src/test/java/org/ff4j/test/property/UnsafeProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.ff4j.test.property;",
          "3: class UnsafeProperty {",
          "4:     static int count = 0;",
          "5:     private String name;",
          "6:     private String value;",
          "8:     public UnsafeProperty(String name, String value) {",
          "9:         count++;",
          "10:     }",
          "11: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "481ca723a57f87eca931196ec9a772967ab70b3b",
      "candidate_info": {
        "commit_hash": "481ca723a57f87eca931196ec9a772967ab70b3b",
        "repo": "ff4j/ff4j",
        "commit_url": "https://github.com/ff4j/ff4j/commit/481ca723a57f87eca931196ec9a772967ab70b3b",
        "files": [
          "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
        ],
        "message": "fix: CVE-2022-44262 (#624)",
        "before_after_code_files": [
          "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java||ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ff4j/ff4j/pull/625"
        ],
        "olp_code_files": {
          "patch": [
            "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java||ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
          ],
          "candidate": [
            "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java||ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
          ]
        }
      },
      "candidate_diff": {
        "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java||ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java": [
          "File: ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java -> ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         Util.assertNotNull(pType);",
          "161:         Property<?> ap = null;",
          "162:         try {",
          "164:             ap = (Property<?>) constr.newInstance(pName, pValue);",
          "165:             ap.setDescription(desc);",
          "",
          "[Removed Lines]",
          "163:             Constructor<?> constr = Class.forName(pType).getConstructor(String.class, String.class);",
          "",
          "[Added Lines]",
          "163:             Class<?> typeClass = Class.forName(pType);",
          "164:             if (!Property.class.isAssignableFrom(typeClass)) {",
          "165:                 throw new IllegalArgumentException(\"Cannot create property <\" + pName + \"> invalid type <\" + pType + \">\");",
          "166:             }",
          "167:             Constructor<?> constr = typeClass.getConstructor(String.class, String.class);",
          "",
          "---------------"
        ],
        "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java -> ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.junit.Assert;",
          "36: import org.junit.Test;",
          "39: public class PropertyFactoryTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import static org.hamcrest.CoreMatchers.containsString;",
          "39: import static org.hamcrest.MatcherAssert.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     public void testPropertyFactory9() {",
          "100:         PropertyFactory.createProperty(\"p1\", PropertyString.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
          "101:     }",
          "103:     @Test",
          "104:     public void testCreateProperty() {",
          "105:         Assert.assertNull(PropertyFactory.createProperty(null));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     @Test",
          "107:     public void testPropertyFactory10() {",
          "108:         try {",
          "109:             PropertyFactory.createProperty(\"p1\", UnsafeProperty.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
          "110:         } catch (IllegalArgumentException e) {",
          "111:             assertThat(e.getMessage(), containsString(\"Cannot create property <p1> invalid type <org.ff4j.test.property.PropertyFactoryTest$UnsafeProperty>\"));",
          "112:         }",
          "113:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:         PropertyJsonBean jsonBean = new PropertyJsonBean(new PropertyString(\"p1\", \"v1\"));",
          "112:         Assert.assertNotNull(PropertyFactory.createProperty(jsonBean));",
          "113:     }",
          "114: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     class UnsafeProperty {",
          "129:         public UnsafeProperty(String name, String value) {",
          "130:         }",
          "131:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bab407bdd86d2c923d4025479e12716834592d2",
      "candidate_info": {
        "commit_hash": "2bab407bdd86d2c923d4025479e12716834592d2",
        "repo": "ff4j/ff4j",
        "commit_url": "https://github.com/ff4j/ff4j/commit/2bab407bdd86d2c923d4025479e12716834592d2",
        "files": [
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
        ],
        "message": "fix: Use assertThrows in PropertyFactoryTest (#624)",
        "before_after_code_files": [
          "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ff4j/ff4j/pull/625"
        ],
        "olp_code_files": {
          "patch": [
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
          ],
          "candidate": [
            "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java"
          ]
        }
      },
      "candidate_diff": {
        "ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java||ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java": [
          "File: ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java -> ff4j-core/src/test/java/org/ff4j/test/property/PropertyFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     @Test",
          "105:     public void testPropertyFactory10() {",
          "107:             PropertyFactory.createProperty(\"p1\", UnsafeProperty.class.getName(), \"s1\", \"desc\", Util.set(\"s3\", \"s2\"));",
          "112:     }",
          "114:     @Test",
          "",
          "[Removed Lines]",
          "106:         try {",
          "108:         } catch (IllegalArgumentException e) {",
          "109:             Assert.assertEquals(0, UnsafeProperty.count);",
          "110:             Assert.assertEquals(\"Cannot create property <p1> invalid type <org.ff4j.test.unsafe.UnsafeProperty>\", e.getCause().getMessage());",
          "111:         }",
          "",
          "[Added Lines]",
          "106:         IllegalArgumentException exception = Assert.assertThrows(IllegalArgumentException.class, () -> {",
          "108:         });",
          "109:         Assert.assertEquals(0, UnsafeProperty.count);",
          "110:         Assert.assertEquals(\"Cannot create property <p1> invalid type <org.ff4j.test.unsafe.UnsafeProperty>\", exception.getCause().getMessage());",
          "",
          "---------------"
        ]
      }
    }
  ]
}