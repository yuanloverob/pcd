{
  "cve_id": "CVE-2020-7699",
  "cve_desc": "This affects the package express-fileupload before 1.1.8. If the parseNested option is enabled, sending a corrupt HTTP request can lead to denial of service or arbitrary code execution.",
  "repo": "richardgirges/express-fileupload",
  "patch_hash": "db495357d7557ceb5c034de91a7a574bd12f9b9f",
  "patch_info": {
    "commit_hash": "db495357d7557ceb5c034de91a7a574bd12f9b9f",
    "repo": "richardgirges/express-fileupload",
    "commit_url": "https://github.com/richardgirges/express-fileupload/commit/db495357d7557ceb5c034de91a7a574bd12f9b9f",
    "files": [
      "lib/processNested.js",
      "package-lock.json",
      "package.json",
      "test/processNested.spec.js"
    ],
    "message": "Merge pull request #237 from richardgirges/fix-236-proto-pollution\n\nFix prototype pollution issue in `processNested`",
    "before_after_code_files": [
      "lib/processNested.js||lib/processNested.js",
      "test/processNested.spec.js||test/processNested.spec.js"
    ]
  },
  "patch_diff": {
    "lib/processNested.js||lib/processNested.js": [
      "File: lib/processNested.js -> lib/processNested.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: module.exports = function(data){",
      "2:   if (!data || data.length < 1) return {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const INVALID_KEYS = ['__proto__'];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11:       keyParts = key",
      "12:         .replace(new RegExp(/\\[/g), '.')",
      "13:         .replace(new RegExp(/\\]/g), '')",
      "16:     for (let index = 0; index < keyParts.length; index++){",
      "17:       let k = keyParts[index];",
      "18:       if (index >= keyParts.length - 1){",
      "19:         current[k] = value;",
      "20:       } else {",
      "",
      "[Removed Lines]",
      "14:         .split('.');",
      "",
      "[Added Lines]",
      "16:         .split('.');",
      "22:       if (INVALID_KEYS.includes(k)) {",
      "23:         continue;",
      "24:       }",
      "",
      "---------------"
    ],
    "test/processNested.spec.js||test/processNested.spec.js": [
      "File: test/processNested.spec.js -> test/processNested.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:     assert.deepEqual(processed, excerpt);",
      "47:   });",
      "48: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:   it('Do not allow prototype pollution', () => {",
      "50:     const pollutionOb = JSON.parse(`{\"__proto__.POLLUTED\": \"FOOBAR\"}`);",
      "52:     processNested(pollutionOb);",
      "55:     assert.equal(global.POLLUTED, undefined);",
      "56:   });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d81bee9bc07f98246b7c580e2c25c1db656af7b5",
      "candidate_info": {
        "commit_hash": "d81bee9bc07f98246b7c580e2c25c1db656af7b5",
        "repo": "richardgirges/express-fileupload",
        "commit_url": "https://github.com/richardgirges/express-fileupload/commit/d81bee9bc07f98246b7c580e2c25c1db656af7b5",
        "files": [
          "lib/processNested.js",
          "package-lock.json",
          "package.json",
          "test/processNested.spec.js"
        ],
        "message": "Upgrade latest packages; run npm audit fix; add logic to prevent prototype pollution in parseNested",
        "before_after_code_files": [
          "lib/processNested.js||lib/processNested.js",
          "test/processNested.spec.js||test/processNested.spec.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/richardgirges/express-fileupload/pull/237"
        ],
        "olp_code_files": {
          "patch": [
            "lib/processNested.js||lib/processNested.js",
            "test/processNested.spec.js||test/processNested.spec.js"
          ],
          "candidate": [
            "lib/processNested.js||lib/processNested.js",
            "test/processNested.spec.js||test/processNested.spec.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/processNested.js||lib/processNested.js": [
          "File: lib/processNested.js -> lib/processNested.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module.exports = function(data){",
          "2:   if (!data || data.length < 1) return {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const INVALID_KEYS = ['__proto__'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:       keyParts = key",
          "12:         .replace(new RegExp(/\\[/g), '.')",
          "13:         .replace(new RegExp(/\\]/g), '')",
          "16:     for (let index = 0; index < keyParts.length; index++){",
          "17:       let k = keyParts[index];",
          "18:       if (index >= keyParts.length - 1){",
          "19:         current[k] = value;",
          "20:       } else {",
          "",
          "[Removed Lines]",
          "14:         .split('.');",
          "",
          "[Added Lines]",
          "16:         .split('.');",
          "22:       if (INVALID_KEYS.includes(k)) {",
          "23:         continue;",
          "24:       }",
          "",
          "---------------"
        ],
        "test/processNested.spec.js||test/processNested.spec.js": [
          "File: test/processNested.spec.js -> test/processNested.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     assert.deepEqual(processed, excerpt);",
          "47:   });",
          "48: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:   it('Do not allow prototype pollution', () => {",
          "50:     const pollutionOb = JSON.parse(`{\"__proto__.POLLUTED\": \"FOOBAR\"}`);",
          "52:     processNested(pollutionOb);",
          "55:     assert.equal(global.POLLUTED, undefined);",
          "56:   });",
          "",
          "---------------"
        ]
      }
    }
  ]
}