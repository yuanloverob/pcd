{
  "cve_id": "CVE-2017-20162",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in vercel ms up to 1.x. This issue affects the function parse of the file index.js. The manipulation of the argument str leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The patch is named caae2988ba2a37765d055c4eee63d383320ee662. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217451.",
  "repo": "vercel/ms",
  "patch_hash": "caae2988ba2a37765d055c4eee63d383320ee662",
  "patch_info": {
    "commit_hash": "caae2988ba2a37765d055c4eee63d383320ee662",
    "repo": "vercel/ms",
    "commit_url": "https://github.com/vercel/ms/commit/caae2988ba2a37765d055c4eee63d383320ee662",
    "files": [
      "index.js"
    ],
    "message": "Limit str to 100 to avoid ReDoS of 0.3s (#89)",
    "before_after_code_files": [
      "index.js||index.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "47: function parse(str) {",
      "48:   str = String(str);",
      "50:     return;",
      "51:   }",
      "52:   var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(",
      "",
      "[Removed Lines]",
      "49:   if (str.length > 10000) {",
      "",
      "[Added Lines]",
      "49:   if (str.length > 100) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e333857f4c0723bc73c3035bff9cea23532c824",
      "candidate_info": {
        "commit_hash": "8e333857f4c0723bc73c3035bff9cea23532c824",
        "repo": "vercel/ms",
        "commit_url": "https://github.com/vercel/ms/commit/8e333857f4c0723bc73c3035bff9cea23532c824",
        "files": [
          "index.js",
          "package.json",
          "test/index.js"
        ],
        "message": "Add `xo` as a linting tool (#64)",
        "before_after_code_files": [
          "index.js||index.js",
          "test/index.js||test/index.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js"
          ],
          "candidate": [
            "index.js||index.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5: var s = 1000;",
          "6: var m = s * 60;",
          "7: var h = m * 60;",
          "8: var d = h * 24;",
          "9: var y = d * 365.25;",
          "",
          "[Added Lines]",
          "5: var s = 1000",
          "6: var m = s * 60",
          "7: var h = m * 60",
          "8: var d = h * 24",
          "9: var y = d * 365.25",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   }",
          "",
          "[Removed Lines]",
          "25: module.exports = function(val, options){",
          "26:   options = options || {};",
          "27:   var type = typeof val;",
          "28:   if ('string' === type && val.length > 0) {",
          "29:     return parse(val);",
          "30:   } else if ('number' === type && isNaN(val) === false) {",
          "31:     return options['long']",
          "32:       ? fmtLong(val)",
          "33:       : fmtShort(val);",
          "34:   } else {",
          "35:     throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));",
          "37: };",
          "",
          "[Added Lines]",
          "25: module.exports = function (val, options) {",
          "26:   options = options || {}",
          "27:   var type = typeof val",
          "28:   if (type === 'string' && val.length > 0) {",
          "29:     return parse(val)",
          "30:   } else if (type === 'number' && isNaN(val) === false) {",
          "31:     return options.long ?",
          "32:    fmtLong(val) :",
          "33:    fmtShort(val)",
          "35:   throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))",
          "36: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: function parse(str) {",
          "54:   switch (type) {",
          "55:     case 'years':",
          "56:     case 'year':",
          "57:     case 'yrs':",
          "58:     case 'yr':",
          "59:     case 'y':",
          "61:     case 'days':",
          "62:     case 'day':",
          "63:     case 'd':",
          "65:     case 'hours':",
          "66:     case 'hour':",
          "67:     case 'hrs':",
          "68:     case 'hr':",
          "69:     case 'h':",
          "71:     case 'minutes':",
          "72:     case 'minute':",
          "73:     case 'mins':",
          "74:     case 'min':",
          "75:     case 'm':",
          "77:     case 'seconds':",
          "78:     case 'second':",
          "79:     case 'secs':",
          "80:     case 'sec':",
          "81:     case 's':",
          "83:     case 'milliseconds':",
          "84:     case 'millisecond':",
          "85:     case 'msecs':",
          "86:     case 'msec':",
          "87:     case 'ms':",
          "89:   }",
          "90: }",
          "",
          "[Removed Lines]",
          "48:   str = '' + str;",
          "49:   if (str.length > 10000) return;",
          "50:   var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);",
          "51:   if (!match) return;",
          "52:   var n = parseFloat(match[1]);",
          "53:   var type = (match[2] || 'ms').toLowerCase();",
          "60:       return n * y;",
          "64:       return n * d;",
          "70:       return n * h;",
          "76:       return n * m;",
          "82:       return n * s;",
          "88:       return n;",
          "",
          "[Added Lines]",
          "47:   str = String(str)",
          "48:   if (str.length > 10000) {",
          "49:     return",
          "50:   }",
          "51:   var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)",
          "52:   if (!match) {",
          "53:     return",
          "54:   }",
          "55:   var n = parseFloat(match[1])",
          "56:   var type = (match[2] || 'ms').toLowerCase()",
          "63:       return n * y",
          "67:       return n * d",
          "73:       return n * h",
          "79:       return n * m",
          "85:       return n * s",
          "91:       return n",
          "92:     default:",
          "93:       return undefined",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100: function fmtShort(ms) {",
          "106: }",
          "",
          "[Removed Lines]",
          "101:   if (ms >= d) return Math.round(ms / d) + 'd';",
          "102:   if (ms >= h) return Math.round(ms / h) + 'h';",
          "103:   if (ms >= m) return Math.round(ms / m) + 'm';",
          "104:   if (ms >= s) return Math.round(ms / s) + 's';",
          "105:   return ms + 'ms';",
          "",
          "[Added Lines]",
          "106:   if (ms >= d) {",
          "107:     return Math.round(ms / d) + 'd'",
          "108:   }",
          "109:   if (ms >= h) {",
          "110:     return Math.round(ms / h) + 'h'",
          "111:   }",
          "112:   if (ms >= m) {",
          "113:     return Math.round(ms / m) + 'm'",
          "114:   }",
          "115:   if (ms >= s) {",
          "116:     return Math.round(ms / s) + 's'",
          "117:   }",
          "118:   return ms + 'ms'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116: function fmtLong(ms) {",
          "122: }",
          "",
          "[Removed Lines]",
          "117:   return plural(ms, d, 'day')",
          "118:     || plural(ms, h, 'hour')",
          "119:     || plural(ms, m, 'minute')",
          "120:     || plural(ms, s, 'second')",
          "121:     || ms + ' ms';",
          "",
          "[Added Lines]",
          "130:   return plural(ms, d, 'day') ||",
          "131:     plural(ms, h, 'hour') ||",
          "132:     plural(ms, m, 'minute') ||",
          "133:     plural(ms, s, 'second') ||",
          "134:     ms + ' ms'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128: function plural(ms, n, name) {",
          "132: }",
          "",
          "[Removed Lines]",
          "129:   if (ms < n) return;",
          "130:   if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;",
          "131:   return Math.ceil(ms / n) + ' ' + name + 's';",
          "",
          "[Added Lines]",
          "142:   if (ms < n) {",
          "143:     return",
          "144:   }",
          "145:   if (ms < n * 1.5) {",
          "146:     return Math.floor(ms / n) + ' ' + name",
          "147:   }",
          "148:   return Math.ceil(ms / n) + ' ' + name + 's'",
          "",
          "---------------"
        ],
        "test/index.js||test/index.js": [
          "File: test/index.js -> test/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: }",
          "20:   it('should preserve ms', function () {",
          "24:   it('should convert from m to ms', function () {",
          "28:   it('should convert from h to ms', function () {",
          "32:   it('should convert d to ms', function () {",
          "36:   it('should convert s to ms', function () {",
          "40:   it('should convert ms to ms', function () {",
          "44:   it('should work with decimals', function () {",
          "48:   it('should work with multiple spaces', function () {",
          "52:   it('should return NaN if invalid', function () {",
          "56:   it('should be case-insensitive', function () {",
          "60:   it('should work with numbers starting with .', function () {",
          "63: })",
          "74:   it('should convert milliseconds to ms', function () {",
          "78:   it('should convert msecs to ms', function () {",
          "82:   it('should convert sec to ms', function () {",
          "86:   it('should convert from min to ms', function () {",
          "90:   it('should convert from hr to ms', function () {",
          "94:   it('should convert days to ms', function () {",
          "98:   it('should work with decimals', function () {",
          "101: })",
          "114:   })",
          "120:   })",
          "126:   })",
          "132:   })",
          "138:   })",
          "142:   })",
          "143: })",
          "156:   })",
          "161:   })",
          "166:   })",
          "171:   })",
          "176:   })",
          "180:   })",
          "181: })",
          "",
          "[Removed Lines]",
          "6: if ('undefined' != typeof require) {",
          "7:   expect = require('expect.js');",
          "8:   ms = require('../');",
          "13: describe('ms(string)', function(){",
          "14:   it('should not throw an error', function() {",
          "15:     expect(function() {",
          "16:       ms('1m');",
          "17:     }).to.not.throwError();",
          "18:   });",
          "21:     expect(ms('100')).to.be(100);",
          "22:   });",
          "25:     expect(ms('1m')).to.be(60000);",
          "26:   });",
          "29:     expect(ms('1h')).to.be(3600000);",
          "30:   });",
          "33:     expect(ms('2d')).to.be(172800000);",
          "34:   });",
          "37:     expect(ms('1s')).to.be(1000);",
          "38:   });",
          "41:     expect(ms('100ms')).to.be(100);",
          "42:   });",
          "45:     expect(ms('1.5h')).to.be(5400000);",
          "46:   });",
          "49:     expect(ms('1   s')).to.be(1000);",
          "50:   });",
          "53:     expect(isNaN(ms('\u2603'))).to.be(true);",
          "54:   });",
          "57:     expect(ms('1.5H')).to.be(5400000);",
          "58:   });",
          "61:     expect(ms('.5ms')).to.be(.5);",
          "62:   });",
          "67: describe('ms(long string)', function(){",
          "68:   it('should not throw an error', function() {",
          "69:     expect(function() {",
          "70:       ms('53 milliseconds');",
          "71:     }).to.not.throwError();",
          "72:   });",
          "75:     expect(ms('53 milliseconds')).to.be(53);",
          "76:   });",
          "79:     expect(ms('17 msecs')).to.be(17);",
          "80:   });",
          "83:     expect(ms('1 sec')).to.be(1000);",
          "84:   });",
          "87:     expect(ms('1 min')).to.be(60000);",
          "88:   });",
          "91:     expect(ms('1 hr')).to.be(3600000);",
          "92:   });",
          "95:     expect(ms('2 days')).to.be(172800000);",
          "96:   });",
          "99:     expect(ms('1.5 hours')).to.be(5400000);",
          "100:   });",
          "105: describe('ms(number, { long: true })', function(){",
          "106:   it('should not throw an error', function() {",
          "107:     expect(function() {",
          "108:       ms(500, { long: true });",
          "109:     }).to.not.throwError();",
          "110:   });",
          "112:   it('should support milliseconds', function(){",
          "113:     expect(ms(500, { long: true })).to.be('500 ms');",
          "116:   it('should support seconds', function(){",
          "117:     expect(ms(1000, { long: true })).to.be('1 second');",
          "118:     expect(ms(1200, { long: true })).to.be('1 second');",
          "119:     expect(ms(10000, { long: true })).to.be('10 seconds');",
          "122:   it('should support minutes', function(){",
          "123:     expect(ms(60 * 1000, { long: true })).to.be('1 minute');",
          "124:     expect(ms(60 * 1200, { long: true })).to.be('1 minute');",
          "125:     expect(ms(60 * 10000, { long: true })).to.be('10 minutes');",
          "128:   it('should support hours', function(){",
          "129:     expect(ms(60 * 60 * 1000, { long: true })).to.be('1 hour');",
          "130:     expect(ms(60 * 60 * 1200, { long: true })).to.be('1 hour');",
          "131:     expect(ms(60 * 60 * 10000, { long: true })).to.be('10 hours');",
          "134:   it('should support days', function(){",
          "135:     expect(ms(24 * 60 * 60 * 1000, { long: true })).to.be('1 day');",
          "136:     expect(ms(24 * 60 * 60 * 1200, { long: true })).to.be('1 day');",
          "137:     expect(ms(24 * 60 * 60 * 10000, { long: true })).to.be('10 days');",
          "140:   it('should round', function(){",
          "141:     expect(ms(234234234, { long: true })).to.be('3 days');",
          "147: describe('ms(number)', function(){",
          "148:   it('should not throw an error', function() {",
          "149:     expect(function() {",
          "150:       ms(500);",
          "151:     }).to.not.throwError();",
          "152:   });",
          "154:   it('should support milliseconds', function(){",
          "155:     expect(ms(500)).to.be('500ms');",
          "158:   it('should support seconds', function(){",
          "159:     expect(ms(1000)).to.be('1s');",
          "160:     expect(ms(10000)).to.be('10s');",
          "163:   it('should support minutes', function(){",
          "164:     expect(ms(60 * 1000)).to.be('1m');",
          "165:     expect(ms(60 * 10000)).to.be('10m');",
          "168:   it('should support hours', function(){",
          "169:     expect(ms(60 * 60 * 1000)).to.be('1h');",
          "170:     expect(ms(60 * 60 * 10000)).to.be('10h');",
          "173:   it('should support days', function(){",
          "174:     expect(ms(24 * 60 * 60 * 1000)).to.be('1d');",
          "175:     expect(ms(24 * 60 * 60 * 10000)).to.be('10d');",
          "178:   it('should round', function(){",
          "179:     expect(ms(234234234)).to.be('3d');",
          "186: describe('ms(invalid inputs)', function() {",
          "187:   it('should throw an error, when ms(\"\")', function() {",
          "188:     expect(function() {",
          "189:       ms('');",
          "190:     }).to.throwError();",
          "191:   });",
          "193:   it('should throw an error, when ms(undefined)', function() {",
          "194:     expect(function() {",
          "195:       ms(undefined);",
          "196:     }).to.throwError();",
          "197:   });",
          "199:   it('should throw an error, when ms(null)', function() {",
          "200:     expect(function() {",
          "201:       ms(null);",
          "202:     }).to.throwError();",
          "203:   });",
          "205:   it('should throw an error, when ms([])', function() {",
          "206:     expect(function() {",
          "207:       ms([]);",
          "208:     }).to.throwError();",
          "209:   });",
          "211:   it('should throw an error, when ms({})', function() {",
          "212:     expect(function() {",
          "213:       ms({});",
          "214:     }).to.throwError();",
          "215:   });",
          "217:   it('should throw an error, when ms(NaN)', function() {",
          "218:     expect(function() {",
          "219:       ms(NaN);",
          "220:     }).to.throwError();",
          "221:   });",
          "222: });",
          "",
          "[Added Lines]",
          "6: if (typeof require !== 'undefined') {",
          "7:   expect = require('expect.js')",
          "8:   ms = require('../')",
          "13: describe('ms(string)', function () {",
          "14:   it('should not throw an error', function () {",
          "15:     expect(function () {",
          "16:       ms('1m')",
          "17:     }).to.not.throwError()",
          "18:   })",
          "21:     expect(ms('100')).to.be(100)",
          "22:   })",
          "25:     expect(ms('1m')).to.be(60000)",
          "26:   })",
          "29:     expect(ms('1h')).to.be(3600000)",
          "30:   })",
          "33:     expect(ms('2d')).to.be(172800000)",
          "34:   })",
          "37:     expect(ms('1s')).to.be(1000)",
          "38:   })",
          "41:     expect(ms('100ms')).to.be(100)",
          "42:   })",
          "45:     expect(ms('1.5h')).to.be(5400000)",
          "46:   })",
          "49:     expect(ms('1   s')).to.be(1000)",
          "50:   })",
          "53:     expect(isNaN(ms('\u2603'))).to.be(true)",
          "54:   })",
          "57:     expect(ms('1.5H')).to.be(5400000)",
          "58:   })",
          "61:     expect(ms('.5ms')).to.be(0.5)",
          "62:   })",
          "67: describe('ms(long string)', function () {",
          "68:   it('should not throw an error', function () {",
          "69:     expect(function () {",
          "70:       ms('53 milliseconds')",
          "71:     }).to.not.throwError()",
          "72:   })",
          "75:     expect(ms('53 milliseconds')).to.be(53)",
          "76:   })",
          "79:     expect(ms('17 msecs')).to.be(17)",
          "80:   })",
          "83:     expect(ms('1 sec')).to.be(1000)",
          "84:   })",
          "87:     expect(ms('1 min')).to.be(60000)",
          "88:   })",
          "91:     expect(ms('1 hr')).to.be(3600000)",
          "92:   })",
          "95:     expect(ms('2 days')).to.be(172800000)",
          "96:   })",
          "99:     expect(ms('1.5 hours')).to.be(5400000)",
          "100:   })",
          "105: describe('ms(number, { long: true })', function () {",
          "106:   it('should not throw an error', function () {",
          "107:     expect(function () {",
          "108:       ms(500, {long: true})",
          "109:     }).to.not.throwError()",
          "110:   })",
          "112:   it('should support milliseconds', function () {",
          "113:     expect(ms(500, {long: true})).to.be('500 ms')",
          "116:   it('should support seconds', function () {",
          "117:     expect(ms(1000, {long: true})).to.be('1 second')",
          "118:     expect(ms(1200, {long: true})).to.be('1 second')",
          "119:     expect(ms(10000, {long: true})).to.be('10 seconds')",
          "122:   it('should support minutes', function () {",
          "123:     expect(ms(60 * 1000, {long: true})).to.be('1 minute')",
          "124:     expect(ms(60 * 1200, {long: true})).to.be('1 minute')",
          "125:     expect(ms(60 * 10000, {long: true})).to.be('10 minutes')",
          "128:   it('should support hours', function () {",
          "129:     expect(ms(60 * 60 * 1000, {long: true})).to.be('1 hour')",
          "130:     expect(ms(60 * 60 * 1200, {long: true})).to.be('1 hour')",
          "131:     expect(ms(60 * 60 * 10000, {long: true})).to.be('10 hours')",
          "134:   it('should support days', function () {",
          "135:     expect(ms(24 * 60 * 60 * 1000, {long: true})).to.be('1 day')",
          "136:     expect(ms(24 * 60 * 60 * 1200, {long: true})).to.be('1 day')",
          "137:     expect(ms(24 * 60 * 60 * 10000, {long: true})).to.be('10 days')",
          "140:   it('should round', function () {",
          "141:     expect(ms(234234234, {long: true})).to.be('3 days')",
          "147: describe('ms(number)', function () {",
          "148:   it('should not throw an error', function () {",
          "149:     expect(function () {",
          "150:       ms(500)",
          "151:     }).to.not.throwError()",
          "152:   })",
          "154:   it('should support milliseconds', function () {",
          "155:     expect(ms(500)).to.be('500ms')",
          "158:   it('should support seconds', function () {",
          "159:     expect(ms(1000)).to.be('1s')",
          "160:     expect(ms(10000)).to.be('10s')",
          "163:   it('should support minutes', function () {",
          "164:     expect(ms(60 * 1000)).to.be('1m')",
          "165:     expect(ms(60 * 10000)).to.be('10m')",
          "168:   it('should support hours', function () {",
          "169:     expect(ms(60 * 60 * 1000)).to.be('1h')",
          "170:     expect(ms(60 * 60 * 10000)).to.be('10h')",
          "173:   it('should support days', function () {",
          "174:     expect(ms(24 * 60 * 60 * 1000)).to.be('1d')",
          "175:     expect(ms(24 * 60 * 60 * 10000)).to.be('10d')",
          "178:   it('should round', function () {",
          "179:     expect(ms(234234234)).to.be('3d')",
          "185: describe('ms(invalid inputs)', function () {",
          "186:   it('should throw an error, when ms(\"\")', function () {",
          "187:     expect(function () {",
          "188:       ms('')",
          "189:     }).to.throwError()",
          "190:   })",
          "192:   it('should throw an error, when ms(undefined)', function () {",
          "193:     expect(function () {",
          "194:       ms(undefined)",
          "195:     }).to.throwError()",
          "196:   })",
          "198:   it('should throw an error, when ms(null)', function () {",
          "199:     expect(function () {",
          "200:       ms(null)",
          "201:     }).to.throwError()",
          "202:   })",
          "204:   it('should throw an error, when ms([])', function () {",
          "205:     expect(function () {",
          "206:       ms([])",
          "207:     }).to.throwError()",
          "208:   })",
          "210:   it('should throw an error, when ms({})', function () {",
          "211:     expect(function () {",
          "212:       ms({})",
          "213:     }).to.throwError()",
          "214:   })",
          "216:   it('should throw an error, when ms(NaN)', function () {",
          "217:     expect(function () {",
          "218:       ms(NaN)",
          "219:     }).to.throwError()",
          "220:   })",
          "221: })",
          "",
          "---------------"
        ]
      }
    }
  ]
}