{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b59357a173869757375a4ea3a3343ff8ee676fe0",
      "candidate_info": {
        "commit_hash": "b59357a173869757375a4ea3a3343ff8ee676fe0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b59357a173869757375a4ea3a3343ff8ee676fe0",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts"
        ],
        "message": "[AMBARI-24312] [LogSearch UI] Audit screen sub tab changes clear the Summary charts. (#1822)\n\n(cherry picked from commit cee2d1b2737ab9bd3e9fc78d302ffcb614503076)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     this.graphContainer = this.graphContainerRef.nativeElement;",
          "210:     this.tooltip = this.tooltipRef.nativeElement;",
          "211:     this.host = d3.select(this.graphContainer);",
          "212:   }",
          "214:   ngOnChanges(changes: SimpleChanges) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     this.createGraph();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60bba7491173afb1589c8ebe45a8f469672e5350",
      "candidate_info": {
        "commit_hash": "60bba7491173afb1589c8ebe45a8f469672e5350",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/60bba7491173afb1589c8ebe45a8f469672e5350",
        "files": [
          "ambari-web/app/mixins.js",
          "ambari-web/app/mixins/main/service/configs/hive_interactive_check.js",
          "ambari-web/app/views/main/host/summary.js",
          "ambari-web/app/views/main/service/item.js"
        ],
        "message": "AMBARI-24388. Install HSI using Add HiveServer2 Interactive button failing",
        "before_after_code_files": [
          "ambari-web/app/mixins.js||ambari-web/app/mixins.js",
          "ambari-web/app/mixins/main/service/configs/hive_interactive_check.js||ambari-web/app/mixins/main/service/configs/hive_interactive_check.js",
          "ambari-web/app/views/main/host/summary.js||ambari-web/app/views/main/host/summary.js",
          "ambari-web/app/views/main/service/item.js||ambari-web/app/views/main/service/item.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins.js||ambari-web/app/mixins.js": [
          "File: ambari-web/app/mixins.js -> ambari-web/app/mixins.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: require('mixins/common/widgets/widget_section');",
          "74: require('mixins/unit_convert/base_unit_convert_mixin');",
          "75: require('mixins/unit_convert/convert_unit_widget_view_mixin');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: require('mixins/main/service/configs/hive_interactive_check');",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/main/service/configs/hive_interactive_check.js||ambari-web/app/mixins/main/service/configs/hive_interactive_check.js": [
          "File: ambari-web/app/mixins/main/service/configs/hive_interactive_check.js -> ambari-web/app/mixins/main/service/configs/hive_interactive_check.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: var App = require('app');",
          "21: App.HiveInteractiveCheck = Em.Mixin.create({",
          "22:   enableHiveInteractive: false,",
          "24:   loadHiveConfigs: function() {",
          "25:     App.ajax.send({",
          "26:       name: 'service.serviceConfigVersions.get.current',",
          "27:       sender: this,",
          "28:       data: {",
          "29:         serviceNames: ['HIVE']",
          "30:       },",
          "31:       success: 'onLoadHiveConfigs'",
          "32:     });",
          "33:   },",
          "35:   onLoadHiveConfigs: function (data) {",
          "36:     this.set('enableHiveInteractive', data.items[0].configurations.findProperty('type', 'hive-interactive-env').properties['enable_hive_interactive'] === 'true');",
          "37:   }",
          "38: });",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/host/summary.js||ambari-web/app/views/main/host/summary.js": [
          "File: ambari-web/app/views/main/host/summary.js -> ambari-web/app/views/main/host/summary.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: var App = require('app');",
          "23:   templateName: require('templates/main/host/summary'),",
          "",
          "[Removed Lines]",
          "21: App.MainHostSummaryView = Em.View.extend(App.TimeRangeMixin, {",
          "",
          "[Added Lines]",
          "21: App.MainHostSummaryView = Em.View.extend(App.HiveInteractiveCheck, App.TimeRangeMixin, {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   willInsertElement: function() {",
          "133:     this.sortedComponentsFormatter();",
          "134:     this.addObserver('content.hostComponents.length', this, 'sortedComponentsFormatter');",
          "135:   },",
          "137:   didInsertElement: function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     if (this.get('installedServices').indexOf('HIVE') !== -1) {",
          "136:       this.loadHiveConfigs();",
          "137:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:         if (installedServices.contains(addableComponent.get('serviceName'))",
          "227:             && !installedComponents.contains(addableComponent.get('componentName'))",
          "228:             && !this.hasCardinalityConflict(addableComponent.get('componentName'))) {",
          "230:             return;",
          "231:           }",
          "232:           components.pushObject(self.addableComponentObject.create({",
          "",
          "[Removed Lines]",
          "229:           if ((addableComponent.get('componentName') === 'OOZIE_SERVER') && !App.router.get('mainHostDetailsController.isOozieServerAddable')) {",
          "",
          "[Added Lines]",
          "232:           if ((addableComponent.get('componentName') === 'OOZIE_SERVER') && !App.router.get('mainHostDetailsController.isOozieServerAddable') ||",
          "233:             addableComponent.get('componentName') === 'HIVE_SERVER_INTERACTIVE' && !self.get('enableHiveInteractive')) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:       }, this);",
          "238:     }",
          "239:     return components;",
          "",
          "[Removed Lines]",
          "240:   }.property('content.hostComponents.length', 'App.components.addableToHost.@each'),",
          "",
          "[Added Lines]",
          "244:   }.property('content.hostComponents.length', 'App.components.addableToHost.@each', 'enableHiveInteractive'),",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/service/item.js||ambari-web/app/views/main/service/item.js": [
          "File: ambari-web/app/views/main/service/item.js -> ambari-web/app/views/main/service/item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: var App = require('app');",
          "22:   templateName: require('templates/main/service/item'),",
          "24:   serviceName: Em.computed.alias('controller.content.serviceName'),",
          "",
          "[Removed Lines]",
          "21: App.MainServiceItemView = Em.View.extend({",
          "",
          "[Added Lines]",
          "21: App.MainServiceItemView = Em.View.extend(App.HiveInteractiveCheck, {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:          cssClass: 'glyphicon glyphicon-plus',",
          "68:          'label': '{0} {1}'.format(Em.I18n.t('add'), Em.I18n.t('dashboard.services.hive.server2interactive')),",
          "69:          service: 'HIVE',",
          "71:        },",
          "72:        {",
          "73:          cssClass: 'glyphicon glyphicon-plus',",
          "",
          "[Removed Lines]",
          "70:          component: 'HIVE_SERVER_INTERACTIVE'",
          "",
          "[Added Lines]",
          "70:          component: 'HIVE_SERVER_INTERACTIVE',",
          "71:          dependsFromAnotherProperty: true,",
          "72:          depend: this.get('enableHiveInteractive')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:         if (App.isAuthorized('HOST.ADD_DELETE_COMPONENTS')) {",
          "291:           self.addActionMap().filterProperty('service', serviceName).forEach(function (item) {",
          "294:               var isEnabled = App.HostComponent.find().filterProperty('componentName', item.component).length < App.get('allHostNames.length');",
          "",
          "[Removed Lines]",
          "292:             if (App.get('components.addableToHost').contains(item.component)) {",
          "",
          "[Added Lines]",
          "294:             if (App.get('components.addableToHost').contains(item.component) &&",
          "295:               (!item.dependsFromAnotherProperty || item.depend)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "395:   willInsertElement: function () {",
          "396:     var self = this;",
          "397:     this.get('controller').loadConfigs();",
          "398:     this.get('maintenanceObsFields').forEach(function (field) {",
          "399:       self.addObserver('controller.' + field, self, 'observeMaintenance');",
          "400:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:     if (this.get('controller.content.serviceName') === 'HIVE') {",
          "402:       this.loadHiveConfigs();",
          "403:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c669e12302a5f3925838620f99db7637df279eee",
      "candidate_info": {
        "commit_hash": "c669e12302a5f3925838620f99db7637df279eee",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c669e12302a5f3925838620f99db7637df279eee",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java"
        ],
        "message": "[AMBARI-24397] - Allow PATCH VDFs to Specify Services Which Are Not Installed in the Cluster (#1945)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java||ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.JDK_LOCATION;",
          "22: import java.util.ArrayList;",
          "24: import java.util.Collections;",
          "25: import java.util.Comparator;",
          "26: import java.util.EnumSet;",
          "",
          "[Removed Lines]",
          "23: import java.util.Collection;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: import org.apache.ambari.server.state.ServiceComponentHost;",
          "80: import org.apache.ambari.server.state.ServiceOsSpecific;",
          "81: import org.apache.ambari.server.state.StackId;",
          "84: import org.apache.ambari.server.state.repository.ClusterVersionSummary;",
          "85: import org.apache.ambari.server.state.repository.VersionDefinitionXml;",
          "86: import org.apache.ambari.server.state.stack.upgrade.RepositoryVersionHelper;",
          "",
          "[Removed Lines]",
          "82: import org.apache.ambari.server.state.StackInfo;",
          "83: import org.apache.ambari.server.state.repository.AvailableService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "521:       }",
          "522:     }",
          "527:     List<Host> hostsNeedingInstallCommands = cluster.transitionHostsToInstalling(",
          "528:         repoVersionEntity, versionDefinitionXml, forceInstalled);",
          "",
          "[Removed Lines]",
          "524:     checkPatchVDFAvailableServices(cluster, repoVersionEntity, versionDefinitionXml);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "650:     return req;",
          "651:   }",
          "685:   @Transactional",
          "686:   ActionExecutionContext getHostVersionInstallCommand(RepositoryVersionEntity repoVersion,",
          "687:       Cluster cluster, AmbariManagementController managementController, AmbariMetaInfo ami,",
          "",
          "[Removed Lines]",
          "661:   protected void checkPatchVDFAvailableServices(Cluster cluster, RepositoryVersionEntity repoVersionEnt,",
          "662:                                               VersionDefinitionXml desiredVersionDefinition) throws SystemException, AmbariException {",
          "663:     if (repoVersionEnt.getType() == RepositoryType.PATCH) {",
          "665:       Collection<String> notPresentServices = new ArrayList<>();",
          "666:       Collection<String> presentServices = new ArrayList<>();",
          "668:       presentServices.addAll(cluster.getServices().keySet());",
          "669:       final StackInfo stack;",
          "670:       stack = metaInfo.get().getStack(repoVersionEnt.getStackName(), repoVersionEnt.getStackVersion());",
          "672:       for (AvailableService availableService : desiredVersionDefinition.getAvailableServices(stack)) {",
          "673:         String name = availableService.getName();",
          "674:         if (!presentServices.contains(name)) {",
          "675:           notPresentServices.add(name);",
          "676:         }",
          "677:       }",
          "678:       if (!notPresentServices.isEmpty()) {",
          "679:         throw new IllegalArgumentException(String.format(\"%s VDF includes services that are not installed: %s\",",
          "680:             RepositoryType.PATCH, StringUtils.join(notPresentServices, \",\")));",
          "681:       }",
          "682:     }",
          "683:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1607:           history.setFromRepositoryVersion(component.getDesiredRepositoryVersion());",
          "1608:           history.setTargetRepositoryVersion(upgradeContext.getRepositoryVersion());",
          "1609:         } else {",
          "1612:           RepositoryVersionEntity targetRepositoryVersion = upgradeContext.getTargetRepositoryVersion(",
          "1613:               serviceName);",
          "",
          "[Removed Lines]",
          "1606:         if (upgradeContext.getDirection() == Direction.UPGRADE || upgradeContext.isPatchRevert()) {",
          "",
          "[Added Lines]",
          "1606:         if (upgradeContext.getDirection() == Direction.UPGRADE) {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import org.apache.ambari.server.state.stack.upgrade.RepositoryVersionHelper;",
          "55: import org.apache.commons.lang.StringUtils;",
          "57: import com.google.common.base.Objects;",
          "58: import com.google.inject.Inject;",
          "59: import com.google.inject.Provider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import com.google.common.base.MoreObjects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:   @Override",
          "394:   public String toString() {",
          "396:         version).add(\"type\", type).add(\"hidden\", isHidden == 1).toString();",
          "397:   }",
          "",
          "[Removed Lines]",
          "395:     return Objects.toStringHelper(this).add(\"id\", id).add(\"stack\", stack).add(\"version\",",
          "",
          "[Added Lines]",
          "396:     return MoreObjects.toStringHelper(this).add(\"id\", id).add(\"stack\", stack).add(\"version\",",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "36: import org.apache.ambari.server.events.StackUpgradeFinishEvent;",
          "37: import org.apache.ambari.server.events.publishers.VersionEventPublisher;",
          "39: import org.apache.ambari.server.orm.dao.HostComponentStateDAO;",
          "40: import org.apache.ambari.server.orm.dao.HostVersionDAO;",
          "41: import org.apache.ambari.server.orm.entities.HostComponentStateEntity;",
          "",
          "[Removed Lines]",
          "38: import org.apache.ambari.server.metadata.RoleCommandOrderProvider;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: import org.apache.ambari.server.state.ServiceComponent;",
          "51: import org.apache.ambari.server.state.ServiceComponentHost;",
          "52: import org.apache.ambari.server.state.StackId;",
          "53: import org.apache.ambari.server.state.UpgradeContext;",
          "54: import org.apache.ambari.server.state.UpgradeState;",
          "55: import org.apache.ambari.server.state.stack.upgrade.Direction;",
          "56: import org.apache.commons.lang.StringUtils;",
          "57: import org.apache.commons.lang.builder.EqualsBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.apache.ambari.server.state.StackInfo;",
          "55: import org.apache.ambari.server.state.repository.AvailableService;",
          "56: import org.apache.ambari.server.state.repository.VersionDefinitionXml;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     }",
          "96:   }",
          "",
          "[Removed Lines]",
          "98:   @Inject",
          "99:   private RoleCommandOrderProvider roleCommandOrderProvider;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:       if (upgradeContext.getOrchestrationType() == RepositoryType.STANDARD) {",
          "206:         outSB.append(String.format(\"Finalizing the version for cluster %s.\\n\", cluster.getClusterName()));",
          "",
          "[Removed Lines]",
          "203:       finalizeHostVersionsNotDesired(cluster);",
          "",
          "[Added Lines]",
          "202:       finalizeHostVersionsNotDesired(cluster, upgradeContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "280:         throw new AmbariException(messageBuff.toString());",
          "281:       }",
          "286:       Map<String, RepositoryVersionEntity> targetVersionsByService = upgradeContext.getTargetVersions();",
          "",
          "[Removed Lines]",
          "283:       finalizeHostVersionsNotDesired(cluster);",
          "",
          "[Added Lines]",
          "282:       finalizeHostVersionsNotDesired(cluster, upgradeContext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "409:     Set<RepositoryVersionEntity> desiredRepoVersions = new HashSet<>();",
          "410:     Set<String> serviceNames = cluster.getServices().keySet();",
          "",
          "[Removed Lines]",
          "407:   private void finalizeHostVersionsNotDesired(Cluster cluster) throws AmbariException {",
          "",
          "[Added Lines]",
          "413:   private void finalizeHostVersionsNotDesired(Cluster cluster, UpgradeContext upgradeContext)",
          "414:       throws AmbariException {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "425:         hostVersion = hostVersionDAO.merge(hostVersion);",
          "426:       }",
          "427:     }",
          "428:   }",
          "430:   protected static class InfoTuple implements Comparable<InfoTuple> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     if (upgradeContext.isPatchRevert()) {",
          "440:       RepositoryVersionEntity repositoryVersionEntity = upgradeContext.getRepositoryVersion();",
          "442:       final VersionDefinitionXml vdfXml;",
          "443:       try {",
          "444:         vdfXml = repositoryVersionEntity.getRepositoryXml();",
          "445:       } catch (Exception exception) {",
          "446:         throw new AmbariException(\"The VDF's XML could not be deserialized\", exception);",
          "447:       }",
          "449:       StackInfo stack = ambariMetaInfo.getStack(repositoryVersionEntity.getStackId());",
          "454:       Collection<AvailableService> availableServices = vdfXml.getAvailableServices(stack);",
          "455:       Set<String> participatingServices = upgradeContext.getSupportedServices();",
          "456:       Set<String> clusterServices = cluster.getServices().keySet();",
          "458:       boolean resetRepoStateToOutOfSync = false;",
          "459:       for (AvailableService availableService : availableServices) {",
          "460:         if (clusterServices.contains(availableService.getName())",
          "461:             && !participatingServices.contains(availableService.getName())) {",
          "462:           resetRepoStateToOutOfSync = true;",
          "463:           break;",
          "464:         }",
          "465:       }",
          "467:       if (resetRepoStateToOutOfSync) {",
          "468:         List<HostVersionEntity> hostVersions = hostVersionDAO.findHostVersionByClusterAndRepository(",
          "469:             cluster.getClusterId(), repositoryVersionEntity);",
          "470:         for (HostVersionEntity hostVersion : hostVersions) {",
          "471:           hostVersion.setState(RepositoryVersionState.OUT_OF_SYNC);",
          "472:           hostVersion = hostVersionDAO.merge(hostVersion);",
          "473:         }",
          "474:       }",
          "475:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java||ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java -> ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         throw new AmbariException(message);",
          "388:       }",
          "393:       upgradeRequestMap.put(UPGRADE_REPO_VERSION_ID, m_repositoryVersion.getId().toString());",
          "",
          "[Removed Lines]",
          "390:       m_repositoryVersion = priors.iterator().next();",
          "",
          "[Added Lines]",
          "391:       m_repositoryVersion = revertUpgrade.getRepositoryVersion();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import java.sql.SQLException;",
          "35: import java.util.ArrayList;",
          "36: import java.util.Arrays;",
          "38: import java.util.Collections;",
          "39: import java.util.HashMap;",
          "40: import java.util.LinkedHashMap;",
          "",
          "[Removed Lines]",
          "37: import java.util.Collection;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: import org.apache.ambari.server.orm.dao.RepositoryVersionDAO;",
          "79: import org.apache.ambari.server.orm.entities.ClusterEntity;",
          "80: import org.apache.ambari.server.orm.entities.HostVersionEntity;",
          "83: import org.apache.ambari.server.orm.entities.RepositoryVersionEntity;",
          "84: import org.apache.ambari.server.orm.entities.StackEntity;",
          "85: import org.apache.ambari.server.orm.entities.UpgradeEntity;",
          "",
          "[Removed Lines]",
          "81:  import org.apache.ambari.server.orm.entities.RepoDefinitionEntity;",
          "82:  import org.apache.ambari.server.orm.entities.RepoOsEntity;",
          "",
          "[Added Lines]",
          "80: import org.apache.ambari.server.orm.entities.RepoDefinitionEntity;",
          "81: import org.apache.ambari.server.orm.entities.RepoOsEntity;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: import org.apache.ambari.server.state.ServiceInfo;",
          "99: import org.apache.ambari.server.state.ServiceOsSpecific;",
          "100: import org.apache.ambari.server.state.StackId;",
          "102: import org.apache.ambari.server.state.cluster.ClusterImpl;",
          "104: import org.apache.ambari.server.state.repository.ClusterVersionSummary;",
          "105: import org.apache.ambari.server.state.repository.VersionDefinitionXml;",
          "106: import org.apache.ambari.server.state.stack.upgrade.Direction;",
          "",
          "[Removed Lines]",
          "101: import org.apache.ambari.server.state.StackInfo;",
          "103: import org.apache.ambari.server.state.repository.AvailableService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127: import com.google.inject.Injector;",
          "128: import com.google.inject.util.Modules;",
          "",
          "[Removed Lines]",
          "130: import junit.framework.AssertionFailedError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1748:   }",
          "1844:    private void testCreateResourcesExistingUpgrade(Authentication authentication) throws Exception {",
          "1845:     Cluster cluster = createNiceMock(Cluster.class);",
          "",
          "[Removed Lines]",
          "1750:   @Test",
          "1751:   public void testCheckPatchVDFAvailableServices() throws Exception {",
          "1752:     Cluster cluster = createNiceMock(Cluster.class);",
          "1753:     RepositoryVersionEntity repoVersionEnt = createNiceMock(RepositoryVersionEntity.class);",
          "1754:     VersionDefinitionXml desiredVersionDefinition = createNiceMock(VersionDefinitionXml.class);",
          "1756:     expect(repoVersionEnt.getType()).andReturn(RepositoryType.PATCH).once();",
          "1758:     Service service1 = createNiceMock(Service.class);",
          "1759:     expect(service1.getName()).andReturn(\"SERVICE1\").anyTimes();",
          "1760:     expect(service1.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>());",
          "1762:     Service service2 = createNiceMock(Service.class);",
          "1763:     expect(service2.getName()).andReturn(\"SERVICE2\").anyTimes();",
          "1764:     expect(service2.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>());",
          "1766:     Map<String, Service> clusterServices = new HashMap<>();",
          "1767:     clusterServices.put(\"SERVICE1\",service1);",
          "1768:     clusterServices.put(\"SERVICE2\",service2);",
          "1770:     expect(cluster.getServices()).andReturn(clusterServices).once();",
          "1771:     expect(repoVersionEnt.getStackName()).andReturn(\"HDP\").once();",
          "1772:     expect(repoVersionEnt.getStackVersion()).andReturn(\"2.5.0\").once();",
          "1774:     AvailableService availableService1 = createNiceMock(AvailableService.class);",
          "1775:     expect(availableService1.getName()).andReturn(\"SERVICE1\").anyTimes();",
          "1777:     AvailableService availableService2 = createNiceMock(AvailableService.class);",
          "1778:     expect(availableService2.getName()).andReturn(\"SERVICE2\").anyTimes();",
          "1780:     Collection<AvailableService> availableServices = new ArrayList<>();",
          "1781:     availableServices.add(availableService1);",
          "1782:     availableServices.add(availableService2);",
          "1784:     expect(desiredVersionDefinition.getAvailableServices((StackInfo)EasyMock.anyObject())).andReturn(availableServices).once();",
          "1786:     expect(cluster.transitionHostsToInstalling(",
          "1787:         anyObject(RepositoryVersionEntity.class), anyObject(VersionDefinitionXml.class),",
          "1788:         EasyMock.anyBoolean())).andReturn(Collections.<Host>emptyList()).atLeastOnce();",
          "1790:     replay(cluster, repoVersionEnt, desiredVersionDefinition, service1, service2, availableService1, availableService2);",
          "1792:     ClusterStackVersionResourceProvider provider = new ClusterStackVersionResourceProvider(null);",
          "1793:     injector.injectMembers(provider);",
          "1794:     provider.checkPatchVDFAvailableServices(cluster, repoVersionEnt, desiredVersionDefinition);",
          "1795:   }",
          "1797:    @Test",
          "1798:    public void testCheckPatchVDFAvailableServicesFail() throws Exception {",
          "1799:      Cluster cluster = createNiceMock(Cluster.class);",
          "1800:      RepositoryVersionEntity repoVersionEnt = createNiceMock(RepositoryVersionEntity.class);",
          "1801:      VersionDefinitionXml desiredVersionDefinition = createNiceMock(VersionDefinitionXml.class);",
          "1803:      expect(repoVersionEnt.getType()).andReturn(RepositoryType.PATCH).once();",
          "1805:      Service service1 = createNiceMock(Service.class);",
          "1806:      expect(service1.getName()).andReturn(\"SERVICE1\").anyTimes();",
          "1807:      expect(service1.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>());",
          "1809:      Map<String, Service> clusterServices = new HashMap<>();",
          "1810:      clusterServices.put(\"SERVICE1\",service1);",
          "1812:      expect(cluster.getServices()).andReturn(clusterServices).once();",
          "1813:      expect(repoVersionEnt.getStackName()).andReturn(\"HDP\").once();",
          "1814:      expect(repoVersionEnt.getStackVersion()).andReturn(\"2.5.0\").once();",
          "1816:      AvailableService availableService1 = createNiceMock(AvailableService.class);",
          "1817:      expect(availableService1.getName()).andReturn(\"SERVICE1\").anyTimes();",
          "1819:      AvailableService availableService2 = createNiceMock(AvailableService.class);",
          "1820:      expect(availableService2.getName()).andReturn(\"SERVICE2\").anyTimes();",
          "1822:      Collection<AvailableService> availableServices = new ArrayList<>();",
          "1823:      availableServices.add(availableService1);",
          "1824:      availableServices.add(availableService2);",
          "1826:      expect(desiredVersionDefinition.getAvailableServices((StackInfo)EasyMock.anyObject())).andReturn(availableServices).once();",
          "1827:      expect(cluster.transitionHostsToInstalling(",
          "1828:          anyObject(RepositoryVersionEntity.class), anyObject(VersionDefinitionXml.class),",
          "1829:          EasyMock.anyBoolean())).andThrow(new AssertionFailedError()).anyTimes();",
          "1831:      replay(cluster, repoVersionEnt, desiredVersionDefinition, service1, availableService1, availableService2);",
          "1833:      ClusterStackVersionResourceProvider provider = new ClusterStackVersionResourceProvider(null);",
          "1834:      injector.injectMembers(provider);",
          "1835:      try {",
          "1836:        provider.checkPatchVDFAvailableServices(cluster, repoVersionEnt, desiredVersionDefinition);",
          "1837:        Assert.fail(\"Expected an exception when PATCH VDF includes services that are not installed\");",
          "1838:      } catch (IllegalArgumentException expected) {",
          "1840:        Assert.assertEquals(expected.getMessage(),\"PATCH VDF includes services that are not installed: SERVICE2\");",
          "1841:      }",
          "1842:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/UpgradeActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.junit.Assert.assertNotNull;",
          "22: import static org.junit.Assert.assertTrue;",
          "24: import java.lang.reflect.Field;",
          "25: import java.util.Collection;",
          "26: import java.util.HashMap;",
          "27: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.io.File;",
          "25: import java.io.FileInputStream;",
          "27: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: import org.apache.ambari.server.state.Config;",
          "67: import org.apache.ambari.server.state.ConfigFactory;",
          "68: import org.apache.ambari.server.state.Host;",
          "69: import org.apache.ambari.server.state.RepositoryVersionState;",
          "70: import org.apache.ambari.server.state.Service;",
          "71: import org.apache.ambari.server.state.ServiceComponent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: import org.apache.ambari.server.state.RepositoryType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: import org.apache.ambari.server.state.State;",
          "78: import org.apache.ambari.server.state.UpgradeState;",
          "79: import org.apache.ambari.server.state.stack.UpgradePack;",
          "80: import org.apache.ambari.server.state.stack.upgrade.UpgradeType;",
          "81: import org.apache.ambari.server.utils.EventBusSynchronizer;",
          "82: import org.apache.commons.lang.StringUtils;",
          "83: import org.junit.After;",
          "84: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: import org.apache.ambari.server.state.stack.upgrade.Direction;",
          "87: import org.apache.commons.io.IOUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:   @Inject",
          "141:   private ConfigFactory configFactory;",
          "143:   @Inject",
          "144:   private HostComponentStateDAO hostComponentStateDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:   @Inject",
          "150:   private RepositoryVersionDAO repositoryVersionDAO;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "583:     }",
          "584:   }",
          "586:   private ServiceComponentHost createNewServiceComponentHost(Cluster cluster, String svc,",
          "587:                                                              String svcComponent, String hostName) throws AmbariException {",
          "588:     Assert.assertNotNull(cluster.getConfigGroups());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:   @Test",
          "602:   public void testHostVersionsOutOfSyncAfterRevert() throws Exception {",
          "603:     String hostName = \"h1\";",
          "604:     Cluster cluster = createUpgradeCluster(repositoryVersion2110, hostName);",
          "605:     createHostVersions(repositoryVersion2111, hostName);",
          "609:     Service zk = installService(cluster, \"ZOOKEEPER\", repositoryVersion2110);",
          "610:     addServiceComponent(cluster, zk, \"ZOOKEEPER_SERVER\");",
          "611:     addServiceComponent(cluster, zk, \"ZOOKEEPER_CLIENT\");",
          "612:     createNewServiceComponentHost(cluster, \"ZOOKEEPER\", \"ZOOKEEPER_SERVER\", hostName);",
          "613:     createNewServiceComponentHost(cluster, \"ZOOKEEPER\", \"ZOOKEEPER_CLIENT\", hostName);",
          "615:     List<HostVersionEntity> hostVersions = hostVersionDAO.findAll();",
          "616:     assertEquals(2, hostVersions.size());",
          "620:     for (HostVersionEntity hostVersion : hostVersions) {",
          "621:       RepositoryVersionEntity hostRepoVersion = hostVersion.getRepositoryVersion();",
          "622:       if (repositoryVersion2110.equals(hostRepoVersion)) {",
          "623:         hostVersion.setState(RepositoryVersionState.CURRENT);",
          "624:       } else {",
          "625:         hostVersion.setState(RepositoryVersionState.CURRENT);",
          "626:       }",
          "628:       hostVersionDAO.merge(hostVersion);",
          "629:     }",
          "633:     repositoryVersion2111.setParent(repositoryVersion2110);",
          "634:     repositoryVersion2111.setType(RepositoryType.PATCH);",
          "635:     repositoryVersion2111.setVersionXml(hostName);",
          "636:     repositoryVersion2111.setVersionXsd(\"version_definition.xsd\");",
          "638:     File patchVdfFile = new File(\"src/test/resources/hbase_version_test.xml\");",
          "639:     repositoryVersion2111.setVersionXml(",
          "640:         IOUtils.toString(new FileInputStream(patchVdfFile), Charset.defaultCharset()));",
          "642:     repositoryVersion2111 = repositoryVersionDAO.merge(repositoryVersion2111);",
          "645:     UpgradeEntity upgrade = createUpgrade(cluster, repositoryVersion2111);",
          "646:     upgrade.setOrchestration(RepositoryType.PATCH);",
          "647:     upgrade.setRevertAllowed(true);",
          "648:     upgrade = upgradeDAO.merge(upgrade);",
          "651:     Service hbase = installService(cluster, \"HBASE\", repositoryVersion2110);",
          "652:     addServiceComponent(cluster, hbase, \"HBASE_MASTER\");",
          "653:     createNewServiceComponentHost(cluster, \"HBASE\", \"HBASE_MASTER\", hostName);",
          "656:     UpgradeEntity revert = createRevert(cluster, upgrade);",
          "657:     assertEquals(RepositoryType.PATCH, revert.getOrchestration());",
          "660:     Map<String, Service> services = cluster.getServices();",
          "661:     assertTrue(services.size() > 0);",
          "662:     for (Service service : services.values()) {",
          "663:       service.setDesiredRepositoryVersion(repositoryVersion2110);",
          "664:     }",
          "667:     List<HostComponentStateEntity> hostComponentStates = hostComponentStateDAO.findByHost(hostName);",
          "668:     for (HostComponentStateEntity hostComponentState : hostComponentStates) {",
          "669:       hostComponentState.setVersion(repositoryVersion2110.getVersion());",
          "670:       hostComponentStateDAO.merge(hostComponentState);",
          "671:     }",
          "673:     Map<String, String> commandParams = new HashMap<>();",
          "674:     ExecutionCommand executionCommand = new ExecutionCommand();",
          "675:     executionCommand.setCommandParams(commandParams);",
          "676:     executionCommand.setClusterName(clusterName);",
          "678:     HostRoleCommand hostRoleCommand = hostRoleCommandFactory.create(null, null, null, null);",
          "679:     hostRoleCommand.setExecutionCommandWrapper(new ExecutionCommandWrapper(executionCommand));",
          "681:     finalizeUpgradeAction.setExecutionCommand(executionCommand);",
          "682:     finalizeUpgradeAction.setHostRoleCommand(hostRoleCommand);",
          "685:     CommandReport report = finalizeUpgradeAction.execute(null);",
          "686:     assertNotNull(report);",
          "687:     assertEquals(HostRoleStatus.COMPLETED.name(), report.getStatus());",
          "689:     for (HostVersionEntity hostVersion : hostVersions) {",
          "690:       RepositoryVersionEntity hostRepoVersion = hostVersion.getRepositoryVersion();",
          "691:       if (repositoryVersion2110.equals(hostRepoVersion)) {",
          "692:         assertEquals(RepositoryVersionState.CURRENT, hostVersion.getState());",
          "693:       } else {",
          "694:         assertEquals(RepositoryVersionState.OUT_OF_SYNC, hostVersion.getState());",
          "695:       }",
          "696:     }",
          "697:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "692:     cluster.setUpgradeEntity(upgradeEntity);",
          "693:     return upgradeEntity;",
          "694:   }",
          "695: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:   private UpgradeEntity createRevert(Cluster cluster, UpgradeEntity upgradeToRevert)",
          "813:       throws Exception {",
          "817:     RequestEntity requestEntity = new RequestEntity();",
          "818:     requestEntity.setClusterId(cluster.getClusterId());",
          "819:     requestEntity.setRequestId(2L);",
          "820:     requestEntity.setStartTime(System.currentTimeMillis());",
          "821:     requestEntity.setCreateTime(System.currentTimeMillis());",
          "822:     requestDAO.create(requestEntity);",
          "824:     UpgradeEntity revert = new UpgradeEntity();",
          "825:     revert.setId(2L);",
          "826:     revert.setDirection(Direction.DOWNGRADE);",
          "827:     revert.setClusterId(cluster.getClusterId());",
          "828:     revert.setRequestEntity(requestEntity);",
          "829:     revert.setUpgradePackage(\"\");",
          "830:     revert.setRepositoryVersion(upgradeToRevert.getRepositoryVersion());",
          "831:     revert.setUpgradeType(upgradeToRevert.getUpgradeType());",
          "832:     revert.setOrchestration(upgradeToRevert.getOrchestration());",
          "835:     for (UpgradeHistoryEntity historyToRevert : upgradeToRevert.getHistory()) {",
          "836:       UpgradeHistoryEntity history = new UpgradeHistoryEntity();",
          "837:       history.setUpgrade(revert);",
          "838:       history.setServiceName(historyToRevert.getServiceName());",
          "839:       history.setComponentName(historyToRevert.getComponentName());",
          "840:       history.setFromRepositoryVersion(upgradeToRevert.getRepositoryVersion());",
          "841:       history.setTargetRepositoryVersion(historyToRevert.getFromReposistoryVersion());",
          "842:       revert.addHistory(history);",
          "844:     }",
          "845:     upgradeDAO.create(revert);",
          "846:     cluster.setUpgradeEntity(revert);",
          "847:     return revert;",
          "848:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0deced60bf5d15fb524098cb8a833a4057bfeb07",
      "candidate_info": {
        "commit_hash": "0deced60bf5d15fb524098cb8a833a4057bfeb07",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0deced60bf5d15fb524098cb8a833a4057bfeb07",
        "files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js"
        ],
        "message": "AMBARI-25489. On adding new VDF the Base URLs are not auto populated (#3187) (hiveww via dgrinenko)",
        "before_after_code_files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:             $scope.osList.push(stackOs);",
          "221:           }",
          "222:         });",
          "227:       })",
          "228:       .catch(function (data) {",
          "229:         Alert.error($t('versions.alerts.osListError'), data.message);",
          "",
          "[Removed Lines]",
          "223:         if ($scope.selectedOption.index == $scope.localOption.index) {",
          "224:           $scope.clearRepoVersions();",
          "225:           $scope.validateRepoUrl();",
          "226:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d9d123320df7f829a4f4175ef7dbb2a2d4b05b3",
      "candidate_info": {
        "commit_hash": "4d9d123320df7f829a4f4175ef7dbb2a2d4b05b3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4d9d123320df7f829a4f4175ef7dbb2a2d4b05b3",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java"
        ],
        "message": "AMBARI-24672. Make sure we regenerate all service specific keytabs on all hosts where they are needed (#2802)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: import org.apache.ambari.server.security.unsecured.rest.CertificateDownload;",
          "111: import org.apache.ambari.server.security.unsecured.rest.CertificateSign;",
          "112: import org.apache.ambari.server.security.unsecured.rest.ConnectionInfo;",
          "113: import org.apache.ambari.server.stack.UpdateActiveRepoVersionOnStartup;",
          "114: import org.apache.ambari.server.state.Clusters;",
          "115: import org.apache.ambari.server.topology.AmbariContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: import org.apache.ambari.server.serveraction.kerberos.stageutils.KerberosKeytabController;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "942:     ClusterPrivilegeResourceProvider.init(injector.getInstance(ClusterDAO.class));",
          "943:     AmbariPrivilegeResourceProvider.init(injector.getInstance(ClusterDAO.class));",
          "944:     ActionManager.setTopologyManager(injector.getInstance(TopologyManager.class));",
          "945:     StackAdvisorBlueprintProcessor.init(injector.getInstance(StackAdvisorHelper.class));",
          "946:     ThreadPoolEnabledPropertyProvider.init(injector.getInstance(Configuration.class));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:     KerberosKeytabController.setKerberosHelper(injector.getInstance(KerberosHelper.class));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosKeytab;",
          "51: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "52: import org.apache.ambari.server.state.Clusters;",
          "53: import org.apache.ambari.server.utils.StageUtils;",
          "54: import org.apache.commons.codec.binary.Base64;",
          "55: import org.apache.commons.codec.digest.DigestUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:       try {",
          "247:         Map<String, ? extends Collection<String>> serviceComponentFilter = getServiceComponentFilter(kerberosCommandParameters.getServiceComponentFilter());",
          "250:         for (ResolvedKerberosKeytab resolvedKeytab : keytabsToInject) {",
          "251:           for (ResolvedKerberosPrincipal resolvedPrincipal : resolvedKeytab.getPrincipals()) {",
          "252:             String hostName = resolvedPrincipal.getHostName();",
          "",
          "[Removed Lines]",
          "249:         Set<ResolvedKerberosKeytab> keytabsToInject = kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, kerberosCommandParameters.getHostFilter(), kerberosCommandParameters.getIdentityFilter());",
          "",
          "[Added Lines]",
          "249:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : kerberosKeytabController.getServiceIdentities(executionCommand.getClusterName(), serviceComponentFilter.keySet());",
          "250:         final Set<ResolvedKerberosKeytab> keytabsToInject = kerberosKeytabController.getFilteredKeytabs(serviceIdentities, kerberosCommandParameters.getHostFilter(), kerberosCommandParameters.getIdentityFilter());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:     private Collection<String> componentNames;",
          "292:     private Collection<String> principals;",
          "295:       this.hostNames = hostNames;",
          "296:       this.serviceNames = serviceNames;",
          "297:       this.componentNames = componentNames;",
          "",
          "[Removed Lines]",
          "294:     public KerberosKeytabPrincipalFilter(Collection<String> hostNames, Collection<String> serviceNames, Collection<String> componentNames, Collection<String> principals) {",
          "",
          "[Added Lines]",
          "294:     private KerberosKeytabPrincipalFilter() {",
          "295:       this(null, null, null, null);",
          "296:     }",
          "298:     private KerberosKeytabPrincipalFilter(Collection<String> hostNames, Collection<String> serviceNames, Collection<String> componentNames, Collection<String> principals) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:       this.principals = principals;",
          "331:     }",
          "333:     public static KerberosKeytabPrincipalFilter createFilter(String serviceName, Collection<String> componentNames, Collection<String> hostNames, Collection<String> principalNames) {",
          "334:       return new KerberosKeytabPrincipalFilter(hostNames,",
          "335:           (serviceName == null) ? null : Collections.singleton(serviceName),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:     public static KerberosKeytabPrincipalFilter createEmptyFilter() {",
          "338:       return new KerberosKeytabPrincipalFilter();",
          "339:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Type;",
          "25: import java.util.Collection;",
          "26: import java.util.HashMap;",
          "27: import java.util.Map;",
          "",
          "[Removed Lines]",
          "24: import java.util.ArrayList;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:       }",
          "451:       try {",
          "457:           for (ResolvedKerberosPrincipal principal : rkk.getPrincipals()) {",
          "458:             commandReport = processIdentity(principal, handler, kerberosConfiguration, isRelevantIdentity(serviceIdentities, principal), requestSharedDataContext);",
          "",
          "[Removed Lines]",
          "452:         final Map<String, ? extends Collection<String>> serviceComponentFilter = (pruneServiceFilter())",
          "453:             ? kerberosKeytabController.adjustServiceComponentFilter(clusters.getCluster(getClusterName()), true, getServiceComponentFilter())",
          "454:             : getServiceComponentFilter();",
          "455:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : calculateServiceIdentities(getClusterName(), serviceComponentFilter);",
          "456:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, getHostFilter(), getIdentityFilter())) {",
          "",
          "[Added Lines]",
          "451:         Map<String, Collection<String>> serviceComponentFilter = getServiceComponentFilter();",
          "452:         if (serviceComponentFilter != null && pruneServiceFilter()) {",
          "453:           kerberosKeytabController.adjustServiceComponentFilter(clusters.getCluster(getClusterName()), true, serviceComponentFilter);",
          "454:         }",
          "455:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : kerberosKeytabController.getServiceIdentities(getClusterName(), serviceComponentFilter.keySet());",
          "456:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs(serviceIdentities, getHostFilter(),getIdentityFilter())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:     return true;",
          "505:   }",
          "",
          "[Removed Lines]",
          "507:   private Collection<KerberosIdentityDescriptor> calculateServiceIdentities(String clusterName, Map<String, ? extends Collection<String>> serviceComponentFilter)",
          "508:       throws AmbariException {",
          "509:     final Collection<KerberosIdentityDescriptor> serviceIdentities = new ArrayList<>();",
          "510:     for (String service : serviceComponentFilter.keySet()) {",
          "511:       for (Collection<KerberosIdentityDescriptor> activeIdentities : kerberosHelper.getActiveIdentities(clusterName, null, service, null, true).values()) {",
          "512:         serviceIdentities.addAll(activeIdentities);",
          "513:       }",
          "514:     }",
          "515:     return serviceIdentities;",
          "516:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:   }",
          "588:     String serializedValue = getCommandParameterValue(SERVICE_COMPONENT_FILTER);",
          "590:     if (serializedValue != null) {",
          "",
          "[Removed Lines]",
          "587:   protected Map<String, ? extends Collection<String>> getServiceComponentFilter() {",
          "",
          "[Added Lines]",
          "576:   protected Map<String, Collection<String>> getServiceComponentFilter() {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.Set;",
          "30: import org.apache.ambari.server.AmbariException;",
          "31: import org.apache.ambari.server.orm.dao.KerberosKeytabDAO;",
          "32: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO;",
          "33: import org.apache.ambari.server.orm.entities.KerberosKeytabEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.apache.ambari.server.controller.KerberosHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "36: import org.apache.ambari.server.state.Cluster;",
          "37: import org.apache.ambari.server.state.Service;",
          "38: import org.apache.commons.collections.MapUtils;",
          "40: import com.google.common.collect.ImmutableSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:   @Inject",
          "55:   private KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   private static KerberosHelper kerberosHelper;",
          "62:   public static void setKerberosHelper(KerberosHelper kerberosHelper) {",
          "63:     KerberosKeytabController.kerberosHelper = kerberosHelper;",
          "64:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:                                                         Set<String> hostFilter, Collection<String> identityFilter) {",
          "107:     if (serviceComponentFilter == null && hostFilter == null && identityFilter == null) {",
          "108:       return getAllKeytabs();",
          "",
          "[Removed Lines]",
          "105:   public Set<ResolvedKerberosKeytab> getFilteredKeytabs(Map<String, ? extends Collection<String>> serviceComponentFilter,",
          "",
          "[Added Lines]",
          "114:   private Set<ResolvedKerberosKeytab> getFilteredKeytabs(Map<String, ? extends Collection<String>> serviceComponentFilter,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:     return Sets.newHashSet(resultMap.values());",
          "126:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   public Set<ResolvedKerberosKeytab> getFilteredKeytabs(Collection<KerberosIdentityDescriptor> serviceIdentities, Set<String> hostFilter, Collection<String> identityFilters) {",
          "138:     final Collection<String> enhancedIdentityFilters = populateIdentityFilter(identityFilters, serviceIdentities);",
          "139:     return getFilteredKeytabs((Map<String, ? extends Collection<String>>) null, hostFilter, enhancedIdentityFilters);",
          "140:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:       List<KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter> result = new ArrayList<>();",
          "158:       if (serviceSet.size() > 0) {",
          "160:           null,",
          "161:           serviceSet,",
          "162:           componentSet,",
          "",
          "[Removed Lines]",
          "159:         result.add(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(",
          "",
          "[Added Lines]",
          "173:         result.add(KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter.createFilter(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:       }",
          "167:       if (serviceOnlySet.size() > 0) {",
          "169:           null,",
          "170:           serviceOnlySet,",
          "171:           null,",
          "",
          "[Removed Lines]",
          "168:         result.add(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(",
          "",
          "[Added Lines]",
          "182:         result.add(KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter.createFilter(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "177:       }",
          "178:     }",
          "181:   }",
          "183:   private ResolvedKerberosKeytab fromKeytabEntity(KerberosKeytabEntity kke, boolean resolvePrincipals) {",
          "",
          "[Removed Lines]",
          "180:     return Lists.newArrayList(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(null,null,null,null));",
          "",
          "[Added Lines]",
          "194:     return Lists.newArrayList(KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter.createEmptyFilter());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "265:     return adjustedFilter;",
          "266:   }",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:   public Collection<KerberosIdentityDescriptor> getServiceIdentities(String clusterName, Collection<String> services) throws AmbariException {",
          "283:     final Collection<KerberosIdentityDescriptor> serviceIdentities = new ArrayList<>();",
          "284:     for (String service : services) {",
          "285:       for (Collection<KerberosIdentityDescriptor> activeIdentities : kerberosHelper.getActiveIdentities(clusterName, null, service, null, true).values()) {",
          "286:         serviceIdentities.addAll(activeIdentities);",
          "287:       }",
          "288:     }",
          "289:     return serviceIdentities;",
          "290:   }",
          "292:   private Collection<String> populateIdentityFilter(Collection<String> identityFilters, Collection<KerberosIdentityDescriptor> serviceIdentities) {",
          "293:     if (serviceIdentities != null) {",
          "294:       identityFilters = identityFilters == null ? new HashSet<>() : identityFilters;",
          "295:       for (KerberosIdentityDescriptor serviceIdentity : serviceIdentities) {",
          "296:         if (!KerberosHelper.AMBARI_SERVER_KERBEROS_IDENTITY_NAME.equals(serviceIdentity.getName())) {",
          "297:           identityFilters.add(serviceIdentity.getPrincipalDescriptor().getName());",
          "298:         }",
          "299:       }",
          "300:     }",
          "301:     return identityFilters;",
          "302:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: import org.apache.ambari.server.state.StackId;",
          "105: import org.apache.ambari.server.state.State;",
          "106: import org.apache.ambari.server.state.fsm.InvalidStateTransitionException;",
          "107: import org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent;",
          "108: import org.apache.ambari.server.utils.StageUtils;",
          "109: import org.apache.commons.codec.binary.Base64;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1567:     }",
          "1569:     expect(kerberosKeytabControllerMock.adjustServiceComponentFilter(anyObject(), eq(false), anyObject())).andReturn(filter).once();",
          "1571:       Sets.newHashSet(",
          "1572:         new ResolvedKerberosKeytab(",
          "1573:           \"/etc/security/keytabs/dn.service.keytab\",",
          "",
          "[Removed Lines]",
          "1570:     expect(kerberosKeytabControllerMock.getFilteredKeytabs(filter,null,null)).andReturn(",
          "",
          "[Added Lines]",
          "1571:     expect(kerberosKeytabControllerMock.getFilteredKeytabs((Collection<KerberosIdentityDescriptor>) EasyMock.anyObject(), EasyMock.eq(null), EasyMock.eq(null))).andReturn(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1592:       )",
          "1593:     ).once();",
          "1595:     replay(kerberosKeytabControllerMock);",
          "1597:     Field controllerField = agentCommandsPublisher.getClass().getDeclaredField(\"kerberosKeytabController\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1596:     expect(kerberosKeytabControllerMock.getServiceIdentities(EasyMock.anyString(), EasyMock.anyObject())).andReturn(Collections.emptySet()).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import static org.easymock.EasyMock.expectLastCall;",
          "27: import java.io.File;",
          "28: import java.util.Collections;",
          "29: import java.util.HashMap;",
          "30: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "47: import org.apache.ambari.server.state.Cluster;",
          "48: import org.apache.ambari.server.state.Clusters;",
          "49: import org.apache.ambari.server.state.stack.OsFamily;",
          "50: import org.easymock.EasyMockSupport;",
          "51: import org.junit.After;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     HostRoleCommand mockHostRoleCommand = createMock(HostRoleCommand.class);",
          "80:     kerberosKeytabController = createMock(KerberosKeytabController.class);",
          "81:     expect(kerberosKeytabController.adjustServiceComponentFilter(anyObject(), eq(true), anyObject())).andReturn(null).anyTimes();",
          "83:       .andReturn(",
          "84:         Sets.newHashSet(new ResolvedKerberosKeytab(",
          "85:           null,",
          "",
          "[Removed Lines]",
          "82:     expect(kerberosKeytabController.getFilteredKeytabs(null, null, null))",
          "",
          "[Added Lines]",
          "84:     expect(kerberosKeytabController.getFilteredKeytabs((Collection<KerberosIdentityDescriptor>)null, null, null))",
          "",
          "---------------"
        ]
      }
    }
  ]
}