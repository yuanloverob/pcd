{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2ad2996dcaaf7420ed25eec746bb0da3617168e",
      "candidate_info": {
        "commit_hash": "e2ad2996dcaaf7420ed25eec746bb0da3617168e",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/e2ad2996dcaaf7420ed25eec746bb0da3617168e",
        "files": [
          "webapp/app/js/controllers/userGroup.js"
        ],
        "message": "KYLIN-4930 reset current page when searching for users/groups (#1607)\n\n(cherry picked from commit d6073d21ac25fcdc62c9e2a77844c695580f2196)",
        "before_after_code_files": [
          "webapp/app/js/controllers/userGroup.js||webapp/app/js/controllers/userGroup.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webapp/app/js/controllers/userGroup.js||webapp/app/js/controllers/userGroup.js": [
          "File: webapp/app/js/controllers/userGroup.js -> webapp/app/js/controllers/userGroup.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:       });",
          "123:     }",
          "124:     $scope.listUsers = function (offset, limit) {",
          "125:       $scope.getUserList(offset, limit, $scope.page);",
          "126:     }",
          "127:     $scope.listGroups = function (offset, limit) {",
          "128:       $scope.getGroupList(offset, limit, $scope.page);",
          "129:     }",
          "130:     $scope.listEditUsers = function (offset, limit) {",
          "131:       $scope.getUserList(offset, limit, $scope.editPage);",
          "132:     }",
          "133:     $scope.listEditGroups = function (offset, limit) {",
          "134:       $scope.getGroupList(offset, limit, $scope.editPage);",
          "135:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:       $scope.page.curpage = kylinConfig.page.offset",
          "129:       $scope.page.curpage = kylinConfig.page.offset",
          "133:       $scope.editPage.curpage = kylinConfig.page.offset",
          "137:       $scope.editPage.curpage = kylinConfig.page.offset",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61497c97f980b9ff4b6673ed6e2b8859a4cfae56",
      "candidate_info": {
        "commit_hash": "61497c97f980b9ff4b6673ed6e2b8859a4cfae56",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/61497c97f980b9ff4b6673ed6e2b8859a4cfae56",
        "files": [
          "kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java",
          "server/src/main/resources/kylinSecurity.xml"
        ],
        "message": "minor, api format\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>\n\n(cherry picked from commit ec726a49cdf00e3f8cba5efa25609c81f5e389a7)",
        "before_after_code_files": [
          "kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java||kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java||kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java": [
          "File: kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java -> kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         logger.info(\"random jetty port: \" + PORT);",
          "65:         sysPropsOverride.override(\"spring.profiles.active\", \"testing\");",
          "66:         sysPropsOverride.override(\"catalina.home\", \".\"); // resources/log4j.properties ref ${catalina.home}",
          "67:         staticCreateTestMetadata();",
          "68:         startJetty();",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:         sysPropsOverride.override(\"kylin.web.set-config-enable\", \"true\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9ad60ae86b35f52302160bb50b47a2bc6c87bec",
      "candidate_info": {
        "commit_hash": "a9ad60ae86b35f52302160bb50b47a2bc6c87bec",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/a9ad60ae86b35f52302160bb50b47a2bc6c87bec",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"
        ],
        "message": "KYLIN-5031 Fix last_build_job_id of segment is null when the semgent status is RUNNING or ERROR",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/JobService.java -> server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.apache.kylin.cube.CubeInstance;",
          "43: import org.apache.kylin.cube.CubeManager;",
          "44: import org.apache.kylin.cube.CubeSegment;",
          "45: import org.apache.kylin.cube.model.CubeBuildTypeEnum;",
          "46: import org.apache.kylin.engine.EngineFactory;",
          "47: import org.apache.kylin.engine.mr.CubingJob;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.kylin.cube.CubeUpdate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:             } else {",
          "270:                 throw new BadRequestException(String.format(Locale.ROOT, msg.getINVALID_BUILD_TYPE(), buildType));",
          "271:             }",
          "273:             getExecutableManager().addJob(job);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:             newSeg.setLastBuildJobID(job.getId());",
          "274:             CubeInstance cubeCopy = cube.latestCopyForWrite();",
          "275:             CubeUpdate update = new CubeUpdate(cubeCopy);",
          "276:             update.setToUpdateSegs(newSeg);",
          "277:             getCubeManager().updateCube(update);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7b77a3ee75219d152250a7592203e08db1f1c5b",
      "candidate_info": {
        "commit_hash": "b7b77a3ee75219d152250a7592203e08db1f1c5b",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b7b77a3ee75219d152250a7592203e08db1f1c5b",
        "files": [
          "source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java"
        ],
        "message": "KYLIN-5069 Fix the error of key not found",
        "before_after_code_files": [
          "source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java||source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java||source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java": [
          "File: source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java -> source-hive/src/main/java/org/apache/kylin/source/hive/SparkHiveClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.spark.sql.types.StructField;",
          "31: import scala.Option;",
          "32: import scala.collection.Iterator;",
          "34: import java.io.IOException;",
          "35: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import scala.collection.immutable.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:             }",
          "87:         }",
          "89:         builder.setAllColumns(allColumns);",
          "90:         builder.setPartitionColumns(partitionColumns);",
          "91:         builder.setSdLocation(catalogTable.location().getPath());",
          "94:         builder.setIsNative(catalogTable.tableType().equals(CatalogTableType.MANAGED()));",
          "95:         builder.setTableName(tableName);",
          "96:         builder.setSdInputFormat(catalogTable.storage().inputFormat().toString());",
          "",
          "[Removed Lines]",
          "92:         builder.setFileSize(Long.parseLong(catalogTable.ignoredProperties().apply(TABLE_TOTAL_SIZE)));",
          "93:         builder.setFileNum(Long.parseLong(catalogTable.ignoredProperties().apply(TABLE_FILE_NUM)));",
          "",
          "[Added Lines]",
          "90:         Map<String, String> properties = catalogTable.ignoredProperties();",
          "94:         long totalSize = properties.contains(TABLE_TOTAL_SIZE) ? Long.parseLong(properties.apply(TABLE_TOTAL_SIZE)) : 0L;",
          "95:         builder.setFileSize(totalSize);",
          "96:         long totalFileNum = properties.contains(TABLE_FILE_NUM) ? Long.parseLong(properties.apply(TABLE_FILE_NUM)) : 0L;",
          "97:         builder.setFileNum(totalFileNum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     @Override",
          "118:     public long getHiveTableRows(String database, String tableName) throws Exception {",
          "121:     }",
          "",
          "[Removed Lines]",
          "119:         return Long.parseLong(catalog.getTempViewOrPermanentTableMetadata(new TableIdentifier(tableName, Option.apply(database)))",
          "120:                 .ignoredProperties().apply(HIVE_TABLE_ROWS));",
          "",
          "[Added Lines]",
          "123:         Map<String, String> properties = catalog.getTempViewOrPermanentTableMetadata(new TableIdentifier(tableName, Option.apply(database))).ignoredProperties();",
          "124:         long hiveTableRows = properties.contains(HIVE_TABLE_ROWS) ? Long.parseLong(properties.apply(HIVE_TABLE_ROWS)) : 0L;",
          "125:         return hiveTableRows;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcbbc258926ce8ccbe5f334ad5e52f72949fe2f9",
      "candidate_info": {
        "commit_hash": "fcbbc258926ce8ccbe5f334ad5e52f72949fe2f9",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/fcbbc258926ce8ccbe5f334ad5e52f72949fe2f9",
        "files": [
          "core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java"
        ],
        "message": "add ut\n\n(cherry picked from commit 2c3f6819e1511db5b1bba8221393e2074ff4c43d)",
        "before_after_code_files": [
          "core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java||core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java||core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java": [
          "File: core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java -> core-metadata/src/test/java/org/apache/kylin/metadata/model/PartitionDescTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.IOException;",
          "23: import org.apache.kylin.common.util.LocalFileMetadataTestCase;",
          "24: import org.junit.After;",
          "25: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.kylin.common.util.DateFormat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: public class PartitionDescTest extends LocalFileMetadataTestCase {",
          "31:     @Before",
          "32:     public void setUp() throws Exception {",
          "33:         this.createTestMetadata();",
          "34:     }",
          "36:     @After",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     private PartitionDesc.DefaultPartitionConditionBuilder partitionConditionBuilder;",
          "37:         partitionConditionBuilder = new PartitionDesc.DefaultPartitionConditionBuilder();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:                 dateRangeCondition);",
          "59:     }",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     @Test",
          "67:     public void testCustomDateFormat() {",
          "68:         PartitionDesc partitionDesc = new PartitionDesc();",
          "69:         TblColRef col = TblColRef.mockup(TableDesc.mockup(\"DEFAULT.TABLE_NAME\"), 1, \"DATE_COLUMN\", \"string\");",
          "70:         partitionDesc.setPartitionDateColumnRef(col);",
          "71:         partitionDesc.setPartitionDateColumn(col.getCanonicalName());",
          "72:         partitionDesc.setPartitionDateFormat(\"yyyy/MM/dd\");",
          "73:         SegmentRange.TSRange range = new SegmentRange.TSRange(",
          "74:                 DateFormat.stringToMillis(\"2016-02-22\"),",
          "75:                 DateFormat.stringToMillis(\"2016-02-23\"));",
          "76:         String condition = partitionConditionBuilder.buildDateRangeCondition(partitionDesc, null, range, null);",
          "77:         Assert.assertEquals(",
          "78:                 \"UNKNOWN_ALIAS.DATE_COLUMN >= '2016/02/22' AND UNKNOWN_ALIAS.DATE_COLUMN < '2016/02/23'\",",
          "79:                 condition);",
          "81:         range = new SegmentRange.TSRange(0L, 0L);",
          "82:         condition = partitionConditionBuilder.buildDateRangeCondition(partitionDesc, null, range, null);",
          "83:         Assert.assertEquals(\"1=0\", condition);",
          "84:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}