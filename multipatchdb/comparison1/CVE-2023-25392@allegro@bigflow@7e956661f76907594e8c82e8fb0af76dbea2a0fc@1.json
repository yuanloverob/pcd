{
  "cve_id": "CVE-2023-25392",
  "cve_desc": "Allegro Tech BigFlow <1.6 is vulnerable to Missing SSL Certificate Validation.",
  "repo": "allegro/bigflow",
  "patch_hash": "7e956661f76907594e8c82e8fb0af76dbea2a0fc",
  "patch_info": {
    "commit_hash": "7e956661f76907594e8c82e8fb0af76dbea2a0fc",
    "repo": "allegro/bigflow",
    "commit_url": "https://github.com/allegro/bigflow/commit/7e956661f76907594e8c82e8fb0af76dbea2a0fc",
    "files": [
      "CHANGELOG.md",
      "bigflow/_version.py",
      "bigflow/build/operate.py",
      "bigflow/cli.py",
      "bigflow/deploy.py"
    ],
    "message": "Enabled TLS certificate verification in get_vault_token()",
    "before_after_code_files": [
      "bigflow/_version.py||bigflow/_version.py",
      "bigflow/build/operate.py||bigflow/build/operate.py",
      "bigflow/cli.py||bigflow/cli.py",
      "bigflow/deploy.py||bigflow/deploy.py"
    ]
  },
  "patch_diff": {
    "bigflow/_version.py||bigflow/_version.py": [
      "File: bigflow/_version.py -> bigflow/_version.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: __version__ = '1.5.4'",
      "",
      "[Added Lines]",
      "1: __version__ = '1.6.0.dev1'",
      "",
      "---------------"
    ],
    "bigflow/build/operate.py||bigflow/build/operate.py": [
      "File: bigflow/build/operate.py -> bigflow/build/operate.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:             auth_method=cache_params.auth_method or bigflow.deploy.AuthorizationType.LOCAL_ACCOUNT,",
      "96:             vault_endpoint=cache_params.vault_endpoint,",
      "97:             vault_secret=cache_params.vault_secret,",
      "98:         )",
      "100:         for image in (cache_params.cache_from_image or []):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98:             vault_endpoint_verify=cache_params.vault_endpoint_verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:     vault_secret: str | None = None",
      "121:     cache_from_version: list[str] | None = None",
      "122:     cache_from_image: list[str] | None = None",
      "125: def build_image(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:     vault_endpoint_verify: str | bool | None = None",
      "",
      "---------------"
    ],
    "bigflow/cli.py||bigflow/cli.py": [
      "File: bigflow/cli.py -> bigflow/cli.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: from importlib import import_module",
      "14: from pathlib import Path",
      "15: from types import ModuleType",
      "18: import fnmatch",
      "20: import bigflow as bf",
      "",
      "[Removed Lines]",
      "16: from typing import Tuple, Iterator",
      "17: from typing import Optional",
      "",
      "[Added Lines]",
      "16: from typing import Tuple, Iterator, Optional",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "386: def _add_auth_parsers_arguments(parser):",
      "387:     parser.add_argument('-a', '--auth-method',",
      "388:                         type=bigflow.deploy.AuthorizationType,",
      "389:                         default='local_account',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "386:     class VaultEndpointVerifyAction(argparse.Action):",
      "387:         def __call__(self, parser, args, values, option_string=None):",
      "388:             if values in ['true', 'false']:",
      "389:                 setattr(args, self.dest, values == 'true')",
      "390:             else:",
      "391:                 setattr(args, self.dest, str(values))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "399:                              'Required if auth-method is vault. '",
      "400:                              'If not set, will be read from deployment_config.py.'",
      "401:                         )",
      "402:     parser.add_argument('-vs', '--vault-secret',",
      "403:                         type=str,",
      "404:                         help='Vault secret token. '",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408:     parser.add_argument('-vev', '--vault-endpoint-verify',",
      "409:                         type=str,",
      "410:                         action=VaultEndpointVerifyAction,",
      "411:                         help='Can be \"true\", \"false\", a path to certificate PEM file or a path to directory with PEM files. '",
      "412:                              'Enables/disables vault endpoint TLS certificate verification. Enabled by default. '",
      "413:                              'Disabling makes execution vulnerable for MITM attacks - do it only when justified and in trusted environments. '",
      "414:                              'For details see: https://requests.readthedocs.io/en/latest/user/advanced/#ssl-cert-verification',",
      "415:                         dest='vault_endpoint_verify',",
      "416:                         default=True",
      "417:                         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "514: def _resolve_property(args, property_name, ignore_value_error=False):",
      "515:     try:",
      "516:         cli_atr = getattr(args, property_name)",
      "518:             return cli_atr",
      "519:         else:",
      "520:             config = import_deployment_config(_resolve_deployment_config_path(args), property_name)",
      "",
      "[Removed Lines]",
      "517:         if cli_atr:",
      "",
      "[Added Lines]",
      "533:         if cli_atr or cli_atr is False:",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "533:                        clear_dags_folder=args.clear_dags_folder,",
      "534:                        auth_method=args.auth_method,",
      "535:                        vault_endpoint=_resolve_vault_endpoint(args),",
      "536:                        vault_secret=vault_secret,",
      "537:                        project_id=_resolve_property(args, 'gcp_project_id')",
      "538:                        )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "552:                        vault_endpoint_verify=_resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True),",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "543:     docker_repository = _resolve_property(args, 'docker_repository')",
      "544:     vault_secret = _resolve_property(args, 'vault_secret', ignore_value_error=True)",
      "545:     vault_endpoint = _resolve_vault_endpoint(args)",
      "546:     image_tar_path = args.image_tar_path if args.image_tar_path else find_image_file()",
      "548:     bigflow.deploy.deploy_docker_image(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "563:     vault_endpoint_verify = _resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "550:         auth_method=args.auth_method,",
      "551:         docker_repository=docker_repository,",
      "552:         vault_endpoint=vault_endpoint,",
      "553:         vault_secret=vault_secret,",
      "554:     )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "571:         vault_endpoint_verify=vault_endpoint_verify,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579:         logger.debug(\"Image caching is requested - create build image cache params obj\")",
      "580:         vault_secret = _resolve_property(args, 'vault_secret', ignore_value_error=True)",
      "581:         vault_endpoint = _resolve_vault_endpoint(args)",
      "582:         return bigflow.build.operate.BuildImageCacheParams(",
      "583:             auth_method=args.auth_method,",
      "584:             vault_endpoint=vault_endpoint,",
      "585:             vault_secret=vault_secret,",
      "586:             cache_from_version=args.cache_from_version,",
      "587:             cache_from_image=args.cache_from_image,",
      "588:         )",
      "589:     else:",
      "590:         logger.debug(\"No caching is requested - so just disable it completly\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "601:         vault_endpoint_verify = _resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True)",
      "608:             vault_endpoint_verify=vault_endpoint_verify",
      "",
      "---------------"
    ],
    "bigflow/deploy.py||bigflow/deploy.py": [
      "File: bigflow/deploy.py -> bigflow/deploy.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     docker_repository: str,",
      "43:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
      "44:     vault_endpoint: T.Optional[str] = None,",
      "45:     vault_secret: T.Optional[str] = None,",
      "46: ) -> str:",
      "47:     if image_tar_path.endswith(\".toml\"):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     vault_endpoint_verify: str | bool | None = None,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:         docker_repository,",
      "54:         auth_method,",
      "55:         vault_endpoint,",
      "56:         vault_secret,",
      "57:     )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:         vault_endpoint_verify,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "62:     docker_repository: str,",
      "63:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
      "64:     vault_endpoint: str | None = None,",
      "65:     vault_secret: str | None = None,",
      "66: ) -> str:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:     vault_endpoint_verify: str | bool | None = None,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "81:         docker_repository=docker_repository,",
      "82:         auth_method=auth_method,",
      "83:         vault_endpoint=vault_endpoint,",
      "84:         vault_secret=vault_secret,",
      "85:         image_id=image_id,",
      "86:         build_ver=build_ver,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:         vault_endpoint_verify=vault_endpoint_verify,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "92:     docker_repository: str,",
      "93:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
      "94:     vault_endpoint: str | None = None,",
      "95:     vault_secret: str | None = None,",
      "96: ) -> str:",
      "97:     build_ver = bf_commons.decode_version_number_from_file_name(Path(image_tar_path))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99:     vault_endpoint_verify: str | bool | None = None,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "105:             image_id=image_id,",
      "106:             auth_method=auth_method,",
      "107:             vault_endpoint=vault_endpoint,",
      "108:             vault_secret=vault_secret,",
      "109:         )",
      "110:     finally:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113:             vault_endpoint_verify=vault_endpoint_verify,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "118:     image_id: str,",
      "119:     auth_method: AuthorizationType,",
      "120:     vault_endpoint: str | None = None,",
      "121:     vault_secret: str | None = None,",
      "122: ) -> str:",
      "123:     docker_image = docker_repository + \":\" + build_ver",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:     vault_endpoint_verify: str | bool | None = None,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "125:     tag_image(image_id, docker_repository, \"latest\")",
      "127:     logger.info(\"Deploying docker image tag=%s auth_method=%s\", docker_image, auth_method)",
      "129:     bf_commons.run_process(['docker', 'push', docker_image])",
      "130:     bf_commons.run_process(['docker', 'push', docker_image_latest])",
      "",
      "[Removed Lines]",
      "128:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret)",
      "",
      "[Added Lines]",
      "135:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret, vault_endpoint_verify)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "136:         auth_method: AuthorizationType,",
      "137:         vault_endpoint: T.Optional[str] = None,",
      "138:         vault_secret: T.Optional[str] = None,",
      "139: ):",
      "140:     logger.info(\"Authenticating to registry with auth_method=%s\", auth_method)",
      "142:     if auth_method == AuthorizationType.LOCAL_ACCOUNT:",
      "143:         bf_commons.run_process(['gcloud', 'auth', 'configure-docker'])",
      "144:     elif auth_method == AuthorizationType.VAULT:",
      "146:         bf_commons.run_process(",
      "147:             ['docker', 'login', '-u', 'oauth2accesstoken', '--password-stdin', 'https://eu.gcr.io'],",
      "148:             input=oauthtoken,",
      "",
      "[Removed Lines]",
      "145:         oauthtoken = get_vault_token(vault_endpoint, vault_secret)",
      "",
      "[Added Lines]",
      "146:         vault_endpoint_verify: str | bool | None = None,",
      "153:         oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "156:         auth_method: AuthorizationType,",
      "157:         vault_endpoint: T.Optional[str] = None,",
      "158:         vault_secret: T.Optional[str] = None,",
      "159: ):",
      "160:     logger.info(\"Checking if images used in DAGs exist in the registry\")",
      "162:     missing_images = set()",
      "163:     for image in images:",
      "164:         found_images = bf_commons.run_process(['docker', 'manifest', 'inspect', image], check=False, verbose=False)",
      "",
      "[Removed Lines]",
      "161:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret)",
      "",
      "[Added Lines]",
      "167:         vault_endpoint_verify: str | bool | None = None",
      "170:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret, vault_endpoint_verify)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "189:         clear_dags_folder: bool = False,",
      "190:         auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
      "191:         vault_endpoint: T.Optional[str] = None,",
      "192:         vault_secret: T.Optional[str] = None,",
      "193:         gs_client: T.Optional[storage.Client] = None,",
      "194: ) -> str:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "201:         vault_endpoint_verify: str | bool | None = None,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "196:     if images:",
      "197:         check_images_exist(auth_method=auth_method,",
      "198:                            vault_endpoint=vault_endpoint,",
      "199:                            vault_secret=vault_secret,",
      "200:                            images=images)",
      "202:     logger.info(\"Deploying DAGs folder, auth_method=%s, clear_dags_folder=%s, dags_dir=%s\", auth_method, clear_dags_folder, dags_dir)",
      "205:     bucket = client.bucket(dags_bucket)",
      "207:     if clear_dags_folder:",
      "",
      "[Removed Lines]",
      "204:     client = gs_client or create_storage_client(auth_method, project_id, vault_endpoint, vault_secret)",
      "",
      "[Added Lines]",
      "209:                            vault_endpoint_verify=vault_endpoint_verify,",
      "215:     client = gs_client or create_storage_client(auth_method, project_id, vault_endpoint, vault_secret, vault_endpoint_verify)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "246:         project_id: str,",
      "247:         vault_endpoint: str,",
      "248:         vault_secret: str,",
      "249: ) -> storage.Client:",
      "250:     if auth_method == AuthorizationType.LOCAL_ACCOUNT:",
      "251:         return storage.Client(project=project_id)",
      "252:     elif auth_method == AuthorizationType.VAULT:",
      "254:         return storage.Client(project=project_id, credentials=credentials.Credentials(oauthtoken))",
      "255:     else:",
      "256:         raise ValueError(f\"unsupported auth_method: {auth_method!r}\")",
      "260:     if not vault_endpoint:",
      "261:         raise ValueError('vault_endpoint is required')",
      "262:     if not vault_secret:",
      "263:         raise ValueError('vault_secret is required')",
      "265:     headers = {'X-Vault-Token': vault_secret}",
      "268:     if response.status_code != 200:",
      "269:         logger.info(response.text)",
      "",
      "[Removed Lines]",
      "253:         oauthtoken = get_vault_token(vault_endpoint, vault_secret)",
      "259: def get_vault_token(vault_endpoint: str, vault_secret: str) -> str:",
      "266:     response = requests.get(vault_endpoint, headers=headers, verify=False)",
      "",
      "[Added Lines]",
      "260:         vault_endpoint_verify: str | bool | None = None",
      "265:         oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)",
      "271: def get_vault_token(vault_endpoint: str, vault_secret: str, vault_endpoint_verify: str | bool | None = True) -> str:",
      "278:     response = requests.get(vault_endpoint, headers=headers, verify=vault_endpoint_verify)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "733888b0de337ccf4fbded45d130b079c9c07ac4",
      "candidate_info": {
        "commit_hash": "733888b0de337ccf4fbded45d130b079c9c07ac4",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/733888b0de337ccf4fbded45d130b079c9c07ac4",
        "files": [
          "bigflow/_version.py"
        ],
        "message": "Release 1.5.2 (#337)",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/_version.py||bigflow/_version.py"
          ],
          "candidate": [
            "bigflow/_version.py||bigflow/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.5.2.dev2'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.5.2'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "636e5d1d0d5025e185fb18d215cd45a49dd7f269",
      "candidate_info": {
        "commit_hash": "636e5d1d0d5025e185fb18d215cd45a49dd7f269",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/636e5d1d0d5025e185fb18d215cd45a49dd7f269",
        "files": [
          ".github/workflows/release.yml",
          "bigflow/_version.py"
        ],
        "message": "PGRM-118 Fix setting an output for check_if_version_file_was_changed job",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/_version.py||bigflow/_version.py"
          ],
          "candidate": [
            "bigflow/_version.py||bigflow/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.5.4'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.5.4.dev1'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30db1e9b37f6551ad8188c10bc5d361efebb0ed1",
      "candidate_info": {
        "commit_hash": "30db1e9b37f6551ad8188c10bc5d361efebb0ed1",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/30db1e9b37f6551ad8188c10bc5d361efebb0ed1",
        "files": [
          "CHANGELOG.md",
          "bigflow/_version.py",
          "bigflow/dagbuilder.py",
          "docs/deployment.md",
          "test/dagbuilder/my_daily_workflow__dag.py.txt",
          "test/dagbuilder/my_parametrized_workflow__dag.py.txt",
          "test/dagbuilder/my_workflow__dag.py.txt"
        ],
        "message": "fixing composer 2.0 support, adding 1.5.0 and 1.5.1 descriptions in c\u2026 (#331)\n\n* fixing composer 2.0 support, adding 1.5.0 and 1.5.1 descriptions in changelog, adding a note to the documentation about composer 2.0 support, bumping to 1.5.1.dev1\n\nCo-authored-by: grzegorzwitkowski <gmwitkowski@gmail.com>\n\nCo-authored-by: grzegorzwitkowski <gmwitkowski@gmail.com>",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py",
          "bigflow/dagbuilder.py||bigflow/dagbuilder.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/_version.py||bigflow/_version.py"
          ],
          "candidate": [
            "bigflow/_version.py||bigflow/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.5.0'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.5.1.dev1'",
          "",
          "---------------"
        ],
        "bigflow/dagbuilder.py||bigflow/dagbuilder.py": [
          "File: bigflow/dagbuilder.py -> bigflow/dagbuilder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         import datetime",
          "58:         from airflow import DAG",
          "60:         try:",
          "62:             from airflow.kubernetes.secret import Secret",
          "63:             from airflow.providers.cncf.kubernetes.operators.kubernetes_pod import KubernetesPodOperator",
          "64:         except ImportError:",
          "66:             from airflow.contrib.kubernetes.secret import Secret",
          "67:             from airflow.contrib.operators.kubernetes_pod_operator import KubernetesPodOperator",
          "69:         default_args = dict(",
          "70:             owner='airflow',",
          "71:             depends_on_past={workflow.depends_on_past!r},",
          "",
          "[Removed Lines]",
          "61:             # For Airflow 2.x",
          "65:             # Fallback to Airflow 1.x",
          "",
          "[Added Lines]",
          "61:             # For Airflow 2.x + Composer 2.x",
          "64:             IS_COMPOSER_2_X = True",
          "66:             # Fallback to Airflow 1.x + Composer 1.x",
          "69:             IS_COMPOSER_2_X = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:                     '--project-package', {root_package_name!r},",
          "123:                     '--config', '{{{{var.value.env}}}}',",
          "124:                 ],",
          "126:                 image={image_version!r},",
          "127:                 is_delete_operator_pod=True,",
          "128:                 retries={retries!r},",
          "",
          "[Removed Lines]",
          "125:                 namespace='default',",
          "",
          "[Added Lines]",
          "127:                 namespace='composer-user-workloads' if IS_COMPOSER_2_X else 'default',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "135ca82c0c3057f00f1bd1d2c4cf334d67fe403b",
      "candidate_info": {
        "commit_hash": "135ca82c0c3057f00f1bd1d2c4cf334d67fe403b",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/135ca82c0c3057f00f1bd1d2c4cf334d67fe403b",
        "files": [
          "README.md",
          "bigflow/_version.py",
          "docs/cli.md",
          "docs/deployment.md",
          "docs/logging.md",
          "docs/technologies.md",
          "requirements/base.txt"
        ],
        "message": "removing deprecated stuff from docs (#314)\n\n* removing dataproc from docs\n* removing logging from docs\n* some minor style and formatting changes\n* fixing broken MarkupSafe dependency issue, bumping to 1.4.2rc2",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/_version.py||bigflow/_version.py"
          ],
          "candidate": [
            "bigflow/_version.py||bigflow/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.4.2rc1'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.4.2rc2'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b23299caad3e2ad5c11b2db379ff51e402b494ac",
      "candidate_info": {
        "commit_hash": "b23299caad3e2ad5c11b2db379ff51e402b494ac",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/b23299caad3e2ad5c11b2db379ff51e402b494ac",
        "files": [
          "CHANGELOG.md",
          "bigflow/_version.py",
          "bigflow/dagbuilder.py",
          "test/dagbuilder/my_daily_workflow__dag.py.txt",
          "test/dagbuilder/my_parametrized_workflow__dag.py.txt",
          "test/dagbuilder/my_workflow__dag.py.txt"
        ],
        "message": "bumping to 1.5.2.dev2, updating changelog, fixing dagbuilder (#336)\n\n* bumping to 1.5.2.dev2, updating changelog, fixing dagbuilder",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py",
          "bigflow/dagbuilder.py||bigflow/dagbuilder.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/_version.py||bigflow/_version.py"
          ],
          "candidate": [
            "bigflow/_version.py||bigflow/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.5.2.dev1'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.5.2.dev2'",
          "",
          "---------------"
        ],
        "bigflow/dagbuilder.py||bigflow/dagbuilder.py": [
          "File: bigflow/dagbuilder.py -> bigflow/dagbuilder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         import datetime",
          "58:         from airflow import DAG",
          "60:         try:",
          "62:             from airflow.kubernetes.secret import Secret",
          "63:             from airflow.providers.cncf.kubernetes.operators.kubernetes_pod import KubernetesPodOperator",
          "65:         except ImportError:",
          "67:             from airflow.contrib.kubernetes.secret import Secret",
          "68:             from airflow.contrib.operators.kubernetes_pod_operator import KubernetesPodOperator",
          "71:         default_args = dict(",
          "72:             owner='airflow',",
          "",
          "[Removed Lines]",
          "61:             # For Airflow 2.x + Composer 2.x",
          "64:             IS_COMPOSER_2_X = True",
          "66:             # Fallback to Airflow 1.x + Composer 1.x",
          "69:             IS_COMPOSER_2_X = False",
          "",
          "[Added Lines]",
          "59:         from airflow import version",
          "65:             # Fallback to older Airflow",
          "69:         # BigFlow assumes that you use (airflow 1.x + composer 1.x) or (airflow 2.x + composer 2.x)",
          "70:         IS_COMPOSER_2_X = version.version >= '2.0.0'",
          "71:         namespace = 'composer-user-workloads' if IS_COMPOSER_2_X else 'default'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:                     '--project-package', {root_package_name!r},",
          "125:                     '--config', '{{{{var.value.env}}}}',",
          "126:                 ],",
          "128:                 image={image_version!r},",
          "129:                 is_delete_operator_pod=True,",
          "130:                 retries={retries!r},",
          "",
          "[Removed Lines]",
          "127:                 namespace='composer-user-workloads' if IS_COMPOSER_2_X else 'default',",
          "",
          "[Added Lines]",
          "129:                 namespace=namespace,",
          "",
          "---------------"
        ]
      }
    }
  ]
}