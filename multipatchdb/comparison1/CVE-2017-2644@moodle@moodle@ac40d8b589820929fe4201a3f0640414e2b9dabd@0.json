{
  "cve_id": "CVE-2017-2644",
  "cve_desc": "In Moodle 3.x, XSS can occur via evidence of prior learning.",
  "repo": "moodle/moodle",
  "patch_hash": "ac40d8b589820929fe4201a3f0640414e2b9dabd",
  "patch_info": {
    "commit_hash": "ac40d8b589820929fe4201a3f0640414e2b9dabd",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/ac40d8b589820929fe4201a3f0640414e2b9dabd",
    "files": [
      "admin/tool/lp/classes/form/competency.php",
      "admin/tool/lp/classes/form/competency_framework.php",
      "admin/tool/lp/classes/form/plan.php",
      "admin/tool/lp/classes/form/template.php",
      "admin/tool/lp/classes/form/user_evidence.php",
      "competency/classes/competency.php",
      "competency/classes/competency_framework.php",
      "competency/classes/plan.php",
      "competency/classes/template.php",
      "competency/classes/user_evidence.php",
      "lib/classes/external/exporter.php",
      "lib/classes/form/persistent.php",
      "lib/classes/persistent.php"
    ],
    "message": "MDL-57596 forms: CLEANHTML in persistent forms\n\nAdd special handling for text fields with the CLEANHTML type. This should\nbe used when students and teachers can edit the same field (you can't trust those students).\n\nApplies cleaning on submitted data, and on data stored in the DB before it is put back in an editing form.",
    "before_after_code_files": [
      "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
      "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
      "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
      "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
      "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
      "competency/classes/competency.php||competency/classes/competency.php",
      "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
      "competency/classes/plan.php||competency/classes/plan.php",
      "competency/classes/template.php||competency/classes/template.php",
      "competency/classes/user_evidence.php||competency/classes/user_evidence.php",
      "lib/classes/external/exporter.php||lib/classes/external/exporter.php",
      "lib/classes/form/persistent.php||lib/classes/form/persistent.php",
      "lib/classes/persistent.php||lib/classes/persistent.php"
    ]
  },
  "patch_diff": {
    "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
      "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:         $mform->addElement('editor', 'description',",
      "105:                            get_string('description', 'tool_lp'), array('rows' => 4));",
      "108:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
      "109:         $mform->setType('idnumber', PARAM_RAW);",
      "",
      "[Removed Lines]",
      "106:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "106:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
      "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:         $mform->addElement('editor', 'description',",
      "65:                            get_string('description', 'tool_lp'), array('rows' => 4));",
      "68:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
      "69:         $mform->setType('idnumber', PARAM_RAW);",
      "",
      "[Removed Lines]",
      "66:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "66:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
      "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
      "62:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
      "65:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
      "66:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
      "",
      "[Removed Lines]",
      "63:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "63:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
      "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:         $mform->addElement('editor', 'description',",
      "62:                            get_string('description', 'tool_lp'), array('rows' => 4));",
      "64:         $mform->addElement('selectyesno', 'visible',",
      "65:                            get_string('visible', 'tool_lp'));",
      "66:         $mform->addElement('date_time_selector',",
      "",
      "[Removed Lines]",
      "63:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "63:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
      "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
      "58:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
      "61:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array('size' => '60'), array('usefilepicker' => false));",
      "62:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
      "",
      "[Removed Lines]",
      "59:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "59:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "competency/classes/competency.php||competency/classes/competency.php": [
      "File: competency/classes/competency.php -> competency/classes/competency.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:             ),",
      "69:             'description' => array(",
      "70:                 'default' => '',",
      "72:             ),",
      "73:             'descriptionformat' => array(",
      "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
      "",
      "[Removed Lines]",
      "71:                 'type' => PARAM_RAW",
      "",
      "[Added Lines]",
      "71:                 'type' => PARAM_CLEANHTML",
      "",
      "---------------"
    ],
    "competency/classes/competency_framework.php||competency/classes/competency_framework.php": [
      "File: competency/classes/competency_framework.php -> competency/classes/competency_framework.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:                 'type' => PARAM_RAW",
      "91:             ),",
      "92:             'description' => array(",
      "94:                 'default' => ''",
      "95:             ),",
      "96:             'descriptionformat' => array(",
      "",
      "[Removed Lines]",
      "93:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "93:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "competency/classes/plan.php||competency/classes/plan.php": [
      "File: competency/classes/plan.php -> competency/classes/plan.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:                 'type' => PARAM_TEXT,",
      "72:             ),",
      "73:             'description' => array(",
      "75:                 'default' => ''",
      "76:             ),",
      "77:             'descriptionformat' => array(",
      "",
      "[Removed Lines]",
      "74:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "74:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "competency/classes/template.php||competency/classes/template.php": [
      "File: competency/classes/template.php -> competency/classes/template.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:             ),",
      "54:             'description' => array(",
      "55:                 'default' => '',",
      "57:             ),",
      "58:             'descriptionformat' => array(",
      "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
      "",
      "[Removed Lines]",
      "56:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "56:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "competency/classes/user_evidence.php||competency/classes/user_evidence.php": [
      "File: competency/classes/user_evidence.php -> competency/classes/user_evidence.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:                 'type' => PARAM_TEXT",
      "54:             ),",
      "55:             'description' => array(",
      "57:                 'default' => '',",
      "58:             ),",
      "59:             'descriptionformat' => array(",
      "",
      "[Removed Lines]",
      "56:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "56:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "lib/classes/external/exporter.php||lib/classes/external/exporter.php": [
      "File: lib/classes/external/exporter.php -> lib/classes/external/exporter.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     final protected static function get_format_field($definitions, $property) {",
      "396:         $formatproperty = $property . 'format';",
      "398:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
      "399:             return $formatproperty;",
      "400:         }",
      "",
      "[Removed Lines]",
      "397:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
      "",
      "[Added Lines]",
      "397:         if (($definitions[$property]['type'] == PARAM_RAW || $definitions[$property]['type'] == PARAM_CLEANHTML)",
      "398:                 && isset($definitions[$formatproperty])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "513:                 $thisvalue = self::get_read_structure_from_properties($type, $proprequired, $propdefault);",
      "514:             } else {",
      "517:                     $type = PARAM_RAW;",
      "518:                 }",
      "",
      "[Removed Lines]",
      "515:                 if ($definition['type'] == PARAM_TEXT) {",
      "",
      "[Added Lines]",
      "516:                 if ($definition['type'] == PARAM_TEXT || $definition['type'] == PARAM_CLEANHTML) {",
      "",
      "---------------"
    ],
    "lib/classes/form/persistent.php||lib/classes/form/persistent.php": [
      "File: lib/classes/form/persistent.php -> lib/classes/form/persistent.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:         $data = $this->get_persistent()->to_record();",
      "224:         $class = static::$persistentclass;",
      "225:         $properties = $class::get_formatted_properties();",
      "227:         foreach ($data as $field => $value) {",
      "229:             if (isset($properties[$field])) {",
      "230:                 $data->$field = array(",
      "231:                     'text' => $data->$field,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:         $allproperties = $class::properties_definition();",
      "230:             if (isset($allproperties[$field]['type'])) {",
      "231:                 $data->$field = clean_param($data->$field, $allproperties[$field]['type']);",
      "232:             }",
      "",
      "---------------"
    ],
    "lib/classes/persistent.php||lib/classes/persistent.php": [
      "File: lib/classes/persistent.php -> lib/classes/persistent.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "312:         $formatted = array();",
      "313:         foreach ($properties as $property => $definition) {",
      "314:             $propertyformat = $property . 'format';",
      "316:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
      "317:                 $formatted[$property] = $propertyformat;",
      "318:             }",
      "",
      "[Removed Lines]",
      "315:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
      "",
      "[Added Lines]",
      "315:             if (($definition['type'] == PARAM_RAW || $definition['type'] == PARAM_CLEANHTML)",
      "316:                     && array_key_exists($propertyformat, $properties)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "697:                         $value = 0;",
      "698:                     }",
      "699:                     validate_param($value, $definition['type'], $definition['null']);",
      "700:                 } catch (invalid_parameter_exception $e) {",
      "701:                     $errors[$property] = static::get_property_error_message($property);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "700:                     if ($definition['type'] === PARAM_CLEANHTML) {",
      "702:                         $value = clean_param($value, PARAM_CLEANHTML);",
      "703:                     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e54f8c4d2d4f2676d4669c1492231cc6720feb1e",
      "candidate_info": {
        "commit_hash": "e54f8c4d2d4f2676d4669c1492231cc6720feb1e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e54f8c4d2d4f2676d4669c1492231cc6720feb1e",
        "files": [
          "admin/tool/lp/classes/competency.php",
          "admin/tool/lp/classes/competency_framework.php",
          "admin/tool/lp/classes/external/exporter.php",
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php",
          "admin/tool/lp/classes/template.php",
          "admin/tool/lp/classes/user_evidence.php",
          "admin/tool/lp/templates/competency_summary.mustache",
          "admin/tool/lp/templates/plan_page.mustache",
          "admin/tool/lp/templates/user_evidence_page.mustache"
        ],
        "message": "MDL-52454 tool_lp: Fix all PARAM_TEXT on persistent, and exporters",
        "before_after_code_files": [
          "admin/tool/lp/classes/competency.php||admin/tool/lp/classes/competency.php",
          "admin/tool/lp/classes/competency_framework.php||admin/tool/lp/classes/competency_framework.php",
          "admin/tool/lp/classes/external/exporter.php||admin/tool/lp/classes/external/exporter.php",
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php",
          "admin/tool/lp/classes/template.php||admin/tool/lp/classes/template.php",
          "admin/tool/lp/classes/user_evidence.php||admin/tool/lp/classes/user_evidence.php",
          "admin/tool/lp/templates/competency_summary.mustache||admin/tool/lp/templates/competency_summary.mustache",
          "admin/tool/lp/templates/plan_page.mustache||admin/tool/lp/templates/plan_page.mustache",
          "admin/tool/lp/templates/user_evidence_page.mustache||admin/tool/lp/templates/user_evidence_page.mustache"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/classes/competency.php||admin/tool/lp/classes/competency.php": [
          "File: admin/tool/lp/classes/competency.php -> admin/tool/lp/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             ),",
          "69:             'description' => array(",
          "70:                 'default' => '',",
          "72:             ),",
          "73:             'descriptionformat' => array(",
          "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "71:                 'type' => PARAM_TEXT",
          "",
          "[Added Lines]",
          "71:                 'type' => PARAM_RAW",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/competency_framework.php||admin/tool/lp/classes/competency_framework.php": [
          "File: admin/tool/lp/classes/competency_framework.php -> admin/tool/lp/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 'type' => PARAM_TEXT",
          "91:             ),",
          "92:             'description' => array(",
          "94:                 'default' => ''",
          "95:             ),",
          "96:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "93:                 'type' => PARAM_TEXT,",
          "",
          "[Added Lines]",
          "93:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external/exporter.php||admin/tool/lp/classes/external/exporter.php": [
          "File: admin/tool/lp/classes/external/exporter.php -> admin/tool/lp/classes/external/exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     final protected static function get_format_field($definitions, $property) {",
          "336:         $formatproperty = $property . 'format';",
          "338:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
          "339:             return $formatproperty;",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:         if ($definitions[$property]['type'] == PARAM_TEXT && isset($definitions[$formatproperty])",
          "",
          "[Added Lines]",
          "336:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "77:         $mform->addElement('editor', 'description',",
          "78:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "80:         $mform->addElement('text', 'idnumber',",
          "81:                            get_string('idnumber', 'tool_lp'));",
          "82:         $mform->setType('idnumber', PARAM_TEXT);",
          "",
          "[Removed Lines]",
          "79:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "79:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "61:         $mform->addElement('editor', 'description',",
          "62:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "64:         $mform->addElement('text', 'idnumber',",
          "65:                            get_string('idnumber', 'tool_lp'));",
          "66:         $mform->setType('idnumber', PARAM_TEXT);",
          "",
          "[Removed Lines]",
          "63:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "63:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->setType('name', PARAM_TEXT);",
          "55:         $mform->addRule('name', null, 'required', null, 'client');",
          "56:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "59:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
          "60:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "",
          "[Removed Lines]",
          "57:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "57:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "57:         $mform->addElement('editor', 'description',",
          "58:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "60:         $mform->addElement('selectyesno', 'visible',",
          "61:                            get_string('visible', 'tool_lp'));",
          "62:         $mform->addElement('date_time_selector',",
          "",
          "[Removed Lines]",
          "59:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "59:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "58:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array(), array('usefilepicker' => false));",
          "59:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
          "",
          "[Removed Lines]",
          "56:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "56:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php": [
          "File: admin/tool/lp/classes/persistent.php -> admin/tool/lp/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         $formatted = array();",
          "233:         foreach ($properties as $property => $definition) {",
          "234:             $propertyformat = $property . 'format';",
          "237:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
          "238:                 $formatted[$property] = $propertyformat;",
          "239:             }",
          "",
          "[Removed Lines]",
          "236:             if ($definition['type'] == PARAM_TEXT && array_key_exists($propertyformat, $properties)",
          "",
          "[Added Lines]",
          "235:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php": [
          "File: admin/tool/lp/classes/plan.php -> admin/tool/lp/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:                 'type' => PARAM_TEXT,",
          "59:             ),",
          "60:             'description' => array(",
          "62:                 'default' => ''",
          "63:             ),",
          "64:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "61:                 'type' => PARAM_TEXT,",
          "",
          "[Added Lines]",
          "61:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/template.php||admin/tool/lp/classes/template.php": [
          "File: admin/tool/lp/classes/template.php -> admin/tool/lp/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             ),",
          "54:             'description' => array(",
          "55:                 'default' => '',",
          "57:             ),",
          "58:             'descriptionformat' => array(",
          "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_TEXT,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/user_evidence.php||admin/tool/lp/classes/user_evidence.php": [
          "File: admin/tool/lp/classes/user_evidence.php -> admin/tool/lp/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_TEXT,       // TODO MDL-52454 Make PARAM_RAW.",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/competency_summary.mustache||admin/tool/lp/templates/competency_summary.mustache": [
          "File: admin/tool/lp/templates/competency_summary.mustache -> admin/tool/lp/templates/competency_summary.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <p><strong>{{competency.shortname}} <em>{{competency.idnumber}}</em></strong></p>",
          "4: {{#framework}}",
          "5: <p><strong>{{framework.shortname}}</strong></p>",
          "7: {{/framework}}",
          "9: {{#showrelatedcompetencies}}",
          "",
          "[Removed Lines]",
          "2: <p>{{competency.description}}</p>",
          "6: <p>{{framework.description}}</p>",
          "",
          "[Added Lines]",
          "2: <p>{{{competency.description}}}</p>",
          "6: <p>{{{framework.description}}}</p>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/plan_page.mustache||admin/tool/lp/templates/plan_page.mustache": [
          "File: admin/tool/lp/templates/plan_page.mustache -> admin/tool/lp/templates/plan_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:             {{/plan.template}}",
          "53:             {{#description}}",
          "54:                 <dt>{{#str}}description{{/str}}</dt>",
          "56:             {{/description}}",
          "57:         </dl>",
          "58:     </div>",
          "",
          "[Removed Lines]",
          "55:                 <dd>{{plan.description}}</dd>",
          "",
          "[Added Lines]",
          "55:                 <dd>{{{plan.description}}}</dd>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/user_evidence_page.mustache||admin/tool/lp/templates/user_evidence_page.mustache": [
          "File: admin/tool/lp/templates/user_evidence_page.mustache -> admin/tool/lp/templates/user_evidence_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     <div data-region=\"user-evidence-summary\">",
          "41:         {{#description}}",
          "42:             <div>",
          "44:             </div>",
          "45:         {{/description}}",
          "46:         <ul class=\"user-evidence-documents\">",
          "",
          "[Removed Lines]",
          "43:                 {{description}}",
          "",
          "[Added Lines]",
          "43:                 {{{description}}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db373d5cb81016cbf5258884d04654b99b58af1",
      "candidate_info": {
        "commit_hash": "4db373d5cb81016cbf5258884d04654b99b58af1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4db373d5cb81016cbf5258884d04654b99b58af1",
        "files": [
          "admin/tool/lp/amd/src/plandelete.js",
          "admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/output/manage_templates_page.php",
          "admin/tool/lp/classes/output/plans_page.php",
          "admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php",
          "admin/tool/lp/db/access.php",
          "admin/tool/lp/db/install.xml",
          "admin/tool/lp/db/services.php",
          "admin/tool/lp/editplan.php",
          "admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/lib.php",
          "admin/tool/lp/plans.php",
          "admin/tool/lp/settings.php",
          "admin/tool/lp/styles.css",
          "admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "admin/tool/lp/templates/plans_page.mustache",
          "admin/tool/lp/version.php"
        ],
        "message": "MDL-49460 tool_lp: Adding user learning plans\n\nBasic CRUD skeleton with external functions.",
        "before_after_code_files": [
          "admin/tool/lp/amd/src/plandelete.js||admin/tool/lp/amd/src/plandelete.js",
          "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/output/manage_templates_page.php||admin/tool/lp/classes/output/manage_templates_page.php",
          "admin/tool/lp/classes/output/plans_page.php||admin/tool/lp/classes/output/plans_page.php",
          "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php",
          "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php",
          "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php",
          "admin/tool/lp/editplan.php||admin/tool/lp/editplan.php",
          "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/lib.php||admin/tool/lp/lib.php",
          "admin/tool/lp/plans.php||admin/tool/lp/plans.php",
          "admin/tool/lp/settings.php||admin/tool/lp/settings.php",
          "admin/tool/lp/styles.css||admin/tool/lp/styles.css",
          "admin/tool/lp/templates/manage_competency_frameworks_page.mustache||admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "admin/tool/lp/templates/plans_page.mustache||admin/tool/lp/templates/plans_page.mustache",
          "admin/tool/lp/version.php||admin/tool/lp/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/amd/src/plandelete.js||admin/tool/lp/amd/src/plandelete.js": [
          "File: admin/tool/lp/amd/src/plandelete.js -> admin/tool/lp/amd/src/plandelete.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/templates', 'core/ajax', 'core/notification', 'core/str'], function($, templates, ajax, notification, str) {",
          "28:     var planid = 0;",
          "31:     var userid = 0;",
          "39:     var updatePage = function(newhtml, newjs) {",
          "40:         $('[data-region=\"plans\"]').replaceWith(newhtml);",
          "41:         templates.runTemplateJS(newjs);",
          "42:     };",
          "49:     var reloadList = function(context) {",
          "50:         templates.render('tool_lp/plans_page', context)",
          "51:             .done(updatePage)",
          "52:             .fail(notification.exception);",
          "53:     };",
          "58:     var doDelete = function() {",
          "61:         var requests = ajax.call([{",
          "62:             methodname: 'tool_lp_delete_plan',",
          "63:             args: { id: planid }",
          "64:         }, {",
          "65:             methodname: 'tool_lp_data_for_plans_page',",
          "66:             args: { userid: userid }",
          "67:         }]);",
          "68:         requests[1].done(reloadList).fail(notification.exception);",
          "69:     };",
          "75:     var confirmDelete = function(e) {",
          "76:         e.preventDefault();",
          "78:         var id = $(this).attr('data-planid');",
          "79:         planid = id;",
          "81:         var requests = ajax.call([{",
          "82:             methodname: 'tool_lp_read_plan',",
          "83:             args: { id: planid }",
          "84:         }]);",
          "86:         requests[0].done(function(plan) {",
          "87:             var strings = str.get_strings([",
          "88:                 { key: 'confirm', component: 'tool_lp' },",
          "89:                 { key: 'deleteplan', component: 'tool_lp', param: plan.name },",
          "90:                 { key: 'delete', component: 'tool_lp' },",
          "91:                 { key: 'cancel', component: 'tool_lp' }",
          "92:             ]).done(function (strings) {",
          "93:                 notification.confirm(",
          "94:                     strings[0], // Confirm.",
          "95:                     strings[1], // Delete plan X?",
          "96:                     strings[2], // Delete.",
          "97:                     strings[3], // Cancel.",
          "98:                     doDelete",
          "99:                 );",
          "100:             }).fail(notification.exception);",
          "101:         }).fail(notification.exception);",
          "103:     };",
          "106:     return {",
          "112:         init: function() {",
          "114:             $('[data-region=\"plans\"]').on(",
          "115:                 \"click\",",
          "116:                 '[data-action=\"deleteplan\"]',",
          "117:                 confirmDelete",
          "118:             );",
          "119:             userid = $('[data-region=\"plans\"]').attr('data-userid');",
          "120:         }",
          "122:     };",
          "123: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php": [
          "File: admin/tool/lp/classes/api.php -> admin/tool/lp/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: use stdClass;",
          "27: use context_system;",
          "28: use context_course;",
          "29: use coding_exception;",
          "30: use required_capability_exception;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: use context_user;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:         $context = context_system::instance();",
          "823:         $caps = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "",
          "[Removed Lines]",
          "820:     public static function list_templates($filters, $sort, $order, $skip, $limit) {",
          "",
          "[Added Lines]",
          "821:     public static function list_templates($filters = array(), $sort = '', $order = 'ASC', $skip = 0, $limit = 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1023:         }",
          "1024:         return false;",
          "1025:     }",
          "1026: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:     public static function list_user_plans($userid) {",
          "1035:         global $USER;",
          "1037:         $select = 'userid = :userid';",
          "1038:         $params = array('userid' => $userid);",
          "1040:         $context = context_user::instance($userid);",
          "1043:         if ($USER->id != $userid) {",
          "1044:             require_capability('tool/lp:planviewall', $context);",
          "1045:         } else {",
          "1046:             require_capability('tool/lp:planviewown', $context);",
          "1047:         }",
          "1050:         if (!has_any_capability(array('tool/lp:planmanage', 'tool/lp:planmanageown', 'tool/lp:plancreatedraft'), $context)) {",
          "1051:             $select = ' AND status != :statusdraft';",
          "1052:             $params['statusdraft'] = plan::STATUS_DRAFT;",
          "1053:         }",
          "1055:         $plans = new plan();",
          "1056:         return $plans->get_records_select($select, $params, 'timemodified DESC');",
          "1057:     }",
          "1065:     public static function create_plan(stdClass $record) {",
          "1066:         global $USER;",
          "1068:         $context = context_user::instance($record->userid);",
          "1070:         $manageplans = has_capability('tool/lp:planmanage', $context);",
          "1071:         $createdraft = has_capability('tool/lp:plancreatedraft', $context);",
          "1072:         $manageownplan = has_capability('tool/lp:planmanageown', $context);",
          "1075:         if ($USER->id == $record->userid && !$manageplans && !$createdraft && !$manageownplan) {",
          "1077:             throw new required_capability_exception($context, 'tool/lp:plancreatedraft', 'nopermissions', '');",
          "1078:         } else if ($USER->id != $record->userid && !$manageplans) {",
          "1079:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1080:         }",
          "1082:         if (!isset($record->status)) {",
          "1084:             $record->status = plan::STATUS_DRAFT;",
          "1085:         } else if ($record->status !== plan::STATUS_DRAFT && !$manageplans && !$manageownplan) {",
          "1087:             throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1088:         }",
          "1090:         $plan = new plan(0, $record);",
          "1091:         $id = $plan->create();",
          "1092:         return $plan;",
          "1093:     }",
          "1101:     public static function update_plan(stdClass $record) {",
          "1102:         global $USER;",
          "1104:         $context = context_user::instance($record->userid);",
          "1106:         $manageplans = has_capability('tool/lp:planmanage', $context);",
          "1107:         $createdraft = has_capability('tool/lp:plancreatedraft', $context);",
          "1108:         $manageownplan = has_capability('tool/lp:planmanageown', $context);",
          "1111:         if ($USER->id == $record->userid && !$manageplans && !$createdraft && !$manageownplan) {",
          "1112:             throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1113:         } else if (!$manageplans) {",
          "1114:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1115:         }",
          "1117:         $current = new plan($record->id);",
          "1121:         if (!$manageplans && !$manageownplans && $USER->id != $current->get_usermodified()) {",
          "1122:             throw new moodle_exception('erroreditingmodifiedplan', 'tool_lp');",
          "1123:         } else if (!$manageplans && $USER->id != $current->userid) {",
          "1124:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1125:         }",
          "1128:         if ($record->status !== plan::STATUS_DRAFT && !$manageplans && !$manageownplan) {",
          "1129:             required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1130:         }",
          "1132:         $plan = new plan($record->id, $record);",
          "1133:         return $plan->update();",
          "1134:     }",
          "1142:     public static function read_plan($id) {",
          "1143:         global $USER;",
          "1145:         $plan = new plan($id);",
          "1146:         $context = context_user::instance($plan->get_userid());",
          "1148:         if ($USER->id == $plan->get_userid()) {",
          "1149:             require_capability('tool/lp:planviewown', $context);",
          "1150:         } else {",
          "1151:             require_capability('tool/lp:planviewall', $context);",
          "1152:         }",
          "1155:         if ($plan->get_status() === plan::STATUS_DRAFT &&",
          "1156:                 !has_any_capability(array('tool/lp:planmanageown', 'tool/lp:planmanage', 'tool/lp:plancreatedraft'), $context)) {",
          "1158:             throw new required_capability_exception($context, 'tool/lp:plancreatedraft', 'nopermissions', '');",
          "1159:         }",
          "1160:         return $plan;",
          "1161:     }",
          "1169:     public static function delete_plan($id) {",
          "1170:         global $USER;",
          "1172:         $plan = new plan($id);",
          "1174:         $context = context_user::instance($plan->get_userid());",
          "1176:         $manageplans = has_capability('tool/lp:planmanage', $context);",
          "1177:         $createdraft = has_capability('tool/lp:plancreatedraft', $context);",
          "1178:         $manageownplan = has_capability('tool/lp:planmanageown', $context);",
          "1180:         if ($USER->id == $plan->get_userid() && $USER->id != $plan->get_usermodified() &&",
          "1181:                 !$manageplans && !$manageownplan) {",
          "1183:             throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1184:         } else if ($USER->id != $plan->get_userid() && !$manageplans) {",
          "1186:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1187:         }",
          "1189:         return $plan->delete();",
          "1190:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php": [
          "File: admin/tool/lp/classes/external.php -> admin/tool/lp/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:         $params = self::validate_parameters(self::create_template_parameters(),",
          "2116:                                             array(",
          "2117:                                                 'shortname' => $shortname,",
          "",
          "[Removed Lines]",
          "2114:     public static function create_template($shortname, $idnumber, $description, $descriptionformat, $visible) {",
          "",
          "[Added Lines]",
          "2114:     public static function create_template($shortname, $idnumber, $duedate, $description, $descriptionformat, $visible) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2953:         ));",
          "2955:     }",
          "2956: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2962:     protected static function get_plan_external_structure() {",
          "2963:         $id = new external_value(",
          "2964:             PARAM_INT,",
          "2965:             'Database record id'",
          "2966:         );",
          "2967:         $name = new external_value(",
          "2968:             PARAM_TEXT,",
          "2969:             'Name for the learning plan'",
          "2970:         );",
          "2971:         $description = new external_value(",
          "2972:             PARAM_RAW,",
          "2973:             'Description for the template'",
          "2974:         );",
          "2975:         $descriptionformat = new external_format_value(",
          "2976:             'Description format for the template'",
          "2977:         );",
          "2978:         $userid = new external_value(",
          "2979:             PARAM_INT,",
          "2980:             'Learning plan user id'",
          "2981:         );",
          "2982:         $templateid = new external_value(",
          "2983:             PARAM_INT,",
          "2984:             'Learning plan templateid'",
          "2985:         );",
          "2986:         $status = new external_value(",
          "2987:             PARAM_INT,",
          "2988:             'Learning plan status identifier.'",
          "2989:         );",
          "2990:         $duedate = new external_value(",
          "2991:             PARAM_INT,",
          "2992:             'The default due date for instances of this plan.'",
          "2993:         );",
          "2994:         $timecreated = new external_value(",
          "2995:             PARAM_INT,",
          "2996:             'Timestamp this record was created'",
          "2997:         );",
          "2998:         $timemodified = new external_value(",
          "2999:             PARAM_INT,",
          "3000:             'Timestamp this record was modified'",
          "3001:         );",
          "3002:         $usermodified = new external_value(",
          "3003:             PARAM_INT,",
          "3004:             'User who modified this record last'",
          "3005:         );",
          "3008:         $statusname = new external_value(",
          "3009:             PARAM_TEXT,",
          "3010:             'Learning plan status name'",
          "3011:         );",
          "3012:         $usercanupdate = new external_value(",
          "3013:             PARAM_BOOL,",
          "3014:             'Whether the current user can update this plan or not'",
          "3015:         );",
          "3017:         $returns = array(",
          "3018:             'id' => $id,",
          "3019:             'name' => $name,",
          "3020:             'description' => $description,",
          "3021:             'descriptionformat' => $descriptionformat,",
          "3022:             'userid' => $userid,",
          "3023:             'templateid' => $templateid,",
          "3024:             'status' => $status,",
          "3025:             'duedate' => $duedate,",
          "3026:             'timecreated' => $timecreated,",
          "3027:             'timemodified' => $timemodified,",
          "3028:             'usermodified' => $usermodified,",
          "3029:             'statusname' => $statusname,",
          "3030:             'usercanupdate' => $usercanupdate",
          "3031:         );",
          "3033:         return new external_single_structure($returns);",
          "3034:     }",
          "3041:     public static function create_plan_parameters() {",
          "3042:         $name = new external_value(",
          "3043:             PARAM_TEXT,",
          "3044:             'Name for the learning plan template.',",
          "3045:             VALUE_REQUIRED",
          "3046:         );",
          "3047:         $description = new external_value(",
          "3048:             PARAM_RAW,",
          "3049:             'Optional description for the learning plan description',",
          "3050:             VALUE_DEFAULT,",
          "3051:             ''",
          "3052:         );",
          "3053:         $descriptionformat = new external_format_value(",
          "3054:             'Optional description format for the learning plan description',",
          "3055:             VALUE_DEFAULT,",
          "3056:             FORMAT_HTML",
          "3057:         );",
          "3058:         $userid = new external_value(",
          "3059:             PARAM_INT,",
          "3060:             'The learning plan user id',",
          "3061:             VALUE_REQUIRED",
          "3062:         );",
          "3063:         $templateid = new external_value(",
          "3064:             PARAM_INT,",
          "3065:             'Optional template id',",
          "3066:             VALUE_DEFAULT,",
          "3067:             0",
          "3068:         );",
          "3069:         $status = new external_value(",
          "3070:             PARAM_INT,",
          "3071:             'Optional template id',",
          "3072:             VALUE_DEFAULT,",
          "3073:             plan::STATUS_DRAFT",
          "3074:         );",
          "3075:         $duedate = new external_value(",
          "3076:             PARAM_INT,",
          "3077:             'The default due date for this plan',",
          "3078:             VALUE_DEFAULT,",
          "3079:             0",
          "3080:         );",
          "3082:         $params = array(",
          "3083:             'name' => $name,",
          "3084:             'description' => $description,",
          "3085:             'descriptionformat' => $descriptionformat,",
          "3086:             'userid' => $userid,",
          "3087:             'templateid' => $templateid,",
          "3088:             'status' => $status,",
          "3089:             'duedate' => $duedate",
          "3090:         );",
          "3091:         return new external_function_parameters($params);",
          "3092:     }",
          "3098:     public static function create_plan_is_allowed_from_ajax() {",
          "3099:         return true;",
          "3100:     }",
          "3105:     public static function create_plan($name, $description, $descriptionformat, $userid, $templateid, $status, $duedate) {",
          "3106:         $params = self::validate_parameters(self::create_plan_parameters(),",
          "3107:                                             array(",
          "3108:                                                 'name' => $name,",
          "3109:                                                 'description' => $description,",
          "3110:                                                 'descriptionformat' => $descriptionformat,",
          "3111:                                                 'userid' => $userid,",
          "3112:                                                 'templateid' => $templateid,",
          "3113:                                                 'status' => $status,",
          "3114:                                                 'duedate' => $duedate",
          "3115:                                             ));",
          "3116:         $params = (object) $params;",
          "3118:         $result = api::create_plan($params);",
          "3119:         return external_api::clean_returnvalue(self::create_plan_returns(), $result->to_record());",
          "3120:     }",
          "3127:     public static function create_plan_returns() {",
          "3128:         return self::get_plan_external_structure();",
          "3129:     }",
          "3136:     public static function update_plan_parameters() {",
          "3137:         $id = new external_value(",
          "3138:             PARAM_INT,",
          "3139:             'Learning plan id',",
          "3140:             VALUE_REQUIRED",
          "3141:         );",
          "3142:         $name = new external_value(",
          "3143:             PARAM_TEXT,",
          "3144:             'Name for the learning plan template.',",
          "3145:             VALUE_REQUIRED",
          "3146:         );",
          "3147:         $description = new external_value(",
          "3148:             PARAM_RAW,",
          "3149:             'Optional description for the learning plan description',",
          "3150:             VALUE_DEFAULT,",
          "3151:             ''",
          "3152:         );",
          "3153:         $descriptionformat = new external_format_value(",
          "3154:             'Optional description format for the learning plan description',",
          "3155:             VALUE_DEFAULT,",
          "3156:             FORMAT_HTML",
          "3157:         );",
          "3158:         $userid = new external_value(",
          "3159:             PARAM_INT,",
          "3160:             'The learning plan user id',",
          "3161:             VALUE_REQUIRED",
          "3162:         );",
          "3163:         $templateid = new external_value(",
          "3164:             PARAM_INT,",
          "3165:             'Optional template id',",
          "3166:             VALUE_DEFAULT,",
          "3167:             0",
          "3168:         );",
          "3169:         $status = new external_value(",
          "3170:             PARAM_INT,",
          "3171:             'Optional template id',",
          "3172:             VALUE_DEFAULT,",
          "3173:             plan::STATUS_DRAFT",
          "3174:         );",
          "3175:         $duedate = new external_value(",
          "3176:             PARAM_INT,",
          "3177:             'The default due date for this plan',",
          "3178:             VALUE_DEFAULT,",
          "3179:             0",
          "3180:         );",
          "3182:         $params = array(",
          "3183:             'id' => $id,",
          "3184:             'name' => $name,",
          "3185:             'description' => $description,",
          "3186:             'descriptionformat' => $descriptionformat,",
          "3187:             'userid' => $userid,",
          "3188:             'templateid' => $templateid,",
          "3189:             'status' => $status,",
          "3190:             'duedate' => $duedate",
          "3191:         );",
          "3192:         return new external_function_parameters($params);",
          "3193:     }",
          "3199:     public static function update_plan_is_allowed_from_ajax() {",
          "3200:         return true;",
          "3201:     }",
          "3206:     public static function update_plan($id, $name, $description, $descriptionformat, $userid, $templateid, $status, $duedate) {",
          "3207:         $params = self::validate_parameters(self::update_plan_parameters(),",
          "3208:                                             array(",
          "3209:                                                 'id' => $id,",
          "3210:                                                 'name' => $name,",
          "3211:                                                 'description' => $description,",
          "3212:                                                 'descriptionformat' => $descriptionformat,",
          "3213:                                                 'userid' => $userid,",
          "3214:                                                 'templateid' => $templateid,",
          "3215:                                                 'status' => $status,",
          "3216:                                                 'duedate' => $duedate",
          "3217:                                             ));",
          "3218:         $params = (object) $params;",
          "3220:         $result = api::update_plan($params);",
          "3221:         return external_api::clean_returnvalue(self::update_plan_returns(), $result->to_record());",
          "3222:     }",
          "3229:     public static function update_plan_returns() {",
          "3230:         return self::get_plan_external_structure();",
          "3231:     }",
          "3238:     public static function read_plan_parameters() {",
          "3239:         $id = new external_value(",
          "3240:             PARAM_INT,",
          "3241:             'Data base record id for the plan',",
          "3242:             VALUE_REQUIRED",
          "3243:         );",
          "3244:         return new external_function_parameters(array('id' => $id));",
          "3245:     }",
          "3251:     public static function read_plan_is_allowed_from_ajax() {",
          "3252:         return true;",
          "3253:     }",
          "3261:     public static function read_plan($id) {",
          "3262:         $params = self::validate_parameters(self::read_plan_parameters(),",
          "3263:                                             array(",
          "3264:                                                 'id' => $id,",
          "3265:                                             ));",
          "3267:         $result = api::read_plan($params['id']);",
          "3268:         return external_api::clean_returnvalue(self::read_plan_returns(), $result->to_record());",
          "3269:     }",
          "3276:     public static function read_plan_returns() {",
          "3277:         return self::get_plan_external_structure();",
          "3278:     }",
          "3285:     public static function delete_plan_parameters() {",
          "3286:         $id = new external_value(",
          "3287:             PARAM_INT,",
          "3288:             'Data base record id for the learning plan',",
          "3289:             VALUE_REQUIRED",
          "3290:         );",
          "3292:         $params = array(",
          "3293:             'id' => $id,",
          "3294:         );",
          "3295:         return new external_function_parameters($params);",
          "3296:     }",
          "3302:     public static function delete_plan_is_allowed_from_ajax() {",
          "3303:         return true;",
          "3304:     }",
          "3312:     public static function delete_plan($id) {",
          "3313:         $params = self::validate_parameters(self::delete_plan_parameters(),",
          "3314:                                             array(",
          "3315:                                                 'id' => $id,",
          "3316:                                             ));",
          "3317:         return external_api::clean_returnvalue(self::delete_plan_returns(), api::delete_plan($params['id']));",
          "3318:     }",
          "3325:     public static function delete_plan_returns() {",
          "3326:         return new external_value(PARAM_BOOL, 'True if the delete was successful');",
          "3327:     }",
          "3334:     public static function data_for_plans_page_parameters() {",
          "3335:         $userid = new external_value(",
          "3336:             PARAM_INT,",
          "3337:             'The user id',",
          "3338:             VALUE_REQUIRED",
          "3339:         );",
          "3340:         $params = array('userid' => $userid);",
          "3341:         return new external_function_parameters($params);",
          "3342:     }",
          "3348:     public static function data_for_plans_page_is_allowed_from_ajax() {",
          "3349:         return true;",
          "3350:     }",
          "3357:     public static function data_for_plans_page($userid) {",
          "3358:         global $PAGE;",
          "3360:         $params = self::validate_parameters(self::data_for_plans_page_parameters(),",
          "3361:                                             array(",
          "3362:                                                 'userid' => $userid,",
          "3363:                                             ));",
          "3365:         $renderable = new \\tool_lp\\output\\plans_page($params['userid']);",
          "3366:         $renderer = $PAGE->get_renderer('tool_lp');",
          "3368:         return external_api::clean_returnvalue(self::data_for_plans_page_returns(), $renderable->export_for_template($renderer));",
          "3369:     }",
          "3376:     public static function data_for_plans_page_returns() {",
          "3377:         return new external_single_structure(array (",
          "3378:             'userid' => new external_value(PARAM_INT, 'The learning plan user id'),",
          "3379:             'plans' => new external_multiple_structure(",
          "3380:                 self::get_plan_external_structure()",
          "3381:             ),",
          "3382:             'pluginbaseurl' => new external_value(PARAM_LOCALURL, 'Url to the tool_lp plugin folder on this Moodle site'),",
          "3383:             'navigation' => new external_multiple_structure(",
          "3384:                 new external_value(PARAM_RAW, 'HTML for a navigation item that should be on this page')",
          "3385:             )",
          "3386:         ));",
          "3387:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\form;",
          "27: defined('MOODLE_INTERNAL') || die('Direct access to this script is forbidden.');",
          "29: use moodleform;",
          "30: use tool_lp\\api;",
          "32: require_once($CFG->libdir.'/formslib.php');",
          "41: class plan extends moodleform {",
          "46:     public function definition() {",
          "47:         $mform = $this->_form;",
          "49:         $mform->addElement('hidden', 'id');",
          "50:         $mform->setType('id', PARAM_INT);",
          "51:         $mform->setDefault('id', 0);",
          "53:         $mform->addElement('hidden', 'userid', $this->_customdata['userid']);",
          "54:         $mform->setType('userid', PARAM_INT);",
          "56:         $mform->addElement('text', 'name', get_string('planname', 'tool_lp'));",
          "57:         $mform->setType('name', PARAM_TEXT);",
          "58:         $mform->addRule('name', null, 'required', null, 'client');",
          "59:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "60:         $mform->setType('description', PARAM_TEXT);",
          "62:         $templates = $this->get_template_options();",
          "63:         if ($templates) {",
          "64:             $mform->addElement('select', 'templateid', get_string('plantemplate', 'tool_lp'), $templates);",
          "65:             $mform->addHelpButton('templateid', 'plantemplate', 'tool_lp');",
          "66:         }",
          "68:         $mform->addElement('date_selector', 'duedate', get_string('duedate', 'tool_lp'));",
          "69:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "71:         $this->add_action_buttons(true, get_string('savechanges', 'tool_lp'));",
          "73:         if (!empty($this->_customdata['id'])) {",
          "74:             if (!$this->is_submitted()) {",
          "75:                 $plan = api::read_plan($this->_customdata['id']);",
          "76:                 $record = $plan->to_record();",
          "77:                 $record->description = array('text' => $record->description, 'format' => $record->descriptionformat);",
          "78:                 $this->set_data($record);",
          "79:             }",
          "80:         }",
          "82:     }",
          "89:     protected function get_template_options() {",
          "90:         if (empty($this->_customdata['templates'])) {",
          "91:             return false;",
          "92:         }",
          "94:         $options = array('' => get_string('choosedots'));",
          "95:         foreach ($this->_customdata['templates'] as $template) {",
          "96:             $options[$template->get_id()] = $template->get_shortname();",
          "97:         }",
          "98:         return $options;",
          "99:     }",
          "100: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/manage_templates_page.php||admin/tool/lp/classes/output/manage_templates_page.php": [
          "File: admin/tool/lp/classes/output/manage_templates_page.php -> admin/tool/lp/classes/output/manage_templates_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         $this->templates = api::list_templates(array(), 'sortorder', 'ASC', 0, 0);",
          "64:         $context = context_system::instance();",
          "66:     }",
          "",
          "[Removed Lines]",
          "65:         $this->canmanage = has_capability('tool/lp:learningplanmanage', $context);",
          "",
          "[Added Lines]",
          "65:         $this->canmanage = has_capability('tool/lp:planmanage', $context);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/plans_page.php||admin/tool/lp/classes/output/plans_page.php": [
          "File: admin/tool/lp/classes/output/plans_page.php -> admin/tool/lp/classes/output/plans_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use stdClass;",
          "30: use single_button;",
          "31: use moodle_url;",
          "32: use tool_lp\\api;",
          "33: use tool_lp\\plan;",
          "34: use context_user;",
          "42: class plans_page implements renderable, templatable {",
          "45:     var $navigation = array();",
          "47:     var $plans = array();",
          "49:     var $context = null;",
          "51:     var $userid = null;",
          "58:     public function __construct($userid) {",
          "59:         $this->userid = $userid;",
          "60:         $this->plans = api::list_user_plans($userid);",
          "62:         $this->context = context_user::instance($userid);",
          "64:         $addplan = new single_button(",
          "65:            new moodle_url('/admin/tool/lp/editplan.php', array('userid' => $userid)),",
          "66:            get_string('addnewplan', 'tool_lp')",
          "67:         );",
          "68:         $this->navigation[] = $addplan;",
          "69:     }",
          "77:     public function export_for_template(renderer_base $output) {",
          "78:         global $USER;",
          "80:         $data = new stdClass();",
          "81:         $data->userid = $this->userid;",
          "82:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "85:         if ($this->plans) {",
          "86:             $data->plans = array();",
          "87:             foreach ($this->plans as $plan) {",
          "88:                 $data->plans[] = $plan->to_record();",
          "89:             }",
          "90:         }",
          "92:         $data->navigation = array();",
          "93:         foreach ($this->navigation as $button) {",
          "94:             $data->navigation[] = $output->render($button);",
          "95:         }",
          "97:         return $data;",
          "98:     }",
          "99: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php": [
          "File: admin/tool/lp/classes/output/renderer.php -> admin/tool/lp/classes/output/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: use plugin_renderer_base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use renderable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         return parent::render_from_template('tool_lp/manage_templates_page', $data);",
          "86:     }",
          "88: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     public function render_plans_page(renderable $page) {",
          "90:         $data = $page->export_for_template($this);",
          "91:         return parent::render_from_template('tool_lp/plans_page', $data);",
          "92:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php": [
          "File: admin/tool/lp/classes/persistent.php -> admin/tool/lp/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:         return $instances;",
          "247:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     public function get_records_select($select, $params = null, $sort = '', $fields = '*', $limitfrom = 0, $limitnum = 0) {",
          "261:         global $DB;",
          "263:         if (!$records = $DB->get_records_select($this->get_table_name(), $select, $params, $sort, $fields, $limitfrom, $limitnum)) {",
          "264:             return false;",
          "265:         }",
          "268:         $instances = array();",
          "269:         foreach ($records as $record) {",
          "270:             array_push($instances, new static(0, $record));",
          "271:         }",
          "273:         return $instances;",
          "275:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php": [
          "File: admin/tool/lp/classes/plan.php -> admin/tool/lp/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "27: use context_user;",
          "35: class plan extends persistent {",
          "37:     const STATUS_DRAFT = 0;",
          "38:     const STATUS_ACTIVE = 1;",
          "39:     const STATUS_COMPLETE = 2;",
          "42:     private $name = '';",
          "45:     private $description = '';",
          "48:     private $descriptionformat = FORMAT_MOODLE;",
          "51:     private $userid = null;",
          "54:     private $templateid = null;",
          "57:     private $status = null;",
          "60:     private $duedate = null;",
          "67:     public function get_table_name() {",
          "68:         return 'tool_lp_plan';",
          "69:     }",
          "71:     public function get_name() {",
          "72:         return $this->name;",
          "73:     }",
          "75:     public function set_name($value) {",
          "76:         $this->name = $value;",
          "77:     }",
          "79:     public function get_description() {",
          "80:         return $this->description;",
          "81:     }",
          "83:     public function set_description($value) {",
          "84:         $this->description = $value;",
          "85:     }",
          "87:     public function get_descriptionformat() {",
          "88:         return $this->descriptionformat;",
          "89:     }",
          "91:     public function set_descriptionformat($value) {",
          "92:         $this->descriptionformat = $value;",
          "93:     }",
          "95:     public function get_userid() {",
          "96:         return $this->userid;",
          "97:     }",
          "99:     public function set_userid($value) {",
          "100:         $this->userid = $value;",
          "101:     }",
          "103:     public function get_templateid() {",
          "104:         return $this->templateid;",
          "105:     }",
          "107:     public function set_templateid($value) {",
          "108:         $this->templateid = $value;",
          "109:     }",
          "111:     public function get_status() {",
          "112:         if ($this->status === null) {",
          "113:             return null;",
          "114:         }",
          "116:         return (int)$this->status;",
          "117:     }",
          "119:     public function set_status($value) {",
          "120:         $this->status = $value;",
          "121:     }",
          "123:     public function get_duedate() {",
          "124:         return $this->duedate;",
          "125:     }",
          "127:     public function set_duedate($value) {",
          "128:         $this->duedate = $value;",
          "129:     }",
          "139:     public function get_statusname() {",
          "141:         $status = $this->get_status();",
          "143:         switch ($status) {",
          "144:             case self::STATUS_DRAFT:",
          "145:                 $strname = 'draft';",
          "146:                 break;",
          "147:             case self::STATUS_ACTIVE:",
          "148:                 $strname = 'active';",
          "149:                 break;",
          "150:             case self::STATUS_COMPLETE:",
          "151:                 $strname = 'complete';",
          "152:                 break;",
          "153:             default:",
          "154:                 throw moodle_exception('errorplanstatus', 'tool_lp', '', $status);",
          "155:                 break;",
          "156:         }",
          "158:         return get_string('planstatus' . $strname, 'tool_lp');",
          "159:     }",
          "166:     public function get_usercanupdate() {",
          "167:         global $USER;",
          "170:         if (!$userid = $this->get_userid()) {",
          "171:             return null;",
          "172:         }",
          "174:         $context = context_user::instance($userid);",
          "177:         if (has_capability('tool/lp:planmanage', $context) ||",
          "178:                 has_capability('tool/lp:planmanageown', $context)) {",
          "179:             return true;",
          "181:         }",
          "185:         if ($USER->id == $userid && $this->get_usermodified() == $USER->id && $this->get_status() != plan::STATUS_COMPLETE) {",
          "186:             return true;",
          "187:         }",
          "189:         return false;",
          "190:     }",
          "200:     public function to_record() {",
          "202:         $record = new stdClass();",
          "203:         $record->id = $this->get_id();",
          "204:         $record->name = $this->get_name();",
          "205:         $record->description = $this->get_description();",
          "206:         $record->descriptionformat = $this->get_descriptionformat();",
          "207:         $record->userid = $this->get_userid();",
          "208:         $record->templateid = $this->get_templateid();",
          "209:         $record->status = $this->get_status();",
          "210:         $record->duedate = $this->get_duedate();",
          "211:         $record->timecreated = $this->get_timecreated();",
          "212:         $record->timemodified = $this->get_timemodified();",
          "213:         $record->usermodified = $this->get_usermodified();",
          "216:         $record->statusname = $this->get_statusname();",
          "217:         $record->usercanupdate = $this->get_usercanupdate();",
          "219:         return $record;",
          "220:     }",
          "222:     public function from_record($record) {",
          "223:         if (isset($record->id)) {",
          "224:             $this->set_id($record->id);",
          "225:         }",
          "226:         if (isset($record->name)) {",
          "227:             $this->set_name($record->name);",
          "228:         }",
          "229:         if (isset($record->description)) {",
          "230:             $this->set_description($record->description);",
          "231:         }",
          "232:         if (isset($record->descriptionformat)) {",
          "233:             $this->set_descriptionformat($record->descriptionformat);",
          "234:         }",
          "235:         if (isset($record->userid)) {",
          "236:             $this->set_userid($record->userid);",
          "237:         }",
          "238:         if (isset($record->templateid)) {",
          "239:             $this->set_templateid($record->templateid);",
          "240:         }",
          "241:         if (isset($record->status)) {",
          "242:             $this->set_status($record->status);",
          "243:         }",
          "244:         if (isset($record->duedate)) {",
          "245:             $this->set_duedate($record->duedate);",
          "246:         }",
          "247:         if (isset($record->timecreated)) {",
          "248:             $this->set_timecreated($record->timecreated);",
          "249:         }",
          "250:         if (isset($record->timemodified)) {",
          "251:             $this->set_timemodified($record->timemodified);",
          "252:         }",
          "253:         if (isset($record->usermodified)) {",
          "254:             $this->set_usermodified($record->usermodified);",
          "255:         }",
          "256:     }",
          "257: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php": [
          "File: admin/tool/lp/db/access.php -> admin/tool/lp/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         ),",
          "59:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "60:     ),",
          "63:         'contextlevel' => CONTEXT_SYSTEM,",
          "64:         'archetypes' => array(",
          "66:         ),",
          "68:     ),",
          "70:         'captype' => 'write',",
          "71:         'contextlevel' => CONTEXT_SYSTEM,",
          "72:         'archetypes' => array(",
          "73:         ),",
          "74:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "75:     ),",
          "76:     'tool/lp:coursecompetencyread' => array(",
          "77:         'captype' => 'read',",
          "78:         'contextlevel' => CONTEXT_COURSE,",
          "",
          "[Removed Lines]",
          "61:     'tool/lp:learningplanread' => array(",
          "62:         'captype' => 'read',",
          "65:             'user' => CAP_ALLOW",
          "67:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "69:     'tool/lp:learningplanmanage' => array(",
          "",
          "[Added Lines]",
          "61:     'tool/lp:plancreatedraft' => array(",
          "62:         'captype' => 'write',",
          "66:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "68:     'tool/lp:planmanage' => array(",
          "75:     'tool/lp:planmanageown' => array(",
          "76:         'captype' => 'write',",
          "77:         'contextlevel' => CONTEXT_USER,",
          "78:         'archetypes' => array(",
          "79:         ),",
          "80:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "81:     ),",
          "82:     'tool/lp:planviewall' => array(",
          "83:         'captype' => 'read',",
          "84:         'contextlevel' => CONTEXT_USER,",
          "85:         'archetypes' => array(",
          "86:         ),",
          "87:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "88:     ),",
          "89:     'tool/lp:planviewown' => array(",
          "90:         'captype' => 'read',",
          "91:         'contextlevel' => CONTEXT_USER,",
          "92:         'archetypes' => array(",
          "93:             'user' => CAP_ALLOW",
          "94:         ),",
          "95:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "97:     ),",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php": [
          "File: admin/tool/lp/db/services.php -> admin/tool/lp/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         'type'        => 'write',",
          "309:         'capabilities'=> 'tool/lp:templatemanage',",
          "310:     ),",
          "312: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:     'tool_lp_create_plan' => array(",
          "312:         'classname'   => 'tool_lp\\external',",
          "313:         'methodname'  => 'create_plan',",
          "314:         'classpath'   => '',",
          "315:         'description' => 'Creates a learning plan.',",
          "316:         'type'        => 'write',",
          "317:         'capabilities'=> 'tool/lp:planmanage',",
          "318:     ),",
          "319:     'tool_lp_update_plan' => array(",
          "320:         'classname'   => 'tool_lp\\external',",
          "321:         'methodname'  => 'update_plan',",
          "322:         'classpath'   => '',",
          "323:         'description' => 'Updates a learning plan.',",
          "324:         'type'        => 'write',",
          "325:         'capabilities'=> 'tool/lp:planmanage',",
          "326:     ),",
          "327:     'tool_lp_read_plan' => array(",
          "328:         'classname'   => 'tool_lp\\external',",
          "329:         'methodname'  => 'read_plan',",
          "330:         'classpath'   => '',",
          "331:         'description' => 'Load a learning plan.',",
          "332:         'type'        => 'read',",
          "333:         'capabilities'=> 'tool/lp:planviewown',",
          "334:     ),",
          "335:     'tool_lp_read_plan' => array(",
          "336:         'classname'   => 'tool_lp\\external',",
          "337:         'methodname'  => 'read_plan',",
          "338:         'classpath'   => '',",
          "339:         'description' => 'Load a learning plan.',",
          "340:         'type'        => 'read',",
          "341:         'capabilities'=> 'tool/lp:planviewown',",
          "342:     ),",
          "343:     'tool_lp_delete_plan' => array(",
          "344:         'classname'   => 'tool_lp\\external',",
          "345:         'methodname'  => 'delete_plan',",
          "346:         'classpath'   => '',",
          "347:         'description' => 'Delete a learning plan.',",
          "348:         'type'        => 'write',",
          "349:         'capabilities'=> 'tool/lp:planmanage',",
          "350:     ),",
          "351:     'tool_lp_data_for_plans_page' => array(",
          "352:         'classname'   => 'tool_lp\\external',",
          "353:         'methodname'  => 'data_for_plans_page',",
          "354:         'classpath'   => '',",
          "355:         'description' => 'Load the data for the plans page template',",
          "356:         'type'        => 'read',",
          "357:         'capabilities'=> 'tool/lp:planviewown',",
          "358:     )",
          "",
          "---------------"
        ],
        "admin/tool/lp/editplan.php||admin/tool/lp/editplan.php": [
          "File: admin/tool/lp/editplan.php -> admin/tool/lp/editplan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: $userid = optional_param('userid', false, PARAM_INT);",
          "29: $id = optional_param('id', false, PARAM_INT);",
          "32: if (empty($id)) {",
          "33:     $pagetitle = get_string('addnewplan', 'tool_lp');",
          "34: } else {",
          "35:     $pagetitle = get_string('editplan', 'tool_lp');",
          "36: }",
          "39: if (!$userid) {",
          "40:     $userid = $USER->id;",
          "41: }",
          "43: $context = context_user::instance($userid);",
          "45: $params = array('userid' => $userid);",
          "46: if ($id) {",
          "47:     $params['id'] = $id;",
          "48: }",
          "50: $url = new moodle_url(\"/admin/tool/lp/editplan.php\", $params);",
          "51: $PAGE->set_context($context);",
          "52: $PAGE->set_url($url);",
          "53: $PAGE->set_title($pagetitle);",
          "54: $PAGE->set_pagelayout('admin');",
          "55: $PAGE->set_heading($pagetitle);",
          "56: $output = $PAGE->get_renderer('tool_lp');",
          "58: $manageplans = has_capability('tool/lp:planmanage', $context);",
          "59: $owncapabilities = array('tool/lp:plancreatedraft', 'tool/lp:planmanageown');",
          "60: if ($USER->id === $userid && !has_any_capability($owncapabilities, $context) && !$manageplans) {",
          "61:     throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "62: } else if (!$manageplans) {",
          "63:     throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "64: }",
          "67: $templates = array();",
          "68: if ($manageplans) {",
          "69:     $templates = \\tool_lp\\api::list_templates();",
          "70: }",
          "72: $customdata = array('id' => $id, 'userid' => $userid, 'templates' => $templates);",
          "73: $form = new \\tool_lp\\form\\plan(null, $customdata);",
          "74: if ($form->is_cancelled()) {",
          "75:     redirect(new moodle_url('/admin/tool/lp/plans.php?userid=' . $userid));",
          "76: }",
          "78: echo $output->header();",
          "79: echo $output->heading($pagetitle);",
          "80: $data = $form->get_data();",
          "82: if ($data) {",
          "83:     $data->descriptionformat = $data->description['format'];",
          "84:     $data->description = $data->description['text'];",
          "85:     if (empty($data->id)) {",
          "86:         require_sesskey();",
          "87:         \\tool_lp\\api::create_plan($data);",
          "88:         echo $output->notification(get_string('plancreated', 'tool_lp'), 'notifysuccess');",
          "89:         echo $output->continue_button('/admin/tool/lp/plans.php?userid=' . $userid);",
          "90:     } else {",
          "91:         require_sesskey();",
          "92:         \\tool_lp\\api::update_plan($data);",
          "93:         echo $output->notification(get_string('planupdated', 'tool_lp'), 'notifysuccess');",
          "94:         echo $output->continue_button('/admin/tool/lp/plans.php?userid=' . $userid);",
          "95:     }",
          "96: } else {",
          "97:     $form->display();",
          "98: }",
          "100: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php": [
          "File: admin/tool/lp/lang/en/tool_lp.php -> admin/tool/lp/lang/en/tool_lp.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: $string['pluginname'] = 'Learning Plans';",
          "28: $string['lp:competencymanage'] = 'Manage competency frameworks';",
          "29: $string['lp:competencyread'] = 'View competency frameworks';",
          "30: $string['lp:coursecompetencymanage'] = 'Manage course competencies';",
          "",
          "[Removed Lines]",
          "26: $string['lp:learningplanmanage'] = 'Manage learning plans';",
          "27: $string['lp:learningplanread'] = 'View learning plans';",
          "",
          "[Added Lines]",
          "26: $string['lp:plancreatedraft'] = 'Create draft learning plans';",
          "27: $string['lp:planmanage'] = 'Manage learning plans';",
          "28: $string['lp:planmanage'] = 'Manage learning plans';",
          "29: $string['lp:planmanageown'] = 'Manage own learning plans';",
          "30: $string['lp:planviewall'] = 'View all learning plans';",
          "31: $string['lp:planviewown'] = 'View own learning plans';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: $string['competenciesforframework'] = 'Competencies for {$a}';",
          "34: $string['competencyframeworks'] = 'Competency Frameworks';",
          "35: $string['addnewcompetencyframework'] = 'Add new competency framework';",
          "36: $string['addnewtemplate'] = 'Add new learning plan template';",
          "37: $string['addnewcompetency'] = 'Add new competency';",
          "38: $string['addcompetency'] = 'Add competency';",
          "39: $string['editcompetencyframework'] = 'Edit competency framework';",
          "40: $string['listcompetencyframeworkscaption'] = 'List of competency frameworks';",
          "41: $string['listtemplatescaption'] = 'List of learning plan templates';",
          "42: $string['competencyframeworkname'] = 'Name';",
          "43: $string['actions'] = 'Actions';",
          "44: $string['notemplates'] = 'No learning plan templates have been created yet.';",
          "45: $string['nocompetencyframeworks'] = 'No competency frameworks have been created yet.';",
          "46: $string['nocompetencies'] = 'No competencies have been created in this framework.';",
          "47: $string['nocompetenciesincourse'] = 'No competencies have been linked to this course.';",
          "49: $string['shortname'] = 'Name';",
          "50: $string['savechanges'] = 'Save changes';",
          "51: $string['description'] = 'Description';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: $string['addnewplan'] = 'Add new learning plan';",
          "43: $string['addnewplan'] = 'Add new learning plan';",
          "46: $string['erroreditingmodifiedplan'] = 'You can not edit a learning plan modified by another user if you don\\'t have tool/lp:planmanage or tool/lp:planmanageown capabilities.';",
          "47: $string['errorplanstatus'] = 'Learning plans {$a} status unknown';",
          "50: $string['listplanscaption'] = 'List of learning plans';",
          "53: $string['status'] = 'Status';",
          "58: $string['nouserplans'] = 'No learning plans have been created yet.';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: $string['competencyframeworkupdated'] = 'Competency framework updated.';",
          "59: $string['editcompetencyframework'] = 'Edit competency framework';",
          "60: $string['editthiscompetencyframework'] = 'Edit';",
          "61: $string['deletethiscompetencyframework'] = 'Delete';",
          "62: $string['deletethistemplate'] = 'Delete';",
          "63: $string['hiddenhint'] = '(hidden)';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: $string['editplan'] = 'Edit learning plan';",
          "72: $string['editthisplan'] = 'Edit this learning plan';",
          "73: $string['deletethisplan'] = 'Delete this learning plan';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66: $string['moveframeworkafter'] = 'Move competency framework after {$a}';",
          "67: $string['selectedcompetency'] = 'Selected competency';",
          "68: $string['nocompetencyselected'] = 'No competency selected';",
          "69: $string['search'] = 'Search...';",
          "70: $string['competencycreated'] = 'Competency created';",
          "71: $string['competencyupdated'] = 'Competency updated';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: $string['plancreated'] = 'Learning plan created';",
          "83: $string['planupdated'] = 'Learning plan updated';",
          "84: $string['planname'] = 'Name';",
          "85: $string['plandescription'] = 'Description';",
          "86: $string['planstatusdraft'] = 'Draft';",
          "87: $string['planstatusactive'] = 'Active';",
          "88: $string['planstatuscomplete'] = 'Complete';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "73: $string['editcompetency'] = 'Edit competency';",
          "74: $string['confirm'] = 'Confirm';",
          "75: $string['delete'] = 'Delete';",
          "78: $string['cancel'] = 'Cancel';",
          "79: $string['move'] = 'Move';",
          "80: $string['movecompetency'] = 'Move competency: {$a}';",
          "",
          "[Removed Lines]",
          "76: $string['deletecompetency'] = 'Delete competency? {$a}';",
          "77: $string['deletecompetencyframework'] = 'Delete competency framework? {$a}';",
          "",
          "[Added Lines]",
          "96: $string['deletecompetency'] = 'Delete competency {$a}?';",
          "97: $string['deletecompetencyframework'] = 'Delete competency framework {$a}?';",
          "98: $string['deleteplan'] = 'Delete plan {$a}?';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "90: $string['learningplans'] = 'Learning plans';",
          "91: $string['movecoursecompetency'] = 'Move course competency';",
          "92: $string['movecoursecompetencyafter'] = 'Move course competency after {$a}';",
          "94: $string['templates'] = 'Learning plan templates';",
          "95: $string['templatename'] = 'Name';",
          "96: $string['editthistemplate'] = 'Edit';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: $string['plantemplate'] = 'Select template';",
          "115: $string['plantemplate_help'] = 'A learning plan created from a template will contain a list of competencies that match the template. Updates to the template will be reflected in any plan created from that template.';",
          "",
          "---------------"
        ],
        "admin/tool/lp/lib.php||admin/tool/lp/lib.php": [
          "File: admin/tool/lp/lib.php -> admin/tool/lp/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         $navigation->add_node($settingsnode);",
          "46:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: function tool_lp_myprofile_navigation(core_user\\output\\myprofile\\tree $tree, $user, $iscurrentuser, $course) {",
          "60:     global $USER;",
          "62:     $context = context_user::instance($USER->id);",
          "63:     if (!$iscurrentuser && !has_capability('tool/lp:planviewall', $context)) {",
          "64:         return false;",
          "65:     }",
          "67:     if (!has_capability('tool/lp:planviewown', $context)) {",
          "68:         return false;",
          "69:     }",
          "71:     $url = new moodle_url('/admin/tool/lp/plans.php');",
          "72:     $node = new core_user\\output\\myprofile\\node('miscellaneous', 'learningplans',",
          "73:                                                 get_string('learningplans', 'tool_lp'), null, $url);",
          "74:     $tree->add_node($node);",
          "75: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/plans.php||admin/tool/lp/plans.php": [
          "File: admin/tool/lp/plans.php -> admin/tool/lp/plans.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "27: $userid = optional_param('userid', false, PARAM_INT);",
          "29: require_login(null, false);",
          "30: if (isguestuser()) {",
          "31:     throw new require_login_exception();",
          "32: }",
          "34: $iscurrentuser = $userid == $USER->id;",
          "35: if ($userid === false) {",
          "36:     $userid = $USER->id;",
          "37: }",
          "38: $context = context_user::instance($userid);",
          "41: $user = core_user::get_user($userid);",
          "42: if (!$user || !core_user::is_real_user($userid)) {",
          "43:     throw new moodle_exception('invaliduser', 'error');",
          "44: }",
          "46: if (!has_capability('tool/lp:planviewall', $context)) {",
          "47:     if ($iscurrentuser) {",
          "48:         require_capability('tool/lp:planviewown', $context);",
          "49:     }",
          "50:     throw new required_capability_exception($context, 'tool/lp:planviewall', 'nopermissions', '');",
          "51: }",
          "53: $url = new moodle_url('/admin/tool/lp/plans.php', array('userid' => $userid));",
          "55: $title = get_string('learningplans', 'tool_lp');",
          "56: $PAGE->set_context($context);",
          "57: $PAGE->set_pagelayout('admin');",
          "58: $PAGE->set_url($url);",
          "59: $PAGE->set_title($title);",
          "60: $PAGE->set_heading($title);",
          "62: $output = $PAGE->get_renderer('tool_lp');",
          "63: echo $output->header();",
          "64: echo $output->heading($title);",
          "66: $page = new \\tool_lp\\output\\plans_page($userid);",
          "67: echo $output->render($page);",
          "69: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/settings.php||admin/tool/lp/settings.php": [
          "File: admin/tool/lp/settings.php -> admin/tool/lp/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     'toollplearningplans',",
          "39:     get_string('learningplans', 'tool_lp'),",
          "40:     new moodle_url('/admin/tool/lp/learningplans.php'),",
          "42: );",
          "43: $ADMIN->add('root', $temp, 'toollpcompetencies');",
          "",
          "[Removed Lines]",
          "41:     'tool/lp:learningplanmanage'",
          "",
          "[Added Lines]",
          "41:     'tool/lp:planmanage'",
          "",
          "---------------"
        ],
        "admin/tool/lp/styles.css||admin/tool/lp/styles.css": [
          "File: admin/tool/lp/styles.css -> admin/tool/lp/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li,",
          "2: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul li,",
          "3: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul li {",
          "4:     list-style-type: none;",
          "5: }",
          "8:     margin-left: -20px;",
          "9:     margin-right: 4px;",
          "10: }",
          "11: .dir-rtl.path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img {",
          "12:     margin-right: -20px;",
          "13:     margin-left: 4px;",
          "14: }",
          "16: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul[data-enhance=\"tree\"],",
          "17: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul[data-enhance=\"linktree\"],",
          "18: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul[data-enhance=\"movetree\"] {",
          "19:     border: 1px solid #ccc;",
          "",
          "[Removed Lines]",
          "7: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img {",
          "",
          "[Added Lines]",
          "2: .path-admin-tool-learningplan [data-region=\"plans\"] ul li,",
          "8: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img,",
          "9: .path-admin-tool-learningplan [data-region=\"plans\"] ul li img {",
          "13: .dir-rtl.path-admin-tool-learningplan [data-region=\"plans\"] ul li img,",
          "20: .path-admin-tool-learningplan [data-region=\"plans\"] ul[data-enhance=\"tree\"],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     margin-right: 10px;",
          "27: }",
          "28: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul,",
          "29: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul,",
          "30: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul {",
          "31:     cursor: pointer;",
          "32: }",
          "33: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul [aria-selected=\"true\"],",
          "34: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul [aria-selected=\"true\"],",
          "35: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul [aria-selected=\"true\"] {",
          "36:     background-color: #dfdfdf;",
          "37: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: .path-admin-tool-learningplan [data-region=\"plans\"] ul,",
          "40: .path-admin-tool-learningplan [data-region=\"plans\"] ul [aria-selected=\"true\"],",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/manage_competency_frameworks_page.mustache||admin/tool/lp/templates/manage_competency_frameworks_page.mustache": [
          "File: admin/tool/lp/templates/manage_competency_frameworks_page.mustache -> admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "26:     Data attibutes required for JS:",
          "",
          "[Added Lines]",
          "26:     Data attributes required for JS:",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/plans_page.mustache||admin/tool/lp/templates/plans_page.mustache": [
          "File: admin/tool/lp/templates/plans_page.mustache -> admin/tool/lp/templates/plans_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     User learning plans page.",
          "20:     Classes required for JS:",
          "23:     Data attributes required for JS:",
          "29:     Context variables required for this template:",
          "34: }}",
          "36: <div data-region=\"plans\" data-userid=\"{{userid}}\">",
          "37: <table class=\"generaltable fullwidth\">",
          "38:     <caption>{{#str}}listplanscaption, tool_lp{{/str}}</caption>",
          "39:     <thead>",
          "40:         <tr>",
          "41:             <th scope=\"col\">{{#str}}planname, tool_lp{{/str}}</th>",
          "42:             <th scope=\"col\">{{#str}}status, tool_lp{{/str}}</th>",
          "43:             <th scope=\"col\">{{#str}}actions, tool_lp{{/str}}</th>",
          "44:         </tr>",
          "45:     </thead>",
          "46:     <tbody>",
          "47:         {{#plans}}",
          "48:         <tr>",
          "49:             <td>",
          "50:                 <span><a href=\"{{pluginbaseurl}}/plan.php?id={{id}}\">{{name}}</a></span>",
          "51:             </td>",
          "52:             <td>{{statusname}}</td>",
          "53:             <td>",
          "54:                 {{#usercanupdate}}",
          "55:                 <div style=\"display: inline-block;\">",
          "56:                 <ul class=\"planactions hide\">",
          "57:                     <li>",
          "58:                         <a href=\"{{pluginbaseurl}}/editplan.php?id={{id}}\">",
          "59:                             {{#pix}}t/edit{{/pix}}{{#str}}editthisplan, tool_lp{{/str}}",
          "60:                         </a>",
          "61:                     </li>",
          "62:                     <li>",
          "63:                         <a data-action=\"deleteplan\" data-planid=\"{{id}}\" href=\"#\">",
          "64:                             {{#pix}}t/delete{{/pix}}{{#str}}deletethisplan, tool_lp{{/str}}",
          "65:                         </a>",
          "66:                     </li>",
          "67:                 </ul>",
          "68:                 {{/usercanupdate}}",
          "69:             </div>",
          "70:             </td>",
          "71:         </tr>",
          "72:         {{/plans}}",
          "73:     </tbody>",
          "74: </table>",
          "76: {{^plans}}",
          "77: <p class=\"alert-info\">",
          "78:     {{#str}}nouserplans, tool_lp{{/str}}",
          "79: </p>",
          "80: {{/plans}}",
          "82: <div class=\"btn-group pull-right\">",
          "83: {{#navigation}}",
          "84: {{{.}}}",
          "85: {{/navigation}}",
          "86: </div>",
          "88: {{#js}}",
          "90: require(['tool_lp/plandelete',",
          "91:          'core/menu'],",
          "92:         function(deleteMod, menu) {",
          "94:     deleteMod.init();",
          "96:     menu.menu('{{#str}}edit{{/str}}', '.planactions');",
          "97: });",
          "99: {{/js}}",
          "101: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/version.php||admin/tool/lp/version.php": [
          "File: admin/tool/lp/version.php -> admin/tool/lp/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400; // Requires this Moodle version.",
          "29: $plugin->component = 'tool_lp'; // Full name of the plugin (used for diagnostics).",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015021623; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015021633; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cc4e2f72515f70928595f4ce8e17e5cb2c48a60",
      "candidate_info": {
        "commit_hash": "3cc4e2f72515f70928595f4ce8e17e5cb2c48a60",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3cc4e2f72515f70928595f4ce8e17e5cb2c48a60",
        "files": [
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php",
          "competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php",
          "competency/classes/persistent.php",
          "competency/classes/plan.php",
          "competency/classes/template.php",
          "competency/classes/user_evidence.php"
        ],
        "message": "MDL-57596 forms: CLEANHTML in persistent forms\n\nAdd special handling for text fields with the CLEANHTML type. This should\nbe used when students and teachers can edit the same field (you can't trust those students).\n\nApplies cleaning on submitted data, and on data stored in the DB before it is put back in an editing form.",
        "before_after_code_files": [
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php||competency/classes/competency.php",
          "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php||competency/classes/external/exporter.php",
          "competency/classes/persistent.php||competency/classes/persistent.php",
          "competency/classes/plan.php||competency/classes/plan.php",
          "competency/classes/template.php||competency/classes/template.php",
          "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         $mform->addElement('editor', 'description',",
          "101:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "104:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "105:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "102:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "102:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         $mform->addElement('editor', 'description',",
          "64:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "67:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "68:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "65:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "65:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php": [
          "File: admin/tool/lp/classes/form/persistent.php -> admin/tool/lp/classes/form/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         $data = $this->get_persistent()->to_record();",
          "185:         $class = static::$persistentclass;",
          "186:         $properties = $class::get_formatted_properties();",
          "188:         foreach ($data as $field => $value) {",
          "190:             if (isset($properties[$field])) {",
          "191:                 $data->$field = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         $allproperties = $class::properties_definition();",
          "191:             if (isset($allproperties[$field]['type'])) {",
          "192:                 $data->$field = clean_param($data->$field, $allproperties[$field]['type']);",
          "193:             }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "61:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "64:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
          "65:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "",
          "[Removed Lines]",
          "62:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "62:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addElement('editor', 'description',",
          "60:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "62:         $mform->addElement('selectyesno', 'visible',",
          "63:                            get_string('visible', 'tool_lp'));",
          "64:         $mform->addElement('date_time_selector',",
          "",
          "[Removed Lines]",
          "61:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "61:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "56:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "59:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array('size' => '60'), array('usefilepicker' => false));",
          "60:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
          "",
          "[Removed Lines]",
          "57:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "57:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "competency/classes/competency.php||competency/classes/competency.php": [
          "File: competency/classes/competency.php -> competency/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             ),",
          "69:             'description' => array(",
          "70:                 'default' => '',",
          "72:             ),",
          "73:             'descriptionformat' => array(",
          "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "71:                 'type' => PARAM_RAW",
          "",
          "[Added Lines]",
          "71:                 'type' => PARAM_CLEANHTML",
          "",
          "---------------"
        ],
        "competency/classes/competency_framework.php||competency/classes/competency_framework.php": [
          "File: competency/classes/competency_framework.php -> competency/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 'type' => PARAM_RAW",
          "91:             ),",
          "92:             'description' => array(",
          "94:                 'default' => ''",
          "95:             ),",
          "96:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "93:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "93:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/external/exporter.php||competency/classes/external/exporter.php": [
          "File: competency/classes/external/exporter.php -> competency/classes/external/exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     final protected static function get_format_field($definitions, $property) {",
          "336:         $formatproperty = $property . 'format';",
          "338:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
          "339:             return $formatproperty;",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
          "",
          "[Added Lines]",
          "337:         if (($definitions[$property]['type'] == PARAM_RAW || $definitions[$property]['type'] == PARAM_CLEANHTML)",
          "338:                 && isset($definitions[$formatproperty])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:                 $thisvalue = self::get_read_structure_from_properties($type, $proprequired, $propdefault);",
          "453:             } else {",
          "456:                     $type = PARAM_RAW;",
          "457:                 }",
          "",
          "[Removed Lines]",
          "454:                 if ($definition['type'] == PARAM_TEXT) {",
          "",
          "[Added Lines]",
          "455:                 if ($definition['type'] == PARAM_TEXT || $definition['type'] == PARAM_CLEANHTML) {",
          "",
          "---------------"
        ],
        "competency/classes/persistent.php||competency/classes/persistent.php": [
          "File: competency/classes/persistent.php -> competency/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         $formatted = array();",
          "249:         foreach ($properties as $property => $definition) {",
          "250:             $propertyformat = $property . 'format';",
          "252:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
          "253:                 $formatted[$property] = $propertyformat;",
          "254:             }",
          "",
          "[Removed Lines]",
          "251:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
          "",
          "[Added Lines]",
          "251:             if (($definition['type'] == PARAM_RAW || $definition['type'] == PARAM_CLEANHTML)",
          "252:                     && array_key_exists($propertyformat, $properties)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:                         $value = 0;",
          "618:                     }",
          "619:                     validate_param($value, $definition['type'], $definition['null']);",
          "620:                 } catch (invalid_parameter_exception $e) {",
          "621:                     $errors[$property] = static::get_property_error_message($property);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:                     if ($definition['type'] === PARAM_CLEANHTML) {",
          "622:                         $value = clean_param($value, PARAM_CLEANHTML);",
          "623:                     }",
          "",
          "---------------"
        ],
        "competency/classes/plan.php||competency/classes/plan.php": [
          "File: competency/classes/plan.php -> competency/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 'type' => PARAM_TEXT,",
          "72:             ),",
          "73:             'description' => array(",
          "75:                 'default' => ''",
          "76:             ),",
          "77:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "74:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "74:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/template.php||competency/classes/template.php": [
          "File: competency/classes/template.php -> competency/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             ),",
          "54:             'description' => array(",
          "55:                 'default' => '',",
          "57:             ),",
          "58:             'descriptionformat' => array(",
          "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/user_evidence.php||competency/classes/user_evidence.php": [
          "File: competency/classes/user_evidence.php -> competency/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a76cd2ca1c5216d67c9bf7c844020c3b59b1fd7",
      "candidate_info": {
        "commit_hash": "0a76cd2ca1c5216d67c9bf7c844020c3b59b1fd7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0a76cd2ca1c5216d67c9bf7c844020c3b59b1fd7",
        "files": [
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php",
          "competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php",
          "competency/classes/persistent.php",
          "competency/classes/plan.php",
          "competency/classes/template.php",
          "competency/classes/user_evidence.php"
        ],
        "message": "MDL-57596 forms: CLEANHTML in persistent forms\n\nAdd special handling for text fields with the CLEANHTML type. This should\nbe used when students and teachers can edit the same field (you can't trust those students).\n\nApplies cleaning on submitted data, and on data stored in the DB before it is put back in an editing form.",
        "before_after_code_files": [
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php||competency/classes/competency.php",
          "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php||competency/classes/external/exporter.php",
          "competency/classes/persistent.php||competency/classes/persistent.php",
          "competency/classes/plan.php||competency/classes/plan.php",
          "competency/classes/template.php||competency/classes/template.php",
          "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         $mform->addElement('editor', 'description',",
          "101:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "104:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "105:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "102:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "102:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         $mform->addElement('editor', 'description',",
          "64:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "67:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "68:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "65:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "65:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php": [
          "File: admin/tool/lp/classes/form/persistent.php -> admin/tool/lp/classes/form/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         $data = $this->get_persistent()->to_record();",
          "185:         $class = static::$persistentclass;",
          "186:         $properties = $class::get_formatted_properties();",
          "188:         foreach ($data as $field => $value) {",
          "190:             if (isset($properties[$field])) {",
          "191:                 $data->$field = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         $allproperties = $class::properties_definition();",
          "191:             if (isset($allproperties[$field]['type'])) {",
          "192:                 $data->$field = clean_param($data->$field, $allproperties[$field]['type']);",
          "193:             }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "61:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "64:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
          "65:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "",
          "[Removed Lines]",
          "62:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "62:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addElement('editor', 'description',",
          "60:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "62:         $mform->addElement('selectyesno', 'visible',",
          "63:                            get_string('visible', 'tool_lp'));",
          "64:         $mform->addElement('date_time_selector',",
          "",
          "[Removed Lines]",
          "61:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "61:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "56:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "59:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array(), array('usefilepicker' => false));",
          "60:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
          "",
          "[Removed Lines]",
          "57:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "57:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "competency/classes/competency.php||competency/classes/competency.php": [
          "File: competency/classes/competency.php -> competency/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             ),",
          "69:             'description' => array(",
          "70:                 'default' => '',",
          "72:             ),",
          "73:             'descriptionformat' => array(",
          "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "71:                 'type' => PARAM_RAW",
          "",
          "[Added Lines]",
          "71:                 'type' => PARAM_CLEANHTML",
          "",
          "---------------"
        ],
        "competency/classes/competency_framework.php||competency/classes/competency_framework.php": [
          "File: competency/classes/competency_framework.php -> competency/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 'type' => PARAM_RAW",
          "91:             ),",
          "92:             'description' => array(",
          "94:                 'default' => ''",
          "95:             ),",
          "96:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "93:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "93:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/external/exporter.php||competency/classes/external/exporter.php": [
          "File: competency/classes/external/exporter.php -> competency/classes/external/exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     final protected static function get_format_field($definitions, $property) {",
          "336:         $formatproperty = $property . 'format';",
          "338:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
          "339:             return $formatproperty;",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
          "",
          "[Added Lines]",
          "337:         if (($definitions[$property]['type'] == PARAM_RAW || $definitions[$property]['type'] == PARAM_CLEANHTML)",
          "338:                 && isset($definitions[$formatproperty])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:                 $thisvalue = self::get_read_structure_from_properties($type, $proprequired, $propdefault);",
          "453:             } else {",
          "456:                     $type = PARAM_RAW;",
          "457:                 }",
          "",
          "[Removed Lines]",
          "454:                 if ($definition['type'] == PARAM_TEXT) {",
          "",
          "[Added Lines]",
          "455:                 if ($definition['type'] == PARAM_TEXT || $definition['type'] == PARAM_CLEANHTML) {",
          "",
          "---------------"
        ],
        "competency/classes/persistent.php||competency/classes/persistent.php": [
          "File: competency/classes/persistent.php -> competency/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         $formatted = array();",
          "249:         foreach ($properties as $property => $definition) {",
          "250:             $propertyformat = $property . 'format';",
          "252:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
          "253:                 $formatted[$property] = $propertyformat;",
          "254:             }",
          "",
          "[Removed Lines]",
          "251:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
          "",
          "[Added Lines]",
          "251:             if (($definition['type'] == PARAM_RAW || $definition['type'] == PARAM_CLEANHTML)",
          "252:                     && array_key_exists($propertyformat, $properties)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:                         $value = 0;",
          "618:                     }",
          "619:                     validate_param($value, $definition['type'], $definition['null']);",
          "620:                 } catch (invalid_parameter_exception $e) {",
          "621:                     $errors[$property] = static::get_property_error_message($property);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:                     if ($definition['type'] === PARAM_CLEANHTML) {",
          "622:                         $value = clean_param($value, PARAM_CLEANHTML);",
          "623:                     }",
          "",
          "---------------"
        ],
        "competency/classes/plan.php||competency/classes/plan.php": [
          "File: competency/classes/plan.php -> competency/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 'type' => PARAM_TEXT,",
          "72:             ),",
          "73:             'description' => array(",
          "75:                 'default' => ''",
          "76:             ),",
          "77:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "74:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "74:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/template.php||competency/classes/template.php": [
          "File: competency/classes/template.php -> competency/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             ),",
          "54:             'description' => array(",
          "55:                 'default' => '',",
          "57:             ),",
          "58:             'descriptionformat' => array(",
          "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/user_evidence.php||competency/classes/user_evidence.php": [
          "File: competency/classes/user_evidence.php -> competency/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ]
      }
    }
  ]
}