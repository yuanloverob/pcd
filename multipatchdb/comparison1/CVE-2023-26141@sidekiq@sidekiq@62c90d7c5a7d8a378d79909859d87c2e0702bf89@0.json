{
  "cve_id": "CVE-2023-26141",
  "cve_desc": "Versions of the package sidekiq before 7.1.3 are vulnerable to Denial of Service (DoS) due to insufficient checks in the dashboard-charts.js file. An attacker can exploit this vulnerability by manipulating the localStorage value which will cause excessive polling requests.",
  "repo": "sidekiq/sidekiq",
  "patch_hash": "62c90d7c5a7d8a378d79909859d87c2e0702bf89",
  "patch_info": {
    "commit_hash": "62c90d7c5a7d8a378d79909859d87c2e0702bf89",
    "repo": "sidekiq/sidekiq",
    "commit_url": "https://github.com/sidekiq/sidekiq/commit/62c90d7c5a7d8a378d79909859d87c2e0702bf89",
    "files": [
      "web/assets/javascripts/application.js",
      "web/assets/javascripts/dashboard-charts.js"
    ],
    "message": "Validate page refresh interval to ensure a minimum amount of delay",
    "before_after_code_files": [
      "web/assets/javascripts/application.js||web/assets/javascripts/application.js",
      "web/assets/javascripts/dashboard-charts.js||web/assets/javascripts/dashboard-charts.js"
    ]
  },
  "patch_diff": {
    "web/assets/javascripts/application.js||web/assets/javascripts/application.js": [
      "File: web/assets/javascripts/application.js -> web/assets/javascripts/application.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "141: function scheduleLivePoll() {",
      "142:   let ti = parseInt(localStorage.sidekiqTimeInterval) || 5000;",
      "143:   livePollTimer = setTimeout(livePollCallback, ti);",
      "144: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:   if (ti < 2000) { ti = 2000 }",
      "",
      "---------------"
    ],
    "web/assets/javascripts/dashboard-charts.js||web/assets/javascripts/dashboard-charts.js": [
      "File: web/assets/javascripts/dashboard-charts.js -> web/assets/javascripts/dashboard-charts.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: class RealtimeChart extends DashboardChart {",
      "58:   constructor(el, options) {",
      "59:     super(el, options);",
      "61:     this.startPolling();",
      "62:     document.addEventListener(\"interval:update\", this.handleUpdate.bind(this));",
      "63:   }",
      "",
      "[Removed Lines]",
      "60:     this.delay = parseInt(localStorage.sidekiqTimeInterval) || 5000;",
      "",
      "[Added Lines]",
      "60:     let d = parseInt(localStorage.sidekiqTimeInterval) || 5000;",
      "61:     if (d < 2000) { d = 2000; }",
      "62:     this.delay = d",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d66ee729ac6712a44031b2aee1e06d403e27805",
      "candidate_info": {
        "commit_hash": "8d66ee729ac6712a44031b2aee1e06d403e27805",
        "repo": "sidekiq/sidekiq",
        "commit_url": "https://github.com/sidekiq/sidekiq/commit/8d66ee729ac6712a44031b2aee1e06d403e27805",
        "files": [
          "web/assets/javascripts/base-charts.js",
          "web/assets/javascripts/dashboard-charts.js",
          "web/assets/javascripts/dashboard.js",
          "web/assets/javascripts/graph.js",
          "web/assets/javascripts/metrics.js",
          "web/assets/stylesheets/application-rtl.css",
          "web/assets/stylesheets/application.css",
          "web/views/dashboard.erb",
          "web/views/metrics.erb",
          "web/views/metrics_for_job.erb"
        ],
        "message": "Rebuild dashboard charts using Chart.js (#5523)\n\n* Use charts.js for dashboard charts\n\n* Fix chart label\n\n* Cleanup\n\n* Revert \"Fix flaky test\"\n\nThis reverts commit 2fa28732770ddd2a8c7ebba6f9021fcacf39b64b.\n\n* Cleanup\n\n* Better experience when no data is available\n\n* Fix metrics tracking for sample app\n\n* Fix metrics charts\n\n* Remove requires\n\n* Dashboard chart fixes & improvements\n\n- Don't animate the tooltip\n- Display a \"sticky\" tooltip for the real-time chart below the chart\n- Increase space between x-axis labels (ticks)\n- Remove the year from the history chart x-axis labels\n- Fix bugs caused by overwriting superclass configs\n\n* Refactoring",
        "before_after_code_files": [
          "web/assets/javascripts/base-charts.js||web/assets/javascripts/base-charts.js",
          "web/assets/javascripts/dashboard-charts.js||web/assets/javascripts/dashboard-charts.js",
          "web/assets/javascripts/dashboard.js||web/assets/javascripts/dashboard.js",
          "web/assets/javascripts/graph.js||web/assets/javascripts/graph.js",
          "web/assets/javascripts/metrics.js||web/assets/javascripts/metrics.js",
          "web/assets/stylesheets/application-rtl.css||web/assets/stylesheets/application-rtl.css",
          "web/assets/stylesheets/application.css||web/assets/stylesheets/application.css",
          "web/views/dashboard.erb||web/views/dashboard.erb",
          "web/views/metrics.erb||web/views/metrics.erb",
          "web/views/metrics_for_job.erb||web/views/metrics_for_job.erb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "web/assets/javascripts/dashboard-charts.js||web/assets/javascripts/dashboard-charts.js"
          ],
          "candidate": [
            "web/assets/javascripts/dashboard-charts.js||web/assets/javascripts/dashboard-charts.js"
          ]
        }
      },
      "candidate_diff": {
        "web/assets/javascripts/base-charts.js||web/assets/javascripts/base-charts.js": [
          "File: web/assets/javascripts/base-charts.js -> web/assets/javascripts/base-charts.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {",
          "2:   Chart.defaults.borderColor = \"#333\";",
          "3:   Chart.defaults.color = \"#aaa\";",
          "4: }",
          "6: class Colors {",
          "7:   constructor() {",
          "8:     this.assignments = {};",
          "9:     this.success = \"#006f68\";",
          "10:     this.failure = \"#af0014\";",
          "11:     this.fallback = \"#999\";",
          "12:     this.primary = \"#537bc4\";",
          "13:     this.available = [",
          "15:       \"#537bc4\",",
          "16:       \"#4dc9f6\",",
          "17:       \"#f67019\",",
          "18:       \"#f53794\",",
          "19:       \"#acc236\",",
          "20:       \"#166a8f\",",
          "21:       \"#00a950\",",
          "22:       \"#58595b\",",
          "23:       \"#8549ba\",",
          "24:       \"#991b1b\",",
          "25:     ];",
          "26:   }",
          "28:   checkOut(assignee) {",
          "29:     const color =",
          "30:       this.assignments[assignee] || this.available.shift() || this.fallback;",
          "31:     this.assignments[assignee] = color;",
          "32:     return color;",
          "33:   }",
          "35:   checkIn(assignee) {",
          "36:     const color = this.assignments[assignee];",
          "37:     delete this.assignments[assignee];",
          "39:     if (color && color != this.fallback) {",
          "40:       this.available.unshift(color);",
          "41:     }",
          "42:   }",
          "43: }",
          "45: class BaseChart {",
          "46:   constructor(el, options) {",
          "47:     this.el = el;",
          "48:     this.options = options;",
          "49:     this.colors = new Colors();",
          "50:   }",
          "52:   init() {",
          "53:     this.chart = new Chart(this.el, {",
          "54:       type: this.options.chartType,",
          "55:       data: { labels: this.options.labels, datasets: this.datasets },",
          "56:       options: this.chartOptions,",
          "57:     });",
          "58:   }",
          "60:   update() {",
          "61:     this.chart.options = this.chartOptions;",
          "62:     this.chart.update();",
          "63:   }",
          "65:   get chartOptions() {",
          "66:     let chartOptions = {",
          "67:       interaction: {",
          "68:         mode: \"x\",",
          "69:       },",
          "70:       scales: {",
          "71:         x: {",
          "72:           ticks: {",
          "73:             autoSkipPadding: 10,",
          "74:           },",
          "75:         },",
          "76:       },",
          "77:       plugins: {",
          "78:         legend: {",
          "79:           display: false,",
          "80:         },",
          "81:         annotation: {",
          "82:           annotations: {},",
          "83:         },",
          "84:         tooltip: {",
          "85:           animation: false,",
          "86:         },",
          "87:       },",
          "88:     };",
          "90:     if (this.options.marks) {",
          "91:       this.options.marks.forEach(([bucket, label], i) => {",
          "92:         chartOptions.plugins.annotation.annotations[`deploy-${i}`] = {",
          "93:           type: \"line\",",
          "94:           xMin: bucket,",
          "95:           xMax: bucket,",
          "96:           borderColor: \"rgba(220, 38, 38, 0.4)\",",
          "97:           borderWidth: 2,",
          "98:         };",
          "99:       });",
          "100:     }",
          "102:     return chartOptions;",
          "103:   }",
          "104: }",
          "",
          "---------------"
        ],
        "web/assets/javascripts/dashboard-charts.js||web/assets/javascripts/dashboard-charts.js": [
          "File: web/assets/javascripts/dashboard-charts.js -> web/assets/javascripts/dashboard-charts.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: class DashboardChart extends BaseChart {",
          "2:   constructor(el, options) {",
          "3:     super(el, { ...options, chartType: \"line\" });",
          "4:     this.init();",
          "5:   }",
          "7:   get data() {",
          "8:     return [this.options.processed, this.options.failed];",
          "9:   }",
          "11:   get datasets() {",
          "12:     return [",
          "13:       {",
          "14:         label: this.options.processedLabel,",
          "15:         data: this.data[0],",
          "16:         borderColor: this.colors.success,",
          "17:         backgroundColor: this.colors.success,",
          "18:         borderWidth: 2,",
          "19:         pointRadius: 2,",
          "20:       },",
          "21:       {",
          "22:         label: this.options.failedLabel,",
          "23:         data: this.data[1],",
          "24:         borderColor: this.colors.failure,",
          "25:         backgroundColor: this.colors.failure,",
          "26:         borderWidth: 2,",
          "27:         pointRadius: 2,",
          "28:       },",
          "29:     ];",
          "30:   }",
          "32:   get chartOptions() {",
          "33:     return {",
          "34:       ...super.chartOptions,",
          "35:       aspectRatio: 4,",
          "36:       scales: {",
          "37:         ...super.chartOptions.scales,",
          "38:         x: {",
          "39:           ...super.chartOptions.scales.x,",
          "40:           ticks: {",
          "41:             ...super.chartOptions.scales.x.ticks,",
          "42:             callback: function (value, index, ticks) {",
          "44:               return this.getLabelForValue(value).split(\"-\").slice(1).join(\"-\");",
          "45:             },",
          "46:           },",
          "47:         },",
          "48:         y: {",
          "49:           ...super.chartOptions.scales.y,",
          "50:           beginAtZero: true,",
          "51:         },",
          "52:       },",
          "53:     };",
          "54:   }",
          "55: }",
          "57: class RealtimeChart extends DashboardChart {",
          "58:   constructor(el, options) {",
          "59:     super(el, options);",
          "60:     this.delay = parseInt(localStorage.sidekiqTimeInterval) || 5000;",
          "61:     this.startPolling();",
          "62:     document.addEventListener(\"interval:update\", this.handleUpdate.bind(this));",
          "63:   }",
          "65:   async startPolling() {",
          "67:     this.stats = await this.fetchStats();",
          "68:     this._interval = setInterval(this.poll.bind(this), this.delay);",
          "69:   }",
          "71:   async poll() {",
          "72:     const stats = await this.fetchStats();",
          "73:     const processed = stats.sidekiq.processed - this.stats.sidekiq.processed;",
          "74:     const failed = stats.sidekiq.failed - this.stats.sidekiq.failed;",
          "76:     this.chart.data.labels.shift();",
          "77:     this.chart.data.datasets[0].data.shift();",
          "78:     this.chart.data.datasets[1].data.shift();",
          "79:     this.chart.data.labels.push(new Date().toUTCString().split(\" \")[4]);",
          "80:     this.chart.data.datasets[0].data.push(processed);",
          "81:     this.chart.data.datasets[1].data.push(failed);",
          "82:     this.chart.update();",
          "84:     updateStatsSummary(this.stats.sidekiq);",
          "85:     updateRedisStats(this.stats.redis);",
          "86:     updateFooterUTCTime(this.stats.server_utc_time);",
          "87:     pulseBeacon();",
          "89:     this.stats = stats;",
          "90:   }",
          "92:   async fetchStats() {",
          "93:     const response = await fetch(this.options.updateUrl);",
          "94:     return await response.json();",
          "95:   }",
          "97:   handleUpdate(e) {",
          "98:     this.delay = parseInt(e.detail);",
          "99:     clearInterval(this._interval);",
          "100:     this.startPolling();",
          "101:   }",
          "103:   registerLegend(el) {",
          "104:     this.legend = el;",
          "105:   }",
          "107:   renderLegend(dp) {",
          "108:     this.legend.innerHTML = `",
          "109:       <span>${dp[0].label}</span>",
          "110:       <span>",
          "111:         <span class=\"swatch\" style=\"background-color: ${dp[0].dataset.borderColor};\"></span>",
          "112:         <span>${dp[0].dataset.label}: ${dp[0].formattedValue}</span>",
          "113:       </span>",
          "114:       <span>",
          "115:         <span class=\"swatch\" style=\"background-color: ${dp[1].dataset.borderColor};\"></span>",
          "116:         <span>${dp[1].dataset.label}: ${dp[1].formattedValue}</span>",
          "117:       </span>",
          "118:     `;",
          "119:   }",
          "121:   get chartOptions() {",
          "122:     return {",
          "123:       ...super.chartOptions,",
          "124:       scales: {",
          "125:         ...super.chartOptions.scales,",
          "126:         x: {",
          "127:           ...super.chartOptions.scales.x,",
          "128:           display: false,",
          "129:         },",
          "130:       },",
          "131:       plugins: {",
          "132:         ...super.chartOptions.plugins,",
          "133:         tooltip: {",
          "134:           ...super.chartOptions.plugins.tooltip,",
          "135:           enabled: false,",
          "136:           external: (context) => {",
          "137:             const dp = context.tooltip.dataPoints;",
          "138:             if (dp && this.legend) this.renderLegend(dp);",
          "139:           },",
          "140:         },",
          "141:       },",
          "142:     };",
          "143:   }",
          "144: }",
          "",
          "---------------"
        ],
        "web/assets/javascripts/dashboard.js||web/assets/javascripts/dashboard.js": [
          "File: web/assets/javascripts/dashboard.js -> web/assets/javascripts/dashboard.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Sidekiq = {};",
          "3: var nf = new Intl.NumberFormat();",
          "187: var updateStatsSummary = function(data) {",
          "188:   document.getElementById(\"txtProcessed\").innerText = nf.format(data.processed);",
          "",
          "[Removed Lines]",
          "4: var poller;",
          "5: var realtimeGraph = function(updatePath) {",
          "6:   var timeInterval = parseInt(localStorage.sidekiqTimeInterval) || 5000;",
          "7:   var graphElement = document.getElementById(\"realtime\");",
          "9:   var graph = new Rickshaw.Graph( {",
          "10:     element: graphElement,",
          "11:     width: responsiveWidth(),",
          "12:     height: 200,",
          "13:     renderer: 'line',",
          "14:     interpolation: 'linear',",
          "16:     series: new Rickshaw.Series.FixedDuration([{ name: graphElement.dataset.failedLabel, color: '#af0014' }, { name: graphElement.dataset.processedLabel, color: '#006f68' }], undefined, {",
          "17:       timeInterval: timeInterval,",
          "18:       maxDataPoints: 100,",
          "19:     })",
          "20:   });",
          "22:   var y_axis = new Rickshaw.Graph.Axis.Y( {",
          "23:     graph: graph,",
          "24:     tickFormat: Rickshaw.Fixtures.Number.formatKMBT,",
          "25:     ticksTreatment: 'glow'",
          "26:   });",
          "28:   graph.render();",
          "30:   var legend = document.getElementById('realtime-legend');",
          "31:   var Hover = Rickshaw.Class.create(Rickshaw.Graph.HoverDetail, {",
          "32:     render: function(args) {",
          "33:       legend.innerHTML = \"\";",
          "35:       var timestamp = document.createElement('div');",
          "36:       timestamp.className = 'timestamp';",
          "37:       timestamp.innerHTML = args.formattedXValue;",
          "38:       legend.appendChild(timestamp);",
          "40:       args.detail.sort(function(a, b) { return a.order - b.order }).forEach( function(d) {",
          "41:         var line = document.createElement('div');",
          "42:         line.className = 'line';",
          "44:         var swatch = document.createElement('div');",
          "45:         swatch.className = 'swatch';",
          "46:         swatch.style.backgroundColor = d.series.color;",
          "48:         var label = document.createElement('div');",
          "49:         label.className = 'tag';",
          "50:         label.innerHTML = d.name + \": \" + nf.format(Math.floor(d.formattedYValue));",
          "52:         line.appendChild(swatch);",
          "53:         line.appendChild(label);",
          "54:         legend.appendChild(line);",
          "56:         var dot = document.createElement('div');",
          "57:         dot.className = 'dot';",
          "58:         dot.style.top = graph.y(d.value.y0 + d.value.y) + 'px';",
          "59:         dot.style.borderColor = d.series.color;",
          "61:         this.element.appendChild(dot);",
          "62:         dot.className = 'dot active';",
          "63:         this.show();",
          "64:       }, this );",
          "65:     }",
          "66:   });",
          "67:   var hover = new Hover( { graph: graph } );",
          "69:   var i = 0;",
          "70:   poller = setInterval(function() {",
          "71:     var url = document.getElementById(\"history\").getAttribute(\"data-update-url\");",
          "73:     fetch(url).then(response => response.json()).then(data => {",
          "74:       if (i === 0) {",
          "75:         var processed = data.sidekiq.processed;",
          "76:         var failed = data.sidekiq.failed;",
          "77:       } else {",
          "78:         var processed = data.sidekiq.processed - Sidekiq.processed;",
          "79:         var failed = data.sidekiq.failed - Sidekiq.failed;",
          "80:       }",
          "82:       dataPoint = {};",
          "83:       dataPoint[graphElement.dataset.failedLabel] = failed;",
          "84:       dataPoint[graphElement.dataset.processedLabel] = processed;",
          "86:       graph.series.addData(dataPoint);",
          "87:       graph.render();",
          "89:       Sidekiq.processed = data.sidekiq.processed;",
          "90:       Sidekiq.failed = data.sidekiq.failed;",
          "92:       updateStatsSummary(data.sidekiq);",
          "93:       updateRedisStats(data.redis);",
          "94:       updateFooterUTCTime(data.server_utc_time)",
          "96:       pulseBeacon();",
          "97:     });",
          "99:     i++;",
          "100:   }, timeInterval);",
          "101: }",
          "103: var historyGraph = function() {",
          "104:   var h = document.getElementById(\"history\");",
          "105:   processed = createSeries(h.getAttribute(\"data-processed\"));",
          "106:   failed = createSeries(h.getAttribute(\"data-failed\"));",
          "108:   var graphElement = h;",
          "109:   var graph = new Rickshaw.Graph( {",
          "110:     element: graphElement,",
          "111:     width: responsiveWidth(),",
          "112:     height: 200,",
          "113:     renderer: 'line',",
          "114:     interpolation: 'linear',",
          "115:     series: [",
          "116:       {",
          "117:         color: \"#af0014\",",
          "118:         data: failed,",
          "119:         name: graphElement.dataset.failedLabel",
          "120:       }, {",
          "121:         color: \"#006f68\",",
          "122:         data: processed,",
          "123:         name: graphElement.dataset.processedLabel",
          "124:       }",
          "125:     ]",
          "126:   } );",
          "127:   var x_axis = new Rickshaw.Graph.Axis.Time( { graph: graph } );",
          "128:   var y_axis = new Rickshaw.Graph.Axis.Y({",
          "129:     graph: graph,",
          "130:     tickFormat: Rickshaw.Fixtures.Number.formatKMBT,",
          "131:     ticksTreatment: 'glow'",
          "132:   });",
          "134:   graph.render();",
          "136:   var legend = document.getElementById('history-legend');",
          "137:   var Hover = Rickshaw.Class.create(Rickshaw.Graph.HoverDetail, {",
          "138:     render: function(args) {",
          "139:       legend.innerHTML = \"\";",
          "141:       var timestamp = document.createElement('div');",
          "142:       timestamp.className = 'timestamp';",
          "143:       timestamp.innerHTML = args.formattedXValue;",
          "144:       legend.appendChild(timestamp);",
          "146:       args.detail.sort(function(a, b) { return a.order - b.order }).forEach( function(d) {",
          "147:         var line = document.createElement('div');",
          "148:         line.className = 'line';",
          "150:         var swatch = document.createElement('div');",
          "151:         swatch.className = 'swatch';",
          "152:         swatch.style.backgroundColor = d.series.color;",
          "154:         var label = document.createElement('div');",
          "155:         label.className = 'tag';",
          "156:         label.innerHTML = d.name + \": \" + nf.format(Math.floor(d.formattedYValue));",
          "158:         line.appendChild(swatch);",
          "159:         line.appendChild(label);",
          "160:         legend.appendChild(line);",
          "162:         var dot = document.createElement('div');",
          "163:         dot.className = 'dot';",
          "164:         dot.style.top = graph.y(d.value.y0 + d.value.y) + 'px';",
          "165:         dot.style.borderColor = d.series.color;",
          "167:         this.element.appendChild(dot);",
          "168:         dot.className = 'dot active';",
          "169:         this.show();",
          "170:       }, this );",
          "171:     }",
          "172:   });",
          "173:   var hover = new Hover( { graph: graph } );",
          "174: }",
          "176: var createSeries = function(data) {",
          "177:   var obj = JSON.parse(data);",
          "178:   var series = [];",
          "179:   for (var date in obj) {",
          "180:     var value = obj[date];",
          "181:     var point = { x: Date.parse(date)/1000, y: value };",
          "182:     series.unshift(point);",
          "183:   }",
          "184:   return series;",
          "185: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   window.setTimeout(() => { document.getElementById('beacon').classList.remove('pulse'); }, 1000);",
          "212: }",
          "220: var setSliderLabel = function(val) {",
          "221:   document.getElementById('sldr-text').innerText = Math.round(parseFloat(val) / 1000) + ' sec';",
          "222: }",
          "",
          "[Removed Lines]",
          "215: var renderGraphs = function() {",
          "216:   realtimeGraph();",
          "217:   historyGraph();",
          "218: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227: }",
          "229: ready(() => {",
          "232:   var sldr = document.getElementById('sldr');",
          "233:   if (typeof localStorage.sidekiqTimeInterval !== 'undefined') {",
          "234:     sldr.value = localStorage.sidekiqTimeInterval;",
          "",
          "[Removed Lines]",
          "230:   renderGraphs();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:   }",
          "238:   sldr.addEventListener(\"change\", event => {",
          "240:     localStorage.sidekiqTimeInterval = sldr.value;",
          "241:     setSliderLabel(sldr.value);",
          "244:   });",
          "246:   sldr.addEventListener(\"mousemove\", event => {",
          "247:     setSliderLabel(sldr.value);",
          "248:   });",
          "249: });",
          "",
          "[Removed Lines]",
          "239:     clearInterval(poller);",
          "242:     resetGraphs();",
          "243:     renderGraphs();",
          "252: var resetGraphs = function() {",
          "253:   document.getElementById('realtime').innerHTML = '';",
          "254:   document.getElementById('history').innerHTML = '';",
          "255: };",
          "258: var debounce = function(fn, timeout) {",
          "259:   var timeoutID = -1;",
          "260:   return function() {",
          "261:     if (timeoutID > -1) {",
          "262:       window.clearTimeout(timeoutID);",
          "263:     }",
          "264:     timeoutID = window.setTimeout(fn, timeout);",
          "265:   }",
          "266: };",
          "268: window.onresize = function() {",
          "269:   var prevWidth = window.innerWidth;",
          "270:   return debounce(function () {",
          "271:     var currWidth = window.innerWidth;",
          "272:     if (prevWidth !== currWidth) {",
          "273:       prevWidth = currWidth;",
          "274:       clearInterval(poller);",
          "275:       resetGraphs();",
          "276:       renderGraphs();",
          "277:     }",
          "278:   }, 125);",
          "279: }();",
          "",
          "[Added Lines]",
          "51:     sldr.dispatchEvent(",
          "52:       new CustomEvent(\"interval:update\", { bubbles: true, detail: sldr.value })",
          "53:     );",
          "",
          "---------------"
        ],
        "web/assets/javascripts/graph.js||web/assets/javascripts/graph.js": [
          "File: web/assets/javascripts/graph.js -> web/assets/javascripts/graph.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/assets/javascripts/metrics.js||web/assets/javascripts/metrics.js": [
          "File: web/assets/javascripts/metrics.js -> web/assets/javascripts/metrics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   }",
          "42:   }",
          "52:   }",
          "54:   registerSwatch(id) {",
          "55:     const el = document.getElementById(id);",
          "57:     this.swatches[el.value] = el;",
          "59:   }",
          "62:     const el = this.swatches[kls];",
          "66:   }",
          "69:     if (visible) {",
          "71:     } else {",
          "72:       const i = this.chart.data.datasets.findIndex((ds) => ds.label == kls);",
          "74:       this.chart.data.datasets.splice(i, 1);",
          "75:     }",
          "79:   }",
          "84:     return {",
          "85:       label: kls,",
          "",
          "[Removed Lines]",
          "1: if (window.matchMedia('(prefers-color-scheme: dark)').matches) {",
          "2:   Chart.defaults.borderColor = \"#333\"",
          "3:   Chart.defaults.color = \"#aaa\"",
          "4: }",
          "6: class BaseChart {",
          "7:   constructor(id, options) {",
          "8:     this.ctx = document.getElementById(id);",
          "9:     this.options = options",
          "10:     this.fallbackColor = \"#999\";",
          "11:     this.colors = [",
          "13:       \"#537bc4\",",
          "14:       \"#4dc9f6\",",
          "15:       \"#f67019\",",
          "16:       \"#f53794\",",
          "17:       \"#acc236\",",
          "18:       \"#166a8f\",",
          "19:       \"#00a950\",",
          "20:       \"#58595b\",",
          "21:       \"#8549ba\",",
          "22:       \"#991b1b\",",
          "23:     ];",
          "25:     this.chart = new Chart(this.ctx, {",
          "26:       type: this.options.chartType,",
          "27:       data: { labels: this.options.labels, datasets: this.datasets },",
          "28:       options: this.chartOptions,",
          "29:     });",
          "32:   addMarksToChart() {",
          "33:     this.options.marks.forEach(([bucket, label], i) => {",
          "34:       this.chart.options.plugins.annotation.annotations[`deploy-${i}`] = {",
          "35:         type: \"line\",",
          "36:         xMin: bucket,",
          "37:         xMax: bucket,",
          "38:         borderColor: \"rgba(220, 38, 38, 0.4)\",",
          "39:         borderWidth: 2,",
          "40:       };",
          "41:     });",
          "43: }",
          "45: class JobMetricsOverviewChart extends BaseChart {",
          "46:   constructor(id, options) {",
          "47:     super(id, { ...options, chartType: \"line\" });",
          "48:     this.swatches = [];",
          "50:     this.addMarksToChart();",
          "51:     this.chart.update();",
          "56:     el.onchange = () => this.toggle(el.value, el.checked);",
          "58:     this.updateSwatch(el.value);",
          "61:   updateSwatch(kls) {",
          "63:     const ds = this.chart.data.datasets.find((ds) => ds.label == kls);",
          "64:     el.checked = !!ds;",
          "65:     el.style.color = ds ? ds.borderColor : null;",
          "68:   toggle(kls, visible) {",
          "70:       this.chart.data.datasets.push(this.dataset(kls));",
          "73:       this.colors.unshift(this.chart.data.datasets[i].borderColor);",
          "77:     this.updateSwatch(kls);",
          "78:     this.chart.update();",
          "81:   dataset(kls) {",
          "82:     const color = this.colors.shift() || this.fallbackColor;",
          "",
          "[Added Lines]",
          "1: class JobMetricsOverviewChart extends BaseChart {",
          "2:   constructor(el, options) {",
          "3:     super(el, { ...options, chartType: \"line\" });",
          "4:     this.swatches = [];",
          "5:     this.visibleKls = options.visibleKls;",
          "7:     this.init();",
          "10:   get datasets() {",
          "11:     return Object.entries(this.options.series)",
          "12:       .filter(([kls, _]) => this.visibleKls.includes(kls))",
          "13:       .map(([kls, _]) => this.buildDataset(kls));",
          "16:   get metric() {",
          "17:     return this._metric || this.options.initialMetric;",
          "18:   }",
          "20:   set metric(m) {",
          "21:     this._metric = m;",
          "26:     el.addEventListener(\"change\", () => this.toggleKls(el.value, el.checked));",
          "28:     this.updateSwatch(el.value, el.checked);",
          "31:   updateSwatch(kls, checked) {",
          "33:     el.checked = checked;",
          "34:     el.style.color = this.colors.assignments[kls] || \"\";",
          "37:   toggleKls(kls, visible) {",
          "39:       this.chart.data.datasets.push(this.buildDataset(kls));",
          "42:       this.colors.checkIn(kls);",
          "46:     this.updateSwatch(kls, visible);",
          "47:     this.update();",
          "50:   buildDataset(kls) {",
          "51:     const color = this.colors.checkOut(kls);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     };",
          "92:   }",
          "100:   get chartOptions() {",
          "101:     return {",
          "102:       aspectRatio: 4,",
          "103:       scales: {",
          "104:         y: {",
          "105:           beginAtZero: true,",
          "106:           title: {",
          "108:             display: true,",
          "109:           },",
          "110:         },",
          "111:       },",
          "115:       plugins: {",
          "119:         tooltip: {",
          "120:           callbacks: {",
          "121:             title: (items) => `${items[0].label} UTC`,",
          "122:             label: (item) =>",
          "",
          "[Removed Lines]",
          "94:   get datasets() {",
          "95:     return Object.entries(this.options.series)",
          "96:       .filter(([kls, _]) => this.options.visible.includes(kls))",
          "97:       .map(([kls, _]) => this.dataset(kls));",
          "98:   }",
          "107:             text: \"Total execution time (sec)\",",
          "112:       interaction: {",
          "113:         mode: \"x\",",
          "114:       },",
          "116:         legend: {",
          "117:           display: false,",
          "118:         },",
          "",
          "[Added Lines]",
          "65:       ...super.chartOptions,",
          "68:         ...super.chartOptions.scales,",
          "70:           ...super.chartOptions.scales.y,",
          "73:             text: \"Total Execution Time (sec)\",",
          "79:         ...super.chartOptions.plugins,",
          "81:           ...super.chartOptions.plugins.tooltip,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134: }",
          "136: class HistTotalsChart extends BaseChart {",
          "139:   }",
          "141:   get datasets() {",
          "147:   }",
          "149:   get chartOptions() {",
          "150:     return {",
          "151:       aspectRatio: 6,",
          "152:       scales: {",
          "153:         y: {",
          "154:           beginAtZero: true,",
          "155:           title: {",
          "156:             text: \"Jobs\",",
          "",
          "[Removed Lines]",
          "137:   constructor(id, options) {",
          "138:     super(id, { ...options, chartType: \"bar\" });",
          "142:     return [{",
          "143:       data: this.options.series,",
          "144:       backgroundColor: this.colors[0],",
          "145:       borderWidth: 0,",
          "146:     }];",
          "",
          "[Added Lines]",
          "99:   constructor(el, options) {",
          "100:     super(el, { ...options, chartType: \"bar\" });",
          "101:     this.init();",
          "105:     return [",
          "106:       {",
          "107:         data: this.options.series,",
          "108:         backgroundColor: this.colors.primary,",
          "109:         borderWidth: 0,",
          "110:       },",
          "111:     ];",
          "116:       ...super.chartOptions,",
          "119:         ...super.chartOptions.scales,",
          "121:           ...super.chartOptions.scales.y,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:           },",
          "159:         },",
          "160:         x: {",
          "161:           title: {",
          "162:             text: \"Execution Time\",",
          "163:             display: true,",
          "164:           },",
          "165:         },",
          "166:       },",
          "170:       plugins: {",
          "174:         tooltip: {",
          "175:           callbacks: {",
          "176:             label: (item) => `${item.parsed.y} jobs`,",
          "177:           },",
          "",
          "[Removed Lines]",
          "167:       interaction: {",
          "168:         mode: \"x\",",
          "169:       },",
          "171:         legend: {",
          "172:           display: false,",
          "173:         },",
          "",
          "[Added Lines]",
          "129:           ...super.chartOptions.scales.x,",
          "137:         ...super.chartOptions.plugins,",
          "139:           ...super.chartOptions.plugins.tooltip,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182: }",
          "184: class HistBubbleChart extends BaseChart {",
          "190:   }",
          "192:   get datasets() {",
          "",
          "[Removed Lines]",
          "185:   constructor(id, options) {",
          "186:     super(id, { ...options, chartType: \"bubble\" });",
          "188:     this.addMarksToChart();",
          "189:     this.chart.update();",
          "",
          "[Added Lines]",
          "150:   constructor(el, options) {",
          "151:     super(el, { ...options, chartType: \"bubble\" });",
          "152:     this.init();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:     Object.entries(this.options.hist).forEach(([bucket, hist]) => {",
          "197:       hist.forEach((count, histBucket) => {",
          "198:         if (count > 0) {",
          "199:           data.push({",
          "200:             x: bucket,",
          "206:             count: count,",
          "207:           });",
          "",
          "[Removed Lines]",
          "203:             y:",
          "204:               this.options.histIntervals[this.options.histIntervals.length - 1 - histBucket] /",
          "205:               1000,",
          "",
          "[Added Lines]",
          "164:           const index = this.options.histIntervals.length - 1 - histBucket",
          "168:             y: this.options.histIntervals[index] / 1000,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:     });",
          "217:     const multiplier = (maxRadius / maxCount) * 1.5;",
          "218:     data.forEach((entry) => {",
          "219:       entry.r = entry.count * multiplier + minRadius;",
          "220:     });",
          "227:   }",
          "229:   get chartOptions() {",
          "230:     return {",
          "231:       aspectRatio: 3,",
          "232:       scales: {",
          "233:         x: {",
          "234:           type: \"category\",",
          "235:           labels: this.options.labels,",
          "236:         },",
          "237:         y: {",
          "238:           title: {",
          "240:             display: true,",
          "241:           },",
          "242:         },",
          "243:       },",
          "247:       plugins: {",
          "251:         tooltip: {",
          "252:           callbacks: {",
          "253:             title: (items) => `${items[0].raw.x} UTC`,",
          "254:             label: (item) =>",
          "",
          "[Removed Lines]",
          "215:     const maxRadius = this.ctx.offsetWidth / this.options.labels.length;",
          "216:     const minRadius = 1",
          "222:     return [{",
          "223:       data: data,",
          "224:       backgroundColor: \"#537bc4\",",
          "225:       borderColor: \"#537bc4\",",
          "226:     }];",
          "239:             text: \"Execution time (sec)\",",
          "244:       interaction: {",
          "245:         mode: \"x\",",
          "246:       },",
          "248:         legend: {",
          "249:           display: false,",
          "250:         },",
          "",
          "[Added Lines]",
          "178:     const maxRadius = this.el.offsetWidth / this.options.labels.length;",
          "179:     const minRadius = 1;",
          "185:     return [",
          "186:       {",
          "187:         data: data,",
          "188:         backgroundColor: this.colors.primary,",
          "189:         borderColor: this.colors.primary,",
          "190:       },",
          "191:     ];",
          "196:       ...super.chartOptions,",
          "199:         ...super.chartOptions.scales,",
          "201:           ...super.chartOptions.scales.x,",
          "206:           ...super.chartOptions.scales.y,",
          "208:             text: \"Execution Time (sec)\",",
          "214:         ...super.chartOptions.plugins,",
          "216:           ...super.chartOptions.plugins.tooltip,",
          "",
          "---------------"
        ],
        "web/assets/stylesheets/application-rtl.css||web/assets/stylesheets/application-rtl.css": [
          "File: web/assets/stylesheets/application-rtl.css -> web/assets/stylesheets/application-rtl.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   float: left;",
          "103: }",
          "107:   text-align: right;",
          "121: }",
          "",
          "[Removed Lines]",
          "105: #realtime-legend,",
          "106: #history-legend {",
          "108:   float: left;",
          "109: }",
          "110: #realtime-legend .timestamp,",
          "111: #history-legend .timestamp {",
          "112:   text-align: left;",
          "113: }",
          "114: #realtime-legend .line,",
          "115: #history-legend .line {",
          "116:   margin: 0 20px 0 0;",
          "117: }",
          "118: #realtime-legend .swatch,",
          "119: #history-legend .swatch {",
          "120:   margin: 0 0 0 8px;",
          "",
          "[Added Lines]",
          "105: #realtime-legend {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     padding-left: 5px;",
          "166:   }",
          "167: }",
          "",
          "[Removed Lines]",
          "171: .rickshaw_graph .detail .x_label.left {",
          "172:     right: 0",
          "173: }",
          "174: .rickshaw_graph .detail .x_label.right {",
          "175:     left: 0",
          "176: }",
          "177: .rickshaw_graph .detail .item.left {",
          "178:     right: 0",
          "179: }",
          "180: .rickshaw_graph .detail .item.right {",
          "181:     left: 0",
          "182: }",
          "183: .rickshaw_graph .detail .item.left:after {",
          "184:     left: 0;",
          "185:     right: -5px;",
          "186:     border-right-color: unset;",
          "187:     border-left-color: rgba(0, 0, 0, .8);",
          "188:     border-right-width: 0;",
          "189:     border-left-width: unset;",
          "190: }",
          "191: .rickshaw_graph .detail .item.right:after {",
          "192:     right: 0;",
          "193:     left: -5px;",
          "194:     border-left-color: unset;",
          "195:     border-right-color: rgba(0, 0, 0, .8);",
          "196:     border-left-width: 0;",
          "197:     border-right-width: unset;",
          "198: }",
          "199: .rickshaw_graph .detail .dot {",
          "200:     margin-right: -3px;",
          "201:     margin-left: unset;",
          "202: }",
          "203: .rickshaw_graph .x_tick {",
          "204:     border-left: unset;",
          "205:     border-right: 1px dotted rgba(0, 0, 0, .2);",
          "206: }",
          "207: .rickshaw_graph .x_tick .title {",
          "208:     margin-right: 3px;",
          "209:     margin-left: unset;",
          "210: }",
          "211: .rickshaw_annotation_timeline .annotation {",
          "212:     margin-right: -2px;",
          "213:     margin-left: unset;",
          "214: }",
          "215: .rickshaw_graph .annotation_line {",
          "216:     border-right: 2px solid rgba(0, 0, 0, .3);",
          "217:     border-left: unset;",
          "218: }",
          "219: .rickshaw_annotation_timeline .annotation .content {",
          "220:     left: unset;",
          "221:     right: -11px;",
          "222: }",
          "223: .rickshaw_graph .x_tick.glow .title,",
          "224: .rickshaw_graph .y_ticks.glow text {",
          "225:     text-shadow: 1px 1px 0 rgba(255, 255, 255, .1), -1px -1px 0 rgba(255, 255, 255, .1), -1px 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1), 0 -1px 0 rgba(255, 255, 255, .1), -1px 0 0 rgba(255, 255, 255, .1), 1px 0 0 rgba(255, 255, 255, .1), 1px -1px 0 rgba(255, 255, 255, .1)",
          "226: }",
          "227: .rickshaw_graph .x_tick.inverse .title,",
          "228: .rickshaw_graph .y_ticks.inverse text {",
          "229:     text-shadow: 1px 1px 0 rgba(0, 0, 0, .8), -1px -1px 0 rgba(0, 0, 0, .8), -1px 1px 0 rgba(0, 0, 0, .8), 0 1px 0 rgba(0, 0, 0, .8), 0 -1px 0 rgba(0, 0, 0, .8), -1px 0 0 rgba(0, 0, 0, .8), 1px 0 0 rgba(0, 0, 0, .8), 1px -1px 0 rgba(0, 0, 0, .8)",
          "230: }",
          "231: .rickshaw_legend .line {",
          "232:     padding-left: 15px;",
          "233:     padding-right: unset;",
          "234: }",
          "235: .rickshaw_legend .line .swatch {",
          "236:     margin-left: 3px;",
          "237:     margin-right: unset;",
          "238: }",
          "239: .rickshaw_legend .action {",
          "240:     margin-left: .2em;",
          "241:     margin-right: unset;",
          "242: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/assets/stylesheets/application.css||web/assets/stylesheets/application.css": [
          "File: web/assets/stylesheets/application.css -> web/assets/stylesheets/application.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:   background: currentcolor;",
          "418: }",
          "437: }",
          "440:   display: inline-block;",
          "441:   width: 10px;",
          "442:   height: 10px;",
          "448: }",
          "",
          "[Removed Lines]",
          "420: #realtime-legend,",
          "421: #history-legend {",
          "422:   width: 580px;",
          "423:   text-align: left;",
          "424:   margin-top: 5px;",
          "425:   float: right;",
          "426: }",
          "427: #realtime-legend .timestamp,",
          "428: #history-legend .timestamp {",
          "429:   display: inline-block;",
          "430:   width: 220px;",
          "431:   text-align: right;",
          "432: }",
          "433: #realtime-legend .line,",
          "434: #history-legend .line {",
          "435:   display: inline-block;",
          "436:   margin: 0 0 0 20px;",
          "438: #realtime-legend .swatch,",
          "439: #history-legend .swatch {",
          "443:   margin: 0 8px 0 0;",
          "444: }",
          "445: #realtime-legend .tag,",
          "446: #history-legend .tag {",
          "447:   display: inline-block;",
          "450: @media (max-width: 790px) {",
          "451:   #realtime-legend,",
          "452:   #history-legend {",
          "453:     float: none;",
          "454:     width: 100%;",
          "455:     margin-bottom: 20px;",
          "456:   }",
          "457: }",
          "459: @media (max-width: 500px) {",
          "460:   #realtime-legend,",
          "461:   #history-legend {",
          "462:     text-align: center;",
          "463:   }",
          "464: }",
          "",
          "[Added Lines]",
          "420: #realtime-legend {",
          "421:   margin-top: -20px;",
          "422:   padding-left: 30px;",
          "423:   display: flex;",
          "424:   gap: 15px;",
          "425:   align-items: center;",
          "427: #realtime-legend .swatch {",
          "431:   margin: 0 5px;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "621:   }",
          "622: }",
          "865: .code-wrap {",
          "866:   white-space: normal;",
          "867: }",
          "",
          "[Removed Lines]",
          "624: .rickshaw_graph .detail {",
          "625:     pointer-events: none;",
          "626:     position: absolute;",
          "627:     top: 0;",
          "628:     z-index: 2;",
          "629:     background: rgba(0, 0, 0, .9);",
          "630:     bottom: 0;",
          "631:     width: 1px;",
          "632:     transition: opacity .25s linear;",
          "633: }",
          "634: .rickshaw_graph .detail.inactive {",
          "635:     opacity: 0",
          "636: }",
          "637: .rickshaw_graph .detail .item.active {",
          "638:     opacity: 1",
          "639: }",
          "640: .rickshaw_graph .detail .x_label {",
          "641:     font-family: Arial, sans-serif;",
          "642:     border-radius: 3px;",
          "643:     padding: 6px;",
          "644:     opacity: .7;",
          "645:     border: 1px solid #e0e0e0;",
          "646:     font-size: 12px;",
          "647:     position: absolute;",
          "648:     background: #fff;",
          "649:     white-space: nowrap",
          "650: }",
          "651: .rickshaw_graph .detail .x_label.left {",
          "652:     left: 0",
          "653: }",
          "654: .rickshaw_graph .detail .x_label.right {",
          "655:     right: 0",
          "656: }",
          "657: .rickshaw_graph .detail .item {",
          "658:     position: absolute;",
          "659:     z-index: 2;",
          "660:     border-radius: 3px;",
          "661:     padding: .25em;",
          "662:     font-size: 12px;",
          "663:     font-family: Arial, sans-serif;",
          "664:     opacity: 0;",
          "665:     background: rgba(0, 0, 0, .4);",
          "666:     color: #fff;",
          "667:     border: 1px solid rgba(0, 0, 0, .4);",
          "668:     margin-left: 1em;",
          "669:     margin-right: 1em;",
          "670:     margin-top: -1em;",
          "671:     white-space: nowrap",
          "672: }",
          "673: .rickshaw_graph .detail .item.left {",
          "674:     left: 0",
          "675: }",
          "676: .rickshaw_graph .detail .item.right {",
          "677:     right: 0",
          "678: }",
          "679: .rickshaw_graph .detail .item.active {",
          "680:     opacity: 1;",
          "681:     background: rgba(0, 0, 0, .8)",
          "682: }",
          "683: .rickshaw_graph .detail .item:after {",
          "684:     position: absolute;",
          "685:     display: block;",
          "686:     width: 0;",
          "687:     height: 0;",
          "688:     content: \"\";",
          "689:     border: 5px solid transparent",
          "690: }",
          "691: .rickshaw_graph .detail .item.left:after {",
          "692:     top: 1em;",
          "693:     left: -5px;",
          "694:     margin-top: -5px;",
          "695:     border-right-color: rgba(0, 0, 0, .8);",
          "696:     border-left-width: 0",
          "697: }",
          "698: .rickshaw_graph .detail .item.right:after {",
          "699:     top: 1em;",
          "700:     right: -5px;",
          "701:     margin-top: -5px;",
          "702:     border-left-color: rgba(0, 0, 0, .8);",
          "703:     border-right-width: 0",
          "704: }",
          "705: .rickshaw_graph .detail .dot {",
          "706:     width: 4px;",
          "707:     height: 4px;",
          "708:     margin-left: -3px;",
          "709:     margin-top: -3.5px;",
          "710:     border-radius: 5px;",
          "711:     position: absolute;",
          "712:     box-shadow: 0 0 2px rgba(0, 0, 0, .6);",
          "713:     box-sizing: content-box;",
          "714:     background: #fff;",
          "715:     border-width: 2px;",
          "716:     border-style: solid;",
          "717:     display: none;",
          "718:     background-clip: padding-box",
          "719: }",
          "720: .rickshaw_graph .detail .dot.active {",
          "721:     display: block",
          "722: }",
          "723: .rickshaw_graph {",
          "724:     position: relative",
          "725: }",
          "726: .rickshaw_graph svg {",
          "727:     display: block;",
          "728:     overflow: hidden",
          "729: }",
          "730: .rickshaw_graph .x_tick {",
          "731:     position: absolute;",
          "732:     top: 0;",
          "733:     bottom: 0;",
          "734:     width: 0;",
          "735:     border-left: 1px dotted rgba(0, 0, 0, .5);",
          "736:     pointer-events: none",
          "737: }",
          "738: .rickshaw_graph .x_tick .title {",
          "739:     position: absolute;",
          "740:     font-family: Arial, sans-serif;",
          "741:     white-space: nowrap;",
          "742:     margin-left: 3px;",
          "743:     bottom: 1px",
          "744: }",
          "745: .rickshaw_graph .y_axis,",
          "746: .rickshaw_graph .x_axis_d3 {",
          "747:     fill: none",
          "748: }",
          "749: .rickshaw_graph .y_ticks .tick line,",
          "750: .rickshaw_graph .x_ticks_d3 .tick {",
          "751:     stroke: rgba(0, 0, 0, .16);",
          "752:     stroke-width: 2px;",
          "753:     shape-rendering: crisp-edges;",
          "754:     pointer-events: none",
          "755: }",
          "756: .rickshaw_graph .y_grid .tick,",
          "757: .rickshaw_graph .x_grid_d3 .tick {",
          "758:     z-index: -1;",
          "759:     stroke: rgba(0, 0, 0, .2);",
          "760:     stroke-width: 1px;",
          "761:     stroke-dasharray: 1 1",
          "762: }",
          "763: .rickshaw_graph .y_grid .tick[data-y-value=\"0\"] {",
          "764:     stroke-dasharray: 1 0",
          "765: }",
          "766: .rickshaw_graph .y_grid path,",
          "767: .rickshaw_graph .x_grid_d3 path {",
          "768:     fill: none;",
          "769:     stroke: none",
          "770: }",
          "771: .rickshaw_graph .y_ticks path,",
          "772: .rickshaw_graph .x_ticks_d3 path {",
          "773:     fill: none;",
          "774:     stroke: gray",
          "775: }",
          "776: .rickshaw_graph .y_ticks text,",
          "777: .rickshaw_graph .x_ticks_d3 text {",
          "778:     opacity: .7;",
          "779:     font-size: 12px;",
          "780:     pointer-events: none",
          "781: }",
          "782: .rickshaw_graph .x_tick.glow .title,",
          "783: .rickshaw_graph .y_ticks.glow text {",
          "784:     fill: #000;",
          "785:     color: #000;",
          "786:     text-shadow: -1px 1px 0 rgba(255, 255, 255, .1), 1px -1px 0 rgba(255, 255, 255, .1), 1px 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1), 0 -1px 0 rgba(255, 255, 255, .1), 1px 0 0 rgba(255, 255, 255, .1), -1px 0 0 rgba(255, 255, 255, .1), -1px -1px 0 rgba(255, 255, 255, .1)",
          "787: }",
          "788: .rickshaw_graph .x_tick.inverse .title,",
          "789: .rickshaw_graph .y_ticks.inverse text {",
          "790:     fill: #fff;",
          "791:     color: #fff;",
          "792:     text-shadow: -1px 1px 0 rgba(0, 0, 0, .8), 1px -1px 0 rgba(0, 0, 0, .8), 1px 1px 0 rgba(0, 0, 0, .8), 0 1px 0 rgba(0, 0, 0, .8), 0 -1px 0 rgba(0, 0, 0, .8), 1px 0 0 rgba(0, 0, 0, .8), -1px 0 0 rgba(0, 0, 0, .8), -1px -1px 0 rgba(0, 0, 0, .8)",
          "793: }",
          "794: .rickshaw_legend {",
          "795:     font-family: Arial;",
          "796:     color: #fff;",
          "797:     background: #404040;",
          "798:     display: inline-block;",
          "799:     padding: 12px 5px;",
          "800:     border-radius: 2px;",
          "801:     position: relative",
          "802: }",
          "803: .rickshaw_legend:hover {",
          "804:     z-index: 10",
          "805: }",
          "806: .rickshaw_legend .swatch {",
          "807:     width: 10px;",
          "808:     height: 10px;",
          "809:     border: 1px solid rgba(0, 0, 0, .2)",
          "810: }",
          "811: .rickshaw_legend .line {",
          "812:     clear: both;",
          "813:     line-height: 140%;",
          "814:     padding-right: 15px",
          "815: }",
          "816: .rickshaw_legend .line .swatch {",
          "817:     display: inline-block;",
          "818:     margin-right: 3px;",
          "819:     border-radius: 2px",
          "820: }",
          "821: .rickshaw_legend .label {",
          "822:     margin: 0;",
          "823:     white-space: nowrap;",
          "824:     display: inline;",
          "825:     font-size: inherit;",
          "826:     background-color: transparent;",
          "827:     color: inherit;",
          "828:     font-weight: 400;",
          "829:     line-height: normal;",
          "830:     padding: 0;",
          "831:     text-shadow: none",
          "832: }",
          "833: .rickshaw_legend .action:hover {",
          "834:     opacity: .6",
          "835: }",
          "836: .rickshaw_legend .action {",
          "837:     margin-right: .2em;",
          "838:     opacity: .5;",
          "839:     cursor: pointer;",
          "840: }",
          "841: .rickshaw_legend .line.disabled {",
          "842:     opacity: .4",
          "843: }",
          "844: .rickshaw_legend ul {",
          "845:     list-style-type: none;",
          "846:     margin: 0;",
          "847:     padding: 0;",
          "848:     margin: 2px;",
          "849:     cursor: pointer",
          "850: }",
          "851: .rickshaw_legend li {",
          "852:     padding: 0 0 0 2px;",
          "853:     min-width: 80px;",
          "854:     white-space: nowrap",
          "855: }",
          "856: .rickshaw_legend li:hover {",
          "857:     background: rgba(255, 255, 255, .08);",
          "858:     border-radius: 3px",
          "859: }",
          "860: .rickshaw_legend li:active {",
          "861:     background: rgba(255, 255, 255, .2);",
          "862:     border-radius: 3px",
          "863: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web/views/dashboard.erb||web/views/dashboard.erb": [
          "File: web/views/dashboard.erb -> web/views/dashboard.erb",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/dashboard.js\"></script>",
          "3: <div class= \"dashboard clearfix\">",
          "4:   <h3 >",
          "",
          "[Removed Lines]",
          "1: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/graph.js\"></script>",
          "",
          "[Added Lines]",
          "1: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/chart.min.js\"></script>",
          "2: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/base-charts.js\"></script>",
          "3: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/dashboard-charts.js\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: </div>",
          "19: <div class=\"row chart\">",
          "22: </div>",
          "24: <div class=\"row header\">",
          "",
          "[Removed Lines]",
          "20:   <div id=\"realtime\" data-processed-label=\"<%= t('Processed') %>\" data-failed-label=\"<%= t('Failed') %>\"></div>",
          "21:   <div id=\"realtime-legend\"></div>",
          "",
          "[Added Lines]",
          "22:   <canvas id=\"realtime-chart\"></canvas>",
          "23:   <script>",
          "24:     window.realtimeChart = new RealtimeChart(",
          "25:       document.getElementById(\"realtime-chart\"),",
          "26:       <%= Sidekiq.dump_json({",
          "27:         processedLabel: t('Processed'),",
          "28:         failedLabel: t('Failed'),",
          "29:         labels: Array.new(50, \"\"),",
          "30:         processed: Array.new(50),",
          "31:         failed: Array.new(50),",
          "32:         updateUrl: \"#{root_path}stats\",",
          "33:       }) %>",
          "34:     )",
          "35:   </script>",
          "37:   <!-- start with a space in the legend so the height doesn't change when we add content dynamically -->",
          "38:   <div id=\"realtime-legend\">&nbsp;</div>",
          "39:   <script>",
          "40:     realtimeChart.registerLegend(document.getElementById(\"realtime-legend\"))",
          "41:   </script>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:     <a href=\"<%= root_path %>?days=180\" class=\"history-graph <%= \"active\" if params[:days] == \"180\" %>\"><%= t('SixMonths') %></a>",
          "35:   </div>",
          "39: </div>",
          "41: <br/>",
          "",
          "[Removed Lines]",
          "37:   <div id=\"history\" data-processed-label=\"<%= t('Processed') %>\" data-failed-label=\"<%= t('Failed') %>\" data-processed=\"<%= h Sidekiq.dump_json(@processed_history) %>\" data-failed=\"<%= h Sidekiq.dump_json(@failed_history) %>\" data-update-url=\"<%= root_path %>stats\"></div>",
          "38:   <div id=\"history-legend\"></div>",
          "",
          "[Added Lines]",
          "57:   <canvas id=\"history-chart\"></canvas>",
          "58:   <script>",
          "59:     window.historyChart = new DashboardChart(",
          "60:       document.getElementById(\"history-chart\"),",
          "61:       <%= Sidekiq.dump_json({",
          "62:         processedLabel: t('Processed'),",
          "63:         failedLabel: t('Failed'),",
          "64:         processed: @processed_history.to_a.reverse,",
          "65:         failed: @failed_history.to_a.reverse,",
          "66:       }) %>",
          "67:     )",
          "68:   </script>",
          "",
          "---------------"
        ],
        "web/views/metrics.erb||web/views/metrics.erb": [
          "File: web/views/metrics.erb -> web/views/metrics.erb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/chart.min.js\"></script>",
          "2: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/chartjs-plugin-annotation.min.js\"></script>",
          "3: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/metrics.js\"></script>",
          "5: <div class=\"header-container\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/base-charts.js\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   visible_kls = job_results.first(chart_limit).map(&:first)",
          "18: %>",
          "34: <div class=\"table_container\">",
          "35:   <table class=\"table table-bordered table-striped table-hover\">",
          "",
          "[Removed Lines]",
          "20: <canvas id=\"job-metrics-overview-chart\"></canvas>",
          "22: <script>",
          "23:   window.jobMetricsChart = new JobMetricsOverviewChart(",
          "24:     \"job-metrics-overview-chart\",",
          "25:     <%= Sidekiq.dump_json({",
          "26:       series: job_results.map { |(kls, jr)| [kls, jr.dig(\"series\", \"s\")] }.to_h,",
          "27:       marks: @query_result.marks.map { |m| [m.bucket, m.label] },",
          "28:       visible: visible_kls,",
          "29:       labels: @query_result.buckets,",
          "30:     }) %>",
          "31:   )",
          "32: </script>",
          "",
          "[Added Lines]",
          "21: <% if job_results.any? %>",
          "22:   <canvas id=\"job-metrics-overview-chart\"></canvas>",
          "24:   <script>",
          "25:     window.jobMetricsChart = new JobMetricsOverviewChart(",
          "26:       document.getElementById(\"job-metrics-overview-chart\"),",
          "27:       <%= Sidekiq.dump_json({",
          "28:         series: job_results.map { |(kls, jr)| [kls, jr.dig(\"series\", \"s\")] }.to_h,",
          "29:         marks: @query_result.marks.map { |m| [m.bucket, m.label] },",
          "30:         labels: @query_result.buckets,",
          "31:         visibleKls: visible_kls,",
          "32:       }) %>",
          "33:     )",
          "34:   </script>",
          "35: <% end %>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:                   id=\"<%= id %>\"",
          "53:                   class=\"metrics-swatch\"",
          "54:                   value=\"<%= kls %>\"",
          "55:                 />",
          "56:                 <code><a href=\"<%= root_path %>metrics/<%= kls %>\"><%= kls %></a></code>",
          "57:               </div>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:                   <%= visible_kls.include?(kls) ? 'checked' : '' %>",
          "",
          "---------------"
        ],
        "web/views/metrics_for_job.erb||web/views/metrics_for_job.erb": [
          "File: web/views/metrics_for_job.erb -> web/views/metrics_for_job.erb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/chart.min.js\"></script>",
          "2: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/chartjs-plugin-annotation.min.js\"></script>",
          "3: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/metrics.js\"></script>",
          "5: <%",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: <script type=\"text/javascript\" src=\"<%= root_path %>javascripts/base-charts.js\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   <script>",
          "30:     window.histTotalsChart = new HistTotalsChart(",
          "32:       <%= Sidekiq.dump_json({",
          "33:         series: hist_totals,",
          "34:         labels: bucket_labels,",
          "",
          "[Removed Lines]",
          "31:       \"hist-totals-chart\",",
          "",
          "[Added Lines]",
          "32:       document.getElementById(\"hist-totals-chart\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:   <script>",
          "42:     window.histBubbleChart = new HistBubbleChart(",
          "44:       <%= Sidekiq.dump_json({",
          "45:         hist: job_result.hist,",
          "46:         marks: @query_result.marks.map { |m| [m.bucket, m.label] },",
          "",
          "[Removed Lines]",
          "43:       \"hist-bubble-chart\",",
          "",
          "[Added Lines]",
          "44:       document.getElementById(\"hist-bubble-chart\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "101435c5a73095ca62b610d5d6456e7e5dc7f81a",
      "candidate_info": {
        "commit_hash": "101435c5a73095ca62b610d5d6456e7e5dc7f81a",
        "repo": "sidekiq/sidekiq",
        "commit_url": "https://github.com/sidekiq/sidekiq/commit/101435c5a73095ca62b610d5d6456e7e5dc7f81a",
        "files": [
          "web/assets/javascripts/application.js"
        ],
        "message": "Merge 62c90d7",
        "before_after_code_files": [
          "web/assets/javascripts/application.js||web/assets/javascripts/application.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/assets/javascripts/application.js||web/assets/javascripts/application.js"
          ],
          "candidate": [
            "web/assets/javascripts/application.js||web/assets/javascripts/application.js"
          ]
        }
      },
      "candidate_diff": {
        "web/assets/javascripts/application.js||web/assets/javascripts/application.js": [
          "File: web/assets/javascripts/application.js -> web/assets/javascripts/application.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: function scheduleLivePoll() {",
          "124:   let ti = parseInt(localStorage.sidekiqTimeInterval) || 5000;",
          "125:   livePollTimer = setTimeout(livePollCallback, ti);",
          "126: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   if (ti < 2000) { ti = 2000 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}