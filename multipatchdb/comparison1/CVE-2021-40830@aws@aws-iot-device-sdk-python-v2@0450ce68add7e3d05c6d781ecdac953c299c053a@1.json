{
  "cve_id": "CVE-2021-40830",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on Unix systems. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to override the default trust store. This corrects this issue. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.6.1 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on Linux/Unix. Amazon Web Services AWS-C-IO 0.10.4 on Linux/Unix.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
  "patch_info": {
    "commit_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0450ce68add7e3d05c6d781ecdac953c299c053a",
    "files": [
      "setup.py"
    ],
    "message": "Fix Mac SNI check with overridden root CA (#211)",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.22',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a97b97f63267d68b3502bfdba81b7c85941de030",
      "candidate_info": {
        "commit_hash": "a97b97f63267d68b3502bfdba81b7c85941de030",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/a97b97f63267d68b3502bfdba81b7c85941de030",
        "files": [
          "setup.py"
        ],
        "message": "Fix raspberry pi installs (#177)\n\nInstalls from source were broken due to missing files.\nInstalls from source were broken on machines with small amounts of RAM.",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.4',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.8',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c66229b972519ca083517afb1cfa7a6788a4019",
      "candidate_info": {
        "commit_hash": "4c66229b972519ca083517afb1cfa7a6788a4019",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/4c66229b972519ca083517afb1cfa7a6788a4019",
        "files": [
          "NOTICE",
          "README.md",
          "awsiot/__init__.py",
          "awsiot/greengrass_discovery.py",
          "builder.json",
          "docsrc/conf.py",
          "docsrc/index.rst",
          "samples/README.md",
          "samples/fleetprovisioning.py",
          "samples/jobs.py",
          "samples/pubsub.py",
          "samples/shadow.py",
          "setup.py",
          "test/test_samples.py",
          "utils/parse_cert_set_result.py"
        ],
        "message": "Remove support for python 2 (#105)\n\nPython 2's end-of-life date was Jan 1 2020.",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "awsiot/greengrass_discovery.py||awsiot/greengrass_discovery.py",
          "docsrc/conf.py||docsrc/conf.py",
          "samples/fleetprovisioning.py||samples/fleetprovisioning.py",
          "samples/jobs.py||samples/jobs.py",
          "samples/pubsub.py||samples/pubsub.py",
          "samples/shadow.py||samples/shadow.py",
          "setup.py||setup.py",
          "test/test_samples.py||test/test_samples.py",
          "utils/parse_cert_set_result.py||utils/parse_cert_set_result.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: PayloadObj = Dict[str, Any]",
          "20: PayloadToClassFn = Callable[[PayloadObj], T]",
          "23:     \"\"\"",
          "24:     Base class for an AWS MQTT Service Client",
          "25:     \"\"\"",
          "",
          "[Removed Lines]",
          "22: class MqttServiceClient(object):",
          "",
          "[Added Lines]",
          "22: class MqttServiceClient:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:         return future, topic",
          "157:     \"\"\"",
          "158:     Base for input/output classes generated from an AWS service model.",
          "159:     \"\"\"",
          "",
          "[Removed Lines]",
          "156: class ModeledClass(object):",
          "",
          "[Added Lines]",
          "156: class ModeledClass:",
          "",
          "---------------"
        ],
        "awsiot/greengrass_discovery.py||awsiot/greengrass_discovery.py": [
          "File: awsiot/greengrass_discovery.py -> awsiot/greengrass_discovery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from concurrent.futures import Future",
          "8: import json",
          "11:     __slots__ = ['_bootstrap', '_tls_context', '_socket_options', '_region', '_tls_connection_options', '_gg_server_name', 'gg_url', 'port']",
          "13:     def __init__(self, bootstrap, socket_options, tls_context, region):",
          "",
          "[Removed Lines]",
          "10: class DiscoveryClient(object):",
          "",
          "[Added Lines]",
          "10: class DiscoveryClient:",
          "",
          "---------------"
        ],
        "docsrc/conf.py||docsrc/conf.py": [
          "File: docsrc/conf.py -> docsrc/conf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: # -- Project information -----------------------------------------------------",
          "23: copyright = '%s, Amazon Web Services, Inc' % datetime.now().year",
          "24: author = 'Amazon Web Services, Inc'",
          "",
          "[Removed Lines]",
          "22: project = 'AWS IoT Device SDK Python v2'",
          "",
          "[Added Lines]",
          "22: project = 'AWS IoT Device SDK v2 for Python'",
          "",
          "---------------"
        ],
        "samples/fleetprovisioning.py||samples/fleetprovisioning.py": [
          "File: samples/fleetprovisioning.py -> samples/fleetprovisioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, http, io, mqtt",
          "8: from awsiot import iotidentity",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: createCertificateFromCsrResponse = None",
          "64: registerThingResponse = None",
          "67:     def __init__(self):",
          "68:         self.lock = threading.Lock()",
          "69:         self.disconnect_called = False",
          "",
          "[Removed Lines]",
          "66: class LockedData(object):",
          "",
          "[Added Lines]",
          "64: class LockedData:",
          "",
          "---------------"
        ],
        "samples/jobs.py||samples/jobs.py": [
          "File: samples/jobs.py -> samples/jobs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, http, io, mqtt",
          "8: from awsiot import iotjobs",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: jobs_client = None",
          "65: thing_name = \"\"",
          "68:     def __init__(self):",
          "69:         self.lock = threading.Lock()",
          "70:         self.disconnect_called = False",
          "",
          "[Removed Lines]",
          "67: class LockedData(object):",
          "",
          "[Added Lines]",
          "65: class LockedData:",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import io, mqtt, auth, http",
          "8: from awsiot import mqtt_connection_builder",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "samples/shadow.py||samples/shadow.py": [
          "File: samples/shadow.py -> samples/shadow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, io, mqtt, http",
          "8: from awsiot import iotshadow",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: SHADOW_VALUE_DEFAULT = \"off\"",
          "68:     def __init__(self):",
          "69:         self.lock = threading.Lock()",
          "70:         self.shadow_value = None",
          "",
          "[Removed Lines]",
          "67: class LockedData(object):",
          "",
          "[Added Lines]",
          "65: class LockedData:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     while True:",
          "208:         try:",
          "209:             # Read user input",
          "215:             # If user wants to quit sample, then quit.",
          "216:             # Otherwise change the shadow value.",
          "",
          "[Removed Lines]",
          "210:             try:",
          "211:                 new_value = raw_input() # python 2 only",
          "212:             except NameError:",
          "213:                 new_value = input() # python 3 only",
          "",
          "[Added Lines]",
          "208:             new_value = input()",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     description='AWS IoT SDK based on the AWS Common Runtime',",
          "12:     author='AWS SDK Common Runtime Team',",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "15:     install_requires=[",
          "19:     ],",
          "21: )",
          "",
          "[Removed Lines]",
          "14:     packages = ['awsiot'],",
          "16:         'awscrt==0.8.0',",
          "17:         'futures;python_version<\"3.2\"',",
          "18:         'typing;python_version<\"3.5\"',",
          "20:     python_requires='>=2.7',",
          "",
          "[Added Lines]",
          "14:     packages=['awsiot'],",
          "16:         'awscrt==0.9.0',",
          "18:     python_requires='>=3.5',",
          "",
          "---------------"
        ],
        "test/test_samples.py||test/test_samples.py": [
          "File: test/test_samples.py -> test/test_samples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import awsiot",
          "5: import boto3",
          "6: import botocore.exceptions",
          "",
          "[Removed Lines]",
          "3: from __future__ import absolute_import, print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         # boto3 caches the HTTPS connection for the API calls, which appears to the unit test",
          "45:         # framework as a leak, so ignore it, that's not what we're testing here",
          "51:         try:",
          "52:             secrets = boto3.client('secretsmanager')",
          "",
          "[Removed Lines]",
          "46:         try:",
          "47:             warnings.simplefilter('ignore', ResourceWarning)",
          "48:         except NameError:  # Python 2 has no ResourceWarning",
          "49:             pass",
          "",
          "[Added Lines]",
          "45:         warnings.simplefilter('ignore', ResourceWarning)",
          "",
          "---------------"
        ],
        "utils/parse_cert_set_result.py||utils/parse_cert_set_result.py": [
          "File: utils/parse_cert_set_result.py -> utils/parse_cert_set_result.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Example usage:",
          "15: \"\"\"",
          "",
          "[Removed Lines]",
          "13: aws iot create-provisioning-claim --template-name <TemplateName> | python parse_cert_set_result.py --path <PathToOutputtedCerts> --filename <Filename>",
          "",
          "[Added Lines]",
          "13: aws iot create-provisioning-claim --template-name <TemplateName> | python3 parse_cert_set_result.py --path <PathToOutputtedCerts> --filename <Filename>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec86bdea48314e3e8e43e238781f61b7d29e060e",
      "candidate_info": {
        "commit_hash": "ec86bdea48314e3e8e43e238781f61b7d29e060e",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/ec86bdea48314e3e8e43e238781f61b7d29e060e",
        "files": [
          "setup.py"
        ],
        "message": "Updated to v0.9.3 of Python CRT (#117)\n\n* Updated to v0.9.3 of Python CRT",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "14:     packages=['awsiot'],",
          "15:     install_requires=[",
          "17:     ],",
          "18:     python_requires='>=3.5',",
          "19: )",
          "",
          "[Removed Lines]",
          "16:         'awscrt==0.9.0',",
          "",
          "[Added Lines]",
          "16:         'awscrt==0.9.3',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb4eac9d248fa330a294ee314aef6fda59e4904b",
      "candidate_info": {
        "commit_hash": "fb4eac9d248fa330a294ee314aef6fda59e4904b",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fb4eac9d248fa330a294ee314aef6fda59e4904b",
        "files": [
          "awsiot/__init__.py",
          "samples/basic_discovery.py",
          "samples/pubsub.py",
          "setup.py"
        ],
        "message": "adapt to awscrt.mqtt on-message callbacks taking additional args (#156)\n\nAlso update awscrt version",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "samples/basic_discovery.py||samples/basic_discovery.py",
          "samples/pubsub.py||samples/pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:                 except Exception as e:",
          "133:                     future.set_exception(e)",
          "136:                 try:",
          "137:                     payload_obj = json.loads(payload.decode())",
          "138:                     event = payload_to_class_fn(payload_obj)",
          "",
          "[Removed Lines]",
          "135:             def callback_wrapper(topic, payload, **kwargs):",
          "",
          "[Added Lines]",
          "135:             def callback_wrapper(topic, payload, dup, qos, retain, **kwargs):",
          "",
          "---------------"
        ],
        "samples/basic_discovery.py||samples/basic_discovery.py": [
          "File: samples/basic_discovery.py -> samples/basic_discovery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: if args.mode == 'both' or args.mode == 'subscribe':",
          "102:         print('Publish received on topic {}'.format(topic))",
          "103:         print(payload)",
          "",
          "[Removed Lines]",
          "101:     def on_publish(topic, payload, **kwargs):",
          "",
          "[Added Lines]",
          "101:     def on_publish(topic, payload, dup, qos, retain, **kwargs):",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: # Callback when the subscribed topic receives a message",
          "80:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "81:     global received_count",
          "82:     received_count += 1",
          "",
          "[Removed Lines]",
          "79: def on_message_received(topic, payload, **kwargs):",
          "",
          "[Added Lines]",
          "79: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.9.15',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.10.6',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d03f3ff05c2a1ab717ef742bbed6652f2a1e631",
      "candidate_info": {
        "commit_hash": "4d03f3ff05c2a1ab717ef742bbed6652f2a1e631",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/4d03f3ff05c2a1ab717ef742bbed6652f2a1e631",
        "files": [
          "setup.py"
        ],
        "message": "Update CRT to pull in ECS credentials provider fix (#273)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.0',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.2',",
          "",
          "---------------"
        ]
      }
    }
  ]
}