{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4cb1ba1bafe753381c354a404062427642c35412",
      "candidate_info": {
        "commit_hash": "4cb1ba1bafe753381c354a404062427642c35412",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4cb1ba1bafe753381c354a404062427642c35412",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890615 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:                 String label = labelInfo.getPrefix();",
          "339:                 {",
          "341:                 }",
          "342:                 buf.append(label);",
          "343:             }",
          "",
          "[Removed Lines]",
          "338:                 while (label.lastIndexOf(0) != -1)",
          "340:                     label = label.substring(0, label.length()-1);",
          "",
          "[Added Lines]",
          "338:                 int index = label.indexOf(0);",
          "339:                 if (index > -1)",
          "341:                     label = label.substring(0, index);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29018d4c4b33f11888f0252314ce85ffdbcda071",
      "candidate_info": {
        "commit_hash": "29018d4c4b33f11888f0252314ce85ffdbcda071",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/29018d4c4b33f11888f0252314ce85ffdbcda071",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ],
        "message": "PDFBOX-4892: optimize by changing sequence\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889578 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:         final int width = (int) Math.ceil(clipped.getWidth() / subsampling);",
          "199:         final int height = (int) Math.ceil(clipped.getHeight() / subsampling);",
          "200:         final int bitsPerComponent = pdImage.getBitsPerComponent();",
          "203:         if (width <= 0 || height <= 0 || pdImage.getWidth() <= 0 || pdImage.getHeight() <= 0)",
          "204:         {",
          "",
          "[Removed Lines]",
          "201:         final float[] decode = getDecodeArray(pdImage);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:             WritableRaster raster = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, width, height,",
          "221:                     numComponents, new Point(0, 0));",
          "222:             final float[] defaultDecode = pdImage.getColorSpace().getDefaultDecode(8);",
          "224:             {",
          "226:                 return from8bit(pdImage, raster, clipped, subsampling, width, height);",
          "",
          "[Removed Lines]",
          "223:             if (bitsPerComponent == 8 && Arrays.equals(decode, defaultDecode) && colorKey == null)",
          "",
          "[Added Lines]",
          "222:             final float[] decode = getDecodeArray(pdImage);",
          "223:             if (bitsPerComponent == 8 && colorKey == null && Arrays.equals(decode, defaultDecode))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32a725093e672fb2ff7b19e52e97f81065ec46af",
      "candidate_info": {
        "commit_hash": "32a725093e672fb2ff7b19e52e97f81065ec46af",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/32a725093e672fb2ff7b19e52e97f81065ec46af",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881597 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:             @Override",
          "111:             void runTest(float num)",
          "112:             {",
          "113:                 COSFloat test1 = new COSFloat(num);",
          "114:                 COSFloat test2 = new COSFloat(num);",
          "115:                 COSFloat test3 = new COSFloat(num);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:                 @SuppressWarnings({\"java:S5863\"}) // don't flag tests for reflexivity",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     public void testCompareFromHexString() throws IOException",
          "340:     {",
          "341:         COSString test1 = COSString.parseHex(\"000000FF000000\");",
          "342:         COSString test2 = COSString.parseHex(\"000000FF00FFFF\");",
          "343:         Assert.assertEquals(test1, test1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:         @SuppressWarnings({\"java:S5863\"}) // don't flag tests for reflexivity",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f53cf69f427d859c1730901b538266fb8b4ed822",
      "candidate_info": {
        "commit_hash": "f53cf69f427d859c1730901b538266fb8b4ed822",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f53cf69f427d859c1730901b538266fb8b4ed822",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java"
        ],
        "message": "PDFBOX-3017: use log instead of exception because test signature points to outdated CRL\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882889 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:                             crlDistributionPointsURL + \" could not be verified\");",
          "141:                 }",
          "142:                 crl.verify(crlIssuerCert.getPublicKey(), SecurityProvider.getProvider().getName());",
          "143:                 if (crl.getThisUpdate().after(now))",
          "144:                 {",
          "146:                 }",
          "147:                 if (crl.getNextUpdate().before(now))",
          "148:                 {",
          "150:                 }",
          "152:                 if (!crl.getIssuerX500Principal().equals(cert.getIssuerX500Principal()))",
          "",
          "[Removed Lines]",
          "145:                     throw new CertificateVerificationException(\"CRL not yet valid, thisUpdate is \" + crl.getThisUpdate());",
          "149:                     throw new CertificateVerificationException(\"CRL no longer valid, nextUpdate is \" + crl.getNextUpdate());",
          "",
          "[Added Lines]",
          "147:                     LOG.error(\"CRL not yet valid, thisUpdate is \" + crl.getThisUpdate());",
          "151:                     LOG.error(\"CRL no longer valid, nextUpdate is \" + crl.getNextUpdate());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6aea95e09203e1294f0b9fb33fa810de0e675caa",
      "candidate_info": {
        "commit_hash": "6aea95e09203e1294f0b9fb33fa810de0e675caa",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6aea95e09203e1294f0b9fb33fa810de0e675caa",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-4892: return interface instead of class\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888847 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.awt.Rectangle;",
          "29: import java.awt.RenderingHints;",
          "30: import java.awt.Shape;",
          "31: import java.awt.TexturePaint;",
          "32: import java.awt.Transparency;",
          "33: import java.awt.color.ColorSpace;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import java.awt.Stroke;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "732:     }",
          "736:     {",
          "737:         PDGraphicsState state = getGraphicsState();",
          "",
          "[Removed Lines]",
          "735:     private BasicStroke getStroke()",
          "",
          "[Added Lines]",
          "736:     private Stroke getStroke()",
          "",
          "---------------"
        ]
      }
    }
  ]
}