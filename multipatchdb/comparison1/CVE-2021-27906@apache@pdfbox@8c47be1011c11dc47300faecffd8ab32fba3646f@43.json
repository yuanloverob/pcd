{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d2e0638e397add1d26ffad3f17f9362c8136b9a",
      "candidate_info": {
        "commit_hash": "3d2e0638e397add1d26ffad3f17f9362c8136b9a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3d2e0638e397add1d26ffad3f17f9362c8136b9a",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java"
        ],
        "message": "PDFBOX-4892: correct IOException message, as suggested by IntraCherche; closes #93\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884981 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:         if ((long) widthPx * (long) heightPx > Integer.MAX_VALUE)",
          "296:         {",
          "299:         }",
          "301:         int rotationAngle = page.getRotation();",
          "",
          "[Removed Lines]",
          "297:             throw new IOException(\"Maximum size of image exceeded (w * h * scale) = \"//",
          "298:                     + widthPt + \" * \" + heightPt + \" * \" + scale + \" > \" + Integer.MAX_VALUE);",
          "",
          "[Added Lines]",
          "297:             throw new IOException(\"Maximum size of image exceeded (w * h * scale ^ 2) = \"//",
          "298:                     + widthPt + \" * \" + heightPt + \" * \" + scale + \" ^ 2 > \" + Integer.MAX_VALUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08ada9b2fde2c60ea33eccbf640925b2e50ed8f2",
      "candidate_info": {
        "commit_hash": "08ada9b2fde2c60ea33eccbf640925b2e50ed8f2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/08ada9b2fde2c60ea33eccbf640925b2e50ed8f2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java"
        ],
        "message": "PDFBOX-4892: D1T refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881360 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     }",
          "255:     {",
          "256:         if (lookupData == null)",
          "257:         {",
          "",
          "[Removed Lines]",
          "254:     private byte[] getLookupData() throws IOException",
          "",
          "[Added Lines]",
          "254:     private void readLookupData() throws IOException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:                 throw new IOException(\"Error: Unknown type for lookup table \" + lookupTable);",
          "274:             }",
          "275:         }",
          "277:     }",
          "",
          "[Removed Lines]",
          "276:         return lookupData;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:     private void readColorTable() throws IOException",
          "283:     {",
          "285:         int maxIndex = Math.min(getHival(), 255);",
          "286:         int numComponents = baseColorSpace.getNumberOfComponents();",
          "",
          "[Removed Lines]",
          "284:         byte[] lookupData = getLookupData();",
          "",
          "[Added Lines]",
          "283:         readLookupData();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebd9b9b6b5e5e40dae094f5836d92d73b897edc1",
      "candidate_info": {
        "commit_hash": "ebd9b9b6b5e5e40dae094f5836d92d73b897edc1",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/ebd9b9b6b5e5e40dae094f5836d92d73b897edc1",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"
        ],
        "message": "PDFBOX-4993: improve exception message, as suggested by Ralf Hauser\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882653 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java||examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java||examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     {",
          "100:         if (inFile == null || !inFile.exists())",
          "101:         {",
          "103:         }",
          "105:         PDDocument doc = PDDocument.load(inFile);",
          "",
          "[Removed Lines]",
          "102:             throw new FileNotFoundException(\"Document for signing does not exist\");",
          "",
          "[Added Lines]",
          "102:             String err = \"Document for signing \";",
          "103:             if (null == inFile)",
          "104:             {",
          "105:                 err += \"is null\";",
          "106:             }",
          "107:             else",
          "108:             {",
          "109:                 err += \"does not exist: \" + inFile.getAbsolutePath();",
          "110:             }",
          "111:             throw new FileNotFoundException(err);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18554dbfca23f479f633474248d7b7b745f36e73",
      "candidate_info": {
        "commit_hash": "18554dbfca23f479f633474248d7b7b745f36e73",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/18554dbfca23f479f633474248d7b7b745f36e73",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ],
        "message": "PDFBOX-45: allow incremental save for specific dictionary objects\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881664 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:         actualData = (DataBufferInt) actualImage1.getRaster().getDataBuffer();",
          "660:         Assert.assertArrayEquals(expectedData.getData(), actualData.getData());",
          "661:         doc.close();",
          "662:     }",
          "664:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:         doc = PDDocument.load(new File(outDir, fileNameSigned));",
          "665:         fileOutputStream = new FileOutputStream(new File(outDir, fileNameResaved2));",
          "666:         field = doc.getDocumentCatalog().getAcroForm().getField(\"SampleField\");",
          "667:         field.setValue(\"New Value 2\");",
          "668:         expectedImage2 = new PDFRenderer(doc).renderImage(0);",
          "671:         Assert.assertEquals(oldImage.getWidth(), expectedImage2.getWidth());",
          "672:         Assert.assertEquals(oldImage.getHeight(), expectedImage2.getHeight());",
          "673:         Assert.assertEquals(oldImage.getType(), expectedImage2.getType());",
          "674:         expectedData = (DataBufferInt) oldImage.getRaster().getDataBuffer();",
          "675:         actualData = (DataBufferInt) expectedImage2.getRaster().getDataBuffer();",
          "676:         Assert.assertEquals(expectedData.getData().length, actualData.getData().length);",
          "677:         Assert.assertFalse(Arrays.equals(expectedData.getData(), actualData.getData()));",
          "680:         Set<COSDictionary> objectsToWrite = new HashSet<COSDictionary>();",
          "681:         objectsToWrite.add(field.getCOSObject());",
          "682:         objectsToWrite.add(field.getWidgets().get(0).getAppearance().getCOSObject());",
          "683:         objectsToWrite.add((COSDictionary) field.getWidgets().get(0).getAppearance().getNormalAppearance().getCOSObject());",
          "684:         doc.saveIncremental(fileOutputStream, objectsToWrite);",
          "685:         doc.close();",
          "687:         checkSignature(new File(\"target/SimpleForm.pdf\"), new File(outDir, fileNameResaved2), false);",
          "688:         doc = PDDocument.load(new File(outDir, fileNameResaved2));",
          "690:         field = doc.getDocumentCatalog().getAcroForm().getField(\"SampleField\");",
          "691:         Assert.assertEquals(\"New Value 2\", field.getValueAsString());",
          "692:         actualImage2 = new PDFRenderer(doc).renderImage(0);",
          "694:         Assert.assertEquals(expectedImage2.getWidth(), actualImage2.getWidth());",
          "695:         Assert.assertEquals(expectedImage2.getHeight(), actualImage2.getHeight());",
          "696:         Assert.assertEquals(expectedImage2.getType(), actualImage2.getType());",
          "697:         expectedData = (DataBufferInt) expectedImage2.getRaster().getDataBuffer();",
          "698:         actualData = (DataBufferInt) actualImage2.getRaster().getDataBuffer();",
          "699:         Assert.assertArrayEquals(expectedData.getData(), actualData.getData());",
          "700:         doc.close();",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:         incrementalUpdate = true;",
          "259:     }",
          "261:     private void prepareIncrement(PDDocument doc)",
          "262:     {",
          "263:       try",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:     public COSWriter(OutputStream outputStream, RandomAccessRead inputData,",
          "275:             Set<COSDictionary> objectsToWrite) throws IOException",
          "276:     {",
          "290:         this(outputStream, inputData);",
          "291:         this.objectsToWrite.addAll(objectsToWrite);",
          "292:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1400:         }",
          "1401:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424:     public void saveIncremental(OutputStream output, Set<COSDictionary> objectsToWrite) throws IOException",
          "1425:     {",
          "1426:         if (pdfSource == null)",
          "1427:         {",
          "1428:             throw new IllegalStateException(\"document was not loaded from a file or a stream\");",
          "1429:         }",
          "1430:         COSWriter writer = null;",
          "1431:         try",
          "1432:         {",
          "1433:             writer = new COSWriter(output, pdfSource, objectsToWrite);",
          "1434:             writer.write(this, signInterface);",
          "1435:         }",
          "1436:         finally",
          "1437:         {",
          "1438:             if (writer != null)",
          "1439:             {",
          "1440:                 writer.close();",
          "1441:             }",
          "1442:         }",
          "1443:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3895d12013d77be3834ef0d0bfa994f75a9fd54f",
      "candidate_info": {
        "commit_hash": "3895d12013d77be3834ef0d0bfa994f75a9fd54f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3895d12013d77be3834ef0d0bfa994f75a9fd54f",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java"
        ],
        "message": "PDFBOX-4892: make field final, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890708 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java||fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java||fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java -> fontbox/src/main/java/org/apache/fontbox/cff/DataInput.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: public class DataInput",
          "30: {",
          "33:     private int bufferPosition = 0;",
          "",
          "[Removed Lines]",
          "32:     private byte[] inputBuffer = null;",
          "",
          "[Added Lines]",
          "32:     private final byte[] inputBuffer;",
          "",
          "---------------"
        ]
      }
    }
  ]
}