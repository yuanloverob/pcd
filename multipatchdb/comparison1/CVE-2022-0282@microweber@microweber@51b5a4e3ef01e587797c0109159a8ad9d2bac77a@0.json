{
  "cve_id": "CVE-2022-0282",
  "cve_desc": "Cross-site Scripting in Packagist microweber/microweber prior to 1.2.11.\n\n",
  "repo": "microweber/microweber",
  "patch_hash": "51b5a4e3ef01e587797c0109159a8ad9d2bac77a",
  "patch_info": {
    "commit_hash": "51b5a4e3ef01e587797c0109159a8ad9d2bac77a",
    "repo": "microweber/microweber",
    "commit_url": "https://github.com/microweber/microweber/commit/51b5a4e3ef01e587797c0109159a8ad9d2bac77a",
    "files": [
      "src/MicroweberPackages/Comment/Models/Comment.php",
      "src/MicroweberPackages/Comment/Models/CommentsCrud.php",
      "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php",
      "userfiles/modules/comments/src/Controllers/Admin.php"
    ],
    "message": "fix comments xss",
    "before_after_code_files": [
      "src/MicroweberPackages/Comment/Models/Comment.php||src/MicroweberPackages/Comment/Models/Comment.php",
      "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php",
      "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php||src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php",
      "userfiles/modules/comments/src/Controllers/Admin.php||userfiles/modules/comments/src/Controllers/Admin.php"
    ]
  },
  "patch_diff": {
    "src/MicroweberPackages/Comment/Models/Comment.php||src/MicroweberPackages/Comment/Models/Comment.php": [
      "File: src/MicroweberPackages/Comment/Models/Comment.php -> src/MicroweberPackages/Comment/Models/Comment.php"
    ],
    "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php": [
      "File: src/MicroweberPackages/Comment/Models/CommentsCrud.php -> src/MicroweberPackages/Comment/Models/CommentsCrud.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:                 if (isset($item['comment_body']) and ($item['comment_body'] != '')) {",
      "55:                     $surl = site_url();",
      "56:                     $item['comment_body'] = str_replace('{SITE_URL}', $surl, $item['comment_body']);",
      "58:                 }",
      "60:                 if (isset($params['single'])) {",
      "",
      "[Removed Lines]",
      "57:                     $comments[$i]['comment_body'] = $item['comment_body']; // mw()->format->autolink($item['comment_body']);",
      "",
      "[Added Lines]",
      "57:                     $comments[$i]['comment_body'] = htmlentities($item['comment_body']);",
      "",
      "---------------"
    ],
    "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php||src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php": [
      "File: src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php -> src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:                         </h6>",
      "57:                     <div class=\"mb-3\">",
      "59:                         <span class=\"js-comment-body-textarea\" style=\"display: none;\">",
      "60:                             <small class=\"text-muted\">Comment:</small>",
      "62:                         </span>",
      "63:                     </div>",
      "",
      "[Removed Lines]",
      "58:                         <div class=\"js-comment-body-text\"><?php print $comment['comment_body']; ?></div>",
      "61:                             <textarea name=\"comment_body\" class=\"form-control\"><?php print $comment['comment_body']; ?></textarea>",
      "",
      "[Added Lines]",
      "58:                         <div class=\"js-comment-body-text\">{{ $comment['comment_body'] }}</div>",
      "61:                             <textarea name=\"comment_body\" class=\"form-control\">{{ $comment['comment_body'] }}</textarea>",
      "",
      "---------------"
    ],
    "userfiles/modules/comments/src/Controllers/Admin.php||userfiles/modules/comments/src/Controllers/Admin.php": [
      "File: userfiles/modules/comments/src/Controllers/Admin.php -> userfiles/modules/comments/src/Controllers/Admin.php"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "231c190d21f69ef6cdf41ee28b93a69797dde813",
      "candidate_info": {
        "commit_hash": "231c190d21f69ef6cdf41ee28b93a69797dde813",
        "repo": "microweber/microweber",
        "commit_url": "https://github.com/microweber/microweber/commit/231c190d21f69ef6cdf41ee28b93a69797dde813",
        "files": [
          "src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php",
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php"
        ],
        "message": "update",
        "before_after_code_files": [
          "src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php||src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php",
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ],
          "candidate": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php||src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php": [
          "File: src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php -> src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         $comment_body = $data['comment_body'];",
          "151:         if (!empty($comment_body) and !empty($data['format']) and $data['format'] == 'markdown') {",
          "152:             $comment_body = Markdown::convertToHtml($comment_body);",
          "153:         }",
          "155:         $data['comment_body'] = $comment_body;",
          "156:         $data['allow_html'] = '1';",
          "",
          "[Removed Lines]",
          "148:         $cleanHtml = new HTMLClean();",
          "149:         $comment_body = $cleanHtml->onlyTags($comment_body);",
          "",
          "[Added Lines]",
          "152:         $cleanHtml = new HTMLClean();",
          "153:         $comment_body = $cleanHtml->onlyTags($comment_body);",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php": [
          "File: src/MicroweberPackages/Comment/Models/CommentsCrud.php -> src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:                     $comments[$i]['updated_at_display'] = date($date_format, strtotime($item['updated_at']));",
          "55:                 }",
          "56:                 if (isset($item['comment_body']) and ($item['comment_body'] != '')) {",
          "57:                     $surl = site_url();",
          "60:                     $clearInput = new HTMLClean();",
          "62:                 }",
          "64:                 if (isset($params['single'])) {",
          "",
          "[Removed Lines]",
          "58:                     $item['comment_body'] = str_replace('{SITE_URL}', $surl, $item['comment_body']);",
          "61:                     $comments[$i]['comment_body'] = $clearInput->onlyTags($item['comment_body']);",
          "",
          "[Added Lines]",
          "59:                     $comment_body = str_replace('{SITE_URL}', $surl, $item['comment_body']);",
          "62:                     $comment_body = $clearInput->onlyTags($comment_body);",
          "64:                     $pq = \\phpQuery::newDocument($comment_body);",
          "65:                     $pq->find('a')->attr('rel','nofollow ugc');",
          "66:                     $comment_body = $pq->htmlOuter();",
          "68:                     $comments[$i]['comment_body'] = $comment_body;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e9fcaa043b4211ef21a494f9892dd19ba8a572c",
      "candidate_info": {
        "commit_hash": "6e9fcaa043b4211ef21a494f9892dd19ba8a572c",
        "repo": "microweber/microweber",
        "commit_url": "https://github.com/microweber/microweber/commit/6e9fcaa043b4211ef21a494f9892dd19ba8a572c",
        "files": [
          "src/MicroweberPackages/Comment/Http/Controllers/CommentController.php",
          "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php",
          "src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php"
        ],
        "message": "update",
        "before_after_code_files": [
          "src/MicroweberPackages/Comment/Http/Controllers/CommentController.php||src/MicroweberPackages/Comment/Http/Controllers/CommentController.php",
          "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php||src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php",
          "src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php||src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php||src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php"
          ],
          "candidate": [
            "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php||src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MicroweberPackages/Comment/Http/Controllers/CommentController.php||src/MicroweberPackages/Comment/Http/Controllers/CommentController.php": [
          "File: src/MicroweberPackages/Comment/Http/Controllers/CommentController.php -> src/MicroweberPackages/Comment/Http/Controllers/CommentController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         }",
          "106:         if (!empty($saveComment['comment_body']) and !empty($inputs['format']) and $inputs['format'] == 'markdown') {",
          "108:         }",
          "110:         $save = Comment::create($saveComment);",
          "",
          "[Removed Lines]",
          "107:             $saveComment['comment_body'] = Markdown::convertToHtml($saveComment['comment_body']);",
          "",
          "[Added Lines]",
          "103:             $saveComment['comment_body'] = htmlentities($saveComment['comment_body']);",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php||src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php": [
          "File: src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php -> src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:                         <div class=\"js-comment-body-text\">{{ $comment['comment_body'] }}</div>",
          "59:                         <span class=\"js-comment-body-textarea\" style=\"display: none;\">",
          "60:                             <small class=\"text-muted\">Comment:</small>",
          "62:                         </span>",
          "63:                     </div>",
          "",
          "[Removed Lines]",
          "61:                             <textarea name=\"comment_body\" class=\"form-control\">{{ $comment['comment_body'] }}</textarea>",
          "",
          "[Added Lines]",
          "61:                             <textarea name=\"comment_body\" class=\"form-control\">{{ $comment['comment_body'] }}\u00a7</textarea>",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php||src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php": [
          "File: src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php -> src/MicroweberPackages/Comment/resources/views/admin/notifications/new_comment.blade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:                         <small class=\"text-muted\">says:</small>",
          "63:                     </h6>",
          "64:                     <div>",
          "66:                     </div>",
          "",
          "[Removed Lines]",
          "65:                         <p>{!! $notification['comment_body'] !!}</p>",
          "",
          "[Added Lines]",
          "65:                         <p>{{ $notification['comment_body'] }}</p>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a15da374af81c3cd312ee1639e4c6f56c4839f7e",
      "candidate_info": {
        "commit_hash": "a15da374af81c3cd312ee1639e4c6f56c4839f7e",
        "repo": "microweber/microweber",
        "commit_url": "https://github.com/microweber/microweber/commit/a15da374af81c3cd312ee1639e4c6f56c4839f7e",
        "files": [
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php"
        ],
        "message": "Update CommentsCrud.php",
        "before_after_code_files": [
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ],
          "candidate": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php": [
          "File: src/MicroweberPackages/Comment/Models/CommentsCrud.php -> src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:                     $item['comment_body'] = str_replace('{SITE_URL}', $surl, $item['comment_body']);",
          "60:                     $clearInput = new HTMLClean();",
          "62:                 }",
          "64:                 if (isset($params['single'])) {",
          "",
          "[Removed Lines]",
          "61:                     $comments[$i]['comment_body'] = $clearInput->clean($item['comment_body']);",
          "",
          "[Added Lines]",
          "61:                     $comments[$i]['comment_body'] = $clearInput->onlyTags($item['comment_body']);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cdf5714e57d5b192cb784c267f0ec86b3cfe3c6",
      "candidate_info": {
        "commit_hash": "2cdf5714e57d5b192cb784c267f0ec86b3cfe3c6",
        "repo": "microweber/microweber",
        "commit_url": "https://github.com/microweber/microweber/commit/2cdf5714e57d5b192cb784c267f0ec86b3cfe3c6",
        "files": [
          "src/MicroweberPackages/Comment/CommentServiceProvider.php",
          "src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php",
          "src/MicroweberPackages/Comment/Http/Controllers/CommentController.php",
          "src/MicroweberPackages/Comment/Models/Comment.php",
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "src/MicroweberPackages/Comment/composer.json",
          "src/MicroweberPackages/Comment/helpers/comments_helpers.php",
          "src/MicroweberPackages/Comment/routes/api.php",
          "src/MicroweberPackages/Comment/tests/CommentsTest.php",
          "userfiles/modules/comments/comments_admin.js",
          "userfiles/modules/comments/edit_comments.js",
          "userfiles/modules/comments/functions.php",
          "userfiles/modules/comments/index.php",
          "userfiles/modules/comments/src/Models/Comments.php",
          "userfiles/modules/comments/src/views/admin.php",
          "userfiles/modules/comments/src/views/backend.php",
          "userfiles/modules/comments/src/views/comments_list.php",
          "userfiles/modules/site_stats/dashboard_recent_comments.php"
        ],
        "message": "update",
        "before_after_code_files": [
          "src/MicroweberPackages/Comment/CommentServiceProvider.php||src/MicroweberPackages/Comment/CommentServiceProvider.php",
          "src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php||src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php",
          "src/MicroweberPackages/Comment/Http/Controllers/CommentController.php||src/MicroweberPackages/Comment/Http/Controllers/CommentController.php",
          "src/MicroweberPackages/Comment/Comment.php||src/MicroweberPackages/Comment/Models/Comment.php",
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "src/MicroweberPackages/Comment/helpers/comments_helpers.php||src/MicroweberPackages/Comment/helpers/comments_helpers.php",
          "src/MicroweberPackages/Comment/routes/api.php||src/MicroweberPackages/Comment/routes/api.php",
          "src/MicroweberPackages/Comment/tests/CommentsTest.php||src/MicroweberPackages/Comment/tests/CommentsTest.php",
          "userfiles/modules/comments/comments_admin.js||userfiles/modules/comments/comments_admin.js",
          "userfiles/modules/comments/edit_comments.js||userfiles/modules/comments/edit_comments.js",
          "userfiles/modules/comments/functions.php||userfiles/modules/comments/functions.php",
          "userfiles/modules/comments/index.php||userfiles/modules/comments/index.php",
          "userfiles/modules/comments/src/Models/Comments.php||userfiles/modules/comments/src/Models/Comments.php",
          "userfiles/modules/comments/src/views/admin.php||userfiles/modules/comments/src/views/admin.php",
          "userfiles/modules/comments/src/views/backend.php||userfiles/modules/comments/src/views/backend.php",
          "userfiles/modules/comments/src/views/comments_list.php||userfiles/modules/comments/src/views/comments_list.php",
          "userfiles/modules/site_stats/dashboard_recent_comments.php||userfiles/modules/site_stats/dashboard_recent_comments.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ],
          "candidate": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MicroweberPackages/Comment/CommentServiceProvider.php||src/MicroweberPackages/Comment/CommentServiceProvider.php": [
          "File: src/MicroweberPackages/Comment/CommentServiceProvider.php -> src/MicroweberPackages/Comment/CommentServiceProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     public function boot()",
          "25:     {",
          "27:         $this->loadRoutesFrom(__DIR__ . '/routes/api.php');",
          "29:         View::addNamespace('comment', __DIR__.'/resources/views');",
          "30:     }",
          "",
          "[Removed Lines]",
          "31: }",
          "",
          "[Added Lines]",
          "27:         include_once (__DIR__.'/helpers/comments_helpers.php');",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php||src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php": [
          "File: src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php -> src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: namespace MicroweberPackages\\Comment\\Http\\Controllers\\Admin;",
          "11: use Illuminate\\Http\\Request;",
          "12: use Illuminate\\Support\\Facades\\Auth;",
          "14: use MicroweberPackages\\App\\Http\\Controllers\\AdminController;",
          "18: class AdminCommentController extends AdminController",
          "",
          "[Removed Lines]",
          "15: use MicroweberPackages\\Comment\\Comment;",
          "",
          "[Added Lines]",
          "11: use GrahamCampbell\\Markdown\\Facades\\Markdown;",
          "13: use Illuminate\\Http\\Resources\\Json\\JsonResource;",
          "16: use Illuminate\\Support\\Facades\\Notification;",
          "18: use MicroweberPackages\\Comment\\Models\\Comment;",
          "19: use MicroweberPackages\\Comment\\Events\\NewComment;",
          "20: use MicroweberPackages\\Comment\\Notifications\\NewCommentNotification;",
          "21: use MicroweberPackages\\User\\Models\\User;",
          "22: use MicroweberPackages\\Utils\\Mail\\MailSender;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     public function index(Request $request)",
          "21:     {",
          "22:         $contents = Comment::filter($request->all())",
          "24:             ->paginate($request->get('limit', 30))",
          "25:             ->appends($request->except('page'));",
          "",
          "[Removed Lines]",
          "23:             ->groupBy(['rel_id','rel_type'])",
          "",
          "[Added Lines]",
          "30:             ->groupBy(['rel_id', 'rel_type'])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:             $content->allComments = Comment::where('rel_type', $content['rel_type'])->where('rel_id', $content['rel_id'])->get();",
          "29:         }",
          "32:     }",
          "",
          "[Removed Lines]",
          "31:         return $this->view('comment::admin.comments.index', ['contents'=>$contents]);",
          "33: }",
          "",
          "[Added Lines]",
          "38:         return $this->view('comment::admin.comments.index', ['contents' => $contents]);",
          "43:     {",
          "45:         $is_del = false;",
          "46:         $table = 'comments';",
          "47:         mw_var('FORCE_SAVE', $table);",
          "49:         $data = $request->all();",
          "50:         if (!isset($data['rel_type']) and isset($data['rel'])) {",
          "51:             $data['rel_type'] = $data['rel'];",
          "52:         }",
          "54:         if (isset($data['reply_to_comment_id'])) {",
          "55:             $old_comment = $this->get_by_id($data['reply_to_comment_id']);",
          "56:             $data['id'] = 0;",
          "57:             if (!$old_comment) {",
          "58:                 return array('error' => 'Error: invalid data');",
          "59:             }",
          "60:             if (isset($old_comment['rel_type'])) {",
          "61:                 $data['rel_type'] = $old_comment['rel_type'];",
          "62:             }",
          "63:             if (isset($old_comment['rel_id'])) {",
          "64:                 $data['rel_id'] = $old_comment['rel_id'];",
          "65:             }",
          "68:         }",
          "69:         if (!isset($data['id']) and !isset($data['is_moderated'])) {",
          "70:             $data['is_moderated'] = 1;",
          "71:         } else {",
          "72:             $require_moderation = get_option('require_moderation', 'comments');",
          "73:             if ($require_moderation != 'y') {",
          "74:                 $data['is_moderated'] = 1;",
          "75:             }",
          "76:         }",
          "77:         if (isset($data['action']) and isset($data['id'])) {",
          "78:             $action = strtolower($data['action']);",
          "80:             switch ($action) {",
          "81:                 case 'publish' :",
          "82:                     $data['is_moderated'] = 1;",
          "83:                     $data['is_spam'] = 0;",
          "86:                     break;",
          "87:                 case 'unpublish' :",
          "88:                     $data['is_moderated'] = 0;",
          "90:                     break;",
          "91:                 case 'spam' :",
          "92:                     $data['is_moderated'] = 0;",
          "93:                     $data['is_spam'] = 1;",
          "95:                     $this->__report_for_spam($data['id']);",
          "97:                     break;",
          "99:                 case 'delete' :",
          "100:                     $is_del = true;",
          "101:                     $del = mw()->database_manager->delete_by_id($table, $id = intval($data['id']), $field_name = 'id');",
          "103:                     break;",
          "105:                 default :",
          "106:                     break;",
          "107:             }",
          "110:         } else {",
          "111:             if (!isset($data['id'])) {",
          "112:                 if (!isset($data['rel_type'])) {",
          "113:                     return array('error' => 'Error: invalid data rel_type');",
          "114:                 }",
          "115:                 if (!isset($data['rel_id'])) {",
          "116:                     return array('error' => 'Error: invalid data rel_id');",
          "117:                 } else {",
          "118:                     if (trim($data['rel_id']) == '') {",
          "119:                         return array('error' => 'Error: invalid data rel_id');",
          "120:                     }",
          "121:                 }",
          "122:             }",
          "123:         }",
          "125:         if($is_del){",
          "126:             return (new JsonResource($data))->response();",
          "127:         }",
          "129:         if (!isset($data['comment_body'])) {",
          "130:             $data['comment_body'] = '';",
          "131:         }",
          "133:         $comment_body = $data['comment_body'];",
          "136:         $comment_body = $this->app->format->clean_html($comment_body);",
          "139:         $evil = ['(?<!\\w)on\\w*', 'xmlns', 'formaction', 'xlink:href', 'FSCommand', 'seekSegmentTime'];",
          "140:         $comment_body = $this->app->format->clean_xss($comment_body, true, $evil, 'removeEvilAttributes');",
          "142:         if (!empty($comment_body) and !empty($data['format']) and $data['format'] == 'markdown') {",
          "143:             $comment_body = Markdown::convertToHtml($comment_body);",
          "144:         }",
          "146:         $data['comment_body'] = $comment_body;",
          "147:         $data['allow_html'] = '1';",
          "149:         $saved_data_id = mw()->database_manager->save($table, $data);",
          "151:         $get_comment = get_comments(\"single=1&id=\" . $saved_data_id);",
          "153:         return (new JsonResource($get_comment))->response();",
          "155:     }",
          "159:     private function __report_for_spam($comment_id)",
          "160:     {",
          "161:         if (defined(\"MW_UNIT_TEST\")) {",
          "162:             return true;",
          "163:         }",
          "165:         $comment = $this->get_by_id($comment_id);",
          "166:         $report_url = 'https://spamchecker.microweberapi.com/';",
          "168:         if ($comment) {",
          "169:             $report = array();",
          "170:             $report['site_url'] = site_url();",
          "171:             $report['from_url'] = $comment['from_url'];",
          "172:             $report['is_spam'] = 1;",
          "173:             if (isset($comment['user_ip']) and $comment['user_ip']) {",
          "174:                 $report['ip'] = trim($comment['user_ip']);",
          "175:             }",
          "176:             if (isset($comment['comment_email']) and $comment['comment_email']) {",
          "177:                 $report['email'] = trim($comment['comment_email']);",
          "178:             }",
          "179:             if (isset($comment['created_by']) and $comment['created_by']) {",
          "180:                 $report['is_logged'] = true;",
          "181:                 $report['user_id'] = $comment['created_by'];",
          "182:             }",
          "183:             if (isset($comment['comment_name']) and $comment['comment_name']) {",
          "184:                 $report['comment_name'] = $comment['comment_name'];",
          "185:             }",
          "186:             if (isset($comment['comment_body']) and $comment['comment_body']) {",
          "187:                 $report['comment_body'] = $comment['comment_body'];",
          "188:             }",
          "189:             if (isset($comment['comment_website']) and $comment['comment_website']) {",
          "190:                 $report['comment_website'] = $comment['comment_website'];",
          "191:             }",
          "192:             if (isset($comment['comment_subject']) and $comment['comment_subject']) {",
          "193:                 $report['comment_subject'] = $comment['comment_subject'];",
          "194:             }",
          "196:             if (isset($comment['rel_type']) and $comment['rel_type']) {",
          "197:                 $report['rel_type'] = $comment['rel_type'];",
          "198:             }",
          "199:             if (isset($comment['rel_id']) and $comment['rel_id']) {",
          "200:                 $report['rel_id'] = $comment['rel_id'];",
          "201:             }",
          "202:             $http = new \\MicroweberPackages\\Utils\\Http\\Http();",
          "203:             $http->url($report_url);",
          "204:             $http->set_timeout(10);",
          "205:             return $http->post($report);",
          "207:         }",
          "208:     }",
          "209: }",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/Http/Controllers/CommentController.php||src/MicroweberPackages/Comment/Http/Controllers/CommentController.php": [
          "File: src/MicroweberPackages/Comment/Http/Controllers/CommentController.php -> src/MicroweberPackages/Comment/Http/Controllers/CommentController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: use Illuminate\\Http\\Request;",
          "17: use Illuminate\\Http\\Resources\\Json\\JsonResource;",
          "19: use MicroweberPackages\\Comment\\Events\\NewComment;",
          "20: use MicroweberPackages\\Comment\\Notifications\\NewCommentNotification;",
          "21: use MicroweberPackages\\Option\\Facades\\Option;",
          "",
          "[Removed Lines]",
          "18: use MicroweberPackages\\Comment\\Comment;",
          "",
          "[Added Lines]",
          "18: use MicroweberPackages\\App\\Http\\RequestRoute;",
          "19: use MicroweberPackages\\Comment\\Models\\Comment;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         }",
          "36:         $rules = [];",
          "37:         $inputs = $request->all();",
          "39:         $rules['rel_id'] = 'required';",
          "40:         $rules['rel_type'] = 'required';",
          "41:         $rules['comment_body'] = 'required';",
          "45:         }",
          "47:         if (Option::getValue('require_terms', 'comments')) {",
          "51:             }",
          "53:         }",
          "55:         $rules['captcha'] = 'captcha';",
          "",
          "[Removed Lines]",
          "43:         if (!empty($inputs['comment_email'])) {",
          "44:             $inputs['email'] = $inputs['comment_email'];",
          "48:             $rules['terms'] = 'terms:terms_comments';",
          "49:             if (isset($inputs['newsletter_subscribe']) and $inputs['newsletter_subscribe']) {",
          "50:                 $rules['terms'] = $rules['terms'] . ', terms_newsletter';",
          "52:             $rules['comment_email'] = 'required';",
          "",
          "[Added Lines]",
          "42:         if(isset($inputs['rel']) and !isset($inputs['rel_type'])){",
          "43:             $inputs['rel_type'] = $inputs['rel'];",
          "44:             unset($inputs['rel']);",
          "45:         }",
          "48:         if(isset($inputs['id'])) {",
          "49:             $comment = get_comments('single=1&id=' . $inputs['id']);",
          "50:             if (empty($comment)) {",
          "51:                 return \\Response::make(['errors' => ['Cannot find comment']]);",
          "52:             }",
          "53:             if (mw()->user_manager->session_id() != $comment['session_id']) {",
          "54:                 return \\Response::make(['errors' => ['Cannot edit comment']]);",
          "55:             }",
          "57:         }",
          "64:         if (!empty($inputs['email'])) {",
          "65:             $inputs['comment_email'] = $inputs['email'];",
          "66:             unset( $inputs['email']);",
          "70:             if(!isset($inputs['terms'])) {",
          "71:                 $rules['terms'] = 'terms:terms_comments';",
          "72:                 if (isset($inputs['newsletter_subscribe']) and $inputs['newsletter_subscribe']) {",
          "73:                     $rules['terms'] = $rules['terms'] . ', terms_newsletter';",
          "74:                 }",
          "75:                 $rules['comment_email'] = 'required';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         $validator = \\Validator::make($inputs, $rules);",
          "61:         if ($validator->fails()) {",
          "63:         }",
          "67:         $requireModeration = Option::getValue('require_moderation', 'comments');",
          "68:         if ($requireModeration) {",
          "69:             $saveComment['is_moderated'] = 1;",
          "70:         }",
          "",
          "[Removed Lines]",
          "62:             return ['errors'=>$validator->messages()->toArray()];",
          "65:         $saveComment = $request->all();",
          "",
          "[Added Lines]",
          "88:             $response = \\Response::make(['errors'=>$validator->messages()->toArray()]);",
          "90:             $response->setStatusCode(422);",
          "92:             $response = RequestRoute::formatFrontendResponse($response);",
          "94:             return $response;",
          "97:         $saveComment = $inputs;",
          "101:             $saveComment['is_moderated'] = 0;",
          "102:         } else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         Notification::send(User::whereIsAdmin(1)->get(), new NewCommentNotification($save));",
          "82:         return (new JsonResource($save))->response();",
          "83:     }",
          "",
          "[Removed Lines]",
          "84: }",
          "",
          "[Added Lines]",
          "116:         cache_clear('comments');",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/Comment.php||src/MicroweberPackages/Comment/Models/Comment.php": [
          "File: src/MicroweberPackages/Comment/Comment.php -> src/MicroweberPackages/Comment/Models/Comment.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "5: use EloquentFilter\\Filterable;",
          "6: use Illuminate\\Database\\Eloquent\\Model;",
          "7: use MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;",
          "10: class Comment extends Model",
          "11: {",
          "",
          "[Removed Lines]",
          "3: namespace MicroweberPackages\\Comment;",
          "8: use MicroweberPackages\\Database\\Casts\\MarkdownCast;",
          "",
          "[Added Lines]",
          "3: namespace MicroweberPackages\\Comment\\Models;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:         return $this->provideFilter(ContentFilter::class);",
          "32:     }",
          "",
          "[Removed Lines]",
          "34: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php": [
          "File: src/MicroweberPackages/Comment/Models/CommentsCrud.php -> src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace MicroweberPackages\\Comment\\Models;",
          "5: use MicroweberPackages\\Database\\Crud;",
          "8: class CommentsCrud extends Crud",
          "9: {",
          "11:     public $app;",
          "12:     public $table = 'comments';",
          "15:     public function get($params = false)",
          "16:     {",
          "17:         $params2 = array();",
          "19:         if (is_string($params)) {",
          "20:             $params = parse_str($params, $params2);",
          "21:             $params = $params2;",
          "22:         }",
          "23:         if (isset($params['content_id'])) {",
          "24:             $params['rel_type'] = 'content';",
          "25:             $params['rel_id'] = mw()->database_manager->escape_string($params['content_id']);",
          "27:         }",
          "28:         $date_format = get_option('date_format', 'website');",
          "29:         if ($date_format == false) {",
          "30:             $date_format = \"Y-m-d H:i:s\";",
          "31:         }",
          "32:         $table = $this->table;",
          "33:         $params['table'] = $table;",
          "35:         $comments = db_get($params);",
          "37:         if (is_array($comments)) {",
          "38:             $i = 0;",
          "39:             foreach ($comments as $item) {",
          "40:                 if (isset($params['count'])) {",
          "41:                     if (isset($item['qty'])) {",
          "42:                         return $item['qty'];",
          "43:                     }",
          "44:                 }",
          "45:                 if (isset($item['created_by']) and intval($item['created_by']) > 0 and ($item['comment_name'] == false or $item['comment_name'] == '')) {",
          "46:                     $comments[$i]['comment_name'] = user_name($item['created_by']);",
          "47:                 }",
          "48:                 if (isset($item['created_at']) and trim($item['created_at']) != '') {",
          "49:                     $comments[$i]['created_at_display'] = date($date_format, strtotime($item['created_at']));",
          "50:                 }",
          "51:                 if (isset($item['updated_at']) and trim($item['updated_at']) != '') {",
          "52:                     $comments[$i]['updated_at_display'] = date($date_format, strtotime($item['updated_at']));",
          "53:                 }",
          "54:                 if (isset($item['comment_body']) and ($item['comment_body'] != '')) {",
          "55:                     $surl = site_url();",
          "56:                     $item['comment_body'] = str_replace('{SITE_URL}', $surl, $item['comment_body']);",
          "57:                     $comments[$i]['comment_body'] = $item['comment_body']; // mw()->format->autolink($item['comment_body']);",
          "58:                 }",
          "60:                 if (isset($params['single'])) {",
          "62:                     return $comments;",
          "63:                 }",
          "65:                 $i++;",
          "66:             }",
          "67:         }",
          "70:         return $comments;",
          "71:     }",
          "76: }",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/helpers/comments_helpers.php||src/MicroweberPackages/Comment/helpers/comments_helpers.php": [
          "File: src/MicroweberPackages/Comment/helpers/comments_helpers.php -> src/MicroweberPackages/Comment/helpers/comments_helpers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "4: function get_comments($params = false)",
          "5: {",
          "6:     $comments = new  \\MicroweberPackages\\Comment\\Models\\CommentsCrud();",
          "8:     return $comments->get($params);",
          "9: }",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/routes/api.php||src/MicroweberPackages/Comment/routes/api.php": [
          "File: src/MicroweberPackages/Comment/routes/api.php -> src/MicroweberPackages/Comment/routes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "10: Route::name('api.comment.')",
          "12:     ->middleware(['xss'])",
          "13:     ->namespace('\\MicroweberPackages\\Comment\\Http\\Controllers')",
          "14:     ->group(function () {",
          "",
          "[Removed Lines]",
          "11:     ->prefix('api/comment')",
          "",
          "[Added Lines]",
          "6:     ->prefix(ADMIN_PREFIX)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:     });",
          "21: Route::name('admin.')",
          "22:     ->prefix(ADMIN_PREFIX)",
          "24:     ->namespace('\\MicroweberPackages\\Comment\\Http\\Controllers\\Admin')",
          "25:     ->group(function () {",
          "27:         Route::resource('comment', 'AdminCommentController');",
          "",
          "[Removed Lines]",
          "23:     ->middleware(['admin'])",
          "29:     });",
          "",
          "[Added Lines]",
          "14: Route::name('api.comment.admin.')",
          "15:     ->prefix(ADMIN_PREFIX)",
          "16:     ->middleware(['xss','admin'])",
          "17:     ->namespace('\\MicroweberPackages\\Comment\\Http\\Controllers\\Admin')",
          "18:     ->group(function () {",
          "19:         Route::post('edit', 'AdminCommentController@saveCommentEdit')->name('edit');",
          "20:     });",
          "25:     ->middleware(['xss','admin'])",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/tests/CommentsTest.php||src/MicroweberPackages/Comment/tests/CommentsTest.php": [
          "File: src/MicroweberPackages/Comment/tests/CommentsTest.php -> src/MicroweberPackages/Comment/tests/CommentsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace MicroweberPackages\\Helper\\tests;",
          "5: use MicroweberPackages\\App\\Http\\RequestRoute;",
          "6: use MicroweberPackages\\Core\\tests\\TestCase;",
          "8: class CommentsTest extends TestCase",
          "9: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use GrahamCampbell\\Markdown\\Facades\\Markdown;",
          "6: use Illuminate\\Support\\Facades\\Auth;",
          "9: use MicroweberPackages\\User\\Models\\User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         );",
          "36:         $commentData = $response->getData();",
          "38:         $this->assertEquals('content', $commentData->data->rel_type);",
          "39:         $this->assertEquals('Bozhidar', $commentData->data->comment_name);",
          "40:         $this->assertEquals('selfworksbg@gmail.com', $commentData->data->comment_email);",
          "",
          "[Removed Lines]",
          "37:          $this->assertEquals($save_post1, $commentData->data->rel_id);",
          "",
          "[Added Lines]",
          "41:         $this->assertEquals($save_post1, $commentData->data->rel_id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:             'is_active' => 1,);",
          "110:         $save_post1 = save_content($params);",
          "112:         $req = [",
          "113:             'rel_id' => $save_post1,",
          "114:             'rel_type' => 'content',",
          "115:             'comment_name' => 'User for terms',",
          "117:             'comment_body' => 'Hello',",
          "118:         ];",
          "",
          "[Removed Lines]",
          "116:             'comment_email' => 'html' . now() . rand() . '@user.com',",
          "",
          "[Added Lines]",
          "115:         $some = 'html' . now() . rand() . '@user.com';",
          "120:             'comment_email' => $some,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:         $req['terms'] = 1;",
          "134:             route('api.comment.post'),",
          "135:             $req",
          "136:         );",
          "139:     }",
          "",
          "[Removed Lines]",
          "133:         $commentData = RequestRoute::postJson(",
          "137:         $this->assertEquals(true, $commentData['success']);",
          "",
          "[Added Lines]",
          "137:         $response = RequestRoute::postJson(",
          "142:          $this->assertEquals($some, $response['data']['comment_email']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:     }",
          "275:     private function _setDisableMustBeLogged()",
          "276:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:     public function testAdminEditComment()",
          "285:     {",
          "286:         $this->_setDisableMustBeLogged();",
          "287:         $this->_setDisableTerms();",
          "288:         $this->_setDisableCaptcha();",
          "290:         $user = User::where('is_admin', '=', '1')->first();",
          "291:         Auth::login($user);",
          "293:         $params = array(",
          "294:             'title' => 'some post test for comments test'.uniqid(),",
          "295:             'content_type' => 'post',",
          "296:             'is_active' => 1);",
          "298:         $save_post1 = save_content($params);",
          "300:         $comment1 = 'Hello'.uniqid();",
          "301:         $comment2 = 'Hello2'.uniqid();",
          "303:         $response = $this->json(",
          "304:             'POST',",
          "305:             route('api.comment.post'),",
          "306:             [",
          "307:                 'rel_id' => $save_post1,",
          "308:                 'rel_type' => 'content',",
          "309:                 'comment_name' => 'Some',",
          "310:                 'comment_email' => 'email@gmail.com',",
          "311:                 'comment_website' => 'test.com',",
          "312:                 'comment_body' => $comment1,",
          "313:             ]",
          "314:         );",
          "316:         $commentData = $response->getData();",
          "318:         $comment_id = $commentData->data->id;",
          "320:         $this->assertEquals($commentData->data->comment_body, $comment1);",
          "322:         $response = $this->json(",
          "323:             'POST',",
          "324:             route('api.comment.admin.edit'),",
          "325:             [",
          "326:                 'id' => $comment_id,",
          "327:                 'comment_body' => $comment2,",
          "328:             ]",
          "329:         );",
          "330:         $commentData = $response->getData();",
          "331:         $this->assertEquals($commentData->data->comment_body, $comment2);",
          "335:         $response = $this->json(",
          "336:             'POST',",
          "337:             route('api.comment.admin.edit'),",
          "338:             [",
          "339:                 'id' => $comment_id,",
          "340:                 'comment_body' => $comment2,",
          "341:                 'format' => 'markdown',",
          "342:             ]",
          "343:         );",
          "344:         $commentData = $response->getData();",
          "345:         $this->assertEquals($commentData->data->comment_body, Markdown::convertToHtml($comment2));",
          "349:         $response = $this->json(",
          "350:             'POST',",
          "351:             route('api.comment.admin.edit'),",
          "352:             [",
          "353:                 'id' => $comment_id,",
          "354:                 'action' => 'publish',",
          "355:             ]",
          "356:         );",
          "357:         $commentData = $response->getData();",
          "359:         $this->assertEquals($commentData->data->is_moderated, 1);",
          "360:         $this->assertEquals($commentData->data->is_spam, 0);",
          "364:         $response = $this->json(",
          "365:             'POST',",
          "366:             route('api.comment.admin.edit'),",
          "367:             [",
          "368:                 'id' => $comment_id,",
          "369:                 'action' => 'unpublish',",
          "370:             ]",
          "371:         );",
          "372:         $commentData = $response->getData();",
          "373:         $this->assertEquals($commentData->data->is_moderated, 0);        // unpublish",
          "376:         $response = $this->json(",
          "377:             'POST',",
          "378:             route('api.comment.admin.edit'),",
          "379:             [",
          "380:                 'id' => $comment_id,",
          "381:                 'action' => 'spam',",
          "382:             ]",
          "383:         );",
          "384:         $commentData = $response->getData();",
          "385:         $this->assertEquals($commentData->data->is_moderated, 0);",
          "386:         $this->assertEquals($commentData->data->is_spam, 1);",
          "390:         $response = $this->json(",
          "391:             'POST',",
          "392:             route('api.comment.admin.edit'),",
          "393:             [",
          "394:                 'id' => $comment_id,",
          "395:                 'action' => 'delete',",
          "396:             ]",
          "397:         );",
          "399:         $get_comment = get_comments(\"single=1&id=\" . $comment_id);",
          "400:         $this->assertFalse($get_comment);",
          "402:     }",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/comments_admin.js||userfiles/modules/comments/comments_admin.js": [
          "File: userfiles/modules/comments/comments_admin.js -> userfiles/modules/comments/comments_admin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3: alert('mw.adminComments is deprecated');",
          "5: mw.adminComments = {",
          "6:     action: function (form, val) {",
          "7:         var form = $(form);",
          "8:         var field = form.find('.comment_state');",
          "9:         var connected_id = mw.$('[name=\"connected_id\"]', form[0]).val();",
          "10:         field.val(val);",
          "11:         var conf = true;",
          "12:         if (val == 'delete') {",
          "13:             var conf = confirm(mw.msg.to_delete_comment);",
          "14:         }",
          "15:         if (conf) {",
          "16:             var id = form.attr('id');",
          "17:             var data = form.serialize();",
          "18:             $.post(\"<?php print api_link('post_comment'); ?>\", data, function (data) {",
          "19:                 mw.reload_module('#mw_comments_for_post_' + connected_id, function () {",
          "20:                     $('#mw_comments_for_post_' + connected_id).find(\".comments-holder,.new-comments,.old-comments\").show();",
          "21:                 });",
          "22:             });",
          "23:         }",
          "24:     },",
          "25:     toggleEdit: function (id) {",
          "26:         mw.$(id).toggleClass('comment-edit-mode');",
          "27:         if (mw.$(id).hasClass(\"comment-edit-mode\")) {",
          "28:             mw.$(id).find(\"textarea\").focus();",
          "29:         }",
          "30:     },",
          "31:     display: function (e, el, what) {",
          "32:         mw.event.cancel(e);",
          "33:         var _new = mw.tools.firstParentWithClass(el, 'comment-post').querySelector('.new-comments');",
          "34:         var _old = mw.tools.firstParentWithClass(el, 'comment-post').querySelector('.old-comments');",
          "35:         if (what == 'all') {",
          "36:             $(_new).show();",
          "37:             $(_old).show();",
          "38:         }",
          "39:         else if (what == 'new') {",
          "40:             $(_new).show();",
          "41:             $(_old).hide();",
          "42:         }",
          "43:     },",
          "44:     toggleMaster: function (master, e) {",
          "45:         if (master === null) {",
          "46:             return false;",
          "47:         }",
          "48:         if (e != undefined) {",
          "49:             mw.event.cancel(e);",
          "50:         }",
          "51:         var _new = master.parentNode.querySelector('.new-comments');",
          "52:         var _old = master.parentNode.querySelector('.old-comments');",
          "53:         if ($(_new).is(\":visible\") || $(_old).is(\":visible\")) {",
          "54:             $([_new, _old]).hide();",
          "55:             $(master).removeClass(\"active\");",
          "56:         }",
          "57:         else {",
          "58:             $([_new, _old]).show();",
          "59:             $(master).addClass(\"active\");",
          "60:             var is_cont = $(master).attr('content-id')",
          "61:             if (typeof is_cont != \"undefined\") {",
          "62:                 var mark_as_old = {}",
          "63:                 mark_as_old.content_id = is_cont;",
          "64:                 $.post(mw.settings.api_url+'mark_comments_as_old', mark_as_old, function (data) {",
          "66:                 });",
          "67:             }",
          "68:         }",
          "69:     },",
          "70:     mark_as_spam:function($comment_id){",
          "72:     }",
          "73: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/edit_comments.js||userfiles/modules/comments/edit_comments.js": [
          "File: userfiles/modules/comments/edit_comments.js -> userfiles/modules/comments/edit_comments.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: mw.edit_comments = {",
          "6:     save_form: function (form_id) {",
          "9:         mw.form.post(form_id, url)",
          "10:         mw.notification.success('Comment saved')",
          "11:     },",
          "13:     mark_as_spam: function (comment_id) {",
          "15:         var conf = confirm('Are you sure you want to mark this comment as spam?');",
          "16:         if (conf) {",
          "17:             var data = {};",
          "18:             data.comment_id = comment_id;",
          "19:             $.post(url, data, function (data) {",
          "20:                 mw.notification.success('Comment is marked as spam')",
          "",
          "[Removed Lines]",
          "7:         var url = mw.settings.api_url + 'post_comment';",
          "14:         var url = mw.settings.api_url + 'mark_comment_as_spam';",
          "",
          "[Added Lines]",
          "6:     api_url : '',",
          "9:         var url = this.api_url;",
          "16:         var url = this.api_url;",
          "21:             data.action = 'spam';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     },",
          "26:     delete: function (comment_id) {",
          "28:         var conf = confirm('Are you sure you want to delete this comment?');",
          "29:         if (conf) {",
          "30:             var data = {};",
          "",
          "[Removed Lines]",
          "27:         var url = mw.settings.api_url + 'post_comment';",
          "",
          "[Added Lines]",
          "30:         var url = this.api_url;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:     publish: function (comment_id) {",
          "42:         var conf = true;",
          "43:         if (conf) {",
          "44:             var data = {};",
          "",
          "[Removed Lines]",
          "41:         var url = mw.settings.api_url + 'post_comment';",
          "",
          "[Added Lines]",
          "44:         var url = this.api_url;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "51:     },",
          "53:     unpublish: function (comment_id) {",
          "55:         var conf = true;",
          "56:         if (conf) {",
          "57:             var data = {};",
          "",
          "[Removed Lines]",
          "54:         var url = mw.settings.api_url + 'post_comment';",
          "",
          "[Added Lines]",
          "57:         var url = this.api_url;",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/functions.php||userfiles/modules/comments/functions.php": [
          "File: userfiles/modules/comments/functions.php -> userfiles/modules/comments/functions.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "2: if (!defined(\"MODULE_DB_COMMENTS\")) {",
          "3:     define('MODULE_DB_COMMENTS', 'comments');",
          "4: }",
          "6: require_once(__DIR__ . DS . 'vendor' . DS . 'autoload.php');",
          "20: api_expose_admin('mark_comment_post_notifications_as_read', function ($params) {",
          "",
          "[Removed Lines]",
          "8: api_expose_admin('mark_comment_as_spam', function ($params) {",
          "9:     $comments = new \\Microweber\\Comments\\Models\\Comments();",
          "10:     return $comments->mark_as_spam($params);",
          "12: });",
          "15: api_expose_admin('mark_comments_as_old', function ($params) {",
          "16:     $comments = new \\Microweber\\Comments\\Models\\Comments();",
          "17:     return $comments->mark_as_old($params);",
          "18: });",
          "",
          "[Added Lines]",
          "3: use MicroweberPackages\\App\\Http\\RequestRoute;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     if (mw()->user_manager->session_id() == $commentSessionId) {",
          "90:     }",
          "92: });",
          "116: event_bind(",
          "",
          "[Removed Lines]",
          "70:         $newCommentData = array();",
          "71:         $newCommentData['id'] = $params['comment_id'];",
          "73:         $commentBody = $params['comment_body'];",
          "76:         $commentBody = mw()->format->clean_html($commentBody);",
          "79:         $evil = ['(?<!\\w)on\\w*', 'xmlns', 'formaction', 'xlink:href', 'FSCommand', 'seekSegmentTime'];",
          "80:         $commentBody = mw()->format->clean_xss($commentBody, true, $evil, 'removeEvilAttributes');",
          "82:         $commentBody = GrahamCampbell\\Markdown\\Facades\\Markdown::convertToHtml($commentBody);",
          "84:         $newCommentData['comment_body'] = $commentBody;",
          "85:         $newCommentData['allow_html'] = '1';",
          "86:         $newCommentData['allow_scripts'] = '1';",
          "88:         mw()->database_manager->save('comments', $newCommentData);",
          "97: api_expose('post_comment');",
          "98: function post_comment($data)",
          "99: {",
          "101:     $comments = new \\Microweber\\Comments\\Models\\Comments();",
          "102:     $comment_id = $comments->save($data);",
          "104:     return $comment_id;",
          "106: }",
          "108: function get_comments($params = false)",
          "109: {",
          "110:     $comments = new \\Microweber\\Comments\\Models\\Comments();",
          "112:     return $comments->get($params);",
          "113: }",
          "",
          "[Added Lines]",
          "73:         $commentData = RequestRoute::postJson(",
          "74:             route('api.comment.post'),",
          "75:             $params",
          "76:         );",
          "78:         return $commentData;",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/index.php||userfiles/modules/comments/index.php": [
          "File: userfiles/modules/comments/index.php -> userfiles/modules/comments/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:                 }",
          "319:                 mw.comments_is_saving = true;",
          "321:                     function (msg) {",
          "322:                         mw.comments_is_saving = false;",
          "323:                         var resp = this;",
          "",
          "[Removed Lines]",
          "320:                 mw.form.post('form#comments-form-<?php print $params['id'] ?>', '<?php print api_link('post_comment'); ?>',",
          "",
          "[Added Lines]",
          "319:                 mw.form.post('form#comments-form-<?php print $params['id'] ?>', '<?php print route('api.comment.post'); ?>',",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/src/Models/Comments.php||userfiles/modules/comments/src/Models/Comments.php": [
          "File: userfiles/modules/comments/src/Models/Comments.php -> userfiles/modules/comments/src/Models/Comments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     }",
          "439: }",
          "",
          "[Removed Lines]",
          "83:     public function save($data)",
          "84:     {",
          "86:         $adm = is_admin();",
          "88:         $table = MODULE_DB_COMMENTS;",
          "89:         mw_var('FORCE_SAVE', $table);",
          "91:         if (isset($data['id'])) {",
          "92:             if ($adm == false) {",
          "93:                 mw_error('Error: Only admin can edit comments!');",
          "94:             }",
          "95:         }",
          "96:         if (!isset($data['rel_type']) and isset($data['rel'])) {",
          "97:             $data['rel_type'] = $data['rel'];",
          "98:         }",
          "100:         if (isset($data['reply_to_comment_id'])) {",
          "101:             $old_comment = $this->get_by_id($data['reply_to_comment_id']);",
          "102:             $data['id'] = 0;",
          "103:             if (!$old_comment) {",
          "104:                 return array('error' => 'Error: invalid data');",
          "105:             }",
          "106:             if (isset($old_comment['rel_type'])) {",
          "107:                 $data['rel_type'] = $old_comment['rel_type'];",
          "108:             }",
          "109:             if (isset($old_comment['rel_id'])) {",
          "110:                 $data['rel_id'] = $old_comment['rel_id'];",
          "111:             }",
          "114:         }",
          "115:         if ($adm == true and !isset($data['id']) and !isset($data['is_moderated'])) {",
          "116:             $data['is_moderated'] = 1;",
          "117:         } else {",
          "118:             $require_moderation = get_option('require_moderation', 'comments');",
          "119:             if ($require_moderation != 'y') {",
          "120:                 $data['is_moderated'] = 1;",
          "121:             }",
          "122:         }",
          "123:         if (isset($data['action']) and isset($data['id'])) {",
          "124:             if ($adm == false) {",
          "125:                 mw_error('Error: Only admin can edit comments!');",
          "126:             } else {",
          "127:                 $action = strtolower($data['action']);",
          "129:                 switch ($action) {",
          "130:                     case 'publish' :",
          "131:                         $data['is_moderated'] = 1;",
          "132:                         $data['is_spam'] = 0;",
          "135:                         break;",
          "136:                     case 'unpublish' :",
          "137:                         $data['is_moderated'] = 0;",
          "139:                         break;",
          "140:                     case 'spam' :",
          "141:                         $data['is_moderated'] = 0;",
          "142:                         $data['is_spam'] = 1;",
          "144:                         break;",
          "146:                     case 'delete' :",
          "147:                         $del = mw()->database_manager->delete_by_id($table, $id = intval($data['id']), $field_name = 'id');",
          "148:                         return $del;",
          "149:                         break;",
          "151:                     default :",
          "152:                         break;",
          "153:                 }",
          "155:             }",
          "156:         } else {",
          "158:             if (!isset($data['rel_type'])) {",
          "159:                 return array('error' => 'Error: invalid data rel_type');",
          "160:             }",
          "161:             if (!isset($data['rel_id'])) {",
          "162:                 return array('error' => 'Error: invalid data rel_id');",
          "163:             } else {",
          "164:                 if (trim($data['rel_id']) == '') {",
          "165:                     return array('error' => 'Error: invalid data rel_id');",
          "166:                 }",
          "167:             }",
          "169:             if (!is_admin()) {",
          "172:                 $needs_terms = get_option('require_terms', 'comments') == 'y';",
          "175:                 if ($needs_terms) {",
          "176:                     $user_id_or_email = $this->app->user_manager->id();",
          "177:                     if (!$user_id_or_email) {",
          "178:                         if (isset($data['comment_email'])) {",
          "179:                             $user_id_or_email = $data['comment_email'];",
          "180:                         }",
          "181:                     }",
          "183:                     if (!$user_id_or_email) {",
          "184:                         $checkout_errors['comments_needs_email'] = _e('You must provide email address', true);",
          "185:                     } else {",
          "186:                         $terms_and_conditions_name = 'terms_comments';",
          "188:                         $check_term = $this->app->user_manager->terms_check($terms_and_conditions_name, $user_id_or_email);",
          "189:                         if (!$check_term) {",
          "190:                             if (isset($data['terms']) and $data['terms']) {",
          "191:                                 $this->app->user_manager->terms_accept($terms_and_conditions_name, $user_id_or_email);",
          "192:                             } else {",
          "193:                                 return array(",
          "194:                                     'error' => _e('You must agree to terms and conditions', true),",
          "195:                                     'form_data_required' => 'terms',",
          "196:                                     'form_data_module' => 'users/terms'",
          "197:                                 );",
          "198:                             }",
          "199:                         }",
          "200:                     }",
          "201:                 }",
          "204:                 if (!isset($data['captcha'])) {",
          "205:                     return array(",
          "206:                         'error' => _e('Invalid captcha answer!', true),",
          "207:                         'captcha_error' => true,",
          "208:                         'form_data_required' => 'captcha',",
          "209:                         'form_data_module' => 'captcha'",
          "210:                     );",
          "212:                 } else {",
          "213:                     $validate_captcha = $this->app->captcha_manager->validate($data['captcha']);",
          "214:                     if (!$validate_captcha) {",
          "216:                         return array(",
          "217:                             'error' => _e('Invalid captcha answer!', true),",
          "218:                             'captcha_error' => true,",
          "219:                             'form_data_required' => 'captcha',",
          "220:                             'form_data_module' => 'captcha'",
          "221:                         );",
          "224:                     }",
          "225:                 }",
          "227:             }",
          "230:         }",
          "231:         if (!isset($data['id']) and isset($data['comment_body'])) {",
          "233:             if (!isset($data['comment_email']) and user_id() == 0) {",
          "234:                 return array('error' => 'You must type your email or be logged in order to comment.');",
          "235:             }",
          "237:             $data['from_url'] = mw()->url_manager->current(1);",
          "239:         }",
          "241:         if (!isset($data['comment_body'])) {",
          "242:          $data['comment_body'] = '';",
          "243:         }",
          "245:   $comment_body = $data['comment_body'];",
          "248:   $comment_body = $this->app->format->clean_html($comment_body);",
          "251:   $evil = ['(?<!\\w)on\\w*',   'xmlns', 'formaction',   'xlink:href', 'FSCommand', 'seekSegmentTime'];",
          "252:   $comment_body =  $this->app->format->clean_xss($comment_body, true, $evil, 'removeEvilAttributes');",
          "254:   $comment_body = Markdown::convertToHtml($comment_body);",
          "256:   $data['comment_body'] = $comment_body;",
          "257:   $data['allow_html'] = '1';",
          "258:   $data['allow_scripts'] = '1';",
          "260:   $saved_data_id = mw()->database_manager->save($table, $data);",
          "263:         if (!isset($data['id']) and isset($data['comment_body'])) {",
          "267:             $notif['module'] = \"comments\";",
          "268:             $notif['rel_type'] = $data['rel_type'];",
          "269:             $notif['rel_id'] = $data['rel_id'];",
          "270:             $notif['title'] = \"You have new comment\";",
          "271:             $notif['description'] = \"New comment is posted on \" . mw()->url_manager->current(1);",
          "272:             $notif['content'] = mw('format')->limit($data['comment_body'], 800);",
          "275:             $email_on_new_comment = get_option('email_on_new_comment', 'comments') == 'y';",
          "276:             $email_on_new_comment_value = get_option('email_on_new_comment_value', 'comments');",
          "278:             $newComment = \\MicroweberPackages\\Comment\\Comment::where('id',$saved_data_id)->first();",
          "279:            if ($newComment) {",
          "281:                event(new NewComment($newComment));",
          "283:                Notification::send(User::whereIsAdmin(1)->get(), new NewCommentNotification($newComment));",
          "285:                if ($email_on_new_comment == true) {",
          "287:                }",
          "289:            }",
          "292:             if ($email_on_new_comment == true) {",
          "293:                 $subject = \"You have new comment\";",
          "294:                 $data2 = $data;",
          "295:                 unset($data2['rel_type']);",
          "296:                 unset($data2['rel_id']);",
          "297:                 $data3 = array();",
          "298:                 foreach ($data2 as $key => $value) {",
          "299:                     $key2 = str_ireplace('comment_', ' ', $key);",
          "300:                     if ($key2 == 'body') {",
          "301:                         $key2 = 'text';",
          "302:                     }",
          "304:                     $data3[$key2] = nl2br($value);",
          "305:                 }",
          "308:                 $message = \"Hi, <br/> You have new comment posted on \" . mw()->url_manager->current(1) . ' <br /> ';",
          "309:                 $message .= \"IP:\" . user_ip() . ' <br /> ';",
          "310:                 $message .= mw('format')->array_to_ul($data3);",
          "312:                 $sender = new MailSender();",
          "313:                 $sender->setEmailTo($email_on_new_comment_value);",
          "314:                 $sender->setEmailSubject($subject);",
          "315:                 $sender->setEmailMessage($message);",
          "316:                 $sender->setEmailHostnameToSubject(1);",
          "317:                 $sender->send();",
          "318:             }",
          "321:         }",
          "323:         $get_comment = get_comments(\"single=1&id=\" . $saved_data_id);",
          "325:         if (isset($get_comment['is_subscribed_for_notification']) && isset($get_comment['is_sent_email'])) {",
          "327:          if ($get_comment['action'] == 'publish' && $get_comment['is_subscribed_for_notification'] == 1 && $get_comment['is_sent_email'] == 0) {",
          "330:           if (is_numeric($saved_data_id)) {",
          "331:            $emailJob = (new  \\Microweber\\Comments\\Jobs\\JobSendMailNotificationOnComment($saved_data_id))->onQueue('processing');",
          "332:            \\Queue::later(5, $emailJob);",
          "333:           }",
          "335:          }",
          "336:         }",
          "338:         return $saved_data_id;",
          "339:     }",
          "341:     public function mark_as_spam($data)",
          "342:     {",
          "344:         must_have_access();",
          "345:         if (isset($data['comment_id'])) {",
          "346:             $s = array();",
          "347:             $s['id'] = $data['comment_id'];",
          "348:             $s['is_moderated'] = 0;",
          "349:             $s['is_spam'] = 1;",
          "350:             $s['table'] =  $this->table;",
          "352:             $s = mw()->database_manager->save($s);",
          "353:             if ($s) {",
          "354:                 $this->__report_for_spam($s);",
          "355:             }",
          "358:         }",
          "361:     }",
          "363:     public function mark_as_old($data)",
          "364:     {",
          "366:         must_have_access();",
          "368:         if (isset($data['content_id'])) {",
          "369:             $table = MODULE_DB_COMMENTS;",
          "370:             mw_var('FORCE_SAVE', $table);",
          "371:             $data['is_new'] = 1;",
          "372:             $get_comm = get_comments($data);",
          "373:             if (!empty($get_comm)) {",
          "374:                 foreach ($get_comm as $get_com) {",
          "375:                     $upd = array();",
          "376:                     $upd['is_new'] = 0;",
          "378:                     $upd['id'] = $get_com['id'];",
          "379:                     $upd['rel_type'] = 'content';",
          "380:                     $upd['rel_id'] = mw()->database_manager->escape_string($data['content_id']);",
          "381:                     mw()->database_manager->save($table, $upd);",
          "382:                 }",
          "383:             }",
          "384:             return $get_comm;",
          "386:         }",
          "388:     }",
          "391:     private function __report_for_spam($comment_id)",
          "392:     {",
          "394:         $comment = $this->get_by_id($comment_id);",
          "395:         $report_url = 'https://spamchecker.microweberapi.com/';",
          "397:         if ($comment) {",
          "398:             $report = array();",
          "399:             $report['site_url'] = site_url();",
          "400:             $report['from_url'] = $comment['from_url'];",
          "401:             $report['is_spam'] = 1;",
          "402:             if (isset($comment['user_ip']) and $comment['user_ip']) {",
          "403:                 $report['ip'] = trim($comment['user_ip']);",
          "404:             }",
          "405:             if (isset($comment['comment_email']) and $comment['comment_email']) {",
          "406:                 $report['email'] = trim($comment['comment_email']);",
          "407:             }",
          "408:             if (isset($comment['created_by']) and $comment['created_by']) {",
          "409:                 $report['is_logged'] = true;",
          "410:                 $report['user_id'] = $comment['created_by'];",
          "411:             }",
          "412:             if (isset($comment['comment_name']) and $comment['comment_name']) {",
          "413:                 $report['comment_name'] = $comment['comment_name'];",
          "414:             }",
          "415:             if (isset($comment['comment_body']) and $comment['comment_body']) {",
          "416:                 $report['comment_body'] = $comment['comment_body'];",
          "417:             }",
          "418:             if (isset($comment['comment_website']) and $comment['comment_website']) {",
          "419:                 $report['comment_website'] = $comment['comment_website'];",
          "420:             }",
          "421:             if (isset($comment['comment_subject']) and $comment['comment_subject']) {",
          "422:                 $report['comment_subject'] = $comment['comment_subject'];",
          "423:             }",
          "425:             if (isset($comment['rel_type']) and $comment['rel_type']) {",
          "426:                 $report['rel_type'] = $comment['rel_type'];",
          "427:             }",
          "428:             if (isset($comment['rel_id']) and $comment['rel_id']) {",
          "429:                 $report['rel_id'] = $comment['rel_id'];",
          "430:             }",
          "431:             $http = new \\MicroweberPackages\\Utils\\Http\\Http();",
          "432:             $http->url($report_url);",
          "433:             $http->set_timeout(10);",
          "434:             return $http->post($report);",
          "436:         }",
          "437:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/src/views/admin.php||userfiles/modules/comments/src/views/admin.php": [
          "File: userfiles/modules/comments/src/views/admin.php -> userfiles/modules/comments/src/views/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: <?php",
          "5: ?>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/src/views/backend.php||userfiles/modules/comments/src/views/backend.php": [
          "File: userfiles/modules/comments/src/views/backend.php -> userfiles/modules/comments/src/views/backend.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:                             if (conf) {",
          "114:                                 var id = form.attr('id');",
          "115:                                 var data = form.serialize();",
          "117:                                     mw.reload_module('#mw_comments_for_post_' + connected_id, function () {",
          "118:                                         $('#mw_comments_for_post_' + connected_id).find(\".comments-holder,.new-comments,.old-comments\").show();",
          "119:                                     });",
          "",
          "[Removed Lines]",
          "116:                                 $.post(\"<?php print api_link('post_comment'); ?>\", data, function (data) {",
          "",
          "[Added Lines]",
          "116:                                 $.post(\"<?php print route('api.comment.post'); ?>\", data, function (data) {",
          "",
          "---------------"
        ],
        "userfiles/modules/comments/src/views/comments_list.php||userfiles/modules/comments/src/views/comments_list.php": [
          "File: userfiles/modules/comments/src/views/comments_list.php -> userfiles/modules/comments/src/views/comments_list.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     $(document).ready(function () {",
          "81:         $('.new-close', '#<?php print $params['id'] ?>').on('click', function (e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         mw.edit_comments.api_url = '<?php print route('api.comment.admin.edit') ?>';",
          "",
          "---------------"
        ],
        "userfiles/modules/site_stats/dashboard_recent_comments.php||userfiles/modules/site_stats/dashboard_recent_comments.php": [
          "File: userfiles/modules/site_stats/dashboard_recent_comments.php -> userfiles/modules/site_stats/dashboard_recent_comments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     save_comment_form = function (form_id) {",
          "99:         mw.notification.success('Comment saved')",
          "100:     }",
          "",
          "[Removed Lines]",
          "98:         mw.form.post(form_id, '<?php print api_link('post_comment'); ?>')",
          "",
          "[Added Lines]",
          "98:         mw.form.post(form_id, '<?php print route('api.comment.admin.edit'); ?>')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdf1565dc42346c8bc0a73f3a53242973737fcd0",
      "candidate_info": {
        "commit_hash": "bdf1565dc42346c8bc0a73f3a53242973737fcd0",
        "repo": "microweber/microweber",
        "commit_url": "https://github.com/microweber/microweber/commit/bdf1565dc42346c8bc0a73f3a53242973737fcd0",
        "files": [
          "src/MicroweberPackages/App/Managers/UpdateManager.php",
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "src/MicroweberPackages/Install/Http/Controllers/InstallController.php",
          "src/MicroweberPackages/Package/tests/PackageManagerTest.php"
        ],
        "message": "fix package manager unit test",
        "before_after_code_files": [
          "src/MicroweberPackages/App/Managers/UpdateManager.php||src/MicroweberPackages/App/Managers/UpdateManager.php",
          "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "src/MicroweberPackages/Install/Http/Controllers/InstallController.php||src/MicroweberPackages/Install/Http/Controllers/InstallController.php",
          "src/MicroweberPackages/Package/tests/PackageManagerTest.php||src/MicroweberPackages/Package/tests/PackageManagerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ],
          "candidate": [
            "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MicroweberPackages/App/Managers/UpdateManager.php||src/MicroweberPackages/App/Managers/UpdateManager.php": [
          "File: src/MicroweberPackages/App/Managers/UpdateManager.php -> src/MicroweberPackages/App/Managers/UpdateManager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace MicroweberPackages\\App\\Managers;",
          "5: use Illuminate\\Support\\Facades\\Config;",
          "7: use MicroweberPackages\\Package\\MicroweberComposerClient;",
          "9: if (defined('INI_SYSTEM_CHECK_DISABLED') == false) {",
          "",
          "[Removed Lines]",
          "6: use MicroweberPackages\\Package\\ComposerUpdate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Comment/Models/CommentsCrud.php||src/MicroweberPackages/Comment/Models/CommentsCrud.php": [
          "File: src/MicroweberPackages/Comment/Models/CommentsCrud.php -> src/MicroweberPackages/Comment/Models/CommentsCrud.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:                     $comment_body = $clearInput->onlyTags($comment_body);",
          "64:                     $pq = \\phpQuery::newDocument($comment_body);",
          "66:                     $comment_body = $pq->htmlOuter();",
          "68:                     $comments[$i]['comment_body'] = $comment_body;",
          "",
          "[Removed Lines]",
          "65:                     $pq->find('a')->attr('rel','nofollow ugc');",
          "",
          "[Added Lines]",
          "65:                     $pq->find('a')",
          "66:                         ->attr('rel','nofollow ugc')",
          "67:                         ->attr('target','_blank');",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Install/Http/Controllers/InstallController.php||src/MicroweberPackages/Install/Http/Controllers/InstallController.php": [
          "File: src/MicroweberPackages/Install/Http/Controllers/InstallController.php -> src/MicroweberPackages/Install/Http/Controllers/InstallController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: use MicroweberPackages\\Translation\\TranslationPackageInstallHelper;",
          "18: use MicroweberPackages\\User\\Models\\User;",
          "19: use MicroweberPackages\\Utils\\Http\\Http;",
          "21: use MicroweberPackages\\View\\View;",
          "22: use MicroweberPackages\\Install;",
          "",
          "[Removed Lines]",
          "20: use MicroweberPackages\\Package\\ComposerUpdate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/MicroweberPackages/Package/tests/PackageManagerTest.php||src/MicroweberPackages/Package/tests/PackageManagerTest.php": [
          "File: src/MicroweberPackages/Package/tests/PackageManagerTest.php -> src/MicroweberPackages/Package/tests/PackageManagerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class PackageManagerTest extends \\MicroweberPackages\\Core\\tests\\TestCase",
          "5: {",
          "9:     public $skip = false;",
          "11:     public function __construct()",
          "",
          "[Removed Lines]",
          "6:     public $repos = [",
          "7:         [\"type\" => \"composer\", \"url\" => \"https://packages-phpunit.microweberapi.com/\"]",
          "8:     ];",
          "",
          "[Added Lines]",
          "6:     public $repoUrl = 'https://packages-phpunit.microweberapi.com/';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         if ($this->skip) {",
          "22:             $this->markTestSkipped('Skipping package manager test for this server configuration!');",
          "23:         }",
          "36:         $this->assertNotEmpty($results);",
          "37:     }",
          "",
          "[Removed Lines]",
          "25:         $params= [];",
          "26:         $params['keyword'] = 'dream';",
          "28:         $runner = new \\MicroweberPackages\\Package\\ComposerUpdate($this->_getComposerPath());",
          "30:         $runner->setRepos($this->repos);",
          "31:         $runner->setTargetPath($this->_getTargetPath());",
          "32:         $runner->setComposerHome(dirname(__DIR__) . '/cache');",
          "34:         $results = $runner->searchPackages($params);",
          "",
          "[Added Lines]",
          "23:         $params = [];",
          "24:         $params['require_name'] = 'microweber-templates/dream';",
          "26:         $runner = new \\MicroweberPackages\\Package\\MicroweberComposerClient();",
          "27:         $runner->packageServers = [$this->repoUrl];",
          "29:         $results = $runner->search($params);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:             $this->markTestSkipped('Skipping package manager test for this server configuration!');",
          "43:         }",
          "47:         $require_name = \"microweber-templates/dream\";",
          "48:         $params['require_name'] = $require_name;",
          "60:         $this->assertNotEmpty($results);",
          "61:         $this->assertEquals($results[\"error\"], \"Please confirm installation\");",
          "",
          "[Removed Lines]",
          "50:         $runner = new \\MicroweberPackages\\Package\\ComposerUpdate($this->_getComposerPath());",
          "53:         $runner->setRepos($this->repos);",
          "54:         $runner->setTargetPath($this->_getTargetPath());",
          "55:         $runner->setComposerHome(dirname(__DIR__) . '/cache');",
          "57:         $results = $runner->installPackageByName($params);",
          "",
          "[Added Lines]",
          "43:         $runner = new \\MicroweberPackages\\Package\\MicroweberComposerClient();",
          "44:         $runner->packageServers = [$this->repoUrl];",
          "46:         $results = $runner->requestInstall($params);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:         $this->assertNotEmpty($results[\"form_data_module_params\"][\"confirm_key\"]);",
          "84:     }",
          "86:     private function isOnline()",
          "",
          "[Removed Lines]",
          "74:     }",
          "76:     private function _getComposerPath()",
          "77:     {",
          "78:         return dirname(__DIR__) . '/';",
          "79:     }",
          "81:     private function _getTargetPath()",
          "82:     {",
          "83:         return dirname(__DIR__);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:             return true;",
          "99:         }",
          "102:     }",
          "",
          "[Removed Lines]",
          "103: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}