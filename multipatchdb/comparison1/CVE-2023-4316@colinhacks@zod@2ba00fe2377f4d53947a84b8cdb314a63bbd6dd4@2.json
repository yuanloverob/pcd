{
  "cve_id": "CVE-2023-4316",
  "cve_desc": "Zod in versions 3.21.0 up to and including 3.22.3 allows an attacker to perform a denial of service while validating emails.",
  "repo": "colinhacks/zod",
  "patch_hash": "2ba00fe2377f4d53947a84b8cdb314a63bbd6dd4",
  "patch_info": {
    "commit_hash": "2ba00fe2377f4d53947a84b8cdb314a63bbd6dd4",
    "repo": "colinhacks/zod",
    "commit_url": "https://github.com/colinhacks/zod/commit/2ba00fe2377f4d53947a84b8cdb314a63bbd6dd4",
    "files": [
      "deno/lib/README.md",
      "deno/lib/__tests__/string.test.ts",
      "deno/lib/types.ts",
      "src/__tests__/string.test.ts",
      "src/types.ts"
    ],
    "message": "[2609] fix ReDoS vulnerability in email regex (#2824)",
    "before_after_code_files": [
      "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
      "deno/lib/types.ts||deno/lib/types.ts",
      "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
      "src/types.ts||src/types.ts"
    ]
  },
  "patch_diff": {
    "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
      "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "146:     `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
      "147:     `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
      "148:     `test@.com`,",
      "149:   ];",
      "150:   const emailSchema = z.string().email();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "149:     `aaaaaaaaaaaaaaalongemailthatcausesregexDoSvulnerability@test.c`",
      "",
      "---------------"
    ],
    "deno/lib/types.ts||deno/lib/types.ts": [
      "File: deno/lib/types.ts -> deno/lib/types.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "567: const emailRegex =",
      "",
      "[Removed Lines]",
      "568:   /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "[Added Lines]",
      "568:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "---------------"
    ],
    "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
      "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:     `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
      "146:     `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
      "147:     `test@.com`,",
      "148:   ];",
      "149:   const emailSchema = z.string().email();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:     `aaaaaaaaaaaaaaalongemailthatcausesregexDoSvulnerability@test.c`",
      "",
      "---------------"
    ],
    "src/types.ts||src/types.ts": [
      "File: src/types.ts -> src/types.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "567: const emailRegex =",
      "",
      "[Removed Lines]",
      "568:   /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "[Added Lines]",
      "568:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36fef58410f4b2c9e79edabae2fc567a4aee13a7",
      "candidate_info": {
        "commit_hash": "36fef58410f4b2c9e79edabae2fc567a4aee13a7",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/36fef58410f4b2c9e79edabae2fc567a4aee13a7",
        "files": [
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "playground.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "Make email regex reasonable (#2157)\n\n* Remove logging\n\n* Clean up email testsg\n\n* Add back 1char tld test\n\n* Final tweaks to email regex\n\n* Fix test\n\n* Update test",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "playground.ts||playground.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: });",
          "41: test(\"email validations\", () => {",
          "57:   const validEmails = [",
          "58:     `very.common@example.com`,",
          "59:     `disposable.style.email.with+symbol@example.com`,",
          "60:     `other.email-with-hyphen@example.com`,",
          "61:     `fully-qualified-domain@example.com`,",
          "62:     `user.name+tag+sorting@example.com`,",
          "63:     `x@example.com`,",
          "64:     `example-indeed@strange-example.com`,",
          "66:     `example@s.example`,",
          "72:     `user-@example.org`,",
          "74:     `user@my-example.com`,",
          "75:     `a@b.cd`,",
          "76:     `work+user@mail.com`,",
          "77:     `user@[68.185.127.196]`,",
          "78:     `ipv4@[85.129.96.247]`,",
          "79:     `valid@[79.208.229.53]`,",
          "80:     `valid@[255.255.255.255]`,",
          "81:     `valid@[255.0.55.2]`,",
          "82:     `valid@[255.0.55.2]`,",
          "83:     `hgrebert0@[IPv6:4dc8:ac7:ce79:8878:1290:6098:5c50:1f25]`,",
          "84:     `bshapiro4@[IPv6:3669:c709:e981:4884:59a3:75d1:166b:9ae]`,",
          "85:     `jsmith@[IPv6:2001:db8::1]`,",
          "86:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:7334]`,",
          "87:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:192.168.1.1]`,",
          "96:     `Abc.example.com`,",
          "97:     `A@b@c@example.com`,",
          "98:     `a\"b(c)d,e:f;g<h>i[j\\k]l@example.com`,",
          "99:     `just\"not\"right@example.com`,",
          "100:     `this is\"not\\allowed@example.com`,",
          "101:     `this\\ still\\\"not\\\\allowed@example.com`,",
          "102:     `i_like_underscore@but_its_not_allowed_in_this_part.example.com`,",
          "103:     `QA[icon]CHOCOLATE[icon]@test.com`,",
          "104:     `invalid@-start.com`,",
          "105:     `invalid@end.com-`,",
          "106:     `invalid@[1.1.1.-1]`,",
          "107:     `invalid@[68.185.127.196.55]`,",
          "108:     `temp@[192.168.1]`,",
          "",
          "[Removed Lines]",
          "42:   const email = z.string().email();",
          "43:   email.parse(\"mojojojo@example.com\");",
          "44:   expect(() => email.parse(\"asdf\")).toThrow();",
          "45:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "46:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "47:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "48:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "49:   expect(() => email.parse(\"asdf@-a(sdf.com\")).toThrow();",
          "50:   expect(() => email.parse(\"asdf@-asdf.com(\")).toThrow();",
          "51:   expect(() =>",
          "52:     email.parse(\"pawan.anand@%9y83&#$%R&#$%R&%#$R%%^^%5rw3ewe.d.d.aaaa.wef.co\")",
          "53:   ).toThrow();",
          "54: });",
          "56: test(\"more email validations\", () => {",
          "65:     `test/test@test.com`,",
          "67:     `\" \"@example.org`,",
          "68:     `\"john..doe\"@example.org`,",
          "69:     `mailhost!username@example.org`,",
          "70:     `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "71:     `user%example.com@example.org`,",
          "73:     `postmaster@[123.123.123.123]`,",
          "88:     `test@any.th1ng.com`,",
          "89:     `me@y.z.com`,",
          "90:     `me@y.z.co.jp`,",
          "91:     `example@subdomain.hyphenated-domain.com`,",
          "92:     `example@atlanta.k12.ga.us`,",
          "93:     `a.b@c.d`,",
          "94:   ];",
          "95:   const invalidEmails = [",
          "",
          "[Added Lines]",
          "43:     `email@domain.com`,",
          "44:     `firstname.lastname@domain.com`,",
          "45:     `email@subdomain.domain.com`,",
          "46:     `firstname+lastname@domain.com`,",
          "47:     `1234567890@domain.com`,",
          "48:     `email@domain-one.com`,",
          "49:     `_______@domain.com`,",
          "50:     `email@domain.name`,",
          "51:     `email@domain.co.jp`,",
          "52:     `firstname-lastname@domain.com`,",
          "59:     `mojojojo@asdf.example.com`,",
          "66:     `tom@test.te-st.com`,",
          "67:     `something@subdomain.domain-with-hyphens.tld`,",
          "68:     `francois@etu.inp-n7.fr`,",
          "69:   ];",
          "70:   const invalidEmails = [",
          "77:     `francois@@etu.inp-n7.fr`,",
          "79:     `\"email\"@domain.com`,",
          "80:     `\"e asdf sadf ?<>ail\"@domain.com`,",
          "81:     `\" \"@example.org`,",
          "82:     `\"john..doe\"@example.org`,",
          "83:     `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "86:     `email@123.123.123.123`,",
          "87:     `email@[123.123.123.123]`,",
          "88:     `postmaster@123.123.123.123`,",
          "104:     `plainaddress`,",
          "105:     `#@%^%#$@#$@#.com`,",
          "106:     `@domain.com`,",
          "107:     `Joe Smith &lt;email@domain.com&gt;`,",
          "108:     `email.domain.com`,",
          "109:     `email@domain@domain.com`,",
          "110:     `.email@domain.com`,",
          "111:     `email.@domain.com`,",
          "112:     `email..email@domain.com`,",
          "113:     `\u3042\u3044\u3046\u3048\u304a@domain.com`,",
          "114:     `email@domain.com (Joe Smith)`,",
          "115:     `email@domain`,",
          "116:     `email@-domain.com`,",
          "117:     `email@111.222.333.44444`,",
          "118:     `email@domain..com`,",
          "121:     `colin..hacks@domain.com`,",
          "132:     `a.b@c.d`,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     `test@.com`,",
          "122:   ];",
          "123:   const emailSchema = z.string().email();",
          "124:   expect(",
          "126:   ).toBe(true);",
          "127:   expect(",
          "131:   ).toBe(true);",
          "132: });",
          "",
          "[Removed Lines]",
          "125:     validEmails.every((email) => emailSchema.safeParse(email).success)",
          "128:     invalidEmails.every(",
          "129:       (email) => emailSchema.safeParse(email).success === false",
          "130:     )",
          "",
          "[Added Lines]",
          "153:     validEmails.every((email) => {",
          "154:       return emailSchema.safeParse(email).success;",
          "155:     })",
          "158:     invalidEmails.every((email) => {",
          "159:       return emailSchema.safeParse(email).success === false;",
          "160:     })",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "555: const emailRegex =",
          "558: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "[Removed Lines]",
          "556:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]\\.?([A-Za-z0-9-]+\\.)*([A-Za-z0-9-])*[A-Za-z0-9]))$/;",
          "",
          "[Added Lines]",
          "561:   /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4176: export type Refinement<T> = (arg: T, ctx: RefinementCtx) => any;",
          "4179: export type RefinementEffect<T> = {",
          "4180:   type: \"refinement\";",
          "",
          "[Removed Lines]",
          "4177: export type SuperRefinement<T> = (arg: T, ctx: RefinementCtx) => void | Promise<void>;",
          "",
          "[Added Lines]",
          "4185: export type SuperRefinement<T> = (",
          "4186:   arg: T,",
          "4187:   ctx: RefinementCtx",
          "4188: ) => void | Promise<void>;",
          "",
          "---------------"
        ],
        "playground.ts||playground.ts": [
          "File: playground.ts -> playground.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { z } from \"./src\";",
          "2: z;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: const validEmails = [",
          "5:   `email@domain.com`,",
          "6:   `firstname.lastname@domain.com`,",
          "7:   `email@subdomain.domain.com`,",
          "8:   `firstname+lastname@domain.com`,",
          "9:   `1234567890@domain.com`,",
          "10:   `email@domain-one.com`,",
          "11:   `_______@domain.com`,",
          "12:   `email@domain.name`,",
          "13:   `email@domain.co.jp`,",
          "14:   `firstname-lastname@domain.com`,",
          "15:   `very.common@example.com`,",
          "16:   `disposable.style.email.with+symbol@example.com`,",
          "17:   `other.email-with-hyphen@example.com`,",
          "18:   `fully-qualified-domain@example.com`,",
          "19:   `user.name+tag+sorting@example.com`,",
          "20:   `x@example.com`,",
          "21:   `mojojojo@asdf.example.com`,",
          "22:   `example-indeed@strange-example.com`,",
          "23:   `example@s.example`,",
          "24:   `user-@example.org`,",
          "25:   `user@my-example.com`,",
          "26:   `a@b.cd`,",
          "27:   `work+user@mail.com`,",
          "28:   `tom@test.te-st.com`,",
          "29:   `something@subdomain.domain-with-hyphens.tld`,",
          "30:   `francois@etu.inp-n7.fr`,",
          "31: ];",
          "32: const invalidEmails = [",
          "39:   `francois@@etu.inp-n7.fr`,",
          "42:   `\"email\"@domain.com`,",
          "43:   `\"e asdf sadf ?<>ail\"@domain.com`,",
          "44:   `\" \"@example.org`,",
          "45:   `\"john..doe\"@example.org`,",
          "46:   `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "49:   `email@123.123.123.123`,",
          "50:   `email@[123.123.123.123]`,",
          "51:   `postmaster@123.123.123.123`,",
          "52:   `user@[68.185.127.196]`,",
          "53:   `ipv4@[85.129.96.247]`,",
          "54:   `valid@[79.208.229.53]`,",
          "55:   `valid@[255.255.255.255]`,",
          "56:   `valid@[255.0.55.2]`,",
          "57:   `valid@[255.0.55.2]`,",
          "60:   `hgrebert0@[IPv6:4dc8:ac7:ce79:8878:1290:6098:5c50:1f25]`,",
          "61:   `bshapiro4@[IPv6:3669:c709:e981:4884:59a3:75d1:166b:9ae]`,",
          "62:   `jsmith@[IPv6:2001:db8::1]`,",
          "63:   `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:7334]`,",
          "64:   `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:192.168.1.1]`,",
          "67:   `plainaddress`,",
          "68:   `#@%^%#$@#$@#.com`,",
          "69:   `@domain.com`,",
          "70:   `Joe Smith &lt;email@domain.com&gt;`,",
          "71:   `email.domain.com`,",
          "72:   `email@domain@domain.com`,",
          "73:   `.email@domain.com`,",
          "74:   `email.@domain.com`,",
          "75:   `email..email@domain.com`,",
          "76:   `\u3042\u3044\u3046\u3048\u304a@domain.com`,",
          "77:   `email@domain.com (Joe Smith)`,",
          "78:   `email@domain`,",
          "79:   `email@-domain.com`,",
          "80:   `email@111.222.333.44444`,",
          "81:   `email@domain..com`,",
          "82:   `Abc.example.com`,",
          "83:   `A@b@c@example.com`,",
          "84:   `colin..hacks@domain.com`,",
          "85:   `a\"b(c)d,e:f;g<h>i[j\\k]l@example.com`,",
          "86:   `just\"not\"right@example.com`,",
          "87:   `this is\"not\\allowed@example.com`,",
          "88:   `this\\ still\\\"not\\\\allowed@example.com`,",
          "91:   `i_like_underscore@but_its_not_allowed_in_this_part.example.com`,",
          "92:   `QA[icon]CHOCOLATE[icon]@test.com`,",
          "93:   `invalid@-start.com`,",
          "94:   `invalid@end.com-`,",
          "95:   `a.b@c.d`,",
          "96:   `invalid@[1.1.1.-1]`,",
          "97:   `invalid@[68.185.127.196.55]`,",
          "98:   `temp@[192.168.1]`,",
          "99:   `temp@[9.18.122.]`,",
          "100:   `double..point@test.com`,",
          "101:   `asdad@test..com`,",
          "102:   `asdad@hghg...sd...au`,",
          "103:   `asdad@hghg........au`,",
          "104:   `invalid@[256.2.2.48]`,",
          "105:   `invalid@[256.2.2.48]`,",
          "106:   `invalid@[999.465.265.1]`,",
          "107:   `jkibbey4@[IPv6:82c4:19a8::70a9:2aac:557::ea69:d985:28d]`,",
          "108:   `mlivesay3@[9952:143f:b4df:2179:49a1:5e82:b92e:6b6]`,",
          "109:   `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
          "110:   `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
          "111: ];",
          "113: const emailSchema = z.string().email();",
          "114: console.log(",
          "115:   validEmails.every((email) => {",
          "116:     const val = emailSchema.safeParse(email).success;",
          "117:     if (!val) console.log(`fail`, email);",
          "118:     return val;",
          "119:   })",
          "120: );",
          "125: for (const email of invalidEmails) {",
          "126:   try {",
          "127:     emailSchema.parse(email);",
          "128:     console.log(`PASS`, email);",
          "129:   } catch (_) {}",
          "130: }",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: });",
          "40: test(\"email validations\", () => {",
          "56:   const validEmails = [",
          "57:     `very.common@example.com`,",
          "58:     `disposable.style.email.with+symbol@example.com`,",
          "59:     `other.email-with-hyphen@example.com`,",
          "60:     `fully-qualified-domain@example.com`,",
          "61:     `user.name+tag+sorting@example.com`,",
          "62:     `x@example.com`,",
          "63:     `example-indeed@strange-example.com`,",
          "65:     `example@s.example`,",
          "71:     `user-@example.org`,",
          "73:     `user@my-example.com`,",
          "74:     `a@b.cd`,",
          "75:     `work+user@mail.com`,",
          "76:     `user@[68.185.127.196]`,",
          "77:     `ipv4@[85.129.96.247]`,",
          "78:     `valid@[79.208.229.53]`,",
          "79:     `valid@[255.255.255.255]`,",
          "80:     `valid@[255.0.55.2]`,",
          "81:     `valid@[255.0.55.2]`,",
          "82:     `hgrebert0@[IPv6:4dc8:ac7:ce79:8878:1290:6098:5c50:1f25]`,",
          "83:     `bshapiro4@[IPv6:3669:c709:e981:4884:59a3:75d1:166b:9ae]`,",
          "84:     `jsmith@[IPv6:2001:db8::1]`,",
          "85:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:7334]`,",
          "86:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:192.168.1.1]`,",
          "95:     `Abc.example.com`,",
          "96:     `A@b@c@example.com`,",
          "97:     `a\"b(c)d,e:f;g<h>i[j\\k]l@example.com`,",
          "98:     `just\"not\"right@example.com`,",
          "99:     `this is\"not\\allowed@example.com`,",
          "100:     `this\\ still\\\"not\\\\allowed@example.com`,",
          "101:     `i_like_underscore@but_its_not_allowed_in_this_part.example.com`,",
          "102:     `QA[icon]CHOCOLATE[icon]@test.com`,",
          "103:     `invalid@-start.com`,",
          "104:     `invalid@end.com-`,",
          "105:     `invalid@[1.1.1.-1]`,",
          "106:     `invalid@[68.185.127.196.55]`,",
          "107:     `temp@[192.168.1]`,",
          "",
          "[Removed Lines]",
          "41:   const email = z.string().email();",
          "42:   email.parse(\"mojojojo@example.com\");",
          "43:   expect(() => email.parse(\"asdf\")).toThrow();",
          "44:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "45:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "46:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "47:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "48:   expect(() => email.parse(\"asdf@-a(sdf.com\")).toThrow();",
          "49:   expect(() => email.parse(\"asdf@-asdf.com(\")).toThrow();",
          "50:   expect(() =>",
          "51:     email.parse(\"pawan.anand@%9y83&#$%R&#$%R&%#$R%%^^%5rw3ewe.d.d.aaaa.wef.co\")",
          "52:   ).toThrow();",
          "53: });",
          "55: test(\"more email validations\", () => {",
          "64:     `test/test@test.com`,",
          "66:     `\" \"@example.org`,",
          "67:     `\"john..doe\"@example.org`,",
          "68:     `mailhost!username@example.org`,",
          "69:     `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "70:     `user%example.com@example.org`,",
          "72:     `postmaster@[123.123.123.123]`,",
          "87:     `test@any.th1ng.com`,",
          "88:     `me@y.z.com`,",
          "89:     `me@y.z.co.jp`,",
          "90:     `example@subdomain.hyphenated-domain.com`,",
          "91:     `example@atlanta.k12.ga.us`,",
          "92:     `a.b@c.d`,",
          "93:   ];",
          "94:   const invalidEmails = [",
          "",
          "[Added Lines]",
          "42:     `email@domain.com`,",
          "43:     `firstname.lastname@domain.com`,",
          "44:     `email@subdomain.domain.com`,",
          "45:     `firstname+lastname@domain.com`,",
          "46:     `1234567890@domain.com`,",
          "47:     `email@domain-one.com`,",
          "48:     `_______@domain.com`,",
          "49:     `email@domain.name`,",
          "50:     `email@domain.co.jp`,",
          "51:     `firstname-lastname@domain.com`,",
          "58:     `mojojojo@asdf.example.com`,",
          "65:     `tom@test.te-st.com`,",
          "66:     `something@subdomain.domain-with-hyphens.tld`,",
          "67:     `francois@etu.inp-n7.fr`,",
          "68:   ];",
          "69:   const invalidEmails = [",
          "76:     `francois@@etu.inp-n7.fr`,",
          "78:     `\"email\"@domain.com`,",
          "79:     `\"e asdf sadf ?<>ail\"@domain.com`,",
          "80:     `\" \"@example.org`,",
          "81:     `\"john..doe\"@example.org`,",
          "82:     `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "85:     `email@123.123.123.123`,",
          "86:     `email@[123.123.123.123]`,",
          "87:     `postmaster@123.123.123.123`,",
          "103:     `plainaddress`,",
          "104:     `#@%^%#$@#$@#.com`,",
          "105:     `@domain.com`,",
          "106:     `Joe Smith &lt;email@domain.com&gt;`,",
          "107:     `email.domain.com`,",
          "108:     `email@domain@domain.com`,",
          "109:     `.email@domain.com`,",
          "110:     `email.@domain.com`,",
          "111:     `email..email@domain.com`,",
          "112:     `\u3042\u3044\u3046\u3048\u304a@domain.com`,",
          "113:     `email@domain.com (Joe Smith)`,",
          "114:     `email@domain`,",
          "115:     `email@-domain.com`,",
          "116:     `email@111.222.333.44444`,",
          "117:     `email@domain..com`,",
          "120:     `colin..hacks@domain.com`,",
          "131:     `a.b@c.d`,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     `test@.com`,",
          "121:   ];",
          "122:   const emailSchema = z.string().email();",
          "123:   expect(",
          "125:   ).toBe(true);",
          "126:   expect(",
          "130:   ).toBe(true);",
          "131: });",
          "",
          "[Removed Lines]",
          "124:     validEmails.every((email) => emailSchema.safeParse(email).success)",
          "127:     invalidEmails.every(",
          "128:       (email) => emailSchema.safeParse(email).success === false",
          "129:     )",
          "",
          "[Added Lines]",
          "152:     validEmails.every((email) => {",
          "153:       return emailSchema.safeParse(email).success;",
          "154:     })",
          "157:     invalidEmails.every((email) => {",
          "158:       return emailSchema.safeParse(email).success === false;",
          "159:     })",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "555: const emailRegex =",
          "558: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "[Removed Lines]",
          "556:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]\\.?([A-Za-z0-9-]+\\.)*([A-Za-z0-9-])*[A-Za-z0-9]))$/;",
          "",
          "[Added Lines]",
          "561:   /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4176: export type Refinement<T> = (arg: T, ctx: RefinementCtx) => any;",
          "4179: export type RefinementEffect<T> = {",
          "4180:   type: \"refinement\";",
          "",
          "[Removed Lines]",
          "4177: export type SuperRefinement<T> = (arg: T, ctx: RefinementCtx) => void | Promise<void>;",
          "",
          "[Added Lines]",
          "4185: export type SuperRefinement<T> = (",
          "4186:   arg: T,",
          "4187:   ctx: RefinementCtx",
          "4188: ) => void | Promise<void>;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15de22a3ba6144c7d8d2276e8e56174bcdfa7225",
      "candidate_info": {
        "commit_hash": "15de22a3ba6144c7d8d2276e8e56174bcdfa7225",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/15de22a3ba6144c7d8d2276e8e56174bcdfa7225",
        "files": [
          "deno/lib/README.md",
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "Allow subdomains and hyphens in `ZodString.email` (#2274)",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     `jsmith@[IPv6:2001:db8::1]`,",
          "86:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:7334]`,",
          "87:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:192.168.1.1]`,",
          "88:   ];",
          "89:   const invalidEmails = [",
          "90:     `Abc.example.com`,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     `test@any.th1ng.com`,",
          "89:     `me@y.z.com`,",
          "90:     `me@y.z.co.jp`,",
          "91:     `example@subdomain.hyphenated-domain.com`,",
          "92:     `example@atlanta.k12.ga.us`,",
          "93:     `a.b@c.d`,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     `QA[icon]CHOCOLATE[icon]@test.com`,",
          "98:     `invalid@-start.com`,",
          "99:     `invalid@end.com-`,",
          "101:     `invalid@[1.1.1.-1]`,",
          "102:     `invalid@[68.185.127.196.55]`,",
          "103:     `temp@[192.168.1]`,",
          "",
          "[Removed Lines]",
          "100:     `a.b@c.d`,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:     `mlivesay3@[9952:143f:b4df:2179:49a1:5e82:b92e:6b6]`,",
          "114:     `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
          "115:     `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
          "116:   ];",
          "117:   const emailSchema = z.string().email();",
          "118:   expect(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     `test@.com`,",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "553: const emailRegex =",
          "556: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "[Removed Lines]",
          "554:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;",
          "",
          "[Added Lines]",
          "554:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]\\.?([A-Za-z0-9-]+\\.)*([A-Za-z0-9-])*[A-Za-z0-9]))$/;",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     `jsmith@[IPv6:2001:db8::1]`,",
          "85:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:7334]`,",
          "86:     `postmaster@[IPv6:2001:0db8:85a3:0000:0000:8a2e:0370:192.168.1.1]`,",
          "87:   ];",
          "88:   const invalidEmails = [",
          "89:     `Abc.example.com`,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     `test@any.th1ng.com`,",
          "88:     `me@y.z.com`,",
          "89:     `me@y.z.co.jp`,",
          "90:     `example@subdomain.hyphenated-domain.com`,",
          "91:     `example@atlanta.k12.ga.us`,",
          "92:     `a.b@c.d`,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     `QA[icon]CHOCOLATE[icon]@test.com`,",
          "97:     `invalid@-start.com`,",
          "98:     `invalid@end.com-`,",
          "100:     `invalid@[1.1.1.-1]`,",
          "101:     `invalid@[68.185.127.196.55]`,",
          "102:     `temp@[192.168.1]`,",
          "",
          "[Removed Lines]",
          "99:     `a.b@c.d`,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     `mlivesay3@[9952:143f:b4df:2179:49a1:5e82:b92e:6b6]`,",
          "113:     `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
          "114:     `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
          "115:   ];",
          "116:   const emailSchema = z.string().email();",
          "117:   expect(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     `test@.com`,",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "553: const emailRegex =",
          "556: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "[Removed Lines]",
          "554:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;",
          "",
          "[Added Lines]",
          "554:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]\\.?([A-Za-z0-9-]+\\.)*([A-Za-z0-9-])*[A-Za-z0-9]))$/;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "827cb5d47af510a6704d7bfb111c19a6c71a6b81",
      "candidate_info": {
        "commit_hash": "827cb5d47af510a6704d7bfb111c19a6c71a6b81",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/827cb5d47af510a6704d7bfb111c19a6c71a6b81",
        "files": [
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "fix: #1668 email regex safari compat (#1683)",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   expect(() => email.parse(\"asdf\")).toThrow();",
          "39:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "40:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "43: });",
          "45: test(\"more email validations\", () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "42:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "43:   expect(() => email.parse(\"asdf@-a(sdf.com\")).toThrow();",
          "44:   expect(() => email.parse(\"asdf@-asdf.com(\")).toThrow();",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "518: const emailRegex =",
          "",
          "[Removed Lines]",
          "519:   /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;",
          "",
          "[Added Lines]",
          "519:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   expect(() => email.parse(\"asdf\")).toThrow();",
          "38:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "39:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "42: });",
          "44: test(\"more email validations\", () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "41:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "42:   expect(() => email.parse(\"asdf@-a(sdf.com\")).toThrow();",
          "43:   expect(() => email.parse(\"asdf@-asdf.com(\")).toThrow();",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "518: const emailRegex =",
          "",
          "[Removed Lines]",
          "519:   /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;",
          "",
          "[Added Lines]",
          "519:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfdfe5ce6a2376e5794ac3156c74f2234f48ba9f",
      "candidate_info": {
        "commit_hash": "bfdfe5ce6a2376e5794ac3156c74f2234f48ba9f",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/bfdfe5ce6a2376e5794ac3156c74f2234f48ba9f",
        "files": [
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "fix: emails with single quotes not being validated (#2889)",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     `work+user@mail.com`,",
          "66:     `tom@test.te-st.com`,",
          "67:     `something@subdomain.domain-with-hyphens.tld`,",
          "68:     `francois@etu.inp-n7.fr`,",
          "69:   ];",
          "70:   const invalidEmails = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     `common'name@domain.com`,",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: const emailRegex =",
          "",
          "[Removed Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "[Added Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     `work+user@mail.com`,",
          "65:     `tom@test.te-st.com`,",
          "66:     `something@subdomain.domain-with-hyphens.tld`,",
          "67:     `francois@etu.inp-n7.fr`,",
          "68:   ];",
          "69:   const invalidEmails = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     `common'name@domain.com`,",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: const emailRegex =",
          "",
          "[Removed Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "[Added Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccfbcf829330a65001435de585246b12b07498cd",
      "candidate_info": {
        "commit_hash": "ccfbcf829330a65001435de585246b12b07498cd",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/ccfbcf829330a65001435de585246b12b07498cd",
        "files": [
          "src/types.ts"
        ],
        "message": "export the email regex",
        "before_after_code_files": [
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;",
          "",
          "[Removed Lines]",
          "523: const emailRegex =",
          "",
          "[Added Lines]",
          "523: export const emailRegex =",
          "",
          "---------------"
        ]
      }
    }
  ]
}