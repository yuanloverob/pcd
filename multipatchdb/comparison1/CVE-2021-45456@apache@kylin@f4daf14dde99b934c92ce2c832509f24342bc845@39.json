{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af8c8fee7c98d7fb4b3ccd594ed0e8b200ff3e64",
      "candidate_info": {
        "commit_hash": "af8c8fee7c98d7fb4b3ccd594ed0e8b200ff3e64",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/af8c8fee7c98d7fb4b3ccd594ed0e8b200ff3e64",
        "files": [
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala"
        ],
        "message": "KYLIN-4818 Refine CuboidStatisticsJob to improve performance",
        "before_after_code_files": [
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java||core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java||core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.kylin.cube.CubeSegment;",
          "57: import org.apache.kylin.cube.cuboid.Cuboid;",
          "58: import org.apache.kylin.cube.cuboid.CuboidScheduler;",
          "60: import org.apache.kylin.cube.kv.RowKeyEncoder;",
          "61: import org.apache.kylin.cube.model.CubeDesc;",
          "62: import org.apache.kylin.measure.hllc.HLLCounter;",
          "",
          "[Removed Lines]",
          "59: import org.apache.kylin.cube.kv.CubeDimEncMap;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:         final List<Integer> rowkeyColumnSize = Lists.newArrayList();",
          "214:         final Cuboid baseCuboid = Cuboid.getBaseCuboid(cubeDesc);",
          "215:         final List<TblColRef> columnList = baseCuboid.getColumns();",
          "217:         final Long baseCuboidRowCount = rowCountMap.get(baseCuboid.getId());",
          "219:         for (int i = 0; i < columnList.size(); i++) {",
          "",
          "[Removed Lines]",
          "216:         final CubeDimEncMap dimEncMap = cubeSegment.getDimensionEncodingMap();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:                     baseCuboid.getId(), baseCuboidRowCount, rowkeyColumnSize, sourceRowCount));",
          "232:         }",
          "235:             optimizeSizeMap(sizeMap, cubeSegment);",
          "236:         }",
          "",
          "[Removed Lines]",
          "234:         if (origin == false && cubeSegment.getConfig().enableJobCuboidSizeOptimize()) {",
          "",
          "[Added Lines]",
          "232:         if (!origin && cubeSegment.getConfig().enableJobCuboidSizeOptimize()) {",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java||core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:     }",
          "543:     public String getPreciseStatisticsResourcePath() {",
          "545:     }",
          "547:     public static String getStatisticsResourcePath(String cubeName, String cubeSegmentId) {",
          "",
          "[Removed Lines]",
          "544:         return getStatisticsResourcePath(this.getCubeInstance().getName(), this.getUuid(), \".json\");",
          "",
          "[Added Lines]",
          "544:         return getStatisticsResourcePath(this.getCubeInstance().getName(), this.getUuid(), \"json\");",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java||core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java -> core-metadata/src/main/java/org/apache/kylin/measure/hllc/HLLCounter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     public void merge(HLLCounter another) {",
          "153:         assert this.p == another.p;",
          "155:         switch (register.getRegisterType()) {",
          "156:             case SINGLE_VALUE:",
          "157:                 switch (another.getRegisterType()) {",
          "",
          "[Removed Lines]",
          "154:         assert this.hashFunc == another.hashFunc;",
          "",
          "[Added Lines]",
          "154:         assert this.hashFunc.equals(another.hashFunc);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         }",
          "241:         try {",
          "242:             JavaSparkContext jsc = JavaSparkContext.fromSparkContext(ss.sparkContext());",
          "243:             JavaRDD<String> cuboidStatRdd = jsc.parallelize(cuboidStatics, 1);",
          "244:             for (String cuboid : cuboidStatics) {",
          "245:                 logger.info(\"Statistics \\t: {}\", cuboid);",
          "246:             }",
          "250:         } catch (Exception e) {",
          "251:             logger.error(\"Write metrics failed.\", e);",
          "252:         }",
          "",
          "[Removed Lines]",
          "247:             String path = config.getHdfsWorkingDirectory() + segment.getPreciseStatisticsResourcePath();",
          "248:             logger.info(\"Saving {} {}\", path, segmentInfo);",
          "249:             cuboidStatRdd.saveAsTextFile(path);",
          "",
          "[Added Lines]",
          "242:             FileSystem fs = HadoopUtil.getWorkingFileSystem();",
          "248:             String pathDir = config.getHdfsWorkingDirectory() + segment.getPreciseStatisticsResourcePath();",
          "249:             logger.info(\"Saving {} {} .\", pathDir, segmentInfo);",
          "250:             Path path = new Path(pathDir);",
          "251:             if (fs.exists(path)) {",
          "252:                 fs.delete(path, true);",
          "253:             }",
          "254:             cuboidStatRdd.saveAsTextFile(pathDir);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     val rkc = seg.allColumns.count(c => c.rowKey)",
          "44:     val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()",
          "46:     l",
          "47:   }",
          "48: }",
          "52:   private var allCuboidsBitSet: Array[Array[Integer]] = Array()",
          "53:   private val hf: HashFunction = Hashing.murmur3_128",
          "54:   private val rowHashCodesLong = new Array[Long](rkc)",
          "55:   private var idx = 0",
          "57:   private var meter2 = 0L",
          "58:   private var startMills = 0L",
          "59:   private var endMills = 0L",
          "",
          "[Removed Lines]",
          "42:     val res = inputDs.rdd",
          "43:       .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)",
          "50: class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {",
          "51:   private val info = mutable.Map[Long, AggInfo]()",
          "56:   private var meter1 = 0L",
          "",
          "[Added Lines]",
          "42:     val res = inputDs.rdd.repartition(inputDs.sparkSession.sparkContext.defaultParallelism)",
          "43:       .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId).toArray, rkc).statisticsWithinPartition)",
          "50: class CuboidStatisticsJob(ids: Array[Long], rkc: Int) extends Serializable {",
          "51:   private val info = mutable.LongMap[AggInfo]()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   def updateCuboid(r: Row): Unit = {",
          "88:     var idx = 0",
          "89:     while (idx < rkc) {",
          "90:       val hc = hf.newHasher",
          "94:       rowHashCodesLong(idx) = hc.putUnencodedChars(colValue).hash().padToLong() + idx",
          "95:       idx += 1",
          "96:     }",
          "101:     startMills = System.currentTimeMillis()",
          "",
          "[Removed Lines]",
          "87:     startMills = System.currentTimeMillis()",
          "91:       var colValue = r.get(idx).toString",
          "92:       if (colValue == null) colValue = \"0\"",
          "97:     endMills = System.currentTimeMillis()",
          "98:     meter1 += (endMills - startMills)",
          "",
          "[Added Lines]",
          "89:       val colValue = if (r.get(idx) == null) \"0\" else r.get(idx).toString",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:     while (idx < n) {",
          "106:       var value: Long = 0",
          "107:       var position = 0",
          "110:         position += 1",
          "111:       }",
          "112:       info(ids(idx)).cuboid.counter.addHashDirectly(value)",
          "",
          "[Removed Lines]",
          "108:       while (position < allCuboidsBitSet(idx).length) {",
          "109:         value += rowHashCodesLong(allCuboidsBitSet(idx)(position))",
          "",
          "[Added Lines]",
          "102:       val currCuboidBitSet = allCuboidsBitSet(idx)",
          "103:       val currCuboidLength = currCuboidBitSet.length",
          "104:       while (position < currCuboidLength) {",
          "105:         value += rowHashCodesLong(currCuboidBitSet(position))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:     meter2 += (endMills - startMills)",
          "117:   }",
          "120:     val allCuboidsBitSet: Array[Array[Integer]] = new Array[Array[Integer]](cuboidIds.length)",
          "121:     var j: Int = 0",
          "122:     while (j < cuboidIds.length) {",
          "",
          "[Removed Lines]",
          "119:   def getCuboidBitSet(cuboidIds: List[Long], nRowKey: Int): Array[Array[Integer]] = {",
          "",
          "[Added Lines]",
          "115:   def getCuboidBitSet(cuboidIds: Array[Long], nRowKey: Int): Array[Array[Integer]] = {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:   def printStat(): Unit = {",
          "142:     println(\"    Stats\")",
          "146:   }",
          "147: }",
          "",
          "[Removed Lines]",
          "143:     println(\"   i   :\" + idx)",
          "144:     println(\"meter1 :\" + meter1)",
          "145:     println(\"meter2 :\" + meter2)",
          "",
          "[Added Lines]",
          "139:     println(\"i      :\" + idx)",
          "140:     println(\"meter  :\" + meter2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9a1950c04a24916fc1507fcd7614502cd5ee02a",
      "candidate_info": {
        "commit_hash": "b9a1950c04a24916fc1507fcd7614502cd5ee02a",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b9a1950c04a24916fc1507fcd7614502cd5ee02a",
        "files": [
          "core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java",
          "core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java",
          "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java",
          "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"
        ],
        "message": "KYLIN-4557 Refactor JobService to improve code readability\n\n(cherry picked from commit 0f3c945be4125012e43b12e8bd5e11c577a1a09b)",
        "before_after_code_files": [
          "core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java||core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java",
          "core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java||core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java",
          "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java||engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java",
          "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java||engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java||core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java -> core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     protected static final String END_TIME = \"endTime\";",
          "71:     protected static final String INTERRUPT_TIME = \"interruptTime\";",
          "72:     protected static final String BUILD_INSTANCE = \"buildInstance\";",
          "74:     protected static final Logger logger = LoggerFactory.getLogger(AbstractExecutable.class);",
          "75:     public static final String NO_NEED_TO_SEND_EMAIL_USER_LIST_IS_EMPTY = \"no need to send email, user list is empty\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     protected static final String PROJECT_INSTANCE_NAME = \"projectName\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "637:                 .toString();",
          "638:     }",
          "641:     public final String getParentId() {",
          "642:         return getParam(PARENT_ID);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:     public String getProjectName() {",
          "642:         return getParam(PROJECT_INSTANCE_NAME);",
          "643:     }",
          "645:     public void setProjectName(String name) {",
          "646:         setParam(PROJECT_INSTANCE_NAME, name);",
          "647:     }",
          "",
          "---------------"
        ],
        "core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java||core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java -> core-job/src/main/java/org/apache/kylin/job/execution/CheckpointExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     public static final Integer DEFAULT_PRIORITY = 30;",
          "38:     private static final String DEPLOY_ENV_NAME = \"envName\";",
          "41:     private final List<AbstractExecutable> subTasksForCheck = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "39:     private static final String PROJECT_INSTANCE_NAME = \"projectName\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         setParam(DEPLOY_ENV_NAME, name);",
          "103:     }",
          "113:     @Override",
          "114:     public int getDefaultPriority() {",
          "115:         return DEFAULT_PRIORITY;",
          "",
          "[Removed Lines]",
          "105:     public String getProjectName() {",
          "106:         return getParam(PROJECT_INSTANCE_NAME);",
          "107:     }",
          "109:     public void setProjectName(String name) {",
          "110:         setParam(PROJECT_INSTANCE_NAME, name);",
          "111:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java||engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java": [
          "File: engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java -> engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     public static final Integer DEFAULT_PRIORITY = 30;",
          "38:     private static final String DEPLOY_ENV_NAME = \"envName\";",
          "41:     private static final String JOB_TYPE = \"Lookup \";",
          "",
          "[Removed Lines]",
          "39:     private static final String PROJECT_INSTANCE_NAME = \"projectName\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         return getParam(DEPLOY_ENV_NAME);",
          "79:     }",
          "89:     @Override",
          "90:     public int getDefaultPriority() {",
          "91:         return DEFAULT_PRIORITY;",
          "",
          "[Removed Lines]",
          "81:     public String getProjectName() {",
          "82:         return getParam(PROJECT_INSTANCE_NAME);",
          "83:     }",
          "85:     public void setProjectName(String name) {",
          "86:         setParam(PROJECT_INSTANCE_NAME, name);",
          "87:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java||engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java": [
          "File: engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java -> engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: public class JobInfoConverter {",
          "44:     private static final Logger logger = LoggerFactory.getLogger(JobInfoConverter.class);",
          "47:         try {",
          "58:         } catch (Exception e) {",
          "59:             logger.error(\"Failed to parse job instance: uuid={}\", job, e);",
          "60:             return null;",
          "",
          "[Removed Lines]",
          "46:     public static JobInstance parseToJobInstanceQuietly(CubingJob job, Map<String, Output> outputs) {",
          "48:             return parseToJobInstance(job, outputs);",
          "49:         } catch (Exception e) {",
          "50:             logger.error(\"Failed to parse job instance: uuid={}\", job, e);",
          "51:             return null;",
          "52:         }",
          "53:     }",
          "55:     public static JobInstance parseToJobInstanceQuietly(CheckpointExecutable job, Map<String, Output> outputs) {",
          "56:         try {",
          "57:             return parseToJobInstance(job, outputs);",
          "",
          "[Added Lines]",
          "46:     public static JobInstance parseToJobInstanceQuietly(AbstractExecutable job, Map<String, Output> outputs) {",
          "48:             if (job instanceof CheckpointExecutable) {",
          "49:                 return parseToJobInstance((CheckpointExecutable)job, outputs);",
          "50:             } else if (job instanceof CubingJob) {",
          "51:                 return parseToJobInstance((CubingJob)job, outputs);",
          "52:             } else {",
          "53:                 return null;",
          "54:             }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/JobService.java -> server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.List;",
          "29: import java.util.Locale;",
          "30: import java.util.Map;",
          "31: import java.util.Set;",
          "32: import java.util.TimeZone;",
          "36: import com.google.common.collect.Maps;",
          "37: import org.apache.commons.lang3.StringUtils;",
          "",
          "[Removed Lines]",
          "34: import javax.annotation.Nullable;",
          "",
          "[Added Lines]",
          "31: import java.util.Objects;",
          "34: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: import org.springframework.security.core.context.SecurityContextHolder;",
          "92: import org.springframework.stereotype.Component;",
          "98: import org.apache.kylin.shaded.com.google.common.collect.Lists;",
          "99: import org.apache.kylin.shaded.com.google.common.collect.Sets;",
          "",
          "[Removed Lines]",
          "94: import org.apache.kylin.shaded.com.google.common.base.Function;",
          "95: import org.apache.kylin.shaded.com.google.common.base.Predicate;",
          "96: import org.apache.kylin.shaded.com.google.common.base.Predicates;",
          "97: import org.apache.kylin.shaded.com.google.common.collect.FluentIterable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "824:     }",
          "832:     public List<JobInstance> searchJobsByCubeName(final String cubeNameSubstring, final String projectName,",
          "859:             aclEvaluate.checkIsGlobalAdmin();",
          "860:         } else {",
          "861:             aclEvaluate.checkProjectOperationPermission(projectName);",
          "",
          "[Removed Lines]",
          "833:             final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter,",
          "834:             final JobSearchMode jobSearchMode) {",
          "835:         return innerSearchJobs(cubeNameSubstring, null, projectName, statusList, timeFilter, jobSearchMode);",
          "836:     }",
          "838:     public List<JobInstance> innerSearchJobs(final String cubeName, final String jobName, final String projectName,",
          "839:             final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter, JobSearchMode jobSearchMode) {",
          "840:         List<JobInstance> result = Lists.newArrayList();",
          "841:         switch (jobSearchMode) {",
          "842:         case ALL:",
          "843:             result.addAll(innerSearchCubingJobs(cubeName, jobName, projectName, statusList, timeFilter));",
          "844:             result.addAll(innerSearchCheckpointJobs(cubeName, jobName, projectName, statusList, timeFilter));",
          "845:             break;",
          "846:         case CHECKPOINT_ONLY:",
          "847:             result.addAll(innerSearchCheckpointJobs(cubeName, jobName, projectName, statusList, timeFilter));",
          "848:             break;",
          "849:         case CUBING_ONLY:",
          "850:         default:",
          "851:             result.addAll(innerSearchCubingJobs(cubeName, jobName, projectName, statusList, timeFilter));",
          "852:         }",
          "853:         return result;",
          "854:     }",
          "856:     public List<JobInstance> innerSearchCubingJobs(final String cubeName, final String jobName,",
          "857:             final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {",
          "858:         if (null == projectName) {",
          "",
          "[Added Lines]",
          "833:         final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter,",
          "834:         final JobSearchMode jobSearchMode) {",
          "835:         if (StringUtils.isEmpty(projectName)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "866:         long timeStartInMillis = getTimeStartInMillis(calendar, timeFilter);",
          "867:         long timeEndInMillis = Long.MAX_VALUE;",
          "868:         Set<ExecutableState> states = convertStatusEnumToStates(statusList);",
          "887:     }",
          "970:     }",
          "993:     }",
          "",
          "[Removed Lines]",
          "869:         final Map<String, Output> allOutputs = getExecutableManager().getAllOutputs(timeStartInMillis, timeEndInMillis);",
          "871:         return Lists",
          "872:                 .newArrayList(",
          "873:                         FluentIterable",
          "874:                                 .from(innerSearchCubingJobs(cubeName, jobName, states, timeStartInMillis,",
          "875:                                         timeEndInMillis, allOutputs, false, projectName))",
          "876:                                 .transform(new Function<CubingJob, JobInstance>() {",
          "877:                                     @Override",
          "878:                                     public JobInstance apply(CubingJob cubingJob) {",
          "879:                                         return JobInfoConverter.parseToJobInstanceQuietly(cubingJob, allOutputs);",
          "880:                                     }",
          "881:                                 }).filter(new Predicate<JobInstance>() {",
          "882:                                     @Override",
          "883:                                     public boolean apply(@Nullable JobInstance input) {",
          "884:                                         return input != null;",
          "885:                                     }",
          "886:                                 }));",
          "895:     public List<CubingJob> innerSearchCubingJobs(final String cubeName, final String jobName,",
          "896:             final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,",
          "897:             final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {",
          "898:         List<CubingJob> results = Lists.newArrayList(",
          "899:                 FluentIterable.from(getExecutableManager().getAllExecutables(timeStartInMillis, timeEndInMillis))",
          "900:                         .filter(new Predicate<AbstractExecutable>() {",
          "901:                             @Override",
          "902:                             public boolean apply(AbstractExecutable executable) {",
          "903:                                 if (executable instanceof CubingJob) {",
          "904:                                     if (StringUtils.isEmpty(cubeName)) {",
          "905:                                         return true;",
          "906:                                     }",
          "907:                                     String executableCubeName = CubingExecutableUtil",
          "908:                                             .getCubeName(executable.getParams());",
          "909:                                     if (executableCubeName == null)",
          "910:                                         return true;",
          "911:                                     if (nameExactMatch)",
          "912:                                         return executableCubeName.equalsIgnoreCase(cubeName);",
          "913:                                     else",
          "914:                                         return executableCubeName.toLowerCase(Locale.ROOT)",
          "915:                                                 .contains(cubeName.toLowerCase(Locale.ROOT));",
          "916:                                 } else {",
          "917:                                     return false;",
          "918:                                 }",
          "919:                             }",
          "920:                         }).transform(new Function<AbstractExecutable, CubingJob>() {",
          "921:                             @Override",
          "922:                             public CubingJob apply(AbstractExecutable executable) {",
          "923:                                 return (CubingJob) executable;",
          "924:                             }",
          "925:                         }).filter(Predicates.and(new Predicate<CubingJob>() {",
          "926:                             @Override",
          "927:                             public boolean apply(CubingJob executable) {",
          "928:                                 if (null == projectName || null == getProjectManager().getProject(projectName)) {",
          "929:                                     return true;",
          "930:                                 } else {",
          "931:                                     return projectName.equalsIgnoreCase(executable.getProjectName());",
          "932:                                 }",
          "933:                             }",
          "934:                         }, new Predicate<CubingJob>() {",
          "935:                             @Override",
          "936:                             public boolean apply(CubingJob executable) {",
          "937:                                 try {",
          "938:                                     Output output = allOutputs.get(executable.getId());",
          "939:                                     if (output == null) {",
          "940:                                         return false;",
          "941:                                     }",
          "943:                                     ExecutableState state = output.getState();",
          "944:                                     boolean ret = statusList.contains(state);",
          "945:                                     return ret;",
          "946:                                 } catch (Exception e) {",
          "947:                                     throw e;",
          "948:                                 }",
          "949:                             }",
          "950:                         }, new Predicate<CubingJob>() {",
          "951:                             @Override",
          "952:                             public boolean apply(@Nullable CubingJob cubeJob) {",
          "953:                                 if (cubeJob == null) {",
          "954:                                     return false;",
          "955:                                 }",
          "957:                                 if (StringUtils.isEmpty(jobName)) {",
          "958:                                     return true;",
          "959:                                 }",
          "961:                                 if (nameExactMatch) {",
          "962:                                     return cubeJob.getName().equalsIgnoreCase(jobName);",
          "963:                                 } else {",
          "964:                                     return cubeJob.getName().toLowerCase(Locale.ROOT)",
          "965:                                             .contains(jobName.toLowerCase(Locale.ROOT));",
          "966:                                 }",
          "967:                             }",
          "968:                         })));",
          "969:         return results;",
          "972:     public List<JobInstance> innerSearchCheckpointJobs(final String cubeName, final String jobName,",
          "973:             final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {",
          "976:         Calendar calendar = Calendar.getInstance(TimeZone.getDefault(), Locale.ROOT);",
          "977:         calendar.setTime(new Date());",
          "978:         long timeStartInMillis = getTimeStartInMillis(calendar, timeFilter);",
          "979:         long timeEndInMillis = Long.MAX_VALUE;",
          "980:         Set<ExecutableState> states = convertStatusEnumToStates(statusList);",
          "981:         final Map<String, Output> allOutputs = getExecutableManager().getAllOutputs(timeStartInMillis, timeEndInMillis);",
          "983:         return Lists",
          "984:                 .newArrayList(FluentIterable",
          "985:                         .from(innerSearchCheckpointJobs(cubeName, jobName, states, timeStartInMillis, timeEndInMillis,",
          "986:                                 allOutputs, false, projectName))",
          "987:                         .transform(new Function<CheckpointExecutable, JobInstance>() {",
          "988:                             @Override",
          "989:                             public JobInstance apply(CheckpointExecutable checkpointExecutable) {",
          "990:                                 return JobInfoConverter.parseToJobInstanceQuietly(checkpointExecutable, allOutputs);",
          "991:                             }",
          "992:                         }));",
          "995:     public List<CheckpointExecutable> innerSearchCheckpointJobs(final String cubeName, final String jobName,",
          "996:             final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,",
          "997:             final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {",
          "998:         List<CheckpointExecutable> results = Lists.newArrayList(",
          "999:                 FluentIterable.from(getExecutableManager().getAllExecutables(timeStartInMillis, timeEndInMillis))",
          "1000:                         .filter(new Predicate<AbstractExecutable>() {",
          "1001:                             @Override",
          "1002:                             public boolean apply(AbstractExecutable executable) {",
          "1003:                                 if (executable instanceof CheckpointExecutable) {",
          "1004:                                     if (StringUtils.isEmpty(cubeName)) {",
          "1005:                                         return true;",
          "1006:                                     }",
          "1007:                                     String executableCubeName = CubingExecutableUtil",
          "1008:                                             .getCubeName(executable.getParams());",
          "1009:                                     if (executableCubeName == null)",
          "1010:                                         return true;",
          "1011:                                     if (nameExactMatch)",
          "1012:                                         return executableCubeName.equalsIgnoreCase(cubeName);",
          "1013:                                     else",
          "1014:                                         return executableCubeName.toLowerCase(Locale.ROOT)",
          "1015:                                                 .contains(cubeName.toLowerCase(Locale.ROOT));",
          "1016:                                 } else {",
          "1017:                                     return false;",
          "1018:                                 }",
          "1019:                             }",
          "1020:                         }).transform(new Function<AbstractExecutable, CheckpointExecutable>() {",
          "1021:                             @Override",
          "1022:                             public CheckpointExecutable apply(AbstractExecutable executable) {",
          "1023:                                 return (CheckpointExecutable) executable;",
          "1024:                             }",
          "1025:                         }).filter(Predicates.and(new Predicate<CheckpointExecutable>() {",
          "1026:                             @Override",
          "1027:                             public boolean apply(CheckpointExecutable executable) {",
          "1028:                                 if (null == projectName || null == getProjectManager().getProject(projectName)) {",
          "1029:                                     return true;",
          "1030:                                 } else {",
          "1031:                                     return projectName.equalsIgnoreCase(executable.getProjectName());",
          "1032:                                 }",
          "1033:                             }",
          "1034:                         }, new Predicate<CheckpointExecutable>() {",
          "1035:                             @Override",
          "1036:                             public boolean apply(CheckpointExecutable executable) {",
          "1037:                                 try {",
          "1038:                                     Output output = allOutputs.get(executable.getId());",
          "1039:                                     if (output == null) {",
          "1040:                                         return false;",
          "1041:                                     }",
          "1043:                                     ExecutableState state = output.getState();",
          "1044:                                     boolean ret = statusList.contains(state);",
          "1045:                                     return ret;",
          "1046:                                 } catch (Exception e) {",
          "1047:                                     throw e;",
          "1048:                                 }",
          "1049:                             }",
          "1050:                         }, new Predicate<CheckpointExecutable>() {",
          "1051:                             @Override",
          "1052:                             public boolean apply(@Nullable CheckpointExecutable checkpointExecutable) {",
          "1053:                                 if (checkpointExecutable == null) {",
          "1054:                                     return false;",
          "1055:                                 }",
          "1057:                                 if (StringUtils.isEmpty(jobName)) {",
          "1058:                                     return true;",
          "1059:                                 }",
          "1061:                                 if (nameExactMatch) {",
          "1062:                                     return checkpointExecutable.getName().equalsIgnoreCase(jobName);",
          "1063:                                 } else {",
          "1064:                                     return checkpointExecutable.getName().toLowerCase(Locale.ROOT)",
          "1065:                                             .contains(jobName.toLowerCase(Locale.ROOT));",
          "1066:                                 }",
          "1067:                             }",
          "1068:                         })));",
          "1069:         return results;",
          "1070:     }",
          "",
          "[Added Lines]",
          "846:         final Map<String, Output> allOutputs = getExecutableManager()",
          "847:             .getAllOutputs(timeStartInMillis, timeEndInMillis);",
          "848:         final List<AbstractExecutable> allExecutables = getExecutableManager()",
          "849:             .getAllExecutables(timeStartInMillis, timeEndInMillis);",
          "850:         return innerSearchJobs(jobSearchMode, projectName, cubeNameSubstring, null, states,",
          "851:             allOutputs, allExecutables, false);",
          "866:     public List<JobInstance> innerSearchJobs(JobSearchMode jobSearchMode, final String projectName,",
          "867:         final String cubeName, final String jobName, final Set<ExecutableState> statusList,",
          "868:         final Map<String, Output> allOutputs,",
          "869:         final List<AbstractExecutable> allExecutables,",
          "870:         final boolean nameExactMatch) {",
          "871:         return allExecutables.stream()",
          "872:             .filter(executable -> checkJobType(executable, jobSearchMode))",
          "873:             .filter(executable -> checkProject(executable, projectName))",
          "874:             .filter(executable -> checkCubeName(executable, cubeName, nameExactMatch))",
          "875:             .filter(executable -> checkJobStatus(executable, statusList, allOutputs))",
          "876:             .filter(executable -> checkJobName(executable, jobName, nameExactMatch))",
          "877:             .map(job -> JobInfoConverter.parseToJobInstanceQuietly(job, allOutputs))",
          "878:             .filter(Objects::nonNull)",
          "879:             .collect(Collectors.toList());",
          "882:     public List<CubingJob> innerSearchCubingJobs(final String cubeName, final String jobName,",
          "883:         final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,",
          "884:         final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {",
          "885:         return getExecutableManager()",
          "886:             .getAllExecutables(timeStartInMillis, timeEndInMillis).stream()",
          "887:             .filter(executable -> checkJobType(executable, JobSearchMode.CUBING_ONLY))",
          "888:             .filter(executable -> checkProject(executable, projectName))",
          "889:             .filter(executable -> checkCubeName(executable, cubeName, nameExactMatch))",
          "890:             .filter(executable -> checkJobStatus(executable, statusList, allOutputs))",
          "891:             .filter(executable -> checkJobName(executable, jobName, nameExactMatch))",
          "892:             .map(job -> (CubingJob)job)",
          "893:             .collect(Collectors.toList());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1124:     }",
          "1132:     public List<JobSearchResult> searchJobsByCubeNameV2(final String cubeNameSubstring, final String projectName,",
          "1133:             final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter,",
          "1134:             final JobSearchMode jobSearchMode) {",
          "1154:             aclEvaluate.checkIsGlobalAdmin();",
          "1155:         } else {",
          "1156:             aclEvaluate.checkProjectOperationPermission(projectName);",
          "",
          "[Removed Lines]",
          "1135:         List<JobSearchResult> result = Lists.newArrayList();",
          "1136:         switch (jobSearchMode) {",
          "1137:         case ALL:",
          "1138:             result.addAll(innerSearchCubingJobsV2(cubeNameSubstring, null, projectName, statusList, timeFilter));",
          "1139:             result.addAll(innerSearchCheckpointJobsV2(cubeNameSubstring, null, projectName, statusList, timeFilter));",
          "1140:             break;",
          "1141:         case CHECKPOINT_ONLY:",
          "1142:             result.addAll(innerSearchCheckpointJobsV2(cubeNameSubstring, null, projectName, statusList, timeFilter));",
          "1143:             break;",
          "1144:         case CUBING_ONLY:",
          "1145:         default:",
          "1146:             result.addAll(innerSearchCubingJobsV2(cubeNameSubstring, null, projectName, statusList, timeFilter));",
          "1147:         }",
          "1148:         return result;",
          "1149:     }",
          "1151:     public List<JobSearchResult> innerSearchCubingJobsV2(final String cubeName, final String jobName,",
          "1152:             final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {",
          "1153:         if (null == projectName) {",
          "",
          "[Added Lines]",
          "965:         if (StringUtils.isEmpty(projectName)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1162:         long timeEndInMillis = Long.MAX_VALUE;",
          "1163:         Set<ExecutableState> states = convertStatusEnumToStates(statusList);",
          "1164:         final Map<String, ExecutableOutputPO> allOutputDigests = getExecutableManager()",
          "1212:     }",
          "1296:     }",
          "1371:     }",
          "1375:     public List<CubingJob> listJobsByRealizationName(final String realizationName, final String projectName,",
          "1376:             final Set<ExecutableState> statusList) {",
          "",
          "[Removed Lines]",
          "1165:                 .getAllOutputDigests(timeStartInMillis, timeEndInMillis);",
          "1166:         return Lists",
          "1167:                 .newArrayList(FluentIterable",
          "1168:                         .from(innerSearchCubingJobsV2(cubeName, jobName, states, timeStartInMillis, timeEndInMillis,",
          "1169:                                 allOutputDigests, false, projectName))",
          "1170:                         .transform(new Function<CubingJob, JobSearchResult>() {",
          "1171:                             @Override",
          "1172:                             public JobSearchResult apply(CubingJob cubingJob) {",
          "1173:                                 return JobInfoConverter.parseToJobSearchResult(cubingJob, allOutputDigests);",
          "1174:                             }",
          "1175:                         }).filter(new Predicate<JobSearchResult>() {",
          "1176:                             @Override",
          "1177:                             public boolean apply(@Nullable JobSearchResult input) {",
          "1178:                                 return input != null;",
          "1179:                             }",
          "1180:                         }));",
          "1181:     }",
          "1183:     public List<JobSearchResult> innerSearchCheckpointJobsV2(final String cubeName, final String jobName,",
          "1184:             final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {",
          "1185:         if (null == projectName) {",
          "1186:             aclEvaluate.checkIsGlobalAdmin();",
          "1187:         } else {",
          "1188:             aclEvaluate.checkProjectOperationPermission(projectName);",
          "1189:         }",
          "1191:         Calendar calendar = Calendar.getInstance(TimeZone.getDefault(), Locale.ROOT);",
          "1192:         calendar.setTime(new Date());",
          "1193:         long timeStartInMillis = getTimeStartInMillis(calendar, timeFilter);",
          "1194:         long timeEndInMillis = Long.MAX_VALUE;",
          "1195:         Set<ExecutableState> states = convertStatusEnumToStates(statusList);",
          "1196:         final Map<String, ExecutableOutputPO> allOutputDigests = getExecutableManager()",
          "1197:                 .getAllOutputDigests(timeStartInMillis, timeEndInMillis);",
          "1198:         return Lists.newArrayList(FluentIterable",
          "1199:                 .from(innerSearchCheckpointJobsV2(cubeName, jobName, states, timeStartInMillis, timeEndInMillis,",
          "1200:                         allOutputDigests, false, projectName))",
          "1201:                 .transform(new Function<CheckpointExecutable, JobSearchResult>() {",
          "1202:                     @Override",
          "1203:                     public JobSearchResult apply(CheckpointExecutable checkpointExecutable) {",
          "1204:                         return JobInfoConverter.parseToJobSearchResult(checkpointExecutable, allOutputDigests);",
          "1205:                     }",
          "1206:                 }).filter(new Predicate<JobSearchResult>() {",
          "1207:                     @Override",
          "1208:                     public boolean apply(@Nullable JobSearchResult input) {",
          "1209:                         return input != null;",
          "1210:                     }",
          "1211:                 }));",
          "1220:     public List<CubingJob> innerSearchCubingJobsV2(final String cubeName, final String jobName,",
          "1221:             final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,",
          "1222:             final Map<String, ExecutableOutputPO> allExecutableOutputPO, final boolean nameExactMatch,",
          "1223:             final String projectName) {",
          "1224:         List<CubingJob> results = Lists.newArrayList(",
          "1225:                 FluentIterable.from(getExecutableManager().getAllExecutableDigests(timeStartInMillis, timeEndInMillis))",
          "1226:                         .filter(new Predicate<AbstractExecutable>() {",
          "1227:                             @Override",
          "1228:                             public boolean apply(AbstractExecutable executable) {",
          "1229:                                 if (executable instanceof CubingJob) {",
          "1230:                                     if (StringUtils.isEmpty(cubeName)) {",
          "1231:                                         return true;",
          "1232:                                     }",
          "1233:                                     String executableCubeName = CubingExecutableUtil",
          "1234:                                             .getCubeName(executable.getParams());",
          "1235:                                     if (executableCubeName == null)",
          "1236:                                         return true;",
          "1237:                                     if (nameExactMatch)",
          "1238:                                         return executableCubeName.equalsIgnoreCase(cubeName);",
          "1239:                                     else",
          "1240:                                         return executableCubeName.toLowerCase(Locale.ROOT)",
          "1241:                                                 .contains(cubeName.toLowerCase(Locale.ROOT));",
          "1242:                                 } else {",
          "1243:                                     return false;",
          "1244:                                 }",
          "1245:                             }",
          "1246:                         }).transform(new Function<AbstractExecutable, CubingJob>() {",
          "1247:                             @Override",
          "1248:                             public CubingJob apply(AbstractExecutable executable) {",
          "1249:                                 return (CubingJob) executable;",
          "1250:                             }",
          "1251:                         }).filter(Predicates.and(new Predicate<CubingJob>() {",
          "1252:                             @Override",
          "1253:                             public boolean apply(CubingJob executable) {",
          "1254:                                 if (null == projectName || null == getProjectManager().getProject(projectName)) {",
          "1255:                                     return true;",
          "1256:                                 } else {",
          "1257:                                     return projectName.equalsIgnoreCase(executable.getProjectName());",
          "1258:                                 }",
          "1259:                             }",
          "1260:                         }, new Predicate<CubingJob>() {",
          "1261:                             @Override",
          "1262:                             public boolean apply(CubingJob executable) {",
          "1263:                                 try {",
          "1264:                                     ExecutableOutputPO executableOutputPO = allExecutableOutputPO",
          "1265:                                             .get(executable.getId());",
          "1266:                                     if (executableOutputPO == null) {",
          "1267:                                         return false;",
          "1268:                                     }",
          "1269:                                     ExecutableState state = ExecutableState.valueOf(executableOutputPO.getStatus());",
          "1270:                                     return statusList.contains(state);",
          "1272:                                 } catch (Exception e) {",
          "1273:                                     throw e;",
          "1274:                                 }",
          "1275:                             }",
          "1276:                         }, new Predicate<CubingJob>() {",
          "1277:                             @Override",
          "1278:                             public boolean apply(@Nullable CubingJob cubeJob) {",
          "1279:                                 if (cubeJob == null) {",
          "1280:                                     return false;",
          "1281:                                 }",
          "1283:                                 if (StringUtils.isEmpty(jobName)) {",
          "1284:                                     return true;",
          "1285:                                 }",
          "1287:                                 if (nameExactMatch) {",
          "1288:                                     return cubeJob.getName().equalsIgnoreCase(jobName);",
          "1289:                                 } else {",
          "1290:                                     return cubeJob.getName().toLowerCase(Locale.ROOT)",
          "1291:                                             .contains(jobName.toLowerCase(Locale.ROOT));",
          "1292:                                 }",
          "1293:                             }",
          "1294:                         })));",
          "1295:         return results;",
          "1298:     public List<CheckpointExecutable> innerSearchCheckpointJobsV2(final String cubeName, final String jobName,",
          "1299:             final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,",
          "1300:             final Map<String, ExecutableOutputPO> allExecutableOutputPO, final boolean nameExactMatch,",
          "1301:             final String projectName) {",
          "1302:         List<CheckpointExecutable> results = Lists.newArrayList(",
          "1303:                 FluentIterable.from(getExecutableManager().getAllExecutableDigests(timeStartInMillis, timeEndInMillis))",
          "1304:                         .filter(new Predicate<AbstractExecutable>() {",
          "1305:                             @Override",
          "1306:                             public boolean apply(AbstractExecutable executable) {",
          "1307:                                 if (executable instanceof CheckpointExecutable) {",
          "1308:                                     if (StringUtils.isEmpty(cubeName)) {",
          "1309:                                         return true;",
          "1310:                                     }",
          "1311:                                     String executableCubeName = CubingExecutableUtil",
          "1312:                                             .getCubeName(executable.getParams());",
          "1313:                                     if (executableCubeName == null)",
          "1314:                                         return true;",
          "1315:                                     if (nameExactMatch)",
          "1316:                                         return executableCubeName.equalsIgnoreCase(cubeName);",
          "1317:                                     else",
          "1318:                                         return executableCubeName.toLowerCase(Locale.ROOT)",
          "1319:                                                 .contains(cubeName.toLowerCase(Locale.ROOT));",
          "1320:                                 } else {",
          "1321:                                     return false;",
          "1322:                                 }",
          "1323:                             }",
          "1324:                         }).transform(new Function<AbstractExecutable, CheckpointExecutable>() {",
          "1325:                             @Override",
          "1326:                             public CheckpointExecutable apply(AbstractExecutable executable) {",
          "1327:                                 return (CheckpointExecutable) executable;",
          "1328:                             }",
          "1329:                         }).filter(Predicates.and(new Predicate<CheckpointExecutable>() {",
          "1330:                             @Override",
          "1331:                             public boolean apply(CheckpointExecutable executable) {",
          "1332:                                 if (null == projectName || null == getProjectManager().getProject(projectName)) {",
          "1333:                                     return true;",
          "1334:                                 } else {",
          "1335:                                     return projectName.equalsIgnoreCase(executable.getProjectName());",
          "1336:                                 }",
          "1337:                             }",
          "1338:                         }, new Predicate<CheckpointExecutable>() {",
          "1339:                             @Override",
          "1340:                             public boolean apply(CheckpointExecutable executable) {",
          "1341:                                 try {",
          "1342:                                     ExecutableOutputPO executableOutputPO = allExecutableOutputPO",
          "1343:                                             .get(executable.getId());",
          "1344:                                     ExecutableState state = ExecutableState.valueOf(executableOutputPO.getStatus());",
          "1345:                                     return statusList.contains(state);",
          "1347:                                 } catch (Exception e) {",
          "1348:                                     throw e;",
          "1349:                                 }",
          "1350:                             }",
          "1351:                         }, new Predicate<CheckpointExecutable>() {",
          "1352:                             @Override",
          "1353:                             public boolean apply(@Nullable CheckpointExecutable checkpointExecutable) {",
          "1354:                                 if (checkpointExecutable == null) {",
          "1355:                                     return false;",
          "1356:                                 }",
          "1358:                                 if (StringUtils.isEmpty(jobName)) {",
          "1359:                                     return true;",
          "1360:                                 }",
          "1362:                                 if (nameExactMatch) {",
          "1363:                                     return checkpointExecutable.getName().equalsIgnoreCase(jobName);",
          "1364:                                 } else {",
          "1365:                                     return checkpointExecutable.getName().toLowerCase(Locale.ROOT)",
          "1366:                                             .contains(jobName.toLowerCase(Locale.ROOT));",
          "1367:                                 }",
          "1368:                             }",
          "1369:                         })));",
          "1370:         return results;",
          "",
          "[Added Lines]",
          "977:             .getAllOutputDigests(timeStartInMillis, timeEndInMillis);",
          "978:         final List<AbstractExecutable> allExecutables = getExecutableManager()",
          "979:             .getAllExecutableDigests(timeStartInMillis, timeEndInMillis);",
          "980:         return innerSearchJobsV2(jobSearchMode, projectName, cubeNameSubstring, null, states,",
          "981:             allOutputDigests, allExecutables, false);",
          "999:     public List<JobSearchResult> innerSearchJobsV2(JobSearchMode jobSearchMode, final String projectName,",
          "1000:         final String cubeName, final String jobName, final Set<ExecutableState> statusList,",
          "1001:         final Map<String, ExecutableOutputPO> allExecutableOutputPO,",
          "1002:         final List<AbstractExecutable> allExecutables,",
          "1003:         final boolean nameExactMatch) {",
          "1004:         return allExecutables.stream()",
          "1005:             .filter(executable -> checkJobType(executable, jobSearchMode))",
          "1006:             .filter(executable -> checkProject(executable, projectName))",
          "1007:             .filter(executable -> checkCubeName(executable, cubeName, nameExactMatch))",
          "1008:             .filter(executable -> checkJobStatusV2(executable, statusList, allExecutableOutputPO))",
          "1009:             .filter(executable -> checkJobName(executable, jobName, nameExactMatch))",
          "1010:             .map(job -> JobInfoConverter.parseToJobSearchResult((DefaultChainedExecutable)job, allExecutableOutputPO))",
          "1011:             .filter(Objects::nonNull)",
          "1012:             .collect(Collectors.toList());",
          "1017:     private boolean checkJobType(final AbstractExecutable executable, final JobSearchMode jobSearchMode) {",
          "1018:         switch (jobSearchMode) {",
          "1019:         case CHECKPOINT_ONLY:",
          "1020:             return executable instanceof CheckpointExecutable;",
          "1021:         case ALL:",
          "1022:             return executable instanceof CheckpointExecutable || executable instanceof CubingJob;",
          "1023:         case CUBING_ONLY:",
          "1024:         default:",
          "1025:             return executable instanceof CubingJob;",
          "1026:         }",
          "1029:     private boolean checkProject(final AbstractExecutable executable, final String projectName) {",
          "1030:         if (null == projectName || null == getProjectManager().getProject(projectName)) {",
          "1031:             return true;",
          "1032:         } else {",
          "1033:             return projectName.equalsIgnoreCase(executable.getProjectName());",
          "1034:         }",
          "1035:     }",
          "1037:     private boolean checkCubeName(final AbstractExecutable executable, final String cubeName,",
          "1038:         final boolean nameExactMatch) {",
          "1039:         if (StringUtils.isEmpty(cubeName)) {",
          "1040:             return true;",
          "1041:         }",
          "1042:         String executableCubeName = CubingExecutableUtil.getCubeName(executable.getParams());",
          "1043:         if (executableCubeName == null)",
          "1044:             return false;",
          "1045:         if (nameExactMatch)",
          "1046:             return executableCubeName.equalsIgnoreCase(cubeName);",
          "1047:         else",
          "1048:             return executableCubeName.toLowerCase(Locale.ROOT)",
          "1049:                 .contains(cubeName.toLowerCase(Locale.ROOT));",
          "1050:     }",
          "1052:     private boolean checkJobStatus(final AbstractExecutable executable,",
          "1053:         final Set<ExecutableState> statusList,",
          "1054:         final Map<String, Output> allOutputs) {",
          "1055:         try {",
          "1056:             Output output = allOutputs.get(executable.getId());",
          "1057:             if (output == null) {",
          "1058:                 return false;",
          "1059:             }",
          "1060:             ExecutableState state = output.getState();",
          "1061:             return statusList.contains(state);",
          "1062:         } catch (Exception e) {",
          "1063:             throw e;",
          "1064:         }",
          "1065:     }",
          "1067:     private boolean checkJobStatusV2(final AbstractExecutable executable,",
          "1068:         final Set<ExecutableState> statusList,",
          "1069:         final Map<String, ExecutableOutputPO> allExecutableOutputPO) {",
          "1070:         try {",
          "1071:             ExecutableOutputPO executableOutputPO = allExecutableOutputPO",
          "1072:                 .get(executable.getId());",
          "1073:             ExecutableState state = ExecutableState.valueOf(executableOutputPO.getStatus());",
          "1074:             return statusList.contains(state);",
          "1075:         } catch (Exception e) {",
          "1076:             throw e;",
          "1077:         }",
          "1078:     }",
          "1079:     private boolean checkJobName(final AbstractExecutable executable, final String jobName,",
          "1080:         final boolean nameExactMatch) {",
          "1081:         if (executable == null) {",
          "1082:             return false;",
          "1083:         }",
          "1084:         if (StringUtils.isEmpty(jobName)) {",
          "1085:             return true;",
          "1086:         }",
          "1087:         if (nameExactMatch) {",
          "1088:             return executable.getName().equalsIgnoreCase(jobName);",
          "1089:         } else {",
          "1090:             return executable.getName().toLowerCase(Locale.ROOT)",
          "1091:                 .contains(jobName.toLowerCase(Locale.ROOT));",
          "1092:         }",
          "1093:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "444ae0604e8290cf18b5defddfdd6d79006f7501",
      "candidate_info": {
        "commit_hash": "444ae0604e8290cf18b5defddfdd6d79006f7501",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/444ae0604e8290cf18b5defddfdd6d79006f7501",
        "files": [
          "build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java",
          "core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java"
        ],
        "message": "KYLIN-5184, fix cuboid statistic feature (#1877)\n\n* KYLIN-5184, fix cuboid statistic feature\n\n* minor, adapt for cuboids without base cuboid\n\n* minor, adapt for cuboids with original logic\n\n* minor, adapt for cuboids with original logic\n\n* minor, adapt for cuboids with original logic",
        "before_after_code_files": [
          "build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java||build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java",
          "build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java||core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java||core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java||core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java",
          "core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java||core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java",
          "core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java||core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java||build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/CubingJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:         String cuboidRootPath = getCuboidRootPath(seg, config);",
          "366:         try {",
          "368:         } catch (IOException e) {",
          "369:             logger.warn(\"Cannot get segment {} estimated size map\", seg.getName());",
          "",
          "[Removed Lines]",
          "367:             estimatedSizeMap = new CubeStatsReader(seg, config).getCuboidSizeMap(true);",
          "",
          "[Added Lines]",
          "367:             estimatedSizeMap = new CubeStatsReader(seg, config, true).getCuboidSizeMap(true);",
          "",
          "---------------"
        ],
        "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/common/CubeStatsReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     final Map<Long, HLLCounter> cuboidRowEstimatesHLL;",
          "87:     final CuboidScheduler cuboidScheduler;",
          "88:     public final long sourceRowCount;",
          "92:     }",
          "98:             throws IOException {",
          "99:         this.seg = cubeSegment;",
          "100:         this.cuboidScheduler = cuboidScheduler;",
          "120:             this.mapperNumberOfFirstBuild = -1;",
          "121:             this.mapperOverlapRatioOfFirstBuild = -1.0;",
          "122:             this.cuboidRowEstimatesHLL = null;",
          "123:             this.sourceRowCount = -1L;",
          "124:         }",
          "125:     }",
          "148:     }",
          "150:     private File writeTmpSeqFile(InputStream inputStream) throws IOException {",
          "",
          "[Removed Lines]",
          "90:     public CubeStatsReader(CubeSegment cubeSegment, KylinConfig kylinConfig) throws IOException {",
          "91:         this(cubeSegment, cubeSegment.getCuboidScheduler(), kylinConfig);",
          "97:     public CubeStatsReader(CubeSegment cubeSegment, CuboidScheduler cuboidScheduler, KylinConfig kylinConfig)",
          "101:         ResourceStore store = ResourceStore.getStore(kylinConfig);",
          "102:         String statsKey = cubeSegment.getStatisticsResourcePath();",
          "103:         RawResource resource = store.getResource(statsKey);",
          "104:         if (resource != null) {",
          "105:             File tmpSeqFile = writeTmpSeqFile(resource.content());",
          "106:             Path path = new Path(HadoopUtil.fixWindowsPath(\"file://\" + tmpSeqFile.getAbsolutePath()));",
          "107:             logger.info(\"Reading statistics from {}\", path);",
          "108:             CubeStatsResult cubeStatsResult = new CubeStatsResult(path, kylinConfig.getCubeStatsHLLPrecision());",
          "109:             tmpSeqFile.delete();",
          "111:             this.samplingPercentage = cubeStatsResult.getPercentage();",
          "112:             this.mapperNumberOfFirstBuild = cubeStatsResult.getMapperNumber();",
          "113:             this.mapperOverlapRatioOfFirstBuild = cubeStatsResult.getMapperOverlapRatio();",
          "114:             this.cuboidRowEstimatesHLL = cubeStatsResult.getCounterMap();",
          "115:             this.sourceRowCount = cubeStatsResult.getSourceRecordCount();",
          "116:         } else {",
          "118:             logger.warn(\"{} is not exists.\", statsKey);",
          "119:             this.samplingPercentage = -1;",
          "137:     public CubeStatsReader(CubeSegment cubeSegment, CuboidScheduler cuboidScheduler, KylinConfig kylinConfig, Path path)",
          "138:             throws IOException {",
          "139:         CubeStatsResult cubeStatsResult = new CubeStatsResult(path, kylinConfig.getCubeStatsHLLPrecision());",
          "141:         this.seg = cubeSegment;",
          "142:         this.cuboidScheduler = cuboidScheduler;",
          "143:         this.samplingPercentage = cubeStatsResult.getPercentage();",
          "144:         this.mapperNumberOfFirstBuild = cubeStatsResult.getMapperNumber();",
          "145:         this.mapperOverlapRatioOfFirstBuild = cubeStatsResult.getMapperOverlapRatio();",
          "146:         this.cuboidRowEstimatesHLL = cubeStatsResult.getCounterMap();",
          "147:         this.sourceRowCount = cubeStatsResult.getSourceRecordCount();",
          "",
          "[Added Lines]",
          "89:     private boolean isPrecise = false;",
          "91:     public CubeStatsReader(CubeSegment cubeSegment, KylinConfig kylinConfig, boolean enableHll) throws IOException {",
          "92:         this(cubeSegment, cubeSegment.getCuboidScheduler(), kylinConfig, enableHll);",
          "98:     public CubeStatsReader(CubeSegment cubeSegment, CuboidScheduler cuboidScheduler, KylinConfig kylinConfig, boolean enableHll)",
          "103:         if (!enableHll && seg.getCuboidStaticsSize() != null",
          "104:                 && !seg.getCuboidStaticsSize().isEmpty()",
          "105:                 && seg.getCuboidStaticsRows() != null",
          "106:                 && !seg.getCuboidStaticsRows().isEmpty()) {",
          "107:             logger.info(\"Reading precise statics from segment {}\", seg.getUuid());",
          "108:             this.isPrecise = true;",
          "109:             this.samplingPercentage = 100;",
          "114:         } else {",
          "115:             ResourceStore store = ResourceStore.getStore(kylinConfig);",
          "116:             String statsKey = seg.getStatisticsResourcePath();",
          "117:             RawResource resource = store.getResource(statsKey);",
          "118:             if (resource != null) {",
          "119:                 File tmpSeqFile = writeTmpSeqFile(resource.content());",
          "120:                 Path path = new Path(HadoopUtil.fixWindowsPath(\"file://\" + tmpSeqFile.getAbsolutePath()));",
          "121:                 logger.info(\"Reading statistics from {}\", path);",
          "122:                 CubeStatsResult cubeStatsResult = new CubeStatsResult(path, kylinConfig.getCubeStatsHLLPrecision());",
          "123:                 tmpSeqFile.delete();",
          "125:                 this.samplingPercentage = cubeStatsResult.getPercentage();",
          "126:                 this.mapperNumberOfFirstBuild = cubeStatsResult.getMapperNumber();",
          "127:                 this.mapperOverlapRatioOfFirstBuild = cubeStatsResult.getMapperOverlapRatio();",
          "128:                 this.cuboidRowEstimatesHLL = cubeStatsResult.getCounterMap();",
          "129:                 this.sourceRowCount = cubeStatsResult.getSourceRecordCount();",
          "130:             } else {",
          "132:                 logger.warn(\"{} is not exists.\", statsKey);",
          "133:                 this.samplingPercentage = -1;",
          "134:                 this.mapperNumberOfFirstBuild = -1;",
          "135:                 this.mapperOverlapRatioOfFirstBuild = -1.0;",
          "136:                 this.cuboidRowEstimatesHLL = null;",
          "137:                 this.sourceRowCount = -1L;",
          "138:             }",
          "142:     public Map<Long, Long> getPreciseCuboidsRowsMap() {",
          "143:         return this.seg.getCuboidStaticsRows();",
          "144:     }",
          "146:     public Map<Long, Double> getPreciseCuboidsSizeMap() {",
          "147:         return handlePreciseCuboidsSize(this.seg.getCuboidStaticsSize());",
          "148:     }",
          "150:     private Map<Long, Double> handlePreciseCuboidsSize(Map<Long, Long> cuboidSizeMap) {",
          "151:         Map<Long, Double> sizeMap = Maps.newHashMap();",
          "152:         for (Map.Entry<Long, Long> entry: cuboidSizeMap.entrySet()) {",
          "153:             sizeMap.put(entry.getKey(), 1.0 * entry.getValue()/(1024L * 1024L));",
          "154:         }",
          "155:         return sizeMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:                 sizeMap.put(cuboidId, oriValue * rate);",
          "321:             }",
          "322:         }",
          "324:         logger.info(\"cube size is {} after optimize\", SumHelper.sumDouble(sizeMap.values()));",
          "327:     }",
          "",
          "[Removed Lines]",
          "326:         return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:         double percentileSpace = 0;",
          "354:         int topNSpace = 0;",
          "355:         for (MeasureDesc measureDesc : cubeSegment.getCubeDesc().getMeasures()) {",
          "357:                 break;",
          "358:             DataType returnType = measureDesc.getFunction().getReturnDataType();",
          "359:             if (measureDesc.getFunction().getExpression().equals(FunctionDesc.FUNC_COUNT_DISTINCT)) {",
          "360:                 long estimateDistinctCount = sourceRowCount / rowCount;",
          "",
          "[Removed Lines]",
          "356:             if (rowCount == 0)",
          "",
          "[Added Lines]",
          "360:             if (rowCount == 0) {",
          "362:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "381:     }",
          "383:     private void print(PrintWriter out) {",
          "386:         List<Long> cuboids = new ArrayList<Long>(cuboidRows.keySet());",
          "387:         Collections.sort(cuboids);",
          "389:         out.println(\"============================================================================\");",
          "390:         out.println(\"Statistics of \" + seg);",
          "391:         out.println();",
          "394:         out.println(\"Total cuboids: \" + cuboidRows.size());",
          "397:         out.println(\"Sampling percentage:  \" + samplingPercentage);",
          "398:         out.println(\"Mapper overlap ratio: \" + mapperOverlapRatioOfFirstBuild);",
          "399:         out.println(\"Mapper number: \" + mapperNumberOfFirstBuild);",
          "",
          "[Removed Lines]",
          "384:         Map<Long, Long> cuboidRows = getCuboidRowEstimatesHLL();",
          "385:         Map<Long, Double> cuboidSizes = getCuboidSizeMap();",
          "392:         out.println(",
          "393:                 \"Cube statistics hll precision: \" + cuboidRowEstimatesHLL.values().iterator().next().getPrecision());",
          "395:         out.println(\"Total estimated rows: \" + SumHelper.sumLong(cuboidRows.values()));",
          "396:         out.println(\"Total estimated size(MB): \" + SumHelper.sumDouble(cuboidSizes.values()));",
          "",
          "[Added Lines]",
          "389:         Map<Long, Long> cuboidRows;",
          "390:         Map<Long, Double> cuboidSizes;",
          "391:         if (isPrecise) {",
          "392:             cuboidRows = getPreciseCuboidsRowsMap();",
          "393:             cuboidSizes = getPreciseCuboidsSizeMap();",
          "394:         } else {",
          "395:             cuboidRows = getCuboidRowEstimatesHLL();",
          "396:             cuboidSizes = getCuboidSizeMap();",
          "397:         }",
          "401:         String estimatedOrPrecise =  isPrecise? \"precise\" : \"estimated\";",
          "405:         if (!isPrecise) {",
          "406:             out.println(\"Cube statistics hll precision: \"",
          "407:                     + cuboidRowEstimatesHLL.values().iterator().next().getPrecision());",
          "408:         }",
          "410:         out.println(\"Total \" + estimatedOrPrecise + \" rows: \" + SumHelper.sumLong(cuboidRows.values()));",
          "411:         out.println(\"Total \" + estimatedOrPrecise + \" size(MB): \" + SumHelper.sumDouble(cuboidSizes.values()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "419:         return ret;",
          "420:     }",
          "430:     private void printCuboidInfoTreeEntry(Map<Long, Long> cuboidRows, Map<Long, Double> cuboidSizes, PrintWriter out) {",
          "431:         if (cuboidScheduler == null) {",
          "432:             throw new UnsupportedOperationException(\"cuboid scheduler is null\");",
          "433:         }",
          "434:         long baseCuboid = Cuboid.getBaseCuboidId(seg.getCubeDesc());",
          "435:         int dimensionCount = Long.bitCount(baseCuboid);",
          "437:     }",
          "439:     private void printKVInfo(PrintWriter writer) {",
          "",
          "[Removed Lines]",
          "422:     public List<Long> getCuboidsByLayer(int level) {",
          "423:         if (cuboidScheduler == null) {",
          "424:             throw new UnsupportedOperationException(\"cuboid scheduler is null\");",
          "425:         }",
          "426:         List<List<Long>> layeredCuboids = cuboidScheduler.getCuboidsByLayer();",
          "427:         return layeredCuboids.get(level);",
          "428:     }",
          "436:         printCuboidInfoTree(-1L, baseCuboid, cuboidScheduler, cuboidRows, cuboidSizes, dimensionCount, 0, out);",
          "",
          "[Added Lines]",
          "443:         printCuboidInfoTree(-1L, baseCuboid, cuboidScheduler, cuboidRows, cuboidSizes, dimensionCount, 0, out,",
          "444:                 this.isPrecise);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "445:     }",
          "447:     private static void printCuboidInfoTree(long parent, long cuboidID, final CuboidScheduler scheduler,",
          "451:         List<Long> children = scheduler.getSpanningCuboid(cuboidID);",
          "452:         Collections.sort(children);",
          "454:         for (Long child : children) {",
          "456:         }",
          "457:     }",
          "459:     private static void printOneCuboidInfo(long parent, long cuboidID, Map<Long, Long> cuboidRows,",
          "461:         StringBuffer sb = new StringBuffer();",
          "462:         for (int i = 0; i < depth; i++) {",
          "463:             sb.append(\"    \");",
          "",
          "[Removed Lines]",
          "448:             Map<Long, Long> cuboidRows, Map<Long, Double> cuboidSizes, int dimensionCount, int depth, PrintWriter out) {",
          "449:         printOneCuboidInfo(parent, cuboidID, cuboidRows, cuboidSizes, dimensionCount, depth, out);",
          "455:             printCuboidInfoTree(cuboidID, child, scheduler, cuboidRows, cuboidSizes, dimensionCount, depth + 1, out);",
          "460:             Map<Long, Double> cuboidSizes, int dimensionCount, int depth, PrintWriter out) {",
          "",
          "[Added Lines]",
          "456:             Map<Long, Long> cuboidRows, Map<Long, Double> cuboidSizes, int dimensionCount, int depth, PrintWriter out,",
          "457:                                             boolean isPrecise) {",
          "458:         printOneCuboidInfo(parent, cuboidID, cuboidRows, cuboidSizes, dimensionCount, depth, out, isPrecise);",
          "464:             printCuboidInfoTree(cuboidID, child, scheduler, cuboidRows, cuboidSizes, dimensionCount, depth + 1,",
          "465:                     out, isPrecise);",
          "470:             Map<Long, Double> cuboidSizes, int dimensionCount, int depth, PrintWriter out, boolean isPrecise) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "465:         String cuboidName = Cuboid.getDisplayName(cuboidID, dimensionCount);",
          "466:         sb.append(\"|---- Cuboid \").append(cuboidName);",
          "472:         if (parent != -1) {",
          "475:         }",
          "478:     }",
          "480:     private static String formatDouble(double input) {",
          "",
          "[Removed Lines]",
          "468:         long rowCount = cuboidRows.get(cuboidID);",
          "469:         double size = cuboidSizes.get(cuboidID);",
          "470:         sb.append(\", est row: \").append(rowCount).append(\", est MB: \").append(formatDouble(size));",
          "473:             sb.append(\", shrink: \").append(formatDouble(100.0 * cuboidRows.get(cuboidID) / cuboidRows.get(parent)))",
          "474:                     .append(\"%\");",
          "477:         out.println(sb.toString());",
          "",
          "[Added Lines]",
          "478:         long rowCount = cuboidRows.get(cuboidID) == null ? 0: cuboidRows.get(cuboidID);",
          "479:         double size = cuboidSizes.get(cuboidID)== null ? 0.0: cuboidSizes.get(cuboidID);",
          "480:         String markPreciseOrEstimate =  isPrecise ? \"precise\" : \"est\";",
          "481:         sb.append(\", \").append(markPreciseOrEstimate).append(\" row: \").append(rowCount)",
          "482:                 .append(\", \").append(markPreciseOrEstimate).append(\" MB: \")",
          "483:                 .append(formatDouble(size));",
          "486:             double shrink = -0.0;",
          "487:             if (cuboidRows.get(parent) != null) {",
          "488:                 shrink = 100.0 * cuboidRows.get(cuboidID) / cuboidRows.get(parent);",
          "489:             }",
          "490:             sb.append(\", shrink: \").append(formatDouble(shrink)).append(\"%\");",
          "492:         out.println(sb);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "544:                 new BufferedWriter(new OutputStreamWriter(System.out, StandardCharsets.UTF_8)));",
          "545:         for (CubeSegment seg : segments) {",
          "546:             try {",
          "548:             } catch (Exception e) {",
          "549:                 logger.info(\"CubeStatsReader for Segment {} failed, skip it.\", seg.getName());",
          "550:             }",
          "",
          "[Removed Lines]",
          "547:                 new CubeStatsReader(seg, config).print(out);",
          "",
          "[Added Lines]",
          "562:                 new CubeStatsReader(seg, config, false).print(out);",
          "",
          "---------------"
        ],
        "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidRecommenderUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             return null;",
          "44:         }",
          "47:         if (cubeStatsReader.getCuboidRowEstimatesHLL() == null",
          "48:                 || cubeStatsReader.getCuboidRowEstimatesHLL().isEmpty()) {",
          "49:             logger.info(\"Cuboid Statistics is not enabled.\");",
          "",
          "[Removed Lines]",
          "46:         CubeStatsReader cubeStatsReader = new CubeStatsReader(segment, null, segment.getConfig());",
          "",
          "[Added Lines]",
          "46:         CubeStatsReader cubeStatsReader = new CubeStatsReader(segment, null, segment.getConfig(), true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:             return null;",
          "116:         }",
          "119:         if (cubeStatsReader.getCuboidRowEstimatesHLL() == null",
          "120:                 || cubeStatsReader.getCuboidRowEstimatesHLL().isEmpty()) {",
          "121:             logger.info(\"Cuboid Statistics is not enabled.\");",
          "",
          "[Removed Lines]",
          "118:         CubeStatsReader cubeStatsReader = new CubeStatsReader(segment, null, segment.getConfig());",
          "",
          "[Added Lines]",
          "118:         CubeStatsReader cubeStatsReader = new CubeStatsReader(segment, null, segment.getConfig(), true);",
          "",
          "---------------"
        ],
        "build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         List<CubeSegment> segmentList = cube.getSegments(SegmentStatusEnum.READY);",
          "75:         Map<Long, Double> sizeMerged = Maps.newHashMapWithExpectedSize(statistics.size());",
          "76:         for (CubeSegment pSegment : segmentList) {",
          "78:             Map<Long, Double> pSizeMap = CubeStatsReader.getCuboidSizeMapFromRowCount(pSegment, statistics,",
          "79:                     pReader.sourceRowCount);",
          "80:             for (Long pCuboid : statistics.keySet()) {",
          "",
          "[Removed Lines]",
          "77:             CubeStatsReader pReader = new CubeStatsReader(pSegment, null, pSegment.getConfig());",
          "",
          "[Added Lines]",
          "77:             CubeStatsReader pReader = new CubeStatsReader(pSegment, null, pSegment.getConfig(), true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         Map<Long, HLLCounter> cuboidHLLMapMerged = Maps.newHashMapWithExpectedSize(cuboidSet.size());",
          "103:         Map<Long, Double> sizeMapMerged = Maps.newHashMapWithExpectedSize(cuboidSet.size());",
          "104:         for (CubeSegment pSegment : segmentList) {",
          "106:             Map<Long, HLLCounter> pHLLMap = pReader.getCuboidRowHLLCounters();",
          "107:             if (pHLLMap == null || pHLLMap.isEmpty()) {",
          "108:                 logger.info(\"Cuboid Statistics for segment \" + pSegment.getName() + \" is not enabled.\");",
          "",
          "[Removed Lines]",
          "105:             CubeStatsReader pReader = new CubeStatsReader(pSegment, null, pSegment.getConfig());",
          "",
          "[Added Lines]",
          "105:             CubeStatsReader pReader = new CubeStatsReader(pSegment, null, pSegment.getConfig(), true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:             return null;",
          "148:         }",
          "151:         if (cubeStatsReader.getCuboidRowEstimatesHLL() == null",
          "152:                 || cubeStatsReader.getCuboidRowEstimatesHLL().isEmpty()) {",
          "153:             logger.info(\"Cuboid Statistics is not enabled.\");",
          "",
          "[Removed Lines]",
          "150:         CubeStatsReader cubeStatsReader = new CubeStatsReader(cubeSegment, null, cubeSegment.getConfig());",
          "",
          "[Added Lines]",
          "150:         CubeStatsReader cubeStatsReader = new CubeStatsReader(cubeSegment, null, cubeSegment.getConfig(), true);",
          "",
          "---------------"
        ],
        "build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/common/MapReduceUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         logger.info(\"Having per reduce MB \" + perReduceInputMB + \", reduce count ratio \" + reduceCountRatio + \", level \"",
          "68:                 + level);",
          "72:         double parentLayerSizeEst, currentLayerSizeEst, adjustedCurrentLayerSizeEst;",
          "",
          "[Removed Lines]",
          "70:         CubeStatsReader cubeStatsReader = new CubeStatsReader(cubeSegment, cuboidScheduler, kylinConfig);",
          "",
          "[Added Lines]",
          "70:         CubeStatsReader cubeStatsReader = new CubeStatsReader(cubeSegment, cuboidScheduler, kylinConfig, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:             throws IOException {",
          "112:         KylinConfig kylinConfig = cubeSeg.getConfig();",
          "115:         double totalSizeInM = 0;",
          "116:         for (Double cuboidSize : cubeSizeMap.values()) {",
          "117:             totalSizeInM += cuboidSize;",
          "",
          "[Removed Lines]",
          "114:         Map<Long, Double> cubeSizeMap = new CubeStatsReader(cubeSeg, cuboidScheduler, kylinConfig).getCuboidSizeMap();",
          "",
          "[Added Lines]",
          "114:         Map<Long, Double> cubeSizeMap = new CubeStatsReader(cubeSeg, cuboidScheduler, kylinConfig, true).getCuboidSizeMap();",
          "",
          "---------------"
        ],
        "build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java||build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java": [
          "File: build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java -> build-engine/src/main/java/org/apache/kylin/engine/mr/common/StatisticsDecisionUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.engine.mr.common;",
          "21: import java.io.IOException;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "25: import java.util.Random;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.cube.CubeInstance;",
          "29: import org.apache.kylin.cube.CubeManager;",
          "",
          "[Removed Lines]",
          "22: import java.util.HashMap;",
          "",
          "[Added Lines]",
          "26: import com.google.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     protected static final Logger logger = LoggerFactory.getLogger(StatisticsDecisionUtil.class);",
          "41:     public static void decideCubingAlgorithm(CubingJob cubingJob, CubeSegment seg) throws IOException {",
          "43:         decideCubingAlgorithm(cubingJob, seg, cubeStats.getMapperOverlapRatioOfFirstBuild(),",
          "44:                 cubeStats.getMapperNumberOfFirstBuild());",
          "45:     }",
          "",
          "[Removed Lines]",
          "42:         CubeStatsReader cubeStats = new CubeStatsReader(seg, null, seg.getConfig());",
          "",
          "[Added Lines]",
          "42:         CubeStatsReader cubeStats = new CubeStatsReader(seg, null, seg.getConfig(), true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:     public static Map<Long, Long> optimizeCubingPlan(CubeSegment segment) throws IOException {",
          "102:         }",
          "104:         Map<Long, Long> recommendCuboidsWithStats = CuboidRecommenderUtil.getRecommendCuboidList(segment);",
          "105:         if (recommendCuboidsWithStats == null || recommendCuboidsWithStats.isEmpty()) {",
          "107:         }",
          "109:         CubeInstance cube = segment.getCubeInstance();",
          "",
          "[Removed Lines]",
          "98:         if (isAbleToOptimizeCubingPlan(segment)) {",
          "99:             logger.info(\"It's able to trigger cuboid planner algorithm.\");",
          "100:         } else {",
          "101:             return new HashMap<>();",
          "106:             return new HashMap<>();",
          "",
          "[Added Lines]",
          "98:         if (!isAbleToOptimizeCubingPlan(segment)) {",
          "99:             return Maps.newHashMap();",
          "102:         logger.info(\"It's able to trigger cuboid planner algorithm.\");",
          "105:             return Maps.newHashMap();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:     public static boolean isAbleToOptimizeCubingPlan(CubeSegment segment) {",
          "117:         CubeInstance cube = segment.getCubeInstance();",
          "119:             return false;",
          "121:         if (cube.getSegments(SegmentStatusEnum.READY_PENDING).size() > 0) {",
          "122:             logger.info(\"Has read pending segments and will not enable cube planner.\");",
          "",
          "[Removed Lines]",
          "118:         if (!cube.getConfig().isCubePlannerEnabled())",
          "",
          "[Added Lines]",
          "117:         if (!cube.getConfig().isCubePlannerEnabled()) {",
          "119:         }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java||core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:     }",
          "373:     private CubeInstance updateCubeWithRetry(CubeUpdate update, int retry, boolean isLocal) throws IOException {",
          "375:             throw new IllegalStateException();",
          "377:         CubeInstance cube = update.getCubeInstance();",
          "378:         logger.info(\"Updating cube instance '{}'\", cube.getName());",
          "380:         Segments<CubeSegment> newSegs = (Segments) cube.getSegments().clone();",
          "383:             newSegs.addAll(Arrays.asList(update.getToAddSegs()));",
          "385:         List<String> toRemoveResources = Lists.newArrayList();",
          "386:         if (update.getToRemoveSegs() != null) {",
          "",
          "[Removed Lines]",
          "374:         if (update == null || update.getCubeInstance() == null)",
          "382:         if (update.getToAddSegs() != null)",
          "",
          "[Added Lines]",
          "374:         if (update == null || update.getCubeInstance() == null) {",
          "376:         }",
          "383:         if (update.getToAddSegs() != null) {",
          "385:         }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java||core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.cube;",
          "21: import java.io.Serializable;",
          "22: import java.text.ParseException;",
          "23: import java.text.SimpleDateFormat;",
          "24: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.io.IOException;",
          "23: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import java.util.TimeZone;",
          "31: import java.util.concurrent.ConcurrentHashMap;",
          "33: import org.apache.kylin.common.KylinConfig;",
          "34: import org.apache.kylin.common.annotation.Clarification;",
          "35: import org.apache.kylin.common.persistence.ResourceStore;",
          "36: import org.apache.kylin.common.util.Pair;",
          "37: import org.apache.kylin.common.util.ShardingHash;",
          "38: import org.apache.kylin.cube.cuboid.CuboidScheduler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import com.fasterxml.jackson.core.type.TypeReference;",
          "39: import org.apache.kylin.common.util.CompressionUtils;",
          "40: import org.apache.kylin.common.util.JsonUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:     @JsonInclude(JsonInclude.Include.NON_EMPTY)",
          "140:     private Map<String, DimensionRangeInfo> dimensionRangeInfoMap = Maps.newHashMap();",
          "142:     private Map<Long, Short> cuboidBaseShards = Maps.newConcurrentMap(); // cuboid id ==> base(starting) shard for this cuboid",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     @JsonProperty(\"cuboid_statics_rows_bytes\")",
          "148:     private byte[] cuboidStaticsRowsBytes;",
          "150:     @JsonProperty(\"cuboid_statics_size_bytes\")",
          "151:     private byte[] cuboidStaticsSizeBytes;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "690:         copy.dimensionRangeInfoMap = other.dimensionRangeInfoMap == null ? null",
          "691:                 : Maps.newHashMap(other.dimensionRangeInfoMap);",
          "692:         copy.binarySignature = other.binarySignature;",
          "693:         return copy;",
          "694:     }",
          "695: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:         copy.cuboidStaticsRowsBytes = other.cuboidStaticsRowsBytes;",
          "705:         copy.cuboidStaticsSizeBytes = other.cuboidStaticsSizeBytes;",
          "709:     public void setCuboidStaticsRowsBytes(Map<Long, Long> staticsOfRows) {",
          "710:         this.cuboidStaticsRowsBytes = compressedCuboids(staticsOfRows);",
          "711:     }",
          "713:     public void setCuboidStaticsSizeBytes(Map<Long, Long> staticsOfSize) {",
          "714:         this.cuboidStaticsSizeBytes = compressedCuboids(staticsOfSize);",
          "715:     }",
          "717:     public Map<Long, Long> getCuboidStaticsRows() {",
          "718:         return this.decompressCuboids(this.cuboidStaticsRowsBytes);",
          "719:     }",
          "721:     public Map<Long, Long> getCuboidStaticsSize() {",
          "722:         return this.decompressCuboids(this.cuboidStaticsSizeBytes);",
          "723:     }",
          "725:     private Map<Long, Long> decompressCuboids(byte[] cuboidStaticsBytes) {",
          "726:         if (cuboidStaticsBytes == null) {",
          "727:             return null;",
          "728:         }",
          "729:         byte[] uncompressed;",
          "730:         try {",
          "731:             uncompressed = CompressionUtils.decompress(cuboidStaticsBytes);",
          "732:             String str = new String(uncompressed, StandardCharsets.UTF_8);",
          "733:             TypeReference<Map<Long, Long>> typeRef = new TypeReference<Map<Long, Long>>() {};",
          "734:             Map<Long, Long> cuboids = JsonUtil.readValue(str, typeRef);",
          "735:             return cuboids.isEmpty() ? null : cuboids;",
          "736:         } catch (Exception e) {",
          "737:             throw new RuntimeException(e);",
          "738:         }",
          "739:     }",
          "741:     private byte[] compressedCuboids(Map<Long, Long> cuboids) {",
          "742:         if (cuboids == null || cuboids.isEmpty()) {",
          "743:             return null;",
          "744:         }",
          "746:         try {",
          "747:             String str = JsonUtil.writeValueAsString(cuboids);",
          "748:             return CompressionUtils.compress(str.getBytes(StandardCharsets.UTF_8));",
          "749:         } catch (IOException e) {",
          "750:             throw new RuntimeException(e);",
          "751:         }",
          "752:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java||core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java -> core-cube/src/main/java/org/apache/kylin/cube/cuboid/DefaultCuboidScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:     public Set<Long> calculateCuboidsForAggGroup(AggregationGroup agg) {",
          "293:         Set<Long> cuboidHolder = new HashSet<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:     @Override",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java||core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java -> core-cube/src/main/java/org/apache/kylin/cube/kv/CubeDimEncMap.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     @Override",
          "85:     public Dictionary<String> getDictionary(TblColRef col) {",
          "87:         return dictionaryMap.get(col);",
          "90:     }",
          "92: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:         if (dictionaryMap == null) {",
          "87:             return null;",
          "88:         }",
          "",
          "---------------"
        ],
        "core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java||core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java -> core-job/src/main/java/org/apache/kylin/job/impl/curator/CuratorLeaderSelector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:             logger.error(\"Other exception occurred when initialization DefaultScheduler:\", th);",
          "110:         } finally {",
          "111:             logger.warn(this.name + \" relinquishing leadership.\");",
          "113:                 defaultScheduler.shutdown();",
          "114:         }",
          "115:     }",
          "",
          "[Removed Lines]",
          "112:             if (defaultScheduler != null)",
          "116: }",
          "",
          "[Added Lines]",
          "112:             if (defaultScheduler != null) {",
          "114:             }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         for (int i = this.size() - 1; i >= 0; i--) {",
          "110:             T seg = this.get(i);",
          "111:             if (seg.getLastBuildTime() > 0) {",
          "113:                     latest = seg;",
          "114:             }",
          "115:         }",
          "116:         return latest;",
          "",
          "[Removed Lines]",
          "112:                 if (latest == null || seg.getLastBuildTime() > latest.getLastBuildTime())",
          "",
          "[Added Lines]",
          "112:                 if (latest == null || seg.getLastBuildTime() > latest.getLastBuildTime()) {",
          "114:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:             }",
          "278:         }",
          "281:             return null;",
          "284:     }",
          "",
          "[Removed Lines]",
          "280:         if (result.size() <= 1)",
          "282:         else",
          "283:             return (Pair<T, T>) Pair.newPair(result.getFirst(), result.getLast());",
          "",
          "[Added Lines]",
          "281:         if (result.size() <= 1) {",
          "283:         }",
          "284:         return (Pair<T, T>) Pair.newPair(result.getFirst(), result.getLast());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:         if (newSegment != null && !tobe.contains(newSegment)) {",
          "296:             tobe.add(newSegment);",
          "297:         }",
          "299:             return tobe;",
          "302:         Collections.sort(tobe);",
          "",
          "[Removed Lines]",
          "298:         if (tobe.size() == 0)",
          "",
          "[Added Lines]",
          "299:         if (tobe.size() == 0) {",
          "301:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "469:     public Pair<Boolean, Boolean> fitInSegments(ISegment newOne) {",
          "470:         if (this.isEmpty()) {",
          "472:         }",
          "474:         ISegment first = this.get(0);",
          "",
          "[Removed Lines]",
          "471:           return Pair.newPair(false, false);",
          "",
          "[Added Lines]",
          "473:           return Pair.newPair(false, false);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: public class OptimizeBuildJob extends SparkApplication {",
          "75:     private static final Logger logger = LoggerFactory.getLogger(OptimizeBuildJob.class);",
          "78:     protected static String TEMP_DIR_SUFFIX = \"_temp\";",
          "80:     private BuildLayoutWithUpdate buildLayoutWithUpdate;",
          "81:     private Map<Long, Short> cuboidShardNum = Maps.newConcurrentMap();",
          "82:     private Map<Long, Long> cuboidsRowCount = Maps.newConcurrentMap();",
          "84:     private Configuration conf = HadoopUtil.getCurrentConfiguration();",
          "85:     private CubeManager cubeManager;",
          "",
          "[Removed Lines]",
          "77:     private Map<Long, HLLCounter> cuboidHLLMap = Maps.newHashMap();",
          "",
          "[Added Lines]",
          "82:     Map<Long, Long> cuboidIdToPreciseRows;",
          "83:     Map<Long, Long> cuboidIdToPreciseSize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         optSeg = cubeInstance.getSegmentById(segmentId);",
          "106:         originalSeg = cubeInstance.getOriginalSegmentToOptimize(optSeg);",
          "107:         originalSegInfo = ManagerHub.getSegmentInfo(config, cubeId, originalSeg.getUuid());",
          "109:         calculateCuboidFromBaseCuboid();",
          "110:         buildCuboidFromParent(cubeId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:         cuboidIdToPreciseSize = originalSeg.getCuboidStaticsSize();",
          "111:         cuboidIdToPreciseRows = originalSeg.getCuboidStaticsRows();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:         SpanningTree spanningTree;",
          "151:         ParentSourceChooser sourceChooser;",
          "152:         try {",
          "154:             logger.info(\"There are {} cuboids to be built in segment {}.\", optSegInfo.toBuildLayouts().size(),",
          "155:                     optSegInfo.name());",
          "157:                 logger.debug(\"Cuboid {} has row keys: {}\", cuboid.getId(),",
          "158:                         Joiner.on(\", \").join(cuboid.getOrderedDimensions().keySet()));",
          "159:             }",
          "",
          "[Removed Lines]",
          "153:             spanningTree = new ForestSpanningTree(JavaConversions.asJavaCollection(optSegInfo.toBuildLayouts()));",
          "156:             for (LayoutEntity cuboid : JavaConversions.asJavaCollection(optSegInfo.toBuildLayouts())) {",
          "",
          "[Added Lines]",
          "157:             Collection<LayoutEntity> cuboids = JavaConversions.asJavaCollection(optSegInfo.toBuildLayouts());",
          "158:             spanningTree = new ForestSpanningTree(cuboids);",
          "161:             for (LayoutEntity cuboid : cuboids) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:         }",
          "206:         optSeg.setCuboidShardNums(cuboidShardNum);",
          "207:         optSeg.setInputRecordsSize(originalSeg.getInputRecordsSize());",
          "208:         Map<String, String> additionalInfo = optSeg.getAdditionalInfo();",
          "209:         additionalInfo.put(\"storageType\", \"\" + IStorageAware.ID_PARQUET);",
          "210:         optSeg.setAdditionalInfo(additionalInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:         optSeg.setCuboidStaticsSizeBytes(cuboidIdToPreciseSize);",
          "215:         optSeg.setCuboidStaticsRowsBytes(cuboidIdToPreciseRows);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "407:         cuboidShardNum.put(layoutId, (short) shardNum);",
          "408:         JobMetricsUtils.unRegisterQueryExecutionListener(ss, queryExecutionId);",
          "409:         BuildUtils.fillCuboidInfo(layout, path);",
          "410:     }",
          "412:     private void updateExistingLayout(LayoutEntity layout, long parentId) throws IOException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:         cuboidIdToPreciseRows.put(layoutId, layout.getRows());",
          "420:         cuboidIdToPreciseSize.put(layoutId, layout.getByteSize());",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/utils/UpdateMetadataUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:             toUpdateSeg.getSnapshots().putAll(origSeg.getSnapshots());",
          "113:             toUpdateSeg.getRowkeyStats().addAll(origSeg.getRowkeyStats());",
          "117:             Map<Long, HLLCounter> cuboidHLLMap = Maps.newHashMap();",
          "118:             if (origSegStatsReader.getCuboidRowHLLCounters() == null) {",
          "119:                 logger.warn(",
          "",
          "[Removed Lines]",
          "115:             CubeStatsReader optSegStatsReader = new CubeStatsReader(toUpdateSeg, config);",
          "116:             CubeStatsReader origSegStatsReader = new CubeStatsReader(origSeg, config);",
          "",
          "[Added Lines]",
          "115:             CubeStatsReader optSegStatsReader = new CubeStatsReader(toUpdateSeg, config, true);",
          "116:             CubeStatsReader origSegStatsReader = new CubeStatsReader(origSeg, config, true);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeMergeAssist.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:             if (mergeDataset == null) {",
          "87:                 mergeDataset = layoutDataset;",
          "89:                 mergeDataset = mergeDataset.union(layoutDataset);",
          "90:         }",
          "91:         return mergeDataset;",
          "93:     }",
          "95: }",
          "",
          "[Removed Lines]",
          "88:             } else",
          "",
          "[Added Lines]",
          "88:             } else {",
          "90:             }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     private BuildLayoutWithUpdate buildLayoutWithUpdate;",
          "90:     private Map<Long, Short> cuboidShardNum = Maps.newConcurrentMap();",
          "91:     private Map<Long, Long> cuboidsRowCount = Maps.newConcurrentMap();",
          "92:     private Map<Long, Long> recommendCuboidMap = new HashMap<>();",
          "94:     public static void main(String[] args) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     private Map<Long, Long> cuboidIdToPreciseRows = Maps.newConcurrentMap();",
          "93:     private Map<Long, Long> cuboidIdToPreciseSize = Maps.newConcurrentMap();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:             long startMills = System.currentTimeMillis();",
          "125:             spanningTree = new ForestSpanningTree(JavaConversions.asJavaCollection(statisticsSeg.toBuildLayouts()));",
          "126:             sourceChooser = new ParentSourceChooser(spanningTree, statisticsSeg, newSegment, jobId, ss, config, false);",
          "128:             sourceChooser.decideFlatTableSource(null);",
          "129:             Map<Long, HLLCounter> hllMap = new HashMap<>();",
          "130:             for (Tuple2<Object, AggInfo> cuboidData : sourceChooser.aggInfo()) {",
          "",
          "[Removed Lines]",
          "127:             sourceChooser.setNeedStatistics();",
          "",
          "[Added Lines]",
          "129:             sourceChooser.toStatistics();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:                 long diff = (layoutEntity.getRows() - recommendCuboidMap.get(layoutEntity.getId()));",
          "232:                 deviation = diff / (layoutEntity.getRows() + 0.0d);",
          "233:             }",
          "234:             cuboidStatics.add(String.format(Locale.getDefault(), template, layoutEntity.getId(),",
          "235:                     layoutEntity.getRows(), layoutEntity.getByteSize(), deviation));",
          "236:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:             collectPreciseStatics(cuboidIdToPreciseRows, cuboidIdToPreciseSize, layoutEntity);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:         segment.setInputRecords(sourceRowCount);",
          "259:         segment.setSnapshots(new ConcurrentHashMap<>(segmentInfo.getSnapShot2JavaMap()));",
          "260:         segment.setCuboidShardNums(cuboidShardNum);",
          "261:         Map<String, String> additionalInfo = segment.getAdditionalInfo();",
          "262:         additionalInfo.put(\"storageType\", \"\" + IStorageAware.ID_PARQUET);",
          "263:         segment.setAdditionalInfo(additionalInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:         segment.setCuboidStaticsRowsBytes(cuboidIdToPreciseRows);",
          "266:         segment.setCuboidStaticsSizeBytes(cuboidIdToPreciseSize);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266:         cubeManager.updateCube(update, true);",
          "267:     }",
          "269:     private void collectPersistedTablePath(List<String> persistedFlatTable, ParentSourceChooser sourceChooser) {",
          "270:         String flatTablePath = sourceChooser.persistFlatTableIfNecessary();",
          "271:         if (!flatTablePath.isEmpty()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     private void collectPreciseStatics(Map<Long, Long> cuboidIdToPreciseRows, Map<Long, Long> cuboidIdToPreciseSize,",
          "276:                                        LayoutEntity layoutEntity) {",
          "278:         cuboidIdToPreciseRows.put(layoutEntity.getId(), layoutEntity.getRows());",
          "279:         cuboidIdToPreciseSize.put(layoutEntity.getId(), layoutEntity.getByteSize());",
          "280:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "279:         CubeInstance cubeCopy = cubeInstance.latestCopyForWrite();",
          "280:         CubeUpdate update = new CubeUpdate(cubeCopy);",
          "283:             update.setCuboids(recommendCuboidMap);",
          "285:         List<CubeSegment> cubeSegments = Lists.newArrayList();",
          "286:         for (Map.Entry<String, Object> entry : toUpdateSegmentSourceSize.entrySet()) {",
          "",
          "[Removed Lines]",
          "282:         if (recommendCuboidMap != null && !recommendCuboidMap.isEmpty())",
          "",
          "[Added Lines]",
          "295:         if (recommendCuboidMap != null && !recommendCuboidMap.isEmpty()) {",
          "297:         }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     private List<CubeSegment> mergingSegments = Lists.newArrayList();",
          "62:     private List<SegmentInfo> mergingSegInfos = Lists.newArrayList();",
          "63:     private Map<Long, Short> cuboidShardNum = Maps.newConcurrentMap();",
          "65:     @Override",
          "66:     protected void doExecute() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     Map<Long, Long> cuboidIdToPreciseRows = Maps.newConcurrentMap();",
          "65:     Map<Long, Long> cuboidIdToPreciseSize = Maps.newConcurrentMap();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:         JobMetricsUtils.registerQueryExecutionListener(ss, queryExecutionId);",
          "193:         BuildUtils.fillCuboidInfo(layout, path);",
          "195:         return layout;",
          "196:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:         cuboidIdToPreciseSize.put(layoutId, layout.getByteSize());",
          "196:         cuboidIdToPreciseRows.put(layoutId, layout.getRows());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:         List<CubeSegment> cubeSegments = Lists.newArrayList();",
          "204:         CubeSegment segment = cubeCopy.getSegmentById(segmentId);",
          "208:         for (CubeMergeAssist assist : mergeCuboidsAssist.values()) {",
          "209:             totalSourceSize += assist.getLayout().getByteSize();",
          "210:         }",
          "",
          "[Removed Lines]",
          "205:         long totalSourceSize = 0l;",
          "206:         long totalInputRecords = 0l;",
          "207:         long totalInputRecordsSize = 0l;",
          "",
          "[Added Lines]",
          "207:         long totalSourceSize = 0L;",
          "208:         long totalInputRecords = 0L;",
          "209:         long totalInputRecordsSize = 0L;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:         Map<String, String> additionalInfo = segment.getAdditionalInfo();",
          "222:         additionalInfo.put(\"storageType\", \"\" + IStorageAware.ID_PARQUET);",
          "223:         segment.setAdditionalInfo(additionalInfo);",
          "224:         cubeSegments.add(segment);",
          "225:         update.setToUpdateSegs(cubeSegments.toArray(new CubeSegment[0]));",
          "226:         cubeManager.updateCube(update, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:         segment.setCuboidStaticsRowsBytes(cuboidIdToPreciseRows);",
          "227:         segment.setCuboidStaticsSizeBytes(cuboidIdToPreciseSize);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/ParentSourceChooser.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   var flatTableSource: NBuildSourceInfo = _",
          "58:     MetadataConverter.getCubeDesc(segInfo.getCube),",
          "63:   def getAggInfo : Array[(Long, AggInfo)] = aggInfo",
          "",
          "[Removed Lines]",
          "53:   private var needStatistics = false",
          "60:   def setNeedStatistics(): Unit =",
          "61:     needStatistics = true",
          "",
          "[Added Lines]",
          "53:   private var needStatistics: Boolean = false",
          "60:   def toStatistics(): Unit = {",
          "61:     this.needStatistics = true",
          "62:   }",
          "64:   def cancelStatistics(): Unit = {",
          "65:     this.needStatistics = false",
          "66:   }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java": [
          "File: kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java -> kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NOptimizeJobTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         FileSystem fs = HadoopUtil.getWorkingFileSystem();",
          "111:         for (CubeSegment segment : cube.getSegments()) {",
          "112:             Assert.assertEquals(SegmentStatusEnum.READY, segment.getStatus());",
          "114:             Assert.assertEquals(recommendCuboids, segStatsReader.getCuboidRowHLLCounters().keySet());",
          "115:             String cuboidPath = PathManager.getSegmentParquetStoragePath(cube, segment.getName(), segment.getStorageLocationIdentifier());",
          "116:             Assert.assertTrue(fs.exists(new Path(cuboidPath)));",
          "",
          "[Removed Lines]",
          "113:             CubeStatsReader segStatsReader = new CubeStatsReader(segment, config);",
          "",
          "[Added Lines]",
          "113:             CubeStatsReader segStatsReader = new CubeStatsReader(segment, config, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0be292d8d9c53fd948258be3bd8a084b00bb3364",
      "candidate_info": {
        "commit_hash": "0be292d8d9c53fd948258be3bd8a084b00bb3364",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/0be292d8d9c53fd948258be3bd8a084b00bb3364",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java"
        ],
        "message": "add api to support for mdx",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java||server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java||server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java||server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java||server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java||server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java||server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/AccessController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.kylin.shaded.com.google.common.base.Preconditions;",
          "28: import org.apache.kylin.common.persistence.AclEntity;",
          "29: import org.apache.kylin.common.util.Pair;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.kylin.rest.response.EnvelopeResponse;",
          "28: import org.apache.kylin.rest.response.ResponseCode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         return accessService.getUserPermissionInPrj(project);",
          "99:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     @RequestMapping(value = \"/user/permission/{project}/mdx\", method = {RequestMethod.GET}, produces = {\"application/json\"})",
          "104:     @ResponseBody",
          "105:     public EnvelopeResponse getUserPermissionInPrjForMdx(@PathVariable(\"project\") String project) {",
          "106:         String permission = accessService.getUserPermissionInPrj(project);",
          "107:         return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, permission, \"\");",
          "108:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     @RequestMapping(value = \"/{type}/{project}/mdx\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "151:     @ResponseBody",
          "152:     public EnvelopeResponse<List<AccessEntryResponse>> getAccessEntitiesForMdx(@PathVariable String type, @PathVariable String project) throws IOException {",
          "153:         String uuid = projectService.getIdOfProject(project);",
          "154:         ExternalAclProvider eap = ExternalAclProvider.getInstance();",
          "155:         if (uuid == null || eap == null) {",
          "156:             AclEntity ae = accessService.getAclEntity(type, uuid);",
          "157:             Acl acl = accessService.getAcl(ae);",
          "158:             return new EnvelopeResponse<>(ResponseCode.CODE_SUCCESS, accessService.generateAceResponses(acl), \"\");",
          "159:         }",
          "161:         List<AccessEntryResponse> ret = new ArrayList<>();",
          "162:         List<Pair<String, AclPermission>> acl = eap.getAcl(type, uuid);",
          "163:         if (acl != null) {",
          "164:             for (Pair<String, AclPermission> p : acl) {",
          "165:                 PrincipalSid sid = new PrincipalSid(p.getFirst());",
          "166:                 ret.add(new AccessEntryResponse(null, sid, p.getSecond(), true));",
          "167:             }",
          "168:         } else {",
          "170:             for (UserDetails user : userService.listUsers()) {",
          "171:                 PrincipalSid sid = new PrincipalSid(user.getUsername());",
          "172:                 List<String> authorities = AclPermissionUtil.transformAuthorities(user.getAuthorities());",
          "173:                 for (Permission p : AclPermissionFactory.getPermissions()) {",
          "174:                     if (!eap.checkPermission(user.getUsername(), authorities, type, uuid, p)) {",
          "175:                         continue;",
          "176:                     }",
          "177:                     ret.add(new AccessEntryResponse(null, sid, p, true));",
          "178:                 }",
          "179:             }",
          "180:         }",
          "181:         return new EnvelopeResponse<>(ResponseCode.CODE_SUCCESS, ret, \"\");",
          "182:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.PrintWriter;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collections;",
          "25: import java.util.Iterator;",
          "26: import java.util.List;",
          "27: import java.util.Locale;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:         return response.subList(coffset, coffset + climit);",
          "173:     }",
          "175:     @RequestMapping(value = \"validEncodings\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "176:     @ResponseBody",
          "177:     public Map<String, Integer> getValidEncodings() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     @RequestMapping(value = \"mdx\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "177:     @ResponseBody",
          "178:     public EnvelopeResponse getCubesForMdx(@RequestParam(value = \"cubeName\", required = false) String cubeName,",
          "179:                                                @RequestParam(value = \"modelName\", required = false) String modelName,",
          "180:                                                @RequestParam(value = \"projectName\", required = false) String projectName,",
          "181:                                                @RequestParam(value = \"limit\", required = false) Integer limit,",
          "182:                                                @RequestParam(value = \"offset\", required = false) Integer offset) {",
          "183:         List<CubeInstance> cubes = cubeService.listAllCubes(cubeName, projectName, modelName, false);",
          "185:         List<CubeInstanceResponse> response = Lists.newArrayListWithExpectedSize(cubes.size());",
          "186:         for (CubeInstance cube : cubes) {",
          "187:             try {",
          "188:                 response.add(cubeService.createCubeInstanceResponse(cube));",
          "189:             } catch (Exception e) {",
          "190:                 logger.error(\"Error creating cube instance response, skipping.\", e);",
          "191:             }",
          "192:         }",
          "194:         int climit = (null == limit) ? response.size() : limit;",
          "195:         int coffset = (null == offset) ? 0 : offset;",
          "196:         List<CubeInstanceResponse> result = response.subList(coffset, coffset + climit);",
          "197:         if (response.size() <= coffset) {",
          "198:             result = Collections.emptyList();",
          "199:         }",
          "201:         if ((response.size() - coffset) < climit) {",
          "202:             result = response.subList(coffset, response.size());",
          "203:         }",
          "204:         Map<String, Object> data = new HashMap<>();",
          "205:         data.put(\"size\", response.size());",
          "206:         data.put(\"cubes\", result);",
          "208:         return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, data, \"\");",
          "209:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.apache.kylin.cube.CubeInstance;",
          "24: import org.apache.kylin.cube.model.CubeDesc;",
          "25: import org.apache.kylin.rest.service.CubeService;",
          "26: import org.springframework.beans.factory.annotation.Autowired;",
          "27: import org.springframework.beans.factory.annotation.Qualifier;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.kylin.rest.response.EnvelopeResponse;",
          "26: import org.apache.kylin.rest.response.ResponseCode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         }",
          "67:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @RequestMapping(value = \"/{cubeName}/mdx\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "72:     @ResponseBody",
          "73:     public EnvelopeResponse getCubeForMdx(@PathVariable String cubeName) {",
          "74:         CubeInstance cubeInstance = cubeService.getCubeManager().getCube(cubeName);",
          "76:         if (cubeInstance == null) {",
          "77:             return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, null, \"\");",
          "78:         }",
          "80:         CubeDesc cSchema = cubeInstance.getDescriptor();",
          "81:         if (cSchema == null) {",
          "82:             return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, null, \"\");",
          "83:         }",
          "84:         return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, cSchema, \"\");",
          "85:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.controller;",
          "21: import java.io.IOException;",
          "22: import java.util.Iterator;",
          "23: import java.util.List;",
          "24: import java.util.Locale;",
          "25: import java.util.Objects;",
          "27: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.HashMap;",
          "26: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         }",
          "101:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     @RequestMapping(value = \"mdx\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "106:     @ResponseBody",
          "107:     public EnvelopeResponse<List> getModelsForMdx(@RequestParam(value = \"modelName\", required = false) String modelName,",
          "108:                                          @RequestParam(value = \"project\", required = false) String project,",
          "109:                                          @RequestParam(value = \"limit\", required = false) Integer limit,",
          "110:                                          @RequestParam(value = \"offset\", required = false) Integer offset) {",
          "111:         try {",
          "112:             List<DataModelDesc> models = modelService.getModels(modelName, project, limit, offset);",
          "113:             Map<String, List<DataModelDesc>> data = new HashMap<>();",
          "114:             data.put(\"models\", models);",
          "115:             return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, data, \"\");",
          "116:         } catch (IOException e) {",
          "117:             logger.error(\"Failed to deal with the request:\" + e.getLocalizedMessage(), e);",
          "118:             throw new InternalErrorException(\"Failed to deal with the request: \" + e.getLocalizedMessage(), e);",
          "119:         }",
          "120:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.IOException;",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collections;",
          "24: import java.util.List;",
          "25: import java.util.Locale;",
          "27: import org.apache.commons.lang.StringUtils;",
          "28: import org.apache.kylin.common.persistence.AclEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.HashMap;",
          "27: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.kylin.rest.exception.InternalErrorException;",
          "34: import org.apache.kylin.rest.exception.NotFoundException;",
          "35: import org.apache.kylin.rest.request.ProjectRequest;",
          "36: import org.apache.kylin.rest.security.AclPermission;",
          "37: import org.apache.kylin.rest.service.AccessService;",
          "38: import org.apache.kylin.rest.service.CubeService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.rest.response.EnvelopeResponse;",
          "39: import org.apache.kylin.rest.response.ResponseCode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:         return projectService.listProjects(limit, offset);",
          "94:     }",
          "96:     @RequestMapping(value = \"/readable\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "97:     @ResponseBody",
          "98:     public List<ProjectInstance> getReadableProjects(@RequestParam(value = \"limit\", required = false) Integer limit,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     @RequestMapping(value = \"/mdx\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "101:     @ResponseBody",
          "102:     public EnvelopeResponse getProjectsForMdx(@RequestParam(value = \"limit\", required = false) Integer limit,",
          "103:                                               @RequestParam(value = \"offset\", required = false) Integer offset) {",
          "104:         List<ProjectInstance> projects = projectService.listProjects(limit, offset);",
          "105:         Map<String, Object> data = new HashMap<>();",
          "106:         data.put(\"projects\", projects);",
          "107:         data.put(\"size\", projects.size());",
          "109:         return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, data, \"\");",
          "110:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java||server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import org.apache.kylin.rest.request.PrepareSqlRequest;",
          "48: import org.apache.kylin.rest.request.SQLRequest;",
          "49: import org.apache.kylin.rest.request.SaveSqlRequest;",
          "50: import org.apache.kylin.rest.response.SQLResponse;",
          "51: import org.apache.kylin.rest.service.QueryService;",
          "52: import org.apache.kylin.rest.util.ValidateUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import org.apache.kylin.rest.response.EnvelopeResponse;",
          "51: import org.apache.kylin.rest.response.ResponseCode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:         }",
          "197:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     @RequestMapping(value = \"/tables_and_columns/mdx\", method = RequestMethod.GET, produces = { \"application/json\" })",
          "202:     @ResponseBody",
          "203:     public EnvelopeResponse getMetadataForMdx(MetaRequest metaRequest) throws IOException {",
          "204:         try {",
          "205:             List<TableMeta> metadata= queryService.getMetadataFilterByUser(metaRequest.getProject());",
          "206:             return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, metadata, \"\");",
          "207:         } catch (SQLException e) {",
          "208:             throw new InternalErrorException(e.getLocalizedMessage(), e);",
          "209:         }",
          "210:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java||server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/TableACLController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import static org.apache.kylin.metadata.MetadataConstants.TYPE_USER;",
          "27: import org.apache.kylin.rest.constant.Constant;",
          "28: import org.apache.kylin.rest.service.TableACLService;",
          "29: import org.apache.kylin.rest.service.UserService;",
          "30: import org.apache.kylin.rest.util.ValidateUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.rest.response.EnvelopeResponse;",
          "29: import org.apache.kylin.rest.response.ResponseCode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         return tableACLService.getCanAccessList(project, table, allIdentifiers, type);",
          "68:     }",
          "70:     @RequestMapping(value = \"/table/{project}/{type}/black/{table:.+}\", method = {RequestMethod.GET}, produces = {\"application/json\"})",
          "71:     @ResponseBody",
          "72:     public List<String> getUsersCannotQueryTheTbl(@PathVariable String project, @PathVariable String type, @PathVariable String table) throws IOException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     @RequestMapping(value = \"/table/{project}/{type}/{table:.+}/mdx\", method = {RequestMethod.GET}, produces = {\"application/json\"})",
          "73:     @ResponseBody",
          "74:     public EnvelopeResponse<List<String>> getUsersOrGroupsCanQueryTheTblForMdx(@PathVariable String project, @PathVariable String type, @PathVariable String table) throws IOException {",
          "75:         validateUtil.validateArgs(project, table);",
          "76:         validateUtil.validateTable(project, table);",
          "77:         Set<String> allIdentifiers = validateUtil.getAllIdentifiersInPrj(project, type);",
          "79:         if (type.equals(TYPE_USER)) {",
          "80:             allIdentifiers.addAll(userService.listAdminUsers());",
          "81:         } else {",
          "82:             allIdentifiers.add(Constant.ROLE_ADMIN);",
          "83:         }",
          "84:         List<String> usersOrGroups = tableACLService.getCanAccessList(project, table, allIdentifiers, type);",
          "85:         return new EnvelopeResponse<>(ResponseCode.CODE_SUCCESS, usersOrGroups, \"\");",
          "86:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java||server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.kylin.rest.exception.InternalErrorException;",
          "35: import org.apache.kylin.rest.exception.NotFoundException;",
          "36: import org.apache.kylin.rest.request.HiveTableRequest;",
          "37: import org.apache.kylin.rest.service.TableACLService;",
          "38: import org.apache.kylin.rest.service.TableService;",
          "39: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.kylin.rest.response.EnvelopeResponse;",
          "38: import org.apache.kylin.rest.response.ResponseCode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         }",
          "88:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     @RequestMapping(value = \"mdx\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "93:     @ResponseBody",
          "94:     public EnvelopeResponse<List<TableDesc>> getTableDescForMdx(@RequestParam(value = \"ext\", required = false) boolean withExt,",
          "95:                                               @RequestParam(value = \"project\", required = true) String project) {",
          "96:         try {",
          "97:             List<TableDesc> tableDescs = tableService.getTableDescByProject(project, withExt);",
          "98:             return new EnvelopeResponse<List<TableDesc>>(ResponseCode.CODE_SUCCESS, tableDescs, \"\");",
          "99:         } catch (IOException e) {",
          "100:             logger.error(\"Failed to get Hive Tables\", e);",
          "101:             throw new InternalErrorException(e.getLocalizedMessage(), e);",
          "102:         }",
          "103:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java||server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java -> server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         return updatedProject;",
          "125:     }",
          "127:     @PostFilter(Constant.ACCESS_POST_FILTER_READ)",
          "128:     public List<ProjectInstance> listProjects(final Integer limit, final Integer offset) {",
          "129:         List<ProjectInstance> projects = listAllProjects(limit, offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     public String getIdOfProject(String project) {",
          "128:         List<ProjectInstance> projects = listAllProjects(null, null);",
          "129:         for (ProjectInstance prj: projects) {",
          "130:             if (!prj.getName().equalsIgnoreCase(project)) {",
          "131:                 continue;",
          "132:             }",
          "133:             return prj.getId();",
          "134:         }",
          "135:         return null;",
          "136:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dc7948f45f7e6b03a0c8c646083891ea14cf1f2",
      "candidate_info": {
        "commit_hash": "6dc7948f45f7e6b03a0c8c646083891ea14cf1f2",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/6dc7948f45f7e6b03a0c8c646083891ea14cf1f2",
        "files": [
          "tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java"
        ],
        "message": "KYLIN-4580 Add 90, 360 days auto-merge thresholds for system cubes\n\n(cherry picked from commit 996d2491b78311942b1683a915c117bf2bcece00)",
        "before_after_code_files": [
          "tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java||tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java||tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java": [
          "File: tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java -> tool/src/main/java/org/apache/kylin/tool/metrics/systemcube/CubeDescCreator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:         desc.setHbaseMapping(hBaseMapping);",
          "557:         desc.setNotifyList(Lists.<String> newArrayList());",
          "558:         desc.setStatusNeedNotify(Lists.newArrayList(JobStatusEnum.ERROR.toString()));",
          "560:         desc.setEngineType(IEngineAware.ID_SPARK_II);",
          "561:         desc.setStorageType(storageType);",
          "562:         desc.setAggregationGroups(Lists.newArrayList(aggGroup));",
          "",
          "[Removed Lines]",
          "559:         desc.setAutoMergeTimeRanges(new long[] { 86400000L, 604800000L, 2419200000L });",
          "",
          "[Added Lines]",
          "559:         desc.setAutoMergeTimeRanges(new long[] { 86400000L, 604800000L, 2419200000L, 7776000000L, 31104000000L });",
          "",
          "---------------"
        ]
      }
    }
  ]
}