{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58992fdbe531c0b44f3b6df77fbbad796246f6ff",
      "candidate_info": {
        "commit_hash": "58992fdbe531c0b44f3b6df77fbbad796246f6ff",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/58992fdbe531c0b44f3b6df77fbbad796246f6ff",
        "files": [
          "package.json",
          "packages/edit/src/mixin.js",
          "packages/export/src/mixin.js",
          "packages/keyboard/src/mixin.js",
          "packages/menu/src/mixin.js",
          "packages/table/src/cell.js",
          "packages/table/src/methods.js",
          "packages/validator/src/mixin.js",
          "types/table.d.ts"
        ],
        "message": "\u4fee\u590d\u6811\u7ed3\u6784\u6309\u952e\u64cd\u4f5c\u65e0\u6cd5\u56de\u9000\u5230\u4e0a\u4e00\u7ea7\u95ee\u9898",
        "before_after_code_files": [
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js",
          "packages/menu/src/mixin.js||packages/menu/src/mixin.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js",
          "types/table.d.ts||types/table.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:       const { actived, focused } = editStore",
          "426:       const { row, column } = params",
          "427:       const { editRender } = column",
          "429:       const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod",
          "430:       if (cell && isEnableConf(editConfig) && isEnableConf(editRender)) {",
          "",
          "[Removed Lines]",
          "428:       const cell = params.cell = (params.cell || this.getCell(row, column))",
          "",
          "[Added Lines]",
          "428:       const cell = params.cell = (params.cell || this.getCellElement(row, column))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678:       const column = XEUtils.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn",
          "679:       if (row && column && isEnableConf(editConfig) && isEnableConf(column.editRender)) {",
          "680:         return this.scrollToRow(row, true).then(() => {",
          "682:           if (cell) {",
          "683:             this.handleActived({ row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column), cell, $table: this })",
          "684:             this.lastCallTime = Date.now()",
          "",
          "[Removed Lines]",
          "681:           const cell = this.getCell(row, column)",
          "",
          "[Added Lines]",
          "681:           const cell = this.getCellElement(row, column)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "696:       if (row && column && editOpts.trigger !== 'manual') {",
          "697:         const rowIndex = this.findRowIndexOf(tableData, row)",
          "698:         if (rowIndex > -1) {",
          "700:           const params = { row, rowIndex, column, columnIndex: visibleColumn.indexOf(column), cell }",
          "701:           this.handleSelected(params, {})",
          "702:         }",
          "",
          "[Removed Lines]",
          "699:           const cell = this.getCell(row, column)",
          "",
          "[Added Lines]",
          "699:           const cell = this.getCellElement(row, column)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:       const { row, column } = selected",
          "773:       this.reColSdCls()",
          "774:       if (row && column) {",
          "776:         if (cell) {",
          "777:           DomTools.addClass(cell, 'col--selected')",
          "778:         }",
          "",
          "[Removed Lines]",
          "775:         const cell = this.getCell(row, column)",
          "",
          "[Added Lines]",
          "775:         const cell = this.getCellElement(row, column)",
          "",
          "---------------"
        ],
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:                     htmlCellElem.innerHTML = cellValue",
          "138:                     cellValue = htmlCellElem.innerText.trim()",
          "139:                   } else {",
          "141:                     if (cell) {",
          "142:                       cellValue = cell.innerText.trim()",
          "143:                     }",
          "",
          "[Removed Lines]",
          "140:                     const cell = $xetable.getCell(row, column)",
          "",
          "[Added Lines]",
          "140:                     const cell = $xetable.getCellElement(row, column)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:                 htmlCellElem.innerHTML = cellValue",
          "194:                 cellValue = htmlCellElem.innerText.trim()",
          "195:               } else {",
          "197:                 if (cell) {",
          "198:                   cellValue = cell.innerText.trim()",
          "199:                 }",
          "",
          "[Removed Lines]",
          "196:                 const cell = $xetable.getCell(row, column)",
          "",
          "[Added Lines]",
          "196:                 const cell = $xetable.getCellElement(row, column)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:   return headExportMethod ? headExportMethod({ column, options: opts, $table: $xetable }) : ((opts.original ? column.property : column.getTitle()) || '')",
          "227: }",
          "230:   const { columnOpts } = $xetable",
          "231:   const renderOpts = column.editRender || column.cellRender",
          "232:   let footLabelMethod = column.footerExportMethod",
          "",
          "[Removed Lines]",
          "229: function getFooterCellValue ($xetable, opts, items, column) {",
          "",
          "[Added Lines]",
          "229: function getFooterCellValue ($xetable, opts, row, column) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:     footLabelMethod = columnOpts.footerExportMethod",
          "241:   }",
          "242:   const _columnIndex = $xetable.getVTColumnIndex(column)",
          "245: }",
          "247: function getFooterData (opts, footerTableData) {",
          "",
          "[Removed Lines]",
          "243:   const cellValue = footLabelMethod ? footLabelMethod({ $table: $xetable, items, itemIndex: _columnIndex, row: items, _columnIndex, column, options: opts }) : XEUtils.toValueString(items[_columnIndex])",
          "244:   return cellValue",
          "",
          "[Added Lines]",
          "243:   if (footLabelMethod) {",
          "244:     return footLabelMethod({ $table: $xetable, items: row, itemIndex: _columnIndex, row, _columnIndex, column, options: opts })",
          "245:   }",
          "247:   if (XEUtils.isArray(row)) {",
          "248:     return XEUtils.toValueString(row[_columnIndex])",
          "249:   }",
          "250:   return XEUtils.get(row, column.field)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:   if (opts.isFooter) {",
          "291:     const footerTableData = $xetable.footerTableData",
          "292:     const footers = getFooterData(opts, footerTableData)",
          "295:     })",
          "296:   }",
          "297:   return content",
          "",
          "[Removed Lines]",
          "293:     footers.forEach(rows => {",
          "294:       content += columns.map(column => toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column))).join(',') + enterSymbol",
          "",
          "[Added Lines]",
          "299:     footers.forEach(row => {",
          "300:       content += columns.map(column => toTxtCellLabel(getFooterCellValue($xetable, opts, row, column))).join(',') + enterSymbol",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:   if (opts.isFooter) {",
          "309:     const footerTableData = $xetable.footerTableData",
          "310:     const footers = getFooterData(opts, footerTableData)",
          "313:     })",
          "314:   }",
          "315:   return content",
          "",
          "[Removed Lines]",
          "311:     footers.forEach(rows => {",
          "312:       content += columns.map(column => toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column))).join(',') + enterSymbol",
          "",
          "[Added Lines]",
          "317:     footers.forEach(row => {",
          "318:       content += columns.map(column => toTxtCellLabel(getFooterCellValue($xetable, opts, row, column))).join(',') + enterSymbol",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "485:     const footers = getFooterData(opts, footerTableData)",
          "486:     if (footers.length) {",
          "487:       tables.push('<tfoot>')",
          "489:         tables.push(",
          "490:           `<tr>${columns.map(column => {",
          "491:             const footAlign = column.footerAlign || column.align || allFooterAlign || allAlign",
          "492:             const classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : []",
          "494:             if (footAlign) {",
          "495:               classNames.push(`col--${footAlign}`)",
          "496:             }",
          "",
          "[Removed Lines]",
          "488:       footers.forEach(rows => {",
          "493:             const cellValue = getFooterCellValue($xetable, opts, rows, column)",
          "",
          "[Added Lines]",
          "494:       footers.forEach(row => {",
          "499:             const cellValue = getFooterCellValue($xetable, opts, row, column)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "536:   if (opts.isFooter) {",
          "537:     const footerTableData = $xetable.footerTableData",
          "538:     const footers = getFooterData(opts, footerTableData)",
          "541:     })",
          "542:   }",
          "543:   return `${xml}</Table></Worksheet></Workbook>`",
          "",
          "[Removed Lines]",
          "539:     footers.forEach(rows => {",
          "540:       xml += `<Row>${columns.map(column => `<Cell><Data ss:Type=\"String\">${getFooterCellValue($xetable, opts, rows, column)}</Data></Cell>`).join('')}</Row>`",
          "",
          "[Added Lines]",
          "545:     footers.forEach(row => {",
          "546:       xml += `<Row>${columns.map(column => `<Cell><Data ss:Type=\"String\">${getFooterCellValue($xetable, opts, row, column)}</Data></Cell>`).join('')}</Row>`",
          "",
          "---------------"
        ],
        "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js": [
          "File: packages/keyboard/src/mixin.js -> packages/keyboard/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         }",
          "94:         params.columnIndex = targetColumnIndex",
          "95:         params.column = targetColumn",
          "97:         if (editConfig) {",
          "98:           if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {",
          "99:             if (editOpts.mode === 'row') {",
          "",
          "[Removed Lines]",
          "96:         params.cell = this.getCell(params.row, params.column)",
          "",
          "[Added Lines]",
          "96:         params.cell = this.getCellElement(params.row, params.column)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:         params.column = visibleColumn[params.columnIndex]",
          "166:       }",
          "167:       this.scrollToRow(params.row, params.column).then(() => {",
          "169:         this.handleSelected(params, evnt)",
          "170:       })",
          "171:     },",
          "",
          "[Removed Lines]",
          "168:         params.cell = this.getCell(params.row, params.column)",
          "",
          "[Added Lines]",
          "168:         params.cell = this.getCellElement(params.row, params.column)",
          "",
          "---------------"
        ],
        "packages/menu/src/mixin.js||packages/menu/src/mixin.js": [
          "File: packages/menu/src/mixin.js -> packages/menu/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:               const { keyboard, row, column } = params",
          "181:               if (keyboard && row && column) {",
          "182:                 this.scrollToRow(row, column).then(() => {",
          "184:                   const { boundingTop, boundingLeft } = DomTools.getAbsolutePos(cell)",
          "185:                   top = boundingTop + scrollTop + Math.floor(cell.offsetHeight / 2)",
          "186:                   left = boundingLeft + scrollLeft + Math.floor(cell.offsetWidth / 2)",
          "",
          "[Removed Lines]",
          "183:                   const cell = this.getCell(row, column)",
          "",
          "[Added Lines]",
          "183:                   const cell = this.getCellElement(row, column)",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     }",
          "255:     if (!trigger || trigger === 'default') {",
          "256:       on.click = evnt => {",
          "258:         $table.triggerTreeExpandEvent(evnt, params)",
          "259:       }",
          "260:     }",
          "",
          "[Removed Lines]",
          "257:         evnt.stopPropagation()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:       on = {",
          "338:         click (evnt) {",
          "339:           if (!isDisabled && isVisible) {",
          "341:             $table.triggerRadioRowEvent(evnt, params)",
          "342:           }",
          "343:         }",
          "",
          "[Removed Lines]",
          "340:             evnt.stopPropagation()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:       on = {",
          "396:         click (evnt) {",
          "397:           if (!isAllCheckboxDisabled) {",
          "399:             $table.triggerCheckAllEvent(evnt, !isAllCheckboxSelected)",
          "400:           }",
          "401:         }",
          "",
          "[Removed Lines]",
          "398:             evnt.stopPropagation()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:       on = {",
          "453:         click (evnt) {",
          "454:           if (!isDisabled && isVisible) {",
          "456:             $table.triggerCheckRowEvent(evnt, params, !isChecked)",
          "457:           }",
          "458:         }",
          "",
          "[Removed Lines]",
          "455:             evnt.stopPropagation()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "517:       on = {",
          "518:         click (evnt) {",
          "519:           if (!isDisabled && isVisible) {",
          "521:             $table.triggerCheckRowEvent(evnt, params, !isChecked)",
          "522:           }",
          "523:         }",
          "",
          "[Removed Lines]",
          "520:             evnt.stopPropagation()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "592:         }],",
          "593:         on: {",
          "594:           click (evnt) {",
          "596:             $table.triggerRowExpandEvent(evnt, params)",
          "597:           }",
          "598:         }",
          "",
          "[Removed Lines]",
          "595:             evnt.stopPropagation()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1103:     }",
          "1104:     return this.$nextTick()",
          "1105:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1106:   getCellElement (row, fieldOrColumn) {",
          "1107:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1108:     if (!column) {",
          "1109:       return null",
          "1110:     }",
          "1111:     const { $refs } = this",
          "1112:     const rowid = getRowid(this, row)",
          "1113:     let bodyElem = null",
          "1114:     if (column) {",
          "1115:       bodyElem = $refs[`${column.fixed || 'table'}Body`] || $refs.tableBody",
          "1116:     }",
          "1117:     if (bodyElem && bodyElem.$el) {",
          "1118:       return bodyElem.$el.querySelector(`.vxe-body--row[rowid=\"${rowid}\"] .${column.id}`)",
          "1119:     }",
          "1120:     return null",
          "1121:   },",
          "1122:   getCellLabel (row, fieldOrColumn) {",
          "1123:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1124:     if (!column) {",
          "1125:       return null",
          "1126:     }",
          "1127:     const formatter = column.formatter",
          "1128:     const cellValue = UtilTools.getCellValue(row, column)",
          "1129:     let cellLabel = cellValue",
          "1130:     if (formatter) {",
          "1131:       let rest, formatData",
          "1132:       const { fullAllDataRowMap } = this",
          "1133:       const colid = column.id",
          "1134:       const cacheFormat = fullAllDataRowMap.has(row)",
          "1135:       if (cacheFormat) {",
          "1136:         rest = fullAllDataRowMap.get(row)",
          "1137:         formatData = rest.formatData",
          "1138:         if (!formatData) {",
          "1139:           formatData = fullAllDataRowMap.get(row).formatData = {}",
          "1140:         }",
          "1141:         if (rest && formatData[colid]) {",
          "1142:           if (formatData[colid].value === cellValue) {",
          "1143:             return formatData[colid].label",
          "1144:           }",
          "1145:         }",
          "1146:       }",
          "1147:       const formatParams = { cellValue, row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column) }",
          "1148:       if (XEUtils.isString(formatter)) {",
          "1149:         const gFormatOpts = formats.get(formatter)",
          "1150:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams) : ''",
          "1151:       } else if (XEUtils.isArray(formatter)) {",
          "1152:         const gFormatOpts = formats.get(formatter[0])",
          "1153:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams, ...formatter.slice(1)) : ''",
          "1154:       } else {",
          "1155:         cellLabel = formatter(formatParams)",
          "1156:       }",
          "1157:       if (formatData) {",
          "1158:         formatData[colid] = { value: cellValue, label: cellLabel }",
          "1159:       }",
          "1160:     }",
          "1161:     return cellLabel",
          "1162:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:     const columns = this.visibleColumn",
          "1157:     return XEUtils.isUndefined(columnIndex) ? columns.slice(0) : columns[columnIndex]",
          "1158:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1219:   getColid (fieldOrColumn) {",
          "1220:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1221:     return column ? column.id : null",
          "1222:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2734:         const { filterStore, isCtxMenu, ctxMenuStore, editStore, editOpts, editConfig, mouseConfig, mouseOpts, keyboardConfig, keyboardOpts, treeConfig, treeOpts, highlightCurrentRow, currentRow, bodyCtxMenu, rowOpts } = this",
          "2735:         const { selected, actived } = editStore",
          "2736:         const { keyCode } = evnt",
          "2738:         const isTab = keyCode === 9",
          "2739:         const isEnter = keyCode === 13",
          "2740:         const isEsc = keyCode === 27",
          "",
          "[Removed Lines]",
          "2737:         const isBack = keyCode === 8",
          "",
          "[Added Lines]",
          "2801:         const hasBackspaceKey = keyCode === 8",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2854:           } else if (actived.row || actived.column) {",
          "2855:             this.moveTabSelected(actived.args, hasShiftKey, evnt)",
          "2856:           }",
          "2858:           if (!isEditStatus) {",
          "2859:             const { delMethod, backMethod } = keyboardOpts",
          "2862:               const delPaqrams = {",
          "2863:                 row: selected.row,",
          "2864:                 rowIndex: this.getRowIndex(selected.row),",
          "",
          "[Removed Lines]",
          "2857:         } else if (keyboardConfig && (isDel || (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow ? isBack && keyboardOpts.isArrow : isBack))) {",
          "2861:             if (keyboardOpts.isDel && (selected.row || selected.column)) {",
          "",
          "[Added Lines]",
          "2921:         } else if (keyboardConfig && (treeConfig || isEnableConf(editConfig)) && (isDel || (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow ? hasBackspaceKey && keyboardOpts.isArrow : hasBackspaceKey))) {",
          "2925:             if (keyboardOpts.isDel && isEnableConf(editConfig) && (selected.row || selected.column)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2871:               } else {",
          "2872:                 setCellValue(selected.row, selected.column, null)",
          "2873:               }",
          "2875:                 if (backMethod) {",
          "2876:                   backMethod({",
          "2877:                     row: selected.row,",
          "",
          "[Removed Lines]",
          "2874:               if (isBack) {",
          "",
          "[Added Lines]",
          "2938:               if (hasBackspaceKey) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2888:                 this.updateFooter()",
          "2889:               }",
          "2890:               this.emitEvent('cell-delete-value', delPaqrams, evnt)",
          "2893:               const { parent: parentRow } = XEUtils.findTree(this.afterFullData, item => item === currentRow, { children: childrenField })",
          "2894:               if (parentRow) {",
          "",
          "[Removed Lines]",
          "2891:             } else if (isBack && keyboardOpts.isArrow && treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {",
          "",
          "[Added Lines]",
          "2955:             } else if (hasBackspaceKey && keyboardOpts.isArrow && treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3423:     if (trigger === 'manual') {",
          "3424:       return",
          "3425:     }",
          "3426:     if (checkboxOpts.isShiftKey && evnt.shiftKey && !this.treeConfig) {",
          "3427:       const checkboxRecords = this.getCheckboxRecords()",
          "3428:       if (checkboxRecords.length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3490:     evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3797:     if (trigger === 'manual') {",
          "3798:       return",
          "3799:     }",
          "3800:     this.handleCheckAllEvent(evnt, value)",
          "3801:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3865:     if (evnt) {",
          "3866:       evnt.stopPropagation()",
          "3867:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3863:     if (trigger === 'manual') {",
          "3864:       return",
          "3865:     }",
          "3866:     let newValue = row",
          "3867:     let isChange = oldValue !== newValue",
          "3868:     if (isChange) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3934:     evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4442:     if (trigger === 'manual') {",
          "4443:       return",
          "4444:     }",
          "4445:     const rowid = getRowid(this, row)",
          "4446:     if (!lazy || !rowExpandLazyLoadedMaps[rowid]) {",
          "4447:       const expanded = !this.isRowExpandByRow(row)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4514:     evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4720:     if (trigger === 'manual') {",
          "4721:       return",
          "4722:     }",
          "4723:     const rowid = getRowid(this, row)",
          "4724:     if (!lazy || !treeExpandLazyLoadedMaps[rowid]) {",
          "4725:       const expanded = !this.isTreeExpandByRow(row)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4793:     evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5290:         const type = 'change'",
          "5291:         if (this.hasCellRules) {",
          "5292:           if (this.hasCellRules(type, row, column)) {",
          "5294:             if (cell) {",
          "5295:               return this.validCellRules(type, row, column, cellValue)",
          "5296:                 .then(() => {",
          "",
          "[Removed Lines]",
          "5293:             const cell = this.getCell(row, column)",
          "",
          "[Added Lines]",
          "5364:             const cell = this.getCellElement(row, column)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5438:   getCell (row, column) {",
          "5486:   },",
          "5487:   findRowIndexOf (list, row) {",
          "5488:     return row ? XEUtils.findIndexOf(list, item => this.eqRow(item, row)) : -1",
          "",
          "[Removed Lines]",
          "5439:     const { $refs } = this",
          "5440:     const rowid = getRowid(this, row)",
          "5441:     let bodyElem = null",
          "5442:     if (column) {",
          "5443:       bodyElem = $refs[`${column.fixed || 'table'}Body`] || $refs.tableBody",
          "5444:     }",
          "5445:     if (bodyElem && bodyElem.$el) {",
          "5446:       return bodyElem.$el.querySelector(`.vxe-body--row[rowid=\"${rowid}\"] .${column.id}`)",
          "5447:     }",
          "5448:     return null",
          "5449:   },",
          "5450:   getCellLabel (row, column) {",
          "5451:     const formatter = column.formatter",
          "5452:     const cellValue = UtilTools.getCellValue(row, column)",
          "5453:     let cellLabel = cellValue",
          "5454:     if (formatter) {",
          "5455:       let rest, formatData",
          "5456:       const { fullAllDataRowMap } = this",
          "5457:       const colid = column.id",
          "5458:       const cacheFormat = fullAllDataRowMap.has(row)",
          "5459:       if (cacheFormat) {",
          "5460:         rest = fullAllDataRowMap.get(row)",
          "5461:         formatData = rest.formatData",
          "5462:         if (!formatData) {",
          "5463:           formatData = fullAllDataRowMap.get(row).formatData = {}",
          "5464:         }",
          "5465:         if (rest && formatData[colid]) {",
          "5466:           if (formatData[colid].value === cellValue) {",
          "5467:             return formatData[colid].label",
          "5468:           }",
          "5469:         }",
          "5470:       }",
          "5471:       const formatParams = { cellValue, row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column) }",
          "5472:       if (XEUtils.isString(formatter)) {",
          "5473:         const gFormatOpts = formats.get(formatter)",
          "5474:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams) : ''",
          "5475:       } else if (XEUtils.isArray(formatter)) {",
          "5476:         const gFormatOpts = formats.get(formatter[0])",
          "5477:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams, ...formatter.slice(1)) : ''",
          "5478:       } else {",
          "5479:         cellLabel = formatter(formatParams)",
          "5480:       }",
          "5481:       if (formatData) {",
          "5482:         formatData[colid] = { value: cellValue, label: cellLabel }",
          "5483:       }",
          "5484:     }",
          "5485:     return cellLabel",
          "",
          "[Added Lines]",
          "5514:     return this.getCellElement(row, column)",
          "",
          "---------------"
        ],
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:               })",
          "222:             }",
          "223:             const posAndFinish = () => {",
          "225:               DomTools.scrollToView(firstErrParams.cell)",
          "226:               this.handleValidError(firstErrParams).then(finish)",
          "227:             }",
          "",
          "[Removed Lines]",
          "224:               firstErrParams.cell = this.getCell(firstErrParams.row, firstErrParams.column)",
          "",
          "[Added Lines]",
          "224:               firstErrParams.cell = this.getCellElement(firstErrParams.row, firstErrParams.column)",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1560:   isDel?: boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1564:   isBack?: boolean",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1724667fc15cbaaeac811046cb37fc86b4e709a5",
      "candidate_info": {
        "commit_hash": "1724667fc15cbaaeac811046cb37fc86b4e709a5",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/1724667fc15cbaaeac811046cb37fc86b4e709a5",
        "files": [
          "package.json",
          "packages/grid/src/grid.js",
          "styles/grid.scss"
        ],
        "message": "releases 3.8.7",
        "before_after_code_files": [
          "packages/grid/src/grid.js||packages/grid/src/grid.js",
          "styles/grid.scss||styles/grid.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   const { _e, $scopedSlots, formConfig } = _vm",
          "145:   const formSlot = $scopedSlots.form",
          "146:   const hasForm = !!(formSlot || isEnableConf(formConfig))",
          "153: }",
          "159:   const { _e, $scopedSlots, toolbarConfig, toolbar } = _vm",
          "160:   const toolbarSlot = $scopedSlots.toolbar",
          "161:   const hasToolbar = !!(toolbarSlot || isEnableConf(toolbarConfig) || toolbar)",
          "177: }",
          "183:   const { _e, $scopedSlots } = _vm",
          "184:   const topSlot = $scopedSlots.top",
          "",
          "[Removed Lines]",
          "143: function renderForms (h, _vm) {",
          "148:   return hasForm ? h('div', {",
          "149:     key: 'form',",
          "150:     ref: 'formWrapper',",
          "151:     class: 'vxe-grid--form-wrapper'",
          "152:   }, formSlot ? formSlot.call(_vm, { $grid: _vm }, h) : renderDefaultForm(h, _vm)) : _e()",
          "158: function renderToolbars (h, _vm) {",
          "163:   return hasToolbar ? h('div', {",
          "164:     key: 'toolbar',",
          "165:     ref: 'toolbarWrapper',",
          "166:     class: 'vxe-grid--toolbar-wrapper'",
          "167:   }, toolbarSlot",
          "168:     ? toolbarSlot.call(_vm, { $grid: _vm }, h)",
          "169:     : [",
          "170:         h('vxe-toolbar', {",
          "171:           props: _vm.toolbarOpts,",
          "172:           ref: 'xToolbar',",
          "173:           scopedSlots: getToolbarSlots(_vm)",
          "174:         })",
          "175:       ]",
          "176:   ) : _e()",
          "182: function renderTops (h, _vm) {",
          "",
          "[Added Lines]",
          "143: function renderForm (h, _vm) {",
          "148:   if (hasForm) {",
          "149:     return h('div', {",
          "150:       key: 'form',",
          "151:       ref: 'formWrapper',",
          "152:       class: 'vxe-grid--form-wrapper'",
          "153:     }, formSlot ? formSlot.call(_vm, { $grid: _vm }, h) : renderDefaultForm(h, _vm))",
          "154:   }",
          "155:   return _e()",
          "161: function renderToolbar (h, _vm) {",
          "166:   if (hasToolbar) {",
          "167:     return h('div', {",
          "168:       key: 'toolbar',",
          "169:       ref: 'toolbarWrapper',",
          "170:       class: 'vxe-grid--toolbar-wrapper'",
          "171:     }, toolbarSlot",
          "172:       ? toolbarSlot.call(_vm, { $grid: _vm }, h)",
          "173:       : [",
          "174:           h('vxe-toolbar', {",
          "175:             props: _vm.toolbarOpts,",
          "176:             ref: 'xToolbar',",
          "177:             scopedSlots: getToolbarSlots(_vm)",
          "178:           })",
          "179:         ]",
          "180:     )",
          "181:   }",
          "182:   return _e()",
          "188: function renderTop (h, _vm) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:   }, topSlot.call(_vm, { $grid: _vm }, h)) : _e()",
          "191: }",
          "197:   const { $scopedSlots, tableProps } = _vm",
          "206: }",
          "212:   const { _e, $scopedSlots } = _vm",
          "213:   const bottomSlot = $scopedSlots.bottom",
          "",
          "[Removed Lines]",
          "196: function renderTables (h, _vm) {",
          "199:   return h('vxe-table', {",
          "200:     key: 'table',",
          "201:     props: tableProps,",
          "202:     on: getTableOns(_vm),",
          "203:     scopedSlots: $scopedSlots,",
          "204:     ref: 'xTable'",
          "205:   })",
          "211: function renderBottoms (h, _vm) {",
          "",
          "[Added Lines]",
          "199: function renderTableLeft (h, _vm) {",
          "200:   const { _e, $scopedSlots } = _vm",
          "201:   const leftSlot = $scopedSlots.left",
          "202:   if (leftSlot) {",
          "203:     return h('div', {",
          "204:       class: 'vxe-grid--left-wrapper'",
          "205:     }, leftSlot({ $grid: _vm }))",
          "206:   }",
          "207:   return _e()",
          "208: }",
          "210: function renderTableRight (h, _vm) {",
          "211:   const { _e, $scopedSlots } = _vm",
          "212:   const rightSlot = $scopedSlots.right",
          "213:   if (rightSlot) {",
          "214:     return h('div', {",
          "215:       class: 'vxe-grid--right-wrapper'",
          "216:     }, rightSlot({ $grid: _vm }))",
          "217:   }",
          "218:   return _e()",
          "219: }",
          "224: function renderTable (h, _vm) {",
          "227:   return h('div', {",
          "228:     class: 'vxe-grid--table-wrapper'",
          "229:   }, [",
          "230:     h('vxe-table', {",
          "231:       key: 'table',",
          "232:       props: tableProps,",
          "233:       on: getTableOns(_vm),",
          "234:       scopedSlots: $scopedSlots,",
          "235:       ref: 'xTable'",
          "236:     })",
          "237:   ])",
          "243: function renderBottom (h, _vm) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:   const { _e, $scopedSlots, pagerConfig, proxyConfig, tablePage } = _vm",
          "227:   const pagerSlot = $scopedSlots.pager",
          "228:   const hasPager = !!(pagerSlot || isEnableConf(pagerConfig))",
          "246: }",
          "248: const defaultLayouts = ['Form', 'Toolbar', 'Top', 'Table', 'Bottom', 'Pager']",
          "",
          "[Removed Lines]",
          "225: function renderPagers (h, _vm) {",
          "230:   return hasPager ? h('div', {",
          "231:     key: 'pager',",
          "232:     ref: 'pagerWrapper',",
          "233:     class: 'vxe-grid--pager-wrapper'",
          "234:   }, pagerSlot",
          "235:     ? pagerSlot.call(_vm, { $grid: _vm }, h)",
          "236:     : [",
          "237:         h('vxe-pager', {",
          "238:           props: { ..._vm.pagerOpts, ...(proxyConfig ? tablePage : {}) },",
          "239:           on: {",
          "240:             'page-change': _vm.pageChangeEvent",
          "241:           },",
          "242:           scopedSlots: getPagerSlots(_vm)",
          "243:         })",
          "244:       ]",
          "245:   ) : _e()",
          "",
          "[Added Lines]",
          "257: function renderPager (h, _vm) {",
          "262:   if (hasPager) {",
          "263:     return h('div', {",
          "264:       key: 'pager',",
          "265:       ref: 'pagerWrapper',",
          "266:       class: 'vxe-grid--pager-wrapper'",
          "267:     }, pagerSlot",
          "268:       ? pagerSlot.call(_vm, { $grid: _vm }, h)",
          "269:       : [",
          "270:           h('vxe-pager', {",
          "271:             props: { ..._vm.pagerOpts, ...(proxyConfig ? tablePage : {}) },",
          "272:             on: {",
          "273:               'page-change': _vm.pageChangeEvent",
          "274:             },",
          "275:             scopedSlots: getPagerSlots(_vm)",
          "276:           })",
          "277:         ]",
          "278:     )",
          "279:   }",
          "280:   return _e()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "254:   currLayouts.forEach(name => {",
          "255:     switch (name) {",
          "256:       case 'Form':",
          "258:         break",
          "259:       case 'Toolbar':",
          "261:         break",
          "262:       case 'Top':",
          "264:         break",
          "265:       case 'Table':",
          "267:         break",
          "268:       case 'Bottom':",
          "270:         break",
          "271:       case 'Pager':",
          "273:         break",
          "274:       default:",
          "275:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Removed Lines]",
          "257:         vns.push(renderForms(h, _vm))",
          "260:         vns.push(renderToolbars(h, _vm))",
          "263:         vns.push(renderTops(h, _vm))",
          "266:         vns.push(renderTables(h, _vm))",
          "269:         vns.push(renderBottoms(h, _vm))",
          "272:         vns.push(renderPagers(h, _vm))",
          "",
          "[Added Lines]",
          "292:         vns.push(renderForm(h, _vm))",
          "295:         vns.push(renderToolbar(h, _vm))",
          "298:         vns.push(renderTop(h, _vm))",
          "301:         vns.push(",
          "302:           h('div', {",
          "303:             key: 'table',",
          "304:             class: 'vxe-grid--table-container'",
          "305:           }, [",
          "306:             renderTableLeft(h, _vm),",
          "307:             renderTable(h, _vm),",
          "308:             renderTableRight(h, _vm)",
          "309:           ])",
          "310:         )",
          "313:         vns.push(renderBottom(h, _vm))",
          "316:         vns.push(renderPager(h, _vm))",
          "",
          "---------------"
        ],
        "styles/grid.scss||styles/grid.scss": [
          "File: styles/grid.scss -> styles/grid.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   .vxe-grid--bottom-wrapper  {",
          "35:     position: relative;",
          "36:   }",
          "37: }",
          "39: .vxe-grid {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   .vxe-grid--table-container {",
          "38:     display: flex;",
          "39:     flex-direction: row;",
          "40:   }",
          "41:   .vxe-grid--left-wrapper,",
          "42:   .vxe-grid--right-wrapper {",
          "43:     flex-shrink: 0;",
          "44:     overflow: auto;",
          "45:   }",
          "46:   .vxe-grid--table-wrapper {",
          "47:     flex-grow: 1;",
          "48:     overflow: hidden;",
          "49:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7194cb61d9f457fbfdfb36e5ea69f513e3836f16",
      "candidate_info": {
        "commit_hash": "7194cb61d9f457fbfdfb36e5ea69f513e3836f16",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/7194cb61d9f457fbfdfb36e5ea69f513e3836f16",
        "files": [
          "package.json",
          "packages/table/module/export/import-panel.ts",
          "packages/table/src/body.ts",
          "packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts",
          "styles/components/table.scss"
        ],
        "message": "releases 3.11.12",
        "before_after_code_files": [
          "packages/table/module/export/import-panel.ts||packages/table/module/export/import-panel.ts",
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/module/export/import-panel.ts||packages/table/module/export/import-panel.ts": [
          "File: packages/table/module/export/import-panel.ts -> packages/table/module/export/import-panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   render (this: any, h: CreateElement) {",
          "73:     const $xeTable = this.$xeTable",
          "76:     const slots = defaultOptions.slots || {}",
          "77:     const topSlot = slots.top",
          "78:     const bottomSlot = slots.bottom",
          "",
          "[Removed Lines]",
          "75:     const { hasFile, parseTypeLabel, defaultOptions, storeData, selectName } = this",
          "",
          "[Added Lines]",
          "75:     const { hasFile, loading, parseTypeLabel, defaultOptions, storeData, selectName } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         maskClosable: true,",
          "96:         showMaximize: true,",
          "97:         resize: true,",
          "99:       },",
          "100:       on: {",
          "101:         input (value: any) {",
          "",
          "[Removed Lines]",
          "98:         loading: this.loading",
          "",
          "[Added Lines]",
          "98:         loading",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:                   h('vxe-button', {",
          "219:                     props: {",
          "220:                       status: 'primary',",
          "222:                     },",
          "223:                     on: {",
          "224:                       click: this.importEvent",
          "",
          "[Removed Lines]",
          "221:                       disabled: !hasFile",
          "",
          "[Added Lines]",
          "221:                       disabled: !hasFile || loading",
          "",
          "---------------"
        ],
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:         $xeTable.clearHoverRow()",
          "382:       }",
          "383:     }",
          "396:     const rowid = getRowid($xeTable, row)",
          "397:     const rest = fullAllDataRowIdData[rowid]",
          "398:     const rowLevel = rest ? rest.level : 0",
          "",
          "[Removed Lines]",
          "385:     if (rowOpts.drag) {",
          "386:       trOn.dragstart = (evnt: DragEvent) => {",
          "387:         $xeTable.handleRowDragDragstartEvent(evnt)",
          "388:       }",
          "389:       trOn.dragover = (evnt: DragEvent) => {",
          "390:         $xeTable.handleRowDragDragoverEvent(evnt)",
          "391:       }",
          "392:       trOn.dragend = (evnt: DragEvent) => {",
          "393:         $xeTable.handleRowDragDragendEvent(evnt)",
          "394:       }",
          "395:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:       rowChildren = row[childrenField]",
          "413:       isExpandTree = rowChildren && rowChildren.length && !!treeExpandedMaps[rowid]",
          "414:     }",
          "415:     const trClass = [",
          "416:       'vxe-body--row',",
          "417:       treeConfig ? `row--level-${rowLevel}` : '',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:     if (rowOpts.drag && !rowLevel) {",
          "405:       trOn.dragstart = (evnt: DragEvent) => {",
          "406:         $xeTable.handleRowDragDragstartEvent(evnt)",
          "407:       }",
          "408:       trOn.dragover = (evnt: DragEvent) => {",
          "409:         $xeTable.handleRowDragDragoverEvent(evnt)",
          "410:       }",
          "411:       trOn.dragend = (evnt: DragEvent) => {",
          "412:         $xeTable.handleRowDragDragendEvent(evnt)",
          "413:       }",
          "414:     }",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts": [
          "File: packages/table/src/columnInfo.ts -> packages/table/src/columnInfo.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     const proxyOpts = $xegrid ? $xegrid.proxyOpts : null",
          "14:     const formatter = _vm.formatter",
          "15:     const visible = XEUtils.isBoolean(_vm.visible) ? _vm.visible : true",
          "17:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "18:       const types = ['seq', 'checkbox', 'radio', 'expand', 'html']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     const tableProps = $xetable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         warnLog('vxe.error.errConflicts', ['column.cell-render', 'column.edit-render'])",
          "30:       }",
          "31:       if (_vm.type === 'expand') {",
          "33:           errLog('vxe.error.errConflicts', ['tree-config.line', 'column.type=expand'])",
          "34:         }",
          "35:       }",
          "",
          "[Removed Lines]",
          "32:         if ($xetable.treeConfig && ($xetable.treeOpts.showLine || $xetable.treeOpts.line)) {",
          "",
          "[Added Lines]",
          "33:         const { treeConfig } = tableProps",
          "34:         if (treeConfig && ($xetable.treeOpts.showLine || $xetable.treeOpts.line)) {",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "665:   loadTableData (datas: any) {",
          "667:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "668:     let treeData = []",
          "669:     let fullData = datas ? datas.slice(0) : []",
          "",
          "[Removed Lines]",
          "666:     const { keepSource, treeConfig, treeOpts, editStore, scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop, scrollYLoad: oldScrollYLoad, sXOpts, sYOpts } = this",
          "",
          "[Added Lines]",
          "666:     const { keepSource, showOverflow, treeConfig, treeOpts, editStore, scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop, scrollYLoad: oldScrollYLoad, sXOpts, sYOpts } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:     if (keepSource) {",
          "725:       this.cacheSourceMap(fullData)",
          "726:     }",
          "729:         if (!(this.height || this.maxHeight)) {",
          "730:           errLog('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}'])",
          "731:         }",
          "",
          "[Removed Lines]",
          "727:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "728:       if (sYLoad) {",
          "",
          "[Added Lines]",
          "727:     if (sYLoad) {",
          "728:       if (showOverflow) {",
          "729:         const errColumn = this.tableFullColumn.find((column: any) => column.showOverflow === false)",
          "730:         if (errColumn) {",
          "731:           errLog('vxe.error.errProp', [`column[field=\"${errColumn.field}\"].show-overflow=false`, 'show-overflow=true'])",
          "732:         }",
          "733:       }",
          "735:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5101:               oldIndex: oafIndex",
          "5102:             }",
          "5103:           }, evnt)",
          "5104:         }).catch(() => {",
          "5105:         })",
          "5106:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5112:           $xeTable.saveCustomStore('update:sort')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5687:     const hasChildField = treeOpts.hasChild || treeOpts.hasChildField",
          "5688:     const rowid = getRowid(this, row)",
          "5689:     if (lazy && row[hasChildField] && !treeExpandLazyLoadedMaps[rowid]) {",
          "5691:         return this.handleAsyncTreeExpandChilds(row)",
          "5692:       }).then(() => {",
          "5693:         if (transform) {",
          "",
          "[Removed Lines]",
          "5690:       this.clearTreeExpandLoaded(row).then(() => {",
          "",
          "[Added Lines]",
          "5699:       return this.clearTreeExpandLoaded(row).then(() => {",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288:     position: absolute;",
          "1289:     top: 0;",
          "1290:     left: 0;",
          "1292:     pointer-events: none;",
          "1293:   }",
          "1294:   .vxe-cell--drag-handle {",
          "",
          "[Removed Lines]",
          "1291:     z-index: 9;",
          "",
          "[Added Lines]",
          "1291:     z-index: 11;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "682289a987f6d7f1c5bc3eb5e8aa872a2b3eb2aa",
      "candidate_info": {
        "commit_hash": "682289a987f6d7f1c5bc3eb5e8aa872a2b3eb2aa",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/682289a987f6d7f1c5bc3eb5e8aa872a2b3eb2aa",
        "files": [
          "package.json",
          "packages/table/module/validator/mixin.ts"
        ],
        "message": "releases 3.9.4",
        "before_after_code_files": [
          "packages/table/module/validator/mixin.ts||packages/table/module/validator/mixin.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/module/validator/mixin.ts||packages/table/module/validator/mixin.ts": [
          "File: packages/table/module/validator/mixin.ts -> packages/table/module/validator/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:                 if (XEUtils.isString(validator)) {",
          "306:                   const gvItem = validators.get(validator)",
          "307:                   if (gvItem) {",
          "310:                     } else {",
          "311:                       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "312:                         warnLog('vxe.error.notValidators', [validator])",
          "",
          "[Removed Lines]",
          "308:                     if (gvItem.cellValidatorMethod) {",
          "309:                       customValid = gvItem.cellValidatorMethod(validParams)",
          "",
          "[Added Lines]",
          "308:                     const tcvMethod = gvItem.tableCellValidatorMethod || gvItem.cellValidatorMethod",
          "309:                     if (tcvMethod) {",
          "310:                       customValid = tcvMethod(validParams)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59c79dc22a4af6f791f346c5644fd4729bacadba",
      "candidate_info": {
        "commit_hash": "59c79dc22a4af6f791f346c5644fd4729bacadba",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/59c79dc22a4af6f791f346c5644fd4729bacadba",
        "files": [
          "package.json",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.11.18",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3390:   handleGlobalKeydownEvent (evnt: any) {",
          "3392:     if (this.isActivated) {",
          "3393:       this.preventEvent(evnt, 'event.keydown', null, () => {",
          "3394:         const { filterStore, isCtxMenu, ctxMenuStore, editStore, editOpts, editConfig, mouseConfig, mouseOpts, keyboardConfig, keyboardOpts, treeConfig, treeOpts, highlightCurrentRow, currentRow, bodyCtxMenu, rowOpts } = this",
          "3395:         const { selected, actived } = editStore",
          "3396:         const { keyCode } = evnt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3391:     const $xeTable = this",
          "3392:     const internalData = $xeTable",
          "3397:         const { afterFullData } = internalData",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3456:             this._keyCtx = false",
          "3457:           }, 1000)",
          "3458:         } else if (isEnter && !hasAltKey && keyboardConfig && keyboardOpts.isEnter && (selected.row || actived.row || (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow))) {",
          "3460:           if (hasCtrlKey) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3463:           const { isLastEnterAppendRow, beforeEnterMethod, enterMethod } = keyboardOpts",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3481:                 if (keyboardOpts.enterToTab) {",
          "3482:                   this.moveTabSelected(targetArgs, hasShiftKey, evnt)",
          "3483:                 } else {",
          "3485:                 }",
          "3486:               }",
          "3487:             } else if (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {",
          "",
          "[Removed Lines]",
          "3484:                   this.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt)",
          "",
          "[Added Lines]",
          "3489:                   const _rowIndex = $xeTable.getVTRowIndex(selected.row)",
          "3490:                   const etrParams = {",
          "3491:                     row: selected.row,",
          "3492:                     rowIndex: $xeTable.getRowIndex(selected.row),",
          "3493:                     $rowIndex: $xeTable.getVMRowIndex(selected.row),",
          "3494:                     _rowIndex,",
          "3495:                     column: selected.column,",
          "3496:                     columnIndex: $xeTable.getColumnIndex(selected.column),",
          "3497:                     $columnIndex: $xeTable.getVMColumnIndex(selected.column),",
          "3498:                     _columnIndex: $xeTable.getVTColumnIndex(selected.column),",
          "3499:                     $table: $xeTable",
          "3500:                   }",
          "3501:                   if (!beforeEnterMethod || beforeEnterMethod(etrParams) !== false) {",
          "3503:                     if (isLastEnterAppendRow) {",
          "3504:                       if (_rowIndex >= afterFullData.length - 1) {",
          "3505:                         $xeTable.insertAt({}, -1).then(({ row: newRow }: any) => {",
          "3506:                           $xeTable.scrollToRow(newRow, selected.column)",
          "3507:                           $xeTable.setSelectCell(newRow, selected.column)",
          "3508:                         })",
          "3509:                         $xeTable.dispatchEvent('enter-append-row', etrParams, evnt)",
          "3510:                         return",
          "3511:                       }",
          "3512:                     }",
          "3513:                     this.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt)",
          "3514:                     if (enterMethod) {",
          "3515:                       enterMethod(etrParams)",
          "3516:                     }",
          "3517:                   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3540:           }",
          "3541:         } else if (hasBackspaceKey && keyboardConfig && keyboardOpts.isBack && isEnableConf(editConfig) && (selected.row || selected.column)) {",
          "3542:           if (!isEditStatus) {",
          "3545:             if (keyboardOpts.isDel && isEnableConf(editConfig) && (selected.row || selected.column)) {",
          "3546:               const params = {",
          "",
          "[Removed Lines]",
          "3543:             const { backMethod } = keyboardOpts",
          "",
          "[Added Lines]",
          "3576:             const { editMode, backMethod } = keyboardOpts",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3556:                 if (backMethod) {",
          "3557:                   backMethod(params)",
          "3558:                 } else {",
          "3560:                   this.handleEdit(selected.args, evnt)",
          "3561:                 }",
          "3562:                 this.emitEvent('cell-backspace-value', params, evnt)",
          "",
          "[Removed Lines]",
          "3559:                   setCellValue(selected.row, selected.column, null)",
          "",
          "[Added Lines]",
          "3593:                   if (editMode !== 'insert') {",
          "3594:                     setCellValue(selected.row, selected.column, null)",
          "3595:                   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}