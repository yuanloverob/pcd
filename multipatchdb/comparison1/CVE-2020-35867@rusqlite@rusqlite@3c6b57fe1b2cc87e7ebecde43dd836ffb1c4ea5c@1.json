{
  "cve_id": "CVE-2020-35867",
  "cve_desc": "An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via create_module.",
  "repo": "rusqlite/rusqlite",
  "patch_hash": "3c6b57fe1b2cc87e7ebecde43dd836ffb1c4ea5c",
  "patch_info": {
    "commit_hash": "3c6b57fe1b2cc87e7ebecde43dd836ffb1c4ea5c",
    "repo": "rusqlite/rusqlite",
    "commit_url": "https://github.com/rusqlite/rusqlite/commit/3c6b57fe1b2cc87e7ebecde43dd836ffb1c4ea5c",
    "files": [
      "src/vtab/array.rs",
      "src/vtab/csvtab.rs",
      "src/vtab/mod.rs",
      "src/vtab/series.rs",
      "tests/vtab.rs"
    ],
    "message": "Fix vtab::Module lifetime",
    "before_after_code_files": [
      "src/vtab/array.rs||src/vtab/array.rs",
      "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
      "src/vtab/mod.rs||src/vtab/mod.rs",
      "src/vtab/series.rs||src/vtab/series.rs",
      "tests/vtab.rs||tests/vtab.rs"
    ]
  },
  "patch_diff": {
    "src/vtab/array.rs||src/vtab/array.rs": [
      "File: src/vtab/array.rs -> src/vtab/array.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: use crate::ffi;",
      "34: use crate::types::{ToSql, ToSqlOutput, Value};",
      "35: use crate::vtab::{",
      "38: };",
      "39: use crate::{Connection, Result};",
      "",
      "[Removed Lines]",
      "36:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, Module, VTab, VTabConnection,",
      "37:     VTabCursor, Values,",
      "",
      "[Added Lines]",
      "36:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, VTab, VTabConnection, VTabCursor,",
      "37:     Values,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58: pub fn load_module(conn: &Connection) -> Result<()> {",
      "59:     let aux: Option<()> = None;",
      "65: }",
      "",
      "[Removed Lines]",
      "60:     conn.create_module(\"rarray\", &ARRAY_MODULE, aux)",
      "61: }",
      "63: lazy_static::lazy_static! {",
      "64:     static ref ARRAY_MODULE: Module<ArrayTab> = eponymous_only_module::<ArrayTab>(1);",
      "",
      "[Added Lines]",
      "60:     conn.create_module(\"rarray\", eponymous_only_module::<ArrayTab>(), aux)",
      "",
      "---------------"
    ],
    "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
      "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: use crate::types::Null;",
      "31: use crate::vtab::{",
      "32:     dequote, escape_double_quote, parse_boolean, read_only_module, Context, CreateVTab, IndexInfo,",
      "34: };",
      "35: use crate::{Connection, Error, Result};",
      "",
      "[Removed Lines]",
      "33:     Module, VTab, VTabConnection, VTabCursor, Values,",
      "",
      "[Added Lines]",
      "33:     VTab, VTabConnection, VTabCursor, Values,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: pub fn load_module(conn: &Connection) -> Result<()> {",
      "49:     let aux: Option<()> = None;",
      "55: }",
      "",
      "[Removed Lines]",
      "50:     conn.create_module(\"csv\", &CSV_MODULE, aux)",
      "51: }",
      "53: lazy_static::lazy_static! {",
      "54:     static ref CSV_MODULE: Module<CSVTab> = read_only_module::<CSVTab>(1);",
      "",
      "[Added Lines]",
      "50:     conn.create_module(\"csv\", read_only_module::<CSVTab>(), aux)",
      "",
      "---------------"
    ],
    "src/vtab/mod.rs||src/vtab/mod.rs": [
      "File: src/vtab/mod.rs -> src/vtab/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: pub struct Module<T: VTab> {",
      "65:     base: ffi::sqlite3_module,",
      "66:     phantom: PhantomData<T>,",
      "",
      "[Removed Lines]",
      "63: #[repr(C)]",
      "",
      "[Added Lines]",
      "63: #[repr(transparent)]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: unsafe impl<T: VTab> Send for Module<T> {}",
      "70: unsafe impl<T: VTab> Sync for Module<T> {}",
      "77: }",
      "113:         phantom: PhantomData::<T>,",
      "114:     }",
      "115: }",
      "",
      "[Removed Lines]",
      "74: fn zeroed_module() -> ffi::sqlite3_module {",
      "76:     unsafe { std::mem::MaybeUninit::zeroed().assume_init() }",
      "82: pub fn read_only_module<T: CreateVTab>(version: c_int) -> Module<T> {",
      "85:     let ffi_module = ffi::sqlite3_module {",
      "86:         iVersion: version,",
      "87:         xCreate: Some(rust_create::<T>),",
      "88:         xConnect: Some(rust_connect::<T>),",
      "89:         xBestIndex: Some(rust_best_index::<T>),",
      "90:         xDisconnect: Some(rust_disconnect::<T>),",
      "91:         xDestroy: Some(rust_destroy::<T>),",
      "92:         xOpen: Some(rust_open::<T>),",
      "93:         xClose: Some(rust_close::<T::Cursor>),",
      "94:         xFilter: Some(rust_filter::<T::Cursor>),",
      "95:         xNext: Some(rust_next::<T::Cursor>),",
      "96:         xEof: Some(rust_eof::<T::Cursor>),",
      "97:         xColumn: Some(rust_column::<T::Cursor>),",
      "98:         xRowid: Some(rust_rowid::<T::Cursor>),",
      "99:         xUpdate: None,",
      "100:         xBegin: None,",
      "101:         xSync: None,",
      "102:         xCommit: None,",
      "103:         xRollback: None,",
      "104:         xFindFunction: None,",
      "105:         xRename: None,",
      "106:         xSavepoint: None,",
      "107:         xRelease: None,",
      "108:         xRollbackTo: None,",
      "109:         ..zeroed_module()",
      "110:     };",
      "111:     Module {",
      "112:         base: ffi_module,",
      "",
      "[Added Lines]",
      "72: union ModuleZeroHack {",
      "73:     bytes: [u8; std::mem::size_of::<ffi::sqlite3_module>()],",
      "74:     module: ffi::sqlite3_module,",
      "80: const ZERO_MODULE: ffi::sqlite3_module = unsafe {",
      "81:     ModuleZeroHack {",
      "82:         bytes: [0u8; std::mem::size_of::<ffi::sqlite3_module>()],",
      "83:     }",
      "84:     .module",
      "85: };",
      "90: pub fn read_only_module<T: CreateVTab>() -> &'static Module<T> {",
      "93:     &Module {",
      "94:         base: ffi::sqlite3_module {",
      "96:             iVersion: 2, // We don't use V2 or V3 features in read_only_module types",
      "97:             xCreate: Some(rust_create::<T>),",
      "98:             xConnect: Some(rust_connect::<T>),",
      "99:             xBestIndex: Some(rust_best_index::<T>),",
      "100:             xDisconnect: Some(rust_disconnect::<T>),",
      "101:             xDestroy: Some(rust_destroy::<T>),",
      "102:             xOpen: Some(rust_open::<T>),",
      "103:             xClose: Some(rust_close::<T::Cursor>),",
      "104:             xFilter: Some(rust_filter::<T::Cursor>),",
      "105:             xNext: Some(rust_next::<T::Cursor>),",
      "106:             xEof: Some(rust_eof::<T::Cursor>),",
      "107:             xColumn: Some(rust_column::<T::Cursor>),",
      "108:             xRowid: Some(rust_rowid::<T::Cursor>),",
      "109:             xUpdate: None,",
      "110:             xBegin: None,",
      "111:             xSync: None,",
      "112:             xCommit: None,",
      "113:             xRollback: None,",
      "114:             xFindFunction: None,",
      "115:             xRename: None,",
      "116:             xSavepoint: None,",
      "117:             xRelease: None,",
      "118:             xRollbackTo: None,",
      "119:             ..ZERO_MODULE",
      "120:         },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "152:         phantom: PhantomData::<T>,",
      "153:     }",
      "154: }",
      "",
      "[Removed Lines]",
      "120: pub fn eponymous_only_module<T: VTab>(version: c_int) -> Module<T> {",
      "124:     let ffi_module = ffi::sqlite3_module {",
      "125:         iVersion: version,",
      "126:         xCreate: None,",
      "127:         xConnect: Some(rust_connect::<T>),",
      "128:         xBestIndex: Some(rust_best_index::<T>),",
      "129:         xDisconnect: Some(rust_disconnect::<T>),",
      "130:         xDestroy: None,",
      "131:         xOpen: Some(rust_open::<T>),",
      "132:         xClose: Some(rust_close::<T::Cursor>),",
      "133:         xFilter: Some(rust_filter::<T::Cursor>),",
      "134:         xNext: Some(rust_next::<T::Cursor>),",
      "135:         xEof: Some(rust_eof::<T::Cursor>),",
      "136:         xColumn: Some(rust_column::<T::Cursor>),",
      "137:         xRowid: Some(rust_rowid::<T::Cursor>),",
      "138:         xUpdate: None,",
      "139:         xBegin: None,",
      "140:         xSync: None,",
      "141:         xCommit: None,",
      "142:         xRollback: None,",
      "143:         xFindFunction: None,",
      "144:         xRename: None,",
      "145:         xSavepoint: None,",
      "146:         xRelease: None,",
      "147:         xRollbackTo: None,",
      "148:         ..zeroed_module()",
      "149:     };",
      "150:     Module {",
      "151:         base: ffi_module,",
      "",
      "[Added Lines]",
      "128: pub fn eponymous_only_module<T: VTab>() -> &'static Module<T> {",
      "132:     &Module {",
      "133:         base: ffi::sqlite3_module {",
      "135:             iVersion: 2,",
      "136:             xCreate: None,",
      "137:             xConnect: Some(rust_connect::<T>),",
      "138:             xBestIndex: Some(rust_best_index::<T>),",
      "139:             xDisconnect: Some(rust_disconnect::<T>),",
      "140:             xDestroy: None,",
      "141:             xOpen: Some(rust_open::<T>),",
      "142:             xClose: Some(rust_close::<T::Cursor>),",
      "143:             xFilter: Some(rust_filter::<T::Cursor>),",
      "144:             xNext: Some(rust_next::<T::Cursor>),",
      "145:             xEof: Some(rust_eof::<T::Cursor>),",
      "146:             xColumn: Some(rust_column::<T::Cursor>),",
      "147:             xRowid: Some(rust_rowid::<T::Cursor>),",
      "148:             xUpdate: None,",
      "149:             xBegin: None,",
      "150:             xSync: None,",
      "151:             xCommit: None,",
      "152:             xRollback: None,",
      "153:             xFindFunction: None,",
      "154:             xRename: None,",
      "155:             xSavepoint: None,",
      "156:             xRelease: None,",
      "157:             xRollbackTo: None,",
      "158:             ..ZERO_MODULE",
      "159:         },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "583: impl Connection {",
      "587:     pub fn create_module<T: VTab>(",
      "588:         &self,",
      "589:         module_name: &str,",
      "591:         aux: Option<T::Aux>,",
      "592:     ) -> Result<()> {",
      "593:         self.db.borrow_mut().create_module(module_name, module, aux)",
      "",
      "[Removed Lines]",
      "590:         module: &Module<T>,",
      "",
      "[Added Lines]",
      "599:         module: &'static Module<T>,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "598:     fn create_module<T: VTab>(",
      "599:         &mut self,",
      "600:         module_name: &str,",
      "602:         aux: Option<T::Aux>,",
      "603:     ) -> Result<()> {",
      "604:         let c_name = str_to_cstring(module_name)?;",
      "",
      "[Removed Lines]",
      "601:         module: &Module<T>,",
      "",
      "[Added Lines]",
      "610:         module: &'static Module<T>,",
      "",
      "---------------"
    ],
    "src/vtab/series.rs||src/vtab/series.rs": [
      "File: src/vtab/series.rs -> src/vtab/series.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: use crate::ffi;",
      "10: use crate::types::Type;",
      "11: use crate::vtab::{",
      "14: };",
      "15: use crate::{Connection, Result};",
      "18: pub fn load_module(conn: &Connection) -> Result<()> {",
      "19:     let aux: Option<()> = None;",
      "25: }",
      "",
      "[Removed Lines]",
      "12:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, Module, VTab, VTabConnection,",
      "13:     VTabCursor, Values,",
      "20:     conn.create_module(\"generate_series\", &SERIES_MODULE, aux)",
      "21: }",
      "23: lazy_static::lazy_static! {",
      "24:     static ref SERIES_MODULE: Module<SeriesTab> = eponymous_only_module::<SeriesTab>(1);",
      "",
      "[Added Lines]",
      "12:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, VTab, VTabConnection, VTabCursor,",
      "13:     Values,",
      "20:     conn.create_module(\"generate_series\", eponymous_only_module::<SeriesTab>(), aux)",
      "",
      "---------------"
    ],
    "tests/vtab.rs||tests/vtab.rs": [
      "File: tests/vtab.rs -> tests/vtab.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     use rusqlite::{version_number, Connection, Result};",
      "12:     use std::os::raw::c_int;",
      "16:     #[repr(C)]",
      "17:     struct DummyTab {",
      "",
      "[Removed Lines]",
      "14:     let module = eponymous_only_module::<DummyTab>(1);",
      "",
      "[Added Lines]",
      "14:     let module = eponymous_only_module::<DummyTab>();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:         base: sqlite3_vtab,",
      "20:     }",
      "23:         type Aux = ();",
      "24:         type Cursor = DummyTabCursor;",
      "",
      "[Removed Lines]",
      "22:     impl VTab for DummyTab {",
      "",
      "[Added Lines]",
      "22:     unsafe impl VTab for DummyTab {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:         row_id: i64,",
      "54:     }",
      "57:         fn filter(",
      "58:             &mut self,",
      "59:             _idx_num: c_int,",
      "",
      "[Removed Lines]",
      "56:     impl VTabCursor for DummyTabCursor {",
      "",
      "[Added Lines]",
      "56:     unsafe impl VTabCursor for DummyTabCursor {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "adb904650dbfb14cf673b04e059e83afc5f87184",
      "candidate_info": {
        "commit_hash": "adb904650dbfb14cf673b04e059e83afc5f87184",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/adb904650dbfb14cf673b04e059e83afc5f87184",
        "files": [
          "src/error.rs",
          "src/functions.rs",
          "src/lib.rs",
          "src/types/from_sql.rs",
          "src/vtab/csvtab.rs",
          "src/vtab/mod.rs"
        ],
        "message": "Fix warnings related to deprecated Error::description",
        "before_after_code_files": [
          "src/error.rs||src/error.rs",
          "src/functions.rs||src/functions.rs",
          "src/lib.rs||src/lib.rs",
          "src/types/from_sql.rs||src/types/from_sql.rs",
          "src/vtab/csvtab.rs||src/vtacsvtab.rs",
          "src/vtab/mod.rs||src/vtamod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs"
          ],
          "candidate": [
            "src/vtab/csvtab.rs||src/vtacsvtab.rs",
            "src/vtab/mod.rs||src/vtamod.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/error.rs||src/error.rs": [
          "File: src/error.rs -> src/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: }",
          "255: impl error::Error for Error {",
          "256:     fn description(&self) -> &str {",
          "257:         match *self {",
          "258:             Error::SqliteFailure(ref err, None) => err.description(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:     #[allow(deprecated)]",
          "",
          "---------------"
        ],
        "src/functions.rs||src/functions.rs": [
          "File: src/functions.rs -> src/functions.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: use std::os::raw::{c_int, c_void};",
          "66: use std::panic::{catch_unwind, RefUnwindSafe, UnwindSafe};",
          "67: use std::ptr;",
          "",
          "[Removed Lines]",
          "64: use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         }",
          "100:         _ => {",
          "101:             ffi::sqlite3_result_error_code(ctx, constraint_error_code());",
          "103:                 ffi::sqlite3_result_error(ctx, cstr.as_ptr(), -1);",
          "104:             }",
          "105:         }",
          "",
          "[Removed Lines]",
          "102:             if let Ok(cstr) = str_to_cstring(err.description()) {",
          "",
          "[Added Lines]",
          "101:             if let Ok(cstr) = str_to_cstring(&err.to_string()) {",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1454:         impl fmt::Display for CustomError {",
          "1455:             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> ::std::result::Result<(), fmt::Error> {",
          "1456:                 match *self {",
          "1459:                 }",
          "1460:             }",
          "1461:         }",
          "",
          "[Removed Lines]",
          "1457:                     CustomError::SomeError => write!(f, \"{}\", self.description()),",
          "1458:                     CustomError::Sqlite(ref se) => write!(f, \"{}: {}\", self.description(), se),",
          "",
          "[Added Lines]",
          "1457:                     CustomError::SomeError => write!(f, \"my custom error\"),",
          "1458:                     CustomError::Sqlite(ref se) => write!(f, \"my custom error: {}\", se),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1693:             ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,",
          "1694:             ?, ?, ?, ?;\",",
          "1695:                 params![",
          "1700:                 ],",
          "1701:                 |r| {",
          "1702:                     assert_eq!(1, r.get_unwrap::<_, i32>(0));",
          "",
          "[Removed Lines]",
          "1696:                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "1697:                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "1698:                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "1699:                     1, 1, 1, 1,",
          "",
          "[Added Lines]",
          "1696:                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "1697:                     1, 1, 1, 1, 1, 1, 1, 1,",
          "",
          "---------------"
        ],
        "src/types/from_sql.rs||src/types/from_sql.rs": [
          "File: src/types/from_sql.rs -> src/types/from_sql.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: }",
          "62: impl Error for FromSqlError {",
          "63:     fn description(&self) -> &str {",
          "64:         match *self {",
          "65:             FromSqlError::InvalidType => \"invalid type\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     #[allow(deprecated)]",
          "",
          "---------------"
        ],
        "src/vtab/csvtab.rs||src/vtacsvtab.rs": [
          "File: src/vtab/csvtab.rs -> src/vtacsvtab.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: impl From<csv::Error> for Error {",
          "340:     fn from(err: csv::Error) -> Error {",
          "343:     }",
          "344: }",
          "",
          "[Removed Lines]",
          "341:         use std::error::Error as StdError;",
          "342:         Error::ModuleError(String::from(err.description()))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab/mod.rs||src/vtamod.rs": [
          "File: src/vtab/mod.rs -> src/vtamod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         xSavepoint: None,",
          "109:         xRelease: None,",
          "110:         xRollbackTo: None,",
          "112:     };",
          "113:     Module {",
          "114:         base: ffi_module,",
          "",
          "[Removed Lines]",
          "111:         .. zeroed_module()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         xSavepoint: None,",
          "148:         xRelease: None,",
          "149:         xRollbackTo: None,",
          "151:     };",
          "152:     Module {",
          "153:         base: ffi_module,",
          "",
          "[Removed Lines]",
          "150:         .. zeroed_module()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656: where",
          "657:     T: CreateVTab,",
          "658: {",
          "660:     use std::ffi::CStr;",
          "662:     let mut conn = VTabConnection(db);",
          "",
          "[Removed Lines]",
          "659:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "709: where",
          "710:     T: VTab,",
          "711: {",
          "713:     use std::ffi::CStr;",
          "715:     let mut conn = VTabConnection(db);",
          "",
          "[Removed Lines]",
          "712:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "758: where",
          "759:     T: VTab,",
          "760: {",
          "762:     let vt = vtab as *mut T;",
          "763:     let mut idx_info = IndexInfo(info);",
          "764:     match (*vt).best_index(&mut idx_info) {",
          "",
          "[Removed Lines]",
          "761:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "770:             err.extended_code",
          "771:         }",
          "772:         Err(err) => {",
          "774:             ffi::SQLITE_ERROR",
          "775:         }",
          "776:     }",
          "",
          "[Removed Lines]",
          "773:             set_err_msg(vtab, err.description());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "792: where",
          "793:     T: CreateVTab,",
          "794: {",
          "796:     if vtab.is_null() {",
          "797:         return ffi::SQLITE_OK;",
          "798:     }",
          "",
          "[Removed Lines]",
          "795:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "809:             err.extended_code",
          "810:         }",
          "811:         Err(err) => {",
          "813:             ffi::SQLITE_ERROR",
          "814:         }",
          "815:     }",
          "",
          "[Removed Lines]",
          "812:             set_err_msg(vtab, err.description());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "822: where",
          "823:     T: VTab,",
          "824: {",
          "826:     let vt = vtab as *mut T;",
          "827:     match (*vt).open() {",
          "828:         Ok(cursor) => {",
          "",
          "[Removed Lines]",
          "825:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "837:             err.extended_code",
          "838:         }",
          "839:         Err(err) => {",
          "841:             ffi::SQLITE_ERROR",
          "842:         }",
          "843:     }",
          "",
          "[Removed Lines]",
          "840:             set_err_msg(vtab, err.description());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "927: unsafe fn cursor_error<T>(cursor: *mut ffi::sqlite3_vtab_cursor, result: Result<T>) -> c_int {",
          "929:     match result {",
          "930:         Ok(_) => ffi::SQLITE_OK,",
          "931:         Err(Error::SqliteFailure(err, s)) => {",
          "",
          "[Removed Lines]",
          "928:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "935:             err.extended_code",
          "936:         }",
          "937:         Err(err) => {",
          "939:             ffi::SQLITE_ERROR",
          "940:         }",
          "941:     }",
          "",
          "[Removed Lines]",
          "938:             set_err_msg((*cursor).pVtab, err.description());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "955: unsafe fn result_error<T>(ctx: *mut ffi::sqlite3_context, result: Result<T>) -> c_int {",
          "957:     match result {",
          "958:         Ok(_) => ffi::SQLITE_OK,",
          "959:         Err(Error::SqliteFailure(err, s)) => {",
          "",
          "[Removed Lines]",
          "956:     use std::error::Error as StdError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "975:         }",
          "976:         Err(err) => {",
          "977:             ffi::sqlite3_result_error_code(ctx, ffi::SQLITE_ERROR);",
          "979:                 ffi::sqlite3_result_error(ctx, cstr.as_ptr(), -1);",
          "980:             }",
          "981:             ffi::SQLITE_ERROR",
          "",
          "[Removed Lines]",
          "978:             if let Ok(cstr) = str_to_cstring(err.description()) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2af75d1f13ac383153af53479e7a99f445052e88",
      "candidate_info": {
        "commit_hash": "2af75d1f13ac383153af53479e7a99f445052e88",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/2af75d1f13ac383153af53479e7a99f445052e88",
        "files": [
          "src/vtab/array.rs",
          "src/vtab/csvtab.rs",
          "src/vtab/mod.rs",
          "src/vtab/series.rs",
          "tests/vtab.rs"
        ],
        "message": "VTabCursor lifetime should be bound to VTab lifetime\n\n```c\nstruct sqlite3_vtab_cursor {\n  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */\n```\nIt seems that we need to introduce a lifetime on `VTab` trait\nto express such constraint:\nhttps://users.rust-lang.org/t/associated-type-with-lifetime-bound/7256\nBut there may be another/new way to do it.",
        "before_after_code_files": [
          "src/vtab/array.rs||src/vtab/array.rs",
          "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
          "src/vtab/mod.rs||src/vtab/mod.rs",
          "src/vtab/series.rs||src/vtab/series.rs",
          "tests/vtab.rs||tests/vtab.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs",
            "tests/vtab.rs||tests/vtab.rs"
          ],
          "candidate": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs",
            "tests/vtab.rs||tests/vtab.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/vtab/array.rs||src/vtab/array.rs": [
          "File: src/vtab/array.rs -> src/vtab/array.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: use std::default::Default;",
          "30: use std::os::raw::{c_char, c_int, c_void};",
          "31: use std::rc::Rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use std::marker::PhantomData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     base: ffi::sqlite3_vtab,",
          "73: }",
          "76:     type Aux = ();",
          "79:     fn connect(",
          "80:         _: &mut VTabConnection,",
          "",
          "[Removed Lines]",
          "75: unsafe impl VTab for ArrayTab {",
          "77:     type Cursor = ArrayTabCursor;",
          "",
          "[Added Lines]",
          "76: unsafe impl<'vtab> VTab<'vtab> for ArrayTab {",
          "78:     type Cursor = ArrayTabCursor<'vtab>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         Ok(())",
          "119:     }",
          "122:         Ok(ArrayTabCursor::new())",
          "123:     }",
          "124: }",
          "127: #[repr(C)]",
          "130:     base: ffi::sqlite3_vtab_cursor,",
          "132:     row_id: i64,",
          "134:     ptr: Option<Array>,",
          "135: }",
          "139:         ArrayTabCursor {",
          "140:             base: ffi::sqlite3_vtab_cursor::default(),",
          "141:             row_id: 0,",
          "142:             ptr: None,",
          "143:         }",
          "144:     }",
          "",
          "[Removed Lines]",
          "121:     fn open(&self) -> Result<ArrayTabCursor> {",
          "128: struct ArrayTabCursor {",
          "137: impl ArrayTabCursor {",
          "138:     fn new() -> ArrayTabCursor {",
          "",
          "[Added Lines]",
          "122:     fn open(&'vtab self) -> Result<ArrayTabCursor<'vtab>> {",
          "129: struct ArrayTabCursor<'vtab> {",
          "136:     phantom: PhantomData<&'vtab ArrayTab>,",
          "139: impl ArrayTabCursor<'_> {",
          "140:     fn new<'vtab>() -> ArrayTabCursor<'vtab> {",
          "145:             phantom: PhantomData,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         }",
          "151:     }",
          "152: }",
          "154:     fn filter(&mut self, idx_num: c_int, _idx_str: Option<&str>, args: &Values<'_>) -> Result<()> {",
          "155:         if idx_num > 0 {",
          "156:             self.ptr = args.get_array(0)?;",
          "",
          "[Removed Lines]",
          "153: unsafe impl VTabCursor for ArrayTabCursor {",
          "",
          "[Added Lines]",
          "156: unsafe impl VTabCursor for ArrayTabCursor<'_> {",
          "",
          "---------------"
        ],
        "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
          "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: use std::fs::File;",
          "25: use std::os::raw::c_int;",
          "26: use std::path::Path;",
          "27: use std::str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: use std::marker::PhantomData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     }",
          "96: }",
          "99:     type Aux = ();",
          "102:     fn connect(",
          "103:         _: &mut VTabConnection,",
          "",
          "[Removed Lines]",
          "98: unsafe impl VTab for CSVTab {",
          "100:     type Cursor = CSVTabCursor;",
          "",
          "[Added Lines]",
          "99: unsafe impl<'vtab> VTab<'vtab> for CSVTab {",
          "101:     type Cursor = CSVTabCursor<'vtab>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:         Ok(())",
          "259:     }",
          "262:         Ok(CSVTabCursor::new(self.reader()?))",
          "263:     }",
          "264: }",
          "269: #[repr(C)]",
          "272:     base: ffi::sqlite3_vtab_cursor,",
          "",
          "[Removed Lines]",
          "261:     fn open(&self) -> Result<CSVTabCursor> {",
          "266: impl CreateVTab for CSVTab {}",
          "270: struct CSVTabCursor {",
          "",
          "[Added Lines]",
          "262:     fn open(&'vtab self) -> Result<CSVTabCursor<'vtab>> {",
          "267: impl CreateVTab<'_> for CSVTab {}",
          "271: struct CSVTabCursor<'vtab> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:     cols: csv::StringRecord,",
          "279:     eof: bool,",
          "280: }",
          "284:         CSVTabCursor {",
          "285:             base: ffi::sqlite3_vtab_cursor::default(),",
          "286:             reader,",
          "287:             row_number: 0,",
          "288:             cols: csv::StringRecord::new(),",
          "289:             eof: false,",
          "290:         }",
          "291:     }",
          "",
          "[Removed Lines]",
          "282: impl CSVTabCursor {",
          "283:     fn new(reader: csv::Reader<File>) -> CSVTabCursor {",
          "",
          "[Added Lines]",
          "281:     phantom: PhantomData<&'vtab CSVTab>,",
          "284: impl CSVTabCursor<'_> {",
          "285:     fn new<'vtab>(reader: csv::Reader<File>) -> CSVTabCursor<'vtab> {",
          "292:             phantom: PhantomData,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:     }",
          "297: }",
          "302:     fn filter(",
          "",
          "[Removed Lines]",
          "299: unsafe impl VTabCursor for CSVTabCursor {",
          "",
          "[Added Lines]",
          "302: unsafe impl VTabCursor for CSVTabCursor<'_> {",
          "",
          "---------------"
        ],
        "src/vtab/mod.rs||src/vtab/mod.rs": [
          "File: src/vtab/mod.rs -> src/vtab/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #[repr(transparent)]",
          "65:     base: ffi::sqlite3_module,",
          "67: }",
          "72: union ModuleZeroHack {",
          "73:     bytes: [u8; std::mem::size_of::<ffi::sqlite3_module>()],",
          "",
          "[Removed Lines]",
          "64: pub struct Module<T: VTab> {",
          "66:     phantom: PhantomData<T>,",
          "69: unsafe impl<T: VTab> Send for Module<T> {}",
          "70: unsafe impl<T: VTab> Sync for Module<T> {}",
          "",
          "[Added Lines]",
          "64: pub struct Module<'vtab, T: VTab<'vtab>> {",
          "66:     phantom: PhantomData<&'vtab T>,",
          "69: unsafe impl<'vtab, T: VTab<'vtab>> Send for Module<'vtab, T> {}",
          "70: unsafe impl<'vtab, T: VTab<'vtab>> Sync for Module<'vtab, T> {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     &Module {",
          "",
          "[Removed Lines]",
          "90: pub fn read_only_module<T: CreateVTab>() -> &'static Module<T> {",
          "",
          "[Added Lines]",
          "90: pub fn read_only_module<'vtab, T: CreateVTab<'vtab>>() -> &'static Module<'vtab, T> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:             xRollbackTo: None,",
          "119:             ..ZERO_MODULE",
          "120:         },",
          "122:     }",
          "123: }",
          "",
          "[Removed Lines]",
          "121:         phantom: PhantomData::<T>,",
          "128: pub fn eponymous_only_module<T: VTab>() -> &'static Module<T> {",
          "",
          "[Added Lines]",
          "121:         phantom: PhantomData::<&'vtab T>,",
          "128: pub fn eponymous_only_module<'vtab, T: VTab<'vtab>>() -> &'static Module<'vtab, T> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:             xRollbackTo: None,",
          "158:             ..ZERO_MODULE",
          "159:         },",
          "161:     }",
          "162: }",
          "",
          "[Removed Lines]",
          "160:         phantom: PhantomData::<T>,",
          "",
          "[Added Lines]",
          "160:         phantom: PhantomData::<&'vtab T>,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:     type Aux;",
          "",
          "[Removed Lines]",
          "207: pub unsafe trait VTab: Sized {",
          "",
          "[Added Lines]",
          "207: pub unsafe trait VTab<'vtab>: Sized {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229: }",
          "",
          "[Removed Lines]",
          "228:     fn open(&self) -> Result<Self::Cursor>;",
          "234: pub trait CreateVTab: VTab {",
          "",
          "[Added Lines]",
          "228:     fn open(&'vtab self) -> Result<Self::Cursor>;",
          "234: pub trait CreateVTab<'vtab>: VTab<'vtab> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "611:         &self,",
          "612:         module_name: &str,",
          "614:         aux: Option<T::Aux>,",
          "615:     ) -> Result<()> {",
          "616:         self.db.borrow_mut().create_module(module_name, module, aux)",
          "",
          "[Removed Lines]",
          "610:     pub fn create_module<T: VTab>(",
          "613:         module: &'static Module<T>,",
          "",
          "[Added Lines]",
          "610:     pub fn create_module<'vtab, T: VTab<'vtab>>(",
          "613:         module: &'static Module<'vtab, T>,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "618: }",
          "620: impl InnerConnection {",
          "622:         &mut self,",
          "623:         module_name: &str,",
          "625:         aux: Option<T::Aux>,",
          "626:     ) -> Result<()> {",
          "627:         let c_name = str_to_cstring(module_name)?;",
          "",
          "[Removed Lines]",
          "621:     fn create_module<T: VTab>(",
          "624:         module: &'static Module<T>,",
          "",
          "[Added Lines]",
          "621:     fn create_module<'vtab, T: VTab<'vtab>>(",
          "624:         module: &'static Module<'vtab, T>,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "703:     let _: Box<T> = Box::from_raw(p as *mut T);",
          "704: }",
          "707:     db: *mut ffi::sqlite3,",
          "708:     aux: *mut c_void,",
          "709:     argc: c_int,",
          "",
          "[Removed Lines]",
          "706: unsafe extern \"C\" fn rust_create<T>(",
          "",
          "[Added Lines]",
          "706: unsafe extern \"C\" fn rust_create<'vtab, T>(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "712:     err_msg: *mut *mut c_char,",
          "713: ) -> c_int",
          "714: where",
          "716: {",
          "717:     use std::ffi::CStr;",
          "",
          "[Removed Lines]",
          "715:     T: CreateVTab,",
          "",
          "[Added Lines]",
          "715:     T: CreateVTab<'vtab>,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "755:     }",
          "756: }",
          "759:     db: *mut ffi::sqlite3,",
          "760:     aux: *mut c_void,",
          "761:     argc: c_int,",
          "",
          "[Removed Lines]",
          "758: unsafe extern \"C\" fn rust_connect<T>(",
          "",
          "[Added Lines]",
          "758: unsafe extern \"C\" fn rust_connect<'vtab, T>(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "764:     err_msg: *mut *mut c_char,",
          "765: ) -> c_int",
          "766: where",
          "768: {",
          "769:     use std::ffi::CStr;",
          "",
          "[Removed Lines]",
          "767:     T: VTab,",
          "",
          "[Added Lines]",
          "767:     T: VTab<'vtab>,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "807:     }",
          "808: }",
          "811:     vtab: *mut ffi::sqlite3_vtab,",
          "812:     info: *mut ffi::sqlite3_index_info,",
          "813: ) -> c_int",
          "814: where",
          "816: {",
          "817:     let vt = vtab as *mut T;",
          "818:     let mut idx_info = IndexInfo(info);",
          "",
          "[Removed Lines]",
          "810: unsafe extern \"C\" fn rust_best_index<T>(",
          "815:     T: VTab,",
          "",
          "[Added Lines]",
          "810: unsafe extern \"C\" fn rust_best_index<'vtab, T>(",
          "815:     T: VTab<'vtab>,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "831:     }",
          "832: }",
          "835: where",
          "837: {",
          "838:     if vtab.is_null() {",
          "839:         return ffi::SQLITE_OK;",
          "",
          "[Removed Lines]",
          "834: unsafe extern \"C\" fn rust_disconnect<T>(vtab: *mut ffi::sqlite3_vtab) -> c_int",
          "836:     T: VTab,",
          "",
          "[Added Lines]",
          "834: unsafe extern \"C\" fn rust_disconnect<'vtab, T>(vtab: *mut ffi::sqlite3_vtab) -> c_int",
          "836:     T: VTab<'vtab>,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "843:     ffi::SQLITE_OK",
          "844: }",
          "847: where",
          "849: {",
          "850:     if vtab.is_null() {",
          "851:         return ffi::SQLITE_OK;",
          "",
          "[Removed Lines]",
          "846: unsafe extern \"C\" fn rust_destroy<T>(vtab: *mut ffi::sqlite3_vtab) -> c_int",
          "848:     T: CreateVTab,",
          "",
          "[Added Lines]",
          "846: unsafe extern \"C\" fn rust_destroy<'vtab, T>(vtab: *mut ffi::sqlite3_vtab) -> c_int",
          "848:     T: CreateVTab<'vtab>,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "869:     }",
          "870: }",
          "873:     vtab: *mut ffi::sqlite3_vtab,",
          "874:     pp_cursor: *mut *mut ffi::sqlite3_vtab_cursor,",
          "875: ) -> c_int",
          "876: where",
          "878: {",
          "879:     let vt = vtab as *mut T;",
          "880:     match (*vt).open() {",
          "",
          "[Removed Lines]",
          "872: unsafe extern \"C\" fn rust_open<T>(",
          "877:     T: VTab,",
          "",
          "[Added Lines]",
          "872: unsafe extern \"C\" fn rust_open<'vtab, T: 'vtab>(",
          "877:     T: VTab<'vtab>,",
          "",
          "---------------"
        ],
        "src/vtab/series.rs||src/vtab/series.rs": [
          "File: src/vtab/series.rs -> src/vtab/series.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use std::default::Default;",
          "7: use std::os::raw::c_int;",
          "9: use crate::ffi;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use std::marker::PhantomData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     base: ffi::sqlite3_vtab,",
          "50: }",
          "53:     type Aux = ();",
          "56:     fn connect(",
          "57:         _: &mut VTabConnection,",
          "",
          "[Removed Lines]",
          "52: unsafe impl VTab for SeriesTab {",
          "54:     type Cursor = SeriesTabCursor;",
          "",
          "[Added Lines]",
          "53: unsafe impl<'vtab> VTab<'vtab> for SeriesTab {",
          "55:     type Cursor = SeriesTabCursor<'vtab>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:         Ok(())",
          "152:     }",
          "155:         Ok(SeriesTabCursor::new())",
          "156:     }",
          "157: }",
          "161: #[repr(C)]",
          "164:     base: ffi::sqlite3_vtab_cursor,",
          "",
          "[Removed Lines]",
          "154:     fn open(&self) -> Result<SeriesTabCursor> {",
          "160: #[derive(Default)]",
          "162: struct SeriesTabCursor {",
          "",
          "[Added Lines]",
          "155:     fn open(&'vtab self) -> Result<SeriesTabCursor<'vtab>> {",
          "162: struct SeriesTabCursor<'vtab> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:     max_value: i64,",
          "176:     step: i64,",
          "177: }",
          "182:     }",
          "183: }",
          "185:     fn filter(&mut self, idx_num: c_int, _idx_str: Option<&str>, args: &Values<'_>) -> Result<()> {",
          "186:         let idx_num = QueryPlanFlags::from_bits_truncate(idx_num);",
          "187:         let mut i = 0;",
          "",
          "[Removed Lines]",
          "179: impl SeriesTabCursor {",
          "180:     fn new() -> SeriesTabCursor {",
          "181:         SeriesTabCursor::default()",
          "184: unsafe impl VTabCursor for SeriesTabCursor {",
          "",
          "[Added Lines]",
          "177:     phantom: PhantomData<&'vtab SeriesTab>,",
          "180: impl SeriesTabCursor<'_> {",
          "181:     fn new<'vtab>() -> SeriesTabCursor<'vtab> {",
          "182:         SeriesTabCursor {",
          "183:             base: ffi::sqlite3_vtab_cursor::default(),",
          "184:             is_desc: false,",
          "185:             row_id: 0,",
          "186:             value: 0,",
          "187:             min_value: 0,",
          "188:             max_value: 0,",
          "189:             step: 0,",
          "190:             phantom: PhantomData,",
          "191:         }",
          "194: unsafe impl VTabCursor for SeriesTabCursor<'_> {",
          "",
          "---------------"
        ],
        "tests/vtab.rs||tests/vtab.rs": [
          "File: tests/vtab.rs -> tests/vtab.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         VTabConnection, VTabCursor, Values,",
          "10:     };",
          "11:     use rusqlite::{version_number, Connection, Result};",
          "12:     use std::os::raw::c_int;",
          "14:     let module = eponymous_only_module::<DummyTab>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     use std::marker::PhantomData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         base: sqlite3_vtab,",
          "20:     }",
          "23:         type Aux = ();",
          "26:         fn connect(",
          "27:             _: &mut VTabConnection,",
          "",
          "[Removed Lines]",
          "22:     unsafe impl VTab for DummyTab {",
          "24:         type Cursor = DummyTabCursor;",
          "",
          "[Added Lines]",
          "23:     unsafe impl<'vtab> VTab<'vtab> for DummyTab {",
          "25:         type Cursor = DummyTabCursor<'vtab>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:             Ok(())",
          "40:         }",
          "43:             Ok(DummyTabCursor::default())",
          "44:         }",
          "45:     }",
          "47:     #[derive(Default)]",
          "48:     #[repr(C)]",
          "51:         base: sqlite3_vtab_cursor,",
          "53:         row_id: i64,",
          "54:     }",
          "57:         fn filter(",
          "58:             &mut self,",
          "59:             _idx_num: c_int,",
          "",
          "[Removed Lines]",
          "42:         fn open(&self) -> Result<DummyTabCursor> {",
          "49:     struct DummyTabCursor {",
          "56:     unsafe impl VTabCursor for DummyTabCursor {",
          "",
          "[Added Lines]",
          "43:         fn open(&'vtab self) -> Result<DummyTabCursor<'vtab>> {",
          "50:     struct DummyTabCursor<'vtab> {",
          "55:         phantom: PhantomData<&'vtab DummyTab>,",
          "58:     unsafe impl VTabCursor for DummyTabCursor<'_> {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d229f0f9e9d74613a470a874beb19e53020ef7ab",
      "candidate_info": {
        "commit_hash": "d229f0f9e9d74613a470a874beb19e53020ef7ab",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/d229f0f9e9d74613a470a874beb19e53020ef7ab",
        "files": [
          "src/busy.rs",
          "src/hooks.rs",
          "src/lib.rs",
          "src/session.rs",
          "src/trace.rs",
          "src/vtab/array.rs",
          "src/vtab/csvtab.rs",
          "src/vtab/mod.rs",
          "src/vtab/series.rs",
          "tests/config_log.rs"
        ],
        "message": "Remove #[macro_use] attribute when importing macros",
        "before_after_code_files": [
          "src/busy.rs||src/busy.rs",
          "src/hooks.rs||src/hooks.rs",
          "src/lib.rs||src/lib.rs",
          "src/session.rs||src/session.rs",
          "src/trace.rs||src/trace.rs",
          "src/vtab/array.rs||src/vtab/array.rs",
          "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
          "src/vtab/mod.rs||src/vtab/mod.rs",
          "src/vtab/series.rs||src/vtab/series.rs",
          "tests/config_log.rs||tests/config_log.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs"
          ],
          "candidate": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/busy.rs||src/busy.rs": [
          "File: src/busy.rs -> src/busy.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     #[test]",
          "138:     #[ignore] // FIXME: unstable",
          "139:     fn test_busy_handler() {",
          "141:             static ref CALLED: AtomicBool = AtomicBool::new(false);",
          "142:         }",
          "143:         fn busy_handler(_: i32) -> bool {",
          "",
          "[Removed Lines]",
          "140:         lazy_static! {",
          "",
          "[Added Lines]",
          "140:         lazy_static::lazy_static! {",
          "",
          "---------------"
        ],
        "src/hooks.rs||src/hooks.rs": [
          "File: src/hooks.rs -> src/hooks.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     use super::Action;",
          "238:     use crate::Connection;",
          "239:     use std::sync::atomic::{AtomicBool, Ordering};",
          "241:     #[test]",
          "242:     fn test_commit_hook() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     use lazy_static::lazy_static;",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: pub use libsqlite3_sys as ffi;",
          "67: use std::cell::RefCell;",
          "68: use std::convert;",
          "69: use std::default::Default;",
          "",
          "[Removed Lines]",
          "61: #[macro_use]",
          "62: extern crate bitflags;",
          "63: #[cfg(any(test, feature = \"vtab\"))]",
          "64: #[macro_use]",
          "65: extern crate lazy_static;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "761:     }",
          "762: }",
          "765:     #[doc = \"Flags for opening SQLite database connections.\"]",
          "766:     #[doc = \"See [sqlite3_open_v2](http://www.sqlite.org/c3ref/open.html) for details.\"]",
          "767:     #[repr(C)]",
          "",
          "[Removed Lines]",
          "764: bitflags! {",
          "",
          "[Added Lines]",
          "758: bitflags::bitflags! {",
          "",
          "---------------"
        ],
        "src/session.rs||src/session.rs": [
          "File: src/session.rs -> src/session.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "822:         db.execute_batch(\"CREATE TABLE foo(t TEXT PRIMARY KEY NOT NULL);\")",
          "823:             .unwrap();",
          "826:             static ref CALLED: AtomicBool = AtomicBool::new(false);",
          "827:         }",
          "828:         db.apply(",
          "",
          "[Removed Lines]",
          "825:         lazy_static! {",
          "",
          "[Added Lines]",
          "825:         lazy_static::lazy_static! {",
          "",
          "---------------"
        ],
        "src/trace.rs||src/trace.rs": [
          "File: src/trace.rs -> src/trace.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: mod test {",
          "125:     use std::sync::Mutex;",
          "126:     use std::time::Duration;",
          "128:     use crate::Connection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     use lazy_static::lazy_static;",
          "",
          "---------------"
        ],
        "src/vtab/array.rs||src/vtab/array.rs": [
          "File: src/vtab/array.rs -> src/vtab/array.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     conn.create_module(\"rarray\", &ARRAY_MODULE, aux)",
          "36: }",
          "39:     static ref ARRAY_MODULE: Module<ArrayTab> = eponymous_only_module::<ArrayTab>(1);",
          "40: }",
          "",
          "[Removed Lines]",
          "38: lazy_static! {",
          "",
          "[Added Lines]",
          "38: lazy_static::lazy_static! {",
          "",
          "---------------"
        ],
        "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
          "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     conn.create_module(\"csv\", &CSV_MODULE, aux)",
          "33: }",
          "36:     static ref CSV_MODULE: Module<CSVTab> = read_only_module::<CSVTab>(1);",
          "37: }",
          "",
          "[Removed Lines]",
          "35: lazy_static! {",
          "",
          "[Added Lines]",
          "35: lazy_static::lazy_static! {",
          "",
          "---------------"
        ],
        "src/vtab/mod.rs||src/vtab/mod.rs": [
          "File: src/vtab/mod.rs -> src/vtab/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     }",
          "235: }",
          "238:     #[doc = \"Index constraint operator.\"]",
          "239:     #[repr(C)]",
          "240:     pub struct IndexConstraintOp: ::std::os::raw::c_uchar {",
          "",
          "[Removed Lines]",
          "237: bitflags! {",
          "",
          "[Added Lines]",
          "237: bitflags::bitflags! {",
          "",
          "---------------"
        ],
        "src/vtab/series.rs||src/vtab/series.rs": [
          "File: src/vtab/series.rs -> src/vtab/series.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     conn.create_module(\"generate_series\", &SERIES_MODULE, aux)",
          "19: }",
          "22:     static ref SERIES_MODULE: Module<SeriesTab> = eponymous_only_module::<SeriesTab>(1);",
          "23: }",
          "",
          "[Removed Lines]",
          "21: lazy_static! {",
          "",
          "[Added Lines]",
          "21: lazy_static::lazy_static! {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: const SERIES_COLUMN_STOP: c_int = 2;",
          "29: const SERIES_COLUMN_STEP: c_int = 3;",
          "32:     #[repr(C)]",
          "33:     struct QueryPlanFlags: ::std::os::raw::c_int {",
          "",
          "[Removed Lines]",
          "31: bitflags! {",
          "",
          "[Added Lines]",
          "31: bitflags::bitflags! {",
          "",
          "---------------"
        ],
        "tests/config_log.rs||tests/config_log.rs": [
          "File: tests/config_log.rs -> tests/config_log.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #[cfg(feature = \"trace\")]",
          "10: fn main() {",
          "11:     use std::os::raw::c_int;",
          "12:     use std::sync::Mutex;",
          "14:     lazy_static! {",
          "15:         static ref LOGS_RECEIVED: Mutex<Vec<(c_int, String)>> = Mutex::new(Vec::new());",
          "",
          "[Removed Lines]",
          "5: #[cfg(feature = \"trace\")]",
          "6: #[macro_use]",
          "7: extern crate lazy_static;",
          "",
          "[Added Lines]",
          "9:     use lazy_static::lazy_static;",
          "",
          "---------------"
        ]
      }
    }
  ]
}