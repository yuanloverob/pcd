{
  "cve_id": "CVE-2023-42781",
  "cve_desc": "Apache Airflow, versions before 2.7.3, has a vulnerability that allows an authorized user who has access to read specific DAGs only, to read information about task instances in other DAGs.\u00a0 This is a different issue than CVE-2023-42663 but leading to similar outcome.\nUsers of Apache Airflow are advised to upgrade to version 2.7.3 or newer to mitigate the risk associated with this vulnerability.",
  "repo": "apache/airflow",
  "patch_hash": "33ec72948f74f56f2adb5e2d388e60e88e8a3fa3",
  "patch_info": {
    "commit_hash": "33ec72948f74f56f2adb5e2d388e60e88e8a3fa3",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/33ec72948f74f56f2adb5e2d388e60e88e8a3fa3",
    "files": [
      "airflow/api_connexion/endpoints/task_instance_endpoint.py",
      "airflow/api_connexion/security.py",
      "tests/api_connexion/endpoints/test_task_instance_endpoint.py"
    ],
    "message": "Return only the TIs of the readable dags when ~ is provided as a dag_id (#34939)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py",
      "airflow/api_connexion/security.py||airflow/api_connexion/security.py",
      "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py": [
      "File: airflow/api_connexion/endpoints/task_instance_endpoint.py -> airflow/api_connexion/endpoints/task_instance_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     task_instance_reference_schema,",
      "42:     task_instance_schema,",
      "43: )",
      "44: from airflow.models import SlaMiss",
      "45: from airflow.models.dagrun import DagRun as DR",
      "46: from airflow.models.operator import needs_expansion",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: from airflow.api_connexion.security import get_readable_dags",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "343:     if dag_id != \"~\":",
      "344:         base_query = base_query.where(TI.dag_id == dag_id)",
      "345:     if dag_run_id != \"~\":",
      "346:         base_query = base_query.where(TI.run_id == dag_run_id)",
      "347:     base_query = _apply_range_filter(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "346:     else:",
      "347:         base_query = base_query.where(TI.dag_id.in_(get_readable_dags()))",
      "",
      "---------------"
    ],
    "airflow/api_connexion/security.py||airflow/api_connexion/security.py": [
      "File: airflow/api_connexion/security.py -> airflow/api_connexion/security.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from functools import wraps",
      "20: from typing import Callable, Sequence, TypeVar, cast",
      "24: from airflow.api_connexion.exceptions import PermissionDenied, Unauthenticated",
      "25: from airflow.utils.airflow_flask_app import get_airflow_app",
      "",
      "[Removed Lines]",
      "22: from flask import Response",
      "",
      "[Added Lines]",
      "22: from flask import Response, g",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:         return cast(T, decorated)",
      "57:     return requires_access_decorator",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: def get_readable_dags() -> list[str]:",
      "61:     return get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
      "64: def can_read_dag(dag_id: str) -> bool:",
      "65:     return get_airflow_app().appbuilder.sm.can_read_dag(dag_id, g.user)",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_task_instance_endpoint.py -> tests/api_connexion/endpoints/test_task_instance_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "658:         assert response.json[\"total_entries\"] == expected_ti",
      "659:         assert len(response.json[\"task_instances\"]) == expected_ti",
      "661:     def test_should_respond_200_for_dag_id_filter(self, session):",
      "662:         self.create_task_instances(session)",
      "663:         self.create_task_instances(session, dag_id=\"example_skip_dag\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "661:     @pytest.mark.parametrize(",
      "662:         \"task_instances, user, expected_ti\",",
      "663:         [",
      "664:             pytest.param(",
      "665:                 {",
      "666:                     \"example_python_operator\": 2,",
      "667:                     \"example_skip_dag\": 1,",
      "668:                 },",
      "669:                 \"test_read_only_one_dag\",",
      "670:                 2,",
      "671:             ),",
      "672:             pytest.param(",
      "673:                 {",
      "674:                     \"example_python_operator\": 1,",
      "675:                     \"example_skip_dag\": 2,",
      "676:                 },",
      "677:                 \"test_read_only_one_dag\",",
      "678:                 1,",
      "679:             ),",
      "680:             pytest.param(",
      "681:                 {",
      "682:                     \"example_python_operator\": 1,",
      "683:                     \"example_skip_dag\": 2,",
      "684:                 },",
      "685:                 \"test\",",
      "686:                 3,",
      "687:             ),",
      "688:         ],",
      "689:     )",
      "690:     def test_return_TI_only_from_readable_dags(self, task_instances, user, expected_ti, session):",
      "691:         for dag_id in task_instances:",
      "692:             self.create_task_instances(",
      "693:                 session,",
      "694:                 task_instances=[",
      "695:                     {\"execution_date\": DEFAULT_DATETIME_1 + dt.timedelta(days=i)}",
      "696:                     for i in range(task_instances[dag_id])",
      "697:                 ],",
      "698:                 dag_id=dag_id,",
      "699:             )",
      "700:         response = self.client.get(",
      "701:             \"/api/v1/dags/~/dagRuns/~/taskInstances\", environ_overrides={\"REMOTE_USER\": user}",
      "702:         )",
      "703:         assert response.status_code == 200",
      "704:         assert response.json[\"total_entries\"] == expected_ti",
      "705:         assert len(response.json[\"task_instances\"]) == expected_ti",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ebc49456eaac043d5ef7974b9ed9c32ed7b83ad",
      "candidate_info": {
        "commit_hash": "7ebc49456eaac043d5ef7974b9ed9c32ed7b83ad",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/7ebc49456eaac043d5ef7974b9ed9c32ed7b83ad",
        "files": [
          "airflow/api_connexion/endpoints/task_instance_endpoint.py",
          "airflow/api_connexion/security.py",
          "tests/api_connexion/endpoints/test_task_instance_endpoint.py"
        ],
        "message": "Return only the TIs of the readable dags when ~ is provided as a dag_id (#34939)\n\n(cherry picked from commit 33ec72948f74f56f2adb5e2d388e60e88e8a3fa3)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py",
          "airflow/api_connexion/security.py||airflow/api_connexion/security.py",
          "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py",
            "airflow/api_connexion/security.py||airflow/api_connexion/security.py",
            "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py"
          ],
          "candidate": [
            "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py",
            "airflow/api_connexion/security.py||airflow/api_connexion/security.py",
            "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py": [
          "File: airflow/api_connexion/endpoints/task_instance_endpoint.py -> airflow/api_connexion/endpoints/task_instance_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     task_instance_reference_schema,",
          "43:     task_instance_schema,",
          "44: )",
          "45: from airflow.api_connexion.types import APIResponse",
          "46: from airflow.models import SlaMiss",
          "47: from airflow.models.dagrun import DagRun as DR",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: from airflow.api_connexion.security import get_readable_dags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:     if dag_id != \"~\":",
          "340:         base_query = base_query.where(TI.dag_id == dag_id)",
          "341:     if dag_run_id != \"~\":",
          "342:         base_query = base_query.where(TI.run_id == dag_run_id)",
          "343:     base_query = _apply_range_filter(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     else:",
          "343:         base_query = base_query.where(TI.dag_id.in_(get_readable_dags()))",
          "",
          "---------------"
        ],
        "airflow/api_connexion/security.py||airflow/api_connexion/security.py": [
          "File: airflow/api_connexion/security.py -> airflow/api_connexion/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from functools import wraps",
          "20: from typing import Callable, Sequence, TypeVar, cast",
          "24: from airflow.api_connexion.exceptions import PermissionDenied, Unauthenticated",
          "25: from airflow.utils.airflow_flask_app import get_airflow_app",
          "",
          "[Removed Lines]",
          "22: from flask import Response",
          "",
          "[Added Lines]",
          "22: from flask import Response, g",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         return cast(T, decorated)",
          "57:     return requires_access_decorator",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: def get_readable_dags() -> list[str]:",
          "61:     return get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "64: def can_read_dag(dag_id: str) -> bool:",
          "65:     return get_airflow_app().appbuilder.sm.can_read_dag(dag_id, g.user)",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_task_instance_endpoint.py -> tests/api_connexion/endpoints/test_task_instance_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "658:         assert response.json[\"total_entries\"] == expected_ti",
          "659:         assert len(response.json[\"task_instances\"]) == expected_ti",
          "661:     def test_should_respond_200_for_dag_id_filter(self, session):",
          "662:         self.create_task_instances(session)",
          "663:         self.create_task_instances(session, dag_id=\"example_skip_dag\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:     @pytest.mark.parametrize(",
          "662:         \"task_instances, user, expected_ti\",",
          "663:         [",
          "664:             pytest.param(",
          "665:                 {",
          "666:                     \"example_python_operator\": 2,",
          "667:                     \"example_skip_dag\": 1,",
          "668:                 },",
          "669:                 \"test_read_only_one_dag\",",
          "670:                 2,",
          "671:             ),",
          "672:             pytest.param(",
          "673:                 {",
          "674:                     \"example_python_operator\": 1,",
          "675:                     \"example_skip_dag\": 2,",
          "676:                 },",
          "677:                 \"test_read_only_one_dag\",",
          "678:                 1,",
          "679:             ),",
          "680:             pytest.param(",
          "681:                 {",
          "682:                     \"example_python_operator\": 1,",
          "683:                     \"example_skip_dag\": 2,",
          "684:                 },",
          "685:                 \"test\",",
          "686:                 3,",
          "687:             ),",
          "688:         ],",
          "689:     )",
          "690:     def test_return_TI_only_from_readable_dags(self, task_instances, user, expected_ti, session):",
          "691:         for dag_id in task_instances:",
          "692:             self.create_task_instances(",
          "693:                 session,",
          "694:                 task_instances=[",
          "695:                     {\"execution_date\": DEFAULT_DATETIME_1 + dt.timedelta(days=i)}",
          "696:                     for i in range(task_instances[dag_id])",
          "697:                 ],",
          "698:                 dag_id=dag_id,",
          "699:             )",
          "700:         response = self.client.get(",
          "701:             \"/api/v1/dags/~/dagRuns/~/taskInstances\", environ_overrides={\"REMOTE_USER\": user}",
          "702:         )",
          "703:         assert response.status_code == 200",
          "704:         assert response.json[\"total_entries\"] == expected_ti",
          "705:         assert len(response.json[\"task_instances\"]) == expected_ti",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5422a3612b03fe66b606e9cbc66480c3c18543a7",
      "candidate_info": {
        "commit_hash": "5422a3612b03fe66b606e9cbc66480c3c18543a7",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/5422a3612b03fe66b606e9cbc66480c3c18543a7",
        "files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "airflow/api_connexion/security.py"
        ],
        "message": "Replace deprecated get_accessible_dag_ids and use get_readable_dags in get_dag_warnings (#36256)\n\n(cherry picked from commit 9406f00c0cab795375973e84702824e685d53e04)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
          ],
          "candidate": [
            "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
          "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from typing import TYPE_CHECKING",
          "22: from sqlalchemy import select",
          "24: from airflow.api_connexion import security",
          "",
          "[Removed Lines]",
          "21: from flask import g",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     DagWarningCollection,",
          "28:     dag_warning_collection_schema,",
          "29: )",
          "30: from airflow.auth.managers.models.resource_details import DagAccessEntity",
          "31: from airflow.models.dagwarning import DagWarning as DagWarningModel",
          "33: from airflow.utils.db import get_query_count",
          "34: from airflow.utils.session import NEW_SESSION, provide_session",
          "",
          "[Removed Lines]",
          "32: from airflow.utils.airflow_flask_app import get_airflow_app",
          "",
          "[Added Lines]",
          "29: from airflow.api_connexion.security import get_readable_dags",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     if dag_id:",
          "62:         query = query.where(DagWarningModel.dag_id == dag_id)",
          "63:     else:",
          "65:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
          "66:     if warning_type:",
          "67:         query = query.where(DagWarningModel.warning_type == warning_type)",
          "",
          "[Removed Lines]",
          "64:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "",
          "[Added Lines]",
          "63:         readable_dags = get_readable_dags()",
          "",
          "---------------"
        ],
        "airflow/api_connexion/security.py||airflow/api_connexion/security.py": [
          "File: airflow/api_connexion/security.py -> airflow/api_connexion/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     return requires_access_decorator",
          "",
          "[Removed Lines]",
          "270: def get_readable_dags() -> list[str]:",
          "271:     return get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "",
          "[Added Lines]",
          "270: def get_readable_dags() -> set[str]:",
          "271:     return get_auth_manager().get_permitted_dag_ids(user=g.user)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9406f00c0cab795375973e84702824e685d53e04",
      "candidate_info": {
        "commit_hash": "9406f00c0cab795375973e84702824e685d53e04",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/9406f00c0cab795375973e84702824e685d53e04",
        "files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "airflow/api_connexion/security.py"
        ],
        "message": "Replace deprecated get_accessible_dag_ids and use get_readable_dags in get_dag_warnings (#36256)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
          ],
          "candidate": [
            "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
          "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from typing import TYPE_CHECKING",
          "22: from sqlalchemy import select",
          "24: from airflow.api_connexion import security",
          "",
          "[Removed Lines]",
          "21: from flask import g",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     DagWarningCollection,",
          "28:     dag_warning_collection_schema,",
          "29: )",
          "30: from airflow.auth.managers.models.resource_details import DagAccessEntity",
          "31: from airflow.models.dagwarning import DagWarning as DagWarningModel",
          "33: from airflow.utils.db import get_query_count",
          "34: from airflow.utils.session import NEW_SESSION, provide_session",
          "",
          "[Removed Lines]",
          "32: from airflow.utils.airflow_flask_app import get_airflow_app",
          "",
          "[Added Lines]",
          "29: from airflow.api_connexion.security import get_readable_dags",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     if dag_id:",
          "62:         query = query.where(DagWarningModel.dag_id == dag_id)",
          "63:     else:",
          "65:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
          "66:     if warning_type:",
          "67:         query = query.where(DagWarningModel.warning_type == warning_type)",
          "",
          "[Removed Lines]",
          "64:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "",
          "[Added Lines]",
          "63:         readable_dags = get_readable_dags()",
          "",
          "---------------"
        ],
        "airflow/api_connexion/security.py||airflow/api_connexion/security.py": [
          "File: airflow/api_connexion/security.py -> airflow/api_connexion/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     return requires_access_decorator",
          "",
          "[Removed Lines]",
          "270: def get_readable_dags() -> list[str]:",
          "271:     return get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "",
          "[Added Lines]",
          "270: def get_readable_dags() -> set[str]:",
          "271:     return get_auth_manager().get_permitted_dag_ids(user=g.user)",
          "",
          "---------------"
        ]
      }
    }
  ]
}