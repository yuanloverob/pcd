{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f42547f3dba4e442dd3ebca294b8ce3248866270",
      "candidate_info": {
        "commit_hash": "f42547f3dba4e442dd3ebca294b8ce3248866270",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/f42547f3dba4e442dd3ebca294b8ce3248866270",
        "files": [
          "api/allocations.go",
          "website/content/api-docs/allocations.mdx"
        ],
        "message": "docs: explain schedule state values (#24160)\n\n* docs: explain schedule state values\n\nGET /v1/client/allocation/:alloc_id/pause?task=:task_name is a tiny but\ncritical API for observability of tasks with a schedule. This PR\nexplains each of the values which might be returned.\n\n* correct docstring\n\n* add missing state and expand PUT docs\n\n---------\n\nCo-authored-by: Aimee Ukasick <aimee.ukasick@hashicorp.com>",
        "before_after_code_files": [
          "api/allocations.go||api/allocations.go",
          "website/content/api-docs/allocations.mdx||website/content/api-docs/allocations.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/allocations.go||api/allocations.go": [
          "File: api/allocations.go -> api/allocations.go"
        ],
        "website/content/api-docs/allocations.mdx||website/content/api-docs/allocations.mdx": [
          "File: website/content/api-docs/allocations.mdx -> website/content/api-docs/allocations.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "983:   must be the full UUID, not the short 8-character one. This is specified as",
          "984:   part of the path.",
          "986: ### Sample Request",
          "988: ```shell-session",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "986: - `Task` `(string: <required>)` - Specifies the name of the task whose schedule",
          "987:   should be overridden.",
          "989: - `ScheduleState` `(string: <required>)` - Specifies the pause state to force",
          "990:   the task into. One of:",
          "992:     - `\"pause\"` - Forces the task to pause.",
          "994:     - `\"run\"` - Forces the task to run.",
          "996:     - `\"scheduled\"` - Removes any overrides and forces the task to adhere to",
          "997:       its schedule.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1019: ### Parameters",
          "1028: ### Sample Request",
          "",
          "[Removed Lines]",
          "1021: - `:alloc_id` `(string: <required>)`- Specifies the UUID of the allocation. This",
          "1022:   must be the full UUID, not the short 8-character one. This is specified as",
          "1023:   part of the path.",
          "1025: - `task` - Specifies the task from which to retrieve the time based task",
          "1026:   execution state.",
          "",
          "[Added Lines]",
          "1034: - `:alloc_id` `(string: <required>)` - Specifies the UUID of the allocation.",
          "1035:   This must be the full UUID, not the short 8-character one. This is",
          "1036:   specified as part of the path.",
          "1038: - `task` `(string: <required>)` - Specifies the name of the task from which to",
          "1039:   retrieve the time-based task execution state.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1039: }",
          "1040: ```",
          "1042: [`shutdown_delay`]: /nomad/docs/job-specification/group#shutdown_delay",
          "1043: [schedule]: /nomad/docs/job-specification/schedule",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1055: #### Field Reference",
          "1057: - `ScheduleState` `(string)`: The task's current paused state. It can can have",
          "1058:   one of the following values:",
          "1060:   - `\"\"` - The task is running. The only state returned for tasks with no",
          "1061:     schedule.",
          "1063:   - `force_run` - The task's schedule has been overridden to run.",
          "1065:   - `force_pause` - The task's schedule has been overridden to pause.",
          "1067:   - `scheduled_pause` - The task is paused according to its schedule.",
          "1069:   - `schedule_resume` - A schedule override is being removed. Subsequent calls",
          "1070:     should return running (`\"\"`) or paused (`scheduled_pause`) states. This",
          "1071:     state is rarely possible to observe since it transitions immediately to",
          "1072:     another state.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d88e81baba85872b2afe7e535271293a944ae8c6",
      "candidate_info": {
        "commit_hash": "d88e81baba85872b2afe7e535271293a944ae8c6",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/d88e81baba85872b2afe7e535271293a944ae8c6",
        "files": [
          ".changelog/24547.txt",
          "drivers/docker/driver_test.go",
          "drivers/docker/utils.go"
        ],
        "message": "backport of commit 6469b59a0a59451b80958c528393fbd1741e32fa (#24770)\n\nCo-authored-by: Vincent Ducamps <vincent@ducamps.eu>",
        "before_after_code_files": [
          "drivers/docker/driver_test.go||drivers/docker/driver_test.go",
          "drivers/docker/utils.go||drivers/docker/utils.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/driver_test.go||drivers/docker/driver_test.go": [
          "File: drivers/docker/driver_test.go -> drivers/docker/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2860:   Repo  string",
          "2861:   Tag   string",
          "2862:  }{",
          "2863:   {\"library/hello-world:1.0\", \"library/hello-world\", \"1.0\"},",
          "2864:   {\"library/hello-world\", \"library/hello-world\", \"latest\"},",
          "2865:   {\"library/hello-world:latest\", \"library/hello-world\", \"latest\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2863:   {\"host:5000/library/hello-world\", \"host:5000/library/hello-world\", \"latest\"},",
          "2864:   {\"host:5000/library/hello-world:1.0\", \"host:5000/library/hello-world\", \"1.0\"},",
          "",
          "---------------"
        ],
        "drivers/docker/utils.go||drivers/docker/utils.go": [
          "File: drivers/docker/utils.go -> drivers/docker/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  } else if t := repoTag[idx+1:]; !strings.Contains(t, \"/\") {",
          "32:   repo = repoTag[:idx]",
          "33:   tag = t",
          "34:  }",
          "36:  if tag != \"\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  } else if t := repoTag[idx+1:]; strings.Contains(t, \"/\") {",
          "35:   repo = image",
          "36:   tag = \"latest\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a5aba53a68cc7b1a176940addee4e335d86be4f",
      "candidate_info": {
        "commit_hash": "7a5aba53a68cc7b1a176940addee4e335d86be4f",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/7a5aba53a68cc7b1a176940addee4e335d86be4f",
        "files": [
          ".changelog/24168.txt",
          "ui/app/adapters/job.js",
          "ui/app/components/job-version.js",
          "ui/app/controllers/jobs/run/index.js",
          "ui/app/models/job.js",
          "ui/app/routes/jobs/job/definition.js",
          "ui/app/routes/jobs/run/index.js",
          "ui/app/templates/components/job-editor/alert.hbs",
          "ui/app/templates/components/job-version.hbs",
          "ui/app/templates/jobs/run/index.hbs",
          "ui/tests/acceptance/job-versions-test.js",
          "ui/tests/unit/adapters/job-test.js"
        ],
        "message": "backport of commit de96c3498b3867bb5adbaaad5798261260b0005c (#24568)\n\nCo-authored-by: Phil Renaud <phil.renaud@hashicorp.com>",
        "before_after_code_files": [
          "ui/app/adapters/job.js||ui/app/adapters/job.js",
          "ui/app/components/job-version.js||ui/app/components/job-version.js",
          "ui/app/controllers/jobs/run/index.js||ui/app/controllers/jobs/run/index.js",
          "ui/app/models/job.js||ui/app/models/job.js",
          "ui/app/routes/jobs/job/definition.js||ui/app/routes/jobs/job/definition.js",
          "ui/app/routes/jobs/run/index.js||ui/app/routes/jobs/run/index.js",
          "ui/app/templates/components/job-editor/alert.hbs||ui/app/templates/components/job-editor/alert.hbs",
          "ui/app/templates/components/job-version.hbs||ui/app/templates/components/job-version.hbs",
          "ui/app/templates/jobs/run/index.hbs||ui/app/templates/jobs/run/index.hbs",
          "ui/tests/acceptance/job-versions-test.js||ui/tests/acceptance/job-versions-test.js",
          "ui/tests/unit/adapters/job-test.js||ui/tests/unit/adapters/job-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/adapters/job.js||ui/app/adapters/job.js": [
          "File: ui/app/adapters/job.js -> ui/app/adapters/job.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     summary: '/summary',",
          "21:   };",
          "26:   }",
          "29:     const url = addToPath(",
          "30:       this.urlForFindRecord(job.get('id'), 'job', null, 'submission'),",
          "31:       '',",
          "33:     );",
          "34:     return this.ajax(url, 'GET');",
          "35:   }",
          "",
          "[Removed Lines]",
          "23:   fetchRawDefinition(job) {",
          "24:     const url = this.urlForFindRecord(job.get('id'), 'job');",
          "25:     return this.ajax(url, 'GET');",
          "28:   fetchRawSpecification(job) {",
          "32:       'version=' + job.get('version')",
          "",
          "[Added Lines]",
          "32:   async fetchRawDefinition(job, version) {",
          "33:     if (version == null) {",
          "34:       const url = this.urlForFindRecord(job.get('id'), 'job');",
          "35:       return this.ajax(url, 'GET');",
          "36:     }",
          "40:     const versionsUrl = addToPath(",
          "41:       this.urlForFindRecord(job.get('id'), 'job', null, 'versions')",
          "42:     );",
          "44:     const response = await this.ajax(versionsUrl, 'GET');",
          "45:     const versionInfo = response.Versions.find((v) => v.Version === version);",
          "47:     if (!versionInfo) {",
          "48:       throw new Error(`Version ${version} not found`);",
          "49:     }",
          "51:     return versionInfo;",
          "60:   fetchRawSpecification(job, version) {",
          "64:       'version=' + (version || job.get('version'))",
          "",
          "---------------"
        ],
        "ui/app/components/job-version.js||ui/app/components/job-version.js": [
          "File: ui/app/components/job-version.js -> ui/app/components/job-version.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     this.isOpen = !this.isOpen;",
          "81:   }",
          "83:   @task(function* () {",
          "84:     try {",
          "85:       const versionBeforeReversion = this.version.get('job.version');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   @tracked cloneButtonStatus = 'idle';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   })",
          "109:   revertTo;",
          "111:   @action",
          "112:   handleKeydown(event) {",
          "113:     if (event.key === 'Escape') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:   @action async cloneAsNewVersion() {",
          "119:     try {",
          "120:       this.router.transitionTo(",
          "121:         'jobs.job.definition',",
          "122:         this.version.get('job.idWithNamespace'),",
          "123:         {",
          "124:           queryParams: {",
          "125:             isEditing: true,",
          "126:             version: this.version.number,",
          "127:           },",
          "128:         }",
          "129:       );",
          "130:     } catch (e) {",
          "131:       this.args.handleError({",
          "132:         level: 'danger',",
          "133:         title: 'Could Not Edit from Version',",
          "134:       });",
          "135:     }",
          "136:   }",
          "138:   @action async cloneAsNewJob() {",
          "139:     const job = await this.version.get('job');",
          "140:     try {",
          "141:       const specification = await job.fetchRawSpecification(",
          "142:         this.version.number",
          "143:       );",
          "144:       this.router.transitionTo('jobs.run', {",
          "145:         queryParams: {",
          "146:           sourceString: specification.Source,",
          "147:         },",
          "148:       });",
          "149:       return;",
          "150:     } catch (specError) {",
          "151:       try {",
          "153:         const definition = await job.fetchRawDefinition(this.version.number);",
          "154:         this.router.transitionTo('jobs.run', {",
          "155:           queryParams: {",
          "156:             sourceString: JSON.stringify(definition, null, 2),",
          "157:           },",
          "158:         });",
          "159:       } catch (defError) {",
          "161:         this.args.handleError({",
          "162:           level: 'danger',",
          "163:           title: 'Could Not Clone as New Job',",
          "164:           description: messageForError(defError),",
          "165:         });",
          "166:       }",
          "167:     }",
          "168:   }",
          "",
          "---------------"
        ],
        "ui/app/controllers/jobs/run/index.js||ui/app/controllers/jobs/run/index.js": [
          "File: ui/app/controllers/jobs/run/index.js -> ui/app/controllers/jobs/run/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: export default class RunController extends Controller {",
          "12:   @service router;",
          "16:   @action",
          "17:   handleSaveAsTemplate() {",
          "",
          "[Removed Lines]",
          "14:   queryParams = ['template'];",
          "",
          "[Added Lines]",
          "14:   queryParams = ['template', 'sourceString', 'disregardNameWarning'];",
          "",
          "---------------"
        ],
        "ui/app/models/job.js||ui/app/models/job.js": [
          "File: ui/app/models/job.js -> ui/app/models/job.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:     return undefined;",
          "538:   }",
          "542:   }",
          "546:   }",
          "548:   forcePeriodic() {",
          "",
          "[Removed Lines]",
          "540:   fetchRawDefinition() {",
          "541:     return this.store.adapterFor('job').fetchRawDefinition(this);",
          "544:   fetchRawSpecification() {",
          "545:     return this.store.adapterFor('job').fetchRawSpecification(this);",
          "",
          "[Added Lines]",
          "540:   fetchRawDefinition(version) {",
          "541:     return this.store.adapterFor('job').fetchRawDefinition(this, version);",
          "544:   fetchRawSpecification(version) {",
          "545:     return this.store.adapterFor('job').fetchRawSpecification(this, version);",
          "",
          "---------------"
        ],
        "ui/app/routes/jobs/job/definition.js||ui/app/routes/jobs/job/definition.js": [
          "File: ui/app/routes/jobs/job/definition.js -> ui/app/routes/jobs/job/definition.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import Route from '@ember/routing/route';",
          "12: export default class DefinitionRoute extends Route {",
          "20:     const job = this.modelFor('jobs.job');",
          "21:     if (!job) return;",
          "25:     let format = 'json'; // default to json in network request errors",
          "26:     let specification;",
          "27:     let variableFlags;",
          "28:     let variableLiteral;",
          "29:     try {",
          "31:       specification = specificationResponse?.Source ?? null;",
          "32:       variableFlags = specificationResponse?.VariableFlags ?? null;",
          "33:       variableLiteral = specificationResponse?.Variables ?? null;",
          "",
          "[Removed Lines]",
          "19:   async model() {",
          "23:     const definition = await job.fetchRawDefinition();",
          "30:       const specificationResponse = await job.fetchRawSpecification();",
          "",
          "[Added Lines]",
          "8: import { inject as service } from '@ember/service';",
          "13:   @service notifications;",
          "15:   queryParams = {",
          "16:     version: {",
          "17:       refreshModel: true,",
          "18:     },",
          "19:   };",
          "27:   async model({ version }) {",
          "28:     version = version ? +version : undefined; // query parameter is a string; convert to number",
          "33:     let definition;",
          "35:     if (version !== undefined) {",
          "37:       try {",
          "38:         definition = await job.fetchRawDefinition(version);",
          "39:       } catch (e) {",
          "40:         console.error('error fetching job version definition', e);",
          "41:         this.notifications.add({",
          "42:           title: 'Error Fetching Job Version Definition',",
          "43:           message: `There was an error fetching the versions for this job: ${e.message}`,",
          "44:           color: 'critical',",
          "45:         });",
          "46:       }",
          "47:     } else {",
          "48:       definition = await job.fetchRawDefinition();",
          "49:     }",
          "56:       const specificationResponse = await job.fetchRawSpecification(version);",
          "",
          "---------------"
        ],
        "ui/app/routes/jobs/run/index.js||ui/app/routes/jobs/run/index.js": [
          "File: ui/app/routes/jobs/run/index.js -> ui/app/routes/jobs/run/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     template: {",
          "22:       refreshModel: true,",
          "23:     },",
          "24:   };",
          "26:   beforeModel(transition) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     sourceString: {",
          "25:       refreshModel: true,",
          "26:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     }",
          "34:   }",
          "37:     try {",
          "",
          "[Removed Lines]",
          "36:   async model({ template }) {",
          "",
          "[Added Lines]",
          "39:   async model({ template, sourceString }) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:         return this.store.createRecord('job', {",
          "46:           _newDefinition: templateRecord.items.template,",
          "47:         });",
          "48:       } else {",
          "49:         return this.store.createRecord('job');",
          "50:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:       } else if (sourceString) {",
          "52:         return this.store.createRecord('job', {",
          "53:           _newDefinition: sourceString,",
          "54:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     if (isExiting) {",
          "73:       controller.model?.deleteRecord();",
          "74:       controller.set('template', null);",
          "75:     }",
          "76:   }",
          "77: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:       controller.set('sourceString', null);",
          "83:       controller.set('disregardNameWarning', null);",
          "",
          "---------------"
        ],
        "ui/app/templates/components/job-editor/alert.hbs||ui/app/templates/components/job-editor/alert.hbs": [
          "File: ui/app/templates/components/job-editor/alert.hbs -> ui/app/templates/components/job-editor/alert.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:       <Hds::Alert @type=\"inline\" @color=\"critical\" data-test-error={{@data.error.type}} as |A|>",
          "9:           <A.Title data-test-error-title>{{conditionally-capitalize @data.error.type true}}</A.Title>",
          "10:           <A.Description data-test-error-message>{{@data.error.message}}</A.Description>",
          "11:       </Hds::Alert>",
          "12:     {{/if}}",
          "13:     {{#if (and (eq @data.stage \"read\") @data.hasVariables (eq @data.view \"job-spec\"))}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:           {{#if (eq @data.error.message \"Job ID does not match\")}}",
          "12:             <A.Button @text=\"Run as a new job instead\" @color=\"primary\" @route=\"jobs.run\" @query={{hash sourceString=@data.job._newDefinition disregardNameWarning=true}} />",
          "13:           {{/if}}",
          "",
          "---------------"
        ],
        "ui/app/templates/components/job-version.hbs||ui/app/templates/components/job-version.hbs": [
          "File: ui/app/templates/components/job-version.hbs -> ui/app/templates/components/job-version.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ~}}",
          "6: {{did-update this.versionsDidUpdate this.diff}}",
          "8:   <div class=\"boxed-section {{if this.version.versionTag \"tagged\"}}\" data-test-tagged-version={{if this.version.versionTag \"true\" \"false\"}}>",
          "9:     <header class=\"boxed-section-head is-light inline-definitions\">",
          "10:       Version #{{this.version.number}}",
          "",
          "[Removed Lines]",
          "7: <section class=\"job-version\">",
          "",
          "[Added Lines]",
          "7: <section class=\"job-version\" data-test-job-version={{this.version.number}}>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         <div class=\"version-options\">",
          "82:           {{#unless this.isCurrent}}",
          "83:             {{#if (can \"run job\" namespace=this.version.job.namespace)}}",
          "98:             {{else}}",
          "99:               <Hds::Button",
          "100:                 data-test-revert-to",
          "",
          "[Removed Lines]",
          "84:               <TwoStepButton",
          "85:                 data-test-revert-to",
          "86:                 @classes={{hash",
          "87:                   idleButton=\"is-warning is-outlined\"",
          "88:                   confirmButton=\"is-warning\"}}",
          "89:                 @fadingBackground={{true}}",
          "90:                 @idleText=\"Revert Version\"",
          "91:                 @cancelText=\"Cancel\"",
          "92:                 @confirmText=\"Yes, Revert Version\"",
          "93:                 @confirmationMessage=\"Are you sure you want to revert to this version?\"",
          "94:                 @inlineText={{true}}",
          "95:                 @size=\"small\"",
          "96:                 @awaitingConfirmation={{this.revertTo.isRunning}}",
          "97:                 @onConfirm={{perform this.revertTo}} />",
          "",
          "[Added Lines]",
          "84:               {{#if (eq this.cloneButtonStatus 'idle')}}",
          "85:                 <Hds::Button",
          "86:                   data-test-clone-and-edit",
          "87:                   @text=\"Clone and Edit\"",
          "88:                   @color=\"secondary\"",
          "89:                   @size=\"small\"",
          "90:                   @isInline={{true}}",
          "91:                   {{on \"click\" (action (mut this.cloneButtonStatus) \"confirming\")}}",
          "92:                 />",
          "94:                 <TwoStepButton",
          "95:                   data-test-revert-to",
          "96:                   @classes={{hash",
          "97:                     idleButton=\"is-warning is-outlined\"",
          "98:                     confirmButton=\"is-warning\"}}",
          "99:                   @fadingBackground={{true}}",
          "100:                   @idleText=\"Revert Version\"",
          "101:                   @cancelText=\"Cancel\"",
          "102:                   @confirmText=\"Yes, Revert Version\"",
          "103:                   @confirmationMessage=\"Are you sure you want to revert to this version?\"",
          "104:                   @inlineText={{true}}",
          "105:                   @size=\"small\"",
          "106:                   @awaitingConfirmation={{this.revertTo.isRunning}}",
          "107:                   @onConfirm={{perform this.revertTo}}",
          "108:                 />",
          "109:               {{else if (eq this.cloneButtonStatus 'confirming')}}",
          "110:                 <Hds::Button",
          "111:                   data-test-cancel-clone",
          "112:                   @text=\"Cancel\"",
          "113:                   @color=\"secondary\"",
          "114:                   @size=\"small\"",
          "115:                   @isInline={{true}}",
          "116:                   {{on \"click\" (action (mut this.cloneButtonStatus) \"idle\")}}",
          "117:                 />",
          "118:                 <Hds::Button",
          "119:                   data-test-clone-as-new-version",
          "120:                   @text=\"Clone as New Version of {{this.version.job.name}}\"",
          "121:                   @color=\"secondary\"",
          "122:                   @size=\"small\"",
          "123:                   @isInline={{true}}",
          "124:                   {{on \"click\" (action this.cloneAsNewVersion)}}",
          "125:                 />",
          "126:                 <Hds::Button",
          "127:                   data-test-clone-as-new-job",
          "128:                   @text=\"Clone as New Job\"",
          "129:                   @color=\"secondary\"",
          "130:                   @size=\"small\"",
          "131:                   @isInline={{true}}",
          "132:                   {{on \"click\" (action this.cloneAsNewJob)}}",
          "133:                 />",
          "134:               {{/if}}",
          "",
          "---------------"
        ],
        "ui/app/templates/jobs/run/index.hbs||ui/app/templates/jobs/run/index.hbs": [
          "File: ui/app/templates/jobs/run/index.hbs -> ui/app/templates/jobs/run/index.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: <Breadcrumb @crumb={{hash label=\"Run\" args=(array \"jobs.run\")}} />",
          "7: {{page-title \"Run a job\"}}",
          "8: <section class=\"section\">",
          "9:   <JobEditor @job={{this.model}} @context=\"new\" @onSubmit={{action this.onSubmit}} @handleSaveAsTemplate={{this.handleSaveAsTemplate}} data-test-job-editor />",
          "",
          "[Removed Lines]",
          "10: </section>",
          "",
          "[Added Lines]",
          "9:   {{#if (and this.sourceString (not this.disregardNameWarning))}}",
          "10:     <Hds::Alert @type=\"inline\" @color=\"warning\" data-test-job-name-warning as |A|>",
          "11:       <A.Title>Don't forget to change the job name!</A.Title>",
          "12:       <A.Description>Since you're cloning a job version's source as a new job, you'll want to change the job name. Otherwise, this will appear as a new version of the original job, rather than a new job.</A.Description>",
          "13:     </Hds::Alert>",
          "14:   {{/if}}",
          "",
          "---------------"
        ],
        "ui/tests/acceptance/job-versions-test.js||ui/tests/acceptance/job-versions-test.js": [
          "File: ui/tests/acceptance/job-versions-test.js -> ui/tests/acceptance/job-versions-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   });",
          "323: });",
          "325: module('Acceptance | job versions (with client token)', function (hooks) {",
          "326:   setupApplicationTest(hooks);",
          "327:   setupMirage(hooks);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326: module('Acceptance | job versions (clone and edit)', function (hooks) {",
          "327:   setupApplicationTest(hooks);",
          "328:   setupMirage(hooks);",
          "330:   hooks.beforeEach(async function () {",
          "331:     server.create('node-pool');",
          "332:     namespace = server.create('namespace');",
          "334:     const managementToken = server.create('token');",
          "335:     window.localStorage.nomadTokenSecret = managementToken.secretId;",
          "337:     job = server.create('job', {",
          "338:       createAllocations: false,",
          "339:       version: 99,",
          "340:       namespaceId: namespace.id,",
          "341:     });",
          "343:     server.db.jobVersions.remove();",
          "344:     server.create('job-version', {",
          "345:       job,",
          "346:       version: 99,",
          "347:       submitTime: 1731101785761339000,",
          "348:     });",
          "349:     server.create('job-version', {",
          "350:       job,",
          "351:       version: 98,",
          "352:       submitTime: 1731101685761339000,",
          "353:       versionTag: {",
          "354:         Name: 'test-tag',",
          "355:         Description: 'A tag with a brief description',",
          "356:       },",
          "357:     });",
          "358:     server.create('job-version', {",
          "359:       job,",
          "360:       version: 0,",
          "361:       submitTime: 1731101585761339000,",
          "362:     });",
          "363:     await Versions.visit({ id: job.id });",
          "364:   });",
          "366:   test('Clone and edit buttons are shown', async function (assert) {",
          "367:     assert.dom('.job-version').exists({ count: 3 });",
          "368:     assert",
          "369:       .dom('[data-test-clone-and-edit]')",
          "370:       .exists(",
          "371:         { count: 2 },",
          "372:         'Current job version doesnt have clone or revert buttons'",
          "373:       );",
          "375:     const versionBlock = '[data-test-job-version=\"98\"]';",
          "377:     assert",
          "378:       .dom(`${versionBlock} [data-test-clone-as-new-version]`)",
          "379:       .doesNotExist(",
          "380:         'Confirmation-stage clone-as-new-version button doesnt exist on initial load'",
          "381:       );",
          "382:     assert",
          "383:       .dom(`${versionBlock} [data-test-clone-as-new-job]`)",
          "384:       .doesNotExist(",
          "385:         'Confirmation-stage clone-as-new-job button doesnt exist on initial load'",
          "386:       );",
          "388:     await click(`${versionBlock} [data-test-clone-and-edit]`);",
          "390:     assert",
          "391:       .dom(`${versionBlock} [data-test-clone-as-new-version]`)",
          "392:       .exists(",
          "393:         'Confirmation-stage clone-as-new-version button exists after clicking clone and edit'",
          "394:       );",
          "396:     assert",
          "397:       .dom(`${versionBlock} [data-test-clone-as-new-job]`)",
          "398:       .exists(",
          "399:         'Confirmation-stage clone-as-new-job button exists after clicking clone and edit'",
          "400:       );",
          "402:     assert",
          "403:       .dom(`${versionBlock} [data-test-revert-to]`)",
          "404:       .doesNotExist('Revert button is hidden when Clone buttons are expanded');",
          "406:     assert",
          "407:       .dom('[data-test-job-version=\"0\"] [data-test-revert-to]')",
          "408:       .exists('Revert button is visible for other versions');",
          "410:     await click(`${versionBlock} [data-test-cancel-clone]`);",
          "412:     assert",
          "413:       .dom(`${versionBlock} [data-test-clone-as-new-version]`)",
          "414:       .doesNotExist(",
          "415:         'Confirmation-stage clone-as-new-version button doesnt exist after clicking cancel'",
          "416:       );",
          "417:   });",
          "419:   test('Clone as new version', async function (assert) {",
          "420:     const versionBlock = '[data-test-job-version=\"98\"]';",
          "421:     await click(`${versionBlock} [data-test-clone-and-edit]`);",
          "422:     await click(`${versionBlock} [data-test-clone-as-new-version]`);",
          "424:     assert.equal(",
          "425:       currentURL(),",
          "426:       `/jobs/${job.id}@${namespace.id}/definition?isEditing=true&version=98&view=job-spec`,",
          "427:       'Taken to the definition page in edit mode'",
          "428:     );",
          "430:     await percySnapshot(assert);",
          "431:   });",
          "433:   test('Clone as new version when version is 0', async function (assert) {",
          "434:     const versionBlock = '[data-test-job-version=\"0\"]';",
          "435:     await click(`${versionBlock} [data-test-clone-and-edit]`);",
          "436:     await click(`${versionBlock} [data-test-clone-as-new-version]`);",
          "438:     assert.equal(",
          "439:       currentURL(),",
          "440:       `/jobs/${job.id}@${namespace.id}/definition?isEditing=true&version=0&view=job-spec`,",
          "441:       'Taken to the definition page in edit mode'",
          "442:     );",
          "443:   });",
          "445:   test('Clone as a new version when no submission info is available', async function (assert) {",
          "446:     server.pretender.get('/v1/job/:id/submission', () => [500, {}, '']);",
          "447:     const versionBlock = '[data-test-job-version=\"98\"]';",
          "448:     await click(`${versionBlock} [data-test-clone-and-edit]`);",
          "449:     await click(`${versionBlock} [data-test-clone-as-new-version]`);",
          "451:     assert.equal(",
          "452:       currentURL(),",
          "453:       `/jobs/${job.id}@${namespace.id}/definition?isEditing=true&version=98&view=full-definition`,",
          "454:       'Taken to the definition page in edit mode'",
          "455:     );",
          "457:     assert.dom('[data-test-json-warning]').exists();",
          "459:     await percySnapshot(assert);",
          "460:   });",
          "462:   test('Clone as a new job', async function (assert) {",
          "463:     const testString =",
          "464:       'Test string that should appear in my sourceString url param';",
          "465:     server.pretender.get('/v1/job/:id/submission', () => [",
          "466:       200,",
          "467:       {},",
          "468:       JSON.stringify({",
          "469:         Source: testString,",
          "470:       }),",
          "471:     ]);",
          "472:     const versionBlock = '[data-test-job-version=\"98\"]';",
          "473:     await click(`${versionBlock} [data-test-clone-and-edit]`);",
          "474:     await click(`${versionBlock} [data-test-clone-as-new-job]`);",
          "476:     assert.equal(",
          "477:       currentURL(),",
          "478:       `/jobs/run?sourceString=${encodeURIComponent(testString)}`,",
          "479:       'Taken to the new job page'",
          "480:     );",
          "481:     assert.dom('[data-test-job-name-warning]').exists();",
          "482:   });",
          "483: });",
          "",
          "---------------"
        ],
        "ui/tests/unit/adapters/job-test.js||ui/tests/unit/adapters/job-test.js": [
          "File: ui/tests/unit/adapters/job-test.js -> ui/tests/unit/adapters/job-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:     assert.equal(request.method, 'GET');",
          "502:   });",
          "504:   test('forcePeriodic requests include the activeRegion', async function (assert) {",
          "505:     const region = 'region-2';",
          "506:     const job = await this.initializeWithJob({ region });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:   test('fetchRawDefinition handles version requests', async function (assert) {",
          "505:     assert.expect(5);",
          "507:     const adapter = this.owner.lookup('adapter:job');",
          "508:     const job = {",
          "509:       get: sinon.stub(),",
          "510:     };",
          "512:     job.get.withArgs('id').returns('[\"job-id\"]');",
          "514:     const mockVersionResponse = {",
          "515:       Versions: [",
          "516:         { Version: 1, JobID: 'job-id', JobModifyIndex: 100 },",
          "517:         { Version: 2, JobID: 'job-id', JobModifyIndex: 200 },",
          "518:       ],",
          "519:     };",
          "522:     const ajaxStub = sinon.stub(adapter, 'ajax');",
          "523:     ajaxStub",
          "524:       .withArgs('/v1/job/job-id/versions', 'GET')",
          "525:       .resolves(mockVersionResponse);",
          "528:     const result = await adapter.fetchRawDefinition(job, 2);",
          "529:     assert.equal(result.Version, 2, 'Returns correct version');",
          "530:     assert.equal(result.JobModifyIndex, 200, 'Returns full version info');",
          "533:     try {",
          "534:       await adapter.fetchRawDefinition(job, 999);",
          "535:       assert.ok(false, 'Should have thrown error');",
          "536:     } catch (e) {",
          "537:       assert.equal(",
          "538:         e.message,",
          "539:         'Version 999 not found',",
          "540:         'Throws appropriate error'",
          "541:       );",
          "542:     }",
          "545:     ajaxStub",
          "546:       .withArgs('/v1/job/job-id', 'GET')",
          "547:       .resolves({ ID: 'job-id', Version: 2 });",
          "549:     const currentResult = await adapter.fetchRawDefinition(job);",
          "551:     assert.equal(",
          "552:       ajaxStub.lastCall.args[0],",
          "553:       '/v1/job/job-id',",
          "554:       'URL has no version query param'",
          "555:     );",
          "556:     assert.equal(",
          "557:       currentResult.Version,",
          "558:       2,",
          "559:       'Returns current version when no version specified'",
          "560:     );",
          "561:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "681:         '/v1/job/job-id/submission?namespace=zoey&version=job-version'",
          "682:       );",
          "683:     });",
          "684:   });",
          "685: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "743:     test('Requests for specific versions include the queryParam', async function (assert) {",
          "744:       const adapter = this.owner.lookup('adapter:job');",
          "745:       const job = {",
          "746:         get: sinon.stub(),",
          "747:       };",
          "748:       job.get.withArgs('id').returns('[\"job-id\"]');",
          "749:       job.get.withArgs('version').returns(100);",
          "752:       sinon.stub(adapter, 'ajax').callsFake(() => resolve({}));",
          "754:       await adapter.fetchRawSpecification(job, 99);",
          "756:       assert.ok(adapter.ajax.calledOnce, 'The ajax method is called once');",
          "757:       assert.equal(",
          "758:         adapter.ajax.args[0][0],",
          "759:         '/v1/job/job-id/submission?version=99',",
          "760:         'it includes the version query param'",
          "761:       );",
          "762:       assert.equal(adapter.ajax.args[0][1], 'GET');",
          "763:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35f2aeee82ea1f901267adc900a82b1f7ede1800",
      "candidate_info": {
        "commit_hash": "35f2aeee82ea1f901267adc900a82b1f7ede1800",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/35f2aeee82ea1f901267adc900a82b1f7ede1800",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump golang.org/x/sync from 0.8.0 to 0.9.0 (#24554)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  go.uber.org/goleak v1.2.1",
          "131:  golang.org/x/crypto v0.27.0",
          "132:  golang.org/x/mod v0.21.0",
          "134:  golang.org/x/sys v0.27.0",
          "135:  golang.org/x/time v0.3.0",
          "136:  google.golang.org/grpc v1.68.0",
          "",
          "[Removed Lines]",
          "133:  golang.org/x/sync v0.8.0",
          "",
          "[Added Lines]",
          "133:  golang.org/x/sync v0.9.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307: golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1308: golang.org/x/sync v0.0.0-20220929204114-8fcdb60fdcc0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1309: golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1312: golang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "1313: golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "1314: golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "",
          "[Removed Lines]",
          "1310: golang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=",
          "1311: golang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "",
          "[Added Lines]",
          "1310: golang.org/x/sync v0.9.0 h1:fEo0HyrW1GIgZdpbhCRO0PkJajUS5H9IFUztCgEo2jQ=",
          "1311: golang.org/x/sync v0.9.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20df9fd87aed9f3dd18fa1915c561ea9fb9f5e74",
      "candidate_info": {
        "commit_hash": "20df9fd87aed9f3dd18fa1915c561ea9fb9f5e74",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/20df9fd87aed9f3dd18fa1915c561ea9fb9f5e74",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit 3dfbc890b28ecd22ad863071227c0d9eb5440250 (#24475)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  github.com/containerd/go-cni v1.1.9",
          "25:  github.com/containernetworking/cni v1.2.3",
          "26:  github.com/coreos/go-iptables v0.6.0",
          "28:  github.com/distribution/reference v0.5.0",
          "29:  github.com/docker/cli v27.3.1+incompatible",
          "30:  github.com/docker/docker v27.1.1+incompatible",
          "",
          "[Removed Lines]",
          "27:  github.com/creack/pty v1.1.23",
          "",
          "[Added Lines]",
          "27:  github.com/creack/pty v1.1.24",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "361: github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=",
          "362: github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=",
          "363: github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=",
          "366: github.com/cyphar/filepath-securejoin v0.2.5 h1:6iR5tXJ/e6tJZzzdMc1km3Sa7RRIVBKAK32O2s7AYfo=",
          "367: github.com/cyphar/filepath-securejoin v0.2.5/go.mod h1:aPGpWjXOXUn2NCNjFvBE6aRxGGx79pTxQpKOJNYHHl4=",
          "368: github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "",
          "[Removed Lines]",
          "364: github.com/creack/pty v1.1.23 h1:4M6+isWdcStXEf15G/RbrMPOQj1dZ7HPZCGwE4kOeP0=",
          "365: github.com/creack/pty v1.1.23/go.mod h1:08sCNb52WyoAwi2QDyzUCTgcvVFhUzewun7wtTfvcwE=",
          "",
          "[Added Lines]",
          "364: github.com/creack/pty v1.1.24 h1:bJrF4RRfyJnbTJqzRLHzcGaZK1NeM5kTC9jGgovnR1s=",
          "365: github.com/creack/pty v1.1.24/go.mod h1:08sCNb52WyoAwi2QDyzUCTgcvVFhUzewun7wtTfvcwE=",
          "",
          "---------------"
        ]
      }
    }
  ]
}