{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "66f8551b78db3a1d8ae5c51d2a04a1a35ee1fd32",
      "candidate_info": {
        "commit_hash": "66f8551b78db3a1d8ae5c51d2a04a1a35ee1fd32",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/66f8551b78db3a1d8ae5c51d2a04a1a35ee1fd32",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java"
        ],
        "message": "PDFBOX-5203: expect more than one issuer\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890434 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:             return;",
          "210:         }",
          "212:         for (X509Certificate additionalCert : additionalCerts)",
          "213:         {",
          "214:             try",
          "215:             {",
          "216:                 cert.verify(additionalCert.getPublicKey(), SecurityProvider.getProvider().getName());",
          "219:             }",
          "220:             catch (GeneralSecurityException ex)",
          "221:             {",
          "223:             }",
          "229:         String ocspURL = extractOCSPURL(cert);",
          "230:         if (ocspURL != null)",
          "",
          "[Removed Lines]",
          "211:         X509Certificate issuerCert = null;",
          "217:                 issuerCert = additionalCert;",
          "218:                 break;",
          "224:         }",
          "",
          "[Added Lines]",
          "216:                 checkRevocationsWithIssuer(cert, additionalCert, additionalCerts, signDate);",
          "223:         }",
          "224:     }",
          "226:     private static void checkRevocationsWithIssuer(X509Certificate cert, X509Certificate issuerCert,",
          "227:             Set<X509Certificate> additionalCerts, Date signDate)",
          "228:             throws CertificateVerificationException, IOException, RevokedCertificateException,",
          "229:             GeneralSecurityException, OCSPException",
          "230:     {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48a07c2a427c9c8ea5c6e1b52c8e7973102f95ce",
      "candidate_info": {
        "commit_hash": "48a07c2a427c9c8ea5c6e1b52c8e7973102f95ce",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/48a07c2a427c9c8ea5c6e1b52c8e7973102f95ce",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891648 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java -> preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:         }",
          "308:         if (!(base instanceof COSObject))",
          "309:         {",
          "311:         }",
          "312:         return (COSObject) base;",
          "313:     }",
          "",
          "[Removed Lines]",
          "310:             throw new IllegalArgumentException(\"Paremater \" + base + \" should be null, COSNull or a COSObject\");",
          "",
          "[Added Lines]",
          "310:             throw new IllegalArgumentException(\"Parameter \" + base + \" should be null, COSNull or a COSObject\");",
          "",
          "---------------"
        ],
        "preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java -> preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java"
        ]
      }
    },
    {
      "candidate_hash": "61ae2fe9c3f810ac111adcc31f404a3abadb4a5d",
      "candidate_info": {
        "commit_hash": "61ae2fe9c3f810ac111adcc31f404a3abadb4a5d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/61ae2fe9c3f810ac111adcc31f404a3abadb4a5d",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java"
        ],
        "message": "PDFBOX-4892: improve javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891752 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSigProperties.java"
        ]
      }
    },
    {
      "candidate_hash": "f067f7313a64cc7637cb7411268ffcd708c3882e",
      "candidate_info": {
        "commit_hash": "f067f7313a64cc7637cb7411268ffcd708c3882e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f067f7313a64cc7637cb7411268ffcd708c3882e",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ],
        "message": "PDFBOX-4980: replace constant that doesn't exist in jdk 1.6, as suggested by Simon Steiner\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882278 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:                     Document doc = XMLUtil.parse(inputStream);",
          "407:                     TransformerFactory transformerFactory = TransformerFactory.newInstance();",
          "408:                     transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);",
          "411:                     Transformer transformer = transformerFactory.newTransformer();",
          "412:                     transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");",
          "413:                     transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"1\");",
          "",
          "[Removed Lines]",
          "409:                     transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
          "410:                     transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");",
          "",
          "[Added Lines]",
          "410:                     transformerFactory.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalDTD\", \"\");",
          "412:                     transformerFactory.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalStylesheet\", \"\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a259828f45af9a365a4b332baeb516aeee351d4d",
      "candidate_info": {
        "commit_hash": "a259828f45af9a365a4b332baeb516aeee351d4d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a259828f45af9a365a4b332baeb516aeee351d4d",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java"
        ],
        "message": "PDFBOX-5103: allow reuse of subsetted fonts by inverting the ToUnicode CMap\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886625 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMap.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     private final Map<Integer,String> charToUnicode = new HashMap<Integer,String>();",
          "56:     private final Map<Integer,Integer> codeToCid = new HashMap<Integer,Integer>();",
          "57:     private final List<CIDRange> codeToCidRanges = new ArrayList<CIDRange>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     Map <String, byte[]> unicodeToByteCodes = new HashMap<String, byte[]>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:     void addCharMapping(byte[] codes, String unicode)",
          "210:     {",
          "211:         int code = getCodeFromArray(codes, 0, codes.length);",
          "212:         charToUnicode.put(code, unicode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:         unicodeToByteCodes.put(unicode, codes.clone()); // clone needed, bytes is modified later",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:         }",
          "219:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:     public byte[] getCodesFromUnicode(String unicode)",
          "232:     {",
          "233:         return unicodeToByteCodes.get(unicode);",
          "234:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:             if (cid == -1)",
          "357:             {",
          "360:                 cid = 0;",
          "361:             }",
          "362:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:                 CMap toUnicodeCMap = parent.getToUnicodeCMap();",
          "359:                 byte[] codes = toUnicodeCMap.getCodesFromUnicode(Character.toString((char) unicode));",
          "360:                 if (codes != null)",
          "361:                 {",
          "362:                     return codes;",
          "363:                 }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     {",
          "624:         return getClass().getSimpleName() + \" \" + getName();",
          "625:     }",
          "626: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:     protected CMap getToUnicodeCMap()",
          "633:     {",
          "634:         return toUnicodeCMap;",
          "635:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.pdfbox.pdmodel.font;",
          "20: import java.io.File;",
          "21: import java.io.IOException;",
          "22: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.ByteArrayOutputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import org.apache.pdfbox.pdmodel.PDPage;",
          "31: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "32: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "33: import org.apache.pdfbox.text.PDFTextStripper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:         PDFTextStripper stripper = new PDFTextStripper();",
          "252:         return stripper.getText(document);",
          "253:     }",
          "254: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     public void testReuseEmbeddedSubsettedFont() throws IOException",
          "263:     {",
          "264:         String text1 = \"The quick brown fox\";",
          "265:         String text2 = \"xof nworb kciuq ehT\";",
          "266:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "267:         PDDocument document = new PDDocument();",
          "268:         PDPage page = new PDPage();",
          "269:         document.addPage(page);",
          "270:         InputStream input = PDFont.class.getResourceAsStream(",
          "271:                 \"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf\");",
          "272:         PDType0Font font = PDType0Font.load(document, input);",
          "273:         PDPageContentStream stream = new PDPageContentStream(document, page);",
          "274:         stream.beginText();",
          "275:         stream.setFont(font, 20);",
          "276:         stream.newLineAtOffset(50, 600);",
          "277:         stream.showText(text1);",
          "278:         stream.endText();",
          "279:         stream.close();",
          "280:         document.save(baos);",
          "281:         document.close();",
          "283:         document = PDDocument.load(baos.toByteArray());",
          "284:         page = document.getPage(0);",
          "285:         font = (PDType0Font) page.getResources().getFont(COSName.getPDFName(\"F1\"));",
          "286:         stream = new PDPageContentStream(document, page, AppendMode.APPEND, true);",
          "287:         stream.beginText();",
          "288:         stream.setFont(font, 20);",
          "289:         stream.newLineAtOffset(250, 600);",
          "290:         stream.showText(text2);",
          "291:         stream.endText();",
          "292:         stream.close();",
          "293:         baos.reset();",
          "294:         document.save(baos);",
          "295:         document.close();",
          "297:         document = PDDocument.load(baos.toByteArray());",
          "298:         PDFTextStripper stripper = new PDFTextStripper();",
          "299:         String extractedText = stripper.getText(document);",
          "300:         assertEquals(text1 + \" \" + text2, extractedText.trim());",
          "301:         document.close();",
          "302:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}