{
  "cve_id": "CVE-2021-41090",
  "cve_desc": "Grafana Agent is a telemetry collector for sending metrics, logs, and trace data to the opinionated Grafana observability stack. Prior to versions 0.20.1 and 0.21.2, inline secrets defined within a metrics instance config are exposed in plaintext over two endpoints: metrics instance configs defined in the base YAML file are exposed at `/-/config` and metrics instance configs defined for the scraping service are exposed at `/agent/api/v1/configs/:key`. Inline secrets will be exposed to anyone being able to reach these endpoints. If HTTPS with client authentication is not configured, these endpoints are accessible to unauthenticated users. Secrets found in these sections are used for delivering metrics to a Prometheus Remote Write system, authenticating against a system for discovering Prometheus targets, and authenticating against a system for collecting metrics. This does not apply for non-inlined secrets, such as `*_file` based secrets. This issue is patched in Grafana Agent versions 0.20.1 and 0.21.2. A few workarounds are available. Users who cannot upgrade should use non-inline secrets where possible. Users may also desire to restrict API access to Grafana Agent with some combination of restricting the network interfaces Grafana Agent listens on through `http_listen_address` in the `server` block, configuring Grafana Agent to use HTTPS with client authentication, and/or using firewall rules to restrict external access to Grafana Agent's API.",
  "repo": "grafana/agent",
  "patch_hash": "af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
  "patch_info": {
    "commit_hash": "af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
    "repo": "grafana/agent",
    "commit_url": "https://github.com/grafana/agent/commit/af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
    "files": [
      "CHANGELOG.md",
      "docs/configuration/integrations/node-exporter-config.md",
      "docs/configuration/integrations/process-exporter-config.md",
      "docs/getting-started/_index.md",
      "docs/operator/custom-resource-quickstart.md",
      "docs/operator/getting-started.md",
      "docs/upgrade-guide/_index.md",
      "pkg/operator/defaults.go",
      "production/README.md",
      "production/grafanacloud-install.sh",
      "production/kubernetes/agent-bare.yaml",
      "production/kubernetes/agent-loki.yaml",
      "production/kubernetes/agent-traces.yaml",
      "production/kubernetes/build/lib/version.libsonnet",
      "production/kubernetes/install-bare.sh",
      "production/tanka/grafana-agent/v1/main.libsonnet",
      "production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
    ],
    "message": "announce patch releases for cve-2021-41090 (#1152)",
    "before_after_code_files": [
      "pkg/operator/defaults.go||pkg/operator/defaults.go",
      "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
      "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
      "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
      "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
      "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
    ]
  },
  "patch_diff": {
    "pkg/operator/defaults.go||pkg/operator/defaults.go": [
      "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   \"v0.18.4\",",
      "16:   \"v0.19.0\",",
      "17:   \"v0.20.0\",",
      "18:   \"v0.21.0\",",
      "19:   \"v0.21.1\",",
      "22:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:   \"v0.20.1\",",
      "21:   \"v0.21.2\",",
      "",
      "---------------"
    ],
    "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
      "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: #",
      "51: # Global constants.",
      "52: #",
      "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
      "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
      "",
      "[Removed Lines]",
      "53: RELEASE_VERSION=\"0.21.1\"",
      "",
      "[Added Lines]",
      "53: RELEASE_VERSION=\"0.21.2\"",
      "",
      "---------------"
    ],
    "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
      "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 'grafana/agent:v0.21.1'",
      "",
      "[Added Lines]",
      "1: 'grafana/agent:v0.21.2'",
      "",
      "---------------"
    ],
    "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
      "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: check_installed curl",
      "26: check_installed envsubst",
      "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
      "30: NAMESPACE=${NAMESPACE:-default}",
      "",
      "[Removed Lines]",
      "28: MANIFEST_BRANCH=v0.21.1",
      "",
      "[Added Lines]",
      "28: MANIFEST_BRANCH=v0.21.2",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
      "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: (import './lib/traces.libsonnet') +",
      "16: {",
      "17:   _images:: {",
      "20:   },",
      "",
      "[Removed Lines]",
      "18:     agent: 'grafana/agent:v0.21.1',",
      "19:     agentctl: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "18:     agent: 'grafana/agent:v0.21.2',",
      "19:     agentctl: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
      "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:   local this = self,",
      "12:   _images:: {",
      "15:   },",
      "16:   _config:: {",
      "17:     name: name,",
      "",
      "[Removed Lines]",
      "13:     agent: 'grafana/agent:v0.21.1',",
      "14:     agentctl: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "13:     agent: 'grafana/agent:v0.21.2',",
      "14:     agentctl: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
      "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: ) {",
      "15:   local _config = {",
      "16:     api: error 'api must be set',",
      "18:     schedule: '*/5 * * * *',",
      "19:     configs: [],",
      "20:   } + config,",
      "",
      "[Removed Lines]",
      "17:     image: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "17:     image: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d9efdbf0289afb4671fd357ff6387afad76489a",
      "candidate_info": {
        "commit_hash": "5d9efdbf0289afb4671fd357ff6387afad76489a",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/5d9efdbf0289afb4671fd357ff6387afad76489a",
        "files": [
          "cmd/agentctl/main.go",
          "pkg/client/grafanacloud/client.go",
          "pkg/client/grafanacloud/client_test.go",
          "production/grafanacloud-install.sh"
        ],
        "message": "Add grafanacloud-specific install script (#291)\n\n* grafanacloud-specific install script\n\n* remove empty comment\n\n* Update cmd/agentctl/main.go\n\nCo-authored-by: Evan <10603766+hoenn@users.noreply.github.com>\n\n* appease the linter\n\n* Update production/grafanacloud-install.sh\n\nCo-authored-by: Jack Baldry <jack.baldry@grafana.com>\n\n* Update production/grafanacloud-install.sh\n\nCo-authored-by: Jack Baldry <jack.baldry@grafana.com>\n\n* Update production/grafanacloud-install.sh\n\nCo-authored-by: Karsten Jeschkies <k@jeschkies.xyz>\n\n* review feedback\n\n* agentctl: change to consistent command function naming\n\n* print success message after installing/starting agent service\n\nCo-authored-by: Evan <10603766+hoenn@users.noreply.github.com>\nCo-authored-by: Jack Baldry <jack.baldry@grafana.com>\nCo-authored-by: Karsten Jeschkies <k@jeschkies.xyz>",
        "before_after_code_files": [
          "cmd/agentctl/main.go||cmd/agentctl/main.go",
          "pkg/client/grafanacloud/client.go||pkg/client/grafanacloud/client.go",
          "pkg/client/grafanacloud/client_test.go||pkg/client/grafanacloud/client_test.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
          ],
          "candidate": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
          ]
        }
      },
      "candidate_diff": {
        "cmd/agentctl/main.go||cmd/agentctl/main.go": [
          "File: cmd/agentctl/main.go -> cmd/agentctl/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: package main",
          "4: import (",
          "5:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"path/filepath\"",
          "8:  \"sort\"",
          "11:  _ \"github.com/grafana/agent/pkg/build\"",
          "12:  \"github.com/olekukonko/tablewriter\"",
          "13:  \"github.com/prometheus/common/version\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"context\"",
          "10:  \"time\"",
          "14:  \"github.com/grafana/agent/pkg/client/grafanacloud\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   walStatsCmd(),",
          "36:   targetStatsCmd(),",
          "37:   samplesCmd(),",
          "38:  )",
          "40:  _ = cmd.Execute()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   cloudConfigCmd(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:  }",
          "263: }",
          "265: func must(err error) {",
          "266:  if err != nil {",
          "267:   panic(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: func cloudConfigCmd() *cobra.Command {",
          "270:  var (",
          "271:   stackID string",
          "272:   apiKey  string",
          "273:  )",
          "275:  cmd := &cobra.Command{",
          "276:   Use:   \"cloud-config\",",
          "277:   Short: \"Retrieves the cloud config for the Grafana Cloud Agent\",",
          "278:   Long: `cloud-config connects to Grafana Cloud and retrieves the generated",
          "279: config that may be used with this agent.`,",
          "280:   Args: cobra.ExactArgs(0),",
          "283:   Hidden: true,",
          "285:   RunE: func(_ *cobra.Command, args []string) error {",
          "286:    if stackID == \"\" {",
          "287:     return fmt.Errorf(\"--stack must be provided\")",
          "288:    }",
          "289:    if apiKey == \"\" {",
          "290:     return fmt.Errorf(\"--api-key must be provided\")",
          "291:    }",
          "293:    cli := grafanacloud.NewClient(nil, apiKey)",
          "295:    ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)",
          "296:    defer cancel()",
          "298:    cfg, err := cli.AgentConfig(ctx, stackID)",
          "299:    if err != nil {",
          "300:     fmt.Fprintf(os.Stderr, \"could not retrieve agent cloud config: %s\\n\", err)",
          "301:     os.Exit(1)",
          "302:    }",
          "304:    fmt.Println(cfg)",
          "305:    return nil",
          "306:   },",
          "307:  }",
          "309:  cmd.Flags().StringVarP(&stackID, \"stack\", \"u\", \"\", \"stack ID to get a config for\")",
          "310:  cmd.Flags().StringVarP(&apiKey, \"api-key\", \"p\", \"\", \"API key to authenticate against Grafana Cloud's API with\")",
          "311:  must(cmd.MarkFlagRequired(\"stack\"))",
          "312:  must(cmd.MarkFlagRequired(\"api-key\"))",
          "314:  return cmd",
          "315: }",
          "",
          "---------------"
        ],
        "pkg/client/grafanacloud/client.go||pkg/client/grafanacloud/client.go": [
          "File: pkg/client/grafanacloud/client.go -> pkg/client/grafanacloud/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: package grafanacloud",
          "4: import (",
          "5:  \"context\"",
          "6:  \"fmt\"",
          "7:  \"net/http\"",
          "8:  \"strings\"",
          "10:  \"gopkg.in/yaml.v2\"",
          "11: )",
          "13: const integrationsAPIURL = \"https://integrations-api.grafana.net\"",
          "16: type Client struct {",
          "17:  c      *http.Client",
          "18:  apiKey string",
          "19: }",
          "26: func NewClient(c *http.Client, apiKey string) *Client {",
          "27:  if c == nil {",
          "28:   c = http.DefaultClient",
          "29:  }",
          "30:  return &Client{c: c, apiKey: apiKey}",
          "31: }",
          "35: func (c *Client) AgentConfig(ctx context.Context, stackID string) (string, error) {",
          "36:  req, err := http.NewRequestWithContext(",
          "37:   ctx, \"GET\",",
          "38:   fmt.Sprintf(\"%s/stacks/%s/agent_config\", integrationsAPIURL, stackID),",
          "39:   nil,",
          "40:  )",
          "41:  if err != nil {",
          "42:   return \"\", fmt.Errorf(\"failed to generate request: %w\", err)",
          "43:  }",
          "44:  req.Header.Add(\"Authorization\", \"Bearer \"+c.apiKey)",
          "46:  resp, err := c.c.Do(req)",
          "47:  if err != nil {",
          "48:   return \"\", fmt.Errorf(\"failed to make request: %w\", err)",
          "49:  }",
          "50:  defer resp.Body.Close()",
          "52:  if resp.StatusCode != 200 {",
          "53:   return \"\", fmt.Errorf(\"unexpected status code %d\", resp.StatusCode)",
          "54:  }",
          "58:  payload := struct {",
          "59:   Status string        `yaml:\"status\"`",
          "60:   Data   yaml.MapSlice `yaml:\"data\"`",
          "61:   Error  string        `yaml:\"error\"`",
          "62:  }{}",
          "64:  dec := yaml.NewDecoder(resp.Body)",
          "65:  if err := dec.Decode(&payload); err != nil {",
          "66:   return \"\", fmt.Errorf(\"failed to read response: %w\", err)",
          "67:  }",
          "69:  if payload.Status != \"success\" {",
          "70:   return \"\", fmt.Errorf(\"request was not successful: %s\", payload.Error)",
          "71:  }",
          "74:  var sb strings.Builder",
          "75:  if err := yaml.NewEncoder(&sb).Encode(payload.Data); err != nil {",
          "76:   return \"\", fmt.Errorf(\"failed to generate YAML config: %w\", err)",
          "77:  }",
          "79:  return sb.String(), nil",
          "80: }",
          "",
          "---------------"
        ],
        "pkg/client/grafanacloud/client_test.go||pkg/client/grafanacloud/client_test.go": [
          "File: pkg/client/grafanacloud/client_test.go -> pkg/client/grafanacloud/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package grafanacloud",
          "3: import (",
          "4:  \"context\"",
          "5:  \"crypto/tls\"",
          "6:  \"fmt\"",
          "7:  \"net\"",
          "8:  \"net/http\"",
          "9:  \"net/http/httptest\"",
          "10:  \"testing\"",
          "12:  \"github.com/stretchr/testify/assert\"",
          "13:  \"github.com/stretchr/testify/require\"",
          "14: )",
          "16: const (",
          "17:  testSecret  = \"secret-key\"",
          "18:  testStackID = \"12345\"",
          "19: )",
          "21: func TestClient_AgentConfig(t *testing.T) {",
          "22:  httpClient := testClient(t, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "23:   assert.Equal(t, \"/stacks/\"+testStackID+\"/agent_config\", r.URL.Path)",
          "24:   assert.Equal(t, \"Bearer \"+testSecret, r.Header.Get(\"Authorization\"))",
          "26:   _, err := w.Write([]byte(`{",
          "27:    \"status\": \"success\",",
          "28:    \"data\": {",
          "29:     \"server\": {",
          "30:      \"http_listen_port\": 12345",
          "31:     },",
          "32:     \"integrations\": {",
          "33:      \"agent\": {",
          "34:       \"enabled\": true",
          "35:      }",
          "36:     }",
          "37:    }",
          "38:   }`))",
          "39:   assert.NoError(t, err)",
          "40:  }))",
          "42:  cli := NewClient(httpClient, testSecret)",
          "43:  cfg, err := cli.AgentConfig(context.Background(), testStackID)",
          "44:  require.NoError(t, err)",
          "45:  fmt.Println(cfg)",
          "47:  expect := `",
          "48: server:",
          "49:   http_listen_port: 12345",
          "50: integrations:",
          "51:   agent:",
          "52:     enabled: true",
          "53: `",
          "55:  require.YAMLEq(t, expect, cfg)",
          "56: }",
          "58: func TestClient_AgentConfig_Error(t *testing.T) {",
          "59:  httpClient := testClient(t, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "60:   w.WriteHeader(http.StatusNotFound)",
          "61:  }))",
          "63:  cli := NewClient(httpClient, testSecret)",
          "64:  _, err := cli.AgentConfig(context.Background(), testStackID)",
          "65:  require.Error(t, err, \"unexpected status code 404\")",
          "66: }",
          "68: func TestClient_AgentConfig_ErrorMessage(t *testing.T) {",
          "69:  httpClient := testClient(t, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "70:   _, err := w.Write([]byte(`{",
          "71:    \"status\": \"error\",",
          "72:    \"error\": \"Something went wrong\"",
          "73:   }`))",
          "74:   assert.NoError(t, err)",
          "75:  }))",
          "77:  cli := NewClient(httpClient, testSecret)",
          "78:  _, err := cli.AgentConfig(context.Background(), testStackID)",
          "79:  require.Error(t, err, \"request was not successful: Something went wrong\")",
          "80: }",
          "82: func testClient(t *testing.T, handler http.HandlerFunc) *http.Client {",
          "83:  h := httptest.NewTLSServer(handler)",
          "84:  t.Cleanup(func() {",
          "85:   h.Close()",
          "86:  })",
          "88:  return &http.Client{",
          "89:   Transport: &http.Transport{",
          "90:    TLSClientConfig: &tls.Config{",
          "91:     InsecureSkipVerify: true,",
          "92:    },",
          "93:    DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {",
          "94:     return net.Dial(network, h.Listener.Addr().String())",
          "95:    },",
          "96:   },",
          "97:  }",
          "98: }",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env sh",
          "2: # grafanacloud-install.sh installs the Grafana Cloud Agent on supported x86_64",
          "3: # Linux systems for Grafana Cloud users. Those who aren't users of Grafana Cloud",
          "4: # or need to install the Agent on a different architecture or platform should",
          "5: # try another installation method.",
          "6: #",
          "7: # grafanacloud-install.sh has a hard dependency on being run on a supported",
          "8: # Linux system. Currently only systems that can install deb or rpm packages",
          "9: # are supported. The target system will try to be detected, but if it cannot,",
          "10: # PACKAGE_SYSTEM can be passed as an environment variable with either rpm or",
          "11: # deb.",
          "12: set -eu",
          "14: log() {",
          "15:   echo \"$@\" >&2",
          "16: }",
          "18: fatal() {",
          "19:   log \"$@\"",
          "20:   exit 1",
          "21: }",
          "23: #",
          "24: # REQUIRED environment variables.",
          "25: #",
          "26: GCLOUD_STACK_ID=${GCLOUD_STACK_ID:=} # Stack ID where integrations are installed",
          "27: GCLOUD_API_KEY=${GCLOUD_API_KEY:=}   # API key to communicate to the integrations API",
          "29: [ -z \"$GCLOUD_STACK_ID\" ] && fatal \"Required environment variable \\$GCLOUD_STACK_ID not set.\"",
          "30: [ -z \"$GCLOUD_API_KEY\" ]  && fatal \"Required environment variable \\$GCLOUD_API_KEY not set.\"",
          "32: #",
          "33: # OPTIONAL environment variables.",
          "34: #",
          "36: # Package system to install the Agent with. If not empty, MUST be either rpm or",
          "37: # deb. If empty, the script will try to detect the host OS and the appropriate",
          "38: # package system to use.",
          "39: PACKAGE_SYSTEM=${PACKAGE_SYSTEM:=}",
          "41: #",
          "42: # Global constants.",
          "43: #",
          "44: RELEASE_VERSION=\"0.9.0\"",
          "46: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "47: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.x86_64.deb\"",
          "48: RPM_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.x86_64.rpm\"",
          "50: main() {",
          "51:   if [ -z \"$PACKAGE_SYSTEM\" ]; then",
          "52:     PACKAGE_SYSTEM=$(detect_package_system)",
          "53:   fi",
          "54:   log \"--- Using package system $PACKAGE_SYSTEM. Downloading and installing package\"",
          "56:   case \"$PACKAGE_SYSTEM\" in",
          "57:     deb)",
          "58:       install_deb",
          "59:       ;;",
          "60:     rpm)",
          "61:       install_rpm",
          "62:       ;;",
          "64:       fatal \"Unsupported PACKAGE_SYSTEM value $PACKAGE_SYSTEM. Must be either rpm or deb\".",
          "65:       ;;",
          "66:   esac",
          "68:   log '--- Retrieving config and placing in /etc/grafana-agent.yaml'",
          "69:   retrieve_config | sudo tee /etc/grafana-agent.yaml",
          "71:   log '--- Enabling and starting grafana-agent.service'",
          "72:   sudo systemctl enable grafana-agent.service",
          "73:   sudo systemctl start grafana-agent.service",
          "75:   # Add some empty newlines to give some visual whitespace before printing the",
          "76:   # success message.",
          "77:   log ''",
          "78:   log ''",
          "79:   log 'Grafana Cloud Agent is now running! To check the status of your Agent, run:'",
          "80:   log '   sudo systemctl status grafana-agent.service'",
          "81: }",
          "83: # detect_package_system tries to detect the host distribution to determine if",
          "84: # deb or rpm should be used for installing the Agent. Prints out either \"deb\"",
          "85: # or \"rpm\". Calls fatal if the host OS is not supported.",
          "86: detect_package_system() {",
          "87:   command -v dpkg >/dev/null 2>&1 && { echo \"deb\"; return; }",
          "88:   command -v rpm  >/dev/null 2>&1 && { echo \"rpm\"; return; }",
          "90:   case \"$(uname)\" in",
          "91:     Darwin)",
          "92:       fatal 'macOS not supported'",
          "93:       ;;",
          "95:       fatal \"Unknown unsupported OS: $(uname)\"",
          "96:       ;;",
          "97:   esac",
          "98: }",
          "100: # install_deb downloads and installs the deb package of the Grafana Cloud Agent.",
          "101: install_deb() {",
          "102:   curl -sL \"${DEB_URL}\" -o /tmp/grafana-agent.deb",
          "103:   sudo dpkg -i /tmp/grafana-agent.deb",
          "104:   rm /tmp/grafana-agent.deb",
          "105: }",
          "107: # install_rpm downloads and installs the deb package of the Grafana Cloud Agent.",
          "108: install_rpm() {",
          "109:   sudo rpm --reinstall \"${RPM_URL}\"",
          "110: }",
          "112: # retrieve_config downloads the config file for the Agent and prints out its",
          "113: # contents to stdout.",
          "114: retrieve_config() {",
          "115:   grafana-agentctl cloud-config -u \"${GCLOUD_STACK_ID}\" -p \"${GCLOUD_API_KEY}\" || fatal 'Failed to retrieve config'",
          "116: }",
          "118: main",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1e1396c38411b9416000ad30de24f4ce674d44a",
      "candidate_info": {
        "commit_hash": "f1e1396c38411b9416000ad30de24f4ce674d44a",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/f1e1396c38411b9416000ad30de24f4ce674d44a",
        "files": [
          "CHANGELOG.md",
          "production/grafanacloud-install.sh"
        ],
        "message": "Update grafana cloud install (#1883)\n\n* Update grafana cloud install\n\n* Update production/grafanacloud-install.sh\n\nCo-authored-by: Robert Fratto <robertfratto@gmail.com>\n\nCo-authored-by: Robert Fratto <robertfratto@gmail.com>",
        "before_after_code_files": [
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
          ],
          "candidate": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
          ]
        }
      },
      "candidate_diff": {
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"0.25.1\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"0.26.0-rc.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e92c569ac645408722d92b916d9f4972403a66e",
      "candidate_info": {
        "commit_hash": "4e92c569ac645408722d92b916d9f4972403a66e",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/4e92c569ac645408722d92b916d9f4972403a66e",
        "files": [
          "CHANGELOG.md",
          "docs/sources/configuration/integrations/node-exporter-config.md",
          "docs/sources/configuration/integrations/process-exporter-config.md",
          "docs/sources/operator/custom-resource-quickstart.md",
          "docs/sources/operator/getting-started.md",
          "docs/sources/set-up/install-agent-docker.md",
          "pkg/operator/defaults.go",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/build/templates/operator/main.jsonnet",
          "production/kubernetes/install-bare.sh",
          "production/operator/templates/agent-operator.yaml",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "prepare for v0.29.0 release (#2494)",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/build/templates/operator/main.jsonnet||production/kubernetes/build/templates/operator/main.jsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   \"v0.27.1\",",
          "33:   \"v0.28.0\",",
          "34:   \"v0.28.1\",",
          "37:  }",
          "",
          "[Removed Lines]",
          "35:   \"v0.29.0-rc.0\",",
          "",
          "[Added Lines]",
          "35:   \"v0.29.0\",",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: # The DEB and RPM urls don't include the `v` version prefix in the file names,",
          "56: # so we trim it out using ${RELEASE_VERSION#v} below.",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"v0.29.0-rc.0\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"v0.29.0\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.29.0-rc.0'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.29.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/build/templates/operator/main.jsonnet||production/kubernetes/build/templates/operator/main.jsonnet": [
          "File: production/kubernetes/build/templates/operator/main.jsonnet -> production/kubernetes/build/templates/operator/main.jsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   local this = self,",
          "25:   _images:: {",
          "28:     ksm: 'registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.5.0',",
          "29:   },",
          "",
          "[Removed Lines]",
          "26:     agent: 'grafana/agent:v0.29.0-rc.0',",
          "27:     agent_operator: 'grafana/agent-operator:v0.29.0-rc.0',",
          "",
          "[Added Lines]",
          "26:     agent: 'grafana/agent:v0.29.0',",
          "27:     agent_operator: 'grafana/agent-operator:v0.29.0',",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.29.0-rc.0",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.29.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.29.0-rc.0',",
          "19:     agentctl: 'grafana/agentctl:v0.29.0-rc.0',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.29.0',",
          "19:     agentctl: 'grafana/agentctl:v0.29.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.29.0-rc.0',",
          "15:     agentctl: 'grafana/agentctl:v0.29.0-rc.0',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.29.0',",
          "15:     agentctl: 'grafana/agentctl:v0.29.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.29.0-rc.0',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.29.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "585a36d1023ab1b9538cbcf28d93b5217e498b44",
      "candidate_info": {
        "commit_hash": "585a36d1023ab1b9538cbcf28d93b5217e498b44",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/585a36d1023ab1b9538cbcf28d93b5217e498b44",
        "files": [
          "CHANGELOG.md",
          "docs/configuration-reference.md",
          "docs/getting-started.md",
          "production/README.md",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-sigv4.yaml",
          "production/kubernetes/agent-tempo.yaml",
          "production/kubernetes/agent.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/kubernetes/install-loki.sh",
          "production/kubernetes/install-sigv4.sh",
          "production/kubernetes/install-tempo.sh",
          "production/kubernetes/install.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet"
        ],
        "message": "prepare for 0.12.0 release (#388)",
        "before_after_code_files": [
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/kubernetes/install-loki.sh||production/kubernetes/install-loki.sh",
          "production/kubernetes/install-sigv4.sh||production/kubernetes/install-sigv4.sh",
          "production/kubernetes/install-tempo.sh||production/kubernetes/install-tempo.sh",
          "production/kubernetes/install.sh||production/kubernetes/install.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet"
          ],
          "candidate": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #",
          "45: # Global constants.",
          "46: #",
          "49: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "50: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.amd64.deb\"",
          "",
          "[Removed Lines]",
          "47: RELEASE_VERSION=\"0.11.0\"",
          "",
          "[Added Lines]",
          "47: RELEASE_VERSION=\"0.12.0\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.11.0'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.12.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: check_installed curl",
          "18: check_installed envsubst",
          "21: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "22: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "20: MANIFEST_BRANCH=v0.11.0",
          "",
          "[Added Lines]",
          "20: MANIFEST_BRANCH=v0.12.0",
          "",
          "---------------"
        ],
        "production/kubernetes/install-loki.sh||production/kubernetes/install-loki.sh": [
          "File: production/kubernetes/install-loki.sh -> production/kubernetes/install-loki.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: check_installed curl",
          "32: check_installed envsubst",
          "35: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-loki.yaml}",
          "36: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "34: MANIFEST_BRANCH=v0.11.0",
          "",
          "[Added Lines]",
          "34: MANIFEST_BRANCH=v0.12.0",
          "",
          "---------------"
        ],
        "production/kubernetes/install-sigv4.sh||production/kubernetes/install-sigv4.sh": [
          "File: production/kubernetes/install-sigv4.sh -> production/kubernetes/install-sigv4.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: check_installed curl",
          "31: check_installed envsubst",
          "34: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-sigv4.yaml}",
          "35: NAMESPACE=${NAMESPACE:-default}",
          "36: ROLE_ARN=${ROLE_ARN:-}",
          "",
          "[Removed Lines]",
          "33: MANIFEST_BRANCH=v0.11.0",
          "",
          "[Added Lines]",
          "33: MANIFEST_BRANCH=v0.12.0",
          "",
          "---------------"
        ],
        "production/kubernetes/install-tempo.sh||production/kubernetes/install-tempo.sh": [
          "File: production/kubernetes/install-tempo.sh -> production/kubernetes/install-tempo.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: check_installed curl",
          "32: check_installed envsubst",
          "35: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-tempo.yaml}",
          "36: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "34: MANIFEST_BRANCH=v0.11.0",
          "",
          "[Added Lines]",
          "34: MANIFEST_BRANCH=v0.12.0",
          "",
          "---------------"
        ],
        "production/kubernetes/install.sh||production/kubernetes/install.sh": [
          "File: production/kubernetes/install.sh -> production/kubernetes/install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: check_installed curl",
          "33: check_installed envsubst",
          "36: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent.yaml}",
          "37: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "35: MANIFEST_BRANCH=v0.11.0",
          "",
          "[Added Lines]",
          "35: MANIFEST_BRANCH=v0.12.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/tempo.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.11.0',",
          "19:     agentctl: 'grafana/agentctl:v0.11.0',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.12.0',",
          "19:     agentctl: 'grafana/agentctl:v0.12.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "997675b53a8e1685ee34f00a6dcc18e8ffa852f8",
      "candidate_info": {
        "commit_hash": "997675b53a8e1685ee34f00a6dcc18e8ffa852f8",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/997675b53a8e1685ee34f00a6dcc18e8ffa852f8",
        "files": [
          ".drone/drone.yml",
          ".gitignore",
          "CHANGELOG.md",
          "Makefile",
          "cmd/agent-operator/Dockerfile.buildx",
          "cmd/agent/Dockerfile.buildx",
          "cmd/agentctl/Dockerfile.buildx",
          "docs/upgrade-guide.md",
          "production/grafanacloud-install.sh"
        ],
        "message": "Merge release v0.18.0 (#787)\n\n* Initialize biggest ref to existing ref when reading a segment (#676)\n\n* initialize biggest ref to existing ref when reading a segment\n\n* changelog\n\n* allow new test to be less hard-coded\n\n* explain error if test fails\n\n* clarify changelog issue\n\n* prepare for v0.16.1 release (#679)\n\n* adding docker-compose example for local testing\n\n(cherry picked from commit 992e3cf26362dc55c28d035bb512d44163370ebd)\n\n* Cherry picking kafka importer\n\n* update Operator FAQ to describe custom scrape jobs (#658)\n\n* Merge\n\n* merge for race condition\n\n* Wall cherry pick\n\n* Import Kafka\n\n* Bump version number to v0.17.0\n\n* Initial release of v0.18.0 includes github_exporter, enabled flag issue, OTLP HTPP, and updated postgres exporter\n\n* Tempo/traces docs fixes for v0.18.0 (#784)\n\n* Needs to be loki for the naming change\n\n* Update date\n\n* No change, just trying to trigger drone\n\n* Fix for drone naming\n\n* Changes that needed to me imported for drone to work.\n\n* Update drone issues\n\n* sign drone\n\n* Drone changes\n\n* Update operator\n\n* standardize on seego\n\n* Test tag\n\n* fix tag\n\n* updated makefile\n\n* release tag fixing\n\n* remove extra tag\n\n* Readd missing upgrade info\n\n* Restructure based on new doc format\n\n* Small tweaks\n\n* Merge issues and naming\n\n* Change some minor formatting\n\n* Change some minor formatting\n\nCo-authored-by: Robert Fratto <robert.fratto@grafana.com>\nCo-authored-by: Gabriel <g.amaral.antunes@gmail.com>\nCo-authored-by: Mario <mariorvinas@gmail.com>",
        "before_after_code_files": [
          "cmd/agent-operator/Dockerfile.buildx||cmd/agent-operator/Dockerfile.buildx",
          "cmd/agent/Dockerfile.buildx||cmd/agent/Dockerfile.buildx",
          "cmd/agentctl/Dockerfile.buildx||cmd/agentctl/Dockerfile.buildx",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
          ],
          "candidate": [
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh"
          ]
        }
      },
      "candidate_diff": {
        "cmd/agent-operator/Dockerfile.buildx||cmd/agent-operator/Dockerfile.buildx": [
          "File: cmd/agent-operator/Dockerfile.buildx -> cmd/agent-operator/Dockerfile.buildx",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: ARG TARGETPLATFORM",
          "3: ARG BUILDPLATFORM",
          "",
          "[Removed Lines]",
          "1: FROM --platform=$BUILDPLATFORM golang:1.16-buster as build",
          "",
          "[Added Lines]",
          "1: FROM --platform=$BUILDPLATFORM rfratto/seego:latest as build",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: ARG RELEASE_BUILD=true",
          "8: ARG IMAGE_TAG",
          "12: FROM debian:buster-slim",
          "",
          "[Removed Lines]",
          "10: RUN make clean && make IMAGE_TAG=${IMAGE_TAG} RELEASE_BUILD=${RELEASE_BUILD} BUILD_IN_CONTAINER=false agent-operator",
          "",
          "[Added Lines]",
          "10: RUN make clean && make IMAGE_TAG=${IMAGE_TAG} RELEASE_BUILD=${RELEASE_BUILD} BUILD_IN_CONTAINER=false DRONE=true agent-operator",
          "",
          "---------------"
        ],
        "cmd/agent/Dockerfile.buildx||cmd/agent/Dockerfile.buildx": [
          "File: cmd/agent/Dockerfile.buildx -> cmd/agent/Dockerfile.buildx",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: ARG RELEASE_BUILD=true",
          "18: ARG IMAGE_TAG",
          "22: FROM debian:buster-slim",
          "",
          "[Removed Lines]",
          "20: RUN make clean && IMAGE_TAG=${IMAGE_TAG} RELEASE_BUILD=${RELEASE_BUILD} BUILD_IN_CONTAINER=false make agent",
          "",
          "[Added Lines]",
          "20: RUN make clean && IMAGE_TAG=${IMAGE_TAG} RELEASE_BUILD=${RELEASE_BUILD} BUILD_IN_CONTAINER=false DRONE=true make agent",
          "",
          "---------------"
        ],
        "cmd/agentctl/Dockerfile.buildx||cmd/agentctl/Dockerfile.buildx": [
          "File: cmd/agentctl/Dockerfile.buildx -> cmd/agentctl/Dockerfile.buildx",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: ARG IMAGE_TAG",
          "20: # Makefile.",
          "23: FROM debian:buster-slim",
          "",
          "[Removed Lines]",
          "21: RUN make clean && IMAGE_TAG=${IMAGE_TAG} RELEASE_BUILD=${RELEASE_BUILD} BUILD_IN_CONTAINER=false make agentctl",
          "",
          "[Added Lines]",
          "21: RUN make clean && IMAGE_TAG=${IMAGE_TAG} RELEASE_BUILD=${RELEASE_BUILD} BUILD_IN_CONTAINER=false DRONE=true make agentctl",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #",
          "48: # Global constants.",
          "49: #",
          "52: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "53: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
          "",
          "[Removed Lines]",
          "50: RELEASE_VERSION=\"0.15.0\"",
          "",
          "[Added Lines]",
          "50: RELEASE_VERSION=\"0.18.0\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}