{
  "cve_id": "CVE-2020-2254",
  "cve_desc": "Jenkins Blue Ocean Plugin 1.23.2 and earlier provides an undocumented feature flag that, when enabled, allows an attacker with Job/Configure or Job/Create permission to read arbitrary files on the Jenkins controller file system.",
  "repo": "jenkinsci/blueocean-plugin",
  "patch_hash": "f0dd4b68d62ac3c3c85012d6eb0c92bcebf85e12",
  "patch_info": {
    "commit_hash": "f0dd4b68d62ac3c3c85012d6eb0c92bcebf85e12",
    "repo": "jenkinsci/blueocean-plugin",
    "commit_url": "https://github.com/jenkinsci/blueocean-plugin/commit/f0dd4b68d62ac3c3c85012d6eb0c92bcebf85e12",
    "files": [
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
      "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
    ],
    "message": "[SECURITY-1956] remove this undocumented feature which has security issue\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
    "before_after_code_files": [
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
      "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
      "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
    ]
  },
  "patch_diff": {
    "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java": [
      "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package io.jenkins.blueocean.blueocean_git_pipeline;",
      "26: import com.cloudbees.plugins.credentials.common.StandardCredentials;",
      "27: import hudson.model.User;",
      "28: import hudson.tasks.MailAddressResolver;",
      "29: import io.jenkins.blueocean.commons.ServiceException;",
      "31: import java.io.IOException;",
      "32: import java.util.Date;",
      "33: import java.util.TimeZone;",
      "34: import java.util.logging.Level;",
      "36: import jenkins.plugins.git.AbstractGitSCMSource;",
      "37: import jenkins.plugins.git.GitSCMFileSystem;",
      "38: import org.eclipse.jgit.lib.ObjectId;",
      "39: import org.eclipse.jgit.lib.RefUpdate;",
      "40: import org.eclipse.jgit.lib.Repository;",
      "48:     private static final String LOCAL_REF_BASE = \"refs/remotes/origin/\";",
      "49:     private static final String REMOTE_REF_BASE = \"refs/heads/\";",
      "51:     GitBareRepoReadSaveRequest(AbstractGitSCMSource gitSource, String branch, String commitMessage, String sourceBranch, String filePath, byte[] contents) {",
      "52:         super(gitSource, branch, commitMessage, sourceBranch, filePath, contents);",
      "53:     }",
      "55:     @Override",
      "",
      "[Removed Lines]",
      "47: class GitBareRepoReadSaveRequest extends GitCacheCloneReadSaveRequest {",
      "",
      "[Added Lines]",
      "27: import hudson.EnvVars;",
      "28: import hudson.model.TaskListener;",
      "30: import hudson.plugins.git.GitException;",
      "31: import hudson.plugins.git.GitTool;",
      "32: import hudson.remoting.VirtualChannel;",
      "34: import hudson.util.LogTaskListener;",
      "37: import java.io.File;",
      "39: import java.nio.file.Files;",
      "43: import java.util.logging.Logger;",
      "45: import jenkins.model.Jenkins;",
      "48: import jenkins.plugins.git.traits.GitToolSCMSourceTrait;",
      "49: import jenkins.scm.api.SCMFileSystem;",
      "50: import jenkins.scm.api.SCMHead;",
      "51: import jenkins.scm.api.trait.SCMSourceTrait;",
      "52: import org.apache.commons.io.FileUtils;",
      "56: import org.jenkinsci.plugins.gitclient.GitClient;",
      "57: import org.jenkinsci.plugins.gitclient.RepositoryCallback;",
      "64: class GitBareRepoReadSaveRequest extends GitReadSaveRequest {",
      "68:     private final File repositoryPath;",
      "69:     private final GitTool gitTool;",
      "73:         GitTool.DescriptorImpl toolDesc = Jenkins.get().getDescriptorByType( GitTool.DescriptorImpl.class);",
      "74:         @SuppressWarnings(\"deprecation\")",
      "75:         GitTool foundGitTool = null;",
      "76:         if (gitSource != null) {",
      "77:             for ( SCMSourceTrait trait : gitSource.getTraits()) {",
      "78:                 if (trait instanceof GitToolSCMSourceTrait ) {",
      "79:                     foundGitTool = toolDesc.getInstallation(((GitToolSCMSourceTrait) trait).getGitTool());",
      "80:                 }",
      "81:             }",
      "82:         }",
      "84:         if (foundGitTool == null) {",
      "85:             foundGitTool = GitTool.getDefaultInstallation();",
      "86:         }",
      "88:         this.gitTool = foundGitTool;",
      "89:         try {",
      "90:             repositoryPath = Files.createTempDirectory( \"git\").toFile();",
      "91:         } catch (IOException e) {",
      "92:             throw new ServiceException.UnexpectedErrorException(\"Unable to create working directory for repository clone\");",
      "93:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:             }",
      "112:         });",
      "113:     }",
      "114: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:     <T> T invokeOnScm(final GitSCMFileSystem.FSFunction<T> function) throws IOException {",
      "157:         try {",
      "158:             GitSCMFileSystem fs = getFilesystem();",
      "159:             if (fs == null) {",
      "161:                 GitClient git = cloneRepo();",
      "162:                 try {",
      "163:                     return git.withRepository(new RepositoryCallbackToFSFunctionAdapter<>( function));",
      "164:                 } finally {",
      "165:                     cleanupRepo();",
      "166:                 }",
      "167:             }",
      "168:             return fs.invoke(function);",
      "169:         } catch (InterruptedException ex) {",
      "170:             throw new ServiceException.UnexpectedErrorException(\"Unable to save \" + filePath, ex);",
      "171:         }",
      "172:     }",
      "174:     private GitSCMFileSystem getFilesystem() throws IOException, InterruptedException {",
      "175:         try {",
      "176:             return (GitSCMFileSystem) SCMFileSystem.of( gitSource, new SCMHead( sourceBranch));",
      "177:         } catch(NullPointerException e) {",
      "180:             return null;",
      "181:         } catch( GitException e) {",
      "183:             if (e.getMessage().contains(\"Permission denied\")) {",
      "184:                 throw new ServiceException.UnauthorizedException(\"Not authorized\", e);",
      "185:             }",
      "186:             throw e;",
      "187:         }",
      "188:     }",
      "190:     GitClient cloneRepo() throws InterruptedException, IOException {",
      "191:         EnvVars environment = new EnvVars();",
      "192:         TaskListener taskListener = new LogTaskListener( Logger.getAnonymousLogger(), Level.ALL);",
      "193:         String gitExe = gitTool.getGitExe();",
      "194:         GitClient git = org.jenkinsci.plugins.gitclient.Git.with( taskListener, environment)",
      "195:             .in(repositoryPath)",
      "196:             .using(gitExe)",
      "197:             .getClient();",
      "199:         git.addCredentials(gitSource.getRemote(), getCredential());",
      "201:         try {",
      "202:             git.clone(gitSource.getRemote(), \"origin\", true, null);",
      "204:             log.fine(\"Repository \" + gitSource.getRemote() + \" cloned to: \" + repositoryPath.getCanonicalPath());",
      "205:         } catch(GitException e) {",
      "207:             boolean isEmptyRepo = false;",
      "208:             try {",
      "209:                 if (git.getRemoteReferences(gitSource.getRemote(), null, true, false).isEmpty()) {",
      "210:                     isEmptyRepo = true;",
      "211:                 }",
      "212:             } catch(GitException ge) {",
      "214:                 if (\"unexpected ls-remote output \".equals(ge.getMessage())) { // blank line, command succeeded",
      "215:                     isEmptyRepo = true;",
      "216:                 }",
      "218:             }",
      "220:             if(isEmptyRepo) {",
      "221:                 git.init();",
      "222:                 git.addRemoteUrl(\"origin\", gitSource.getRemote());",
      "224:                 log.fine(\"Repository \" + gitSource.getRemote() + \" not found, created new to: \" + repositoryPath.getCanonicalPath());",
      "225:             } else {",
      "226:                 throw e;",
      "227:             }",
      "228:         }",
      "230:         return git;",
      "231:     }",
      "233:     void cleanupRepo() {",
      "234:         try {",
      "235:             FileUtils.deleteDirectory( repositoryPath);",
      "236:         } catch (IOException e) {",
      "237:             throw new RuntimeException(e);",
      "238:         }",
      "239:     }",
      "241:     static class RepositoryCallbackToFSFunctionAdapter<T> implements RepositoryCallback<T>",
      "242:     {",
      "243:         private final GitSCMFileSystem.FSFunction<T> function;",
      "245:         public RepositoryCallbackToFSFunctionAdapter(GitSCMFileSystem.FSFunction<T> function) {",
      "246:             this.function = function;",
      "247:         }",
      "249:         @Override",
      "250:         public T invoke(Repository repo, VirtualChannel channel) throws IOException, InterruptedException {",
      "251:             return function.invoke(repo);",
      "252:         }",
      "253:     }",
      "",
      "---------------"
    ],
    "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java": [
      "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java": [
      "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java": [
      "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package io.jenkins.blueocean.blueocean_git_pipeline;",
      "26: import com.cloudbees.plugins.credentials.common.StandardCredentials;",
      "28: import hudson.model.User;",
      "29: import io.jenkins.blueocean.commons.ServiceException;",
      "30: import io.jenkins.blueocean.credential.CredentialsUtils;",
      "",
      "[Removed Lines]",
      "27: import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java": [
      "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: import io.jenkins.blueocean.rest.impl.pipeline.scm.GitContent;",
      "37: import java.io.IOException;",
      "38: import javax.annotation.Nonnull;",
      "40: import jenkins.branch.MultiBranchProject;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45: import org.apache.commons.lang.StringUtils;",
      "46: import org.apache.commons.lang3.ObjectUtils;",
      "47: import org.kohsuke.stapler.StaplerRequest;",
      "52: @Extension",
      "53: public class GitReadSaveService extends ScmContentProvider {",
      "54:     @Nonnull",
      "55:     private static ReadSaveType TYPE = ReadSaveType.DEFAULT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: import org.slf4j.Logger;",
      "50: import org.slf4j.LoggerFactory;",
      "58:     private static final Logger logger = LoggerFactory.getLogger(GitReadSaveService.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "67:         static ReadSaveType get(String type) {",
      "68:             if (type != null) {",
      "70:             }",
      "72:         }",
      "73:     }",
      "",
      "[Removed Lines]",
      "69:                 return ReadSaveType.valueOf(type.toUpperCase());",
      "71:             return DEFAULT == null ? ReadSaveType.CACHE_BARE : DEFAULT;",
      "",
      "[Added Lines]",
      "74:                 ReadSaveType readSaveType = ReadSaveType.valueOf(type.toUpperCase(Locale.ENGLISH));",
      "75:                 if(readSaveType != CACHE_BARE){",
      "76:                     logger.warn( \"CLONE/CACHE_CLONE options are not supported anymore. Using default option CACHE_BARE instead.\" );",
      "77:                 }",
      "79:             return DEFAULT == null ? CACHE_BARE : DEFAULT;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             }",
      "110:         }",
      "141:     }",
      "143:     private GitReadSaveRequest makeSaveRequest(Item item, StaplerRequest req) {",
      "",
      "[Removed Lines]",
      "112:         switch (TYPE) {",
      "113:             case CLONE:",
      "114:                 return new GitCloneReadSaveRequest(",
      "115:                     gitSource,",
      "116:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
      "117:                     commitMessage,",
      "118:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
      "119:                     filePath,",
      "120:                     contents",
      "121:                 );",
      "122:             case CACHE_CLONE:",
      "123:                 return new GitCacheCloneReadSaveRequest(",
      "124:                     gitSource,",
      "125:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
      "126:                     commitMessage,",
      "127:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
      "128:                     filePath,",
      "129:                     contents",
      "130:                 );",
      "131:             default:",
      "132:                 return new GitBareRepoReadSaveRequest(",
      "133:                     gitSource,",
      "134:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
      "135:                     commitMessage,",
      "136:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
      "137:                     filePath,",
      "138:                     contents",
      "139:                 );",
      "140:         }",
      "",
      "[Added Lines]",
      "120:         return new GitBareRepoReadSaveRequest(",
      "121:             gitSource,",
      "122:             StringUtils.defaultIfEmpty(branch, defaultBranch),",
      "123:             commitMessage,",
      "124:             StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
      "125:             filePath,",
      "126:             contents",
      "127:         );",
      "",
      "---------------"
    ],
    "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java": [
      "File: blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java -> blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:     @Test",
      "192:     public void testRepositoryCallbackToFSFunctionAdapter() throws IOException, InterruptedException {",
      "193:         final boolean[] called = { false };",
      "195:             @Override",
      "196:             public Object invoke(Repository repository) throws IOException, InterruptedException {",
      "197:                 called[0] = true;",
      "",
      "[Removed Lines]",
      "194:         new GitCacheCloneReadSaveRequest.RepositoryCallbackToFSFunctionAdapter<>(new GitSCMFileSystem.FSFunction<Object>() {",
      "",
      "[Added Lines]",
      "194:         new GitBareRepoReadSaveRequest.RepositoryCallbackToFSFunctionAdapter<>(new GitSCMFileSystem.FSFunction<Object>() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "201:         Assert.assertTrue(called[0]);",
      "202:     }",
      "216:     @Test",
      "217:     public void testBareRepoReadWrite() throws Exception {",
      "218:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_BARE, repoWithJenkinsfiles, masterPipelineScript);",
      "",
      "[Removed Lines]",
      "204:     @Test",
      "205:     public void testGitCloneReadWrite() throws Exception {",
      "206:         testGitReadWrite(GitReadSaveService.ReadSaveType.CLONE, repoWithJenkinsfiles, masterPipelineScript);",
      "207:         testGitReadWrite(GitReadSaveService.ReadSaveType.CLONE, repoNoJenkinsfile, null);",
      "208:     }",
      "210:     @Test",
      "211:     public void testGitCacheCloneReadWrite() throws Exception {",
      "212:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_CLONE, repoWithJenkinsfiles, masterPipelineScript);",
      "213:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_CLONE, repoNoJenkinsfile, null);",
      "214:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5a6ab76cf6f85f6d476d1960c42414011dcd920",
      "candidate_info": {
        "commit_hash": "e5a6ab76cf6f85f6d476d1960c42414011dcd920",
        "repo": "jenkinsci/blueocean-plugin",
        "commit_url": "https://github.com/jenkinsci/blueocean-plugin/commit/e5a6ab76cf6f85f6d476d1960c42414011dcd920",
        "files": [
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
          "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
        ],
        "message": "[SECURITY-1956] remove this undocumented feature which has security issue\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
        "before_after_code_files": [
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
          "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
            "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
          ],
          "candidate": [
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
            "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
          ]
        }
      },
      "candidate_diff": {
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package io.jenkins.blueocean.blueocean_git_pipeline;",
          "26: import com.cloudbees.plugins.credentials.common.StandardCredentials;",
          "27: import hudson.model.User;",
          "28: import hudson.tasks.MailAddressResolver;",
          "29: import io.jenkins.blueocean.commons.ServiceException;",
          "31: import java.io.IOException;",
          "32: import java.util.Date;",
          "33: import java.util.TimeZone;",
          "34: import java.util.logging.Level;",
          "36: import jenkins.plugins.git.AbstractGitSCMSource;",
          "37: import jenkins.plugins.git.GitSCMFileSystem;",
          "38: import org.eclipse.jgit.lib.ObjectId;",
          "39: import org.eclipse.jgit.lib.RefUpdate;",
          "40: import org.eclipse.jgit.lib.Repository;",
          "48:     private static final String LOCAL_REF_BASE = \"refs/remotes/origin/\";",
          "49:     private static final String REMOTE_REF_BASE = \"refs/heads/\";",
          "51:     GitBareRepoReadSaveRequest(AbstractGitSCMSource gitSource, String branch, String commitMessage, String sourceBranch, String filePath, byte[] contents) {",
          "52:         super(gitSource, branch, commitMessage, sourceBranch, filePath, contents);",
          "53:     }",
          "55:     @Override",
          "",
          "[Removed Lines]",
          "47: class GitBareRepoReadSaveRequest extends GitCacheCloneReadSaveRequest {",
          "",
          "[Added Lines]",
          "27: import hudson.EnvVars;",
          "28: import hudson.model.TaskListener;",
          "30: import hudson.plugins.git.GitException;",
          "31: import hudson.plugins.git.GitTool;",
          "32: import hudson.remoting.VirtualChannel;",
          "34: import hudson.util.LogTaskListener;",
          "37: import java.io.File;",
          "39: import java.nio.file.Files;",
          "43: import java.util.logging.Logger;",
          "45: import jenkins.model.Jenkins;",
          "48: import jenkins.plugins.git.traits.GitToolSCMSourceTrait;",
          "49: import jenkins.scm.api.SCMFileSystem;",
          "50: import jenkins.scm.api.SCMHead;",
          "51: import jenkins.scm.api.trait.SCMSourceTrait;",
          "52: import org.apache.commons.io.FileUtils;",
          "56: import org.jenkinsci.plugins.gitclient.GitClient;",
          "57: import org.jenkinsci.plugins.gitclient.RepositoryCallback;",
          "64: class GitBareRepoReadSaveRequest extends GitReadSaveRequest {",
          "68:     private final File repositoryPath;",
          "69:     private final GitTool gitTool;",
          "73:         GitTool.DescriptorImpl toolDesc = Jenkins.get().getDescriptorByType( GitTool.DescriptorImpl.class);",
          "74:         @SuppressWarnings(\"deprecation\")",
          "75:         GitTool foundGitTool = null;",
          "76:         if (gitSource != null) {",
          "77:             for ( SCMSourceTrait trait : gitSource.getTraits()) {",
          "78:                 if (trait instanceof GitToolSCMSourceTrait ) {",
          "79:                     foundGitTool = toolDesc.getInstallation(((GitToolSCMSourceTrait) trait).getGitTool());",
          "80:                 }",
          "81:             }",
          "82:         }",
          "84:         if (foundGitTool == null) {",
          "85:             foundGitTool = GitTool.getDefaultInstallation();",
          "86:         }",
          "88:         this.gitTool = foundGitTool;",
          "89:         try {",
          "90:             repositoryPath = Files.createTempDirectory( \"git\").toFile();",
          "91:         } catch (IOException e) {",
          "92:             throw new ServiceException.UnexpectedErrorException(\"Unable to create working directory for repository clone\");",
          "93:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:             }",
          "112:         });",
          "113:     }",
          "114: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:     <T> T invokeOnScm(final GitSCMFileSystem.FSFunction<T> function) throws IOException {",
          "157:         try {",
          "158:             GitSCMFileSystem fs = getFilesystem();",
          "159:             if (fs == null) {",
          "161:                 GitClient git = cloneRepo();",
          "162:                 try {",
          "163:                     return git.withRepository(new RepositoryCallbackToFSFunctionAdapter<>( function));",
          "164:                 } finally {",
          "165:                     cleanupRepo();",
          "166:                 }",
          "167:             }",
          "168:             return fs.invoke(function);",
          "169:         } catch (InterruptedException ex) {",
          "170:             throw new ServiceException.UnexpectedErrorException(\"Unable to save \" + filePath, ex);",
          "171:         }",
          "172:     }",
          "174:     private GitSCMFileSystem getFilesystem() throws IOException, InterruptedException {",
          "175:         try {",
          "176:             return (GitSCMFileSystem) SCMFileSystem.of( gitSource, new SCMHead( sourceBranch));",
          "177:         } catch(NullPointerException e) {",
          "180:             return null;",
          "181:         } catch( GitException e) {",
          "183:             if (e.getMessage().contains(\"Permission denied\")) {",
          "184:                 throw new ServiceException.UnauthorizedException(\"Not authorized\", e);",
          "185:             }",
          "186:             throw e;",
          "187:         }",
          "188:     }",
          "190:     GitClient cloneRepo() throws InterruptedException, IOException {",
          "191:         EnvVars environment = new EnvVars();",
          "192:         TaskListener taskListener = new LogTaskListener( Logger.getAnonymousLogger(), Level.ALL);",
          "193:         String gitExe = gitTool.getGitExe();",
          "194:         GitClient git = org.jenkinsci.plugins.gitclient.Git.with( taskListener, environment)",
          "195:             .in(repositoryPath)",
          "196:             .using(gitExe)",
          "197:             .getClient();",
          "199:         git.addCredentials(gitSource.getRemote(), getCredential());",
          "201:         try {",
          "202:             git.clone(gitSource.getRemote(), \"origin\", true, null);",
          "204:             log.fine(\"Repository \" + gitSource.getRemote() + \" cloned to: \" + repositoryPath.getCanonicalPath());",
          "205:         } catch(GitException e) {",
          "207:             boolean isEmptyRepo = false;",
          "208:             try {",
          "209:                 if (git.getRemoteReferences(gitSource.getRemote(), null, true, false).isEmpty()) {",
          "210:                     isEmptyRepo = true;",
          "211:                 }",
          "212:             } catch(GitException ge) {",
          "214:                 if (\"unexpected ls-remote output \".equals(ge.getMessage())) { // blank line, command succeeded",
          "215:                     isEmptyRepo = true;",
          "216:                 }",
          "218:             }",
          "220:             if(isEmptyRepo) {",
          "221:                 git.init();",
          "222:                 git.addRemoteUrl(\"origin\", gitSource.getRemote());",
          "224:                 log.fine(\"Repository \" + gitSource.getRemote() + \" not found, created new to: \" + repositoryPath.getCanonicalPath());",
          "225:             } else {",
          "226:                 throw e;",
          "227:             }",
          "228:         }",
          "230:         return git;",
          "231:     }",
          "233:     void cleanupRepo() {",
          "234:         try {",
          "235:             FileUtils.deleteDirectory( repositoryPath);",
          "236:         } catch (IOException e) {",
          "237:             throw new RuntimeException(e);",
          "238:         }",
          "239:     }",
          "241:     static class RepositoryCallbackToFSFunctionAdapter<T> implements RepositoryCallback<T>",
          "242:     {",
          "243:         private final GitSCMFileSystem.FSFunction<T> function;",
          "245:         public RepositoryCallbackToFSFunctionAdapter(GitSCMFileSystem.FSFunction<T> function) {",
          "246:             this.function = function;",
          "247:         }",
          "249:         @Override",
          "250:         public T invoke(Repository repo, VirtualChannel channel) throws IOException, InterruptedException {",
          "251:             return function.invoke(repo);",
          "252:         }",
          "253:     }",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package io.jenkins.blueocean.blueocean_git_pipeline;",
          "26: import com.cloudbees.plugins.credentials.common.StandardCredentials;",
          "28: import hudson.model.User;",
          "29: import io.jenkins.blueocean.commons.ServiceException;",
          "30: import io.jenkins.blueocean.credential.CredentialsUtils;",
          "",
          "[Removed Lines]",
          "27: import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import io.jenkins.blueocean.rest.impl.pipeline.scm.GitContent;",
          "37: import java.io.IOException;",
          "38: import javax.annotation.Nonnull;",
          "40: import jenkins.branch.MultiBranchProject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import org.apache.commons.lang.StringUtils;",
          "46: import org.apache.commons.lang3.ObjectUtils;",
          "47: import org.kohsuke.stapler.StaplerRequest;",
          "52: @Extension",
          "53: public class GitReadSaveService extends ScmContentProvider {",
          "54:     @Nonnull",
          "55:     private static ReadSaveType TYPE = ReadSaveType.DEFAULT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.slf4j.Logger;",
          "50: import org.slf4j.LoggerFactory;",
          "58:     private static final Logger logger = LoggerFactory.getLogger(GitReadSaveService.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         static ReadSaveType get(String type) {",
          "68:             if (type != null) {",
          "70:             }",
          "72:         }",
          "73:     }",
          "",
          "[Removed Lines]",
          "69:                 return ReadSaveType.valueOf(type.toUpperCase());",
          "71:             return DEFAULT == null ? ReadSaveType.CACHE_BARE : DEFAULT;",
          "",
          "[Added Lines]",
          "74:                 ReadSaveType readSaveType = ReadSaveType.valueOf(type.toUpperCase(Locale.ENGLISH));",
          "75:                 if(readSaveType != CACHE_BARE){",
          "76:                     logger.warn( \"CLONE/CACHE_CLONE options are not supported anymore. Using default option CACHE_BARE instead.\" );",
          "77:                 }",
          "79:             return DEFAULT == null ? CACHE_BARE : DEFAULT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:             }",
          "110:         }",
          "141:     }",
          "143:     private GitReadSaveRequest makeSaveRequest(Item item, StaplerRequest req) {",
          "",
          "[Removed Lines]",
          "112:         switch (TYPE) {",
          "113:             case CLONE:",
          "114:                 return new GitCloneReadSaveRequest(",
          "115:                     gitSource,",
          "116:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "117:                     commitMessage,",
          "118:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "119:                     filePath,",
          "120:                     contents",
          "121:                 );",
          "122:             case CACHE_CLONE:",
          "123:                 return new GitCacheCloneReadSaveRequest(",
          "124:                     gitSource,",
          "125:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "126:                     commitMessage,",
          "127:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "128:                     filePath,",
          "129:                     contents",
          "130:                 );",
          "131:             default:",
          "132:                 return new GitBareRepoReadSaveRequest(",
          "133:                     gitSource,",
          "134:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "135:                     commitMessage,",
          "136:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "137:                     filePath,",
          "138:                     contents",
          "139:                 );",
          "140:         }",
          "",
          "[Added Lines]",
          "120:         return new GitBareRepoReadSaveRequest(",
          "121:             gitSource,",
          "122:             StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "123:             commitMessage,",
          "124:             StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "125:             filePath,",
          "126:             contents",
          "127:         );",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java": [
          "File: blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java -> blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     @Test",
          "192:     public void testRepositoryCallbackToFSFunctionAdapter() throws IOException, InterruptedException {",
          "193:         final boolean[] called = { false };",
          "195:             @Override",
          "196:             public Object invoke(Repository repository) throws IOException, InterruptedException {",
          "197:                 called[0] = true;",
          "",
          "[Removed Lines]",
          "194:         new GitCacheCloneReadSaveRequest.RepositoryCallbackToFSFunctionAdapter<>(new GitSCMFileSystem.FSFunction<Object>() {",
          "",
          "[Added Lines]",
          "194:         new GitBareRepoReadSaveRequest.RepositoryCallbackToFSFunctionAdapter<>(new GitSCMFileSystem.FSFunction<Object>() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:         Assert.assertTrue(called[0]);",
          "202:     }",
          "216:     @Test",
          "217:     public void testBareRepoReadWrite() throws Exception {",
          "218:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_BARE, repoWithJenkinsfiles, masterPipelineScript);",
          "",
          "[Removed Lines]",
          "204:     @Test",
          "205:     public void testGitCloneReadWrite() throws Exception {",
          "206:         testGitReadWrite(GitReadSaveService.ReadSaveType.CLONE, repoWithJenkinsfiles, masterPipelineScript);",
          "207:         testGitReadWrite(GitReadSaveService.ReadSaveType.CLONE, repoNoJenkinsfile, null);",
          "208:     }",
          "210:     @Test",
          "211:     public void testGitCacheCloneReadWrite() throws Exception {",
          "212:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_CLONE, repoWithJenkinsfiles, masterPipelineScript);",
          "213:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_CLONE, repoNoJenkinsfile, null);",
          "214:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd953d56521607bd856db5e2be20ddd0a955847e",
      "candidate_info": {
        "commit_hash": "bd953d56521607bd856db5e2be20ddd0a955847e",
        "repo": "jenkinsci/blueocean-plugin",
        "commit_url": "https://github.com/jenkinsci/blueocean-plugin/commit/bd953d56521607bd856db5e2be20ddd0a955847e",
        "files": [
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
          "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
        ],
        "message": "[SECURITY-1956] remove this undocumented feature which has security issue\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
        "before_after_code_files": [
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
          "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
          "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
            "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
          ],
          "candidate": [
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
            "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
            "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java"
          ]
        }
      },
      "candidate_diff": {
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitBareRepoReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package io.jenkins.blueocean.blueocean_git_pipeline;",
          "26: import com.cloudbees.plugins.credentials.common.StandardCredentials;",
          "27: import hudson.model.User;",
          "28: import hudson.tasks.MailAddressResolver;",
          "29: import io.jenkins.blueocean.commons.ServiceException;",
          "31: import java.io.IOException;",
          "32: import java.util.Date;",
          "33: import java.util.TimeZone;",
          "34: import java.util.logging.Level;",
          "36: import jenkins.plugins.git.AbstractGitSCMSource;",
          "37: import jenkins.plugins.git.GitSCMFileSystem;",
          "38: import org.eclipse.jgit.lib.ObjectId;",
          "39: import org.eclipse.jgit.lib.RefUpdate;",
          "40: import org.eclipse.jgit.lib.Repository;",
          "48:     private static final String LOCAL_REF_BASE = \"refs/remotes/origin/\";",
          "49:     private static final String REMOTE_REF_BASE = \"refs/heads/\";",
          "51:     GitBareRepoReadSaveRequest(AbstractGitSCMSource gitSource, String branch, String commitMessage, String sourceBranch, String filePath, byte[] contents) {",
          "52:         super(gitSource, branch, commitMessage, sourceBranch, filePath, contents);",
          "53:     }",
          "55:     @Override",
          "",
          "[Removed Lines]",
          "47: class GitBareRepoReadSaveRequest extends GitCacheCloneReadSaveRequest {",
          "",
          "[Added Lines]",
          "27: import hudson.EnvVars;",
          "28: import hudson.model.TaskListener;",
          "30: import hudson.plugins.git.GitException;",
          "31: import hudson.plugins.git.GitTool;",
          "32: import hudson.remoting.VirtualChannel;",
          "34: import hudson.util.LogTaskListener;",
          "37: import java.io.File;",
          "39: import java.nio.file.Files;",
          "43: import java.util.logging.Logger;",
          "45: import jenkins.model.Jenkins;",
          "48: import jenkins.plugins.git.traits.GitToolSCMSourceTrait;",
          "49: import jenkins.scm.api.SCMFileSystem;",
          "50: import jenkins.scm.api.SCMHead;",
          "51: import jenkins.scm.api.trait.SCMSourceTrait;",
          "52: import org.apache.commons.io.FileUtils;",
          "56: import org.jenkinsci.plugins.gitclient.GitClient;",
          "57: import org.jenkinsci.plugins.gitclient.RepositoryCallback;",
          "64: class GitBareRepoReadSaveRequest extends GitReadSaveRequest {",
          "68:     private final File repositoryPath;",
          "69:     private final GitTool gitTool;",
          "73:         GitTool.DescriptorImpl toolDesc = Jenkins.get().getDescriptorByType( GitTool.DescriptorImpl.class);",
          "74:         @SuppressWarnings(\"deprecation\")",
          "75:         GitTool foundGitTool = null;",
          "76:         if (gitSource != null) {",
          "77:             for ( SCMSourceTrait trait : gitSource.getTraits()) {",
          "78:                 if (trait instanceof GitToolSCMSourceTrait ) {",
          "79:                     foundGitTool = toolDesc.getInstallation(((GitToolSCMSourceTrait) trait).getGitTool());",
          "80:                 }",
          "81:             }",
          "82:         }",
          "84:         if (foundGitTool == null) {",
          "85:             foundGitTool = GitTool.getDefaultInstallation();",
          "86:         }",
          "88:         this.gitTool = foundGitTool;",
          "89:         try {",
          "90:             repositoryPath = Files.createTempDirectory( \"git\").toFile();",
          "91:         } catch (IOException e) {",
          "92:             throw new ServiceException.UnexpectedErrorException(\"Unable to create working directory for repository clone\");",
          "93:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:             }",
          "112:         });",
          "113:     }",
          "114: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:     <T> T invokeOnScm(final GitSCMFileSystem.FSFunction<T> function) throws IOException {",
          "157:         try {",
          "158:             GitSCMFileSystem fs = getFilesystem();",
          "159:             if (fs == null) {",
          "161:                 GitClient git = cloneRepo();",
          "162:                 try {",
          "163:                     return git.withRepository(new RepositoryCallbackToFSFunctionAdapter<>( function));",
          "164:                 } finally {",
          "165:                     cleanupRepo();",
          "166:                 }",
          "167:             }",
          "168:             return fs.invoke(function);",
          "169:         } catch (InterruptedException ex) {",
          "170:             throw new ServiceException.UnexpectedErrorException(\"Unable to save \" + filePath, ex);",
          "171:         }",
          "172:     }",
          "174:     private GitSCMFileSystem getFilesystem() throws IOException, InterruptedException {",
          "175:         try {",
          "176:             return (GitSCMFileSystem) SCMFileSystem.of( gitSource, new SCMHead( sourceBranch));",
          "177:         } catch(NullPointerException e) {",
          "180:             return null;",
          "181:         } catch( GitException e) {",
          "183:             if (e.getMessage().contains(\"Permission denied\")) {",
          "184:                 throw new ServiceException.UnauthorizedException(\"Not authorized\", e);",
          "185:             }",
          "186:             throw e;",
          "187:         }",
          "188:     }",
          "190:     GitClient cloneRepo() throws InterruptedException, IOException {",
          "191:         EnvVars environment = new EnvVars();",
          "192:         TaskListener taskListener = new LogTaskListener( Logger.getAnonymousLogger(), Level.ALL);",
          "193:         String gitExe = gitTool.getGitExe();",
          "194:         GitClient git = org.jenkinsci.plugins.gitclient.Git.with( taskListener, environment)",
          "195:             .in(repositoryPath)",
          "196:             .using(gitExe)",
          "197:             .getClient();",
          "199:         git.addCredentials(gitSource.getRemote(), getCredential());",
          "201:         try {",
          "202:             git.clone(gitSource.getRemote(), \"origin\", true, null);",
          "204:             log.fine(\"Repository \" + gitSource.getRemote() + \" cloned to: \" + repositoryPath.getCanonicalPath());",
          "205:         } catch(GitException e) {",
          "207:             boolean isEmptyRepo = false;",
          "208:             try {",
          "209:                 if (git.getRemoteReferences(gitSource.getRemote(), null, true, false).isEmpty()) {",
          "210:                     isEmptyRepo = true;",
          "211:                 }",
          "212:             } catch(GitException ge) {",
          "214:                 if (\"unexpected ls-remote output \".equals(ge.getMessage())) { // blank line, command succeeded",
          "215:                     isEmptyRepo = true;",
          "216:                 }",
          "218:             }",
          "220:             if(isEmptyRepo) {",
          "221:                 git.init();",
          "222:                 git.addRemoteUrl(\"origin\", gitSource.getRemote());",
          "224:                 log.fine(\"Repository \" + gitSource.getRemote() + \" not found, created new to: \" + repositoryPath.getCanonicalPath());",
          "225:             } else {",
          "226:                 throw e;",
          "227:             }",
          "228:         }",
          "230:         return git;",
          "231:     }",
          "233:     void cleanupRepo() {",
          "234:         try {",
          "235:             FileUtils.deleteDirectory( repositoryPath);",
          "236:         } catch (IOException e) {",
          "237:             throw new RuntimeException(e);",
          "238:         }",
          "239:     }",
          "241:     static class RepositoryCallbackToFSFunctionAdapter<T> implements RepositoryCallback<T>",
          "242:     {",
          "243:         private final GitSCMFileSystem.FSFunction<T> function;",
          "245:         public RepositoryCallbackToFSFunctionAdapter(GitSCMFileSystem.FSFunction<T> function) {",
          "246:             this.function = function;",
          "247:         }",
          "249:         @Override",
          "250:         public T invoke(Repository repo, VirtualChannel channel) throws IOException, InterruptedException {",
          "251:             return function.invoke(repo);",
          "252:         }",
          "253:     }",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCacheCloneReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitCloneReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package io.jenkins.blueocean.blueocean_git_pipeline;",
          "26: import com.cloudbees.plugins.credentials.common.StandardCredentials;",
          "28: import hudson.model.User;",
          "29: import io.jenkins.blueocean.commons.ServiceException;",
          "30: import io.jenkins.blueocean.credential.CredentialsUtils;",
          "",
          "[Removed Lines]",
          "27: import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java||blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java": [
          "File: blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java -> blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import io.jenkins.blueocean.rest.impl.pipeline.scm.GitContent;",
          "37: import java.io.IOException;",
          "38: import javax.annotation.Nonnull;",
          "40: import jenkins.branch.MultiBranchProject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import org.apache.commons.lang.StringUtils;",
          "46: import org.apache.commons.lang3.ObjectUtils;",
          "47: import org.kohsuke.stapler.StaplerRequest;",
          "52: @Extension",
          "53: public class GitReadSaveService extends ScmContentProvider {",
          "54:     @Nonnull",
          "55:     private static ReadSaveType TYPE = ReadSaveType.DEFAULT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.slf4j.Logger;",
          "50: import org.slf4j.LoggerFactory;",
          "58:     private static final Logger logger = LoggerFactory.getLogger(GitReadSaveService.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         static ReadSaveType get(String type) {",
          "68:             if (type != null) {",
          "70:             }",
          "72:         }",
          "73:     }",
          "",
          "[Removed Lines]",
          "69:                 return ReadSaveType.valueOf(type.toUpperCase());",
          "71:             return DEFAULT == null ? ReadSaveType.CACHE_BARE : DEFAULT;",
          "",
          "[Added Lines]",
          "74:                 ReadSaveType readSaveType = ReadSaveType.valueOf(type.toUpperCase(Locale.ENGLISH));",
          "75:                 if(readSaveType != CACHE_BARE){",
          "76:                     logger.warn( \"CLONE/CACHE_CLONE options are not supported anymore. Using default option CACHE_BARE instead.\" );",
          "77:                 }",
          "79:             return DEFAULT == null ? CACHE_BARE : DEFAULT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:             }",
          "110:         }",
          "141:     }",
          "143:     private GitReadSaveRequest makeSaveRequest(Item item, StaplerRequest req) {",
          "",
          "[Removed Lines]",
          "112:         switch (TYPE) {",
          "113:             case CLONE:",
          "114:                 return new GitCloneReadSaveRequest(",
          "115:                     gitSource,",
          "116:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "117:                     commitMessage,",
          "118:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "119:                     filePath,",
          "120:                     contents",
          "121:                 );",
          "122:             case CACHE_CLONE:",
          "123:                 return new GitCacheCloneReadSaveRequest(",
          "124:                     gitSource,",
          "125:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "126:                     commitMessage,",
          "127:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "128:                     filePath,",
          "129:                     contents",
          "130:                 );",
          "131:             default:",
          "132:                 return new GitBareRepoReadSaveRequest(",
          "133:                     gitSource,",
          "134:                     StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "135:                     commitMessage,",
          "136:                     StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "137:                     filePath,",
          "138:                     contents",
          "139:                 );",
          "140:         }",
          "",
          "[Added Lines]",
          "120:         return new GitBareRepoReadSaveRequest(",
          "121:             gitSource,",
          "122:             StringUtils.defaultIfEmpty(branch, defaultBranch),",
          "123:             commitMessage,",
          "124:             StringUtils.defaultIfEmpty(sourceBranch, defaultBranch),",
          "125:             filePath,",
          "126:             contents",
          "127:         );",
          "",
          "---------------"
        ],
        "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java||blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java": [
          "File: blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java -> blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitReadSaveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     @Test",
          "192:     public void testRepositoryCallbackToFSFunctionAdapter() throws IOException, InterruptedException {",
          "193:         final boolean[] called = { false };",
          "195:             @Override",
          "196:             public Object invoke(Repository repository) throws IOException, InterruptedException {",
          "197:                 called[0] = true;",
          "",
          "[Removed Lines]",
          "194:         new GitCacheCloneReadSaveRequest.RepositoryCallbackToFSFunctionAdapter<>(new GitSCMFileSystem.FSFunction<Object>() {",
          "",
          "[Added Lines]",
          "194:         new GitBareRepoReadSaveRequest.RepositoryCallbackToFSFunctionAdapter<>(new GitSCMFileSystem.FSFunction<Object>() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:         Assert.assertTrue(called[0]);",
          "202:     }",
          "216:     @Test",
          "217:     public void testBareRepoReadWrite() throws Exception {",
          "218:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_BARE, repoWithJenkinsfiles, masterPipelineScript);",
          "",
          "[Removed Lines]",
          "204:     @Test",
          "205:     public void testGitCloneReadWrite() throws Exception {",
          "206:         testGitReadWrite(GitReadSaveService.ReadSaveType.CLONE, repoWithJenkinsfiles, masterPipelineScript);",
          "207:         testGitReadWrite(GitReadSaveService.ReadSaveType.CLONE, repoNoJenkinsfile, null);",
          "208:     }",
          "210:     @Test",
          "211:     public void testGitCacheCloneReadWrite() throws Exception {",
          "212:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_CLONE, repoWithJenkinsfiles, masterPipelineScript);",
          "213:         testGitReadWrite(GitReadSaveService.ReadSaveType.CACHE_CLONE, repoNoJenkinsfile, null);",
          "214:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}