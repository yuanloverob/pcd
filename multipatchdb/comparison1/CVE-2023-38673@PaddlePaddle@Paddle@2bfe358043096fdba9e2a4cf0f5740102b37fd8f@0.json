{
  "cve_id": "CVE-2023-38673",
  "cve_desc": "PaddlePaddle before 2.5.0 has a command injection in fs.py. This resulted in\u00a0the ability to execute arbitrary commands on the operating system.\n",
  "repo": "PaddlePaddle/Paddle",
  "patch_hash": "2bfe358043096fdba9e2a4cf0f5740102b37fd8f",
  "patch_info": {
    "commit_hash": "2bfe358043096fdba9e2a4cf0f5740102b37fd8f",
    "repo": "PaddlePaddle/Paddle",
    "commit_url": "https://github.com/PaddlePaddle/Paddle/commit/2bfe358043096fdba9e2a4cf0f5740102b37fd8f",
    "files": [
      "python/paddle/distributed/fleet/launch_utils.py",
      "python/paddle/distributed/fleet/utils/fs.py",
      "python/paddle/distributed/utils/launch_utils.py"
    ],
    "message": "fix mkdir",
    "before_after_code_files": [
      "python/paddle/distributed/fleet/launch_utils.py||python/paddle/distributed/fleet/launch_utils.py",
      "python/paddle/distributed/fleet/utils/fs.py||python/paddle/distributed/fleet/utils/fs.py",
      "python/paddle/distributed/utils/launch_utils.py||python/paddle/distributed/utils/launch_utils.py"
    ]
  },
  "patch_diff": {
    "python/paddle/distributed/fleet/launch_utils.py||python/paddle/distributed/fleet/launch_utils.py": [
      "File: python/paddle/distributed/fleet/launch_utils.py -> python/paddle/distributed/fleet/launch_utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "596:         fn = None",
      "597:         pre_fn = None if os.name == 'nt' else os.setsid",
      "598:         if log_dir is not None:",
      "600:             if os.path.exists(\"%s/endpoints.log\" % log_dir):",
      "601:                 os.system(f\"rm -f {log_dir}/endpoints.log\")",
      "602:             with open(\"%s/endpoints.log\" % log_dir, \"w\") as f:",
      "",
      "[Removed Lines]",
      "599:             os.system(f\"mkdir -p {log_dir}\")",
      "",
      "[Added Lines]",
      "599:             os.makedirs(log_dir, exist_ok=True)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1762:                 )",
      "1764:             if args.log_dir is not None:",
      "1766:                 fn = open(\"%s/serverlog.%d\" % (args.log_dir, idx), \"w\")",
      "1767:                 self.log_fns[\"server\"].append(fn)",
      "1768:                 proc = subprocess.Popen(",
      "",
      "[Removed Lines]",
      "1765:                 os.system(f\"mkdir -p {args.log_dir}\")",
      "",
      "[Added Lines]",
      "1765:                 os.makedirs(args.log_dir, exist_ok=True)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1870:                 )",
      "1872:             if args.log_dir is not None:",
      "1874:                 fn = open(\"%s/workerlog.%d\" % (args.log_dir, idx), \"w\")",
      "1875:                 self.log_fns[\"worker\"].append(fn)",
      "1876:                 proc = subprocess.Popen(",
      "",
      "[Removed Lines]",
      "1873:                 os.system(f\"mkdir -p {args.log_dir}\")",
      "",
      "[Added Lines]",
      "1873:                 os.makedirs(args.log_dir, exist_ok=True)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1938:                 )",
      "1940:             if args.log_dir is not None:",
      "1942:                 fn = open(\"%s/coordinator.%d\" % (args.log_dir, idx), \"w\")",
      "1943:                 self.log_fns[\"coordinator\"].append(fn)",
      "1944:                 proc = subprocess.Popen(",
      "",
      "[Removed Lines]",
      "1941:                 os.system(f\"mkdir -p {args.log_dir}\")",
      "",
      "[Added Lines]",
      "1941:                 os.makedirs(args.log_dir, exist_ok=True)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2029:                 )",
      "2031:             if args.log_dir is not None:",
      "2033:                 fn = open(\"%s/heterlog.%d\" % (args.log_dir, idx), \"w\")",
      "2034:                 self.log_fns[\"heter_worker\"].append(fn)",
      "2035:                 proc = subprocess.Popen(",
      "",
      "[Removed Lines]",
      "2032:                 os.system(f\"mkdir -p {args.log_dir}\")",
      "",
      "[Added Lines]",
      "2032:                 os.makedirs(args.log_dir, exist_ok=True)",
      "",
      "---------------"
    ],
    "python/paddle/distributed/fleet/utils/fs.py||python/paddle/distributed/fleet/utils/fs.py": [
      "File: python/paddle/distributed/fleet/utils/fs.py -> python/paddle/distributed/fleet/utils/fs.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "174:         assert not os.path.isfile(fs_path), \"{} is already a file\".format(",
      "175:             fs_path",
      "176:         )",
      "179:     def rename(self, fs_src_path, fs_dst_path):",
      "180:         \"\"\"",
      "",
      "[Removed Lines]",
      "177:         os.system(f\"mkdir -p {fs_path}\")",
      "",
      "[Added Lines]",
      "177:         os.makedirs(fs_path, exist_ok=True)",
      "",
      "---------------"
    ],
    "python/paddle/distributed/utils/launch_utils.py||python/paddle/distributed/utils/launch_utils.py": [
      "File: python/paddle/distributed/utils/launch_utils.py -> python/paddle/distributed/utils/launch_utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "486:         fn = None",
      "487:         if log_dir is not None:",
      "489:             fn = open(\"%s/workerlog.%d\" % (log_dir, idx), \"a\")",
      "490:             proc = subprocess.Popen(cmd, env=current_env, stdout=fn, stderr=fn)",
      "491:         else:",
      "",
      "[Removed Lines]",
      "488:             os.system(f\"mkdir -p {log_dir}\")",
      "",
      "[Added Lines]",
      "488:             os.makedirs(log_dir, exist_ok=True)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41226d55ad8495b61656068e50b42859f056df9c",
      "candidate_info": {
        "commit_hash": "41226d55ad8495b61656068e50b42859f056df9c",
        "repo": "PaddlePaddle/Paddle",
        "commit_url": "https://github.com/PaddlePaddle/Paddle/commit/41226d55ad8495b61656068e50b42859f056df9c",
        "files": [
          "python/paddle/distributed/fleet/launch_utils.py",
          "python/paddle/distributed/fleet/utils/fs.py",
          "python/paddle/distributed/utils/launch_utils.py",
          "python/paddle/fluid/tests/unittests/test_dist_fleet_base.py"
        ],
        "message": "fix mkdir (#52570)\n\n* fix mkdir\n\n* update",
        "before_after_code_files": [
          "python/paddle/distributed/fleet/launch_utils.py||python/paddle/distributed/fleet/launch_utils.py",
          "python/paddle/distributed/fleet/utils/fs.py||python/paddle/distributed/fleet/utils/fs.py",
          "python/paddle/distributed/utils/launch_utils.py||python/paddle/distributed/utils/launch_utils.py",
          "python/paddle/fluid/tests/unittests/test_dist_fleet_base.py||python/paddle/fluid/tests/unittests/test_dist_fleet_base.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/PaddlePaddle/Paddle/pull/52570"
        ],
        "olp_code_files": {
          "patch": [
            "python/paddle/distributed/fleet/launch_utils.py||python/paddle/distributed/fleet/launch_utils.py",
            "python/paddle/distributed/fleet/utils/fs.py||python/paddle/distributed/fleet/utils/fs.py",
            "python/paddle/distributed/utils/launch_utils.py||python/paddle/distributed/utils/launch_utils.py"
          ],
          "candidate": [
            "python/paddle/distributed/fleet/launch_utils.py||python/paddle/distributed/fleet/launch_utils.py",
            "python/paddle/distributed/fleet/utils/fs.py||python/paddle/distributed/fleet/utils/fs.py",
            "python/paddle/distributed/utils/launch_utils.py||python/paddle/distributed/utils/launch_utils.py"
          ]
        }
      },
      "candidate_diff": {
        "python/paddle/distributed/fleet/launch_utils.py||python/paddle/distributed/fleet/launch_utils.py": [
          "File: python/paddle/distributed/fleet/launch_utils.py -> python/paddle/distributed/fleet/launch_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:         fn = None",
          "586:         pre_fn = None if os.name == 'nt' else os.setsid",
          "587:         if log_dir is not None:",
          "589:             if os.path.exists(\"%s/endpoints.log\" % log_dir):",
          "591:             with open(\"%s/endpoints.log\" % log_dir, \"w\") as f:",
          "592:                 f.write(\"PADDLE_TRAINER_ENDPOINTS: \\n\")",
          "593:                 f.write(\"\\n\".join(cluster.trainers_endpoints()))",
          "",
          "[Removed Lines]",
          "588:             os.system(f\"mkdir -p {log_dir}\")",
          "590:                 os.system(f\"rm -f {log_dir}/endpoints.log\")",
          "",
          "[Added Lines]",
          "588:             os.makedirs(log_dir, exist_ok=True)",
          "590:                 os.remove(f\"{log_dir}/endpoints.log\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1694:                 )",
          "1696:             if args.log_dir is not None:",
          "1698:                 fn = open(\"%s/serverlog.%d\" % (args.log_dir, idx), \"w\")",
          "1699:                 self.log_fns[\"server\"].append(fn)",
          "1700:                 proc = subprocess.Popen(",
          "",
          "[Removed Lines]",
          "1697:                 os.system(f\"mkdir -p {args.log_dir}\")",
          "",
          "[Added Lines]",
          "1697:                 os.makedirs(args.log_dir, exist_ok=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1802:                 )",
          "1804:             if args.log_dir is not None:",
          "1806:                 fn = open(\"%s/workerlog.%d\" % (args.log_dir, idx), \"w\")",
          "1807:                 self.log_fns[\"worker\"].append(fn)",
          "1808:                 proc = subprocess.Popen(",
          "",
          "[Removed Lines]",
          "1805:                 os.system(f\"mkdir -p {args.log_dir}\")",
          "",
          "[Added Lines]",
          "1805:                 os.makedirs(args.log_dir, exist_ok=True)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1870:                 )",
          "1872:             if args.log_dir is not None:",
          "1874:                 fn = open(\"%s/coordinator.%d\" % (args.log_dir, idx), \"w\")",
          "1875:                 self.log_fns[\"coordinator\"].append(fn)",
          "1876:                 proc = subprocess.Popen(",
          "",
          "[Removed Lines]",
          "1873:                 os.system(f\"mkdir -p {args.log_dir}\")",
          "",
          "[Added Lines]",
          "1873:                 os.makedirs(args.log_dir, exist_ok=True)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1961:                 )",
          "1963:             if args.log_dir is not None:",
          "1965:                 fn = open(\"%s/heterlog.%d\" % (args.log_dir, idx), \"w\")",
          "1966:                 self.log_fns[\"heter_worker\"].append(fn)",
          "1967:                 proc = subprocess.Popen(",
          "",
          "[Removed Lines]",
          "1964:                 os.system(f\"mkdir -p {args.log_dir}\")",
          "",
          "[Added Lines]",
          "1964:                 os.makedirs(args.log_dir, exist_ok=True)",
          "",
          "---------------"
        ],
        "python/paddle/distributed/fleet/utils/fs.py||python/paddle/distributed/fleet/utils/fs.py": [
          "File: python/paddle/distributed/fleet/utils/fs.py -> python/paddle/distributed/fleet/utils/fs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         assert not os.path.isfile(fs_path), \"{} is already a file\".format(",
          "175:             fs_path",
          "176:         )",
          "179:     def rename(self, fs_src_path, fs_dst_path):",
          "180:         \"\"\"",
          "",
          "[Removed Lines]",
          "177:         os.system(f\"mkdir -p {fs_path}\")",
          "",
          "[Added Lines]",
          "177:         os.makedirs(fs_path, exist_ok=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:             if exist_ok:",
          "320:                 return",
          "321:             raise FSFileExistsError",
          "325:     def mv(self, src_path, dst_path, overwrite=False, test_exists=False):",
          "326:         \"\"\"",
          "",
          "[Removed Lines]",
          "323:         os.system(f\"touch {fs_path}\")",
          "",
          "[Added Lines]",
          "322:         with open(fs_path, 'a'):",
          "323:             pass",
          "",
          "---------------"
        ],
        "python/paddle/distributed/utils/launch_utils.py||python/paddle/distributed/utils/launch_utils.py": [
          "File: python/paddle/distributed/utils/launch_utils.py -> python/paddle/distributed/utils/launch_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         fn = None",
          "487:         if log_dir is not None:",
          "489:             fn = open(\"%s/workerlog.%d\" % (log_dir, idx), \"a\")",
          "490:             proc = subprocess.Popen(cmd, env=current_env, stdout=fn, stderr=fn)",
          "491:         else:",
          "",
          "[Removed Lines]",
          "488:             os.system(f\"mkdir -p {log_dir}\")",
          "",
          "[Added Lines]",
          "488:             os.makedirs(log_dir, exist_ok=True)",
          "",
          "---------------"
        ],
        "python/paddle/fluid/tests/unittests/test_dist_fleet_base.py||python/paddle/fluid/tests/unittests/test_dist_fleet_base.py": [
          "File: python/paddle/fluid/tests/unittests/test_dist_fleet_base.py -> python/paddle/fluid/tests/unittests/test_dist_fleet_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:                     basename",
          "429:                 )",
          "430:             )",
          "431:             os.system(f\"cat {logx}\")",
          "432:             print(",
          "433:                 \"================== Error {} end =====================\\n\".format(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:             if not os.path.isfile(logx):",
          "433:                 raise FileNotFoundError(f\"{logx} is not a file\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}