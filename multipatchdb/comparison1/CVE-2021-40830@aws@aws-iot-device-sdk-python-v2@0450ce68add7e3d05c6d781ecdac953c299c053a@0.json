{
  "cve_id": "CVE-2021-40830",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on Unix systems. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to override the default trust store. This corrects this issue. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.6.1 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on Linux/Unix. Amazon Web Services AWS-C-IO 0.10.4 on Linux/Unix.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
  "patch_info": {
    "commit_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0450ce68add7e3d05c6d781ecdac953c299c053a",
    "files": [
      "setup.py"
    ],
    "message": "Fix Mac SNI check with overridden root CA (#211)",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.22',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e4e91f8c7bb243b9c83feea5bc4dbd4986d8da5",
      "candidate_info": {
        "commit_hash": "0e4e91f8c7bb243b9c83feea5bc4dbd4986d8da5",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0e4e91f8c7bb243b9c83feea5bc4dbd4986d8da5",
        "files": [
          "README.md",
          "awsiot/__init__.py",
          "builder.json",
          "continuous-delivery/publish_to_prod_pypi.yml",
          "continuous-delivery/publish_to_test_pypi.yml",
          "setup.py"
        ],
        "message": "update awscrt to 0.11.19. Remove support for python3.5 as it's EOL (#194)\n\n- update awscrt to 0.11.19. Remove support for python3.5 as it's EOL\n- Version and metadata of life updates",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import json",
          "16: from typing import Any, Callable, Dict, Optional, Tuple, TypeVar",
          "18: T = TypeVar('T')",
          "20: PayloadObj = Dict[str, Any]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: __version__ = '1.0.0-dev'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     \"\"\"",
          "32:     def __init__(self, mqtt_connection: mqtt.Connection):",
          "35:     @property",
          "36:     def mqtt_connection(self) -> mqtt.Connection:",
          "",
          "[Removed Lines]",
          "33:         self._mqtt_connection = mqtt_connection # type: mqtt.Connection",
          "",
          "[Added Lines]",
          "35:         self._mqtt_connection = mqtt_connection  # type: mqtt.Connection",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:             `Future` whose result will be `None` when the server",
          "51:             has acknowledged the unsubscribe.",
          "52:         \"\"\"",
          "54:         try:",
          "55:             def on_unsuback(unsuback_future):",
          "56:                 if unsuback_future.exception():",
          "",
          "[Removed Lines]",
          "53:         future = Future() # type: Future",
          "",
          "[Added Lines]",
          "55:         future = Future()  # type: Future",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         server has acknowledged the message, or an exception if the",
          "81:         publish fails.",
          "82:         \"\"\"",
          "84:         try:",
          "85:             def on_puback(puback_future):",
          "86:                 if puback_future.exception():",
          "",
          "[Removed Lines]",
          "83:         future = Future() # type: Future",
          "",
          "[Added Lines]",
          "85:         future = Future()  # type: Future",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:         Note that messages may arrive before the subscription is acknowledged.",
          "136:         \"\"\"",
          "139:         try:",
          "140:             def on_suback(suback_future):",
          "141:                 try:",
          "",
          "[Removed Lines]",
          "138:         future = Future() # type: Future",
          "",
          "[Added Lines]",
          "140:         future = Future()  # type: Future",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "4: # SPDX-License-Identifier: Apache-2.0.",
          "6: from setuptools import setup, find_packages",
          "8: setup(",
          "9:     name='awsiotsdk',",
          "11:     license='License :: OSI Approved :: Apache Software License',",
          "12:     description='AWS IoT SDK based on the AWS Common Runtime',",
          "13:     author='AWS SDK Common Runtime Team',",
          "14:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "15:     packages=find_packages(include=['awsiot*']),",
          "",
          "[Removed Lines]",
          "10:     version='1.0.0-dev',",
          "",
          "[Added Lines]",
          "6: import codecs",
          "7: import re",
          "8: import os",
          "11: VERSION_RE = re.compile(r\"\"\".*__version__ = [\"'](.*?)['\"]\"\"\", re.S)",
          "12: PROJECT_DIR = os.path.dirname(os.path.realpath(__file__))",
          "15: def _load_readme():",
          "16:     readme_path = os.path.join(PROJECT_DIR, 'README.md')",
          "17:     with codecs.open(readme_path, 'r', 'utf-8') as f:",
          "18:         return f.read()",
          "21: def _load_version():",
          "22:     init_path = os.path.join(PROJECT_DIR, 'awsiot', '__init__.py')",
          "23:     with open(init_path) as fp:",
          "24:         return VERSION_RE.match(fp.read()).group(1)",
          "29:     version=_load_version(),",
          "32:     long_description=_load_readme(),",
          "33:     long_description_content_type='text/markdown',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.17',",
          "24:     python_requires='>=3.5',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.19',",
          "45:     python_requires='>=3.6',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15a25be7d18ab61543a7937828bc9592e3c44493",
      "candidate_info": {
        "commit_hash": "15a25be7d18ab61543a7937828bc9592e3c44493",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/15a25be7d18ab61543a7937828bc9592e3c44493",
        "files": [
          "setup.py"
        ],
        "message": "update awscrt to 0.8.0 (#100)\n\n-    API CHANGE: awscrt.auth.AwsSigningConfig.signed_body_value is now a string instead of an enum.\n -   API CHANGE: Added check for iOS platform\n -   BUGFIX: websocket no longer hangs if CLOSE frame cannot be sent.\n  -  BUGFIX: Fixes a crash when shutting down an mqtt connection with an incomplete request with no callback from aws-c-mqtt\n\n\nCo-authored-by: Dengke Tang <dengket@amazon.com>",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "14:     packages = ['awsiot'],",
          "15:     install_requires=[",
          "17:         'futures;python_version<\"3.2\"',",
          "18:         'typing;python_version<\"3.5\"',",
          "19:     ],",
          "",
          "[Removed Lines]",
          "16:         'awscrt==0.6.2',",
          "",
          "[Added Lines]",
          "16:         'awscrt==0.8.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
      "candidate_info": {
        "commit_hash": "fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
        "files": [
          "setup.py"
        ],
        "message": "Update to latest CRT (#208)\n\n* On Windows, always perform an SNI check even with an overridden root CA\n* On Windows, properly honor the verify_peer = false option\n* Fix instability with raspberry PI and input stream seeking by doing a better job of modeling file seek offset type and size.",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.11.20',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.22',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d2ffaaa57ce07be2b5d9260add6b0724e64a183",
      "candidate_info": {
        "commit_hash": "5d2ffaaa57ce07be2b5d9260add6b0724e64a183",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5d2ffaaa57ce07be2b5d9260add6b0724e64a183",
        "files": [
          "awsiot/eventstreamrpc.py",
          "setup.py"
        ],
        "message": "Fix memory leaks in greengrasscoreipc (#186)\n\n- Update awscrt to fix leaking headers\n- Break circular references in evenstreamrpc so garbage collector can clean them up",
        "before_after_code_files": [
          "awsiot/eventstreamrpc.py||awsiot/eventstreamrpc.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/eventstreamrpc.py||awsiot/eventstreamrpc.py": [
          "File: awsiot/eventstreamrpc.py -> awsiot/eventstreamrpc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         self._closed_future.set_running_or_notify_cancel()  # prevent cancel",
          "612:         self._initial_response_future = Future()",
          "613:         self._initial_response_future.set_running_or_notify_cancel()  # prevent cancel",
          "617:     def _activate(self, request: Shape) -> Future:",
          "618:         headers = [Header.from_string(CONTENT_TYPE_HEADER,",
          "",
          "[Removed Lines]",
          "614:         self._protocol_handler = _ProtocolContinuationHandler(self)",
          "615:         self._continuation = connection._new_stream(self._protocol_handler)",
          "",
          "[Added Lines]",
          "614:         protocol_handler = _ProtocolContinuationHandler(self)",
          "615:         self._continuation = connection._new_stream(protocol_handler)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "806:     def on_continuation_closed(self, *args, **kwargs):",
          "807:         self.operation._on_continuation_closed(*args, **kwargs)",
          "810: class Client:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:         # break circular reference between: ClientOperation, _ProtocolContinuationHandler, ClientContinuation",
          "809:         # so that garbage collector can clean them up",
          "810:         self.operation = None",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.8',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.12',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03eb38ec7561976bbec96d315cf25d14317b2f86",
      "candidate_info": {
        "commit_hash": "03eb38ec7561976bbec96d315cf25d14317b2f86",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/03eb38ec7561976bbec96d315cf25d14317b2f86",
        "files": [
          "awsiot/mqtt_connection_builder.py",
          "samples/README.md",
          "samples/pkcs11_pubsub.py",
          "setup.py"
        ],
        "message": "Support PKCS#11 for mutual TLS on Unix platforms (#259)\n\n- Update to latest `aws-crt-python`, which exposes PKCS#11 functionality (see https://github.com/awslabs/aws-crt-python/pull/323)\n- Add `pkcs11_pubsub.py` sample, demonstrating an MQTT connection where the private key is stored in PKCS#11 token.\n  - Add docs for sample",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/pkcs11_pubsub.py||samples/pkcs11_pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     return _builder(tls_ctx_options, **kwargs)",
          "252: def websockets_with_default_aws_signing(",
          "253:         region,",
          "254:         credentials_provider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: def mtls_with_pkcs11(*,",
          "253:                      pkcs11_lib: awscrt.io.Pkcs11Lib,",
          "254:                      user_pin: str,",
          "255:                      slot_id: int = None,",
          "256:                      token_label: str = None,",
          "257:                      private_key_label: str = None,",
          "258:                      cert_filepath: str = None,",
          "259:                      cert_bytes=None,",
          "261:     \"\"\"",
          "262:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "263:     using a PKCS#11 library for private key operations.",
          "265:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "266:     described at the top of this doc, as well as...",
          "268:     Keyword Args:",
          "269:         pkcs11_lib (awscrt.io.Pkcs11Lib): Use this PKCS#11 library",
          "271:         user_pin (Optional[str]): User PIN, for logging into the PKCS#11 token.",
          "272:             Pass `None` to log into a token with a \"protected authentication path\".",
          "274:         slot_id (Optional[int]): ID of slot containing PKCS#11 token.",
          "275:             If not specified, the token will be chosen based on other criteria (such as token label).",
          "277:         token_label (Optional[str]): Label of the PKCS#11 token to use.",
          "278:             If not specified, the token will be chosen based on other criteria (such as slot ID).",
          "280:         private_key_label (Optional[str]): Label of private key object on PKCS#11 token.",
          "281:             If not specified, the key will be chosen based on other criteria",
          "282:             (such as being the only available private key on the token).",
          "284:         cert_filepath (Optional[str]): Use this X.509 certificate (file on disk).",
          "285:             The certificate must be PEM-formatted. The certificate may be",
          "286:             specified by other means instead (ex: `cert_file_contents`)",
          "288:         cert_bytes (Optional[bytes-like object]):",
          "289:             Use this X.509 certificate (contents in memory).",
          "290:             The certificate must be PEM-formatted. The certificate may be",
          "291:             specified by other means instead (ex: `cert_file_path`)",
          "292:     \"\"\"",
          "293:     _check_required_kwargs(**kwargs)",
          "295:     tls_ctx_options = awscrt.io.TlsContextOptions.create_client_with_mtls_pkcs11(",
          "296:         pkcs11_lib=pkcs11_lib,",
          "297:         user_pin=user_pin,",
          "298:         slot_id=slot_id,",
          "299:         token_label=token_label,",
          "300:         private_key_label=private_key_label,",
          "301:         cert_file_path=cert_filepath,",
          "302:         cert_file_contents=cert_bytes)",
          "304:     return _builder(tls_ctx_options, **kwargs)",
          "",
          "---------------"
        ],
        "samples/pkcs11_pubsub.py||samples/pkcs11_pubsub.py": [
          "File: samples/pkcs11_pubsub.py -> samples/pkcs11_pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import argparse",
          "5: from awscrt import io, mqtt",
          "6: from awsiot import mqtt_connection_builder",
          "7: import sys",
          "8: import threading",
          "9: import time",
          "10: from uuid import uuid4",
          "11: import json",
          "13: # This sample is similar to `samples/pubsub.py` but the private key",
          "14: # for mutual TLS is stored on a PKCS#11 compatible smart card or",
          "15: # Hardware Security Module (HSM).",
          "16: #",
          "17: # See `samples/README.md` for instructions on setting up your PKCS#11 device",
          "18: # to run this sample.",
          "19: #",
          "20: # WARNING: Unix only. Currently, TLS integration with PKCS#11 is only available on Unix devices.",
          "22: parser = argparse.ArgumentParser(description=\"Send and receive messages through and MQTT connection.\")",
          "23: parser.add_argument('--endpoint', required=True, help=\"Your AWS IoT custom endpoint, not including a port. \" +",
          "24:                                                       \"Ex: \\\"abcd123456wxyz-ats.iot.us-east-1.amazonaws.com\\\"\")",
          "25: parser.add_argument('--port', type=int, help=\"Specify port. AWS IoT supports 443 and 8883. (default: auto)\")",
          "26: parser.add_argument('--cert', required=True, help=\"File path to your client certificate, in PEM format.\")",
          "27: parser.add_argument('--pkcs11-lib', required=True, help=\"Path to PKCS#11 library.\")",
          "28: parser.add_argument('--pin', required=True, help=\"User PIN for logging into PKCS#11 token.\")",
          "29: parser.add_argument('--token-label', help=\"Label of PKCS#11 token to use. (default: None) \")",
          "30: parser.add_argument('--slot-id', help=\"Slot ID containing PKCS#11 token to use. (default: None)\")",
          "31: parser.add_argument('--key-label', help=\"Label of private key on the PKCS#11 token. (default: None)\")",
          "32: parser.add_argument('--root-ca', help=\"File path to root certificate authority, in PEM format. (default: None)\")",
          "33: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()),",
          "34:                     help=\"Client ID for MQTT connection. (default: 'test-*')\")",
          "35: parser.add_argument('--topic', default=\"test/topic\",",
          "36:                     help=\"Topic to subscribe to, and publish messages to. (default: 'test/topic')\")",
          "37: parser.add_argument('--message', default=\"Hello World!\",",
          "38:                     help=\"Message to publish. Specify empty string to publish nothing. (default: 'Hello World!')\")",
          "39: parser.add_argument('--count', default=10, type=int, help=\"Number of messages to publish/receive before exiting. \" +",
          "40:                                                           \"Specify 0 to run forever. (default: 10)\")",
          "41: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "42:                     help=\"Logging level. (default: 'NoLogs')\")",
          "44: # Using globals to simplify sample code",
          "45: args = parser.parse_args()",
          "47: io.init_logging(getattr(io.LogLevel, args.verbosity), 'stderr')",
          "49: received_count = 0",
          "50: received_all_event = threading.Event()",
          "53: def on_connection_interrupted(connection, error, **kwargs):",
          "54:     # Callback when connection is accidentally lost.",
          "55:     print(\"Connection interrupted. error: {}\".format(error))",
          "58: def on_connection_resumed(connection, return_code, session_present, **kwargs):",
          "59:     # Callback when an interrupted connection is re-established.",
          "60:     print(\"Connection resumed. return_code: {} session_present: {}\".format(return_code, session_present))",
          "63: # Callback when the subscribed topic receives a message",
          "64: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "65:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "66:     global received_count",
          "67:     received_count += 1",
          "68:     if received_count == args.count:",
          "69:         received_all_event.set()",
          "72: if __name__ == '__main__':",
          "73:     # Spin up resources",
          "74:     event_loop_group = io.EventLoopGroup(1)",
          "75:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "76:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "78:     print(f\"Loading PKCS#11 library '{args.pkcs11_lib}' ...\")",
          "79:     pkcs11_lib = io.Pkcs11Lib(",
          "80:         file=args.pkcs11_lib,",
          "81:         behavior=io.Pkcs11Lib.InitializeFinalizeBehavior.STRICT)",
          "82:     print(\"Loaded!\")",
          "84:     # Create MQTT connection",
          "85:     mqtt_connection = mqtt_connection_builder.mtls_with_pkcs11(",
          "86:         pkcs11_lib=pkcs11_lib,",
          "87:         user_pin=args.pin,",
          "88:         slot_id=int(args.slot_id) if args.slot_id else None,",
          "89:         token_label=args.token_label,",
          "90:         private_key_label=args.key_label,",
          "91:         cert_filepath=args.cert,",
          "92:         endpoint=args.endpoint,",
          "93:         port=args.port,",
          "94:         client_bootstrap=client_bootstrap,",
          "95:         ca_filepath=args.root_ca,",
          "96:         on_connection_interrupted=on_connection_interrupted,",
          "97:         on_connection_resumed=on_connection_resumed,",
          "98:         client_id=args.client_id,",
          "99:         clean_session=False,",
          "100:         keep_alive_secs=30)",
          "102:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "103:         args.endpoint, args.client_id))",
          "105:     connect_future = mqtt_connection.connect()",
          "107:     # Future.result() waits until a result is available",
          "108:     connect_future.result()",
          "109:     print(\"Connected!\")",
          "111:     # Subscribe",
          "112:     print(\"Subscribing to topic '{}'...\".format(args.topic))",
          "113:     subscribe_future, packet_id = mqtt_connection.subscribe(",
          "114:         topic=args.topic,",
          "115:         qos=mqtt.QoS.AT_LEAST_ONCE,",
          "116:         callback=on_message_received)",
          "118:     subscribe_result = subscribe_future.result()",
          "119:     print(\"Subscribed with {}\".format(str(subscribe_result['qos'])))",
          "121:     # Publish message to server desired number of times.",
          "122:     # This step is skipped if message is blank.",
          "123:     # This step loops forever if count was set to 0.",
          "124:     if args.message:",
          "125:         if args.count == 0:",
          "126:             print(\"Sending messages until program killed\")",
          "127:         else:",
          "128:             print(\"Sending {} message(s)\".format(args.count))",
          "130:         publish_count = 1",
          "131:         while (publish_count <= args.count) or (args.count == 0):",
          "132:             message = \"{} [{}]\".format(args.message, publish_count)",
          "133:             print(\"Publishing message to topic '{}': {}\".format(args.topic, message))",
          "134:             message_json = json.dumps(message)",
          "135:             mqtt_connection.publish(",
          "136:                 topic=args.topic,",
          "137:                 payload=message_json,",
          "138:                 qos=mqtt.QoS.AT_LEAST_ONCE)",
          "139:             time.sleep(1)",
          "140:             publish_count += 1",
          "142:     # Wait for all messages to be received.",
          "143:     # This waits forever if count was set to 0.",
          "144:     if args.count != 0 and not received_all_event.is_set():",
          "145:         print(\"Waiting for all messages to be received...\")",
          "147:     received_all_event.wait()",
          "148:     print(\"{} message(s) received.\".format(received_count))",
          "150:     # Disconnect",
          "151:     print(\"Disconnecting...\")",
          "152:     disconnect_future = mqtt_connection.disconnect()",
          "153:     disconnect_future.result()",
          "154:     print(\"Disconnected!\")",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.12.1',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.0',",
          "",
          "---------------"
        ]
      }
    }
  ]
}