{
  "cve_id": "CVE-2024-50343",
  "cve_desc": "symfony/validator is a module for the Symphony PHP framework which provides tools to validate values. It is possible to trick a `Validator` configured with a regular expression using the `$` metacharacters, with an input ending with `\\n`. Symfony as of versions 5.4.43, 6.4.11, and 7.1.4 now uses the `D` regex modifier to match the entire input. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "symfony/symfony",
  "patch_hash": "7d1032bbead9a4229b32fa6ebca32681c80cb76f",
  "patch_info": {
    "commit_hash": "7d1032bbead9a4229b32fa6ebca32681c80cb76f",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f",
    "files": [
      "src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php",
      "src/Symfony/Component/Validator/Constraints/CssColorValidator.php",
      "src/Symfony/Component/Validator/Constraints/DateValidator.php",
      "src/Symfony/Component/Validator/Constraints/EmailValidator.php",
      "src/Symfony/Component/Validator/Constraints/TimeValidator.php",
      "src/Symfony/Component/Validator/Constraints/UrlValidator.php",
      "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
    ],
    "message": "[Validator] Add `D` regex modifier in relevant validators",
    "before_after_code_files": [
      "src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php||src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php",
      "src/Symfony/Component/Validator/Constraints/CssColorValidator.php||src/Symfony/Component/Validator/Constraints/CssColorValidator.php",
      "src/Symfony/Component/Validator/Constraints/DateValidator.php||src/Symfony/Component/Validator/Constraints/DateValidator.php",
      "src/Symfony/Component/Validator/Constraints/EmailValidator.php||src/Symfony/Component/Validator/Constraints/EmailValidator.php",
      "src/Symfony/Component/Validator/Constraints/TimeValidator.php||src/Symfony/Component/Validator/Constraints/TimeValidator.php",
      "src/Symfony/Component/Validator/Constraints/UrlValidator.php||src/Symfony/Component/Validator/Constraints/UrlValidator.php",
      "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
      "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php||src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php": [
      "File: src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php -> src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:     protected $schemes = [",
      "31:         CardScheme::AMEX => [",
      "33:         ],",
      "36:         CardScheme::CHINA_UNIONPAY => [",
      "38:         ],",
      "42:         CardScheme::DINERS => [",
      "44:         ],",
      "47:         CardScheme::DISCOVER => [",
      "52:         ],",
      "54:         CardScheme::INSTAPAYMENT => [",
      "56:         ],",
      "59:         CardScheme::JCB => [",
      "61:         ],",
      "63:         CardScheme::LASER => [",
      "65:         ],",
      "68:         CardScheme::MAESTRO => [",
      "73:         ],",
      "76:         CardScheme::MASTERCARD => [",
      "79:         ],",
      "81:         CardScheme::MIR => [",
      "83:         ],",
      "85:         CardScheme::UATP => [",
      "87:         ],",
      "89:         CardScheme::VISA => [",
      "91:         ],",
      "92:     ];",
      "",
      "[Removed Lines]",
      "32:             '/^3[47][0-9]{13}$/',",
      "37:             '/^62[0-9]{14,17}$/',",
      "43:             '/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/',",
      "48:             '/^6011[0-9]{12}$/',",
      "49:             '/^64[4-9][0-9]{13}$/',",
      "50:             '/^65[0-9]{14}$/',",
      "51:             '/^622(12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|91[0-9]|92[0-5])[0-9]{10}$/',",
      "55:             '/^63[7-9][0-9]{13}$/',",
      "60:             '/^(?:2131|1800|35[0-9]{3})[0-9]{11}$/',",
      "64:             '/^(6304|670[69]|6771)[0-9]{12,15}$/',",
      "69:             '/^(6759[0-9]{2})[0-9]{6,13}$/',",
      "70:             '/^(50[0-9]{4})[0-9]{6,13}$/',",
      "71:             '/^5[6-9][0-9]{10,17}$/',",
      "72:             '/^6[0-9]{11,18}$/',",
      "77:             '/^5[1-5][0-9]{14}$/',",
      "78:             '/^2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12})$/',",
      "82:             '/^220[0-4][0-9]{12,15}$/',",
      "86:             '/^1[0-9]{14}$/',",
      "90:             '/^4([0-9]{12}|[0-9]{15}|[0-9]{18})$/',",
      "",
      "[Added Lines]",
      "32:             '/^3[47][0-9]{13}$/D',",
      "37:             '/^62[0-9]{14,17}$/D',",
      "43:             '/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/D',",
      "48:             '/^6011[0-9]{12}$/D',",
      "49:             '/^64[4-9][0-9]{13}$/D',",
      "50:             '/^65[0-9]{14}$/D',",
      "51:             '/^622(12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|91[0-9]|92[0-5])[0-9]{10}$/D',",
      "55:             '/^63[7-9][0-9]{13}$/D',",
      "60:             '/^(?:2131|1800|35[0-9]{3})[0-9]{11}$/D',",
      "64:             '/^(6304|670[69]|6771)[0-9]{12,15}$/D',",
      "69:             '/^(6759[0-9]{2})[0-9]{6,13}$/D',",
      "70:             '/^(50[0-9]{4})[0-9]{6,13}$/D',",
      "71:             '/^5[6-9][0-9]{10,17}$/D',",
      "72:             '/^6[0-9]{11,18}$/D',",
      "77:             '/^5[1-5][0-9]{14}$/D',",
      "78:             '/^2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12})$/D',",
      "82:             '/^220[0-4][0-9]{12,15}$/D',",
      "86:             '/^1[0-9]{14}$/D',",
      "90:             '/^4([0-9]{12}|[0-9]{15}|[0-9]{18})$/D',",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Constraints/CssColorValidator.php||src/Symfony/Component/Validator/Constraints/CssColorValidator.php": [
      "File: src/Symfony/Component/Validator/Constraints/CssColorValidator.php -> src/Symfony/Component/Validator/Constraints/CssColorValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: class CssColorValidator extends ConstraintValidator",
      "23: {",
      "40:     private const COLOR_PATTERNS = [",
      "41:         CssColor::HEX_LONG => self::PATTERN_HEX_LONG,",
      "",
      "[Removed Lines]",
      "24:     private const PATTERN_HEX_LONG = '/^#[0-9a-f]{6}$/i';",
      "25:     private const PATTERN_HEX_LONG_WITH_ALPHA = '/^#[0-9a-f]{8}$/i';",
      "26:     private const PATTERN_HEX_SHORT = '/^#[0-9a-f]{3}$/i';",
      "27:     private const PATTERN_HEX_SHORT_WITH_ALPHA = '/^#[0-9a-f]{4}$/i';",
      "29:     private const PATTERN_BASIC_NAMED_COLORS = '/^(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua)$/i';",
      "31:     private const PATTERN_EXTENDED_NAMED_COLORS = '/^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/i';",
      "33:     private const PATTERN_SYSTEM_COLORS = '/^(Canvas|CanvasText|LinkText|VisitedText|ActiveText|ButtonFace|ButtonText|ButtonBorder|Field|FieldText|Highlight|HighlightText|SelectedItem|SelectedItemText|Mark|MarkText|GrayText)$/i';",
      "34:     private const PATTERN_KEYWORDS = '/^(transparent|currentColor)$/i';",
      "35:     private const PATTERN_RGB = '/^rgb\\(\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d)\\s*\\)$/i';",
      "36:     private const PATTERN_RGBA = '/^rgba\\(\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|0?\\.\\d+|1(\\.0)?)\\s*\\)$/i';",
      "37:     private const PATTERN_HSL = '/^hsl\\(\\s*(0|360|35\\d|3[0-4]\\d|[12]\\d\\d|0?\\d?\\d),\\s*(0|100|\\d{1,2})%,\\s*(0|100|\\d{1,2})%\\s*\\)$/i';",
      "38:     private const PATTERN_HSLA = '/^hsla\\(\\s*(0|360|35\\d|3[0-4]\\d|[12]\\d\\d|0?\\d?\\d),\\s*(0|100|\\d{1,2})%,\\s*(0|100|\\d{1,2})%,\\s*(0|0?\\.\\d+|1(\\.0)?)\\s*\\)$/i';",
      "",
      "[Added Lines]",
      "24:     private const PATTERN_HEX_LONG = '/^#[0-9a-f]{6}$/iD';",
      "25:     private const PATTERN_HEX_LONG_WITH_ALPHA = '/^#[0-9a-f]{8}$/iD';",
      "26:     private const PATTERN_HEX_SHORT = '/^#[0-9a-f]{3}$/iD';",
      "27:     private const PATTERN_HEX_SHORT_WITH_ALPHA = '/^#[0-9a-f]{4}$/iD';",
      "29:     private const PATTERN_BASIC_NAMED_COLORS = '/^(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua)$/iD';",
      "31:     private const PATTERN_EXTENDED_NAMED_COLORS = '/^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/iD';",
      "33:     private const PATTERN_SYSTEM_COLORS = '/^(Canvas|CanvasText|LinkText|VisitedText|ActiveText|ButtonFace|ButtonText|ButtonBorder|Field|FieldText|Highlight|HighlightText|SelectedItem|SelectedItemText|Mark|MarkText|GrayText)$/iD';",
      "34:     private const PATTERN_KEYWORDS = '/^(transparent|currentColor)$/iD';",
      "35:     private const PATTERN_RGB = '/^rgb\\(\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d)\\s*\\)$/iD';",
      "36:     private const PATTERN_RGBA = '/^rgba\\(\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),\\s*(0|0?\\.\\d+|1(\\.0)?)\\s*\\)$/iD';",
      "37:     private const PATTERN_HSL = '/^hsl\\(\\s*(0|360|35\\d|3[0-4]\\d|[12]\\d\\d|0?\\d?\\d),\\s*(0|100|\\d{1,2})%,\\s*(0|100|\\d{1,2})%\\s*\\)$/iD';",
      "38:     private const PATTERN_HSLA = '/^hsla\\(\\s*(0|360|35\\d|3[0-4]\\d|[12]\\d\\d|0?\\d?\\d),\\s*(0|100|\\d{1,2})%,\\s*(0|100|\\d{1,2})%,\\s*(0|0?\\.\\d+|1(\\.0)?)\\s*\\)$/iD';",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Constraints/DateValidator.php||src/Symfony/Component/Validator/Constraints/DateValidator.php": [
      "File: src/Symfony/Component/Validator/Constraints/DateValidator.php -> src/Symfony/Component/Validator/Constraints/DateValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: class DateValidator extends ConstraintValidator",
      "23: {",
      "",
      "[Removed Lines]",
      "24:     public const PATTERN = '/^(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})$/';",
      "",
      "[Added Lines]",
      "24:     public const PATTERN = '/^(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})$/D';",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Constraints/EmailValidator.php||src/Symfony/Component/Validator/Constraints/EmailValidator.php": [
      "File: src/Symfony/Component/Validator/Constraints/EmailValidator.php -> src/Symfony/Component/Validator/Constraints/EmailValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: class EmailValidator extends ConstraintValidator",
      "27: {",
      "31:     private const EMAIL_PATTERNS = [",
      "32:         Email::VALIDATION_MODE_LOOSE => self::PATTERN_LOOSE,",
      "",
      "[Removed Lines]",
      "28:     private const PATTERN_HTML5 = '/^[a-zA-Z0-9.!#$%&\\'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/';",
      "29:     private const PATTERN_LOOSE = '/^.+\\@\\S+\\.\\S+$/';",
      "",
      "[Added Lines]",
      "28:     private const PATTERN_HTML5 = '/^[a-zA-Z0-9.!#$%&\\'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/D';",
      "29:     private const PATTERN_LOOSE = '/^.+\\@\\S+\\.\\S+$/D';",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Constraints/TimeValidator.php||src/Symfony/Component/Validator/Constraints/TimeValidator.php": [
      "File: src/Symfony/Component/Validator/Constraints/TimeValidator.php -> src/Symfony/Component/Validator/Constraints/TimeValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: class TimeValidator extends ConstraintValidator",
      "23: {",
      "",
      "[Removed Lines]",
      "24:     public const PATTERN = '/^(\\d{2}):(\\d{2}):(\\d{2})$/';",
      "",
      "[Added Lines]",
      "24:     public const PATTERN = '/^(\\d{2}):(\\d{2}):(\\d{2})$/D';",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Constraints/UrlValidator.php||src/Symfony/Component/Validator/Constraints/UrlValidator.php": [
      "File: src/Symfony/Component/Validator/Constraints/UrlValidator.php -> src/Symfony/Component/Validator/Constraints/UrlValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:             (?:/ (?:[\\pL\\pN\\pS\\pM\\-._\\~!$&\\'()*+,;=:@]|%%[0-9A-Fa-f]{2})* )*    # a path",
      "44:             (?:\\? (?:[\\pL\\pN\\-._\\~!$&\\'\\[\\]()*+,;=:@/?]|%%[0-9A-Fa-f]{2})* )?   # a query (optional)",
      "45:             (?:\\# (?:[\\pL\\pN\\-._\\~!$&\\'()*+,;=:@/?]|%%[0-9A-Fa-f]{2})* )?       # a fragment (optional)",
      "",
      "[Removed Lines]",
      "46:         $~ixu';",
      "",
      "[Added Lines]",
      "46:         $~ixuD';",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:         $this->assertNoViolation();",
      "47:     }",
      "49:     public function testValidNumberWithOrderedArguments()",
      "50:     {",
      "51:         $this->validator->validate(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     public function testValidNumbersWithNewLine($scheme, $number)",
      "55:     {",
      "56:         $this->validator->validate($number.\"\\n\", new CardScheme(['schemes' => $scheme, 'message' => 'myMessage']));",
      "58:         $this->buildViolation('myMessage')",
      "59:             ->setParameter('{{ value }}', '\"'.$number.\"\\n\\\"\")",
      "60:             ->setCode(CardScheme::INVALID_FORMAT_ERROR)",
      "61:             ->assertRaised();",
      "62:     }",
      "69:     public function testValidNumbersWithNewLinePriorToPhp8($scheme, $number)",
      "70:     {",
      "71:         $this->validator->validate($number.\"\\n\", new CardScheme(['schemes' => $scheme, 'message' => 'myMessage']));",
      "73:         $this->buildViolation('myMessage')",
      "74:             ->setParameter('{{ value }}', '\"'.$number.\"\\n\\\"\")",
      "75:             ->setCode(CardScheme::NOT_NUMERIC_ERROR)",
      "76:             ->assertRaised();",
      "77:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CssColorValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         $this->assertNoViolation();",
      "53:     }",
      "55:     public static function getValidAnyColor(): array",
      "56:     {",
      "57:         return [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     public function testValidAnyColorWithNewLine($cssColor)",
      "59:     {",
      "60:         $this->validator->validate($cssColor.\"\\n\", new CssColor([], 'myMessage'));",
      "62:         $this->buildViolation('myMessage')",
      "63:             ->setParameter('{{ value }}', '\"'.$cssColor.\"\\n\\\"\")",
      "64:             ->setCode(CssColor::INVALID_FORMAT_ERROR)",
      "65:             ->assertRaised();",
      "66:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:         $this->assertNoViolation();",
      "54:     }",
      "56:     public static function getValidDates()",
      "57:     {",
      "58:         return [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:     public function testValidDatesWithNewLine(string $date)",
      "60:     {",
      "61:         $this->validator->validate($date.\"\\n\", new Date(['message' => 'myMessage']));",
      "63:         $this->buildViolation('myMessage')",
      "64:             ->setParameter('{{ value }}', '\"'.$date.\"\\n\\\"\")",
      "65:             ->setCode(Date::INVALID_FORMAT_ERROR)",
      "66:             ->assertRaised();",
      "67:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:         $this->assertNoViolation();",
      "71:     }",
      "73:     public static function getValidEmails()",
      "74:     {",
      "75:         return [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:     public function testValidEmailsWithNewLine($email)",
      "77:     {",
      "78:         $this->validator->validate($email.\"\\n\", new Email());",
      "80:         $this->buildViolation('This value is not a valid email address.')",
      "81:             ->setParameter('{{ value }}', '\"'.$email.\"\\n\\\"\")",
      "82:             ->setCode(Email::INVALID_FORMAT_ERROR)",
      "83:             ->assertRaised();",
      "84:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:         $this->assertNoViolation();",
      "49:     }",
      "51:     public static function getValidIbans()",
      "52:     {",
      "53:         return [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     public function testValidIbansWithNewLine(string $iban)",
      "55:     {",
      "56:         $this->validator->validate($iban.\"\\n\", new Iban());",
      "58:         $this->buildViolation('This is not a valid International Bank Account Number (IBAN).')",
      "59:             ->setParameter('{{ value }}', '\"'.$iban.\"\\n\\\"\")",
      "60:             ->setCode(Iban::INVALID_CHARACTERS_ERROR)",
      "61:             ->assertRaised();",
      "62:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:         $this->assertNoViolation();",
      "54:     }",
      "56:     public static function getValidTimes()",
      "57:     {",
      "58:         return [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:     public function testValidTimesWithNewLine(string $time)",
      "60:     {",
      "61:         $this->validator->validate($time.\"\\n\", new Time());",
      "63:         $this->buildViolation('This value is not a valid time.')",
      "64:             ->setParameter('{{ value }}', '\"'.$time.\"\\n\".'\"')",
      "65:             ->setCode(Time::INVALID_FORMAT_ERROR)",
      "66:             ->assertRaised();",
      "67:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php": [
      "File: src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:         $this->assertNoViolation();",
      "61:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     public function testValidUrlsWithNewLine($url)",
      "67:     {",
      "68:         $this->validator->validate($url.\"\\n\", new Url());",
      "70:         $this->buildViolation('This value is not a valid URL.')",
      "71:             ->setParameter('{{ value }}', '\"'.$url.\"\\n\".'\"')",
      "72:             ->setCode(Url::INVALID_URL_ERROR)",
      "73:             ->assertRaised();",
      "74:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:         $this->assertNoViolation();",
      "86:     }",
      "88:     public static function getValidRelativeUrls()",
      "89:     {",
      "90:         return [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     public function testValidRelativeUrlWithNewLine(string $url)",
      "106:     {",
      "107:         $constraint = new Url([",
      "108:             'relativeProtocol' => true,",
      "109:         ]);",
      "111:         $this->validator->validate($url.\"\\n\", $constraint);",
      "113:         $this->buildViolation('This value is not a valid URL.')",
      "114:             ->setParameter('{{ value }}', '\"'.$url.\"\\n\".'\"')",
      "115:             ->setCode(Url::INVALID_URL_ERROR)",
      "116:             ->assertRaised();",
      "117:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d2be3841a3deb0868274dd5111282ba67caf2c1",
      "candidate_info": {
        "commit_hash": "3d2be3841a3deb0868274dd5111282ba67caf2c1",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/3d2be3841a3deb0868274dd5111282ba67caf2c1",
        "files": [
          "src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php",
          "src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php",
          "src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php",
          "src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php",
          "src/Symfony/Component/Validator/Constraints/AbstractComparison.php",
          "src/Symfony/Component/Validator/Constraints/All.php",
          "src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php",
          "src/Symfony/Component/Validator/Constraints/Bic.php",
          "src/Symfony/Component/Validator/Constraints/Blank.php",
          "src/Symfony/Component/Validator/Constraints/Callback.php",
          "src/Symfony/Component/Validator/Constraints/CardScheme.php",
          "src/Symfony/Component/Validator/Constraints/Cascade.php",
          "src/Symfony/Component/Validator/Constraints/Choice.php",
          "src/Symfony/Component/Validator/Constraints/Cidr.php",
          "src/Symfony/Component/Validator/Constraints/Collection.php",
          "src/Symfony/Component/Validator/Constraints/Count.php",
          "src/Symfony/Component/Validator/Constraints/CountValidator.php",
          "src/Symfony/Component/Validator/Constraints/Country.php",
          "src/Symfony/Component/Validator/Constraints/CssColor.php",
          "src/Symfony/Component/Validator/Constraints/Currency.php",
          "src/Symfony/Component/Validator/Constraints/Date.php",
          "src/Symfony/Component/Validator/Constraints/DateTime.php",
          "src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php",
          "src/Symfony/Component/Validator/Constraints/Email.php",
          "src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php",
          "src/Symfony/Component/Validator/Constraints/Expression.php",
          "src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php",
          "src/Symfony/Component/Validator/Constraints/File.php",
          "src/Symfony/Component/Validator/Constraints/Hostname.php",
          "src/Symfony/Component/Validator/Constraints/Iban.php",
          "src/Symfony/Component/Validator/Constraints/Ip.php",
          "src/Symfony/Component/Validator/Constraints/IsFalse.php",
          "src/Symfony/Component/Validator/Constraints/IsNull.php",
          "src/Symfony/Component/Validator/Constraints/IsTrue.php",
          "src/Symfony/Component/Validator/Constraints/Isbn.php",
          "src/Symfony/Component/Validator/Constraints/Isin.php",
          "src/Symfony/Component/Validator/Constraints/Issn.php",
          "src/Symfony/Component/Validator/Constraints/Json.php",
          "src/Symfony/Component/Validator/Constraints/Language.php",
          "src/Symfony/Component/Validator/Constraints/Length.php",
          "src/Symfony/Component/Validator/Constraints/Locale.php",
          "src/Symfony/Component/Validator/Constraints/Luhn.php",
          "src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php",
          "src/Symfony/Component/Validator/Constraints/NotBlank.php",
          "src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php",
          "src/Symfony/Component/Validator/Constraints/NotNull.php",
          "src/Symfony/Component/Validator/Constraints/PasswordStrength.php",
          "src/Symfony/Component/Validator/Constraints/Range.php",
          "src/Symfony/Component/Validator/Constraints/Regex.php",
          "src/Symfony/Component/Validator/Constraints/Sequentially.php",
          "src/Symfony/Component/Validator/Constraints/Time.php",
          "src/Symfony/Component/Validator/Constraints/Timezone.php",
          "src/Symfony/Component/Validator/Constraints/Traverse.php",
          "src/Symfony/Component/Validator/Constraints/Type.php",
          "src/Symfony/Component/Validator/Constraints/Ulid.php",
          "src/Symfony/Component/Validator/Constraints/Unique.php",
          "src/Symfony/Component/Validator/Constraints/Url.php",
          "src/Symfony/Component/Validator/Constraints/Uuid.php",
          "src/Symfony/Component/Validator/Constraints/Valid.php",
          "src/Symfony/Component/Validator/Constraints/When.php",
          "src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php",
          "src/Symfony/Component/Validator/Context/ExecutionContextInterface.php",
          "src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php",
          "src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php",
          "src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/FileTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IpTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/constraint-without-named-arguments-support.xml",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/constraint-without-named-arguments-support.yml",
          "src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php",
          "src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php"
        ],
        "message": "deprecate the use of option arrays to configure validation constraints",
        "before_after_code_files": [
          "src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php||src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php",
          "src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php||src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php",
          "src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php||src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php",
          "src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php||src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php",
          "src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php",
          "src/Symfony/Component/Validator/Constraints/AbstractComparison.php||src/Symfony/Component/Validator/Constraints/AbstractComparison.php",
          "src/Symfony/Component/Validator/Constraints/All.php||src/Symfony/Component/Validator/Constraints/All.php",
          "src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php||src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php",
          "src/Symfony/Component/Validator/Constraints/Bic.php||src/Symfony/Component/Validator/Constraints/Bic.php",
          "src/Symfony/Component/Validator/Constraints/Blank.php||src/Symfony/Component/Validator/Constraints/Blank.php",
          "src/Symfony/Component/Validator/Constraints/Callback.php||src/Symfony/Component/Validator/Constraints/Callback.php",
          "src/Symfony/Component/Validator/Constraints/CardScheme.php||src/Symfony/Component/Validator/Constraints/CardScheme.php",
          "src/Symfony/Component/Validator/Constraints/Cascade.php||src/Symfony/Component/Validator/Constraints/Cascade.php",
          "src/Symfony/Component/Validator/Constraints/Choice.php||src/Symfony/Component/Validator/Constraints/Choice.php",
          "src/Symfony/Component/Validator/Constraints/Cidr.php||src/Symfony/Component/Validator/Constraints/Cidr.php",
          "src/Symfony/Component/Validator/Constraints/Collection.php||src/Symfony/Component/Validator/Constraints/Collection.php",
          "src/Symfony/Component/Validator/Constraints/Count.php||src/Symfony/Component/Validator/Constraints/Count.php",
          "src/Symfony/Component/Validator/Constraints/CountValidator.php||src/Symfony/Component/Validator/Constraints/CountValidator.php",
          "src/Symfony/Component/Validator/Constraints/Country.php||src/Symfony/Component/Validator/Constraints/Country.php",
          "src/Symfony/Component/Validator/Constraints/CssColor.php||src/Symfony/Component/Validator/Constraints/CssColor.php",
          "src/Symfony/Component/Validator/Constraints/Currency.php||src/Symfony/Component/Validator/Constraints/Currency.php",
          "src/Symfony/Component/Validator/Constraints/Date.php||src/Symfony/Component/Validator/Constraints/Date.php",
          "src/Symfony/Component/Validator/Constraints/DateTime.php||src/Symfony/Component/Validator/Constraints/DateTime.php",
          "src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php||src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php",
          "src/Symfony/Component/Validator/Constraints/Email.php||src/Symfony/Component/Validator/Constraints/Email.php",
          "src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php||src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php",
          "src/Symfony/Component/Validator/Constraints/Expression.php||src/Symfony/Component/Validator/Constraints/Expression.php",
          "src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php||src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php",
          "src/Symfony/Component/Validator/Constraints/File.php||src/Symfony/Component/Validator/Constraints/File.php",
          "src/Symfony/Component/Validator/Constraints/Hostname.php||src/Symfony/Component/Validator/Constraints/Hostname.php",
          "src/Symfony/Component/Validator/Constraints/Iban.php||src/Symfony/Component/Validator/Constraints/Iban.php",
          "src/Symfony/Component/Validator/Constraints/Ip.php||src/Symfony/Component/Validator/Constraints/Ip.php",
          "src/Symfony/Component/Validator/Constraints/IsFalse.php||src/Symfony/Component/Validator/Constraints/IsFalse.php",
          "src/Symfony/Component/Validator/Constraints/IsNull.php||src/Symfony/Component/Validator/Constraints/IsNull.php",
          "src/Symfony/Component/Validator/Constraints/IsTrue.php||src/Symfony/Component/Validator/Constraints/IsTrue.php",
          "src/Symfony/Component/Validator/Constraints/Isbn.php||src/Symfony/Component/Validator/Constraints/Isbn.php",
          "src/Symfony/Component/Validator/Constraints/Isin.php||src/Symfony/Component/Validator/Constraints/Isin.php",
          "src/Symfony/Component/Validator/Constraints/Issn.php||src/Symfony/Component/Validator/Constraints/Issn.php",
          "src/Symfony/Component/Validator/Constraints/Json.php||src/Symfony/Component/Validator/Constraints/Json.php",
          "src/Symfony/Component/Validator/Constraints/Language.php||src/Symfony/Component/Validator/Constraints/Language.php",
          "src/Symfony/Component/Validator/Constraints/Length.php||src/Symfony/Component/Validator/Constraints/Length.php",
          "src/Symfony/Component/Validator/Constraints/Locale.php||src/Symfony/Component/Validator/Constraints/Locale.php",
          "src/Symfony/Component/Validator/Constraints/Luhn.php||src/Symfony/Component/Validator/Constraints/Luhn.php",
          "src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php||src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php",
          "src/Symfony/Component/Validator/Constraints/NotBlank.php||src/Symfony/Component/Validator/Constraints/NotBlank.php",
          "src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php||src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php",
          "src/Symfony/Component/Validator/Constraints/NotNull.php||src/Symfony/Component/Validator/Constraints/NotNull.php",
          "src/Symfony/Component/Validator/Constraints/PasswordStrength.php||src/Symfony/Component/Validator/Constraints/PasswordStrength.php",
          "src/Symfony/Component/Validator/Constraints/Range.php||src/Symfony/Component/Validator/Constraints/Range.php",
          "src/Symfony/Component/Validator/Constraints/Regex.php||src/Symfony/Component/Validator/Constraints/Regex.php",
          "src/Symfony/Component/Validator/Constraints/Sequentially.php||src/Symfony/Component/Validator/Constraints/Sequentially.php",
          "src/Symfony/Component/Validator/Constraints/Time.php||src/Symfony/Component/Validator/Constraints/Time.php",
          "src/Symfony/Component/Validator/Constraints/Timezone.php||src/Symfony/Component/Validator/Constraints/Timezone.php",
          "src/Symfony/Component/Validator/Constraints/Traverse.php||src/Symfony/Component/Validator/Constraints/Traverse.php",
          "src/Symfony/Component/Validator/Constraints/Type.php||src/Symfony/Component/Validator/Constraints/Type.php",
          "src/Symfony/Component/Validator/Constraints/Ulid.php||src/Symfony/Component/Validator/Constraints/Ulid.php",
          "src/Symfony/Component/Validator/Constraints/Unique.php||src/Symfony/Component/Validator/Constraints/Unique.php",
          "src/Symfony/Component/Validator/Constraints/Url.php||src/Symfony/Component/Validator/Constraints/Url.php",
          "src/Symfony/Component/Validator/Constraints/Uuid.php||src/Symfony/Component/Validator/Constraints/Uuid.php",
          "src/Symfony/Component/Validator/Constraints/Valid.php||src/Symfony/Component/Validator/Constraints/Valid.php",
          "src/Symfony/Component/Validator/Constraints/When.php||src/Symfony/Component/Validator/Constraints/When.php",
          "src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php||src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php",
          "src/Symfony/Component/Validator/Context/ExecutionContextInterface.php||src/Symfony/Component/Validator/Context/ExecutionContextInterface.php",
          "src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php||src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php",
          "src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php||src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php",
          "src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php||src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php||src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php||src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php||src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php||src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php||src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php||src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php||src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php||src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/FileTest.php||src/Symfony/Component/Validator/Tests/Constraints/FileTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php||src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php||src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IpTest.php||src/Symfony/Component/Validator/Tests/Constraints/IpTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php||src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php||src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php||src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php||src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php||src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php||src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php||src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php",
          "src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php||src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php||src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php||src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php||src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php",
          "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php||src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php||src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php",
          "src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php||src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php",
          "src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php||src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
            "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php||src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php": [
          "File: src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php -> src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityTest.php"
        ],
        "src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php||src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php": [
          "File: src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php -> src/Symfony/Bridge/Doctrine/Tests/Validator/Constraints/UniqueEntityValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     {",
          "173:         $entity1 = new SingleIntIdEntity(1, 'Foo');",
          "174:         $entity2 = new SingleIntIdEntity(2, 'Foo');",
          "",
          "[Removed Lines]",
          "171:     public function testValidateUniqueness(UniqueEntity $constraint)",
          "",
          "[Added Lines]",
          "169:     public function testValidateUniqueness()",
          "171:         $constraint = new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:         $entity = $this->em->getReference(SingleIntIdWithPrivateNameEntity::class, 1);",
          "220:         $this->validator->validate($entity, new UniqueEntity([",
          "221:             'fields' => ['name'],",
          "222:             'em' => self::EM_NAME,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:         $this->validator->validate($entity, new UniqueEntity(",
          "221:             fields: ['name'],",
          "222:             em: self::EM_NAME,",
          "223:         ));",
          "225:         $this->assertNoViolation();",
          "226:     }",
          "231:     public function testValidateEntityWithPrivatePropertyAndProxyObjectDoctrineStyle()",
          "232:     {",
          "233:         $entity = new SingleIntIdWithPrivateNameEntity(1, 'Foo');",
          "234:         $this->em->persist($entity);",
          "235:         $this->em->flush();",
          "237:         $this->em->clear();",
          "240:         $entity = $this->em->getReference(SingleIntIdWithPrivateNameEntity::class, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:         $this->assertNoViolation();",
          "226:     }",
          "232:     {",
          "233:         $entity1 = new SingleIntIdEntity(1, 'Foo');",
          "234:         $entity2 = new SingleIntIdEntity(2, 'Foo');",
          "",
          "[Removed Lines]",
          "231:     public function testValidateCustomErrorPath(UniqueEntity $constraint)",
          "",
          "[Added Lines]",
          "250:     public function testValidateCustomErrorPath()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:         $this->em->persist($entity1);",
          "237:         $this->em->flush();",
          "241:         $this->buildViolation('myMessage')",
          "242:             ->atPath('property.path.bar')",
          "",
          "[Removed Lines]",
          "239:         $this->validator->validate($entity2, $constraint);",
          "",
          "[Added Lines]",
          "258:         $this->validator->validate($entity2, new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo', errorPath: 'bar'));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "247:             ->assertRaised();",
          "248:     }",
          "251:     {",
          "253:             'message' => 'myMessage',",
          "254:             'fields' => ['name'],",
          "256:             'errorPath' => 'bar',",
          "260:     }",
          "266:     {",
          "267:         $entity1 = new SingleIntIdEntity(1, null);",
          "268:         $entity2 = new SingleIntIdEntity(2, null);",
          "",
          "[Removed Lines]",
          "250:     public static function provideConstraintsWithCustomErrorPath(): iterable",
          "252:         yield 'Doctrine style' => [new UniqueEntity([",
          "255:             'em' => self::EM_NAME,",
          "257:         ])];",
          "259:         yield 'Named arguments' => [new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo', errorPath: 'bar')];",
          "265:     public function testValidateUniquenessWithNull(UniqueEntity $constraint)",
          "",
          "[Added Lines]",
          "272:     public function testValidateCustomErrorPathDoctrineStyle()",
          "274:         $entity1 = new SingleIntIdEntity(1, 'Foo');",
          "275:         $entity2 = new SingleIntIdEntity(2, 'Foo');",
          "277:         $this->em->persist($entity1);",
          "278:         $this->em->flush();",
          "280:         $this->validator->validate($entity2, new UniqueEntity([",
          "283:             'em' => 'foo',",
          "285:         ]));",
          "287:         $this->buildViolation('myMessage')",
          "288:             ->atPath('property.path.bar')",
          "289:             ->setParameter('{{ value }}', '\"Foo\"')",
          "290:             ->setInvalidValue($entity2)",
          "291:             ->setCause([$entity1])",
          "292:             ->setCode(UniqueEntity::NOT_UNIQUE_ERROR)",
          "293:             ->assertRaised();",
          "296:     public function testValidateUniquenessWithNull()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:         $this->em->persist($entity2);",
          "272:         $this->em->flush();",
          "276:         $this->assertNoViolation();",
          "277:     }",
          "",
          "[Removed Lines]",
          "274:         $this->validator->validate($entity1, $constraint);",
          "",
          "[Added Lines]",
          "305:         $this->validator->validate($entity1, new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo'));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "310:     public static function provideConstraintsWithIgnoreNullDisabled(): iterable",
          "311:     {",
          "319:         yield 'Named arguments' => [new UniqueEntity(message: 'myMessage', fields: ['name', 'name2'], em: 'foo', ignoreNull: false)];",
          "320:     }",
          "",
          "[Removed Lines]",
          "312:         yield 'Doctrine style' => [new UniqueEntity([",
          "313:             'message' => 'myMessage',",
          "314:             'fields' => ['name', 'name2'],",
          "315:             'em' => self::EM_NAME,",
          "316:             'ignoreNull' => false,",
          "317:         ])];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "358:     public static function provideConstraintsWithIgnoreNullEnabled(): iterable",
          "359:     {",
          "367:         yield 'Named arguments' => [new UniqueEntity(message: 'myMessage', fields: ['name', 'name2'], em: 'foo', ignoreNull: true)];",
          "368:     }",
          "370:     public static function provideConstraintsWithIgnoreNullEnabledOnFirstField(): iterable",
          "371:     {",
          "379:         yield 'Named arguments (name field)' => [new UniqueEntity(message: 'myMessage', fields: ['name', 'name2'], em: 'foo', ignoreNull: 'name')];",
          "380:     }",
          "382:     public function testValidateUniquenessWithValidCustomErrorPath()",
          "383:     {",
          "391:         $entity1 = new DoubleNameEntity(1, 'Foo', 'Bar');",
          "392:         $entity2 = new DoubleNameEntity(2, 'Foo', 'Bar');",
          "",
          "[Removed Lines]",
          "360:         yield 'Doctrine style' => [new UniqueEntity([",
          "361:             'message' => 'myMessage',",
          "362:             'fields' => ['name', 'name2'],",
          "363:             'em' => self::EM_NAME,",
          "364:             'ignoreNull' => true,",
          "365:         ])];",
          "372:         yield 'Doctrine style (name field)' => [new UniqueEntity([",
          "373:             'message' => 'myMessage',",
          "374:             'fields' => ['name', 'name2'],",
          "375:             'em' => self::EM_NAME,",
          "376:             'ignoreNull' => 'name',",
          "377:         ])];",
          "384:         $constraint = new UniqueEntity([",
          "385:             'message' => 'myMessage',",
          "386:             'fields' => ['name', 'name2'],",
          "387:             'em' => self::EM_NAME,",
          "388:             'errorPath' => 'name2',",
          "389:         ]);",
          "",
          "[Added Lines]",
          "394:         $constraint = new UniqueEntity(",
          "395:             message: 'myMessage',",
          "396:             fields: ['name', 'name2'],",
          "397:             em: self::EM_NAME,",
          "398:             errorPath: 'name2',",
          "399:         );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "413:             ->assertRaised();",
          "414:     }",
          "420:     {",
          "421:         $repository = $this->createRepositoryMock(SingleIntIdEntity::class);",
          "422:         $repository->expects($this->once())",
          "",
          "[Removed Lines]",
          "419:     public function testValidateUniquenessUsingCustomRepositoryMethod(UniqueEntity $constraint)",
          "",
          "[Added Lines]",
          "426:     public function testValidateUniquenessUsingCustomRepositoryMethod()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "431:         $entity1 = new SingleIntIdEntity(1, 'foo');",
          "435:         $this->assertNoViolation();",
          "436:     }",
          "442:     {",
          "443:         $entity = new SingleIntIdEntity(1, 'foo');",
          "",
          "[Removed Lines]",
          "433:         $this->validator->validate($entity1, $constraint);",
          "441:     public function testValidateUniquenessWithUnrewoundArray(UniqueEntity $constraint)",
          "",
          "[Added Lines]",
          "440:         $this->validator->validate($entity1, new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo', repositoryMethod: 'findByCustom'));",
          "445:     public function testValidateUniquenessWithUnrewoundArray()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "461:         $this->validator = $this->createValidator();",
          "462:         $this->validator->initialize($this->context);",
          "466:         $this->assertNoViolation();",
          "467:     }",
          "484:     public function testValidateResultTypes($entity1, $result)",
          "485:     {",
          "493:         $repository = $this->createRepositoryMock($entity1::class);",
          "494:         $repository->expects($this->once())",
          "",
          "[Removed Lines]",
          "464:         $this->validator->validate($entity, $constraint);",
          "469:     public static function provideConstraintsWithCustomRepositoryMethod(): iterable",
          "470:     {",
          "471:         yield 'Doctrine style' => [new UniqueEntity([",
          "472:             'message' => 'myMessage',",
          "473:             'fields' => ['name'],",
          "474:             'em' => self::EM_NAME,",
          "475:             'repositoryMethod' => 'findByCustom',",
          "476:         ])];",
          "478:         yield 'Named arguments' => [new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo', repositoryMethod: 'findByCustom')];",
          "479:     }",
          "486:         $constraint = new UniqueEntity([",
          "487:             'message' => 'myMessage',",
          "488:             'fields' => ['name'],",
          "489:             'em' => self::EM_NAME,",
          "490:             'repositoryMethod' => 'findByCustom',",
          "491:         ]);",
          "",
          "[Added Lines]",
          "468:         $this->validator->validate($entity, new UniqueEntity(message: 'myMessage', fields: ['name'], em: 'foo', repositoryMethod: 'findByCustom'));",
          "478:         $constraint = new UniqueEntity(",
          "479:             message: 'myMessage',",
          "480:             fields: ['name'],",
          "481:             em: self::EM_NAME,",
          "482:             repositoryMethod: 'findByCustom',",
          "483:         );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "519:     public function testAssociatedEntity()",
          "520:     {",
          "527:         $entity1 = new SingleIntIdEntity(1, 'foo');",
          "528:         $associated = new AssociationEntity();",
          "",
          "[Removed Lines]",
          "521:         $constraint = new UniqueEntity([",
          "522:             'message' => 'myMessage',",
          "523:             'fields' => ['single'],",
          "524:             'em' => self::EM_NAME,",
          "525:         ]);",
          "",
          "[Added Lines]",
          "513:         $constraint = new UniqueEntity(",
          "514:             message: 'myMessage',",
          "515:             fields: ['single'],",
          "516:             em: self::EM_NAME,",
          "517:         );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "555:     public function testValidateUniquenessNotToStringEntityWithAssociatedEntity()",
          "556:     {",
          "563:         $entity1 = new SingleIntIdNoToStringEntity(1, 'foo');",
          "564:         $associated = new AssociationEntity2();",
          "",
          "[Removed Lines]",
          "557:         $constraint = new UniqueEntity([",
          "558:             'message' => 'myMessage',",
          "559:             'fields' => ['single'],",
          "560:             'em' => self::EM_NAME,",
          "561:         ]);",
          "",
          "[Added Lines]",
          "549:         $constraint = new UniqueEntity(",
          "550:             message: 'myMessage',",
          "551:             fields: ['single'],",
          "552:             em: self::EM_NAME,",
          "553:         );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "593:     public function testAssociatedEntityWithNull()",
          "594:     {",
          "602:         $associated = new AssociationEntity();",
          "603:         $associated->single = null;",
          "",
          "[Removed Lines]",
          "595:         $constraint = new UniqueEntity([",
          "596:             'message' => 'myMessage',",
          "597:             'fields' => ['single'],",
          "598:             'em' => self::EM_NAME,",
          "599:             'ignoreNull' => false,",
          "600:         ]);",
          "",
          "[Added Lines]",
          "587:         $constraint = new UniqueEntity(",
          "588:             message: 'myMessage',",
          "589:             fields: ['single'],",
          "590:             em: self::EM_NAME,",
          "591:             ignoreNull: false,",
          "592:         );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "649:         $repository = $this->createRepositoryMock(SingleIntIdEntity::class);",
          "650:         $this->repositoryFactory->setRepository($this->em, SingleIntIdEntity::class, $repository);",
          "659:         $entity1 = new SingleIntIdEntity(1, 'foo');",
          "660:         $entity1->phoneNumbers[] = 123;",
          "",
          "[Removed Lines]",
          "652:         $constraint = new UniqueEntity([",
          "653:             'message' => 'myMessage',",
          "654:             'fields' => ['phoneNumbers'],",
          "655:             'em' => self::EM_NAME,",
          "656:             'repositoryMethod' => 'findByCustom',",
          "657:         ]);",
          "",
          "[Added Lines]",
          "644:         $constraint = new UniqueEntity(",
          "645:             message: 'myMessage',",
          "646:             fields: ['phoneNumbers'],",
          "647:             em: self::EM_NAME,",
          "648:             repositoryMethod: 'findByCustom',",
          "649:         );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "686:     public function testDedicatedEntityManagerNullObject()",
          "687:     {",
          "694:         $this->em = null;",
          "695:         $this->registry = $this->createRegistryMock($this->em);",
          "",
          "[Removed Lines]",
          "688:         $constraint = new UniqueEntity([",
          "689:             'message' => 'myMessage',",
          "690:             'fields' => ['name'],",
          "691:             'em' => self::EM_NAME,",
          "692:         ]);",
          "",
          "[Added Lines]",
          "680:         $constraint = new UniqueEntity(",
          "681:             message: 'myMessage',",
          "682:             fields: ['name'],",
          "683:             em: self::EM_NAME,",
          "684:         );",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "707:     public function testEntityManagerNullObject()",
          "708:     {",
          "715:         $this->em = null;",
          "716:         $this->registry = $this->createRegistryMock($this->em);",
          "",
          "[Removed Lines]",
          "709:         $constraint = new UniqueEntity([",
          "710:             'message' => 'myMessage',",
          "711:             'fields' => ['name'],",
          "713:         ]);",
          "",
          "[Added Lines]",
          "701:         $constraint = new UniqueEntity(",
          "702:             message: 'myMessage',",
          "703:             fields: ['name'],",
          "705:         );",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "738:         $this->validator = $this->createValidator();",
          "739:         $this->validator->initialize($this->context);",
          "747:         $entity = new SingleIntIdEntity(1, null);",
          "",
          "[Removed Lines]",
          "741:         $constraint = new UniqueEntity([",
          "742:             'message' => 'myMessage',",
          "743:             'fields' => ['name'],",
          "744:             'em' => self::EM_NAME,",
          "745:         ]);",
          "",
          "[Added Lines]",
          "733:         $constraint = new UniqueEntity(",
          "734:             message: 'myMessage',",
          "735:             fields: ['name'],",
          "736:             em: self::EM_NAME,",
          "737:         );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "756:     public function testValidateInheritanceUniqueness()",
          "757:     {",
          "765:         $entity1 = new Person(1, 'Foo');",
          "766:         $entity2 = new Employee(2, 'Foo');",
          "",
          "[Removed Lines]",
          "758:         $constraint = new UniqueEntity([",
          "759:             'message' => 'myMessage',",
          "760:             'fields' => ['name'],",
          "761:             'em' => self::EM_NAME,",
          "762:             'entityClass' => Person::class,",
          "763:         ]);",
          "",
          "[Added Lines]",
          "750:         $constraint = new UniqueEntity(",
          "751:             message: 'myMessage',",
          "752:             fields: ['name'],",
          "753:             em: self::EM_NAME,",
          "754:             entityClass: Person::class,",
          "755:         );",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "790:     public function testInvalidateRepositoryForInheritance()",
          "791:     {",
          "799:         $entity = new Person(1, 'Foo');",
          "",
          "[Removed Lines]",
          "792:         $constraint = new UniqueEntity([",
          "793:             'message' => 'myMessage',",
          "794:             'fields' => ['name'],",
          "795:             'em' => self::EM_NAME,",
          "796:             'entityClass' => SingleStringIdEntity::class,",
          "797:         ]);",
          "",
          "[Added Lines]",
          "784:         $constraint = new UniqueEntity(",
          "785:             message: 'myMessage',",
          "786:             fields: ['name'],",
          "787:             em: self::EM_NAME,",
          "788:             entityClass: SingleStringIdEntity::class,",
          "789:         );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "807:     public function testValidateUniquenessWithCompositeObjectNoToStringIdEntity()",
          "808:     {",
          "815:         $objectOne = new SingleIntIdNoToStringEntity(1, 'foo');",
          "816:         $objectTwo = new SingleIntIdNoToStringEntity(2, 'bar');",
          "",
          "[Removed Lines]",
          "809:         $constraint = new UniqueEntity([",
          "810:             'message' => 'myMessage',",
          "811:             'fields' => ['objectOne', 'objectTwo'],",
          "812:             'em' => self::EM_NAME,",
          "813:         ]);",
          "",
          "[Added Lines]",
          "801:         $constraint = new UniqueEntity(",
          "802:             message: 'myMessage',",
          "803:             fields: ['objectOne', 'objectTwo'],",
          "804:             em: self::EM_NAME,",
          "805:         );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "842:     public function testValidateUniquenessWithCustomDoctrineTypeValue()",
          "843:     {",
          "850:         $existingEntity = new SingleIntIdStringWrapperNameEntity(1, new StringWrapper('foo'));",
          "",
          "[Removed Lines]",
          "844:         $constraint = new UniqueEntity([",
          "845:             'message' => 'myMessage',",
          "846:             'fields' => ['name'],",
          "847:             'em' => self::EM_NAME,",
          "848:         ]);",
          "",
          "[Added Lines]",
          "836:         $constraint = new UniqueEntity(",
          "837:             message: 'myMessage',",
          "838:             fields: ['name'],",
          "839:             em: self::EM_NAME,",
          "840:         );",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "873:     public function testValidateUniquenessCause()",
          "874:     {",
          "881:         $entity1 = new SingleIntIdEntity(1, 'Foo');",
          "882:         $entity2 = new SingleIntIdEntity(2, 'Foo');",
          "",
          "[Removed Lines]",
          "875:         $constraint = new UniqueEntity([",
          "876:             'message' => 'myMessage',",
          "877:             'fields' => ['name'],",
          "878:             'em' => self::EM_NAME,",
          "879:         ]);",
          "",
          "[Added Lines]",
          "867:         $constraint = new UniqueEntity(",
          "868:             message: 'myMessage',",
          "869:             fields: ['name'],",
          "870:             em: self::EM_NAME,",
          "871:         );",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "909:     public function testValidateUniquenessWithEmptyIterator($entity, $result)",
          "910:     {",
          "918:         $repository = $this->createRepositoryMock($entity::class);",
          "919:         $repository->expects($this->once())",
          "",
          "[Removed Lines]",
          "911:         $constraint = new UniqueEntity([",
          "912:             'message' => 'myMessage',",
          "913:             'fields' => ['name'],",
          "914:             'em' => self::EM_NAME,",
          "915:             'repositoryMethod' => 'findByCustom',",
          "916:         ]);",
          "",
          "[Added Lines]",
          "903:         $constraint = new UniqueEntity(",
          "904:             message: 'myMessage',",
          "905:             fields: ['name'],",
          "906:             em: self::EM_NAME,",
          "907:             repositoryMethod: 'findByCustom',",
          "908:         );",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "933:     public function testValueMustBeObject()",
          "934:     {",
          "941:         $this->expectException(UnexpectedValueException::class);",
          "",
          "[Removed Lines]",
          "935:         $constraint = new UniqueEntity([",
          "936:             'message' => 'myMessage',",
          "937:             'fields' => ['name'],",
          "938:             'em' => self::EM_NAME,",
          "939:         ]);",
          "",
          "[Added Lines]",
          "927:         $constraint = new UniqueEntity(",
          "928:             message: 'myMessage',",
          "929:             fields: ['name'],",
          "930:             em: self::EM_NAME,",
          "931:         );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "946:     public function testValueCanBeNull()",
          "947:     {",
          "954:         $this->validator->validate(null, $constraint);",
          "",
          "[Removed Lines]",
          "948:         $constraint = new UniqueEntity([",
          "949:             'message' => 'myMessage',",
          "950:             'fields' => ['name'],",
          "951:             'em' => self::EM_NAME,",
          "952:         ]);",
          "",
          "[Added Lines]",
          "940:         $constraint = new UniqueEntity(",
          "941:             message: 'myMessage',",
          "942:             fields: ['name'],",
          "943:             em: self::EM_NAME,",
          "944:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php||src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php": [
          "File: src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php -> src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Bridge\\Doctrine\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     public function __construct(",
          "50:         array|string $fields,",
          "51:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         ?array $identifierFieldNames = null,",
          "59:         ?array $groups = null,",
          "60:         $payload = null,",
          "62:     ) {",
          "63:         if (\\is_array($fields) && \\is_string(key($fields)) && [] === array_diff(array_keys($fields), array_merge(array_keys(get_class_vars(static::class)), ['value']))) {",
          "65:         } else {",
          "66:             $options['fields'] = $fields;",
          "67:         }",
          "",
          "[Removed Lines]",
          "61:         array $options = [],",
          "64:             $options = array_merge($fields, $options);",
          "",
          "[Added Lines]",
          "63:         ?array $options = null,",
          "66:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "68:             $options = array_merge($fields, $options ?? []);",
          "70:             if (\\is_array($options)) {",
          "71:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "72:             } else {",
          "73:                 $options = [];",
          "74:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php||src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php": [
          "File: src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php -> src/Symfony/Bridge/Doctrine/Validator/DoctrineLoader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:             }",
          "92:             if (true === (self::getFieldMappingValue($mapping, 'unique') ?? false) && !isset($existingUniqueFields[self::getFieldMappingValue($mapping, 'fieldName')])) {",
          "94:                 $loaded = true;",
          "95:             }",
          "",
          "[Removed Lines]",
          "93:                 $metadata->addConstraint(new UniqueEntity(['fields' => self::getFieldMappingValue($mapping, 'fieldName')]));",
          "",
          "[Added Lines]",
          "93:                 $metadata->addConstraint(new UniqueEntity(fields: self::getFieldMappingValue($mapping, 'fieldName')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:                     $metadata->addPropertyConstraint(self::getFieldMappingValue($mapping, 'declaredField'), new Valid());",
          "104:                     $loaded = true;",
          "105:                 } elseif (property_exists($className, self::getFieldMappingValue($mapping, 'fieldName')) && (!$doctrineMetadata->isMappedSuperclass || $metadata->getReflectionClass()->getProperty(self::getFieldMappingValue($mapping, 'fieldName'))->isPrivate())) {",
          "107:                     $loaded = true;",
          "108:                 }",
          "109:             } elseif (null === $lengthConstraint->max) {",
          "",
          "[Removed Lines]",
          "106:                     $metadata->addPropertyConstraint(self::getFieldMappingValue($mapping, 'fieldName'), new Length(['max' => self::getFieldMappingValue($mapping, 'length')]));",
          "",
          "[Added Lines]",
          "106:                     $metadata->addPropertyConstraint(self::getFieldMappingValue($mapping, 'fieldName'), new Length(max: self::getFieldMappingValue($mapping, 'length')));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php": [
          "File: src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php -> src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorFunctionalTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     public function testNonCompositeConstraintValidatedOnce()",
          "89:     {",
          "90:         $form = $this->formFactory->create(TextType::class, null, [",
          "92:             'validation_groups' => ['foo', 'bar'],",
          "93:         ]);",
          "94:         $form->submit('');",
          "",
          "[Removed Lines]",
          "91:             'constraints' => [new NotBlank(['groups' => ['foo', 'bar']])],",
          "",
          "[Added Lines]",
          "91:             'constraints' => [new NotBlank(groups: ['foo', 'bar'])],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         $form = $this->formFactory->create(FormType::class, null, [",
          "106:             'constraints' => [",
          "107:                 new Collection([",
          "114:                 ]),",
          "115:             ],",
          "116:             'validation_groups' => ['field1', 'field2'],",
          "",
          "[Removed Lines]",
          "108:                     'field1' => new NotBlank([",
          "109:                         'groups' => ['field1'],",
          "110:                     ]),",
          "111:                     'field2' => new NotBlank([",
          "112:                         'groups' => ['field2'],",
          "113:                     ]),",
          "",
          "[Added Lines]",
          "108:                     'field1' => new NotBlank(groups: ['field1']),",
          "109:                     'field2' => new NotBlank(groups: ['field2']),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:         $form = $this->formFactory->create(FormType::class, null, [",
          "137:             'constraints' => [",
          "138:                 new Collection([",
          "145:                 ]),",
          "146:             ],",
          "147:             'validation_groups' => new GroupSequence(['field1', 'field2']),",
          "",
          "[Removed Lines]",
          "139:                     'field1' => new NotBlank([",
          "140:                         'groups' => ['field1'],",
          "141:                     ]),",
          "142:                     'field2' => new NotBlank([",
          "143:                         'groups' => ['field2'],",
          "144:                     ]),",
          "",
          "[Added Lines]",
          "135:                     'field1' => new NotBlank(groups: ['field1']),",
          "136:                     'field2' => new NotBlank(groups: ['field2']),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:             'validation_groups' => new GroupSequence(['group1', 'group2']),",
          "168:         ])",
          "169:             ->add('foo', TextType::class, [",
          "171:             ])",
          "172:             ->add('bar', TextType::class, [",
          "174:             ])",
          "175:         ;",
          "",
          "[Removed Lines]",
          "170:                 'constraints' => [new Length(['min' => 10, 'groups' => ['group1']])],",
          "173:                 'constraints' => [new NotBlank(['groups' => ['group2']])],",
          "",
          "[Added Lines]",
          "162:                 'constraints' => [new Length(min: 10, groups: ['group1'])],",
          "165:                 'constraints' => [new NotBlank(groups: ['group2'])],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:             'validation_groups' => new GroupSequence([['group1', 'group2'], 'group3']),",
          "189:         ])",
          "190:             ->add('foo', TextType::class, [",
          "192:             ])",
          "193:             ->add('bar', TextType::class, [",
          "195:             ])",
          "196:             ->add('baz', TextType::class, [",
          "198:             ])",
          "199:         ;",
          "",
          "[Removed Lines]",
          "191:                 'constraints' => [new Length(['min' => 10, 'groups' => ['group1']])],",
          "194:                 'constraints' => [new Length(['min' => 10, 'groups' => ['group2']])],",
          "197:                 'constraints' => [new NotBlank(['groups' => ['group3']])],",
          "",
          "[Added Lines]",
          "183:                 'constraints' => [new Length(min: 10, groups: ['group1'])],",
          "186:                 'constraints' => [new Length(min: 10, groups: ['group2'])],",
          "189:                 'constraints' => [new NotBlank(groups: ['group3'])],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214:         ])",
          "215:             ->add('foo', TextType::class, [",
          "216:                 'constraints' => [",
          "224:                 ],",
          "225:             ]);",
          "226:         $form->submit([",
          "",
          "[Removed Lines]",
          "217:                     new NotBlank([",
          "218:                         'groups' => ['group1'],",
          "219:                     ]),",
          "220:                     new Length([",
          "221:                         'groups' => ['group2'],",
          "222:                         'max' => 3,",
          "223:                     ]),",
          "",
          "[Added Lines]",
          "209:                     new NotBlank(groups: ['group1']),",
          "210:                     new Length(",
          "211:                         groups: ['group2'],",
          "212:                         max: 3,",
          "213:                     ),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:             ->add('bar')",
          "243:             ->add('foo', TextType::class, [",
          "244:                 'constraints' => [",
          "252:                 ],",
          "253:             ]);",
          "254:         $form->submit([",
          "",
          "[Removed Lines]",
          "245:                     new NotBlank([",
          "246:                         'groups' => ['group1'],",
          "247:                     ]),",
          "248:                     new Length([",
          "249:                         'groups' => ['group2'],",
          "250:                         'max' => 3,",
          "251:                     ]),",
          "",
          "[Added Lines]",
          "235:                     new NotBlank(groups: ['group1']),",
          "236:                     new Length(",
          "237:                         groups: ['group2'],",
          "238:                         max: 3,",
          "239:                     ),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "268:             'validation_groups' => ['group1', 'group2'],",
          "269:         ])",
          "270:             ->add('field1', null, [",
          "272:                 'property_path' => '[foo]',",
          "273:             ])",
          "274:             ->add('field2', null, [",
          "276:                 'property_path' => '[bar]',",
          "277:             ])",
          "278:         ;",
          "",
          "[Removed Lines]",
          "271:                 'constraints' => [new NotBlank(['groups' => 'group1'])],",
          "275:                 'constraints' => [new NotBlank(['groups' => 'group2'])],",
          "",
          "[Added Lines]",
          "259:                 'constraints' => [new NotBlank(groups: ['group1'])],",
          "263:                 'constraints' => [new NotBlank(groups: ['group2'])],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "359:             'validation_groups' => new GroupSequence(['group1', 'group2']),",
          "360:         ])",
          "361:             ->add('field1', null, [",
          "363:                 'property_path' => '[foo]',",
          "364:             ])",
          "365:             ->add('field2', null, [",
          "367:                 'property_path' => '[bar]',",
          "368:             ])",
          "369:         ;",
          "",
          "[Removed Lines]",
          "362:                 'constraints' => [new NotBlank(['groups' => 'group1'])],",
          "366:                 'constraints' => [new NotBlank(['groups' => 'group2'])],",
          "",
          "[Added Lines]",
          "350:                 'constraints' => [new NotBlank(groups: ['group1'])],",
          "354:                 'constraints' => [new NotBlank(groups: ['group2'])],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "384:     {",
          "385:         $form = $this->formFactory->create(FormType::class)",
          "386:             ->add('field1', null, [",
          "390:             ])",
          "391:             ->add('field2')",
          "392:         ;",
          "",
          "[Removed Lines]",
          "387:                 'constraints' => [new Expression([",
          "388:                     'expression' => '!this.getParent().get(\"field2\").getData()',",
          "389:                 ])],",
          "",
          "[Added Lines]",
          "375:                 'constraints' => [new Expression(expression: '!this.getParent().get(\"field2\").getData()')],",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "407:             'validation_groups' => new GroupSequence(['group1']),",
          "408:         ])",
          "409:             ->add('field1', null, [",
          "414:             ])",
          "415:             ->add('field2')",
          "416:         ;",
          "",
          "[Removed Lines]",
          "410:                 'constraints' => [new Expression([",
          "411:                     'expression' => '!this.getParent().get(\"field2\").getData()',",
          "412:                     'groups' => ['group1'],",
          "413:                 ])],",
          "",
          "[Added Lines]",
          "396:                 'constraints' => [new Expression(",
          "397:                     expression: '!this.getParent().get(\"field2\").getData()',",
          "398:                     groups: ['group1'],",
          "399:                 )],",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php": [
          "File: src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php -> src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     public function testValidateConstraints()",
          "71:     {",
          "72:         $object = new \\stdClass();",
          "77:         $options = [",
          "78:             'validation_groups' => ['group1', 'group2'],",
          "",
          "[Removed Lines]",
          "73:         $constraint1 = new NotNull(['groups' => ['group1', 'group2']]);",
          "74:         $constraint2 = new NotBlank(['groups' => 'group2']);",
          "75:         $constraint3 = new Length(['groups' => 'group2', 'min' => 3]);",
          "",
          "[Added Lines]",
          "73:         $constraint1 = new NotNull(groups: ['group1', 'group2']);",
          "74:         $constraint2 = new NotBlank(groups: ['group2']);",
          "75:         $constraint3 = new Length(groups: ['group2'], min: 3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:     public function testValidateConstraintsOptionEvenIfNoValidConstraint()",
          "157:     {",
          "158:         $object = new \\stdClass();",
          "162:         $parent = $this->getBuilder('parent', null)",
          "163:             ->setCompound(true)",
          "",
          "[Removed Lines]",
          "159:         $constraint1 = new NotNull(['groups' => ['group1', 'group2']]);",
          "160:         $constraint2 = new NotBlank(['groups' => 'group2']);",
          "",
          "[Added Lines]",
          "159:         $constraint1 = new NotNull(groups: ['group1', 'group2']);",
          "160:         $constraint2 = new NotBlank(groups: ['group2']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:     public function testCauseForNotAllowedExtraFieldsIsTheFormConstraint()",
          "685:     {",
          "686:         $form = $this",
          "688:             ->setCompound(true)",
          "689:             ->setDataMapper(new DataMapper())",
          "690:             ->getForm();",
          "",
          "[Removed Lines]",
          "687:             ->getBuilder('form', null, ['constraints' => [new NotBlank(['groups' => ['foo']])]])",
          "",
          "[Added Lines]",
          "687:             ->getBuilder('form', null, ['constraints' => [new NotBlank(groups: ['foo'])]])",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php": [
          "File: src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php -> src/Symfony/Component/Form/Tests/Extension/Validator/Type/FormTypeValidatorExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:             ->create(FormTypeTest::TESTED_TYPE, null, ['validation_groups' => new GroupSequence(['First', 'Second'])])",
          "85:             ->add('field', TextTypeTest::TESTED_TYPE, [",
          "86:                 'constraints' => [",
          "89:                 ],",
          "90:             ])",
          "91:         ;",
          "",
          "[Removed Lines]",
          "87:                     new Length(['min' => 10, 'groups' => ['First']]),",
          "88:                     new NotBlank(['groups' => ['Second']]),",
          "",
          "[Added Lines]",
          "87:                     new Length(min: 10, groups: ['First']),",
          "88:                     new NotBlank(groups: ['Second']),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     {",
          "103:         $formMetadata = new ClassMetadata(Form::class);",
          "104:         $authorMetadata = (new ClassMetadata(Author::class))",
          "106:         ;",
          "107:         $metadataFactory = $this->createMock(MetadataFactoryInterface::class);",
          "108:         $metadataFactory->expects($this->any())",
          "",
          "[Removed Lines]",
          "105:             ->addPropertyConstraint('firstName', new NotBlank(['groups' => 'Second']))",
          "",
          "[Added Lines]",
          "105:             ->addPropertyConstraint('firstName', new NotBlank(groups: ['Second']))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:             ->add('firstName', TextTypeTest::TESTED_TYPE)",
          "132:             ->add('lastName', TextTypeTest::TESTED_TYPE, [",
          "133:                 'constraints' => [",
          "135:                 ],",
          "136:             ])",
          "137:             ->add('australian', TextTypeTest::TESTED_TYPE, [",
          "138:                 'constraints' => [",
          "140:                 ],",
          "141:             ])",
          "142:         ;",
          "",
          "[Removed Lines]",
          "134:                     new Length(['min' => 10, 'groups' => ['First']]),",
          "139:                     new NotBlank(['groups' => ['Second']]),",
          "",
          "[Added Lines]",
          "134:                     new Length(min: 10, groups: ['First']),",
          "139:                     new NotBlank(groups: ['Second']),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php||src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php": [
          "File: src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php -> src/Symfony/Component/Form/Tests/Extension/Validator/ValidatorTypeGuesserTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:             [new NotNull(), new ValueGuess(true, Guess::HIGH_CONFIDENCE)],",
          "97:             [new NotBlank(), new ValueGuess(true, Guess::HIGH_CONFIDENCE)],",
          "98:             [new IsTrue(), new ValueGuess(true, Guess::HIGH_CONFIDENCE)],",
          "101:         ];",
          "102:     }",
          "",
          "[Removed Lines]",
          "99:             [new Length(['min' => 10, 'max' => 10]), new ValueGuess(false, Guess::LOW_CONFIDENCE)],",
          "100:             [new Range(['min' => 1, 'max' => 20]), new ValueGuess(false, Guess::LOW_CONFIDENCE)],",
          "",
          "[Added Lines]",
          "99:             [new Length(min: 10, max: 10), new ValueGuess(false, Guess::LOW_CONFIDENCE)],",
          "100:             [new Range(min: 1, max: 20), new ValueGuess(false, Guess::LOW_CONFIDENCE)],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     public function testGuessMaxLengthForConstraintWithMaxValue()",
          "124:     {",
          "127:         $result = $this->guesser->guessMaxLengthForConstraint($constraint);",
          "128:         $this->assertInstanceOf(ValueGuess::class, $result);",
          "",
          "[Removed Lines]",
          "125:         $constraint = new Length(['max' => '2']);",
          "",
          "[Added Lines]",
          "125:         $constraint = new Length(max: '2');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     public function testGuessMaxLengthForConstraintWithMinValue()",
          "134:     {",
          "137:         $result = $this->guesser->guessMaxLengthForConstraint($constraint);",
          "138:         $this->assertNull($result);",
          "",
          "[Removed Lines]",
          "135:         $constraint = new Length(['min' => '2']);",
          "",
          "[Added Lines]",
          "135:         $constraint = new Length(min: '2');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:     public function testGuessMimeTypesForConstraintWithMimeTypesValue()",
          "142:     {",
          "143:         $mimeTypes = ['image/png', 'image/jpeg'];",
          "145:         $typeGuess = $this->guesser->guessTypeForConstraint($constraint);",
          "146:         $this->assertInstanceOf(TypeGuess::class, $typeGuess);",
          "147:         $this->assertArrayHasKey('attr', $typeGuess->getOptions());",
          "",
          "[Removed Lines]",
          "144:         $constraint = new File(['mimeTypes' => $mimeTypes]);",
          "",
          "[Added Lines]",
          "144:         $constraint = new File(mimeTypes: $mimeTypes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:     public function testGuessMimeTypesForConstraintWithMimeTypesStringValue()",
          "161:     {",
          "163:         $typeGuess = $this->guesser->guessTypeForConstraint($constraint);",
          "164:         $this->assertInstanceOf(TypeGuess::class, $typeGuess);",
          "165:         $this->assertArrayHasKey('attr', $typeGuess->getOptions());",
          "",
          "[Removed Lines]",
          "162:         $constraint = new File(['mimeTypes' => 'image/*']);",
          "",
          "[Added Lines]",
          "162:         $constraint = new File(mimeTypes: 'image/*');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:     public function testGuessMimeTypesForConstraintWithMimeTypesEmptyStringValue()",
          "171:     {",
          "173:         $typeGuess = $this->guesser->guessTypeForConstraint($constraint);",
          "174:         $this->assertInstanceOf(TypeGuess::class, $typeGuess);",
          "175:         $this->assertArrayNotHasKey('attr', $typeGuess->getOptions());",
          "",
          "[Removed Lines]",
          "172:         $constraint = new File(['mimeTypes' => '']);",
          "",
          "[Added Lines]",
          "172:         $constraint = new File(mimeTypes: '');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/AbstractComparison.php||src/Symfony/Component/Validator/Constraints/AbstractComparison.php": [
          "File: src/Symfony/Component/Validator/Constraints/AbstractComparison.php -> src/Symfony/Component/Validator/Constraints/AbstractComparison.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\PropertyAccess\\PropertyAccess;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "17: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     public mixed $value = null;",
          "29:     public ?string $propertyPath = null;",
          "32:     {",
          "33:         if (\\is_array($value)) {",
          "35:         } elseif (null !== $value) {",
          "36:             $options['value'] = $value;",
          "37:         }",
          "",
          "[Removed Lines]",
          "31:     public function __construct(mixed $value = null, ?string $propertyPath = null, ?string $message = null, ?array $groups = null, mixed $payload = null, array $options = [])",
          "34:             $options = array_merge($value, $options);",
          "",
          "[Added Lines]",
          "32:     #[HasNamedArguments]",
          "33:     public function __construct(mixed $value = null, ?string $propertyPath = null, ?string $message = null, ?array $groups = null, mixed $payload = null, ?array $options = null)",
          "36:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "38:             $options = array_merge($value, $options ?? []);",
          "40:             if (\\is_array($options)) {",
          "41:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:             } else {",
          "43:                 $options = [];",
          "44:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/All.php||src/Symfony/Component/Validator/Constraints/All.php": [
          "File: src/Symfony/Component/Validator/Constraints/All.php -> src/Symfony/Component/Validator/Constraints/All.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public function __construct(mixed $constraints = null, ?array $groups = null, mixed $payload = null)",
          "32:     {",
          "33:         parent::__construct($constraints ?? [], $groups, $payload);",
          "34:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     #[HasNamedArguments]",
          "35:         if (\\is_array($constraints) && !array_is_list($constraints)) {",
          "36:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "37:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php||src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php": [
          "File: src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php -> src/Symfony/Component/Validator/Constraints/AtLeastOneOf.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public function __construct(mixed $constraints = null, ?array $groups = null, mixed $payload = null, ?string $message = null, ?string $messageCollection = null, ?bool $includeInternalMessages = null)",
          "43:     {",
          "44:         parent::__construct($constraints ?? [], $groups, $payload);",
          "46:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:         if (\\is_array($constraints) && !array_is_list($constraints)) {",
          "45:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "46:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Bic.php||src/Symfony/Component/Validator/Constraints/Bic.php": [
          "File: src/Symfony/Component/Validator/Constraints/Bic.php -> src/Symfony/Component/Validator/Constraints/Bic.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use Symfony\\Component\\Intl\\Countries;",
          "15: use Symfony\\Component\\PropertyAccess\\PropertyAccess;",
          "16: use Symfony\\Component\\Validator\\Constraint;",
          "17: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "18: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     public function __construct(",
          "74:         ?array $options = null,",
          "75:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:             throw new InvalidArgumentException('The \"mode\" parameter value is not valid.');",
          "91:         }",
          "93:         parent::__construct($options, $groups, $payload);",
          "95:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:         if ($options) {",
          "96:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "97:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Blank.php||src/Symfony/Component/Validator/Constraints/Blank.php": [
          "File: src/Symfony/Component/Validator/Constraints/Blank.php -> src/Symfony/Component/Validator/Constraints/Blank.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "37:     {",
          "38:         parent::__construct($options ?? [], $groups, $payload);",
          "40:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     #[HasNamedArguments]",
          "40:         if ($options) {",
          "41:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Callback.php||src/Symfony/Component/Validator/Constraints/Callback.php": [
          "File: src/Symfony/Component/Validator/Constraints/Callback.php -> src/Symfony/Component/Validator/Constraints/Callback.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     {",
          "36:         if (\\is_array($callback) && 1 === \\count($callback) && isset($callback['value'])) {",
          "37:             $callback = $callback['value'];",
          "38:         }",
          "40:         if (!\\is_array($callback) || (!isset($callback['callback']) && !isset($callback['groups']) && !isset($callback['payload']))) {",
          "41:             $options['callback'] = $callback;",
          "42:         } else {",
          "44:         }",
          "46:         parent::__construct($options, $groups, $payload);",
          "",
          "[Removed Lines]",
          "33:     public function __construct(array|string|callable|null $callback = null, ?array $groups = null, mixed $payload = null, array $options = [])",
          "43:             $options = array_merge($callback, $options);",
          "",
          "[Added Lines]",
          "34:     #[HasNamedArguments]",
          "35:     public function __construct(array|string|callable|null $callback = null, ?array $groups = null, mixed $payload = null, ?array $options = null)",
          "39:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "45:             if (\\is_array($options)) {",
          "46:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "47:             } else {",
          "48:                 $options = [];",
          "49:             }",
          "53:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "55:             $options = array_merge($callback, $options ?? []);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/CardScheme.php||src/Symfony/Component/Validator/Constraints/CardScheme.php": [
          "File: src/Symfony/Component/Validator/Constraints/CardScheme.php -> src/Symfony/Component/Validator/Constraints/CardScheme.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     {",
          "56:         if (\\is_array($schemes) && \\is_string(key($schemes))) {",
          "58:         } else {",
          "59:             $options['value'] = $schemes;",
          "60:         }",
          "",
          "[Removed Lines]",
          "54:     public function __construct(array|string|null $schemes, ?string $message = null, ?array $groups = null, mixed $payload = null, array $options = [])",
          "57:             $options = array_merge($schemes, $options);",
          "",
          "[Added Lines]",
          "55:     #[HasNamedArguments]",
          "56:     public function __construct(array|string|null $schemes, ?string $message = null, ?array $groups = null, mixed $payload = null, ?array $options = null)",
          "59:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "61:             $options = array_merge($schemes, $options ?? []);",
          "63:             if (\\is_array($options)) {",
          "64:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "65:             } else {",
          "66:                 $options = [];",
          "67:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Cascade.php||src/Symfony/Component/Validator/Constraints/Cascade.php": [
          "File: src/Symfony/Component/Validator/Constraints/Cascade.php -> src/Symfony/Component/Validator/Constraints/Cascade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public function __construct(array|string|null $exclude = null, ?array $options = null)",
          "32:     {",
          "33:         if (\\is_array($exclude) && !array_is_list($exclude)) {",
          "34:             $options = array_merge($exclude, $options ?? []);",
          "35:         } else {",
          "36:             $this->exclude = array_flip((array) $exclude);",
          "37:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     #[HasNamedArguments]",
          "36:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "40:             if (\\is_array($options)) {",
          "41:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Choice.php||src/Symfony/Component/Validator/Constraints/Choice.php": [
          "File: src/Symfony/Component/Validator/Constraints/Choice.php -> src/Symfony/Component/Validator/Constraints/Choice.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     public function __construct(",
          "63:         string|array $options = [],",
          "64:         ?array $choices = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         if (\\is_array($options) && $options && array_is_list($options)) {",
          "79:             $choices ??= $options;",
          "80:             $options = [];",
          "81:         }",
          "82:         if (null !== $choices) {",
          "83:             $options['value'] = $choices;",
          "84:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         } elseif (\\is_array($options) && [] !== $options) {",
          "84:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Cidr.php||src/Symfony/Component/Validator/Constraints/Cidr.php": [
          "File: src/Symfony/Component/Validator/Constraints/Cidr.php -> src/Symfony/Component/Validator/Constraints/Cidr.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "16: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     public $normalizer;",
          "77:     public function __construct(",
          "78:         ?array $options = null,",
          "79:         ?string $version = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         $payload = null,",
          "85:         ?callable $normalizer = null,",
          "86:     ) {",
          "87:         $this->version = $version ?? $options['version'] ?? $this->version;",
          "89:         if (!\\array_key_exists($this->version, self::NET_MAXES)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:         if ($options) {",
          "90:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "91:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Collection.php||src/Symfony/Component/Validator/Constraints/Collection.php": [
          "File: src/Symfony/Component/Validator/Constraints/Collection.php -> src/Symfony/Component/Validator/Constraints/Collection.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     public function __construct(mixed $fields = null, ?array $groups = null, mixed $payload = null, ?bool $allowExtraFields = null, ?bool $allowMissingFields = null, ?string $extraFieldsMessage = null, ?string $missingFieldsMessage = null)",
          "45:     {",
          "46:         if (self::isFieldsOption($fields)) {",
          "47:             $fields = ['fields' => $fields];",
          "48:         }",
          "50:         parent::__construct($fields, $groups, $payload);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     #[HasNamedArguments]",
          "50:         } else {",
          "51:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Count.php||src/Symfony/Component/Validator/Constraints/Count.php": [
          "File: src/Symfony/Component/Validator/Constraints/Count.php -> src/Symfony/Component/Validator/Constraints/Count.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\MissingOptionsException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public function __construct(",
          "54:         int|array|null $exactly = null,",
          "55:         ?int $min = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         ?string $divisibleByMessage = null,",
          "62:         ?array $groups = null,",
          "63:         mixed $payload = null,",
          "65:     ) {",
          "66:         if (\\is_array($exactly)) {",
          "68:             $exactly = $options['value'] ?? null;",
          "69:         }",
          "71:         $min ??= $options['min'] ?? null;",
          "",
          "[Removed Lines]",
          "64:         array $options = [],",
          "67:             $options = array_merge($exactly, $options);",
          "",
          "[Added Lines]",
          "66:         ?array $options = null,",
          "69:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "71:             $options = array_merge($exactly, $options ?? []);",
          "73:         } elseif (\\is_array($options)) {",
          "74:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "75:         } else {",
          "76:             $options = [];",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/CountValidator.php||src/Symfony/Component/Validator/Constraints/CountValidator.php": [
          "File: src/Symfony/Component/Validator/Constraints/CountValidator.php -> src/Symfony/Component/Validator/Constraints/CountValidator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                 ->getValidator()",
          "71:                 ->inContext($this->context)",
          "72:                 ->validate($count, [",
          "77:                 ], $this->context->getGroup());",
          "78:         }",
          "79:     }",
          "",
          "[Removed Lines]",
          "73:                     new DivisibleBy([",
          "74:                         'value' => $constraint->divisibleBy,",
          "75:                         'message' => $constraint->divisibleByMessage,",
          "76:                     ]),",
          "",
          "[Added Lines]",
          "73:                     new DivisibleBy(",
          "74:                         value: $constraint->divisibleBy,",
          "75:                         message: $constraint->divisibleByMessage,",
          "76:                     ),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Country.php||src/Symfony/Component/Validator/Constraints/Country.php": [
          "File: src/Symfony/Component/Validator/Constraints/Country.php -> src/Symfony/Component/Validator/Constraints/Country.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Intl\\Countries;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     public function __construct(",
          "45:         ?array $options = null,",
          "46:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:             throw new LogicException('The Intl component is required to use the Country constraint. Try running \"composer require symfony/intl\".');",
          "53:         }",
          "55:         parent::__construct($options, $groups, $payload);",
          "57:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         if ($options) {",
          "58:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "59:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/CssColor.php||src/Symfony/Component/Validator/Constraints/CssColor.php": [
          "File: src/Symfony/Component/Validator/Constraints/CssColor.php -> src/Symfony/Component/Validator/Constraints/CssColor.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     public function __construct(array|string $formats = [], ?string $message = null, ?array $groups = null, $payload = null, ?array $options = null)",
          "70:     {",
          "71:         $validationModesAsString = implode(', ', self::$validationModes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         if (!$formats) {",
          "74:             $options['value'] = self::$validationModes;",
          "75:         } elseif (\\is_array($formats) && \\is_string(key($formats))) {",
          "76:             $options = array_merge($formats, $options ?? []);",
          "77:         } elseif (\\is_array($formats)) {",
          "78:             if ([] === array_intersect(self::$validationModes, $formats)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Currency.php||src/Symfony/Component/Validator/Constraints/Currency.php": [
          "File: src/Symfony/Component/Validator/Constraints/Currency.php -> src/Symfony/Component/Validator/Constraints/Currency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Intl\\Currencies;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "42:     {",
          "43:         if (!class_exists(Currencies::class)) {",
          "44:             throw new LogicException('The Intl component is required to use the Currency constraint. Try running \"composer require symfony/intl\".');",
          "45:         }",
          "47:         parent::__construct($options, $groups, $payload);",
          "49:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     #[HasNamedArguments]",
          "49:         if ($options) {",
          "50:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "51:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Date.php||src/Symfony/Component/Validator/Constraints/Date.php": [
          "File: src/Symfony/Component/Validator/Constraints/Date.php -> src/Symfony/Component/Validator/Constraints/Date.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "41:     {",
          "42:         parent::__construct($options, $groups, $payload);",
          "44:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     #[HasNamedArguments]",
          "44:         if ($options) {",
          "45:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "46:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/DateTime.php||src/Symfony/Component/Validator/Constraints/DateTime.php": [
          "File: src/Symfony/Component/Validator/Constraints/DateTime.php -> src/Symfony/Component/Validator/Constraints/DateTime.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {",
          "46:         if (\\is_array($format)) {",
          "48:         } elseif (null !== $format) {",
          "49:             $options['value'] = $format;",
          "50:         }",
          "",
          "[Removed Lines]",
          "44:     public function __construct(string|array|null $format = null, ?string $message = null, ?array $groups = null, mixed $payload = null, array $options = [])",
          "47:             $options = array_merge($format, $options);",
          "",
          "[Added Lines]",
          "45:     #[HasNamedArguments]",
          "46:     public function __construct(string|array|null $format = null, ?string $message = null, ?array $groups = null, mixed $payload = null, ?array $options = null)",
          "49:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "51:             $options = array_merge($format, $options ?? []);",
          "53:             if (\\is_array($options)) {",
          "54:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "55:             } else {",
          "56:                 $options = [];",
          "57:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php||src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php": [
          "File: src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php -> src/Symfony/Component/Validator/Constraints/DisableAutoMapping.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     {",
          "33:         if (\\is_array($options) && \\array_key_exists('groups', $options)) {",
          "34:             throw new ConstraintDefinitionException(\\sprintf('The option \"groups\" is not supported by the constraint \"%s\".', __CLASS__));",
          "35:         }",
          "38:     }",
          "40:     public function getTargets(): string|array",
          "",
          "[Removed Lines]",
          "31:     public function __construct(?array $options = null)",
          "37:         parent::__construct($options);",
          "",
          "[Added Lines]",
          "32:     #[HasNamedArguments]",
          "33:     public function __construct(?array $options = null, mixed $payload = null)",
          "35:         if (\\is_array($options)) {",
          "36:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "37:         }",
          "43:         parent::__construct($options, null, $payload);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Email.php||src/Symfony/Component/Validator/Constraints/Email.php": [
          "File: src/Symfony/Component/Validator/Constraints/Email.php -> src/Symfony/Component/Validator/Constraints/Email.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Egulias\\EmailValidator\\EmailValidator as StrictEmailValidator;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "17: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public function __construct(",
          "54:         ?array $options = null,",
          "55:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:             throw new InvalidArgumentException('The \"mode\" parameter value is not valid.');",
          "67:         }",
          "69:         parent::__construct($options, $groups, $payload);",
          "71:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:         if ($options) {",
          "72:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "73:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php||src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php": [
          "File: src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php -> src/Symfony/Component/Validator/Constraints/EnableAutoMapping.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     {",
          "33:         if (\\is_array($options) && \\array_key_exists('groups', $options)) {",
          "34:             throw new ConstraintDefinitionException(\\sprintf('The option \"groups\" is not supported by the constraint \"%s\".', __CLASS__));",
          "35:         }",
          "38:     }",
          "40:     public function getTargets(): string|array",
          "",
          "[Removed Lines]",
          "31:     public function __construct(?array $options = null)",
          "37:         parent::__construct($options);",
          "",
          "[Added Lines]",
          "32:     #[HasNamedArguments]",
          "33:     public function __construct(?array $options = null, mixed $payload = null)",
          "35:         if (\\is_array($options)) {",
          "36:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "37:         }",
          "43:         parent::__construct($options, null, $payload);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Expression.php||src/Symfony/Component/Validator/Constraints/Expression.php": [
          "File: src/Symfony/Component/Validator/Constraints/Expression.php -> src/Symfony/Component/Validator/Constraints/Expression.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use Symfony\\Component\\ExpressionLanguage\\Expression as ExpressionObject;",
          "15: use Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;",
          "16: use Symfony\\Component\\Validator\\Constraint;",
          "17: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     public function __construct(",
          "49:         string|ExpressionObject|array|null $expression,",
          "50:         ?string $message = null,",
          "51:         ?array $values = null,",
          "52:         ?array $groups = null,",
          "53:         mixed $payload = null,",
          "55:         ?bool $negate = null,",
          "56:     ) {",
          "57:         if (!class_exists(ExpressionLanguage::class)) {",
          "",
          "[Removed Lines]",
          "54:         array $options = [],",
          "",
          "[Added Lines]",
          "49:     #[HasNamedArguments]",
          "56:         ?array $options = null,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         }",
          "61:         if (\\is_array($expression)) {",
          "63:         } else {",
          "64:             $options['value'] = $expression;",
          "65:         }",
          "",
          "[Removed Lines]",
          "62:             $options = array_merge($expression, $options);",
          "",
          "[Added Lines]",
          "64:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "66:             $options = array_merge($expression, $options ?? []);",
          "68:             if (\\is_array($options)) {",
          "69:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "70:             } else {",
          "71:                 $options = [];",
          "72:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php||src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php": [
          "File: src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php -> src/Symfony/Component/Validator/Constraints/ExpressionSyntax.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public function __construct(?array $options = null, ?string $message = null, ?string $service = null, ?array $allowedVariables = null, ?array $groups = null, mixed $payload = null)",
          "41:     {",
          "42:         parent::__construct($options, $groups, $payload);",
          "44:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     #[HasNamedArguments]",
          "44:         if ($options) {",
          "45:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "46:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/File.php||src/Symfony/Component/Validator/Constraints/File.php": [
          "File: src/Symfony/Component/Validator/Constraints/File.php -> src/Symfony/Component/Validator/Constraints/File.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     public function __construct(",
          "93:         ?array $options = null,",
          "94:         int|string|null $maxSize = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         array|string|null $extensions = null,",
          "117:         ?string $extensionsMessage = null,",
          "118:     ) {",
          "119:         parent::__construct($options, $groups, $payload);",
          "121:         $this->maxSize = $maxSize ?? $this->maxSize;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:         if ($options) {",
          "122:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "123:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Hostname.php||src/Symfony/Component/Validator/Constraints/Hostname.php": [
          "File: src/Symfony/Component/Validator/Constraints/Hostname.php -> src/Symfony/Component/Validator/Constraints/Hostname.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     public function __construct(",
          "39:         ?array $options = null,",
          "40:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         ?array $groups = null,",
          "43:         mixed $payload = null,",
          "44:     ) {",
          "45:         parent::__construct($options, $groups, $payload);",
          "47:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         if ($options) {",
          "48:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "49:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Iban.php||src/Symfony/Component/Validator/Constraints/Iban.php": [
          "File: src/Symfony/Component/Validator/Constraints/Iban.php -> src/Symfony/Component/Validator/Constraints/Iban.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "49:     {",
          "50:         parent::__construct($options, $groups, $payload);",
          "52:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     #[HasNamedArguments]",
          "52:         if ($options) {",
          "53:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "54:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Ip.php||src/Symfony/Component/Validator/Constraints/Ip.php": [
          "File: src/Symfony/Component/Validator/Constraints/Ip.php -> src/Symfony/Component/Validator/Constraints/Ip.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "16: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     public function __construct(",
          "115:         ?array $options = null,",
          "116:         ?string $version = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:         ?array $groups = null,",
          "120:         mixed $payload = null,",
          "121:     ) {",
          "122:         parent::__construct($options, $groups, $payload);",
          "124:         $this->version = $version ?? $this->version;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:         if ($options) {",
          "125:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "126:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/IsFalse.php||src/Symfony/Component/Validator/Constraints/IsFalse.php": [
          "File: src/Symfony/Component/Validator/Constraints/IsFalse.php -> src/Symfony/Component/Validator/Constraints/IsFalse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "37:     {",
          "38:         parent::__construct($options ?? [], $groups, $payload);",
          "40:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     #[HasNamedArguments]",
          "40:         if ($options) {",
          "41:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/IsNull.php||src/Symfony/Component/Validator/Constraints/IsNull.php": [
          "File: src/Symfony/Component/Validator/Constraints/IsNull.php -> src/Symfony/Component/Validator/Constraints/IsNull.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "37:     {",
          "38:         parent::__construct($options ?? [], $groups, $payload);",
          "40:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     #[HasNamedArguments]",
          "40:         if ($options) {",
          "41:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/IsTrue.php||src/Symfony/Component/Validator/Constraints/IsTrue.php": [
          "File: src/Symfony/Component/Validator/Constraints/IsTrue.php -> src/Symfony/Component/Validator/Constraints/IsTrue.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "37:     {",
          "38:         parent::__construct($options ?? [], $groups, $payload);",
          "40:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     #[HasNamedArguments]",
          "40:         if ($options) {",
          "41:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Isbn.php||src/Symfony/Component/Validator/Constraints/Isbn.php": [
          "File: src/Symfony/Component/Validator/Constraints/Isbn.php -> src/Symfony/Component/Validator/Constraints/Isbn.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     public function __construct(",
          "58:         string|array|null $type = null,",
          "59:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         ?string $bothIsbnMessage = null,",
          "63:         ?array $groups = null,",
          "64:         mixed $payload = null,",
          "66:     ) {",
          "67:         if (\\is_array($type)) {",
          "69:         } elseif (null !== $type) {",
          "70:             $options['value'] = $type;",
          "71:         }",
          "",
          "[Removed Lines]",
          "65:         array $options = [],",
          "68:             $options = array_merge($type, $options);",
          "",
          "[Added Lines]",
          "67:         ?array $options = null,",
          "70:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "72:             $options = array_merge($type, $options ?? []);",
          "74:             if (\\is_array($options)) {",
          "75:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "76:             } else {",
          "77:                 $options = [];",
          "78:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Isin.php||src/Symfony/Component/Validator/Constraints/Isin.php": [
          "File: src/Symfony/Component/Validator/Constraints/Isin.php -> src/Symfony/Component/Validator/Constraints/Isin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "46:     {",
          "47:         parent::__construct($options, $groups, $payload);",
          "49:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     #[HasNamedArguments]",
          "49:         if ($options) {",
          "50:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "51:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Issn.php||src/Symfony/Component/Validator/Constraints/Issn.php": [
          "File: src/Symfony/Component/Validator/Constraints/Issn.php -> src/Symfony/Component/Validator/Constraints/Issn.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public function __construct(",
          "54:         ?array $options = null,",
          "55:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         ?array $groups = null,",
          "59:         mixed $payload = null,",
          "60:     ) {",
          "61:         parent::__construct($options, $groups, $payload);",
          "63:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         if ($options) {",
          "64:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "65:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Json.php||src/Symfony/Component/Validator/Constraints/Json.php": [
          "File: src/Symfony/Component/Validator/Constraints/Json.php -> src/Symfony/Component/Validator/Constraints/Json.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "37:     {",
          "38:         parent::__construct($options, $groups, $payload);",
          "40:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     #[HasNamedArguments]",
          "40:         if ($options) {",
          "41:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Language.php||src/Symfony/Component/Validator/Constraints/Language.php": [
          "File: src/Symfony/Component/Validator/Constraints/Language.php -> src/Symfony/Component/Validator/Constraints/Language.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Intl\\Languages;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     public function __construct(",
          "43:         ?array $options = null,",
          "44:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:             throw new LogicException('The Intl component is required to use the Language constraint. Try running \"composer require symfony/intl\".');",
          "51:         }",
          "53:         parent::__construct($options, $groups, $payload);",
          "55:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         if ($options) {",
          "56:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "57:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Length.php||src/Symfony/Component/Validator/Constraints/Length.php": [
          "File: src/Symfony/Component/Validator/Constraints/Length.php -> src/Symfony/Component/Validator/Constraints/Length.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "16: use Symfony\\Component\\Validator\\Exception\\MissingOptionsException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     public function __construct(",
          "71:         int|array|null $exactly = null,",
          "72:         ?int $min = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:         ?string $charsetMessage = null,",
          "81:         ?array $groups = null,",
          "82:         mixed $payload = null,",
          "84:     ) {",
          "85:         if (\\is_array($exactly)) {",
          "87:             $exactly = $options['value'] ?? null;",
          "88:         }",
          "90:         $min ??= $options['min'] ?? null;",
          "",
          "[Removed Lines]",
          "83:         array $options = [],",
          "86:             $options = array_merge($exactly, $options);",
          "",
          "[Added Lines]",
          "85:         ?array $options = null,",
          "88:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "90:             $options = array_merge($exactly, $options ?? []);",
          "92:         } elseif (\\is_array($options)) {",
          "93:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "94:         } else {",
          "95:             $options = [];",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Locale.php||src/Symfony/Component/Validator/Constraints/Locale.php": [
          "File: src/Symfony/Component/Validator/Constraints/Locale.php -> src/Symfony/Component/Validator/Constraints/Locale.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Intl\\Locales;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     public function __construct(",
          "43:         ?array $options = null,",
          "44:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:             throw new LogicException('The Intl component is required to use the Locale constraint. Try running \"composer require symfony/intl\".');",
          "51:         }",
          "53:         parent::__construct($options, $groups, $payload);",
          "55:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         if ($options) {",
          "56:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "57:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Luhn.php||src/Symfony/Component/Validator/Constraints/Luhn.php": [
          "File: src/Symfony/Component/Validator/Constraints/Luhn.php -> src/Symfony/Component/Validator/Constraints/Luhn.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     public function __construct(",
          "43:         ?array $options = null,",
          "44:         ?string $message = null,",
          "45:         ?array $groups = null,",
          "46:         mixed $payload = null,",
          "47:     ) {",
          "48:         parent::__construct($options, $groups, $payload);",
          "50:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     #[HasNamedArguments]",
          "50:         if ($options) {",
          "51:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "52:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php||src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php": [
          "File: src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php -> src/Symfony/Component/Validator/Constraints/NoSuspiciousCharacters.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     public function __construct(",
          "93:         ?array $options = null,",
          "94:         ?string $restrictionLevelMessage = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:             throw new LogicException('The intl extension is required to use the NoSuspiciousCharacters constraint.');",
          "106:         }",
          "108:         parent::__construct($options, $groups, $payload);",
          "110:         $this->restrictionLevelMessage = $restrictionLevelMessage ?? $this->restrictionLevelMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:         if ($options) {",
          "111:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "112:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/NotBlank.php||src/Symfony/Component/Validator/Constraints/NotBlank.php": [
          "File: src/Symfony/Component/Validator/Constraints/NotBlank.php -> src/Symfony/Component/Validator/Constraints/NotBlank.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     public function __construct(?array $options = null, ?string $message = null, ?bool $allowNull = null, ?callable $normalizer = null, ?array $groups = null, mixed $payload = null)",
          "43:     {",
          "44:         parent::__construct($options ?? [], $groups, $payload);",
          "46:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     #[HasNamedArguments]",
          "46:         if ($options) {",
          "47:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "48:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php||src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php": [
          "File: src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php -> src/Symfony/Component/Validator/Constraints/NotCompromisedPassword.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public function __construct(",
          "41:         ?array $options = null,",
          "42:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:         ?array $groups = null,",
          "46:         mixed $payload = null,",
          "47:     ) {",
          "48:         parent::__construct($options, $groups, $payload);",
          "50:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         if ($options) {",
          "51:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "52:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/NotNull.php||src/Symfony/Component/Validator/Constraints/NotNull.php": [
          "File: src/Symfony/Component/Validator/Constraints/NotNull.php -> src/Symfony/Component/Validator/Constraints/NotNull.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "37:     {",
          "38:         parent::__construct($options ?? [], $groups, $payload);",
          "40:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     #[HasNamedArguments]",
          "40:         if ($options) {",
          "41:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "42:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/PasswordStrength.php||src/Symfony/Component/Validator/Constraints/PasswordStrength.php": [
          "File: src/Symfony/Component/Validator/Constraints/PasswordStrength.php -> src/Symfony/Component/Validator/Constraints/PasswordStrength.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     public function __construct(?array $options = null, ?int $minScore = null, ?array $groups = null, mixed $payload = null, ?string $message = null)",
          "47:     {",
          "48:         $options['minScore'] ??= self::STRENGTH_MEDIUM;",
          "50:         parent::__construct($options, $groups, $payload);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     #[HasNamedArguments]",
          "50:         if ($options) {",
          "51:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "52:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Range.php||src/Symfony/Component/Validator/Constraints/Range.php": [
          "File: src/Symfony/Component/Validator/Constraints/Range.php -> src/Symfony/Component/Validator/Constraints/Range.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\PropertyAccess\\PropertyAccess;",
          "15: use Symfony\\Component\\Validator\\Constraint;",
          "16: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "17: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     public function __construct(",
          "61:         ?array $options = null,",
          "62:         ?string $notInRangeMessage = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:         ?array $groups = null,",
          "72:         mixed $payload = null,",
          "73:     ) {",
          "74:         parent::__construct($options, $groups, $payload);",
          "76:         $this->notInRangeMessage = $notInRangeMessage ?? $this->notInRangeMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         if ($options) {",
          "77:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "78:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Regex.php||src/Symfony/Component/Validator/Constraints/Regex.php": [
          "File: src/Symfony/Component/Validator/Constraints/Regex.php -> src/Symfony/Component/Validator/Constraints/Regex.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     public function __construct(",
          "46:         string|array|null $pattern,",
          "47:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:         ?callable $normalizer = null,",
          "51:         ?array $groups = null,",
          "52:         mixed $payload = null,",
          "54:     ) {",
          "55:         if (\\is_array($pattern)) {",
          "57:         } elseif (null !== $pattern) {",
          "58:             $options['value'] = $pattern;",
          "59:         }",
          "",
          "[Removed Lines]",
          "53:         array $options = [],",
          "56:             $options = array_merge($pattern, $options);",
          "",
          "[Added Lines]",
          "55:         ?array $options = null,",
          "58:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "60:             $options = array_merge($pattern, $options ?? []);",
          "62:             if (\\is_array($options)) {",
          "63:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "64:             } else {",
          "65:                 $options = [];",
          "66:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Sequentially.php||src/Symfony/Component/Validator/Constraints/Sequentially.php": [
          "File: src/Symfony/Component/Validator/Constraints/Sequentially.php -> src/Symfony/Component/Validator/Constraints/Sequentially.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     public function __construct(mixed $constraints = null, ?array $groups = null, mixed $payload = null)",
          "32:     {",
          "33:         parent::__construct($constraints ?? [], $groups, $payload);",
          "34:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:         if (is_array($constraints) && !array_is_list($constraints)) {",
          "34:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "35:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Time.php||src/Symfony/Component/Validator/Constraints/Time.php": [
          "File: src/Symfony/Component/Validator/Constraints/Time.php -> src/Symfony/Component/Validator/Constraints/Time.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public function __construct(",
          "41:         ?array $options = null,",
          "42:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         mixed $payload = null,",
          "45:         ?bool $withSeconds = null,",
          "46:     ) {",
          "47:         parent::__construct($options, $groups, $payload);",
          "49:         $this->withSeconds = $withSeconds ?? $this->withSeconds;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:         if ($options) {",
          "50:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "51:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Timezone.php||src/Symfony/Component/Validator/Constraints/Timezone.php": [
          "File: src/Symfony/Component/Validator/Constraints/Timezone.php -> src/Symfony/Component/Validator/Constraints/Timezone.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     public function __construct(",
          "53:         int|array|null $zone = null,",
          "54:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         ?bool $intlCompatible = null,",
          "57:         ?array $groups = null,",
          "58:         mixed $payload = null,",
          "60:     ) {",
          "61:         if (\\is_array($zone)) {",
          "63:         } elseif (null !== $zone) {",
          "64:             $options['value'] = $zone;",
          "65:         }",
          "",
          "[Removed Lines]",
          "59:         array $options = [],",
          "62:             $options = array_merge($zone, $options);",
          "",
          "[Added Lines]",
          "61:         ?array $options = null,",
          "64:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "66:             $options = array_merge($zone, $options ?? []);",
          "68:             if (\\is_array($options)) {",
          "69:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "70:             } else {",
          "71:                 $options = [];",
          "72:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Traverse.php||src/Symfony/Component/Validator/Constraints/Traverse.php": [
          "File: src/Symfony/Component/Validator/Constraints/Traverse.php -> src/Symfony/Component/Validator/Constraints/Traverse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     {",
          "32:         if (\\is_array($traverse) && \\array_key_exists('groups', $traverse)) {",
          "33:             throw new ConstraintDefinitionException(\\sprintf('The option \"groups\" is not supported by the constraint \"%s\".', __CLASS__));",
          "34:         }",
          "37:     }",
          "39:     public function getDefaultOption(): ?string",
          "",
          "[Removed Lines]",
          "30:     public function __construct(bool|array|null $traverse = null)",
          "36:         parent::__construct($traverse);",
          "",
          "[Added Lines]",
          "31:     #[HasNamedArguments]",
          "32:     public function __construct(bool|array|null $traverse = null, mixed $payload = null)",
          "38:         if (\\is_array($traverse)) {",
          "39:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "40:         }",
          "42:         parent::__construct($traverse, null, $payload);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Type.php||src/Symfony/Component/Validator/Constraints/Type.php": [
          "File: src/Symfony/Component/Validator/Constraints/Type.php -> src/Symfony/Component/Validator/Constraints/Type.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     {",
          "40:         if (\\is_array($type) && \\is_string(key($type))) {",
          "42:         } elseif (null !== $type) {",
          "43:             $options['value'] = $type;",
          "44:         }",
          "46:         parent::__construct($options, $groups, $payload);",
          "",
          "[Removed Lines]",
          "38:     public function __construct(string|array|null $type, ?string $message = null, ?array $groups = null, mixed $payload = null, array $options = [])",
          "41:             $options = array_merge($type, $options);",
          "",
          "[Added Lines]",
          "39:     #[HasNamedArguments]",
          "40:     public function __construct(string|array|null $type, ?string $message = null, ?array $groups = null, mixed $payload = null, ?array $options = null)",
          "43:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "45:             $options = array_merge($type, $options ?? []);",
          "47:             if (\\is_array($options)) {",
          "48:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "49:             } else {",
          "50:                 $options = [];",
          "51:             }",
          "54:         } elseif (\\is_array($options)) {",
          "55:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Ulid.php||src/Symfony/Component/Validator/Constraints/Ulid.php": [
          "File: src/Symfony/Component/Validator/Constraints/Ulid.php -> src/Symfony/Component/Validator/Constraints/Ulid.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public function __construct(",
          "54:         ?array $options = null,",
          "55:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:         mixed $payload = null,",
          "58:         ?string $format = null,",
          "59:     ) {",
          "60:         parent::__construct($options, $groups, $payload);",
          "62:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         if ($options) {",
          "63:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "64:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Unique.php||src/Symfony/Component/Validator/Constraints/Unique.php": [
          "File: src/Symfony/Component/Validator/Constraints/Unique.php -> src/Symfony/Component/Validator/Constraints/Unique.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     public function __construct(",
          "44:         ?array $options = null,",
          "45:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:         array|string|null $fields = null,",
          "50:         ?string $errorPath = null,",
          "51:     ) {",
          "52:         parent::__construct($options, $groups, $payload);",
          "54:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:         if ($options) {",
          "55:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "56:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Url.php||src/Symfony/Component/Validator/Constraints/Url.php": [
          "File: src/Symfony/Component/Validator/Constraints/Url.php -> src/Symfony/Component/Validator/Constraints/Url.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     public function __construct(",
          "49:         ?array $options = null,",
          "50:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         ?bool $requireTld = null,",
          "57:         ?string $tldMessage = null,",
          "58:     ) {",
          "59:         parent::__construct($options, $groups, $payload);",
          "61:         if (null === ($options['requireTld'] ?? $requireTld)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         if ($options) {",
          "62:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "63:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Uuid.php||src/Symfony/Component/Validator/Constraints/Uuid.php": [
          "File: src/Symfony/Component/Validator/Constraints/Uuid.php -> src/Symfony/Component/Validator/Constraints/Uuid.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "15: use Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     public function __construct(",
          "104:         ?array $options = null,",
          "105:         ?string $message = null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     #[HasNamedArguments]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         ?array $groups = null,",
          "110:         mixed $payload = null,",
          "111:     ) {",
          "112:         parent::__construct($options, $groups, $payload);",
          "114:         $this->message = $message ?? $this->message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:         if ($options) {",
          "115:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "116:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/Valid.php||src/Symfony/Component/Validator/Constraints/Valid.php": [
          "File: src/Symfony/Component/Validator/Constraints/Valid.php -> src/Symfony/Component/Validator/Constraints/Valid.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public function __construct(?array $options = null, ?array $groups = null, $payload = null, ?bool $traverse = null)",
          "32:     {",
          "33:         parent::__construct($options ?? [], $groups, $payload);",
          "35:         $this->traverse = $traverse ?? $this->traverse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     #[HasNamedArguments]",
          "35:         if ($options) {",
          "36:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "37:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/When.php||src/Symfony/Component/Validator/Constraints/When.php": [
          "File: src/Symfony/Component/Validator/Constraints/When.php -> src/Symfony/Component/Validator/Constraints/When.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use Symfony\\Component\\ExpressionLanguage\\Expression;",
          "15: use Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;",
          "16: use Symfony\\Component\\Validator\\Constraint;",
          "17: use Symfony\\Component\\Validator\\Exception\\LogicException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     {",
          "40:         if (!class_exists(ExpressionLanguage::class)) {",
          "41:             throw new LogicException(\\sprintf('The \"symfony/expression-language\" component is required to use the \"%s\" constraint. Try running \"composer require symfony/expression-language\".', __CLASS__));",
          "42:         }",
          "44:         if (\\is_array($expression)) {",
          "46:         } else {",
          "47:             $options['expression'] = $expression;",
          "48:             $options['constraints'] = $constraints;",
          "49:         }",
          "",
          "[Removed Lines]",
          "38:     public function __construct(string|Expression|array $expression, array|Constraint|null $constraints = null, ?array $values = null, ?array $groups = null, $payload = null, array $options = [])",
          "45:             $options = array_merge($expression, $options);",
          "",
          "[Added Lines]",
          "39:     #[HasNamedArguments]",
          "40:     public function __construct(string|Expression|array $expression, array|Constraint|null $constraints = null, ?array $values = null, ?array $groups = null, $payload = null, ?array $options = null)",
          "47:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "49:             $options = array_merge($expression, $options ?? []);",
          "51:             if (\\is_array($options)) {",
          "52:                 trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "53:             } else {",
          "54:                 $options = [];",
          "55:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php||src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php": [
          "File: src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php -> src/Symfony/Component/Validator/Constraints/ZeroComparisonConstraintTrait.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Constraints;",
          "14: use Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Validator\\Attribute\\HasNamedArguments;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: trait ZeroComparisonConstraintTrait",
          "23: {",
          "24:     public function __construct(?array $options = null, ?string $message = null, ?array $groups = null, mixed $payload = null)",
          "25:     {",
          "29:             throw new ConstraintDefinitionException(\\sprintf('The \"propertyPath\" option of the \"%s\" constraint cannot be set.', static::class));",
          "30:         }",
          "33:             throw new ConstraintDefinitionException(\\sprintf('The \"value\" option of the \"%s\" constraint cannot be set.', static::class));",
          "34:         }",
          "",
          "[Removed Lines]",
          "26:         $options ??= [];",
          "28:         if (isset($options['propertyPath'])) {",
          "32:         if (isset($options['value'])) {",
          "",
          "[Added Lines]",
          "25:     #[HasNamedArguments]",
          "28:         if (null !== $options) {",
          "29:             trigger_deprecation('symfony/validator', '7.2', 'Passing an array of options to configure the \"%s\" constraint is deprecated, use named arguments instead.', static::class);",
          "30:         }",
          "32:         if (is_array($options) && isset($options['propertyPath'])) {",
          "36:         if (is_array($options) && isset($options['value'])) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Context/ExecutionContextInterface.php||src/Symfony/Component/Validator/Context/ExecutionContextInterface.php": [
          "File: src/Symfony/Component/Validator/Context/ExecutionContextInterface.php -> src/Symfony/Component/Validator/Context/ExecutionContextInterface.php"
        ],
        "src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php||src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php": [
          "File: src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php -> src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:                 return new $className($options['value']);",
          "98:             }",
          "100:             return new $className(...$options);",
          "101:         }",
          "104:     }",
          "105: }",
          "",
          "[Removed Lines]",
          "103:         return new $className($options);",
          "",
          "[Added Lines]",
          "100:             if (array_is_list($options)) {",
          "101:                 return new $className($options);",
          "102:             }",
          "107:         if ($options) {",
          "108:             trigger_deprecation('symfony/validator', '7.2', 'Using constraints not supporting named arguments is deprecated. Try adding the HasNamedArguments attribute to %s.', $className);",
          "110:             return new $className($options);",
          "111:         }",
          "113:         return new $className();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php||src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php": [
          "File: src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php -> src/Symfony/Component/Validator/Mapping/Loader/PropertyInfoLoader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:                         $metadata->addPropertyConstraint($property, $this->getTypeConstraintLegacy($builtinTypes[0], $types[0]));",
          "136:                     } elseif ($scalar) {",
          "138:                     }",
          "139:                 }",
          "140:             } else {",
          "",
          "[Removed Lines]",
          "137:                         $metadata->addPropertyConstraint($property, new Type(['type' => 'scalar']));",
          "",
          "[Added Lines]",
          "137:                         $metadata->addPropertyConstraint($property, new Type(type: 'scalar'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:     private function getTypeConstraintLegacy(string $builtinType, PropertyInfoType $type): Type",
          "204:     {",
          "205:         if (PropertyInfoType::BUILTIN_TYPE_OBJECT === $builtinType && null !== $className = $type->getClassName()) {",
          "207:         }",
          "210:     }",
          "212:     private function getTypeConstraint(TypeInfoType $type): ?Type",
          "",
          "[Removed Lines]",
          "206:             return new Type(['type' => $className]);",
          "209:         return new Type(['type' => $builtinType]);",
          "",
          "[Added Lines]",
          "206:             return new Type(type: $className);",
          "209:         return new Type(type: $builtinType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:             $baseType = $type->getBaseType();",
          "222:             if ($baseType instanceof ObjectType) {",
          "224:             }",
          "226:             if (TypeIdentifier::MIXED !== $baseType->getTypeIdentifier()) {",
          "228:             }",
          "230:             return null;",
          "",
          "[Removed Lines]",
          "223:                 return new Type(['type' => $baseType->getClassName()]);",
          "227:                 return new Type(['type' => $baseType->getTypeIdentifier()->value]);",
          "",
          "[Added Lines]",
          "223:                 return new Type(type: $baseType->getClassName());",
          "227:                 return new Type(type: $baseType->getTypeIdentifier()->value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:                 TypeIdentifier::BOOL,",
          "239:                 TypeIdentifier::TRUE,",
          "240:                 TypeIdentifier::FALSE,",
          "242:         }",
          "244:         while ($type instanceof WrappingTypeInterface) {",
          "",
          "[Removed Lines]",
          "241:             ) ? new Type(['type' => 'scalar']) : null;",
          "",
          "[Added Lines]",
          "241:             ) ? new Type(type: 'scalar') : null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:         }",
          "248:         if ($type instanceof ObjectType) {",
          "250:         }",
          "252:         if ($type instanceof BuiltinType && TypeIdentifier::MIXED !== $type->getTypeIdentifier()) {",
          "254:         }",
          "256:         return null;",
          "",
          "[Removed Lines]",
          "249:             return new Type(['type' => $type->getClassName()]);",
          "253:             return new Type(['type' => $type->getTypeIdentifier()->value]);",
          "",
          "[Added Lines]",
          "249:             return new Type(type: $type->getClassName());",
          "253:             return new Type(type: $type->getTypeIdentifier()->value);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:         }",
          "286:         if (null === $allConstraint) {",
          "288:         } else {",
          "289:             $allConstraint->constraints = array_merge($allConstraint->constraints, $constraints);",
          "290:         }",
          "",
          "[Removed Lines]",
          "287:             $metadata->addPropertyConstraint($property, new All(['constraints' => $constraints]));",
          "",
          "[Added Lines]",
          "287:             $metadata->addPropertyConstraint($property, new All(constraints: $constraints));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "318:         }",
          "320:         if (null === $allConstraint) {",
          "322:         } else {",
          "323:             $allConstraint->constraints = array_merge($allConstraint->constraints, $constraints);",
          "324:         }",
          "",
          "[Removed Lines]",
          "321:             $metadata->addPropertyConstraint($property, new All(['constraints' => $constraints]));",
          "",
          "[Added Lines]",
          "321:             $metadata->addPropertyConstraint($property, new All(constraints: $constraints));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/AllValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     public function testNullIsValid()",
          "29:     {",
          "32:         $this->assertNoViolation();",
          "33:     }",
          "",
          "[Removed Lines]",
          "30:         $this->validator->validate(null, new All(new Range(['min' => 4])));",
          "",
          "[Added Lines]",
          "30:         $this->validator->validate(null, new All(new Range(min: 4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     public function testThrowsExceptionIfNotTraversable()",
          "36:     {",
          "37:         $this->expectException(UnexpectedValueException::class);",
          "39:     }",
          "",
          "[Removed Lines]",
          "38:         $this->validator->validate('foo.barbar', new All(new Range(['min' => 4])));",
          "",
          "[Added Lines]",
          "38:         $this->validator->validate('foo.barbar', new All(new Range(min: 4)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     public function testWalkSingleConstraint($array)",
          "45:     {",
          "48:         $i = 0;",
          "",
          "[Removed Lines]",
          "46:         $constraint = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "46:         $constraint = new Range(min: 4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     public function testWalkMultipleConstraints($array)",
          "63:     {",
          "65:         $constraint2 = new NotNull();",
          "67:         $constraints = [$constraint1, $constraint2];",
          "",
          "[Removed Lines]",
          "64:         $constraint1 = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "64:         $constraint1 = new Range(min: 4);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/AtLeastOneOfValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     {",
          "67:         return [",
          "68:             ['symfony', [",
          "71:             ]],",
          "72:             [150, [",
          "75:             ]],",
          "76:             [7, [",
          "79:             ]],",
          "80:             [-3, [",
          "82:                 new Negative(),",
          "83:             ]],",
          "84:             ['FOO', [",
          "87:             ]],",
          "88:             ['fr', [",
          "89:                 new Country(),",
          "90:                 new Language(),",
          "91:             ]],",
          "92:             [[1, 3, 5], [",
          "94:                 new Unique(),",
          "95:             ]],",
          "96:         ];",
          "",
          "[Removed Lines]",
          "69:                 new Length(['min' => 10]),",
          "70:                 new EqualTo(['value' => 'symfony']),",
          "73:                 new Range(['min' => 10, 'max' => 20]),",
          "74:                 new GreaterThanOrEqual(['value' => 100]),",
          "77:                 new LessThan(['value' => 5]),",
          "78:                 new IdenticalTo(['value' => 7]),",
          "81:                 new DivisibleBy(['value' => 4]),",
          "85:                 new Choice(['choices' => ['bar', 'BAR']]),",
          "86:                 new Regex(['pattern' => '/foo/i']),",
          "93:                 new Count(['min' => 5]),",
          "",
          "[Added Lines]",
          "69:                 new Length(min: 10),",
          "70:                 new EqualTo(value: 'symfony'),",
          "73:                 new Range(min: 10, max: 20),",
          "74:                 new GreaterThanOrEqual(value: 100),",
          "77:                 new LessThan(value: 5),",
          "78:                 new IdenticalTo(value: 7),",
          "81:                 new DivisibleBy(value: 4),",
          "85:                 new Choice(choices: ['bar', 'BAR']),",
          "86:                 new Regex(pattern: '/foo/i'),",
          "93:                 new Count(min: 5),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     public function testInvalidCombinationsWithDefaultMessage($value, $constraints)",
          "103:     {",
          "105:         $validator = Validation::createValidator();",
          "107:         $message = [$atLeastOneOf->message];",
          "",
          "[Removed Lines]",
          "104:         $atLeastOneOf = new AtLeastOneOf(['constraints' => $constraints]);",
          "",
          "[Added Lines]",
          "104:         $atLeastOneOf = new AtLeastOneOf(constraints: $constraints);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     public function testInvalidCombinationsWithCustomMessage($value, $constraints)",
          "125:     {",
          "128:         $violations = Validation::createValidator()->validate($value, $atLeastOneOf);",
          "",
          "[Removed Lines]",
          "126:         $atLeastOneOf = new AtLeastOneOf(['constraints' => $constraints, 'message' => 'foo', 'includeInternalMessages' => false]);",
          "",
          "[Added Lines]",
          "126:         $atLeastOneOf = new AtLeastOneOf(",
          "127:             constraints: $constraints,",
          "128:             message: 'foo',",
          "129:             includeInternalMessages: false,",
          "130:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     {",
          "136:         return [",
          "137:             ['symphony', [",
          "140:             ]],",
          "141:             [70, [",
          "144:             ]],",
          "145:             [8, [",
          "148:             ]],",
          "149:             [3, [",
          "151:                 new Negative(),",
          "152:             ]],",
          "153:             ['F_O_O', [",
          "156:             ]],",
          "157:             ['f_r', [",
          "158:                 new Country(),",
          "159:                 new Language(),",
          "160:             ]],",
          "161:             [[1, 3, 3], [",
          "163:                 new Unique(),",
          "164:             ]],",
          "165:         ];",
          "",
          "[Removed Lines]",
          "138:                 new Length(['min' => 10]),",
          "139:                 new EqualTo(['value' => 'symfony']),",
          "142:                 new Range(['min' => 10, 'max' => 20]),",
          "143:                 new GreaterThanOrEqual(['value' => 100]),",
          "146:                 new LessThan(['value' => 5]),",
          "147:                 new IdenticalTo(['value' => 7]),",
          "150:                 new DivisibleBy(['value' => 4]),",
          "154:                 new Choice(['choices' => ['bar', 'BAR']]),",
          "155:                 new Regex(['pattern' => '/foo/i']),",
          "162:                 new Count(['min' => 5]),",
          "",
          "[Added Lines]",
          "142:                 new Length(min: 10),",
          "143:                 new EqualTo(value: 'symfony'),",
          "146:                 new Range(min: 10, max: 20),",
          "147:                 new GreaterThanOrEqual(value: 100),",
          "150:                 new LessThan(value: 5),",
          "151:                 new IdenticalTo(value: 7),",
          "154:                 new DivisibleBy(value: 4),",
          "158:                 new Choice(choices: ['bar', 'BAR']),",
          "159:                 new Regex(pattern: '/foo/i'),",
          "166:                 new Count(min: 5),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:     {",
          "170:         $validator = Validation::createValidator();",
          "184:             ],",
          "188:         $this->assertCount(1, $violations);",
          "189:     }",
          "",
          "[Removed Lines]",
          "172:         $violations = $validator->validate(50, new AtLeastOneOf([",
          "173:             'constraints' => [",
          "174:                 new Range([",
          "175:                     'groups' => 'non_default_group',",
          "176:                     'min' => 10,",
          "177:                     'max' => 20,",
          "178:                 ]),",
          "179:                 new Range([",
          "180:                     'groups' => 'non_default_group',",
          "181:                     'min' => 30,",
          "182:                     'max' => 40,",
          "183:                 ]),",
          "185:             'groups' => 'non_default_group',",
          "186:         ]), 'non_default_group');",
          "",
          "[Added Lines]",
          "176:         $violations = $validator->validate(50, new AtLeastOneOf(",
          "177:             constraints: [",
          "178:                 new Range(",
          "179:                     groups: ['non_default_group'],",
          "180:                     min: 10,",
          "181:                     max: 20,",
          "182:                 ),",
          "183:                 new Range(",
          "184:                     groups: ['non_default_group'],",
          "185:                     min: 30,",
          "186:                     max: 40,",
          "187:                 ),",
          "189:             groups: ['non_default_group'],",
          "190:         ), ['non_default_group']);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:                 public function getMetadataFor($classOrObject): MetadataInterface",
          "222:                 {",
          "223:                     return (new ClassMetadata(Data::class))",
          "225:                         ->addPropertyConstraint('bar', new AtLeastOneOf([",
          "227:                         ]))",
          "228:                     ;",
          "229:                 }",
          "",
          "[Removed Lines]",
          "224:                         ->addPropertyConstraint('foo', new NotNull(['message' => 'custom message foo']))",
          "226:                             new NotNull(['message' => 'custom message bar']),",
          "",
          "[Added Lines]",
          "228:                         ->addPropertyConstraint('foo', new NotNull(message: 'custom message foo'))",
          "230:                             new NotNull(message: 'custom message bar'),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "247:     {",
          "248:         $validator = Validation::createValidator();",
          "261:             ],",
          "265:         $this->assertCount(1, $violations);",
          "266:     }",
          "",
          "[Removed Lines]",
          "250:         $violations = $validator->validate(50, new AtLeastOneOf([",
          "251:             'constraints' => [",
          "252:                 new Range([",
          "253:                     'groups' => 'adult',",
          "254:                     'min' => 18,",
          "255:                     'max' => 55,",
          "256:                 ]),",
          "257:                 new GreaterThan([",
          "258:                     'groups' => 'senior',",
          "259:                     'value' => 55,",
          "260:                 ]),",
          "262:             'groups' => ['adult', 'senior'],",
          "263:         ]), 'senior');",
          "",
          "[Added Lines]",
          "254:         $violations = $validator->validate(50, new AtLeastOneOf(",
          "255:             constraints: [",
          "256:                 new Range(",
          "257:                     groups: ['adult'],",
          "258:                     min: 18,",
          "259:                     max: 55,",
          "260:                 ),",
          "261:                 new GreaterThan(",
          "262:                     groups: ['senior'],",
          "263:                     value: 55,",
          "264:                 ),",
          "266:             groups: ['adult', 'senior'],",
          "267:         ), 'senior');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/BicValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     public function testValidComparisonToPropertyPath()",
          "46:     {",
          "49:         $object = new BicComparisonTestClass('FR14 2004 1010 0505 0001 3M02 606');",
          "",
          "[Removed Lines]",
          "47:         $constraint = new Bic(['ibanPropertyPath' => 'value']);",
          "",
          "[Added Lines]",
          "47:         $constraint = new Bic(ibanPropertyPath: 'value');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     public function testInvalidComparisonToPropertyPath()",
          "59:     {",
          "61:         $constraint->ibanMessage = 'Constraint Message';",
          "63:         $object = new BicComparisonTestClass('FR14 2004 1010 0505 0001 3M02 606');",
          "",
          "[Removed Lines]",
          "60:         $constraint = new Bic(['ibanPropertyPath' => 'value']);",
          "",
          "[Added Lines]",
          "60:         $constraint = new Bic(ibanPropertyPath: 'value');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     {",
          "96:         $this->setObject(new BicTypedDummy());",
          "100:         $this->assertNoViolation();",
          "101:     }",
          "103:     public function testValidComparisonToValue()",
          "104:     {",
          "106:         $constraint->ibanMessage = 'Constraint Message';",
          "108:         $this->validator->validate('SOGEFRPP', $constraint);",
          "",
          "[Removed Lines]",
          "98:         $this->validator->validate('UNCRIT2B912', new Bic(['ibanPropertyPath' => 'iban']));",
          "105:         $constraint = new Bic(['iban' => 'FR14 2004 1010 0505 0001 3M02 606']);",
          "",
          "[Added Lines]",
          "98:         $this->validator->validate('UNCRIT2B912', new Bic(ibanPropertyPath: 'iban'));",
          "105:         $constraint = new Bic(iban: 'FR14 2004 1010 0505 0001 3M02 606');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:     public function testInvalidComparisonToValue()",
          "114:     {",
          "116:         $constraint->ibanMessage = 'Constraint Message';",
          "118:         $this->validator->validate('UNCRIT2B912', $constraint);",
          "",
          "[Removed Lines]",
          "115:         $constraint = new Bic(['iban' => 'FR14 2004 1010 0505 0001 3M02 606']);",
          "",
          "[Added Lines]",
          "115:         $constraint = new Bic(iban: 'FR14 2004 1010 0505 0001 3M02 606');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:     public function testNoViolationOnNullObjectWithPropertyPath()",
          "144:     {",
          "147:         $this->setObject(null);",
          "",
          "[Removed Lines]",
          "145:         $constraint = new Bic(['ibanPropertyPath' => 'propertyPath']);",
          "",
          "[Added Lines]",
          "145:         $constraint = new Bic(ibanPropertyPath: 'propertyPath');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:     {",
          "156:         $this->expectException(ConstraintDefinitionException::class);",
          "157:         $this->expectExceptionMessage('The \"iban\" and \"ibanPropertyPath\" options of the Iban constraint cannot be used at the same time');",
          "162:     }",
          "164:     public function testThrowsConstraintExceptionIfBothValueAndPropertyPathNamed()",
          "",
          "[Removed Lines]",
          "158:         new Bic([",
          "159:             'iban' => 'value',",
          "160:             'ibanPropertyPath' => 'propertyPath',",
          "161:         ]);",
          "",
          "[Added Lines]",
          "158:         new Bic(",
          "159:             iban: 'value',",
          "160:             ibanPropertyPath: 'propertyPath',",
          "161:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172:     public function testInvalidValuePath()",
          "173:     {",
          "176:         $this->expectException(ConstraintDefinitionException::class);",
          "177:         $this->expectExceptionMessage(\\sprintf('Invalid property path \"foo\" provided to \"%s\" constraint', $constraint::class));",
          "",
          "[Removed Lines]",
          "174:         $constraint = new Bic(['ibanPropertyPath' => 'foo']);",
          "",
          "[Added Lines]",
          "174:         $constraint = new Bic(ibanPropertyPath: 'foo');",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218:     public function testInvalidBics($bic, $code)",
          "219:     {",
          "224:         $this->validator->validate($bic, $constraint);",
          "",
          "[Removed Lines]",
          "220:         $constraint = new Bic([",
          "221:             'message' => 'myMessage',",
          "222:         ]);",
          "",
          "[Added Lines]",
          "220:         $constraint = new Bic(",
          "221:             message: 'myMessage',",
          "222:         );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "278:     public function testValidBicSpecialCases(string $bic, string $iban)",
          "279:     {",
          "281:         $this->validator->validate($bic, $constraint);",
          "283:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "280:         $constraint = new Bic(['iban' => $iban]);",
          "",
          "[Added Lines]",
          "280:         $constraint = new Bic(iban: $iban);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/BlankValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public function testInvalidValues($value, $valueAsString)",
          "43:     {",
          "48:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "44:         $constraint = new Blank([",
          "45:             'message' => 'myMessage',",
          "46:         ]);",
          "",
          "[Added Lines]",
          "44:         $constraint = new Blank(",
          "45:             message: 'myMessage',",
          "46:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CallbackValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     public function testSingleMethodExplicitName()",
          "75:     {",
          "76:         $object = new CallbackValidatorTest_Object();",
          "79:         $this->validator->validate($object, $constraint);",
          "",
          "[Removed Lines]",
          "77:         $constraint = new Callback(['callback' => 'validate']);",
          "",
          "[Added Lines]",
          "77:         $constraint = new Callback(callback: 'validate');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:     public function testClosureExplicitName()",
          "130:     {",
          "131:         $object = new CallbackValidatorTest_Object();",
          "140:         $this->validator->validate($object, $constraint);",
          "",
          "[Removed Lines]",
          "132:         $constraint = new Callback([",
          "133:             'callback' => function ($object, ExecutionContextInterface $context) {",
          "134:                 $context->addViolation('My message', ['{{ value }}' => 'foobar']);",
          "136:                 return false;",
          "137:             },",
          "138:         ]);",
          "",
          "[Added Lines]",
          "132:         $constraint = new Callback(callback: function ($object, ExecutionContextInterface $context) {",
          "133:             $context->addViolation('My message', ['{{ value }}' => 'foobar']);",
          "135:             return false;",
          "136:         });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:     public function testArrayCallableExplicitName()",
          "171:     {",
          "172:         $object = new CallbackValidatorTest_Object();",
          "177:         $this->validator->validate($object, $constraint);",
          "",
          "[Removed Lines]",
          "173:         $constraint = new Callback([",
          "174:             'callback' => [__CLASS__.'_Class', 'validateCallback'],",
          "175:         ]);",
          "",
          "[Added Lines]",
          "171:         $constraint = new Callback(callback: [__CLASS__.'_Class', 'validateCallback']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:         $this->expectException(ConstraintDefinitionException::class);",
          "187:         $object = new CallbackValidatorTest_Object();",
          "190:     }",
          "192:     public function testExpectValidCallbacks()",
          "",
          "[Removed Lines]",
          "189:         $this->validator->validate($object, new Callback(['callback' => ['foobar']]));",
          "",
          "[Added Lines]",
          "185:         $this->validator->validate($object, new Callback(callback: ['foobar']));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194:         $this->expectException(ConstraintDefinitionException::class);",
          "195:         $object = new CallbackValidatorTest_Object();",
          "198:     }",
          "200:     public function testConstraintGetTargets()",
          "201:     {",
          "203:         $targets = [Constraint::CLASS_CONSTRAINT, Constraint::PROPERTY_CONSTRAINT];",
          "205:         $this->assertEquals($targets, $constraint->getTargets());",
          "",
          "[Removed Lines]",
          "197:         $this->validator->validate($object, new Callback(['callback' => ['foo', 'bar']]));",
          "202:         $constraint = new Callback([]);",
          "",
          "[Added Lines]",
          "193:         $this->validator->validate($object, new Callback(callback: ['foo', 'bar']));",
          "198:         $constraint = new Callback(callback: []);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:     public function testAttributeInvocationSingleValued()",
          "217:     {",
          "221:     }",
          "223:     public function testAttributeInvocationMultiValued()",
          "224:     {",
          "228:     }",
          "230:     public function testPayloadIsPassedToCallback()",
          "",
          "[Removed Lines]",
          "218:         $constraint = new Callback(['value' => 'validateStatic']);",
          "220:         $this->assertEquals(new Callback('validateStatic'), $constraint);",
          "225:         $constraint = new Callback(['value' => [__CLASS__.'_Class', 'validateCallback']]);",
          "227:         $this->assertEquals(new Callback([__CLASS__.'_Class', 'validateCallback']), $constraint);",
          "",
          "[Added Lines]",
          "214:         $constraint = new Callback(callback: 'validateStatic');",
          "216:         $this->assertEquals(new Callback(callback: 'validateStatic'), $constraint);",
          "221:         $constraint = new Callback(callback: [__CLASS__.'_Class', 'validateCallback']);",
          "223:         $this->assertEquals(new Callback(callback: [__CLASS__.'_Class', 'validateCallback']), $constraint);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235:             $payloadCopy = $payload;",
          "236:         };",
          "242:         $this->validator->validate($object, $constraint);",
          "243:         $this->assertEquals('Hello world!', $payloadCopy);",
          "",
          "[Removed Lines]",
          "238:         $constraint = new Callback([",
          "239:             'callback' => $callback,",
          "240:             'payload' => 'Hello world!',",
          "241:         ]);",
          "",
          "[Added Lines]",
          "234:         $constraint = new Callback(",
          "235:             callback: $callback,",
          "236:             payload: 'Hello world!',",
          "237:         );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "248:         $this->assertEquals('Hello world!', $payloadCopy);",
          "250:         $payloadCopy = 'Replace me!';",
          "254:         $this->validator->validate($object, $constraint);",
          "255:         $this->assertNull($payloadCopy);",
          "256:     }",
          "",
          "[Removed Lines]",
          "251:         $constraint = new Callback([",
          "252:             'callback' => $callback,",
          "253:         ]);",
          "",
          "[Added Lines]",
          "247:         $constraint = new Callback(callback: $callback);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CardSchemeValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     public function testNullIsValid()",
          "26:     {",
          "29:         $this->assertNoViolation();",
          "30:     }",
          "32:     public function testEmptyStringIsValid()",
          "33:     {",
          "36:         $this->assertNoViolation();",
          "37:     }",
          "",
          "[Removed Lines]",
          "27:         $this->validator->validate(null, new CardScheme(['schemes' => []]));",
          "34:         $this->validator->validate('', new CardScheme(['schemes' => []]));",
          "",
          "[Added Lines]",
          "27:         $this->validator->validate(null, new CardScheme(schemes: []));",
          "34:         $this->validator->validate('', new CardScheme(schemes:[]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     public function testValidNumbers($scheme, $number)",
          "43:     {",
          "46:         $this->assertNoViolation();",
          "47:     }",
          "",
          "[Removed Lines]",
          "44:         $this->validator->validate($number, new CardScheme(['schemes' => $scheme]));",
          "",
          "[Added Lines]",
          "44:         $this->validator->validate($number, new CardScheme(schemes: $scheme));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     public function testValidNumbersWithNewLine($scheme, $number)",
          "53:     {",
          "56:         $this->buildViolation('myMessage')",
          "57:             ->setParameter('{{ value }}', '\"'.$number.\"\\n\\\"\")",
          "",
          "[Removed Lines]",
          "54:         $this->validator->validate($number.\"\\n\", new CardScheme(['schemes' => $scheme, 'message' => 'myMessage']));",
          "",
          "[Added Lines]",
          "54:         $this->validator->validate($number.\"\\n\", new CardScheme(schemes: $scheme, message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     public function testInvalidNumbers($scheme, $number, $code)",
          "76:     {",
          "82:         $this->validator->validate($number, $constraint);",
          "",
          "[Removed Lines]",
          "77:         $constraint = new CardScheme([",
          "78:             'schemes' => $scheme,",
          "79:             'message' => 'myMessage',",
          "80:         ]);",
          "",
          "[Added Lines]",
          "77:         $constraint = new CardScheme(",
          "78:             schemes: $scheme,",
          "79:             message: 'myMessage',",
          "80:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/ChoiceValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     public function testExpectArrayIfMultipleIsTrue()",
          "48:     {",
          "49:         $this->expectException(UnexpectedValueException::class);",
          "55:         $this->validator->validate('asdf', $constraint);",
          "56:     }",
          "58:     public function testNullIsValid()",
          "59:     {",
          "67:         $this->assertNoViolation();",
          "68:     }",
          "",
          "[Removed Lines]",
          "50:         $constraint = new Choice([",
          "51:             'choices' => ['foo', 'bar'],",
          "52:             'multiple' => true,",
          "53:         ]);",
          "60:         $this->validator->validate(",
          "61:             null,",
          "62:             new Choice([",
          "63:                 'choices' => ['foo', 'bar'],",
          "64:             ])",
          "65:         );",
          "",
          "[Added Lines]",
          "50:         $constraint = new Choice(",
          "51:             choices: ['foo', 'bar'],",
          "52:             multiple: true,",
          "53:         );",
          "60:         $this->validator->validate(null, new Choice(choices: ['foo', 'bar']));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     public function testValidCallbackExpected()",
          "77:     {",
          "78:         $this->expectException(ConstraintDefinitionException::class);",
          "80:     }",
          "",
          "[Removed Lines]",
          "79:         $this->validator->validate('foobar', new Choice(['callback' => 'abcd']));",
          "",
          "[Added Lines]",
          "74:         $this->validator->validate('foobar', new Choice(callback: 'abcd'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     public static function provideConstraintsWithChoicesArray(): iterable",
          "93:     {",
          "96:         yield 'first argument' => [new Choice(['foo', 'bar'])];",
          "97:         yield 'named arguments' => [new Choice(choices: ['foo', 'bar'])];",
          "98:     }",
          "",
          "[Removed Lines]",
          "94:         yield 'Doctrine style' => [new Choice(['choices' => ['foo', 'bar']])];",
          "95:         yield 'Doctrine default option' => [new Choice(['value' => ['foo', 'bar']])];",
          "",
          "[Added Lines]",
          "97:     public function testValidChoiceArrayDoctrineStyle(Choice $constraint)",
          "98:     {",
          "99:         $this->validator->validate('bar', $constraint);",
          "101:         $this->assertNoViolation();",
          "102:     }",
          "104:     public static function provideLegacyConstraintsWithChoicesArrayDoctrineStyle(): iterable",
          "105:     {",
          "106:         yield 'Doctrine style' => [new Choice(['choices' => ['foo', 'bar']])];",
          "107:         yield 'Doctrine default option' => [new Choice(['value' => ['foo', 'bar']])];",
          "108:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     }",
          "110:     public static function provideConstraintsWithCallbackFunction(): iterable",
          "111:     {",
          "112:         yield 'doctrine style, namespaced function' => [new Choice(['callback' => __NAMESPACE__.'\\choice_callback'])];",
          "113:         yield 'doctrine style, closure' => [new Choice([",
          "114:             'callback' => fn () => ['foo', 'bar'],",
          "115:         ])];",
          "116:         yield 'doctrine style, static method' => [new Choice(['callback' => [__CLASS__, 'staticCallback']])];",
          "120:     }",
          "122:     public function testValidChoiceCallbackContextMethod()",
          "",
          "[Removed Lines]",
          "117:         yield 'named arguments, namespaced function' => [new Choice(callback: __NAMESPACE__.'\\choice_callback')];",
          "118:         yield 'named arguments, closure' => [new Choice(callback: fn () => ['foo', 'bar'])];",
          "119:         yield 'named arguments, static method' => [new Choice(callback: [__CLASS__, 'staticCallback'])];",
          "",
          "[Added Lines]",
          "121:     {",
          "122:         yield 'named arguments, namespaced function' => [new Choice(callback: __NAMESPACE__.'\\choice_callback')];",
          "123:         yield 'named arguments, closure' => [new Choice(callback: fn () => ['foo', 'bar'])];",
          "124:         yield 'named arguments, static method' => [new Choice(callback: [__CLASS__, 'staticCallback'])];",
          "125:     }",
          "131:     public function testValidChoiceCallbackFunctionDoctrineStyle(Choice $constraint)",
          "132:     {",
          "133:         $this->validator->validate('bar', $constraint);",
          "135:         $this->assertNoViolation();",
          "136:     }",
          "138:     public static function provideLegacyConstraintsWithCallbackFunctionDoctrineStyle(): iterable",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:         $this->setObject($this);",
          "129:         $this->validator->validate('bar', $constraint);",
          "",
          "[Removed Lines]",
          "127:         $constraint = new Choice(['callback' => 'staticCallback']);",
          "",
          "[Added Lines]",
          "152:         $constraint = new Choice(callback: 'staticCallback');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:         $this->setObject($this);",
          "144:         $this->validator->validate('bar', $constraint);",
          "145:     }",
          "",
          "[Removed Lines]",
          "142:         $constraint = new Choice(['callback' => 'staticCallbackInvalid']);",
          "",
          "[Added Lines]",
          "167:         $constraint = new Choice(callback: 'staticCallbackInvalid');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150:         $this->setObject($this);",
          "154:         $this->validator->validate('bar', $constraint);",
          "156:         $this->assertNoViolation();",
          "157:     }",
          "163:     {",
          "166:         $this->assertNoViolation();",
          "167:     }",
          "170:     {",
          "172:             'choices' => ['foo', 'bar', 'baz'],",
          "173:             'multiple' => true,",
          "179:     }",
          "185:     {",
          "188:         $this->buildViolation('myMessage')",
          "189:             ->setParameter('{{ value }}', '\"baz\"')",
          "",
          "[Removed Lines]",
          "152:         $constraint = new Choice(['callback' => 'objectMethodCallback']);",
          "162:     public function testMultipleChoices(Choice $constraint)",
          "164:         $this->validator->validate(['baz', 'bar'], $constraint);",
          "169:     public static function provideConstraintsWithMultipleTrue(): iterable",
          "171:         yield 'Doctrine style' => [new Choice([",
          "174:         ])];",
          "175:         yield 'named arguments' => [new Choice(",
          "176:             choices: ['foo', 'bar', 'baz'],",
          "177:             multiple: true,",
          "178:         )];",
          "184:     public function testInvalidChoice(Choice $constraint)",
          "186:         $this->validator->validate('baz', $constraint);",
          "",
          "[Added Lines]",
          "177:         $constraint = new Choice(callback: 'objectMethodCallback');",
          "184:     public function testMultipleChoices()",
          "186:         $this->validator->validate(['baz', 'bar'], new Choice(",
          "187:             choices: ['foo', 'bar', 'baz'],",
          "188:             multiple: true,",
          "189:         ));",
          "197:     public function testMultipleChoicesDoctrineStyle()",
          "199:         $this->validator->validate(['baz', 'bar'], new Choice([",
          "202:         ]));",
          "204:         $this->assertNoViolation();",
          "207:     public function testInvalidChoice()",
          "209:         $this->validator->validate('baz', new Choice(choices: ['foo', 'bar'], message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "192:             ->assertRaised();",
          "193:     }",
          "196:     {",
          "199:     }",
          "201:     public function testInvalidChoiceEmptyChoices()",
          "202:     {",
          "210:         $this->validator->validate('baz', $constraint);",
          "",
          "[Removed Lines]",
          "195:     public static function provideConstraintsWithMessage(): iterable",
          "197:         yield 'Doctrine style' => [new Choice(['choices' => ['foo', 'bar'], 'message' => 'myMessage'])];",
          "198:         yield 'named arguments' => [new Choice(choices: ['foo', 'bar'], message: 'myMessage')];",
          "203:         $constraint = new Choice([",
          "206:             'choices' => [],",
          "207:             'message' => 'myMessage',",
          "208:         ]);",
          "",
          "[Added Lines]",
          "221:     public function testInvalidChoiceDoctrineStyle()",
          "223:         $this->validator->validate('baz', new Choice(['choices' => ['foo', 'bar'], 'message' => 'myMessage']));",
          "225:         $this->buildViolation('myMessage')",
          "226:             ->setParameter('{{ value }}', '\"baz\"')",
          "227:             ->setParameter('{{ choices }}', '\"foo\", \"bar\"')",
          "228:             ->setCode(Choice::NO_SUCH_CHOICE_ERROR)",
          "229:             ->assertRaised();",
          "234:         $constraint = new Choice(",
          "237:             choices: [],",
          "238:             message: 'myMessage',",
          "239:         );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:             ->assertRaised();",
          "217:     }",
          "223:     {",
          "226:         $this->buildViolation('myMessage')",
          "227:             ->setParameter('{{ value }}', '\"baz\"')",
          "",
          "[Removed Lines]",
          "222:     public function testInvalidChoiceMultiple(Choice $constraint)",
          "224:         $this->validator->validate(['foo', 'baz'], $constraint);",
          "",
          "[Added Lines]",
          "250:     public function testInvalidChoiceMultiple()",
          "252:         $this->validator->validate(['foo', 'baz'], new Choice(",
          "253:             choices: ['foo', 'bar'],",
          "254:             multipleMessage: 'myMessage',",
          "255:             multiple: true,",
          "256:         ));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "230:             ->setCode(Choice::NO_SUCH_CHOICE_ERROR)",
          "231:             ->assertRaised();",
          "232:     }",
          "235:     {",
          "237:             'choices' => ['foo', 'bar'],",
          "238:             'multipleMessage' => 'myMessage',",
          "239:             'multiple' => true,",
          "246:     }",
          "252:     {",
          "253:         $value = ['foo'];",
          "255:         $this->setValue($value);",
          "259:         $this->buildViolation('myMessage')",
          "260:             ->setParameter('{{ limit }}', 2)",
          "",
          "[Removed Lines]",
          "234:     public static function provideConstraintsWithMultipleMessage(): iterable",
          "236:         yield 'Doctrine style' => [new Choice([",
          "240:         ])];",
          "241:         yield 'named arguments' => [new Choice(",
          "242:             choices: ['foo', 'bar'],",
          "243:             multipleMessage: 'myMessage',",
          "244:             multiple: true,",
          "245:         )];",
          "251:     public function testTooFewChoices(Choice $constraint)",
          "257:         $this->validator->validate($value, $constraint);",
          "",
          "[Added Lines]",
          "268:     public function testInvalidChoiceMultipleDoctrineStyle()",
          "270:         $this->validator->validate(['foo', 'baz'], new Choice([",
          "274:         ]));",
          "276:         $this->buildViolation('myMessage')",
          "277:             ->setParameter('{{ value }}', '\"baz\"')",
          "278:             ->setParameter('{{ choices }}', '\"foo\", \"bar\"')",
          "279:             ->setInvalidValue('baz')",
          "280:             ->setCode(Choice::NO_SUCH_CHOICE_ERROR)",
          "281:             ->assertRaised();",
          "284:     public function testTooFewChoices()",
          "290:         $this->validator->validate($value, new Choice(",
          "291:             choices: ['foo', 'bar', 'moo', 'maa'],",
          "292:             multiple: true,",
          "293:             min: 2,",
          "294:             minMessage: 'myMessage',",
          "295:         ));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "264:             ->assertRaised();",
          "265:     }",
          "268:     {",
          "270:             'choices' => ['foo', 'bar', 'moo', 'maa'],",
          "271:             'multiple' => true,",
          "272:             'min' => 2,",
          "273:             'minMessage' => 'myMessage',",
          "281:     }",
          "287:     {",
          "288:         $value = ['foo', 'bar', 'moo'];",
          "290:         $this->setValue($value);",
          "294:         $this->buildViolation('myMessage')",
          "295:             ->setParameter('{{ limit }}', 2)",
          "",
          "[Removed Lines]",
          "267:     public static function provideConstraintsWithMin(): iterable",
          "269:         yield 'Doctrine style' => [new Choice([",
          "274:         ])];",
          "275:         yield 'named arguments' => [new Choice(",
          "276:             choices: ['foo', 'bar', 'moo', 'maa'],",
          "277:             multiple: true,",
          "278:             min: 2,",
          "279:             minMessage: 'myMessage',",
          "280:         )];",
          "286:     public function testTooManyChoices(Choice $constraint)",
          "292:         $this->validator->validate($value, $constraint);",
          "",
          "[Added Lines]",
          "308:     public function testTooFewChoicesDoctrineStyle()",
          "310:         $value = ['foo'];",
          "312:         $this->setValue($value);",
          "314:         $this->validator->validate($value, new Choice([",
          "319:         ]));",
          "321:         $this->buildViolation('myMessage')",
          "322:             ->setParameter('{{ limit }}', 2)",
          "323:             ->setInvalidValue($value)",
          "324:             ->setPlural(2)",
          "325:             ->setCode(Choice::TOO_FEW_ERROR)",
          "326:             ->assertRaised();",
          "329:     public function testTooManyChoices()",
          "335:         $this->validator->validate($value, new Choice(",
          "336:             choices: ['foo', 'bar', 'moo', 'maa'],",
          "337:             multiple: true,",
          "338:             max: 2,",
          "339:             maxMessage: 'myMessage',",
          "340:         ));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "299:             ->assertRaised();",
          "300:     }",
          "303:     {",
          "305:             'choices' => ['foo', 'bar', 'moo', 'maa'],",
          "306:             'multiple' => true,",
          "307:             'max' => 2,",
          "308:             'maxMessage' => 'myMessage',",
          "316:     }",
          "318:     public function testStrictAllowsExactValue()",
          "319:     {",
          "324:         $this->validator->validate(2, $constraint);",
          "",
          "[Removed Lines]",
          "302:     public static function provideConstraintsWithMax(): iterable",
          "304:         yield 'Doctrine style' => [new Choice([",
          "309:         ])];",
          "310:         yield 'named arguments' => [new Choice(",
          "311:             choices: ['foo', 'bar', 'moo', 'maa'],",
          "312:             multiple: true,",
          "313:             max: 2,",
          "314:             maxMessage: 'myMessage',",
          "315:         )];",
          "320:         $constraint = new Choice([",
          "321:             'choices' => [1, 2],",
          "322:         ]);",
          "",
          "[Added Lines]",
          "353:     public function testTooManyChoicesDoctrineStyle()",
          "355:         $value = ['foo', 'bar', 'moo'];",
          "357:         $this->setValue($value);",
          "359:         $this->validator->validate($value, new Choice([",
          "364:         ]));",
          "366:         $this->buildViolation('myMessage')",
          "367:             ->setParameter('{{ limit }}', 2)",
          "368:             ->setInvalidValue($value)",
          "369:             ->setPlural(2)",
          "370:             ->setCode(Choice::TOO_MANY_ERROR)",
          "371:             ->assertRaised();",
          "376:         $constraint = new Choice(choices: [1, 2]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "329:     public function testStrictDisallowsDifferentType()",
          "330:     {",
          "336:         $this->validator->validate('2', $constraint);",
          "",
          "[Removed Lines]",
          "331:         $constraint = new Choice([",
          "332:             'choices' => [1, 2],",
          "333:             'message' => 'myMessage',",
          "334:         ]);",
          "",
          "[Added Lines]",
          "385:         $constraint = new Choice(",
          "386:             choices: [1, 2],",
          "387:             message: 'myMessage',",
          "388:         );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "345:     public function testStrictWithMultipleChoices()",
          "346:     {",
          "353:         $this->validator->validate([2, '3'], $constraint);",
          "",
          "[Removed Lines]",
          "347:         $constraint = new Choice([",
          "348:             'choices' => [1, 2, 3],",
          "349:             'multiple' => true,",
          "350:             'multipleMessage' => 'myMessage',",
          "351:         ]);",
          "",
          "[Added Lines]",
          "401:         $constraint = new Choice(",
          "402:             choices: [1, 2, 3],",
          "403:             multiple: true,",
          "404:             multipleMessage: 'myMessage',",
          "405:         );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "363:     public function testMatchFalse()",
          "364:     {",
          "370:         $this->buildViolation('The value you selected is not a valid choice.')",
          "371:             ->setParameter('{{ value }}', '\"foo\"')",
          "",
          "[Removed Lines]",
          "365:         $this->validator->validate('foo', new Choice([",
          "366:             'choices' => ['foo', 'bar'],",
          "367:             'match' => false,",
          "368:         ]));",
          "",
          "[Added Lines]",
          "419:         $this->validator->validate('foo', new Choice(",
          "420:             choices: ['foo', 'bar'],",
          "421:             match: false,",
          "422:         ));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "377:     public function testMatchFalseWithMultiple()",
          "378:     {",
          "385:         $this->buildViolation('One or more of the given values is invalid.')",
          "386:             ->setParameter('{{ value }}', '\"bar\"')",
          "",
          "[Removed Lines]",
          "379:         $this->validator->validate(['ccc', 'bar', 'zzz'], new Choice([",
          "380:             'choices' => ['foo', 'bar'],",
          "381:             'multiple' => true,",
          "382:             'match' => false,",
          "383:         ]));",
          "",
          "[Added Lines]",
          "433:         $this->validator->validate(['ccc', 'bar', 'zzz'], new Choice(",
          "434:             choices: ['foo', 'bar'],",
          "435:             multiple: true,",
          "436:             match: false,",
          "437:         ));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php||src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CidrTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     public function testForV4()",
          "33:     {",
          "36:         self::assertEquals(Ip::V4, $cidrConstraint->version);",
          "37:         self::assertEquals(0, $cidrConstraint->netmaskMin);",
          "",
          "[Removed Lines]",
          "34:         $cidrConstraint = new Cidr(['version' => Ip::V4]);",
          "",
          "[Added Lines]",
          "34:         $cidrConstraint = new Cidr(version: Ip::V4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     public function testForV6()",
          "42:     {",
          "45:         self::assertEquals(Ip::V6, $cidrConstraint->version);",
          "46:         self::assertEquals(0, $cidrConstraint->netmaskMin);",
          "",
          "[Removed Lines]",
          "43:         $cidrConstraint = new Cidr(['version' => Ip::V6]);",
          "",
          "[Added Lines]",
          "43:         $cidrConstraint = new Cidr(version: Ip::V6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         self::expectException(ConstraintDefinitionException::class);",
          "63:         self::expectExceptionMessage(\\sprintf('The option \"version\" must be one of \"%s\".', implode('\", \"', $availableVersions)));",
          "66:     }",
          "",
          "[Removed Lines]",
          "65:         new Cidr(['version' => '8']);",
          "",
          "[Added Lines]",
          "65:         new Cidr(version: '8');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:     public function testWithValidMinMaxValues(string $ipVersion, int $netmaskMin, int $netmaskMax)",
          "72:     {",
          "79:         self::assertEquals($ipVersion, $cidrConstraint->version);",
          "80:         self::assertEquals($netmaskMin, $cidrConstraint->netmaskMin);",
          "",
          "[Removed Lines]",
          "73:         $cidrConstraint = new Cidr([",
          "74:             'version' => $ipVersion,",
          "75:             'netmaskMin' => $netmaskMin,",
          "76:             'netmaskMax' => $netmaskMax,",
          "77:         ]);",
          "",
          "[Added Lines]",
          "73:         $cidrConstraint = new Cidr(",
          "74:             version: $ipVersion,",
          "75:             netmaskMin: $netmaskMin,",
          "76:             netmaskMax: $netmaskMax,",
          "77:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:         self::expectException(ConstraintDefinitionException::class);",
          "92:         self::expectExceptionMessage(\\sprintf('The netmask range must be between 0 and %d.', $expectedMax));",
          "99:     }",
          "101:     public static function getInvalidMinMaxValues(): array",
          "",
          "[Removed Lines]",
          "94:         new Cidr([",
          "95:             'version' => $ipVersion,",
          "96:             'netmaskMin' => $netmaskMin,",
          "97:             'netmaskMax' => $netmaskMax,",
          "98:         ]);",
          "",
          "[Added Lines]",
          "94:         new Cidr(",
          "95:             version: $ipVersion,",
          "96:             netmaskMin: $netmaskMin,",
          "97:             netmaskMax: $netmaskMax,",
          "98:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CidrValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     public function testValidCidr(string|\\Stringable $cidr, string $version)",
          "88:     {",
          "91:         $this->assertNoViolation();",
          "92:     }",
          "",
          "[Removed Lines]",
          "89:         $this->validator->validate($cidr, new Cidr(['version' => $version]));",
          "",
          "[Added Lines]",
          "89:         $this->validator->validate($cidr, new Cidr(version: $version));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     public function testOutOfRangeNetmask(string $cidr, int $maxExpected, ?string $version = null, ?int $min = null, ?int $max = null)",
          "110:     {",
          "116:         $this->validator->validate($cidr, $cidrConstraint);",
          "118:         $this",
          "",
          "[Removed Lines]",
          "111:         $cidrConstraint = new Cidr([",
          "112:             'version' => $version,",
          "113:             'netmaskMin' => $min,",
          "114:             'netmaskMax' => $max,",
          "115:         ]);",
          "",
          "[Added Lines]",
          "111:         $cidrConstraint = new Cidr(",
          "112:             version: $version,",
          "113:             netmaskMin: $min,",
          "114:             netmaskMax: $max,",
          "115:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     public function testWrongVersion(string $cidr, string $version)",
          "130:     {",
          "133:         $this",
          "134:             ->buildViolation('This value is not a valid CIDR notation.')",
          "",
          "[Removed Lines]",
          "131:         $this->validator->validate($cidr, new Cidr(['version' => $version]));",
          "",
          "[Added Lines]",
          "131:         $this->validator->validate($cidr, new Cidr(version: $version));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php||src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CollectionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     public function testAcceptOptionalConstraintAsOneElementArray()",
          "61:     {",
          "67:             ],",
          "68:         ]);",
          "74:         ]);",
          "76:         $this->assertEquals($collection1, $collection2);",
          "",
          "[Removed Lines]",
          "62:         $collection1 = new Collection([",
          "63:             'fields' => [",
          "64:                 'alternate_email' => [",
          "65:                     new Optional(new Email()),",
          "66:                 ],",
          "70:         $collection2 = new Collection([",
          "71:             'fields' => [",
          "72:                 'alternate_email' => new Optional(new Email()),",
          "73:             ],",
          "",
          "[Added Lines]",
          "65:         $collection1 = new Collection(fields: [",
          "66:             'alternate_email' => [",
          "67:                 new Optional(new Email()),",
          "71:         $collection2 = new Collection(fields: [",
          "72:             'alternate_email' => new Optional(new Email()),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     public function testAcceptRequiredConstraintAsOneElementArray()",
          "80:     {",
          "86:             ],",
          "87:         ]);",
          "93:         ]);",
          "95:         $this->assertEquals($collection1, $collection2);",
          "",
          "[Removed Lines]",
          "81:         $collection1 = new Collection([",
          "82:             'fields' => [",
          "83:                 'alternate_email' => [",
          "84:                     new Required(new Email()),",
          "85:                 ],",
          "89:         $collection2 = new Collection([",
          "90:             'fields' => [",
          "91:                 'alternate_email' => new Required(new Email()),",
          "92:             ],",
          "",
          "[Added Lines]",
          "80:         $collection1 = new Collection(fields: [",
          "81:             'alternate_email' => [",
          "82:                 new Required(new Email()),",
          "86:         $collection2 = new Collection(fields: [",
          "87:             'alternate_email' => new Required(new Email()),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     public function testAllKeysAreKnowOptions()",
          "127:     {",
          "130:                 'fields' => [new Required()],",
          "131:                 'properties' => [new Required()],",
          "132:                 'catalog' => [new Optional()],",
          "133:             ],",
          "138:         $this->assertArrayHasKey('fields', $constraint->fields);",
          "139:         $this->assertInstanceOf(Required::class, $constraint->fields['fields']);",
          "",
          "[Removed Lines]",
          "128:         $constraint = new Collection([",
          "129:             'fields' => [",
          "134:             'allowExtraFields' => true,",
          "135:             'extraFieldsMessage' => 'foo bar baz',",
          "136:         ]);",
          "",
          "[Added Lines]",
          "126:         $constraint = new Collection(",
          "127:             fields: [",
          "132:             allowExtraFields: true,",
          "133:             extraFieldsMessage: 'foo bar baz',",
          "134:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:     public function testEmptyFieldsInOptions()",
          "158:     {",
          "165:         $this->assertSame([], $constraint->fields);",
          "166:         $this->assertTrue($constraint->allowExtraFields);",
          "",
          "[Removed Lines]",
          "159:         $constraint = new Collection([",
          "160:             'fields' => [],",
          "161:             'allowExtraFields' => true,",
          "162:             'extraFieldsMessage' => 'foo bar baz',",
          "163:         ]);",
          "",
          "[Added Lines]",
          "157:         $constraint = new Collection(",
          "158:             fields: [],",
          "159:             allowExtraFields: true,",
          "160:             extraFieldsMessage: 'foo bar baz',",
          "161:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "197:     public function testEmptyConstraintListForFieldInOptions(?array $fieldConstraint)",
          "198:     {",
          "201:                 'foo' => $fieldConstraint,",
          "202:             ],",
          "207:         $this->assertArrayHasKey('foo', $constraint->fields);",
          "208:         $this->assertInstanceOf(Required::class, $constraint->fields['foo']);",
          "",
          "[Removed Lines]",
          "199:         $constraint = new Collection([",
          "200:             'fields' => [",
          "203:             'allowExtraFields' => true,",
          "204:             'extraFieldsMessage' => 'foo bar baz',",
          "205:         ]);",
          "",
          "[Added Lines]",
          "197:         $constraint = new Collection(",
          "198:             fields: [",
          "201:             allowExtraFields: true,",
          "202:             extraFieldsMessage: 'foo bar baz',",
          "203:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php||src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php -> src/Symfony/Component/Validator/Tests/Constraints/CollectionValidatorTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     public function testNullIsValid()",
          "33:     {",
          "38:         $this->assertNoViolation();",
          "39:     }",
          "41:     public function testFieldsAsDefaultOption()",
          "42:     {",
          "45:         $data = $this->prepareTestData(['foo' => 'foobar']);",
          "",
          "[Removed Lines]",
          "34:         $this->validator->validate(null, new Collection(['fields' => [",
          "35:             'foo' => new Range(['min' => 4]),",
          "36:         ]]));",
          "43:         $constraint = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "34:         $this->validator->validate(null, new Collection(fields: [",
          "35:             'foo' => new Range(min: 4),",
          "36:         ]));",
          "43:         $constraint = new Range(min: 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     public function testThrowsExceptionIfNotTraversable()",
          "57:     {",
          "58:         $this->expectException(UnexpectedValueException::class);",
          "62:     }",
          "64:     public function testWalkSingleConstraint()",
          "65:     {",
          "68:         $array = [",
          "69:             'foo' => 3,",
          "",
          "[Removed Lines]",
          "59:         $this->validator->validate('foobar', new Collection(['fields' => [",
          "60:             'foo' => new Range(['min' => 4]),",
          "61:         ]]));",
          "66:         $constraint = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "59:         $this->validator->validate('foobar', new Collection(fields: [",
          "60:             'foo' => new Range(min: 4),",
          "61:         ]));",
          "66:         $constraint = new Range(min: 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:         $data = $this->prepareTestData($array);",
          "83:                 'foo' => $constraint,",
          "84:                 'bar' => $constraint,",
          "85:             ],",
          "88:         $this->assertNoViolation();",
          "89:     }",
          "",
          "[Removed Lines]",
          "81:         $this->validator->validate($data, new Collection([",
          "82:             'fields' => [",
          "86:         ]));",
          "",
          "[Added Lines]",
          "81:         $this->validator->validate($data, new Collection(",
          "82:             fields: [",
          "86:         ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     public function testWalkMultipleConstraints()",
          "92:     {",
          "93:         $constraints = [",
          "95:             new NotNull(),",
          "96:         ];",
          "",
          "[Removed Lines]",
          "94:             new Range(['min' => 4]),",
          "",
          "[Added Lines]",
          "94:             new Range(min: 4),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:         $data = $this->prepareTestData($array);",
          "113:                 'foo' => $constraints,",
          "114:                 'bar' => $constraints,",
          "115:             ],",
          "118:         $this->assertNoViolation();",
          "119:     }",
          "121:     public function testExtraFieldsDisallowed()",
          "122:     {",
          "125:         $data = $this->prepareTestData([",
          "126:             'foo' => 5,",
          "",
          "[Removed Lines]",
          "111:         $this->validator->validate($data, new Collection([",
          "112:             'fields' => [",
          "116:         ]));",
          "123:         $constraint = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "111:         $this->validator->validate($data, new Collection(",
          "112:             fields: [",
          "116:         ));",
          "123:         $constraint = new Range(min: 4);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:         $this->expectValidateValueAt(0, '[foo]', $data['foo'], [$constraint]);",
          "134:                 'foo' => $constraint,",
          "135:             ],",
          "139:         $this->buildViolation('myMessage')",
          "140:             ->setParameter('{{ field }}', '\"baz\"')",
          "",
          "[Removed Lines]",
          "132:         $this->validator->validate($data, new Collection([",
          "133:             'fields' => [",
          "136:             'extraFieldsMessage' => 'myMessage',",
          "137:         ]));",
          "",
          "[Added Lines]",
          "132:         $this->validator->validate($data, new Collection(",
          "133:             fields: [",
          "136:             extraFieldsMessage: 'myMessage',",
          "137:         ));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "152:             'baz' => 6,",
          "153:         ]);",
          "157:                 'foo' => $constraint,",
          "158:             ],",
          "162:         $this->buildViolation('myMessage')",
          "163:             ->setParameter('{{ field }}', '\"baz\"')",
          "",
          "[Removed Lines]",
          "155:         $this->validator->validate($data, new Collection([",
          "156:             'fields' => [",
          "159:             'extraFieldsMessage' => 'myMessage',",
          "160:         ]));",
          "",
          "[Added Lines]",
          "155:         $this->validator->validate($data, new Collection(",
          "156:             fields: [",
          "159:             extraFieldsMessage: 'myMessage',",
          "160:         ));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "174:             'foo' => null,",
          "175:         ]);",
          "179:         $this->expectValidateValueAt(0, '[foo]', $data['foo'], [$constraint]);",
          "183:                 'foo' => $constraint,",
          "184:             ],",
          "187:         $this->assertNoViolation();",
          "188:     }",
          "",
          "[Removed Lines]",
          "177:         $constraint = new Range(['min' => 4]);",
          "181:         $this->validator->validate($data, new Collection([",
          "182:             'fields' => [",
          "185:         ]));",
          "",
          "[Added Lines]",
          "177:         $constraint = new Range(min: 4);",
          "181:         $this->validator->validate($data, new Collection(",
          "182:             fields: [",
          "185:         ));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "194:             'bar' => 6,",
          "195:         ]);",
          "199:         $this->expectValidateValueAt(0, '[foo]', $data['foo'], [$constraint]);",
          "203:                 'foo' => $constraint,",
          "204:             ],",
          "208:         $this->assertNoViolation();",
          "209:     }",
          "",
          "[Removed Lines]",
          "197:         $constraint = new Range(['min' => 4]);",
          "201:         $this->validator->validate($data, new Collection([",
          "202:             'fields' => [",
          "205:             'allowExtraFields' => true,",
          "206:         ]));",
          "",
          "[Added Lines]",
          "197:         $constraint = new Range(min: 4);",
          "201:         $this->validator->validate($data, new Collection(",
          "202:             fields: [",
          "205:             allowExtraFields: true,",
          "206:         ));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "212:     {",
          "213:         $data = $this->prepareTestData([]);",
          "219:                 'foo' => $constraint,",
          "220:             ],",
          "224:         $this->buildViolation('myMessage')",
          "225:             ->setParameter('{{ field }}', '\"foo\"')",
          "",
          "[Removed Lines]",
          "215:         $constraint = new Range(['min' => 4]);",
          "217:         $this->validator->validate($data, new Collection([",
          "218:             'fields' => [",
          "221:             'missingFieldsMessage' => 'myMessage',",
          "222:         ]));",
          "",
          "[Added Lines]",
          "215:         $constraint = new Range(min: 4);",
          "217:         $this->validator->validate($data, new Collection(",
          "218:             fields: [",
          "221:             missingFieldsMessage: 'myMessage',",
          "222:         ));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "233:     {",
          "234:         $data = $this->prepareTestData([]);",
          "240:                 'foo' => $constraint,",
          "241:             ],",
          "245:         $this->assertNoViolation();",
          "246:     }",
          "",
          "[Removed Lines]",
          "236:         $constraint = new Range(['min' => 4]);",
          "238:         $this->validator->validate($data, new Collection([",
          "239:             'fields' => [",
          "242:             'allowMissingFields' => true,",
          "243:         ]));",
          "",
          "[Added Lines]",
          "236:         $constraint = new Range(min: 4);",
          "238:         $this->validator->validate($data, new Collection(",
          "239:             fields: [",
          "242:             allowMissingFields: true,",
          "243:         ));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "275:             'foo' => 5,",
          "276:         ];",
          "280:         $this->expectValidateValueAt(0, '[foo]', $array['foo'], [$constraint]);",
          "",
          "[Removed Lines]",
          "278:         $constraint = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "278:         $constraint = new Range(min: 4);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "297:         $constraints = [",
          "298:             new NotNull(),",
          "300:         ];",
          "302:         $this->expectValidateValueAt(0, '[foo]', $array['foo'], $constraints);",
          "",
          "[Removed Lines]",
          "299:             new Range(['min' => 4]),",
          "",
          "[Added Lines]",
          "299:             new Range(min: 4),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "327:     {",
          "328:         $data = $this->prepareTestData([]);",
          "332:                 'foo' => new Required(),",
          "333:             ],",
          "337:         $this->buildViolation('myMessage')",
          "338:             ->setParameter('{{ field }}', '\"foo\"')",
          "",
          "[Removed Lines]",
          "330:         $this->validator->validate($data, new Collection([",
          "331:             'fields' => [",
          "334:             'missingFieldsMessage' => 'myMessage',",
          "335:         ]));",
          "",
          "[Added Lines]",
          "330:         $this->validator->validate($data, new Collection(",
          "331:             fields: [",
          "334:             missingFieldsMessage: 'myMessage',",
          "335:         ));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "348:             'foo' => 5,",
          "349:         ];",
          "353:         $this->expectValidateValueAt(0, '[foo]', $array['foo'], [$constraint]);",
          "",
          "[Removed Lines]",
          "351:         $constraint = new Range(['min' => 4]);",
          "",
          "[Added Lines]",
          "351:         $constraint = new Range(min: 4);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "370:         $constraints = [",
          "371:             new NotNull(),",
          "373:         ];",
          "375:         $this->expectValidateValueAt(0, '[foo]', $array['foo'], $constraints);",
          "",
          "[Removed Lines]",
          "372:             new Range(['min' => 4]),",
          "",
          "[Added Lines]",
          "372:             new Range(min: 4),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "389:             'foo' => 3,",
          "390:         ]);",
          "394:         $this->expectValidateValueAt(0, '[foo]', $value['foo'], [$constraint]);",
          "398:                 'foo' => $constraint,",
          "399:             ],",
          "402:         $this->assertEquals([",
          "403:             'foo' => 3,",
          "",
          "[Removed Lines]",
          "392:         $constraint = new Range(['min' => 2]);",
          "396:         $this->validator->validate($value, new Collection([",
          "397:             'fields' => [",
          "400:         ]));",
          "",
          "[Added Lines]",
          "392:         $constraint = new Range(min: 2);",
          "396:         $this->validator->validate($value, new Collection(",
          "397:             fields: [",
          "400:         ));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php||src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CompositeTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     public function testMergeNestedGroupsIfNoExplicitParentGroup()",
          "67:     {",
          "68:         $constraint = new ConcreteComposite([",
          "71:         ]);",
          "73:         $this->assertEquals(['Default', 'Strict'], $constraint->groups);",
          "",
          "[Removed Lines]",
          "69:             new NotNull(['groups' => 'Default']),",
          "70:             new NotBlank(['groups' => ['Default', 'Strict']]),",
          "",
          "[Added Lines]",
          "69:             new NotNull(groups: ['Default']),",
          "70:             new NotBlank(groups: ['Default', 'Strict']),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     {",
          "95:         $constraint = new ConcreteComposite([",
          "96:             'constraints' => [",
          "99:             ],",
          "100:             'groups' => ['Default', 'Strict'],",
          "101:         ]);",
          "",
          "[Removed Lines]",
          "97:                 new NotNull(['groups' => 'Default']),",
          "98:                 new NotBlank(['groups' => 'Strict']),",
          "",
          "[Added Lines]",
          "97:                 new NotNull(groups: ['Default']),",
          "98:                 new NotBlank(groups: ['Strict']),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         $this->expectException(ConstraintDefinitionException::class);",
          "111:         new ConcreteComposite([",
          "112:             'constraints' => [",
          "114:             ],",
          "115:             'groups' => ['Default', 'Strict'],",
          "116:         ]);",
          "",
          "[Removed Lines]",
          "113:                 new NotNull(['groups' => ['Default', 'Foobar']]),",
          "",
          "[Added Lines]",
          "113:                 new NotNull(groups: ['Default', 'Foobar']),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:     public function testImplicitGroupNamesAreForwarded()",
          "120:     {",
          "121:         $constraint = new ConcreteComposite([",
          "124:         ]);",
          "126:         $constraint->addImplicitGroupName('ImplicitGroup');",
          "",
          "[Removed Lines]",
          "122:             new NotNull(['groups' => 'Default']),",
          "123:             new NotBlank(['groups' => 'Strict']),",
          "",
          "[Added Lines]",
          "122:             new NotNull(groups: ['Default']),",
          "123:             new NotBlank(groups: ['Strict']),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:     {",
          "143:         $this->expectException(ConstraintDefinitionException::class);",
          "144:         new ConcreteComposite([",
          "146:             'NotBlank',",
          "147:         ]);",
          "148:     }",
          "",
          "[Removed Lines]",
          "145:             new NotNull(['groups' => 'Default']),",
          "",
          "[Added Lines]",
          "145:             new NotNull(groups: ['Default']),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:     {",
          "152:         $this->expectException(ConstraintDefinitionException::class);",
          "153:         new ConcreteComposite([",
          "155:             new \\ArrayObject(),",
          "156:         ]);",
          "157:     }",
          "",
          "[Removed Lines]",
          "154:             new NotNull(['groups' => 'Default']),",
          "",
          "[Added Lines]",
          "154:             new NotNull(groups: ['Default']),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php||src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CompoundTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     protected function getConstraints(array $options): array",
          "73:     {",
          "74:         return [",
          "76:         ];",
          "77:     }",
          "78: }",
          "",
          "[Removed Lines]",
          "75:             new Length(['min' => $options['min'] ?? null]),",
          "",
          "[Added Lines]",
          "78:             new Length(min: $options['min'] ?? null),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php||src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php -> src/Symfony/Component/Validator/Tests/Constraints/CountValidatorTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     public function testTooFewValuesExact($value)",
          "260:     {",
          "267:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "261:         $constraint = new Count([",
          "262:             'min' => 4,",
          "263:             'max' => 4,",
          "264:             'exactMessage' => 'myMessage',",
          "265:         ]);",
          "",
          "[Added Lines]",
          "267:         $constraint = new Count(",
          "268:             min: 4,",
          "269:             max: 4,",
          "270:             exactMessage: 'myMessage',",
          "271:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:     public function testConstraintAttributeDefaultOption()",
          "287:     {",
          "290:         $this->assertEquals(5, $constraint->min);",
          "291:         $this->assertEquals(5, $constraint->max);",
          "",
          "[Removed Lines]",
          "288:         $constraint = new Count(['value' => 5, 'exactMessage' => 'message']);",
          "",
          "[Added Lines]",
          "294:         $constraint = new Count(exactly: 5, exactMessage: 'message');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     public function testDivisibleBy()",
          "298:     {",
          "309:         $this->validator->validate(['foo', 'bar', 'ccc'], $constraint);",
          "",
          "[Removed Lines]",
          "299:         $constraint = new Count([",
          "300:             'divisibleBy' => 123,",
          "301:             'divisibleByMessage' => 'foo {{ compared_value }}',",
          "302:         ]);",
          "304:         $this->expectValidateValue(0, 3, [new DivisibleBy([",
          "305:             'value' => 123,",
          "306:             'message' => 'foo {{ compared_value }}',",
          "307:         ])], $this->group);",
          "",
          "[Added Lines]",
          "305:         $constraint = new Count(",
          "306:             divisibleBy: 123,",
          "307:             divisibleByMessage: 'foo {{ compared_value }}',",
          "308:         );",
          "310:         $this->expectValidateValue(0, 3, [new DivisibleBy(",
          "311:             value: 123,",
          "312:             message: 'foo {{ compared_value }}',",
          "313:         )], $this->group);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CountryValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     public function testInvalidCountries($country)",
          "86:     {",
          "91:         $this->validator->validate($country, $constraint);",
          "",
          "[Removed Lines]",
          "87:         $constraint = new Country([",
          "88:             'message' => 'myMessage',",
          "89:         ]);",
          "",
          "[Added Lines]",
          "87:         $constraint = new Country(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     public function testValidAlpha3Countries($country)",
          "111:     {",
          "116:         $this->assertNoViolation();",
          "117:     }",
          "",
          "[Removed Lines]",
          "112:         $this->validator->validate($country, new Country([",
          "113:             'alpha3' => true,",
          "114:         ]));",
          "",
          "[Added Lines]",
          "110:         $this->validator->validate($country, new Country(alpha3: true));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:     public function testInvalidAlpha3Countries($country)",
          "132:     {",
          "138:         $this->validator->validate($country, $constraint);",
          "",
          "[Removed Lines]",
          "133:         $constraint = new Country([",
          "134:             'alpha3' => true,",
          "135:             'message' => 'myMessage',",
          "136:         ]);",
          "",
          "[Added Lines]",
          "129:         $constraint = new Country(",
          "130:             alpha3: true,",
          "131:             message: 'myMessage',",
          "132:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/CurrencyValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     public function testInvalidCurrencies($currency)",
          "102:     {",
          "107:         $this->validator->validate($currency, $constraint);",
          "",
          "[Removed Lines]",
          "103:         $constraint = new Currency([",
          "104:             'message' => 'myMessage',",
          "105:         ]);",
          "",
          "[Added Lines]",
          "103:         $constraint = new Currency(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/DateTimeValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     public function testValidDateTimes($format, $dateTime)",
          "65:     {",
          "70:         $this->validator->validate($dateTime, $constraint);",
          "",
          "[Removed Lines]",
          "66:         $constraint = new DateTime([",
          "67:             'format' => $format,",
          "68:         ]);",
          "",
          "[Added Lines]",
          "66:         $constraint = new DateTime(format: $format);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     public function testInvalidDateTimes($format, $dateTime, $code)",
          "90:     {",
          "96:         $this->validator->validate($dateTime, $constraint);",
          "",
          "[Removed Lines]",
          "91:         $constraint = new DateTime([",
          "92:             'message' => 'myMessage',",
          "93:             'format' => $format,",
          "94:         ]);",
          "",
          "[Added Lines]",
          "89:         $constraint = new DateTime(",
          "90:             message: 'myMessage',",
          "91:             format: $format,",
          "92:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:     public function testDateTimeWithTrailingData()",
          "135:     {",
          "139:         $this->assertNoViolation();",
          "140:     }",
          "141: }",
          "",
          "[Removed Lines]",
          "136:         $this->validator->validate('1995-05-10 00:00:00', new DateTime([",
          "137:             'format' => 'Y-m-d+',",
          "138:         ]));",
          "",
          "[Added Lines]",
          "134:         $this->validator->validate('1995-05-10 00:00:00', new DateTime(format: 'Y-m-d+'));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/DateValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     public function testValidDatesWithNewLine(string $date)",
          "60:     {",
          "63:         $this->buildViolation('myMessage')",
          "64:             ->setParameter('{{ value }}', '\"'.$date.\"\\n\\\"\")",
          "",
          "[Removed Lines]",
          "61:         $this->validator->validate($date.\"\\n\", new Date(['message' => 'myMessage']));",
          "",
          "[Added Lines]",
          "61:         $this->validator->validate($date.\"\\n\", new Date(message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     public function testInvalidDates($date, $code)",
          "82:     {",
          "87:         $this->validator->validate($date, $constraint);",
          "",
          "[Removed Lines]",
          "83:         $constraint = new Date([",
          "84:             'message' => 'myMessage',",
          "85:         ]);",
          "",
          "[Added Lines]",
          "83:         $constraint = new Date(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php||src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php -> src/Symfony/Component/Validator/Tests/Constraints/DisableAutoMappingTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/DivisibleByValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     protected static function createConstraint(?array $options = null): Constraint",
          "34:     {",
          "36:     }",
          "38:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "35:         return new DivisibleBy($options);",
          "",
          "[Added Lines]",
          "35:         if (null !== $options) {",
          "36:             return new DivisibleBy(...$options);",
          "37:         }",
          "39:         return new DivisibleBy();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php -> src/Symfony/Component/Validator/Tests/Constraints/EmailTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: {",
          "22:     public function testConstructorStrict()",
          "23:     {",
          "26:         $this->assertEquals(Email::VALIDATION_MODE_STRICT, $subject->mode);",
          "27:     }",
          "29:     public function testConstructorHtml5AllowNoTld()",
          "30:     {",
          "33:         $this->assertEquals(Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD, $subject->mode);",
          "34:     }",
          "",
          "[Removed Lines]",
          "24:         $subject = new Email(['mode' => Email::VALIDATION_MODE_STRICT]);",
          "31:         $subject = new Email(['mode' => Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD]);",
          "",
          "[Added Lines]",
          "24:         $subject = new Email(mode: Email::VALIDATION_MODE_STRICT);",
          "31:         $subject = new Email(mode: Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     {",
          "38:         $this->expectException(InvalidArgumentException::class);",
          "39:         $this->expectExceptionMessage('The \"mode\" parameter value is not valid.');",
          "41:     }",
          "43:     public function testUnknownModeArgumentsTriggerException()",
          "",
          "[Removed Lines]",
          "40:         new Email(['mode' => 'Unknown Mode']);",
          "",
          "[Added Lines]",
          "40:         new Email(mode: 'Unknown Mode');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     public function testNormalizerCanBeSet()",
          "51:     {",
          "54:         $this->assertEquals('trim', $email->normalizer);",
          "55:     }",
          "57:     public function testInvalidNormalizerThrowsException()",
          "58:     {",
          "59:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "52:         $email = new Email(['normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "52:         $email = new Email(normalizer: 'trim');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     public function testValidNormalizedEmails($email)",
          "99:     {",
          "102:         $this->assertNoViolation();",
          "103:     }",
          "",
          "[Removed Lines]",
          "100:         $this->validator->validate($email, new Email(['normalizer' => 'trim']));",
          "",
          "[Added Lines]",
          "100:         $this->validator->validate($email, new Email(normalizer: 'trim'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:     public function testValidEmailsHtml5($email)",
          "117:     {",
          "120:         $this->assertNoViolation();",
          "121:     }",
          "",
          "[Removed Lines]",
          "118:         $this->validator->validate($email, new Email(['mode' => Email::VALIDATION_MODE_HTML5]));",
          "",
          "[Added Lines]",
          "118:         $this->validator->validate($email, new Email(mode: Email::VALIDATION_MODE_HTML5));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     public function testInvalidEmails($email)",
          "137:     {",
          "142:         $this->validator->validate($email, $constraint);",
          "",
          "[Removed Lines]",
          "138:         $constraint = new Email([",
          "139:             'message' => 'myMessage',",
          "140:         ]);",
          "",
          "[Added Lines]",
          "138:         $constraint = new Email(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:     public function testInvalidHtml5Emails($email)",
          "164:     {",
          "170:         $this->validator->validate($email, $constraint);",
          "",
          "[Removed Lines]",
          "165:         $constraint = new Email([",
          "166:             'message' => 'myMessage',",
          "167:             'mode' => Email::VALIDATION_MODE_HTML5,",
          "168:         ]);",
          "",
          "[Added Lines]",
          "163:         $constraint = new Email(",
          "164:             message: 'myMessage',",
          "165:             mode: Email::VALIDATION_MODE_HTML5,",
          "166:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:     public function testInvalidAllowNoTldEmails($email)",
          "204:     {",
          "210:         $this->validator->validate($email, $constraint);",
          "",
          "[Removed Lines]",
          "205:         $constraint = new Email([",
          "206:             'message' => 'myMessage',",
          "207:             'mode' => Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD,",
          "208:         ]);",
          "",
          "[Added Lines]",
          "203:         $constraint = new Email(",
          "204:             message: 'myMessage',",
          "205:             mode: Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD,",
          "206:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:     public function testModeStrict()",
          "230:     {",
          "233:         $this->validator->validate('example@mywebsite.tld', $constraint);",
          "",
          "[Removed Lines]",
          "231:         $constraint = new Email(['mode' => Email::VALIDATION_MODE_STRICT]);",
          "",
          "[Added Lines]",
          "229:         $constraint = new Email(mode: Email::VALIDATION_MODE_STRICT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:     public function testModeHtml5()",
          "239:     {",
          "242:         $this->validator->validate('example@example..com', $constraint);",
          "",
          "[Removed Lines]",
          "240:         $constraint = new Email(['mode' => Email::VALIDATION_MODE_HTML5]);",
          "",
          "[Added Lines]",
          "238:         $constraint = new Email(mode: Email::VALIDATION_MODE_HTML5);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "250:     public function testModeHtml5AllowNoTld()",
          "251:     {",
          "254:         $this->validator->validate('example@example', $constraint);",
          "",
          "[Removed Lines]",
          "252:         $constraint = new Email(['mode' => Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD]);",
          "",
          "[Added Lines]",
          "250:         $constraint = new Email(mode: Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "273:     public function testStrictWithInvalidEmails($email)",
          "274:     {",
          "280:         $this->validator->validate($email, $constraint);",
          "",
          "[Removed Lines]",
          "275:         $constraint = new Email([",
          "276:             'message' => 'myMessage',",
          "277:             'mode' => Email::VALIDATION_MODE_STRICT,",
          "278:         ]);",
          "",
          "[Added Lines]",
          "273:         $constraint = new Email(",
          "274:             message: 'myMessage',",
          "275:             mode: Email::VALIDATION_MODE_STRICT,",
          "276:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php||src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php -> src/Symfony/Component/Validator/Tests/Constraints/EnableAutoMappingTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/EqualToValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new EqualTo($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new EqualTo(...$options);",
          "39:         }",
          "41:         return new EqualTo();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php||src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php -> src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     public static function provideServiceValidatedConstraints(): iterable",
          "38:     {",
          "41:         yield 'named arguments' => [new ExpressionSyntax(service: 'my_service')];",
          "43:         $metadata = new ClassMetadata(ExpressionSyntaxDummy::class);",
          "",
          "[Removed Lines]",
          "39:         yield 'Doctrine style' => [new ExpressionSyntax(['service' => 'my_service'])];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         yield 'attribute' => [$metadata->properties['b']->constraints[0]];",
          "47:     }",
          "49:     public function testAttributes()",
          "50:     {",
          "51:         $metadata = new ClassMetadata(ExpressionSyntaxDummy::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     public function testValidatedByServiceDoctrineStyle()",
          "51:     {",
          "52:         $constraint = new ExpressionSyntax(['service' => 'my_service']);",
          "54:         self::assertSame('my_service', $constraint->validatedBy());",
          "55:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/ExpressionSyntaxValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     public function testExpressionValid()",
          "42:     {",
          "48:         $this->assertNoViolation();",
          "49:     }",
          "51:     public function testStringableExpressionValid()",
          "52:     {",
          "58:         $this->assertNoViolation();",
          "59:     }",
          "61:     public function testExpressionWithoutNames()",
          "62:     {",
          "67:         $this->assertNoViolation();",
          "68:     }",
          "70:     public function testExpressionWithAllowedVariableName()",
          "71:     {",
          "77:         $this->assertNoViolation();",
          "78:     }",
          "80:     public function testExpressionIsNotValid()",
          "81:     {",
          "87:         $this->buildViolation('myMessage')",
          "88:             ->setParameter('{{ syntax_error }}', '\"Variable \"a\" is not valid around position 1 for expression `a + 1`.\"')",
          "",
          "[Removed Lines]",
          "43:         $this->validator->validate('1 + 1', new ExpressionSyntax([",
          "44:             'message' => 'myMessage',",
          "45:             'allowedVariables' => [],",
          "46:         ]));",
          "53:         $this->validator->validate(new StringableValue('1 + 1'), new ExpressionSyntax([",
          "54:             'message' => 'myMessage',",
          "55:             'allowedVariables' => [],",
          "56:         ]));",
          "63:         $this->validator->validate('1 + 1', new ExpressionSyntax([",
          "64:             'message' => 'myMessage',",
          "65:         ], null, null, []));",
          "72:         $this->validator->validate('a + 1', new ExpressionSyntax([",
          "73:             'message' => 'myMessage',",
          "74:             'allowedVariables' => ['a'],",
          "75:         ]));",
          "82:         $this->validator->validate('a + 1', new ExpressionSyntax([",
          "83:             'message' => 'myMessage',",
          "84:             'allowedVariables' => [],",
          "85:         ]));",
          "",
          "[Added Lines]",
          "43:         $this->validator->validate('1 + 1', new ExpressionSyntax(",
          "44:             message: 'myMessage',",
          "45:             allowedVariables: [],",
          "46:         ));",
          "53:         $this->validator->validate(new StringableValue('1 + 1'), new ExpressionSyntax(",
          "54:             message: 'myMessage',",
          "55:             allowedVariables: [],",
          "56:         ));",
          "63:         $this->validator->validate('1 + 1', new ExpressionSyntax(null, 'myMessage', null, []));",
          "70:         $this->validator->validate('a + 1', new ExpressionSyntax(",
          "71:             message: 'myMessage',",
          "72:             allowedVariables: ['a'],",
          "73:         ));",
          "80:         $this->validator->validate('a + 1', new ExpressionSyntax(",
          "81:             message: 'myMessage',",
          "82:             allowedVariables: [],",
          "83:         ));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     public function testStringableExpressionIsNotValid()",
          "95:     {",
          "101:         $this->buildViolation('myMessage')",
          "102:             ->setParameter('{{ syntax_error }}', '\"Variable \"a\" is not valid around position 1 for expression `a + 1`.\"')",
          "",
          "[Removed Lines]",
          "96:         $this->validator->validate(new StringableValue('a + 1'), new ExpressionSyntax([",
          "97:             'message' => 'myMessage',",
          "98:             'allowedVariables' => [],",
          "99:         ]));",
          "",
          "[Added Lines]",
          "94:         $this->validator->validate(new StringableValue('a + 1'), new ExpressionSyntax(",
          "95:             message: 'myMessage',",
          "96:             allowedVariables: [],",
          "97:         ));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/ExpressionValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     public function testExpressionIsEvaluatedWithNullValue()",
          "33:     {",
          "39:         $this->validator->validate(null, $constraint);",
          "",
          "[Removed Lines]",
          "34:         $constraint = new Expression([",
          "35:             'expression' => 'false',",
          "36:             'message' => 'myMessage',",
          "37:         ]);",
          "",
          "[Added Lines]",
          "34:         $constraint = new Expression(",
          "35:             expression: 'false',",
          "36:             message: 'myMessage',",
          "37:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     public function testExpressionIsEvaluatedWithEmptyStringValue()",
          "48:     {",
          "54:         $this->validator->validate('', $constraint);",
          "",
          "[Removed Lines]",
          "49:         $constraint = new Expression([",
          "50:             'expression' => 'false',",
          "51:             'message' => 'myMessage',",
          "52:         ]);",
          "",
          "[Added Lines]",
          "49:         $constraint = new Expression(",
          "50:             expression: 'false',",
          "51:             message: 'myMessage',",
          "52:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     public function testFailingExpressionAtObjectLevel()",
          "77:     {",
          "83:         $object = new Entity();",
          "84:         $object->data = '2';",
          "",
          "[Removed Lines]",
          "78:         $constraint = new Expression([",
          "79:             'expression' => 'this.data == 1',",
          "80:             'message' => 'myMessage',",
          "81:         ]);",
          "",
          "[Added Lines]",
          "78:         $constraint = new Expression(",
          "79:             expression: 'this.data == 1',",
          "80:             message: 'myMessage',",
          "81:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:     public function testFailingExpressionAtObjectLevelWithToString()",
          "111:     {",
          "117:         $object = new ToString();",
          "118:         $object->data = '2';",
          "",
          "[Removed Lines]",
          "112:         $constraint = new Expression([",
          "113:             'expression' => 'this.data == 1',",
          "114:             'message' => 'myMessage',",
          "115:         ]);",
          "",
          "[Added Lines]",
          "112:         $constraint = new Expression(",
          "113:             expression: 'this.data == 1',",
          "114:             message: 'myMessage',",
          "115:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:     public function testFailingExpressionAtPropertyLevel()",
          "147:     {",
          "153:         $object = new Entity();",
          "154:         $object->data = '1';",
          "",
          "[Removed Lines]",
          "148:         $constraint = new Expression([",
          "149:             'expression' => 'value == this.data',",
          "150:             'message' => 'myMessage',",
          "151:         ]);",
          "",
          "[Added Lines]",
          "148:         $constraint = new Expression(",
          "149:             expression: 'value == this.data',",
          "150:             message: 'myMessage',",
          "151:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:     public function testFailingExpressionAtNestedPropertyLevel()",
          "189:     {",
          "195:         $object = new Entity();",
          "196:         $object->data = '1';",
          "",
          "[Removed Lines]",
          "190:         $constraint = new Expression([",
          "191:             'expression' => 'value == this.data',",
          "192:             'message' => 'myMessage',",
          "193:         ]);",
          "",
          "[Added Lines]",
          "190:         $constraint = new Expression(",
          "191:             expression: 'value == this.data',",
          "192:             message: 'myMessage',",
          "193:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235:     public function testFailingExpressionAtPropertyLevelWithoutRoot()",
          "236:     {",
          "242:         $this->setRoot('2');",
          "243:         $this->setPropertyPath('');",
          "",
          "[Removed Lines]",
          "237:         $constraint = new Expression([",
          "238:             'expression' => 'value == \"1\"',",
          "239:             'message' => 'myMessage',",
          "240:         ]);",
          "",
          "[Added Lines]",
          "237:         $constraint = new Expression(",
          "238:             expression: 'value == \"1\"',",
          "239:             message: 'myMessage',",
          "240:         );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:     public function testExpressionLanguageUsage()",
          "256:     {",
          "261:         $expressionLanguage = $this->createMock(ExpressionLanguage::class);",
          "",
          "[Removed Lines]",
          "257:         $constraint = new Expression([",
          "258:             'expression' => 'false',",
          "259:         ]);",
          "",
          "[Added Lines]",
          "257:         $constraint = new Expression(expression: 'false');",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "279:     public function testPassingCustomValues()",
          "280:     {",
          "284:                 'custom' => 1,",
          "285:             ],",
          "288:         $this->validator->validate(1, $constraint);",
          "",
          "[Removed Lines]",
          "281:         $constraint = new Expression([",
          "282:             'expression' => 'value + custom == 2',",
          "283:             'values' => [",
          "286:         ]);",
          "",
          "[Added Lines]",
          "279:         $constraint = new Expression(",
          "280:             expression: 'value + custom == 2',",
          "281:             values: [",
          "284:         );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "293:     public function testViolationOnPass()",
          "294:     {",
          "298:                 'custom' => 1,",
          "299:             ],",
          "303:         $this->validator->validate(2, $constraint);",
          "",
          "[Removed Lines]",
          "295:         $constraint = new Expression([",
          "296:             'expression' => 'value + custom != 2',",
          "297:             'values' => [",
          "300:             'negate' => false,",
          "301:         ]);",
          "",
          "[Added Lines]",
          "293:         $constraint = new Expression(",
          "294:             expression: 'value + custom != 2',",
          "295:             values: [",
          "298:             negate: false,",
          "299:         );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312:     public function testIsValidExpression()",
          "313:     {",
          "316:         $constraint = new Expression(",
          "318:         );",
          "320:         $object = new Entity();",
          "",
          "[Removed Lines]",
          "314:         $constraints = [new NotNull(), new Range(['min' => 2])];",
          "317:             ['expression' => 'is_valid(this.data, a)', 'values' => ['a' => $constraints]]",
          "",
          "[Added Lines]",
          "312:         $constraints = [new NotNull(), new Range(min: 2)];",
          "315:             expression: 'is_valid(this.data, a)',",
          "316:             values: ['a' => $constraints],",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "332:     public function testIsValidExpressionInvalid()",
          "333:     {",
          "336:         $constraint = new Expression(",
          "338:         );",
          "340:         $object = new Entity();",
          "",
          "[Removed Lines]",
          "334:         $constraints = [new Range(['min' => 2, 'max' => 5])];",
          "337:             ['expression' => 'is_valid(this.data, a)', 'values' => ['a' => $constraints]]",
          "",
          "[Added Lines]",
          "333:         $constraints = [new Range(min: 2, max: 5)];",
          "336:             expression: 'is_valid(this.data, a)',",
          "337:             values: ['a' => $constraints],",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/FileTest.php||src/Symfony/Component/Validator/Tests/Constraints/FileTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/FileTest.php -> src/Symfony/Component/Validator/Tests/Constraints/FileTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     public function testMaxSize($maxSize, $bytes, $binaryFormat)",
          "26:     {",
          "29:         $this->assertSame($bytes, $file->maxSize);",
          "30:         $this->assertSame($binaryFormat, $file->binaryFormat);",
          "",
          "[Removed Lines]",
          "27:         $file = new File(['maxSize' => $maxSize]);",
          "",
          "[Added Lines]",
          "27:         $file = new File(maxSize: $maxSize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     public function testMagicIsset()",
          "35:     {",
          "38:         $this->assertTrue($file->__isset('maxSize'));",
          "39:         $this->assertTrue($file->__isset('groups'));",
          "",
          "[Removed Lines]",
          "36:         $file = new File(['maxSize' => 1]);",
          "",
          "[Added Lines]",
          "36:         $file = new File(maxSize: 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     public function testInvalidValueForMaxSizeThrowsExceptionAfterInitialization($maxSize)",
          "59:     {",
          "62:         $this->expectException(ConstraintDefinitionException::class);",
          "",
          "[Removed Lines]",
          "60:         $file = new File(['maxSize' => 1000]);",
          "",
          "[Added Lines]",
          "60:         $file = new File(maxSize: 1000);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:     public function testMaxSizeCannotBeSetToInvalidValueAfterInitialization($maxSize)",
          "71:     {",
          "74:         try {",
          "75:             $file->maxSize = $maxSize;",
          "",
          "[Removed Lines]",
          "72:         $file = new File(['maxSize' => 1000]);",
          "",
          "[Added Lines]",
          "72:         $file = new File(maxSize: 1000);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:     public function testInvalidMaxSize($maxSize)",
          "86:     {",
          "87:         $this->expectException(ConstraintDefinitionException::class);",
          "89:     }",
          "91:     public static function provideValidSizes()",
          "",
          "[Removed Lines]",
          "88:         new File(['maxSize' => $maxSize]);",
          "",
          "[Added Lines]",
          "88:         new File(maxSize: $maxSize);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:     public function testBinaryFormat($maxSize, $guessedFormat, $binaryFormat)",
          "127:     {",
          "130:         $this->assertSame($binaryFormat, $file->binaryFormat);",
          "131:     }",
          "",
          "[Removed Lines]",
          "128:         $file = new File(['maxSize' => $maxSize, 'binaryFormat' => $guessedFormat]);",
          "",
          "[Added Lines]",
          "128:         $file = new File(maxSize: $maxSize, binaryFormat: $guessedFormat);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php||src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php -> src/Symfony/Component/Validator/Tests/Constraints/FileValidatorPathTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     public function testFileNotFound()",
          "24:     {",
          "29:         $this->validator->validate('foobar', $constraint);",
          "",
          "[Removed Lines]",
          "25:         $constraint = new File([",
          "26:             'notFoundMessage' => 'myMessage',",
          "27:         ]);",
          "",
          "[Added Lines]",
          "25:         $constraint = new File(",
          "26:             notFoundMessage: 'myMessage',",
          "27:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php||src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php -> src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:         fwrite($this->file, '0');",
          "169:         fclose($this->file);",
          "176:         $this->validator->validate($this->getFile($this->path), $constraint);",
          "",
          "[Removed Lines]",
          "171:         $constraint = new File([",
          "172:             'maxSize' => $limit,",
          "173:             'maxSizeMessage' => 'myMessage',",
          "174:         ]);",
          "",
          "[Added Lines]",
          "171:         $constraint = new File(",
          "172:             maxSize: $limit,",
          "173:             maxSizeMessage: 'myMessage',",
          "174:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:         fwrite($this->file, '0');",
          "221:         fclose($this->file);",
          "228:         $this->validator->validate($this->getFile($this->path), $constraint);",
          "",
          "[Removed Lines]",
          "223:         $constraint = new File([",
          "224:             'maxSize' => $limit,",
          "225:             'maxSizeMessage' => 'myMessage',",
          "226:         ]);",
          "",
          "[Added Lines]",
          "223:         $constraint = new File(",
          "224:             maxSize: $limit,",
          "225:             maxSizeMessage: 'myMessage',",
          "226:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:     public function testInvalidMaxSize()",
          "234:     {",
          "235:         $this->expectException(ConstraintDefinitionException::class);",
          "239:     }",
          "241:     public static function provideBinaryFormatTests()",
          "",
          "[Removed Lines]",
          "236:         new File([",
          "237:             'maxSize' => '1abc',",
          "238:         ]);",
          "",
          "[Added Lines]",
          "236:         new File(maxSize: '1abc');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:         fwrite($this->file, '0');",
          "270:         fclose($this->file);",
          "278:         $this->validator->validate($this->getFile($this->path), $constraint);",
          "",
          "[Removed Lines]",
          "272:         $constraint = new File([",
          "273:             'maxSize' => $limit,",
          "274:             'binaryFormat' => $binaryFormat,",
          "275:             'maxSizeMessage' => 'myMessage',",
          "276:         ]);",
          "",
          "[Added Lines]",
          "270:         $constraint = new File(",
          "271:             maxSize: $limit,",
          "272:             binaryFormat: $binaryFormat,",
          "273:             maxSizeMessage: 'myMessage',",
          "274:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:             ->method('getMimeType')",
          "323:             ->willReturn('image/jpg');",
          "329:         $this->validator->validate($file, $constraint);",
          "",
          "[Removed Lines]",
          "325:         $constraint = new File([",
          "326:             'mimeTypes' => ['image/png', 'image/jpg'],",
          "327:         ]);",
          "",
          "[Added Lines]",
          "323:         $constraint = new File(mimeTypes: ['image/png', 'image/jpg']);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:             ->method('getMimeType')",
          "347:             ->willReturn('image/jpg');",
          "353:         $this->validator->validate($file, $constraint);",
          "355:         $this->assertNoViolation();",
          "356:     }",
          "362:     {",
          "363:         $file = $this",
          "364:             ->getMockBuilder(\\Symfony\\Component\\HttpFoundation\\File\\File::class)",
          "",
          "[Removed Lines]",
          "349:         $constraint = new File([",
          "350:             'mimeTypes' => ['image/*'],",
          "351:         ]);",
          "361:     public function testInvalidMimeType(File $constraint)",
          "",
          "[Added Lines]",
          "345:         $constraint = new File(mimeTypes: ['image/*']);",
          "352:     public function testInvalidMimeType()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "373:             ->method('getMimeType')",
          "374:             ->willReturn('application/pdf');",
          "378:         $this->buildViolation('myMessage')",
          "379:             ->setParameter('{{ type }}', '\"application/pdf\"')",
          "",
          "[Removed Lines]",
          "376:         $this->validator->validate($file, $constraint);",
          "",
          "[Added Lines]",
          "367:         $this->validator->validate($file, new File(mimeTypes: ['image/png', 'image/jpg'], mimeTypesMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "384:             ->assertRaised();",
          "385:     }",
          "388:     {",
          "390:             'mimeTypes' => ['image/png', 'image/jpg'],",
          "391:             'mimeTypesMessage' => 'myMessage',",
          "396:     }",
          "398:     public function testInvalidWildcardMimeType()",
          "",
          "[Removed Lines]",
          "387:     public static function provideMimeTypeConstraints(): iterable",
          "389:         yield 'Doctrine style' => [new File([",
          "392:         ])];",
          "393:         yield 'named arguments' => [",
          "394:             new File(mimeTypes: ['image/png', 'image/jpg'], mimeTypesMessage: 'myMessage'),",
          "395:         ];",
          "",
          "[Added Lines]",
          "381:     public function testInvalidMimeTypeDoctrineStyle()",
          "383:         $file = $this",
          "384:             ->getMockBuilder(\\Symfony\\Component\\HttpFoundation\\File\\File::class)",
          "385:             ->setConstructorArgs([__DIR__.'/Fixtures/foo'])",
          "386:             ->getMock();",
          "387:         $file",
          "388:             ->expects($this->once())",
          "389:             ->method('getPathname')",
          "390:             ->willReturn($this->path);",
          "391:         $file",
          "392:             ->expects($this->once())",
          "393:             ->method('getMimeType')",
          "394:             ->willReturn('application/pdf');",
          "396:         $this->validator->validate($file, new File([",
          "399:         ]));",
          "401:         $this->buildViolation('myMessage')",
          "402:             ->setParameter('{{ type }}', '\"application/pdf\"')",
          "403:             ->setParameter('{{ types }}', '\"image/png\", \"image/jpg\"')",
          "404:             ->setParameter('{{ file }}', '\"'.$this->path.'\"')",
          "405:             ->setParameter('{{ name }}', '\"'.basename($this->path).'\"')",
          "406:             ->setCode(File::INVALID_MIME_TYPE_ERROR)",
          "407:             ->assertRaised();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410:             ->method('getMimeType')",
          "411:             ->willReturn('application/pdf');",
          "418:         $this->validator->validate($file, $constraint);",
          "",
          "[Removed Lines]",
          "413:         $constraint = new File([",
          "414:             'mimeTypes' => ['image/*', 'image/jpg'],",
          "415:             'mimeTypesMessage' => 'myMessage',",
          "416:         ]);",
          "",
          "[Added Lines]",
          "425:         $constraint = new File(",
          "426:             mimeTypes: ['image/*', 'image/jpg'],",
          "427:             mimeTypesMessage: 'myMessage',",
          "428:         );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "426:             ->assertRaised();",
          "427:     }",
          "433:     {",
          "434:         ftruncate($this->file, 0);",
          "438:         $this->buildViolation('myMessage')",
          "439:             ->setParameter('{{ file }}', '\"'.$this->path.'\"')",
          "",
          "[Removed Lines]",
          "432:     public function testDisallowEmpty(File $constraint)",
          "436:         $this->validator->validate($this->getFile($this->path), $constraint);",
          "",
          "[Added Lines]",
          "441:     public function testDisallowEmpty()",
          "445:         $this->validator->validate($this->getFile($this->path), new File(disallowEmptyMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "442:             ->assertRaised();",
          "443:     }",
          "446:     {",
          "448:             'disallowEmptyMessage' => 'myMessage',",
          "453:     }",
          "",
          "[Removed Lines]",
          "445:     public static function provideDisallowEmptyConstraints(): iterable",
          "447:         yield 'Doctrine style' => [new File([",
          "449:         ])];",
          "450:         yield 'named arguments' => [",
          "451:             new File(disallowEmptyMessage: 'myMessage'),",
          "452:         ];",
          "",
          "[Added Lines]",
          "457:     public function testDisallowEmptyDoctrineStyle()",
          "459:         ftruncate($this->file, 0);",
          "461:         $this->validator->validate($this->getFile($this->path), new File([",
          "463:         ]));",
          "465:         $this->buildViolation('myMessage')",
          "466:             ->setParameter('{{ file }}', '\"'.$this->path.'\"')",
          "467:             ->setParameter('{{ name }}', '\"'.basename($this->path).'\"')",
          "468:             ->setCode(File::EMPTY_ERROR)",
          "469:             ->assertRaised();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "459:     {",
          "460:         $file = new UploadedFile(tempnam(sys_get_temp_dir(), 'file-validator-test-'), 'originalName', 'mime', $error);",
          "463:             $message => 'myMessage',",
          "464:             'maxSize' => $maxSize,",
          "465:         ]);",
          "",
          "[Removed Lines]",
          "462:         $constraint = new File([",
          "",
          "[Added Lines]",
          "479:         $constraint = new File(...[",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new GreaterThanOrEqual($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new GreaterThanOrEqual(...$options);",
          "39:         }",
          "41:         return new GreaterThanOrEqual();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php -> src/Symfony/Component/Validator/Tests/Constraints/GreaterThanOrEqualValidatorWithPositiveOrZeroConstraintTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new GreaterThan($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new GreaterThan(...$options);",
          "39:         }",
          "41:         return new GreaterThan();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php -> src/Symfony/Component/Validator/Tests/Constraints/GreaterThanValidatorWithPositiveConstraintTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/HostnameValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     public function testValidTldDomainsPassValidationIfTldNotRequired($domain)",
          "59:     {",
          "62:         $this->assertNoViolation();",
          "63:     }",
          "",
          "[Removed Lines]",
          "60:         $this->validator->validate($domain, new Hostname(['requireTld' => false]));",
          "",
          "[Added Lines]",
          "60:         $this->validator->validate($domain, new Hostname(requireTld: false));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     public function testInvalidDomainsRaiseViolationIfTldRequired($domain)",
          "83:     {",
          "88:         $this->buildViolation('myMessage')",
          "89:             ->setParameter('{{ value }}', '\"'.$domain.'\"')",
          "",
          "[Removed Lines]",
          "84:         $this->validator->validate($domain, new Hostname([",
          "85:             'message' => 'myMessage',",
          "86:         ]));",
          "",
          "[Added Lines]",
          "84:         $this->validator->validate($domain, new Hostname(message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:     public function testInvalidDomainsRaiseViolationIfTldNotRequired($domain)",
          "98:     {",
          "104:         $this->buildViolation('myMessage')",
          "105:             ->setParameter('{{ value }}', '\"'.$domain.'\"')",
          "",
          "[Removed Lines]",
          "99:         $this->validator->validate($domain, new Hostname([",
          "100:             'message' => 'myMessage',",
          "101:             'requireTld' => false,",
          "102:         ]));",
          "",
          "[Added Lines]",
          "97:         $this->validator->validate($domain, new Hostname(",
          "98:             message: 'myMessage',",
          "99:             requireTld: false,",
          "100:         ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:     public function testReservedDomainsPassValidationIfTldNotRequired($domain)",
          "125:     {",
          "128:         $this->assertNoViolation();",
          "129:     }",
          "",
          "[Removed Lines]",
          "126:         $this->validator->validate($domain, new Hostname(['requireTld' => false]));",
          "",
          "[Added Lines]",
          "124:         $this->validator->validate($domain, new Hostname(requireTld: false));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:     public function testReservedDomainsRaiseViolationIfTldRequired($domain)",
          "135:     {",
          "141:         $this->buildViolation('myMessage')",
          "142:             ->setParameter('{{ value }}', '\"'.$domain.'\"')",
          "",
          "[Removed Lines]",
          "136:         $this->validator->validate($domain, new Hostname([",
          "137:             'message' => 'myMessage',",
          "138:             'requireTld' => true,",
          "139:         ]));",
          "",
          "[Added Lines]",
          "134:         $this->validator->validate($domain, new Hostname(",
          "135:             message: 'myMessage',",
          "136:             requireTld: true,",
          "137:         ));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "177:     public function testTopLevelDomainsPassValidationIfTldNotRequired($domain)",
          "178:     {",
          "181:         $this->assertNoViolation();",
          "182:     }",
          "",
          "[Removed Lines]",
          "179:         $this->validator->validate($domain, new Hostname(['requireTld' => false]));",
          "",
          "[Added Lines]",
          "177:         $this->validator->validate($domain, new Hostname(requireTld: false));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:     public function testTopLevelDomainsRaiseViolationIfTldRequired($domain)",
          "188:     {",
          "194:         $this->buildViolation('myMessage')",
          "195:             ->setParameter('{{ value }}', '\"'.$domain.'\"')",
          "",
          "[Removed Lines]",
          "189:         $this->validator->validate($domain, new Hostname([",
          "190:             'message' => 'myMessage',",
          "191:             'requireTld' => true,",
          "192:         ]));",
          "",
          "[Added Lines]",
          "187:         $this->validator->validate($domain, new Hostname(",
          "188:             message: 'myMessage',",
          "189:             requireTld: true,",
          "190:         ));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IbanValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "489:     private function assertViolationRaised($iban, $code)",
          "490:     {",
          "495:         $this->validator->validate($iban, $constraint);",
          "",
          "[Removed Lines]",
          "491:         $constraint = new Iban([",
          "492:             'message' => 'myMessage',",
          "493:         ]);",
          "",
          "[Added Lines]",
          "491:         $constraint = new Iban(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IdenticalToValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new IdenticalTo($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new IdenticalTo(...$options);",
          "39:         }",
          "41:         return new IdenticalTo();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/ImageValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     {",
          "82:         $this->buildViolation('myMessage')",
          "83:             ->setParameter('{{ file }}', '\"foobar\"')",
          "",
          "[Removed Lines]",
          "78:     public function testFileNotFound(Image $constraint)",
          "80:         $this->validator->validate('foobar', $constraint);",
          "",
          "[Added Lines]",
          "76:     public function testFileNotFound()",
          "78:         $this->validator->validate('foobar', new Image(notFoundMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:             ->assertRaised();",
          "86:     }",
          "89:     {",
          "91:             'notFoundMessage' => 'myMessage',",
          "96:     }",
          "98:     public function testValidSize()",
          "99:     {",
          "107:         $this->validator->validate($this->image, $constraint);",
          "109:         $this->assertNoViolation();",
          "110:     }",
          "116:     {",
          "119:         $this->buildViolation('myMessage')",
          "120:             ->setParameter('{{ width }}', '2')",
          "",
          "[Removed Lines]",
          "88:     public static function provideConstraintsWithNotFoundMessage(): iterable",
          "90:         yield 'Doctrine style' => [new Image([",
          "92:         ])];",
          "93:         yield 'Named arguments' => [",
          "94:             new Image(notFoundMessage: 'myMessage'),",
          "95:         ];",
          "100:         $constraint = new Image([",
          "101:             'minWidth' => 1,",
          "102:             'maxWidth' => 2,",
          "103:             'minHeight' => 1,",
          "104:             'maxHeight' => 2,",
          "105:         ]);",
          "115:     public function testWidthTooSmall(Image $constraint)",
          "117:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "91:     public function testFileNotFoundDoctrineStyle()",
          "93:         $this->validator->validate('foobar', new Image([",
          "95:         ]));",
          "97:         $this->buildViolation('myMessage')",
          "98:             ->setParameter('{{ file }}', '\"foobar\"')",
          "99:             ->setCode(Image::NOT_FOUND_ERROR)",
          "100:             ->assertRaised();",
          "105:         $constraint = new Image(",
          "106:             minWidth: 1,",
          "107:             maxWidth: 2,",
          "108:             minHeight: 1,",
          "109:             maxHeight: 2,",
          "110:         );",
          "117:     public function testWidthTooSmall()",
          "119:         $this->validator->validate($this->image, new Image(minWidth: 3, minWidthMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:             ->assertRaised();",
          "124:     }",
          "127:     {",
          "129:             'minWidth' => 3,",
          "130:             'minWidthMessage' => 'myMessage',",
          "135:     }",
          "141:     {",
          "144:         $this->buildViolation('myMessage')",
          "145:             ->setParameter('{{ width }}', '2')",
          "",
          "[Removed Lines]",
          "126:     public static function provideMinWidthConstraints(): iterable",
          "128:         yield 'Doctrine style' => [new Image([",
          "131:         ])];",
          "132:         yield 'Named arguments' => [",
          "133:             new Image(minWidth: 3, minWidthMessage: 'myMessage'),",
          "134:         ];",
          "140:     public function testWidthTooBig(Image $constraint)",
          "142:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "131:     public function testWidthTooSmallDoctrineStyle()",
          "133:         $this->validator->validate($this->image, new Image([",
          "136:         ]));",
          "138:         $this->buildViolation('myMessage')",
          "139:             ->setParameter('{{ width }}', '2')",
          "140:             ->setParameter('{{ min_width }}', '3')",
          "141:             ->setCode(Image::TOO_NARROW_ERROR)",
          "142:             ->assertRaised();",
          "145:     public function testWidthTooBig()",
          "147:         $this->validator->validate($this->image, new Image(maxWidth: 1, maxWidthMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:             ->assertRaised();",
          "149:     }",
          "152:     {",
          "154:             'maxWidth' => 1,",
          "155:             'maxWidthMessage' => 'myMessage',",
          "160:     }",
          "166:     {",
          "169:         $this->buildViolation('myMessage')",
          "170:             ->setParameter('{{ height }}', '2')",
          "",
          "[Removed Lines]",
          "151:     public static function provideMaxWidthConstraints(): iterable",
          "153:         yield 'Doctrine style' => [new Image([",
          "156:         ])];",
          "157:         yield 'Named arguments' => [",
          "158:             new Image(maxWidth: 1, maxWidthMessage: 'myMessage'),",
          "159:         ];",
          "165:     public function testHeightTooSmall(Image $constraint)",
          "167:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "159:     public function testWidthTooBigDoctrineStyle()",
          "161:         $this->validator->validate($this->image, new Image([",
          "164:         ]));",
          "166:         $this->buildViolation('myMessage')",
          "167:             ->setParameter('{{ width }}', '2')",
          "168:             ->setParameter('{{ max_width }}', '1')",
          "169:             ->setCode(Image::TOO_WIDE_ERROR)",
          "170:             ->assertRaised();",
          "173:     public function testHeightTooSmall()",
          "175:         $this->validator->validate($this->image, new Image(minHeight: 3, minHeightMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:             ->assertRaised();",
          "174:     }",
          "177:     {",
          "179:             'minHeight' => 3,",
          "180:             'minHeightMessage' => 'myMessage',",
          "185:     }",
          "191:     {",
          "194:         $this->buildViolation('myMessage')",
          "195:             ->setParameter('{{ height }}', '2')",
          "",
          "[Removed Lines]",
          "176:     public static function provideMinHeightConstraints(): iterable",
          "178:         yield 'Doctrine style' => [new Image([",
          "181:         ])];",
          "182:         yield 'Named arguments' => [",
          "183:             new Image(minHeight: 3, minHeightMessage: 'myMessage'),",
          "184:         ];",
          "190:     public function testHeightTooBig(Image $constraint)",
          "192:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "187:     public function testHeightTooSmallDoctrineStyle()",
          "189:         $this->validator->validate($this->image, new Image([",
          "192:         ]));",
          "194:         $this->buildViolation('myMessage')",
          "195:             ->setParameter('{{ height }}', '2')",
          "196:             ->setParameter('{{ min_height }}', '3')",
          "197:             ->setCode(Image::TOO_LOW_ERROR)",
          "198:             ->assertRaised();",
          "201:     public function testHeightTooBig()",
          "203:         $this->validator->validate($this->image, new Image(maxHeight: 1, maxHeightMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:             ->assertRaised();",
          "199:     }",
          "202:     {",
          "204:             'maxHeight' => 1,",
          "205:             'maxHeightMessage' => 'myMessage',",
          "210:     }",
          "216:     {",
          "219:         $this->buildViolation('myMessage')",
          "220:             ->setParameter('{{ pixels }}', '4')",
          "",
          "[Removed Lines]",
          "201:     public static function provideMaxHeightConstraints(): iterable",
          "203:         yield 'Doctrine style' => [new Image([",
          "206:         ])];",
          "207:         yield 'Named arguments' => [",
          "208:             new Image(maxHeight: 1, maxHeightMessage: 'myMessage'),",
          "209:         ];",
          "215:     public function testPixelsTooFew(Image $constraint)",
          "217:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "215:     public function testHeightTooBigDoctrineStyle()",
          "217:         $this->validator->validate($this->image, new Image([",
          "220:         ]));",
          "222:         $this->buildViolation('myMessage')",
          "223:             ->setParameter('{{ height }}', '2')",
          "224:             ->setParameter('{{ max_height }}', '1')",
          "225:             ->setCode(Image::TOO_HIGH_ERROR)",
          "226:             ->assertRaised();",
          "229:     public function testPixelsTooFew()",
          "231:         $this->validator->validate($this->image, new Image(minPixels: 5, minPixelsMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225:             ->assertRaised();",
          "226:     }",
          "229:     {",
          "231:             'minPixels' => 5,",
          "232:             'minPixelsMessage' => 'myMessage',",
          "237:     }",
          "243:     {",
          "246:         $this->buildViolation('myMessage')",
          "247:             ->setParameter('{{ pixels }}', '4')",
          "",
          "[Removed Lines]",
          "228:     public static function provideMinPixelsConstraints(): iterable",
          "230:         yield 'Doctrine style' => [new Image([",
          "233:         ])];",
          "234:         yield 'Named arguments' => [",
          "235:             new Image(minPixels: 5, minPixelsMessage: 'myMessage'),",
          "236:         ];",
          "242:     public function testPixelsTooMany(Image $constraint)",
          "244:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "245:     public function testPixelsTooFewDoctrineStyle()",
          "247:         $this->validator->validate($this->image, new Image([",
          "250:         ]));",
          "252:         $this->buildViolation('myMessage')",
          "253:             ->setParameter('{{ pixels }}', '4')",
          "254:             ->setParameter('{{ min_pixels }}', '5')",
          "255:             ->setParameter('{{ height }}', '2')",
          "256:             ->setParameter('{{ width }}', '2')",
          "257:             ->setCode(Image::TOO_FEW_PIXEL_ERROR)",
          "258:             ->assertRaised();",
          "261:     public function testPixelsTooMany()",
          "263:         $this->validator->validate($this->image, new Image(maxPixels: 3, maxPixelsMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "252:             ->assertRaised();",
          "253:     }",
          "256:     {",
          "258:             'maxPixels' => 3,",
          "259:             'maxPixelsMessage' => 'myMessage',",
          "264:     }",
          "270:     {",
          "273:         $this->buildViolation('myMessage')",
          "274:             ->setParameter('{{ ratio }}', 1)",
          "",
          "[Removed Lines]",
          "255:     public static function provideMaxPixelsConstraints(): iterable",
          "257:         yield 'Doctrine style' => [new Image([",
          "260:         ])];",
          "261:         yield 'Named arguments' => [",
          "262:             new Image(maxPixels: 3, maxPixelsMessage: 'myMessage'),",
          "263:         ];",
          "269:     public function testRatioTooSmall(Image $constraint)",
          "271:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "277:     public function testPixelsTooManyDoctrineStyle()",
          "279:         $this->validator->validate($this->image, new Image([",
          "282:         ]));",
          "284:         $this->buildViolation('myMessage')",
          "285:             ->setParameter('{{ pixels }}', '4')",
          "286:             ->setParameter('{{ max_pixels }}', '3')",
          "287:             ->setParameter('{{ height }}', '2')",
          "288:             ->setParameter('{{ width }}', '2')",
          "289:             ->setCode(Image::TOO_MANY_PIXEL_ERROR)",
          "290:             ->assertRaised();",
          "293:     public function testRatioTooSmall()",
          "295:         $this->validator->validate($this->image, new Image(minRatio: 2, minRatioMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "277:             ->assertRaised();",
          "278:     }",
          "281:     {",
          "283:             'minRatio' => 2,",
          "284:             'minRatioMessage' => 'myMessage',",
          "289:     }",
          "295:     {",
          "298:         $this->buildViolation('myMessage')",
          "299:             ->setParameter('{{ ratio }}', 1)",
          "",
          "[Removed Lines]",
          "280:     public static function provideMinRatioConstraints(): iterable",
          "282:         yield 'Doctrine style' => [new Image([",
          "285:         ])];",
          "286:         yield 'Named arguments' => [",
          "287:             new Image(minRatio: 2, minRatioMessage: 'myMessage'),",
          "288:         ];",
          "294:     public function testRatioTooBig(Image $constraint)",
          "296:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "307:     public function testRatioTooSmallDoctrineStyle()",
          "309:         $this->validator->validate($this->image, new Image([",
          "312:         ]));",
          "314:         $this->buildViolation('myMessage')",
          "315:             ->setParameter('{{ ratio }}', 1)",
          "316:             ->setParameter('{{ min_ratio }}', 2)",
          "317:             ->setCode(Image::RATIO_TOO_SMALL_ERROR)",
          "318:             ->assertRaised();",
          "321:     public function testRatioTooBig()",
          "323:         $this->validator->validate($this->image, new Image(maxRatio: 0.5, maxRatioMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "302:             ->assertRaised();",
          "303:     }",
          "306:     {",
          "308:             'maxRatio' => 0.5,",
          "309:             'maxRatioMessage' => 'myMessage',",
          "314:     }",
          "316:     public function testMaxRatioUsesTwoDecimalsOnly()",
          "317:     {",
          "322:         $this->validator->validate($this->image4By3, $constraint);",
          "",
          "[Removed Lines]",
          "305:     public static function provideMaxRatioConstraints(): iterable",
          "307:         yield 'Doctrine style' => [new Image([",
          "310:         ])];",
          "311:         yield 'Named arguments' => [",
          "312:             new Image(maxRatio: 0.5, maxRatioMessage: 'myMessage'),",
          "313:         ];",
          "318:         $constraint = new Image([",
          "319:             'maxRatio' => 1.33,",
          "320:         ]);",
          "",
          "[Added Lines]",
          "335:     public function testRatioTooBigDoctrineStyle()",
          "337:         $this->validator->validate($this->image, new Image([",
          "340:         ]));",
          "342:         $this->buildViolation('myMessage')",
          "343:             ->setParameter('{{ ratio }}', 1)",
          "344:             ->setParameter('{{ max_ratio }}', 0.5)",
          "345:             ->setCode(Image::RATIO_TOO_BIG_ERROR)",
          "346:             ->assertRaised();",
          "351:         $constraint = new Image(maxRatio: 1.33);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "327:     public function testMinRatioUsesInputMoreDecimals()",
          "328:     {",
          "333:         $this->validator->validate($this->image4By3, $constraint);",
          "",
          "[Removed Lines]",
          "329:         $constraint = new Image([",
          "330:             'minRatio' => 4 / 3,",
          "331:         ]);",
          "",
          "[Added Lines]",
          "360:         $constraint = new Image(minRatio: 4 / 3);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "338:     public function testMaxRatioUsesInputMoreDecimals()",
          "339:     {",
          "344:         $this->validator->validate($this->image16By9, $constraint);",
          "346:         $this->assertNoViolation();",
          "347:     }",
          "353:     {",
          "356:         $this->buildViolation('myMessage')",
          "357:             ->setParameter('{{ width }}', 2)",
          "",
          "[Removed Lines]",
          "340:         $constraint = new Image([",
          "341:             'maxRatio' => 16 / 9,",
          "342:         ]);",
          "352:     public function testSquareNotAllowed(Image $constraint)",
          "354:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "369:         $constraint = new Image(maxRatio: 16 / 9);",
          "376:     public function testSquareNotAllowed()",
          "378:         $this->validator->validate($this->image, new Image(allowSquare: false, allowSquareMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "360:             ->assertRaised();",
          "361:     }",
          "364:     {",
          "366:             'allowSquare' => false,",
          "367:             'allowSquareMessage' => 'myMessage',",
          "372:     }",
          "378:     {",
          "381:         $this->buildViolation('myMessage')",
          "382:             ->setParameter('{{ width }}', 2)",
          "",
          "[Removed Lines]",
          "363:     public static function provideAllowSquareConstraints(): iterable",
          "365:         yield 'Doctrine style' => [new Image([",
          "368:         ])];",
          "369:         yield 'Named arguments' => [",
          "370:             new Image(allowSquare: false, allowSquareMessage: 'myMessage'),",
          "371:         ];",
          "377:     public function testLandscapeNotAllowed(Image $constraint)",
          "379:         $this->validator->validate($this->imageLandscape, $constraint);",
          "",
          "[Added Lines]",
          "390:     public function testSquareNotAllowedDoctrineStyle()",
          "392:         $this->validator->validate($this->image, new Image([",
          "395:         ]));",
          "397:         $this->buildViolation('myMessage')",
          "398:             ->setParameter('{{ width }}', 2)",
          "399:             ->setParameter('{{ height }}', 2)",
          "400:             ->setCode(Image::SQUARE_NOT_ALLOWED_ERROR)",
          "401:             ->assertRaised();",
          "404:     public function testLandscapeNotAllowed()",
          "406:         $this->validator->validate($this->imageLandscape, new Image(allowLandscape: false, allowLandscapeMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "385:             ->assertRaised();",
          "386:     }",
          "389:     {",
          "391:             'allowLandscape' => false,",
          "392:             'allowLandscapeMessage' => 'myMessage',",
          "397:     }",
          "403:     {",
          "406:         $this->buildViolation('myMessage')",
          "407:             ->setParameter('{{ width }}', 1)",
          "",
          "[Removed Lines]",
          "388:     public static function provideAllowLandscapeConstraints(): iterable",
          "390:         yield 'Doctrine style' => [new Image([",
          "393:         ])];",
          "394:         yield 'Named arguments' => [",
          "395:             new Image(allowLandscape: false, allowLandscapeMessage: 'myMessage'),",
          "396:         ];",
          "402:     public function testPortraitNotAllowed(Image $constraint)",
          "404:         $this->validator->validate($this->imagePortrait, $constraint);",
          "",
          "[Added Lines]",
          "418:     public function testLandscapeNotAllowedDoctrineStyle()",
          "420:         $this->validator->validate($this->imageLandscape, new Image([",
          "423:         ]));",
          "425:         $this->buildViolation('myMessage')",
          "426:             ->setParameter('{{ width }}', 2)",
          "427:             ->setParameter('{{ height }}', 1)",
          "428:             ->setCode(Image::LANDSCAPE_NOT_ALLOWED_ERROR)",
          "429:             ->assertRaised();",
          "432:     public function testPortraitNotAllowed()",
          "434:         $this->validator->validate($this->imagePortrait, new Image(allowPortrait: false, allowPortraitMessage: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "410:             ->assertRaised();",
          "411:     }",
          "414:     {",
          "416:             'allowPortrait' => false,",
          "417:             'allowPortraitMessage' => 'myMessage',",
          "422:     }",
          "428:     {",
          "429:         if (!\\function_exists('imagecreatefromstring')) {",
          "430:             $this->markTestSkipped('This test require GD extension');",
          "431:         }",
          "433:         $this->validator->validate($this->image, $constraint);",
          "435:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "413:     public static function provideAllowPortraitConstraints(): iterable",
          "415:         yield 'Doctrine style' => [new Image([",
          "418:         ])];",
          "419:         yield 'Named arguments' => [",
          "420:             new Image(allowPortrait: false, allowPortraitMessage: 'myMessage'),",
          "421:         ];",
          "427:     public function testCorrupted(Image $constraint)",
          "",
          "[Added Lines]",
          "446:     public function testPortraitNotAllowedDoctrineStyle()",
          "448:         $this->validator->validate($this->imagePortrait, new Image([",
          "451:         ]));",
          "453:         $this->buildViolation('myMessage')",
          "454:             ->setParameter('{{ width }}', 1)",
          "455:             ->setParameter('{{ height }}', 2)",
          "456:             ->setCode(Image::PORTRAIT_NOT_ALLOWED_ERROR)",
          "457:             ->assertRaised();",
          "458:     }",
          "460:     public function testCorrupted()",
          "461:     {",
          "462:         if (!\\function_exists('imagecreatefromstring')) {",
          "463:             $this->markTestSkipped('This test require GD extension');",
          "464:         }",
          "466:         $constraint = new Image(detectCorrupted: true, corruptedMessage: 'myMessage');",
          "468:         $this->validator->validate($this->image, $constraint);",
          "470:         $this->assertNoViolation();",
          "472:         $this->validator->validate($this->imageCorrupted, $constraint);",
          "474:         $this->buildViolation('myMessage')",
          "475:             ->setCode(Image::CORRUPTED_IMAGE_ERROR)",
          "476:             ->assertRaised();",
          "482:     public function testCorruptedDoctrineStyle()",
          "488:         $constraint = new Image([",
          "489:             'detectCorrupted' => true,",
          "490:             'corruptedMessage' => 'myMessage',",
          "491:         ]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "456:             ->assertRaised();",
          "457:     }",
          "460:     {",
          "477:         $this->buildViolation('The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.')",
          "478:             ->setParameter('{{ file }}', \\sprintf('\"%s\"', $this->image))",
          "",
          "[Removed Lines]",
          "459:     public static function provideDetectCorruptedConstraints(): iterable",
          "461:         yield 'Doctrine style' => [new Image([",
          "462:             'detectCorrupted' => true,",
          "463:             'corruptedMessage' => 'myMessage',",
          "464:         ])];",
          "465:         yield 'Named arguments' => [",
          "466:             new Image(detectCorrupted: true, corruptedMessage: 'myMessage'),",
          "467:         ];",
          "468:     }",
          "473:     public function testInvalidMimeTypeWithNarrowedSet(Image $constraint)",
          "474:     {",
          "475:         $this->validator->validate($this->image, $constraint);",
          "",
          "[Added Lines]",
          "519:     public function testInvalidMimeTypeWithNarrowedSet()",
          "521:         $this->validator->validate($this->image, new Image(mimeTypes: [",
          "522:             'image/jpeg',",
          "523:             'image/png',",
          "524:         ]));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "483:             ->assertRaised();",
          "484:     }",
          "487:     {",
          "489:             'mimeTypes' => [",
          "490:                 'image/jpeg',",
          "491:                 'image/png',",
          "492:             ],",
          "500:     }",
          "",
          "[Removed Lines]",
          "486:     public static function provideInvalidMimeTypeWithNarrowedSet()",
          "488:         yield 'Doctrine style' => [new Image([",
          "493:         ])];",
          "494:         yield 'Named arguments' => [",
          "495:             new Image(mimeTypes: [",
          "496:                 'image/jpeg',",
          "497:                 'image/png',",
          "498:             ]),",
          "499:         ];",
          "",
          "[Added Lines]",
          "538:     public function testInvalidMimeTypeWithNarrowedSetDoctrineStyle()",
          "540:         $this->validator->validate($this->image, new Image([",
          "545:         ]));",
          "547:         $this->buildViolation('The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.')",
          "548:             ->setParameter('{{ file }}', sprintf('\"%s\"', $this->image))",
          "549:             ->setParameter('{{ type }}', '\"image/gif\"')",
          "550:             ->setParameter('{{ types }}', '\"image/jpeg\", \"image/png\"')",
          "551:             ->setParameter('{{ name }}', '\"test.gif\"')",
          "552:             ->setCode(Image::INVALID_MIME_TYPE_ERROR)",
          "553:             ->assertRaised();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IpTest.php||src/Symfony/Component/Validator/Tests/Constraints/IpTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IpTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IpTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:     public function testNormalizerCanBeSet()",
          "26:     {",
          "29:         $this->assertEquals('trim', $ip->normalizer);",
          "30:     }",
          "32:     public function testInvalidNormalizerThrowsException()",
          "33:     {",
          "34:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "27:         $ip = new Ip(['normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "27:         $ip = new Ip(normalizer: 'trim');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IpValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     public function testInvalidValidatorVersion()",
          "48:     {",
          "49:         $this->expectException(ConstraintDefinitionException::class);",
          "53:     }",
          "",
          "[Removed Lines]",
          "50:         new Ip([",
          "51:             'version' => 666,",
          "52:         ]);",
          "",
          "[Added Lines]",
          "50:         new Ip(version: 666);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     public function testValidIpsV4($ip)",
          "59:     {",
          "64:         $this->assertNoViolation();",
          "65:     }",
          "",
          "[Removed Lines]",
          "60:         $this->validator->validate($ip, new Ip([",
          "61:             'version' => Ip::V4,",
          "62:         ]));",
          "",
          "[Added Lines]",
          "58:         $this->validator->validate($ip, new Ip(version: Ip::V4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     public function testValidIpsV4WithWhitespaces($ip)",
          "85:     {",
          "91:         $this->assertNoViolation();",
          "92:     }",
          "",
          "[Removed Lines]",
          "86:         $this->validator->validate($ip, new Ip([",
          "87:             'version' => Ip::V4,",
          "88:             'normalizer' => 'trim',",
          "89:         ]));",
          "",
          "[Added Lines]",
          "82:         $this->validator->validate($ip, new Ip(",
          "83:             version: Ip::V4,",
          "84:             normalizer: 'trim',",
          "85:         ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:     public function testValidIpsV6($ip)",
          "120:     {",
          "125:         $this->assertNoViolation();",
          "126:     }",
          "",
          "[Removed Lines]",
          "121:         $this->validator->validate($ip, new Ip([",
          "122:             'version' => Ip::V6,",
          "123:         ]));",
          "",
          "[Added Lines]",
          "117:         $this->validator->validate($ip, new Ip(version: Ip::V6));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:     public function testValidIpsAll($ip)",
          "157:     {",
          "162:         $this->assertNoViolation();",
          "163:     }",
          "",
          "[Removed Lines]",
          "158:         $this->validator->validate($ip, new Ip([",
          "159:             'version' => Ip::ALL,",
          "160:         ]));",
          "",
          "[Added Lines]",
          "152:         $this->validator->validate($ip, new Ip(version: Ip::ALL));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "173:     public function testInvalidIpsV4($ip)",
          "174:     {",
          "180:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "175:         $constraint = new Ip([",
          "176:             'version' => Ip::V4,",
          "177:             'message' => 'myMessage',",
          "178:         ]);",
          "",
          "[Added Lines]",
          "167:         $constraint = new Ip(",
          "168:             version: Ip::V4,",
          "169:             message: 'myMessage',",
          "170:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:     public function testInvalidNoPublicIpsV4($ip)",
          "192:     {",
          "198:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "193:         $constraint = new Ip([",
          "194:             'version' => Ip::V4_NO_PUBLIC,",
          "195:             'message' => 'myMessage',",
          "196:         ]);",
          "",
          "[Added Lines]",
          "185:         $constraint = new Ip(",
          "186:             version: Ip::V4_NO_PUBLIC,",
          "187:             message: 'myMessage',",
          "188:         );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "233:     public function testValidPrivateIpsV4($ip)",
          "234:     {",
          "239:         $this->assertNoViolation();",
          "240:     }",
          "",
          "[Removed Lines]",
          "235:         $this->validator->validate($ip, new Ip([",
          "236:             'version' => Ip::V4_ONLY_PRIVATE,",
          "237:         ]));",
          "",
          "[Added Lines]",
          "227:         $this->validator->validate($ip, new Ip(version: Ip::V4_ONLY_PRIVATE));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "245:     public function testInvalidPrivateIpsV4($ip)",
          "246:     {",
          "252:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "247:         $constraint = new Ip([",
          "248:             'version' => Ip::V4_NO_PRIVATE,",
          "249:             'message' => 'myMessage',",
          "250:         ]);",
          "",
          "[Added Lines]",
          "237:         $constraint = new Ip(",
          "238:             version: Ip::V4_NO_PRIVATE,",
          "239:             message: 'myMessage',",
          "240:         );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "263:     public function testInvalidOnlyPrivateIpsV4($ip)",
          "264:     {",
          "270:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "265:         $constraint = new Ip([",
          "266:             'version' => Ip::V4_ONLY_PRIVATE,",
          "267:             'message' => 'myMessage',",
          "268:         ]);",
          "",
          "[Added Lines]",
          "255:         $constraint = new Ip(",
          "256:             version: Ip::V4_ONLY_PRIVATE,",
          "257:             message: 'myMessage',",
          "258:         );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "295:     public function testValidReservedIpsV4($ip)",
          "296:     {",
          "301:         $this->assertNoViolation();",
          "302:     }",
          "",
          "[Removed Lines]",
          "297:         $this->validator->validate($ip, new Ip([",
          "298:             'version' => Ip::V4_ONLY_RESERVED,",
          "299:         ]));",
          "",
          "[Added Lines]",
          "287:         $this->validator->validate($ip, new Ip(version: Ip::V4_ONLY_RESERVED));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "307:     public function testInvalidReservedIpsV4($ip)",
          "308:     {",
          "314:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "309:         $constraint = new Ip([",
          "310:             'version' => Ip::V4_NO_RESERVED,",
          "311:             'message' => 'myMessage',",
          "312:         ]);",
          "",
          "[Added Lines]",
          "297:         $constraint = new Ip(",
          "298:             version: Ip::V4_NO_RESERVED,",
          "299:             message: 'myMessage',",
          "300:         );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "325:     public function testInvalidOnlyReservedIpsV4($ip)",
          "326:     {",
          "332:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "327:         $constraint = new Ip([",
          "328:             'version' => Ip::V4_ONLY_RESERVED,",
          "329:             'message' => 'myMessage',",
          "330:         ]);",
          "",
          "[Added Lines]",
          "315:         $constraint = new Ip(",
          "316:             version: Ip::V4_ONLY_RESERVED,",
          "317:             message: 'myMessage',",
          "318:         );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "357:     public function testInvalidPublicIpsV4($ip)",
          "358:     {",
          "364:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "359:         $constraint = new Ip([",
          "360:             'version' => Ip::V4_ONLY_PUBLIC,",
          "361:             'message' => 'myMessage',",
          "362:         ]);",
          "",
          "[Added Lines]",
          "347:         $constraint = new Ip(",
          "348:             version: Ip::V4_ONLY_PUBLIC,",
          "349:             message: 'myMessage',",
          "350:         );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "380:     public function testInvalidIpsV6($ip)",
          "381:     {",
          "387:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "382:         $constraint = new Ip([",
          "383:             'version' => Ip::V6,",
          "384:             'message' => 'myMessage',",
          "385:         ]);",
          "",
          "[Added Lines]",
          "370:         $constraint = new Ip(",
          "371:             version: Ip::V6,",
          "372:             message: 'myMessage',",
          "373:         );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "417:     public function testInvalidPrivateIpsV6($ip)",
          "418:     {",
          "424:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "419:         $constraint = new Ip([",
          "420:             'version' => Ip::V6_NO_PRIVATE,",
          "421:             'message' => 'myMessage',",
          "422:         ]);",
          "",
          "[Added Lines]",
          "407:         $constraint = new Ip(",
          "408:             version: Ip::V6_NO_PRIVATE,",
          "409:             message: 'myMessage',",
          "410:         );",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "444:     public function testInvalidReservedIpsV6($ip)",
          "445:     {",
          "451:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "446:         $constraint = new Ip([",
          "447:             'version' => Ip::V6_NO_RESERVED,",
          "448:             'message' => 'myMessage',",
          "449:         ]);",
          "",
          "[Added Lines]",
          "434:         $constraint = new Ip(",
          "435:             version: Ip::V6_NO_RESERVED,",
          "436:             message: 'myMessage',",
          "437:         );",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "470:     public function testInvalidPublicIpsV6($ip)",
          "471:     {",
          "477:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "472:         $constraint = new Ip([",
          "473:             'version' => Ip::V6_ONLY_PUBLIC,",
          "474:             'message' => 'myMessage',",
          "475:         ]);",
          "",
          "[Added Lines]",
          "460:         $constraint = new Ip(",
          "461:             version: Ip::V6_ONLY_PUBLIC,",
          "462:             message: 'myMessage',",
          "463:         );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "493:     public function testInvalidIpsAll($ip)",
          "494:     {",
          "500:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "495:         $constraint = new Ip([",
          "496:             'version' => Ip::ALL,",
          "497:             'message' => 'myMessage',",
          "498:         ]);",
          "",
          "[Added Lines]",
          "483:         $constraint = new Ip(",
          "484:             version: Ip::ALL,",
          "485:             message: 'myMessage',",
          "486:         );",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "516:     public function testInvalidPrivateIpsAll($ip)",
          "517:     {",
          "523:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "518:         $constraint = new Ip([",
          "519:             'version' => Ip::ALL_NO_PRIVATE,",
          "520:             'message' => 'myMessage',",
          "521:         ]);",
          "",
          "[Added Lines]",
          "506:         $constraint = new Ip(",
          "507:             version: Ip::ALL_NO_PRIVATE,",
          "508:             message: 'myMessage',",
          "509:         );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "539:     public function testInvalidReservedIpsAll($ip)",
          "540:     {",
          "546:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "541:         $constraint = new Ip([",
          "542:             'version' => Ip::ALL_NO_RESERVED,",
          "543:             'message' => 'myMessage',",
          "544:         ]);",
          "",
          "[Added Lines]",
          "529:         $constraint = new Ip(",
          "530:             version: Ip::ALL_NO_RESERVED,",
          "531:             message: 'myMessage',",
          "532:         );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "562:     public function testInvalidPublicIpsAll($ip)",
          "563:     {",
          "569:         $this->validator->validate($ip, $constraint);",
          "",
          "[Removed Lines]",
          "564:         $constraint = new Ip([",
          "565:             'version' => Ip::ALL_ONLY_PUBLIC,",
          "566:             'message' => 'myMessage',",
          "567:         ]);",
          "",
          "[Added Lines]",
          "552:         $constraint = new Ip(",
          "553:             version: Ip::ALL_ONLY_PUBLIC,",
          "554:             message: 'myMessage',",
          "555:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IsFalseValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         $this->assertNoViolation();",
          "37:     }",
          "43:     {",
          "46:         $this->buildViolation('myMessage')",
          "47:             ->setParameter('{{ value }}', 'true')",
          "",
          "[Removed Lines]",
          "42:     public function testTrueIsInvalid(IsFalse $constraint)",
          "44:         $this->validator->validate(true, $constraint);",
          "",
          "[Added Lines]",
          "39:     public function testTrueIsInvalid()",
          "41:         $this->validator->validate(true, new IsFalse(message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:             ->assertRaised();",
          "50:     }",
          "53:     {",
          "55:             'message' => 'myMessage',",
          "58:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "52:     public static function provideInvalidConstraints(): iterable",
          "54:         yield 'Doctrine style' => [new IsFalse([",
          "56:         ])];",
          "57:         yield 'named parameters' => [new IsFalse(message: 'myMessage')];",
          "",
          "[Added Lines]",
          "52:     public function testTrueIsInvalidDoctrineStyle()",
          "54:         $constraint = new IsFalse([",
          "56:         ]);",
          "58:         $this->validator->validate(true, $constraint);",
          "60:         $this->buildViolation('myMessage')",
          "61:             ->setParameter('{{ value }}', 'true')",
          "62:             ->setCode(IsFalse::NOT_FALSE_ERROR)",
          "63:             ->assertRaised();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IsNullValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     public function testInvalidValues($value, $valueAsString)",
          "36:     {",
          "41:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "37:         $constraint = new IsNull([",
          "38:             'message' => 'myMessage',",
          "39:         ]);",
          "",
          "[Added Lines]",
          "37:         $constraint = new IsNull(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IsTrueValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         $this->assertNoViolation();",
          "37:     }",
          "43:     {",
          "46:         $this->buildViolation('myMessage')",
          "47:             ->setParameter('{{ value }}', 'false')",
          "",
          "[Removed Lines]",
          "42:     public function testFalseIsInvalid(IsTrue $constraint)",
          "44:         $this->validator->validate(false, $constraint);",
          "",
          "[Added Lines]",
          "39:     public function testFalseIsInvalid()",
          "41:         $this->validator->validate(false, new IsTrue(message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:             ->assertRaised();",
          "50:     }",
          "53:     {",
          "55:             'message' => 'myMessage',",
          "58:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "52:     public static function provideInvalidConstraints(): iterable",
          "54:         yield 'Doctrine style' => [new IsTrue([",
          "56:         ])];",
          "57:         yield 'named parameters' => [new IsTrue(message: 'myMessage')];",
          "",
          "[Added Lines]",
          "52:     public function testFalseIsInvalidDoctrineStyle()",
          "54:         $this->validator->validate(false, new IsTrue([",
          "56:         ]));",
          "58:         $this->buildViolation('myMessage')",
          "59:             ->setParameter('{{ value }}', 'false')",
          "60:             ->setCode(IsTrue::NOT_TRUE_ERROR)",
          "61:             ->assertRaised();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IsbnValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     public function testValidIsbn10($isbn)",
          "152:     {",
          "157:         $this->validator->validate($isbn, $constraint);",
          "",
          "[Removed Lines]",
          "153:         $constraint = new Isbn([",
          "154:             'type' => 'isbn10',",
          "155:         ]);",
          "",
          "[Added Lines]",
          "153:         $constraint = new Isbn(type: 'isbn10');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:     public function testValidIsbn13($isbn)",
          "197:     {",
          "200:         $this->validator->validate($isbn, $constraint);",
          "",
          "[Removed Lines]",
          "198:         $constraint = new Isbn(['type' => 'isbn13']);",
          "",
          "[Added Lines]",
          "197:         $constraint = new Isbn(type: 'isbn13');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:             ->assertRaised();",
          "221:     }",
          "224:     {",
          "228:         );",
          "230:         $this->buildViolation('myMessage')",
          "233:             ->assertRaised();",
          "234:     }",
          "",
          "[Removed Lines]",
          "223:     public function testInvalidIsbn13Named()",
          "225:         $this->validator->validate(",
          "226:             '2723442284',",
          "227:             new Isbn(type: Isbn::ISBN_13, isbn13Message: 'myMessage')",
          "231:             ->setParameter('{{ value }}', '\"2723442284\"')",
          "232:             ->setCode(Isbn::TOO_SHORT_ERROR)",
          "",
          "[Added Lines]",
          "226:     public function testInvalidIsbn13Named($isbn, $code)",
          "228:         $constraint = new Isbn(",
          "229:             type: Isbn::ISBN_13,",
          "230:             isbn13Message: 'myMessage',",
          "233:         $this->validator->validate($isbn, $constraint);",
          "236:             ->setParameter('{{ value }}', '\"'.$isbn.'\"')",
          "237:             ->setCode($code)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:     public function testInvalidIsbnAnyIsbn10($isbn, $code)",
          "252:     {",
          "257:         $this->validator->validate($isbn, $constraint);",
          "",
          "[Removed Lines]",
          "253:         $constraint = new Isbn([",
          "254:             'bothIsbnMessage' => 'myMessage',",
          "255:         ]);",
          "",
          "[Added Lines]",
          "258:         $constraint = new Isbn(bothIsbnMessage: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:     public function testInvalidIsbnAnyIsbn13($isbn, $code)",
          "274:     {",
          "279:         $this->validator->validate($isbn, $constraint);",
          "",
          "[Removed Lines]",
          "275:         $constraint = new Isbn([",
          "276:             'bothIsbnMessage' => 'myMessage',",
          "277:         ]);",
          "",
          "[Added Lines]",
          "278:         $constraint = new Isbn(bothIsbnMessage: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IsinValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     private function assertViolationRaised($isin, $code)",
          "132:     {",
          "137:         $this->validator->validate($isin, $constraint);",
          "",
          "[Removed Lines]",
          "133:         $constraint = new Isin([",
          "134:             'message' => 'myMessage',",
          "135:         ]);",
          "",
          "[Added Lines]",
          "133:         $constraint = new Isin(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/IssnValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     public function testCaseSensitiveIssns($issn)",
          "121:     {",
          "127:         $this->validator->validate($issn, $constraint);",
          "",
          "[Removed Lines]",
          "122:         $constraint = new Issn([",
          "123:             'caseSensitive' => true,",
          "124:             'message' => 'myMessage',",
          "125:         ]);",
          "",
          "[Added Lines]",
          "122:         $constraint = new Issn(",
          "123:             caseSensitive: true,",
          "124:             message: 'myMessage',",
          "125:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     public function testRequireHyphenIssns($issn)",
          "139:     {",
          "145:         $this->validator->validate($issn, $constraint);",
          "",
          "[Removed Lines]",
          "140:         $constraint = new Issn([",
          "141:             'requireHyphen' => true,",
          "142:             'message' => 'myMessage',",
          "143:         ]);",
          "",
          "[Added Lines]",
          "140:         $constraint = new Issn(",
          "141:             requireHyphen: true,",
          "142:             message: 'myMessage',",
          "143:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:     public function testInvalidIssn($issn, $code)",
          "169:     {",
          "174:         $this->validator->validate($issn, $constraint);",
          "",
          "[Removed Lines]",
          "170:         $constraint = new Issn([",
          "171:             'message' => 'myMessage',",
          "172:         ]);",
          "",
          "[Added Lines]",
          "170:         $constraint = new Issn(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/JsonValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     public function testInvalidValues($value)",
          "39:     {",
          "44:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "40:         $constraint = new Json([",
          "41:             'message' => 'myMessageTest',",
          "42:         ]);",
          "",
          "[Added Lines]",
          "40:         $constraint = new Json(message: 'myMessageTest');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LanguageValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     public function testInvalidLanguages($language)",
          "85:     {",
          "90:         $this->validator->validate($language, $constraint);",
          "",
          "[Removed Lines]",
          "86:         $constraint = new Language([",
          "87:             'message' => 'myMessage',",
          "88:         ]);",
          "",
          "[Added Lines]",
          "86:         $constraint = new Language(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     public function testValidAlpha3Languages($language)",
          "110:     {",
          "115:         $this->assertNoViolation();",
          "116:     }",
          "",
          "[Removed Lines]",
          "111:         $this->validator->validate($language, new Language([",
          "112:             'alpha3' => true,",
          "113:         ]));",
          "",
          "[Added Lines]",
          "109:         $this->validator->validate($language, new Language(alpha3: true));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     public function testInvalidAlpha3Languages($language)",
          "131:     {",
          "137:         $this->validator->validate($language, $constraint);",
          "",
          "[Removed Lines]",
          "132:         $constraint = new Language([",
          "133:             'alpha3' => true,",
          "134:             'message' => 'myMessage',",
          "135:         ]);",
          "",
          "[Added Lines]",
          "128:         $constraint = new Language(",
          "129:             alpha3: true,",
          "130:             message: 'myMessage',",
          "131:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:         \\Locale::setDefault('fr_FR');",
          "173:         $existingLanguage = 'en';",
          "179:         $this->assertNoViolation();",
          "180:     }",
          "",
          "[Removed Lines]",
          "175:         $this->validator->validate($existingLanguage, new Language([",
          "176:             'message' => 'aMessage',",
          "177:         ]));",
          "",
          "[Added Lines]",
          "171:         $this->validator->validate($existingLanguage, new Language(message: 'aMessage'));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php||src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LengthTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:     public function testNormalizerCanBeSet()",
          "26:     {",
          "29:         $this->assertEquals('trim', $length->normalizer);",
          "30:     }",
          "32:     public function testInvalidNormalizerThrowsException()",
          "33:     {",
          "34:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "27:         $length = new Length(['min' => 0, 'max' => 10, 'normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "27:         $length = new Length(",
          "28:             min: 0,",
          "29:             max: 10,",
          "30:             normalizer: 'trim',",
          "31:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     public function testDefaultCountUnitIsUsed()",
          "47:     {",
          "49:         $this->assertSame(Length::COUNT_CODEPOINTS, $length->countUnit);",
          "50:     }",
          "52:     public function testNonDefaultCountUnitCanBeSet()",
          "53:     {",
          "55:         $this->assertSame(Length::COUNT_GRAPHEMES, $length->countUnit);",
          "56:     }",
          "",
          "[Removed Lines]",
          "48:         $length = new Length(['min' => 0, 'max' => 10]);",
          "54:         $length = new Length(['min' => 0, 'max' => 10, 'countUnit' => Length::COUNT_GRAPHEMES]);",
          "",
          "[Added Lines]",
          "58:         $length = new Length(min: 0, max: 10);",
          "64:         $length = new Length(min: 0, max: 10, countUnit: Length::COUNT_GRAPHEMES);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     {",
          "60:         $this->expectException(InvalidArgumentException::class);",
          "61:         $this->expectExceptionMessage(\\sprintf('The \"countUnit\" option must be one of the \"%s\"::COUNT_* constants (\"%s\" given).', Length::class, 'nonExistentCountUnit'));",
          "63:     }",
          "65:     public function testConstraintDefaultOption()",
          "",
          "[Removed Lines]",
          "62:         new Length(['min' => 0, 'max' => 10, 'countUnit' => 'nonExistentCountUnit']);",
          "",
          "[Added Lines]",
          "72:         new Length(min: 0, max: 10, countUnit: 'nonExistentCountUnit');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:     public function testConstraintAttributeDefaultOption()",
          "74:     {",
          "77:         self::assertEquals(5, $constraint->min);",
          "78:         self::assertEquals(5, $constraint->max);",
          "",
          "[Removed Lines]",
          "75:         $constraint = new Length(['value' => 5, 'exactMessage' => 'message']);",
          "",
          "[Added Lines]",
          "85:         $constraint = new Length(exactly: 5, exactMessage: 'message');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LengthValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     public function testNullIsValid()",
          "27:     {",
          "30:         $this->assertNoViolation();",
          "31:     }",
          "33:     public function testEmptyStringIsInvalid()",
          "34:     {",
          "40:         $this->buildViolation('myMessage')",
          "41:             ->setParameter('{{ value }}', '\"\"')",
          "",
          "[Removed Lines]",
          "28:         $this->validator->validate(null, new Length(['value' => 6]));",
          "35:         $this->validator->validate('', new Length([",
          "36:             'value' => $limit = 6,",
          "37:             'exactMessage' => 'myMessage',",
          "38:         ]));",
          "",
          "[Added Lines]",
          "28:         $this->validator->validate(null, new Length(exactly: 6));",
          "35:         $this->validator->validate('', new Length(",
          "36:             exactly: $limit = 6,",
          "37:             exactMessage: 'myMessage',",
          "38:         ));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     public function testExpectsStringCompatibleType()",
          "51:     {",
          "52:         $this->expectException(UnexpectedValueException::class);",
          "54:     }",
          "56:     public static function getThreeOrLessCharacters()",
          "",
          "[Removed Lines]",
          "53:         $this->validator->validate(new \\stdClass(), new Length(['value' => 5]));",
          "",
          "[Added Lines]",
          "53:         $this->validator->validate(new \\stdClass(), new Length(exactly: 5));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:     public function testValidValuesMin(int|string $value)",
          "120:     {",
          "122:         $this->validator->validate($value, $constraint);",
          "124:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "121:         $constraint = new Length(['min' => 5]);",
          "",
          "[Added Lines]",
          "121:         $constraint = new Length(min: 5);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:     public function testValidValuesMax(int|string $value)",
          "131:     {",
          "133:         $this->validator->validate($value, $constraint);",
          "135:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "132:         $constraint = new Length(['max' => 3]);",
          "",
          "[Added Lines]",
          "132:         $constraint = new Length(max: 3);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:     public function testValidNormalizedValues($value)",
          "153:     {",
          "155:         $this->validator->validate($value, $constraint);",
          "157:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "154:         $constraint = new Length(['min' => 3, 'max' => 3, 'normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "154:         $constraint = new Length(min: 3, max: 3, normalizer: 'trim');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:     public function testInvalidValuesMin(int|string $value, int $valueLength)",
          "188:     {",
          "194:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "189:         $constraint = new Length([",
          "190:             'min' => 4,",
          "191:             'minMessage' => 'myMessage',",
          "192:         ]);",
          "",
          "[Added Lines]",
          "189:         $constraint = new Length(",
          "190:             min: 4,",
          "191:             minMessage: 'myMessage',",
          "192:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "228:     public function testInvalidValuesMax(int|string $value, int $valueLength)",
          "229:     {",
          "235:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "230:         $constraint = new Length([",
          "231:             'max' => 4,",
          "232:             'maxMessage' => 'myMessage',",
          "233:         ]);",
          "",
          "[Added Lines]",
          "230:         $constraint = new Length(",
          "231:             max: 4,",
          "232:             maxMessage: 'myMessage',",
          "233:         );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:     public function testInvalidValuesExactLessThanFour(int|string $value, int $valueLength)",
          "270:     {",
          "277:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "271:         $constraint = new Length([",
          "272:             'min' => 4,",
          "273:             'max' => 4,",
          "274:             'exactMessage' => 'myMessage',",
          "275:         ]);",
          "",
          "[Added Lines]",
          "271:         $constraint = new Length(",
          "272:             min: 4,",
          "273:             max: 4,",
          "274:             exactMessage:  'myMessage',",
          "275:         );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "311:     public function testInvalidValuesExactMoreThanFour(int|string $value, int $valueLength)",
          "312:     {",
          "319:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "313:         $constraint = new Length([",
          "314:             'min' => 4,",
          "315:             'max' => 4,",
          "316:             'exactMessage' => 'myMessage',",
          "317:         ]);",
          "",
          "[Added Lines]",
          "313:         $constraint = new Length(",
          "314:             min: 4,",
          "315:             max: 4,",
          "316:             exactMessage: 'myMessage',",
          "317:         );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "334:     public function testOneCharset($value, $charset, $isValid)",
          "335:     {",
          "343:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "336:         $constraint = new Length([",
          "337:             'min' => 1,",
          "338:             'max' => 1,",
          "339:             'charset' => $charset,",
          "340:             'charsetMessage' => 'myMessage',",
          "341:         ]);",
          "",
          "[Added Lines]",
          "336:         $constraint = new Length(",
          "337:             min: 1,",
          "338:             max: 1,",
          "339:             charset: $charset,",
          "340:             charsetMessage: 'myMessage',",
          "341:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new LessThanOrEqual($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new LessThanOrEqual(...$options);",
          "39:         }",
          "41:         return new LessThanOrEqual();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LessThanOrEqualValidatorWithNegativeOrZeroConstraintTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new LessThan($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new LessThan(...$options);",
          "39:         }",
          "41:         return new LessThan();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php||src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LessThanValidatorWithNegativeConstraintTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LocaleValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public function testInvalidLocales($locale)",
          "73:     {",
          "78:         $this->validator->validate($locale, $constraint);",
          "",
          "[Removed Lines]",
          "74:         $constraint = new Locale([",
          "75:             'message' => 'myMessage',",
          "76:         ]);",
          "",
          "[Added Lines]",
          "74:         $constraint = new Locale(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     public function testValidLocalesWithCanonicalization(string $locale)",
          "98:     {",
          "103:         $this->validator->validate($locale, $constraint);",
          "",
          "[Removed Lines]",
          "99:         $constraint = new Locale([",
          "100:             'message' => 'myMessage',",
          "101:         ]);",
          "",
          "[Added Lines]",
          "97:         $constraint = new Locale(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     public function testValidLocalesWithoutCanonicalization(string $locale)",
          "112:     {",
          "118:         $this->validator->validate($locale, $constraint);",
          "",
          "[Removed Lines]",
          "113:         $constraint = new Locale([",
          "114:             'message' => 'myMessage',",
          "115:             'canonicalize' => false,",
          "116:         ]);",
          "",
          "[Added Lines]",
          "109:         $constraint = new Locale(",
          "110:             message: 'myMessage',",
          "111:             canonicalize: false,",
          "112:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:     public function testInvalidLocalesWithoutCanonicalization(string $locale)",
          "127:     {",
          "133:         $this->validator->validate($locale, $constraint);",
          "",
          "[Removed Lines]",
          "128:         $constraint = new Locale([",
          "129:             'message' => 'myMessage',",
          "130:             'canonicalize' => false,",
          "131:         ]);",
          "",
          "[Added Lines]",
          "124:         $constraint = new Locale(",
          "125:             message: 'myMessage',",
          "126:             canonicalize: false,",
          "127:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/LuhnValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     public function testInvalidNumbers($number, $code)",
          "78:     {",
          "83:         $this->validator->validate($number, $constraint);",
          "",
          "[Removed Lines]",
          "79:         $constraint = new Luhn([",
          "80:             'message' => 'myMessage',",
          "81:         ]);",
          "",
          "[Added Lines]",
          "79:         $constraint = new Luhn(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NoSuspiciousCharactersValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     public function testNonSuspiciousStrings(string $string, array $options = [])",
          "34:     {",
          "37:         $this->assertNoViolation();",
          "38:     }",
          "",
          "[Removed Lines]",
          "35:         $this->validator->validate($string, new NoSuspiciousCharacters($options));",
          "",
          "[Added Lines]",
          "35:         $this->validator->validate($string, new NoSuspiciousCharacters(...$options));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     public function testSuspiciousStrings(string $string, array $options, array $errors)",
          "60:     {",
          "63:         $violations = null;",
          "",
          "[Removed Lines]",
          "61:         $this->validator->validate($string, new NoSuspiciousCharacters($options));",
          "",
          "[Added Lines]",
          "61:         $this->validator->validate($string, new NoSuspiciousCharacters(...$options));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NotBlankTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:     public function testNormalizerCanBeSet()",
          "26:     {",
          "29:         $this->assertEquals('trim', $notBlank->normalizer);",
          "30:     }",
          "",
          "[Removed Lines]",
          "27:         $notBlank = new NotBlank(['normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "27:         $notBlank = new NotBlank(normalizer: 'trim');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NotBlankValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     public function testNullIsInvalid()",
          "47:     {",
          "52:         $this->validator->validate(null, $constraint);",
          "",
          "[Removed Lines]",
          "48:         $constraint = new NotBlank([",
          "49:             'message' => 'myMessage',",
          "50:         ]);",
          "",
          "[Added Lines]",
          "48:         $constraint = new NotBlank(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     public function testBlankIsInvalid()",
          "61:     {",
          "66:         $this->validator->validate('', $constraint);",
          "",
          "[Removed Lines]",
          "62:         $constraint = new NotBlank([",
          "63:             'message' => 'myMessage',",
          "64:         ]);",
          "",
          "[Added Lines]",
          "60:         $constraint = new NotBlank(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     public function testFalseIsInvalid()",
          "75:     {",
          "80:         $this->validator->validate(false, $constraint);",
          "",
          "[Removed Lines]",
          "76:         $constraint = new NotBlank([",
          "77:             'message' => 'myMessage',",
          "78:         ]);",
          "",
          "[Added Lines]",
          "72:         $constraint = new NotBlank(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     public function testEmptyArrayIsInvalid()",
          "89:     {",
          "94:         $this->validator->validate([], $constraint);",
          "",
          "[Removed Lines]",
          "90:         $constraint = new NotBlank([",
          "91:             'message' => 'myMessage',",
          "92:         ]);",
          "",
          "[Added Lines]",
          "84:         $constraint = new NotBlank(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:     public function testAllowNullTrue()",
          "103:     {",
          "109:         $this->validator->validate(null, $constraint);",
          "110:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "104:         $constraint = new NotBlank([",
          "105:             'message' => 'myMessage',",
          "106:             'allowNull' => true,",
          "107:         ]);",
          "",
          "[Added Lines]",
          "96:         $constraint = new NotBlank(",
          "97:             message: 'myMessage',",
          "98:             allowNull: true,",
          "99:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "113:     public function testAllowNullFalse()",
          "114:     {",
          "120:         $this->validator->validate(null, $constraint);",
          "",
          "[Removed Lines]",
          "115:         $constraint = new NotBlank([",
          "116:             'message' => 'myMessage',",
          "117:             'allowNull' => false,",
          "118:         ]);",
          "",
          "[Added Lines]",
          "107:         $constraint = new NotBlank(",
          "108:             message: 'myMessage',",
          "109:             allowNull: false,",
          "110:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "131:     public function testNormalizedStringIsInvalid($value)",
          "132:     {",
          "138:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "133:         $constraint = new NotBlank([",
          "134:             'message' => 'myMessage',",
          "135:             'normalizer' => 'trim',",
          "136:         ]);",
          "",
          "[Added Lines]",
          "125:         $constraint = new NotBlank(",
          "126:             message: 'myMessage',",
          "127:             normalizer: 'trim',",
          "128:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NotCompromisedPasswordValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     public function testThresholdReached()",
          "89:     {",
          "91:         $this->validator->validate(self::PASSWORD_LEAKED, $constraint);",
          "93:         $this->buildViolation($constraint->message)",
          "",
          "[Removed Lines]",
          "90:         $constraint = new NotCompromisedPassword(['threshold' => 3]);",
          "",
          "[Added Lines]",
          "90:         $constraint = new NotCompromisedPassword(threshold: 3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:             ->assertRaised();",
          "96:     }",
          "102:     {",
          "105:         $this->assertNoViolation();",
          "106:     }",
          "109:     {",
          "112:     }",
          "114:     public function testValidPassword()",
          "",
          "[Removed Lines]",
          "101:     public function testThresholdNotReached(NotCompromisedPassword $constraint)",
          "103:         $this->validator->validate(self::PASSWORD_LEAKED, $constraint);",
          "108:     public static function provideConstraintsWithThreshold(): iterable",
          "110:         yield 'Doctrine style' => [new NotCompromisedPassword(['threshold' => 10])];",
          "111:         yield 'named arguments' => [new NotCompromisedPassword(threshold: 10)];",
          "",
          "[Added Lines]",
          "98:     public function testThresholdNotReached()",
          "100:         $this->validator->validate(self::PASSWORD_LEAKED, new NotCompromisedPassword(threshold: 10));",
          "108:     public function testThresholdNotReachedDoctrineStyle()",
          "110:         $this->validator->validate(self::PASSWORD_LEAKED, new NotCompromisedPassword(['threshold' => 10]));",
          "112:         $this->assertNoViolation();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:         $this->validator->validate(self::PASSWORD_TRIGGERING_AN_ERROR, new NotCompromisedPassword());",
          "209:     }",
          "215:     {",
          "216:         $this->expectNotToPerformAssertions();",
          "219:     }",
          "222:     {",
          "225:     }",
          "227:     private function createHttpClientStub(?string $returnValue = null): HttpClientInterface",
          "",
          "[Removed Lines]",
          "214:     public function testApiErrorSkipped(NotCompromisedPassword $constraint)",
          "218:         $this->validator->validate(self::PASSWORD_TRIGGERING_AN_ERROR, $constraint);",
          "221:     public static function provideErrorSkippingConstraints(): iterable",
          "223:         yield 'Doctrine style' => [new NotCompromisedPassword(['skipOnError' => true])];",
          "224:         yield 'named arguments' => [new NotCompromisedPassword(skipOnError: true)];",
          "",
          "[Added Lines]",
          "212:     public function testApiErrorSkipped()",
          "216:         $this->validator->validate(self::PASSWORD_TRIGGERING_AN_ERROR, new NotCompromisedPassword(skipOnError: true));",
          "222:     public function testApiErrorSkippedDoctrineStyle()",
          "224:         $this->expectNotToPerformAssertions();",
          "226:         $this->validator->validate(self::PASSWORD_TRIGGERING_AN_ERROR, new NotCompromisedPassword(['skipOnError' => true]));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NotEqualToValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new NotEqualTo($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new NotEqualTo(...$options);",
          "39:         }",
          "41:         return new NotEqualTo();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NotIdenticalToValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     protected static function createConstraint(?array $options = null): Constraint",
          "36:     {",
          "38:     }",
          "40:     protected function getErrorCode(): ?string",
          "",
          "[Removed Lines]",
          "37:         return new NotIdenticalTo($options);",
          "",
          "[Added Lines]",
          "37:         if (null !== $options) {",
          "38:             return new NotIdenticalTo(...$options);",
          "39:         }",
          "41:         return new NotIdenticalTo();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/NotNullValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         ];",
          "43:     }",
          "49:     {",
          "52:         $this->buildViolation('myMessage')",
          "53:             ->setParameter('{{ value }}', 'null')",
          "",
          "[Removed Lines]",
          "48:     public function testNullIsInvalid(NotNull $constraint)",
          "50:         $this->validator->validate(null, $constraint);",
          "",
          "[Added Lines]",
          "45:     public function testNullIsInvalid()",
          "47:         $this->validator->validate(null, new NotNull(message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             ->assertRaised();",
          "56:     }",
          "59:     {",
          "61:             'message' => 'myMessage',",
          "64:     }",
          "65: }",
          "",
          "[Removed Lines]",
          "58:     public static function provideInvalidConstraints(): iterable",
          "60:         yield 'Doctrine style' => [new NotNull([",
          "62:         ])];",
          "63:         yield 'named parameters' => [new NotNull(message: 'myMessage')];",
          "",
          "[Added Lines]",
          "58:     public function testNullIsInvalidDoctrineStyle()",
          "60:         $this->validator->validate(null, new NotNull([",
          "62:         ]));",
          "64:         $this->buildViolation('myMessage')",
          "65:             ->setParameter('{{ value }}', 'null')",
          "66:             ->setCode(NotNull::IS_NULL_ERROR)",
          "67:             ->assertRaised();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php||src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php -> src/Symfony/Component/Validator/Tests/Constraints/RangeTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/RangeValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     public function testNullIsValid()",
          "32:     {",
          "35:         $this->assertNoViolation();",
          "36:     }",
          "",
          "[Removed Lines]",
          "33:         $this->validator->validate(null, new Range(['min' => 10, 'max' => 20]));",
          "",
          "[Added Lines]",
          "33:         $this->validator->validate(null, new Range(min: 10, max: 20));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:     public function testValidDatesMin($value)",
          "347:     {",
          "349:         $this->validator->validate($value, $constraint);",
          "351:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "348:         $constraint = new Range(['min' => 'March 10, 2014']);",
          "",
          "[Added Lines]",
          "355:         $constraint = new Range(min: 'March 10, 2014');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:     public function testValidDatesMax($value)",
          "358:     {",
          "360:         $this->validator->validate($value, $constraint);",
          "362:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "359:         $constraint = new Range(['max' => 'March 20, 2014']);",
          "",
          "[Added Lines]",
          "366:         $constraint = new Range(max: 'March 20, 2014');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "368:     public function testValidDatesMinMax($value)",
          "369:     {",
          "371:         $this->validator->validate($value, $constraint);",
          "373:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "370:         $constraint = new Range(['min' => 'March 10, 2014', 'max' => 'March 20, 2014']);",
          "",
          "[Added Lines]",
          "377:         $constraint = new Range(min: 'March 10, 2014', max: 'March 20, 2014');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "383:         IntlTestHelper::requireIntl($this, '57.1');",
          "390:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "385:         $constraint = new Range([",
          "386:             'min' => 'March 10, 2014',",
          "387:             'minMessage' => 'myMessage',",
          "388:         ]);",
          "",
          "[Added Lines]",
          "392:         $constraint = new Range(",
          "393:             min: 'March 10, 2014',",
          "394:             minMessage: 'myMessage',",
          "395:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "406:         IntlTestHelper::requireIntl($this, '57.1');",
          "413:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "408:         $constraint = new Range([",
          "409:             'max' => 'March 20, 2014',",
          "410:             'maxMessage' => 'myMessage',",
          "411:         ]);",
          "",
          "[Added Lines]",
          "415:         $constraint = new Range(",
          "416:             max: 'March 20, 2014',",
          "417:             maxMessage: 'myMessage',",
          "418:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "429:         IntlTestHelper::requireIntl($this, '57.1');",
          "437:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "431:         $constraint = new Range([",
          "432:             'min' => 'March 10, 2014',",
          "433:             'max' => 'March 20, 2014',",
          "434:             'notInRangeMessage' => 'myNotInRangeMessage',",
          "435:         ]);",
          "",
          "[Added Lines]",
          "438:         $constraint = new Range(",
          "439:             min: 'March 10, 2014',",
          "440:             max: 'March 20, 2014',",
          "441:             notInRangeMessage: 'myNotInRangeMessage',",
          "442:         );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "454:         IntlTestHelper::requireIntl($this, '57.1');",
          "462:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "456:         $constraint = new Range([",
          "457:             'min' => 'March 10, 2014',",
          "458:             'max' => 'March 20, 2014',",
          "459:             'notInRangeMessage' => 'myNotInRangeMessage',",
          "460:         ]);",
          "",
          "[Added Lines]",
          "463:         $constraint = new Range(",
          "464:             min: 'March 10, 2014',",
          "465:             max: 'March 20, 2014',",
          "466:             notInRangeMessage: 'myNotInRangeMessage',",
          "467:         );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "483:     public function testNonNumeric()",
          "484:     {",
          "490:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "485:         $constraint = new Range([",
          "486:             'min' => 10,",
          "487:             'max' => 20,",
          "488:         ]);",
          "",
          "[Added Lines]",
          "492:         $constraint = new Range(",
          "493:             min: 10,",
          "494:             max: 20,",
          "495:         );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "498:     public function testNonNumericWithParsableDatetimeMinAndMaxNull()",
          "499:     {",
          "504:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "500:         $constraint = new Range([",
          "501:             'min' => 'March 10, 2014',",
          "502:         ]);",
          "",
          "[Added Lines]",
          "507:         $constraint = new Range(",
          "508:             min: 'March 10, 2014',",
          "509:         );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "512:     public function testNonNumericWithParsableDatetimeMaxAndMinNull()",
          "513:     {",
          "518:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "514:         $constraint = new Range([",
          "515:             'max' => 'March 20, 2014',",
          "516:         ]);",
          "",
          "[Added Lines]",
          "521:         $constraint = new Range(",
          "522:             max: 'March 20, 2014',",
          "523:         );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "526:     public function testNonNumericWithParsableDatetimeMinAndMax()",
          "527:     {",
          "533:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "528:         $constraint = new Range([",
          "529:             'min' => 'March 10, 2014',",
          "530:             'max' => 'March 20, 2014',",
          "531:         ]);",
          "",
          "[Added Lines]",
          "535:         $constraint = new Range(",
          "536:             min: 'March 10, 2014',",
          "537:             max: 'March 20, 2014',",
          "538:         );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "541:     public function testNonNumericWithNonParsableDatetimeMin()",
          "542:     {",
          "548:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "543:         $constraint = new Range([",
          "544:             'min' => 'March 40, 2014',",
          "545:             'max' => 'March 20, 2014',",
          "546:         ]);",
          "",
          "[Added Lines]",
          "550:         $constraint = new Range(",
          "551:             min: 'March 40, 2014',",
          "552:             max: 'March 20, 2014',",
          "553:         );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "556:     public function testNonNumericWithNonParsableDatetimeMax()",
          "557:     {",
          "563:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "558:         $constraint = new Range([",
          "559:             'min' => 'March 10, 2014',",
          "560:             'max' => 'March 50, 2014',",
          "561:         ]);",
          "",
          "[Added Lines]",
          "565:         $constraint = new Range(",
          "566:             min: 'March 10, 2014',",
          "567:             max: 'March 50, 2014',",
          "568:         );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "571:     public function testNonNumericWithNonParsableDatetimeMinAndMax()",
          "572:     {",
          "578:         $this->validator->validate('abcd', $constraint);",
          "",
          "[Removed Lines]",
          "573:         $constraint = new Range([",
          "574:             'min' => 'March 40, 2014',",
          "575:             'max' => 'March 50, 2014',",
          "576:         ]);",
          "",
          "[Added Lines]",
          "580:         $constraint = new Range(",
          "581:             min: 'March 40, 2014',",
          "582:             max: 'March 50, 2014',",
          "583:         );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "591:         $this->expectException(ConstraintDefinitionException::class);",
          "592:         $this->expectExceptionMessage($expectedMessage);",
          "598:     }",
          "600:     public static function throwsOnInvalidStringDatesProvider(): array",
          "",
          "[Removed Lines]",
          "594:         $this->validator->validate($value, new Range([",
          "595:             'min' => $min,",
          "596:             'max' => $max,",
          "597:         ]));",
          "",
          "[Added Lines]",
          "601:         $this->validator->validate($value, new Range(",
          "602:             min: $min,",
          "603:             max: $max,",
          "604:         ));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "612:     {",
          "613:         $this->setObject(null);",
          "620:         $this->assertNoViolation();",
          "621:     }",
          "626:     public function testValidValuesMinPropertyPath($value)",
          "",
          "[Removed Lines]",
          "615:         $this->validator->validate(1, new Range([",
          "616:             'minPropertyPath' => 'minPropertyPath',",
          "617:             'maxPropertyPath' => 'maxPropertyPath',",
          "618:         ]));",
          "",
          "[Added Lines]",
          "622:         $this->validator->validate(1, new Range(",
          "623:             minPropertyPath: 'minPropertyPath',",
          "624:             maxPropertyPath: 'maxPropertyPath',",
          "625:         ));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "653:     {",
          "654:         $this->setObject(new Limit(20));",
          "660:         $this->assertNoViolation();",
          "661:     }",
          "",
          "[Removed Lines]",
          "656:         $this->validator->validate($value, new Range([",
          "657:             'maxPropertyPath' => 'value',",
          "658:         ]));",
          "",
          "[Added Lines]",
          "664:         $this->validator->validate($value, new Range(",
          "665:             maxPropertyPath: 'value',",
          "666:         ));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "679:     {",
          "680:         $this->setObject(new MinMax(10, 20));",
          "687:         $this->assertNoViolation();",
          "688:     }",
          "",
          "[Removed Lines]",
          "682:         $this->validator->validate($value, new Range([",
          "683:             'minPropertyPath' => 'min',",
          "684:             'maxPropertyPath' => 'max',",
          "685:         ]));",
          "",
          "[Added Lines]",
          "690:         $this->validator->validate($value, new Range(",
          "691:             minPropertyPath: 'min',",
          "692:             maxPropertyPath: 'max',",
          "693:         ));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "694:     {",
          "695:         $this->setObject(new Limit(10));",
          "702:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "697:         $constraint = new Range([",
          "698:             'minPropertyPath' => 'value',",
          "699:             'minMessage' => 'myMessage',",
          "700:         ]);",
          "",
          "[Added Lines]",
          "705:         $constraint = new Range(",
          "706:             minPropertyPath: 'value',",
          "707:             minMessage: 'myMessage',",
          "708:         );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "716:     {",
          "717:         $this->setObject(new Limit(20));",
          "724:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "719:         $constraint = new Range([",
          "720:             'maxPropertyPath' => 'value',",
          "721:             'maxMessage' => 'myMessage',",
          "722:         ]);",
          "",
          "[Added Lines]",
          "727:         $constraint = new Range(",
          "728:             maxPropertyPath: 'value',",
          "729:             maxMessage: 'myMessage',",
          "730:         );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "838:     {",
          "839:         $this->setObject(null);",
          "847:         $this->buildViolation('myMessage')",
          "848:             ->setParameter('{{ value }}', $formattedValue)",
          "",
          "[Removed Lines]",
          "841:         $this->validator->validate($value, new Range([",
          "842:             'min' => 10,",
          "843:             'maxPropertyPath' => 'max',",
          "844:             'minMessage' => 'myMessage',",
          "845:         ]));",
          "",
          "[Added Lines]",
          "851:         $this->validator->validate($value, new Range(",
          "852:             min: 10,",
          "853:             maxPropertyPath: 'max',",
          "854:             minMessage: 'myMessage',",
          "855:         ));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "859:     {",
          "860:         $this->setObject(null);",
          "868:         $this->buildViolation('myMessage')",
          "869:             ->setParameter('{{ value }}', $formattedValue)",
          "",
          "[Removed Lines]",
          "862:         $this->validator->validate($value, new Range([",
          "863:             'minPropertyPath' => 'min',",
          "864:             'max' => 20,",
          "865:             'maxMessage' => 'myMessage',",
          "866:         ]));",
          "",
          "[Added Lines]",
          "872:         $this->validator->validate($value, new Range(",
          "873:             minPropertyPath: 'min',",
          "874:             max: 20,",
          "875:             maxMessage: 'myMessage',",
          "876:         ));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "880:     {",
          "881:         $this->setObject(new Limit('March 10, 2014'));",
          "885:         $this->assertNoViolation();",
          "886:     }",
          "",
          "[Removed Lines]",
          "883:         $this->validator->validate($value, new Range(['minPropertyPath' => 'value']));",
          "",
          "[Added Lines]",
          "893:         $this->validator->validate($value, new Range(minPropertyPath: 'value'));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "892:     {",
          "893:         $this->setObject(new Limit('March 20, 2014'));",
          "896:         $this->validator->validate($value, $constraint);",
          "898:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "895:         $constraint = new Range(['maxPropertyPath' => 'value']);",
          "",
          "[Added Lines]",
          "905:         $constraint = new Range(maxPropertyPath: 'value');",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "905:     {",
          "906:         $this->setObject(new MinMax('March 10, 2014', 'March 20, 2014'));",
          "909:         $this->validator->validate($value, $constraint);",
          "911:         $this->assertNoViolation();",
          "",
          "[Removed Lines]",
          "908:         $constraint = new Range(['minPropertyPath' => 'min', 'maxPropertyPath' => 'max']);",
          "",
          "[Added Lines]",
          "918:         $constraint = new Range(minPropertyPath: 'min', maxPropertyPath: 'max');",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "923:         $this->setObject(new Limit('March 10, 2014'));",
          "930:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "925:         $constraint = new Range([",
          "926:             'minPropertyPath' => 'value',",
          "927:             'minMessage' => 'myMessage',",
          "928:         ]);",
          "",
          "[Added Lines]",
          "935:         $constraint = new Range(",
          "936:             minPropertyPath: 'value',",
          "937:             minMessage: 'myMessage',",
          "938:         );",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "949:         $this->setObject(new Limit('March 20, 2014'));",
          "956:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "951:         $constraint = new Range([",
          "952:             'maxPropertyPath' => 'value',",
          "953:             'maxMessage' => 'myMessage',",
          "954:         ]);",
          "",
          "[Added Lines]",
          "961:         $constraint = new Range(",
          "962:             maxPropertyPath: 'value',",
          "963:             maxMessage: 'myMessage',",
          "964:         );",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "975:         $this->setObject(new MinMax('March 10, 2014', 'March 20, 2014'));",
          "983:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "977:         $constraint = new Range([",
          "978:             'minPropertyPath' => 'min',",
          "979:             'maxPropertyPath' => 'max',",
          "980:             'notInRangeMessage' => 'myNotInRangeMessage',",
          "981:         ]);",
          "",
          "[Added Lines]",
          "987:         $constraint = new Range(",
          "988:             minPropertyPath: 'min',",
          "989:             maxPropertyPath: 'max',",
          "990:             notInRangeMessage: 'myNotInRangeMessage',",
          "991:         );",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1004:         $this->setObject(new MinMax('March 10, 2014', 'March 20, 2014'));",
          "1012:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "1006:         $constraint = new Range([",
          "1007:             'minPropertyPath' => 'min',",
          "1008:             'maxPropertyPath' => 'max',",
          "1009:             'notInRangeMessage' => 'myNotInRangeMessage',",
          "1010:         ]);",
          "",
          "[Added Lines]",
          "1016:         $constraint = new Range(",
          "1017:             minPropertyPath: 'min',",
          "1018:             maxPropertyPath: 'max',",
          "1019:             notInRangeMessage: 'myNotInRangeMessage',",
          "1020:         );",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1027:         $object->max = 5;",
          "1028:         $this->setObject($object);",
          "1032:         $this->assertNoViolation();",
          "1033:     }",
          "",
          "[Removed Lines]",
          "1030:         $this->validator->validate(5, new Range(['minPropertyPath' => 'min', 'maxPropertyPath' => 'max']));",
          "",
          "[Added Lines]",
          "1040:         $this->validator->validate(5, new Range(minPropertyPath: 'min', maxPropertyPath: 'max'));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1038:         $object->min = 5;",
          "1039:         $this->setObject($object);",
          "1043:         $this->assertNoViolation();",
          "1044:     }",
          "1046:     public static function provideMessageIfMinAndMaxSet(): array",
          "1047:     {",
          "1050:         return [",
          "1051:             [",
          "",
          "[Removed Lines]",
          "1041:         $this->validator->validate(5, new Range(['minPropertyPath' => 'min', 'maxPropertyPath' => 'max']));",
          "1048:         $notInRangeMessage = (new Range(['min' => '']))->notInRangeMessage;",
          "",
          "[Added Lines]",
          "1051:         $this->validator->validate(5, new Range(minPropertyPath: 'min', maxPropertyPath: 'max'));",
          "1058:         $notInRangeMessage = (new Range(min: ''))->notInRangeMessage;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1069:     public function testMessageIfMinAndMaxSet(array $constraintExtraOptions, int $value, string $expectedMessage, string $expectedCode)",
          "1070:     {",
          "1072:         $this->validator->validate($value, $constraint);",
          "1074:         $this",
          "",
          "[Removed Lines]",
          "1071:         $constraint = new Range(array_merge(['min' => 1, 'max' => 10], $constraintExtraOptions));",
          "",
          "[Added Lines]",
          "1081:         $constraint = new Range(...array_merge(['min' => 1, 'max' => 10], $constraintExtraOptions));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php||src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php -> src/Symfony/Component/Validator/Tests/Constraints/RegexTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     public function testGetHtmlPattern($pattern, $htmlPattern, $match = true)",
          "71:     {",
          "77:         $this->assertSame($pattern, $constraint->pattern);",
          "78:         $this->assertSame($htmlPattern, $constraint->getHtmlPattern());",
          "",
          "[Removed Lines]",
          "72:         $constraint = new Regex([",
          "73:             'pattern' => $pattern,",
          "74:             'match' => $match,",
          "75:         ]);",
          "",
          "[Added Lines]",
          "72:         $constraint = new Regex(",
          "73:             pattern: $pattern,",
          "74:             match: $match,",
          "75:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     public function testGetCustomHtmlPattern()",
          "82:     {",
          "88:         $this->assertSame('((?![0-9]$|[a-z]+).)*', $constraint->pattern);",
          "89:         $this->assertSame('foobar', $constraint->getHtmlPattern());",
          "",
          "[Removed Lines]",
          "83:         $constraint = new Regex([",
          "84:             'pattern' => '((?![0-9]$|[a-z]+).)*',",
          "85:             'htmlPattern' => 'foobar',",
          "86:         ]);",
          "",
          "[Added Lines]",
          "83:         $constraint = new Regex(",
          "84:             pattern: '((?![0-9]$|[a-z]+).)*',",
          "85:             htmlPattern: 'foobar',",
          "86:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     public function testNormalizerCanBeSet()",
          "93:     {",
          "96:         $this->assertEquals('trim', $regex->normalizer);",
          "97:     }",
          "99:     public function testInvalidNormalizerThrowsException()",
          "100:     {",
          "101:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "94:         $regex = new Regex(['pattern' => '/^[0-9]+$/', 'normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "94:         $regex = new Regex(pattern: '/^[0-9]+$/', normalizer: 'trim');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/RegexValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     public function testNullIsValid()",
          "27:     {",
          "30:         $this->assertNoViolation();",
          "31:     }",
          "33:     public function testEmptyStringIsValid()",
          "34:     {",
          "37:         $this->assertNoViolation();",
          "38:     }",
          "",
          "[Removed Lines]",
          "28:         $this->validator->validate(null, new Regex(['pattern' => '/^[0-9]+$/']));",
          "35:         $this->validator->validate('', new Regex(['pattern' => '/^[0-9]+$/']));",
          "",
          "[Added Lines]",
          "28:         $this->validator->validate(null, new Regex(pattern: '/^[0-9]+$/'));",
          "35:         $this->validator->validate('', new Regex(pattern: '/^[0-9]+$/'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public function testExpectsStringCompatibleType()",
          "41:     {",
          "42:         $this->expectException(UnexpectedValueException::class);",
          "44:     }",
          "",
          "[Removed Lines]",
          "43:         $this->validator->validate(new \\stdClass(), new Regex(['pattern' => '/^[0-9]+$/']));",
          "",
          "[Added Lines]",
          "43:         $this->validator->validate(new \\stdClass(), new Regex(pattern: '/^[0-9]+$/'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     public function testValidValues($value)",
          "50:     {",
          "52:         $this->validator->validate($value, $constraint);",
          "54:         $this->assertNoViolation();",
          "55:     }",
          "60:     public function testValidValuesWithWhitespaces($value)",
          "",
          "[Removed Lines]",
          "51:         $constraint = new Regex(['pattern' => '/^[0-9]+$/']);",
          "",
          "[Added Lines]",
          "51:         $constraint = new Regex(pattern: '/^[0-9]+$/');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/SequentiallyValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     {",
          "34:         $constraints = [",
          "35:             new Type('number'),",
          "37:         ];",
          "39:         $value = 6;",
          "",
          "[Removed Lines]",
          "36:             new Range(['min' => 4]),",
          "",
          "[Added Lines]",
          "36:             new Range(min: 4),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     {",
          "51:         $constraints = [",
          "52:             new Type('string'),",
          "54:             new NotEqualTo('Foo'),",
          "55:         ];",
          "",
          "[Removed Lines]",
          "53:             new Regex(['pattern' => '[a-z]']),",
          "",
          "[Added Lines]",
          "53:             new Regex(pattern: '[a-z]'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     {",
          "69:         $validator = Validation::createValidator();",
          "82:             ],",
          "86:         $this->assertCount(0, $violations);",
          "87:     }",
          "",
          "[Removed Lines]",
          "71:         $violations = $validator->validate(50, new Sequentially([",
          "72:             'constraints' => [",
          "73:                 new GreaterThan([",
          "74:                     'groups' => 'senior',",
          "75:                     'value' => 55,",
          "76:                 ]),",
          "77:                 new Range([",
          "78:                     'groups' => 'adult',",
          "79:                     'min' => 18,",
          "80:                     'max' => 55,",
          "81:                 ]),",
          "83:             'groups' => ['adult', 'senior'],",
          "84:         ]), 'adult');",
          "",
          "[Added Lines]",
          "71:         $violations = $validator->validate(50, new Sequentially(",
          "72:             constraints: [",
          "73:                 new GreaterThan(",
          "74:                     groups: ['senior'],",
          "75:                     value: 55,",
          "76:                 ),",
          "77:                 new Range(",
          "78:                     groups: ['adult'],",
          "79:                     min: 18,",
          "80:                     max: 55,",
          "81:                 ),",
          "83:             groups: ['adult', 'senior'],",
          "84:         ), 'adult');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/TimeValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     public function testValidTimesWithoutSeconds(string $time)",
          "89:     {",
          "94:         $this->assertNoViolation();",
          "95:     }",
          "",
          "[Removed Lines]",
          "90:         $this->validator->validate($time, new Time([",
          "91:             'withSeconds' => false,",
          "92:         ]));",
          "",
          "[Added Lines]",
          "90:         $this->validator->validate($time, new Time(withSeconds: false));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     public function testInvalidTimes($time, $code)",
          "145:     {",
          "150:         $this->validator->validate($time, $constraint);",
          "",
          "[Removed Lines]",
          "146:         $constraint = new Time([",
          "147:             'message' => 'myMessage',",
          "148:         ]);",
          "",
          "[Added Lines]",
          "144:         $constraint = new Time(message: 'myMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php -> src/Symfony/Component/Validator/Tests/Constraints/TimezoneTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     public function testValidTimezoneConstraints()",
          "26:     {",
          "27:         new Timezone();",
          "29:         new Timezone(\\DateTimeZone::ALL_WITH_BC);",
          "35:         $this->addToAssertionCount(1);",
          "36:     }",
          "",
          "[Removed Lines]",
          "28:         new Timezone(['zone' => \\DateTimeZone::ALL]);",
          "30:         new Timezone([",
          "31:             'zone' => \\DateTimeZone::PER_COUNTRY,",
          "32:             'countryCode' => 'AR',",
          "33:         ]);",
          "",
          "[Added Lines]",
          "28:         new Timezone(zone: \\DateTimeZone::ALL);",
          "30:         new Timezone(",
          "31:             zone: \\DateTimeZone::PER_COUNTRY,",
          "32:             countryCode: 'AR',",
          "33:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     public function testExceptionForGroupedTimezonesByCountryWithWrongZone()",
          "39:     {",
          "40:         $this->expectException(ConstraintDefinitionException::class);",
          "45:     }",
          "47:     public function testExceptionForGroupedTimezonesByCountryWithoutZone()",
          "48:     {",
          "49:         $this->expectException(ConstraintDefinitionException::class);",
          "51:     }",
          "",
          "[Removed Lines]",
          "41:         new Timezone([",
          "42:             'zone' => \\DateTimeZone::ALL,",
          "43:             'countryCode' => 'AR',",
          "44:         ]);",
          "50:         new Timezone(['countryCode' => 'AR']);",
          "",
          "[Added Lines]",
          "41:         new Timezone(",
          "42:             zone: \\DateTimeZone::ALL,",
          "43:             countryCode: 'AR',",
          "44:         );",
          "50:         new Timezone(countryCode: 'AR');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     public function testExceptionForInvalidGroupedTimezones(int $zone)",
          "57:     {",
          "58:         $this->expectException(ConstraintDefinitionException::class);",
          "60:     }",
          "62:     public static function provideInvalidZones(): iterable",
          "",
          "[Removed Lines]",
          "59:         new Timezone(['zone' => $zone]);",
          "",
          "[Added Lines]",
          "59:         new Timezone(zone: $zone);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/TimezoneValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     public function testValidGroupedTimezones(string $timezone, int $zone)",
          "94:     {",
          "99:         $this->validator->validate($timezone, $constraint);",
          "",
          "[Removed Lines]",
          "95:         $constraint = new Timezone([",
          "96:             'zone' => $zone,",
          "97:         ]);",
          "",
          "[Added Lines]",
          "95:         $constraint = new Timezone(zone: $zone);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     public function testInvalidTimezoneWithoutZone(string $timezone)",
          "127:     {",
          "132:         $this->validator->validate($timezone, $constraint);",
          "",
          "[Removed Lines]",
          "128:         $constraint = new Timezone([",
          "129:             'message' => 'myMessage',",
          "130:         ]);",
          "",
          "[Added Lines]",
          "126:         $constraint = new Timezone(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:     public function testInvalidGroupedTimezones(string $timezone, int $zone)",
          "152:     {",
          "158:         $this->validator->validate($timezone, $constraint);",
          "",
          "[Removed Lines]",
          "153:         $constraint = new Timezone([",
          "154:             'zone' => $zone,",
          "155:             'message' => 'myMessage',",
          "156:         ]);",
          "",
          "[Added Lines]",
          "149:         $constraint = new Timezone(",
          "150:             zone: $zone,",
          "151:             message: 'myMessage',",
          "152:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194:     public function testValidGroupedTimezonesByCountry(string $timezone, string $country)",
          "195:     {",
          "201:         $this->validator->validate($timezone, $constraint);",
          "",
          "[Removed Lines]",
          "196:         $constraint = new Timezone([",
          "197:             'zone' => \\DateTimeZone::PER_COUNTRY,",
          "198:             'countryCode' => $country,",
          "199:         ]);",
          "",
          "[Added Lines]",
          "192:         $constraint = new Timezone(",
          "193:             zone: \\DateTimeZone::PER_COUNTRY,",
          "194:             countryCode: $country,",
          "195:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:     public function testInvalidGroupedTimezonesByCountry(string $timezone, string $countryCode)",
          "232:     {",
          "239:         $this->validator->validate($timezone, $constraint);",
          "",
          "[Removed Lines]",
          "233:         $constraint = new Timezone([",
          "234:             'message' => 'myMessage',",
          "235:             'zone' => \\DateTimeZone::PER_COUNTRY,",
          "236:             'countryCode' => $countryCode,",
          "237:         ]);",
          "",
          "[Added Lines]",
          "229:         $constraint = new Timezone(",
          "230:             message: 'myMessage',",
          "231:             zone: \\DateTimeZone::PER_COUNTRY,",
          "232:             countryCode: $countryCode,",
          "233:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:     public function testGroupedTimezonesWithInvalidCountry()",
          "257:     {",
          "264:         $this->validator->validate('Europe/Amsterdam', $constraint);",
          "",
          "[Removed Lines]",
          "258:         $constraint = new Timezone([",
          "259:             'message' => 'myMessage',",
          "260:             'zone' => \\DateTimeZone::PER_COUNTRY,",
          "261:             'countryCode' => 'foobar',",
          "262:         ]);",
          "",
          "[Added Lines]",
          "254:         $constraint = new Timezone(",
          "255:             message: 'myMessage',",
          "256:             zone: \\DateTimeZone::PER_COUNTRY,",
          "257:             countryCode: 'foobar',",
          "258:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "287:     public function testDeprecatedTimezonesAreInvalidWithoutBC(string $timezone)",
          "288:     {",
          "293:         $this->validator->validate($timezone, $constraint);",
          "",
          "[Removed Lines]",
          "289:         $constraint = new Timezone([",
          "290:             'message' => 'myMessage',",
          "291:         ]);",
          "",
          "[Added Lines]",
          "285:         $constraint = new Timezone(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "332:             $this->markTestSkipped('\"Europe/Saratov\" is expired until 2017, current version is '.$tzDbVersion);",
          "333:         }",
          "340:         $this->validator->validate('Europe/Saratov', $constraint);",
          "",
          "[Removed Lines]",
          "335:         $constraint = new Timezone([",
          "336:             'message' => 'myMessage',",
          "337:             'intlCompatible' => true,",
          "338:         ]);",
          "",
          "[Added Lines]",
          "329:         $constraint = new Timezone(",
          "330:             message: 'myMessage',",
          "331:             intlCompatible: true,",
          "332:         );",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/TypeValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     public function testNullIsValid()",
          "28:     {",
          "31:         $this->validator->validate(null, $constraint);",
          "",
          "[Removed Lines]",
          "29:         $constraint = new Type(['type' => 'integer']);",
          "",
          "[Added Lines]",
          "29:         $constraint = new Type(type: 'integer');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     public function testEmptyIsValidIfString()",
          "37:     {",
          "40:         $this->validator->validate('', $constraint);",
          "",
          "[Removed Lines]",
          "38:         $constraint = new Type(['type' => 'string']);",
          "",
          "[Added Lines]",
          "38:         $constraint = new Type(type: 'string');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     public function testEmptyIsInvalidIfNoString()",
          "46:     {",
          "52:         $this->validator->validate('', $constraint);",
          "",
          "[Removed Lines]",
          "47:         $constraint = new Type([",
          "48:             'type' => 'integer',",
          "49:             'message' => 'myMessage',",
          "50:         ]);",
          "",
          "[Added Lines]",
          "47:         $constraint = new Type(",
          "48:             type: 'integer',",
          "49:             message: 'myMessage',",
          "50:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:     public function testValidValues($value, $type)",
          "65:     {",
          "68:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "66:         $constraint = new Type(['type' => $type]);",
          "",
          "[Added Lines]",
          "66:         $constraint = new Type(type: $type);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:     public function testInvalidValues($value, $type, $valueAsString)",
          "125:     {",
          "131:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "126:         $constraint = new Type([",
          "127:             'type' => $type,",
          "128:             'message' => 'myMessage',",
          "129:         ]);",
          "",
          "[Added Lines]",
          "126:         $constraint = new Type(",
          "127:             type: $type,",
          "128:             message: 'myMessage',",
          "129:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:     public function testValidValuesMultipleTypes($value, array $types)",
          "197:     {",
          "200:         $this->validator->validate($value, $constraint);",
          "",
          "[Removed Lines]",
          "198:         $constraint = new Type(['type' => $types]);",
          "",
          "[Added Lines]",
          "198:         $constraint = new Type(type: $types);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:         ];",
          "211:     }",
          "217:     {",
          "220:         $this->buildViolation('myMessage')",
          "221:             ->setParameter('{{ value }}', '\"12345\"')",
          "",
          "[Removed Lines]",
          "216:     public function testInvalidValuesMultipleTypes(Type $constraint)",
          "218:         $this->validator->validate('12345', $constraint);",
          "",
          "[Added Lines]",
          "213:     public function testInvalidValuesMultipleTypes()",
          "215:         $this->validator->validate('12345', new Type(type: ['boolean', 'array'], message: 'myMessage'));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224:             ->assertRaised();",
          "225:     }",
          "228:     {",
          "230:             'type' => ['boolean', 'array'],",
          "231:             'message' => 'myMessage',",
          "234:     }",
          "236:     protected static function createFile()",
          "",
          "[Removed Lines]",
          "227:     public static function provideConstraintsWithMultipleTypes()",
          "229:         yield 'Doctrine style' => [new Type([",
          "232:         ])];",
          "233:         yield 'named arguments' => [new Type(type: ['boolean', 'array'], message: 'myMessage')];",
          "",
          "[Added Lines]",
          "227:     public function testInvalidValuesMultipleTypesDoctrineStyle()",
          "229:         $this->validator->validate('12345', new Type([",
          "232:         ]));",
          "234:         $this->buildViolation('myMessage')",
          "235:             ->setParameter('{{ value }}', '\"12345\"')",
          "236:             ->setParameter('{{ type }}', implode('|', ['boolean', 'array']))",
          "237:             ->setCode(Type::INVALID_TYPE_ERROR)",
          "238:             ->assertRaised();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UlidValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     public function testInvalidUlid(string $ulid, string $code)",
          "74:     {",
          "79:         $this->validator->validate($ulid, $constraint);",
          "",
          "[Removed Lines]",
          "75:         $constraint = new Ulid([",
          "76:             'message' => 'testMessage',",
          "77:         ]);",
          "",
          "[Added Lines]",
          "75:         $constraint = new Ulid(message: 'testMessage');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php||src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UniqueTest.php"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UniqueValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     public function testInvalidValues($value, $expectedMessageParam)",
          "65:     {",
          "69:         $this->validator->validate($value, $constraint);",
          "71:         $this->buildViolation('myMessage')",
          "",
          "[Removed Lines]",
          "66:         $constraint = new Unique([",
          "67:             'message' => 'myMessage',",
          "68:         ]);",
          "",
          "[Added Lines]",
          "66:         $constraint = new Unique(message: 'myMessage');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         $value = [$object1, $object2, $object3];",
          "125:         $this->assertNoViolation();",
          "126:     }",
          "",
          "[Removed Lines]",
          "121:         $this->validator->validate($value, new Unique([",
          "122:             'normalizer' => $callback,",
          "123:         ]));",
          "",
          "[Added Lines]",
          "119:         $this->validator->validate($value, new Unique(normalizer: $callback));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:         $value = [$object1, $object2, $object3];",
          "152:         $this->buildViolation('myMessage')",
          "153:             ->setParameter('{{ value }}', 'array')",
          "",
          "[Removed Lines]",
          "147:         $this->validator->validate($value, new Unique([",
          "148:             'message' => 'myMessage',",
          "149:             'normalizer' => $callback,",
          "150:         ]));",
          "",
          "[Added Lines]",
          "143:         $this->validator->validate($value, new Unique(",
          "144:             message: 'myMessage',",
          "145:             normalizer: $callback,",
          "146:         ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:     public function testExpectsInvalidNonStrictComparison()",
          "170:     {",
          "176:         $this->buildViolation('myMessage')",
          "177:             ->setParameter('{{ value }}', '1')",
          "",
          "[Removed Lines]",
          "171:         $this->validator->validate([1, '1', 1.0, '1.0'], new Unique([",
          "172:             'message' => 'myMessage',",
          "173:             'normalizer' => 'intval',",
          "174:         ]));",
          "",
          "[Added Lines]",
          "167:         $this->validator->validate([1, '1', 1.0, '1.0'], new Unique(",
          "168:             message: 'myMessage',",
          "169:             normalizer: 'intval',",
          "170:         ));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183:     {",
          "184:         $callback = static fn ($item) => (int) $item;",
          "190:         $this->assertNoViolation();",
          "191:     }",
          "",
          "[Removed Lines]",
          "186:         $this->validator->validate([1, '2', 3, '4.0'], new Unique([",
          "187:             'normalizer' => $callback,",
          "188:         ]));",
          "",
          "[Added Lines]",
          "182:         $this->validator->validate([1, '2', 3, '4.0'], new Unique(normalizer: $callback));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:     {",
          "195:         $callback = static fn ($item) => mb_strtolower($item);",
          "202:         $this->buildViolation('myMessage')",
          "203:             ->setParameter('{{ value }}', '\"hello\"')",
          "",
          "[Removed Lines]",
          "197:         $this->validator->validate(['Hello', 'hello', 'HELLO', 'hellO'], new Unique([",
          "198:             'message' => 'myMessage',",
          "199:             'normalizer' => $callback,",
          "200:         ]));",
          "",
          "[Added Lines]",
          "191:         $this->validator->validate(['Hello', 'hello', 'HELLO', 'hellO'], new Unique(",
          "192:             message: 'myMessage',",
          "193:             normalizer: $callback,",
          "194:         ));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "209:     {",
          "210:         $callback = static fn ($item) => mb_strtolower($item);",
          "216:         $this->assertNoViolation();",
          "217:     }",
          "",
          "[Removed Lines]",
          "212:         $this->validator->validate(['Hello', 'World'], new Unique([",
          "213:             'normalizer' => $callback,",
          "214:         ]));",
          "",
          "[Added Lines]",
          "206:         $this->validator->validate(['Hello', 'World'], new Unique(normalizer: $callback));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "249:     public function testInvalidCollectionValues(array $value, array $fields, string $expectedMessageParam)",
          "250:     {",
          "255:         $this->buildViolation('myMessage')",
          "256:             ->setParameter('{{ value }}', $expectedMessageParam)",
          "",
          "[Removed Lines]",
          "251:         $this->validator->validate($value, new Unique([",
          "252:             'message' => 'myMessage',",
          "253:         ], fields: $fields));",
          "",
          "[Added Lines]",
          "243:         $this->validator->validate($value, new Unique(",
          "244:             message: 'myMessage',",
          "245:             fields: $fields,",
          "246:         ));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UrlTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:     public function testNormalizerCanBeSet()",
          "26:     {",
          "29:         $this->assertEquals('trim', $url->normalizer);",
          "30:     }",
          "32:     public function testInvalidNormalizerThrowsException()",
          "33:     {",
          "34:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "27:         $url = new Url(['normalizer' => 'trim', 'requireTld' => true]);",
          "",
          "[Added Lines]",
          "27:         $url = new Url(normalizer: 'trim', requireTld: true);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     public function testValidUrlsWithWhitespaces($url)",
          "80:     {",
          "86:         $this->assertNoViolation();",
          "87:     }",
          "",
          "[Removed Lines]",
          "81:         $this->validator->validate($url, new Url([",
          "82:             'normalizer' => 'trim',",
          "83:             'requireTld' => true,",
          "84:         ]));",
          "",
          "[Added Lines]",
          "81:         $this->validator->validate($url, new Url(",
          "82:             normalizer: 'trim',",
          "83:             requireTld: true,",
          "84:         ));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     public function testValidRelativeUrl($url)",
          "94:     {",
          "100:         $this->validator->validate($url, $constraint);",
          "",
          "[Removed Lines]",
          "95:         $constraint = new Url([",
          "96:             'relativeProtocol' => true,",
          "97:             'requireTld' => false,",
          "98:         ]);",
          "",
          "[Added Lines]",
          "95:         $constraint = new Url(",
          "96:             relativeProtocol: true,",
          "97:             requireTld: false,",
          "98:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:     public function testInvalidUrls($url)",
          "231:     {",
          "237:         $this->validator->validate($url, $constraint);",
          "",
          "[Removed Lines]",
          "232:         $constraint = new Url([",
          "233:             'message' => 'myMessage',",
          "234:             'requireTld' => false,",
          "235:         ]);",
          "",
          "[Added Lines]",
          "232:         $constraint = new Url(",
          "233:             message: 'myMessage',",
          "234:             requireTld: false,",
          "235:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:     public function testInvalidRelativeUrl($url)",
          "250:     {",
          "257:         $this->validator->validate($url, $constraint);",
          "",
          "[Removed Lines]",
          "251:         $constraint = new Url([",
          "252:             'message' => 'myMessage',",
          "253:             'relativeProtocol' => true,",
          "254:             'requireTld' => false,",
          "255:         ]);",
          "",
          "[Added Lines]",
          "251:         $constraint = new Url(",
          "252:             message: 'myMessage',",
          "253:             relativeProtocol: true,",
          "254:             requireTld: false,",
          "255:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "332:     public function testCustomProtocolIsValid($url, $requireTld)",
          "333:     {",
          "339:         $this->validator->validate($url, $constraint);",
          "",
          "[Removed Lines]",
          "334:         $constraint = new Url([",
          "335:             'protocols' => ['ftp', 'file', 'git'],",
          "336:             'requireTld' => $requireTld,",
          "337:         ]);",
          "",
          "[Added Lines]",
          "334:         $constraint = new Url(",
          "335:             protocols: ['ftp', 'file', 'git'],",
          "336:             requireTld: $requireTld,",
          "337:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "356:     public function testRequiredTld(string $url, bool $requireTld, bool $isValid)",
          "357:     {",
          "362:         $this->validator->validate($url, $constraint);",
          "",
          "[Removed Lines]",
          "358:         $constraint = new Url([",
          "359:             'requireTld' => $requireTld,",
          "360:         ]);",
          "",
          "[Added Lines]",
          "358:         $constraint = new Url(requireTld: $requireTld);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php||src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UuidTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:     public function testNormalizerCanBeSet()",
          "26:     {",
          "29:         $this->assertEquals('trim', $uuid->normalizer);",
          "30:     }",
          "32:     public function testInvalidNormalizerThrowsException()",
          "33:     {",
          "34:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "27:         $uuid = new Uuid(['normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "27:         $uuid = new Uuid(normalizer: 'trim');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UuidValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     public function testValidStrictUuidsWithWhitespaces($uuid, $versions = null)",
          "95:     {",
          "98:         if (null !== $versions) {",
          "99:             $constraint->versions = $versions;",
          "",
          "[Removed Lines]",
          "96:         $constraint = new Uuid(['normalizer' => 'trim']);",
          "",
          "[Added Lines]",
          "96:         $constraint = new Uuid(normalizer: 'trim');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:     public function testInvalidStrictUuids($uuid, $code, $versions = null)",
          "133:     {",
          "138:         if (null !== $versions) {",
          "139:             $constraint->versions = $versions;",
          "",
          "[Removed Lines]",
          "134:         $constraint = new Uuid([",
          "135:             'message' => 'testMessage',",
          "136:         ]);",
          "",
          "[Added Lines]",
          "134:         $constraint = new Uuid(message: 'testMessage');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     public function testValidNonStrictUuids($uuid)",
          "197:     {",
          "202:         $this->validator->validate($uuid, $constraint);",
          "",
          "[Removed Lines]",
          "198:         $constraint = new Uuid([",
          "199:             'strict' => false,",
          "200:         ]);",
          "",
          "[Added Lines]",
          "196:         $constraint = new Uuid(strict: false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:     public function testInvalidNonStrictUuids($uuid, $code)",
          "228:     {",
          "234:         $this->validator->validate($uuid, $constraint);",
          "",
          "[Removed Lines]",
          "229:         $constraint = new Uuid([",
          "230:             'strict' => false,",
          "231:             'message' => 'myMessage',",
          "232:         ]);",
          "",
          "[Added Lines]",
          "225:         $constraint = new Uuid(",
          "226:             strict: false,",
          "227:             message: 'myMessage',",
          "228:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:     public function testTimeBasedUuid(string $uid, bool $expectedTimeBased)",
          "272:     {",
          "277:         $this->validator->validate($uid, $constraint);",
          "",
          "[Removed Lines]",
          "273:         $constraint = new Uuid([",
          "274:             'versions' => Uuid::TIME_BASED_VERSIONS,",
          "275:         ]);",
          "",
          "[Added Lines]",
          "269:         $constraint = new Uuid(versions: Uuid::TIME_BASED_VERSIONS);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php||src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php -> src/Symfony/Component/Validator/Tests/Constraints/ValidTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: {",
          "24:     public function testGroupsCanBeSet()",
          "25:     {",
          "28:         $this->assertSame(['foo'], $constraint->groups);",
          "29:     }",
          "",
          "[Removed Lines]",
          "26:         $constraint = new Valid(['groups' => 'foo']);",
          "",
          "[Added Lines]",
          "26:         $constraint = new Valid(groups: ['foo']);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php||src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php -> src/Symfony/Component/Validator/Tests/Constraints/WhenTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:         self::assertInstanceOf(When::class, $classConstraint);",
          "52:         self::assertSame('true', $classConstraint->expression);",
          "53:         self::assertEquals([",
          "58:         ], $classConstraint->constraints);",
          "60:         [$fooConstraint] = $metadata->properties['foo']->getConstraints();",
          "",
          "[Removed Lines]",
          "54:             new Callback([",
          "55:                 'callback' => 'callback',",
          "56:                 'groups' => ['Default', 'WhenTestWithAttributes'],",
          "57:             ]),",
          "",
          "[Added Lines]",
          "57:             new Callback(",
          "58:                 callback: 'callback',",
          "59:                 groups: ['Default', 'WhenTestWithAttributes'],",
          "60:             ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         self::assertInstanceOf(When::class, $fooConstraint);",
          "63:         self::assertSame('true', $fooConstraint->expression);",
          "64:         self::assertEquals([",
          "71:         ], $fooConstraint->constraints);",
          "72:         self::assertSame(['Default', 'WhenTestWithAttributes'], $fooConstraint->groups);",
          "",
          "[Removed Lines]",
          "65:             new NotNull([",
          "66:                 'groups' => ['Default', 'WhenTestWithAttributes'],",
          "67:             ]),",
          "68:             new NotBlank([",
          "69:                 'groups' => ['Default', 'WhenTestWithAttributes'],",
          "70:             ]),",
          "",
          "[Added Lines]",
          "68:             new NotNull(groups: ['Default', 'WhenTestWithAttributes']),",
          "69:             new NotBlank(groups: ['Default', 'WhenTestWithAttributes']),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:         self::assertInstanceOf(When::class, $fooConstraint);",
          "77:         self::assertSame('false', $barConstraint->expression);",
          "78:         self::assertEquals([",
          "85:         ], $barConstraint->constraints);",
          "86:         self::assertSame(['foo'], $barConstraint->groups);",
          "",
          "[Removed Lines]",
          "79:             new NotNull([",
          "80:                 'groups' => ['foo'],",
          "81:             ]),",
          "82:             new NotBlank([",
          "83:                 'groups' => ['foo'],",
          "84:             ]),",
          "",
          "[Added Lines]",
          "78:             new NotNull(groups: ['foo']),",
          "79:             new NotBlank(groups: ['foo']),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:         self::assertInstanceOf(When::class, $quxConstraint);",
          "91:         self::assertSame('true', $quxConstraint->expression);",
          "97:         self::assertSame(['foo'], $quxConstraint->groups);",
          "99:         [$bazConstraint] = $metadata->getters['baz']->getConstraints();",
          "",
          "[Removed Lines]",
          "92:         self::assertEquals([",
          "93:             new NotNull([",
          "94:                 'groups' => ['foo'],",
          "95:             ]),",
          "96:         ], $quxConstraint->constraints);",
          "",
          "[Added Lines]",
          "87:         self::assertEquals([new NotNull(groups: ['foo'])], $quxConstraint->constraints);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:         self::assertInstanceOf(When::class, $bazConstraint);",
          "102:         self::assertSame('true', $bazConstraint->expression);",
          "103:         self::assertEquals([",
          "110:         ], $bazConstraint->constraints);",
          "111:         self::assertSame(['Default', 'WhenTestWithAttributes'], $bazConstraint->groups);",
          "112:     }",
          "",
          "[Removed Lines]",
          "104:             new NotNull([",
          "105:                 'groups' => ['Default', 'WhenTestWithAttributes'],",
          "106:             ]),",
          "107:             new NotBlank([",
          "108:                 'groups' => ['Default', 'WhenTestWithAttributes'],",
          "109:             ]),",
          "",
          "[Added Lines]",
          "95:             new NotNull(groups: ['Default', 'WhenTestWithAttributes']),",
          "96:             new NotBlank(groups: ['Default', 'WhenTestWithAttributes']),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/WhenValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:         $this->expectValidateValue(0, 'Foo', $constraints);",
          "40:     }",
          "42:     public function testConstraintIsExecuted()",
          "",
          "[Removed Lines]",
          "36:         $this->validator->validate('Foo', new When([",
          "37:             'expression' => 'true',",
          "38:             'constraints' => $constraints,",
          "39:         ]));",
          "",
          "[Added Lines]",
          "36:         $this->validator->validate('Foo', new When(",
          "37:             expression: 'true',",
          "38:             constraints: $constraints,",
          "39:         ));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         $constraint = new NotNull();",
          "45:         $this->expectValidateValue(0, 'Foo', [$constraint]);",
          "51:     }",
          "53:     public function testConstraintsAreExecutedWithNull()",
          "",
          "[Removed Lines]",
          "47:         $this->validator->validate('Foo', new When([",
          "48:             'expression' => 'true',",
          "49:             'constraints' => $constraint,",
          "50:         ]));",
          "",
          "[Added Lines]",
          "47:         $this->validator->validate('Foo', new When(",
          "48:             expression: 'true',",
          "49:             constraints: $constraint,",
          "50:         ));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         $this->expectValidateValue(0, null, $constraints);",
          "65:     }",
          "67:     public function testConstraintsAreExecutedWithObject()",
          "",
          "[Removed Lines]",
          "61:         $this->validator->validate(null, new When([",
          "62:             'expression' => 'true',",
          "63:             'constraints' => $constraints,",
          "64:         ]));",
          "",
          "[Added Lines]",
          "61:         $this->validator->validate(null, new When(",
          "62:             expression: 'true',",
          "63:             constraints: $constraints,",
          "64:         ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         $this->expectValidateValue(0, $number->value, $constraints);",
          "86:     }",
          "88:     public function testConstraintsAreExecutedWithNestedObject()",
          "",
          "[Removed Lines]",
          "82:         $this->validator->validate($number->value, new When([",
          "83:             'expression' => 'this.type === \"positive\"',",
          "84:             'constraints' => $constraints,",
          "85:         ]));",
          "",
          "[Added Lines]",
          "82:         $this->validator->validate($number->value, new When(",
          "83:             expression: 'this.type === \"positive\"',",
          "84:             constraints: $constraints,",
          "85:         ));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:         $this->expectValidateValue(0, $number->value, $constraints);",
          "111:     }",
          "113:     public function testConstraintsAreExecutedWithValue()",
          "",
          "[Removed Lines]",
          "107:         $this->validator->validate($number->value, new When([",
          "108:             'expression' => 'context.getRoot().ok === true',",
          "109:             'constraints' => $constraints,",
          "110:         ]));",
          "",
          "[Added Lines]",
          "107:         $this->validator->validate($number->value, new When(",
          "108:             expression: 'context.getRoot().ok === true',",
          "109:             constraints: $constraints,",
          "110:         ));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119:         $this->expectValidateValue(0, 'foo', $constraints);",
          "125:     }",
          "127:     public function testConstraintsAreExecutedWithExpressionValues()",
          "",
          "[Removed Lines]",
          "121:         $this->validator->validate('foo', new When([",
          "122:             'expression' => 'value === \"foo\"',",
          "123:             'constraints' => $constraints,",
          "124:         ]));",
          "",
          "[Added Lines]",
          "121:         $this->validator->validate('foo', new When(",
          "122:             expression: 'value === \"foo\"',",
          "123:             constraints: $constraints,",
          "124:         ));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133:         $this->expectValidateValue(0, 'foo', $constraints);",
          "139:                 'activated' => true,",
          "140:                 'compared_value' => 'foo',",
          "141:             ],",
          "143:     }",
          "145:     public function testConstraintsNotExecuted()",
          "",
          "[Removed Lines]",
          "135:         $this->validator->validate('foo', new When([",
          "136:             'expression' => 'activated && value === compared_value',",
          "137:             'constraints' => $constraints,",
          "138:             'values' => [",
          "142:         ]));",
          "",
          "[Added Lines]",
          "135:         $this->validator->validate('foo', new When(",
          "136:             expression: 'activated && value === compared_value',",
          "137:             constraints: $constraints,",
          "138:             values: [",
          "142:         ));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "152:         $this->expectNoValidate();",
          "159:         $this->assertNoViolation();",
          "160:     }",
          "",
          "[Removed Lines]",
          "154:         $this->validator->validate('', new When([",
          "155:             'expression' => 'false',",
          "156:             'constraints' => $constraints,",
          "157:         ]));",
          "",
          "[Added Lines]",
          "154:         $this->validator->validate('', new When(",
          "155:             expression: 'false',",
          "156:             constraints: $constraints,",
          "157:         ));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "175:         $this->expectNoValidate();",
          "182:         $this->assertNoViolation();",
          "183:     }",
          "",
          "[Removed Lines]",
          "177:         $this->validator->validate($number->value, new When([",
          "178:             'expression' => 'this.type !== \"positive\"',",
          "179:             'constraints' => $constraints,",
          "180:         ]));",
          "",
          "[Added Lines]",
          "177:         $this->validator->validate($number->value, new When(",
          "178:             expression: 'this.type !== \"positive\"',",
          "179:             constraints: $constraints,",
          "180:         ));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "191:         $this->expectNoValidate();",
          "198:         $this->assertNoViolation();",
          "199:     }",
          "",
          "[Removed Lines]",
          "193:         $this->validator->validate('foo', new When([",
          "194:             'expression' => 'value === null',",
          "195:             'constraints' => $constraints,",
          "196:         ]));",
          "",
          "[Added Lines]",
          "193:         $this->validator->validate('foo', new When(",
          "194:             expression: 'value === null',",
          "195:             constraints: $constraints,",
          "196:         ));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "207:         $this->expectNoValidate();",
          "213:                 'activated' => true,",
          "214:                 'compared_value' => 'bar',",
          "215:             ],",
          "218:         $this->assertNoViolation();",
          "219:     }",
          "",
          "[Removed Lines]",
          "209:         $this->validator->validate('foo', new When([",
          "210:             'expression' => 'activated && value === compared_value',",
          "211:             'constraints' => $constraints,",
          "212:             'values' => [",
          "216:         ]));",
          "",
          "[Added Lines]",
          "209:         $this->validator->validate('foo', new When(",
          "210:             expression: 'activated && value === compared_value',",
          "211:             constraints: $constraints,",
          "212:             values: [",
          "216:         ));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "221:     public function testConstraintViolations()",
          "222:     {",
          "223:         $constraints = [",
          "227:         ];",
          "228:         $this->expectFailingValueValidation(",
          "229:             0,",
          "",
          "[Removed Lines]",
          "224:             new Blank([",
          "225:                 'message' => 'my_message',",
          "226:             ]),",
          "",
          "[Added Lines]",
          "224:             new Blank(message: 'my_message'),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php||src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php": [
          "File: src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php -> src/Symfony/Component/Validator/Tests/Fixtures/DummyCompoundConstraint.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     {",
          "23:         return [",
          "24:             new NotBlank(),",
          "26:             new Regex('/[a-z]+/'),",
          "27:             new Regex('/[0-9]+/'),",
          "28:         ];",
          "",
          "[Removed Lines]",
          "25:             new Length(['max' => 3]),",
          "",
          "[Added Lines]",
          "25:             new Length(max: 3),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php||src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php": [
          "File: src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php -> src/Symfony/Component/Validator/Tests/Fixtures/DummyEntityConstraintWithoutNamedArguments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\Validator\\Tests\\Fixtures;",
          "14: class DummyEntityConstraintWithoutNamedArguments",
          "15: {",
          "16: }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php||src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php": [
          "File: src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php -> src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCar.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: {",
          "19:     public static function loadValidatorMetadata(ClassMetadata $metadata)",
          "20:     {",
          "22:     }",
          "23: }",
          "",
          "[Removed Lines]",
          "21:         $metadata->addPropertyConstraint('wheels', new Length(['max' => 99]));",
          "",
          "[Added Lines]",
          "21:         $metadata->addPropertyConstraint('wheels', new Length(max: 99));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php||src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php": [
          "File: src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php -> src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticCarTurbo.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: {",
          "19:     public static function loadValidatorMetadata(ClassMetadata $metadata)",
          "20:     {",
          "22:     }",
          "23: }",
          "",
          "[Removed Lines]",
          "21:         $metadata->addPropertyConstraint('wheels', new Length(['max' => 99]));",
          "",
          "[Added Lines]",
          "21:         $metadata->addPropertyConstraint('wheels', new Length(max: 99));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php||src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php": [
          "File: src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php -> src/Symfony/Component/Validator/Tests/Fixtures/EntityStaticVehicle.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     public static function loadValidatorMetadata(ClassMetadata $metadata)",
          "22:     {",
          "24:     }",
          "25: }",
          "",
          "[Removed Lines]",
          "23:         $metadata->addPropertyConstraint('wheels', new Length(['max' => 99]));",
          "",
          "[Added Lines]",
          "23:         $metadata->addPropertyConstraint('wheels', new Length(max: 99));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php||src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php -> src/Symfony/Component/Validator/Tests/Mapping/Factory/LazyLoadingMetadataFactoryTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         $metadata = $factory->getMetadataFor(self::PARENT_CLASS);",
          "40:         $constraints = [",
          "43:         ];",
          "45:         $this->assertEquals($constraints, $metadata->getConstraints());",
          "",
          "[Removed Lines]",
          "41:             new ConstraintA(['groups' => ['Default', 'EntityParent']]),",
          "42:             new ConstraintA(['groups' => ['Default', 'EntityInterfaceA', 'EntityParent']]),",
          "",
          "[Added Lines]",
          "41:             new ConstraintA(groups: ['Default', 'EntityParent']),",
          "42:             new ConstraintA(groups: ['Default', 'EntityInterfaceA', 'EntityParent']),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         $metadata = $factory->getMetadataFor(self::CLASS_NAME);",
          "53:         $constraints = [",
          "55:                 'Default',",
          "56:                 'Entity',",
          "59:                 'Default',",
          "60:                 'EntityParent',",
          "61:                 'Entity',",
          "64:                 'Default',",
          "65:                 'EntityInterfaceA',",
          "66:                 'EntityParent',",
          "67:                 'Entity',",
          "70:                 'Default',",
          "71:                 'EntityInterfaceB',",
          "72:                 'Entity',",
          "75:                 'Default',",
          "76:                 'EntityParentInterface',",
          "77:                 'Entity',",
          "79:         ];",
          "81:         $this->assertEquals($constraints, $metadata->getConstraints());",
          "",
          "[Removed Lines]",
          "54:             new ConstraintA(['groups' => [",
          "57:             ]]),",
          "58:             new ConstraintA(['groups' => [",
          "62:             ]]),",
          "63:             new ConstraintA(['groups' => [",
          "68:             ]]),",
          "69:             new ConstraintA(['groups' => [",
          "73:             ]]),",
          "74:             new ConstraintA(['groups' => [",
          "78:             ]]),",
          "",
          "[Added Lines]",
          "54:             new ConstraintA(groups: [",
          "57:             ]),",
          "58:             new ConstraintA(groups: [",
          "62:             ]),",
          "63:             new ConstraintA(groups: [",
          "68:             ]),",
          "69:             new ConstraintA(groups: [",
          "73:             ]),",
          "74:             new ConstraintA(groups: [",
          "78:             ]),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         $factory = new LazyLoadingMetadataFactory(new TestLoader(), $cache);",
          "89:         $expectedConstraints = [",
          "92:         ];",
          "94:         $metadata = $factory->getMetadataFor(self::PARENT_CLASS);",
          "",
          "[Removed Lines]",
          "90:             new ConstraintA(['groups' => ['Default', 'EntityParent']]),",
          "91:             new ConstraintA(['groups' => ['Default', 'EntityInterfaceA', 'EntityParent']]),",
          "",
          "[Added Lines]",
          "90:             new ConstraintA(groups: ['Default', 'EntityParent']),",
          "91:             new ConstraintA(groups: ['Default', 'EntityInterfaceA', 'EntityParent']),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php -> src/Symfony/Component/Validator/Tests/Mapping/Loader/AttributeLoaderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         $expected->addConstraint(new Sequentially([",
          "67:             new Expression('this.getFirstName() != null'),",
          "68:         ]));",
          "70:         $expected->addConstraint(new Callback('validateMeStatic'));",
          "71:         $expected->addPropertyConstraint('firstName', new NotNull());",
          "78:             'baz' => new Required([new Email()]),",
          "79:             'qux' => new Optional([new NotBlank()]),",
          "85:         $expected->addPropertyConstraint('firstName', new AtLeastOneOf([",
          "86:             new NotNull(),",
          "88:         ], null, null, 'foo', null, false));",
          "89:         $expected->addPropertyConstraint('firstName', new Sequentially([",
          "90:             new NotBlank(),",
          "92:         ]));",
          "93:         $expected->addPropertyConstraint('childA', new Valid());",
          "94:         $expected->addPropertyConstraint('childB', new Valid());",
          "",
          "[Removed Lines]",
          "69:         $expected->addConstraint(new Callback(['callback' => 'validateMe', 'payload' => 'foo']));",
          "72:         $expected->addPropertyConstraint('firstName', new Range(['min' => 3]));",
          "73:         $expected->addPropertyConstraint('firstName', new All([new NotNull(), new Range(['min' => 3])]));",
          "74:         $expected->addPropertyConstraint('firstName', new All(['constraints' => [new NotNull(), new Range(['min' => 3])]]));",
          "75:         $expected->addPropertyConstraint('firstName', new Collection([",
          "76:             'foo' => [new NotNull(), new Range(['min' => 3])],",
          "77:             'bar' => new Range(['min' => 5]),",
          "80:         ], null, null, true));",
          "81:         $expected->addPropertyConstraint('firstName', new Choice([",
          "82:             'message' => 'Must be one of %choices%',",
          "83:             'choices' => ['A', 'B'],",
          "84:         ]));",
          "87:             new Range(['min' => 3]),",
          "91:             new Range(['min' => 5]),",
          "",
          "[Added Lines]",
          "69:         $expected->addConstraint(new Callback(callback: 'validateMe', payload: 'foo'));",
          "72:         $expected->addPropertyConstraint('firstName', new Range(min: 3));",
          "73:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "74:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "75:         $expected->addPropertyConstraint('firstName', new Collection(fields: [",
          "76:             'foo' => [new NotNull(), new Range(min: 3)],",
          "77:             'bar' => new Range(min: 5),",
          "80:         ], allowExtraFields: true));",
          "81:         $expected->addPropertyConstraint('firstName', new Choice(",
          "82:             message: 'Must be one of %choices%',",
          "83:             choices: ['A', 'B'],",
          "84:         ));",
          "87:             new Range(min: 3),",
          "91:             new Range(min: 5),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:         $expected->addConstraint(new Sequentially([",
          "153:             new Expression('this.getFirstName() != null'),",
          "154:         ]));",
          "156:         $expected->addConstraint(new Callback('validateMeStatic'));",
          "157:         $expected->addPropertyConstraint('firstName', new NotNull());",
          "164:             'baz' => new Required([new Email()]),",
          "165:             'qux' => new Optional([new NotBlank()]),",
          "171:         $expected->addPropertyConstraint('firstName', new AtLeastOneOf([",
          "172:             new NotNull(),",
          "174:         ], null, null, 'foo', null, false));",
          "175:         $expected->addPropertyConstraint('firstName', new Sequentially([",
          "176:             new NotBlank(),",
          "178:         ]));",
          "179:         $expected->addPropertyConstraint('childA', new Valid());",
          "180:         $expected->addPropertyConstraint('childB', new Valid());",
          "",
          "[Removed Lines]",
          "155:         $expected->addConstraint(new Callback(['callback' => 'validateMe', 'payload' => 'foo']));",
          "158:         $expected->addPropertyConstraint('firstName', new Range(['min' => 3]));",
          "159:         $expected->addPropertyConstraint('firstName', new All([new NotNull(), new Range(['min' => 3])]));",
          "160:         $expected->addPropertyConstraint('firstName', new All(['constraints' => [new NotNull(), new Range(['min' => 3])]]));",
          "161:         $expected->addPropertyConstraint('firstName', new Collection([",
          "162:             'foo' => [new NotNull(), new Range(['min' => 3])],",
          "163:             'bar' => new Range(['min' => 5]),",
          "166:         ], null, null, true));",
          "167:         $expected->addPropertyConstraint('firstName', new Choice([",
          "168:             'message' => 'Must be one of %choices%',",
          "169:             'choices' => ['A', 'B'],",
          "170:         ]));",
          "173:             new Range(['min' => 3]),",
          "177:             new Range(['min' => 5]),",
          "",
          "[Added Lines]",
          "155:         $expected->addConstraint(new Callback(callback: 'validateMe', payload: 'foo'));",
          "158:         $expected->addPropertyConstraint('firstName', new Range(min: 3));",
          "159:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "160:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "161:         $expected->addPropertyConstraint('firstName', new Collection(fields: [",
          "162:             'foo' => [new NotNull(), new Range(min: 3)],",
          "163:             'bar' => new Range(min: 5),",
          "166:         ], allowExtraFields: true));",
          "167:         $expected->addPropertyConstraint('firstName', new Choice(",
          "168:             message: 'Must be one of %choices%',",
          "169:             choices: ['A', 'B'],",
          "170:         ));",
          "173:             new Range(min: 3),",
          "177:             new Range(min: 5),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php": [
          "File: src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php -> src/Symfony/Component/Validator/Tests/Mapping/Loader/Fixtures/ConstraintWithoutNamedArguments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\Validator\\Tests\\Mapping\\Loader\\Fixtures;",
          "14: use Symfony\\Component\\Validator\\Constraint;",
          "16: class ConstraintWithoutNamedArguments extends Constraint",
          "17: {",
          "18:     public function getTargets(): string",
          "19:     {",
          "20:         return self::CLASS_CONSTRAINT;",
          "21:     }",
          "22: }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php -> src/Symfony/Component/Validator/Tests/Mapping/Loader/XmlFileLoaderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Tests\\Mapping\\Loader;",
          "14: use PHPUnit\\Framework\\TestCase;",
          "15: use Symfony\\Component\\Validator\\Constraints\\All;",
          "16: use Symfony\\Component\\Validator\\Constraints\\Callback;",
          "17: use Symfony\\Component\\Validator\\Constraints\\Choice;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Bridge\\PhpUnit\\ExpectUserDeprecationMessageTrait;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: use Symfony\\Component\\Validator\\Tests\\Fixtures\\ConstraintA;",
          "30: use Symfony\\Component\\Validator\\Tests\\Fixtures\\ConstraintB;",
          "31: use Symfony\\Component\\Validator\\Tests\\Fixtures\\ConstraintWithRequiredArgument;",
          "32: use Symfony\\Component\\Validator\\Tests\\Fixtures\\Entity_81;",
          "33: use Symfony\\Component\\Validator\\Tests\\Fixtures\\NestedAttribute\\Entity;",
          "34: use Symfony\\Component\\Validator\\Tests\\Fixtures\\NestedAttribute\\GroupSequenceProviderEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: use Symfony\\Component\\Validator\\Tests\\Fixtures\\DummyEntityConstraintWithoutNamedArguments;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: class XmlFileLoaderTest extends TestCase",
          "39: {",
          "40:     public function testLoadClassMetadataReturnsTrueIfSuccessful()",
          "41:     {",
          "42:         $loader = new XmlFileLoader(__DIR__.'/constraint-mapping.xml');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     use ExpectUserDeprecationMessageTrait;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:         $expected->addConstraint(new ConstraintWithNamedArguments(['foo', 'bar']));",
          "73:         $expected->addConstraint(new ConstraintWithoutValueWithNamedArguments(['foo']));",
          "74:         $expected->addPropertyConstraint('firstName', new NotNull());",
          "76:         $expected->addPropertyConstraint('firstName', new Choice(['A', 'B']));",
          "86:         ]));",
          "87:         $expected->addGetterConstraint('lastName', new NotNull());",
          "88:         $expected->addGetterConstraint('valid', new IsTrue());",
          "89:         $expected->addGetterConstraint('permissions', new IsTrue());",
          "",
          "[Removed Lines]",
          "75:         $expected->addPropertyConstraint('firstName', new Range(['min' => 3]));",
          "77:         $expected->addPropertyConstraint('firstName', new All([new NotNull(), new Range(['min' => 3])]));",
          "78:         $expected->addPropertyConstraint('firstName', new All(['constraints' => [new NotNull(), new Range(['min' => 3])]]));",
          "79:         $expected->addPropertyConstraint('firstName', new Collection(['fields' => [",
          "80:             'foo' => [new NotNull(), new Range(['min' => 3])],",
          "81:             'bar' => [new Range(['min' => 5])],",
          "82:         ]]));",
          "83:         $expected->addPropertyConstraint('firstName', new Choice([",
          "84:             'message' => 'Must be one of %choices%',",
          "85:             'choices' => ['A', 'B'],",
          "",
          "[Added Lines]",
          "79:         $expected->addPropertyConstraint('firstName', new Range(min: 3));",
          "81:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "82:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "83:         $expected->addPropertyConstraint('firstName', new Collection(fields: [",
          "84:             'foo' => [new NotNull(), new Range(min: 3)],",
          "85:             'bar' => [new Range(min: 5)],",
          "87:         $expected->addPropertyConstraint('firstName', new Choice(",
          "88:             message: 'Must be one of %choices%',",
          "89:             choices: ['A', 'B'],",
          "90:         ));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:         $loader->loadClassMetadata($metadata);",
          "101:         $expected = new ClassMetadata(Entity::class);",
          "104:         $properties = $metadata->getPropertyMetadata('firstName');",
          "105:         $constraints = $properties[0]->getConstraints();",
          "",
          "[Removed Lines]",
          "102:         $expected->addPropertyConstraint('firstName', new Regex(['pattern' => '/^1/', 'match' => false]));",
          "",
          "[Added Lines]",
          "106:         $expected->addPropertyConstraint('firstName', new Regex(pattern: '/^1/', match: false));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:             $loader->loadClassMetadata($metadata);",
          "172:         }",
          "173:     }",
          "174: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     public function testLoadConstraintWithoutNamedArgumentsSupport()",
          "183:     {",
          "184:         $loader = new XmlFileLoader(__DIR__.'/constraint-without-named-arguments-support.xml');",
          "185:         $metadata = new ClassMetadata(DummyEntityConstraintWithoutNamedArguments::class);",
          "187:         $this->expectUserDeprecationMessage('Since symfony/validator 7.2: Using constraints not supporting named arguments is deprecated. Try adding the HasNamedArguments attribute to Symfony\\Component\\Validator\\Tests\\Mapping\\Loader\\Fixtures\\ConstraintWithoutNamedArguments.');",
          "189:         $loader->loadClassMetadata($metadata);",
          "190:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php||src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php -> src/Symfony/Component/Validator/Tests/Mapping/Loader/YamlFileLoaderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Validator\\Tests\\Mapping\\Loader;",
          "14: use PHPUnit\\Framework\\TestCase;",
          "15: use Symfony\\Component\\Validator\\Constraints\\All;",
          "16: use Symfony\\Component\\Validator\\Constraints\\Callback;",
          "17: use Symfony\\Component\\Validator\\Constraints\\Choice;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Bridge\\PhpUnit\\ExpectUserDeprecationMessageTrait;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: use Symfony\\Component\\Validator\\Tests\\Fixtures\\ConstraintA;",
          "27: use Symfony\\Component\\Validator\\Tests\\Fixtures\\ConstraintB;",
          "28: use Symfony\\Component\\Validator\\Tests\\Fixtures\\ConstraintWithRequiredArgument;",
          "29: use Symfony\\Component\\Validator\\Tests\\Fixtures\\Entity_81;",
          "30: use Symfony\\Component\\Validator\\Tests\\Fixtures\\NestedAttribute\\Entity;",
          "31: use Symfony\\Component\\Validator\\Tests\\Fixtures\\NestedAttribute\\GroupSequenceProviderEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use Symfony\\Component\\Validator\\Tests\\Fixtures\\DummyEntityConstraintWithoutNamedArguments;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: class YamlFileLoaderTest extends TestCase",
          "36: {",
          "37:     public function testLoadClassMetadataReturnsFalseIfEmpty()",
          "38:     {",
          "39:         $loader = new YamlFileLoader(__DIR__.'/empty-mapping.yml');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     use ExpectUserDeprecationMessageTrait;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         $expected->addConstraint(new ConstraintWithNamedArguments('foo'));",
          "117:         $expected->addConstraint(new ConstraintWithNamedArguments(['foo', 'bar']));",
          "118:         $expected->addPropertyConstraint('firstName', new NotNull());",
          "120:         $expected->addPropertyConstraint('firstName', new Choice(['A', 'B']));",
          "130:         ]));",
          "131:         $expected->addGetterConstraint('lastName', new NotNull());",
          "132:         $expected->addGetterConstraint('valid', new IsTrue());",
          "133:         $expected->addGetterConstraint('permissions', new IsTrue());",
          "",
          "[Removed Lines]",
          "119:         $expected->addPropertyConstraint('firstName', new Range(['min' => 3]));",
          "121:         $expected->addPropertyConstraint('firstName', new All([new NotNull(), new Range(['min' => 3])]));",
          "122:         $expected->addPropertyConstraint('firstName', new All(['constraints' => [new NotNull(), new Range(['min' => 3])]]));",
          "123:         $expected->addPropertyConstraint('firstName', new Collection(['fields' => [",
          "124:             'foo' => [new NotNull(), new Range(['min' => 3])],",
          "125:             'bar' => [new Range(['min' => 5])],",
          "126:         ]]));",
          "127:         $expected->addPropertyConstraint('firstName', new Choice([",
          "128:             'message' => 'Must be one of %choices%',",
          "129:             'choices' => ['A', 'B'],",
          "",
          "[Added Lines]",
          "123:         $expected->addPropertyConstraint('firstName', new Range(min: 3));",
          "125:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "126:         $expected->addPropertyConstraint('firstName', new All(constraints: [new NotNull(), new Range(min: 3)]));",
          "127:         $expected->addPropertyConstraint('firstName', new Collection(fields: [",
          "128:             'foo' => [new NotNull(), new Range(min: 3)],",
          "129:             'bar' => [new Range(min: 5)],",
          "131:         $expected->addPropertyConstraint('firstName', new Choice(",
          "132:             message: 'Must be one of %choices%',",
          "133:             choices: ['A', 'B'],",
          "134:         ));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:         $loader->loadClassMetadata($metadata);",
          "145:         $expected = new ClassMetadata(Entity::class);",
          "148:         $this->assertEquals($expected, $metadata);",
          "149:     }",
          "",
          "[Removed Lines]",
          "146:         $expected->addPropertyConstraint('firstName', new Range(['max' => \\PHP_INT_MAX]));",
          "",
          "[Added Lines]",
          "150:         $expected->addPropertyConstraint('firstName', new Range(max: \\PHP_INT_MAX));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:         $this->assertEquals($expected, $metadata);",
          "189:     }",
          "190: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     public function testLoadConstraintWithoutNamedArgumentsSupport()",
          "199:     {",
          "200:         $loader = new YamlFileLoader(__DIR__.'/constraint-without-named-arguments-support.yml');",
          "201:         $metadata = new ClassMetadata(DummyEntityConstraintWithoutNamedArguments::class);",
          "203:         $this->expectUserDeprecationMessage('Since symfony/validator 7.2: Using constraints not supporting named arguments is deprecated. Try adding the HasNamedArguments attribute to Symfony\\Component\\Validator\\Tests\\Mapping\\Loader\\Fixtures\\ConstraintWithoutNamedArguments.');",
          "205:         $loader->loadClassMetadata($metadata);",
          "206:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php||src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php -> src/Symfony/Component/Validator/Tests/Mapping/MemberMetadataTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     public function testSerializeCollectionCascaded()",
          "86:     {",
          "89:         $metadata = unserialize(serialize($this->metadata));",
          "",
          "[Removed Lines]",
          "87:         $this->metadata->addConstraint(new Valid(['traverse' => true]));",
          "",
          "[Added Lines]",
          "87:         $this->metadata->addConstraint(new Valid(traverse: true));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     public function testSerializeCollectionNotCascaded()",
          "95:     {",
          "98:         $metadata = unserialize(serialize($this->metadata));",
          "",
          "[Removed Lines]",
          "96:         $this->metadata->addConstraint(new Valid(['traverse' => false]));",
          "",
          "[Added Lines]",
          "96:         $this->metadata->addConstraint(new Valid(traverse: false));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php||src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php -> src/Symfony/Component/Validator/Tests/Validator/RecursiveValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "114:         };",
          "121:         $violations = $this->validate('Bernhard', $constraint, 'Group');",
          "",
          "[Removed Lines]",
          "116:         $constraint = new Callback([",
          "117:             'callback' => $callback,",
          "118:             'groups' => 'Group',",
          "119:         ]);",
          "",
          "[Added Lines]",
          "116:         $constraint = new Callback(",
          "117:             callback: $callback,",
          "118:             groups: ['Group'],",
          "119:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "150:         };",
          "157:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "152:         $this->metadata->addConstraint(new Callback([",
          "153:             'callback' => $callback,",
          "154:             'groups' => 'Group',",
          "155:         ]));",
          "",
          "[Added Lines]",
          "152:         $this->metadata->addConstraint(new Callback(",
          "153:             callback: $callback,",
          "154:             groups: ['Group'],",
          "155:         ));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "189:         };",
          "196:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "191:         $this->metadata->addPropertyConstraint('firstName', new Callback([",
          "192:             'callback' => $callback,",
          "193:             'groups' => 'Group',",
          "194:         ]));",
          "",
          "[Added Lines]",
          "191:         $this->metadata->addPropertyConstraint('firstName', new Callback(",
          "192:             callback: $callback,",
          "193:             groups: ['Group'],",
          "194:         ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "228:         };",
          "235:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "230:         $this->metadata->addGetterConstraint('lastName', new Callback([",
          "231:             'callback' => $callback,",
          "232:             'groups' => 'Group',",
          "233:         ]));",
          "",
          "[Added Lines]",
          "230:         $this->metadata->addGetterConstraint('lastName', new Callback(",
          "231:             callback: $callback,",
          "232:             groups: ['Group'],",
          "233:         ));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "264:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "265:         };",
          "272:         $violations = $this->validate($array, null, 'Group');",
          "",
          "[Removed Lines]",
          "267:         $this->metadata->addConstraint(new Callback([",
          "268:             'callback' => $callback,",
          "269:             'groups' => 'Group',",
          "270:         ]));",
          "",
          "[Added Lines]",
          "267:         $this->metadata->addConstraint(new Callback(",
          "268:             callback: $callback,",
          "269:             groups: ['Group'],",
          "270:         ));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "302:         };",
          "309:         $violations = $this->validate($array, null, 'Group');",
          "",
          "[Removed Lines]",
          "304:         $this->metadata->addConstraint(new Callback([",
          "305:             'callback' => $callback,",
          "306:             'groups' => 'Group',",
          "307:         ]));",
          "",
          "[Added Lines]",
          "304:         $this->metadata->addConstraint(new Callback(",
          "305:             callback: $callback,",
          "306:             groups: ['Group'],",
          "307:         ));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "338:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "339:         };",
          "346:         $violations = $this->validate($traversable, null, 'Group');",
          "",
          "[Removed Lines]",
          "341:         $this->metadata->addConstraint(new Callback([",
          "342:             'callback' => $callback,",
          "343:             'groups' => 'Group',",
          "344:         ]));",
          "",
          "[Added Lines]",
          "341:         $this->metadata->addConstraint(new Callback(",
          "342:             callback: $callback,",
          "343:             groups: ['Group'],",
          "344:         ));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "377:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "378:         };",
          "385:         $violations = $this->validate($traversable, null, 'Group');",
          "",
          "[Removed Lines]",
          "380:         $this->metadata->addConstraint(new Callback([",
          "381:             'callback' => $callback,",
          "382:             'groups' => 'Group',",
          "383:         ]));",
          "",
          "[Added Lines]",
          "380:         $this->metadata->addConstraint(new Callback(",
          "381:             callback: $callback,",
          "382:             groups: ['Group'],",
          "383:         ));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "415:         };",
          "417:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "423:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "418:         $this->referenceMetadata->addConstraint(new Callback([",
          "419:             'callback' => $callback,",
          "420:             'groups' => 'Group',",
          "421:         ]));",
          "",
          "[Added Lines]",
          "418:         $this->referenceMetadata->addConstraint(new Callback(",
          "419:             callback: $callback,",
          "420:             groups: ['Group'],",
          "421:         ));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "456:         };",
          "458:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "464:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "459:         $this->referenceMetadata->addPropertyConstraint('value', new Callback([",
          "460:             'callback' => $callback,",
          "461:             'groups' => 'Group',",
          "462:         ]));",
          "",
          "[Added Lines]",
          "459:         $this->referenceMetadata->addPropertyConstraint('value', new Callback(",
          "460:             callback: $callback,",
          "461:             groups: ['Group'],",
          "462:         ));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "497:         };",
          "499:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "505:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "500:         $this->referenceMetadata->addPropertyConstraint('privateValue', new Callback([",
          "501:             'callback' => $callback,",
          "502:             'groups' => 'Group',",
          "503:         ]));",
          "",
          "[Added Lines]",
          "500:         $this->referenceMetadata->addPropertyConstraint('privateValue', new Callback(",
          "501:             callback: $callback,",
          "502:             groups: ['Group'],",
          "503:         ));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "563:         };",
          "565:         $this->metadata->$constraintMethod('reference', new Valid());",
          "571:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "566:         $this->referenceMetadata->addConstraint(new Callback([",
          "567:             'callback' => $callback,",
          "568:             'groups' => 'Group',",
          "569:         ]));",
          "",
          "[Added Lines]",
          "566:         $this->referenceMetadata->addConstraint(new Callback(",
          "567:             callback: $callback,",
          "568:             groups: ['Group'],",
          "569:         ));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "604:         };",
          "606:         $this->metadata->$constraintMethod('reference', new Valid());",
          "612:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "607:         $this->referenceMetadata->addConstraint(new Callback([",
          "608:             'callback' => $callback,",
          "609:             'groups' => 'Group',",
          "610:         ]));",
          "",
          "[Added Lines]",
          "607:         $this->referenceMetadata->addConstraint(new Callback(",
          "608:             callback: $callback,",
          "609:             groups: ['Group'],",
          "610:         ));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "632:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "633:         };",
          "644:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "635:         $this->metadata->addPropertyConstraint('reference', new Callback([",
          "636:             'callback' => function () {},",
          "637:             'groups' => 'Group',",
          "638:         ]));",
          "639:         $this->referenceMetadata->addConstraint(new Callback([",
          "640:             'callback' => $callback,",
          "641:             'groups' => 'Group',",
          "642:         ]));",
          "",
          "[Added Lines]",
          "635:         $this->metadata->addPropertyConstraint('reference', new Callback(",
          "636:             callback: function () {},",
          "637:             groups: ['Group'],",
          "638:         ));",
          "639:         $this->referenceMetadata->addConstraint(new Callback(",
          "640:             callback: $callback,",
          "641:             groups: ['Group'],",
          "642:         ));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "659:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "660:         };",
          "665:         $this->referenceMetadata->addConstraint(new Callback($callback));",
          "667:         $violations = $this->validate($entity);",
          "",
          "[Removed Lines]",
          "662:         $this->metadata->$constraintMethod('reference', new Valid([",
          "663:             'traverse' => false,",
          "664:         ]));",
          "",
          "[Added Lines]",
          "662:         $this->metadata->$constraintMethod('reference', new Valid(",
          "663:             traverse: false,",
          "664:         ));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "682:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "683:         };",
          "689:         $this->referenceMetadata->addConstraint(new Callback($callback));",
          "",
          "[Removed Lines]",
          "685:         $this->metadata->$constraintMethod('reference', new Valid([",
          "686:             'traverse' => false,",
          "687:         ]));",
          "",
          "[Added Lines]",
          "685:         $this->metadata->$constraintMethod('reference', new Valid(",
          "686:             traverse: false,",
          "687:         ));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "745:         };",
          "747:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "753:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "748:         $this->referenceMetadata->addConstraint(new Callback([",
          "749:             'callback' => $callback,",
          "750:             'groups' => 'Group',",
          "751:         ]));",
          "",
          "[Added Lines]",
          "748:         $this->referenceMetadata->addConstraint(new Callback(",
          "749:             callback: $callback,",
          "750:             groups: ['Group'],",
          "751:         ));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "774:         };",
          "776:         $this->metadataFactory->addMetadata(new ClassMetadata('ArrayIterator'));",
          "780:         $this->referenceMetadata->addConstraint(new Callback($callback));",
          "782:         $violations = $this->validate($entity);",
          "",
          "[Removed Lines]",
          "777:         $this->metadata->addPropertyConstraint('reference', new Valid([",
          "778:             'traverse' => false,",
          "779:         ]));",
          "",
          "[Added Lines]",
          "777:         $this->metadata->addPropertyConstraint('reference', new Valid(",
          "778:             traverse: false,",
          "779:         ));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "790:         $entity = new Entity();",
          "791:         $entity->reference = new \\ArrayIterator();",
          "797:         $this->expectException(NoSuchMetadataException::class);",
          "",
          "[Removed Lines]",
          "793:         $this->metadata->addPropertyConstraint('reference', new Valid([",
          "794:             'traverse' => false,",
          "795:         ]));",
          "",
          "[Added Lines]",
          "793:         $this->metadata->addPropertyConstraint('reference', new Valid(",
          "794:             traverse: false,",
          "795:         ));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "819:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "820:         };",
          "830:         $violations = $this->validate($entity, null, 'Group');",
          "",
          "[Removed Lines]",
          "822:         $this->metadata->addPropertyConstraint('reference', new Valid([",
          "823:             'traverse' => true,",
          "824:         ]));",
          "825:         $this->referenceMetadata->addConstraint(new Callback([",
          "826:             'callback' => $callback,",
          "827:             'groups' => 'Group',",
          "828:         ]));",
          "",
          "[Added Lines]",
          "822:         $this->metadata->addPropertyConstraint('reference', new Valid(",
          "823:             traverse: true,",
          "824:         ));",
          "825:         $this->referenceMetadata->addConstraint(new Callback(",
          "826:             callback: $callback,",
          "827:             groups: ['Group'],",
          "828:         ));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "866:             $context->addViolation('Other violation');",
          "867:         };",
          "878:         $violations = $this->validateProperty($entity, 'firstName', 'Group');",
          "",
          "[Removed Lines]",
          "869:         $this->metadata->addPropertyConstraint('firstName', new Callback([",
          "870:             'callback' => $callback1,",
          "871:             'groups' => 'Group',",
          "872:         ]));",
          "873:         $this->metadata->addPropertyConstraint('lastName', new Callback([",
          "874:             'callback' => $callback2,",
          "875:             'groups' => 'Group',",
          "876:         ]));",
          "",
          "[Added Lines]",
          "869:         $this->metadata->addPropertyConstraint('firstName', new Callback(",
          "870:             callback: $callback1,",
          "871:             groups: ['Group'],",
          "872:         ));",
          "873:         $this->metadata->addPropertyConstraint('lastName', new Callback(",
          "874:             callback: $callback2,",
          "875:             groups: ['Group'],",
          "876:         ));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "924:             $context->addViolation('Other violation');",
          "925:         };",
          "936:         $violations = $this->validatePropertyValue(",
          "937:             $entity,",
          "",
          "[Removed Lines]",
          "927:         $this->metadata->addPropertyConstraint('firstName', new Callback([",
          "928:             'callback' => $callback1,",
          "929:             'groups' => 'Group',",
          "930:         ]));",
          "931:         $this->metadata->addPropertyConstraint('lastName', new Callback([",
          "932:             'callback' => $callback2,",
          "933:             'groups' => 'Group',",
          "934:         ]));",
          "",
          "[Added Lines]",
          "927:         $this->metadata->addPropertyConstraint('firstName', new Callback(",
          "928:             callback: $callback1,",
          "929:             groups: ['Group'],",
          "930:         ));",
          "931:         $this->metadata->addPropertyConstraint('lastName', new Callback(",
          "932:             callback: $callback2,",
          "933:             groups: ['Group'],",
          "934:         ));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "973:             $context->addViolation('Other violation');",
          "974:         };",
          "985:         $violations = $this->validatePropertyValue(",
          "986:             self::ENTITY_CLASS,",
          "",
          "[Removed Lines]",
          "976:         $this->metadata->addPropertyConstraint('firstName', new Callback([",
          "977:             'callback' => $callback1,",
          "978:             'groups' => 'Group',",
          "979:         ]));",
          "980:         $this->metadata->addPropertyConstraint('lastName', new Callback([",
          "981:             'callback' => $callback2,",
          "982:             'groups' => 'Group',",
          "983:         ]));",
          "",
          "[Added Lines]",
          "976:         $this->metadata->addPropertyConstraint('firstName', new Callback(",
          "977:             callback: $callback1,",
          "978:             groups: ['Group'],",
          "979:         ));",
          "980:         $this->metadata->addPropertyConstraint('lastName', new Callback(",
          "981:             callback: $callback2,",
          "982:             groups: ['Group'],",
          "983:         ));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1060:             $context->addViolation('Message');",
          "1061:         };",
          "1072:         $violations = $this->validate($entity, null, 'Group 2');",
          "",
          "[Removed Lines]",
          "1063:         $this->metadata->addConstraint(new Callback([",
          "1064:             'callback' => $callback,",
          "1065:             'groups' => 'Group 1',",
          "1066:         ]));",
          "1067:         $this->metadata->addConstraint(new Callback([",
          "1068:             'callback' => $callback,",
          "1069:             'groups' => 'Group 2',",
          "1070:         ]));",
          "",
          "[Added Lines]",
          "1063:         $this->metadata->addConstraint(new Callback(",
          "1064:             callback: $callback,",
          "1065:             groups: ['Group 1'],",
          "1066:         ));",
          "1067:         $this->metadata->addConstraint(new Callback(",
          "1068:             callback: $callback,",
          "1069:             groups: ['Group 2'],",
          "1070:         ));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1083:             $context->addViolation('Message');",
          "1084:         };",
          "1095:         $violations = $this->validate($entity, null, ['Group 1', 'Group 2']);",
          "",
          "[Removed Lines]",
          "1086:         $this->metadata->addConstraint(new Callback([",
          "1087:             'callback' => $callback,",
          "1088:             'groups' => 'Group 1',",
          "1089:         ]));",
          "1090:         $this->metadata->addConstraint(new Callback([",
          "1091:             'callback' => $callback,",
          "1092:             'groups' => 'Group 2',",
          "1093:         ]));",
          "",
          "[Added Lines]",
          "1086:         $this->metadata->addConstraint(new Callback(",
          "1087:             callback: $callback,",
          "1088:             groups: ['Group 1'],",
          "1089:         ));",
          "1090:         $this->metadata->addConstraint(new Callback(",
          "1091:             callback: $callback,",
          "1092:             groups: ['Group 2'],",
          "1093:         ));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1109:             $context->addViolation('Violation in Group 3');",
          "1110:         };",
          "1125:         $sequence = new GroupSequence(['Group 1', 'Group 2', 'Group 3', 'Entity']);",
          "1126:         $this->metadata->setGroupSequence($sequence);",
          "",
          "[Removed Lines]",
          "1112:         $this->metadata->addConstraint(new Callback([",
          "1113:             'callback' => function () {},",
          "1114:             'groups' => 'Group 1',",
          "1115:         ]));",
          "1116:         $this->metadata->addConstraint(new Callback([",
          "1117:             'callback' => $callback1,",
          "1118:             'groups' => 'Group 2',",
          "1119:         ]));",
          "1120:         $this->metadata->addConstraint(new Callback([",
          "1121:             'callback' => $callback2,",
          "1122:             'groups' => 'Group 3',",
          "1123:         ]));",
          "",
          "[Added Lines]",
          "1112:         $this->metadata->addConstraint(new Callback(",
          "1113:             callback: function () {},",
          "1114:             groups: ['Group 1'],",
          "1115:         ));",
          "1116:         $this->metadata->addConstraint(new Callback(",
          "1117:             callback: $callback1,",
          "1118:             groups: ['Group 2'],",
          "1119:         ));",
          "1120:         $this->metadata->addConstraint(new Callback(",
          "1121:             callback: $callback2,",
          "1122:             groups: ['Group 3'],",
          "1123:         ));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1143:             $context->addViolation('Violation in Group 3');",
          "1144:         };",
          "1159:         $sequence = ['Group 1', 'Group 2', 'Group 3', 'Entity'];",
          "1160:         $this->metadata->setGroupSequence($sequence);",
          "",
          "[Removed Lines]",
          "1146:         $this->metadata->addConstraint(new Callback([",
          "1147:             'callback' => function () {},",
          "1148:             'groups' => 'Group 1',",
          "1149:         ]));",
          "1150:         $this->metadata->addConstraint(new Callback([",
          "1151:             'callback' => $callback1,",
          "1152:             'groups' => 'Group 2',",
          "1153:         ]));",
          "1154:         $this->metadata->addConstraint(new Callback([",
          "1155:             'callback' => $callback2,",
          "1156:             'groups' => 'Group 3',",
          "1157:         ]));",
          "",
          "[Added Lines]",
          "1146:         $this->metadata->addConstraint(new Callback(",
          "1147:             callback: function () {},",
          "1148:             groups: ['Group 1'],",
          "1149:         ));",
          "1150:         $this->metadata->addConstraint(new Callback(",
          "1151:             callback: $callback1,",
          "1152:             groups: ['Group 2'],",
          "1153:         ));",
          "1154:         $this->metadata->addConstraint(new Callback(",
          "1155:             callback: $callback2,",
          "1156:             groups: ['Group 3'],",
          "1157:         ));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1179:         };",
          "1181:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "1191:         $sequence = new GroupSequence(['Group 1', 'Entity']);",
          "1192:         $this->metadata->setGroupSequence($sequence);",
          "",
          "[Removed Lines]",
          "1182:         $this->referenceMetadata->addConstraint(new Callback([",
          "1183:             'callback' => $callback1,",
          "1184:             'groups' => 'Default',",
          "1185:         ]));",
          "1186:         $this->referenceMetadata->addConstraint(new Callback([",
          "1187:             'callback' => $callback2,",
          "1188:             'groups' => 'Group 1',",
          "1189:         ]));",
          "",
          "[Added Lines]",
          "1182:         $this->referenceMetadata->addConstraint(new Callback(",
          "1183:             callback: $callback1,",
          "1184:             groups: ['Default'],",
          "1185:         ));",
          "1186:         $this->referenceMetadata->addConstraint(new Callback(",
          "1187:             callback: $callback2,",
          "1188:             groups: ['Group 1'],",
          "1189:         ));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1209:             $context->addViolation('Violation in group sequence');",
          "1210:         };",
          "1221:         $sequence = new GroupSequence(['Group 1', 'Entity']);",
          "1222:         $this->metadata->setGroupSequence($sequence);",
          "",
          "[Removed Lines]",
          "1212:         $this->metadata->addConstraint(new Callback([",
          "1213:             'callback' => $callback1,",
          "1214:             'groups' => 'Other Group',",
          "1215:         ]));",
          "1216:         $this->metadata->addConstraint(new Callback([",
          "1217:             'callback' => $callback2,",
          "1218:             'groups' => 'Group 1',",
          "1219:         ]));",
          "",
          "[Added Lines]",
          "1212:         $this->metadata->addConstraint(new Callback(",
          "1213:             callback: $callback1,",
          "1214:             groups: ['Other Group'],",
          "1215:         ));",
          "1216:         $this->metadata->addConstraint(new Callback(",
          "1217:             callback: $callback2,",
          "1218:             groups: ['Group 1'],",
          "1219:         ));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1243:         };",
          "1245:         $metadata = new ClassMetadata($entity::class);",
          "1258:         $metadata->setGroupSequenceProvider(true);",
          "1260:         $this->metadataFactory->addMetadata($metadata);",
          "",
          "[Removed Lines]",
          "1246:         $metadata->addConstraint(new Callback([",
          "1247:             'callback' => function () {},",
          "1248:             'groups' => 'Group 1',",
          "1249:         ]));",
          "1250:         $metadata->addConstraint(new Callback([",
          "1251:             'callback' => $callback1,",
          "1252:             'groups' => 'Group 2',",
          "1253:         ]));",
          "1254:         $metadata->addConstraint(new Callback([",
          "1255:             'callback' => $callback2,",
          "1256:             'groups' => 'Group 3',",
          "1257:         ]));",
          "",
          "[Added Lines]",
          "1246:         $metadata->addConstraint(new Callback(",
          "1247:             callback: function () {},",
          "1248:             groups: ['Group 1'],",
          "1249:         ));",
          "1250:         $metadata->addConstraint(new Callback(",
          "1251:             callback: $callback1,",
          "1252:             groups: ['Group 2'],",
          "1253:         ));",
          "1254:         $metadata->addConstraint(new Callback(",
          "1255:             callback: $callback2,",
          "1256:             groups: ['Group 3'],",
          "1257:         ));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1348:             $context->addViolation('Message 2');",
          "1349:         };",
          "1364:         $sequence = new GroupSequence(['Group 1', 'Group 2', 'Group 3']);",
          "1365:         $violations = $this->validator->validate($entity, new Valid(), $sequence);",
          "",
          "[Removed Lines]",
          "1351:         $this->metadata->addConstraint(new Callback([",
          "1352:             'callback' => function () {},",
          "1353:             'groups' => 'Group 1',",
          "1354:         ]));",
          "1355:         $this->metadata->addConstraint(new Callback([",
          "1356:             'callback' => $callback1,",
          "1357:             'groups' => 'Group 2',",
          "1358:         ]));",
          "1359:         $this->metadata->addConstraint(new Callback([",
          "1360:             'callback' => $callback2,",
          "1361:             'groups' => 'Group 3',",
          "1362:         ]));",
          "",
          "[Added Lines]",
          "1351:         $this->metadata->addConstraint(new Callback(",
          "1352:             callback: function () {},",
          "1353:             groups: ['Group 1'],",
          "1354:         ));",
          "1355:         $this->metadata->addConstraint(new Callback(",
          "1356:             callback: $callback1,",
          "1357:             groups: ['Group 2'],",
          "1358:         ));",
          "1359:         $this->metadata->addConstraint(new Callback(",
          "1360:             callback: $callback2,",
          "1361:             groups: ['Group 3'],",
          "1362:         ));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1382:         };",
          "1384:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "1394:         $sequence = new GroupSequence(['Group 1', 'Entity']);",
          "1395:         $violations = $this->validator->validate($entity, new Valid(), $sequence);",
          "",
          "[Removed Lines]",
          "1385:         $this->referenceMetadata->addConstraint(new Callback([",
          "1386:             'callback' => $callback1,",
          "1387:             'groups' => 'Group 1',",
          "1388:         ]));",
          "1389:         $this->referenceMetadata->addConstraint(new Callback([",
          "1390:             'callback' => $callback2,",
          "1391:             'groups' => 'Group 2',",
          "1392:         ]));",
          "",
          "[Added Lines]",
          "1385:         $this->referenceMetadata->addConstraint(new Callback(",
          "1386:             callback: $callback1,",
          "1387:             groups: ['Group 1'],",
          "1388:         ));",
          "1389:         $this->referenceMetadata->addConstraint(new Callback(",
          "1390:             callback: $callback2,",
          "1391:             groups: ['Group 2'],",
          "1392:         ));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1442:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "1443:         };",
          "1454:         $violations = $this->validator->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1445:         $this->metadata->addConstraint(new Callback([",
          "1446:             'callback' => $callback1,",
          "1447:             'groups' => 'Group',",
          "1448:         ]));",
          "1449:         $this->referenceMetadata->addConstraint(new Callback([",
          "1450:             'callback' => $callback2,",
          "1451:             'groups' => 'Group',",
          "1452:         ]));",
          "",
          "[Added Lines]",
          "1445:         $this->metadata->addConstraint(new Callback(",
          "1446:             callback: $callback1,",
          "1447:             groups: ['Group'],",
          "1448:         ));",
          "1449:         $this->referenceMetadata->addConstraint(new Callback(",
          "1450:             callback: $callback2,",
          "1451:             groups: ['Group'],",
          "1452:         ));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1498:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "1499:         };",
          "1510:         $violations = $this->validator->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1501:         $this->metadata->addConstraint(new Callback([",
          "1502:             'callback' => $callback1,",
          "1503:             'groups' => 'Group',",
          "1504:         ]));",
          "1505:         $this->referenceMetadata->addConstraint(new Callback([",
          "1506:             'callback' => $callback2,",
          "1507:             'groups' => 'Group',",
          "1508:         ]));",
          "",
          "[Added Lines]",
          "1501:         $this->metadata->addConstraint(new Callback(",
          "1502:             callback: $callback1,",
          "1503:             groups: ['Group'],",
          "1504:         ));",
          "1505:         $this->referenceMetadata->addConstraint(new Callback(",
          "1506:             callback: $callback2,",
          "1507:             groups: ['Group'],",
          "1508:         ));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1561:             $context->addViolation('Message %param%', ['%param%' => 'value']);",
          "1562:         };",
          "1573:         $violations = $this->validator->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1564:         $this->metadata->addConstraint(new Callback([",
          "1565:             'callback' => $callback1,",
          "1566:             'groups' => 'Group',",
          "1567:         ]));",
          "1568:         $this->referenceMetadata->addConstraint(new Callback([",
          "1569:             'callback' => $callback2,",
          "1570:             'groups' => 'Group',",
          "1571:         ]));",
          "",
          "[Added Lines]",
          "1564:         $this->metadata->addConstraint(new Callback(",
          "1565:             callback: $callback1,",
          "1566:             groups: ['Group'],",
          "1567:         ));",
          "1568:         $this->referenceMetadata->addConstraint(new Callback(",
          "1569:             callback: $callback2,",
          "1570:             groups: ['Group'],",
          "1571:         ));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1603:         };",
          "1605:         $this->metadataFactory->addMetadata(new ClassMetadata('ArrayIterator'));",
          "1611:         $violations = $this->validate($traversable, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1606:         $this->metadata->addConstraint(new Callback([",
          "1607:             'callback' => $callback,",
          "1608:             'groups' => 'Group',",
          "1609:         ]));",
          "",
          "[Added Lines]",
          "1606:         $this->metadata->addConstraint(new Callback(",
          "1607:             callback: $callback,",
          "1608:             groups: ['Group'],",
          "1609:         ));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1635:         $traversableMetadata->addConstraint(new Traverse(true));",
          "1637:         $this->metadataFactory->addMetadata($traversableMetadata);",
          "1643:         $violations = $this->validate($traversable, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1638:         $this->metadata->addConstraint(new Callback([",
          "1639:             'callback' => $callback,",
          "1640:             'groups' => 'Group',",
          "1641:         ]));",
          "",
          "[Added Lines]",
          "1638:         $this->metadata->addConstraint(new Callback(",
          "1639:             callback: $callback,",
          "1640:             groups: ['Group'],",
          "1641:         ));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1659:         $traversableMetadata->addConstraint(new Traverse(false));",
          "1661:         $this->metadataFactory->addMetadata($traversableMetadata);",
          "1667:         $violations = $this->validate($traversable, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1662:         $this->metadata->addConstraint(new Callback([",
          "1663:             'callback' => $callback,",
          "1664:             'groups' => 'Group',",
          "1665:         ]));",
          "",
          "[Added Lines]",
          "1662:         $this->metadata->addConstraint(new Callback(",
          "1663:             callback: $callback,",
          "1664:             groups: ['Group'],",
          "1665:         ));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1692:         $traversableMetadata->addConstraint(new Traverse(false));",
          "1694:         $this->metadataFactory->addMetadata($traversableMetadata);",
          "1699:         $this->metadata->addPropertyConstraint('reference', new Valid());",
          "1701:         $violations = $this->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1695:         $this->referenceMetadata->addConstraint(new Callback([",
          "1696:             'callback' => $callback,",
          "1697:             'groups' => 'Group',",
          "1698:         ]));",
          "",
          "[Added Lines]",
          "1695:         $this->referenceMetadata->addConstraint(new Callback(",
          "1696:             callback: $callback,",
          "1697:             groups: ['Group'],",
          "1698:         ));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1717:         $traversableMetadata->addConstraint(new Traverse(false));",
          "1719:         $this->metadataFactory->addMetadata($traversableMetadata);",
          "1728:         $violations = $this->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1720:         $this->referenceMetadata->addConstraint(new Callback([",
          "1721:             'callback' => $callback,",
          "1722:             'groups' => 'Group',",
          "1723:         ]));",
          "1724:         $this->metadata->addPropertyConstraint('reference', new Valid([",
          "1725:             'traverse' => true,",
          "1726:         ]));",
          "",
          "[Added Lines]",
          "1720:         $this->referenceMetadata->addConstraint(new Callback(",
          "1721:             callback: $callback,",
          "1722:             groups: ['Group'],",
          "1723:         ));",
          "1724:         $this->metadata->addPropertyConstraint('reference', new Valid(",
          "1725:             traverse: true,",
          "1726:         ));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1744:         $traversableMetadata->addConstraint(new Traverse(true));",
          "1746:         $this->metadataFactory->addMetadata($traversableMetadata);",
          "1755:         $violations = $this->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1747:         $this->referenceMetadata->addConstraint(new Callback([",
          "1748:             'callback' => $callback,",
          "1749:             'groups' => 'Group',",
          "1750:         ]));",
          "1751:         $this->metadata->addPropertyConstraint('reference', new Valid([",
          "1752:             'traverse' => false,",
          "1753:         ]));",
          "",
          "[Added Lines]",
          "1747:         $this->referenceMetadata->addConstraint(new Callback(",
          "1748:             callback: $callback,",
          "1749:             groups: ['Group'],",
          "1750:         ));",
          "1751:         $this->metadata->addPropertyConstraint('reference', new Valid(",
          "1752:             traverse: false,",
          "1753:         ));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1767:             $this->fail('Should not be called');",
          "1768:         };",
          "1775:         $violations = $this->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1770:         $this->referenceMetadata->addConstraint(new Callback([",
          "1771:             'callback' => $callback,",
          "1772:             'groups' => 'Group',",
          "1773:         ]));",
          "",
          "[Added Lines]",
          "1770:         $this->referenceMetadata->addConstraint(new Callback(",
          "1771:             callback: $callback,",
          "1772:             groups: ['Group'],",
          "1773:         ));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1789:             $this->fail('Should not be called');",
          "1790:         };",
          "1797:         $violations = $this->validate($entity, new Valid(), 'Group');",
          "",
          "[Removed Lines]",
          "1792:         $this->referenceMetadata->addConstraint(new Callback([",
          "1793:             'callback' => $callback,",
          "1794:             'groups' => 'Group',",
          "1795:         ]));",
          "",
          "[Added Lines]",
          "1792:         $this->referenceMetadata->addConstraint(new Callback(",
          "1793:             callback: $callback,",
          "1794:             groups: ['Group'],",
          "1795:         ));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1816:         $cascadingMetadata->addConstraint(new Cascade());",
          "1818:         $cascadedMetadata = new ClassMetadata(CascadedChild::class);",
          "1824:         $this->metadataFactory->addMetadata($cascadingMetadata);",
          "1825:         $this->metadataFactory->addMetadata($cascadedMetadata);",
          "",
          "[Removed Lines]",
          "1819:         $cascadedMetadata->addConstraint(new Callback([",
          "1820:             'callback' => $callback,",
          "1821:             'groups' => 'Group',",
          "1822:         ]));",
          "",
          "[Added Lines]",
          "1819:         $cascadedMetadata->addConstraint(new Callback(",
          "1820:             callback: $callback,",
          "1821:             groups: ['Group'],",
          "1822:         ));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1868:             $context->addViolation('Message');",
          "1869:         };",
          "1876:         $violations = $this->validator->validate($entity, new Valid(), ['Group 1', 'Group 2']);",
          "",
          "[Removed Lines]",
          "1871:         $this->metadata->addConstraint(new Callback([",
          "1872:             'callback' => $callback,",
          "1873:             'groups' => ['Group 1', 'Group 2'],",
          "1874:         ]));",
          "",
          "[Added Lines]",
          "1871:         $this->metadata->addConstraint(new Callback(",
          "1872:             callback: $callback,",
          "1873:             groups: ['Group 1', 'Group 2'],",
          "1874:         ));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1887:             $context->addViolation('Message');",
          "1888:         };",
          "1895:         $violations = $this->validator->validate($entity, new Valid(), ['Group 1', 'Group 2']);",
          "",
          "[Removed Lines]",
          "1890:         $this->metadata->addPropertyConstraint('firstName', new Callback([",
          "1891:             'callback' => $callback,",
          "1892:             'groups' => ['Group 1', 'Group 2'],",
          "1893:         ]));",
          "",
          "[Added Lines]",
          "1890:         $this->metadata->addPropertyConstraint('firstName', new Callback(",
          "1891:             callback: $callback,",
          "1892:             groups: ['Group 1', 'Group 2'],",
          "1893:         ));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2007:         $reference->value = '';",
          "2008:         $entity->childA = $reference;",
          "2012:         $this->referenceMetadata->addPropertyConstraint('value', new NotBlank());",
          "2014:         $violations = $this->validator->validate($entity, null, []);",
          "",
          "[Removed Lines]",
          "2010:         $this->metadata->addPropertyConstraint('firstName', new NotBlank(['groups' => 'group1']));",
          "2011:         $this->metadata->addPropertyConstraint('childA', new Valid(['groups' => 'group1']));",
          "",
          "[Added Lines]",
          "2010:         $this->metadata->addPropertyConstraint('firstName', new NotBlank(groups: ['group1']));",
          "2011:         $this->metadata->addPropertyConstraint('childA', new Valid(groups: ['group1']));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2024:         $reference->value = '';",
          "2025:         $entity->childA = $reference;",
          "2031:         $violations = $this->validator->validate($entity, null, ['Default', 'group1']);",
          "",
          "[Removed Lines]",
          "2027:         $this->metadata->addPropertyConstraint('firstName', new NotBlank(['groups' => 'group1']));",
          "2028:         $this->metadata->addPropertyConstraint('childA', new Valid(['groups' => 'group1']));",
          "2029:         $this->referenceMetadata->addPropertyConstraint('value', new NotBlank(['groups' => 'group1']));",
          "",
          "[Added Lines]",
          "2027:         $this->metadata->addPropertyConstraint('firstName', new NotBlank(groups: ['group1']));",
          "2028:         $this->metadata->addPropertyConstraint('childA', new Valid(groups: ['group1']));",
          "2029:         $this->referenceMetadata->addPropertyConstraint('value', new NotBlank(groups: ['group1']));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2044:         $entity->childA = $reference;",
          "2046:         $this->metadata->addPropertyConstraint('firstName', new NotBlank());",
          "2052:         $violations = $this->validator->validate($entity, null, ['Default', 'group1', 'group2']);",
          "",
          "[Removed Lines]",
          "2047:         $this->metadata->addPropertyConstraint('childA', new Valid(['groups' => ['group1', 'group2']]));",
          "2049:         $this->referenceMetadata->addPropertyConstraint('value', new NotBlank(['groups' => 'group1']));",
          "2050:         $this->referenceMetadata->addPropertyConstraint('value', new NotNull(['groups' => 'group2']));",
          "",
          "[Added Lines]",
          "2047:         $this->metadata->addPropertyConstraint('childA', new Valid(groups: ['group1', 'group2']));",
          "2049:         $this->referenceMetadata->addPropertyConstraint('value', new NotBlank(groups: ['group1']));",
          "2050:         $this->referenceMetadata->addPropertyConstraint('value', new NotNull(groups: ['group2']));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2137:     public function testCollectionConstraintValidateAllGroupsForNestedConstraints()",
          "2138:     {",
          "2144:         $entity = new Entity();",
          "2145:         $entity->data = ['one' => 't', 'two' => ''];",
          "",
          "[Removed Lines]",
          "2139:         $this->metadata->addPropertyConstraint('data', new Collection(['fields' => [",
          "2140:             'one' => [new NotBlank(['groups' => 'one']), new Length(['min' => 2, 'groups' => 'two'])],",
          "2141:             'two' => [new NotBlank(['groups' => 'two'])],",
          "2142:         ]]));",
          "",
          "[Added Lines]",
          "2139:         $this->metadata->addPropertyConstraint('data', new Collection(fields: [",
          "2140:             'one' => [new NotBlank(groups: ['one']), new Length(min: 2, groups: ['two'])],",
          "2141:             'two' => [new NotBlank(groups: ['two'])],",
          "2142:         ]));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2154:     public function testGroupedMethodConstraintValidateInSequence()",
          "2155:     {",
          "2156:         $metadata = new ClassMetadata(EntityWithGroupedConstraintOnMethods::class);",
          "2161:         $this->metadataFactory->addMetadata($metadata);",
          "",
          "[Removed Lines]",
          "2157:         $metadata->addPropertyConstraint('bar', new NotNull(['groups' => 'Foo']));",
          "2158:         $metadata->addGetterMethodConstraint('validInFoo', 'isValidInFoo', new IsTrue(['groups' => 'Foo']));",
          "2159:         $metadata->addGetterMethodConstraint('bar', 'getBar', new NotNull(['groups' => 'Bar']));",
          "",
          "[Added Lines]",
          "2157:         $metadata->addPropertyConstraint('bar', new NotNull(groups: ['Foo']));",
          "2158:         $metadata->addGetterMethodConstraint('validInFoo', 'isValidInFoo', new IsTrue(groups: ['Foo']));",
          "2159:         $metadata->addGetterMethodConstraint('bar', 'getBar', new NotNull(groups: ['Bar']));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2198:     public function testAllConstraintValidateAllGroupsForNestedConstraints()",
          "2199:     {",
          "2205:         $entity = new Entity();",
          "2206:         $entity->data = ['one' => 't', 'two' => ''];",
          "",
          "[Removed Lines]",
          "2200:         $this->metadata->addPropertyConstraint('data', new All(['constraints' => [",
          "2201:             new NotBlank(['groups' => 'one']),",
          "2202:             new Length(['min' => 2, 'groups' => 'two']),",
          "2203:         ]]));",
          "",
          "[Added Lines]",
          "2200:         $this->metadata->addPropertyConstraint('data', new All(constraints: [",
          "2201:             new NotBlank(groups: ['one']),",
          "2202:             new Length(",
          "2203:                 min: 2,",
          "2204:                 groups: ['two'],",
          "2205:             ),",
          "2206:         ]));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2330:     public function testValidatedConstraintsHashesDoNotCollide()",
          "2331:     {",
          "2332:         $metadata = new ClassMetadata(Entity::class);",
          "2336:         $this->metadataFactory->addMetadata($metadata);",
          "",
          "[Removed Lines]",
          "2333:         $metadata->addPropertyConstraint('initialized', new NotNull(['groups' => 'should_pass']));",
          "2334:         $metadata->addPropertyConstraint('initialized', new IsNull(['groups' => 'should_fail']));",
          "",
          "[Added Lines]",
          "2336:         $metadata->addPropertyConstraint('initialized', new NotNull(groups: ['should_pass']));",
          "2337:         $metadata->addPropertyConstraint('initialized', new IsNull(groups: ['should_fail']));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d93994dbb1693bb9a13edffb984878a5fd66969a",
      "candidate_info": {
        "commit_hash": "d93994dbb1693bb9a13edffb984878a5fd66969a",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/d93994dbb1693bb9a13edffb984878a5fd66969a",
        "files": [
          "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
        ],
        "message": "[Validator] Pass required `requireTld` option to `Url` in tests",
        "before_after_code_files": [
          "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php||src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php": [
          "File: src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php -> src/Symfony/Component/Validator/Tests/Constraints/UrlValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     public function testValidUrlsWithNewLine($url)",
          "67:     {",
          "70:         $this->buildViolation('This value is not a valid URL.')",
          "71:             ->setParameter('{{ value }}', '\"'.$url.\"\\n\".'\"')",
          "",
          "[Removed Lines]",
          "68:         $this->validator->validate($url.\"\\n\", new Url());",
          "",
          "[Added Lines]",
          "68:         $this->validator->validate($url.\"\\n\", new Url(requireTld: false));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     public function testValidRelativeUrlWithNewLine(string $url)",
          "110:     {",
          "115:         $this->validator->validate($url.\"\\n\", $constraint);",
          "",
          "[Removed Lines]",
          "111:         $constraint = new Url([",
          "112:             'relativeProtocol' => true,",
          "113:         ]);",
          "",
          "[Added Lines]",
          "111:         $constraint = new Url(relativeProtocol: true, requireTld: false);",
          "",
          "---------------"
        ]
      }
    }
  ]
}