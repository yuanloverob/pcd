{
  "cve_id": "CVE-2024-28335",
  "cve_desc": "Lektor before 3.3.11 does not sanitize DB path traversal. Thus, shell commands might be executed via a file that is added to the templates directory, if the victim's web browser accesses an untrusted website that uses JavaScript to send requests to localhost port 5000, and the web browser is running on the same machine as the \"lektor server\" command.",
  "repo": "lektor/lektor",
  "patch_hash": "7393d87bd354e43120937789956175064e4610a0",
  "patch_info": {
    "commit_hash": "7393d87bd354e43120937789956175064e4610a0",
    "repo": "lektor/lektor",
    "commit_url": "https://github.com/lektor/lektor/commit/7393d87bd354e43120937789956175064e4610a0",
    "files": [
      "lektor/editor.py",
      "lektor/utils.py",
      "tests/test_editor.py",
      "tests/test_utils.py"
    ],
    "message": "Sanitize DB path traversal (#1179)\n\n* test: check that make_editor_session rejects funky paths\n\n* fix: validate path in make_editor_session\n\n* test: check that untrusted_to_os_path prevents traversal to parent\n\n* fix[untrusted_to_os_path]: prevent traversal to parent directories",
    "before_after_code_files": [
      "lektor/editor.py||lektor/editor.py",
      "lektor/utils.py||lektor/utils.py",
      "tests/test_editor.py||tests/test_editor.py",
      "tests/test_utils.py||tests/test_utils.py"
    ]
  },
  "patch_diff": {
    "lektor/editor.py||lektor/editor.py": [
      "File: lektor/editor.py -> lektor/editor.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: from lektor.constants import PRIMARY_ALT",
      "17: from lektor.metaformat import serialize",
      "18: from lektor.utils import atomic_open",
      "19: from lektor.utils import increment_filename",
      "20: from lektor.utils import is_valid_id",
      "21: from lektor.utils import secure_filename",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from lektor.utils import cleanup_path",
      "22: from lektor.utils import parse_path",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:     pass",
      "36: def make_editor_session(pad, path, is_attachment=None, alt=PRIMARY_ALT, datamodel=None):",
      "37:     \"\"\"Creates an editor session for the given path object.\"\"\"",
      "38:     if alt != PRIMARY_ALT and not pad.db.config.is_valid_alternative(alt):",
      "39:         raise BadEdit(\"Attempted to edit an invalid alternative (%s)\" % alt)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: def _is_valid_path(path: str) -> bool:",
      "39:     split_path = path.strip(\"/\").split(\"/\")",
      "40:     if split_path == [\"\"]:",
      "41:         split_path = []",
      "42:     return parse_path(path) == split_path",
      "47:     if not _is_valid_path(path):",
      "48:         raise BadEdit(\"Invalid path\")",
      "49:     path = cleanup_path(path)",
      "",
      "---------------"
    ],
    "lektor/utils.py||lektor/utils.py": [
      "File: lektor/utils.py -> lektor/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "151: def untrusted_to_os_path(path):",
      "153:     if not isinstance(path, str):",
      "154:         path = path.decode(fs_enc, \"replace\")",
      "158: def is_path(path):",
      "",
      "[Removed Lines]",
      "152:     path = path.strip(\"/\").replace(\"/\", os.path.sep)",
      "155:     return path",
      "",
      "[Added Lines]",
      "154:     clean_path = cleanup_path(path)",
      "155:     assert clean_path.startswith(\"/\")",
      "156:     return clean_path[1:].replace(\"/\", os.path.sep)",
      "",
      "---------------"
    ],
    "tests/test_editor.py||tests/test_editor.py": [
      "File: tests/test_editor.py -> tests/test_editor.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:             \"conflicting\",",
      "44:             marks=pytest.mark.xfail(reason=\"buglet that should be fixed\"),",
      "45:         ),",
      "46:     ],",
      "47: )",
      "48: def test_make_editor_session_raises_bad_edit(pad, path, kwargs, expect):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:         (\"/../../templates\", {}, \"Invalid path\"),",
      "",
      "---------------"
    ],
    "tests/test_utils.py||tests/test_utils.py": [
      "File: tests/test_utils.py -> tests/test_utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import warnings",
      "2: from contextlib import contextmanager",
      "3: from dataclasses import dataclass",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import os",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from lektor.utils import secure_url",
      "17: from lektor.utils import slugify",
      "18: from lektor.utils import unique_everseen",
      "19: from lektor.utils import Url",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: from lektor.utils import untrusted_to_os_path",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "336:     \"\"\"Get the text of the line for which warning was issued.\"\"\"",
      "337:     with open(warning.filename, encoding=\"utf-8\") as fp:",
      "338:         return next(islice(fp, warning.lineno - 1, None), None)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343: @pytest.mark.parametrize(",
      "344:     \"db_path, expected\",",
      "345:     [",
      "346:         (\"a/b\", \"a/b\"),",
      "347:         (\"/a/b\", \"a/b\"),",
      "348:         (\"a/b/\", \"a/b\"),",
      "349:         (\"/../../a\", \"a\"),",
      "350:     ],",
      "351: )",
      "352: def test_untrusted_to_os_path(db_path, expected):",
      "353:     os_path = untrusted_to_os_path(db_path)",
      "354:     assert os_path.split(os.sep) == expected.split(\"/\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aef3c9047655e00ff65362762cfcfffd44404687",
      "candidate_info": {
        "commit_hash": "aef3c9047655e00ff65362762cfcfffd44404687",
        "repo": "lektor/lektor",
        "commit_url": "https://github.com/lektor/lektor/commit/aef3c9047655e00ff65362762cfcfffd44404687",
        "files": [
          "lektor/editor.py",
          "lektor/utils.py",
          "tests/test_editor.py",
          "tests/test_utils.py"
        ],
        "message": "Sanitize DB path traversal (3.3 branch) (#1180)\n\n* test: check that make_editor_session rejects funky paths\n\n* fix: validate path in make_editor_session\n\n* test: check that untrusted_to_os_path prevents traversal to parent\n\n* fix[untrusted_to_os_path]: prevent traversal to parent directories",
        "before_after_code_files": [
          "lektor/editor.py||lektor/editor.py",
          "lektor/utils.py||lektor/utils.py",
          "tests/test_editor.py||tests/test_editor.py",
          "tests/test_utils.py||tests/test_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lektor/editor.py||lektor/editor.py",
            "lektor/utils.py||lektor/utils.py",
            "tests/test_editor.py||tests/test_editor.py",
            "tests/test_utils.py||tests/test_utils.py"
          ],
          "candidate": [
            "lektor/editor.py||lektor/editor.py",
            "lektor/utils.py||lektor/utils.py",
            "tests/test_editor.py||tests/test_editor.py",
            "tests/test_utils.py||tests/test_utils.py"
          ]
        }
      },
      "candidate_diff": {
        "lektor/editor.py||lektor/editor.py": [
          "File: lektor/editor.py -> lektor/editor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: from lektor.constants import PRIMARY_ALT",
          "16: from lektor.metaformat import serialize",
          "17: from lektor.utils import atomic_open",
          "18: from lektor.utils import increment_filename",
          "19: from lektor.utils import is_valid_id",
          "20: from lektor.utils import secure_filename",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: from lektor.utils import cleanup_path",
          "21: from lektor.utils import parse_path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     pass",
          "35: def make_editor_session(pad, path, is_attachment=None, alt=PRIMARY_ALT, datamodel=None):",
          "36:     \"\"\"Creates an editor session for the given path object.\"\"\"",
          "37:     if alt != PRIMARY_ALT and not pad.db.config.is_valid_alternative(alt):",
          "38:         raise BadEdit(\"Attempted to edit an invalid alternative (%s)\" % alt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: def _is_valid_path(path: str) -> bool:",
          "38:     split_path = path.strip(\"/\").split(\"/\")",
          "39:     if split_path == [\"\"]:",
          "40:         split_path = []",
          "41:     return parse_path(path) == split_path",
          "46:     if not _is_valid_path(path):",
          "47:         raise BadEdit(\"Invalid path\")",
          "48:     path = cleanup_path(path)",
          "",
          "---------------"
        ],
        "lektor/utils.py||lektor/utils.py": [
          "File: lektor/utils.py -> lektor/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: _slash_escape = \"\\\\/\" not in json.dumps(\"/\")",
          "37: _last_num_re = re.compile(r\"^(.*)(\\d+)(.*?)$\")",
          "38: _list_marker = object()",
          "39: _value_marker = object()",
          "",
          "[Removed Lines]",
          "36: _slashes_re = re.compile(r\"(/\\.{1,2}(/|$))|/\")",
          "",
          "[Added Lines]",
          "36: _slashes_re = re.compile(r\"(?:/(?:\\.{1,2}(?=/|$))?)+\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: def untrusted_to_os_path(path):",
          "113:     if not isinstance(path, str):",
          "114:         path = path.decode(fs_enc, \"replace\")",
          "118: def is_path(path):",
          "",
          "[Removed Lines]",
          "112:     path = path.strip(\"/\").replace(\"/\", os.path.sep)",
          "115:     return path",
          "",
          "[Added Lines]",
          "114:     clean_path = cleanup_path(path)",
          "115:     assert clean_path.startswith(\"/\")",
          "116:     return clean_path[1:].replace(\"/\", os.path.sep)",
          "",
          "---------------"
        ],
        "tests/test_editor.py||tests/test_editor.py": [
          "File: tests/test_editor.py -> tests/test_editor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             \"conflicting\",",
          "44:             marks=pytest.mark.xfail(reason=\"buglet that should be fixed\"),",
          "45:         ),",
          "46:     ],",
          "47: )",
          "48: def test_make_editor_session_raises_bad_edit(pad, path, kwargs, expect):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         (\"/../../templates\", {}, \"Invalid path\"),",
          "",
          "---------------"
        ],
        "tests/test_utils.py||tests/test_utils.py": [
          "File: tests/test_utils.py -> tests/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # coding: utf-8",
          "2: from dataclasses import dataclass",
          "3: from urllib.parse import urlsplit",
          "5: import pytest",
          "7: from lektor.utils import build_url",
          "8: from lektor.utils import is_path_child_of",
          "9: from lektor.utils import join_path",
          "10: from lektor.utils import magic_split_ext",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import os",
          "9: from lektor.utils import cleanup_path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: from lektor.utils import parse_path",
          "13: from lektor.utils import secure_url",
          "14: from lektor.utils import slugify",
          "15: from lektor.utils import Url",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: from lektor.utils import untrusted_to_os_path",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229: def test_make_relative_url_relative_source_absolute_target():",
          "230:     with pytest.raises(ValueError):",
          "231:         make_relative_url(\"rel/a/tive/\", \"/abs/o/lute\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: @pytest.mark.parametrize(",
          "238:     \"db_path, expected\",",
          "239:     [",
          "240:         (\"a/b\", \"/a/b\"),",
          "241:         (\"//a//./b//\", \"/a/b\"),",
          "242:         (\"//a//../b//\", \"/a/b\"),",
          "243:         (\"//a//..x/b//\", \"/a/..x/b\"),",
          "244:     ],",
          "245: )",
          "246: def test_cleanup_path(db_path, expected):",
          "247:     assert cleanup_path(db_path) == expected",
          "250: @pytest.mark.parametrize(",
          "251:     \"db_path, expected\",",
          "252:     [",
          "253:         (\"a/b\", \"a/b\"),",
          "254:         (\"/a/b\", \"a/b\"),",
          "255:         (\"a/b/\", \"a/b\"),",
          "256:         (\"/../../a\", \"a\"),",
          "257:     ],",
          "258: )",
          "259: def test_untrusted_to_os_path(db_path, expected):",
          "260:     os_path = untrusted_to_os_path(db_path)",
          "261:     assert os_path.split(os.sep) == expected.split(\"/\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}