{
  "cve_id": "CVE-2023-51699",
  "cve_desc": "Fluid is an open source Kubernetes-native Distributed Dataset Orchestrator and Accelerator for data-intensive applications. An OS command injection vulnerability within the Fluid project's JuicefsRuntime can potentially allow an authenticated user, who has the authority to create or update the K8s CRD Dataset/JuicefsRuntime, to execute arbitrary OS commands within the juicefs related containers. This could lead to unauthorized access, modification or deletion of data. Users who're using versions < 0.9.3 with JuicefsRuntime should upgrade to v0.9.3.",
  "repo": "fluid-cloudnative/fluid",
  "patch_hash": "e0184cff8790ad000c3e8943392c7f544fad7d66",
  "patch_info": {
    "commit_hash": "e0184cff8790ad000c3e8943392c7f544fad7d66",
    "repo": "fluid-cloudnative/fluid",
    "commit_url": "https://github.com/fluid-cloudnative/fluid/commit/e0184cff8790ad000c3e8943392c7f544fad7d66",
    "files": [
      "charts/juicefs/Chart.yaml",
      "pkg/ddc/juicefs/operations/base.go",
      "pkg/ddc/juicefs/operations/base_test.go",
      "pkg/ddc/juicefs/transform_fuse.go",
      "pkg/ddc/juicefs/ufs_test.go",
      "pkg/utils/security/escape.go",
      "pkg/utils/security/escape_test.go"
    ],
    "message": "Merge pull request from GHSA-wx8q-4gm9-rj2g\n\n* Fix JuicefsRuntime: escape customized string before constructing commands\n\nadd escapeBashStr\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\navoid bash -c in operations\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nfix GetUsedSpace and GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nmove EscapeBashStr to pkg/utils/security\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nadd left\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nresume GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nEscape value.Configs.Name\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\nFix unit tests\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\nUpgrade juicefs helm chart version to 0.2.16\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n* Fix JuicefsRuntime: escape customized string before constructing commands\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n---------\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\nCo-authored-by: xixi <hexilee@juicedata.io>",
    "before_after_code_files": [
      "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
      "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
      "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
      "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
      "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
      "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
    ]
  },
  "patch_diff": {
    "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go": [
      "File: pkg/ddc/juicefs/operations/base.go -> pkg/ddc/juicefs/operations/base.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:  \"github.com/go-logr/logr\"",
      "29:  \"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"",
      "30: )",
      "32: type JuiceFileUtils struct {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130: func (j JuiceFileUtils) GetFileCount(juiceSubPath string) (fileCount int64, err error) {",
      "131:  var (",
      "134:   command = []string{\"bash\", \"-c\", strs}",
      "135:   stdout  string",
      "136:   stderr  string",
      "137:  )",
      "139:  stdout, stderr, err = j.exec(command)",
      "140:  if err != nil {",
      "141:   err = fmt.Errorf(\"execute command %v with expectedErr: %v stdout %s and stderr %s\", command, err, stdout, stderr)",
      "",
      "[Removed Lines]",
      "133:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", juiceSubPath)",
      "",
      "[Added Lines]",
      "134:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", security.EscapeBashStr(juiceSubPath))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "266: }",
      "270: func (j JuiceFileUtils) GetUsedSpace(juicefsPath string) (usedSpace int64, err error) {",
      "271:  var (",
      "274:   stdout  string",
      "275:   stderr  string",
      "276:  )",
      "",
      "[Removed Lines]",
      "272:   strs    = fmt.Sprintf(`df --block-size=1 |grep %s`, juicefsPath)",
      "273:   command = []string{\"bash\", \"-c\", strs}",
      "",
      "[Added Lines]",
      "272:   command = []string{\"df\", \"--block-size=1\"}",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "281:   return",
      "282:  }",
      "287:  data := strings.Fields(str)",
      "288:  if len(data) != 6 {",
      "289:   err = fmt.Errorf(\"failed to parse %s in GetUsedSpace method\", data)",
      "",
      "[Removed Lines]",
      "285:  str := strings.TrimSuffix(stdout, \"\\n\")",
      "",
      "[Added Lines]",
      "283:  var str string",
      "284:  lines := strings.Split(stdout, \"\\n\")",
      "285:  for _, line := range lines {",
      "286:   if strings.Contains(line, juicefsPath) {",
      "287:    str = line",
      "288:    break",
      "289:   }",
      "290:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "365:   j.log.Error(errors.New(\"the key not in  metadatafile\"), \"key\", key)",
      "366:  }",
      "367:  var (",
      "370:   stdout  string",
      "371:   stderr  string",
      "372:  )",
      "",
      "[Removed Lines]",
      "368:   str     = \"sed -n '\" + line + \"' \" + filename",
      "369:   command = []string{\"bash\", \"-c\", str}",
      "",
      "[Added Lines]",
      "373:   str     = \"'\" + line + \"' \" + filename",
      "374:   command = []string{\"sed\", \"-n\", str}",
      "",
      "---------------"
    ],
    "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go": [
      "File: pkg/ddc/juicefs/operations/base_test.go -> pkg/ddc/juicefs/operations/base_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "479:   t.Fatal(err.Error())",
      "480:  }",
      "481:  a := &JuiceFileUtils{log: fake.NullLogger()}",
      "483:  if err == nil {",
      "484:   t.Error(\"check failure, want err, got nil\")",
      "485:  }",
      "",
      "[Removed Lines]",
      "482:  _, err = a.GetUsedSpace(\"/tmp\")",
      "",
      "[Added Lines]",
      "482:  _, err = a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "489:  if err != nil {",
      "490:   t.Fatal(err.Error())",
      "491:  }",
      "493:  if err != nil {",
      "494:   t.Errorf(\"check failure, want nil, got err: %v\", err)",
      "495:  }",
      "",
      "[Removed Lines]",
      "492:  usedSpace, err := a.GetUsedSpace(\"/tmp\")",
      "",
      "[Added Lines]",
      "492:  usedSpace, err := a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
      "",
      "---------------"
    ],
    "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go": [
      "File: pkg/ddc/juicefs/transform_fuse.go -> pkg/ddc/juicefs/transform_fuse.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
      "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils\"",
      "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"",
      "32: )",
      "34: func (j *JuiceFSEngine) transformFuse(runtime *datav1alpha1.JuiceFSRuntime, dataset *datav1alpha1.Dataset, value *JuiceFS) (err error) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:  }",
      "38:  mount := dataset.Spec.Mounts[0]",
      "43:  image := runtime.Spec.Fuse.Image",
      "",
      "[Removed Lines]",
      "40:  value.Configs.Name = mount.Name",
      "",
      "[Added Lines]",
      "41:  value.Configs.Name = security.EscapeBashStr(mount.Name)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "216:  }",
      "218:  if source == \"\" {",
      "220:  }",
      "",
      "[Removed Lines]",
      "219:   source = mount.Name",
      "",
      "[Added Lines]",
      "220:   source = security.EscapeBashStr(mount.Name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "326:    }",
      "327:    workerOptionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)",
      "328:   }",
      "331:  } else {",
      "332:   if readonly {",
      "333:    optionMap[\"attrcacheto\"] = \"7200\"",
      "",
      "[Removed Lines]",
      "329:   mountArgs = []string{common.JuiceFSCeMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genOption(optionMap), \",\")}",
      "330:   mountArgsWorker = []string{common.JuiceFSCeMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genOption(workerOptionMap), \",\")}",
      "",
      "[Added Lines]",
      "330:   mountArgs = []string{",
      "331:    common.JuiceFSCeMountPath,",
      "332:    value.Source,",
      "333:    security.EscapeBashStr(value.Fuse.MountPath),",
      "334:    \"-o\",",
      "335:    security.EscapeBashStr(strings.Join(genOption(optionMap), \",\")),",
      "336:   }",
      "337:   mountArgsWorker = []string{",
      "338:    common.JuiceFSCeMountPath,",
      "339:    value.Source,",
      "340:    security.EscapeBashStr(value.Worker.MountPath),",
      "341:    \"-o\",",
      "342:    security.EscapeBashStr(strings.Join(genOption(workerOptionMap), \",\")),",
      "343:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "347:   optionMap[\"no-sharing\"] = \"\"",
      "348:   delete(workerOptionMap, \"no-sharing\")",
      "352:  }",
      "354:  value.Worker.Command = strings.Join(mountArgsWorker, \" \")",
      "355:  value.Fuse.Command = strings.Join(mountArgs, \" \")",
      "358:  return nil",
      "359: }",
      "",
      "[Removed Lines]",
      "350:   mountArgs = []string{common.JuiceFSMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genOption(optionMap), \",\")}",
      "351:   mountArgsWorker = []string{common.JuiceFSMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genOption(workerOptionMap), \",\")}",
      "356:  value.Fuse.StatCmd = \"stat -c %i \" + value.Fuse.MountPath",
      "357:  value.Worker.StatCmd = \"stat -c %i \" + value.Worker.MountPath",
      "",
      "[Added Lines]",
      "363:   mountArgs = []string{",
      "364:    common.JuiceFSMountPath,",
      "365:    value.Source,",
      "366:    security.EscapeBashStr(value.Fuse.MountPath),",
      "367:    \"-o\",",
      "368:    security.EscapeBashStr(strings.Join(genOption(optionMap), \",\")),",
      "369:   }",
      "370:   mountArgsWorker = []string{",
      "371:    common.JuiceFSMountPath,",
      "372:    value.Source,",
      "373:    security.EscapeBashStr(value.Worker.MountPath),",
      "374:    \"-o\",",
      "375:    security.EscapeBashStr(strings.Join(genOption(workerOptionMap), \",\")),",
      "376:   }",
      "381:  value.Fuse.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Fuse.MountPath)",
      "382:  value.Worker.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Worker.MountPath)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "379:   for _, option := range *config {",
      "380:    o := strings.TrimSpace(option)",
      "381:    if o != \"\" {",
      "383:    }",
      "384:   }",
      "385:  }",
      "",
      "[Removed Lines]",
      "382:     args = append(args, fmt.Sprintf(\"--%s\", o))",
      "",
      "[Added Lines]",
      "407:     args = append(args, fmt.Sprintf(\"--%s\", security.EscapeBashStr(o)))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "395:    args = append(args, \"--no-update\")",
      "396:   }",
      "397:   if value.Configs.Storage != \"\" {",
      "399:   }",
      "400:   if value.Configs.Bucket != \"\" {",
      "402:   }",
      "404:   cmd := append([]string{common.JuiceCeCliPath, \"format\"}, args...)",
      "405:   value.Configs.FormatCmd = strings.Join(cmd, \" \")",
      "406:   return",
      "",
      "[Removed Lines]",
      "398:    args = append(args, fmt.Sprintf(\"--storage=%s\", value.Configs.Storage))",
      "401:    args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
      "403:   args = append(args, value.Source, value.Configs.Name)",
      "",
      "[Added Lines]",
      "423:    args = append(args, fmt.Sprintf(\"--storage=%s\", security.EscapeBashStr(value.Configs.Storage)))",
      "426:    args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
      "428:   args = append(args, value.Source, security.EscapeBashStr(value.Configs.Name))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "418:   args = append(args, \"--secretkey=${SECRET_KEY}\")",
      "419:  }",
      "420:  if value.Configs.Bucket != \"\" {",
      "422:  }",
      "423:  args = append(args, value.Source)",
      "424:  cmd := append([]string{common.JuiceCliPath, \"auth\"}, args...)",
      "",
      "[Removed Lines]",
      "421:   args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
      "",
      "[Added Lines]",
      "446:   args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "461:      return fmt.Errorf(\"quota is not supported in juicefs-ce version %s\", value.Fuse.ImageTag)",
      "462:     }",
      "465:     return nil",
      "466:    }",
      "",
      "[Removed Lines]",
      "464:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, value.Fuse.SubPath, qs)",
      "",
      "[Added Lines]",
      "489:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "470:    }",
      "472:    cli := common.JuiceCliPath",
      "474:    return nil",
      "475:   }",
      "476:  }",
      "",
      "[Removed Lines]",
      "473:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, value.Fuse.SubPath, qs)",
      "",
      "[Added Lines]",
      "498:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
      "",
      "---------------"
    ],
    "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go": [
      "File: pkg/ddc/juicefs/ufs_test.go -> pkg/ddc/juicefs/ufs_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: }",
      "40: func mockExecCommandInContainerForUsedStorageBytes() (stdout string, stderr string, err error) {",
      "42:  return r, \"\", nil",
      "43: }",
      "",
      "[Removed Lines]",
      "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /data`",
      "",
      "[Added Lines]",
      "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /juicefs/juicefs/test/juicefs-fuse`",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:  statefulSet := &appsv1.StatefulSet{",
      "47:   ObjectMeta: metav1.ObjectMeta{",
      "48:    Name:      \"test-worker\",",
      "50:   },",
      "51:   Spec: appsv1.StatefulSetSpec{",
      "52:    Selector: &metav1.LabelSelector{",
      "",
      "[Removed Lines]",
      "49:    Namespace: \"fluid\",",
      "",
      "[Added Lines]",
      "49:    Namespace: \"juicefs\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:  var pod = &corev1.Pod{",
      "58:   ObjectMeta: metav1.ObjectMeta{",
      "59:    Name:      \"test-work-0\",",
      "61:    Labels:    map[string]string{\"a\": \"b\"},",
      "62:   },",
      "63:   Status: corev1.PodStatus{",
      "",
      "[Removed Lines]",
      "60:    Namespace: \"fluid\",",
      "",
      "[Added Lines]",
      "60:    Namespace: \"juicefs\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:    name: \"test\",",
      "94:    fields: fields{",
      "95:     name:      \"test\",",
      "97:     runtime: &datav1alpha1.JuiceFSRuntime{",
      "98:      ObjectMeta: metav1.ObjectMeta{",
      "99:       Name:      \"test\",",
      "101:      },",
      "102:     },",
      "103:    },",
      "",
      "[Removed Lines]",
      "96:     namespace: \"fluid\",",
      "100:       Namespace: \"fluid\",",
      "",
      "[Added Lines]",
      "96:     namespace: \"juicefs\",",
      "100:       Namespace: \"juicefs\",",
      "",
      "---------------"
    ],
    "pkg/utils/security/escape.go||pkg/utils/security/escape.go": [
      "File: pkg/utils/security/escape.go -> pkg/utils/security/escape.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: Copyright 2023 The Fluid Authors.",
      "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
      "5: you may not use this file except in compliance with the License.",
      "6: You may obtain a copy of the License at",
      "8:     http://www.apache.org/licenses/LICENSE-2.0",
      "10: Unless required by applicable law or agreed to in writing, software",
      "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
      "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "13: See the License for the specific language governing permissions and",
      "14: limitations under the License.",
      "17: package security",
      "19: import (",
      "20:  \"fmt\"",
      "21:  \"strings\"",
      "22: )",
      "29: func EscapeBashStr(s string) string {",
      "30:  if !containsOne(s, []rune{'$', '`', '&', ';', '>', '|', '(', ')'}) {",
      "31:   return s",
      "32:  }",
      "33:  s = strings.ReplaceAll(s, `\\`, `\\\\`)",
      "34:  s = strings.ReplaceAll(s, `'`, `\\'`)",
      "35:  if strings.Contains(s, `\\\\`) {",
      "36:   s = strings.ReplaceAll(s, `\\\\\\\\`, `\\\\`)",
      "37:   s = strings.ReplaceAll(s, `\\\\\\'`, `\\'`)",
      "38:   s = strings.ReplaceAll(s, `\\\\\"`, `\\\"`)",
      "39:   s = strings.ReplaceAll(s, `\\\\a`, `\\a`)",
      "40:   s = strings.ReplaceAll(s, `\\\\b`, `\\b`)",
      "41:   s = strings.ReplaceAll(s, `\\\\e`, `\\e`)",
      "42:   s = strings.ReplaceAll(s, `\\\\E`, `\\E`)",
      "43:   s = strings.ReplaceAll(s, `\\\\n`, `\\n`)",
      "44:   s = strings.ReplaceAll(s, `\\\\r`, `\\r`)",
      "45:   s = strings.ReplaceAll(s, `\\\\t`, `\\t`)",
      "46:   s = strings.ReplaceAll(s, `\\\\v`, `\\v`)",
      "47:   s = strings.ReplaceAll(s, `\\\\?`, `\\?`)",
      "48:  }",
      "49:  return fmt.Sprintf(`$'%s'`, s)",
      "50: }",
      "52: func containsOne(target string, chars []rune) bool {",
      "53:  charMap := make(map[rune]bool, len(chars))",
      "54:  for _, c := range chars {",
      "55:   charMap[c] = true",
      "56:  }",
      "57:  for _, s := range target {",
      "58:   if charMap[s] {",
      "59:    return true",
      "60:   }",
      "61:  }",
      "62:  return false",
      "63: }",
      "",
      "---------------"
    ],
    "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go": [
      "File: pkg/utils/security/escape_test.go -> pkg/utils/security/escape_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: Copyright 2023 The Fluid Author.",
      "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
      "5: you may not use this file except in compliance with the License.",
      "6: You may obtain a copy of the License at",
      "8:     http://www.apache.org/licenses/LICENSE-2.0",
      "10: Unless required by applicable law or agreed to in writing, software",
      "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
      "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "13: See the License for the specific language governing permissions and",
      "14: limitations under the License.",
      "17: package security",
      "19: import \"testing\"",
      "21: func TestEscapeBashStr(t *testing.T) {",
      "22:  cases := [][]string{",
      "23:   {\"abc\", \"abc\"},",
      "24:   {\"test-volume\", \"test-volume\"},",
      "25:   {\"http://minio.kube-system:9000/minio/dynamic-ce\", \"http://minio.kube-system:9000/minio/dynamic-ce\"},",
      "26:   {\"$(cat /proc/self/status | grep CapEff > /test.txt)\", \"$'$(cat /proc/self/status | grep CapEff > /test.txt)'\"},",
      "27:   {\"hel`cat /proc/self/status`lo\", \"$'hel`cat /proc/self/status`lo'\"},",
      "28:   {\"'h'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
      "29:   {\"\\\\'h\\\\'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
      "30:   {\"$'h'el`cat /proc/self/status`lo\", \"$'$\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
      "31:   {\"hel\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
      "32:   {\"hel\\\\\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
      "33:   {\"hel\\\\'`cat /proc/self/status`lo\", \"$'hel\\\\'`cat /proc/self/status`lo'\"},",
      "34:  }",
      "35:  for _, c := range cases {",
      "36:   escaped := EscapeBashStr(c[0])",
      "37:   if escaped != c[1] {",
      "38:    t.Errorf(\"escapeBashVar(%s) = %s, want %s\", c[0], escaped, c[1])",
      "39:   }",
      "40:  }",
      "41: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ab7583e2d6f0d6414022ee4148b409b102c2ad3",
      "candidate_info": {
        "commit_hash": "7ab7583e2d6f0d6414022ee4148b409b102c2ad3",
        "repo": "fluid-cloudnative/fluid",
        "commit_url": "https://github.com/fluid-cloudnative/fluid/commit/7ab7583e2d6f0d6414022ee4148b409b102c2ad3",
        "files": [
          "charts/fluid/fluid/values.yaml",
          "charts/juicefs/CHANGELOG.md",
          "charts/juicefs/Chart.yaml",
          "charts/juicefs/templates/fuse/daemonset.yaml",
          "charts/juicefs/values.yaml",
          "pkg/common/juicefs.go",
          "pkg/ddc/juicefs/transform_fuse.go",
          "pkg/ddc/juicefs/transform_fuse_test.go",
          "pkg/ddc/juicefs/type.go",
          "pkg/ddc/juicefs/utils.go",
          "pkg/ddc/juicefs/utils_test.go"
        ],
        "message": "support subpath quota for juicefs runtime (#3133)\n\n* init subpath quota\n\nSigned-off-by: zwwhdls <zww@hdls.me>\n\n* add subpath quota\n\nSigned-off-by: zwwhdls <zww@hdls.me>\n\n* update default version\n\nSigned-off-by: zwwhdls <zww@hdls.me>\n\n* update\n\nSigned-off-by: zwwhdls <zww@hdls.me>\n\n* mv clientVersion to util\n\nSigned-off-by: zwwhdls <zww@hdls.me>\n\n* add error wrapf\n\nSigned-off-by: zwwhdls <zww@hdls.me>\n\n---------\n\nSigned-off-by: zwwhdls <zww@hdls.me>",
        "before_after_code_files": [
          "pkg/common/juicefs.go||pkg/common/juicefs.go",
          "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
          "pkg/ddc/juicefs/transform_fuse_test.go||pkg/ddc/juicefs/transform_fuse_test.go",
          "pkg/ddc/juicefs/type.go||pkg/ddc/juicefs/type.go",
          "pkg/ddc/juicefs/utils.go||pkg/ddc/juicefs/utils.go",
          "pkg/ddc/juicefs/utils_test.go||pkg/ddc/juicefs/utils_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go"
          ],
          "candidate": [
            "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/common/juicefs.go||pkg/common/juicefs.go": [
          "File: pkg/common/juicefs.go -> pkg/common/juicefs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  JuiceFSFuseImageEnv = \"JUICEFS_FUSE_IMAGE_ENV\"",
          "35:  DefaultJuiceFSMigrateImage = \"juicedata/juicefs-fuse:nightly\"",
          "37:  JuiceFSCeMountPath = \"/bin/mount.juicefs\"",
          "38:  JuiceFSMountPath   = \"/sbin/mount.juicefs\"",
          "39:  JuiceCeCliPath     = \"/usr/local/bin/juicefs\"",
          "",
          "[Removed Lines]",
          "31:  DefaultJuiceFSFuseImage = \"juicedata/juicefs-fuse:v1.0.0\"",
          "33:  DefaultJuiceFSRuntimeImage = \"juicedata/juicefs-fuse:v1.0.0\"",
          "",
          "[Added Lines]",
          "31:  DefaultJuiceFSFuseImage = \"juicedata/juicefs-fuse:v1.0.4-4.9.2\"",
          "33:  DefaultJuiceFSRuntimeImage = \"juicedata/juicefs-fuse:v1.0.4-4.9.2\"",
          "37:  NightlyTag = \"nightly\"",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go": [
          "File: pkg/ddc/juicefs/transform_fuse.go -> pkg/ddc/juicefs/transform_fuse.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package juicefs",
          "19: import (",
          "21:  \"fmt\"",
          "22:  \"strconv\"",
          "23:  \"strings\"",
          "25:  corev1 \"k8s.io/api/core/v1\"",
          "27:  datav1alpha1 \"github.com/fluid-cloudnative/fluid/api/v1alpha1\"",
          "28:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
          "",
          "[Removed Lines]",
          "20:  \"errors\"",
          "",
          "[Added Lines]",
          "24:  \"github.com/pkg/errors\"",
          "26:  \"k8s.io/apimachinery/pkg/api/resource\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  j.genFormatCmd(value, runtime.Spec.Configs)",
          "64:  err = j.genMount(value, runtime, option)",
          "65:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  err = j.genQuotaCmd(value, mount)",
          "66:  if err != nil {",
          "67:   return err",
          "68:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:  return nil",
          "350: }",
          "352: func genOption(optionMap map[string]string) []string {",
          "353:  options := []string{}",
          "354:  for k, v := range optionMap {",
          "355:   if v != \"\" {",
          "356:    k = fmt.Sprintf(\"%s=%s\", k, v)",
          "357:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:   if k == \"quota\" {",
          "366:    continue",
          "367:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:  cmd := append([]string{common.JuiceCliPath, \"auth\"}, args...)",
          "412:  value.Configs.FormatCmd = strings.Join(cmd, \" \")",
          "413: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429: func (j *JuiceFSEngine) getQuota(v string) (int64, error) {",
          "430:  q, err := resource.ParseQuantity(v)",
          "431:  if err != nil {",
          "432:   return 0, fmt.Errorf(\"invalid quota %s: %v\", v, err)",
          "433:  }",
          "434:  qs := q.Value() / 1024 / 1024 / 1024",
          "435:  if qs <= 0 {",
          "436:   return 0, fmt.Errorf(\"quota %s is too small, at least 1GiB for quota\", v)",
          "437:  }",
          "439:  return qs, nil",
          "440: }",
          "443: func (j *JuiceFSEngine) genQuotaCmd(value *JuiceFS, mount datav1alpha1.Mount) error {",
          "444:  options := mount.Options",
          "445:  for k, v := range options {",
          "446:   if k == \"quota\" {",
          "447:    qs, err := j.getQuota(v)",
          "448:    if err != nil {",
          "449:     return errors.Wrapf(err, \"invalid quota %s\", v)",
          "450:    }",
          "451:    if value.Fuse.SubPath == \"\" {",
          "452:     return fmt.Errorf(\"subPath must be set when quota is enabled\")",
          "453:    }",
          "454:    ceVersion, eeVersion, err := ParseImageTag(value.Fuse.ImageTag)",
          "455:    if err != nil {",
          "456:     return errors.Wrapf(err, \"invalid image tag %s\", value.Fuse.ImageTag)",
          "457:    }",
          "458:    if value.Edition == CommunityEdition {",
          "460:     if ceVersion.LessThan(&ClientVersion{1, 1, 0, \"\"}) {",
          "461:      return fmt.Errorf(\"quota is not supported in juicefs-ce version %s\", value.Fuse.ImageTag)",
          "462:     }",
          "464:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, value.Fuse.SubPath, qs)",
          "465:     return nil",
          "466:    }",
          "468:    if eeVersion.LessThan(&ClientVersion{4, 9, 2, \"\"}) {",
          "469:     return fmt.Errorf(\"quota is not supported in juicefs-ee version %s\", value.Fuse.ImageTag)",
          "470:    }",
          "472:    cli := common.JuiceCliPath",
          "473:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, value.Fuse.SubPath, qs)",
          "474:    return nil",
          "475:   }",
          "476:  }",
          "477:  return nil",
          "478: }",
          "480: func ParseImageTag(imageTag string) (*ClientVersion, *ClientVersion, error) {",
          "481:  if imageTag == common.NightlyTag {",
          "482:   return &ClientVersion{0, 0, 0, common.NightlyTag}, &ClientVersion{0, 0, 0, common.NightlyTag}, nil",
          "483:  }",
          "484:  versions := strings.Split(imageTag, \"-\")",
          "485:  if len(versions) < 2 {",
          "486:   return nil, nil, fmt.Errorf(\"can not parse version from image tag: %s\", imageTag)",
          "487:  }",
          "489:  ceVersion, err := parseVersion(versions[0])",
          "490:  if err != nil {",
          "491:   return nil, nil, err",
          "492:  }",
          "493:  eeVersion, err := parseVersion(versions[1])",
          "494:  if err != nil {",
          "495:   return nil, nil, err",
          "496:  }",
          "497:  return ceVersion, eeVersion, nil",
          "498: }",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/transform_fuse_test.go||pkg/ddc/juicefs/transform_fuse_test.go": [
          "File: pkg/ddc/juicefs/transform_fuse_test.go -> pkg/ddc/juicefs/transform_fuse_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"encoding/base64\"",
          "21:  \"testing\"",
          "23:  \"github.com/go-logr/logr\"",
          "29:  corev1 \"k8s.io/api/core/v1\"",
          "30:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "31:  \"k8s.io/apimachinery/pkg/runtime\"",
          "33:  \"github.com/fluid-cloudnative/fluid/pkg/utils/fake\"",
          "35:  datav1alpha1 \"github.com/fluid-cloudnative/fluid/api/v1alpha1\"",
          "",
          "[Removed Lines]",
          "25:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
          "27:  \"k8s.io/apimachinery/pkg/api/resource\"",
          "",
          "[Added Lines]",
          "21:  \"reflect\"",
          "26:  \"k8s.io/apimachinery/pkg/api/resource\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:  }",
          "823:  return len(diff) == 0",
          "824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825: func TestJuiceFSEngine_getQuota(t *testing.T) {",
          "826:  type args struct {",
          "827:   v string",
          "828:  }",
          "829:  tests := []struct {",
          "830:   name    string",
          "831:   args    args",
          "832:   want    int64",
          "833:   wantErr bool",
          "834:  }{",
          "835:   {",
          "836:    name: \"test-1Gi\",",
          "837:    args: args{",
          "838:     v: \"1Gi\",",
          "839:    },",
          "840:    want:    1,",
          "841:    wantErr: false,",
          "842:   },",
          "843:   {",
          "844:    name: \"test-10Gi\",",
          "845:    args: args{",
          "846:     v: \"10Gi\",",
          "847:    },",
          "848:    want:    10,",
          "849:    wantErr: false,",
          "850:   },",
          "851:   {",
          "852:    name: \"test-1Mi\",",
          "853:    args: args{",
          "854:     v: \"1Mi\",",
          "855:    },",
          "856:    want:    0,",
          "857:    wantErr: true,",
          "858:   },",
          "859:  }",
          "860:  for _, tt := range tests {",
          "861:   t.Run(tt.name, func(t *testing.T) {",
          "862:    j := &JuiceFSEngine{}",
          "863:    got, err := j.getQuota(tt.args.v)",
          "864:    if (err != nil) != tt.wantErr {",
          "865:     t.Errorf(\"getQuota() error = %v, wantErr %v\", err, tt.wantErr)",
          "866:     return",
          "867:    }",
          "868:    if got != tt.want {",
          "869:     t.Errorf(\"getQuota() got = %v, want %v\", got, tt.want)",
          "870:    }",
          "871:   })",
          "872:  }",
          "873: }",
          "875: func TestParseImageTag(t *testing.T) {",
          "876:  type args struct {",
          "877:   imageTag string",
          "878:  }",
          "879:  tests := []struct {",
          "880:   name    string",
          "881:   args    args",
          "882:   want    *ClientVersion",
          "883:   want1   *ClientVersion",
          "884:   wantErr bool",
          "885:  }{",
          "886:   {",
          "887:    name: \"test1\",",
          "888:    args: args{",
          "889:     imageTag: \"v1.0.4-4.9.0\",",
          "890:    },",
          "891:    want: &ClientVersion{",
          "892:     Major: 1,",
          "893:     Minor: 0,",
          "894:     Patch: 4,",
          "895:     Tag:   \"\",",
          "896:    },",
          "897:    want1: &ClientVersion{",
          "898:     Major: 4,",
          "899:     Minor: 9,",
          "900:     Patch: 0,",
          "901:     Tag:   \"\",",
          "902:    },",
          "903:    wantErr: false,",
          "904:   },",
          "905:   {",
          "906:    name: \"test2\",",
          "907:    args: args{",
          "908:     imageTag: \"nightly\",",
          "909:    },",
          "910:    want: &ClientVersion{",
          "911:     Major: 0,",
          "912:     Minor: 0,",
          "913:     Patch: 0,",
          "914:     Tag:   \"nightly\",",
          "915:    },",
          "916:    want1: &ClientVersion{",
          "917:     Major: 0,",
          "918:     Minor: 0,",
          "919:     Patch: 0,",
          "920:     Tag:   \"nightly\",",
          "921:    },",
          "922:    wantErr: false,",
          "923:   },",
          "924:  }",
          "925:  for _, tt := range tests {",
          "926:   t.Run(tt.name, func(t *testing.T) {",
          "927:    got, got1, err := ParseImageTag(tt.args.imageTag)",
          "928:    if (err != nil) != tt.wantErr {",
          "929:     t.Errorf(\"ParseImageTag() error = %v, wantErr %v\", err, tt.wantErr)",
          "930:     return",
          "931:    }",
          "932:    if !reflect.DeepEqual(got, tt.want) {",
          "933:     t.Errorf(\"ParseImageTag() got = %v, want %v\", got, tt.want)",
          "934:    }",
          "935:    if !reflect.DeepEqual(got1, tt.want1) {",
          "936:     t.Errorf(\"ParseImageTag() got1 = %v, want %v\", got1, tt.want1)",
          "937:    }",
          "938:   })",
          "939:  }",
          "940: }",
          "942: func TestClientVersion_LessThan(t *testing.T) {",
          "943:  type fields struct {",
          "944:   Major int",
          "945:   Minor int",
          "946:   Patch int",
          "947:   Tag   string",
          "948:  }",
          "949:  type args struct {",
          "950:   other *ClientVersion",
          "951:  }",
          "952:  tests := []struct {",
          "953:   name   string",
          "954:   fields fields",
          "955:   args   args",
          "956:   want   bool",
          "957:  }{",
          "958:   {",
          "959:    name: \"less\",",
          "960:    fields: fields{",
          "961:     Major: 1,",
          "962:     Minor: 0,",
          "963:     Patch: 0,",
          "964:     Tag:   \"\",",
          "965:    },",
          "966:    args: args{",
          "967:     other: &ClientVersion{",
          "968:      Major: 1,",
          "969:      Minor: 0,",
          "970:      Patch: 1,",
          "971:      Tag:   \"\",",
          "972:     },",
          "973:    },",
          "974:    want: true,",
          "975:   },",
          "976:   {",
          "977:    name: \"more\",",
          "978:    fields: fields{",
          "979:     Major: 1,",
          "980:     Minor: 0,",
          "981:     Patch: 0,",
          "982:     Tag:   \"\",",
          "983:    },",
          "984:    args: args{",
          "985:     other: &ClientVersion{",
          "986:      Major: 0,",
          "987:      Minor: 1,",
          "988:      Patch: 0,",
          "989:      Tag:   \"\",",
          "990:     },",
          "991:    },",
          "992:    want: false,",
          "993:   },",
          "994:   {",
          "995:    name: \"nightly\",",
          "996:    fields: fields{",
          "997:     Tag: \"nightly\",",
          "998:    },",
          "999:    args: args{",
          "1000:     other: &ClientVersion{",
          "1001:      Major: 1,",
          "1002:      Minor: 0,",
          "1003:      Patch: 0,",
          "1004:      Tag:   \"\",",
          "1005:     },",
          "1006:    },",
          "1007:    want: false,",
          "1008:   },",
          "1009:  }",
          "1010:  for _, tt := range tests {",
          "1011:   t.Run(tt.name, func(t *testing.T) {",
          "1012:    v := &ClientVersion{",
          "1013:     Major: tt.fields.Major,",
          "1014:     Minor: tt.fields.Minor,",
          "1015:     Patch: tt.fields.Patch,",
          "1016:     Tag:   tt.fields.Tag,",
          "1017:    }",
          "1018:    if got := v.LessThan(tt.args.other); got != tt.want {",
          "1019:     t.Errorf(\"LessThan() = %v, want %v\", got, tt.want)",
          "1020:    }",
          "1021:   })",
          "1022:  }",
          "1023: }",
          "1025: func TestJuiceFSEngine_genQuotaCmd(t *testing.T) {",
          "1026:  type args struct {",
          "1027:   value *JuiceFS",
          "1028:   mount datav1alpha1.Mount",
          "1029:  }",
          "1030:  tests := []struct {",
          "1031:   name         string",
          "1032:   args         args",
          "1033:   wantErr      bool",
          "1034:   wantQuotaCmd string",
          "1035:  }{",
          "1036:   {",
          "1037:    name: \"test-ce\",",
          "1038:    args: args{",
          "1039:     value: &JuiceFS{",
          "1040:      Edition: CommunityEdition,",
          "1041:      Configs: Configs{},",
          "1042:      Source:  \"redis://127.0.0.1:6379\",",
          "1043:      Fuse: Fuse{",
          "1044:       ImageTag: \"v1.1.4-4.9.2\",",
          "1045:       SubPath:  \"/demo\",",
          "1046:      },",
          "1047:     },",
          "1048:     mount: datav1alpha1.Mount{",
          "1049:      Options: map[string]string{",
          "1050:       \"quota\": \"1Gi\",",
          "1051:      },",
          "1052:     },",
          "1053:    },",
          "1054:    wantErr:      false,",
          "1055:    wantQuotaCmd: \"/usr/local/bin/juicefs quota set redis://127.0.0.1:6379 --path /demo --capacity 1\",",
          "1056:   },",
          "1057:   {",
          "1058:    name: \"test-ee\",",
          "1059:    args: args{",
          "1060:     value: &JuiceFS{",
          "1061:      Edition: EnterpriseEdition,",
          "1062:      Configs: Configs{},",
          "1063:      Source:  \"test\",",
          "1064:      Fuse: Fuse{",
          "1065:       ImageTag: \"v1.1.4-4.9.2\",",
          "1066:       SubPath:  \"/demo\",",
          "1067:      },",
          "1068:     },",
          "1069:     mount: datav1alpha1.Mount{",
          "1070:      Options: map[string]string{",
          "1071:       \"quota\": \"1Gi\",",
          "1072:      },",
          "1073:     },",
          "1074:    },",
          "1075:    wantErr:      false,",
          "1076:    wantQuotaCmd: \"/usr/bin/juicefs quota set test --path /demo --capacity 1\",",
          "1077:   },",
          "1078:   {",
          "1079:    name: \"test-ce-err\",",
          "1080:    args: args{",
          "1081:     value: &JuiceFS{",
          "1082:      Edition: CommunityEdition,",
          "1083:      Configs: Configs{},",
          "1084:      Source:  \"test\",",
          "1085:      Fuse: Fuse{",
          "1086:       ImageTag: \"v1.0.4-4.9.1\",",
          "1087:       SubPath:  \"/demo\",",
          "1088:      },",
          "1089:     },",
          "1090:     mount: datav1alpha1.Mount{",
          "1091:      Options: map[string]string{",
          "1092:       \"quota\": \"1Gi\",",
          "1093:      },",
          "1094:     },",
          "1095:    },",
          "1096:    wantErr: true,",
          "1097:   },",
          "1098:   {",
          "1099:    name: \"test-ee-err\",",
          "1100:    args: args{",
          "1101:     value: &JuiceFS{",
          "1102:      Edition: EnterpriseEdition,",
          "1103:      Configs: Configs{},",
          "1104:      Source:  \"test\",",
          "1105:      Fuse: Fuse{",
          "1106:       ImageTag: \"v1.1.4-4.9.1\",",
          "1107:       SubPath:  \"/demo\",",
          "1108:      },",
          "1109:     },",
          "1110:     mount: datav1alpha1.Mount{",
          "1111:      Options: map[string]string{",
          "1112:       \"quota\": \"1Gi\",",
          "1113:      },",
          "1114:     },",
          "1115:    },",
          "1116:    wantErr: true,",
          "1117:   },",
          "1118:   {",
          "1119:    name: \"test-no-subpath\",",
          "1120:    args: args{",
          "1121:     value: &JuiceFS{",
          "1122:      Edition: CommunityEdition,",
          "1123:      Configs: Configs{},",
          "1124:      Source:  \"test\",",
          "1125:      Fuse: Fuse{",
          "1126:       ImageTag: \"v1.1.4-4.9.2\",",
          "1127:      },",
          "1128:     },",
          "1129:     mount: datav1alpha1.Mount{",
          "1130:      Options: map[string]string{",
          "1131:       \"quota\": \"1Gi\",",
          "1132:      },",
          "1133:     },",
          "1134:    },",
          "1135:    wantErr: true,",
          "1136:   },",
          "1137:  }",
          "1138:  for _, tt := range tests {",
          "1139:   t.Run(tt.name, func(t *testing.T) {",
          "1140:    j := &JuiceFSEngine{}",
          "1141:    if err := j.genQuotaCmd(tt.args.value, tt.args.mount); (err != nil) != tt.wantErr {",
          "1142:     t.Errorf(\"genQuotaCmd() error = %v, wantErr %v\", err, tt.wantErr)",
          "1143:    }",
          "1144:    if tt.wantQuotaCmd != tt.args.value.Configs.QuotaCmd {",
          "1145:     t.Errorf(\"genQuotaCmd() got cmd = %v, want %v\", tt.args.value.Configs.QuotaCmd, tt.wantQuotaCmd)",
          "1146:    }",
          "1147:   })",
          "1148:  }",
          "1149: }",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/type.go||pkg/ddc/juicefs/type.go": [
          "File: pkg/ddc/juicefs/type.go -> pkg/ddc/juicefs/type.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  TokenSecretKey     string `json:\"tokenSecretKey,omitempty\"`",
          "57:  Storage            string `json:\"storage,omitempty\"`",
          "58:  FormatCmd          string `json:\"formatCmd,omitempty\"`",
          "59: }",
          "61: type Worker struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:  QuotaCmd           string `json:\"quotaCmd,omitempty\"`",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/utils.go||pkg/ddc/juicefs/utils.go": [
          "File: pkg/ddc/juicefs/utils.go -> pkg/ddc/juicefs/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:  return int(port), nil",
          "307: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: func parseVersion(version string) (*ClientVersion, error) {",
          "310:  if version == common.NightlyTag {",
          "311:   return &ClientVersion{",
          "312:    Tag: common.NightlyTag,",
          "313:   }, nil",
          "314:  }",
          "315:  re := regexp.MustCompile(`^v?(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$`)",
          "316:  matches := re.FindStringSubmatch(strings.TrimSpace(version))",
          "317:  if matches == nil || len(matches) < 4 {",
          "318:   return nil, fmt.Errorf(\"invalid version string: %s\", version)",
          "319:  }",
          "320:  major, err := strconv.Atoi(matches[1])",
          "321:  if err != nil {",
          "322:   return nil, fmt.Errorf(\"invalid major version: %s\", matches[1])",
          "323:  }",
          "324:  minor, err := strconv.Atoi(matches[2])",
          "325:  if err != nil {",
          "326:   return nil, fmt.Errorf(\"invalid minor version: %s\", matches[2])",
          "327:  }",
          "328:  patch, err := strconv.Atoi(matches[3])",
          "329:  if err != nil {",
          "330:   return nil, fmt.Errorf(\"invalid patch version: %s\", matches[3])",
          "331:  }",
          "332:  var tag string",
          "333:  if len(matches) > 4 {",
          "334:   tag = matches[4]",
          "335:  }",
          "337:  return &ClientVersion{",
          "338:   Major: major,",
          "339:   Minor: minor,",
          "340:   Patch: patch,",
          "341:   Tag:   tag,",
          "342:  }, nil",
          "343: }",
          "345: type ClientVersion struct {",
          "346:  Major, Minor, Patch int",
          "347:  Tag                 string",
          "348: }",
          "350: func (v *ClientVersion) LessThan(other *ClientVersion) bool {",
          "351:  if v.Tag == common.NightlyTag {",
          "352:   return false",
          "353:  }",
          "354:  if v.Major < other.Major {",
          "355:   return true",
          "356:  }",
          "357:  if v.Major > other.Major {",
          "358:   return false",
          "359:  }",
          "360:  if v.Minor < other.Minor {",
          "361:   return true",
          "362:  }",
          "363:  if v.Minor > other.Minor {",
          "364:   return false",
          "365:  }",
          "366:  if v.Patch < other.Patch {",
          "367:   return true",
          "368:  }",
          "369:  return false",
          "370: }",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/utils_test.go||pkg/ddc/juicefs/utils_test.go": [
          "File: pkg/ddc/juicefs/utils_test.go -> pkg/ddc/juicefs/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1029:   })",
          "1030:  }",
          "1031: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033: func Test_parseVersion(t *testing.T) {",
          "1034:  type args struct {",
          "1035:   version string",
          "1036:  }",
          "1037:  var tests = []struct {",
          "1038:   name    string",
          "1039:   args    args",
          "1040:   want    *ClientVersion",
          "1041:   wantErr bool",
          "1042:  }{",
          "1043:   {",
          "1044:    name: \"test1\",",
          "1045:    args: args{",
          "1046:     version: \"v1.0.0\",",
          "1047:    },",
          "1048:    want: &ClientVersion{",
          "1049:     Major: 1,",
          "1050:     Minor: 0,",
          "1051:     Patch: 0,",
          "1052:     Tag:   \"\",",
          "1053:    },",
          "1054:    wantErr: false,",
          "1055:   },",
          "1056:   {",
          "1057:    name: \"test2\",",
          "1058:    args: args{",
          "1059:     version: \"nightly\",",
          "1060:    },",
          "1061:    want: &ClientVersion{",
          "1062:     Tag: \"nightly\",",
          "1063:    },",
          "1064:    wantErr: false,",
          "1065:   },",
          "1066:   {",
          "1067:    name: \"test3\",",
          "1068:    args: args{",
          "1069:     version: \"4.9.0\",",
          "1070:    },",
          "1071:    want: &ClientVersion{",
          "1072:     Major: 4,",
          "1073:     Minor: 9,",
          "1074:     Patch: 0,",
          "1075:     Tag:   \"\",",
          "1076:    },",
          "1077:    wantErr: false,",
          "1078:   },",
          "1079:   {",
          "1080:    name: \"test4\",",
          "1081:    args: args{",
          "1082:     version: \"1.0.0-rc1\",",
          "1083:    },",
          "1084:    want: &ClientVersion{",
          "1085:     Major: 1,",
          "1086:     Minor: 0,",
          "1087:     Patch: 0,",
          "1088:     Tag:   \"rc1\",",
          "1089:    },",
          "1090:    wantErr: false,",
          "1091:   },",
          "1092:  }",
          "1093:  for _, tt := range tests {",
          "1094:   t.Run(tt.name, func(t *testing.T) {",
          "1095:    got, err := parseVersion(tt.args.version)",
          "1096:    if (err != nil) != tt.wantErr {",
          "1097:     t.Errorf(\"parseVersion() error = %v, wantErr %v\", err, tt.wantErr)",
          "1098:     return",
          "1099:    }",
          "1100:    if !reflect.DeepEqual(got, tt.want) {",
          "1101:     t.Errorf(\"parseVersion() got = %v, want %v\", got, tt.want)",
          "1102:    }",
          "1103:   })",
          "1104:  }",
          "1105: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02b7cd8b79a26092df95d625664994bda485c722",
      "candidate_info": {
        "commit_hash": "02b7cd8b79a26092df95d625664994bda485c722",
        "repo": "fluid-cloudnative/fluid",
        "commit_url": "https://github.com/fluid-cloudnative/fluid/commit/02b7cd8b79a26092df95d625664994bda485c722",
        "files": [
          "charts/juicefs/Chart.yaml",
          "pkg/ddc/juicefs/operations/base.go",
          "pkg/ddc/juicefs/operations/base_test.go",
          "pkg/ddc/juicefs/transform.go",
          "pkg/ddc/juicefs/transform_fuse.go",
          "pkg/ddc/juicefs/ufs_test.go",
          "pkg/utils/security/escape.go",
          "pkg/utils/security/escape_test.go"
        ],
        "message": "Fix JuicefsRuntime: escape customized string before constructing commands (#3761)\n\n* add escapeBashStr\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* avoid bash -c in operations\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* fix GetUsedSpace and GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* move EscapeBashStr to pkg/utils/security\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* add left\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* resume GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* Escape value.Configs.Name\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n* Fix unit tests\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n* Upgrade juicefs helm chart version to 0.2.16\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n---------\n\nSigned-off-by: xixi <hexilee@juicedata.io>\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\nCo-authored-by: xixi <hexilee@juicedata.io>\nCo-authored-by: trafalgarzzz <trafalgarz@outlook.com>",
        "before_after_code_files": [
          "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
          "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
          "pkg/ddc/juicefs/transform.go||pkg/ddc/juicefs/transform.go",
          "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
          "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
          "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
          "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
            "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
            "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
            "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
            "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
            "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
          ],
          "candidate": [
            "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
            "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
            "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
            "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
            "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
            "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go": [
          "File: pkg/ddc/juicefs/operations/base.go -> pkg/ddc/juicefs/operations/base.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"github.com/fluid-cloudnative/fluid/pkg/utils/cmdguard\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"",
          "31: )",
          "33: type JuiceFileUtils struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: func (j JuiceFileUtils) GetFileCount(juiceSubPath string) (fileCount int64, err error) {",
          "114:  var (",
          "117:   command = []string{\"bash\", \"-c\", strs}",
          "118:   stdout  string",
          "119:   stderr  string",
          "120:  )",
          "122:  stdout, stderr, err = j.exec(command)",
          "123:  if err != nil {",
          "124:   err = fmt.Errorf(\"execute command %v with expectedErr: %v stdout %s and stderr %s\", command, err, stdout, stderr)",
          "",
          "[Removed Lines]",
          "116:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", juiceSubPath)",
          "",
          "[Added Lines]",
          "117:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", security.EscapeBashStr(juiceSubPath))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249: }",
          "253: func (j JuiceFileUtils) GetUsedSpace(juicefsPath string) (usedSpace int64, err error) {",
          "254:  var (",
          "257:   stdout  string",
          "258:   stderr  string",
          "259:  )",
          "",
          "[Removed Lines]",
          "255:   strs    = fmt.Sprintf(`df --block-size=1 |grep %s`, juicefsPath)",
          "256:   command = []string{\"bash\", \"-c\", strs}",
          "",
          "[Added Lines]",
          "255:   command = []string{\"df\", \"--block-size=1\"}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:   return",
          "265:  }",
          "270:  data := strings.Fields(str)",
          "271:  if len(data) != 6 {",
          "272:   err = fmt.Errorf(\"failed to parse %s in GetUsedSpace method\", data)",
          "",
          "[Removed Lines]",
          "268:  str := strings.TrimSuffix(stdout, \"\\n\")",
          "",
          "[Added Lines]",
          "266:  var str string",
          "267:  lines := strings.Split(stdout, \"\\n\")",
          "268:  for _, line := range lines {",
          "269:   if strings.Contains(line, juicefsPath) {",
          "270:    str = line",
          "271:    break",
          "272:   }",
          "273:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:   j.log.Error(errors.New(\"the key not in  metadatafile\"), \"key\", key)",
          "355:  }",
          "356:  var (",
          "359:   stdout  string",
          "360:   stderr  string",
          "361:  )",
          "",
          "[Removed Lines]",
          "357:   str     = \"sed -n '\" + line + \"' \" + filename",
          "358:   command = []string{\"bash\", \"-c\", str}",
          "",
          "[Added Lines]",
          "362:   str     = \"'\" + line + \"' \" + filename",
          "363:   command = []string{\"sed\", \"-n\", str}",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go": [
          "File: pkg/ddc/juicefs/operations/base_test.go -> pkg/ddc/juicefs/operations/base_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:   t.Fatal(err.Error())",
          "448:  }",
          "449:  a := &JuiceFileUtils{log: fake.NullLogger()}",
          "451:  if err == nil {",
          "452:   t.Error(\"check failure, want err, got nil\")",
          "453:  }",
          "",
          "[Removed Lines]",
          "450:  _, err = a.GetUsedSpace(\"/tmp\")",
          "",
          "[Added Lines]",
          "450:  _, err = a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:  if err != nil {",
          "458:   t.Fatal(err.Error())",
          "459:  }",
          "461:  if err != nil {",
          "462:   t.Errorf(\"check failure, want nil, got err: %v\", err)",
          "463:  }",
          "",
          "[Removed Lines]",
          "460:  usedSpace, err := a.GetUsedSpace(\"/tmp\")",
          "",
          "[Added Lines]",
          "460:  usedSpace, err := a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/transform.go||pkg/ddc/juicefs/transform.go": [
          "File: pkg/ddc/juicefs/transform.go -> pkg/ddc/juicefs/transform.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  \"github.com/fluid-cloudnative/fluid/pkg/ddc/base/portallocator\"",
          "29:  \"github.com/fluid-cloudnative/fluid/pkg/utils\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils/docker\"",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/transfromer\"",
          "32: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:    }",
          "203:    workerOptionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)",
          "204:   }",
          "206:  } else {",
          "207:   workerOptionMap[\"foreground\"] = \"\"",
          "",
          "[Removed Lines]",
          "205:   mountArgsWorker = []string{common.JuiceFSCeMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genArgs(workerOptionMap), \",\")}",
          "",
          "[Added Lines]",
          "206:   mountArgsWorker = []string{",
          "207:    common.JuiceFSCeMountPath,",
          "208:    value.Source,",
          "209:    security.EscapeBashStr(value.Worker.MountPath),",
          "210:    \"-o\",",
          "211:    security.EscapeBashStr(strings.Join(genArgs(workerOptionMap), \",\")),",
          "212:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:   if _, ok := workerOptionMap[\"cache-group\"]; ok {",
          "215:    cacheGroup = workerOptionMap[\"cache-group\"]",
          "216:   }",
          "217:   workerOptionMap[\"cache-group\"] = cacheGroup",
          "218:   delete(workerOptionMap, \"no-sharing\")",
          "221:  }",
          "223:  value.Worker.Command = strings.Join(mountArgsWorker, \" \")",
          "225: }",
          "227: func (j *JuiceFSEngine) transformPlacementMode(dataset *datav1alpha1.Dataset, value *JuiceFS) {",
          "",
          "[Removed Lines]",
          "213:   cacheGroup := fmt.Sprintf(\"%s-%s\", j.namespace, value.FullnameOverride)",
          "220:   mountArgsWorker = []string{common.JuiceFSMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genArgs(workerOptionMap), \",\")}",
          "224:  value.Worker.StatCmd = \"stat -c %i \" + value.Worker.MountPath",
          "",
          "[Added Lines]",
          "220:   cacheGroup := fmt.Sprintf(\"%s-%s\", j.namespace, security.EscapeBashStr(value.FullnameOverride))",
          "227:   mountArgsWorker = []string{",
          "228:    common.JuiceFSMountPath,",
          "229:    value.Source,",
          "230:    security.EscapeBashStr(value.Worker.MountPath),",
          "231:    \"-o\",",
          "232:    security.EscapeBashStr(strings.Join(genArgs(workerOptionMap), \",\")),",
          "233:   }",
          "237:  value.Worker.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Worker.MountPath)",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go": [
          "File: pkg/ddc/juicefs/transform_fuse.go -> pkg/ddc/juicefs/transform_fuse.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  datav1alpha1 \"github.com/fluid-cloudnative/fluid/api/v1alpha1\"",
          "29:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils\"",
          "31: )",
          "33: func (j *JuiceFSEngine) transformFuse(runtime *datav1alpha1.JuiceFSRuntime, dataset *datav1alpha1.Dataset, value *JuiceFS) (err error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:  }",
          "37:  mount := dataset.Spec.Mounts[0]",
          "42:  image := runtime.Spec.Fuse.Image",
          "",
          "[Removed Lines]",
          "39:  value.Configs.Name = mount.Name",
          "",
          "[Added Lines]",
          "40:  value.Configs.Name = security.EscapeBashStr(mount.Name)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129: func (j *JuiceFSEngine) genValue(mount datav1alpha1.Mount, tiredStoreLevel *datav1alpha1.Level, value *JuiceFS,",
          "130:  sharedOptions map[string]string, sharedEncryptOptions []datav1alpha1.EncryptOption) (map[string]string, error) {",
          "131:  options := make(map[string]string)",
          "133:  value.Configs.EncryptEnvOptions = make([]EncryptEnvOption, 0)",
          "134:  source := \"\"",
          "",
          "[Removed Lines]",
          "132:  value.Configs.Name = mount.Name",
          "",
          "[Added Lines]",
          "133:  value.Configs.Name = security.EscapeBashStr(mount.Name)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:  }",
          "240:  if source == \"\" {",
          "242:  }",
          "",
          "[Removed Lines]",
          "241:   source = mount.Name",
          "",
          "[Added Lines]",
          "242:   source = security.EscapeBashStr(mount.Name)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:    }",
          "356:    optionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)",
          "357:   }",
          "359:  } else {",
          "360:   if readonly {",
          "361:    optionMap[\"attrcacheto\"] = \"7200\"",
          "",
          "[Removed Lines]",
          "358:   mountArgs = []string{common.JuiceFSCeMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genArgs(optionMap), \",\")}",
          "",
          "[Added Lines]",
          "359:   mountArgs = []string{",
          "360:    common.JuiceFSCeMountPath,",
          "361:    value.Source,",
          "362:    security.EscapeBashStr(value.Fuse.MountPath),",
          "363:    \"-o\",",
          "364:    security.EscapeBashStr(strings.Join(genArgs(optionMap), \",\")),",
          "365:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:   optionMap[\"cache-group\"] = cacheGroup",
          "375:   optionMap[\"no-sharing\"] = \"\"",
          "378:  }",
          "380:  value.Fuse.Command = strings.Join(mountArgs, \" \")",
          "382:  return nil",
          "383: }",
          "",
          "[Removed Lines]",
          "377:   mountArgs = []string{common.JuiceFSMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genArgs(optionMap), \",\")}",
          "381:  value.Fuse.StatCmd = \"stat -c %i \" + value.Fuse.MountPath",
          "",
          "[Added Lines]",
          "384:   mountArgs = []string{",
          "385:    common.JuiceFSMountPath,",
          "386:    value.Source,",
          "387:    security.EscapeBashStr(value.Fuse.MountPath),",
          "388:    \"-o\",",
          "389:    security.EscapeBashStr(strings.Join(genArgs(optionMap), \",\")),",
          "390:   }",
          "394:  value.Fuse.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Fuse.MountPath)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408:   for _, option := range *config {",
          "409:    o := strings.TrimSpace(option)",
          "410:    if o != \"\" {",
          "412:    }",
          "413:   }",
          "414:  }",
          "",
          "[Removed Lines]",
          "411:     args = append(args, fmt.Sprintf(\"--%s\", o))",
          "",
          "[Added Lines]",
          "424:     args = append(args, fmt.Sprintf(\"--%s\", security.EscapeBashStr(o)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424:    args = append(args, \"--no-update\")",
          "425:   }",
          "426:   if value.Configs.Storage != \"\" {",
          "428:   }",
          "429:   if value.Configs.Bucket != \"\" {",
          "431:   }",
          "432:   formatOpts := ceFilter.filterOption(options)",
          "433:   for k, v := range formatOpts {",
          "435:   }",
          "436:   encryptOptions := ceFilter.filterEncryptEnvOptions(value.Configs.EncryptEnvOptions)",
          "437:   for _, v := range encryptOptions {",
          "439:   }",
          "441:   cmd := append([]string{common.JuiceCeCliPath, \"format\"}, args...)",
          "442:   value.Configs.FormatCmd = strings.Join(cmd, \" \")",
          "443:   return",
          "",
          "[Removed Lines]",
          "427:    args = append(args, fmt.Sprintf(\"--storage=%s\", value.Configs.Storage))",
          "430:    args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
          "434:    args = append(args, fmt.Sprintf(\"--%s=%s\", k, v))",
          "438:    args = append(args, fmt.Sprintf(\"--%s=${%s}\", v.Name, v.EnvName))",
          "440:   args = append(args, value.Source, value.Configs.Name)",
          "",
          "[Added Lines]",
          "440:    args = append(args, fmt.Sprintf(\"--storage=%s\", security.EscapeBashStr(value.Configs.Storage)))",
          "443:    args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
          "447:    args = append(args, fmt.Sprintf(\"--%s=%s\", security.EscapeBashStr(k), security.EscapeBashStr(v)))",
          "451:    args = append(args, fmt.Sprintf(\"--%s=${%s}\", security.EscapeBashStr(v.Name), v.EnvName))",
          "453:   args = append(args, value.Source, security.EscapeBashStr(value.Configs.Name))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "455:   args = append(args, \"--secretkey=${SECRET_KEY}\")",
          "456:  }",
          "457:  if value.Configs.Bucket != \"\" {",
          "459:  }",
          "460:  formatOpts := eeFilter.filterOption(options)",
          "461:  for k, v := range formatOpts {",
          "463:  }",
          "464:  encryptOptions := eeFilter.filterEncryptEnvOptions(value.Configs.EncryptEnvOptions)",
          "465:  for _, v := range encryptOptions {",
          "467:  }",
          "468:  args = append(args, value.Source)",
          "469:  cmd := append([]string{common.JuiceCliPath, \"auth\"}, args...)",
          "",
          "[Removed Lines]",
          "458:   args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
          "462:   args = append(args, fmt.Sprintf(\"--%s=%s\", k, v))",
          "466:   args = append(args, fmt.Sprintf(\"--%s=${%s}\", v.Name, v.EnvName))",
          "",
          "[Added Lines]",
          "471:   args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
          "475:   args = append(args, fmt.Sprintf(\"--%s=%s\", security.EscapeBashStr(k), security.EscapeBashStr(v)))",
          "479:   args = append(args, fmt.Sprintf(\"--%s=${%s}\", security.EscapeBashStr(v.Name), v.EnvName))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "499:    if value.Edition == CommunityEdition {",
          "503:     return nil",
          "504:    }",
          "507:    cli := common.JuiceCliPath",
          "509:    return nil",
          "510:   }",
          "511:  }",
          "",
          "[Removed Lines]",
          "502:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, value.Fuse.SubPath, qs)",
          "508:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, value.Fuse.SubPath, qs)",
          "",
          "[Added Lines]",
          "515:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
          "521:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go": [
          "File: pkg/ddc/juicefs/ufs_test.go -> pkg/ddc/juicefs/ufs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: }",
          "40: func mockExecCommandInContainerForUsedStorageBytes() (stdout string, stderr string, err error) {",
          "42:  return r, \"\", nil",
          "43: }",
          "",
          "[Removed Lines]",
          "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /data`",
          "",
          "[Added Lines]",
          "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /juicefs/juicefs/test/juicefs-fuse`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  statefulSet := &appsv1.StatefulSet{",
          "47:   ObjectMeta: metav1.ObjectMeta{",
          "48:    Name:      \"test-worker\",",
          "50:   },",
          "51:   Spec: appsv1.StatefulSetSpec{",
          "52:    Selector: &metav1.LabelSelector{",
          "",
          "[Removed Lines]",
          "49:    Namespace: \"fluid\",",
          "",
          "[Added Lines]",
          "49:    Namespace: \"juicefs\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:  var pod = &corev1.Pod{",
          "58:   ObjectMeta: metav1.ObjectMeta{",
          "59:    Name:      \"test-work-0\",",
          "61:    Labels:    map[string]string{\"a\": \"b\"},",
          "62:   },",
          "63:   Status: corev1.PodStatus{",
          "",
          "[Removed Lines]",
          "60:    Namespace: \"fluid\",",
          "",
          "[Added Lines]",
          "60:    Namespace: \"juicefs\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:    name: \"test\",",
          "94:    fields: fields{",
          "95:     name:      \"test\",",
          "97:     runtime: &datav1alpha1.JuiceFSRuntime{",
          "98:      ObjectMeta: metav1.ObjectMeta{",
          "99:       Name:      \"test\",",
          "101:      },",
          "102:     },",
          "103:    },",
          "",
          "[Removed Lines]",
          "96:     namespace: \"fluid\",",
          "100:       Namespace: \"fluid\",",
          "",
          "[Added Lines]",
          "96:     namespace: \"juicefs\",",
          "100:       Namespace: \"juicefs\",",
          "",
          "---------------"
        ],
        "pkg/utils/security/escape.go||pkg/utils/security/escape.go": [
          "File: pkg/utils/security/escape.go -> pkg/utils/security/escape.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2023 The Fluid Authors.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: package security",
          "19: import (",
          "20:  \"fmt\"",
          "21:  \"strings\"",
          "22: )",
          "29: func EscapeBashStr(s string) string {",
          "30:  if !containsOne(s, []rune{'$', '`', '&', ';', '>', '|', '(', ')'}) {",
          "31:   return s",
          "32:  }",
          "33:  s = strings.ReplaceAll(s, `\\`, `\\\\`)",
          "34:  s = strings.ReplaceAll(s, `'`, `\\'`)",
          "35:  if strings.Contains(s, `\\\\`) {",
          "36:   s = strings.ReplaceAll(s, `\\\\\\\\`, `\\\\`)",
          "37:   s = strings.ReplaceAll(s, `\\\\\\'`, `\\'`)",
          "38:   s = strings.ReplaceAll(s, `\\\\\"`, `\\\"`)",
          "39:   s = strings.ReplaceAll(s, `\\\\a`, `\\a`)",
          "40:   s = strings.ReplaceAll(s, `\\\\b`, `\\b`)",
          "41:   s = strings.ReplaceAll(s, `\\\\e`, `\\e`)",
          "42:   s = strings.ReplaceAll(s, `\\\\E`, `\\E`)",
          "43:   s = strings.ReplaceAll(s, `\\\\n`, `\\n`)",
          "44:   s = strings.ReplaceAll(s, `\\\\r`, `\\r`)",
          "45:   s = strings.ReplaceAll(s, `\\\\t`, `\\t`)",
          "46:   s = strings.ReplaceAll(s, `\\\\v`, `\\v`)",
          "47:   s = strings.ReplaceAll(s, `\\\\?`, `\\?`)",
          "48:  }",
          "49:  return fmt.Sprintf(`$'%s'`, s)",
          "50: }",
          "52: func containsOne(target string, chars []rune) bool {",
          "53:  charMap := make(map[rune]bool, len(chars))",
          "54:  for _, c := range chars {",
          "55:   charMap[c] = true",
          "56:  }",
          "57:  for _, s := range target {",
          "58:   if charMap[s] {",
          "59:    return true",
          "60:   }",
          "61:  }",
          "62:  return false",
          "63: }",
          "",
          "---------------"
        ],
        "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go": [
          "File: pkg/utils/security/escape_test.go -> pkg/utils/security/escape_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2023 The Fluid Author.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: package security",
          "19: import \"testing\"",
          "21: func TestEscapeBashStr(t *testing.T) {",
          "22:  cases := [][]string{",
          "23:   {\"abc\", \"abc\"},",
          "24:   {\"test-volume\", \"test-volume\"},",
          "25:   {\"http://minio.kube-system:9000/minio/dynamic-ce\", \"http://minio.kube-system:9000/minio/dynamic-ce\"},",
          "26:   {\"$(cat /proc/self/status | grep CapEff > /test.txt)\", \"$'$(cat /proc/self/status | grep CapEff > /test.txt)'\"},",
          "27:   {\"hel`cat /proc/self/status`lo\", \"$'hel`cat /proc/self/status`lo'\"},",
          "28:   {\"'h'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
          "29:   {\"\\\\'h\\\\'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
          "30:   {\"$'h'el`cat /proc/self/status`lo\", \"$'$\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
          "31:   {\"hel\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
          "32:   {\"hel\\\\\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
          "33:   {\"hel\\\\'`cat /proc/self/status`lo\", \"$'hel\\\\'`cat /proc/self/status`lo'\"},",
          "34:  }",
          "35:  for _, c := range cases {",
          "36:   escaped := EscapeBashStr(c[0])",
          "37:   if escaped != c[1] {",
          "38:    t.Errorf(\"escapeBashVar(%s) = %s, want %s\", c[0], escaped, c[1])",
          "39:   }",
          "40:  }",
          "41: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}