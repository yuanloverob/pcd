{
  "cve_id": "CVE-2020-36282",
  "cve_desc": "JMS Client for RabbitMQ 1.x before 1.15.2 and 2.x before 2.2.0 is vulnerable to unsafe deserialization that can result in code execution via crafted StreamMessage data.",
  "repo": "rabbitmq/rabbitmq-jms-client",
  "patch_hash": "f647e5dbfe055a2ca8cbb16dd70f9d50d888b638",
  "patch_info": {
    "commit_hash": "f647e5dbfe055a2ca8cbb16dd70f9d50d888b638",
    "repo": "rabbitmq/rabbitmq-jms-client",
    "commit_url": "https://github.com/rabbitmq/rabbitmq-jms-client/pull/136/commits/f647e5dbfe055a2ca8cbb16dd70f9d50d888b638",
    "files": [
      "src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
      "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
      "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
      "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java"
    ],
    "message": "Use trusted packages in StreamMessage\n\nStreamMessage now uses the same \"white list\" mechanism as\nObjectMessage to avoid some arbitrary code execution on deserialization.\n\nEven though StreamMessage is supposed to handle only primitive types,\nit is still to possible to send a message that contains an arbitrary\nserializable instance. The consuming application application may\nthen execute code from this class on deserialization.\n\nThe fix consists in using the list of trusted packages that can be\nset at the connection factory level.\n\nFixes #135",
    "before_after_code_files": [
      "src/main/java/com/rabbitmq/jms/client/RMQMessage.java||src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
      "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java||src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
      "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
      "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/rabbitmq/jms/client/RMQMessage.java||src/main/java/com/rabbitmq/jms/client/RMQMessage.java": [
      "File: src/main/java/com/rabbitmq/jms/client/RMQMessage.java -> src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1146:     private static RMQMessage instantiateRmqMessage(String messageClass, List<String> trustedPackages) throws RMQJMSException {",
      "1147:         if(isRmqObjectMessageClass(messageClass)) {",
      "1148:             return instantiateRmqObjectMessageWithTrustedPackages(trustedPackages);",
      "1149:         } else {",
      "1150:             try {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:         } else if (isRmqStreamMessageClass(messageClass)) {",
      "1150:             return instantiateRmqStreamMessageWithTrustedPackages(trustedPackages);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1168:         return RMQObjectMessage.class.getName().equals(clazz);",
      "1169:     }",
      "1171:     private static RMQObjectMessage instantiateRmqObjectMessageWithTrustedPackages(List<String> trustedPackages) throws RMQJMSException {",
      "1172:         try {",
      "1175:             Constructor<?> constructor = messageClass.getConstructor(List.class);",
      "1177:         } catch (NoSuchMethodException e) {",
      "1178:             throw new RMQJMSException(e);",
      "1179:         } catch (InvocationTargetException e) {",
      "",
      "[Removed Lines]",
      "1174:             Class<?> messageClass = Class.forName(RMQObjectMessage.class.getName(), true, Thread.currentThread().getContextClassLoader());",
      "1176:             return (RMQObjectMessage) constructor.newInstance(trustedPackages);",
      "",
      "[Added Lines]",
      "1173:     private static boolean isRmqStreamMessageClass(String clazz) {",
      "1174:         return RMQStreamMessage.class.getName().equals(clazz);",
      "1175:     }",
      "1178:         return (RMQObjectMessage) instantiateRmqMessageWithTrustedPackages(RMQObjectMessage.class.getName(), trustedPackages);",
      "1179:     }",
      "1181:     private static RMQStreamMessage instantiateRmqStreamMessageWithTrustedPackages(List<String> trustedPackages) throws RMQJMSException {",
      "1182:         return (RMQStreamMessage) instantiateRmqMessageWithTrustedPackages(RMQStreamMessage.class.getName(), trustedPackages);",
      "1183:     }",
      "1185:     private static RMQMessage instantiateRmqMessageWithTrustedPackages(String messageClazz, List<String> trustedPackages) throws RMQJMSException {",
      "1188:             Class<?> messageClass = Class.forName(messageClazz, true, Thread.currentThread().getContextClassLoader());",
      "1190:             return (RMQMessage) constructor.newInstance(trustedPackages);",
      "",
      "---------------"
    ],
    "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java||src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java": [
      "File: src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java -> src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: package com.rabbitmq.jms.client.message;",
      "8: import java.io.ByteArrayInputStream;",
      "9: import java.io.ByteArrayOutputStream;",
      "10: import java.io.EOFException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: import com.rabbitmq.jms.util.WhiteListObjectInputStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15: import java.io.ObjectOutputStream;",
      "16: import java.io.UTFDataFormatException;",
      "18: import javax.jms.JMSException;",
      "19: import javax.jms.MessageEOFException;",
      "20: import javax.jms.MessageFormatException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.List;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "47:     private volatile transient byte[] buf;",
      "48:     private volatile transient byte[] readbuf = null;",
      "50:     public RMQStreamMessage() {",
      "52:     }",
      "55:         this.reading = reading;",
      "56:         if (!reading) {",
      "57:             this.bout = new ByteArrayOutputStream(RMQMessage.DEFAULT_MESSAGE_BODY_SIZE);",
      "58:             try {",
      "",
      "[Removed Lines]",
      "51:         this(false);",
      "54:     private RMQStreamMessage(boolean reading) {",
      "",
      "[Added Lines]",
      "52:     private final List<String> trustedPackages;",
      "54:     public RMQStreamMessage(List<String> trustedPackages) {",
      "55:         this(false, trustedPackages);",
      "56:     }",
      "59:         this(false, WhiteListObjectInputStream.DEFAULT_TRUSTED_PACKAGES);",
      "62:     private RMQStreamMessage(boolean reading, List<String> trustedPackages) {",
      "64:         this.trustedPackages = trustedPackages;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "513:         inputStream.read(buf);",
      "514:         this.reading = true;",
      "515:         this.bin = new ByteArrayInputStream(buf);",
      "517:     }",
      "519:     @Override",
      "",
      "[Removed Lines]",
      "516:         this.in = new ObjectInputStream(this.bin);",
      "",
      "[Added Lines]",
      "525:         this.in = new WhiteListObjectInputStream(this.bin, this.trustedPackages);",
      "",
      "---------------"
    ],
    "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java": [
      "File: src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java -> src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: public class ObjectMessageSerializationIT extends AbstractITQueue {",
      "30:     private static final long TEST_RECEIVE_TIMEOUT = 1000; // one second",
      "31:     private static final java.util.List<String> TRUSTED_PACKAGES = Arrays.asList(\"java.lang\", \"com.rabbitmq.jms\");",
      "",
      "[Removed Lines]",
      "29:     private static final String QUEUE_NAME = \"test.queue.\" + SimpleQueueMessageDefaultsIT.class.getCanonicalName();",
      "",
      "[Added Lines]",
      "29:     private static final String QUEUE_NAME = \"test.queue.\" + ObjectMessageSerializationIT.class.getCanonicalName();",
      "",
      "---------------"
    ],
    "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java": [
      "File: src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java -> src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: package com.rabbitmq.integration.tests;",
      "8: import static org.junit.jupiter.api.Assertions.assertEquals;",
      "9: import static org.junit.jupiter.api.Assertions.assertThrows;",
      "10: import static org.junit.jupiter.api.Assertions.fail;",
      "12: import com.rabbitmq.jms.admin.RMQConnectionFactory;",
      "13: import com.rabbitmq.jms.client.message.RMQStreamMessage;",
      "14: import com.rabbitmq.jms.client.message.TestMessages;",
      "15: import com.rabbitmq.jms.util.RMQJMSException;",
      "16: import java.awt.Color;",
      "17: import java.lang.reflect.Method;",
      "18: import java.util.Arrays;",
      "19: import java.util.HashMap;",
      "20: import java.util.Map;",
      "21: import javax.jms.Queue;",
      "22: import javax.jms.QueueReceiver;",
      "23: import javax.jms.QueueSender;",
      "24: import javax.jms.QueueSession;",
      "25: import javax.jms.Session;",
      "26: import javax.jms.StreamMessage;",
      "27: import org.junit.jupiter.api.Test;",
      "29: public class StreamMessageSerializationIT extends AbstractITQueue {",
      "31:     private static final String QUEUE_NAME = \"test.queue.\" + StreamMessageSerializationIT.class.getCanonicalName();",
      "32:     private static final long TEST_RECEIVE_TIMEOUT = 1000; // one second",
      "33:     private static final java.util.List<String> TRUSTED_PACKAGES = Arrays.asList(\"java.lang\", \"com.rabbitmq.jms\");",
      "35:     @Override",
      "36:     protected void customise(RMQConnectionFactory connectionFactory) {",
      "37:         super.customise(connectionFactory);",
      "38:         connectionFactory.setTrustedPackages(TRUSTED_PACKAGES);",
      "39:     }",
      "41:     protected void testReceiveStreamMessageWithValue(Object value) throws Exception {",
      "42:         try {",
      "43:             queueConn.start();",
      "44:             QueueSession queueSession = queueConn.createQueueSession(false, Session.DUPS_OK_ACKNOWLEDGE);",
      "45:             Queue queue = queueSession.createQueue(QUEUE_NAME);",
      "47:             drainQueue(queueSession, queue);",
      "49:             QueueSender queueSender = queueSession.createSender(queue);",
      "50:             StreamMessage message = (StreamMessage) MessageTestType.STREAM.gen(queueSession, null);",
      "56:             Method writeObjectMethod = RMQStreamMessage.class",
      "57:                 .getDeclaredMethod(\"writeObject\", Object.class, boolean.class);",
      "58:             writeObjectMethod.setAccessible(true);",
      "59:             writeObjectMethod.invoke(message, value, true);",
      "61:             queueSender.send(message);",
      "62:         } finally {",
      "63:             reconnect(Arrays.asList(\"java.lang\", \"com.rabbitmq.jms\"));",
      "64:         }",
      "66:         queueConn.start();",
      "67:         QueueSession queueSession = queueConn.createQueueSession(false, Session.DUPS_OK_ACKNOWLEDGE);",
      "68:         Queue queue = queueSession.createQueue(QUEUE_NAME);",
      "69:         QueueReceiver queueReceiver = queueSession.createReceiver(queue);",
      "70:         RMQStreamMessage m = (RMQStreamMessage) queueReceiver.receive(TEST_RECEIVE_TIMEOUT);",
      "71:         MessageTestType.STREAM.check(m, null);",
      "72:         assertEquals(m.readObject(), value);",
      "73:     }",
      "75:     @Test",
      "76:     public void testReceiveStreamMessageWithPrimitiveValue() throws Exception {",
      "77:         testReceiveStreamMessageWithValue(1024L);",
      "78:         testReceiveStreamMessageWithValue(\"a string\");",
      "79:     }",
      "81:     @Test",
      "82:     public void testReceiveStreamMessageWithTrustedValue() throws Exception {",
      "83:         testReceiveStreamMessageWithValue(new TestMessages.TestSerializable(8, \"An object\"));",
      "84:     }",
      "86:     @Test",
      "87:     public void testReceiveStreamMessageWithUntrustedValue1() throws Exception {",
      "91:         assertThrows(RMQJMSException.class, () -> {",
      "92:             Map<String, String> m = new HashMap<String, String>();",
      "93:             m.put(\"key\", \"value\");",
      "94:             testReceiveStreamMessageWithValue(m);",
      "95:         });",
      "96:     }",
      "97:     @Test",
      "98:     public void testReceiveStreamMessageWithUntrustedValue2() throws Exception {",
      "102:         assertThrows(RMQJMSException.class, () -> {",
      "103:             testReceiveStreamMessageWithValue(Color.WHITE);",
      "104:         });",
      "105:     }",
      "107:     protected void reconnect(java.util.List<String> trustedPackages) throws Exception {",
      "108:         if (queueConn != null) {",
      "109:             this.queueConn.close();",
      "110:             ((RMQConnectionFactory) connFactory).setTrustedPackages(trustedPackages);",
      "111:             this.queueConn = connFactory.createQueueConnection();",
      "112:         } else {",
      "113:             fail(\"Cannot reconnect\");",
      "114:         }",
      "115:     }",
      "116: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cd5d06a4d3520baf50adf38cc5b8b34cbfbc4ab",
      "candidate_info": {
        "commit_hash": "7cd5d06a4d3520baf50adf38cc5b8b34cbfbc4ab",
        "repo": "rabbitmq/rabbitmq-jms-client",
        "commit_url": "https://github.com/rabbitmq/rabbitmq-jms-client/commit/7cd5d06a4d3520baf50adf38cc5b8b34cbfbc4ab",
        "files": [
          "src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
          "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
          "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
          "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java"
        ],
        "message": "Use trusted packages in StreamMessage\n\nStreamMessage now uses the same \"white list\" mechanism as\nObjectMessage to avoid some arbitrary code execution on deserialization.\n\nEven though StreamMessage is supposed to handle only primitive types,\nit is still to possible to send a message that contains an arbitrary\nserializable instance. The consuming application application may\nthen execute code from this class on deserialization.\n\nThe fix consists in using the list of trusted packages that can be\nset at the connection factory level.\n\nFixes #135\n\n(cherry picked from commit f647e5dbfe055a2ca8cbb16dd70f9d50d888b638)",
        "before_after_code_files": [
          "src/main/java/com/rabbitmq/jms/client/RMQMessage.java||src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
          "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java||src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
          "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
          "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/rabbitmq/jms/client/RMQMessage.java||src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
            "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java||src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
            "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
            "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java"
          ],
          "candidate": [
            "src/main/java/com/rabbitmq/jms/client/RMQMessage.java||src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
            "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java||src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
            "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
            "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/rabbitmq/jms/client/RMQMessage.java||src/main/java/com/rabbitmq/jms/client/RMQMessage.java": [
          "File: src/main/java/com/rabbitmq/jms/client/RMQMessage.java -> src/main/java/com/rabbitmq/jms/client/RMQMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1142:     private static RMQMessage instantiateRmqMessage(String messageClass, List<String> trustedPackages) throws RMQJMSException {",
          "1143:         if(isRmqObjectMessageClass(messageClass)) {",
          "1144:             return instantiateRmqObjectMessageWithTrustedPackages(trustedPackages);",
          "1145:         } else {",
          "1146:             try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145:         } else if (isRmqStreamMessageClass(messageClass)) {",
          "1146:             return instantiateRmqStreamMessageWithTrustedPackages(trustedPackages);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1164:         return RMQObjectMessage.class.getName().equals(clazz);",
          "1165:     }",
          "1167:     private static RMQObjectMessage instantiateRmqObjectMessageWithTrustedPackages(List<String> trustedPackages) throws RMQJMSException {",
          "1168:         try {",
          "1171:             Constructor<?> constructor = messageClass.getConstructor(List.class);",
          "1173:         } catch (NoSuchMethodException e) {",
          "1174:             throw new RMQJMSException(e);",
          "1175:         } catch (InvocationTargetException e) {",
          "",
          "[Removed Lines]",
          "1170:             Class<?> messageClass = Class.forName(RMQObjectMessage.class.getName(), true, Thread.currentThread().getContextClassLoader());",
          "1172:             return (RMQObjectMessage) constructor.newInstance(trustedPackages);",
          "",
          "[Added Lines]",
          "1169:     private static boolean isRmqStreamMessageClass(String clazz) {",
          "1170:         return RMQStreamMessage.class.getName().equals(clazz);",
          "1171:     }",
          "1174:         return (RMQObjectMessage) instantiateRmqMessageWithTrustedPackages(RMQObjectMessage.class.getName(), trustedPackages);",
          "1175:     }",
          "1177:     private static RMQStreamMessage instantiateRmqStreamMessageWithTrustedPackages(List<String> trustedPackages) throws RMQJMSException {",
          "1178:         return (RMQStreamMessage) instantiateRmqMessageWithTrustedPackages(RMQStreamMessage.class.getName(), trustedPackages);",
          "1179:     }",
          "1181:     private static RMQMessage instantiateRmqMessageWithTrustedPackages(String messageClazz, List<String> trustedPackages) throws RMQJMSException {",
          "1184:             Class<?> messageClass = Class.forName(messageClazz, true, Thread.currentThread().getContextClassLoader());",
          "1186:             return (RMQMessage) constructor.newInstance(trustedPackages);",
          "",
          "---------------"
        ],
        "src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java||src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java": [
          "File: src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java -> src/main/java/com/rabbitmq/jms/client/message/RMQStreamMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: package com.rabbitmq.jms.client.message;",
          "4: import java.io.ByteArrayInputStream;",
          "5: import java.io.ByteArrayOutputStream;",
          "6: import java.io.EOFException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import com.rabbitmq.jms.util.WhiteListObjectInputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: import java.io.ObjectOutputStream;",
          "12: import java.io.UTFDataFormatException;",
          "14: import javax.jms.JMSException;",
          "15: import javax.jms.MessageEOFException;",
          "16: import javax.jms.MessageFormatException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     private volatile transient byte[] buf;",
          "44:     private volatile transient byte[] readbuf = null;",
          "46:     public RMQStreamMessage() {",
          "48:     }",
          "51:         this.reading = reading;",
          "52:         if (!reading) {",
          "53:             this.bout = new ByteArrayOutputStream(RMQMessage.DEFAULT_MESSAGE_BODY_SIZE);",
          "54:             try {",
          "",
          "[Removed Lines]",
          "47:         this(false);",
          "50:     private RMQStreamMessage(boolean reading) {",
          "",
          "[Added Lines]",
          "48:     private final List<String> trustedPackages;",
          "50:     public RMQStreamMessage(List<String> trustedPackages) {",
          "51:         this(false, trustedPackages);",
          "52:     }",
          "55:         this(false, WhiteListObjectInputStream.DEFAULT_TRUSTED_PACKAGES);",
          "58:     private RMQStreamMessage(boolean reading, List<String> trustedPackages) {",
          "60:         this.trustedPackages = trustedPackages;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:         inputStream.read(buf);",
          "510:         this.reading = true;",
          "511:         this.bin = new ByteArrayInputStream(buf);",
          "513:     }",
          "515:     @Override",
          "",
          "[Removed Lines]",
          "512:         this.in = new ObjectInputStream(this.bin);",
          "",
          "[Added Lines]",
          "521:         this.in = new WhiteListObjectInputStream(this.bin, this.trustedPackages);",
          "",
          "---------------"
        ],
        "src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java": [
          "File: src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java -> src/test/java/com/rabbitmq/integration/tests/ObjectMessageSerializationIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: public class ObjectMessageSerializationIT extends AbstractITQueue {",
          "26:     private static final long TEST_RECEIVE_TIMEOUT = 1000; // one second",
          "27:     private static final java.util.List<String> TRUSTED_PACKAGES = Arrays.asList(\"java.lang\", \"com.rabbitmq.jms\");",
          "",
          "[Removed Lines]",
          "25:     private static final String QUEUE_NAME = \"test.queue.\" + SimpleQueueMessageDefaultsIT.class.getCanonicalName();",
          "",
          "[Added Lines]",
          "25:     private static final String QUEUE_NAME = \"test.queue.\" + ObjectMessageSerializationIT.class.getCanonicalName();",
          "",
          "---------------"
        ],
        "src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java||src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java": [
          "File: src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java -> src/test/java/com/rabbitmq/integration/tests/StreamMessageSerializationIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: package com.rabbitmq.integration.tests;",
          "8: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "9: import static org.junit.jupiter.api.Assertions.assertThrows;",
          "10: import static org.junit.jupiter.api.Assertions.fail;",
          "12: import com.rabbitmq.jms.admin.RMQConnectionFactory;",
          "13: import com.rabbitmq.jms.client.message.RMQStreamMessage;",
          "14: import com.rabbitmq.jms.client.message.TestMessages;",
          "15: import com.rabbitmq.jms.util.RMQJMSException;",
          "16: import java.awt.Color;",
          "17: import java.lang.reflect.Method;",
          "18: import java.util.Arrays;",
          "19: import java.util.HashMap;",
          "20: import java.util.Map;",
          "21: import javax.jms.Queue;",
          "22: import javax.jms.QueueReceiver;",
          "23: import javax.jms.QueueSender;",
          "24: import javax.jms.QueueSession;",
          "25: import javax.jms.Session;",
          "26: import javax.jms.StreamMessage;",
          "27: import org.junit.jupiter.api.Test;",
          "29: public class StreamMessageSerializationIT extends AbstractITQueue {",
          "31:     private static final String QUEUE_NAME = \"test.queue.\" + StreamMessageSerializationIT.class.getCanonicalName();",
          "32:     private static final long TEST_RECEIVE_TIMEOUT = 1000; // one second",
          "33:     private static final java.util.List<String> TRUSTED_PACKAGES = Arrays.asList(\"java.lang\", \"com.rabbitmq.jms\");",
          "35:     @Override",
          "36:     protected void customise(RMQConnectionFactory connectionFactory) {",
          "37:         super.customise(connectionFactory);",
          "38:         connectionFactory.setTrustedPackages(TRUSTED_PACKAGES);",
          "39:     }",
          "41:     protected void testReceiveStreamMessageWithValue(Object value) throws Exception {",
          "42:         try {",
          "43:             queueConn.start();",
          "44:             QueueSession queueSession = queueConn.createQueueSession(false, Session.DUPS_OK_ACKNOWLEDGE);",
          "45:             Queue queue = queueSession.createQueue(QUEUE_NAME);",
          "47:             drainQueue(queueSession, queue);",
          "49:             QueueSender queueSender = queueSession.createSender(queue);",
          "50:             StreamMessage message = (StreamMessage) MessageTestType.STREAM.gen(queueSession, null);",
          "56:             Method writeObjectMethod = RMQStreamMessage.class",
          "57:                 .getDeclaredMethod(\"writeObject\", Object.class, boolean.class);",
          "58:             writeObjectMethod.setAccessible(true);",
          "59:             writeObjectMethod.invoke(message, value, true);",
          "61:             queueSender.send(message);",
          "62:         } finally {",
          "63:             reconnect(Arrays.asList(\"java.lang\", \"com.rabbitmq.jms\"));",
          "64:         }",
          "66:         queueConn.start();",
          "67:         QueueSession queueSession = queueConn.createQueueSession(false, Session.DUPS_OK_ACKNOWLEDGE);",
          "68:         Queue queue = queueSession.createQueue(QUEUE_NAME);",
          "69:         QueueReceiver queueReceiver = queueSession.createReceiver(queue);",
          "70:         RMQStreamMessage m = (RMQStreamMessage) queueReceiver.receive(TEST_RECEIVE_TIMEOUT);",
          "71:         MessageTestType.STREAM.check(m, null);",
          "72:         assertEquals(m.readObject(), value);",
          "73:     }",
          "75:     @Test",
          "76:     public void testReceiveStreamMessageWithPrimitiveValue() throws Exception {",
          "77:         testReceiveStreamMessageWithValue(1024L);",
          "78:         testReceiveStreamMessageWithValue(\"a string\");",
          "79:     }",
          "81:     @Test",
          "82:     public void testReceiveStreamMessageWithTrustedValue() throws Exception {",
          "83:         testReceiveStreamMessageWithValue(new TestMessages.TestSerializable(8, \"An object\"));",
          "84:     }",
          "86:     @Test",
          "87:     public void testReceiveStreamMessageWithUntrustedValue1() throws Exception {",
          "91:         assertThrows(RMQJMSException.class, () -> {",
          "92:             Map<String, String> m = new HashMap<String, String>();",
          "93:             m.put(\"key\", \"value\");",
          "94:             testReceiveStreamMessageWithValue(m);",
          "95:         });",
          "96:     }",
          "97:     @Test",
          "98:     public void testReceiveStreamMessageWithUntrustedValue2() throws Exception {",
          "102:         assertThrows(RMQJMSException.class, () -> {",
          "103:             testReceiveStreamMessageWithValue(Color.WHITE);",
          "104:         });",
          "105:     }",
          "107:     protected void reconnect(java.util.List<String> trustedPackages) throws Exception {",
          "108:         if (queueConn != null) {",
          "109:             this.queueConn.close();",
          "110:             ((RMQConnectionFactory) connFactory).setTrustedPackages(trustedPackages);",
          "111:             this.queueConn = connFactory.createQueueConnection();",
          "112:         } else {",
          "113:             fail(\"Cannot reconnect\");",
          "114:         }",
          "115:     }",
          "116: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}