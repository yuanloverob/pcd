{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47702707c83da6fe850d07b72caec86afdff035d",
      "candidate_info": {
        "commit_hash": "47702707c83da6fe850d07b72caec86afdff035d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/47702707c83da6fe850d07b72caec86afdff035d",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ],
        "message": "PDFBOX-4997: treat non-COSUpdateInfo objects as isNeedToBeUpdated == false, as suggested by Michael Klink\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882703 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:                 cosBase = keyObject.get(cosObjectKey);",
          "522:             }",
          "523:             if (actual != null && objectKeys.containsKey(actual)",
          "526:             {",
          "527:                 return;",
          "528:             }",
          "",
          "[Removed Lines]",
          "524:                     && object instanceof COSUpdateInfo && !((COSUpdateInfo)object).isNeedToBeUpdated()",
          "525:                     && cosBase instanceof COSUpdateInfo && !((COSUpdateInfo)cosBase).isNeedToBeUpdated() )",
          "",
          "[Added Lines]",
          "524:                     && !isNeedToBeUpdated(object) && !isNeedToBeUpdated(cosBase))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535:         }",
          "536:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:     private boolean isNeedToBeUpdated(COSBase base)",
          "543:     {",
          "544:         if (base instanceof COSUpdateInfo)",
          "545:         {",
          "546:             return ((COSUpdateInfo) base).isNeedToBeUpdated();",
          "547:         }",
          "548:         return false;",
          "549:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8826466c3daa4460b893ee39243ee5dfc4993df2",
      "candidate_info": {
        "commit_hash": "8826466c3daa4460b893ee39243ee5dfc4993df2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8826466c3daa4460b893ee39243ee5dfc4993df2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ],
        "message": "PDFBOX-4984: respect different quadding for merged field/widget dicts as suggested by Gon\u00e7alo Santos\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882587 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:                                                     .width(contentRect.getWidth())",
          "574:                                                     .wrapLines(isMultiLine())",
          "575:                                                     .initialOffset(x, y)",
          "577:                                                     .build();",
          "578:             formatter.format();",
          "579:         }",
          "",
          "[Removed Lines]",
          "576:                                                     .textAlign(field.getQ())",
          "",
          "[Added Lines]",
          "576:                                                     .textAlign(getTextAlign(widget))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "583:         contents.close();",
          "584:     }",
          "586:     private AffineTransform calculateMatrix(PDRectangle bbox, int rotation)",
          "587:     {",
          "588:         if (rotation == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:     private int getTextAlign(PDAnnotationWidget widget)",
          "587:     {",
          "589:         return widget.getCOSObject().getInt(COSName.Q, field.getQ());",
          "590:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8c96938523d8c9251ebd984a75a2b7990249443",
      "candidate_info": {
        "commit_hash": "e8c96938523d8c9251ebd984a75a2b7990249443",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e8c96938523d8c9251ebd984a75a2b7990249443",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ],
        "message": "PDFBOX-4892: remove double code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890710 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:         }",
          "246:     }",
          "248:     private void parseBegincodespacerange(Number cosCount, PushbackInputStream cmapStream, CMap result) throws IOException",
          "249:     {",
          "250:         for (int j = 0; j < cosCount.intValue(); j++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     private void checkExpectedOperator(Operator operator, String expectedOperatorName, String rangeName) throws IOException",
          "259:     {",
          "260:         if (!operator.op.equals(expectedOperatorName))",
          "261:         {",
          "262:             throw new IOException(\"Error : ~\" + rangeName + \" contains an unexpected operator : \"",
          "263:                     + operator.op);",
          "264:         }",
          "265:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:             Object nextToken = parseNextToken(cmapStream);",
          "253:             if (nextToken instanceof Operator)",
          "254:             {",
          "260:                 break;",
          "261:             }",
          "262:             byte[] startRange = (byte[]) nextToken;",
          "",
          "[Removed Lines]",
          "255:                 if (!((Operator) nextToken).op.equals(\"endcodespacerange\"))",
          "256:                 {",
          "257:                     throw new IOException(\"Error : ~codespacerange contains an unexpected operator : \"",
          "258:                             + ((Operator) nextToken).op);",
          "259:                 }",
          "",
          "[Added Lines]",
          "274:                 checkExpectedOperator((Operator) nextToken, \"endcodespacerange\", \"codespacerange\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:             Object nextToken = parseNextToken(cmapStream);",
          "280:             if (nextToken instanceof Operator)",
          "281:             {",
          "287:                 break;",
          "288:             }",
          "289:             byte[] inputCode = (byte[]) nextToken;",
          "",
          "[Removed Lines]",
          "282:                 if (!((Operator) nextToken).op.equals(\"endbfchar\"))",
          "283:                 {",
          "284:                     throw new IOException(\"Error : ~bfchar contains an unexpected operator : \"",
          "285:                             + ((Operator) nextToken).op);",
          "286:                 }",
          "",
          "[Added Lines]",
          "297:                 checkExpectedOperator((Operator) nextToken, \"endbfchar\", \"bfchar\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:             Object nextToken = parseNextToken(cmapStream);",
          "314:             if (nextToken instanceof Operator)",
          "315:             {",
          "321:                 break;",
          "322:             }",
          "323:             byte[] startCode = (byte[]) nextToken;",
          "",
          "[Removed Lines]",
          "316:                 if (!((Operator) nextToken).op.equals(\"endcidrange\"))",
          "317:                 {",
          "318:                     throw new IOException(\"Error : ~cidrange contains an unexpected operator : \"",
          "319:                             + ((Operator) nextToken).op);",
          "320:                 }",
          "",
          "[Added Lines]",
          "327:                 checkExpectedOperator((Operator) nextToken, \"endcidrange\", \"cidrange\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:             Object nextToken = parseNextToken(cmapStream);",
          "359:             if (nextToken instanceof Operator)",
          "360:             {",
          "366:                 break;",
          "367:             }",
          "368:             byte[] inputCode = (byte[]) nextToken;",
          "",
          "[Removed Lines]",
          "361:                 if (!((Operator) nextToken).op.equals(\"endcidchar\"))",
          "362:                 {",
          "363:                     throw new IOException(\"Error : ~cidchar contains an unexpected operator : \"",
          "364:                             + ((Operator) nextToken).op);",
          "365:                 }",
          "",
          "[Added Lines]",
          "368:                 checkExpectedOperator((Operator) nextToken, \"endcidchar\", \"cidchar\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "379:             Object nextToken = parseNextToken(cmapStream);",
          "380:             if (nextToken instanceof Operator)",
          "381:             {",
          "387:                 break;",
          "388:             }",
          "389:             byte[] startCode = (byte[]) nextToken;",
          "",
          "[Removed Lines]",
          "382:                 if (!((Operator) nextToken).op.equals(\"endbfrange\"))",
          "383:                 {",
          "384:                     throw new IOException(\"Error : ~bfrange contains an unexpected operator : \"",
          "385:                             + ((Operator) nextToken).op);",
          "386:                 }",
          "",
          "[Added Lines]",
          "385:                 checkExpectedOperator((Operator) nextToken, \"endbfrange\", \"bfrange\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16b035d1f40f46eaf23d37b34d72b82c786a6a24",
      "candidate_info": {
        "commit_hash": "16b035d1f40f46eaf23d37b34d72b82c786a6a24",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/16b035d1f40f46eaf23d37b34d72b82c786a6a24",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java"
        ],
        "message": "PDFBOX-5183: add suppressDuplicateOverlappingText getter / setter\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889452 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java -> pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: public class PDFMarkedContentExtractor extends LegacyPDFStreamEngine",
          "42: {",
          "44:     private final List<PDMarkedContent> markedContents = new ArrayList<PDMarkedContent>();",
          "45:     private final Deque<PDMarkedContent> currentMarkedContents = new ArrayDeque<PDMarkedContent>();",
          "46:     private final Map<String, List<TextPosition>> characterListMapping = new HashMap<String, List<TextPosition>>();",
          "",
          "[Removed Lines]",
          "43:     private final boolean suppressDuplicateOverlappingText = true;",
          "",
          "[Added Lines]",
          "43:     private boolean suppressDuplicateOverlappingText = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     public boolean isSuppressDuplicateOverlappingText()",
          "75:     {",
          "76:         return suppressDuplicateOverlappingText;",
          "77:     }",
          "87:     public void setSuppressDuplicateOverlappingText(boolean suppressDuplicateOverlappingText)",
          "88:     {",
          "89:         this.suppressDuplicateOverlappingText = suppressDuplicateOverlappingText;",
          "90:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7b6a5e02515b60e6dec0bf34b5252cb9e5ef619",
      "candidate_info": {
        "commit_hash": "d7b6a5e02515b60e6dec0bf34b5252cb9e5ef619",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d7b6a5e02515b60e6dec0bf34b5252cb9e5ef619",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java"
        ],
        "message": "PDFBOX-4892: improve javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891928 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java"
        ]
      }
    }
  ]
}